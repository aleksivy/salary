Перем СведенияОПоставщике,  КодЯзыкаПечать;

Перем мНастройкаПериода;

Перем СписокПервички;

Перем СписокРеглОтчетов;

Перем мСписокВыбораСпецРежимНалогообложения; 

Перем УчетПоОбособленнымПодразделениям;

Перем мВалютаРегламентированногоУчета;

Перем КоличествоДокументов,  КоличествоДокументовСчет,  КоличествоДокументовАкт,  КоличествоДокументовНН,  КоличествоДокументовДод2,  КоличествоДокументовЗапит,  
КоличествоОтправленных, КоличествоДокументовВозвратТоваровОтПокупателя;

Перем ИмяБазы;

Перем ЮрикФизик, ЮрикФизикОтчет;

Перем Юрлицо;

Перем СтрокаРегистрации;

Перем Н;

Перем СтрокаДокументов,  СтрокаОтчетов;

Перем ПерезаписьДокументов;

Перем МедКомпонент,  ИмяПлагина;

Перем wshShell,  WshExec; 

Перем СправочникМедок,  Справочник1С,  СправочникМедокЧитабельноеНазвание;

Перем СправочникМедокГруппа;

Перем мСписокГруппШаблоновМедок;

Перем мСписокШаблоновМедок;

Перем СуффиксДСС;

Перем СуффиксДФС; 

Перем СуффиксЕО;

Перем СуффиксФСС;

Перем ТекстОтменыДокумента;

Перем СписокДляОткрытия;

Перем ОбратитесьКРазработчику;

Перем ОтменаПередачиНН;
Перем ИННПокупателя, Покупатель, КонтрНаименование,	КонтрЕДРПОУ, КонтрИНН, КонтрАдр, КонтрТлф;
//-----------------------------------------------------------------------------------------------

Функция ПолучитьТекстОшибки( Инфо )
	Возврат "Ошибка!" + Символы.ПС + 
			"Описание='" + Инфо.Описание + "'" + Символы.ПС + 
			"ИмяМодуля='" + Инфо.ИмяМодуля + "'" + Символы.ПС + 
			"НомерСтроки=" + Инфо.НомерСтроки + Символы.ПС + 
			"ИсходнаяСтрока='" + СокрЛП(Инфо.ИсходнаяСтрока) + "'";
КонецФункции

Функция ПолучитьНомерБезНулей(Документ)
	НомерБезПрефикса  =  СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(Документ));
	Если СтрДлина(НомерБезПрефикса) > 7 Тогда
		НомерБезПрефикса = Прав(НомерБезПрефикса, 7);
		Пока Лев(НомерБезПрефикса, 1) = "0" Цикл
			НомерБезПрефикса = Сред(НомерБезПрефикса, 2);
		КонецЦикла;
	КонецЕсли;	
	
	Возврат НомерБезПрефикса;
КонецФункции

Функция ПолучитьИмяБазы()
	
	ИмяБазы = Метаданные.Имя;
	Если 	  Найти(ИмяБазы, "БухгалтерияДляУкраины") = 1 Тогда ИмяБазы = "БУ"
	ИначеЕсли Найти(ИмяБазы, "УправлениеПроизводственнымПредприятиемДляУкраины") = 1 Тогда  ИмяБазы = "УПП"
	ИначеЕсли Найти(ИмяБазы, "УправлениеТорговымПредприятиемДляУкраины") = 1 Тогда ИмяБазы = "УТП"
	ИначеЕсли Найти(ИмяБазы, "УправлениеТорговлейДляУкраины") = 1 Тогда ИмяБазы = "УТ"
	ИначеЕсли Найти(ИмяБазы, "БухгалтерияСельскохозяйственногоПредприятия") = 1 Тогда  ИмяБазы="БухгалтерияСельскохозяйственногоПредприятия"
	ИначеЕсли Найти(ИмяБазы, "БухгалтерияСтроительнойОрганизации") = 1 Тогда ИмяБазы = "БухгалтерияСтроительнойОрганизации"
	КонецЕсли;
	Возврат ИмяБазы;
	
КонецФункции

Функция ПолучитьСуммуДокументаСНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина)

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаДокумента = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("Сумма");
		Если (ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента))
		   И (ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента))
		   И (ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти))
		   И (ДокументОбъект.УчитыватьНДС)
		   И (Не ДокументОбъект.СуммаВключаетНДС) Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
		КонецЕсли; 
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если НеУчитыватьТару и ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ВыданныеАвансы" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ДенежныеСредства" Тогда
				Продолжить;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("Сумма");
				Если (ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента))
					И (ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента))
					И (ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя))
					И (ДокументОбъект.УчитыватьНДС)
					И (Не ДокументОбъект.СуммаВключаетНДС) Тогда
					СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		Если ЕстьРеквизитДокумента("Сумма", МетаданныеДокумента) Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект.Сумма;
			Если (ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента))
				И (ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента))
				И (ЕстьРеквизитДокумента("СуммаНДС", МетаданныеДокумента))
				И (ДокументОбъект.УчитыватьНДС)
				И (Не ДокументОбъект.СуммаВключаетНДС) Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат СуммаДокумента;

КонецФункции // ПолучитьСуммуДокументаСНДС()

Функция ПолучитьРасшифровкуСтатуса(Статус)  
	
	Перем Стр2;  
	
	Если Статус = "0" Тогда Стр2 = НСтр("ru = 'Готовится';uk = 'Готується'");
	ИначеЕсли Статус = "1" Тогда Стр2 = НСтр("ru = 'Подписан бухгалтером';uk = 'Підписаний бухгалтером'");
	ИначеЕсли Статус = "2" Тогда Стр2 = НСтр("ru = 'Подписан директором';uk = 'Підписаний директором'");
	ИначеЕсли Статус = "3" Тогда Стр2 = НСтр("ru = 'Подписан печатью';uk = 'Підписаний печаткою'");
	ИначеЕсли Статус = "4" Тогда Стр2 = НСтр("ru = 'Отправлен';uk = 'Відправлений'");
	ИначеЕсли Статус = "6" Тогда Стр2 = НСтр("ru = 'Получено сообщение';uk = 'Отримано повідомлення'"); 
	ИначеЕсли Статус = "9" Тогда Стр2 = НСтр("ru = 'Принято';uk = 'Прийнято'"); 
	ИначеЕсли Статус = "10" Тогда Стр2 = НСтр("ru = 'Не принято';uk = 'Не прийнято'");
	ИначеЕсли Статус = "11" Тогда Стр2 = НСтр("ru = 'Ошибка отправки';uk = 'Помилка відправки'"); 
	ИначеЕсли Статус = "12" Тогда Стр2 = НСтр("ru = 'На подпись';uk = 'На підпис'");
	ИначеЕсли Статус = "13" Тогда Стр2 = НСтр("ru = 'Архив';uk = 'Архів'");
	ИначеЕсли Статус = "14" Тогда Стр2 = НСтр("ru = 'Получено';uk = 'Отримано'"); 
	ИначеЕсли Статус = "15" Тогда Стр2 = НСтр("ru = 'Импортирован';uk = 'Імпортований'");
	ИначеЕсли Статус = "16" Тогда Стр2 = НСтр("ru = 'Отклонен контрагентом';uk = 'Відхилено контрагентом'");
	ИначеЕсли Статус = "17" Тогда Стр2 = НСтр("ru = 'Подписан сотрудником';uk = 'Підписаний співробітником'"); 
	ИначеЕсли Статус = "19" Тогда Стр2 = НСтр("ru = 'Доставлено контрагенту';uk = 'Доставлено контрагенту'");	
	ИначеЕсли Статус = "20" Тогда Стр2 = НСтр("ru = 'Утвержден контрагеном';uk = 'Затверджено контрагентом'");
	ИначеЕсли Статус = "32" Тогда Стр2 = НСтр("ru = 'Доставка контрагенту невозможна';uk = 'Доставка контрагенту неможлива'");	
	КонецЕсли;  

	Возврат Стр2; 	
	
КонецФункции

Функция ПроверитьСтатусПоИД(Статус2)
	
	Перем Стр3;
	
	Если Статус2 = "1" Тогда Стр3 = НСтр("ru = 'Черновик';uk = 'Чернетка'");
	ИначеЕсли  Статус2 = "2" Тогда Стр3 = НСтр("ru = 'Правильный';uk = 'Правильний'");	
	ИначеЕсли  Статус2 = "3" Тогда Стр3 = НСтр("ru = 'Ошибочный';uk = 'Помилковий'");
	ИначеЕсли  Статус2 = "4" Тогда Стр3 = НСтр("ru = 'Импортирован';uk = 'Імпортований'");
	ИначеЕсли  Статус2 = "5" Тогда Стр3 = НСтр("ru = 'Копия';uk = 'Копія'");
	ИначеЕсли  Статус2 = "6" Тогда Стр3 = НСтр("ru = 'Отправленный';uk = 'Відправлений'");
	ИначеЕсли  Статус2 = "7" Тогда Стр3 = НСтр("ru = 'Контроль отключен';uk = 'Контроль відключений'");
	КонецЕсли;
	Возврат Стр3;	
	
КонецФункции

Функция ПроверитьМесяц(МесяцОтчета)
	
	Перем Мес; 	
	Если МесяцОтчета = "1" Тогда Мес = НСтр("ru = 'Январь';uk = 'Січень'");
	ИначеЕсли  МесяцОтчета = "2" Тогда Мес = НСтр("ru = 'Февраль';uk = 'Лютий'");	
	ИначеЕсли  МесяцОтчета = "3" Тогда Мес = НСтр("ru = 'Март';uk = 'Березень'");	
	ИначеЕсли  МесяцОтчета = "4" Тогда Мес = НСтр("ru = 'Апрель';uk = 'Квітень'");	
	ИначеЕсли  МесяцОтчета = "5" Тогда Мес = НСтр("ru = 'Май';uk = 'Травень'");	
	ИначеЕсли  МесяцОтчета = "6" Тогда Мес = НСтр("ru = 'Июнь';uk = 'Червень'");	
	ИначеЕсли  МесяцОтчета = "7" Тогда Мес = НСтр("ru = 'Июль';uk = 'Липень");	
	ИначеЕсли  МесяцОтчета = "8" Тогда Мес = НСтр("ru = 'Август';uk = 'Серпень'");	
	ИначеЕсли  МесяцОтчета = "9" Тогда Мес = НСтр("ru = 'Сентябрь';uk = 'Вересень'");	
	ИначеЕсли  МесяцОтчета = "10" Тогда Мес = НСтр("ru = 'Октябрь';uk = 'Жовтень'");	
	ИначеЕсли  МесяцОтчета = "11" Тогда Мес = НСтр("ru = 'Ноябрь';uk = 'Листопад'");	
	ИначеЕсли  МесяцОтчета = "12" Тогда Мес = НСтр("ru = 'Декабрь';uk = 'Грудень'");		
	КонецЕсли;
	Возврат Мес;	
	
КонецФункции

Функция НайтиОрганизациюПоИНН(ИННОрганизации,ЕДРПОУОрганизации)   
	
	Перем ОрганизацияПоКоду; 
	
	Если НЕ ИмяБазы = "УТ" Тогда
		Запрос  =  Новый Запрос;   				
		Запрос.Текст  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КодыОрганизацииСрезПоследних.Организация,
		|	КодыОрганизацииСрезПоследних.ИНН,
		|	КодыОрганизацииСрезПоследних.КодПоЕДРПОУ
		|ИЗ
		|	РегистрСведений.КодыОрганизации.СрезПоследних(&НаДату, ) КАК КодыОрганизацииСрезПоследних
		|ГДЕ
		|	КодыОрганизацииСрезПоследних.ИНН = &ИНН
		|	И (КодыОрганизацииСрезПоследних.КодПоЕДРПОУ = &КодПоЕДРПОУ
		|	ИЛИ &КодПоЕДРПОУ = """")";
		Запрос.УстановитьПараметр("НаДату",  ТекущаяДата());
		Запрос.УстановитьПараметр("ИНН",  ИННОрганизации); 
		Запрос.УстановитьПараметр("КодПоЕДРПОУ", ЕДРПОУОрганизации);        
		
		Выборка  =  Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// Если только код нужен,  то так должно сработать:
			КодОрганизации  =  Выборка.Организация.Код;
			ОрганизацияПоКоду = Выборка.Организация;
			// И если нужен весь объект организации,  то можно его сразу получить:
			//Организация  =  Выборка.Организация.ПолучитьОбъект();
		КонецЕсли;  
	Иначе
		Запрос  =  Новый Запрос;   				
		Запрос.Текст  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.*
		|ИЗ
		|	Справочник.Организации КАК Организации 
		|ГДЕ
		|	Организации.ИНН  =  &ИНН
		| 	И (Организации.КодПоЕДРПОУ = &КодПоЕДРПОУ
		|	ИЛИ &КодПоЕДРПОУ = """")"; 
		Запрос.УстановитьПараметр("ИНН",  ИННОрганизации);
		Запрос.УстановитьПараметр("КодПоЕДРПОУ", ЕДРПОУОрганизации);        
		
		Выборка  =  Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			 КодОрганизации  =  Выборка.Код;
			 ОрганизацияПоКоду = Выборка.Ссылка;
		 КонецЕсли;
	КонецЕсли;
	
	//ОрганизацияПоКоду  =  Справочники.Организации.НайтиПоКоду(КодОрганизации);

	Возврат ОрганизацияПоКоду;
	
КонецФункции

Функция ПолучитьКонтрагента(ИННПродавца,ФилиалПродавца)
	
	Запрос  =  Новый Запрос;   				
	Запрос.Текст  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.ИНН,
	|	Контрагенты.Ссылка,
	|	Контрагенты.КодФилиала КАК КодФилиала
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КодФилиала = &КодФилиала
	//|			ИЛИ &КодФилиала = """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодФилиала";
	
	Запрос.УстановитьПараметр("ИНН", ИННПродавца); 
	Запрос.УстановитьПараметр("КодФилиала", ФилиалПродавца);        
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли; 
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
КонецФункции
 
Функция НайтиОрганизациюПоЕДРПОУ(ЕДРПОУОрганизации)   
	
	Перем ОрганизацияПоКоду; 
	
	Если НЕ ИмяБазы="УТ" Тогда
		Запрос  =  Новый Запрос;   				
		Запрос.Текст  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|КодыОрганизацииСрезПоследних.Организация
		|ИЗ
		|РегистрСведений.КодыОрганизации.СрезПоследних(&НаДату,  ) КАК КодыОрганизацииСрезПоследних
		|ГДЕ
		|КодыОрганизацииСрезПоследних.КодПоЕДРПОУ  =  &ЕДРПОУ"; 
		Запрос.УстановитьПараметр("НаДату",  ТекущаяДата());
		Запрос.УстановитьПараметр("ЕДРПОУ",  ЕДРПОУОрганизации);        
		Выборка  =  Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// Если только код нужен,  то так должно сработать:
			КодОрганизации  =  Выборка.Организация.Код;
			// И если нужен весь объект организации,  то можно его сразу получить:
			//Организация  =  Выборка.Организация.ПолучитьОбъект();
			//Иначе
			// Нету организации с кодом ЕДРПОУ
		КонецЕсли;
		
	Иначе
		Запрос  =  Новый Запрос;   				
		Запрос.Текст  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|Организации.*
		|ИЗ
		|Справочник.Организации КАК Организации 
		|ГДЕ
		|Организации.КодПоЕДРПОУ  =  &ЕДРПОУ"; 
		Запрос.УстановитьПараметр("ЕДРПОУ",  ЕДРПОУОрганизации);
		Выборка  =  Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КодОрганизации  =  Выборка.Код;
		КонецЕсли;
		//Запрос.УстановитьПараметр("ЕДРПОУ",  ЕДРПОУОрганизации);        
		//Выборка  =  Запрос.Выполнить().Выбрать();
		//Если Выборка.Следующий() Тогда
		//	// Если только код нужен,  то так должно сработать:
		//	КодОрганизации  =  Выборка.Код;
		//	// И если нужен весь объект организации,  то можно его сразу получить:
		//	//Организация  =  Выборка.Организация.ПолучитьОбъект();
		//	//Иначе
		//	// Нету организации с кодом ЕДРПОУ
		//КонецЕсли;   
	КонецЕсли;
	//ОрганизацияПоКоду  =  Справочники.Организации.НайтиПоКоду(КодОрганизации); //изменено на запрос
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка,
		|	Организации.Наименование
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", КодОрганизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ОрганизацияПоКоду  =  ВыборкаДетальныеЗаписи.Ссылка; 
	Иначе
		ОрганизацияПоКоду  =  Справочники.Организации.ПустаяСсылка(); 
	КонецЕсли;

	Возврат ОрганизацияПоКоду;
	
КонецФункции

Функция СоздатьНовыйДоговор(Контрагент,  Организация,  ДатаДог,  НомерДог)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Номер = &Номер
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Дата = &Дата";
	
	Запрос.УстановитьПараметр("Дата", ДатаДог);
	Запрос.УстановитьПараметр("Номер", НомерДог);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
  	
	НайденныйДоговорОбъект  =  Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	НайденныйДоговорОбъект.Наименование           =  НСтр("ru = '№" + НомерДог + " от "+ Формат(ДатаДог,  "ДФ = dd.MM.yyyy") + "';uk = '№" + НомерДог + " від "+ Формат(ДатаДог,  "ДФ = dd.MM.yyyy") + "'", Локализация.КодЯзыкаИнформационнойБазы());
	НайденныйДоговорОбъект.Дата                   =  ДатаДог;
	НайденныйДоговорОбъект.Номер                  =  НомерДог;
	НайденныйДоговорОбъект.ВедениеВзаиморасчетов  =  Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	НайденныйДоговорОбъект.ВалютаВзаиморасчетов   =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),  "ОсновнаяВалютаВзаиморасчетов");
	
	Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВалютаВзаиморасчетов) Тогда
		НайденныйДоговорОбъект.ВалютаВзаиморасчетов  =  Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	НайденныйДоговорОбъект.Организация = Организация;
	
	НайденныйДоговорОбъект.Владелец    = Контрагент;
	НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	
	НайденныйДоговорОбъект.СхемаНалоговогоУчета        =  Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.ПоПервомуСобытию;
	НайденныйДоговорОбъект.СхемаНалоговогоУчетаПоТаре  =  Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.ПоПервомуСобытию;
	//Если ИмяБазы="БУ" ИЛИ ИмяБазы="УТП" Тогда	
	//НайденныйДоговорОбъект.СложныйНалоговыйУчет         =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),  "ОсновноеЗначениеСложныйНалоговыйУчет");
	//КонецЕсли;

	Если ИмяБазы = "БУ" Тогда
		НайденныйДоговорОбъект.СложныйНалоговыйУчет         =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),  "ОсновноеЗначениеСложныйНалоговыйУчет");
		Если НайденныйДоговорОбъект.СложныйНалоговыйУчет  Тогда
			НайденныйДоговорОбъект.ВедениеВзаиморасчетовНУ  =  Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		Иначе
			НайденныйДоговорОбъект.ВедениеВзаиморасчетовНУ  =  НайденныйДоговорОбъект.ВедениеВзаиморасчетов;
		КонецЕсли;
		//ИначеЕсли ИмяБазы = "УправлениеТорговымПредприятиемДляУкраины" Тогда
	Иначе
		НайденныйДоговорОбъект.ВедениеВзаиморасчетов  =  НайденныйДоговорОбъект.ВедениеВзаиморасчетов;  
	КонецЕсли;  			
	
	ОшибкаПриЗаписиДоговора  =  Ложь;
	
	Если ИмяБазы = "БУ" Тогда
		НайденныйДоговорОбъект.ПроверитьПередЗаписью(ОшибкаПриЗаписиДоговора,  Ложь);
	Иначе
		НайденныйДоговорОбъект.ПроверитьЗаполнение(ОшибкаПриЗаписиДоговора,  Ложь);
		ОшибкаПриЗаписиДоговора  =  Истина;
	КонецЕсли;
	
	Если ОшибкаПриЗаписиДоговора тогда
		Сообщить("Не удалось записать основной договор контрагента.");
		Возврат Неопределено;
	Иначе
		НайденныйДоговорОбъект.Записать();
	КонецЕсли;
	
	НайденныйДоговор = НайденныйДоговорОбъект.Ссылка;  	
	
	Возврат НайденныйДоговор;
	
	
КонецФункции

Функция ПолучитьИлиСоздатьДокумент(Синоним,  ДатаДок,  НомерДокумента)
	
	Если Синоним  =  "Счет на оплату покупателю" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетНаОплатуПокупателю.Ссылка
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|ГДЕ
		|	СчетНаОплатуПокупателю.Дата = &Дата
		|	И СчетНаОплатуПокупателю.Номер = &Номер";
		
		Запрос.УстановитьПараметр("Дата", ДатаДок);
		Запрос.УстановитьПараметр("Номер", НомерДокумента);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;


	КонецЕсли;
КонецФункции

Функция ОпределитьТипРНН(PDate, ТипРННвОтчете)
	
	Перем ТипРНН;
	
	Если PDate<Дата(2011, 01, 01) Тогда
		Если ТипРННвОтчете="заг" Тогда ТипРНН="0";
		ИначеЕсли ТипРННвОтчете="спец" Тогда ТипРНН="1";		
		ИначеЕсли ТипРННвОтчете="сг" Тогда ТипРНН="2";		
		ИначеЕсли ТипРННвОтчете="перер" Тогда ТипРНН="4";
		КонецЕсли;
	ИначеЕсли PDate>=Дата(2011, 01, 01) и PDate<Дата(2013, 03, 01) Тогда
		Если ТипРННвОтчете="заг" Тогда ТипРНН="9";
		ИначеЕсли ТипРННвОтчете="спец" Тогда ТипРНН="10";		
		ИначеЕсли ТипРННвОтчете="сг" Тогда ТипРНН="11";		
		ИначеЕсли ТипРННвОтчете="перер" Тогда ТипРНН="12";
		КонецЕсли;
	ИначеЕсли PDate>=Дата(2013, 03, 01) Тогда
		Если ТипРННвОтчете="заг" Тогда ТипРНН="14";
		ИначеЕсли ТипРННвОтчете="спец" Тогда ТипРНН="15";		
		ИначеЕсли ТипРННвОтчете="сг" Тогда ТипРНН="16";		
		ИначеЕсли ТипРННвОтчете="перер" Тогда ТипРНН="17";
		КонецЕсли;
	КонецЕсли;	
	Возврат ТипРНН;
	
КонецФункции

Функция ОпределитьКодБланка(СравнимДату, ТипРННвОтчете, ЮрикФизикОтчет)
	
	Перем КодБланка;
	
	Если СравнимДату<Дата(2011, 01, 01) Тогда
		Если ЮрикФизикОтчет="Юрик" Тогда
			Если ТипРННвОтчете="заг" Тогда        КодБланка="J1201504";
			ИначеЕсли ТипРННвОтчете="спец" Тогда  КодБланка="J1209003";		
			ИначеЕсли ТипРННвОтчете="сг" Тогда    КодБланка="J1209404";		
			ИначеЕсли ТипРННвОтчете="перер" Тогда КодБланка="J1200804";
			КонецЕсли;
		Иначе
			КодБланка="F1201504";
		КонецЕсли;
	ИначеЕсли СравнимДату>=Дата(2011, 01, 01) и СравнимДату<Дата(2013, 03, 01) Тогда
		Если ЮрикФизикОтчет="Юрик" Тогда 			
			Если ТипРННвОтчете="заг" Тогда        КодБланка="J1201505";
			ИначеЕсли ТипРННвОтчете="спец" Тогда  КодБланка="J1209005";		
			ИначеЕсли ТипРННвОтчете="сг" Тогда    КодБланка="J1209405";		
			ИначеЕсли ТипРННвОтчете="перер" Тогда КодБланка="J1200805";
			КонецЕсли;
		Иначе
			КодБланка="F1201505";
		КонецЕсли;    		
	ИначеЕсли СравнимДату>=Дата(2013, 03, 01) Тогда
		Если ЮрикФизикОтчет="Юрик" Тогда 
			Если ТипРННвОтчете="заг" Тогда        КодБланка="J1201506";
			ИначеЕсли ТипРННвОтчете="спец" Тогда  КодБланка="J1209006";		
			ИначеЕсли ТипРННвОтчете="сг" Тогда    КодБланка="J1209406";		
			ИначеЕсли ТипРННвОтчете="перер" Тогда КодБланка="J1200806";
			КонецЕсли;
		Иначе
			КодБланка="F1201506";
		КонецЕсли; 		
	КонецЕсли;	
	
	Возврат КодБланка;
	
КонецФункции
//-----------------------------------------------------------------------------------------------
Функция ПроверитьСуществованиеДокумента(Документ,  Организация,  Покупатель,  ДатаДокаВх,  НомерДокаВх)
	
	Запрос  =  Новый Запрос();  	
	Запрос.Текст  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	 "+Документ+".Ссылка
	|ИЗ
	|	Документ."+Документ+" КАК "+Документ+"
	|ГДЕ
	|	"+Документ+".Организация  =  &Организация
	|	И "+Документ+".Контрагент  =  &Контрагент
	|   И "+Документ+".ДатаВходящегоДокумента  =  &ДатаВходящегоДокумента
	|	И "+Документ+".НомерВходящегоДокумента  =  &НомерВходящегоДокумента";
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Контрагент",  Покупатель);
	Запрос.УстановитьПараметр("ДатаВходящегоДокумента",  ДатаДокаВх);  
	Запрос.УстановитьПараметр("НомерВходящегоДокумента",  НомерДокаВх);  	
	Выборка  =  Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьКодПериода(Документ)
	
	Перем КодПериода;
	Если Месяц(Документ.Дата) = 3 Тогда
		КодПериода = 10
	ИначеЕсли Месяц(Документ.Дата) = 6 Тогда
		КодПериода = 20
	ИначеЕсли Месяц(Документ.Дата) = 9 Тогда
		КодПериода = 25
	ИначеЕсли Месяц(Документ.Дата)= 12 Тогда 
		КодПериода = 30
	Иначе
		КодПериода = 0
	КонецЕсли;  		
	Возврат КодПериода;
	
КонецФункции

Функция ОпределитьКвМес(Документ)
	Перем КодПериода;
	
	Если Документ.Периодичность = Перечисления.Периодичность.Квартал Тогда
		КодПериода = 10
	Иначе
		КодПериода = 0
	КонецЕсли;
	Возврат КодПериода;
КонецФункции

Функция ПолучитьНовыйИД(пGUID,  ДатаДляНовогоИД,  НомерДляНовогоИД,  ИмяСхемы,  КодКонтрагентаДляНовогоИД)
	
	Перем НовыйИД;  	
	
	Если пGUID = "00000000-0000-0000-0000-000000000000" Тогда
		//идентификатора нет. Документ, сформирован (Р)уками, а не из обработки
		//(созданных вручную или импортированных в ХМЛ) 
		НовыйИД = Строка("MR" + ДатаДляНовогоИД + НомерДляНовогоИД + ИмяСхемы + КодКонтрагентаДляНовогоИД);  
	Иначе
		//если ИД известен, значит использовалось (А)втоматическое формирование накладной СОМ-объектами 
		НовыйИД = Строка("MA" + пGUID); 
	КонецЕсли;
	
	Возврат НовыйИД; 
	
КонецФункции

Функция ПолучитьСхемуНалогообложения(ДатаДокумента)
	
	Попытка
		Структура = Новый Структура; 
		Структура.Вставить("Организация", ОрганизацияПервичка);
		Если ИмяБазы = "БУ" ИЛИ ИмяБазы = "УПП" Тогда
			Возврат РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьПоследнее(ДатаДокумента,Структура).ИнформацияОСтатусеПлательщикаНалогов; 
		ИначеЕсли  ИмяБазы="УТП" Тогда
			Возврат РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ДатаДокумента,Структура).ИнформацияОСтатусеПлательщикаНалогов;
		ИначеЕсли ИмяБазы="УТ" Тогда
			Возврат "";
		КонецЕсли;
	Исключение 		
	КонецПопытки;   
	
КонецФункции

Функция ПолучитьВерсиюСТочкой(версия)
	констДлина = 7;
	новаястр = СтрЗаменить(Строка(версия), Символы.НПП, "");
	
	Пока СтрДлина(новаястр) < констДлина Цикл
		новаястр = "0" + новаястр;
	КонецЦикла;
	
	новаястр = Лев(новаястр,2) + "." + Сред(новаястр,3,2) + "." + Прав(новаястр,3);
	возврат новаястр;
Конецфункции
//----------------------------------------------------------------------------------------------- 
Функция ПроверкаВерсииМедка(ВерсияМедка)	
	Если  ВерсияМедка < ЭлементыФормы.НастройкаКонтрольВерсииМедка.Значение Тогда
		ВерсияМедкаЧитабельная = ПолучитьВерсиюСТочкой( ВерсияМедка );
		ВерсияМедкаMin = ПолучитьВерсиюСТочкой(ЭлементыФормы.НастройкаКонтрольВерсииМедка.Значение);
		Предупреждение(НСтр("ru = 'Для корректной работы необходима версия не ниже ';uk = 'Для коректної роботи необхідна версія не нижче 10.00.'")+ ВерсияМедкаMin + 
		Символы.ПС + НСтр("ru = 'У Вас установлена версия ';uk = 'У Вас встановлено версію '") + ВерсияМедкаЧитабельная + Символы.ПС + 
		НСтр("ru = 'Обновите программу!';uk = 'Оновіть програму!'"));         		
		Возврат ложь;
	КонецЕсли;
	Возврат истина;
Конецфункции

Процедура ПроверитьПараметры()
	
	Если (ЭлементыФормы.НадписьПараметры.Значение) Тогда
		ЭлементыФормы.ПараметрыПредприятияПоле.Доступность = Истина;
		ЭлементыФормы.ПараметрыФилиалПоле.Доступность = Истина;
		ЭлементыФормы.ПараметрыЛогинПоле.Доступность = Истина;
		ЭлементыФормы.ПараметрыПарольПоле.Доступность = Истина;
	Иначе
		ЭлементыФормы.ПараметрыПредприятияПоле.Доступность = Ложь;
		ЭлементыФормы.ПараметрыФилиалПоле.Доступность = Ложь;
		ЭлементыФормы.ПараметрыЛогинПоле.Доступность = Ложь;
		ЭлементыФормы.ПараметрыПарольПоле.Доступность = Ложь;
	КонецЕсли;  
	
КонецПроцедуры

Процедура DLLПодключена()
	
	ЭтаФорма.ЭлементыФормы.МедокДЛЛ.Видимость = Истина;	
	ЭтаФорма.ЭлементыФормы.МедокДЛЛ.Заголовок = НСтр("ru = 'medoc1c.dll подключена';uk = 'medoc1c.dll підключена'"); 
	Этаформа.ЭлементыФормы.МедокДЛЛ.Картинка = БиблиотекаКартинок.Утвердить;
		
КонецПроцедуры

Процедура DLLНеПодключена()
	
	ЭтаФорма.ЭлементыФормы.МедокДЛЛ.Видимость = Истина;
	ЭтаФорма.ЭлементыФормы.МедокДЛЛ.Заголовок = НСтр("ru = 'medoc1c.dll не подключена';uk = 'medoc1c.dll не підключена'"); 
	Этаформа.ЭлементыФормы.МедокДЛЛ.Картинка = БиблиотекаКартинок.Отклонить;
		
КонецПроцедуры 

Процедура Подключение1СМедок()
	
	Попытка 		
		App  = Новый COMОбъект("MEDOC.ZApplication"); 
		инфо = Новый СистемнаяИнформация;
		Если инфо.ТипПлатформы = ТипПлатформы.Windows_x86 или инфо.ТипПлатформы = ТипПлатформы.Linux_x86 или инфо.ТипПлатформы = ТипПлатформы.MacOS_x86 Тогда 
			ИмяПлагина =  ЭлементыФормы.ПутьКФайлуМедка.Значение + "\32\medoc1c.dll";
		ИначеЕсли  инфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 или инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 или инфо.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
			ИмяПлагина =  ЭлементыФормы.ПутьКФайлуМедка.Значение + "\64\medoc1c.dll";
		Иначе
			Сообщить ("Не удалось определить тип платформы");
		Конецесли;
		
		// В некоторых случаях  не создавалась запись в реестре
		ПодключитьВнешнююКомпоненту(ИмяПлагина, "Medoc1C", ТипВнешнейКомпоненты.COM);
		Попытка
			МедКомпонент = Новый("AddIn.Medoc1C");
		Исключение
			ПодключитьВнешнююКомпоненту("AddIn.Medoc1C");
			МедКомпонент = Новый("AddIn.Medoc1C");
		КонецПопытки;
		//======================================================
		МедКомпонент.SetConnectionInfo(СтрокаСоединенияИнформационнойБазы()); 
		ЭлементыФормы.ЭДОВозможен.Видимость =  Ложь;//Истина;
		ЭлементыФормы.ЭДОНевозможен.Видимость =  Ложь;
		DLLПодключена();
		ОтключитьОбработчикОжидания("Подключение1СМедок");
		ПроверитьНаличиеПервички();
		ПроверитьНаличиеОтчетов(СуффиксДСС, СуффиксДФС, СуффиксЕО, СуффиксФСС);	
	Исключение
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Причина <> Неопределено Тогда
			Если Найти(Инфо.Причина.Описание,"Параметр задан неверно") <> 0 Тогда
				ОтключитьОбработчикОжидания("Подключение1СМедок");
				DLLНеПодключена();
			КонецЕсли; 
		КонецЕсли; 
	КонецПопытки; 
	
КонецПроцедуры

Функция ПроверитьНаличиеОбновления()
	
	Ответ = Новый Структура("ЕстьОбновление,СсылкаНаОбновление",Ложь,"");
	
	Попытка
		App = Новый COMОбъект("MEDOC.ZApplication");
		
		Инф = App.GetVerDocking();
		
		МассивСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Инф,Символы.ПС);
		
		Для каждого Стр Из МассивСтрок Цикл
			МассивПараметров = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Стр,",");
			Если МассивПараметров.Найти(ТипСтыковки) <> Неопределено Тогда
				//Если ВерсияСтыковки < МассивПараметров[1] Тогда
				Ответ.Вставить("ЕстьОбновление", ВерсияСтыковки < МассивПараметров[1]);
				Ответ.Вставить("СсылкаНаОбновление", МассивПараметров[2]);
				Возврат Ответ;
				//КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		
	Исключение
		Возврат Ответ;
	КонецПопытки; 	
		
КонецФункции

Процедура ВРазработке()
	
	Предупреждение(Нстр("ru = 'В разработке.';uk = 'В розробці.'"));
	Возврат;
	
КонецПроцедуры

Процедура ВыборЯрлыка()
	
	Если ЭлементыФормы.ЗапЛок.Значение = 1 Тогда
		ЭлементыФормы.НадписьЯрлык.Заголовок = "\ezvit.exe";	
	ИначеЕсли ЭлементыФормы.ЗапЛок.Значение = 2 Тогда
		ЭлементыФормы.НадписьЯрлык.Заголовок = "\ezvitnet.exe";	
	ИначеЕсли ЭлементыФормы.ЗапЛок.Значение = 3 Тогда
		ЭлементыФормы.НадписьЯрлык.Заголовок = "\station.exe";
	Иначе
		ЭлементыФормы.НадписьЯрлык.Заголовок = "";
	КонецЕсли;          
	
КонецПроцедуры   

Процедура ЗапускМедка(ПрефиксТекст)
	
	Если WshExec = Неопределено или (WshExec <> Неопределено и WshExec.Status = 1) Тогда
		Режим  =  РежимДиалогаВопрос.ДаНет;
		Ответ  =  Вопрос(ПрефиксТекст + НСтр("ru  =  ' - M.E.Doc не запущен.'; uk  =  ' - M.E.Doc не запущено.'") + Символы.ПС + Символы.ПС + НСтр("ru  =  'Запустить его на основании настроек?'; uk  =  'Запустити його за налаштуванями? '") + Символы.ПС + ПутьКФайлуМедка + ЭлементыФормы.НадписьЯрлык.Заголовок,  Режим,  0);
		Если Ответ  =  КодВозвратаДиалога.Да Тогда
			ПриНажатииНажатие(ПутьКФайлуМедка);
			ПодключитьОбработчикОжидания("Подключение1СМедок", 1, Ложь);
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры
//-----------------------------------------------------------------------------------------------
Процедура ЗаписатьЭлемент(ОбъектXML,  ИмяЭлемента,  Текст)
	
	ОбъектXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	ОбъектXML.ЗаписатьТекст(Текст);
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры	

Процедура ВыборПериодаОтбораПервичкиДефолтные()
	
	Если ПерСохраненнный = 1 Тогда   		
		НачПериода		 =  ВосстановитьЗначение("НачПериода");
		КонПериода		 =  ВосстановитьЗначение("КонПериода"); 
	ИначеЕсли ПерСохраненнный = 2 Тогда 
		ЭлементыФормы.НачПериода.Значение = Дата(Год(ТекущаяДата()), 01, 01);
		ЭлементыФормы.КонПериода.Значение = Дата(Текущаядата());   
	ИначеЕсли ПерСохраненнный = 3 Тогда
		ЭлементыФормы.НачПериода.Значение = Дата(Год(ТекущаяДата()), Месяц(ТекущаяДата()), 01);
		ЭлементыФормы.КонПериода.Значение = Дата(ТекущаяДата());
	ИначеЕсли ПерСохраненнный = 4 Тогда
		ЭлементыФормы.НачПериода.Значение = Дата(НачалоНедели(ТекущаяДата()));
		ЭлементыФормы.КонПериода.Значение = Дата(ТекущаяДата()); 		
	ИначеЕсли ПерСохраненнный = 5 Тогда
		ЭлементыФормы.НачПериода.Значение = Дата(ТекущаяДата());
		ЭлементыФормы.КонПериода.Значение = Дата(ТекущаяДата()); 		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаСтатусов(App, Документ, ИД)
	
	СтатусТекст  =  ПолучитьРасшифровкуСтатуса(Строка(App.GetSendSTTByExDocID(ИД))); 	
	СтатусТекст2  =  ПроверитьСтатусПоИД(Строка(App.GetDocStatus(ИД)));
	НайденнаяСтрока  =  ТаблицаДокументов.Найти(Документ, "Документ");    				
	НайденнаяСтрока.Статус = Строка(СтатусТекст) + ",  " + СтатусТекст2;
	
КонецПроцедуры

Процедура ПроверитьНаличиеОтчетов(СуффиксДСС,  СуффиксДФС,  СуффиксЕО,  СуффиксФСС)
	
	Если НЕ ВсегоЧислоОтч=0 Тогда
		Попытка 
			App  =  Новый COMОбъект("MEDOC.ZApplication"); 
			Для Каждого СтрокаДокумент из ТаблицаОтчетов Цикл
				ДокументОтчет  =  СтрокаДокумент.ДокументОтчет; 
				
				ИД  =  Строка(Строка(ДокументОтчет.УникальныйИдентификатор()) + СуффиксДСС);
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда 
					СтатусТекст  =  СокрЛП(ПолучитьРасшифровкуСтатуса(Строка(App.GetSendSTTByExDocID(ИД)))); 	
					СтатусТекст2  =  СокрЛП(ПроверитьСтатусПоИД(Строка(App.GetDocStatus(ИД))));
					НайденнаяСтрока  =  ТаблицаОтчетов.Найти(ДокументОтчет,  "ДокументОтчет");    				
					НайденнаяСтрока.СтатусОтчетаДСС = Формат(Строка(СтатусТекст + ",  " + СтатусТекст2)); 
				Иначе 
					НайденнаяСтрока  =  ТаблицаОтчетов.Найти(ДокументОтчет,  "ДокументОтчет");    				
					НайденнаяСтрока.СтатусОтчетаДСС = Формат(НСтр("ru = 'Документ не передавался в M.E.Doc';uk = 'Документ не передавався в M.E.Doc'")); 					
				КонецЕсли; 			
				
				ИД  =  Строка(Строка(ДокументОтчет.УникальныйИдентификатор()) + СуффиксДФС);
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
					СтатусТекстДФС  =  СокрЛП(ПолучитьРасшифровкуСтатуса(Строка(App.GetSendSTTByExDocID(ИД)))); 
					СтатусТекстДФС2  =  СокрЛП(ПроверитьСтатусПоИД(Строка(App.GetDocStatus(ИД))));
					НайденнаяСтрока  =  ТаблицаОтчетов.Найти(ДокументОтчет, "ДокументОтчет");    				
					НайденнаяСтрока.СтатусОтчетаДФС = Формат(Строка(СтатусТекстДФС + ",  " + СтатусТекстДФС2)); 
				Иначе 
					НайденнаяСтрока  =  ТаблицаОтчетов.Найти(ДокументОтчет,  "ДокументОтчет");    				
					НайденнаяСтрока.СтатусОтчетаДФС = Формат(НСтр("ru = 'Документ не передавался в M.E.Doc';uk = 'Документ не передавався в M.E.Doc'")); 					
				КонецЕсли;
				
				ИД  =  Строка(Строка(ДокументОтчет.УникальныйИдентификатор()) + СуффиксЕО);
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда 
					СтатусТекстЕО  =  СокрЛП(ПолучитьРасшифровкуСтатуса(Строка(App.GetSendSTTByExDocID(ИД)))); 	
					СтатусТекстЕО2  =  СокрЛП(ПроверитьСтатусПоИД(Строка(App.GetDocStatus(ИД))));
					НайденнаяСтрока  =  ТаблицаОтчетов.Найти(ДокументОтчет, "ДокументОтчет");    				
					НайденнаяСтрока.СтатусОтчетаЕО = Формат(Строка(СтатусТекстЕО + ",  " + СтатусТекстЕО2)); 
				Иначе 
					НайденнаяСтрока  =  ТаблицаОтчетов.Найти(ДокументОтчет,  "ДокументОтчет");    				
					НайденнаяСтрока.СтатусОтчетаЕО = Формат(НСтр("ru = 'Документ не передавался в M.E.Doc';uk = 'Документ не передавався в M.E.Doc'")); 					
				КонецЕсли;
				
				ИД  =  Строка(Строка(ДокументОтчет.УникальныйИдентификатор()) + СуффиксФСС);
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда 
					СтатусТекстФСС  =  СокрЛП(ПолучитьРасшифровкуСтатуса(Строка(App.GetSendSTTByExDocID(ИД)))); 	
					СтатусТекстФСС2  =  СокрЛП(ПроверитьСтатусПоИД(Строка(App.GetDocStatus(ИД))));
					НайденнаяСтрока  =  ТаблицаОтчетов.Найти(ДокументОтчет, "ДокументОтчет");    				
					НайденнаяСтрока.СтатусОтчетаФСС = Формат(Строка(СтатусТекстФСС + ",  " + СтатусТекстФСС2)); 
				Иначе 
					НайденнаяСтрока  =  ТаблицаОтчетов.Найти(ДокументОтчет,  "ДокументОтчет");    				
					НайденнаяСтрока.СтатусОтчетаФСС = Формат(НСтр("ru = 'Документ не передавался в M.E.Doc';uk = 'Документ не передавався в M.E.Doc'")); 					
				КонецЕсли;

			КонецЦикла;	
		Исключение  		
			Возврат; 
		КонецПопытки; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоступносьПриложений()
	
	Если ЭлементыФормы.ТипДокОтчета.Значение  =  "РегламентированныйОтчетПоТруду" Тогда
		ЭлементыФормы.ОтчСтат.Значение = Истина;
		ЭлементыФормы.ТаблицаОтчетов.Колонки.СтатусОтчетаДСС.Видимость = Истина;
	ИначеЕсли ЭлементыФормы.ТипДокОтчета.Значение = "РегламентированныйОтчетБалансМП"  
		ИЛИ ЭлементыФормы.ТипДокОтчета.Значение = "РегламентированныйОтчетБаланс"
		ИЛИ ЭлементыФормы.ТипДокОтчета.Значение = "РегламентированныйОтчетБалансМПС"
	Тогда
		ЭлементыФормы.ОтчЕО.Значение = Истина;
		ЭлементыФормы.ТаблицаОтчетов.Колонки.СтатусОтчетаЕО.Видимость = Истина;
	ИначеЕсли ЭлементыФормы.ТипДокОтчета.Значение  =  "РегламентированныйОтчетФСС" Тогда
		ЭлементыФормы.ОтчФСС.Значение = Истина;
		ЭлементыФормы.ТаблицаОтчетов.Колонки.СтатусОтчетаФСС.Видимость = Истина;
	ИначеЕсли ЭлементыФормы.ТипДокОтчета.Значение = "РегламентированныйОтчетФорма1ДФ" 
		ИЛИ ЭлементыФормы.ТипДокОтчета.Значение = "РегламентированныйОтчетРасчетЕдиногоНалога" 
		ИЛИ ЭлементыФормы.ТипДокОтчета.Значение = "РегламентированныйОтчетРасчетЕдиногоНалогаФизЛиц"
	Тогда
		ЭлементыФормы.ОтчНал.Значение = Истина;
		ЭлементыФормы.ТаблицаОтчетов.Колонки.СтатусОтчетаДФС.Видимость = Истина;
	ИначеЕсли ЭлементыФормы.ТипДокОтчета.Значение = "РегламентированныйОтчетЕдиныйСоциальныйВзнос" Тогда
		ЭлементыФормы.ОтчНал.Значение = Истина;
		ЭлементыФормы.ТаблицаОтчетов.Колонки.СтатусОтчетаДФС.Видимость = Истина;
		ЭлементыФормы.Приложения_таб1.Видимость = Истина;
	 	ЭлементыФормы.Приложения_таб1.Заголовок = "Таблиця 1. Нарахування єдиного внеску";
	 	ЭлементыФормы.Приложения_таб2.Видимость = Истина;
		ЭлементыФормы.Приложения_таб2.Заголовок = "Таблиця 5. Відомості про трудові відносини застрахованих осіб";
	 	ЭлементыФормы.Приложения_таб3.Видимость = Истина;
	 	ЭлементыФормы.Приложения_таб3.Заголовок = "Таблиця 6. Відомості про нарахування заробітної плати (доходу) застрахованим особам";
	 	ЭлементыФормы.Приложения_таб4.Видимость = Истина;
	 	ЭлементыФормы.Приложения_таб4.Заголовок = "Таблиця 7. Наявність підстав для обліку стажу окремим категоріям осіб відповідно до законодавства";			
		ЭлементыФормы.РамкаГруппыТаб.Видимость = Истина;
	ИначеЕсли ЭлементыФормы.ТипДокОтчета.Значение = "РегламентированныйОтчетДекларацияОПрибыли" Тогда
		 ЭлементыФормы.ОтчЕО.Значение = Истина;
		 ЭлементыФормы.ТаблицаОтчетов.Колонки.СтатусОтчетаЕО.Видимость = Истина;
		 ЭлементыФормы.Приложения_таб1.Видимость = Истина;
		 ЭлементыФормы.Приложения_таб1.Заголовок = "Додаток АВ до рядка 20 АВ Податкової декларації з податку на прибуток підприємств";
		 
		 ЭлементыФормы.Приложения_таб2.Видимость = Истина;
		 ЭлементыФормы.Приложения_таб2.Заголовок = "Додаток ЗП до рядка 16 ЗП Податкової декларації з податку на прибуток підприємств";
		 
		 ЭлементыФормы.Приложения_таб3.Видимость = Истина;
		 ЭлементыФормы.Приложения_таб3.Заголовок = "Додаток ПН до рядка 23 ПН Податкової декларації з податку на прибуток підприємств";
		 
		 ЭлементыФормы.Приложения_таб4.Видимость = Истина;
		 ЭлементыФормы.Приложения_таб4.Заголовок = "Додаток ТЦ до Податкової декларації  з податку на прибуток підприємств";	
		 
		 ЭлементыФормы.Приложения_таб5.Видимость = Истина;
		 ЭлементыФормы.Приложения_таб5.Заголовок = "Додаток ВП до рядків 26-29, 31-33 Податкової декларації з податку на прибуток підприємств";	

		 ЭлементыФормы.Приложения_таб6.Видимость = Истина;
		 ЭлементыФормы.Приложения_таб6.Заголовок = "Додаток РІ до рядка 03 РІ Податкової декларації з податку на прибуток підприємств";	

		 ЭлементыФормы.Приложения_таб7.Видимость = Истина;
		 ЭлементыФормы.Приложения_таб7.Заголовок = "Додаток ПЗ до рядка 05 ПЗ Податкової декларації з податку на прибуток підприємств";	

		 ЭлементыФормы.Приложения_таб8.Видимость = Истина;
		 ЭлементыФормы.Приложения_таб8.Заголовок = "Додаток АМ до рядка 1.2.1 додатка РІ до рядка 03 РІ Податкової декларації з податку на прибуток підприємств";	

		 ЭлементыФормы.Приложения_таб9.Видимость = Истина;
		 ЭлементыФормы.Приложения_таб9.Заголовок = "Додаток ЦП до рядків 4.1.3 ЦП, 4.1.4 ЦП додатка РІ до рядка 03 РІ Податкової декларації з податку на прибуток підприємств";	
		
		ЭлементыФормы.РамкаГруппыТаб.Видимость = Истина;
	ИначеЕсли ЭлементыФормы.ТипДокОтчета.Значение = "РегламентированныйОтчетДекларацияНДС" Тогда
		 ЭлементыФормы.ОтчНал.Значение = Истина;
		 ЭлементыФормы.ТаблицаОтчетов.Колонки.СтатусОтчетаДФС.Видимость = Истина;
		 
		 ЭлементыФормы.Приложения_таб1.Видимость = Истина;
		 ЭлементыФормы.Приложения_таб1.Заголовок = "Дод.1 Розрахунок коригування сум ПДВ (Д1)";
		 
		 ЭлементыФормы.Приложения_таб2.Видимость = Истина;
		 ЭлементыФормы.Приложения_таб2.Заголовок = "Дод.2 Довідка про суму від'ємного значення звітного (податкового) періоду, яка зараховується до складу податкового кредиту наступного звітного(податкового) періоду (Д2)";
		 
		 ЭлементыФормы.Приложения_таб3.Видимость = Истина;
		 ЭлементыФормы.Приложения_таб3.Заголовок = "Дод.3 Розрахунок суми бюджетного відшкодування (Д3)";
		 
		 ЭлементыФормы.Приложения_таб4.Видимость = Истина;
		 ЭлементыФормы.Приложения_таб4.Заголовок = "Дод.4 Заява про повернення суми бюджетного відшкодування (Д4)";	
		 
		 ЭлементыФормы.Приложения_таб5.Видимость = Истина;
		 ЭлементыФормы.Приложения_таб5.Заголовок = "Дод.5 Розшифровки подат. зобов. та подат. кредиту в розрізі контрагентів (Д5)";	

		 ЭлементыФормы.Приложения_таб6.Видимость = Истина;
		 ЭлементыФормы.Приложения_таб6.Заголовок = "Дод.6 Довідка (Д6) подається платниками, які заповнюють рядок 5 декларації, та підприємствами (орг) інвалідів";	

		 ЭлементыФормы.Приложения_таб7.Видимость = Истина;
		 ЭлементыФормы.Приложения_таб7.Заголовок = "Дод.7 Розрахунок (перерахунок) частки використ. товарів/послуг, необорот. активів в оподат. операціях (Д7)";	

		 ЭлементыФормы.Приложения_таб8.Видимость = Истина;
		 ЭлементыФормы.Приложения_таб8.Заголовок = "Дод.8 Заява про допущення продавцем товарів/послуг помилок при зазначенні обов. реквіз ПН/РК та/або порушення продавцем/покупцем гранич. термінів реєстрації в ЄРПН (Д8)";	

		 ЭлементыФормы.Приложения_таб9.Видимость = Истина;
		 ЭлементыФормы.Приложения_таб9.Заголовок = "Дод.9 Розрах. под. зобов. за операціями, визн. в ст.161 ЗУ 'Про держ. підтримку с\г України', та питом. ваги варт. с/г товарів (ДС9)";	
		
		ЭлементыФормы.РамкаГруппыТаб.Видимость = Истина;
	
		
		
	КонецЕсли	
КонецПроцедуры

Процедура СбросНастроекТабПриложений()
	
		ЭлементыФормы.Приложения_таб1.Видимость = Ложь;
		ЭлементыФормы.Приложения_таб2.Видимость = Ложь;
		ЭлементыФормы.Приложения_таб3.Видимость = Ложь;
		ЭлементыФормы.Приложения_таб4.Видимость = Ложь;
		ЭлементыФормы.Приложения_таб5.Видимость = Ложь;
		ЭлементыФормы.Приложения_таб6.Видимость = Ложь;
		ЭлементыФормы.Приложения_таб7.Видимость = Ложь;
		ЭлементыФормы.Приложения_таб8.Видимость = Ложь;
		ЭлементыФормы.Приложения_таб9.Видимость = Ложь;
		ЭлементыФормы.ТаблицаОтчетов.Колонки.СтатусОтчетаДФС.Видимость= Ложь;
		ЭлементыФормы.ТаблицаОтчетов.Колонки.СтатусОтчетаДСС.Видимость= Ложь;
		ЭлементыФормы.ТаблицаОтчетов.Колонки.СтатусОтчетаЕО.Видимость= Ложь;
		ЭлементыФормы.ТаблицаОтчетов.Колонки.СтатусОтчетаФСС.Видимость= Ложь;
		ЭлементыФормы.ОтчНал.Значение = Ложь;
		ЭлементыФормы.ОтчСтат.Значение = Ложь;
		ЭлементыФормы.ОтчЕО.Значение = Ложь;
		ЭлементыФормы.ОтчФСС.Значение = Ложь;
		ЭлементыФормы.РамкаГруппыТаб.Видимость = Ложь;

КонецПроцедуры

Процедура ДокументСуществует(ДокументНазвание,  ДатаДокаВх,  НомерДокаВх);
	
	ТекстОтменыДокумента  =  ДокументНазвание + НомерДокаВх + " від " +  Формат(ДатаДокаВх,  "ДЛФ = Д") + " вже існує в 1С!";
	МедКомпонент.CancelDoc(ТекстОтменыДокумента); 
	
КонецПроцедуры

Процедура НачалоОтчета(rsMain)
	
	rsMain.Edit();       
	rsMain.Append();
	rsMain.Post();
	
КонецПроцедуры

Процедура КонецОтчета(Doc)
	
	Doc.EnableScripts();
	Doc.Save(1); 
	Doc.Close(); 	
	
КонецПроцедуры 

Процедура ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain)
	
	Для Каждого Элемент из с Цикл 
		Если Не Лев(Элемент.Значение,1)="_" Тогда
			Попытка
				rsMain.Fields.Item(Элемент.Ключ).Value = Док[Элемент.Значение];
			Исключение
				Сообщить("Невозможно передать: """ + Элемент.Ключ + """ в """ + Элемент.Значение + """");
			КонецПопытки;
		Иначе 
			Попытка
				ЗначениеПоля = (УбратьСкобкиТире(Док[Элемент.Значение]));
				rsMain.Fields.Item(Элемент.Ключ).Value = ?(ЗначениеЗаполнено(ЗначениеПоля), Число(ЗначениеПоля) * 1000, "");
			Исключение
				Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Функция УбратьСкобкиТире(Поле)
	
	Перем ПолеКЗамене;
	ПолеКЗамене = СтрЗаменить(Поле, "(", "");
	ПолеКЗамене = СтрЗаменить(ПолеКЗамене, ")", ""); 
	ПолеКЗамене = СтрЗаменить(ПолеКЗамене, "-", "");
	ПолеКЗамене = СтрЗаменить(ПолеКЗамене, ".", "");
	ПолеКЗамене = СтрЗаменить(ПолеКЗамене, " ", "");
	Возврат СокрЛП(ПолеКЗамене);
	
КонецФункции

Процедура ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain)
	
	Для Каждого Элемент из сДел1000 Цикл 		
		Если Не Лев(Элемент.Значение,1)="_" Тогда
			Попытка
				ЗначениеПоля= Док[Элемент.Значение];
				rsMain.Fields.Item(Элемент.Ключ).Value=Окр(Число(ЗначениеПоля), -2, 1) /1000;
			Исключение
				rsMain.Fields.Item(Элемент.Ключ).Value=Док[Элемент.Значение];
			КонецПопытки;
		Иначе 
			Попытка
				ЗначениеПоля=(УбратьСкобкиТире(Док[Элемент.Значение]));
				rsMain.Fields.Item(Элемент.Ключ).Value=?(ЗначениеЗаполнено(ЗначениеПоля), Число(ЗначениеПоля), "");
			Исключение
				Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПеребратьПоляОтчетаСДесЗн(Док, сДесЗн, rsMain)
	
	Для Каждого Элемент из сДесЗн Цикл 
		
		Попытка
			rsMain.Fields.Item(Элемент.Ключ).Value=Окр(Док[Элемент.Значение], -2);
		Исключение
			Сообщить("Невозможно передать: """ + Элемент.Ключ + """ в """ + Элемент.Значение + """");
		КонецПопытки;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПеребратьПоляОтчетаУмн1000(Док, сУмн1000, rsMain)
	
	Для Каждого Элемент из сУмн1000 Цикл 
		
		Попытка
			rsMain.Fields.Item(Элемент.Ключ).Value=Док[Элемент.Значение] * 1000;
		Исключение
			Сообщить("Невозможно передать: """ + Элемент.Ключ + """ в """ + Элемент.Значение + """");
		КонецПопытки;
	КонецЦикла;	
	
КонецПроцедуры

Процедура НетМетодикиВыгрузки()
	
	Предупреждение(Нстр("ru = 'Для данного периода не создана методика выгрузки отчета!';uk = 'Для даного періоду не створено методики вигрузки звіту!'"));
	
КонецПроцедуры

//-----------------------------------------------------------------------------------------------
Процедура Формирование_ВозвратТоваровПоставщику(App,  pd,  orgId,  Документ,  Бланк,  ИД)
	
	Попытка
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;

		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Организация, Документ.Дата, , , КодЯзыкаПечать);
		СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент, ТекущаяДата(), , , КодЯзыкаПечать);
		
		ДатаДокумента = Документ.Дата;  
		
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
		rsMain.Fields.Item("FIRM_NAME").Value  =  СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(СведенияОПокупателе.Банк); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(СведенияОПокупателе.НомерСчета);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(СведенияОПокупателе.МФО); 	
		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПокупателе.ИНН);
		rsMain.Fields.Item("FIRM_TELEFON").Value = СокрЛП(СведенияОПокупателе.Телефоны);
		
		Если ЮрикФизик = "Юрик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО); 
		КонецЕсли;      

		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("SIDE_TEL_FIZ_K").Value  =  СокрЛП(СведенияОПоставщике.Телефоны);
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
	    rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер);
		rsMain.Fields.Item("DOG_DATE").Value = Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");	
		
		rsMain.Fields.Item("SUMPDV").Value = Документ.Товары.Итог("СуммаНДС"); 
		rsMain.Fields.Item("DOCSUM").Value = Документ.СуммаДокумента;
		rsMain.Fields.Item("SUMPDV_TEXT").Value = Документ.Товары.Итог("СуммаНДС");
		rsMain.Fields.Item("DOCSUM_TEXT").Value = Документ.СуммаДокумента;
		Попытка
			rsMain.Fields.Item("OTRUMAV_FIO").Value = Документ.Получил;
		Исключение
		КонецПопытки;	
		
		Попытка
			rsMain.Fields.Item("DOV_SERIA").Value = Документ.ДоверенностьСерия;
			rsMain.Fields.Item("DOV_NOMER").Value = Документ.ДоверенностьНомер;
			rsMain.Fields.Item("DOV_DATA").Value = ?(Документ.ДоверенностьДата = Дата(1,1,1),"",Формат(Документ.ДоверенностьДата, "ДЛФ = Д"));
		Исключение
		КонецПопытки;
				
		Если ИмяБазы = "УПП" или ИмяБазы = "УТП" Тогда
			rsMain.Fields.Item("VO_NAME").Value = "";
		Иначе 
			rsMain.Fields.Item("VO_NAME").Value = СокрЛП(Документ.Ответственный);
		КонецЕсли;

		
		Если ЗначениеЗаполнено(Документ.Склад) Тогда   
			rsMain.Fields.Item("SKLAD_NAME").Value = СокрЛП(Документ.Склад);
		КонецЕсли;
		
		Запрос  =  Новый Запрос;
		Запрос.Текст  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВозвратТоваровПоставщикуТовары.Номенклатура.Наименование КАК Наименование, 
		|	ВЫБОР
		|		КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА ВозвратТоваровПоставщикуТовары.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВозвратТоваровПоставщикуТовары.СтавкаНДС  =  &Ставка20
		//|					ТОГДА ВозвратТоваровПоставщику.Цена / 1.2
		|					ТОГДА ВозвратТоваровПоставщикуТовары.Цена 
		|				ИНАЧЕ ВозвратТоваровПоставщикуТовары.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК Цена, 
		|	ВозвратТоваровПоставщикуТовары.Количество, 
		|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
		|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения КАК Единица, 
		|	ВозвратТоваровПоставщикуТовары.Сумма КАК СуммаБезСкидки
		//|	ВозвратТоваровПоставщикуТовары.СуммаСкидки КАК Скидка
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
		|ГДЕ
		|	ВозвратТоваровПоставщикуТовары.Ссылка = &Документ ";

		Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
		Запрос.УстановитьПараметр("Документ",  Документ);			
		Результат  =  Запрос.Выполнить();
		Контр  =  0;
		Н  =  Результат.Выгрузить().Количество(); 		
		rsMain.Fields.Item("KVO").Value = Н;
		
		ВыборкаДетальныеЗаписи  =  Результат.Выбрать();
		rsMain = Doc.DataSets("TAB1");  
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_A1").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_MOMENKLATURA_NAME").Value = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			rsMain.Fields.Item("TAB1_MOMENKLATURA_CHARCODEUMEASURE").Value = СокрЛП(ВыборкаДетальныеЗаписи.Единица);				   
			rsMain.Fields.Item("TAB1_A3").Value = ВыборкаДетальныеЗаписи.Количество;
			rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.Цена;
			//rsMain.Fields.Item("TAB1_A4").Value = ВыборкаДетальныеЗаписи.Скидка;
			rsMain.Fields.Item("TAB1_A6").Value = ВыборкаДетальныеЗаписи.СуммаБезСкидки; 
				
			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;        		
		КонецЦикла;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close();
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;

	Исключение
		Сообщить(ПолучитьТекстОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;  
	КонецПопытки;  
		 	
КонецПроцедуры

Процедура Формирование_ВозвратТоваровОтПокупателя(App,  pd,  orgId,  Документ,  Бланк,  ИД)
	
	Попытка
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;

		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
	    ДатаДокумента =Документ.Дата;
		
		//СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
		СведенияОПоставщике  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Организация,  ТекущаяДата(), , , КодЯзыкаПечать);
		//Если ТипЗнч(Документ.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		//	Банк		= Документ.СтруктурнаяЕдиница.Банк;
		//	МФО	 		= Банк.Код;
		//	НомерСчета 	= Документ.СтруктурнаяЕдиница.НомерСчета;
		//Иначе
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
		//КонецЕсли;
		
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
	
		rsMain.Fields.Item("FIRM_NAME").Value  =  СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(МФО); 	
		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("FIRM_TELEFON").Value = СокрЛП(СведенияОПоставщике.Телефоны);
		
		Если ЮрикФизик = "Юрик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоДРФО); 
		КонецЕсли;      

		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("SIDE_TEL_FIZ_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны);
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
	    rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер);
			
		rsMain.Fields.Item("SUMPDV").Value = Документ.Товары.Итог("СуммаНДС"); 
		rsMain.Fields.Item("DOCSUM").Value = Документ.СуммаДокумента;
		rsMain.Fields.Item("SUMPDV_TEXT").Value = Документ.Товары.Итог("СуммаНДС");
		rsMain.Fields.Item("DOCSUM_TEXT").Value = Документ.СуммаДокумента;
		//rsMain.Fields.Item("EMP_NAME").Value = Документ.СуммаДокумента;
				
		//Если ИмяБазы = "УПП" Тогда
		//	rsMain.Fields.Item("OTRUMAV_FIO").Value = "";
		//Иначе 
		//	rsMain.Fields.Item("OTRUMAV_FIO").Value = СокрЛП(Документ.Ответственный);
		//КонецЕсли;

		rsMain.Fields.Item("DOG_DATE").Value = Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");
		
		Если ИмяБазы ="УПП" или  ИмяБазы ="УТП" тогда 
			
			Если ЗначениеЗаполнено(Документ.СкладОрдер) Тогда   
				rsMain.Fields.Item("SKLAD_NAME").Value = СокрЛП(Документ.СкладОрдер);
			КонецЕсли;
		Иначе	
			Если ЗначениеЗаполнено(Документ.Склад) Тогда   
				rsMain.Fields.Item("SKLAD_NAME").Value = СокрЛП(Документ.Склад);
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяБазы  =  "УТП" или ИмяБазы ="УПП" Тогда
			ВыборСкидки = "ПроцентАвтоматическихСкидок";
			ВыборСуммы  =  "Сумма";
		Иначе
			ВыборСуммы  =  "СуммаБезСкидки";
			ВыборСкидки = "СуммаСкидки";    
		КонецЕсли; 

		Запрос  =  Новый Запрос;
		Запрос.Текст  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование КАК Наименование, 
		|	ВЫБОР
		|		КОГДА ВозвратТоваровОтПокупателяТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА ВозвратТоваровОтПокупателяТовары.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВозвратТоваровОтПокупателяТовары.СтавкаНДС  =  &Ставка20
		//|					ТОГДА ВозвратТоваровПоставщику.Цена / 1.2
		|					ТОГДА ВозвратТоваровОтПокупателяТовары.Цена 
		|				ИНАЧЕ ВозвратТоваровОтПокупателяТовары.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК Цена, 
		|	ВозвратТоваровОтПокупателяТовары.Количество, 
		//|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДС,
		|	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения КАК Единица, 
		|	ВозвратТоваровОтПокупателяТовары."+ВыборСуммы+" КАК СуммаБезСкидки,
		|	ВозвратТоваровОтПокупателяТовары."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		|ГДЕ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Документ";
		
			Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
		Запрос.УстановитьПараметр("Документ",  Документ);			
		Результат  =  Запрос.Выполнить();
		Контр  =  0;
		Н  =  Результат.Выгрузить().Количество(); 		
		rsMain.Fields.Item("KVO").Value = Н;
		
		ВыборкаДетальныеЗаписи  =  Результат.Выбрать();
		rsMain = Doc.DataSets("TAB1");  
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_A1").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_NOMENKLATURA_NAME").Value = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			rsMain.Fields.Item("TAB1_NOMENKLATURA_CHARCODEUMEASURE").Value = СокрЛП(ВыборкаДетальныеЗаписи.Единица);				   
			rsMain.Fields.Item("TAB1_A3").Value = ВыборкаДетальныеЗаписи.Количество;
			rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.Цена;
			//rsMain.Fields.Item("TAB1_A4").Value = ВыборкаДетальныеЗаписи.Скидка;
			rsMain.Fields.Item("TAB1_A6").Value = ВыборкаДетальныеЗаписи.СуммаБезСкидки; 
				
			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;        		
		КонецЦикла;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close();
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;

	Исключение
		Сообщить(ПолучитьТекстОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;  
	КонецПопытки;  
		 	
КонецПроцедуры
	
Процедура Формирование_Акт(App, pd, orgId, Документ, Бланк, ИД)
	
	Попытка
		Doc = pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
			ВызватьИсключение
		КонецПопытки;
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();  
		
		СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
		СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Организация, Документ.Дата, , , КодЯзыкаПечать);
		
		ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Документ.Организация,Документ.ПредставительОрганизации, Документ.Дата);
		
		РуководителиКонтрагента = ОбщегоНазначения.ОтветственныеЛицаКонтрагента(Документ.Контрагент, Документ.Дата);
		
		// покажем банковские реквизиты основного счета организации
		Банк		= СведенияОПоставщике.Банк;
		МФО	 		= СведенияОПоставщике.МФО;
		НомерСчета 	= СведенияОПоставщике.НомерСчета;
		
		ДатаДокумента = Документ.Дата;
		rsMain.Fields.Item("DOCDATE").Value = ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
		
		rsMain.Fields.Item("FIRM_NAME").Value  =  СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		
		Если ЮрикФизик = "Юрик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ЄДРПОУ"; 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоДРФО); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ДРФО";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.Сделка) Тогда
			rsMain.Fields.Item("OSN_T").Value  =  Строка("Розр.док.:");
			rsMain.Fields.Item("OSN_TIP").Value  =  Строка("Рахунок на оплату покупцеві"); 
			rsMain.Fields.Item("OSN_NUM_T").Value  =  Строка("№");
			НомерБезПрефикса = ПолучитьНомерБезНулей(Документ.Сделка); 
			rsMain.Fields.Item("OSN_NOMER").Value  =  НомерБезПрефикса;
			rsMain.Fields.Item("OSN_DATA_T").Value  =  Строка("від"); 
			rsMain.Fields.Item("OSN_DATA").Value  =  Дата(Документ.Сделка.Ссылка.Дата); 
		Иначе
			rsMain.Fields.Item("OSN_T").Value  =  "";
			rsMain.Fields.Item("OSN_TIP").Value  =  ""; 
			rsMain.Fields.Item("OSN_NUM_T").Value  =  "";
			rsMain.Fields.Item("OSN_NOMER").Value  =  "";
			rsMain.Fields.Item("OSN_DATA_T").Value  =  ""; 
			rsMain.Fields.Item("OSN_DATA").Value  =  ""; 
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Документ.ДоговорКонтрагента) Тогда
			rsMain.Fields.Item("DOG_NUM_T").Value = "№";
			rsMain.Fields.Item("DOG_DATA_T").Value = "від";     
			rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер);
			rsMain.Fields.Item("DOG_DATE").Value = Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");
			rsMain.Fields.Item("OSN_TIP").Value = Документ.ДоговорКонтрагента.НаименованиеДляПечати;                      
		Иначе
			rsMain.Fields.Item("DOG_NUM_T").Value = "";
			rsMain.Fields.Item("DOG_DATA_T").Value = "";
		КонецЕсли;
		
		rsMain.Fields.Item("FIRM_TELEFON").Value  =  СокрЛП(СведенияОПоставщике.Телефоны); 
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(МФО);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("FIRM_SRPNDS").Value  =  СокрЛП(СведенияОПоставщике.НомерСвидетельства); 	
		rsMain.Fields.Item("TAXSYSTEM").Value = ПолучитьСхемуНалогообложения(ДатаДокумента);		
		rsMain.Fields.Item("FIRM_ADR").Value  =  СокрЛП(СведенияОПоставщике.ЮридическийАдрес); 
		rsMain.Fields.Item("VO_NAME").Value = СокрЛП(Документ.ПредставительОрганизации);
		rsMain.Fields.Item("VO_POSTNAME").Value = СокрЛП(ДанныеПредставителя.Должность);
		
		Если ИмяБазы = "УПП" Тогда 
			РуководителиОрганизации = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Документ.Организация,  Документ.Дата);
			rsMain.Fields.Item("FIRM_RUKPOS").Value = СокрЛП(РуководителиОрганизации.РуководительДолжность);  
			rsMain.Fields.Item("FIRM_RUK").Value = СокрЛП(РуководителиОрганизации.Руководитель); 
			rsMain.Fields.Item("SIDE_OTV_FIO").Value  = ""; 
		Иначе
			РуководителиОрганизации = ОбщегоНазначения.ОтветственныеЛица(Документ.Организация,  Документ.Дата);
			rsMain.Fields.Item("FIRM_RUKPOS").Value = СокрЛП(РуководителиОрганизации.РуководительДолжность);  
			rsMain.Fields.Item("FIRM_RUK").Value = СокрЛП(РуководителиОрганизации.РуководительПредставление);
			rsMain.Fields.Item("SIDE_OTV_FIO").Value = СокрЛП(Документ.Получил);
			rsMain.Fields.Item("SIDE_DIR_POS").Value = ?(ПустаяСтрока(РуководителиКонтрагента.РуководительДолжность) И Документ.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "Директор", РуководителиКонтрагента.РуководительДолжность);
			rsMain.Fields.Item("SIDE_DIR_FIO").Value = РуководителиКонтрагента.РуководительПредставление;
		КонецЕсли;	 	
		
		rsMain.Fields.Item("DATA1").Value = Формат(Документ.Дата, "ДДДММГГГГ");
		rsMain.Fields.Item("DATA2").Value = Формат(Документ.Дата, "ДДДММГГГГ"); 
		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		rsMain.Fields.Item("SIDE_CDADR_K").Value = СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("SIDE_CODENDS_K").Value = СокрЛП(СведенияОПокупателе.НомерСвидетельства); 
		rsMain.Fields.Item("SIDE_CDINDTAXNUM_K").Value = СокрЛП(СведенияОПокупателе.ИНН);	                                                                 
		rsMain.Fields.Item("SIDE_TEL_K").Value = СокрЛП(СведенияОПокупателе.Телефоны);    
		rsMain.Fields.Item("SIDE_DEPT_K").Value = Документ.Контрагент.КодФилиала; 
		rsMain.Fields.Item("SIDE_CDSHR_K").Value = СокрЛП(СведенияОПокупателе.НомерСчета); 
		rsMain.Fields.Item("SIDE_BANK_K").Value = СокрЛП(СведенияОПокупателе.Банк); 
		rsMain.Fields.Item("SIDE_MFO_K").Value = СокрЛП(СведенияОПокупателе.МФО); 
		
		
		ИтогСуммаСНДС = Документ.СуммаДокумента;
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			ИтогНДС = Документ.Услуги.Итог("СуммаНДС");
		Иначе
			ИтогНДС = Документ.Товары.Итог("СуммаНДС") + Документ.Услуги.Итог("СуммаНДС");
		КонецЕсли;
		
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС;
		
		rsMain.Fields.Item("SUMWITHOUTPDV").Value  =  ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value  =  ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value  =  ИтогСуммаСНДС; 
		rsMain.Fields.Item("MISZE_SKL").Value = СокрЛП(Документ.МестоСоставленияДокумента); 
		
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;
		
		rsMain.Post(); 			                    
		Контр  =  0; 
		
		// в УТП нету колонки единицизмерения в производственных услугах
		Если ИмяБазы = "УТП" Тогда
			ЕдиницаВПроизводстве = """грн.""";
		Иначе
			ЕдиницаВПроизводстве = "АктОбОказанииПроизводственныхУслугУслуги.ЕдиницаИзмерения"
		КонецЕсли;     	
		
		Запрос  =  Новый Запрос;
		Запрос.Текст  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияТоваровУслугУслуги.Содержание как Наименование, 
		|	РеализацияТоваровУслугУслуги.Номенклатура как Номенклатура,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС = ЛОЖЬ
		|			ТОГДА РеализацияТоваровУслугУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РеализацияТоваровУслугУслуги.СтавкаНДС = &Ставка20
		|					ТОГДА РеализацияТоваровУслугУслуги.Цена 
		|				ИНАЧЕ РеализацияТоваровУслугУслуги.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		| 	РеализацияТоваровУслугУслуги.Цена, 
		|	РеализацияТоваровУслугУслуги.Количество, 
		|	""грн."" как Единица, 
		|	РеализацияТоваровУслугУслуги.Сумма
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка = &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АктОбОказанииПроизводственныхУслугУслуги.Содержание как Наименование, 
		|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура как Номенклатура,
		|	ВЫБОР
		|		КОГДА АктОбОказанииПроизводственныхУслугУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА АктОбОказанииПроизводственныхУслугУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА АктОбОказанииПроизводственныхУслугУслуги.СтавкаНДС  =  &Ставка20
		|					ТОГДА АктОбОказанииПроизводственныхУслугУслуги.Цена  / 1.2
		|				ИНАЧЕ АктОбОказанииПроизводственныхУслугУслуги.Цена 
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		| 	АктОбОказанииПроизводственныхУслугУслуги.Цена, 
		|	АктОбОказанииПроизводственныхУслугУслуги.Количество, 
		|	"+ЕдиницаВПроизводстве+", 
		|	АктОбОказанииПроизводственныхУслугУслуги.Сумма
		|ИЗ
		|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК АктОбОказанииПроизводственныхУслугУслуги
		|ГДЕ
		|	АктОбОказанииПроизводственныхУслугУслуги.Ссылка  =  &Документ";
		
		Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
		Запрос.УстановитьПараметр("Документ",  Документ);  
		Результат  =  Запрос.Выполнить();      	
		Н = Результат.Выгрузить().Количество();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		rsMain = Doc.DataSets("TAB1"); 	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_A").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_NOMENKLATURA_NAME").Value = Строка(СокрЛП(ВыборкаДетальныеЗаписи.Наименование));
			Try 
				ЕдИзм = ВыборкаДетальныеЗаписи.Номенклатура.БазоваяЕдиницаИзмерения.Наименование; 
				Если ЗначениеЗаполнено(ЕдИзм) тогда
					ЕдиницаИзмерения = ЕдИзм;
				Иначе	
					ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				КонецЕсли;	
			Исключение
			EndTry;
			
			rsMain.Fields.Item("TAB1_NOMENKLATURA_CHARCODEUMEASURE").Value = ЕдиницаИзмерения;
			Try
				rsMain.Fields.Item("TAB1_NOMENKLATURA_NUMHBUMEASURE").Value = СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура.БазоваяЕдиницаИзмерения.Код);
			Except
			EndTry;	
			
			rsMain.Fields.Item("TAB1_A3").Value = ВыборкаДетальныеЗаписи.Количество;
			Если (Документ.УчитыватьНДС) = Ложь Тогда
				rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
			Иначе
				rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.Цена;//Добавил условие - так как при установленной отметке «Сумма вкл. НДС» в шаблон передавалась не верная цена
			КонецЕсли;
			rsMain.Fields.Item("TAB1_A6").Value = ВыборкаДетальныеЗаписи.Сумма; 
			
			rsMain.Post();  		
			Контр  =  КОнтр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;  
		КонецЦикла;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close(); 
		
		Попытка
			Если СозданиеКонтрагентовМед = Истина Тогда
				Попытка
					СозданиеКонтрагентовМедок(App, Документ, orgId);
				Исключение
					Сообщить("Не удалось создать контрагента в Медке",);
					ВызватьИсключение;
				КонецПопытки;	
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	Исключение
		Сообщить(ПолучитьТекстОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		//Возврат;
	КонецПопытки;  
	
КонецПроцедуры 		 

Процедура Формирование_Счет(App, pd, orgId, Документ, Бланк, ИД)  		  
	
	Попытка
		Doc = pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;

		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
		Если ТипЗнч(Документ.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк		= Документ.СтруктурнаяЕдиница.Банк;
			МФО	 		= Банк.Код;
			НомерСчета 	= Документ.СтруктурнаяЕдиница.НомерСчета;
		Иначе
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
		КонецЕсли;

        ДатаДокумента =Документ.Дата;
		rsMain.Fields.Item("DOCDATE").Value = ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
	
		rsMain.Fields.Item("FIRM_NAME").Value    = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value      = СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  = СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value   = СокрЛП(МФО); 	
		rsMain.Fields.Item("FIRM_ADR").Value     = СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
		rsMain.Fields.Item("FIRM_SRPNDS").Value  = СокрЛП(СведенияОПоставщике.НомерСвидетельства);
		rsMain.Fields.Item("FIRM_INN").Value     = СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("FIRM_TELEFON").Value = СокрЛП(СведенияОПоставщике.Телефоны);
		
		Если ЮрикФизик = "Юрик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value = "код за ЄДРПОУ"; 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоДРФО); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value = "код за ДРФО";
		КонецЕсли;      
		
		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны);
		rsMain.Fields.Item("TAXSYSTEM").Value = ПолучитьСхемуНалогообложения(ДатаДокумента);
		
		Если ЗначениеЗаполнено(СокрЛП(Документ.ДоговорКонтрагента)) Тогда
			rsMain.Fields.Item("DOG_NUM_T").Value = "№";  
			rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер);
			rsMain.Fields.Item("DOG_DATA_T").Value = "від";
			rsMain.Fields.Item("DOG_DATE").Value = Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");
			//rsMain.Fields.Item("OSN_TIP").Value = Документ.ДоговорКонтрагента.НаименованиеДляПечати;
		Иначе
			rsMain.Fields.Item("DOG_NUM_T").Value = "";  
			rsMain.Fields.Item("DOG_DATA_T").Value = "";  			
		КонецЕсли;
		
		rsMain.Fields.Item("VO_NAME").Value = СокрЛП(Документ.Ответственный.Физлицо);      
		
		ИтогСуммаСНДС = Документ.СуммаДокумента;
		ИтогНДС = Документ.Товары.Итог("СуммаНДС") + Документ.Услуги.Итог("СуммаНДС");
		
		Если ИмяБазы  =  "УТП" Тогда
			ИтогСкидка  =  0;
		ИначеЕсли ИмяБазы = "УПП" Тогда
			ИтогСкидка = Документ.Товары.Итог("ЗначениеУсловияАвтоматическойСкидки") + Документ.Услуги.Итог("ЗначениеУсловияАвтоматическойСкидки");
		ИначеЕсли ИмяБазы = "УТ" Тогда
			ИтогСкидка  =  0;
		Иначе
			ИтогСкидка  =  Документ.Товары.Итог("СуммаСкидки") + Документ.Услуги.Итог("СуммаСкидки");
		КонецЕсли;
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС;   	
		rsMain.Fields.Item("SUMWITHOUTPDV").Value = ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value = ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value = ИтогСуммаСНДС;   
		rsMain.Fields.Item("ZNYGKA").Value =  ИтогСкидка;
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;   
		
		rsMain.Post(); 	
		Если ИмяБазы  =  "УТП" Тогда
			ВыборСкидки = "ПроцентСкидкиНаценки";
			ВыборСуммы  =  "Сумма";
		ИначеЕсли ИмяБазы = "УПП" Тогда
			ВыборСуммы  =  "Сумма";
			ВыборСкидки = "ПроцентСкидкиНаценки";
		ИначеЕсли ИмяБазы = "УТ" Тогда
			ВыборСуммы  =  "Сумма";  
			ВыборСкидки = "ПроцентСкидкиНаценки";
		Иначе
			ВыборСуммы  =  "СуммаБезСкидки";
			ВыборСкидки = "СуммаСкидки";    
		КонецЕсли;              
		
		Запрос  =  Новый Запрос;
		Запрос.Текст  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетНаОплатуПокупателюТовары.Номенклатура.НаименованиеПолное КАК Наименование, 
		|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА СчетНаОплатуПокупателюТовары.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА СчетНаОплатуПокупателюТовары.СтавкаНДС  =  &Ставка20
		//|					ТОГДА СчетНаОплатуПокупателюТовары.Цена / 1.2
		|					ТОГДА СчетНаОплатуПокупателюТовары.Цена 
		|				ИНАЧЕ СчетНаОплатуПокупателюТовары.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		|	СчетНаОплатуПокупателюТовары.Количество, 
		|	СчетНаОплатуПокупателюТовары.ЕдиницаИзмерения КАК Единица, 
		|	СчетНаОплатуПокупателюТовары."+ВыборСуммы+" КАК СуммаБезСкидки,
		|	СчетНаОплатуПокупателюТовары."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
		|ГДЕ
		|	СчетНаОплатуПокупателюТовары.Ссылка = &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетНаОплатуПокупателюУслуги.Содержание, 
		|	СчетНаОплатуПокупателюУслуги.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателюУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА СчетНаОплатуПокупателюУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА СчетНаОплатуПокупателюУслуги.СтавкаНДС  =  &Ставка20
		//|					ТОГДА СчетНаОплатуПокупателюУслуги.Цена / 1.2
		|					ТОГДА СчетНаОплатуПокупателюУслуги.Цена
		|				ИНАЧЕ СчетНаОплатуПокупателюУслуги.Цена
		|			КОНЕЦ
		|	КОНЕЦ, 
		|	СчетНаОплатуПокупателюУслуги.Количество, 
		|	""грн."", 
		|	СчетНаОплатуПокупателюУслуги."+ВыборСуммы+",
		|	СчетНаОплатуПокупателюУслуги."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
		|ГДЕ
		|	СчетНаОплатуПокупателюУслуги.Ссылка  =  &Документ";
		
		Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
		Запрос.УстановитьПараметр("Документ",  Документ);			
		Результат  =  Запрос.Выполнить();
		Контр  =  0;
		Н  =  Результат.Выгрузить().Количество(); 		
		rsMain.Fields.Item("KVO").Value = Н;
		
		ВыборкаДетальныеЗаписи  =  Результат.Выбрать();
		rsMain = Doc.DataSets("TAB1");  
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_A1").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_NOMENKLATURA_NAME").Value = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			rsMain.Fields.Item("TAB1_NOMENKLATURA_CHARCODEUMEASURE").Value = СокрЛП(ВыборкаДетальныеЗаписи.Единица);	
			rsMain.Fields.Item("TAB1_NOMENKLATURA_NUMHBUMEASURE").Value = СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура.БазоваяЕдиницаИзмерения.Код);
			rsMain.Fields.Item("TAB1_A3").Value = ВыборкаДетальныеЗаписи.Количество;
			rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
			rsMain.Fields.Item("TAB1_A4").Value = ВыборкаДетальныеЗаписи.Скидка;
			rsMain.Fields.Item("TAB1_A6").Value = ВыборкаДетальныеЗаписи.СуммаБезСкидки; 
			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;        		
		КонецЦикла;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close();
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;

	Исключение
		Сообщить(ПолучитьТекстОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;  
	КонецПопытки;  
	
КонецПроцедуры

Процедура Формирование_РасхНакл(App, pd, orgId, Документ, Бланк, ИД)
	
	Попытка
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;

		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
		Если ТипЗнч(Документ.БанковскийСчетОрганизации) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк		= Документ.БанковскийСчетОрганизации.Банк;
			МФО	 		= Банк.Код;
			НомерСчета 	= Документ.БанковскийСчетОрганизации.НомерСчета;
		Иначе
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
		КонецЕсли;
		
        ДатаДокумента =Документ.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		//rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
		rsMain.Fields.Item("NUM").Value = ОбщегоНазначения.ПолучитьНомерНаПечать(Документ); 
 	
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value = СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value = СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value = СокрЛП(МФО); 
		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
		rsMain.Fields.Item("FIRM_TELEFON").Value = СокрЛП(СведенияОПоставщике.Телефоны);  
		
		Если ЮрикФизик = "Юрик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ЄДРПОУ"; 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоДРФО); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ДРФО";
		КонецЕсли;
		
		rsMain.Fields.Item("FIRM_INN").Value = СокрЛП(СведенияОПоставщике.ИНН); 	
		rsMain.Fields.Item("FIRM_SRPNDS").Value = СокрЛП(СведенияОПоставщике.НомерСвидетельства);
		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("SIDE_CDINDTAXNUM_K").Value  =  СокрЛП(СведенияОПокупателе.ИНН);
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны);  
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СокрЛП(Документ.ДоговорКонтрагента)) Тогда
			rsMain.Fields.Item("DOG_T").Value = "Договір:";
			rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер);
			rsMain.Fields.Item("DOG_DATE").Value = Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");
			rsMain.Fields.Item("OSN_TIP").Value = Документ.ДоговорКонтрагента.НаименованиеДляПечати;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.Сделка) Тогда
			rsMain.Fields.Item("OSN_T").Value  =  Строка("Розр.док.:");
			rsMain.Fields.Item("OSN_TIP").Value  =  Строка("Рахунок на оплату покупцеві"); 
			rsMain.Fields.Item("OSN_NUM_T").Value  =  Строка("№");
			rsMain.Fields.Item("OSN_NOMER").Value  =  ПолучитьНомерБезНулей(Документ.Сделка);
			rsMain.Fields.Item("OSN_DATA_T").Value  =  Строка("від"); 
			rsMain.Fields.Item("OSN_DATA").Value  =  Дата(Документ.Сделка.Ссылка.Дата);     
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.Склад) Тогда   
			rsMain.Fields.Item("SKLAD_T").Value = Строка("Склад:");
			rsMain.Fields.Item("SKLAD_NAME").Value = СокрЛП(Документ.Склад);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.АдресДоставки) Тогда
			rsMain.Fields.Item("ADR_DOST_T").Value  =   Строка("Адреса доставки:");
			rsMain.Fields.Item("ADR_DOST").Value  =  СокрЛП(Документ.АдресДоставки); 
		КонецЕсли; 
		
		rsMain.Fields.Item("MISZE_SKL").Value = СокрЛП(Документ.МестоСоставленияДокумента); 
		rsMain.Fields.Item("TAXSYSTEM").Value = ПолучитьСхемуНалогообложения(ДатаДокумента);
		
		ИтогСуммаСНДС  =  Документ.СуммаДокумента;
		ИтогНДС  =  Документ.Товары.Итог("СуммаНДС") + Документ.Услуги.Итог("СуммаНДС");
		
		Если ИмяБазы  =  "УТП" Тогда
			ИтогСкидка  =  0;
		ИначеЕсли ИмяБазы  =  "УТ" Тогда
			ИтогСкидка  =  0;	
		ИначеЕсли ИмяБазы  = "УПП" Тогда
			ИтогСкидка  =  Документ.Товары.Итог("ЗначениеУсловияАвтоматическойСкидки") + Документ.Услуги.Итог("ЗначениеУсловияАвтоматическойСкидки");
		Иначе
			ИтогСкидка  =  Документ.Товары.Итог("СуммаСкидки") + Документ.Услуги.Итог("СуммаСкидки");
		КонецЕсли;
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС; 
		
		rsMain.Fields.Item("SUMWITHOUTPDV").Value = ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value = ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value = Документ.СуммаДокумента;
		rsMain.Fields.Item("ZNYGKA").Value = ИтогСкидка;
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;
		
		rsMain.Post();
		
		Если ИмяБазы  =  "УТП" или ИмяБазы  =  "УПП" Тогда
		//	ВыборСуммы  =  "Сумма";
			ВыборСкидки = "ПроцентСкидкиНаценки";
			КодТов = "РеализацияТоваровУслугТовары.Номенклатура.Код КАК Код,";
			КодУсл = "РеализацияТоваровУслугУслуги.Номенклатура.Код КАК Код,";
		Иначе
		//	ВыборСуммы  =  "СуммаБезСкидки";
			ВыборСкидки = "СуммаСкидки";
		КонецЕсли;              
		
		Запрос  =  Новый Запрос;
		Запрос.Текст  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК Наименование, 
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА РеализацияТоваровУслугТовары.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РеализацияТоваровУслугТовары.СтавкаНДС  =  &Ставка20
		//|					ТОГДА РеализацияТоваровУслугТовары.Цена / 1.2
		|					ТОГДА РеализацияТоваровУслугТовары.Цена 
		|				ИНАЧЕ РеализацияТоваровУслугТовары.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		|	РеализацияТоваровУслугТовары.Количество, 
		|	РеализацияТоваровУслугТовары.Сумма КАК Сумма, 
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК Единица,
		| "+КодТов+"
		|	РеализацияТоваровУслугТовары."+ВыборСкидки+" КАК Скидка
		
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка  =  &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Содержание, 
		|	РеализацияТоваровУслугУслуги.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугУслуги.Номенклатура.Артикул КАК Артикул,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА РеализацияТоваровУслугУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РеализацияТоваровУслугУслуги.СтавкаНДС  =  &Ставка20
		|					ТОГДА РеализацияТоваровУслугУслуги.Цена 
		|				ИНАЧЕ РеализацияТоваровУслугУслуги.Цена
		|			КОНЕЦ
		|	КОНЕЦ, 
		|	РеализацияТоваровУслугУслуги.Количество, 
		|	РеализацияТоваровУслугУслуги.Сумма КАК Сумма,
		|	""грн."" ,
		| "+КодУсл+"
		|	РеализацияТоваровУслугУслуги."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка  =  &Документ";
		Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
		Запрос.УстановитьПараметр("Документ",  Документ);		
		
		Результат = Запрос.Выполнить();
		Контр = 0;
		Н = Результат.Выгрузить().Количество();
		
		rsMain.Fields.Item("KVO").Value = Н;
		rsMain.Fields.Item("VO_NAME").Value = СокрЛП(Документ.ПредставительОрганизации);
		
		Если ИмяБазы = "УПП" Тогда
			rsMain.Fields.Item("SIDE_OTV_FIO").Value = "";
		Иначе 
			rsMain.Fields.Item("SIDE_OTV_FIO").Value = СокрЛП(Документ.Получил);
		КонецЕсли;
		
		rsMain.Fields.Item("DOV_SERIA").Value = СокрЛП(Документ.ДоверенностьСерия);   
		rsMain.Fields.Item("DOV_NOMER").Value = СокрЛП(Документ.ДоверенностьНомер);
		rsMain.Fields.Item("DOV_DATA").Value = ?(Документ.ДоверенностьДата = Дата(1,1,1),"",СокрЛП(Документ.ДоверенностьДата)); 
		
		ВыборкаДетальныеЗаписи  =  Результат.Выбрать();
		rsMain = Doc.DataSets("TAB1");   
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_A1").Value = Контр + 1;
			//If  ИмяБазы  =  "УТП" Then
				rsMain.Fields.Item("TAB1_NOMENKLATURA_NUM").Value = СокрЛП(ВыборкаДетальныеЗаписи.Артикул);
			//EndIf;	
			rsMain.Fields.Item("TAB1_NOMENKLATURA_NAME").Value = СокрЛП(ВыборкаДетальныеЗаписи.Наименование); 
			rsMain.Fields.Item("TAB1_A3").Value = ВыборкаДетальныеЗаписи.Количество;
			rsMain.Fields.Item("TAB1_NOMENKLATURA_CHARCODEUMEASURE").Value = СокрЛП(ВыборкаДетальныеЗаписи.Единица);
			Try
				rsMain.Fields.Item("TAB1_NOMENKLATURA_NUMHBUMEASURE").Value = СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура.БазоваяЕдиницаИзмерения.Код);
			Except
			EndTry;
			rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
			rsMain.Fields.Item("TAB1_A6").Value = ВыборкаДетальныеЗаписи.Сумма;
			
			rsMain.Fields.Item("TAB1_A4").Value = ВыборкаДетальныеЗаписи.Скидка;
			
			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();
			КонецЕсли;        		
		КонецЦикла; 
		//-----------------------------------------------------
		Doc.EnableScripts();	
		Doc.Save();  
		Doc.Close();  
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;

	Исключение
		Сообщить(ПолучитьТекстОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;  
	
КонецПроцедуры

Процедура Формирование_АктаСверки(App, pd, orgId, Документ, Бланк, ИД)
	
	Попытка
		Doc = pd.OpenOrCreateDocument(orgId, Бланк,,, ИД, 0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;

		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
		
        ДатаДокумента = Документ.Дата;
		rsMain.Fields.Item("DOCDATE").Value = ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 

		rsMain.Fields.Item("VALUTA_CHARCODE").Value = СокрЛП(Документ.ВалютаДокумента);
		//rsMain.Fields.Item("NA_KORIST_TEXT").Value = "на користь"; //уже не нужно добавлено в самом шаблоне
		
		rsMain.Fields.Item("DOCDATE").Value = Документ.Дата;  	
		rsMain.Fields.Item("FIRM_NAME").Value  =  СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		//rsMain.Fields.Item("FIRM_INN").Value = СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("DATA_BEG").Value  =  Документ.ДатаНачала;
		rsMain.Fields.Item("DATA_END").Value  =  Документ.ДатаОкончания;
		rsMain.Fields.Item("DATA1").Value = Документ.ДатаОкончания; 
		
		Если ИмяБазы = "УПП" Тогда
			rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(Документ.ДоговорКонтрагента);
		Иначе 
			rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(Документ.ДоговорКонтрагента.НаименованиеДляПечати);
		КонецЕсли;
		
		rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(Документ.ДоговорКонтрагента.Номер);
		rsMain.Fields.Item("DOG_DATE").Value = ?(Документ.ДоговорКонтрагента.Дата <> Дата(1,1,1),СокрЛП(Документ.ДоговорКонтрагента.Дата),"");
			                                                                                   
		Если ИмяБазы = "УТ" Тогда		
		Иначе  
			ДанныеПредставителяОрганизации  =  ОбщегоНазначения.ДанныеФизЛица(Документ.Организация, Документ.ПредставительОрганизации,  Документ.Дата);
			rsMain.Fields.Item("VO_NAME").Value  =  ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации), "", ДанныеПредставителяОрганизации.Представление);
			rsMain.Fields.Item("SIDE_OTV_FIO").Value = СокрЛП(Документ.ПредставительКонтрагента); 
		КонецЕсли;	
		
		Если ЮрикФизик = "Юрик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value   =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value =  "код за ЄДРПОУ"; 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value   =  СокрЛП(СведенияОПоставщике.КодПоДРФО); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value =  "код за ДРФО";
		КонецЕсли;
		
		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		Если Документ.ОстатокНаНачало>0 тогда    
			rsMain.Fields.Item("SND_ORG").Value  =  Документ.ОстатокНаНачало; 
			rsMain.Fields.Item("SNK_SIDE").Value =  Документ.ОстатокНаНачало; 
		Иначе 
			rsMain.Fields.Item("SNK_ORG").Value  =  Макс(Документ.ОстатокНаНачало,  -Документ.ОстатокНаНачало); 
			rsMain.Fields.Item("SND_SIDE").Value =  Макс(Документ.ОстатокНаНачало,  -Документ.ОстатокНаНачало); 
		КонецЕсли; 
				
		ТаблицаАктаСверки  =  СоздатьТаблицуАктаСверки(Документ); 	
		
		rsMain = Doc.DataSets("TAB1");
		КоличествоСтрок = ТаблицаАктаСверки.Количество();
		Счетчик = 0;
		ОборотыПоДебету = 0 ;
		ОборотыПоКредиту = 0 ;
		ОборотыДтКонтр = 0;
		ОборотыКтКонтр = 0;
		
		Для Каждого СтрокаТЗ Из ТаблицаАктаСверки Цикл
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_DATA_ORG").Value  =  СтрокаТЗ.ДАТАОрганизации;
			rsMain.Fields.Item("TAB1_DOC_ORG").Value  =  СокрЛП(СтрокаТЗ.ПредставлениеОрганизации);
			rsMain.Fields.Item("TAB1_DT_ORG").Value  =  СтрокаТЗ.ДТОрганизации;
			rsMain.Fields.Item("TAB1_KT_ORG").Value  =  СтрокаТЗ.КТОрганизации;
			rsMain.Fields.Item("TAB1_DATA_SIDE").Value  =  СтрокаТЗ.ДАТАКонтрагента;
			rsMain.Fields.Item("TAB1_DOC_SIDE").Value  =  СокрЛП(СтрокаТЗ.ПредставлениеКонтрагента);
			rsMain.Fields.Item("TAB1_DT_SIDE").Value  =  СтрокаТЗ.ДТКонтрагента;
			rsMain.Fields.Item("TAB1_KT_SIDE").Value  =  СтрокаТЗ.КТКонтрагента;   			
			
			rsMain.Post(); 
			ОборотыПоДебету = ОборотыПоДебету + СтрокаТЗ.ДТОрганизации;
			ОборотыПоКредиту = ОборотыПоКредиту + СтрокаТЗ.КТОрганизации;
			
			ОборотыДтКонтр = ОборотыДтКонтр + ?(СтрокаТЗ.ДТКонтрагента = Неопределено,0,СтрокаТЗ.ДТКонтрагента);
			ОборотыКтКонтр = ОборотыКтКонтр + ?(СтрокаТЗ.КТКонтрагента = Неопределено,0,СтрокаТЗ.КТКонтрагента);
			
			Счетчик = Счетчик + 1; 
			Если  Счетчик <> КоличествоСтрок Тогда 
				rsMain.Append();  
			КонецЕсли;		
		КонецЦикла; 
	
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();
		rsMain.Append();
		//rsMain.Post();

		rsMain.Fields.Item("OB_DT_ORG").Value = ОборотыПоДебету;
		rsMain.Fields.Item("OB_KT_ORG").Value = ОборотыПоКредиту;
		
		rsMain.Fields.Item("OB_DT_SIDE").Value = ОборотыДтКонтр;
		rsMain.Fields.Item("OB_KT_SIDE").Value = ОборотыКтКонтр;
		
		ОборотДт = Документ.ПоДаннымОрганизации.Итог("Дебет");
		ОборотКт = Документ.ПоДаннымОрганизации.Итог("Кредит");
		
		ОстатокНаКонец = Документ.ОстатокНаНачало + ОборотДт - ОборотКт;
		
		ОстатокНаКонецКонтр = -Документ.ОстатокНаНачало + ОборотыДтКонтр - ОборотыКтКонтр;
		
		Если ОстатокНаКонец > 0 Тогда			
			//rsMain.Fields.Item("SK_DT_ORG").Value = ОстатокНаКонец;
			rsMain.Fields.Item("NA_KORIST").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		ИначеЕсли ОстатокНаКонец < 0 Тогда
			//rsMain.Fields.Item("SK_KT_ORG").Value = ОстатокНаКонец;
			rsMain.Fields.Item("NA_KORIST").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		КонецЕсли;
		
		rsMain.Fields.Item("SK_DT_ORG").Value = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
		rsMain.Fields.Item("SK_KT_ORG").Value = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
		
		Если ОстатокНаКонец > 0 Тогда        			
			rsMain.Fields.Item("DOCSUM").Value = ОстатокНаКонец;
		ИначеЕсли ОстатокНаКонец < 0 Тогда
			rsMain.Fields.Item("DOCSUM").Value = -ОстатокНаКонец;
		КонецЕсли;
		
		Если Документ.СверкаСогласована Тогда
			
			rsMain.Fields.Item("SK_DT_SIDE").Value = ?(ОстатокНаКонецКонтр > 0, ОстатокНаКонецКонтр, 0);
			rsMain.Fields.Item("SK_KT_SIDE").Value = ?(ОстатокНаКонецКонтр < 0, -ОстатокНаКонецКонтр, 0);
			
			rsMain.Fields.Item("REZ_T").Value = "В результаті звірення виявлена розбіжність інформації про стан розрахунків у розмірі";
			rsMain.Fields.Item("REZ_S").Value = ?(ОстатокНаКонец+ОстатокНаКонецКонтр>0,1,-1)*(ОстатокНаКонец+ОстатокНаКонецКонтр); //Документ.Расхождение;
			rsMain.Fields.Item("REZ_V").Value =  СокрЛП(Документ.ВалютаДокумента); 			
			rsMain.Fields.Item("SV_ZD").Value =  "За даними"; 
			rsMain.Fields.Item("SV_SIDE").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование); 
			rsMain.Fields.Item("SV_NA").Value = "на"; 
			rsMain.Fields.Item("SV_DATA").Value = Документ.ДатаОкончания; 
			rsMain.Fields.Item("SV_NA_KORIST_TEXT").Value = "заборгованість на користь";
			rsMain.Fields.Item("SV_V").Value = СокрЛП(Документ.ВалютаДокумента); 
			
			Если ОстатокНаКонецКонтр > 0 Тогда
				rsMain.Fields.Item("SV_NA_KORIST").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
				rsMain.Fields.Item("SV_DOCSUM").Value = ОстатокНаКонецКонтр; 
			ИначеЕсли ОстатокНаКонецКонтр < 0 Тогда
				rsMain.Fields.Item("SV_NA_KORIST").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
				rsMain.Fields.Item("SV_DOCSUM").Value = -ОстатокНаКонецКонтр;	
			КонецЕсли;
		КонецЕсли;
		
		rsMain.Post();   

		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close();
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;
		
	Исключение
		Сообщить(ПолучитьТекстОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;  
	
КонецПроцедуры

Функция СоздатьТаблицуАктаСверки(Документ)
	
	Запрос  =  Новый Запрос;
	Запрос.Текст  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктСверкиВзаиморасчетовОрганизация.Дата как ДАТАОрганизации, 
	|	АктСверкиВзаиморасчетовОрганизация.Представление как ПредставлениеОрганизации, 
	|	АктСверкиВзаиморасчетовОрганизация.Дебет КАК ДТОрганизации, 
	|	АктСверкиВзаиморасчетовОрганизация.Кредит КАК КТОрганизации
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК АктСверкиВзаиморасчетовОрганизация    
	|ГДЕ
	|	АктСверкиВзаиморасчетовОрганизация.Ссылка  =  &Документ";
	Запрос.УстановитьПараметр("Документ",  Документ); 
	Результат  =  Запрос.Выполнить().Выгрузить();
	
	Запрос2  =  Новый Запрос;
	Запрос2.Текст  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктСверкиВзаиморасчетовКонтрагент.Дата как ДАТАКонтрагента, 
	|	АктСверкиВзаиморасчетовКонтрагент.Представление как ПредставлениеКонтрагента, 
	|	АктСверкиВзаиморасчетовКонтрагент.Дебет КАК ДТКонтрагента, 
	|	АктСверкиВзаиморасчетовКонтрагент.Кредит КАК КТКонтрагента
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымКонтрагента КАК АктСверкиВзаиморасчетовКонтрагент 
	|ГДЕ
	|	АктСверкиВзаиморасчетовКонтрагент.Ссылка  =  &Документ"; 
	
	Запрос2.УстановитьПараметр("Документ",  Документ); 
	Результат2  =  Запрос2.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("ДАТАКонтрагента"); 
	Результат.Колонки.Добавить("ПредставлениеКонтрагента"); 
	Результат.Колонки.Добавить("ДТКонтрагента"); 
	Результат.Колонки.Добавить("КТКонтрагента"); 
	Если Результат2.Количество() Тогда 
		Если Результат.Количество() >=  Результат2.Количество() Тогда 
			Для Н = 0 По Результат2.Количество() -1 Цикл 
				Стр  =  Результат[Н]; 
				ЗаполнитьЗначенияСвойств(Стр,  Результат2[Н]); 
			КонецЦикла;
		Иначе 
			//во второй таблице больше количество строк 
			Для Н  =  0 По Результат.Количество() -1 Цикл 
				Стр  =  Результат[Н]; 
				ЗаполнитьЗначенияСвойств(Стр,  Результат2[Н]); 
			КонецЦикла;
			
			Пока Н <> Результат2.Количество()  Цикл
				Н  =  Н + 1;
				Стр  =  Результат.Добавить(); 
				ЗаполнитьЗначенияСвойств(Стр,  Результат2[Н-1]); 
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

Функция Формирование_НН(App, Документ, Бланк, PDate, ИД, orgId)  
	
	Перем Позиция;	
	Перем НН2012; // истина - НН выписана после 16/12/2011,  ложь - до 16/12/2011
	
	Если НачалоДня(Дата(Документ.Дата)) >=  НачалоДня(Дата(2011, 12, 16)) Тогда	
		НН2012  =  Истина;
	Иначе
		НН2012  =  Ложь;
	КонецЕсли;
	
	Данные = Новый Структура("Организация",Документ.Организация); 
	КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(Документ.Дата, Данные);
	Если КодыОрганизации.Количество() > 0 Тогда
		пЕДРПОУ = КодыОрганизации[0].КодПоЕДРПОУ;
	КонецЕсли;
	
	Попытка
		//Если пФил <> "" Тогда
			//yes = App.SelectFirm(пЕДРПОУ, пФил);
		//Иначе
		//	yes = App.SelectFirm(пЕДРПОУ);
		//КонецЕсли; 
		
		//ЕСЛИ yes ТОГДА 
			Doc = App.OpenOrCreateByExDocID(Бланк, 0, PDate, , ИД, 0); 
			//pd = App.GetPrimaryDocs(); 
			//Doc = pd.OpenOrCreateDocument(orgId, Бланк, , , ИД,  0);
			Попытка
				Doc.DisableScripts();
			Исключение
				Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
				Возврат Ложь
			КонецПопытки;
		//Конецесли;
		a131_1 = 0;
		a131_2 = 0;
		a133_1 = 0;
		a133_2 = 0;
		
		rsMain = Doc.DataSets();    
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СведенияОПродавце   = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Организация,  Документ.Дата);
		СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата);
		
		//запускается процедура печати документа "Налоговая накладная",  которая формирует структуру данных НН
		Попытка
			Если ЗначениеЗаполнено(Документ.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены) Тогда
				НалоговыйДокументОбъект = Документ.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены.ПолучитьОбъект();
				СтруктураПараметров     = НалоговыйДокументОбъект.ПечатьДокумента(Истина);
				ПоляНН = СтруктураПараметров.НалоговыйДокументЗЦ;
				СтруктураДанныеТЧ = СтруктураПараметров.НалоговыйДокументЗЦ.R; //в данной таблице значений собраны строки из всех табличных частей документа,  кроме табличной части "Возвратная тара"
			Иначе
				НалоговыйДокументОбъект = Документ.ПолучитьОбъект();
				СтруктураПараметров     = НалоговыйДокументОбъект.ПечатьДокумента(Истина);
				ПоляНН = СтруктураПараметров.НалоговыйДокумент;
				СтруктураДанныеТЧ = СтруктураПараметров.НалоговыйДокумент.R; //в данной таблице значений собраны строки из всех табличных частей документа,  кроме табличной части "Возвратная тара"
			КонецЕсли; 
		Исключение
			Предупреждение(НСТР("ru = 'Заполнение по данным документа невозможно в данной версии конфигурации. Необходимо обновить конфигурацию!'; uk  =  'Заповнення даними документа неможливе на поточній версії конфигурації. Необхідно оновити конфігурацію!'"));
			Возврат Ложь;
		КонецПопытки;
		
		Если ИмяБазы = "УПП" или ИмяБазы = "УТП" Тогда
			ТекТелефоныОрганизации  =  СведенияОПродавце.Телефоны;
			Позиция1  =  Найти (ТекТелефоныОрганизации, ", ");  		
			Если ЗначениеЗаполнено(Найти(ТекТелефоныОрганизации, ", ")) Тогда  
				Позиция1 = Сред(ТекТелефоныОрганизации, 1, Позиция1-1);
			Иначе
				Позиция1 = ТекТелефоныОрганизации;
			КонецЕсли;   		
			Позиция1  =  СтрЗаменить(Позиция1,  " ",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  "(",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  ")",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  "-",  ""); 
			ТекТелефоныОрганизации  =  Позиция1;       
			//---------------------------------------------------------------------
			ТекТелефоныКонтрагента = СведенияОПокупателе.Телефоны;
			Позиция2 = Найти (ТекТелефоныКонтрагента, ", ");  		
			Если ЗначениеЗаполнено(Найти(ТекТелефоныКонтрагента, ", ")) Тогда  
				Позиция2 = Сред(ТекТелефоныКонтрагента, 1, Позиция2-1);
			Иначе
				Позиция2 = ТекТелефоныКонтрагента;
			КонецЕсли;   		
			Позиция2 = СтрЗаменить(Позиция2,  " ",  "");
			Позиция2 = СтрЗаменить(Позиция2,  "(",  "");
			Позиция2 = СтрЗаменить(Позиция2,  ")",  "");
			Позиция2 = СтрЗаменить(Позиция2,  "-",  ""); 
			ТекТелефоныКонтрагента = Позиция2;
		Иначе
			ТекТелефоныОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "Телефоны, ", Ложь);
			ТекТелефоныОрганизации = ФормированиеПечатныхФорм.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныОрганизации);
			ТекТелефоныКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "Телефоны, ", Ложь);
			ТекТелефоныКонтрагента = ФормированиеПечатныхФорм.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
		КонецЕсли;
		//ВалютаДокумента   =  Константа.ПолучитьАтрибут("ОсновнаяВалюта").Наименование;
		
		rsMain.Fields.Item("N11").Value = СокрЛП(ПоляНН.HFILL);        
		
		Попытка	
			rsMain.Fields.Item("N13").Value = ?(ЗначениеЗаполнено(ПоляНН.HORIG1), 1, "");  
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("N14").Value = СокрЛП(ПоляНН.HTYPR);
		Исключение
		КонецПопытки;
		
		Попытка	
			Если Строка(Документ.ВидОперации) = "Операции, освобожденные от  НДС" 
				или Строка(Документ.ВидОперации) = "Операції, звільнені від ПДВ" 
				или Строка(Документ.ВидОперации) = "Итоговая в рознице по операциям, освобожденным от  НДС"
				или Строка(Документ.ВидОперации) = "Підсумкова в роздробі по операціях, звільнених від  ПДВ" 
				или Строка(Документ.ВидОперации) = "Реализация в розницу плательщику НДС по освобожденному НДС"	
				или Строка(Документ.ВидОперации) = "Реалізація в роздріб платникові ПДВ по звільненому ПДВ" 
				Тогда
				rsMain.Fields.Item("N26").Value = "Без ПДВ";
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если Документ.Сводная Тогда
			rsMain.Fields.Item("N27").Value = ПоляНН.R01G1;
		КонецЕсли;
		
		Попытка
			Если ЗначениеЗаполнено(ПоляНН.H03) Тогда
				rsMain.Fields.Item("N25").Value  = "1";
				Сведенная = 1;
			КонецЕсли;
		Исключение
			Сведенная = 0;
		КонецПопытки;
		Сведенная = 0;
		
		Попытка
			rsMain.Fields.Item("N8").Value = Строка(СокрЛП(Документ.ВидДоговора)); 
			Если ЗначениеЗаполнено(Документ.ДоговорКонтрагента.Номер) тогда
				rsMain.Fields.Item("N81").Value = Строка(СокрЛП(Документ.ДоговорКонтрагента.Номер)); 
			КонецЕсли;
			Если ЗначениеЗаполнено(Документ.ДоговорКонтрагента.Дата) тогда
				rsMain.Fields.Item("N82").Value = Документ.ДоговорКонтрагента.Дата; 
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		rsMain.Fields.Item("N4").Value = СокрЛП(ПоляНН.HKBUY); //Строка(СокрЛП(СведенияОПокупателе.ПолноеНаименование)); 
		rsMain.Fields.Item("N3").Value = СокрЛП(ПоляНН.HNAMEBUY); //Строка(СокрЛП(СведенияОПокупателе.ИНН));
		Попытка
			rsMain.Fields.Item("DEPT_POK").Value = СокрЛП(ПоляНН.HFBUY);
		Исключение
		КонецПопытки;
		Попытка
			rsMain.Fields.Item("N10").Value = СокрЛП(ПоляНН.HBOS);//Строка(СокрЛП(КтоВыписалНалоговуюНакладную));
			rsMain.Fields.Item("INN").Value = СокрЛП(ПоляНН.HKBOS);
		Исключение
		КонецПопытки;	
		
		//Если ЗначениеЗаполнено(Документ.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены) Тогда
		//	rsMain.Fields.Item("EDR_POK").Value = ?(Документ.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, СокрЛП(СведенияОПродавце.КодПоЕДРПОУ), СокрЛП(СведенияОПродавце.КодПоДРФО));
		//Иначе
		//	rsMain.Fields.Item("EDR_POK").Value = ?(Документ.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ), СокрЛП(СведенияОПокупателе.КодПоДРФО));
		//КонецЕсли;
		rsMain.Fields.Item("EDR_POK").Value = СокрЛП(ПоляНН.HTINBUY);
		
		Если ЗначениеЗаполнено(Документ.СпецРежимНалогообложения) Тогда
			rsMain.Fields.Item("N2_12").Value = Документ.СпецРежимНалогообложения;
		КонецЕсли; 
		
		
		// заполним налоговое обязательство по виду операции документа
		//А нужно ли это
		Если Документ.Видоперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации Тогда
			//rsMain.Fields.Item("PZOB").Value = 0; // ?? не нашел соответствие
		ИначеЕсли Документ.Видоперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации Тогда
			rsMain.Fields.Item("PZOB").Value = 2;
		ИначеЕсли Документ.Видоперации = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации Тогда
			rsMain.Fields.Item("PZOB").Value = 1;
		ИначеЕсли Документ.Видоперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
			rsMain.Fields.Item("PZOB").Value = 3;
		КонецЕсли;
		
		НомерБезПрефикса = ПолучитьНомерБезНулей(Документ);
		СпецРеж = "";
		Если (ЕстьРеквизитДокумента("СпецРежимНалогообложения", Документ.Метаданные()))
			И (Документ.СпецРежимНалогообложения > 0) Тогда
			rsMain.Fields.Item("N2_12").Value = СокрЛП(ПоляНН.HNUM1);
			СпецРеж = "/" + СокрЛП(ПоляНН.HNUM1) + "/";
		КонецЕсли;
		
		Филия = "";
		Если (ЕстьРеквизитДокумента("ОбособленноеПодразделение", Документ.Метаданные()))
			И (ЗначениеЗаполнено(Документ.ОбособленноеПодразделение.Префикс)) Тогда
			rsMain.Fields.Item("N2_13").Value = СокрЛП(ПоляНН.HNUM2);
			Филия = СокрЛП(ПоляНН.HNUM2);
			Если НЕ ЗначениеЗаполнено(СпецРеж) Тогда				
				СпецРеж = "//";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НомерБезПрефикса) и НомерБезПрефикса <> "" Тогда
			rsMain.Fields.Item("N2_11").Value = СокрЛП(ПоляНН.HNUM);;   
		КонецЕсли;
		
		rsMain.Fields.Item("N2_1").Value = НомерБезПрефикса + СпецРеж + Филия;	
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(ПоляНН.HNAMESEL);
		rsMain.Fields.Item("FIRM_INN").Value  = СокрЛП(ПоляНН.HKSEL);
		rsMain.Fields.Item("EDRPOU").Value  = СокрЛП(ПоляНН.HTINSEL); 
		
		Попытка
			rsMain.Fields.Item("FIRM_SRPNDS").Value = СокрЛП(СведенияОПродавце.НомерСвидетельства);
		Исключение
		КонецПопытки;
		rsMain.Fields.Item("NAKL_TYPE").Value = 1;   // 0  =  Входящая НН 1  =  Исходящая 
		
		НазваниеЯчейки  =  ?(НН2012, "PHON", "FIRM_PHON");
		rsMain.Fields.Item(НазваниеЯчейки).Value  =  Строка(СокрЛП(ТекТелефоныОрганизации)); 
		Попытка
			rsMain.Fields.Item("N16").Value  =  СокрЛП(ПоляНН.R003G10S);
		Исключение
		КонецПопытки;
		
		rsMain  =  Doc.DataSets("TAB1");
		ИтогОснСтавка = 0;
		ИтогТеррУкр = 0;
		ИтогЭкспорт = 0;
		ИтогОсвобожден = 0;
		ИтогСтавка7 = 0;

		ЧСуммаНДС = Документ.Товары.Итог("СуммаНДС") + Документ.Услуги.Итог("СуммаНДС");
		ЧСуммаСНДС = ПолучитьСуммуДокументаСНДС(Документ, "Товары")+ПолучитьСуммуДокументаСНДС(Документ, "Услуги");
		Если Документ.Метаданные().ТабличныеЧасти.Найти("ОС") <> Неопределено Тогда
			ЧСуммаНДС = ЧСуммаНДС + Документ.ОС.Итог("СуммаНДС");
			ЧСуммаСНДС = ЧСуммаСНДС + ПолучитьСуммуДокументаСНДС(Документ, "ОС");
		КонецЕсли;
		
		Если Документ.Метаданные().ТабличныеЧасти.Найти("НМА") <> Неопределено Тогда
			ЧСуммаНДС = ЧСуммаНДС + Документ.НМА.Итог("СуммаНДС");
			ЧСуммаСНДС = ЧСуммаСНДС + ПолучитьСуммуДокументаСНДС(Документ, "НМА");
		КонецЕсли;

		СуммаНДС = Формат(ЧСуммаНДС, "ЧГ=0; ЧДЦ=2");
		СуммаСНДС = Формат(ЧСуммаСНДС, "ЧГ=0; ЧДЦ=2");
		СуммаБезНДС = Формат(ЧСуммаСНДС - ЧСуммаНДС, "ЧГ=0; ЧДЦ=2");
		
		КоличествоСтрок = СтруктураДанныеТЧ.Количество();
		Ном = 1;
		Счетчик  =  0; 
		G109Есть = СтруктураДанныеТЧ.Колонки.Найти("G109") <> Неопределено;
		
		Для Каждого СтрокаТЧ Из СтруктураДанныеТЧ Цикл 
			
			rsMain.Edit(); 
			
			Попытка
				rsMain.Fields.Item("TAB1_A1").Value= Ном;
			Исключение
			КонецПопытки;	
			
			Попытка
				rsMain.Fields.Item("TAB1_A13").Value =  СокрЛП(СтрокаТЧ.G3S); // Номенклатура
			Исключение
			КонецПопытки;	
			
			Попытка
				rsMain.Fields.Item("TAB1_A131").Value =  СокрЛП(СтрокаТЧ.G4); // Код згыдно УКТ ЗЕД
			Исключение
			КонецПопытки;
			
			Если НЕ ЗначениеЗаполнено(Документ.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены) Тогда
				Попытка
					Если  СтрокаТЧ.G32 <> Неопределено
						Тогда rsMain.Fields.Item("TAB1_A132").Value = 1
					КонецЕсли;// Ознака импорта
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			Попытка
				rsMain.Fields.Item("TAB1_A133").Value =  СокрЛП(СтрокаТЧ.G33); // Код згыдно ДКПП
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A14").Value =  СокрЛП(СтрокаТЧ.G4S); // Единица измерения  товаров   
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A141").Value =  СокрЛП(СтрокаТЧ.G105_2S); // Единица измерения  товаров КоД
			Исключение
			КонецПопытки;	
			
			Попытка
				Если  НЕ(СокрЛП(СтрокаТЧ.G5) = "0" и Сведенная = 1) Тогда
					rsMain.Fields.Item("TAB1_A15").Value =  СтрокаТЧ.G5; // Количество 
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
				Если НЕ (СокрЛП(СтрокаТЧ.G6) = "0" и Сведенная = 1) Тогда
					rsMain.Fields.Item("TAB1_A16").Value =  ПреобразоватьСтрокуВЧисло(СтрокаТЧ.G6); // Цена продажи
				КонецЕсли;	
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A8").Value =  СокрЛП(СтрокаТЧ.G008);   //Код ставки
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A9").Value =  СокрЛП(СтрокаТЧ.G009);  //Код пильгы
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A10").Value =  ПреобразоватьСтрокуВЧисло(СтрокаТЧ.G010);   //Объём поставок
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A20").Value =  СокрЛП(СтрокаТЧ.G11_10);  //Сумма податку
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A11").Value =  СокрЛП(СтрокаТЧ.G011); // Код виду деятельности СХ
			Исключение
			КонецПопытки;
			
			rsMain.Post();  
			Ном = Ном + 1;
			Счетчик  =  Счетчик + 1; 
			Если  Счетчик <> КоличествоСтрок Тогда 
				rsMain.Append();  
			КонецЕсли;	
			Если ЗначениеЗаполнено(СтрокаТЧ.G4) тогда 
				a131_1 = 1;
			Иначе
				a131_2 = 1;
			КонецЕсли;
			Попытка
				Если 
					ЗначениеЗаполнено(СтрокаТЧ.G33) тогда 
					a133_1 = 1;
				Иначе
					a133_2 = 1;
				КонецЕсли;
			Исключение
			КонецПопытки;	
		КонецЦикла;
		
		
		rsMain=Doc.DataSets() ;  
		rsMain.Edit();             
		rsMain.Append();
		rsMain.Post(); 
		
		Попытка
			Если a131_1 = 1 and a131_2 = 0 Тогда
				rsMain.Fields.Item("UKTPRESENCE").Value=Строка("Наявний");
			ИначеЕсли a131_1 = 1 and a131_2 = 1 Then
				rsMain.Fields.Item("UKTPRESENCE").Value = Строка("Наявний частково");
			ИначеЕсли a131_1 = 0 and a131_2 = 1 Then
				rsMain.Fields.Item("UKTPRESENCE").Value = Строка("Відсутній");
			КонецЕсли;
			
			Если a133_1 = 1 and a133_2 = 0 Then
				rsMain.Fields.Item("SERVICEPRESENCE").Value = Строка("Наявний");
			ИначеЕсли a133_1 = 1 and a133_2 = 1 Then
				rsMain.Fields.Item("SERVICEPRESENCE").Value = Строка("Наявний частково");
			ИначеЕсли a133_1 = 0 and a133_2 = 1 Then
				rsMain.Fields.Item("SERVICEPRESENCE").Value = Строка("Відсутній");
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка
			Тара = СокрЛП(ПоляНН.R02G11);		
			Если Тара <> "0" Тогда		
				rsMain.Fields.Item("A3_11").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R02G11);  //ЗЗТ-загальна сума коштів
			КонецЕсли;
		Исключение
		КонецПопытки;
		Попытка
			rsMain.Fields.Item("A5_7").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R01G7);   //Ставка 20%
			rsMain.Fields.Item("A6_7").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R03G7);
			rsMain.Fields.Item("A6_11").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R03G11);  //   Общая сумма
		Исключение
		КонецПопытки;	
		
		Попытка
			rsMain.Fields.Item("A5_71").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R01G109);     //Ставка 7%
			rsMain.Fields.Item("A6_71").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R03G109);
			rsMain.Fields.Item("A6_11").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R03G11);  //   Общая сумма
		Исключение
		КонецПопытки;	
		
		Попытка
			rsMain.Fields.Item("A5_8").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R01G8);   //Всякие ставки по 0%
		Исключение
		КонецПопытки;
		
		Попытка
			//Всякие ставки по 0%
			rsMain.Fields.Item("A5_9").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R01G9);
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("A5_10").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R01G10);
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("A7_11").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R04G11);   //   Общая сумма с ПДВ
		Исключение
		КонецПопытки;
		
		rsMain.Post();
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save(1);
		Doc.Close();
		
		Попытка
			Если СозданиеКонтрагентовМед = Истина Тогда
				Попытка
					СозданиеКонтрагентовМедок(App, Документ, orgId);
				Исключение
					Сообщить("Не удалось создать контрагента в Медке",);
					ВызватьИсключение;
				КонецПопытки;	
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		
	Исключение
		Сообщить(ПолучитьТекстОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	Возврат Истина;
	
КонецФункции

Функция Формирование_СлужебнойНН(App, Документ, Бланк, PDate, ИД, orgId)  
	
	Перем Позиция;	
	Перем НН2012; // истина - НН выписана после 16/12/2011,  ложь - до 16/12/2011
	
	Если НачалоДня(Дата(Документ.Дата)) >=  НачалоДня(Дата(2011, 12, 16)) Тогда	
		НН2012  =  Истина;
	Иначе
		НН2012  =  Ложь;
	КонецЕсли;
	
	Данные = Новый Структура("Организация",Документ.Организация); 
	КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(Документ.Дата, Данные);
	Если КодыОрганизации.Количество() > 0 Тогда
		пЕДРПОУ = КодыОрганизации[0].КодПоЕДРПОУ;
	КонецЕсли;
	
	Попытка
		//Если пФил <> "" Тогда
			//yes = App.SelectFirm(пЕДРПОУ, пФил);
		//Иначе
		//	yes = App.SelectFirm(пЕДРПОУ);
		//КонецЕсли; 
		
		//ЕСЛИ yes ТОГДА 
			Doc = App.OpenOrCreateByExDocID(Бланк, 0, PDate, , ИД, 0); 
			Попытка
				Doc.DisableScripts();
			Исключение
				Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
				Возврат Ложь
			КонецПопытки;
		//Конецесли;
		a131_1 = 0;
		a131_2 = 0;
		a133_1 = 0;
		a133_2 = 0;
		
		rsMain = Doc.DataSets();    
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СведенияОПродавце   = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Организация,  Документ.Дата);
		СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата);
		
		//запускается процедура печати документа "Налоговая накладная",  которая формирует структуру данных НН
		Попытка
			НалоговыйДокументОбъект  =  Документ.ПолучитьОбъект();
			СтруктураПараметров      =  НалоговыйДокументОбъект.ПечатьДокумента(Истина);
			ПоляНН = СтруктураПараметров.НалоговыйДокумент;
			СтруктураДанныеТЧ        =  СтруктураПараметров.НалоговыйДокумент.R; //в данной таблице значений собраны строки из всех табличных частей документа,  кроме табличной части "Возвратная тара"
		Исключение
			Предупреждение(НСТР("ru  =  'Заполнение по данным документа невозможно в данной версии конфигурации. Необходимо обновить конфигурацию!'; uk  =  'Заповнення даними документа неможливе на поточній версії конфигурації. Необхідно оновити конфігурацію!'"));
			Возврат Ложь;
		КонецПопытки;
		
		Если ИмяБазы = "УПП" или ИмяБазы = "УТП" Тогда
			ТекТелефоныОрганизации  =  СведенияОПродавце.Телефоны;
			Позиция1  =  Найти (ТекТелефоныОрганизации, ", ");  		
			Если ЗначениеЗаполнено(Найти(ТекТелефоныОрганизации, ", ")) Тогда  
				Позиция1  =  Сред(ТекТелефоныОрганизации, 1, Позиция1-1);
			Иначе
				Позиция1 =  ТекТелефоныОрганизации;
			КонецЕсли;   		
			Позиция1  =  СтрЗаменить(Позиция1,  " ",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  "(",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  ")",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  "-",  ""); 
			ТекТелефоныОрганизации  =  Позиция1;       
			//---------------------------------------------------------------------
			ТекТелефоныКонтрагента = СведенияОПокупателе.Телефоны;
			Позиция2 = Найти (ТекТелефоныКонтрагента, ", ");  		
			Если ЗначениеЗаполнено(Найти(ТекТелефоныКонтрагента, ", ")) Тогда  
				Позиция2 = Сред(ТекТелефоныКонтрагента, 1, Позиция2-1);
			Иначе
				Позиция2 = ТекТелефоныКонтрагента;
			КонецЕсли;   		
			Позиция2 = СтрЗаменить(Позиция2,  " ",  "");
			Позиция2 = СтрЗаменить(Позиция2,  "(",  "");
			Позиция2 = СтрЗаменить(Позиция2,  ")",  "");
			Позиция2 = СтрЗаменить(Позиция2,  "-",  ""); 
			ТекТелефоныКонтрагента = Позиция2;
		Иначе
			ТекТелефоныОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "Телефоны, ", Ложь);
			ТекТелефоныОрганизации = ФормированиеПечатныхФорм.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныОрганизации);
			ТекТелефоныКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "Телефоны, ", Ложь);
			ТекТелефоныКонтрагента = ФормированиеПечатныхФорм.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
		КонецЕсли;
		//ВалютаДокумента   =  Константа.ПолучитьАтрибут("ОсновнаяВалюта").Наименование;
		
		rsMain.Fields.Item("N11").Value = СокрЛП(ПоляНН.HFILL);        
		
		Попытка	
			rsMain.Fields.Item("N13").Value = ?(ЗначениеЗаполнено(ПоляНН.HORIG1), 1, "");  
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("N14").Value = СокрЛП(ПоляНН.HTYPR);
		Исключение
		КонецПопытки;
		
		Попытка	
			Если    Строка(Документ.ВидОперации) = "Операции, освобожденные от  НДС" 
				или Строка(Документ.ВидОперации) = "Операції, звільнені від ПДВ" 
				или Строка(Документ.ВидОперации) = "Итоговая в рознице по операциям, освобожденным от  НДС"
				или Строка(Документ.ВидОперации) = "Підсумкова в роздробі по операціях, звільнених від  ПДВ" 
				или Строка(Документ.ВидОперации) = "Реализация в розницу плательщику НДС по освобожденному НДС"	
				или Строка(Документ.ВидОперации) = "Реалізація в роздріб платникові ПДВ по звільненому ПДВ" 
				Тогда
				rsMain.Fields.Item("N26").Value = "Без ПДВ";
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если Документ.Сводная Тогда
			rsMain.Fields.Item("N27").Value = ПоляНН.R01G1;
		КонецЕсли;
		
		Попытка
			Если ЗначениеЗаполнено(ПоляНН.H03) Тогда
				rsMain.Fields.Item("N25").Value  = "1";
				Сведенная = 1;
			КонецЕсли;
		Исключение
			Сведенная = 0;
		КонецПопытки;
		Сведенная = 0;
		
		Попытка
			rsMain.Fields.Item("N8").Value   =  Строка(СокрЛП(Документ.ВидДоговора)); 
			Если ЗначениеЗаполнено(Документ.ДоговорКонтрагента.Номер) тогда
				rsMain.Fields.Item("N81").Value  =  Строка(СокрЛП(Документ.ДоговорКонтрагента.Номер)); 
			КонецЕсли;
			Если ЗначениеЗаполнено(Документ.ДоговорКонтрагента.Дата) тогда
				rsMain.Fields.Item("N82").Value      =  Документ.ДоговорКонтрагента.Дата; 
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		
		rsMain.Fields.Item("N4").Value   = СокрЛП(ПоляНН.HKBUY); //Строка(СокрЛП(СведенияОПокупателе.ПолноеНаименование)); 
		rsMain.Fields.Item("N3").Value   = СокрЛП(ПоляНН.HNAMEBUY); //Строка(СокрЛП(СведенияОПокупателе.ИНН));
		Попытка
			rsMain.Fields.Item("DEPT_POK").Value = СокрЛП(ПоляНН.HFBUY);
		Исключение
		КонецПопытки;
		Попытка
			rsMain.Fields.Item("N10").Value = СокрЛП(ПоляНН.HBOS);//Строка(СокрЛП(КтоВыписалНалоговуюНакладную));
			rsMain.Fields.Item("INN").Value = СокрЛП(ПоляНН.HKBOS);
		Исключение
		КонецПопытки;	
		
		//rsMain.Fields.Item("EDR_POK").Value  =  ?(Документ.Контрагент.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ЮрЛицо, СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ), СокрЛП(СведенияОПокупателе.КодПоДРФО));
		rsMain.Fields.Item("EDR_POK").Value = СокрЛП(ПоляНН.HTINBUY);
		
		Если ЗначениеЗаполнено(Документ.СпецРежимНалогообложения) Тогда
			rsMain.Fields.Item("N2_12").Value = Документ.СпецРежимНалогообложения;
		КонецЕсли; 
		
		
		// заполним налоговое обязательство по виду операции документа
		//А нужно ли это
		Если Документ.Видоперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации Тогда
			//rsMain.Fields.Item("PZOB").Value = 0; // ?? не нашел соответствие
		ИначеЕсли Документ.Видоперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации Тогда
			rsMain.Fields.Item("PZOB").Value = 2;
		ИначеЕсли Документ.Видоперации = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации Тогда
			rsMain.Fields.Item("PZOB").Value = 1;
		ИначеЕсли Документ.Видоперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
			rsMain.Fields.Item("PZOB").Value = 3;
		КонецЕсли;
		
		НомерБезПрефикса = ПолучитьНомерБезНулей(Документ);
		СпецРеж = "";
		Если (ЕстьРеквизитДокумента("СпецРежимНалогообложения", Документ.Метаданные()))
			И (Документ.СпецРежимНалогообложения > 0) Тогда
			rsMain.Fields.Item("N2_12").Value = СокрЛП(ПоляНН.HNUM1);
			СпецРеж = "/" + СокрЛП(ПоляНН.HNUM1) + "/";
		КонецЕсли;
		
		Филия = "";
		Если (ЕстьРеквизитДокумента("ОбособленноеПодразделение", Документ.Метаданные()))
			И (ЗначениеЗаполнено(Документ.ОбособленноеПодразделение.Префикс)) Тогда
			rsMain.Fields.Item("N2_13").Value = СокрЛП(ПоляНН.HNUM2);
			Филия = СокрЛП(ПоляНН.HNUM2);
			Если НЕ ЗначениеЗаполнено(СпецРеж) Тогда				
				СпецРеж = "//";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НомерБезПрефикса) и НомерБезПрефикса <> "" Тогда
			rsMain.Fields.Item("N2_11").Value = СокрЛП(ПоляНН.HNUM);;   
		КонецЕсли;
		
		rsMain.Fields.Item("N2_1").Value = НомерБезПрефикса + СпецРеж + Филия;	
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(ПоляНН.HNAMESEL);
		rsMain.Fields.Item("FIRM_INN").Value  = СокрЛП(ПоляНН.HKSEL); 
		rsMain.Fields.Item("EDRPOU").Value  = СокрЛП(ПоляНН.HTINSEL); 
		
		Попытка
			rsMain.Fields.Item("FIRM_SRPNDS").Value  =  СокрЛП(СведенияОПродавце.НомерСвидетельства);
		Исключение
		КонецПопытки;
		rsMain.Fields.Item("NAKL_TYPE").Value = 1;   // 0  =  Входящая НН 1  =  Исходящая 
		
		НазваниеЯчейки  =  ?(НН2012, "PHON", "FIRM_PHON");
		rsMain.Fields.Item(НазваниеЯчейки).Value  =  Строка(СокрЛП(ТекТелефоныОрганизации)); 
		Попытка
			rsMain.Fields.Item("N16").Value  =  СокрЛП(ПоляНН.R003G10S);
		Исключение
		КонецПопытки;
		
		rsMain  =  Doc.DataSets("TAB1");
		ИтогОснСтавка = 0;
		ИтогТеррУкр = 0;
		ИтогЭкспорт = 0;
		ИтогОсвобожден = 0;
		ИтогСтавка7 = 0;

		ЧСуммаНДС = Документ.Товары.Итог("СуммаНДС") + Документ.Услуги.Итог("СуммаНДС");
		ЧСуммаСНДС = ПолучитьСуммуДокументаСНДС(Документ, "Товары")+ПолучитьСуммуДокументаСНДС(Документ, "Услуги");
		Если Документ.Метаданные().ТабличныеЧасти.Найти("ОС") <> Неопределено Тогда
			ЧСуммаНДС = ЧСуммаНДС + Документ.ОС.Итог("СуммаНДС");
			ЧСуммаСНДС = ЧСуммаСНДС + ПолучитьСуммуДокументаСНДС(Документ, "ОС");
		КонецЕсли;
		
		Если Документ.Метаданные().ТабличныеЧасти.Найти("НМА") <> Неопределено Тогда
			ЧСуммаНДС = ЧСуммаНДС + Документ.НМА.Итог("СуммаНДС");
			ЧСуммаСНДС = ЧСуммаСНДС + ПолучитьСуммуДокументаСНДС(Документ, "НМА");
		КонецЕсли;

		СуммаНДС = Формат(ЧСуммаНДС, "ЧГ=0; ЧДЦ=2");
		СуммаСНДС = Формат(ЧСуммаСНДС, "ЧГ=0; ЧДЦ=2");
		СуммаБезНДС = Формат(ЧСуммаСНДС - ЧСуммаНДС, "ЧГ=0; ЧДЦ=2");
		
		КоличествоСтрок  =  СтруктураДанныеТЧ.Количество();
		Ном = 1;
		Счетчик  =  0; 
		G109Есть = СтруктураДанныеТЧ.Колонки.Найти("G109") <> Неопределено;
		
		Для Каждого СтрокаТЧ Из СтруктураДанныеТЧ Цикл 
			
			rsMain.Edit(); 
			
			Попытка
				rsMain.Fields.Item("TAB1_A1").Value= Ном;
			Исключение
			КонецПопытки;	
			
			Попытка
				rsMain.Fields.Item("TAB1_A13").Value =  СокрЛП(СтрокаТЧ.G3S); // Номенклатура
			Исключение
			КонецПопытки;	
			
			Попытка
				rsMain.Fields.Item("TAB1_A131").Value =  СокрЛП(СтрокаТЧ.G4); // Код згыдно УКТ ЗЕД
			Исключение
			КонецПопытки;
			Попытка
				Если  СтрокаТЧ.G32<> Неопределено
					Тогда rsMain.Fields.Item("TAB1_A132").Value = 1
				КонецЕсли;// Ознака импорта
			Исключение
			КонецПопытки;
			Попытка
				rsMain.Fields.Item("TAB1_A133").Value =  СокрЛП(СтрокаТЧ.G33); // Код згыдно ДКПП
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A14").Value =  СокрЛП(СтрокаТЧ.G4S); // Единица измерения  товаров   
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A141").Value =  СокрЛП(СтрокаТЧ.G105_2S); // Единица измерения  товаров КоД
			Исключение
			КонецПопытки;	
			
			Попытка
				Если  НЕ(СокрЛП(СтрокаТЧ.G5) = "0" и Сведенная = 1) Тогда
					rsMain.Fields.Item("TAB1_A15").Value =  СтрокаТЧ.G5; // Количество 
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
				Если НЕ (СокрЛП(СтрокаТЧ.G6) = "0" и Сведенная = 1) Тогда
					rsMain.Fields.Item("TAB1_A16").Value =  ПреобразоватьСтрокуВЧисло(СтрокаТЧ.G6); // Цена продажи
				КонецЕсли;	
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A8").Value =  СокрЛП(СтрокаТЧ.G008);   //Код ставки
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A9").Value =  СокрЛП(СтрокаТЧ.G009);  //Код пильгы
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A10").Value =  ПреобразоватьСтрокуВЧисло(СтрокаТЧ.G010);   //Объём поставок
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A20").Value =  СокрЛП(СтрокаТЧ.G11_10);  //Сумма податку
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A11").Value =  СокрЛП(СтрокаТЧ.G011); // Код виду деятельности СХ
			Исключение
			КонецПопытки;
			
			rsMain.Post();  
			Ном = Ном + 1;
			Счетчик  =  Счетчик + 1; 
			Если  Счетчик <> КоличествоСтрок Тогда 
				rsMain.Append();  
			КонецЕсли;	
			Если ЗначениеЗаполнено(СтрокаТЧ.G4) тогда 
				a131_1 = 1;
			Иначе
				a131_2 = 1;
			КонецЕсли;
			Попытка
				Если 
					ЗначениеЗаполнено(СтрокаТЧ.G33) тогда 
					a133_1 = 1;
				Иначе
					a133_2 = 1;
				КонецЕсли;
			Исключение
			КонецПопытки;	
		КонецЦикла;
		
		
		//Непонятно что это вообще
		//Если (НоваяНН) И (НЕ G109Есть) И (ИтогТеррУкр <> 0 ) И (ПроверкаНовойФормыНН())Тогда
		//	Возврат Ложь;
		//КонецЕсли;
		
		
		rsMain = Doc.DataSets() ;  
		rsMain.Edit();             
		rsMain.Append();
		rsMain.Post(); 
		
		Попытка
			Если a131_1 = 1 and a131_2 = 0 Тогда
				rsMain.Fields.Item("UKTPRESENCE").Value=Строка("Наявний");
			ИначеЕсли a131_1 = 1 and a131_2 = 1 Then
				rsMain.Fields.Item("UKTPRESENCE").Value = Строка("Наявний частково");
			ИначеЕсли a131_1 = 0 and a131_2 = 1 Then
				rsMain.Fields.Item("UKTPRESENCE").Value = Строка("Відсутній");
			КонецЕсли;
			
			Если a133_1 = 1 and a133_2 = 0 Then
				rsMain.Fields.Item("SERVICEPRESENCE").Value = Строка("Наявний");
			ИначеЕсли a133_1 = 1 and a133_2 = 1 Then
				rsMain.Fields.Item("SERVICEPRESENCE").Value = Строка("Наявний частково");
			ИначеЕсли a133_1 = 0 and a133_2 = 1 Then
				rsMain.Fields.Item("SERVICEPRESENCE").Value = Строка("Відсутній");
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка
			Тара = СокрЛП(ПоляНН.R02G11);		
			Если Тара <> "0" Тогда		
				rsMain.Fields.Item("A3_11").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R02G11);  //ЗЗТ-загальна сума коштів
			КонецЕсли;
		Исключение
		КонецПопытки;
		Попытка
			rsMain.Fields.Item("A5_7").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R01G7);   //Ставка 20%
			rsMain.Fields.Item("A6_7").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R03G7);
			rsMain.Fields.Item("A6_11").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R03G11);  //   Общая сумма
		Исключение
		КонецПопытки;	
		
		Попытка
			rsMain.Fields.Item("A5_71").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R01G109);     //Ставка 7%
			rsMain.Fields.Item("A6_71").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R03G109);
			rsMain.Fields.Item("A6_11").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R03G11);  //   Общая сумма
		Исключение
		КонецПопытки;	
		
		Попытка
			rsMain.Fields.Item("A5_8").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R01G8);   //Всякие ставки по 0%
		Исключение
		КонецПопытки;
		
		Попытка
			//Всякие ставки по 0%
			rsMain.Fields.Item("A5_9").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R01G9);
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("A5_10").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R01G10);
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("A7_11").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R04G11);   //   Общая сумма с ПДВ
		Исключение
		КонецПопытки;
		
		rsMain.Post();
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save(1);
		Doc.Close();
		
		Попытка
			Если СозданиеКонтрагентовМед = Истина Тогда
				Попытка
					СозданиеКонтрагентовМедок(App, Документ, orgId);
				Исключение
					Сообщить("Не удалось создать контрагента в Медке",);
					ВызватьИсключение;
				КонецПопытки;	
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		
	Исключение
		Сообщить(ПолучитьТекстОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	Возврат Истина;
	
КонецФункции

Функция Формирование_Дод2(App,  Документ,  Бланк,  PDate,  ИД, orgId) 
	
	Данные = Новый Структура("Организация",Документ.Организация); 
	КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(Документ.Дата, Данные);
	Если КодыОрганизации.Количество()> 0 Тогда
		пЕДРПОУ = КодыОрганизации[0].КодПоЕДРПОУ;
	КонецЕсли;
	
	Попытка
		
		//yes = App.SelectFirm(пЕДРПОУ, пФил); 
		//ЕСЛИ yes ТОГДА   
			Doc = App.OpenOrCreateByExDocID(Бланк, 0, PDate,  , ИД, 0);
			Попытка
				Doc.DisableScripts();
			Исключение
				Сообщить(НСТР("ru = 'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
				Возврат Ложь
			КонецПопытки;
			
		//КонецЕсли;
		
		Ставка20 = 0;
		Ставка7 = 0;
		a31_1 = 0;
		a31_2 = 0;
		a33_1 = 0;
		a33_2 = 0;
		
		rsMain = Doc.DataSets();    
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СведенияОПродавце       =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Организация,  Документ.Дата);
		СведенияОПокупателе     =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата);
		
		Попытка   //запускается процедура печати документа "Налоговая накладная",  которая формирует структуру данных НН
			НалоговыйДокументОбъект  =  Документ.ПолучитьОбъект();
			СтруктураПараметров      =  НалоговыйДокументОбъект.ПечатьДокумента(Истина);
			ПоляРК = СтруктураПараметров.НалоговыйДокумент;
			СтруктураДанныеТЧ        =  СтруктураПараметров.НалоговыйДокумент.R; //в данной таблице значений собраны строки из всех табличных частей документа,  кроме табличной части "Возвратная тара"
			
		Исключение
			Сообщить(НСТР("ru  =  'Заполнение по данным документа невозможно в данной версии конфигурации. Необходимо обновить конфигурацию!'; uk  =  'Заповнення даними документа неможливе на поточній версії конфигурації. Необхідно оновити конфігурацію!'"));
			Возврат Ложь;
		КонецПопытки;
		
		Если ИмяБазы = "УПП" или ИмяБазы = "УТП"  Тогда
			ТекТелефоныОрганизации  =  СведенияОПродавце.Телефоны;
			Позиция1  =  Найти (ТекТелефоныОрганизации, ", ");  		
			Если ЗначениеЗаполнено(Найти(ТекТелефоныОрганизации, ", ")) Тогда  
				Позиция1  =  Сред(ТекТелефоныОрганизации, 1, Позиция1-1);
			Иначе
				Позиция1 =  ТекТелефоныОрганизации;
			КонецЕсли;   		
			Позиция1  =  СтрЗаменить(Позиция1,  " ",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  "(",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  ")",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  "-",  ""); 
			ТекТелефоныОрганизации  =  Позиция1;       
			//---------------------------------------------------------------------
			ТекТелефоныКонтрагента  =  СведенияОПокупателе.Телефоны;
			Позиция2  =  Найти (ТекТелефоныКонтрагента, ", ");  		
			Если ЗначениеЗаполнено(Найти(ТекТелефоныКонтрагента, ", ")) Тогда  
				Позиция2  =  Сред(ТекТелефоныКонтрагента, 1, Позиция2-1);
			Иначе
				Позиция2 =  ТекТелефоныКонтрагента;
			КонецЕсли;   		
			Позиция2 = СтрЗаменить(Позиция2,  " ",  "");
			Позиция2 = СтрЗаменить(Позиция2,  "(",  "");
			Позиция2 = СтрЗаменить(Позиция2,  ")",  "");
			Позиция2 = СтрЗаменить(Позиция2,  "-",  ""); 
			ТекТелефоныКонтрагента  =  Позиция2;    
		Иначе
			ТекТелефоныОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,     "Телефоны, ",           Ложь);
			ТекТелефоныОрганизации = ФормированиеПечатныхФорм.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныОрганизации);
			ТекТелефоныКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,     "Телефоны, ",           Ложь);
			ТекТелефоныКонтрагента = ФормированиеПечатныхФорм.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
		КонецЕсли;
		
		
		rsMain.Fields.Item("N1_11").Value = СокрЛП(ПоляРК.HNUM);      //Номер розрахунку
		СпецРеж = "";
		//Если (ЕстьРеквизитДокумента("СпецРежимНалогообложения", Документ.Метаданные()))
		//	И (Документ.СпецРежимНалогообложения > 0) Тогда
		Если  ЗначениеЗаполнено(ПоляРК.HNUM1)
			Тогда
			rsMain.Fields.Item("N1_12").Value =  СокрЛП(ПоляРК.HNUM1);
			СпецРеж = "/" + СокрЛП(ПоляРК.HNUM1) + "/";
		КонецЕсли;
		Филия = "";
		Если (ЕстьРеквизитДокумента("НалоговаяНакладная", Документ.Метаданные()))
			И (ЗначениеЗаполнено(Документ.НалоговаяНакладная.ОбособленноеПодразделение.Префикс)) Тогда
			rsMain.Fields.Item("N1_13").Value = СокрЛП(ПоляРК.HNUM2);
			Филия = СокрЛП(ПоляРК.HNUM2);
			Если НЕ ЗначениеЗаполнено(СпецРеж) Тогда				
				СпецРеж = "//";
			КонецЕсли;
		КонецЕсли;		
		
		rsMain.Fields.Item("N1").Value =  СокрЛП(ПоляРК.HNUM) + СпецРеж + Филия;
		
		rsMain.Fields.Item("N2_11").Value = СокрЛП(ПоляРК.HPODNUM);
		rsMain.Fields.Item("N2_12").Value = СокрЛП(ПоляРК.HPODNUM1);
		rsMain.Fields.Item("N2_13").Value = СокрЛП(ПоляРК.HPODNUM2);
		Попытка
			rsMain.Fields.Item("N12").Value = Документ.Дата;
		Исключение
		КонецПопытки;
		
		rsMain.Fields.Item("N15").Value =СокрЛП(ПоляРК.HFILL);
		rsMain.Fields.Item("N2").Value = СокрЛП(ПоляРК.HPODFILL); //Дата НН 
		Попытка	
			Если ЗначениеЗаполнено(Документ.ТипПричиныНевыдачиПокупателю) Тогда
				rsMain.Fields.Item("PZOB").Value = Документ.ТипПричиныНевыдачиПокупателю;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		
		//rsMain.Fields.Item("N16").Value = 1;
		Попытка
			rsMain.Fields.Item("N16").Value  =  ?(ЗначениеЗаполнено(ПоляРК.HERPN), 1, 0); //Підлягає реєстрації в ЄРПН покупцем
		Исключение
		КонецПопытки;
		
		Попытка    //Непонятно нужло ли это вообще
			Если ЕстьРеквизитДокумента("ЭлектронныйДокумент", Документ.Метаданные()) Тогда
				rsMain.Fields.Item("N14").Value  =  ?(Документ.ЭлектронныйДокумент,1,0);
				rsMain.Fields.Item("K1").Value  =  ?(Документ.ЭлектронныйДокумент,"","Х");
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка	
			rsMain.Fields.Item("N17").Value  = ?(ЗначениеЗаполнено(СтруктураПараметров.НалоговыйДокумент.HORIG1), 1, "");
			rsMain.Fields.Item("N18").Value  = СокрЛП(СтруктураПараметров.НалоговыйДокумент.HTYPR);
		Исключение
		КонецПопытки;
		
		//Что есть в 1C то и будем передавать
		rsMain.Fields.Item("N3").Value = СокрЛП(ПоляРК.HNAMEBUY); 
		rsMain.Fields.Item("N4").Value = СокрЛП(ПоляРК.HKBUY);
		
		Попытка
			rsMain.Fields.Item("DEPT_POK").Value = СокрЛП(ПоляРК.HFBUY);
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("EDR_POK").Value = СокрЛП(ПоляРК.HTINBUY);
		Исключение
		КонецПопытки;
		
		//КонецЕсли;
		Попытка //Вроде не нужно но пусть до теста
			rsMain.Fields.Item("N6").Value = СокрЛП(ТекТелефоныКонтрагента); 
			rsMain.Fields.Item("N7").Value = СокрЛП(Документ.Контрагент.НомерСвидетельства);
			rsMain.Fields.Item("N8").Value = СокрЛП(Документ.НалоговаяНакладная.ВидДоговора);
		Исключение
		КонецПопытки;
		
		Если ЗначениеЗаполнено(Документ.ДоговорКонтрагента.Дата) тогда
			rsMain.Fields.Item("N81").Value  =  Документ.ДоговорКонтрагента.Ссылка.Номер;
			rsMain.Fields.Item("N82").Value  =  Документ.ДоговорКонтрагента.Ссылка.Дата; 
		КонецЕсли;   
		
		//Если СтрДлина(СокрЛП(Документ.ФормаРасчетов))>0 Тогда 
		//	rsMain.Fields.Item("N9").Value  =  СокрЛП(Документ.ФормаРасчетов);
		//КонецЕсли;
		
		// КИТ-2005
		Попытка	
			rsMain.Fields.Item("N10").Value      =  СокрЛП(ПоляРК.HBOS);  //   Кто составил
			rsMain.Fields.Item("INN").Value      =  СокрЛП(ПоляРК.HKBOS);     
		Исключение
		КонецПопытки;	

		rsMain.Fields.Item("NAKL_TYPE").Value = 1;   // 0  =  Входящая НН 1  =  Исходящая      
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(ПоляРК.HNAMESEL);  
		rsMain.Fields.Item("FIRM_INN").Value = СокрЛП(ПоляРК.HKSEL);
		Попытка
			rsMain.Fields.Item("EDRPOU").Value = СокрЛП(ПоляРК.HTINSEL);
		Исключение
		КонецПопытки;
		
		
		Попытка
			rsMain.Fields.Item("N26").Value = ?(ЗначениеЗаполнено(ПоляРК.HERPN0),1, 0);
		Исключение
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ПоляРК.R01G1) Тогда
			rsMain.Fields.Item("N30").Value  = ПоляРК.R01G1; //"1";
			Сведенная =1;
		КонецЕсли;	
		
		Попытка	
			Если    Строка(Документ.ВидОперации) = "Операции, освобожденные от  НДС (корректировка)" 
				или Строка(Документ.ВидОперации) = "Операції, звільнені від ПДВ (коригування)"		
				или Строка(Документ.ВидОперации) = "Операции, освобожденные от  НДС (возврат)" 
				или Строка(Документ.ВидОперации) = "Операції, звільнені від ПДВ (повернення)"
				или Строка(Документ.ВидОперации) = "Возврат в розницу плательщику НДС по освобожденному НДС" 
				или Строка(Документ.ВидОперации) = "Повернення в роздріб платникові ПДВ по звільненому ПДВ" 
				//Підсумкова в роздробі по оподатковуваному ПДВ (повернення) - Итоговая в рознице по облагаемому НДС (возврат)
				//Підсумкова в роздробі по звільненому ПДВ  (повернення) - Итоговая в рознице по освобожденному НДС  (возврат)
				//Операції, що не є об'єктом оподатковування (повернення) - Операции, не являющиеся объектом налогообложения (возврат)
				//Операції, що не є об'єктом оподатковування (коригування) - Операции, не являющиеся объектом налогообложения (корректировка)
				//Операції, оподатковувані ПДВ (повернення) - Операции, облагаемые НДС (возврат)
				//Операції, оподатковувані ПДВ (коригування) - Операции, облагаемые НДС (корректировка)
				//Операції, звільнені від ПДВ (повернення) - Операции, освобожденные от  НДС (возврат)
				//Операції, звільнені від ПДВ (коригування) - Операции, освобожденные от  НДС (корректировка)
				//Роботи від нерезидента коригування - Работы от нерезидента корректировка
				//Повернення в роздріб платникові ПДВ по оподатковуваному ПДВ - Возврат в розницу плательщику НДС по облагаемому НДС
				//Повернення в роздріб платникові ПДВ по звільненому ПДВ - Возврат в розницу плательщику НДС по освобожденному НДС
				//Перевищення бази над ціною поставки (коригування/повернення) - Превышение базы над ценой поставки (корректировка/возврат)
				//Умовний продаж (повернення) - Условная продажа (возврат)
				Тогда
				rsMain.Fields.Item("N28").Value  = "Без ПДВ";
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("N29").Value = СокрЛП(ПоляРК.R003G10S);
		Исключение
		КонецПопытки;
		
		
		rsMain.Post();    						
		
		//rsMain.Fields.Item("A1_9").Value = Документ.СуммаДокумента - Документ.СуммаНДСДокумента;
		//rsMain.Fields.Item("A2_9").Value = Документ.СуммаНДСДокумента;
		
		rsMain  =  Doc.DataSets("TAB1");
		ИтогОснСтавкаДод2 = 0;
		ИтогНулеваяСтавкаДод2 = 0;
		ИтогОсвобожденДод2 = 0;
		КоличествоСтрок = СтруктураДанныеТЧ.Количество();
		Счетчик = 0;
		ИтогСтавка7 = 0;
		//НоваяНН = ?( НачалоДня(Дата(Документ.Дата)) >=  НачалоДня(Дата(2017, 03, 08)), истина, ложь);
		//G111Есть = СтруктураДанныеТЧ.Колонки.Найти("G111") <> Неопределено;
		пCчетчик = 1;
		Для Каждого СтрокаТЧ Из СтруктураДанныеТЧ Цикл			
			rsMain.Edit(); 
			
			rsMain.Fields.Item("TAB1_A").Value = пCчетчик;  //№ з/п
				
			Если СтрокаТЧ.G001 <> 0 Тогда
				rsMain.Fields.Item("TAB1_A01").Value = СокрЛП(СтрокаТЧ.G001); //№ з/п рядка
			Иначе
				rsMain.Fields.Item("TAB1_A01").Value = ""; 
			КонецЕсли;
			
			Если СтрокаТЧ.G21 <> 0 Тогда
				rsMain.Fields.Item("TAB1_A21").Value = СокрЛП(СтрокаТЧ.G21); //Код причины 
			Иначе
				rsMain.Fields.Item("TAB1_A21").Value = ""; 
			КонецЕсли;
			
			Если СтрокаТЧ.G22 <> 0 Тогда
				rsMain.Fields.Item("TAB1_A22").Value = СокрЛП(СтрокаТЧ.G22); //№ з/п групи коригування
			Иначе
				rsMain.Fields.Item("TAB1_A22").Value = "";
			КонецЕсли;
			
			rsMain.Fields.Item("TAB1_A3").Value =  СокрЛП(СтрокаТЧ.G3S); // Номенклатура
			
			Попытка
				rsMain.Fields.Item("TAB1_A31").Value  =  СокрЛП(СтрокаТЧ.G4);  
			Исключение
			КонецПопытки;	
			Попытка
				Если СтрокаТЧ.G32 <> Неопределено Тогда 
					//rsMain.Fields.Item("TAB1_A32").Value = 1
					rsMain.Fields.Item("TAB1_A32").Value = СтрокаТЧ.G32;
				КонецЕсли;// Ознака импорта
				
			Исключение
			КонецПопытки;
			Попытка
				rsMain.Fields.Item("TAB1_A33").Value  =  СокрЛП(СтрокаТЧ.G33); //ДКПП 
			Исключение
			КонецПопытки;
			//	КонецЕсли;    
			//КонецЕсли;      		
			Попытка	
				rsMain.Fields.Item("TAB1_A4").Value  =  СокрЛП(СтрокаТЧ.G4S);  //Ед изм
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A41").Value =  СокрЛП(СтрокаТЧ.G105_2S);  //Код ед изм
			Исключение
			КонецПопытки;
			Попытка
				Если  НЕ(СокрЛП(СтрокаТЧ.G5) = "0" и Сведенная = 1) и (СтрокаТЧ.G5) <> 0 Тогда
					rsMain.Fields.Item("TAB1_A5").Value =  СокрЛП(СтрокаТЧ.G5);
				Иначе
					rsMain.Fields.Item("TAB1_A5").Value =  "";
				КонецЕсли;
			Исключение
			КонецПопытки;
			Попытка
				Если  НЕ(СокрЛП(СтрокаТЧ.G5) = "0" и Сведенная = 1) и (СтрокаТЧ.G6) <> 0 Тогда
					rsMain.Fields.Item("TAB1_A6").Value =  СокрЛП(Окр(СтрокаТЧ.G6, 2));
				Иначе
					rsMain.Fields.Item("TAB1_A6").Value = "";
				КонецЕсли;
			Исключение
			КонецПопытки;
			Попытка															//Корректировки
				Если СтрокаТЧ.G7 <> 0 Тогда
					rsMain.Fields.Item("TAB1_A7").Value = СокрЛП(Окр(СтрокаТЧ.G7, 2));
				КонецЕсли;
			Исключение
			КонецПопытки;
			Попытка
				Если СтрокаТЧ.G8 <> 0 Тогда
					rsMain.Fields.Item("TAB1_A8").Value = СокрЛП(СтрокаТЧ.G8);
				КонецЕсли; 
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A011").Value = СокрЛП(СтрокаТЧ.G008);
			Исключение
			КонецПопытки;
			Попытка
				Если (СтрокаТЧ.G010) <> 0 Тогда
					rsMain.Fields.Item("TAB1_A013").Value = СокрЛП(СтрокаТЧ.G010);
				Иначе
					rsMain.Fields.Item("TAB1_A013").Value = "";
					
				КонецЕсли
			Исключение
			КонецПопытки;
			Попытка
				rsMain.Fields.Item("TAB1_A012").Value = СокрЛП(СтрокаТЧ.G009);
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A020").Value = СокрЛП(СтрокаТЧ.G11_10);
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A014").Value = СокрЛП(СтрокаТЧ.G011);  //Код СХ
			Исключение
			КонецПопытки;
			
			
			rsMain.Post(); 		
			Счетчик  =  Счетчик + 1; 
			Если  Счетчик <> КоличествоСтрок Тогда 
				rsMain.Append();  
			КонецЕсли;  
			Если ЗначениеЗаполнено(СтрокаТЧ.G4) тогда 
				a31_1 = 1;
			Иначе
				a31_2 = 1;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТЧ.G33) тогда 
				a33_1 = 1;
			Иначе
				a33_2 = 1;
			КонецЕсли;
			
			пCчетчик = пCчетчик + 1;
		КонецЦикла;

		
		rsMain=Doc.DataSets() ;  
		rsMain.Edit();             
		rsMain.Append();
		rsMain.Post();			
		
		Попытка
			Если a31_1 = 1 and a31_2 = 0 Тогда
				rsMain.Fields.Item("UKTPRESENCE").Value=Строка("Наявний");
			ИначеЕсли a31_1 = 1 and a31_2 = 1 Then
				rsMain.Fields.Item("UKTPRESENCE").Value = Строка("Наявний частково");
			ИначеЕсли a31_1 = 0 and a31_2 = 1 Then
				rsMain.Fields.Item("UKTPRESENCE").Value = Строка("Відсутній");
			КонецЕсли;
			
			Если a33_1 = 1 and a33_2 = 0 Then
				rsMain.Fields.Item("SERVICEPRESENCE").Value = Строка("Наявний");
			ИначеЕсли a33_1 = 1 and a33_2 = 1 Then
				rsMain.Fields.Item("SERVICEPRESENCE").Value = Строка("Наявний частково");
			ИначеЕсли a33_1 = 0 and a33_2 = 1 Then
				rsMain.Fields.Item("SERVICEPRESENCE").Value = Строка("Відсутній");
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		
		Попытка
			rsMain.Fields.Item("A1_9").Value  =  СокрЛП(ПоляРК.R01G9);   //Ставка 20%
			rsMain.Fields.Item("A2_9").Value  =  СокрЛП(ПоляРК.R02G9);
		Исключение
		КонецПопытки;	
		
		Попытка
			rsMain.Fields.Item("A1_91").Value  =  СокрЛП(ПоляРК.R01G111);   //Ставка 7%
			rsMain.Fields.Item("A2_91").Value  =  СокрЛП(ПоляРК.R02G111);
		Исключение
		КонецПопытки;
		
		Попытка
			Ставка20 = ПоляРК.R02G9;
		Исключение
		КонецПопытки;
		Попытка
			Ставка7 = ПоляРК.R02G111;
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("A2_92").Value  = Ставка20+Ставка7;
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("A1_10").Value  =  СокрЛП(ПоляРК.R007G03);   //Ставки 0%   902
		Исключение
		КонецПопытки;
		Попытка
			rsMain.Fields.Item("A1_101").Value  =  СокрЛП(ПоляРК.R006G03);      //   901
		Исключение
		КонецПопытки;
		Попытка
			rsMain.Fields.Item("A1_11").Value  =  СокрЛП(ПоляРК.R01G11);      //    903
		Исключение
		КонецПопытки;
		
		rsMain.Post();
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save(1);
		Doc.Close();
		
		Попытка
			Если СозданиеКонтрагентовМед = Истина Тогда
				Попытка
					СозданиеКонтрагентовМедок(App, Документ, orgId);
				Исключение
					Сообщить("Не удалось создать контрагента в Медке",);
					ВызватьИсключение;
				КонецПопытки;	
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	Исключение
		Сообщить(ПолучитьТекстОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	Возврат Истина;
КонецФункции

Процедура Формирование_Запит(App,  Документ,  Бланк,  PDate,  ИД) 
	
	Doc  =  App.OpenOrCreateByExDocID(Бланк, 0, PDate,  , ИД, 0);					
	rsMain  =  Doc.DataSets(); 
	rsMain.Edit();
	rsMain.Fields.Item("Rep_DATE").Value   =  ТекущаяДата();  // Дата запроса 	
	rsMain.Post();   
	
	НомерБезПрефикса  =  ПолучитьНомерБезНулей(Документ);
	
	rsMain  =  Doc.DataSets("TAB1");
	rsMain.Fields.Item("TAB1_A1").Value = 1; 
	
	Попытка 
		НомерДокумента  =  СокрЛП(НомерБезПрефикса);   // МОжет не быть такой функции в старых конфигурациях 
	Исключение 
		НомерДок  =  НомерБезПрефикса; 
	КонецПопытки; 
	
	//Проверка на символ "/" 		
	Если Найти(НомерДокумента,  "/")  =  0 Тогда 
		НомерДок  =  НомерДокумента; 
		Филия  =  0; 
	Иначе 
		
		НомерДок  =  Лев(НомерДокумента,  Найти(НомерДокумента, "/")-1); 
		Филия   =  Прав(НомерДокумента,  СтрДлина(НомерДокумента)- НАйти(НомерДокумента,  "/")); 
	КонецЕсли;   		
	
	Попытка 
		НомерДок  =  Число(НомерДок); 
	Исключение 
		НомерДок  =  НомерДок; 
	КонецПопытки; 
	
	rsMain.Fields.Item("TAB1_A21").Value = НомерДок;  
	Если Филия <>0 Тогда 
		rsMain.Fields.Item("TAB1_A23").Value = Филия; 
	КонецЕсли; 
	
	rsMain.Fields.Item("TAB1_A3").Value = Документ.Дата;

	//Если 
	//Документ.ВидДокумента  =   Перечисление.ВидыДокументовКнигиПриобретения.НалоговаяНакладная Тогда 
	//	rsMain.Fields.Item("TAB1_A4").Value = "ПН";
	//ИначеЕсли 
	//Документ.ВидДокумента   =  Перечисление.ВидыДокументовКнигиПриобретения.РасчетКорректировки Тогда			
	//	rsMain.Fields.Item("TAB1_A4").Value = "РК";     			
	//КонецЕсли; 
	
	rsMain.Fields.Item("TAB1_A4").Value = "ПН";     
	rsMain.Fields.Item("TAB1_A5").Value = СокрЛП(Документ.Контрагент.ИНН); // ИНН Контрагента  		
	rsMain.Post();    			
	Doc.Save(1);  
	Doc.Close();
	
Конецпроцедуры

//------------------------ТТН----------------------------------//
Функция Формирование_ТТН(App,  Документ,  Бланк,  PDate,  ИД, orgId)
	
	Данные = Новый Структура("Организация",Документ.Организация); 
	КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(Документ.Дата, Данные);
	Если КодыОрганизации.Количество()> 0 Тогда
		пЕДРПОУ = КодыОрганизации[0].КодПоЕДРПОУ;
	КонецЕсли;
	
	Попытка
				
		yes  =  App.SelectFirm(пЕДРПОУ,  пФил); 
		ЕСЛИ yes ТОГДА   
			Doc  =  App.OpenOrCreateByExDocID(Бланк, 0, PDate,  , ИД, 0);
			//Doc.DisableScripts(); 
		КонецЕсли;
	Попытка
		rsMain = Doc.DataSets();    
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
	Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
	Возврат Ложь;
	КонецПопытки;
	
		СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
			
		//Если ТипЗнч(Документ.БанковскийСчетОрганизации) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		//	Банк		= Документ.БанковскийСчетОрганизации.Банк;
		//	МФО	 		= Банк.Код;
		//	НомерСчета 	= Документ.БанковскийСчетОрганизации.НомерСчета;
		//Иначе
			Если ИмяБазы ="УТП" тогда
				Банк		= СведенияОПоставщике.Банк.Наименование;
				МФО	 		= СведенияОПоставщике.Банк.Код;
				НомерСчета 	= СведенияОПоставщике.Банк.КоррСчет;
			Иначе
				// покажем банковские реквизиты основного счета организации
				Банк		= СведенияОПоставщике.Банк;
				МФО	 		= СведенияОПоставщике.МФО;
				НомерСчета 	= СведенияОПоставщике.НомерСчета;
			КонецЕсли;	
		//КонецЕсли;
        ДатаДокумента =Документ.Дата;
		
		
		// Переменные из дополнительной формы для ТТН(восстанавливаются из внутренних переменных платформы)
		МаркаАвто = ВосстановитьЗначение("МаркаАвто");
		НомерАвто  = ВосстановитьЗначение("НомерАвто");
		ТипАвто = ВосстановитьЗначение("ТипАвто");
		МаркаПриц  = ВосстановитьЗначение("МаркаПриц");
		НомерПриц = ВосстановитьЗначение("НомерПриц");
		ТипПриц  = ВосстановитьЗначение("ТипПриц");
		ЗакажчикАлко  = ВосстановитьЗначение("ЗакажчикАлко");
		ПеревожчикАлко = ВосстановитьЗначение("ПеревожчикАлко");
		ВодФИО  = ВосстановитьЗначение("ВодФИО");
		УдостоверениеВод = ВосстановитьЗначение("УдостоверениеВод");
		СопроводДокумент = ВосстановитьЗначение("СопроводДокумент");
		//ПунктРазгрузкиАлкоА  = ВосстановитьЗначение("ПунктРазгрузкиАлкоА");  //Адресс
		//ПунктРазгрузкиАлкоН  = ВосстановитьЗначение("ПунктРазгрузкиАлкоН"); //Название
		ПунктПогрузкиАлкоА  = ВосстановитьЗначение("ПунктПогрузкиАлкоА"); //Адресс
		ПунктПогрузкиАлкоН  = ВосстановитьЗначение("ПунктПогрузкиАлкоН"); //Название
		ГрузополучательДолжность = ВосстановитьЗначение("ГрузополучательДолжность");
		ГрузополучательФИО = ВосстановитьЗначение("ГрузополучательФИО");
		АкцизныйПодаток = ВосстановитьЗначение("АкцизныйПодаток");
		
		rsMain.Fields.Item("N1").Value  =  ДатаДокумента;
		rsMain.Fields.Item("N2").Value = ПолучитьНомерБезНулей(Документ); 
 		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value = СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value = СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value = СокрЛП(МФО); 
		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
				
		Если ЮрикФизик = "Юрик" Тогда 
			ЕДРПОУ  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ);  
		Иначе 
			ЕДРПОУ  =  СокрЛП(СведенияОПоставщике.КодПоДРФО); 
		  КонецЕсли;
		  rsMain.Fields.Item("FIRM_EDRPOU").Value = ЕДРПОУ;
		//rsMain.Fields.Item("FIRM_INN").Value = СокрЛП(СведенияОПоставщике.ИНН); 	
		//rsMain.Fields.Item("FIRM_SRPNDS").Value = СокрЛП(СведенияОПоставщике.НомерСвидетельства);
		
		Если		
			СведенияОПокупателе.КодПоЕДРПОУ = Неопределено
		Тогда	
			КонтрЕДРПОУ  =  СокрЛП(СведенияОПокупателе.КодПоДРФО); 
		Иначе 
			КонтрЕДРПОУ  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ);	
		КонецЕсли;
		
		rsMain.Fields.Item("N16").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("EDR_POK").Value  =  КонтрЕДРПОУ;
		rsMain.Fields.Item("N17").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("N18").Value  =  СокрЛП(СведенияОПокупателе.НомерСчета); 
		rsMain.Fields.Item("N19").Value  =  СокрЛП(СведенияОПокупателе.Банк);
		rsMain.Fields.Item("N20").Value  =  СокрЛП(СведенияОПокупателе.МФО);
		
		rsMain.Fields.Item("N3").Value  = МаркаАвто;
		rsMain.Fields.Item("N4").Value  = НомерАвто;
		rsMain.Fields.Item("N5").Value  = ТипАвто;
		rsMain.Fields.Item("N6").Value  = МаркаПриц;
		rsMain.Fields.Item("N7").Value  = НомерПриц;
		rsMain.Fields.Item("N8").Value  =   ТипПриц;
		rsMain.Fields.Item("N9").Value  = ПеревожчикАлко;
		rsMain.Fields.Item("N10").Value  =ЗакажчикАлко;
		rsMain.Fields.Item("N11").Value  = ВодФИО;
		rsMain.Fields.Item("N12").Value  = УдостоверениеВод;
		rsMain.Fields.Item("N25").Value  =ПунктПогрузкиАлкоА;
		rsMain.Fields.Item("N26").Value  =ПунктПогрузкиАлкоН;
		rsMain.Fields.Item("N27").Value  = Документ.Грузополучатель.НаименованиеПолное;
		rsMain.Fields.Item("N28").Value  = Документ.АдресДоставки;
		rsMain.Fields.Item("N29").Value  = Документ.ДоверенностьСерия;
		rsMain.Fields.Item("N30").Value  = СокрЛП(Документ.ДоверенностьНомер);
		rsMain.Fields.Item("N31").Value  = Документ.ДоверенностьДата;
		rsMain.Fields.Item("N32").Value  = Документ.Контрагент.Наименование;
		rsMain.Fields.Item("N33").Value  =  ГрузополучательДолжность;
		rsMain.Fields.Item("N34").Value  =  ГрузополучательФИО;
		rsMain.Fields.Item("N39").Value  =  АкцизныйПодаток;
		
		rsMain.Fields.Item("N45").Value  = СопроводДокумент;
		rsMain.Fields.Item("N46").Value  = "Водій-експедитор";
		rsMain.Fields.Item("N47").Value  =ВодФИО;
		
		ИтогСуммаСНДС  =  Документ.СуммаДокумента;
		ИтогНДС  =  Документ.Товары.Итог("СуммаНДС") + Документ.Услуги.Итог("СуммаНДС");
		
		Если ИмяБазы  =  "УТП" Тогда
			ИтогСкидка  =  0;
		ИначеЕсли ИмяБазы  =  "УТ" Тогда
			ИтогСкидка  =  0;	
		ИначеЕсли ИмяБазы  = "УПП" Тогда
			ИтогСкидка  =  Документ.Товары.Итог("ЗначениеУсловияАвтоматическойСкидки") + Документ.Услуги.Итог("ЗначениеУсловияАвтоматическойСкидки");
		Иначе
			ИтогСкидка  =  Документ.Товары.Итог("СуммаСкидки") + Документ.Услуги.Итог("СуммаСкидки");
		КонецЕсли;
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС; 
		ИтогКоличество = Документ.Товары.Итог("Количество");
		
		rsMain.Fields.Item("N35").Value =ИтогКоличество;
		rsMain.Fields.Item("N36").Value = ИтогСуммаСНДС;  
		rsMain.Fields.Item("N37").Value = ИтогСуммаСНДС; 
		rsMain.Fields.Item("N38").Value = ИтогНДС;
		
				
		Если Бланк="J1204201" или Бланк="F1204201" тогда
			rsMain.Fields.Item("A2_15").Value = ИтогНДС;
		ИначеЕсли Бланк="J1204101" или Бланк="F1204101" Тогда
		    rsMain.Fields.Item("N50").Value = ИтогСуммаСНДС;
			rsMain.Fields.Item("N49").Value = ИтогСуммаСНДС;
		КонецЕсли;	
		
		Если ИмяБазы = "УТП" Тогда
			 rsMain.Fields.Item("N48").Value = Документ.ОтпускРазрешил.Наименование; 
		КонецЕсли;	 

		rsMain.Fields.Item("NAKL_TYPE").Value = 1;

		
		rsMain.Post();
		
		Если ИмяБазы  =  "УТП" или ИмяБазы  =  "УПП" Тогда
		//	ВыборСуммы  =  "Сумма";
			ВыборСкидки = "ПроцентСкидкиНаценки";
		Иначе
		//	ВыборСуммы  =  "СуммаБезСкидки";
			ВыборСкидки = "СуммаСкидки";
		КонецЕсли;              
		
		Запрос  =  Новый Запрос;
		Запрос.Текст  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияТоваровУслугТовары.Номенклатура.Наименование КАК Наименование, 
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА РеализацияТоваровУслугТовары.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РеализацияТоваровУслугТовары.СтавкаНДС  =  &Ставка20
		//|					ТОГДА РеализацияТоваровУслугТовары.Цена / 1.2
		|					ТОГДА РеализацияТоваровУслугТовары.Цена 
		|				ИНАЧЕ РеализацияТоваровУслугТовары.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		|	РеализацияТоваровУслугТовары.Количество, 
		|	РеализацияТоваровУслугТовары.Сумма КАК Сумма, 
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК Единица,
		|	РеализацияТоваровУслугТовары."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка  =  &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Содержание, 
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА РеализацияТоваровУслугУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РеализацияТоваровУслугУслуги.СтавкаНДС  =  &Ставка20
		//|					ТОГДА РеализацияТоваровУслугУслуги.Цена / 1.2
		|					ТОГДА РеализацияТоваровУслугУслуги.Цена 
		|				ИНАЧЕ РеализацияТоваровУслугУслуги.Цена
		|			КОНЕЦ
		|	КОНЕЦ, 
		|	РеализацияТоваровУслугУслуги.Количество, 
		|	РеализацияТоваровУслугУслуги.Сумма КАК Сумма,
		|	""грн."" ,
		|	РеализацияТоваровУслугУслуги."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка  =  &Документ";
		Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
		Запрос.УстановитьПараметр("Документ",  Документ);		
		
		Результат  =  Запрос.Выполнить();
		Контр  =  0;
		Н  =  Результат.Выгрузить().Количество();
		
		ВыборкаДетальныеЗаписи  =  Результат.Выбрать();
		rsMain = Doc.DataSets("TAB1");  
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			//rsMain.Edit(); 
			//rsMain.Fields.Item("TAB1_A1").Value = Контр + 1;
			Наименование = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			rsMain.Fields.Item("TAB1_A81").Value = СокрЛП(Справочники.Номенклатура.НайтиПоНаименованию(Наименование).НаименованиеПолное);
			
			// Поля отличающиеся в разных бланках			
			Если Бланк="J1204201" или Бланк="F1204201" Тогда
				rsMain.Fields.Item("TAB1_A13").Value = ВыборкаДетальныеЗаписи.Количество;
				rsMain.Fields.Item("TAB1_A14").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
				rsMain.Fields.Item("TAB1_A15").Value = ВыборкаДетальныеЗаписи.Сумма;
				rsMain.Fields.Item("TAB1_A83").Value = СтрЗаменить(Справочники.Номенклатура.НайтиПоНаименованию(Наименование).НоменклатураГТД.КодУКТВЭД," ","");
			ИначеЕсли Бланк="J1204101" или Бланк="F1204101" Тогда	
				rsMain.Fields.Item("TAB1_A15").Value = ВыборкаДетальныеЗаписи.Количество;
				rsMain.Fields.Item("TAB1_A82").Value = СтрЗаменить(Справочники.Номенклатура.НайтиПоНаименованию(Наименование).НоменклатураГТД.КодУКТВЭД," ","");
				rsMain.Fields.Item("TAB1_A16").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
				rsMain.Fields.Item("TAB1_A17").Value = ВыборкаДетальныеЗаписи.Сумма;
			КонецЕсли;
						
			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();
			КонецЕсли;        		
		КонецЦикла; 
		
		rsMain = Doc.DataSets();    
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();    
		Если Бланк="J1204201" или Бланк="F1204201" тогда
			rsMain.Fields.Item("N49").Value = ВыборкаДетальныеЗаписи.Единица.Наименование; 
		КонецЕсли;
		rsMain.Post();
		////-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save(1);  
		Doc.Close(); 
		App.RefreshRstDoc();
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;

	Исключение
		Сообщить(ПолучитьТекстОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;  
Возврат Истина;
КонецФункции

//-----------------------------------------------------------------------------------------------
Процедура Формирование_1ПВМес(App,  Документ,  БланкДСС,  PDate,  ИД)
	
	Doc  = App.OpenOrCreateByExDocID(БланкДСС, 0, PDate, , ИД, 0);
	Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетПоТрудуМес;
	rsMain = Doc.DataSets(); 	
	с = Новый Структура;
	сДел1000 = Новый Структура;
	НачалоОтчета(rsMain);
	
	Если БланкДСС="S0301011" Тогда   
		Попытка
			rsMain.Fields.Item("NOMER").Value=Число(Док["КодПодразделения1"] + Док["КодПодразделения2"] + Док["КодПодразделения3"]);   		
		Исключение
			rsMain.Fields.Item("NOMER").Value="1";
		КонецПопытки;
		
		сДел1000.Вставить("A1020", "П1020_1");
		сДел1000.Вставить("A1030", "П1030_1");
		с.Вставить("A1040", "П1040_1");
		с.Вставить("A1060", "П1060_1");
		сДел1000.Вставить("A1070", "П1070_1");	
		с.Вставить("REP_PER1", "МесяцОтчета");		
		сДел1000.Вставить("A2010", "П2010_1");
		сДел1000.Вставить("A2020", "П2020_1");
		с.Вставить("A2030", "П2030_1");
		сДел1000.Вставить("A2040", "П2040_1");
		сДел1000.Вставить("A2050", "П2050_1");
		сДел1000.Вставить("A2060", "П2060_1");
		сДел1000.Вставить("A2070", "П2070_1"); 
		
		с.Вставить("N1", "ПолеДляОчистки81"); 
		с.Вставить("N2", "ПолеДляОчистки82"); 
		с.Вставить("N3", "ПолеДляОчистки9");
		
		с.Вставить("VIK_EMAIL", "ЕлПочта"); 
		с.Вставить("VIK_TEL", "Телефон"); 
		с.Вставить("VIK_RUK", "ОргДиректор");

		
	КонецЕсли;	
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
	КонецОтчета(Doc);
	
КонецПроцедуры

Процедура Формирование_1ПВКв(App,  Документ,  БланкДСС,  PDate,  ИД)
		
	Doc  = App.OpenOrCreateByExDocID(БланкДСС, 10, PDate, , ИД, 0);
	Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетПоТруду;
	rsMain = Doc.DataSets(); 	
	с = Новый Структура;  
	сДел1000 = Новый Структура; 
	НачалоОтчета(rsMain);	
	
	Если БланкДСС="S0301114" Тогда
		Попытка
			rsMain.Fields.Item("NOMER").Value=Число(Док["КодПодразделения1"] + Док["КодПодразделения2"] + Док["КодПодразделения3"]);
		Исключение
			rsMain.Fields.Item("NOMER").Value ="1"; 
		КонецПопытки;
			
		с.Вставить("A3020_1", "П3020_1");
		с.Вставить("A3020_2", "П3020_2");
		с.Вставить("A3040_1", "П3040_1");
		с.Вставить("A3040_2", "П3040_2");
		с.Вставить("A3050_1", "П3050_1");
		с.Вставить("A3050_2", "П3050_2");
		с.Вставить("A3060_1", "П3060_1");
		с.Вставить("A3060_2", "П3060_2");
		с.Вставить("A3070_1", "П3070_1");
		с.Вставить("A3070_2", "П3070_2");
	
		с.Вставить("A3080_1", "П3080_1");
		с.Вставить("A3080_2", "П3080_2");
		с.Вставить("A3090_2", "П3090_2");
		с.Вставить("A3100_1", "П3100_1");
		с.Вставить("A3100_2", "П3100_2");
	
		с.Вставить("A4080", "П4080_1");
		с.Вставить("A4090", "П4090_1");
		с.Вставить("A4100", "П4100_1");
		с.Вставить("B4080", "П4080_2");
		с.Вставить("B4090", "П4090_2");
		с.Вставить("B4100", "П4100_2");
	
		сДел1000.Вставить("A5010", "П5010_1");
		сДел1000.Вставить("A5020", "П5020_1");
		сДел1000.Вставить("A5030", "П5030_1");
		сДел1000.Вставить("A5040", "П5040_1");
		сДел1000.Вставить("A5050", "П5050_1");
		сДел1000.Вставить("A5051", "П5051_1");
		сДел1000.Вставить("A5052", "П5052_1");
		сДел1000.Вставить("A5060", "П5060_1");
		сДел1000.Вставить("A5070", "П5070_1");
		сДел1000.Вставить("A5080", "П5080_1");
		сДел1000.Вставить("A5090", "П5090_1");
	
		с.Вставить("A6010", "П6010_1");
		с.Вставить("A6020", "П6020_1");
		с.Вставить("A6030", "П6030_1");
		с.Вставить("A6040", "П6040_1");
		с.Вставить("A6050", "П6050_1");
		с.Вставить("A6060", "П6060_1");
		с.Вставить("A6070", "П6070_1");
		с.Вставить("A6080", "П6080_1");
		с.Вставить("A6090", "П6090_1");
		с.Вставить("A6100", "П6100_1");
		с.Вставить("A6110", "П6110_1");
		с.Вставить("A6120", "П6120_1");
		с.Вставить("A6130", "П6130_1");
		с.Вставить("A6140", "П6140_1");
		с.Вставить("A6150", "П6150_1");
	
		с.Вставить("N2", "Пр3");
		с.Вставить("N3", "Пр4");
		с.Вставить("N4", "Пр5");
		с.Вставить("N5", "Пр6");
		с.Вставить("N6", "Пр7");
		с.Вставить("N7", "Пр8");
		с.Вставить("N8", "Пр9");
		с.Вставить("N12", "Пр91");
		с.Вставить("N10", "Пр10");
		с.Вставить("K1", "Пр200");
		с.Вставить("K2", "Пр300");
		с.Вставить("K3", "Пр400");
		с.Вставить("K4", "Пр500");
		с.Вставить("K5", "Пр600");
		с.Вставить("K6", "Пр700");
		с.Вставить("K7", "Пр800");
		с.Вставить("K8", "Пр900");
		с.Вставить("K12", "Пр910");
	
		с.Вставить("A7010", "П7010_1");
		с.Вставить("A7020", "П7020_1");
		с.Вставить("A7030", "П7030_1");
		с.Вставить("A7040", "П7040_1");
		
		сДел1000.Вставить("B7010", "П7010_2");
		сДел1000.Вставить("B7020", "П7020_2");
		сДел1000.Вставить("B7030", "П7030_2");
		сДел1000.Вставить("B7040", "П7040_2");
		
		с.Вставить("C7010", "П7010_3");
		
		//раздел VII заполняется только если это первый квартал
		//иначе в медке отчет будет считаться ошибочным
		Если Документ.ДатаНачала = НачалоГода(Документ.Дата)
			И Документ.ДатаОкончания = Дата(Год(Документ.Дата),03,31,23,59,59) Тогда    
			
			сДел1000.Вставить("A9010", "П9010");
			сДел1000.Вставить("A9020", "П9020");
			сДел1000.Вставить("A9030", "П9030");
			сДел1000.Вставить("A9040", "П9040");
			сДел1000.Вставить("A9050", "П9050");
			сДел1000.Вставить("A9060", "П9060");
			с.Вставить("A9070", "П9070");
			
		КонецЕсли; 
		
		с.Вставить("VIK_EMAIL", "ЕлПочта"); 
		с.Вставить("VIK_TEL", "Телефон"); 
		с.Вставить("VIK_RUK", "ОргДиректор");
		
	КонецЕсли;
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
	
	КонецОтчета(Doc);
	
КонецПроцедуры

Процедура Формирование_РНН(App, Документ,  Бланк,  PDate,  ИД, ПорцияРНН, ТипРНН)
	
	Doc = App.OpenOrCreateByExDocID(Бланк, 0, PDate, , ИД, 0);   
	rsMain = Doc.DataSets();    
	rsMain.Edit();              
	rsMain.Append();
	rsMain.Post();
	
	rsMain.Fields.Item("HNP").Value  = ПорцияРНН;
	rsMain.Fields.Item("RSTTYPE").Value  = ТипРНН;
	rsMain.Fields.Item("HZ").Value   = ?(ЗначениеЗаполнено(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаВыданныеНН.HZ), "1", "");
	rsMain.Fields.Item("HZN").Value  = ?(ЗначениеЗаполнено(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаВыданныеНН.HZN), "1", "");
	rsMain.Fields.Item("HKV").Value  = ?(ЗначениеЗаполнено(Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаВыданныеНН.HKV), "1", "");
	
	Попытка   //запускается процедура печати документа "Налоговая накладная",  которая формирует структуру данных НН
		НалоговыйДокументОбъект  =  Документ.ПолучитьОбъект();
		СтруктураПараметров      =  НалоговыйДокументОбъект.ПечатьДокумента(Истина);
		СтруктураДанныеТЧ        =  СтруктураПараметров.НалоговыйДокумент.R; //в данной таблице значений собраны строки из всех табличных частей документа,  кроме табличной части "Возвратная тара"
	Исключение
		//Предупреждение(НСТР("ru  =  'Заполнение по данным документа невозможно в данной версии конфигурации. Необходимо обновить конфигурацию!'; uk  =  'Заповнення даними документа неможливе на поточній версії конфигурації. Необхідно оновити конфігурацію!'"));
		Возврат;
	КонецПопытки;
	
	rsMain  =  Doc.DataSets("TAB1");
	КоличествоСтрок  =  СтруктураДанныеТЧ.Количество();
	Счетчик  =  0;   		
	Для Каждого СтрокаТЧ Из СтруктураДанныеТЧ Цикл 
		rsMain.Edit();  
		Сообщить(СтрокаТЧ.G1);
		
		rsMain.Post();  		
		Счетчик  =  Счетчик + 1; 
		Если  Счетчик <> КоличествоСтрок Тогда 
			rsMain.Append();  
		КонецЕсли;		
	КонецЦикла;
	
	Doc.Save(1);
	Doc.Close();
	
КонецПроцедуры
//---------------------- Баланс-Ф1-----------------------------------------
Процедура Формирование_БалансЕО(App,  Документ,  БланкЕО,  PDate,  ИДГлавнойФормы)
	
	Doc = App.OpenOrCreateByExDocID(БланкЕО, ОпределитьКодПериода(Документ), PDate, , ИДГлавнойФормы, 0);
	Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс;
	Doc.DisableScripts();  	
	rsMain = Doc.DataSets(); 
	с = Новый Структура;
	сДел1000 = Новый Структура; 
	
	НачалоОтчета(rsMain);
	
	rsMain.Fields.Item("N3").Value = ?(Док["ССЧ"], Док["ССЧ"], "");
	
	Если БланкЕО = "S0100113" Тогда
		rsMain.Fields.Item("N4").value = ?(Док["ЗаполненоПоПСБУ"] = "v", "1", "");
		rsMain.Fields.Item("N5").value = ?(Док["ЗаполненоПоМСФО"] = "v", "1", "");

		
		сДел1000.Вставить("A1000", "П10003");
		сДел1000.Вставить("B1000", "П10004");
		сДел1000.Вставить("A1001", "П10013");
		сДел1000.Вставить("B1001", "П10014");
		сДел1000.Вставить("A1002", "_П10023");
		сДел1000.Вставить("B1002", "_П10024");
		сДел1000.Вставить("A1005", "П10053");
		сДел1000.Вставить("B1005", "П10054");
		сДел1000.Вставить("A1010", "П10103");
		сДел1000.Вставить("B1010", "П10104");
		сДел1000.Вставить("A1011", "П10113");
		сДел1000.Вставить("B1011", "П10114");
		сДел1000.Вставить("A1012", "_П10123");
		сДел1000.Вставить("B1012", "_П10124");
		сДел1000.Вставить("A1015", "П10153");
		сДел1000.Вставить("B1015", "П10154");
		сДел1000.Вставить("A1016", "П10163");
		сДел1000.Вставить("B1016", "П10164");
		сДел1000.Вставить("A1017", "_П10173");
		сДел1000.Вставить("B1017", "_П10174");
		сДел1000.Вставить("A1020", "П10203");
		сДел1000.Вставить("B1020", "П10204");
		сДел1000.Вставить("A1021", "П10213");
		сДел1000.Вставить("B1021", "П10214");
		сДел1000.Вставить("A1022", "_П10223");
		сДел1000.Вставить("B1022", "_П10224");
		сДел1000.Вставить("A1030", "П10303");
		сДел1000.Вставить("B1030", "П10304");
		сДел1000.Вставить("A1035", "П10353");
		сДел1000.Вставить("B1035", "П10354");
		сДел1000.Вставить("A1040", "П10403");
		сДел1000.Вставить("B1040", "П10404");
		сДел1000.Вставить("A1045", "П10453");
		сДел1000.Вставить("B1045", "П10454");
		сДел1000.Вставить("A1050", "П10503");
		сДел1000.Вставить("B1050", "П10504");
		сДел1000.Вставить("A1060", "П10603");
		сДел1000.Вставить("B1060", "П10604");
		сДел1000.Вставить("A1065", "П10653");
		сДел1000.Вставить("B1065", "П10654");
		сДел1000.Вставить("A1090", "П10903");
		сДел1000.Вставить("B1090", "П10904");
		сДел1000.Вставить("A1095", "П10953");
		сДел1000.Вставить("B1095", "П10954");
		сДел1000.Вставить("A1100", "П11003");
		сДел1000.Вставить("B1100", "П11004");
		сДел1000.Вставить("A1101", "П11013");
		сДел1000.Вставить("B1101", "П11014");
		сДел1000.Вставить("A1102", "П11023");
		сДел1000.Вставить("B1102", "П11024");
		сДел1000.Вставить("A1103", "П11033");
		сДел1000.Вставить("B1103", "П11034");
		сДел1000.Вставить("A1104", "П11043");
		сДел1000.Вставить("B1104", "П11044");
		сДел1000.Вставить("A1110", "П11103");
		сДел1000.Вставить("B1110", "П11104");
		сДел1000.Вставить("A1115", "П11153");
		сДел1000.Вставить("B1115", "П11154");
		сДел1000.Вставить("A1120", "П11203");
		сДел1000.Вставить("B1120", "П11204");
		сДел1000.Вставить("A1125", "П11253");
		сДел1000.Вставить("B1125", "П11254");
		сДел1000.Вставить("A1130", "П11303");
		сДел1000.Вставить("B1130", "П11304");
		сДел1000.Вставить("A1135", "П11353");
		сДел1000.Вставить("B1135", "П11354");
		сДел1000.Вставить("A1136", "П11363");
		сДел1000.Вставить("B1136", "П11364");
		сДел1000.Вставить("A1140", "П11403");
		сДел1000.Вставить("B1140", "П11404");
		сДел1000.Вставить("A1145", "П11453");
		сДел1000.Вставить("B1145", "П11454");
		сДел1000.Вставить("A1155", "П11553");
		сДел1000.Вставить("B1155", "П11554");
		сДел1000.Вставить("A1160", "П11603");
		сДел1000.Вставить("B1160", "П11604");
		сДел1000.Вставить("A1165", "П11653");
		сДел1000.Вставить("B1165", "П11654");
		сДел1000.Вставить("A1166", "П11663");
		сДел1000.Вставить("B1166", "П11664");
		сДел1000.Вставить("A1167", "П11673");
		сДел1000.Вставить("B1167", "П11674");
		сДел1000.Вставить("A1170", "П11703");
		сДел1000.Вставить("B1170", "П11704");
		сДел1000.Вставить("A1180", "П11803");
		сДел1000.Вставить("B1180", "П11804");
		сДел1000.Вставить("A1181", "П11813");
		сДел1000.Вставить("B1181", "П11814");
		сДел1000.Вставить("A1182", "П11823");
		сДел1000.Вставить("B1182", "П11824");
		сДел1000.Вставить("A1183", "П11833");
		сДел1000.Вставить("B1183", "П11834");
		сДел1000.Вставить("A1184", "П11843");
		сДел1000.Вставить("B1184", "П11844");
		сДел1000.Вставить("A1190", "П11903");
		сДел1000.Вставить("B1190", "П11904");
		сДел1000.Вставить("A1195", "П11953");
		сДел1000.Вставить("B1195", "П11954");
		сДел1000.Вставить("A1200", "П12003");
		сДел1000.Вставить("B1200", "П12004");
		сДел1000.Вставить("A1300", "П13003");
		сДел1000.Вставить("B1300", "П13004");
		сДел1000.Вставить("A1400", "П14003");
		сДел1000.Вставить("B1400", "П14004");
		сДел1000.Вставить("A1401", "П14013");
		сДел1000.Вставить("B1401", "П14014");
		сДел1000.Вставить("A1405", "П14053");
		сДел1000.Вставить("B1405", "П14054");
		сДел1000.Вставить("A1410", "П14103");
		сДел1000.Вставить("B1410", "П14104");
		сДел1000.Вставить("A1411", "П14113");
		сДел1000.Вставить("B1411", "П14114");
		сДел1000.Вставить("A1412", "П14123");
		сДел1000.Вставить("B1412", "П14124");
		сДел1000.Вставить("A1415", "П14153");
		сДел1000.Вставить("B1415", "П14154");
		сДел1000.Вставить("A1420", "П14203");
		сДел1000.Вставить("B1420", "П14204");
		сДел1000.Вставить("A1425", "_П14253");
		сДел1000.Вставить("B1425", "_П14254");
		сДел1000.Вставить("A1430", "_П14303");
		сДел1000.Вставить("B1430", "_П14304");
		сДел1000.Вставить("A1435", "П14353");
		сДел1000.Вставить("B1435", "П14354");
		сДел1000.Вставить("A1495", "П14953");
		сДел1000.Вставить("B1495", "П14954");
		сДел1000.Вставить("A1500", "П15003");
		сДел1000.Вставить("B1500", "П15004");
		сДел1000.Вставить("A1505", "П15053");
		сДел1000.Вставить("B1505", "П15054");
		сДел1000.Вставить("A1510", "П15103");
		сДел1000.Вставить("B1510", "П15104");
		сДел1000.Вставить("A1515", "П15153");
		сДел1000.Вставить("B1515", "П15154");
		сДел1000.Вставить("A1520", "П15203");
		сДел1000.Вставить("B1520", "П15204");
		сДел1000.Вставить("A1521", "П15213");
		сДел1000.Вставить("B1521", "П15214");
		сДел1000.Вставить("A1525", "П15253");
		сДел1000.Вставить("B1525", "П15254");
		сДел1000.Вставить("A1526", "П15263");
		сДел1000.Вставить("B1526", "П15264");
		сДел1000.Вставить("A1530", "П15303");
		сДел1000.Вставить("B1530", "П15304");
		сДел1000.Вставить("A1531", "П15313");
		сДел1000.Вставить("B1531", "П15314");
		сДел1000.Вставить("A1532", "П15323");
		сДел1000.Вставить("B1532", "П15324");
		сДел1000.Вставить("A1533", "П15333");
		сДел1000.Вставить("B1533", "П15334");
		сДел1000.Вставить("A1534", "П15343");
		сДел1000.Вставить("B1534", "П15344");
		сДел1000.Вставить("A1535", "П15353");
		сДел1000.Вставить("B1535", "П15354");
		сДел1000.Вставить("A1540", "П15403");
		сДел1000.Вставить("B1540", "П15404");
		сДел1000.Вставить("A1545", "П15453");
		сДел1000.Вставить("B1545", "П15454");
		сДел1000.Вставить("A1595", "П15953");
		сДел1000.Вставить("B1595", "П15954");
		сДел1000.Вставить("A1600", "П16003");
		сДел1000.Вставить("B1600", "П16004");
		сДел1000.Вставить("A1605", "П16053");
		сДел1000.Вставить("B1605", "П16054");
		сДел1000.Вставить("A1610", "П16103");
		сДел1000.Вставить("B1610", "П16104");
		сДел1000.Вставить("A1615", "П16153");
		сДел1000.Вставить("B1615", "П16154");
		сДел1000.Вставить("A1620", "П16203");
		сДел1000.Вставить("B1620", "П16204");
		сДел1000.Вставить("A1621", "П16213");
		сДел1000.Вставить("B1621", "П16214");
		сДел1000.Вставить("A1625", "П16253");
		сДел1000.Вставить("B1625", "П16254");
		сДел1000.Вставить("A1630", "П16303");
		сДел1000.Вставить("B1630", "П16304");
		сДел1000.Вставить("A1635", "П16353");
		сДел1000.Вставить("B1635", "П16354");
		сДел1000.Вставить("A1640", "П16403");
		сДел1000.Вставить("B1640", "П16404");
		сДел1000.Вставить("A1645", "П16453");
		сДел1000.Вставить("B1645", "П16454");
		сДел1000.Вставить("A1650", "П16503");
		сДел1000.Вставить("B1650", "П16504");
		сДел1000.Вставить("A1660", "П16603");
		сДел1000.Вставить("B1660", "П16604");
		сДел1000.Вставить("A1665", "П16653");
		сДел1000.Вставить("B1665", "П16654");
		сДел1000.Вставить("A1670", "П16703");
		сДел1000.Вставить("B1670", "П16704");
		сДел1000.Вставить("A1690", "П16903");
		сДел1000.Вставить("B1690", "П16904");
		сДел1000.Вставить("A1695", "П16953");
		сДел1000.Вставить("B1695", "П16954");
		сДел1000.Вставить("A1700", "П17003");
		сДел1000.Вставить("B1700", "П17004");
		сДел1000.Вставить("A1800", "П18003");
		сДел1000.Вставить("B1800", "П18004");
		сДел1000.Вставить("A1900", "П19003");
		сДел1000.Вставить("B1900", "П19004");
		
		с.Вставить("FIRM_RUK", "ОргДиректор"); 
		с.Вставить("FIRM_BUH", "ОргБухгалтер");     	
	КонецЕсли;	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);

	КонецОтчета(Doc);
	
КонецПроцедуры

Процедура Формирование_Финрез(App,  Документ,  БланкФ2,  PDate,  ИД)
	
Doc = App.OpenOrCreateByExDocID(БланкФ2, ОпределитьКодПериода(Документ), PDate, , ИД, 0);
	Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез;	
	Doc.DisableScripts();  	
	rsMain = Doc.DataSets(); 
	с = Новый Структура;
	сДел1000 = Новый Структура; 
	НачалоОтчета(rsMain);
	
Если БланкФ2="S0100213" Тогда
		
	сДел1000.Вставить("A2000", "П20003");
	сДел1000.Вставить("B2000", "П20004");
	сДел1000.Вставить("A2010", "П20103");
	сДел1000.Вставить("B2010", "П20104");
	сДел1000.Вставить("A2011", "П20113");
	сДел1000.Вставить("B2011", "П20114");
	сДел1000.Вставить("A2012", "_П20123");
	сДел1000.Вставить("B2012", "_П20124");
	сДел1000.Вставить("A2013", "П20133");
	сДел1000.Вставить("B2013", "П20134");
	сДел1000.Вставить("A2014", "П20143");
	сДел1000.Вставить("B2014", "П20144");
	сДел1000.Вставить("A2050", "_П20503");
	сДел1000.Вставить("B2050", "_П20504");
	сДел1000.Вставить("A2070", "_П20703");
	сДел1000.Вставить("B2070", "_П20704");
	сДел1000.Вставить("A2090", "П20903");
	сДел1000.Вставить("B2090", "П20904");
	сДел1000.Вставить("A2095", "_П20953");
	сДел1000.Вставить("B2095", "_П20954");
	сДел1000.Вставить("A2105", "П21053");
	сДел1000.Вставить("B2105", "П21054");
	сДел1000.Вставить("A2110", "П21103");
	сДел1000.Вставить("B2110", "П21104");
	сДел1000.Вставить("A2111", "П21113");
	сДел1000.Вставить("B2111", "П21114");
	сДел1000.Вставить("A2112", "П21123");
	сДел1000.Вставить("B2112", "П21124");
	сДел1000.Вставить("A2120", "П21203");
	сДел1000.Вставить("B2120", "П21204");
	сДел1000.Вставить("A2121", "П21213");
	сДел1000.Вставить("B2121", "П21214");
	сДел1000.Вставить("A2122", "П21223");
	сДел1000.Вставить("B2122", "П21224");
	сДел1000.Вставить("A2123", "П21233");
	сДел1000.Вставить("B2123", "П21234");
	сДел1000.Вставить("A2130", "_П21303");
	сДел1000.Вставить("B2130", "_П21304");
	сДел1000.Вставить("A2150", "_П21503");
	сДел1000.Вставить("B2150", "_П21504");
	сДел1000.Вставить("A2180", "_П21803");
	сДел1000.Вставить("B2180", "_П21804");
	сДел1000.Вставить("A2181", "_П21813");
	сДел1000.Вставить("B2181", "_П21814");
	сДел1000.Вставить("A2182", "_П21823");
	сДел1000.Вставить("B2182", "_П21824");
	сДел1000.Вставить("A2190", "П21903");
	сДел1000.Вставить("B2190", "П21904");
	сДел1000.Вставить("A2195", "_П21953");
	сДел1000.Вставить("B2195", "_П21954");
	сДел1000.Вставить("A2200", "П22003");
	сДел1000.Вставить("B2200", "П22004");
	сДел1000.Вставить("A2220", "П22203");
	сДел1000.Вставить("B2220", "П22204");
	сДел1000.Вставить("A2240", "П22403");
	сДел1000.Вставить("B2240", "П22404");
	сДел1000.Вставить("A2241", "П22413");
	сДел1000.Вставить("B2241", "П22414");
	сДел1000.Вставить("A2250", "_П22503");
	сДел1000.Вставить("B2250", "_П22504");
	сДел1000.Вставить("A2255", "_П22553");
	сДел1000.Вставить("B2255", "_П22554");
	сДел1000.Вставить("A2270", "_П22703");
	сДел1000.Вставить("B2270", "_П22704");
	сДел1000.Вставить("A2275", "П22753");
	сДел1000.Вставить("B2275", "П22754");
	сДел1000.Вставить("A2290", "П22903");
	сДел1000.Вставить("B2290", "П22904");
	сДел1000.Вставить("A2295", "_П22953");
	сДел1000.Вставить("B2295", "_П22954");
	сДел1000.Вставить("A2300", "_П23003");
	сДел1000.Вставить("B2300", "_П23004");
	сДел1000.Вставить("A2305", "П23053");
	сДел1000.Вставить("B2305", "П23054");
	сДел1000.Вставить("A2350", "П23503");
	сДел1000.Вставить("B2350", "П23504");
	сДел1000.Вставить("A2355", "_П23553");
	сДел1000.Вставить("B2355", "_П23554");
	сДел1000.Вставить("A2400", "П24003");
	сДел1000.Вставить("B2400", "П24004");
	сДел1000.Вставить("A2405", "П24053");
	сДел1000.Вставить("B2405", "П24054");
	сДел1000.Вставить("A2410", "П24103");
	сДел1000.Вставить("B2410", "П24104");
	сДел1000.Вставить("A2415", "П24153");
	сДел1000.Вставить("B2415", "П24154");
	сДел1000.Вставить("A2445", "П24453");
	сДел1000.Вставить("B2445", "П24454");
	сДел1000.Вставить("A2450", "П24503");
	сДел1000.Вставить("B2450", "П24504");
	сДел1000.Вставить("A2455", "_П24553");
	сДел1000.Вставить("B2455", "_П24554");
	сДел1000.Вставить("A2460", "П24603");
	сДел1000.Вставить("B2460", "П24604");
	сДел1000.Вставить("A2465", "П24653");
	сДел1000.Вставить("B2465", "П24654");
	сДел1000.Вставить("A2500", "П25003");
	сДел1000.Вставить("B2500", "П25004");
	сДел1000.Вставить("A2505", "П25053");
	сДел1000.Вставить("B2505", "П25054");
	сДел1000.Вставить("A2510", "П25103");
	сДел1000.Вставить("B2510", "П25104");
	сДел1000.Вставить("A2515", "П25153");
	сДел1000.Вставить("B2515", "П25154");
	сДел1000.Вставить("A2520", "П25203");
	сДел1000.Вставить("B2520", "П25204");
	сДел1000.Вставить("A2550", "П25503");
	сДел1000.Вставить("B2550", "П25504");
	с.Вставить("A2600", "П26003");
	с.Вставить("B2600", "П26004");
	с.Вставить("A2605", "П26053");
	с.Вставить("B2605", "П26054");
	с.Вставить("A2610", "П26103");
	с.Вставить("B2610", "П26104");
	с.Вставить("A2615", "П26153");
	с.Вставить("B2615", "П26154");
	с.Вставить("A2650", "П26503");
	с.Вставить("B2650", "П26504");
	
	с.Вставить("FIRM_RUK", "ОргДиректор");
	с.Вставить("FIRM_BUH", "ОргБухгалтер");
КонецЕсли;	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
	КонецОтчета(Doc); 	
КонецПроцедуры

Процедура Формирование_ПрямойМетод(App,  Документ,  БланкФ3,  PDate,  ИД)
	Doc = App.OpenOrCreateByExDocID(БланкФ3, ОпределитьКодПериода(Документ), PDate, , ИД, 0);
	Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаДДС;
	Doc.DisableScripts(); 	
	rsMain = Doc.DataSets();
	с = Новый Структура;
	сДел1000 = Новый Структура;
	НачалоОтчета(rsMain);
		
	Если БланкФ3 = "S0100309" Тогда
 
		с.Вставить("N1","ДатаКонцаПериодаОтчетаГод");
		с.Вставить("N2","ДатаКонцаПериодаОтчетаМесяц");
		с.Вставить("LASTDAY","ДатаКонцаПериодаОтчетаЧисло");
		сДел1000.Вставить("A3000_3", "П30003");	
		сДел1000.Вставить("A3000_4", "П30004");	
		сДел1000.Вставить("A3005_3", "П30053");	
		сДел1000.Вставить("A3005_4", "П30054");	
		сДел1000.Вставить("A3006_3", "П30063");	
		сДел1000.Вставить("A3006_4", "П30064");	
		сДел1000.Вставить("A3010_3", "П30103");	
		сДел1000.Вставить("A3010_4", "П30104");	
		сДел1000.Вставить("A3011_3", "П30113");	
		сДел1000.Вставить("A3011_4", "П30114");	
		сДел1000.Вставить("A3015_3", "П30153");	
		сДел1000.Вставить("A3015_4", "П30154");	
		сДел1000.Вставить("A3020_3", "П30203");	
		сДел1000.Вставить("A3020_4", "П30204");	
		сДел1000.Вставить("A3025_3", "П30253");	
		сДел1000.Вставить("A3025_4", "П30254");	
		сДел1000.Вставить("A3035_3", "П30353");	
		сДел1000.Вставить("A3035_4", "П30354");	
		сДел1000.Вставить("A3040_3", "П30403");	
		сДел1000.Вставить("A3040_4", "П30404");	
		сДел1000.Вставить("A3045_3", "П30453");	
		сДел1000.Вставить("A3045_4", "П30454");	
		сДел1000.Вставить("A3050_3", "П30503");	
		сДел1000.Вставить("A3050_4", "П30504");	
		сДел1000.Вставить("A3055_3", "П30553");	
		сДел1000.Вставить("A3055_4", "П30554");	
		сДел1000.Вставить("A3095_3", "П30953");	
		сДел1000.Вставить("A3095_4", "П30954");	
		сДел1000.Вставить("A3100_3", "_П31003");
		сДел1000.Вставить("A3100_4", "_П31004");
		сДел1000.Вставить("A3105_3", "_П31053");
		сДел1000.Вставить("A3105_4", "_П31054");
		сДел1000.Вставить("A3110_3", "_П31103");
		сДел1000.Вставить("A3110_4", "_П31104");
		сДел1000.Вставить("A3115_3", "_П31153");
		сДел1000.Вставить("A3115_4", "_П31154");
		сДел1000.Вставить("A3116_3", "_П31163");
		сДел1000.Вставить("A3116_4", "_П31164");
		сДел1000.Вставить("A3117_3", "_П31173");
		сДел1000.Вставить("A3117_4", "_П31174");
		сДел1000.Вставить("A3118_3", "_П31183");
		сДел1000.Вставить("A3118_4", "_П31184");
		сДел1000.Вставить("A3135_3", "_П31353");
		сДел1000.Вставить("A3135_4", "_П31354");
		сДел1000.Вставить("A3140_3", "_П31403");
		сДел1000.Вставить("A3140_4", "_П31404");
		сДел1000.Вставить("A3145_3", "_П31453");
		сДел1000.Вставить("A3145_4", "_П31454");
		сДел1000.Вставить("A3150_3", "_П31503");
		сДел1000.Вставить("A3150_4", "_П31504");
		сДел1000.Вставить("A3155_3", "_П31553");
		сДел1000.Вставить("A3155_4", "_П31554");
		сДел1000.Вставить("A3190_3", "_П31903");
		сДел1000.Вставить("A3190_4", "_П31904");
		сДел1000.Вставить("A3195_3", "П31953");	
		сДел1000.Вставить("A3195_4", "П31954");	
		сДел1000.Вставить("A3200_3", "П32003");	
		сДел1000.Вставить("A3200_4", "П32004");	
		сДел1000.Вставить("A3205_3", "П32053");	
		сДел1000.Вставить("A3205_4", "П32054");	
		сДел1000.Вставить("A3215_3", "П32153");	
		сДел1000.Вставить("A3215_4", "П32154");	
		сДел1000.Вставить("A3220_3", "П32203");	
		сДел1000.Вставить("A3220_4", "П32204");	
		сДел1000.Вставить("A3225_3", "П32253");	
		сДел1000.Вставить("A3225_4", "П32254");	
		сДел1000.Вставить("A3230_3", "П32303");	
		сДел1000.Вставить("A3230_4", "П32304");	
		сДел1000.Вставить("A3235_3", "П32353");	
		сДел1000.Вставить("A3235_4", "П32354");	
		сДел1000.Вставить("A3250_3", "П32503");	
		сДел1000.Вставить("A3250_4", "П32504");	
		сДел1000.Вставить("A3255_3", "_П32553");
		сДел1000.Вставить("A3255_4", "_П32554");
		сДел1000.Вставить("A3260_3", "_П32603");
		сДел1000.Вставить("A3260_4", "_П32604");
		сДел1000.Вставить("A3270_3", "_П32703");
		сДел1000.Вставить("A3270_4", "_П32704");
		сДел1000.Вставить("A3275_3", "_П32753");
		сДел1000.Вставить("A3275_4", "_П32754");
		сДел1000.Вставить("A3280_3", "_П32803");
		сДел1000.Вставить("A3280_4", "_П32804");
		сДел1000.Вставить("A3290_3", "_П32903");
		сДел1000.Вставить("A3290_4", "_П32904");
		сДел1000.Вставить("A3295_3", "П32953");	
		сДел1000.Вставить("A3295_4", "П32954");	
		сДел1000.Вставить("A3300_3", "П33003");	
		сДел1000.Вставить("A3300_4", "П33004");	
		сДел1000.Вставить("A3305_3", "П33053");	
		сДел1000.Вставить("A3305_4", "П33054");	
		сДел1000.Вставить("A3310_3", "П33103");	
		сДел1000.Вставить("A3310_4", "П33104");	
		сДел1000.Вставить("A3340_3", "П33403");	
		сДел1000.Вставить("A3340_4", "П33404");	
		сДел1000.Вставить("A3345_3", "_П33453");
		сДел1000.Вставить("A3345_4", "_П33454");
		сДел1000.Вставить("A3350_3", "_П33503");
		сДел1000.Вставить("A3350_4", "_П33504");
		сДел1000.Вставить("A3355_3", "_П33553");
		сДел1000.Вставить("A3355_4", "_П33554");
		сДел1000.Вставить("A3360_3", "_П33603");
		сДел1000.Вставить("A3360_4", "_П33604");
		сДел1000.Вставить("A3365_3", "_П33653");
		сДел1000.Вставить("A3365_4", "_П33654");
		сДел1000.Вставить("A3370_3", "_П33703");
		сДел1000.Вставить("A3370_4", "_П33704");
		сДел1000.Вставить("A3375_3", "_П33753");
		сДел1000.Вставить("A3375_4", "_П33754");
		сДел1000.Вставить("A3390_3", "_П33903");
		сДел1000.Вставить("A3390_4", "_П33904");
		сДел1000.Вставить("A3395_3", "П33953");	
		сДел1000.Вставить("A3395_4", "П33954");	
		сДел1000.Вставить("A3400_3", "П34003");	
		сДел1000.Вставить("A3400_4", "П34004");	
		сДел1000.Вставить("A3405_3", "П34053");	
		сДел1000.Вставить("A3405_4", "П34054");	
		сДел1000.Вставить("A3410_3", "П34103");	
		сДел1000.Вставить("A3410_4", "П34104");	
		сДел1000.Вставить("A3415_3", "П34153");	
		сДел1000.Вставить("A3415_4", "П34154");			
	КонецЕсли;      	
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);

	КонецОтчета(Doc);
КонецПроцедуры

Процедура Формирование_НеПрямойМетод(App,  Документ,  БланкФ3Н,  PDate,  ИД)
	Doc = App.OpenOrCreateByExDocID(БланкФ3Н, ОпределитьКодПериода(Документ), PDate, , ИД, 0);
	Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаДДС;
	Doc.DisableScripts(); 	
	rsMain = Doc.DataSets(); 
	сДел1000 = Новый Структура;
	с = Новый Структура;
	НачалоОтчета(rsMain);
		
	Если БланкФ3Н = "S0103353" Тогда
		
		с.Вставить("N1","ДатаКонцаПериодаОтчетаГод");
		с.Вставить("N2","ДатаКонцаПериодаОтчетаМесяц");
		с.Вставить("LASTDAY","ДатаКонцаПериодаОтчетаЧисло");
		
		сДел1000.Вставить("A3195_3", "П31953");
		сДел1000.Вставить("A3195_4", "П31954");
		сДел1000.Вставить("A3195_5", "П31955");
		сДел1000.Вставить("A3195_6", "П31956");
		сДел1000.Вставить("A3200_3", "П32003");
		сДел1000.Вставить("A3200_5", "П32004");
		сДел1000.Вставить("A3205_3", "П32053");
		сДел1000.Вставить("A3205_5", "П32054");
		сДел1000.Вставить("A3215_3", "П32153");
		сДел1000.Вставить("A3215_5", "П32154");
		сДел1000.Вставить("A3220_3", "П32203");
		сДел1000.Вставить("A3220_5", "П32204");
		сДел1000.Вставить("A3225_3", "П32253");
		сДел1000.Вставить("A3225_5", "П32254");
		сДел1000.Вставить("A3230_3", "П32303");
		сДел1000.Вставить("A3230_5", "П32304");
		сДел1000.Вставить("A3235_3", "П32353");
		сДел1000.Вставить("A3235_5", "П32354");
		сДел1000.Вставить("A3250_3", "П32503");
		сДел1000.Вставить("A3250_5", "П32504");
		сДел1000.Вставить("A3255_4", "П32553");
		сДел1000.Вставить("A3255_6", "П32554");
		сДел1000.Вставить("A3260_4", "П32603");
		сДел1000.Вставить("A3260_6", "П32604");
		сДел1000.Вставить("A3270_4", "П32703");
		сДел1000.Вставить("A3270_6", "П32704");
		сДел1000.Вставить("A3275_4", "П32753");
		сДел1000.Вставить("A3275_6", "П32754");
		сДел1000.Вставить("A3280_4", "П32803");
		сДел1000.Вставить("A3280_6", "П32804");
		сДел1000.Вставить("A3290_4", "П32903");
		сДел1000.Вставить("A3290_6", "П32904");
		сДел1000.Вставить("A3295_3", "П32953");
		сДел1000.Вставить("A3295_4", "П32954");
		сДел1000.Вставить("A3295_5", "П32955");
		сДел1000.Вставить("A3295_6", "П32956");
		сДел1000.Вставить("A3300_3", "П33003");
		сДел1000.Вставить("A3300_5", "П33004");
		сДел1000.Вставить("A3305_3", "П33053");
		сДел1000.Вставить("A3305_5", "П33054");
		сДел1000.Вставить("A3310_3", "П33103");
		сДел1000.Вставить("A3310_5", "П33104");
		сДел1000.Вставить("A3340_3", "П33403");
		сДел1000.Вставить("A3340_5", "П33404");
		сДел1000.Вставить("A3345_4", "П33453");
		сДел1000.Вставить("A3345_6", "П33454");
		сДел1000.Вставить("A3350_4", "П33503");
		сДел1000.Вставить("A3350_6", "П33504");
		сДел1000.Вставить("A3355_4", "П33553");
		сДел1000.Вставить("A3355_6", "П33554");
		сДел1000.Вставить("A3360_4", "П33603");
		сДел1000.Вставить("A3360_6", "П33604");
		сДел1000.Вставить("A3365_4", "П33653");
		сДел1000.Вставить("A3365_6", "П33654");
		сДел1000.Вставить("A3370_4", "П33703");
		сДел1000.Вставить("A3370_6", "П33704");
		сДел1000.Вставить("A3375_4", "П33753");
		сДел1000.Вставить("A3375_6", "П33754");
		сДел1000.Вставить("A3390_4", "П33903");
		сДел1000.Вставить("A3390_6", "П33904");
		сДел1000.Вставить("A3395_3", "П33953");
		сДел1000.Вставить("A3395_4", "П33954");
		сДел1000.Вставить("A3395_5", "П33955");
		сДел1000.Вставить("A3395_6", "П33956");
		сДел1000.Вставить("A3400_3", "П34003");
		сДел1000.Вставить("A3400_4", "П34004");
		сДел1000.Вставить("A3400_5", "П34005");
		сДел1000.Вставить("A3400_6", "П34006");
		сДел1000.Вставить("A3405_3", "П34053");
		сДел1000.Вставить("A3405_5", "П34054");
		сДел1000.Вставить("A3410_3", "П34103");
		сДел1000.Вставить("A3410_4", "П34104");
		сДел1000.Вставить("A3410_5", "П34105");
		сДел1000.Вставить("A3410_6", "П34106");
		сДел1000.Вставить("A3415_3", "П34153");
		сДел1000.Вставить("A3415_5", "П34155");
		сДел1000.Вставить("A3500_3", "П35003");
		сДел1000.Вставить("A3500_4", "П35004");
		сДел1000.Вставить("A3500_5", "П35005");
		сДел1000.Вставить("A3500_6", "П35006");
		сДел1000.Вставить("A3505_3", "П35053");
		сДел1000.Вставить("A3505_5", "П35055");
		сДел1000.Вставить("A3510_3", "П35103");
		сДел1000.Вставить("A3510_4", "П35104");
		сДел1000.Вставить("A3510_5", "П35105");
		сДел1000.Вставить("A3510_6", "П35106");
		сДел1000.Вставить("A3515_3", "П35153");
		сДел1000.Вставить("A3515_4", "П35154");
		сДел1000.Вставить("A3515_5", "П35155");
		сДел1000.Вставить("A3515_6", "П35156");
		сДел1000.Вставить("A3520_3", "П35203");
		сДел1000.Вставить("A3520_4", "П35204");
		сДел1000.Вставить("A3520_5", "П35205");
		сДел1000.Вставить("A3520_6", "П35206");
		сДел1000.Вставить("A3521_3", "П35213");
		сДел1000.Вставить("A3521_4", "П35214");
		сДел1000.Вставить("A3521_5", "П35215");
		сДел1000.Вставить("A3521_6", "П35216");
		сДел1000.Вставить("A3522_3", "П35223");
		сДел1000.Вставить("A3522_4", "П35224");
		сДел1000.Вставить("A3522_5", "П35225");
		сДел1000.Вставить("A3522_6", "П35226");
		сДел1000.Вставить("A3523_3", "П35233");
		сДел1000.Вставить("A3523_4", "П35234");
		сДел1000.Вставить("A3523_5", "П35235");
		сДел1000.Вставить("A3523_6", "П35236");
		сДел1000.Вставить("A3524_3", "П35243");
		сДел1000.Вставить("A3524_4", "П35244");
		сДел1000.Вставить("A3524_5", "П35245");
		сДел1000.Вставить("A3524_6", "П35246");
		сДел1000.Вставить("A3526_3", "П35263");
		сДел1000.Вставить("A3526_4", "П35264");
		сДел1000.Вставить("A3526_5", "П35265");
		сДел1000.Вставить("A3526_6", "П35266");
		сДел1000.Вставить("A3540_4", "П35404");
		сДел1000.Вставить("A3540_6", "П35406");
		сДел1000.Вставить("A3550_3", "П35503");
		сДел1000.Вставить("A3550_4", "П35504");
		сДел1000.Вставить("A3550_5", "П35505");
		сДел1000.Вставить("A3550_6", "П35506");
		сДел1000.Вставить("A3551_3", "П35513");
		сДел1000.Вставить("A3551_4", "П35514");
		сДел1000.Вставить("A3551_5", "П35515");
		сДел1000.Вставить("A3551_6", "П35516");
		сДел1000.Вставить("A3552_3", "П35523");
		сДел1000.Вставить("A3552_4", "П35524");
		сДел1000.Вставить("A3552_5", "П35525");
		сДел1000.Вставить("A3552_6", "П35526");
		сДел1000.Вставить("A3553_3", "П35533");
		сДел1000.Вставить("A3553_4", "П35534");
		сДел1000.Вставить("A3553_5", "П35535");
		сДел1000.Вставить("A3553_6", "П35536");
		сДел1000.Вставить("A3554_3", "П35543");
		сДел1000.Вставить("A3554_4", "П35544");
		сДел1000.Вставить("A3554_5", "П35545");
		сДел1000.Вставить("A3554_6", "П35546");
		сДел1000.Вставить("A3556_3", "П35563");
		сДел1000.Вставить("A3556_4", "П35564");
		сДел1000.Вставить("A3556_5", "П35565");
		сДел1000.Вставить("A3556_6", "П35566");
		сДел1000.Вставить("A3557_3", "П35573");
		сДел1000.Вставить("A3557_4", "П35574");
		сДел1000.Вставить("A3557_5", "П35575");
		сДел1000.Вставить("A3557_6", "П35576");
		сДел1000.Вставить("A3560_3", "П35603");
		сДел1000.Вставить("A3560_4", "П35604");
		сДел1000.Вставить("A3560_5", "П35605");
		сДел1000.Вставить("A3560_6", "П35606");
		сДел1000.Вставить("A3561_3", "П35613");
		сДел1000.Вставить("A3561_4", "П35614");
		сДел1000.Вставить("A3561_5", "П35615");
		сДел1000.Вставить("A3561_6", "П35616");
		сДел1000.Вставить("A3562_3", "П35623");
		сДел1000.Вставить("A3562_4", "П35624");
		сДел1000.Вставить("A3562_5", "П35625");
		сДел1000.Вставить("A3562_6", "П35626");
		сДел1000.Вставить("A3563_3", "П35633");
		сДел1000.Вставить("A3563_4", "П35634");
		сДел1000.Вставить("A3563_5", "П35635");
		сДел1000.Вставить("A3563_6", "П35636");
		сДел1000.Вставить("A3564_3", "П35643");
		сДел1000.Вставить("A3564_4", "П35644");
		сДел1000.Вставить("A3564_5", "П35645");
		сДел1000.Вставить("A3564_6", "П35646");
		сДел1000.Вставить("A3566_3", "П35663");
		сДел1000.Вставить("A3566_4", "П35664");
		сДел1000.Вставить("A3566_5", "П35665");
		сДел1000.Вставить("A3566_6", "П35666");
		сДел1000.Вставить("A3567_3", "П35673");
		сДел1000.Вставить("A3567_4", "П35674");
		сДел1000.Вставить("A3567_5", "П35675");
		сДел1000.Вставить("A3567_6", "П35676");
		сДел1000.Вставить("A3570_3", "П35703");
		сДел1000.Вставить("A3570_4", "П35704");
		сДел1000.Вставить("A3570_5", "П35705");
		сДел1000.Вставить("A3570_6", "П35706");
		сДел1000.Вставить("A3580_4", "П35804");
		сДел1000.Вставить("A3580_6", "П35806");
		сДел1000.Вставить("A3585_4", "П35854");
		сДел1000.Вставить("A3585_6", "П35856");			
	КонецЕсли;
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);

	КонецОтчета(Doc);
КонецПроцедуры

Процедура Формирование_Капитал(App,  Документ,  БланкФ4,  PDate,  ИД)
	Doc = App.OpenOrCreateByExDocID(БланкФ4, ОпределитьКодПериода(Документ), PDate, , ИД, 0);
	Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетОСобственномКапитале;
	Doc.DisableScripts(); 	
	rsMain = Doc.DataSets(); 
	сДел1000 = Новый Структура;
	с = Новый Структура;
	НачалоОтчета(rsMain);
		
	Если БланкФ4 = "S0104008" Тогда
		
		с.Вставить("N1","ДатаКонцаПериодаОтчетаГод");
		с.Вставить("N2","ДатаКонцаПериодаОтчетаМесяц");
		с.Вставить("LASTDAY","ДатаКонцаПериодаОтчетаЧисло");
		//с.Вставить("MY_DATE1","ДатаКонцаПериодаОтчетаГод");
		
		сДел1000.Вставить("A4000_3", "П40003");
		сДел1000.Вставить("A4000_4", "П40004");
		сДел1000.Вставить("A4000_5", "П40005");
		сДел1000.Вставить("A4000_6", "П40006");
		сДел1000.Вставить("A4000_7", "П40007");
		сДел1000.Вставить("A4000_8", "П40008");
		сДел1000.Вставить("A4000_9", "П40009");
		сДел1000.Вставить("A4000_10", "П400010");
		сДел1000.Вставить("A4005_3", "П40053");
		сДел1000.Вставить("A4005_4", "П40054");
		сДел1000.Вставить("A4005_5", "П40055");
		сДел1000.Вставить("A4005_6", "П40056");
		сДел1000.Вставить("A4005_7", "П40057");
		сДел1000.Вставить("A4005_8", "П40058");
		сДел1000.Вставить("A4005_9", "П40059");
		сДел1000.Вставить("A4005_10", "П400510");
		сДел1000.Вставить("A4010_3", "П40103");
		сДел1000.Вставить("A4010_4", "П40104");
		сДел1000.Вставить("A4010_5", "П40105");
		сДел1000.Вставить("A4010_6", "П40106");
		сДел1000.Вставить("A4010_7", "П40107");
		сДел1000.Вставить("A4010_8", "П40108");
		сДел1000.Вставить("A4010_9", "П40109");
		сДел1000.Вставить("A4010_10", "П401010");
		сДел1000.Вставить("A4090_3", "П40903");
		сДел1000.Вставить("A4090_4", "П40904");
		сДел1000.Вставить("A4090_5", "П40905");
		сДел1000.Вставить("A4090_6", "П40906");
		сДел1000.Вставить("A4090_7", "П40907");
		сДел1000.Вставить("A4090_8", "П40908");
		сДел1000.Вставить("A4090_9", "П40909");
		сДел1000.Вставить("A4090_10", "П409010");
		сДел1000.Вставить("A4095_3", "П40953");
		сДел1000.Вставить("A4095_4", "П40954");
		сДел1000.Вставить("A4095_5", "П40955");
		сДел1000.Вставить("A4095_6", "П40956");
		сДел1000.Вставить("A4095_7", "П40957");
		сДел1000.Вставить("A4095_8", "П40958");
		сДел1000.Вставить("A4095_9", "П40959");
		сДел1000.Вставить("A4095_10", "П409510");
		сДел1000.Вставить("A4100_3", "П41003");
		сДел1000.Вставить("A4100_4", "П41004");
		сДел1000.Вставить("A4100_5", "П41005");
		сДел1000.Вставить("A4100_6", "П41006");
		сДел1000.Вставить("A4100_7", "П41007");
		сДел1000.Вставить("A4100_8", "П41008");
		сДел1000.Вставить("A4100_9", "П41009");
		сДел1000.Вставить("A4100_10", "П410010");
		сДел1000.Вставить("A4110_3", "П41103");
		сДел1000.Вставить("A4110_4", "П41104");
		сДел1000.Вставить("A4110_5", "П41105");
		сДел1000.Вставить("A4110_6", "П41106");
		сДел1000.Вставить("A4110_7", "П41107");
		сДел1000.Вставить("A4110_8", "П41108");
		сДел1000.Вставить("A4110_9", "П41109");
		сДел1000.Вставить("A4110_10", "П411010");
		сДел1000.Вставить("A4111_3", "П41113");
		сДел1000.Вставить("A4111_4", "П41114");
		сДел1000.Вставить("A4111_5", "П41115");
		сДел1000.Вставить("A4111_6", "П41116");
		сДел1000.Вставить("A4111_7", "П41117");
		сДел1000.Вставить("A4111_8", "П41118");
		сДел1000.Вставить("A4111_9", "П41119");
		сДел1000.Вставить("A4111_10", "П411110");
		сДел1000.Вставить("A4112_3", "П41123");
		сДел1000.Вставить("A4112_4", "П41124");
		сДел1000.Вставить("A4112_5", "П41125");
		сДел1000.Вставить("A4112_6", "П41126");
		сДел1000.Вставить("A4112_7", "П41127");
		сДел1000.Вставить("A4112_8", "П41128");
		сДел1000.Вставить("A4112_9", "П41129");
		сДел1000.Вставить("A4112_10", "П411210");
		сДел1000.Вставить("A4113_3", "П41133");
		сДел1000.Вставить("A4113_4", "П41134");
		сДел1000.Вставить("A4113_5", "П41135");
		сДел1000.Вставить("A4113_6", "П41136");
		сДел1000.Вставить("A4113_7", "П41137");
		сДел1000.Вставить("A4113_8", "П41138");
		сДел1000.Вставить("A4113_9", "П41139");
		сДел1000.Вставить("A4113_10", "П411310");
		сДел1000.Вставить("A4114_3", "П41143");
		сДел1000.Вставить("A4114_4", "П41144");
		сДел1000.Вставить("A4114_5", "П41145");
		сДел1000.Вставить("A4114_6", "П41146");
		сДел1000.Вставить("A4114_7", "П41147");
		сДел1000.Вставить("A4114_8", "П41148");
		сДел1000.Вставить("A4114_9", "П41149");
		сДел1000.Вставить("A4114_10", "П411410");
		сДел1000.Вставить("A4116_3", "П41163");
		сДел1000.Вставить("A4116_4", "П41164");
		сДел1000.Вставить("A4116_5", "П41165");
		сДел1000.Вставить("A4116_6", "П41166");
		сДел1000.Вставить("A4116_7", "П41167");
		сДел1000.Вставить("A4116_8", "П41168");
		сДел1000.Вставить("A4116_9", "П41169");
		сДел1000.Вставить("A4116_10", "П411610");
		сДел1000.Вставить("A4200_3", "П42003");
		сДел1000.Вставить("A4200_4", "П42004");
		сДел1000.Вставить("A4200_5", "П42005");
		сДел1000.Вставить("A4200_6", "П42006");
		сДел1000.Вставить("A4200_7", "П42007");
		сДел1000.Вставить("A4200_8", "П42008");
		сДел1000.Вставить("A4200_9", "П42009");
		сДел1000.Вставить("A4200_10", "П420010");
		сДел1000.Вставить("A4205_3", "П42053");
		сДел1000.Вставить("A4205_4", "П42054");
		сДел1000.Вставить("A4205_5", "П42055");
		сДел1000.Вставить("A4205_6", "П42056");
		сДел1000.Вставить("A4205_7", "П42057");
		сДел1000.Вставить("A4205_8", "П42058");
		сДел1000.Вставить("A4205_9", "П42059");
		сДел1000.Вставить("A4205_10", "П420510");
		сДел1000.Вставить("A4210_3", "П42103");
		сДел1000.Вставить("A4210_4", "П42104");
		сДел1000.Вставить("A4210_5", "П42105");
		сДел1000.Вставить("A4210_6", "П42106");
		сДел1000.Вставить("A4210_7", "П42107");
		сДел1000.Вставить("A4210_8", "П42108");
		сДел1000.Вставить("A4210_9", "П42109");
		сДел1000.Вставить("A4210_10", "П421010");
		сДел1000.Вставить("A4215_3", "П42153");
		сДел1000.Вставить("A4215_4", "П42154");
		сДел1000.Вставить("A4215_5", "П42155");
		сДел1000.Вставить("A4215_6", "П42156");
		сДел1000.Вставить("A4215_7", "П42157");
		сДел1000.Вставить("A4215_8", "П42158");
		сДел1000.Вставить("A4215_9", "П42159");
		сДел1000.Вставить("A4215_10", "П421510");
		сДел1000.Вставить("A4220_3", "П42203");
		сДел1000.Вставить("A4220_4", "П42204");
		сДел1000.Вставить("A4220_5", "П42205");
		сДел1000.Вставить("A4220_6", "П42206");
		сДел1000.Вставить("A4220_7", "П42207");
		сДел1000.Вставить("A4220_8", "П42208");
		сДел1000.Вставить("A4220_9", "П42209");
		сДел1000.Вставить("A4220_10", "П422010");
		сДел1000.Вставить("A4225_3", "П42253");
		сДел1000.Вставить("A4225_4", "П42254");
		сДел1000.Вставить("A4225_5", "П42255");
		сДел1000.Вставить("A4225_6", "П42256");
		сДел1000.Вставить("A4225_7", "П42257");
		сДел1000.Вставить("A4225_8", "П42258");
		сДел1000.Вставить("A4225_9", "П42259");
		сДел1000.Вставить("A4225_10", "П422510");
		сДел1000.Вставить("A4240_3", "П42403");
		сДел1000.Вставить("A4240_4", "П42404");
		сДел1000.Вставить("A4240_5", "П42405");
		сДел1000.Вставить("A4240_6", "П42406");
		сДел1000.Вставить("A4240_7", "П42407");
		сДел1000.Вставить("A4240_8", "П42408");
		сДел1000.Вставить("A4240_9", "П42409");
		сДел1000.Вставить("A4240_10", "П424010");
		сДел1000.Вставить("A4245_3", "П42453");
		сДел1000.Вставить("A4245_4", "П42454");
		сДел1000.Вставить("A4245_5", "П42455");
		сДел1000.Вставить("A4245_6", "П42456");
		сДел1000.Вставить("A4245_7", "П42457");
		сДел1000.Вставить("A4245_8", "П42458");
		сДел1000.Вставить("A4245_9", "П42459");
		сДел1000.Вставить("A4245_10", "П424510");
		сДел1000.Вставить("A4260_3", "П42603");
		сДел1000.Вставить("A4260_4", "П42604");
		сДел1000.Вставить("A4260_5", "П42605");
		сДел1000.Вставить("A4260_6", "П42606");
		сДел1000.Вставить("A4260_7", "П42607");
		сДел1000.Вставить("A4260_8", "П42608");
		сДел1000.Вставить("A4260_9", "П42609");
		сДел1000.Вставить("A4260_10", "П426010");
		сДел1000.Вставить("A4265_3", "П42653");
		сДел1000.Вставить("A4265_4", "П42654");
		сДел1000.Вставить("A4265_5", "П42655");
		сДел1000.Вставить("A4265_6", "П42656");
		сДел1000.Вставить("A4265_7", "П42657");
		сДел1000.Вставить("A4265_8", "П42658");
		сДел1000.Вставить("A4265_9", "П42659");
		сДел1000.Вставить("A4265_10", "П426510");
		сДел1000.Вставить("A4270_3", "П42703");
		сДел1000.Вставить("A4270_4", "П42704");
		сДел1000.Вставить("A4270_5", "П42705");
		сДел1000.Вставить("A4270_6", "П42706");
		сДел1000.Вставить("A4270_7", "П42707");
		сДел1000.Вставить("A4270_8", "П42708");
		сДел1000.Вставить("A4270_9", "П42709");
		сДел1000.Вставить("A4270_10", "П427010");
		сДел1000.Вставить("A4275_3", "П42753");
		сДел1000.Вставить("A4275_4", "П42754");
		сДел1000.Вставить("A4275_5", "П42755");
		сДел1000.Вставить("A4275_6", "П42756");
		сДел1000.Вставить("A4275_7", "П42757");
		сДел1000.Вставить("A4275_8", "П42758");
		сДел1000.Вставить("A4275_9", "П42759");
		сДел1000.Вставить("A4275_10", "П427510");
		сДел1000.Вставить("A4280_3", "П42803");
		сДел1000.Вставить("A4280_4", "П42804");
		сДел1000.Вставить("A4280_5", "П42805");
		сДел1000.Вставить("A4280_6", "П42806");
		сДел1000.Вставить("A4280_7", "П42807");
		сДел1000.Вставить("A4280_8", "П42808");
		сДел1000.Вставить("A4280_9", "П42809");
		сДел1000.Вставить("A4280_10", "П428010");
		сДел1000.Вставить("A4290_3", "П42903");
		сДел1000.Вставить("A4290_4", "П42904");
		сДел1000.Вставить("A4290_5", "П42905");
		сДел1000.Вставить("A4290_6", "П42906");
		сДел1000.Вставить("A4290_7", "П42907");
		сДел1000.Вставить("A4290_8", "П42908");
		сДел1000.Вставить("A4290_9", "П42909");
		сДел1000.Вставить("A4290_10", "П429010");
		сДел1000.Вставить("A4291_3", "П42913");
		сДел1000.Вставить("A4291_4", "П42914");
		сДел1000.Вставить("A4291_5", "П42915");
		сДел1000.Вставить("A4291_6", "П42916");
		сДел1000.Вставить("A4291_7", "П42917");
		сДел1000.Вставить("A4291_8", "П42918");
		сДел1000.Вставить("A4291_9", "П42919");
		сДел1000.Вставить("A4291_10", "П429110");
		сДел1000.Вставить("A4295_3", "П42953");
		сДел1000.Вставить("A4295_4", "П42954");
		сДел1000.Вставить("A4295_5", "П42955");
		сДел1000.Вставить("A4295_6", "П42956");
		сДел1000.Вставить("A4295_7", "П42957");
		сДел1000.Вставить("A4295_8", "П42958");
		сДел1000.Вставить("A4295_9", "П42959");
		сДел1000.Вставить("A4295_10", "П429510");
		сДел1000.Вставить("A4300_3", "П43003");
		сДел1000.Вставить("A4300_4", "П43004");
		сДел1000.Вставить("A4300_5", "П43005");
		сДел1000.Вставить("A4300_6", "П43006");
		сДел1000.Вставить("A4300_7", "П43007");
		сДел1000.Вставить("A4300_8", "П43008");
		сДел1000.Вставить("A4300_9", "П43009");
		сДел1000.Вставить("A4300_10", "П430010");		

	КонецЕсли;
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);

	КонецОтчета(Doc);
КонецПроцедуры

Процедура Формирование_Форма5(App, Документ, БланкФ5, PDate, ИД)
	Doc = App.OpenOrCreateByExDocID(БланкФ5, ОпределитьКодПериода(Документ), PDate, , ИД, 0);

	Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРазделI;
	Doc.DisableScripts(); 	
	rsMain = Doc.DataSets(); 
	
	НачалоОтчета(rsMain);
		
	Если БланкФ5 = "S0105007" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРазделI;
		сДел1000 = Новый Структура;
		
 		сДел1000.Вставить("A01", "П010_3");
 		сДел1000.Вставить("B01", "П010_4");
 		сДел1000.Вставить("C01", "П010_5");
 		сДел1000.Вставить("D01", "П010_6");
 		сДел1000.Вставить("E01", "П010_7");
 		сДел1000.Вставить("F01", "П010_8");
 		сДел1000.Вставить("G01", "П010_9");
 		сДел1000.Вставить("H01", "П010_10");
 		сДел1000.Вставить("I01", "П010_11");
 		сДел1000.Вставить("J01", "П010_12");
 		сДел1000.Вставить("K01", "П010_13");
 		сДел1000.Вставить("L01", "П010_14");
 		сДел1000.Вставить("M01", "П010_15");
 		сДел1000.Вставить("A02", "П020_3");
 		сДел1000.Вставить("B02", "П020_4");
 		сДел1000.Вставить("C02", "П020_5");
 		сДел1000.Вставить("D02", "П020_6");
 		сДел1000.Вставить("E02", "П020_7");
 		сДел1000.Вставить("F02", "П020_8");
 		сДел1000.Вставить("G02", "П020_9");
 		сДел1000.Вставить("H02", "П020_10");
 		сДел1000.Вставить("I02", "П020_11");
 		сДел1000.Вставить("J02", "П020_12");
 		сДел1000.Вставить("K02", "П020_13");
 		сДел1000.Вставить("L02", "П020_14");
 		сДел1000.Вставить("M02", "П020_15");
 		сДел1000.Вставить("A03", "П030_3");
 		сДел1000.Вставить("B03", "П030_4");
 		сДел1000.Вставить("C03", "П030_5");
 		сДел1000.Вставить("D03", "П030_6");
 		сДел1000.Вставить("E03", "П030_7");
 		сДел1000.Вставить("F03", "П030_8");
 		сДел1000.Вставить("G03", "П030_9");
 		сДел1000.Вставить("H03", "П030_10");
 		сДел1000.Вставить("I03", "П030_11");
 		сДел1000.Вставить("J03", "П030_12");
 		сДел1000.Вставить("K03", "П030_13");
 		сДел1000.Вставить("L03", "П030_14");
 		сДел1000.Вставить("M03", "П030_15");
 		сДел1000.Вставить("A04", "П040_3");
 		сДел1000.Вставить("B04", "П040_4");
 		сДел1000.Вставить("C04", "П040_5");
 		сДел1000.Вставить("D04", "П040_6");
 		сДел1000.Вставить("E04", "П040_7");
 		сДел1000.Вставить("F04", "П040_8");
 		сДел1000.Вставить("G04", "П040_9");
 		сДел1000.Вставить("H04", "П040_10");
 		сДел1000.Вставить("I04", "П040_11");
 		сДел1000.Вставить("J04", "П040_12");
 		сДел1000.Вставить("K04", "П040_13");
 		сДел1000.Вставить("L04", "П040_14");
 		сДел1000.Вставить("M04", "П040_15");
 		сДел1000.Вставить("A05", "П050_3");
 		сДел1000.Вставить("B05", "П050_4");
 		сДел1000.Вставить("C05", "П050_5");
 		сДел1000.Вставить("D05", "П050_6");
 		сДел1000.Вставить("E05", "П050_7");
 		сДел1000.Вставить("F05", "П050_8");
 		сДел1000.Вставить("G05", "П050_9");
 		сДел1000.Вставить("H05", "П050_10");
 		сДел1000.Вставить("I05", "П050_11");
 		сДел1000.Вставить("J05", "П050_12");
 		сДел1000.Вставить("K05", "П050_13");
 		сДел1000.Вставить("L05", "П050_14");
 		сДел1000.Вставить("M05", "П050_15");
 		сДел1000.Вставить("A6", "Стр060");
 		сДел1000.Вставить("A06", "П060_3");
 		сДел1000.Вставить("B06", "П060_4");
 		сДел1000.Вставить("C06", "П060_5");
 		сДел1000.Вставить("D06", "П060_6");
 		сДел1000.Вставить("E06", "П060_7");
 		сДел1000.Вставить("F06", "П060_8");
 		сДел1000.Вставить("G06", "П060_9");
 		сДел1000.Вставить("H06", "П060_10");
 		сДел1000.Вставить("I06", "П060_11");
 		сДел1000.Вставить("J06", "П060_12");
 		сДел1000.Вставить("K06", "П060_13");
 		сДел1000.Вставить("L06", "П060_14");
 		сДел1000.Вставить("M06", "П060_15");
 		сДел1000.Вставить("A07", "П070_3");
 		сДел1000.Вставить("B07", "П070_4");
 		сДел1000.Вставить("C07", "П070_5");
 		сДел1000.Вставить("D07", "П070_6");
 		сДел1000.Вставить("E07", "П070_7");
 		сДел1000.Вставить("F07", "П070_8");
 		сДел1000.Вставить("G07", "П070_9");
 		сДел1000.Вставить("H07", "П070_10");
 		сДел1000.Вставить("I07", "П070_11");
 		сДел1000.Вставить("J07", "П070_12");
 		сДел1000.Вставить("K07", "П070_13");
 		сДел1000.Вставить("L07", "П070_14");
 		сДел1000.Вставить("M07", "П070_15");
 		сДел1000.Вставить("A08", "П080_3");
 		сДел1000.Вставить("B08", "П080_4");
 		сДел1000.Вставить("C08", "П080_5");
 		сДел1000.Вставить("D08", "П080_6");
 		сДел1000.Вставить("E08", "П080_7");
 		сДел1000.Вставить("F08", "П080_8");
 		сДел1000.Вставить("G08", "П080_9");
 		сДел1000.Вставить("H08", "П080_10");
 		сДел1000.Вставить("I08", "П080_11");
 		сДел1000.Вставить("J08", "П080_12");
 		сДел1000.Вставить("K08", "П080_13");
 		сДел1000.Вставить("L08", "П080_14");
 		сДел1000.Вставить("M08", "П080_15");
 		сДел1000.Вставить("A09", "П090_3");
 		сДел1000.Вставить("B09", "П090_4");
 		сДел1000.Вставить("C09", "П090_5");
 		сДел1000.Вставить("D09", "П090_6");
 		сДел1000.Вставить("E09", "П090_7");
 		сДел1000.Вставить("F09", "П090_8");
 		сДел1000.Вставить("G09", "П090_9");
 		сДел1000.Вставить("H09", "П090_10");
 		сДел1000.Вставить("I09", "П090_11");
 		сДел1000.Вставить("J09", "П090_12");
 		сДел1000.Вставить("K09", "П090_13");
 		сДел1000.Вставить("L09", "П090_14");
 		сДел1000.Вставить("M09", "П090_15");		
 		сДел1000.Вставить("N2", "П081");
 		сДел1000.Вставить("N3", "П082");
 		сДел1000.Вставить("N4", "П083");
 		сДел1000.Вставить("N5", "П084");
 		сДел1000.Вставить("N5_1", "П085");
		
		ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРазделII;
		сДел1000 = Новый Структура;		
		
 		сДел1000.Вставить("A10", "П100_3");
 		сДел1000.Вставить("B10", "П100_4");
 		сДел1000.Вставить("C10", "П100_5");
 		сДел1000.Вставить("D10", "П100_6");
 		сДел1000.Вставить("E10", "П100_7");
 		сДел1000.Вставить("F10", "П100_8");
 		сДел1000.Вставить("G10", "П100_9");
 		сДел1000.Вставить("H10", "П100_10");
 		сДел1000.Вставить("I10", "П100_11");
 		сДел1000.Вставить("J10", "П100_12");
 		сДел1000.Вставить("K10", "П100_13");
 		сДел1000.Вставить("L10", "П100_14");
 		сДел1000.Вставить("M10", "П100_15");
 		сДел1000.Вставить("N10", "П100_16");
 		сДел1000.Вставить("O10", "П100_17");
 		сДел1000.Вставить("P10", "П100_18");
 		сДел1000.Вставить("Q10", "П100_19");
 		сДел1000.Вставить("A105", "П105_3");
 		сДел1000.Вставить("B105", "П105_4");
 		сДел1000.Вставить("C105", "П105_5");
 		сДел1000.Вставить("D105", "П105_6");
 		сДел1000.Вставить("E105", "П105_7");
 		сДел1000.Вставить("F105", "П105_8");
 		сДел1000.Вставить("G105", "П105_9");
 		сДел1000.Вставить("H105", "П105_10");
 		сДел1000.Вставить("I105", "П105_11");
 		сДел1000.Вставить("J105", "П105_12");
 		сДел1000.Вставить("K105", "П105_13");
 		сДел1000.Вставить("L105", "П105_14");
 		сДел1000.Вставить("M105", "П105_15");
 		сДел1000.Вставить("N105", "П105_16");
 		сДел1000.Вставить("O105", "П105_17");
 		сДел1000.Вставить("P105", "П105_18");
 		сДел1000.Вставить("Q105", "П105_19");
 		сДел1000.Вставить("A11", "П110_3");
 		сДел1000.Вставить("B11", "П110_4");
 		сДел1000.Вставить("C11", "П110_5");
 		сДел1000.Вставить("D11", "П110_6");
 		сДел1000.Вставить("E11", "П110_7");
 		сДел1000.Вставить("F11", "П110_8");
 		сДел1000.Вставить("G11", "П110_9");
 		сДел1000.Вставить("H11", "П110_10");
 		сДел1000.Вставить("I11", "П110_11");
 		сДел1000.Вставить("J11", "П110_12");
 		сДел1000.Вставить("K11", "П110_13");
 		сДел1000.Вставить("L11", "П110_14");
 		сДел1000.Вставить("M11", "П110_15");
 		сДел1000.Вставить("N11", "П110_16");
 		сДел1000.Вставить("O11", "П110_17");
 		сДел1000.Вставить("P11", "П110_18");
 		сДел1000.Вставить("Q11", "П110_19");
 		сДел1000.Вставить("A12", "П120_3");
 		сДел1000.Вставить("B12", "П120_4");
 		сДел1000.Вставить("C12", "П120_5");
 		сДел1000.Вставить("D12", "П120_6");
 		сДел1000.Вставить("E12", "П120_7");
 		сДел1000.Вставить("F12", "П120_8");
 		сДел1000.Вставить("G12", "П120_9");
 		сДел1000.Вставить("H12", "П120_10");
 		сДел1000.Вставить("I12", "П120_11");
 		сДел1000.Вставить("J12", "П120_12");
 		сДел1000.Вставить("K12", "П120_13");
 		сДел1000.Вставить("L12", "П120_14");
 		сДел1000.Вставить("M12", "П120_15");
 		сДел1000.Вставить("N12", "П120_16");
 		сДел1000.Вставить("O12", "П120_17");
 		сДел1000.Вставить("P12", "П120_18");
 		сДел1000.Вставить("Q12", "П120_19");
 		сДел1000.Вставить("A13", "П130_3");
 		сДел1000.Вставить("B13", "П130_4");
 		сДел1000.Вставить("C13", "П130_5");
 		сДел1000.Вставить("D13", "П130_6");
 		сДел1000.Вставить("E13", "П130_7");
 		сДел1000.Вставить("F13", "П130_8");
 		сДел1000.Вставить("G13", "П130_9");
 		сДел1000.Вставить("H13", "П130_10");
 		сДел1000.Вставить("I13", "П130_11");
 		сДел1000.Вставить("J13", "П130_12");
 		сДел1000.Вставить("K13", "П130_13");
 		сДел1000.Вставить("L13", "П130_14");
 		сДел1000.Вставить("M13", "П130_15");
 		сДел1000.Вставить("N13", "П130_16");
 		сДел1000.Вставить("O13", "П130_17");
 		сДел1000.Вставить("P13", "П130_18");
 		сДел1000.Вставить("Q13", "П130_19");
 		сДел1000.Вставить("A14", "П140_3");
 		сДел1000.Вставить("B14", "П140_4");
 		сДел1000.Вставить("C14", "П140_5");
 		сДел1000.Вставить("D14", "П140_6");
 		сДел1000.Вставить("E14", "П140_7");
 		сДел1000.Вставить("F14", "П140_8");
 		сДел1000.Вставить("G14", "П140_9");
 		сДел1000.Вставить("H14", "П140_10");
 		сДел1000.Вставить("I14", "П140_11");
 		сДел1000.Вставить("J14", "П140_12");
 		сДел1000.Вставить("K14", "П140_13");
 		сДел1000.Вставить("L14", "П140_14");
 		сДел1000.Вставить("M14", "П140_15");
 		сДел1000.Вставить("N14", "П140_16");
 		сДел1000.Вставить("O14", "П140_17");
 		сДел1000.Вставить("P14", "П140_18");
 		сДел1000.Вставить("Q14", "П140_19");
 		сДел1000.Вставить("A15", "П150_3");
 		сДел1000.Вставить("B15", "П150_4");
 		сДел1000.Вставить("C15", "П150_5");
 		сДел1000.Вставить("D15", "П150_6");
 		сДел1000.Вставить("E15", "П150_7");
 		сДел1000.Вставить("F15", "П150_8");
 		сДел1000.Вставить("G15", "П150_9");
 		сДел1000.Вставить("H15", "П150_10");
 		сДел1000.Вставить("I15", "П150_11");
 		сДел1000.Вставить("J15", "П150_12");
 		сДел1000.Вставить("K15", "П150_13");
 		сДел1000.Вставить("L15", "П150_14");
 		сДел1000.Вставить("M15", "П150_15");
 		сДел1000.Вставить("N15", "П150_16");
 		сДел1000.Вставить("O15", "П150_17");
 		сДел1000.Вставить("P15", "П150_18");
 		сДел1000.Вставить("Q15", "П150_19");
 		сДел1000.Вставить("A16", "П160_3");
 		сДел1000.Вставить("B16", "П160_4");
 		сДел1000.Вставить("C16", "П160_5");
 		сДел1000.Вставить("D16", "П160_6");
 		сДел1000.Вставить("E16", "П160_7");
 		сДел1000.Вставить("F16", "П160_8");
 		сДел1000.Вставить("G16", "П160_9");
 		сДел1000.Вставить("H16", "П160_10");
 		сДел1000.Вставить("I16", "П160_11");
 		сДел1000.Вставить("J16", "П160_12");
 		сДел1000.Вставить("K16", "П160_13");
 		сДел1000.Вставить("L16", "П160_14");
 		сДел1000.Вставить("M16", "П160_15");
 		сДел1000.Вставить("N16", "П160_16");
 		сДел1000.Вставить("O16", "П160_17");
 		сДел1000.Вставить("P16", "П160_18");
 		сДел1000.Вставить("Q16", "П160_19");
 		сДел1000.Вставить("A17", "П170_3");
 		сДел1000.Вставить("B17", "П170_4");
 		сДел1000.Вставить("C17", "П170_5");
 		сДел1000.Вставить("D17", "П170_6");
 		сДел1000.Вставить("E17", "П170_7");
 		сДел1000.Вставить("F17", "П170_8");
 		сДел1000.Вставить("G17", "П170_9");
 		сДел1000.Вставить("H17", "П170_10");
 		сДел1000.Вставить("I17", "П170_11");
 		сДел1000.Вставить("J17", "П170_12");
 		сДел1000.Вставить("K17", "П170_13");
 		сДел1000.Вставить("L17", "П170_14");
 		сДел1000.Вставить("M17", "П170_15");
 		сДел1000.Вставить("N17", "П170_16");
 		сДел1000.Вставить("O17", "П170_17");
 		сДел1000.Вставить("P17", "П170_18");
 		сДел1000.Вставить("Q17", "П170_19");
 		сДел1000.Вставить("A18", "П180_3");
 		сДел1000.Вставить("B18", "П180_4");
 		сДел1000.Вставить("C18", "П180_5");
 		сДел1000.Вставить("D18", "П180_6");
 		сДел1000.Вставить("E18", "П180_7");
 		сДел1000.Вставить("F18", "П180_8");
 		сДел1000.Вставить("G18", "П180_9");
 		сДел1000.Вставить("H18", "П180_10");
 		сДел1000.Вставить("I18", "П180_11");
 		сДел1000.Вставить("J18", "П180_12");
 		сДел1000.Вставить("K18", "П180_13");
 		сДел1000.Вставить("L18", "П180_14");
 		сДел1000.Вставить("M18", "П180_15");
 		сДел1000.Вставить("N18", "П180_16");
 		сДел1000.Вставить("O18", "П180_17");
 		сДел1000.Вставить("P18", "П180_18");
 		сДел1000.Вставить("Q18", "П180_19");
 		сДел1000.Вставить("A19", "П190_3");
 		сДел1000.Вставить("B19", "П190_4");
 		сДел1000.Вставить("C19", "П190_5");
 		сДел1000.Вставить("D19", "П190_6");
 		сДел1000.Вставить("E19", "П190_7");
 		сДел1000.Вставить("F19", "П190_8");
 		сДел1000.Вставить("G19", "П190_9");
 		сДел1000.Вставить("H19", "П190_10");
 		сДел1000.Вставить("I19", "П190_11");
 		сДел1000.Вставить("J19", "П190_12");
 		сДел1000.Вставить("K19", "П190_13");
 		сДел1000.Вставить("L19", "П190_14");
 		сДел1000.Вставить("M19", "П190_15");
 		сДел1000.Вставить("N19", "П190_16");
 		сДел1000.Вставить("O19", "П190_17");
 		сДел1000.Вставить("P19", "П190_18");
 		сДел1000.Вставить("Q19", "П190_19");
 		сДел1000.Вставить("A20", "П200_3");
 		сДел1000.Вставить("B20", "П200_4");
 		сДел1000.Вставить("C20", "П200_5");
 		сДел1000.Вставить("D20", "П200_6");
 		сДел1000.Вставить("E20", "П200_7");
 		сДел1000.Вставить("F20", "П200_8");
 		сДел1000.Вставить("G20", "П200_9");
 		сДел1000.Вставить("H20", "П200_10");
 		сДел1000.Вставить("I20", "П200_11");
 		сДел1000.Вставить("J20", "П200_12");
 		сДел1000.Вставить("K20", "П200_13");
 		сДел1000.Вставить("L20", "П200_14");
 		сДел1000.Вставить("M20", "П200_15");
 		сДел1000.Вставить("N20", "П200_16");
 		сДел1000.Вставить("O20", "П200_17");
 		сДел1000.Вставить("P20", "П200_18");
 		сДел1000.Вставить("Q20", "П200_19");
 		сДел1000.Вставить("A21", "П210_3");
 		сДел1000.Вставить("B21", "П210_4");
 		сДел1000.Вставить("C21", "П210_5");
 		сДел1000.Вставить("D21", "П210_6");
 		сДел1000.Вставить("E21", "П210_7");
 		сДел1000.Вставить("F21", "П210_8");
 		сДел1000.Вставить("G21", "П210_9");
 		сДел1000.Вставить("H21", "П210_10");
 		сДел1000.Вставить("I21", "П210_11");
 		сДел1000.Вставить("J21", "П210_12");
 		сДел1000.Вставить("K21", "П210_13");
 		сДел1000.Вставить("L21", "П210_14");
 		сДел1000.Вставить("M21", "П210_15");
 		сДел1000.Вставить("N21", "П210_16");
 		сДел1000.Вставить("O21", "П210_17");
 		сДел1000.Вставить("P21", "П210_18");
 		сДел1000.Вставить("Q21", "П210_19");
 		сДел1000.Вставить("A22", "П220_3");
 		сДел1000.Вставить("B22", "П220_4");
 		сДел1000.Вставить("C22", "П220_5");
 		сДел1000.Вставить("D22", "П220_6");
 		сДел1000.Вставить("E22", "П220_7");
 		сДел1000.Вставить("F22", "П220_8");
 		сДел1000.Вставить("G22", "П220_9");
 		сДел1000.Вставить("H22", "П220_10");
 		сДел1000.Вставить("I22", "П220_11");
 		сДел1000.Вставить("J22", "П220_12");
 		сДел1000.Вставить("K22", "П220_13");
 		сДел1000.Вставить("L22", "П220_14");
 		сДел1000.Вставить("M22", "П220_15");
 		сДел1000.Вставить("N22", "П220_16");
 		сДел1000.Вставить("O22", "П220_17");
 		сДел1000.Вставить("P22", "П220_18");
 		сДел1000.Вставить("Q22", "П220_19");
 		сДел1000.Вставить("A23", "П230_3");
 		сДел1000.Вставить("B23", "П230_4");
 		сДел1000.Вставить("C23", "П230_5");
 		сДел1000.Вставить("D23", "П230_6");
 		сДел1000.Вставить("E23", "П230_7");
 		сДел1000.Вставить("F23", "П230_8");
 		сДел1000.Вставить("G23", "П230_9");
 		сДел1000.Вставить("H23", "П230_10");
 		сДел1000.Вставить("I23", "П230_11");
 		сДел1000.Вставить("J23", "П230_12");
 		сДел1000.Вставить("K23", "П230_13");
 		сДел1000.Вставить("L23", "П230_14");
 		сДел1000.Вставить("M23", "П230_15");
 		сДел1000.Вставить("N23", "П230_16");
 		сДел1000.Вставить("O23", "П230_17");
 		сДел1000.Вставить("P23", "П230_18");
 		сДел1000.Вставить("Q23", "П230_19");
 		сДел1000.Вставить("A24", "П240_3");
 		сДел1000.Вставить("B24", "П240_4");
 		сДел1000.Вставить("C24", "П240_5");
 		сДел1000.Вставить("D24", "П240_6");
 		сДел1000.Вставить("E24", "П240_7");
 		сДел1000.Вставить("F24", "П240_8");
 		сДел1000.Вставить("G24", "П240_9");
 		сДел1000.Вставить("H24", "П240_10");
 		сДел1000.Вставить("I24", "П240_11");
 		сДел1000.Вставить("J24", "П240_12");
 		сДел1000.Вставить("K24", "П240_13");
 		сДел1000.Вставить("L24", "П240_14");
 		сДел1000.Вставить("M24", "П240_15");
 		сДел1000.Вставить("N24", "П240_16");
 		сДел1000.Вставить("O24", "П240_17");
 		сДел1000.Вставить("P24", "П240_18");
 		сДел1000.Вставить("Q24", "П240_19");
 		сДел1000.Вставить("A25", "П250_3");
 		сДел1000.Вставить("B25", "П250_4");
 		сДел1000.Вставить("C25", "П250_5");
 		сДел1000.Вставить("D25", "П250_6");
 		сДел1000.Вставить("E25", "П250_7");
 		сДел1000.Вставить("F25", "П250_8");
 		сДел1000.Вставить("G25", "П250_9");
 		сДел1000.Вставить("H25", "П250_10");
 		сДел1000.Вставить("I25", "П250_11");
 		сДел1000.Вставить("J25", "П250_12");
 		сДел1000.Вставить("K25", "П250_13");
 		сДел1000.Вставить("L25", "П250_14");
 		сДел1000.Вставить("M25", "П250_15");
 		сДел1000.Вставить("N25", "П250_16");
 		сДел1000.Вставить("O25", "П250_17");
 		сДел1000.Вставить("P25", "П250_18");
 		сДел1000.Вставить("Q25", "П250_19");
 		сДел1000.Вставить("A26", "П260_3");
 		сДел1000.Вставить("B26", "П260_4");
 		сДел1000.Вставить("C26", "П260_5");
 		сДел1000.Вставить("D26", "П260_6");
 		сДел1000.Вставить("E26", "П260_7");
 		сДел1000.Вставить("F26", "П260_8");
 		сДел1000.Вставить("G26", "П260_9");
 		сДел1000.Вставить("H26", "П260_10");
 		сДел1000.Вставить("I26", "П260_11");
 		сДел1000.Вставить("J26", "П260_12");
 		сДел1000.Вставить("K26", "П260_13");
 		сДел1000.Вставить("L26", "П260_14");
 		сДел1000.Вставить("M26", "П260_15");
 		сДел1000.Вставить("N26", "П260_16");
 		сДел1000.Вставить("O26", "П260_17");
 		сДел1000.Вставить("P26", "П260_18");
 		сДел1000.Вставить("Q26", "П260_19");
 		сДел1000.Вставить("N6", "П261");
 		сДел1000.Вставить("N7", "П262");
 		сДел1000.Вставить("N8", "П263");
 		сДел1000.Вставить("N9", "П264");
 		сДел1000.Вставить("N123", "П2641");
 		сДел1000.Вставить("N101", "П265");
 		сДел1000.Вставить("N124", "П2651");
 		сДел1000.Вставить("N111", "П266");
 		сДел1000.Вставить("N121", "П267");
 		сДел1000.Вставить("N122", "П268");
 		сДел1000.Вставить("N125", "П269");
		
		ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРазделIII_IV;
		сДел1000 = Новый Структура;
		
 		сДел1000.Вставить("A28", "П280_3");
 		сДел1000.Вставить("A29", "П290_3");
 		сДел1000.Вставить("A30", "П300_3");
 		сДел1000.Вставить("A31", "П310_3");
 		сДел1000.Вставить("A32", "П320_3");
 		сДел1000.Вставить("A33", "П330_3");
 		сДел1000.Вставить("A34", "П340_3");
 		сДел1000.Вставить("B28", "П280_4");
 		сДел1000.Вставить("B29", "П290_4");
 		сДел1000.Вставить("B30", "П300_4");
 		сДел1000.Вставить("B31", "П310_4");
 		сДел1000.Вставить("B32", "П320_4");
 		сДел1000.Вставить("B33", "П330_4");
 		сДел1000.Вставить("B34", "П340_4");
 		сДел1000.Вставить("N341", "П341");
 		сДел1000.Вставить("N342", "П342");
 		сДел1000.Вставить("A35", "П350_3");
 		сДел1000.Вставить("A36", "П360_3");
 		сДел1000.Вставить("A37", "П370_3");
 		сДел1000.Вставить("A38", "П380_3");
 		сДел1000.Вставить("A39", "П390_3");
 		сДел1000.Вставить("A40", "П400_3");
 		сДел1000.Вставить("A41", "П410_3");
 		сДел1000.Вставить("A42", "П420_3");
 		сДел1000.Вставить("B35", "П350_4");
 		сДел1000.Вставить("B36", "П360_4");
 		сДел1000.Вставить("B37", "П370_4");
 		сДел1000.Вставить("B38", "П380_4");
 		сДел1000.Вставить("B39", "П390_4");
 		сДел1000.Вставить("B40", "П400_4");
 		сДел1000.Вставить("B41", "П410_4");
 		сДел1000.Вставить("B42", "П420_4");
 		сДел1000.Вставить("C35", "П350_5");
 		сДел1000.Вставить("C36", "П360_5");
 		сДел1000.Вставить("C37", "П370_5");
 		сДел1000.Вставить("C38", "П380_5");
 		сДел1000.Вставить("C39", "П390_5");
 		сДел1000.Вставить("C40", "П400_5");
 		сДел1000.Вставить("C41", "П410_5");
 		сДел1000.Вставить("C42", "П420_5");
 		сДел1000.Вставить("N131", "П421");
 		сДел1000.Вставить("N141", "П422");
 		сДел1000.Вставить("N151", "П423");
 		сДел1000.Вставить("N161", "П424");
 		сДел1000.Вставить("N171", "П425");
 		сДел1000.Вставить("N181", "П426");
		
		ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРазделV_VI;
		сДел1000 = Новый Структура;
		
 		сДел1000.Вставить("A44", "П440_3");
 		сДел1000.Вставить("A45", "П450_3");
 		сДел1000.Вставить("A46", "П460_3");
 		сДел1000.Вставить("A47", "П470_3");
 		сДел1000.Вставить("A48", "П480_3");
 		сДел1000.Вставить("A49", "П490_3");
 		сДел1000.Вставить("A50", "П500_3");
 		сДел1000.Вставить("A51", "П510_3");
 		сДел1000.Вставить("A52", "П520_3");
 		сДел1000.Вставить("A53", "П530_3");
 		сДел1000.Вставить("A55", "П550_3");
 		сДел1000.Вставить("A56", "П560_3");
 		сДел1000.Вставить("A57", "П570_3");
 		сДел1000.Вставить("A58", "П580_3");
 		сДел1000.Вставить("A59", "П590_3");
 		сДел1000.Вставить("A60", "П600_3");
 		сДел1000.Вставить("A61", "П610_3");
 		сДел1000.Вставить("A63", "П630_3");
 		сДел1000.Вставить("B44", "П440_4");
 		сДел1000.Вставить("B45", "П450_4");
 		сДел1000.Вставить("B46", "П460_4");
 		сДел1000.Вставить("B47", "П470_4");
 		сДел1000.Вставить("B48", "П480_4");
 		сДел1000.Вставить("B49", "П490_4");
 		сДел1000.Вставить("B491", "П491_4");
 		сДел1000.Вставить("B492", "П492_4");
 		сДел1000.Вставить("B50", "П500_4");
 		сДел1000.Вставить("B51", "П510_4");
 		сДел1000.Вставить("B52", "П520_4");
 		сДел1000.Вставить("B54", "П540_4");
 		сДел1000.Вставить("B55", "П550_4");
 		сДел1000.Вставить("B56", "П560_4");
 		сДел1000.Вставить("B57", "П570_4");
 		сДел1000.Вставить("B58", "П580_4");
 		сДел1000.Вставить("B59", "П590_4");
 		сДел1000.Вставить("B60", "П600_4");
 		сДел1000.Вставить("B62", "П620_4");
 		сДел1000.Вставить("B63", "П630_4");
 		сДел1000.Вставить("N191", "П631");
 		сДел1000.Вставить("N201", "П632");
 		сДел1000.Вставить("N633", "П633");
 		сДел1000.Вставить("A64", "П640_3");
 		сДел1000.Вставить("A65", "П650_3");
 		сДел1000.Вставить("A66", "П660_3");
 		сДел1000.Вставить("A67", "П670_3");
 		сДел1000.Вставить("A68", "П680_3");
 		сДел1000.Вставить("A69", "П690_3");
 		сДел1000.Вставить("N211", "П691");
		
		ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРазделVII_VIII;
		сДел1000 = Новый Структура;	
		
 		сДел1000.Вставить("A71", "П710_3");
 		сДел1000.Вставить("B71", "П710_4");
 		сДел1000.Вставить("C71", "П710_5");
 		сДел1000.Вставить("D71", "П710_6");
 		сДел1000.Вставить("E71", "П710_7");
 		сДел1000.Вставить("F71", "П710_8");
 		сДел1000.Вставить("G71", "П710_9");
 		сДел1000.Вставить("A72", "П720_3");
 		сДел1000.Вставить("B72", "П720_4");
 		сДел1000.Вставить("C72", "П720_5");
 		сДел1000.Вставить("D72", "П720_6");
 		сДел1000.Вставить("E72", "П720_7");
 		сДел1000.Вставить("F72", "П720_8");
 		сДел1000.Вставить("G72", "П720_9");
 		сДел1000.Вставить("A73", "П730_3");
 		сДел1000.Вставить("B73", "П730_4");
 		сДел1000.Вставить("C73", "П730_5");
 		сДел1000.Вставить("D73", "П730_6");
 		сДел1000.Вставить("E73", "П730_7");
 		сДел1000.Вставить("F73", "П730_8");
 		сДел1000.Вставить("G73", "П730_9");
 		сДел1000.Вставить("A74", "П740_3");
 		сДел1000.Вставить("B74", "П740_4");
 		сДел1000.Вставить("C74", "П740_5");
 		сДел1000.Вставить("D74", "П740_6");
 		сДел1000.Вставить("E74", "П740_7");
 		сДел1000.Вставить("F74", "П740_8");
 		сДел1000.Вставить("G74", "П740_9");
 		сДел1000.Вставить("A75", "П750_3");
 		сДел1000.Вставить("B75", "П750_4");
 		сДел1000.Вставить("C75", "П750_5");
 		сДел1000.Вставить("D75", "П750_6");
 		сДел1000.Вставить("E75", "П750_7");
 		сДел1000.Вставить("F75", "П750_8");
 		сДел1000.Вставить("G75", "П750_9");
 		сДел1000.Вставить("ST_1", "Стр760");
 		сДел1000.Вставить("A76", "П760_3");
 		сДел1000.Вставить("B76", "П760_4");
 		сДел1000.Вставить("C76", "П760_5");
 		сДел1000.Вставить("D76", "П760_6");
 		сДел1000.Вставить("E76", "П760_7");
 		сДел1000.Вставить("F76", "П760_8");
 		сДел1000.Вставить("G76", "П760_9");
 		сДел1000.Вставить("ST_2", "Стр770");
 		сДел1000.Вставить("A77", "П770_3");
 		сДел1000.Вставить("B77", "П770_4");
 		сДел1000.Вставить("C77", "П770_5");
 		сДел1000.Вставить("D77", "П770_6");
 		сДел1000.Вставить("E77", "П770_7");
 		сДел1000.Вставить("F77", "П770_8");
 		сДел1000.Вставить("G77", "П770_9");
 		сДел1000.Вставить("A775", "П775_3");
 		сДел1000.Вставить("B775", "П775_4");
 		сДел1000.Вставить("C775", "П775_5");
 		сДел1000.Вставить("D775", "П775_6");
 		сДел1000.Вставить("E775", "П775_7");
 		сДел1000.Вставить("F775", "П775_8");
 		сДел1000.Вставить("G775", "П775_9");
 		сДел1000.Вставить("A78", "П780_3");
 		сДел1000.Вставить("B78", "П780_4");
 		сДел1000.Вставить("C78", "П780_5");
 		сДел1000.Вставить("D78", "П780_6");
 		сДел1000.Вставить("E78", "П780_7");
 		сДел1000.Вставить("F78", "П780_8");
 		сДел1000.Вставить("G78", "П780_9");
 		сДел1000.Вставить("A80", "П800_3");
 		сДел1000.Вставить("A81", "П810_3");
 		сДел1000.Вставить("A82", "П820_3");
 		сДел1000.Вставить("A83", "П830_3");
 		сДел1000.Вставить("A84", "П840_3");
 		сДел1000.Вставить("A85", "П850_3");
 		сДел1000.Вставить("A86", "П860_3");
 		сДел1000.Вставить("A87", "П870_3");
 		сДел1000.Вставить("A88", "П880_3");
 		сДел1000.Вставить("A89", "П890_3");
 		сДел1000.Вставить("A90", "П900_3");
 		сДел1000.Вставить("A91", "П910_3");
 		сДел1000.Вставить("A92", "П920_3");
 		сДел1000.Вставить("B80", "П800_4");
 		сДел1000.Вставить("B81", "П810_4");
 		сДел1000.Вставить("B82", "П820_4");
 		сДел1000.Вставить("B83", "П830_4");
 		сДел1000.Вставить("B84", "П840_4");
 		сДел1000.Вставить("B85", "П850_4");
 		сДел1000.Вставить("B86", "П860_4");
 		сДел1000.Вставить("B87", "П870_4");
 		сДел1000.Вставить("B88", "П880_4");
 		сДел1000.Вставить("B89", "П890_4");
 		сДел1000.Вставить("B90", "П900_4");
 		сДел1000.Вставить("B91", "П910_4");
 		сДел1000.Вставить("B92", "П920_4");
 		сДел1000.Вставить("C80", "П800_5");
 		сДел1000.Вставить("C81", "П810_5");
 		сДел1000.Вставить("C82", "П820_5");
 		сДел1000.Вставить("C83", "П830_5");
 		сДел1000.Вставить("C84", "П840_5");
 		сДел1000.Вставить("C85", "П850_5");
 		сДел1000.Вставить("C86", "П860_5");
 		сДел1000.Вставить("C87", "П870_5");
 		сДел1000.Вставить("C88", "П880_5");
 		сДел1000.Вставить("C89", "П890_5");
 		сДел1000.Вставить("C90", "П900_5");
 		сДел1000.Вставить("C91", "П910_5");
 		сДел1000.Вставить("C92", "П920_5");
 		сДел1000.Вставить("N221", "П921");
 		сДел1000.Вставить("N231", "П922");
 		сДел1000.Вставить("N241", "П923");
 		сДел1000.Вставить("N251", "П924");
 		сДел1000.Вставить("N261", "П925");
 		сДел1000.Вставить("N926", "П926");
		
		ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРазделIX_XII;
		сДел1000 = Новый Структура;		
		
 		сДел1000.Вставить("A94", "П940_3");
 		сДел1000.Вставить("A95", "П950_3");
 		сДел1000.Вставить("B94", "П940_4");
 		сДел1000.Вставить("B95", "П950_4");
 		сДел1000.Вставить("C94", "П940_5");
 		сДел1000.Вставить("C95", "П950_5");
 		сДел1000.Вставить("D94", "П940_6");
 		сДел1000.Вставить("D95", "П950_6");
 		сДел1000.Вставить("N27", "П951");
 		сДел1000.Вставить("N952", "П952");
 		сДел1000.Вставить("A96", "П960_3");
 		сДел1000.Вставить("A97", "П970_3");
 		сДел1000.Вставить("A98", "П980_3");
 		сДел1000.Вставить("A111", "П1110_3");
 		сДел1000.Вставить("A112", "П1120_3");
 		сДел1000.Вставить("A113", "П1130_3");
 		сДел1000.Вставить("A114", "П1140_3");
 		сДел1000.Вставить("A115", "П1150_3");
 		сДел1000.Вставить("A116", "П1160_3");
 		сДел1000.Вставить("A1210", "П1210_3");
 		сДел1000.Вставить("A1220", "П1220_3");
 		сДел1000.Вставить("A1225", "П1225_3");
 		сДел1000.Вставить("A1230", "П1230_3");
 		сДел1000.Вставить("A1235", "П1235_3");
 		сДел1000.Вставить("A1240", "П1240_3");
 		сДел1000.Вставить("A1241", "П1241_3");
 		сДел1000.Вставить("A1242", "П1242_3");
 		сДел1000.Вставить("A1243", "П1243_3");
 		сДел1000.Вставить("A1250", "П1250_3");
 		сДел1000.Вставить("A1251", "П1251_3");
 		сДел1000.Вставить("A1252", "П1252_3");
 		сДел1000.Вставить("A1253", "П1253_3");
		
		ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРазделXIII;
		сДел1000 = Новый Структура;
		
 		сДел1000.Вставить("A1300", "П1300_3");
 		сДел1000.Вставить("A1310", "П1310_3");
 		сДел1000.Вставить("A1311", "П1311_3");
 		сДел1000.Вставить("A1312", "П1312_3");
 		сДел1000.Вставить("A1313", "П1313_3");
 		сДел1000.Вставить("A1314", "П1314_3");
 		сДел1000.Вставить("A1315", "П1315_3");
 		сДел1000.Вставить("A1316", "П1316_3");
 		сДел1000.Вставить("A1317", "П1317_3");
 		сДел1000.Вставить("A1316_1", "Стр1316");
 		сДел1000.Вставить("A1317_1", "Стр1317");
		
		ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРазделXIV;
		сДел1000 = Новый Структура;	
		
 		сДел1000.Вставить("A1410_3", "П1410_3");
 		сДел1000.Вставить("A1410_4", "П1410_4");
 		сДел1000.Вставить("A1410_5", "П1410_5");
 		сДел1000.Вставить("A1410_6", "П1410_6");
 		сДел1000.Вставить("A1410_7", "П1410_7");
 		сДел1000.Вставить("A1410_8", "П1410_8");
 		сДел1000.Вставить("A1410_9", "П1410_9");
 		сДел1000.Вставить("A1410_10", "П1410_10");
 		сДел1000.Вставить("A1410_11", "П1410_11");
 		сДел1000.Вставить("A1410_12", "П1410_12");
 		сДел1000.Вставить("A1410_13", "П1410_13");
 		сДел1000.Вставить("A1410_14", "П1410_14");
 		сДел1000.Вставить("A1410_15", "П1410_15");
 		сДел1000.Вставить("A1410_16", "П1410_16");
 		сДел1000.Вставить("A1410_17", "П1410_17");
 		сДел1000.Вставить("A1411_3", "П1411_3");
 		сДел1000.Вставить("A1411_4", "П1411_4");
 		сДел1000.Вставить("A1411_5", "П1411_5");
 		сДел1000.Вставить("A1411_6", "П1411_6");
 		сДел1000.Вставить("A1411_7", "П1411_7");
 		сДел1000.Вставить("A1411_8", "П1411_8");
 		сДел1000.Вставить("A1411_9", "П1411_9");
 		сДел1000.Вставить("A1411_10", "П1411_10");
 		сДел1000.Вставить("A1411_11", "П1411_11");
 		сДел1000.Вставить("A1411_12", "П1411_12");
 		сДел1000.Вставить("A1411_13", "П1411_13");
 		сДел1000.Вставить("A1411_14", "П1411_14");
 		сДел1000.Вставить("A1411_15", "П1411_15");
 		сДел1000.Вставить("A1411_16", "П1411_16");
 		сДел1000.Вставить("A1411_17", "П1411_17");
 		сДел1000.Вставить("A1412_3", "П1412_3");
 		сДел1000.Вставить("A1412_4", "П1412_4");
 		сДел1000.Вставить("A1412_5", "П1412_5");
 		сДел1000.Вставить("A1412_6", "П1412_6");
 		сДел1000.Вставить("A1412_7", "П1412_7");
 		сДел1000.Вставить("A1412_8", "П1412_8");
 		сДел1000.Вставить("A1412_9", "П1412_9");
 		сДел1000.Вставить("A1412_10", "П1412_10");
 		сДел1000.Вставить("A1412_11", "П1412_11");
 		сДел1000.Вставить("A1412_12", "П1412_12");
 		сДел1000.Вставить("A1412_13", "П1412_13");
 		сДел1000.Вставить("A1412_14", "П1412_14");
 		сДел1000.Вставить("A1412_15", "П1412_15");
 		сДел1000.Вставить("A1412_16", "П1412_16");
 		сДел1000.Вставить("A1412_17", "П1412_17");
 		сДел1000.Вставить("A1413_3", "П1413_3");
 		сДел1000.Вставить("A1413_4", "П1413_4");
 		сДел1000.Вставить("A1413_5", "П1413_5");
 		сДел1000.Вставить("A1413_6", "П1413_6");
 		сДел1000.Вставить("A1413_7", "П1413_7");
 		сДел1000.Вставить("A1413_8", "П1413_8");
 		сДел1000.Вставить("A1413_9", "П1413_9");
 		сДел1000.Вставить("A1413_10", "П1413_10");
 		сДел1000.Вставить("A1413_11", "П1413_11");
 		сДел1000.Вставить("A1413_12", "П1413_12");
 		сДел1000.Вставить("A1413_13", "П1413_13");
 		сДел1000.Вставить("A1413_14", "П1413_14");
 		сДел1000.Вставить("A1413_15", "П1413_15");
 		сДел1000.Вставить("A1413_16", "П1413_16");
 		сДел1000.Вставить("A1413_17", "П1413_17");
 		сДел1000.Вставить("A1414_1", "Стр1414");
 		сДел1000.Вставить("A1414_3", "П1414_3");
 		сДел1000.Вставить("A1414_4", "П1414_4");
 		сДел1000.Вставить("A1414_5", "П1414_5");
 		сДел1000.Вставить("A1414_6", "П1414_6");
 		сДел1000.Вставить("A1414_7", "П1414_7");
 		сДел1000.Вставить("A1414_8", "П1414_8");
 		сДел1000.Вставить("A1414_9", "П1414_9");
 		сДел1000.Вставить("A1414_10", "П1414_10");
 		сДел1000.Вставить("A1414_11", "П1414_11");
 		сДел1000.Вставить("A1414_12", "П1414_12");
 		сДел1000.Вставить("A1414_13", "П1414_13");
 		сДел1000.Вставить("A1414_14", "П1414_14");
 		сДел1000.Вставить("A1414_15", "П1414_15");
 		сДел1000.Вставить("A1414_16", "П1414_16");
 		сДел1000.Вставить("A1414_17", "П1414_17");
 		сДел1000.Вставить("A1415_3", "П1415_3");
 		сДел1000.Вставить("A1415_4", "П1415_4");
 		сДел1000.Вставить("A1415_5", "П1415_5");
 		сДел1000.Вставить("A1415_6", "П1415_6");
 		сДел1000.Вставить("A1415_7", "П1415_7");
 		сДел1000.Вставить("A1415_8", "П1415_8");
 		сДел1000.Вставить("A1415_9", "П1415_9");
 		сДел1000.Вставить("A1415_10", "П1415_10");
 		сДел1000.Вставить("A1415_11", "П1415_11");
 		сДел1000.Вставить("A1415_12", "П1415_12");
 		сДел1000.Вставить("A1415_13", "П1415_13");
 		сДел1000.Вставить("A1415_14", "П1415_14");
 		сДел1000.Вставить("A1415_15", "П1415_15");
 		сДел1000.Вставить("A1415_16", "П1415_16");
 		сДел1000.Вставить("A1415_17", "П1415_17");
 		сДел1000.Вставить("A1420_3", "П1420_3");
 		сДел1000.Вставить("A1420_5", "П1420_5");
 		сДел1000.Вставить("A1420_6", "П1420_6");
 		сДел1000.Вставить("A1420_9", "П1420_9");
 		сДел1000.Вставить("A1420_10", "П1420_10");
 		сДел1000.Вставить("A1420_11", "П1420_11");
 		сДел1000.Вставить("A1420_13", "П1420_13");
 		сДел1000.Вставить("A1420_14", "П1420_14");
 		сДел1000.Вставить("A1420_15", "П1420_15");
 		сДел1000.Вставить("A1420_16", "П1420_16");
 		сДел1000.Вставить("A1420_17", "П1420_17");
 		сДел1000.Вставить("A1421_3", "П1421_3");
 		сДел1000.Вставить("A1421_5", "П1421_5");
 		сДел1000.Вставить("A1421_6", "П1421_6");
 		сДел1000.Вставить("A1421_9", "П1421_9");
 		сДел1000.Вставить("A1421_10", "П1421_10");
 		сДел1000.Вставить("A1421_11", "П1421_11");
 		сДел1000.Вставить("A1421_13", "П1421_13");
 		сДел1000.Вставить("A1421_14", "П1421_14");
 		сДел1000.Вставить("A1421_15", "П1421_15");
 		сДел1000.Вставить("A1421_16", "П1421_16");
 		сДел1000.Вставить("A1421_17", "П1421_17");
 		сДел1000.Вставить("A1422_3", "П1422_3");
 		сДел1000.Вставить("A1422_5", "П1422_5");
 		сДел1000.Вставить("A1422_6", "П1422_6");
 		сДел1000.Вставить("A1422_9", "П1422_9");
 		сДел1000.Вставить("A1422_10", "П1422_10");
 		сДел1000.Вставить("A1422_11", "П1422_11");
 		сДел1000.Вставить("A1422_13", "П1422_13");
 		сДел1000.Вставить("A1422_14", "П1422_14");
 		сДел1000.Вставить("A1422_15", "П1422_15");
 		сДел1000.Вставить("A1422_16", "П1422_16");
 		сДел1000.Вставить("A1422_17", "П1422_17");
 		сДел1000.Вставить("A1423_1", "Стр1423");
 		сДел1000.Вставить("A1423_3", "П1423_3");
 		сДел1000.Вставить("A1423_5", "П1423_5");
 		сДел1000.Вставить("A1423_6", "П1423_6");
 		сДел1000.Вставить("A1423_9", "П1423_9");
 		сДел1000.Вставить("A1423_10", "П1423_10");
 		сДел1000.Вставить("A1423_11", "П1423_11");
 		сДел1000.Вставить("A1423_13", "П1423_13");
 		сДел1000.Вставить("A1423_14", "П1423_14");
 		сДел1000.Вставить("A1423_15", "П1423_15");
 		сДел1000.Вставить("A1423_16", "П1423_16");
 		сДел1000.Вставить("A1423_17", "П1423_17");
 		сДел1000.Вставить("A1424_3", "П1424_3");
 		сДел1000.Вставить("A1424_5", "П1424_5");
 		сДел1000.Вставить("A1424_6", "П1424_6");
 		сДел1000.Вставить("A1424_9", "П1424_9");
 		сДел1000.Вставить("A1424_10", "П1424_10");
 		сДел1000.Вставить("A1424_11", "П1424_11");
 		сДел1000.Вставить("A1424_13", "П1424_13");
 		сДел1000.Вставить("A1424_14", "П1424_14");
 		сДел1000.Вставить("A1424_15", "П1424_15");
 		сДел1000.Вставить("A1424_16", "П1424_16");
 		сДел1000.Вставить("A1424_17", "П1424_17");
 		сДел1000.Вставить("A1430_3", "П1430_3");
 		сДел1000.Вставить("A1430_4", "П1430_4");
 		сДел1000.Вставить("A1430_5", "П1430_5");
 		сДел1000.Вставить("A1430_6", "П1430_6");
 		сДел1000.Вставить("A1430_7", "П1430_7");
 		сДел1000.Вставить("A1430_8", "П1430_8");
 		сДел1000.Вставить("A1430_9", "П1430_9");
 		сДел1000.Вставить("A1430_10", "П1430_10");
 		сДел1000.Вставить("A1430_11", "П1430_11");
 		сДел1000.Вставить("A1430_12", "П1430_12");
 		сДел1000.Вставить("A1430_13", "П1430_13");
 		сДел1000.Вставить("A1430_14", "П1430_14");
 		сДел1000.Вставить("A1430_15", "П1430_15");
 		сДел1000.Вставить("A1430_16", "П1430_16");
 		сДел1000.Вставить("A1430_17", "П1430_17");
 		сДел1000.Вставить("N1431", "П1431");
 		сДел1000.Вставить("N1432", "П1432");
 		сДел1000.Вставить("N1433", "П1433");
		
		ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРазделXV;
		сДел1000 = Новый Структура;		
		
 		сДел1000.Вставить("A1500_3", "П1500_3");
 		сДел1000.Вставить("A1500_4", "П1500_4");
 		сДел1000.Вставить("A1500_5", "П1500_5");
 		сДел1000.Вставить("A1500_6", "П1500_6");
 		сДел1000.Вставить("A1500_7", "П1500_7");
 		сДел1000.Вставить("A1500_8", "П1500_8");
 		сДел1000.Вставить("A1500_9", "П1500_9");
 		сДел1000.Вставить("A1500_10", "П1500_10");
 		сДел1000.Вставить("A1500_11", "П1500_11");
 		сДел1000.Вставить("A1510_3", "П1510_3");
 		сДел1000.Вставить("A1510_4", "П1510_4");
 		сДел1000.Вставить("A1510_5", "П1510_5");
 		сДел1000.Вставить("A1510_6", "П1510_6");
 		сДел1000.Вставить("A1510_7", "П1510_7");
 		сДел1000.Вставить("A1510_8", "П1510_8");
 		сДел1000.Вставить("A1510_9", "П1510_9");
 		сДел1000.Вставить("A1510_10", "П1510_10");
 		сДел1000.Вставить("A1510_11", "П1510_11");
 		сДел1000.Вставить("A1511_3", "П1511_3");
 		сДел1000.Вставить("A1511_4", "П1511_4");
 		сДел1000.Вставить("A1511_5", "П1511_5");
 		сДел1000.Вставить("A1511_6", "П1511_6");
 		сДел1000.Вставить("A1511_7", "П1511_7");
 		сДел1000.Вставить("A1511_8", "П1511_8");
 		сДел1000.Вставить("A1511_9", "П1511_9");
 		сДел1000.Вставить("A1511_10", "П1511_10");
 		сДел1000.Вставить("A1511_11", "П1511_11");
 		сДел1000.Вставить("A1512_3", "П1512_3");
 		сДел1000.Вставить("A1512_4", "П1512_4");
 		сДел1000.Вставить("A1512_5", "П1512_5");
 		сДел1000.Вставить("A1512_6", "П1512_6");
 		сДел1000.Вставить("A1512_7", "П1512_7");
 		сДел1000.Вставить("A1512_8", "П1512_8");
 		сДел1000.Вставить("A1512_9", "П1512_9");
 		сДел1000.Вставить("A1512_10", "П1512_10");
 		сДел1000.Вставить("A1512_11", "П1512_11");
 		сДел1000.Вставить("A1513_3", "П1513_3");
 		сДел1000.Вставить("A1513_4", "П1513_4");
 		сДел1000.Вставить("A1513_5", "П1513_5");
 		сДел1000.Вставить("A1513_6", "П1513_6");
 		сДел1000.Вставить("A1513_7", "П1513_7");
 		сДел1000.Вставить("A1513_8", "П1513_8");
 		сДел1000.Вставить("A1513_9", "П1513_9");
 		сДел1000.Вставить("A1513_10", "П1513_10");
 		сДел1000.Вставить("A1513_11", "П1513_11");
 		сДел1000.Вставить("A1514_3", "П1514_3");
 		сДел1000.Вставить("A1514_4", "П1514_4");
 		сДел1000.Вставить("A1514_5", "П1514_5");
 		сДел1000.Вставить("A1514_6", "П1514_6");
 		сДел1000.Вставить("A1514_7", "П1514_7");
 		сДел1000.Вставить("A1514_8", "П1514_8");
 		сДел1000.Вставить("A1514_9", "П1514_9");
 		сДел1000.Вставить("A1514_10", "П1514_10");
 		сДел1000.Вставить("A1514_11", "П1514_11");
 		сДел1000.Вставить("A1515_3", "П1515_3");
 		сДел1000.Вставить("A1515_4", "П1515_4");
 		сДел1000.Вставить("A1515_5", "П1515_5");
 		сДел1000.Вставить("A1515_6", "П1515_6");
 		сДел1000.Вставить("A1515_7", "П1515_7");
 		сДел1000.Вставить("A1515_8", "П1515_8");
 		сДел1000.Вставить("A1515_9", "П1515_9");
 		сДел1000.Вставить("A1515_10", "П1515_10");
 		сДел1000.Вставить("A1515_11", "П1515_11");
 		сДел1000.Вставить("A1516_3", "П1516_3");
 		сДел1000.Вставить("A1516_4", "П1516_4");
 		сДел1000.Вставить("A1516_5", "П1516_5");
 		сДел1000.Вставить("A1516_6", "П1516_6");
 		сДел1000.Вставить("A1516_7", "П1516_7");
 		сДел1000.Вставить("A1516_8", "П1516_8");
 		сДел1000.Вставить("A1516_9", "П1516_9");
 		сДел1000.Вставить("A1516_10", "П1516_10");
 		сДел1000.Вставить("A1516_11", "П1516_11");
 		сДел1000.Вставить("A1517_3", "П1517_3");
 		сДел1000.Вставить("A1517_4", "П1517_4");
 		сДел1000.Вставить("A1517_5", "П1517_5");
 		сДел1000.Вставить("A1517_6", "П1517_6");
 		сДел1000.Вставить("A1517_7", "П1517_7");
 		сДел1000.Вставить("A1517_8", "П1517_8");
 		сДел1000.Вставить("A1517_9", "П1517_9");
 		сДел1000.Вставить("A1517_10", "П1517_10");
 		сДел1000.Вставить("A1517_11", "П1517_11");
 		сДел1000.Вставить("A1518_3", "П1518_3");
 		сДел1000.Вставить("A1518_4", "П1518_4");
 		сДел1000.Вставить("A1518_5", "П1518_5");
 		сДел1000.Вставить("A1518_6", "П1518_6");
 		сДел1000.Вставить("A1518_7", "П1518_7");
 		сДел1000.Вставить("A1518_8", "П1518_8");
 		сДел1000.Вставить("A1518_9", "П1518_9");
 		сДел1000.Вставить("A1518_10", "П1518_10");
 		сДел1000.Вставить("A1518_11", "П1518_11");
 		сДел1000.Вставить("A1519_3", "П1519_3");
 		сДел1000.Вставить("A1519_4", "П1519_4");
 		сДел1000.Вставить("A1519_5", "П1519_5");
 		сДел1000.Вставить("A1519_6", "П1519_6");
 		сДел1000.Вставить("A1519_7", "П1519_7");
 		сДел1000.Вставить("A1519_8", "П1519_8");
 		сДел1000.Вставить("A1519_9", "П1519_9");
 		сДел1000.Вставить("A1519_10", "П1519_10");
 		сДел1000.Вставить("A1519_11", "П1519_11");
 		сДел1000.Вставить("A1520_3", "П1520_3");
 		сДел1000.Вставить("A1520_4", "П1520_4");
 		сДел1000.Вставить("A1520_5", "П1520_5");
 		сДел1000.Вставить("A1520_6", "П1520_6");
 		сДел1000.Вставить("A1520_7", "П1520_7");
 		сДел1000.Вставить("A1520_8", "П1520_8");
 		сДел1000.Вставить("A1520_9", "П1520_9");
 		сДел1000.Вставить("A1520_10", "П1520_10");
 		сДел1000.Вставить("A1520_11", "П1520_11");
 		сДел1000.Вставить("A1530_3", "П1530_3");
 		сДел1000.Вставить("A1530_4", "П1530_4");
 		сДел1000.Вставить("A1530_5", "П1530_5");
 		сДел1000.Вставить("A1530_6", "П1530_6");
 		сДел1000.Вставить("A1530_7", "П1530_7");
 		сДел1000.Вставить("A1530_8", "П1530_8");
 		сДел1000.Вставить("A1530_9", "П1530_9");
 		сДел1000.Вставить("A1530_10", "П1530_10");
 		сДел1000.Вставить("A1530_11", "П1530_11");
 		сДел1000.Вставить("A1531_3", "П1531_3");
 		сДел1000.Вставить("A1531_4", "П1531_4");
 		сДел1000.Вставить("A1531_5", "П1531_5");
 		сДел1000.Вставить("A1531_6", "П1531_6");
 		сДел1000.Вставить("A1531_7", "П1531_7");
 		сДел1000.Вставить("A1531_8", "П1531_8");
 		сДел1000.Вставить("A1531_9", "П1531_9");
 		сДел1000.Вставить("A1531_10", "П1531_10");
 		сДел1000.Вставить("A1531_11", "П1531_11");
 		сДел1000.Вставить("A1532_3", "П1532_3");
 		сДел1000.Вставить("A1532_4", "П1532_4");
 		сДел1000.Вставить("A1532_5", "П1532_5");
 		сДел1000.Вставить("A1532_6", "П1532_6");
 		сДел1000.Вставить("A1532_7", "П1532_7");
 		сДел1000.Вставить("A1532_8", "П1532_8");
 		сДел1000.Вставить("A1532_9", "П1532_9");
 		сДел1000.Вставить("A1532_10", "П1532_10");
 		сДел1000.Вставить("A1532_11", "П1532_11");
 		сДел1000.Вставить("A1533_3", "П1533_3");
 		сДел1000.Вставить("A1533_4", "П1533_4");
 		сДел1000.Вставить("A1533_5", "П1533_5");
 		сДел1000.Вставить("A1533_6", "П1533_6");
 		сДел1000.Вставить("A1533_7", "П1533_7");
 		сДел1000.Вставить("A1533_8", "П1533_8");
 		сДел1000.Вставить("A1533_9", "П1533_9");
 		сДел1000.Вставить("A1533_10", "П1533_10");
 		сДел1000.Вставить("A1533_11", "П1533_11");
 		сДел1000.Вставить("A1534_3", "П1534_3");
 		сДел1000.Вставить("A1534_4", "П1534_4");
 		сДел1000.Вставить("A1534_5", "П1534_5");
 		сДел1000.Вставить("A1534_6", "П1534_6");
 		сДел1000.Вставить("A1534_7", "П1534_7");
 		сДел1000.Вставить("A1534_8", "П1534_8");
 		сДел1000.Вставить("A1534_9", "П1534_9");
 		сДел1000.Вставить("A1534_10", "П1534_10");
 		сДел1000.Вставить("A1534_11", "П1534_11");
 		сДел1000.Вставить("A1535_3", "П1535_3");
 		сДел1000.Вставить("A1535_4", "П1535_4");
 		сДел1000.Вставить("A1535_5", "П1535_5");
 		сДел1000.Вставить("A1535_6", "П1535_6");
 		сДел1000.Вставить("A1535_7", "П1535_7");
 		сДел1000.Вставить("A1535_8", "П1535_8");
 		сДел1000.Вставить("A1535_9", "П1535_9");
 		сДел1000.Вставить("A1535_10", "П1535_10");
 		сДел1000.Вставить("A1535_11", "П1535_11");
 		сДел1000.Вставить("A1536_3", "П1536_3");
 		сДел1000.Вставить("A1536_4", "П1536_4");
 		сДел1000.Вставить("A1536_5", "П1536_5");
 		сДел1000.Вставить("A1536_6", "П1536_6");
 		сДел1000.Вставить("A1536_7", "П1536_7");
 		сДел1000.Вставить("A1536_8", "П1536_8");
 		сДел1000.Вставить("A1536_9", "П1536_9");
 		сДел1000.Вставить("A1536_10", "П1536_10");
 		сДел1000.Вставить("A1536_11", "П1536_11");
 		сДел1000.Вставить("A1537_3", "П1537_3");
 		сДел1000.Вставить("A1537_4", "П1537_4");
 		сДел1000.Вставить("A1537_5", "П1537_5");
 		сДел1000.Вставить("A1537_6", "П1537_6");
 		сДел1000.Вставить("A1537_7", "П1537_7");
 		сДел1000.Вставить("A1537_8", "П1537_8");
 		сДел1000.Вставить("A1537_9", "П1537_9");
 		сДел1000.Вставить("A1537_10", "П1537_10");
 		сДел1000.Вставить("A1537_11", "П1537_11");
 		сДел1000.Вставить("A1538_3", "П1538_3");
 		сДел1000.Вставить("A1538_4", "П1538_4");
 		сДел1000.Вставить("A1538_5", "П1538_5");
 		сДел1000.Вставить("A1538_6", "П1538_6");
 		сДел1000.Вставить("A1538_7", "П1538_7");
 		сДел1000.Вставить("A1538_8", "П1538_8");
 		сДел1000.Вставить("A1538_9", "П1538_9");
 		сДел1000.Вставить("A1538_10", "П1538_10");
 		сДел1000.Вставить("A1538_11", "П1538_11");
 		сДел1000.Вставить("A1539_3", "П1539_3");
 		сДел1000.Вставить("A1539_4", "П1539_4");
 		сДел1000.Вставить("A1539_5", "П1539_5");
 		сДел1000.Вставить("A1539_6", "П1539_6");
 		сДел1000.Вставить("A1539_7", "П1539_7");
 		сДел1000.Вставить("A1539_8", "П1539_8");
 		сДел1000.Вставить("A1539_9", "П1539_9");
 		сДел1000.Вставить("A1539_10", "П1539_10");
 		сДел1000.Вставить("A1539_11", "П1539_11");
 		сДел1000.Вставить("A1540_3", "П1540_3");
 		сДел1000.Вставить("A1540_4", "П1540_4");
 		сДел1000.Вставить("A1540_5", "П1540_5");
 		сДел1000.Вставить("A1540_6", "П1540_6");
 		сДел1000.Вставить("A1540_7", "П1540_7");
 		сДел1000.Вставить("A1540_8", "П1540_8");
 		сДел1000.Вставить("A1540_9", "П1540_9");
 		сДел1000.Вставить("A1540_10", "П1540_10");
 		сДел1000.Вставить("A1540_11", "П1540_11");
		
		ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);

	КонецЕсли;

	КонецОтчета(Doc);
КонецПроцедуры

Процедура Формирование_БалансМПЕО(App, Документ, БланкЕО, PDate, ИД)
	
	Doc = App.OpenOrCreateByExDocID(БланкЕО, ОпределитьКодПериода(Документ), PDate, , ИД, 0); 
	Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП;
	Doc.DisableScripts(); 	
	rsMain = Doc.DataSets(); 
	с = Новый Структура;
	сДел1000 = Новый Структура;
	НачалоОтчета(rsMain);      
	
	Попытка
		rsMain.Fields.Item("FIRM_NAME").Value = Док.ОргНазв;
		rsMain.Fields.Item("FIRM_TERR").Value = Док.ОргТерритория;
		rsMain.Fields.Item("FIRM_OPFNM").Value = Док.ОргОПФГ;
		rsMain.Fields.Item("FIRM_KVEDNM").Value = Док.ОргВЭД;
		rsMain.Fields.Item("S_CH").Value = Док.СреднеспКво;
		rsMain.Fields.Item("FIRM_ADR").Value = Док.ОргПочтАдрес;
		//rsMain.Fields.Item("FIRM_TELORG").Value = Док.;
		
		rsMain.Fields.Item("N13").Value = Док.ДатаКонцаПериодаОтчетаГод;
		rsMain.Fields.Item("N14").Value = Док.ДатаКонцаПериодаОтчетаМесяц;
		//rsMain.Fields.Item("LAS").Value = Док.ДатаКонцаПериодаОтчетаЧисло;
		
		rsMain.Fields.Item("FIRM_EDRPOU").Value = Док.ОргКодЕДРПОУ;
		rsMain.Fields.Item("FIRM_SPATO").Value = Док.ОргКодКОАТУУ;
		rsMain.Fields.Item("FIRM_OPFCD").Value = Док.ОргКодОПФГ;
		rsMain.Fields.Item("FIRM_KVED").Value = Док.ОргКодКВЕД;
		
		rsMain.Fields.Item("MY_DATE").Value = Док.ДатаБаланса;
		
		rsMain.Fields.Item("rep_pernm").Value = Док.ПериодОтчета;
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если БланкЕО = "S0110011" Тогда	
		сДел1000.Вставить("A1005_3", "П10053");
		сДел1000.Вставить("A1005_4", "П10054");
		сДел1000.Вставить("A1010_3", "П10103");
		сДел1000.Вставить("A1010_4", "П10104");
		сДел1000.Вставить("A1011_3", "П10113");
		сДел1000.Вставить("A1011_4", "П10114");
		сДел1000.Вставить("A1012_3", "_П10123");
		сДел1000.Вставить("A1012_4", "_П10124");
		сДел1000.Вставить("A1020_3", "П10203");
		сДел1000.Вставить("A1020_4", "П10204");
		сДел1000.Вставить("A1030_3", "П10303");
		сДел1000.Вставить("A1030_4", "П10304");
		сДел1000.Вставить("A1090_3", "П10903");
		сДел1000.Вставить("A1090_4", "П10904");
		сДел1000.Вставить("A1095_3", "П10953");
		сДел1000.Вставить("A1095_4", "П10954");
		сДел1000.Вставить("A1100_3", "П11003");
		сДел1000.Вставить("A1100_4", "П11004");
		сДел1000.Вставить("A1103_3", "П11033");
		сДел1000.Вставить("A1103_4", "П11034");
		сДел1000.Вставить("A1110_3", "П11103");
		сДел1000.Вставить("A1110_4", "П11104");
		сДел1000.Вставить("A1125_3", "П11253");
		сДел1000.Вставить("A1125_4", "П11254");
		сДел1000.Вставить("A1135_3", "П11353");
		сДел1000.Вставить("A1135_4", "П11354");
		сДел1000.Вставить("A1136_3", "П11363");
		сДел1000.Вставить("A1136_4", "П11364");
		сДел1000.Вставить("A1155_3", "П11553");
		сДел1000.Вставить("A1155_4", "П11554");
		сДел1000.Вставить("A1160_3", "П11603");
		сДел1000.Вставить("A1160_4", "П11604");
		сДел1000.Вставить("A1165_3", "П11653");
		сДел1000.Вставить("A1165_4", "П11654");
		сДел1000.Вставить("A1170_3", "П11703");
		сДел1000.Вставить("A1170_4", "П11704");
		сДел1000.Вставить("A1190_3", "П11903");
		сДел1000.Вставить("A1190_4", "П11904");
		сДел1000.Вставить("A1195_3", "П11953");
		сДел1000.Вставить("A1195_4", "П11954");
		сДел1000.Вставить("A1200_3", "П12003");
		сДел1000.Вставить("A1200_4", "П12004");
		сДел1000.Вставить("A1300_3", "П13003");
		сДел1000.Вставить("A1300_4", "П13004");
		сДел1000.Вставить("A1400_3", "П14003");
		сДел1000.Вставить("A1400_4", "П14004");
		сДел1000.Вставить("A1410_3", "П14103");
		сДел1000.Вставить("A1410_4", "П14104");
		сДел1000.Вставить("A1415_3", "П14153");
		сДел1000.Вставить("A1415_4", "П14154");
		сДел1000.Вставить("A1420_3", "П14203");
		сДел1000.Вставить("A1420_4", "П14204");
		сДел1000.Вставить("A1425_3", "_П14253");
		сДел1000.Вставить("A1425_4", "_П14254");
		сДел1000.Вставить("A1495_3", "П14953");
		сДел1000.Вставить("A1495_4", "П14954");
		сДел1000.Вставить("A1595_3", "П15953");
		сДел1000.Вставить("A1595_4", "П15954");
		сДел1000.Вставить("A1600_3", "П16003");
		сДел1000.Вставить("A1600_4", "П16004");
		сДел1000.Вставить("A1610_3", "П16103");
		сДел1000.Вставить("A1610_4", "П16104");
		сДел1000.Вставить("A1615_3", "П16153");
		сДел1000.Вставить("A1615_4", "П16154");
		сДел1000.Вставить("A1620_3", "П16203");
		сДел1000.Вставить("A1620_4", "П16204");
		сДел1000.Вставить("A1621_3", "П16213");
		сДел1000.Вставить("A1621_4", "П16214");
		сДел1000.Вставить("A1625_3", "П16253");
		сДел1000.Вставить("A1625_4", "П16254");
		сДел1000.Вставить("A1630_3", "П16303");
		сДел1000.Вставить("A1630_4", "П16304");
		сДел1000.Вставить("A1665_3", "П16653");
		сДел1000.Вставить("A1665_4", "П16654");
		сДел1000.Вставить("A1690_3", "П16903");
		сДел1000.Вставить("A1690_4", "П16904");
		сДел1000.Вставить("A1695_3", "П16953");
		сДел1000.Вставить("A1695_4", "П16954");
		сДел1000.Вставить("A1700_3", "П17003");
		сДел1000.Вставить("A1700_4", "П17004");
		сДел1000.Вставить("A1900_3", "П19003");
		сДел1000.Вставить("A1900_4", "П19004");
		сДел1000.Вставить("B2000_3", "ПП20003");
		сДел1000.Вставить("B2000_4", "ПП20004");
		сДел1000.Вставить("B2120_3", "ПП21203");
		сДел1000.Вставить("B2120_4", "ПП21204");
		сДел1000.Вставить("B2240_3", "ПП22403");
		сДел1000.Вставить("B2240_4", "ПП22404");
		сДел1000.Вставить("B2280_3", "ПП22803");
		сДел1000.Вставить("B2280_4", "ПП22804");
		сДел1000.Вставить("B2050_3", "_ПП20503");
		сДел1000.Вставить("B2050_4", "_ПП20504");
		сДел1000.Вставить("B2180_3", "_ПП21803");
		сДел1000.Вставить("B2180_4", "_ПП21804");
		сДел1000.Вставить("B2270_3", "_ПП22703");
		сДел1000.Вставить("B2270_4", "_ПП22704");
		сДел1000.Вставить("B2285_3", "_ПП22853");
		сДел1000.Вставить("B2285_4", "_ПП22854");
		сДел1000.Вставить("B2290_3", "ПП22903");
		сДел1000.Вставить("B2290_4", "ПП22904");
		сДел1000.Вставить("B2300_3", "_ПП23003");
		сДел1000.Вставить("B2300_4", "_ПП23004");
		сДел1000.Вставить("B2350_3", "ПП23503");
		сДел1000.Вставить("B2350_4", "ПП23504");
		с.Вставить("FIRM_RUK", "ОргДиректор");
		с.Вставить("FIRM_BUH", "ОргБухгалтер");  		
	КонецЕсли;      	
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);

	КонецОтчета(Doc);  
	
КонецПроцедуры

Процедура Формирование_БалансМПС(App, Документ, БланкЕО, PDate, ИД)
	
	Doc = App.OpenOrCreateByExDocID(БланкЕО, ОпределитьКодПериода(Документ), PDate, , ИД, 0); 
	Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетМП;
	Doc.DisableScripts(); 	
	rsMain = Doc.DataSets(); 
	с = Новый Структура;
	сДел1000 = Новый Структура;
	НачалоОтчета(rsMain);      
	
	Попытка
		rsMain.Fields.Item("FIRM_NAME").Value = Док.ОргНазв;
		rsMain.Fields.Item("FIRM_TERR").Value = Док.ОргТерритория;
		rsMain.Fields.Item("FIRM_OPFNM").Value = Док.ОргОПФГ;
		rsMain.Fields.Item("FIRM_KVEDNM").Value = Док.ОргВЭД;
		rsMain.Fields.Item("S_CH").Value = Док.СреднеспКво;
		rsMain.Fields.Item("FIRM_ADR").Value = Док.ОргПочтАдрес;
		//rsMain.Fields.Item("FIRM_TELORG").Value = Док.;
		
		rsMain.Fields.Item("N13").Value = Док.ДатаКонцаПериодаОтчетаГод;
		rsMain.Fields.Item("N14").Value = Док.ДатаКонцаПериодаОтчетаМесяц;
		//rsMain.Fields.Item("LAS").Value = Док.ДатаКонцаПериодаОтчетаЧисло;
		
		rsMain.Fields.Item("FIRM_EDRPOU").Value = Док.ОргКодЕДРПОУ;
		rsMain.Fields.Item("FIRM_SPATO").Value = Док.ОргКодКОАТУУ;
		rsMain.Fields.Item("FIRM_OPFCD").Value = Док.ОргКодОПФГ;
		rsMain.Fields.Item("FIRM_KVED").Value = Док.ОргКодКВЕД;
		
		rsMain.Fields.Item("MY_DATE").Value = Док.ДатаБаланса;
		
		rsMain.Fields.Item("rep_pernm").Value = Док.ПериодОтчета;
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если БланкЕО = "S0111003" Тогда	
		сДел1000.Вставить("A1010_3", "П10103");
		сДел1000.Вставить("A1010_4", "П10104");
		сДел1000.Вставить("A1011_3", "П10113");
		сДел1000.Вставить("A1011_4", "П10114");
		сДел1000.Вставить("A1012_3", "_П10123");
		сДел1000.Вставить("A1012_4", "_П10124");
		сДел1000.Вставить("A1090_3", "П10903");
		сДел1000.Вставить("A1090_4", "П10904");
		сДел1000.Вставить("A1095_3", "П10953");
		сДел1000.Вставить("A1095_4", "П10954");
		сДел1000.Вставить("A1100_3", "П11003");
		сДел1000.Вставить("A1100_4", "П11004");
		сДел1000.Вставить("A1155_3", "П11553");
		сДел1000.Вставить("A1155_4", "П11554");
		сДел1000.Вставить("A1165_3", "П11653");
		сДел1000.Вставить("A1165_4", "П11654");
		сДел1000.Вставить("A1190_3", "П11903");
		сДел1000.Вставить("A1190_4", "П11904");
		сДел1000.Вставить("A1195_3", "П11953");
		сДел1000.Вставить("A1195_4", "П11954");
		сДел1000.Вставить("A1300_3", "П13003");
		сДел1000.Вставить("A1300_4", "П13004");
		сДел1000.Вставить("A1400_3", "П14003");
		сДел1000.Вставить("A1400_4", "П14004");
		сДел1000.Вставить("A1420_3", "П14203");
		сДел1000.Вставить("A1420_4", "П14204");
		сДел1000.Вставить("A1495_3", "П14953");
		сДел1000.Вставить("A1495_4", "П14954");
		сДел1000.Вставить("A1595_3", "П15953");
		сДел1000.Вставить("A1595_4", "П15954");
		сДел1000.Вставить("A1600_3", "П16003");
		сДел1000.Вставить("A1600_4", "П16004");
		сДел1000.Вставить("A1615_3", "П16153");
		сДел1000.Вставить("A1615_4", "П16154");
		сДел1000.Вставить("A1620_3", "П16203");
		сДел1000.Вставить("A1620_4", "П16204");
		сДел1000.Вставить("A1625_3", "П16253");
		сДел1000.Вставить("A1625_4", "П16254");
		сДел1000.Вставить("A1630_3", "П16303");
		сДел1000.Вставить("A1630_4", "П16304");
		сДел1000.Вставить("A1690_3", "П16903");
		сДел1000.Вставить("A1690_4", "П16904");
		сДел1000.Вставить("A1695_3", "П16953");
		сДел1000.Вставить("A1695_4", "П16954");
		сДел1000.Вставить("A1900_3", "П19003");
		сДел1000.Вставить("A1900_4", "П19004");
		сДел1000.Вставить("B2000_3", "ПП20003");
		сДел1000.Вставить("B2000_4", "ПП20004");
		сДел1000.Вставить("B2160_3", "ПП21603");
		сДел1000.Вставить("B2160_4", "ПП21604");
		сДел1000.Вставить("B2280_3", "ПП22803");
		сДел1000.Вставить("B2280_4", "ПП22804");
		сДел1000.Вставить("B2050_3", "_ПП20503");
		сДел1000.Вставить("B2050_4", "_ПП20504");
		сДел1000.Вставить("B2165_3", "_ПП21653");
		сДел1000.Вставить("B2165_4", "_ПП21654");
		сДел1000.Вставить("B2285_3", "_ПП22853");
		сДел1000.Вставить("B2285_4", "_ПП22854");
		сДел1000.Вставить("B2290_3", "ПП22903");
		сДел1000.Вставить("B2290_4", "ПП22904");
		сДел1000.Вставить("B2300_3", "_ПП23003");
		сДел1000.Вставить("B2300_4", "_ПП23004");
		сДел1000.Вставить("B2310_3", "_ПП23103");
		сДел1000.Вставить("B2310_4", "_ПП23104");
		сДел1000.Вставить("B2350_3", "ПП23503");
		сДел1000.Вставить("B2350_4", "ПП23504");
		с.Вставить("FIRM_RUK", "ОргДиректор");
		с.Вставить("FIRM_BUH", "ОргБухгалтер");  		
	КонецЕсли;      	
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);

	КонецОтчета(Doc);  
	
КонецПроцедуры

Процедура Формирование_Ф4ФСС(App, Документ, БланкФСС, PDate, ИД)
	
	Doc = App.OpenOrCreateByExDocID(БланкФСС, ОпределитьКодПериода(Документ), PDate, , ИД, 0);
	Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетФССУтратаТрудосп;	
	Doc.DisableScripts();  	
	rsMain = Doc.DataSets(); 
	с = Новый Структура;     	
	НачалоОтчета(rsMain);
	
	с.Вставить("FIRM_SS", "CSTRAX"); 
	с.Вставить("FIRM_EDRPOU", "OKPO");
	с.Вставить("N1", "DERZHREESTR");  
	с.Вставить("FIRM_CBANK", "МФО"); 
	с.Вставить("FIRM_RS", "РС"); 
	с.Вставить("FIRM_NMBANK", "Банк"); 
	с.Вставить("FIRM_ADR", "Адрес"); 
	с.Вставить("FIRM_PHON", "Телефон"); 
	
	с.Вставить("A1_1", "S101"); 
	с.Вставить("A1_12", "S112");
	с.Вставить("A1_2", "S102");
	с.Вставить("A1_13", "S113");
	с.Вставить("A1_3", "S103");
	с.Вставить("A1_14", "S114");
	с.Вставить("A1_4", "S104");
	с.Вставить("A1_15", "S115");
	с.Вставить("A1_5", "S105");
	с.Вставить("A1_16", "S116");
	с.Вставить("A1_6", "S106");
	с.Вставить("A1_17", "S117");
	с.Вставить("A1_7", "S107");
	с.Вставить("A1_18", "S118");
	с.Вставить("A1_8", "S108");
	с.Вставить("A1_19", "S119");
	с.Вставить("A1_9", "S109");
	с.Вставить("A1_20", "S120");
	с.Вставить("A1_10", "S110");
	с.Вставить("A1_21", "S121");
	с.Вставить("A1_11", "S111");
	с.Вставить("A1_22", "S122");
	с.Вставить("A1_23", "S123");
	с.Вставить("A1_24", "S124");
	
	с.Вставить("B4_01", "S213");
	с.Вставить("C4_01", "S214");
	с.Вставить("D4_01", "S215");
	с.Вставить("E4_01", "S216");
	с.Вставить("K4_01", "S217");
	
	с.Вставить("B4_02", "S223");
	с.Вставить("C4_02", "S224");
	с.Вставить("D4_02", "S225");
	с.Вставить("E4_02", "S226");
	с.Вставить("K4_02", "S227");
	
	с.Вставить("B4_03", "S233");
	с.Вставить("C4_03", "S234");
	с.Вставить("D4_03", "S235");
	с.Вставить("E4_03", "S236");
	с.Вставить("K4_03", "S237");
	
	с.Вставить("B4_06", "S243");
	с.Вставить("C4_06", "S244");
	с.Вставить("C4_07", "S254");
	с.Вставить("E4_07", "S256");
	с.Вставить("K4_07", "S257");
	
	с.Вставить("C4_08", "S263");
	с.Вставить("B4_08", "S264");
	с.Вставить("C4_09", "S274");
	с.Вставить("C4_10", "S284");  	     	
	
	с.Вставить("FIRM_RUK", "ОргДиректор"); 
	с.Вставить("FIRM_BUH", "ОргБухгалтер");     	
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	КонецОтчета(Doc);
	
КонецПроцедуры

Процедура Формирование_1ДФ(App, Документ, БланкДФС, PDate, ИД)
	
	Doc = App.OpenOrCreateByExDocID(БланкДФС, 10, PDate, , ИД, 0);
	Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФорма1ДФ;
	
	Если БланкДФС = "J0500105" ИЛИ БланкДФС = "F0500105" Тогда
		
		rsMain = Doc.DataSets("TAB1");
		rsMain.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки = 1;
		
		Пока ДобавитьНовуюСтроку Цикл
			
			Если НомерСтроки > 0 и НомерСтроки < 10 Тогда
				Ноль = "000"
			ИначеЕсли НомерСтроки >= 10 и НомерСтроки < 100 Тогда
				Ноль = "00" 	
			ИначеЕсли НомерСтроки >= 100 и НомерСтроки < 1000 Тогда
				Ноль = "0"
			Иначе 
				Ноль = ""
			КонецЕсли;
			
			
			СуществуетСтрока = Ложь;
			
			rsMain.Edit();
			Для Каждого Поле Из Док Цикл
				
				Если Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G02") = 1 Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A2").Value = Поле.Значение;
					
				ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"GFIO") = 1 Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A21").Value = Поле.Значение;
					
				ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G03A") = 1 Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A31").Value = Поле.Значение;
					
				ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G03") = 1 Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A3").Value = Поле.Значение;
					
				ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G04A") = 1 Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A41").Value = Поле.Значение;
					
				ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G04") = 1 Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A4").Value = Поле.Значение;
					
				ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G05") = 1 Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A5").Value = Поле.Значение;
					
				ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G06D") = 1 Тогда
					
					Если Поле.Значение <> Дата(1,1,1) Тогда	
						СуществуетСтрока = Истина;
						rsMain.Fields.Item("TAB1_A6").Value = Поле.Значение;
					КонецЕсли; 
					
				ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G07D") = 1 Тогда
					
					Если Поле.Значение <> Дата(1,1,1) Тогда
						СуществуетСтрока = Истина;
						rsMain.Fields.Item("TAB1_A7").Value = Поле.Значение; 
					КонецЕсли;
					
				ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G08") = 1 Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A8").Value = ?(Поле.Значение <> "",Число(Поле.Значение),0);
					rsMain.Fields.Item("TAB1_A81").Value = Поле.Значение;
					
				//ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G08") = 1 Тогда
				//	СуществуетСтрока = Истина;
				//	rsMain.Fields.Item("TAB1_A81").Value = Поле.Значение;
					
				ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G09") = 1 Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_OZNAKA").Value = Поле.Значение;
				КонецЕсли;
				
			КонецЦикла;
			rsMain.Post();
			
			Если СуществуетСтрока = Истина тогда	
				rsMain.Append();
				НомерСтроки = НомерСтроки + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsMain.Delete();
			КонецЕсли;
			
		КонецЦикла;
		
		rsMain = Doc.DataSets(); 	
		с = Новый Структура;  
		НачалоОтчета(rsMain);
		
		с.Вставить("PSH", "R00G01I");
		с.Вставить("PS", "R00G02I");
		с.Вставить("PN", "R00G03I");
		с.Вставить("TA31", "R01G03A");
		с.Вставить("TA3", "R01G03");
		с.Вставить("TA41", "R01G04A");
		с.Вставить("TA4", "R01G04");
		
		с.Вставить("TA31_1", "R0201G03A");
		с.Вставить("TA41_1", "R0201G04A");
		с.Вставить("TA4_1", "R0201G04");
		
		с.Вставить("TA31_2", "R0202G03A");
		с.Вставить("TA41_2", "R0202G04A");
		с.Вставить("TA4_2", "R0202G04");
		
		с.Вставить("TA31_5", "R0203G03A");
		с.Вставить("TA3_5", "R0203G03");
		с.Вставить("TA41_5", "R0203G04A");
		с.Вставить("TA4_5", "R0203G04");
		
		с.Вставить("TA31_6", "R0204G03A");
		с.Вставить("TA3_6", "R0204G03");
		с.Вставить("TA41_6", "R0204G04A");
		с.Вставить("TA4_6", "R0204G04");
		
		с.Вставить("TA31_3", "R0205G03A");
		с.Вставить("TA3_3", "R0205G03");
		с.Вставить("TA41_3", "R0205G04A");
		с.Вставить("TA4_3", "R0205G04");
		
		с.Вставить("TA31_4", "R0206G03A");
		с.Вставить("TA3_4", "R0206G03");
		с.Вставить("TA41_4", "R0206G04A");
		с.Вставить("TA4_4", "R0206G04");
		
		с.Вставить("KK", "R02G01I");
		с.Вставить("KF", "R02G02I");
		с.Вставить("KA", "R02G03I");
		
		с.Вставить("RUKINN", "HKBOS");
		с.Вставить("RUK", "HBOS");
		с.Вставить("RUKTELS", "HTELBOS");
		с.Вставить("BUHINN", "HKBUH");
		с.Вставить("BUH", "HBUH");
		с.Вставить("BUHTELS", "HTELBUH");
		
		с.Вставить("FIZINN", "HKFO");
		с.Вставить("FIZ_OS", "HFO");
		с.Вставить("PHON", "HTELFO");
		
		//лучше тут ниче не менять
		//по-другому не работает
		Если СокрЛП(Док.HZ) = "Х" Тогда
			rsMain.Fields.Item("N5").Value = "X";
		Иначе 
			rsMain.Fields.Item("N5").Value = "";
		КонецЕсли;
		
		Если СокрЛП(Док.HZN) = "Х" Тогда
			rsMain.Fields.Item("N4").Value = "X";
		Иначе 
			rsMain.Fields.Item("N4").Value = "";
		КонецЕсли;
		
		Если СокрЛП(Док.HZU) = "Х" Тогда
			rsMain.Fields.Item("N3").Value = "X";
		Иначе 
			rsMain.Fields.Item("N3").Value = "";
		КонецЕсли; 
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		КонецОтчета(Doc);	
	КонецЕсли;		
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////ЕСВ///////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

Функция Формирование_ЕСВ_ТАБПеречень(Doc, Бланк, Документ)
	ИДПарент = 0;
	  
	Если Бланк = "J3000412" ИЛИ Бланк = "F3000412" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПереченьТаблиц;
		rsMain = Doc.DataSets(); 
		НачалоОтчета(rsMain);	
	
		rsMain.Fields.Item("N1_3").Value=?(Док["R001G3"]="-",0,1);
		rsMain.Fields.Item("N2_3").Value=?(Док["R002G3"]="-",0,1);
		rsMain.Fields.Item("N3_3").Value=?(Док["R003G3"]="-",0,1);
		rsMain.Fields.Item("N4_3").Value=?(Док["R004G3"]="-",0,1);
		rsMain.Fields.Item("N5_3").Value=?(Док["R005G3"]="-",0,1);
		rsMain.Fields.Item("N6_3").Value=?(Док["R006G3"]="-",0,1);
		rsMain.Fields.Item("N7_3").Value=?(Док["R007G3"]="-",0,1);
		rsMain.Fields.Item("N8_3").Value=?(Док["R008G3"]="-",0,1);
		rsMain.Fields.Item("N9_3").Value=?(Док["R009G3"]="-",0,1);
		
		КонецОтчета(Doc);
		ИДПарент = Doc.CardCode;
		
	КонецЕсли;
	
	Возврат ИДПарент;
КонецФункции

Процедура Формирование_ЕСВ_ТАБ1(Doc, Бланк, Документ)
	
	Если Бланк = "J3000412" ИЛИ Бланк = "F3000412" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТаблица1;	
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		с.Вставить("ID_1100", "R011G3");
		с.Вставить("ID_1200", "R012G3");
		с.Вставить("ID_1300", "R013G3");
		с.Вставить("ID_1400", "R014G3");
		с.Вставить("ID_1500", "R015G3");
		
		с.Вставить("ID_1012", "HNACTL");
		с.Вставить("ID_1013", "HNACTL4");
		с.Вставить("ID_1014", "HNACTL5");
		с.Вставить("ID_1015", "HNACTL6");
		с.Вставить("ID_1016", "HNACTL7");
		
		с.Вставить("ID_1121", "HNACTL1");
		с.Вставить("ID_1128", "H014G1");
		с.Вставить("ID_1129", "HNACTL2");
		с.Вставить("ID_1130", "HNACTL3");
		
		с.Вставить("ID_1000", "R01G3");
		с.Вставить("ID_2000", "R02G3");
		с.Вставить("ID_3000", "R03G3");
		с.Вставить("ID_4000", "R04G3");
		с.Вставить("ID_5000", "R05G3");
		с.Вставить("ID_6000", "R06G3");
		
		с.Вставить("ID_2100", "R021G3");
		с.Вставить("ID_2200", "R022G3");
		с.Вставить("ID_2300", "R023G3");
		с.Вставить("ID_2400", "R024G3");
		с.Вставить("ID_2500", "R025G3");
		
		с.Вставить("ID_3100", "R031G3");
		с.Вставить("ID_3200", "R032G3");
		с.Вставить("ID_3300", "R033G3");
		с.Вставить("ID_3400", "R034G3");
		с.Вставить("ID_3500", "R035G3");
		
		с.Вставить("ID_4110", "R04101G3");
		с.Вставить("ID_4120", "R04102G3");
		с.Вставить("ID_4130", "R04103G3");
		с.Вставить("ID_4140", "R04104G3");
		с.Вставить("ID_4150", "R04105G3");
		с.Вставить("ID_4160", "R04106G3");
		с.Вставить("ID_4170", "R04107G3");
		с.Вставить("ID_4180", "R04108G3");
		с.Вставить("ID_4190", "R04109G3");
		
		с.Вставить("ID_41100", "R04110G3");
		с.Вставить("ID_41110", "R04111G3");
		с.Вставить("ID_41120", "R04112G3");
		с.Вставить("ID_41130", "R04113G3");
		
		с.Вставить("ID_4100", "R041G3");
		с.Вставить("ID_4200", "R042G3");
		с.Вставить("ID_4300", "R043G3");
		с.Вставить("ID_4400", "R044G3");
		
		с.Вставить("ID_4310", "R04301G3");
		с.Вставить("ID_4320", "R04302G3");
		с.Вставить("ID_4330", "R04303G3");
		с.Вставить("ID_4340", "R04304G3");
		с.Вставить("ID_4350", "R04305G3");
		
		с.Вставить("ERROR_TXT1", "R044G2S");
		
		с.Вставить("ID_5110", "R05101G3");
		с.Вставить("ID_5120", "R05102G3");
		с.Вставить("ID_5130", "R05103G3");
		с.Вставить("ID_5140", "R05104G3");
		с.Вставить("ID_5150", "R05105G3");
		с.Вставить("ID_5160", "R05106G3");
		с.Вставить("ID_5170", "R05107G3");
		с.Вставить("ID_5180", "R05108G3");
		с.Вставить("ID_5190", "R05109G3");
		
		с.Вставить("ID_51100", "R05110G3");
		с.Вставить("ID_51110", "R05111G3");
		с.Вставить("ID_51120", "R05112G3");
		с.Вставить("ID_51130", "R05113G3");
		
		с.Вставить("ID_5100", "R051G3");
		с.Вставить("ID_5200", "R052G3");
		с.Вставить("ID_5300", "R053G3");
		с.Вставить("ID_5400", "R054G3");
		
		с.Вставить("ID_5310", "R05301G3");
		с.Вставить("ID_5320", "R05302G3");
		с.Вставить("ID_5330", "R05303G3");
		с.Вставить("ID_5340", "R05304G3");
		с.Вставить("ID_5350", "R05305G3");
		
		с.Вставить("ERROR_TXT2", "R054G2S");
		
		с.Вставить("ID_6100", "R0601G3");
		с.Вставить("ID_6200", "R0602G3");
		с.Вставить("ID_6300", "R0603G3");
		с.Вставить("ID_6400", "R0604G3");
		с.Вставить("ID_6500", "R0605G3");
		с.Вставить("ID_6600", "R0606G3");
		с.Вставить("ID_6700", "R0607G3");
		с.Вставить("ID_6800", "R0608G3");
		с.Вставить("ID_6900", "R0609G3");
		
		с.Вставить("ID_61000", "R0610G3");
		с.Вставить("ID_61100", "R0611G3");
		с.Вставить("ID_61200", "R0612G3");
		с.Вставить("ID_61300", "R0613G3");
		с.Вставить("ID_61400", "R0614G3");
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		КонецОтчета(Doc);		
	КонецЕсли;
	
КонецПроцедуры

Процедура Формирование_ЕСВ_ТАБ5(Doc, Бланк, Документ)
	
	Если Бланк = "J3000412" ИЛИ Бланк = "F3000412" Тогда
		Док_Показатель = Документ.ДанныеОтчета.Получить();
	  	Док = Документ.ДанныеОтчета.Получить().ДанныеМногострочныхРазделов.T5T1R;
		rsMain = Doc.DataSets("TAB1");
		rsMain.Clear();
		rsMain.Edit();
		
		Для Каждого Поле Из Док Цикл
			
			rsMain.Fields.Item("UKR_GROMAD").Value = Поле.T1RG6;
			
			Если Поле.T1RG8 <> 0 Тогда	 
				rsMain.Fields.Item("ZO").Value = Поле.T1RG8;
			КонецЕсли;
			rsMain.Fields.Item("DOG_CPH").Value = Поле.T1RG7;
			rsMain.Fields.Item("NUMIDENT").Value = Поле.T1RG9S;
			rsMain.Fields.Item("LN").Value = Поле.T1RG101S;
			rsMain.Fields.Item("NM").Value = Поле.T1RG102S;
			rsMain.Fields.Item("FTN").Value = Поле.T1RG103S;
			Если Поле.T1RG111 <> 0 Тогда
				rsMain.Fields.Item("START_DT").Value = Поле.T1RG111;
			КонецЕсли;
			Если Поле.T1RG112 <> 0 Тогда
				rsMain.Fields.Item("END_DT").Value = Поле.T1RG112;
			КонецЕсли;
			rsMain.Fields.Item("PNR").Value = Поле.T1RG12S;
			Если Поле.T1RG13 <> 0 Тогда
				rsMain.Fields.Item("ZKPP").Value = Поле.T1RG13;
			КонецЕсли; 
			rsMain.Fields.Item("PROF").Value = Поле.T1RG14S;
			rsMain.Fields.Item("POS").Value = Поле.T1RG15S;
			rsMain.Fields.Item("PID").Value = Поле.T1RG16S;
			rsMain.Fields.Item("PID_ZV").Value = Поле.T1RG17S;
			
			Если Поле.T1RG18D <> Дата(1,1,1) Тогда
				rsMain.Fields.Item("NRM_DT").Value = Дата(Поле.T1RG18D);
			КонецЕсли;	
			
			rsMain.Fields.Item("VZV").Value = Поле.T1RG19S;
			
			rsMain.Append();
		КонецЦикла;
		rsMain.Delete();
		rsMain.Post();
		КонецОтчета(Doc);

	КонецЕсли;
	
КонецПроцедуры

Процедура Формирование_ЕСВ_ТАБ6(Doc, Бланк, Документ)
	
	Если Бланк = "J3000412" ИЛИ Бланк = "F3000412" Тогда
		Док = Документ.ДанныеОтчета.Получить().ДанныеМногострочныхРазделов.T6T1R;
		rsMain = Doc.DataSets("TAB1");
		rsMain.Clear();
		НомерСтроки = 1;
		
		rsMain.Edit();
		Для Каждого Поле Из Док Цикл	
			
			rsMain.Fields.Item("UKR_GROMAD").Value = Поле.T1RG6;
			
			Если Поле.T1RG7 = "Ч" Тогда		 
				rsMain.Fields.Item("ST").Value = 1;
			Иначе
				rsMain.Fields.Item("ST").Value = 0;
			КонецЕсли;
			
			Если Поле.T1RG8S <> 0 Тогда
				rsMain.Fields.Item("NUMIDENT").Value = Поле.T1RG8S;
			КонецЕсли;
			Если Поле.T1RG9 <> 0 Тогда
				rsMain.Fields.Item("ZO").Value = Поле.T1RG9;
			КонецЕсли;
			
			rsMain.Fields.Item("LN").Value = Поле.T1RG121S;	 
			rsMain.Fields.Item("NM").Value = Поле.T1RG122S;	 
			rsMain.Fields.Item("FTN").Value = Поле.T1RG123S;
			
			Если Поле.T1RG10 <> 0 Тогда
				rsMain.Fields.Item("PAY_TP").Value = Поле.T1RG10;
			КонецЕсли;
			Если Поле.T1RG111 <> 0 Тогда
				rsMain.Fields.Item("PAY_MNTH").Value = Поле.T1RG111;
			КонецЕсли;
			Если Поле.T1RG112 <> 0 Тогда
				rsMain.Fields.Item("PAY_YEAR").Value = Поле.T1RG112;
			КонецЕсли;
			
			Если Поле.T1RG13 <> 0 Тогда
				rsMain.Fields.Item("KD_NP").Value = Поле.T1RG13;
			КонецЕсли;
			Если Поле.T1RG14 <> 0 Тогда
				rsMain.Fields.Item("KD_NZP").Value = Поле.T1RG14;
			КонецЕсли;
			Если Поле.T1RG15 <> 0 Тогда		 
				rsMain.Fields.Item("KD_PTV").Value = Поле.T1RG15;
			КонецЕсли;
			Если Поле.T1RG16 <> 0 Тогда		 
				rsMain.Fields.Item("KD_VP").Value = Поле.T1RG16;
			КонецЕсли;
			
			Если Поле.T1RG17 <> 0 Тогда		 
				rsMain.Fields.Item("SUM_TOTAL").Value = Поле.T1RG17;
			КонецЕсли;
			Если Поле.T1RG18 <> 0 Тогда		 
				rsMain.Fields.Item("SUM_MAX").Value = Поле.T1RG18;
			КонецЕсли;
			Если Поле.T1RG19 <> 0 Тогда		 
				rsMain.Fields.Item("SUM_DIFF").Value = Поле.T1RG19;
			КонецЕсли;
			Если Поле.T1RG20 <> 0 Тогда		 
				rsMain.Fields.Item("SUM_INS").Value = Поле.T1RG20;
			КонецЕсли;
			Если Поле.T1RG21 <> 0 Тогда		
				rsMain.Fields.Item("SUM_NARAH").Value = Поле.T1RG21;
			КонецЕсли;
			rsMain.Fields.Item("OTK").Value = Поле.T1RG22; 
			rsMain.Fields.Item("EXP").Value = Поле.T1RG23;	 
			rsMain.Fields.Item("NRC").Value = Поле.T1RG24; 	 	 
			rsMain.Fields.Item("NRM").Value = Поле.T1RG25;	 
			rsMain.Append();		
		КонецЦикла;
		rsMain.Delete();
		rsMain.Post();
		КонецОтчета(Doc);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Формирование_ЕСВ_ТАБ7(Doc, Бланк, Документ)
	
	Если Бланк = "J3000412" ИЛИ Бланк = "F3000412" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ДанныеМногострочныхРазделов.T7T1R;
		rsMain = Doc.DataSets("TAB1");
		rsMain.Clear();
		НомерСтроки = 1;	
		
		rsMain.Edit();
		Для Каждого Поле Из Док Цикл		
			rsMain.Fields.Item("UKR_GROMAD").Value = Поле.T1RG6;
			rsMain.Fields.Item("NUMIDENT").Value = Поле.T1RG7S;
			rsMain.Fields.Item("C_PID").Value = Поле.T1RG8S;
			rsMain.Fields.Item("START_DT").Value = Поле.T1RG10;
			Если Поле.T1RG12 <> 0 Тогда	
				rsMain.Fields.Item("DAYS").Value = Поле.T1RG12;
			КонецЕсли;
			Если Поле.T1RG131 <> 0 Тогда
				rsMain.Fields.Item("HH").Value = Поле.T1RG131;
			КонецЕсли;
			Если Поле.T1RG132 <> 0 Тогда
				rsMain.Fields.Item("MM").Value = Поле.T1RG132;
			КонецЕсли;
			rsMain.Fields.Item("NUM_NAK").Value = Поле.T1RG15S;
			Если Поле.T1RG17 <> 0 Тогда
				rsMain.Fields.Item("SEAZON").Value = Поле.T1RG17;	 
			КонецЕсли;
			rsMain.Fields.Item("LN").Value = Поле.T1RG91S;
			rsMain.Fields.Item("NM").Value = Поле.T1RG92S;
			rsMain.Fields.Item("FTN").Value = Поле.T1RG93S;
			rsMain.Fields.Item("STOP_DT").Value = Поле.T1RG11;
			Если Поле.T1RG141 <> 0 Тогда
				rsMain.Fields.Item("NORMA_1").Value = Поле.T1RG141;
			КонецЕсли;
			Если Поле.T1RG142 <> 0 Тогда
				rsMain.Fields.Item("NORMA_2").Value = Поле.T1RG142;
			КонецЕсли;
			Если Поле.T1RG143 <> 0 Тогда
				rsMain.Fields.Item("NORMA_3").Value = Поле.T1RG143;
			КонецЕсли;
			Если Поле.T1RG16D <> Дата(1,1,1) Тогда
				rsMain.Fields.Item("DT_NAK").Value = Дата(Поле.T1RG16D);
			КонецЕсли;
			rsMain.Append();		
		КонецЦикла;
		rsMain.Delete();
		rsMain.Post();
		КонецОтчета(Doc);	
	КонецЕсли;
	
КонецПроцедуры

Процедура Формирование_ЕСВ(App, Документ, Бланк, PDate, ИД, ПерезаписьОтчетов, НовыйПакет = Неопределено)
	
	ИДПарент = 0;	
	Если Бланк = "J3000412" Тогда
		БланкТ1 = "J3040112";  
		БланкТ5 = "J3040512";
		БланкТ6 = "J3040612";
		БланкТ7 = "J3040712";
	Иначе
		БланкТ1 = "F3040112";
		БланкТ5 = "F3040512";
		БланкТ6 = "F3040612";
		БланкТ7 = "F3040712";		 
	КонецЕсли;
	
	////если создаем еще один пакет сначала отвяжем старый от текущего гуида
	//Если НовыйПакет <> Неопределено Тогда
	//	Doc = App.OpenOrCreateByExDocID(Бланк, 0, PDate, , ИД, ПерезаписьОтчетов);
	//	rsMain = Doc.DataSets() ;  
	//	rsMain.Edit(); 
	//	rsMain.ExDocID = "";
	//	rsMain.Post(); 
	//	Doc.Save(1); 
	//	Doc.Close(); 	
	//КонецЕсли; 
	
	//создаем перечень	
	Попытка
		Doc = App.OpenOrCreateByExDocID(Бланк, 0, PDate, , ИД, ПерезаписьОтчетов);
		ИДПарент = Формирование_ЕСВ_ТАБПеречень(Doc, Бланк, Документ);
	Исключение
		Сообщить("Ошибка: ЕСВ, Перечень таблиц не передался. Передача остановлена");
		Doc = App.MoveToTrash(ИД);
	КонецПопытки;
	
	Если ИДПарент <> 0 Тогда
		//создаем таб.1
		Если Приложения_таб1 = Истина Тогда
			Doc = App.OpenOrCreateByExDocID(БланкТ1, 0, PDate, , ИД+"E1", 0);
			Doc.IDParent = ИДПарент;	
			Попытка
				Формирование_ЕСВ_ТАБ1(Doc, Бланк, Документ);
			Исключение
				Сообщить("Ошибка: ЕСВ, Таблица 1 не создана");
				Doc = App.MoveToTrash(ИД+"E1");
			КонецПопытки;
		Иначе
			Doc = App.MoveToTrash(ИД+"E1");
		КонецЕсли;
		//создаем таб.5
		Если Приложения_таб2 = Истина Тогда
			Doc = App.OpenOrCreateByExDocID(БланкТ5, 0, PDate, , ИД+"E5", 0);
			Doc.IDParent = ИДПарент;
			Попытка
				Формирование_ЕСВ_ТАБ5(Doc, Бланк, Документ);
			Исключение
				Сообщить("Ошибка: ЕСВ, Таблица 5 не создана");
				Doc = App.MoveToTrash(ИД+"E5");
			КонецПопытки;
		Иначе
			Doc = App.MoveToTrash(ИД+"E5");
		КонецЕсли;
		//создаем таб.6	
		Если Приложения_таб3 = Истина Тогда
			Doc = App.OpenOrCreateByExDocID(БланкТ6, 0, PDate, , ИД+"E6", 0);
			Doc.IDParent = ИДПарент;
			Попытка
				Формирование_ЕСВ_ТАБ6(Doc, Бланк, Документ);
			Исключение
				Сообщить("Ошибка: ЕСВ, Таблица 6 не создана");
				Doc = App.MoveToTrash(ИД+"E6");
			КонецПопытки;
		Иначе
			Doc = App.MoveToTrash(ИД+"E6");
		КонецЕсли;	
		//создаем таб.7
		Если Приложения_таб4 = Истина Тогда
			Doc  = App.OpenOrCreateByExDocID(БланкТ7, 0, PDate, , ИД+"E7", 0);
			Doc.IDParent = ИДПарент;
			Попытка
				Формирование_ЕСВ_ТАБ7(Doc, Бланк, Документ);
			Исключение
				Сообщить("Ошибка: ЕСВ, Таблица 7 не создана");
				Doc = App.MoveToTrash(ИД+"E7");
			КонецПопытки;
		Иначе
			Doc = App.MoveToTrash(ИД+"E7");
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
//////////////////////////ДЕКЛАРАЦИЯ ЕДИНОГО НАЛОГА//////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

Процедура Формирование_ДекларацияЕН_ЮР(App,  Документ,  Бланк,  PDate,  ИД)
	
	Doc = App.OpenOrCreateByExDocID(Бланк, ОпределитьКодПериода(Документ), PDate, , ИД, 0);
	Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРасчетЕдиногоНалога;
	Doc.DisableScripts(); 	
	rsMain = Doc.DataSets();
	с = Новый Структура;
	
	НачалоОтчета(rsMain);      
	
	Если Бланк = "J0103507" Тогда
		
		Попытка
			rsMain.Fields.Item("H1KV").Value=?(ЗначениеЗаполнено(Док["H1KV"]),1,0);
			rsMain.Fields.Item("HHY").Value=?(ЗначениеЗаполнено(Док["HHY"]),1,0);
			rsMain.Fields.Item("H3KV").Value=?(ЗначениеЗаполнено(Док["H3KV"]),1,0);
			rsMain.Fields.Item("HY").Value=?(ЗначениеЗаполнено(Док["HY"]),1,0);
			rsMain.Fields.Item("HD").Value=?(ЗначениеЗаполнено(Док["HD"]),1,0);
			rsMain.Fields.Item("HMONTH").Value=?(ЗначениеЗаполнено(Док["HMONTH"]),1,0);
		Исключение
		      
		КонецПопытки;
		с.Вставить("NYEAR", "HZY");
		с.Вставить("A1_3", "R001G3");
		с.Вставить("A2_3", "R002G3");
		с.Вставить("A3_3", "R003G3");
		с.Вставить("A4_3", "R004G3");
		с.Вставить("A5_3", "R005G3");
		с.Вставить("A6_3", "R006G3");
		с.Вставить("A7_3", "R007G3");
		с.Вставить("A8_3", "R008G3");
		с.Вставить("A9_3", "R009G3");
		с.Вставить("A10_3", "R010G3");
		с.Вставить("A1_4", "R001G4");
		с.Вставить("A2_4", "R002G4");
		с.Вставить("A3_4", "R003G4");
		с.Вставить("A4_4", "R004G4");
		с.Вставить("A5_4", "R005G4");
		с.Вставить("A6_4", "R006G4");
		с.Вставить("A7_4", "R007G4");
		с.Вставить("A8_4", "R008G4");
		с.Вставить("A9_4", "R009G4");
		с.Вставить("A10_4", "R010G4");
		с.Вставить("A11", "R011G3");
		с.Вставить("A12", "R012G3");
		с.Вставить("A13", "R013G3");
		с.Вставить("A14", "R014G3");
		с.Вставить("A15", "R015G3");
		с.Вставить("A16", "R016G3");
		с.Вставить("A17", "R017G3");
		
	КонецЕсли;
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);	
	КонецОтчета(Doc);  
	
КонецПроцедуры

Процедура Формирование_ДекларацияЕН_ФОП(App,  Документ,  Бланк,  PDate,  ИД)
	
	Если Месяц(Документ.ДатаНачала)  =  Месяц(Документ.ДатаОкончания) Тогда
	    Doc = App.OpenOrCreateByExDocID(Бланк, 0, PDate, , ИД, 0);
	Иначе
		Doc = App.OpenOrCreateByExDocID(Бланк, ОпределитьКодПериода(Документ), PDate, , ИД, 0);
	КонецЕсли; 
	Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРасчетЕдиногоНалога;
	//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаДекларацияЕН;
	Doc.DisableScripts(); 	
	rsMain = Doc.DataSets();
	с = Новый Структура;
	
	НачалоОтчета(rsMain);      
	
	Если Бланк = "F0103306" Тогда
		
		Попытка
			rsMain.Fields.Item("H1KV").Value=?(ЗначениеЗаполнено(Док["H1KV"]),1,0);
			rsMain.Fields.Item("HHY").Value=?(ЗначениеЗаполнено(Док["HHY"]),1,0);
			rsMain.Fields.Item("H3KV").Value=?(ЗначениеЗаполнено(Док["H3KV"]),1,0);
			rsMain.Fields.Item("HY").Value=?(ЗначениеЗаполнено(Док["HY"]),1,0);
			rsMain.Fields.Item("HD").Value=?(ЗначениеЗаполнено(Док["HD"]),1,0);
			rsMain.Fields.Item("HMONTH").Value=?(ЗначениеЗаполнено(Док["HMONTH"]),1,0);
		Исключение
		      
		КонецПопытки;
		с.Вставить("REP_NYEAR", "HZY");
	
		с.Вставить("N1", "HNACTL");
	
		с.Вставить("A1_2", "R02G1");
		с.Вставить("A1_3", "R02G2");
		с.Вставить("A1_4", "R02G3");
		с.Вставить("A1_5", "R02G4");
		с.Вставить("A2_2", "R03G1");
		с.Вставить("A2_3", "R03G2");
		с.Вставить("A2_4", "R03G3");
		с.Вставить("A2_5", "R03G4");
		с.Вставить("A01", "R001G3");
		с.Вставить("A02", "R002G3");
		с.Вставить("A03", "R003G3");
		с.Вставить("A04", "R004G3");
		с.Вставить("A05", "R005G3");
		с.Вставить("A06", "R006G3");
		с.Вставить("A07", "R007G3");
		с.Вставить("A08", "R008G3");
		с.Вставить("A09", "R009G3");
		с.Вставить("A10", "R010G3");
		с.Вставить("A11", "R011G3");
		с.Вставить("A12", "R012G3");
		с.Вставить("A13", "R013G3");
		с.Вставить("A14", "R014G3");
		с.Вставить("A15", "R015G3");
		с.Вставить("A16", "R016G3");
		с.Вставить("A17", "R017G3");
		с.Вставить("A18", "R018G3");
		с.Вставить("A19", "R019G3");
		с.Вставить("A20", "R020G3");
		
	КонецЕсли;
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);	
	КонецОтчета(Doc);  
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
//////////////////////////////ДЕКЛАРАЦИЯ ПРИБЫЛЬ/////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

Функция Формирование_Декларация_Прибыль(App,  Документ,  Бланк,  PDate,  ИД)
	
	ИДПарент = 0;
	
	Если Бланк = "J0100116" Тогда
		 БланкАВ = "J0111616";
		 БланкЗП = "J0111416";
		 БланкПН = "J0111516";
		 БланкТЦ = "J0112816";
		 БланкВП = "J0111716";
		 БланкРИ = "J0111816";
		 БланкПЗ = "J0111316";
		 БланкАМ = "J0110616";
		 БланкЦП = "J0110316";
	КонецЕсли;
	
	Попытка
		Doc  = App.OpenOrCreateByExDocID(Бланк, ОпределитьКодПериода(Документ), PDate, , ИД, 0);
		ИДПарент = Формирование_Декларация_Прибыль_Главный(Doc, Бланк, Документ);
	Исключение
		Сообщить("Ошибка: Перечень таблиц не передался. Передача остановлена");
		Doc  = App.MoveToTrash(ИД);
	КонецПопытки;
	
	Если ИДПарент <> 0 Тогда
		//Додаток_АВ
	Если Приложения_таб1 = Истина Тогда
		Doc  = App.OpenOrCreateByExDocID(БланкАВ, ОпределитьКодПериода(Документ), PDate, , ИД+"-1", 0);
		Doc.IDParent = ИДПарент;	
	Попытка
			Формирование_Декларация_Прибыль_АВ(Doc, БланкАВ, Документ);
	Исключение
			Сообщить("Ошибка: Додаток АВ не создан");
			Doc  = App.MoveToTrash(ИД+"-1");
		КонецПопытки;
	Иначе	
		Doc  = App.MoveToTrash(ИД+"-1");
	КонецЕсли;
		//Додаток ЗП
	Если Приложения_таб2 = Истина Тогда
		ИД  =  Строка(Строка(Документ.УникальныйИдентификатор()));
		Doc  = App.OpenOrCreateByExDocID(БланкЗП, ОпределитьКодПериода(Документ), PDate, , ИД+"-2", 0);
		Doc.IDParent = ИДПарент;	
	Попытка
			Формирование_Декларация_Прибыль_ЗП(Doc, БланкЗП, Документ);
	Исключение
			Сообщить("Ошибка: Додаток ЗП не создан");
			Doc  = App.MoveToTrash(ИД+"-2");
		КонецПопытки;
	Иначе	
		Doc  = App.MoveToTrash(ИД+"-2");
	КонецЕсли;
		//Додаток ТЦ
	Если Приложения_таб4 = Истина Тогда
		Doc  = App.OpenOrCreateByExDocID(БланкТЦ, ОпределитьКодПериода(Документ), PDate, , ИД+"-4", 0);
		Doc.IDParent = ИДПарент;	
	Попытка
			Формирование_Декларация_Прибыль_ТЦ(Doc, БланкТЦ, Документ);
	Исключение
			Сообщить("Ошибка: Додаток ТЦ не создан");
			Doc  = App.MoveToTrash(ИД+"-4");
		КонецПопытки;
	Иначе	
		Doc  = App.MoveToTrash(ИД+"-4");
	КонецЕсли;	
		//Додаток ВП
	Если Приложения_таб5 = Истина Тогда
		Doc  = App.OpenOrCreateByExDocID(БланкВП, ОпределитьКодПериода(Документ), PDate, , ИД+"-5", 0);
		Doc.IDParent = ИДПарент;	
	Попытка
			Формирование_Декларация_Прибыль_ВП(Doc, БланкВП, Документ);
	Исключение
			Сообщить("Ошибка: Додаток ВП не создан");
			Doc  = App.MoveToTrash(ИД+"-5");
		КонецПопытки;
	Иначе	
		Doc  = App.MoveToTrash(ИД+"-5");
	КонецЕсли;
		//Додаток РИ
	Если Приложения_таб6 = Истина Тогда
		Doc  = App.OpenOrCreateByExDocID(БланкРИ, ОпределитьКодПериода(Документ), PDate, , ИД+"-6", 0);
		Doc.IDParent = ИДПарент;	
	Попытка
			Формирование_Декларация_Прибыль_РИ(Doc, БланкРИ, Документ);
	Исключение
			Сообщить("Ошибка: Додаток РИ не создан");
			Doc  = App.MoveToTrash(ИД+"-6");
		КонецПопытки;
	Иначе	
		Doc  = App.MoveToTrash(ИД+"-6");
	КонецЕсли;
		//Додаток ПЗ
	Если Приложения_таб7 = Истина Тогда
		Doc  = App.OpenOrCreateByExDocID(БланкПЗ, ОпределитьКодПериода(Документ), PDate, , ИД+"-7", 0);
		Doc.IDParent = ИДПарент;	
	Попытка
			Формирование_Декларация_Прибыль_ПЗ(Doc, БланкПЗ, Документ);
	Исключение
			Сообщить("Ошибка: Додаток ПЗ не создан");
			Doc  = App.MoveToTrash(ИД+"-7");
		КонецПопытки;
	Иначе	
		Doc  = App.MoveToTrash(ИД+"-7");
	КонецЕсли;
		//Додаток АМ
	Если Приложения_таб8 = Истина Тогда
		Doc  = App.OpenOrCreateByExDocID(БланкАМ, ОпределитьКодПериода(Документ), PDate, , ИД+"-8", 0);
		Doc.IDParent = ИДПарент;	
	Попытка
			Формирование_Декларация_Прибыль_АМ(Doc, БланкАМ, Документ);
	Исключение
			Сообщить("Ошибка: Додаток АМ не создан");
			Doc  = App.MoveToTrash(ИД+"-8");
		КонецПопытки;
	Иначе	
		Doc  = App.MoveToTrash(ИД+"-8");
	КонецЕсли;
		//Додаток ЦП
	Если Приложения_таб9 = Истина Тогда
		Doc  = App.OpenOrCreateByExDocID(БланкЦП, ОпределитьКодПериода(Документ), PDate, , ИД+"-9", 0);
		Doc.IDParent = ИДПарент;	
	Попытка
			Формирование_Декларация_Прибыль_ЦП(Doc, БланкЦП, Документ);
	Исключение
			Сообщить("Ошибка: Додаток ЦП не создан");
			Doc  = App.MoveToTrash(ИД+"-9");
		КонецПопытки;
	Иначе	
		Doc  = App.MoveToTrash(ИД+"-9");
	КонецЕсли;
		//Додаток ПН
	Если Приложения_таб3 = Истина Тогда
				
	Попытка
		Формирование_Декларация_Прибыль_ПН(Doc, Документ,App, PDate, ИД, ИДПарент, БланкПН);
	Исключение
		Сообщить("Ошибка: Додаток ПН не создан");
	КонецПопытки;
	Иначе	
		УдалитьПриложенияДекларацияОПрибыли(App, ИД)
	КонецЕсли;
	
КонецЕсли;

КонецФункции

Функция Формирование_Декларация_Прибыль_Главный(Doc, Бланк, Документ)
	
	ИДПарент = 0;
	Если Бланк = "J0100116"  Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаДекларация;
		rsMain = Doc.DataSets(); 
		НачалоОтчета(rsMain);	
		с = Новый Структура;
		
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		Если Док.H1KVP <> "" Тогда
			rsMain.Fields.Item("H1KVP").value = true;
		КонецЕсли;
		Если Док.HHYP <> "" Тогда
			rsMain.Fields.Item("HHYP").value = true;
		КонецЕсли;
		Если Док.H3KVP <> "" Тогда
			rsMain.Fields.Item("H3KVP").value = true;
		КонецЕсли;
		Если Док.H092 <> "" Тогда
			rsMain.Fields.Item("N6").value = true;
		КонецЕсли;
		Если Док.H093 <> "" Тогда
			rsMain.Fields.Item("N7").value = true;
		КонецЕсли;
		Если Док.H094 <> "" Тогда
			rsMain.Fields.Item("N8").value = true;
		КонецЕсли;
		Если Док.H095 <> "" Тогда
			rsMain.Fields.Item("N9").value = true;
		КонецЕсли;
		Если Док.H096 <> "" Тогда
			rsMain.Fields.Item("N10").value = true;
		КонецЕсли;
		Если Док.H097 <> "" Тогда
			rsMain.Fields.Item("N11").value = true;
		КонецЕсли;
		Если Док.H098 <> "" Тогда
			rsMain.Fields.Item("N12").value = true;
		КонецЕсли;
		Если Док.HLIQ <> "" Тогда
			rsMain.Fields.Item("N38").value = true;
		КонецЕсли;
		
		Если Док.HD1 <> "" Тогда
			rsMain.Fields.Item("N18").value = true;
		КонецЕсли;
		Если Док.HD2 <> "" Тогда
			rsMain.Fields.Item("N19").value = true;
		КонецЕсли;
		Если Док.HD4 <> "" Тогда
			rsMain.Fields.Item("N21").value = true;
		КонецЕсли;
		Если Док.HD5 <> "" Тогда
			rsMain.Fields.Item("N22").value = true;
		КонецЕсли;
		Если Док.HD6 <> "" Тогда
			rsMain.Fields.Item("N23").value = true;
		КонецЕсли;
		Если Док.HD7 <> "" Тогда
			rsMain.Fields.Item("N24").value = true;
		КонецЕсли;
		Если Док.HD8 <> "" Тогда
			rsMain.Fields.Item("N25").value = true;
		КонецЕсли;
		Если Док.HD9 <> "" Тогда
			rsMain.Fields.Item("N26").value = true;
		КонецЕсли;
		Если Док.HD10 <> "" Тогда
			rsMain.Fields.Item("N27").value = true;
		КонецЕсли;
		Если Док.HJ1 <> "" Тогда
			rsMain.Fields.Item("N1").value = true;
		КонецЕсли;
		Если Док.HJ2 <> "" Тогда
			rsMain.Fields.Item("N39").value = true;
		КонецЕсли;
		Если Док.HZYP <> 0 Тогда
			rsMain.Fields.Item("NYEARP").Value = Док.HZYP;
		Иначе
			rsMain.Fields.Item("NYEARP").Value = NULL;
		КонецЕсли; 
		
		Если Док.HF1 = "+" Тогда
			rsMain.Fields.Item("N29").Value = Истина;	
		КонецЕсли; 
		
		Если Док.HF2 = "+" Тогда
			rsMain.Fields.Item("N30").Value = Истина;	
		КонецЕсли; 
		
		Если Док.HF3 = "+" Тогда
			rsMain.Fields.Item("N31").Value = Истина;	
		КонецЕсли; 
		
		Если Док.HF4 = "+" Тогда
			rsMain.Fields.Item("N32").Value = Истина;	
		КонецЕсли; 
		
		Если Док.HF5 = "+" Тогда
			rsMain.Fields.Item("N33").Value = Истина;	
		КонецЕсли; 
		
		Если Док.HF6 = "+" Тогда
			rsMain.Fields.Item("N34").Value = Истина;	
		КонецЕсли; 
		
		Если Док.HF7 = "+" Тогда
			rsMain.Fields.Item("N35").Value = Истина;	
		КонецЕсли; 
		
		Если Док.HF8 = "+" Тогда
			rsMain.Fields.Item("N36").Value = Истина;	
		КонецЕсли; 
		
		Если Док.HF9 = "+" Тогда
			rsMain.Fields.Item("N37").Value = Истина;	
		КонецЕсли; 		
		с.Вставить("A01", "R001G3");
		с.Вставить("A02", "R002G3");
		с.Вставить("A03", "R003G3");
		с.Вставить("A04", "R004G3");
		с.Вставить("A05", "R005G3");
		с.Вставить("N13", "R006G1");
		с.Вставить("A06", "R006G3");
		с.Вставить("A07", "R007G3");
		с.Вставить("A071", "R0071G3");
		с.Вставить("A072", "R0072G3");
		с.Вставить("N14", "R008G1");
		с.Вставить("A08", "R008G3");
		с.Вставить("A09", "R009G3");
		с.Вставить("A091", "R0091G3");
		с.Вставить("A0911", "R00911G3");
		с.Вставить("A0912", "R00912G3");
		с.Вставить("A092", "R0092G3");
		с.Вставить("N15", "R010G1");
		с.Вставить("A10", "R010G3");
		с.Вставить("A11", "R011G3");
		с.Вставить("N16", "R012G1");
		с.Вставить("A12", "R012G3");
		с.Вставить("A13", "R013G3");
		с.Вставить("A14", "R014G3");
		с.Вставить("N17", "R015G1");
		с.Вставить("A15", "R015G3");
		с.Вставить("A16", "R016G3");
		с.Вставить("A17", "R017G3");
		с.Вставить("A18", "R018G3");
		с.Вставить("A19", "R019G3");
		с.Вставить("A20", "R020G3");
		с.Вставить("A21", "R021G3");
		с.Вставить("A22", "R022G3");
		с.Вставить("A23", "R023G3");
		с.Вставить("A24", "R024G3");
		с.Вставить("A25", "R025G3");
		с.Вставить("A26", "R026G3");
		с.Вставить("A27", "R027G3");
		с.Вставить("A28", "R028G3");
		с.Вставить("A29", "R029G3");
		с.Вставить("A30", "R030G3");
		с.Вставить("A31", "R031G3");
		с.Вставить("A32", "R032G3");
		с.Вставить("A33", "R033G3");
		с.Вставить("A34", "R034G3");
		с.Вставить("N20", "HD3");
		с.Вставить("N28", "HPAGES");
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);	
		
		rsMain = Doc.DataSets("TAB1");
		rsMain.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки = 1;
		
		Пока ДобавитьНовуюСтроку Цикл
			Если  НомерСтроки > 0 и НомерСтроки < 10 Тогда
				Ноль = "00000"
			ИначеЕсли НомерСтроки >= 10 и НомерСтроки < 100 Тогда
				Ноль = "0000" 	
			ИначеЕсли НомерСтроки >= 100 и НомерСтроки < 1000 Тогда
				Ноль = "000"
			ИначеЕсли НомерСтроки >= 1000 и НомерСтроки < 10000 Тогда
				Ноль = "00"
			ИначеЕсли НомерСтроки >= 10000 и НомерСтроки < 100000 Тогда
				Ноль = "0"
			Иначе 
				Ноль = ""
			КонецЕсли;
			
			СуществуетСтрока = Ложь;
			rsMain.Edit();
			Для Каждого Поле Из Док Цикл	
				Если Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G2S") = 1 Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A2").Value = Поле.Значение;
				КонецЕсли;
			КонецЦикла;
			rsMain.Post();
			
			Если СуществуетСтрока = Истина тогда	
				rsMain.Append();
				НомерСтроки = НомерСтроки + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsMain.Delete();
			КонецЕсли;
			
		КонецЦикла;	
		//TAB2
		rsMain = Doc.DataSets("TAB2");
		rsMain.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтрокиТ = 1;
		
		Пока ДобавитьНовуюСтроку Цикл
			Если  НомерСтрокиТ > 0 и НомерСтрокиТ < 10 Тогда
				Ноль = "00000"
			ИначеЕсли НомерСтрокиТ >= 10 и НомерСтрокиТ < 100 Тогда
				Ноль = "0000" 	
			ИначеЕсли НомерСтрокиТ >= 100 и НомерСтрокиТ < 1000 Тогда
				Ноль = "000"
			ИначеЕсли НомерСтрокиТ >= 1000 и НомерСтрокиТ < 10000 Тогда
				Ноль = "00"
			ИначеЕсли НомерСтрокиТ >= 10000 и НомерСтрокиТ < 100000 Тогда
				Ноль = "0"
			Иначе 
				Ноль = ""
			КонецЕсли;
			
			СуществуетСтрока = Ложь;
			rsMain.Edit();
			Для Каждого Поле Из Док Цикл	
				Если Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G2S") = 1 Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB2_A2").Value = Поле.Значение;
				КонецЕсли;
			КонецЦикла;
			rsMain.Post();
			
			Если СуществуетСтрока = Истина тогда	
				rsMain.Append();
				НомерСтрокиТ = НомерСтрокиТ + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsMain.Delete();
			КонецЕсли;
		КонецЦикла;
		КонецОтчета(Doc);
		ИДПарент = Doc.CardCode;	
	КонецЕсли;	
	Возврат ИДПарент;
	
КонецФункции

Процедура Формирование_Декларация_Прибыль_АВ(Doc, БланкАВ, Документ)
	
	Если БланкАВ="J0111616" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложениеАВ;	
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		с.Вставить("A1", "R001G3");
		с.Вставить("A11", "R011G3");
		с.Вставить("A12", "R012G3");
		с.Вставить("A13", "R013G3");
		с.Вставить("A14", "R014G3");
		с.Вставить("A15", "R015G3");
		с.Вставить("A2", "R002G3");
		с.Вставить("A3", "R003G3");
		с.Вставить("A4", "R004G3");
		с.Вставить("A5", "R005G3");
		с.Вставить("N1", "R006G1");
		с.Вставить("A6", "R006G3");
				
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		КонецОтчета(Doc);		
	КонецЕсли;
	
		
КонецПроцедуры

Процедура Формирование_Декларация_Прибыль_ЗП(Doc, БланкЗП, Документ)
	
	Если БланкЗП="J0111416" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложениеЗП;	
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		с.Вставить("A16", "R016G3");
		с.Вставить("A161", "R0161G3");
		с.Вставить("A162", "R0162G3");
		с.Вставить("A163", "R0163G3");
		с.Вставить("A164", "R0164G3");
		с.Вставить("A1641", "R01641G3");
		с.Вставить("A1642", "R01642G3");
				
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		КонецОтчета(Doc);		
	КонецЕсли;
	
		
КонецПроцедуры

Процедура Формирование_Декларация_Прибыль_ТЦ(Doc, БланкТЦ, Документ)
	
	Если БланкТЦ="J0112816" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложениеТЦ;	
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
			
		с.Вставить("A1_14", "R01G14");
		с.Вставить("A1_15", "R01G15");
		с.Вставить("A1_16", "R01G16");
		с.Вставить("A1_17", "R01G17");
		с.Вставить("A2_14", "R02G14");
		с.Вставить("A2_15", "R02G15");
		с.Вставить("A2_16", "R02G16");
		с.Вставить("A2_17", "R02G17");
				
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);

		
	rsMain = Doc.DataSets("TAB1");
	rsMain.Clear();
	ДобавитьНовуюСтроку = Истина;
	НомерСтроки = 1;

	Пока ДобавитьНовуюСтроку Цикл
		Если  НомерСтроки > 0 и НомерСтроки < 10 Тогда
			 Ноль = "00000"
		ИначеЕсли НомерСтроки >= 10 и НомерСтроки < 100 Тогда
			 Ноль = "0000" 	
		 ИначеЕсли НомерСтроки >= 100 и НомерСтроки < 1000 Тогда
			 Ноль = "000"
		 ИначеЕсли НомерСтроки >= 1000 и НомерСтроки < 10000 Тогда
			 Ноль = "00"
		 ИначеЕсли НомерСтроки >= 10000 и НомерСтроки < 100000 Тогда
			 Ноль = "0"
		 Иначе 
			 Ноль = ""
		КонецЕсли;
		
	СуществуетСтрока = Ложь;
		rsMain.Edit();
		Для Каждого Поле Из Док Цикл	
			Если Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G1S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A1").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G2S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A2").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G3D") = 1 Тогда
			 Если Поле.Значение <> Дата(1,1,1) Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A3").Value = Поле.Значение;
		     КонецЕсли;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G4S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A4").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G5S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A5").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G6S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A6").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G7S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A7").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G8S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A8").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G9S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A9").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G10D") = 1 Тогда
				Если Поле.Значение <> Дата(1,1,1) Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A10").Value = Поле.Значение;
				КонецЕсли;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G11D") = 1 Тогда
				Если Поле.Значение <> Дата(1,1,1) Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A11").Value = Поле.Значение;
				КонецЕсли;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G12S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A12").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G13") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A13").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G14") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A14").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G15") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A15").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G16") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A16").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G17") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A17").Value = Поле.Значение;
    		КонецЕсли;
		КонецЦикла;
		rsMain.Post();
		
		Если СуществуетСтрока = Истина тогда	
			rsMain.Append();
			НомерСтроки = НомерСтроки + 1;
		Иначе
			ДобавитьНовуюСтроку = Ложь;
			rsMain.Delete();
		КонецЕсли;
		
	КонецЦикла;	
	//TAB2
	rsMain = Doc.DataSets("TAB2");
	rsMain.Clear();
	ДобавитьНовуюСтроку = Истина;
	НомерСтрокиТ = 1;

	Пока ДобавитьНовуюСтроку Цикл
		Если  НомерСтрокиТ > 0 и НомерСтрокиТ < 10 Тогда
			 Ноль = "00000"
		ИначеЕсли НомерСтрокиТ >= 10 и НомерСтрокиТ < 100 Тогда
			 Ноль = "0000" 	
		 ИначеЕсли НомерСтрокиТ >= 100 и НомерСтрокиТ < 1000 Тогда
			 Ноль = "000"
		 ИначеЕсли НомерСтрокиТ >= 1000 и НомерСтрокиТ < 10000 Тогда
			 Ноль = "00"
		 ИначеЕсли НомерСтрокиТ >= 10000 и НомерСтрокиТ < 100000 Тогда
			 Ноль = "0"
		 Иначе 
			 Ноль = ""
		КонецЕсли;
		
	СуществуетСтрока = Ложь;
		rsMain.Edit();
		Для Каждого Поле Из Док Цикл	
			Если Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G1S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A1").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтрокиТ+"G2S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A2").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G3D") = 1 Тогда
			 Если Поле.Значение <> Дата(1,1,1) Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A3").Value = Поле.Значение;
		     КонецЕсли;
			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G4S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A4").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G5S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A5").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G6S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A6").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G7S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A7").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G8S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A8").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G9S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A9").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G10D") = 1 Тогда
				Если Поле.Значение <> Дата(1,1,1) Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A10").Value = Поле.Значение;
				КонецЕсли;
			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G11D") = 1 Тогда
				Если Поле.Значение <> Дата(1,1,1) Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A11").Value = Поле.Значение;
				КонецЕсли;
			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G12S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A12").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G13") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A13").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G14") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A14").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G15") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A15").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G16") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A16").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G17") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A17").Value = Поле.Значение;
			КонецЕсли;
		КонецЦикла;
		rsMain.Post();
		
		Если СуществуетСтрока = Истина тогда	
			rsMain.Append();
			НомерСтрокиТ = НомерСтрокиТ + 1;
		Иначе
			ДобавитьНовуюСтроку = Ложь;
			rsMain.Delete();
		КонецЕсли;
	КонецЦикла;
		КонецОтчета(Doc);		
	КонецЕсли;
	
		
КонецПроцедуры

Процедура Формирование_Декларация_Прибыль_ВП(Doc, БланкВП, Документ)
	
	Если БланкВП="J0111716" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложениеВП;	
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		с.Вставить("A01", "R001G3");
		с.Вставить("A02", "R002G3");
		с.Вставить("A03", "R003G3");
		с.Вставить("A04", "R004G3");
		с.Вставить("A05", "R005G3");
		с.Вставить("A06", "R006G3");
		с.Вставить("A07", "R007G3");
		с.Вставить("A071", "R0071G3");
		с.Вставить("A072", "R0072G3");
		с.Вставить("A08", "R008G3");
		с.Вставить("A09", "R009G3");
		с.Вставить("A091", "R0091G3");
		с.Вставить("A0911", "R00911G3");
		с.Вставить("A0912", "R00912G3");
		с.Вставить("A092", "R0092G3");
		с.Вставить("A10", "R010G3");
		с.Вставить("A11", "R011G3");
		с.Вставить("A12", "R012G3");
		с.Вставить("A13", "R013G3");
		с.Вставить("A14", "R014G3");
		с.Вставить("A15", "R015G3");
		с.Вставить("A16", "R016G3");
		с.Вставить("A17", "R017G3");
		с.Вставить("A18", "R018G3");
		с.Вставить("A19", "R019G3");
		с.Вставить("A20", "R020G3");
		с.Вставить("A21", "R021G3");
		с.Вставить("A22", "R022G3");
		с.Вставить("A23", "R023G3");
		с.Вставить("A24", "R024G3");
		с.Вставить("A25", "R025G3");
		с.Вставить("A26", "R026G3");
		с.Вставить("A27", "R027G3");
		с.Вставить("A28", "R028G3");
		с.Вставить("A29", "R029G3");
		с.Вставить("A30", "R030G3");
		с.Вставить("A31", "R031G3");
		с.Вставить("A32", "R032G3");
				
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		КонецОтчета(Doc);		
	КонецЕсли;
	
		
КонецПроцедуры

Процедура Формирование_Декларация_Прибыль_РИ(Doc, БланкРИ, Документ)
	
	Если БланкРИ="J0111816" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложениеРИ;	
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		с.Вставить("A111", "R0111G3");
		с.Вставить("A121", "R0121G3");
		с.Вставить("A1111", "R01111G3");
		с.Вставить("A1211", "R01211G3");
		с.Вставить("A1212", "R01212G3");
		с.Вставить("A112", "R0112G3");
		с.Вставить("A122", "R0122G3");
		с.Вставить("A113", "R0113G3");
		с.Вставить("A123", "R0123G3");
		с.Вставить("A114", "R0114G3");
		с.Вставить("A211", "R0211G3");
		с.Вставить("A221", "R0221G3");
		с.Вставить("A2211", "R02211G3");
		с.Вставить("A212", "R0212G3");
		с.Вставить("A222", "R0222G3");
		с.Вставить("A223", "R0223G3");
		с.Вставить("A213", "R0213G3");
		с.Вставить("A214", "R0214G3");
		с.Вставить("A224", "R0224G3");
		с.Вставить("A215", "R0215G3");
		с.Вставить("A225", "R0225G3");
		с.Вставить("A226", "R0226G3");
		с.Вставить("A227", "R0227G3");
		с.Вставить("A311", "R0311G3");
		с.Вставить("A321", "R0321G3");
		с.Вставить("A322", "R0322G3");
		с.Вставить("A3221", "R03221G3");
		с.Вставить("A323", "R0323G3");
		с.Вставить("A324", "R0324G3");
		с.Вставить("A312", "R0312G3");
		с.Вставить("A313", "R0313G3");
		с.Вставить("A314", "R0314G3");
		с.Вставить("A315", "R0315G3");
		с.Вставить("A316", "R0316G3");
		с.Вставить("A317", "R0317G3");
		с.Вставить("A318", "R0318G3");
		с.Вставить("A319", "R0319G3");
		с.Вставить("A3110", "R03110G3");
		с.Вставить("A3111", "R03111G3");
		с.Вставить("A3112", "R03112G3");
		с.Вставить("A411", "R0411G3");
		с.Вставить("A421", "R0421G3");
		с.Вставить("A412", "R0412G3");
		с.Вставить("A422", "R0422G3");
		с.Вставить("A413", "R0413G3");
		с.Вставить("A414", "R0414G3");
		с.Вставить("A415", "R0415G3");
		с.Вставить("A423", "R0423G3");
		с.Вставить("A424", "R0424G3");
		с.Вставить("A425", "R0425G3");
		с.Вставить("A426", "R0426G3");
		с.Вставить("A416", "R0416G3");
		с.Вставить("A417", "R0417G3");
		с.Вставить("A418", "R0418G3");
		с.Вставить("A419", "R0419G3");
		с.Вставить("A4110", "R04110G3");
		с.Вставить("A4111", "R04111G3");
		с.Вставить("A4112", "R04112G3");
		с.Вставить("A427", "R0427G3");
		с.Вставить("A4113", "R04113G3");
		с.Вставить("A428", "R0428G3");
		с.Вставить("A4114", "R04114G3");
		с.Вставить("A429", "R0429G3");
		с.Вставить("A4115", "R04115G3");
		с.Вставить("A4210", "R04210G3");
		с.Вставить("A4116", "R04116G3");
		с.Вставить("A4211", "R04211G3");
		с.Вставить("A4212", "R04212G3");
		с.Вставить("A4117", "R04117G3");
		с.Вставить("A4213", "R04213G3");
		с.Вставить("A4214", "R04214G3");
		с.Вставить("A4215", "R04215G3");
		с.Вставить("A4216", "R04216G3");
		с.Вставить("A01", "R001G3");
		с.Вставить("A02", "R002G3");
		с.Вставить("A03", "R003G3");
				
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		КонецОтчета(Doc);		
	КонецЕсли;
	
		
КонецПроцедуры

Процедура Формирование_Декларация_Прибыль_ПЗ(Doc, БланкПЗ, Документ)
	
	Если БланкПЗ="J0111316" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложениеПЗ;	
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
			
		с.Вставить("A05", "R005G3");
				
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);

		
	rsMain = Doc.DataSets("TAB1");
	rsMain.Clear();
	ДобавитьНовуюСтроку = Истина;
	НомерСтроки = 1;

	Пока ДобавитьНовуюСтроку Цикл
		Если  НомерСтроки > 0 и НомерСтроки < 10 Тогда
			 Ноль = "00000"
		ИначеЕсли НомерСтроки >= 10 и НомерСтроки < 100 Тогда
			 Ноль = "0000" 	
		 ИначеЕсли НомерСтроки >= 100 и НомерСтроки < 1000 Тогда
			 Ноль = "000"
		 ИначеЕсли НомерСтроки >= 1000 и НомерСтроки < 10000 Тогда
			 Ноль = "00"
		 ИначеЕсли НомерСтроки >= 10000 и НомерСтроки < 100000 Тогда
			 Ноль = "0"
		 Иначе 
			 Ноль = ""
		КонецЕсли;
		
	СуществуетСтрока = Ложь;   
		rsMain.Edit();
		Для Каждого Поле Из Док Цикл
			
			Если Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G1") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A4").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G2") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A1").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G3") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A2").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G4") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB1_A3").Value = Поле.Значение;
				 
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"K1") = 1 Тогда
					 СуществуетСтрока = Истина;
					 rsMain.Fields.Item("TAB1_A6").Value = СтрЗаменить(Поле.Значение, "05.", "");
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"K2") = 1 Тогда
					 СуществуетСтрока = Истина;
					 rsMain.Fields.Item("TAB1_A5").Value = Лев(Поле.Значение, 1);
			 КонецЕсли;
		КонецЦикла;
		rsMain.Post();
		
		Если СуществуетСтрока = Истина тогда	
			rsMain.Append();
			НомерСтроки = НомерСтроки + 1;
		Иначе
			ДобавитьНовуюСтроку = Ложь;
			rsMain.Delete();
		КонецЕсли;
		
	КонецЦикла;	
	//TAB2
	rsMain = Doc.DataSets("TAB2");
	rsMain.Clear();
	ДобавитьНовуюСтроку = Истина;
	НомерСтрокиТ = 1;

	Пока ДобавитьНовуюСтроку Цикл
		Если  НомерСтрокиТ > 0 и НомерСтрокиТ < 10 Тогда
			 Ноль = "00000"
		ИначеЕсли НомерСтрокиТ >= 10 и НомерСтрокиТ < 100 Тогда
			 Ноль = "0000" 	
		 ИначеЕсли НомерСтрокиТ >= 100 и НомерСтрокиТ < 1000 Тогда
			 Ноль = "000"
		 ИначеЕсли НомерСтрокиТ >= 1000 и НомерСтрокиТ < 10000 Тогда
			 Ноль = "00"
		 ИначеЕсли НомерСтрокиТ >= 10000 и НомерСтрокиТ < 100000 Тогда
			 Ноль = "0"
		 Иначе 
			 Ноль = ""
		КонецЕсли;
		
	СуществуетСтрока = Ложь;
		rsMain.Edit();                        
		 Для Каждого Поле Из Док Цикл	
			Если Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G2S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A2").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G3S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A3").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G4S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A4").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G5S") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A5").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G6") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A6").Value = Поле.Значение;
			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтрокиТ+"K2") = 1 Тогда
				 СуществуетСтрока = Истина;
				 rsMain.Fields.Item("TAB2_A1").Value = Лев(Поле.Значение, 1);
			КонецЕсли;
		КонецЦикла;
		rsMain.Post();
		
		Если СуществуетСтрока = Истина тогда	
			rsMain.Append();
			НомерСтрокиТ = НомерСтрокиТ + 1;
		Иначе
			ДобавитьНовуюСтроку = Ложь;
			rsMain.Delete();
		КонецЕсли;
	КонецЦикла;
		КонецОтчета(Doc);		
	КонецЕсли;
	
		
КонецПроцедуры

Процедура Формирование_Декларация_Прибыль_АМ(Doc, БланкАМ, Документ)
	
	Если БланкАМ="J0110616" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложениеАМ;	
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		с.Вставить("A1_3", "R0101G3");
		с.Вставить("A1_4", "R0101G4");
		с.Вставить("A1_5", "R0101G5");
		с.Вставить("A2_3", "R0102G3");
		с.Вставить("A2_4", "R0102G4");
		с.Вставить("A2_5", "R0102G5");
		с.Вставить("A3_3", "R0103G3");
		с.Вставить("A3_4", "R0103G4");
		с.Вставить("A3_5", "R0103G5");
		с.Вставить("A4_3", "R0104G3");
		с.Вставить("A4_4", "R0104G4");
		с.Вставить("A4_5", "R0104G5");
		с.Вставить("A5_3", "R0105G3");
		с.Вставить("A5_4", "R0105G4");
		с.Вставить("A5_5", "R0105G5");
		с.Вставить("A6_3", "R0106G3");
		с.Вставить("A6_4", "R0106G4");
		с.Вставить("A6_5", "R0106G5");
		с.Вставить("A7_3", "R0107G3");
		с.Вставить("A7_4", "R0107G4");
		с.Вставить("A7_5", "R0107G5");
		с.Вставить("A8_3", "R0108G3");
		с.Вставить("A8_4", "R0108G4");
		с.Вставить("A8_5", "R0108G5");
		с.Вставить("A9_3", "R0109G3");
		с.Вставить("A9_4", "R0109G4");
		с.Вставить("A9_5", "R0109G5");
		с.Вставить("A10_3", "R0110G3");
		с.Вставить("A10_4", "R0110G4");
		с.Вставить("A10_5", "R0110G5");
		с.Вставить("A11_3", "R0111G3");
		с.Вставить("A11_4", "R0111G4");
		с.Вставить("A11_5", "R0111G5");
		с.Вставить("A12_3", "R0112G3");
		с.Вставить("A12_4", "R0112G4");
		с.Вставить("A12_5", "R0112G5");
		с.Вставить("A13_3", "R0113G3");
		с.Вставить("A13_4", "R0113G4");
		с.Вставить("A13_5", "R0113G5");
		с.Вставить("A14_3", "R0114G3");
		с.Вставить("A14_4", "R0114G4");
		с.Вставить("A14_5", "R0114G5");
		с.Вставить("A15_3", "R0115G3");
		с.Вставить("A15_4", "R0115G4");
		с.Вставить("A15_5", "R0115G5");
		с.Вставить("A16_3", "R0116G3");
		с.Вставить("A16_4", "R0116G4");
		с.Вставить("A16_5", "R0116G5");
		с.Вставить("A17_3", "R0117G3");
		с.Вставить("A17_4", "R0117G4");
		с.Вставить("A17_5", "R0117G5");
		с.Вставить("H1_2", "R0201G2");
		с.Вставить("H1_3", "R0201G3");
		с.Вставить("H1_4", "R0201G4");
		с.Вставить("H1_5", "R0201G5");
		с.Вставить("H2_2", "R0202G2");
		с.Вставить("H2_3", "R0202G3");
		с.Вставить("H2_4", "R0202G4");
		с.Вставить("H2_5", "R0202G5");
		с.Вставить("H3_2", "R0203G2");
		с.Вставить("H3_3", "R0203G3");
		с.Вставить("H3_4", "R0203G4");
		с.Вставить("H3_5", "R0203G5");
		с.Вставить("H4_2", "R0204G2");
		с.Вставить("H4_3", "R0204G3");
		с.Вставить("H4_4", "R0204G4");
		с.Вставить("H4_5", "R0204G5");
		с.Вставить("H5_2", "R0205G2");
		с.Вставить("H5_3", "R0205G3");
		с.Вставить("H5_4", "R0205G4");
		с.Вставить("H5_5", "R0205G5");
		с.Вставить("H6_2", "R0206G2");
		с.Вставить("H6_3", "R0206G3");
		с.Вставить("H6_4", "R0206G4");
		с.Вставить("H6_5", "R0206G5");
		с.Вставить("H7_3", "R0207G3");
		с.Вставить("H7_4", "R0207G4");
		с.Вставить("H7_5", "R0207G5");
		с.Вставить("A121", "R00121G3");
				
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		КонецОтчета(Doc);		
	КонецЕсли;
	
		
КонецПроцедуры

Процедура Формирование_Декларация_Прибыль_ЦП(Doc, БланкЦП, Документ)
	
	Если БланкЦП="J0110316" Тогда
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложениеЦП;	
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		с.Вставить("A01", "R01G3");
		с.Вставить("A011", "R011G3");
		с.Вставить("A0111", "R0111G3");
		с.Вставить("A012", "R012G3");
		с.Вставить("A0121", "R0121G3");
		с.Вставить("A013", "R013G3");
		с.Вставить("A014", "R014G3");
		с.Вставить("A015", "R015G3");
		с.Вставить("A016", "R016G3");
		с.Вставить("A017", "R017G3");
		с.Вставить("A018", "R018G3");
		с.Вставить("A019", "R019G3");
		с.Вставить("A0110", "R0110G3");
		с.Вставить("A01111", "R01110G3");
		с.Вставить("A0112", "R0112G3");
		с.Вставить("A0113", "R0113G3");
		с.Вставить("A02", "R02G3");
		с.Вставить("A021", "R021G3");
		с.Вставить("A0211", "R0211G3");
		с.Вставить("A022", "R022G3");
		с.Вставить("A0221", "R0221G3");
		с.Вставить("A023", "R023G3");
		с.Вставить("A024", "R024G3");
		с.Вставить("A025", "R025G3");
		с.Вставить("A026", "R026G3");
		с.Вставить("A027", "R027G3");
		с.Вставить("A028", "R028G3");
		с.Вставить("A029", "R029G3");
		с.Вставить("A0210", "R0210G3");
		с.Вставить("A02111", "R02110G3");
		с.Вставить("A0212", "R0212G3");
		с.Вставить("A0213", "R0213G3");
		с.Вставить("A03", "R03G3");
		с.Вставить("A413", "R0413G3");
		с.Вставить("A4131", "R04131G3");
		с.Вставить("A4132", "R04132G3");
		с.Вставить("A04", "R04G3");
		с.Вставить("A414", "R0414G3");

			
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		КонецОтчета(Doc);		
	КонецЕсли;
	
		
КонецПроцедуры

Функция Формирование_Декларация_Прибыль_ПН(Doc, Документ, App,  PDate,  ИД, ИДПарент, БланкПН)
	
	Если БланкПН = "J0111516" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.ПриложениеПН;
		НомерСтроки = 1;
		НомерСтрокиН = 0;
		СуществуетСтрока = Ложь;
		НомерДод = 1;
		
		Для Каждого Поле Из Док Цикл	
			
			НовыйИд = ИД + НомерДод;
			Doc  = App.OpenOrCreateByExDocID(БланкПН, ОпределитьКодПериода(Документ), PDate, , НовыйИд, 0);
			Doc.IDParent = ИДПарент;	
			rsMain = Doc.DataSets();	
			НачалоОтчета(rsMain);
			//ДобавитьНовуюСтроку = Истина;
			
			rsMain.Fields.Item("A1_3").Value = Поле.Данные.R0101G3;
			rsMain.Fields.Item("A2_3").Value = Поле.Данные.R0102G3;
			rsMain.Fields.Item("A3_3").Value = Поле.Данные.R0103G3;
			rsMain.Fields.Item("A4_3").Value = Поле.Данные.R0104G3;
			rsMain.Fields.Item("A5_3").Value = Поле.Данные.R0105G3;
			rsMain.Fields.Item("A6_3").Value = Поле.Данные.R0106G3;
			rsMain.Fields.Item("A7_3").Value = Поле.Данные.R0107G3;
			rsMain.Fields.Item("A8_3").Value = Поле.Данные.R0108G3;
			rsMain.Fields.Item("A9_3").Value = Поле.Данные.R0109G3;
			rsMain.Fields.Item("A10_3").Value = Поле.Данные.R0110G3;
			rsMain.Fields.Item("A11_3").Value = Поле.Данные.R0111G3;
			rsMain.Fields.Item("A12_3").Value = Поле.Данные.R0112G3;
			rsMain.Fields.Item("A13_3").Value = Поле.Данные.R0113G3;
			rsMain.Fields.Item("A14_3").Value = Поле.Данные.R0114G3;
			rsMain.Fields.Item("A15_3").Value = Поле.Данные.R0115G3;
			rsMain.Fields.Item("A16_3").Value = Поле.Данные.R0116G3;
			rsMain.Fields.Item("A17_3").Value = Поле.Данные.R0117G3;
			rsMain.Fields.Item("A18_3").Value = Поле.Данные.R0118G3;
			rsMain.Fields.Item("A19_3").Value = Поле.Данные.R0119G3;
			rsMain.Fields.Item("A20_3").Value = Поле.Данные.R0120G3;
			rsMain.Fields.Item("A21_3").Value = Поле.Данные.R0121G3;
			rsMain.Fields.Item("A22_3").Value = Поле.Данные.R0122G3;
			rsMain.Fields.Item("A23_3").Value = Поле.Данные.R0123G3;
			rsMain.Fields.Item("A24_3").Value = Поле.Данные.R0124G3;
			rsMain.Fields.Item("A25_3").Value = Поле.Данные.R0125G3;
			rsMain.Fields.Item("A26_3").Value = Поле.Данные.R0126G3;
			rsMain.Fields.Item("A27_3").Value = Поле.Данные.R0127G3;
			rsMain.Fields.Item("A0_3").Value = Поле.Данные.R0128G3;
			rsMain.Fields.Item("A1_5").Value = Поле.Данные.R0101G5;
			rsMain.Fields.Item("A2_5").Value = Поле.Данные.R0102G5;
			rsMain.Fields.Item("A3_5").Value = Поле.Данные.R0103G5;
			rsMain.Fields.Item("A4_5").Value = Поле.Данные.R0104G5;
			rsMain.Fields.Item("A5_5").Value = Поле.Данные.R0105G5;
			rsMain.Fields.Item("A6_5").Value = Поле.Данные.R0106G5;
			rsMain.Fields.Item("A7_5").Value = Поле.Данные.R0107G5;
			rsMain.Fields.Item("A8_5").Value = Поле.Данные.R0108G5;
			rsMain.Fields.Item("A9_5").Value = Поле.Данные.R0109G5;
			rsMain.Fields.Item("A10_5").Value = Поле.Данные.R0110G5;
			rsMain.Fields.Item("A11_5").Value = Поле.Данные.R0111G5;
			rsMain.Fields.Item("A12_5").Value = Поле.Данные.R0112G5;
			rsMain.Fields.Item("A13_5").Value = Поле.Данные.R0113G5;
			rsMain.Fields.Item("A14_5").Value = Поле.Данные.R0114G5;
			rsMain.Fields.Item("A15_5").Value = Поле.Данные.R0115G5;
			rsMain.Fields.Item("A16_5").Value = Поле.Данные.R0116G5;
			rsMain.Fields.Item("A17_5").Value = Поле.Данные.R0117G5;
			rsMain.Fields.Item("A18_5").Value = Поле.Данные.R0118G5;
			rsMain.Fields.Item("A19_5").Value = Поле.Данные.R0119G5;
			rsMain.Fields.Item("A20_5").Value = Поле.Данные.R0120G5;
			rsMain.Fields.Item("A21_5").Value = Поле.Данные.R0121G5;
			rsMain.Fields.Item("A24_5").Value = Поле.Данные.R0124G5;
			rsMain.Fields.Item("A1_6").Value = Поле.Данные.R0101G6;
			rsMain.Fields.Item("A2_6").Value = Поле.Данные.R0102G6;
			rsMain.Fields.Item("A3_6").Value = Поле.Данные.R0103G6;
			rsMain.Fields.Item("A4_6").Value = Поле.Данные.R0104G6;
			rsMain.Fields.Item("A5_6").Value = Поле.Данные.R0105G6;
			rsMain.Fields.Item("A6_6").Value = Поле.Данные.R0106G6;
			rsMain.Fields.Item("A7_6").Value = Поле.Данные.R0107G6;
			rsMain.Fields.Item("A8_6").Value = Поле.Данные.R0108G6;
			rsMain.Fields.Item("A9_6").Value = Поле.Данные.R0109G6;
			rsMain.Fields.Item("A10_6").Value = Поле.Данные.R0110G6;
			rsMain.Fields.Item("A11_6").Value = Поле.Данные.R0111G6;
			rsMain.Fields.Item("A12_6").Value = Поле.Данные.R0112G6;
			rsMain.Fields.Item("A13_6").Value = Поле.Данные.R0113G6;
			rsMain.Fields.Item("A14_6").Value = Поле.Данные.R0114G6;
			rsMain.Fields.Item("A15_6").Value = Поле.Данные.R0115G6;
			rsMain.Fields.Item("A16_6").Value = Поле.Данные.R0116G6;
			rsMain.Fields.Item("A17_6").Value = Поле.Данные.R0117G6;
			rsMain.Fields.Item("A18_6").Value = Поле.Данные.R0118G6;
			rsMain.Fields.Item("A19_6").Value = Поле.Данные.R0119G6;
			rsMain.Fields.Item("A20_6").Value = Поле.Данные.R0120G6;
			rsMain.Fields.Item("A21_6").Value = Поле.Данные.R0121G6;
			rsMain.Fields.Item("A24_6").Value = Поле.Данные.R0124G6;
			rsMain.Fields.Item("A0_6").Value = Поле.Данные.R0128G6;
			rsMain.Fields.Item("A02_5").Value = Поле.Данные.R0216G5;
			rsMain.Fields.Item("A02_6").Value = Поле.Данные.R0216G6; 
			
			rsTab = Doc.DataSets("TAB1");
			rsTab.Edit();
			rsTab.Clear();
			rsTab.First();
			
			//Пока НомерСтроки <> НомерСтрокиН Цикл
			Для Каждого ЭлементПоля Из Поле.Данные Цикл
				
				НомерСтрокиН = НомерСтрокиН+1;
				
				Если  НомерСтроки > 0 и НомерСтроки < 10 Тогда
					Ноль = "00000"
				ИначеЕсли НомерСтроки >= 10 и НомерСтроки < 100 Тогда
					Ноль = "0000" 	
				ИначеЕсли НомерСтроки >= 100 и НомерСтроки < 1000 Тогда
					Ноль = "000"
				ИначеЕсли НомерСтроки >= 1000 и НомерСтроки < 10000 Тогда
					Ноль = "00"
				ИначеЕсли НомерСтроки >= 10000 и НомерСтроки < 100000 Тогда
					Ноль = "0"
				Иначе 
					Ноль = ""
				КонецЕсли;
				
				Попытка
					СуществуетСтрока = Ложь;
					
					Если Найти(ЭлементПоля.Ключ, "T2R"+Ноль+НомерСтроки+"G2D") = 1 Тогда
						Если ЭлементПоля.Значение <> Дата(1,1,1) Тогда
							rsTab.Fields.Item("TAB1_A2").Value = ЭлементПоля.Значение;
						КонецЕсли;
					ИначеЕсли Найти(ЭлементПоля.Ключ, "T2R"+Ноль+НомерСтроки+"G3") = 1 Тогда
						rsTab.Fields.Item("TAB1_A3").Value = ЭлементПоля.Значение;
					ИначеЕсли Найти(ЭлементПоля.Ключ, "T2R"+Ноль+НомерСтроки+"G4") = 1 Тогда
						rsTab.Fields.Item("TAB1_A4").Value = ЭлементПоля.Значение;							 
					ИначеЕсли Найти(ЭлементПоля.Ключ, "T2R"+Ноль+НомерСтроки+"G5") = 1 Тогда
						rsTab.Fields.Item("TAB1_A5").Value = ЭлементПоля.Значение;							 
					ИначеЕсли Найти(ЭлементПоля.Ключ, "T2R"+Ноль+НомерСтроки+"G6") = 1 Тогда
						rsTab.Fields.Item("TAB1_A6").Value = ЭлементПоля.Значение;
						СуществуетСтрока = Истина;
					КонецЕсли;
					rsTab.Post(); 
					
					Если  СуществуетСтрока = Истина Тогда
						rsTab.Post();
						rsTab.Append();
						НомерСтроки = НомерСтроки +1;
					КонецЕсли;
					rsTab.Next();	
					
				Исключение
					//Ничего не делать	
				КонецПопытки;
				
			КонецЦикла;
			КонецОтчета(Doc);			
			НомерДод = НомерДод +1;
		КонецЦикла;
		rsMain.Post();
		КонецОтчета(Doc);			
	КонецЕсли		
КонецФункции

Процедура УдалитьПриложенияДекларацияОПрибыли(App, ИД)
		
	СуществуетДодаток = Истина;
	Элемент = 1;
	
	Пока СуществуетДодаток Цикл
		С = ИД+Элемент;
		Если App.GetSendSTTByExDocID(С) <> -1 и App.GetInTrashStatus(С) = Ложь  Тогда
			App.MoveToTrash(С);
			Элемент = Элемент + 1;
		Иначе
			СуществуетДодаток = Ложь;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
////////////////////////////////ДЕКЛАРАЦИЯ НДС///////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

Функция Формирование_Декларация_НДС(App,  Документ,  Бланк,  PDate,  ИД)
	
	ИДПарент = 0;
	
	Если Бланк = "J0200120" Тогда
		БланкДод1 = "J0200520";
		БланкДод2 = "J0215220";
		БланкДод3 = "J0200620";
		БланкДод4 = "J0299820";
		БланкДод5 = "J0215120";
		БланкДод6 = "J0299320";
		БланкДод7 = "J0215720";
		БланкДод8 = "J0215820";
		БланкДод9 = "J0215320";
	КонецЕсли;
	
	Попытка
		Doc  = App.OpenOrCreateByExDocID(Бланк, ОпределитьКвМес(Документ), PDate, , ИД, 0);
		ИДПарент = Формирование_Декларация_НДС_Главный(Doc, Бланк, Документ);
	Исключение
		Сообщить("Ошибка: Перечень таблиц не передался. Передача остановлена");
		Doc  = App.MoveToTrash(ИД);
	КонецПопытки;
	//	
	Если ИДПарент <> 0 Тогда
		//Додаток 1
		Если Приложения_таб1 = Истина Тогда
			Doc  = App.OpenOrCreateByExDocID(БланкДод1, ОпределитьКодПериода(Документ), PDate, , ИД+"-1", 0);
			Doc.IDParent = ИДПарент;	
			Попытка
				Формирование_Декларация_НДС_Дод1(Doc, БланкДод1, Документ);
			Исключение
				Сообщить("Ошибка: Додаток 1 не создан");
				Doc  = App.MoveToTrash(ИД+"-1");
			КонецПопытки;
		Иначе	
			Doc  = App.MoveToTrash(ИД+"-1");
		КонецЕсли;
		//Додаток 2
		Если Приложения_таб2 = Истина Тогда
			ИД  =  Строка(Строка(Документ.УникальныйИдентификатор()));
			Doc  = App.OpenOrCreateByExDocID(БланкДод2, ОпределитьКодПериода(Документ), PDate, , ИД+"-2", 0);
			Doc.IDParent = ИДПарент;	
			Попытка
				Формирование_Декларация_НДС_Дод2(Doc, БланкДод2, Документ);
			Исключение
				Сообщить("Ошибка: Додаток 2 не создан");
				Doc  = App.MoveToTrash(ИД+"-2");
			КонецПопытки;
		Иначе	
			Doc  = App.MoveToTrash(ИД+"-2");
		КонецЕсли;
		//		//Додаток 3
		Если Приложения_таб3 = Истина Тогда
			Doc  = App.OpenOrCreateByExDocID(БланкДод3, ОпределитьКодПериода(Документ), PDate, , ИД+"-3", 0);
			Doc.IDParent = ИДПарент;	
			Попытка
				Формирование_Декларация_НДС_Дод3(Doc, БланкДод3, Документ);
			Исключение
				Сообщить("Ошибка: Додаток 3 не создан");
				Doc  = App.MoveToTrash(ИД+"-3");
			КонецПопытки;
		Иначе	
			Doc  = App.MoveToTrash(ИД+"-3");
		КонецЕсли;	
		//		//Додаток 4
		Если Приложения_таб4 = Истина Тогда
			Doc  = App.OpenOrCreateByExDocID(БланкДод4, ОпределитьКодПериода(Документ), PDate, , ИД+"-4", 0);
			Doc.IDParent = ИДПарент;	
			Попытка
				Формирование_Декларация_НДС_Дод4(Doc, БланкДод4, Документ);
			Исключение
				Сообщить("Ошибка: Додаток 4 не создан");
				Doc  = App.MoveToTrash(ИД+"-4");
			КонецПопытки;
		Иначе	
			Doc  = App.MoveToTrash(ИД+"-4");
		КонецЕсли;
		//		//Додаток 5
		Если Приложения_таб5 = Истина Тогда
			Doc  = App.OpenOrCreateByExDocID(БланкДод5, ОпределитьКодПериода(Документ), PDate, , ИД+"-5", 0);
			Doc.IDParent = ИДПарент;	
			Попытка
				Формирование_Декларация_НДС_Дод5(Doc, БланкДод5, Документ);
			Исключение
				Сообщить("Ошибка: Додаток 5 не создан");
				Doc  = App.MoveToTrash(ИД+"-5");
			КонецПопытки;
		Иначе	
			Doc  = App.MoveToTrash(ИД+"-5");
		КонецЕсли;
		//		//Додаток 6
		Если Приложения_таб6 = Истина Тогда
			Doc  = App.OpenOrCreateByExDocID(БланкДод6, ОпределитьКодПериода(Документ), PDate, , ИД+"-6", 0);
			Doc.IDParent = ИДПарент;	
			Попытка
				Формирование_Декларация_НДС_Дод6(Doc, БланкДод6, Документ);
			Исключение
				Сообщить("Ошибка: Додаток 6 не создан");
				Doc  = App.MoveToTrash(ИД+"-6");
			КонецПопытки;
		Иначе	
			Doc  = App.MoveToTrash(ИД+"-6");
		КонецЕсли;
		//		//Додаток 7
		Если Приложения_таб7 = Истина Тогда
			Doc  = App.OpenOrCreateByExDocID(БланкДод7, ОпределитьКодПериода(Документ), PDate, , ИД+"-7", 0);
			Doc.IDParent = ИДПарент;	
			Попытка
				Формирование_Декларация_НДС_Дод7(Doc, БланкДод7, Документ);
			Исключение
				Сообщить("Ошибка: Додаток 7 не создан");
				Doc  = App.MoveToTrash(ИД+"-7");
			КонецПопытки;
		Иначе	
			Doc  = App.MoveToTrash(ИД+"-7");
		КонецЕсли;
		//		//Додаток 8
		Если Приложения_таб8 = Истина Тогда
			Doc  = App.OpenOrCreateByExDocID(БланкДод8, ОпределитьКодПериода(Документ), PDate, , ИД+"-8", 0);
			Doc.IDParent = ИДПарент;	
			Попытка
				Формирование_Декларация_НДС_Дод8(Doc, БланкДод8, Документ);
			Исключение
				Сообщить("Ошибка: Додаток 8 не создан");
				Doc  = App.MoveToTrash(ИД+"-8");
			КонецПопытки;
		Иначе	
			Doc  = App.MoveToTrash(ИД+"-8");
		КонецЕсли;
		//		//Додаток 9
		Если Приложения_таб9 = Истина Тогда
			Doc  = App.OpenOrCreateByExDocID(БланкДод9, ОпределитьКодПериода(Документ), PDate, , ИД+"-9", 0);
			Doc.IDParent = ИДПарент;	
			Попытка
				Формирование_Декларация_НДС_Дод9(Doc, БланкДод9, Документ);
			Исключение
				Сообщить("Ошибка: Додаток 9 не создан");
				Doc  = App.MoveToTrash(ИД+"-9");
			КонецПопытки;
		Иначе	
			Doc  = App.MoveToTrash(ИД+"-9");
		КонецЕсли;
	КонецЕсли;
	
	
КонецФункции

Функция Формирование_Декларация_НДС_Главный(Doc, Бланк, Документ)
	
	ИДПарент = 0;
	Если Бланк = "J0200120"  Тогда
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаДекларацияПоНДС;
		rsMain = Doc.DataSets(); 
		НачалоОтчета(rsMain);	
		с = Новый Структура;
		НомерСтроки = 1;
		НомерСтроки2 = 1;
		СуществуетСтрока = Ложь;
		
			//с.Вставить("NYEAR", "HZY");
			//с.Вставить("KV", "HZKV");
			//с.Вставить("NMONTH", "HZM");  
			Если Док.HZ <> "" Тогда
				rsMain.Fields.Item("HZ").value = true;
			КонецЕсли;
			Если Док.HZN <> "" Тогда
				rsMain.Fields.Item("HZN").value = true;
			КонецЕсли;
			
			Если Док.HM <> "" Тогда
				rsMain.Fields.Item("N6").value = true;
			КонецЕсли;
			Если Док.HA <> "" Тогда
				rsMain.Fields.Item("N1").value = true;
			КонецЕсли;
			Если Док.HK <> "" Тогда
				rsMain.Fields.Item("N2").value = true;
			КонецЕсли;
			Если Док.HD1 <> "" Тогда
				rsMain.Fields.Item("N16").value = true;
			КонецЕсли;
			Если Док.HD2 <> "" Тогда
				rsMain.Fields.Item("N17").value = true;
			КонецЕсли;
			Если Док.HD3 <> "" Тогда
				rsMain.Fields.Item("N18").value = true;
			КонецЕсли;
			Если Док.HD4 <> "" Тогда
				rsMain.Fields.Item("N19").value = true;
			КонецЕсли;
			Если Док.HD5 <> "" Тогда
				rsMain.Fields.Item("N20").value = true;
			КонецЕсли;
			Если Док.HD6 <> "" Тогда
				rsMain.Fields.Item("N21").value = true;
			КонецЕсли;
			Если Док.HD7 <> "" Тогда
				rsMain.Fields.Item("N22").value = true;
			КонецЕсли;
			Если Док.HD8 <> "" Тогда
				rsMain.Fields.Item("N23").value = true;
			КонецЕсли;
			Если Док.HD9 <> "" Тогда
				rsMain.Fields.Item("N24").value = true;
			КонецЕсли;
			Если Док.HD1P <> "" Тогда
				rsMain.Fields.Item("N12").value = true;
			КонецЕсли;
			Если Док.HD2P <> "" Тогда
				rsMain.Fields.Item("N25").value = true;
			КонецЕсли;
			Если Док.HVMD <> "" Тогда
				rsMain.Fields.Item("N14").value = true;
			КонецЕсли;	
			Если Док.HJAR <> "" Тогда
				rsMain.Fields.Item("N15").value = true;
			КонецЕсли;


			с.Вставить("A100", "R11GA");
			с.Вставить("B100", "R11GB");
			с.Вставить("A210", "R20GA");
			с.Вставить("A220", "R30GA");
			с.Вставить("A300", "R50GA");
			с.Вставить("A700", "R60GA");
			с.Вставить("B700", "R60GB");
			с.Вставить("A820", "R80GA");
			с.Вставить("B820", "R80GB");
			с.Вставить("A830", "R70GA");
			с.Вставить("B830", "R70GB");
			с.Вставить("B900", "R90GB");
			с.Вставить("A1010", "R101GA");
			с.Вставить("B1010", "R101GB");
			с.Вставить("A1210", "R111GA");
			с.Вставить("B1210", "R111GB");
			с.Вставить("A1220", "R120GA");
			с.Вставить("B1220", "R120GB");
			с.Вставить("A1240", "R130GA");
			с.Вставить("B1240", "R130GB");
			с.Вставить("A1500", "R150GA");
			с.Вставить("B1600", "R160GB");
			с.Вставить("A1620", "R140GA");
			с.Вставить("B1620", "R140GB");
			с.Вставить("B1700", "R170GB");
			с.Вставить("B2000", "R200GB");
			с.Вставить("A410", "R41GA");
			с.Вставить("A120", "R12GA");
			с.Вставить("B120", "R12GB");
			с.Вставить("A1012", "R102GA");
			с.Вставить("B1012", "R102GB");
			с.Вставить("A1212", "R112GA");
			с.Вставить("B1212", "R112GB");
			с.Вставить("B2010", "R201GB");
			с.Вставить("B2020", "R202GB");
			с.Вставить("B2030", "R203GB");
			с.Вставить("B2100", "R210GB");
			с.Вставить("B410", "R41GB");
			с.Вставить("A420", "R42GA");
			с.Вставить("B420", "R42GB");
			с.Вставить("A1030", "R103GA");
			с.Вставить("B1500", "R150GB");
			с.Вставить("B1601", "R161GB");
			с.Вставить("B1602", "R162GB");
			с.Вставить("B1603", "R163GB");
			с.Вставить("B1800", "R180GB");
			с.Вставить("B1900", "R190GB");
			с.Вставить("C1910", "R191G3");
			с.Вставить("B1910", "R191GB");
			с.Вставить("B2021", "R2021GB");
			с.Вставить("B2022", "R2022GB");
			с.Вставить("N3", "HBD");
			с.Вставить("N2", "HK");
			//с.Вставить("N16", "HD1");
			//с.Вставить("N17", "HD2");
			//с.Вставить("N18", "HD3");
			//с.Вставить("N19", "HD4");
			//с.Вставить("N20", "HD5");
			//с.Вставить("N21", "HD6");
			//с.Вставить("N22", "HD7");
			//с.Вставить("N23", "HD8");
			//с.Вставить("N24", "HD9");
			//с.Вставить("N12", "HD1P");
			//с.Вставить("N25", "HD2P");
			
			с.Вставить("FIRM_RUK", "HBOS");
			с.Вставить("FIRM_BUH", "HBUH");
			
			ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
			
			
	//TAB1
			rsTab = Doc.DataSets("TAB1");
			rsTab.Clear();
			ДобавитьНовуюСтроку = Истина;
			НомерСтроки = 1;		
			Пока ДобавитьНовуюСтроку Цикл			
			СуществуетСтрока = Ложь;		
			rsTab.Edit();
			Для Каждого Поле Из Док Цикл

							
				 Если  НомерСтроки > 0 и НомерСтроки < 10 Тогда
					 Ноль = "00000"
				 ИначеЕсли НомерСтроки >= 10 и НомерСтроки < 100 Тогда
					 Ноль = "0000" 	
				 ИначеЕсли НомерСтроки >= 100 и НомерСтроки < 1000 Тогда
					 Ноль = "000"
				 ИначеЕсли НомерСтроки >= 1000 и НомерСтроки < 10000 Тогда
					 Ноль = "00"
				 ИначеЕсли НомерСтроки >= 10000 и НомерСтроки < 100000 Тогда
					 Ноль = "0"
				 Иначе 
					 Ноль = ""
				 КонецЕсли;
				 
				 Если  Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G2S") = 1 Тогда
						  rsTab.Fields.Item("TAB1_A1").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
				КонецЕсли;
		  
			КонецЦикла;
			rsTab.Post();			
			Если СуществуетСтрока = Истина тогда	
				rsTab.Append();
				НомерСтроки = НомерСтроки + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsTab.Delete();
			КонецЕсли;
		КонецЦикла;
		
//TAB2
			rsTab2 = Doc.DataSets("TAB2");
			rsTab2.Clear();
			ДобавитьНовуюСтроку = Истина;
			НомерСтроки2 = 1;		
			Пока ДобавитьНовуюСтроку Цикл			
			СуществуетСтрока = Ложь;		
			rsTab2.Edit();
			Для Каждого Поле Из Док Цикл
				
				 Если  НомерСтроки2 > 0 и НомерСтроки2 < 10 Тогда
					 Ноль = "00000"
				 ИначеЕсли НомерСтроки2 >= 10 и НомерСтроки2 < 100 Тогда
					 Ноль = "0000" 	
				 ИначеЕсли НомерСтроки2 >= 100 и НомерСтроки2 < 1000 Тогда
					 Ноль = "000"
				 ИначеЕсли НомерСтроки2 >= 1000 и НомерСтроки2 < 10000 Тогда
					 Ноль = "00"
				 ИначеЕсли НомерСтроки2 >= 10000 и НомерСтроки2 < 100000 Тогда
					 Ноль = "0"
				 Иначе 
					 Ноль = ""
				 КонецЕсли;
				 
				    Если  Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки2+"G1D") = 1 Тогда
						Если Поле.Значение <> Дата(1,1,1) Тогда
						  rsTab2.Fields.Item("TAB2_A1").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					    КонецЕсли;
					ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки2+"G2S") = 1 Тогда
			 			 rsTab2.Fields.Item("TAB2_A2").Value = Поле.Значение;
						 СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки2+"G3") = 1 Тогда
			 			 rsTab2.Fields.Item("TAB2_A3").Value = Поле.Значение;
						 СуществуетСтрока = Истина;					  
					КонецЕсли;
					
			КонецЦикла;
			rsTab2.Post();			
			Если СуществуетСтрока = Истина тогда	
				rsTab2.Append();
				НомерСтроки2 = НомерСтроки2 + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsTab2.Delete();
			КонецЕсли;
		КонецЦикла;
		КонецОтчета(Doc);	
		ИДПарент = Doc.CardCode;		
	КонецЕсли;	
	Возврат ИДПарент;
КонецФункции

Процедура Формирование_Декларация_НДС_Дод1(Doc, БланкДод1, Документ)

	Если БланкДод1="J0200520" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложение1;	
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);

			Если Док.HZ <> "" Тогда
				rsMain.Fields.Item("HZ").value = true;
			КонецЕсли;
			Если Док.HZN <> "" Тогда
				rsMain.Fields.Item("HZN").value = true;
			КонецЕсли;
			Если Док.HZU <> "" Тогда
				rsMain.Fields.Item("HZU").value = true;
			КонецЕсли;
			с.Вставить("R01G4", "R001G4");
			с.Вставить("R01G5", "R001G5");
			с.Вставить("R01G6", "R001G6");
			с.Вставить("R01G7", "R001G7");
			с.Вставить("R010G4", "R0011G4");
			с.Вставить("R010G5", "R0011G5");
			с.Вставить("R010G6", "R0011G6");
			с.Вставить("R010G7", "R0011G7");
			с.Вставить("R020G4", "R0012G4");
			с.Вставить("R020G5", "R0012G5");
			с.Вставить("R020G6", "R0012G6");
			с.Вставить("R020G7", "R0012G7");
			с.Вставить("R030G4", "R0013G4");
			с.Вставить("R030G5", "R0013G5");
			с.Вставить("R030G6", "R0013G6");
			с.Вставить("R030G7", "R0013G7");
			с.Вставить("R040G4", "R0014G4");
			с.Вставить("R040G5", "R0014G5");
			с.Вставить("R040G6", "R0014G6");
			с.Вставить("R040G7", "R0014G7");
			с.Вставить("R050G4", "R013G4");
			с.Вставить("R050G5", "R013G5");
			с.Вставить("R050G7", "R013G7");
			с.Вставить("R060G4", "R012G4");
			с.Вставить("R060G5", "R012G5");
			с.Вставить("R060G7", "R012G7");
			с.Вставить("R070G4", "R0121G4");
			с.Вставить("R070G6", "R0121G6");;
			с.Вставить("R070G7", "R0121G7");
			с.Вставить("R02G4", "R010G4");
			с.Вставить("R02G5", "R010G5");
			с.Вставить("R02G6", "R010G6");
			с.Вставить("R02G7", "R010G7");
			с.Вставить("R03G4", "R020G4");
			с.Вставить("R03G5", "R020G5");
			с.Вставить("R03G6", "R020G6");
			с.Вставить("R04G4", "R021G4");
			с.Вставить("R04G5", "R021G5");
			с.Вставить("R04G6", "R021G6");
			с.Вставить("R07G4", "R023G4");
			с.Вставить("R07G5", "R023G5");
			с.Вставить("R061G4", "R014G4");
			с.Вставить("R061G5", "R014G5");
			с.Вставить("R062G4", "R0141G4");
			с.Вставить("R062G6", "R0141G6");
			с.Вставить("R021G4", "R011G4");
			с.Вставить("R021G5", "R011G5");
			//с.Вставить("R021G6", "R011G6"); В 1С нет такого поля
			с.Вставить("R021G7", "R011G7");
			с.Вставить("R06G4", "R022G4");
			с.Вставить("R06G5", "R022G5");
			с.Вставить("R08G6", "R0110G6");
			с.Вставить("R08G7", "R0110G7");
			с.Вставить("R08G8", "R0110G8");
			с.Вставить("R09G6", "R0120G6");
			с.Вставить("R09G7", "R0120G7");
			с.Вставить("R09G8", "R0120G8");
			
			с.Вставить("FIRM_RUK", "HBOS");
			с.Вставить("FIRM_BUH", "HBUH");			
			
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
	//TAB1
	
		rsTab = Doc.DataSets("TAB1");
		rsTab.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки = 1;		
		Пока ДобавитьНовуюСтроку Цикл			
			СуществуетСтрока = Ложь;		
			rsTab.Edit();
			Для Каждого Поле Из Док Цикл
				
	    		 Если  НомерСтроки > 0 и НомерСтроки < 10 Тогда
	    			 Ноль = "00000"
	    		 ИначеЕсли НомерСтроки >= 10 и НомерСтроки < 100 Тогда
	    			 Ноль = "0000" 	
	    		 ИначеЕсли НомерСтроки >= 100 и НомерСтроки < 1000 Тогда
	    			 Ноль = "000"
	    		 ИначеЕсли НомерСтроки >= 1000 и НомерСтроки < 10000 Тогда
	    			 Ноль = "00"
	    		 ИначеЕсли НомерСтроки >= 10000 и НомерСтроки < 100000 Тогда
	    			 Ноль = "0"
	    		 Иначе 
	    			 Ноль = ""
	    		 КонецЕсли;
			
	    			Если  Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G2") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A6").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G3A") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A7").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;	  
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G3B") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_B7").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G4") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A3").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G5") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A4").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G6") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A41").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G7") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A13").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G32") = 1 Тогда
						Если Поле.Значение <> "" Тогда
						  rsTab.Fields.Item("TAB1_CX").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
						КонецЕсли; 
	    			КонецЕсли;

			КонецЦикла;
			rsTab.Post();			
			Если СуществуетСтрока = Истина тогда	
				rsTab.Append();
				НомерСтроки = НомерСтроки + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsTab.Delete();
			КонецЕсли;
		КонецЦикла;

	//TAB2
		rsTab2 = Doc.DataSets("TAB2");
		rsTab2.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки2 = 1;		
		Пока ДобавитьНовуюСтроку Цикл			
			СуществуетСтрока = Ложь;		
			rsTab2.Edit();
			Для Каждого Поле Из Док Цикл
							
				 Если  НомерСтроки2 > 0 и НомерСтроки2 < 10 Тогда
					 Ноль = "00000"
				 ИначеЕсли НомерСтроки2 >= 10 и НомерСтроки2 < 100 Тогда
					 Ноль = "0000" 	
				 ИначеЕсли НомерСтроки2 >= 100 и НомерСтроки2 < 1000 Тогда
					 Ноль = "000"
				 ИначеЕсли НомерСтроки2 >= 1000 и НомерСтроки2 < 10000 Тогда
					 Ноль = "00"
				 ИначеЕсли НомерСтроки2 >= 10000 и НомерСтроки2 < 100000 Тогда
					 Ноль = "0"
				 Иначе 
					 Ноль = ""
				 КонецЕсли;
			 
					Если  Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки2+"G2") = 1 Тогда
						  rsTab2.Fields.Item("TAB2_A6").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки2+"G3A") = 1 Тогда
						  rsTab2.Fields.Item("TAB2_A7").Value = Поле.Значение;
						  СуществуетСтрока = Истина;	  
					ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки2+"G3B") = 1 Тогда
						  rsTab2.Fields.Item("TAB2_B7").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки2+"G4") = 1 Тогда
						  rsTab2.Fields.Item("TAB2_A3").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки2+"G5") = 1 Тогда
						  rsTab2.Fields.Item("TAB2_A4").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки2+"G6") = 1 Тогда
						  rsTab2.Fields.Item("TAB2_A41").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки2+"G32") = 1 Тогда
						Если Поле.Значение <> "" Тогда
						  rsTab2.Fields.Item("TAB2_CX").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
						КонецЕсли;
					КонецЕсли;

			КонецЦикла;
			rsTab2.Post();			
			Если СуществуетСтрока = Истина тогда	
				rsTab2.Append();
				НомерСтроки2 = НомерСтроки2 + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsTab2.Delete();
			КонецЕсли;
		КонецЦикла;
//TAB8
		rsTab8 = Doc.DataSets("TAB8");
		rsTab8.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки3 = 1;		
		Пока ДобавитьНовуюСтроку Цикл			
			СуществуетСтрока = Ложь;		
			rsTab8.Edit();
			Для Каждого Поле Из Док Цикл
					
				 Если  НомерСтроки3 > 0 и НомерСтроки3 < 10 Тогда
					 Ноль = "00000"
				 ИначеЕсли НомерСтроки3 >= 10 и НомерСтроки3 < 100 Тогда
					 Ноль = "0000" 	
				 ИначеЕсли НомерСтроки3 >= 100 и НомерСтроки3 < 1000 Тогда
					 Ноль = "000"
				 ИначеЕсли НомерСтроки3 >= 1000 и НомерСтроки3 < 10000 Тогда
					 Ноль = "00"
				 ИначеЕсли НомерСтроки3 >= 10000 и НомерСтроки3 < 100000 Тогда
					 Ноль = "0"
				 Иначе 
					 Ноль = ""
				 КонецЕсли;
				 
				 
				 Если  Найти(Поле.Ключ, "T11"+Ноль+НомерСтроки3+"RG2") = 1 Тогда
						  rsTab8.Fields.Item("TAB8_A2").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T11"+Ноль+НомерСтроки3+"RG3D") = 1 Тогда
						Если Поле.Значение <> Дата(1,1,1) Тогда
						  rsTab8.Fields.Item("TAB8_A3").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
						КонецЕсли
					ИначеЕсли Найти(Поле.Ключ, "T11"+Ноль+НомерСтроки3+"RG41") = 1 Тогда
						  rsTab8.Fields.Item("TAB8_A41").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T11"+Ноль+НомерСтроки3+"RG42") = 1 Тогда
						  rsTab8.Fields.Item("TAB8_A42").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T11"+Ноль+НомерСтроки3+"RG43") = 1 Тогда
						  rsTab8.Fields.Item("TAB8_A43").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T11"+Ноль+НомерСтроки3+"RG5") = 1 Тогда
						Если Поле.Значение <> "" Тогда
						  rsTab8.Fields.Item("TAB8_CX").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
						КонецЕсли;
					ИначеЕсли Найти(Поле.Ключ, "T11"+Ноль+НомерСтроки3+"RG6") = 1 Тогда
						  rsTab8.Fields.Item("TAB8_A6").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T11"+Ноль+НомерСтроки3+"RG7") = 1 Тогда
						  rsTab8.Fields.Item("TAB8_A7").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T11"+Ноль+НомерСтроки3+"RG8") = 1 Тогда
						  rsTab8.Fields.Item("TAB8_A8").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					КонецЕсли;

			КонецЦикла;
			rsTab8.Post();			
			Если СуществуетСтрока = Истина тогда	
				rsTab8.Append();
				НомерСтроки3 = НомерСтроки3 + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsTab8.Delete();
			КонецЕсли;
		КонецЦикла;		
//TAB9
		rsTab9 = Doc.DataSets("TAB9");
		rsTab9.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки4 = 1;		
		Пока ДобавитьНовуюСтроку Цикл			
			СуществуетСтрока = Ложь;		
			rsTab9.Edit();
			Для Каждого Поле Из Док Цикл
						
				 Если  НомерСтроки4 > 0 и НомерСтроки4 < 10 Тогда
					 Ноль = "00000"
				 ИначеЕсли НомерСтроки4 >= 10 и НомерСтроки4 < 100 Тогда
					 Ноль = "0000" 	
				 ИначеЕсли НомерСтроки4 >= 100 и НомерСтроки4 < 1000 Тогда
					 Ноль = "000"
				 ИначеЕсли НомерСтроки4 >= 1000 и НомерСтроки4 < 10000 Тогда
					 Ноль = "00"
				 ИначеЕсли НомерСтроки4 >= 10000 и НомерСтроки4 < 100000 Тогда
					 Ноль = "0"
				 Иначе 
					 Ноль = ""
				 КонецЕсли;

					Если  Найти(Поле.Ключ, "T12"+Ноль+НомерСтроки4+"RG2") = 1 Тогда
						  rsTab9.Fields.Item("TAB9_A2").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T12"+Ноль+НомерСтроки4+"RG3D") = 1 Тогда
						Если Поле.Значение <> Дата(1,1,1) Тогда
						  rsTab9.Fields.Item("TAB9_A3").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
						КонецЕсли
					ИначеЕсли Найти(Поле.Ключ, "T12"+Ноль+НомерСтроки4+"RG41") = 1 Тогда
						  rsTab9.Fields.Item("TAB9_A41").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T12"+Ноль+НомерСтроки4+"RG42") = 1 Тогда
						  rsTab9.Fields.Item("TAB9_A42").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T12"+Ноль+НомерСтроки4+"RG43") = 1 Тогда
						  rsTab9.Fields.Item("TAB9_A43").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T12"+Ноль+НомерСтроки4+"RG5") = 1 Тогда
						Если Поле.Значение <> "" Тогда
						  rsTab9.Fields.Item("TAB9_CX").Value =True;
						  СуществуетСтрока = Истина;
						КонецЕсли;
					ИначеЕсли Найти(Поле.Ключ, "T12"+Ноль+НомерСтроки4+"RG6") = 1 Тогда
						  rsTab9.Fields.Item("TAB9_A6").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T12"+Ноль+НомерСтроки+"RG7") = 1 Тогда
						  rsTab9.Fields.Item("TAB9_A7").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T12"+Ноль+НомерСтроки4+"RG8") = 1 Тогда
						  rsTab9.Fields.Item("TAB9_A8").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					КонецЕсли;

			КонецЦикла;
			rsTab9.Post();			
			Если СуществуетСтрока = Истина тогда	
				rsTab9.Append();
				НомерСтроки4 = НомерСтроки4 + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsTab9.Delete();
			КонецЕсли;
		КонецЦикла;

		КонецОтчета(Doc);
	КонецЕсли;
		
КонецПроцедуры

Процедура Формирование_Декларация_НДС_Дод2(Doc, БланкДод2, Документ)

	Если БланкДод2 = "J0215220" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложение2;	
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);

			Если Док.HZ <> "" Тогда
				rsMain.Fields.Item("HZ").value = true;
			КонецЕсли;
			Если Док.HZN <> "" Тогда
				rsMain.Fields.Item("HZN").value = true;
			КонецЕсли;
			Если Док.HZU <> "" Тогда
				rsMain.Fields.Item("HZU").value = true;
			КонецЕсли;
			с.Вставить("A1_5", "R01G5");
			с.Вставить("A2_5", "R02G5");
			с.Вставить("A2_6", "R02G6");	
			с.Вставить("N1", "R03G1S");
			с.Вставить("N2", "R03G2");
			с.Вставить("A3_3", "R04G3");	
			с.Вставить("A4_5", "R05G5");
			
			с.Вставить("FIRM_RUK", "HBOS");
			с.Вставить("FIRM_BUH", "HBUH");			
			
			ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
	//TAB1
	
		rsTab = Doc.DataSets("TAB1");
		rsTab.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки = 1;		
		Пока ДобавитьНовуюСтроку Цикл			
			СуществуетСтрока = Ложь;		
			rsTab.Edit();
			Для Каждого Поле Из Док Цикл
				
	    		 Если  НомерСтроки > 0 и НомерСтроки < 10 Тогда
	    			 Ноль = "00000"
	    		 ИначеЕсли НомерСтроки >= 10 и НомерСтроки < 100 Тогда
	    			 Ноль = "0000" 	
	    		 ИначеЕсли НомерСтроки >= 100 и НомерСтроки < 1000 Тогда
	    			 Ноль = "000"
	    		 ИначеЕсли НомерСтроки >= 1000 и НомерСтроки < 10000 Тогда
	    			 Ноль = "00"
	    		 ИначеЕсли НомерСтроки >= 10000 и НомерСтроки < 100000 Тогда
	    			 Ноль = "0"
	    		 Иначе 
	    			 Ноль = ""
	    		 КонецЕсли;
			
	    			Если  Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G3") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A3").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G4") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A4").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;	  
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G5") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A5").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G6") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A6").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			КонецЕсли;

			КонецЦикла;
			rsTab.Post();			
			Если СуществуетСтрока = Истина тогда	
				rsTab.Append();
				НомерСтроки = НомерСтроки + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsTab.Delete();
			КонецЕсли;
		КонецЦикла;

	//TAB2
		rsTab2 = Doc.DataSets("TAB2");
		rsTab2.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки2 = 1;		
		Пока ДобавитьНовуюСтроку Цикл			
			СуществуетСтрока = Ложь;		
			rsTab2.Edit();
			Для Каждого Поле Из Док Цикл
							
				 Если  НомерСтроки2 > 0 и НомерСтроки2 < 10 Тогда
					 Ноль = "00000"
				 ИначеЕсли НомерСтроки2 >= 10 и НомерСтроки2 < 100 Тогда
					 Ноль = "0000" 	
				 ИначеЕсли НомерСтроки2 >= 100 и НомерСтроки2 < 1000 Тогда
					 Ноль = "000"
				 ИначеЕсли НомерСтроки2 >= 1000 и НомерСтроки2 < 10000 Тогда
					 Ноль = "00"
				 ИначеЕсли НомерСтроки2 >= 10000 и НомерСтроки2 < 100000 Тогда
					 Ноль = "0"
				 Иначе 
					 Ноль = ""
				 КонецЕсли;
			 
					Если  Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки2+"G2") = 1 Тогда
						  rsTab2.Fields.Item("TAB2_A2").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки2+"G3") = 1 Тогда
						  rsTab2.Fields.Item("TAB2_A3").Value = Поле.Значение;
						  СуществуетСтрока = Истина;	  
				    ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки2+"G4D") = 1 Тогда
						Если Поле.Значение <> Дата(1,1,1) Тогда
						  rsTab2.Fields.Item("TAB2_A4").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
						КонецЕсли
					ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки2+"G5S") = 1 Тогда
						  rsTab2.Fields.Item("TAB2_A5").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					КонецЕсли;

			КонецЦикла;
			rsTab2.Post();			
			Если СуществуетСтрока = Истина тогда	
				rsTab2.Append();
				НомерСтроки2 = НомерСтроки2 + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsTab2.Delete();
			КонецЕсли;
		КонецЦикла;
//TAB3
		rsTab3 = Doc.DataSets("TAB3");
		rsTab3.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки3 = 1;		
		Пока ДобавитьНовуюСтроку Цикл			
			СуществуетСтрока = Ложь;		
			rsTab3.Edit();
			Для Каждого Поле Из Док Цикл
					
				 Если  НомерСтроки3 > 0 и НомерСтроки3 < 10 Тогда
					 Ноль = "00000"
				 ИначеЕсли НомерСтроки3 >= 10 и НомерСтроки3 < 100 Тогда
					 Ноль = "0000" 	
				 ИначеЕсли НомерСтроки3 >= 100 и НомерСтроки3 < 1000 Тогда
					 Ноль = "000"
				 ИначеЕсли НомерСтроки3 >= 1000 и НомерСтроки3 < 10000 Тогда
					 Ноль = "00"
				 ИначеЕсли НомерСтроки3 >= 10000 и НомерСтроки3 < 100000 Тогда
					 Ноль = "0"
				 Иначе 
					 Ноль = ""
				 КонецЕсли;
				 
				 
				 Если  Найти(Поле.Ключ, "T3R"+Ноль+НомерСтроки3+"G2") = 1 Тогда
						  rsTab3.Fields.Item("TAB3_A2").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T3R"+Ноль+НомерСтроки3+"G3") = 1 Тогда
						  rsTab3.Fields.Item("TAB3_A3").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T3R"+Ноль+НомерСтроки3+"G4A") = 1 Тогда
						  rsTab3.Fields.Item("TAB3_A41").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T3R"+Ноль+НомерСтроки3+"G4B") = 1 Тогда
						  rsTab3.Fields.Item("TAB3_A42").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T3R"+Ноль+НомерСтроки3+"G5") = 1 Тогда
						  rsTab3.Fields.Item("TAB3_A5").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T3R"+Ноль+НомерСтроки3+"G6D") = 1 Тогда
						Если Поле.Значение <> Дата(1,1,1) Тогда
						  rsTab3.Fields.Item("TAB3_A6").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
						КонецЕсли;  
					ИначеЕсли Найти(Поле.Ключ, "T3R"+Ноль+НомерСтроки3+"G7S") = 1 Тогда
						  rsTab3.Fields.Item("TAB3_A7").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					КонецЕсли;

			КонецЦикла;
			rsTab3.Post();			
			Если СуществуетСтрока = Истина тогда	
				rsTab3.Append();
				НомерСтроки3 = НомерСтроки3 + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsTab3.Delete();
			КонецЕсли;
		КонецЦикла;		

		КонецОтчета(Doc);
	КонецЕсли;
		
КонецПроцедуры

Процедура Формирование_Декларация_НДС_Дод3(Doc, БланкДод3, Документ)

	Если БланкДод3 = "J0200620" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложение3;	
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);

			Если Док.HZ <> "" Тогда
				rsMain.Fields.Item("HZ").value = true;
			КонецЕсли;
			Если Док.HZN <> "" Тогда
				rsMain.Fields.Item("HZN").value = true;
			КонецЕсли;
			Если Док.HZU <> "" Тогда
				rsMain.Fields.Item("HZU").value = true;
			КонецЕсли;
			Если Док.HDDGV <> Дата(1,1,1) Тогда
				rsMain.Fields.Item("DDOG").value = Док.HDDGV;
			КонецЕсли; 
			с.Вставить("NDOG", "HNDGV");
			с.Вставить("A1", "R010G3");
			с.Вставить("A2", "R020G3");
			с.Вставить("A3", "R030G3");	
			
			с.Вставить("FIRM_RUK", "HBOS");
			с.Вставить("FIRM_BUH", "HBUH");			
			
			ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
	//TAB1
	
		rsTab = Doc.DataSets("TAB1");
		rsTab.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки = 1;		
		Пока ДобавитьНовуюСтроку Цикл			
			СуществуетСтрока = Ложь;		
			rsTab.Edit();
			Для Каждого Поле Из Док Цикл
				
	    		 Если  НомерСтроки > 0 и НомерСтроки < 10 Тогда
	    			 Ноль = "00000"
	    		 ИначеЕсли НомерСтроки >= 10 и НомерСтроки < 100 Тогда
	    			 Ноль = "0000" 	
	    		 ИначеЕсли НомерСтроки >= 100 и НомерСтроки < 1000 Тогда
	    			 Ноль = "000"
	    		 ИначеЕсли НомерСтроки >= 1000 и НомерСтроки < 10000 Тогда
	    			 Ноль = "00"
	    		 ИначеЕсли НомерСтроки >= 10000 и НомерСтроки < 100000 Тогда
	    			 Ноль = "0"
	    		 Иначе 
	    			 Ноль = ""
	    		 КонецЕсли;
			
	    			Если  Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G2") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A2").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G3") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A3").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;	  
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G4") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A4").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G5") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A5").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G6") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A6").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G7") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A7").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;

	    			КонецЕсли;

			КонецЦикла;
			rsTab.Post();			
			Если СуществуетСтрока = Истина тогда	
				rsTab.Append();
				НомерСтроки = НомерСтроки + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsTab.Delete();
			КонецЕсли;
		КонецЦикла;	

		КонецОтчета(Doc);
	КонецЕсли;
		
КонецПроцедуры

Процедура Формирование_Декларация_НДС_Дод4(Doc, БланкДод4, Документ)

	Если БланкДод4="J0299820" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложение4;	
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);

			Если Док.HZ <> "" Тогда
				rsMain.Fields.Item("HZ").value = true;
			КонецЕсли;
			Если Док.HZN <> "" Тогда
				rsMain.Fields.Item("HZN").value = true;
			КонецЕсли;
			Если Док.HZU <> "" Тогда
				rsMain.Fields.Item("HZU").value = true;
			КонецЕсли;
			
			с.Вставить("DDOG", "HDDGV");
			с.Вставить("NDOG", "HNDGV");
			с.Вставить("N3", "R0303G2");
			с.Вставить("N4", "R0303G3");
			с.Вставить("N5", "R0304G1S");	
			с.Вставить("N6", "R0304G2");
			с.Вставить("N7", "R0305G1");
			с.Вставить("N8", "R0305G2");
			с.Вставить("N9", "R0305G3S");
			с.Вставить("A1_5", "R0306G5");
			с.Вставить("A2_1", "R0401G1");
			с.Вставить("A2_2", "R0401G2");
			с.Вставить("A2_3", "R0401G3");
			с.Вставить("A2_4", "R0401G5");
			с.Вставить("N10", "R0403G1S");
			с.Вставить("N11", "R0403G2");
			с.Вставить("N14", "R0404G1");
			с.Вставить("N15", "R0404G2");
			с.Вставить("N16", "R0404G3S");
			с.Вставить("N12", "R0405G1S");
			с.Вставить("N13", "R0405G2");
			с.Вставить("N1", "R0501G1S");
			с.Вставить("N2", "R0501G2");
			с.Вставить("A3_3", "R0502G3");
			с.Вставить("A4_4", "R0601G4");
			
			с.Вставить("FIRM_RUK", "HBOS");
			с.Вставить("FIRM_BUH", "HBUH");			
			
			ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
	//TAB1
	
		rsTab = Doc.DataSets("TAB1");
		rsTab.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки = 1;		
		Пока ДобавитьНовуюСтроку Цикл			
			СуществуетСтрока = Ложь;		
			rsTab.Edit();
			Для Каждого Поле Из Док Цикл
				
	    		 Если  НомерСтроки > 0 и НомерСтроки < 10 Тогда
	    			 Ноль = "00000"
	    		 ИначеЕсли НомерСтроки >= 10 и НомерСтроки < 100 Тогда
	    			 Ноль = "0000" 	
	    		 ИначеЕсли НомерСтроки >= 100 и НомерСтроки < 1000 Тогда
	    			 Ноль = "000"
	    		 ИначеЕсли НомерСтроки >= 1000 и НомерСтроки < 10000 Тогда
	    			 Ноль = "00"
	    		 ИначеЕсли НомерСтроки >= 10000 и НомерСтроки < 100000 Тогда
	    			 Ноль = "0"
	    		 Иначе 
	    			 Ноль = ""
	    		 КонецЕсли;
			
	    			Если  Найти(Поле.Ключ, "T3R"+Ноль+НомерСтроки+"G2") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A2").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T3R"+Ноль+НомерСтроки+"G3") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A3").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;	  
	    			ИначеЕсли Найти(Поле.Ключ, "T3R"+Ноль+НомерСтроки+"G4S") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A4").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T3R"+Ноль+НомерСтроки+"G5") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A5").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			КонецЕсли;

			КонецЦикла;
			rsTab.Post();			
			Если СуществуетСтрока = Истина тогда	
				rsTab.Append();
				НомерСтроки = НомерСтроки + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsTab.Delete();
			КонецЕсли;
		КонецЦикла;

	//TAB2
		rsTab2 = Doc.DataSets("TAB2");
		rsTab2.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки2 = 1;		
		Пока ДобавитьНовуюСтроку Цикл			
			СуществуетСтрока = Ложь;		
			rsTab2.Edit();
			Для Каждого Поле Из Док Цикл
							
				 Если  НомерСтроки2 > 0 и НомерСтроки2 < 10 Тогда
					 Ноль = "00000"
				 ИначеЕсли НомерСтроки2 >= 10 и НомерСтроки2 < 100 Тогда
					 Ноль = "0000" 	
				 ИначеЕсли НомерСтроки2 >= 100 и НомерСтроки2 < 1000 Тогда
					 Ноль = "000"
				 ИначеЕсли НомерСтроки2 >= 1000 и НомерСтроки2 < 10000 Тогда
					 Ноль = "00"
				 ИначеЕсли НомерСтроки2 >= 10000 и НомерСтроки2 < 100000 Тогда
					 Ноль = "0"
				 Иначе 
					 Ноль = ""
				 КонецЕсли;
			 
					Если  Найти(Поле.Ключ, "T5R"+Ноль+НомерСтроки2+"G2") = 1 Тогда
						  rsTab2.Fields.Item("TAB2_A2").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T5R"+Ноль+НомерСтроки2+"G3") = 1 Тогда
						  rsTab2.Fields.Item("TAB2_A3").Value = Поле.Значение;
						  СуществуетСтрока = Истина;	  
				    ИначеЕсли Найти(Поле.Ключ, "T5R"+Ноль+НомерСтроки2+"G4D") = 1 Тогда
						Если Поле.Значение <> Дата(1,1,1) Тогда
						  rsTab2.Fields.Item("TAB2_A4").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
						КонецЕсли
					ИначеЕсли Найти(Поле.Ключ, "T5R"+Ноль+НомерСтроки2+"G5S") = 1 Тогда
						  rsTab2.Fields.Item("TAB2_A5").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					КонецЕсли;

			КонецЦикла;
			rsTab2.Post();			
			Если СуществуетСтрока = Истина тогда	
				rsTab2.Append();
				НомерСтроки2 = НомерСтроки2 + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsTab2.Delete();
			КонецЕсли;
		КонецЦикла;
//TAB3
		rsTab3 = Doc.DataSets("TAB3");
		rsTab3.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки3 = 1;		
		Пока ДобавитьНовуюСтроку Цикл			
			СуществуетСтрока = Ложь;		
			rsTab3.Edit();
			Для Каждого Поле Из Док Цикл
					
				 Если  НомерСтроки3 > 0 и НомерСтроки3 < 10 Тогда
					 Ноль = "00000"
				 ИначеЕсли НомерСтроки3 >= 10 и НомерСтроки3 < 100 Тогда
					 Ноль = "0000" 	
				 ИначеЕсли НомерСтроки3 >= 100 и НомерСтроки3 < 1000 Тогда
					 Ноль = "000"
				 ИначеЕсли НомерСтроки3 >= 1000 и НомерСтроки3 < 10000 Тогда
					 Ноль = "00"
				 ИначеЕсли НомерСтроки3 >= 10000 и НомерСтроки3 < 100000 Тогда
					 Ноль = "0"
				 Иначе 
					 Ноль = ""
				 КонецЕсли;
				 
				 
				 Если  Найти(Поле.Ключ, "T6R"+Ноль+НомерСтроки3+"G2") = 1 Тогда
						  rsTab3.Fields.Item("TAB3_A2").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T6R"+Ноль+НомерСтроки3+"G3") = 1 Тогда
						  rsTab3.Fields.Item("TAB3_A3").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T3R"+Ноль+НомерСтроки3+"G4") = 1 Тогда
						  rsTab3.Fields.Item("TAB3_A4").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T6R"+Ноль+НомерСтроки3+"G5D") = 1 Тогда
						Если Поле.Значение <> Дата(1,1,1) Тогда
						  rsTab3.Fields.Item("TAB3_A5").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
						КонецЕсли;  
					ИначеЕсли Найти(Поле.Ключ, "T6R"+Ноль+НомерСтроки3+"G6S") = 1 Тогда
						  rsTab3.Fields.Item("TAB3_A6").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					КонецЕсли;

			КонецЦикла;
			rsTab3.Post();			
			Если СуществуетСтрока = Истина тогда	
				rsTab3.Append();
				НомерСтроки3 = НомерСтроки3 + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsTab3.Delete();
			КонецЕсли;
		КонецЦикла;		

		КонецОтчета(Doc);
	КонецЕсли;
		
КонецПроцедуры

Процедура Формирование_Декларация_НДС_Дод5(Doc, БланкДод5, Документ)
	
	Если БланкДод5 = "J0215120" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложение5;	
		ТЧ = Документ.ДанныеОтчета.Получить().ДанныеМногострочныхРазделов;
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		
		с.Вставить("R01G4", "R001G5");
		с.Вставить("R01G3", "R001G4");
		с.Вставить("R02G3", "R010G4");
		с.Вставить("R02G4", "R010G5");
		с.Вставить("R03G3", "R011G4");
		с.Вставить("R03G4", "R011G5");
		с.Вставить("R03G6", "R011G6");
		с.Вставить("R06G4", "R021G4");
		с.Вставить("R06G5", "R021G5");
		с.Вставить("R06G6", "R021G6");
		с.Вставить("R01G6", "R001G6");
		с.Вставить("R02G6", "R010G6");
		с.Вставить("R15G4", "R020G4");
		с.Вставить("R15G5", "R020G5");
		с.Вставить("R15G6", "R020G6");
		с.Вставить("R010G3", "R0011G4");
		с.Вставить("R010G4", "R0011G5");
		с.Вставить("R010G6", "R0011G6");
		с.Вставить("R020G3", "R0012G4");
		с.Вставить("R020G4", "R0012G5");
		с.Вставить("R020G6", "R0012G6");
		с.Вставить("R040G3", "R0014G4");
		с.Вставить("R040G4", "R0014G5");
		с.Вставить("R040G6", "R0014G6");
		с.Вставить("R060G3", "R0016G4");
		с.Вставить("R060G4", "R0016G5");
		с.Вставить("R18G4", "R023G4");
		с.Вставить("R18G5", "R023G5");
		с.Вставить("R22G4", "R025G4");
		с.Вставить("R22G5", "R025G5");
		с.Вставить("R031G3", "R012G4");
		с.Вставить("R031G4", "R012G5");
		с.Вставить("R070G3", "R00161G4");
		с.Вставить("R070G6", "R00161G6");
		с.Вставить("R23G6", "R0110G6");
		с.Вставить("R23G7", "R0110G7");
		с.Вставить("R23G8", "R0110G8");
		с.Вставить("R24G6", "R0120G6");
		с.Вставить("R24G7", "R0120G7");
		с.Вставить("R24G8", "R0120G8");
		с.Вставить("R06G6", "R021G6");
		
		с.Вставить("FIRM_RUK", "HBOS");
		с.Вставить("FIRM_BUH", "HBUH");					
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		
		Для Каждого Поле Из ТЧ Цикл   //Док
			
			Если Поле.Ключ = "П5T1R" Тогда
				
				//TAB1///////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					rsTab.Fields.Item("TAB1_A2").Value = Стр.T1RG2;
					rsTab.Fields.Item("TAB1_A5").Value = Стр.T1RG3A;
					rsTab.Fields.Item("TAB1_B5").Value = Стр.T1RG3B;
					rsTab.Fields.Item("TAB1_A3").Value = Стр.T1RG4;
					rsTab.Fields.Item("TAB1_A4").Value = Стр.T1RG5;
					rsTab.Fields.Item("TAB1_A6").Value = Стр.T1RG6;
					rsTab.Fields.Item("TAB1_CX").Value = Стр.T1RG42;
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			Если Поле.Ключ = "П5T2R" Тогда
				
				//TAB2////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab2 = Doc.DataSets("TAB2");
				rsTab2.Clear();
				rsTab2.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					rsTab2.Fields.Item("TAB2_A2").Value = Стр.T2RG2;
					rsTab2.Fields.Item("TAB2_A3").Value = Стр.T2RG3A;
					rsTab2.Fields.Item("TAB2_B3").Value = Стр.T2RG3B;
					rsTab2.Fields.Item("TAB2_K4").Value = Стр.T2RG41;
					rsTab2.Fields.Item("TAB2_A4").Value = Стр.T2RG4;
					rsTab2.Fields.Item("TAB2_A5").Value = Стр.T2RG5;
					rsTab2.Fields.Item("TAB2_A6").Value = Стр.T2RG6;
					rsTab2.Fields.Item("TAB2_CX").Value = Стр.T2RG42;
					
					rsTab2.Post();
					rsTab2.Append();
				КонецЦикла;
				rsTab2.Delete();
			КонецЕсли;
			
			Если Поле.Ключ = "П5T11R" Тогда 
				
				//TAB9/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab9 = Doc.DataSets("TAB9");
				rsTab9.Clear();
				rsTab9.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					rsTab9.Fields.Item("TAB9_A2").Value = Стр.T11RG2;
					Если Стр.T11RG3D <> Дата(1,1,1) Тогда
						rsTab9.Fields.Item("TAB9_A3").Value = Стр.T11RG3D;
					КонецЕсли;
					rsTab9.Fields.Item("TAB9_A41").Value = Стр.T11RG41;
					rsTab9.Fields.Item("TAB9_A42").Value = Стр.T11RG42;
					rsTab9.Fields.Item("TAB9_A43").Value = Стр.T11RG43;
					rsTab9.Fields.Item("TAB9_CX").Value = Стр.T11RG5;
					rsTab9.Fields.Item("TAB9_A6").Value = Стр.T11RG6;
					rsTab9.Fields.Item("TAB9_A7").Value = Стр.T11RG7;
					rsTab9.Fields.Item("TAB9_A8").Value = Стр.T11RG8;
					
					rsTab9.Post();
					rsTab9.Append();
				КонецЦикла;
				rsTab9.Delete();
			КонецЕсли;
			
			Если  Поле.Ключ = "П5T12R" Тогда
				
				//TAB10/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab10 = Doc.DataSets("TAB10");
				rsTab10.Clear();
				rsTab10.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					rsTab10.Fields.Item("TAB10_A2").Value = Стр.T12RG2;
					Если Стр.T12RG3D <> Дата(1,1,1) Тогда
						rsTab10.Fields.Item("TAB10_A3").Value = Стр.T12RG3D;
					КонецЕсли;
					rsTab10.Fields.Item("TAB10_A41").Value = Стр.T12RG41;
					rsTab10.Fields.Item("TAB10_A42").Value = Стр.T12RG42;
					rsTab10.Fields.Item("TAB10_A43").Value = Стр.T12RG43;
					rsTab10.Fields.Item("TAB10_CX").Value = Стр.T12RG5;
					rsTab10.Fields.Item("TAB10_A6").Value = Стр.T12RG6;
					rsTab10.Fields.Item("TAB10_A7").Value = Стр.T12RG7;
					rsTab10.Fields.Item("TAB10_A8").Value = Стр.T12RG8;
					
					rsTab10.Post();
					rsTab10.Append();
				КонецЦикла;
				rsTab10.Delete();
			КонецЕсли;
			
		КонецЦикла;
		
		КонецОтчета(Doc);
	КонецЕсли;
	
КонецПроцедуры

Процедура Формирование_Декларация_НДС_Дод6(Doc, БланкДод6, Документ)

	Если БланкДод6="J0299320" Тогда
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаСправка;	
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);

			Если Док.HZ <> "" Тогда
				rsMain.Fields.Item("HZ").value = true;
			КонецЕсли;
			Если Док.HZN <> "" Тогда
				rsMain.Fields.Item("HZN").value = true;
			КонецЕсли;
			Если Док.HZU <> "" Тогда
				rsMain.Fields.Item("HZU").value = true;
			КонецЕсли;
			
			с.Вставить("A1", "R010G4");
			с.Вставить("A4", "R01G4");
			с.Вставить("A3", "R020G4");
			с.Вставить("A2", "R030G4");;	
			с.Вставить("N6", "R04G2");
			с.Вставить("N7", "R05G2");
			с.Вставить("N8", "R06G2");
			
			с.Вставить("FIRM_RUK", "HBOS");
			с.Вставить("FIRM_BUH", "HBUH");			
			
			ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
	//TAB1
	
		rsTab = Doc.DataSets("TAB1");
		rsTab.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки = 1;		
		Пока ДобавитьНовуюСтроку Цикл			
			СуществуетСтрока = Ложь;		
			rsTab.Edit();
			Для Каждого Поле Из Док Цикл
				
	    		 Если  НомерСтроки > 0 и НомерСтроки < 10 Тогда
	    			 Ноль = "00000"
	    		 ИначеЕсли НомерСтроки >= 10 и НомерСтроки < 100 Тогда
	    			 Ноль = "0000" 	
	    		 ИначеЕсли НомерСтроки >= 100 и НомерСтроки < 1000 Тогда
	    			 Ноль = "000"
	    		 ИначеЕсли НомерСтроки >= 1000 и НомерСтроки < 10000 Тогда
	    			 Ноль = "00"
	    		 ИначеЕсли НомерСтроки >= 10000 и НомерСтроки < 100000 Тогда
	    			 Ноль = "0"
	    		 Иначе 
	    			 Ноль = ""
	    		 КонецЕсли;
				 
				    Если  Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G2S") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A2").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G3S") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A3").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;	  
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G4") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A4").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			КонецЕсли;

			КонецЦикла;
			rsTab.Post();			
			Если СуществуетСтрока = Истина тогда	
				rsTab.Append();
				НомерСтроки = НомерСтроки + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsTab.Delete();
			КонецЕсли;
		КонецЦикла;

	//TAB2
		rsTab2 = Doc.DataSets("TAB2");
		rsTab2.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки2 = 1;		
		Пока ДобавитьНовуюСтроку Цикл			
			СуществуетСтрока = Ложь;		
			rsTab2.Edit();
			Для Каждого Поле Из Док Цикл
							
				 Если  НомерСтроки2 > 0 и НомерСтроки2 < 10 Тогда
					 Ноль = "00000"
				 ИначеЕсли НомерСтроки2 >= 10 и НомерСтроки2 < 100 Тогда
					 Ноль = "0000" 	
				 ИначеЕсли НомерСтроки2 >= 100 и НомерСтроки2 < 1000 Тогда
					 Ноль = "000"
				 ИначеЕсли НомерСтроки2 >= 1000 и НомерСтроки2 < 10000 Тогда
					 Ноль = "00"
				 ИначеЕсли НомерСтроки2 >= 10000 и НомерСтроки2 < 100000 Тогда
					 Ноль = "0"
				 Иначе 
					 Ноль = ""
				 КонецЕсли;
				 
				    Если  Найти(Поле.Ключ, "T3R"+Ноль+НомерСтроки2+"G2S") = 1 Тогда
						  rsTab2.Fields.Item("TAB2_A2").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T3R"+Ноль+НомерСтроки2+"G3S") = 1 Тогда
						  rsTab2.Fields.Item("TAB2_A3").Value = Поле.Значение;
						  СуществуетСтрока = Истина;	  
				    ИначеЕсли Найти(Поле.Ключ, "T3R"+Ноль+НомерСтроки2+"G4") = 1 Тогда
						  rsTab2.Fields.Item("TAB2_A4").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					КонецЕсли;

			КонецЦикла;
			rsTab2.Post();			
			Если СуществуетСтрока = Истина тогда	
				rsTab2.Append();
				НомерСтроки2 = НомерСтроки2 + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsTab2.Delete();
			КонецЕсли;
		КонецЦикла;
//TAB3
		rsTab3 = Doc.DataSets("TAB3");
		rsTab3.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки3 = 1;		
		Пока ДобавитьНовуюСтроку Цикл			
			СуществуетСтрока = Ложь;		
			rsTab3.Edit();
			Для Каждого Поле Из Док Цикл
					
				 Если  НомерСтроки3 > 0 и НомерСтроки3 < 10 Тогда
					 Ноль = "00000"
				 ИначеЕсли НомерСтроки3 >= 10 и НомерСтроки3 < 100 Тогда
					 Ноль = "0000" 	
				 ИначеЕсли НомерСтроки3 >= 100 и НомерСтроки3 < 1000 Тогда
					 Ноль = "000"
				 ИначеЕсли НомерСтроки3 >= 1000 и НомерСтроки3 < 10000 Тогда
					 Ноль = "00"
				 ИначеЕсли НомерСтроки3 >= 10000 и НомерСтроки3 < 100000 Тогда
					 Ноль = "0"
				 Иначе 
					 Ноль = ""
				 КонецЕсли;
				 
				    Если  Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки3+"G2S") = 1 Тогда
						  rsTab3.Fields.Item("TAB3_A2").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки3+"G3S") = 1 Тогда
						  rsTab3.Fields.Item("TAB3_A3").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки3+"G4") = 1 Тогда
						  rsTab3.Fields.Item("TAB3_A4").Value = Поле.Значение;
						  СуществуетСтрока = Истина;
					КонецЕсли;

			КонецЦикла;
			rsTab3.Post();			
			Если СуществуетСтрока = Истина тогда	
				rsTab3.Append();
				НомерСтроки3 = НомерСтроки3 + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsTab3.Delete();
			КонецЕсли;
		КонецЦикла;		

		КонецОтчета(Doc);
	КонецЕсли;
		
КонецПроцедуры

Процедура Формирование_Декларация_НДС_Дод7(Doc, БланкДод7, Документ)

	Если БланкДод7="J0215720" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложение7;	
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);

			Если Док.HZ <> "" Тогда
				rsMain.Fields.Item("HZ").value = true;
			КонецЕсли;
			Если Док.HZN <> "" Тогда
				rsMain.Fields.Item("HZN").value = true;
			КонецЕсли;
			Если Док.HZU <> "" Тогда
				rsMain.Fields.Item("HZU").value = true;
			КонецЕсли;
			
					с.Вставить("A1_4", "R011G4");
					с.Вставить("A1_5", "R011G5");
					с.Вставить("A1_6", "R011G6");
					с.Вставить("A1_7", "R011G7");
					с.Вставить("A2_4", "R012G4");
					с.Вставить("A2_5", "R012G5");
					с.Вставить("A2_6", "R012G6");
					с.Вставить("A2_7", "R012G7");
					с.Вставить("A3_4", "R0131G4");
					с.Вставить("A3_5", "R0131G5");
					с.Вставить("A3_6", "R0131G6");
					с.Вставить("A3_7", "R0131G7");
					с.Вставить("A4_4", "R0132G4");
					с.Вставить("A4_5", "R0132G5");
					с.Вставить("A4_6", "R0132G6");
					с.Вставить("A4_7", "R0132G7");
					с.Вставить("A5_4", "R0133G4");
					с.Вставить("A5_5", "R0133G5");
					с.Вставить("A5_6", "R0133G6");
					с.Вставить("A5_7", "R0133G7");
					с.Вставить("A6_6", "R02G6");
					с.Вставить("A6_7", "R02G7");
					с.Вставить("A6_8", "R02G8");
					с.Вставить("A6_9", "R02G9");
					с.Вставить("A9_3", "R031G3");
					с.Вставить("A9_4", "R031G4");
					с.Вставить("A9_5", "R031G5");
					с.Вставить("A9_6", "R031G6");
					с.Вставить("A9_7", "R031G7");
					с.Вставить("A10_3", "R032G3");
					с.Вставить("A10_4", "R032G4");
					с.Вставить("A10_5", "R032G5");
					с.Вставить("A10_6", "R032G6");
					с.Вставить("A10_7", "R032G7");
					с.Вставить("A11_3", "R033G3");
					с.Вставить("A11_4", "R033G4");
					с.Вставить("A11_5", "R033G5");
					с.Вставить("A11_6", "R033G6");
					с.Вставить("A11_7", "R033G7");
					с.Вставить("A12_1", "R041G1");
					с.Вставить("A12_10", "R041G10");
					с.Вставить("A12_11", "R041G11");
					с.Вставить("A12_12", "R041G12");
					с.Вставить("A12_13", "R041G13");
					с.Вставить("A12_14", "R041G14");
					с.Вставить("A12_2", "R041G2");
					с.Вставить("A12_3", "R041G3");
					с.Вставить("A12_4", "R041G4");
					с.Вставить("A12_5", "R041G5");
					с.Вставить("A12_6", "R041G6");
					с.Вставить("A12_7", "R041G7");
					с.Вставить("A12_8", "R041G8");
					с.Вставить("A12_9", "R041G9");
					с.Вставить("N1", "HCHV");
					
					с.Вставить("FIRM_RUK", "HBOS");
					с.Вставить("FIRM_BUH", "HBUH");					
					
				ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
	//TAB1
	
		rsTab = Doc.DataSets("TAB1");
		rsTab.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки = 1;		
		Пока ДобавитьНовуюСтроку Цикл			
			СуществуетСтрока = Ложь;		
			rsTab.Edit();
			Для Каждого Поле Из Док Цикл
				
	    		 Если  НомерСтроки > 0 и НомерСтроки < 10 Тогда
	    			 Ноль = "00000"
	    		 ИначеЕсли НомерСтроки >= 10 и НомерСтроки < 100 Тогда
	    			 Ноль = "0000" 	
	    		 ИначеЕсли НомерСтроки >= 100 и НомерСтроки < 1000 Тогда
	    			 Ноль = "000"
	    		 ИначеЕсли НомерСтроки >= 1000 и НомерСтроки < 10000 Тогда
	    			 Ноль = "00"
	    		 ИначеЕсли НомерСтроки >= 10000 и НомерСтроки < 100000 Тогда
	    			 Ноль = "0"
	    		 Иначе 
	    			 Ноль = ""
	    		 КонецЕсли;
									
				    Если  Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки+"G2D") = 1 Тогда
						Если Поле.Значение <> Дата(1,1,1) Тогда
						  rsTab.Fields.Item("TAB1_A2").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
						КонецЕсли;
	    			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки+"G3S") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A3").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;	  
	    			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки+"G4D") = 1 Тогда
						Если Поле.Значение <> Дата(1,1,1) Тогда
						  rsTab.Fields.Item("TAB1_A4").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
						КонецЕсли;
	    			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки+"G5S") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A5").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки+"G6") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A6").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки+"G7") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A7").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки+"G8") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A6").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T2R"+Ноль+НомерСтроки+"G9") = 1 Тогда
	    				  rsTab.Fields.Item("TAB1_A9").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;

	    			КонецЕсли;

			КонецЦикла;
			rsTab.Post();			
			Если СуществуетСтрока = Истина тогда	
				rsTab.Append();
				НомерСтроки = НомерСтроки + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsTab.Delete();
			КонецЕсли;
		КонецЦикла;	

		КонецОтчета(Doc);
	КонецЕсли;
		
КонецПроцедуры

Процедура Формирование_Декларация_НДС_Дод8(Doc, БланкДод8, Документ)

	Если БланкДод8="J0215820" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложение8;	
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);

			Если Док.HZ <> "" Тогда
				rsMain.Fields.Item("HZ").value = true;
			КонецЕсли;
			Если Док.HZN <> "" Тогда
				rsMain.Fields.Item("HZN").value = true;
			КонецЕсли;
			с.Вставить("FIRM_RUK", "HBOS");
			с.Вставить("FIRM_BUH", "HBUH");
			
			ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
	//TAB2
	
		rsTab2 = Doc.DataSets("TAB2");
		rsTab2.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки = 1;		
		Пока ДобавитьНовуюСтроку Цикл			
			СуществуетСтрока = Ложь;		
			rsTab2.Edit();
			Для Каждого Поле Из Док Цикл
				
	    		 Если  НомерСтроки > 0 и НомерСтроки < 10 Тогда
	    			 Ноль = "00000"
	    		 ИначеЕсли НомерСтроки >= 10 и НомерСтроки < 100 Тогда
	    			 Ноль = "0000" 	
	    		 ИначеЕсли НомерСтроки >= 100 и НомерСтроки < 1000 Тогда
	    			 Ноль = "000"
	    		 ИначеЕсли НомерСтроки >= 1000 и НомерСтроки < 10000 Тогда
	    			 Ноль = "00"
	    		 ИначеЕсли НомерСтроки >= 10000 и НомерСтроки < 100000 Тогда
	    			 Ноль = "0"
	    		 Иначе 
	    			 Ноль = ""
				 КонецЕсли;            
			
	    			Если  Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G2S") = 1 Тогда
	    				  rsTab2.Fields.Item("TAB2_A9").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G3S") = 1 Тогда
	    				  rsTab2.Fields.Item("TAB2_A2").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;	  
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G4") = 1 Тогда
	    				  rsTab2.Fields.Item("TAB2_A3").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G5D") = 1 Тогда
						Если Поле.Значение <> Дата(1,1,1) Тогда
						  rsTab2.Fields.Item("TAB2_A4").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
						КонецЕсли;
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G6S") = 1 Тогда
	    				  rsTab2.Fields.Item("TAB2_A5").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G7") = 1 Тогда
	    				  rsTab2.Fields.Item("TAB2_A6").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G8") = 1 Тогда
	    				  rsTab2.Fields.Item("TAB2_A7").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			ИначеЕсли Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G9S") = 1 Тогда
	    				  rsTab2.Fields.Item("TAB2_A8").Value = Поле.Значение;
	    				  СуществуетСтрока = Истина;
	    			КонецЕсли;

			КонецЦикла;
			rsTab2.Post();			
			Если СуществуетСтрока = Истина тогда	
				rsTab2.Append();
				НомерСтроки = НомерСтроки + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsTab2.Delete();
			КонецЕсли;
		КонецЦикла;	

		КонецОтчета(Doc);
	КонецЕсли;
		
КонецПроцедуры

Процедура Формирование_Декларация_НДС_Дод9(Doc, БланкДод9, Документ)

	Если БланкДод9="J0215320" Тогда
		
		Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложение9;	
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);

			Если Док.HZ <> "" Тогда
				rsMain.Fields.Item("HZ").value = true;
			КонецЕсли;
			Если Док.HZN <> "" Тогда
				rsMain.Fields.Item("HZN").value = true;
			КонецЕсли;
			Если Док.HZU <> "" Тогда
				rsMain.Fields.Item("HZU").value = true;
			КонецЕсли;
			с.Вставить("N1", "HPV");
			с.Вставить("N2", "HPVN");
			с.Вставить("N3", "R0101G3");
			с.Вставить("N4", "R0102G3");
		Если Док.R006G3D <> Дата(1,1,1) Тогда
			с.Вставить("N5", "R006G3D");	
		КонецЕсли;
		    с.Вставить("A1_21", "R0201G2A");
			с.Вставить("A2_21", "R0202G2A");
			с.Вставить("A3_21", "R0203G2A");
			с.Вставить("A4_21", "R0204G2A");
			с.Вставить("A5_21", "R0205G2A");
			с.Вставить("A6_21", "R0206G2A");
			с.Вставить("A7_21", "R0207G2A");
			с.Вставить("A8_21", "R0208G2A");
			с.Вставить("A9_21", "R0209G2A");
			с.Вставить("A10_21", "R0210G2A");
			с.Вставить("A11_21", "R0211G2A");
			с.Вставить("A12_21", "R0212G2A");

			с.Вставить("A1_22", "R0201G2B");
			с.Вставить("A2_22", "R0202G2B");
			с.Вставить("A3_22", "R0203G2B");
			с.Вставить("A4_22", "R0204G2B");
			с.Вставить("A5_22", "R0205G2B");
			с.Вставить("A6_22", "R0206G2B");
			с.Вставить("A7_22", "R0207G2B");
			с.Вставить("A8_22", "R0208G2B");
			с.Вставить("A9_22", "R0209G2B");
			с.Вставить("A10_22", "R0210G2B");
			с.Вставить("A11_22", "R0211G2B");
			с.Вставить("A12_22", "R0212G2B");

			с.Вставить("A1_3", "R0201G3");
			с.Вставить("A2_3", "R0202G3");
			с.Вставить("A3_3", "R0203G3");
			с.Вставить("A4_3", "R0204G3");
			с.Вставить("A5_3", "R0205G3");
			с.Вставить("A6_3", "R0206G3");
			с.Вставить("A7_3", "R0207G3");
			с.Вставить("A8_3", "R0208G3");
			с.Вставить("A9_3", "R0209G3");
			с.Вставить("A10_3", "R0210G3");
			с.Вставить("A11_3", "R0211G3");
			с.Вставить("A12_3", "R0212G3");
			с.Вставить("A13_3", "R02G3");
			с.Вставить("A14_3", "R03G3");
			с.Вставить("A15_3", "R04G3");

			с.Вставить("A1_4", "R0201G4");
			с.Вставить("A2_4", "R0202G4");
			с.Вставить("A3_4", "R0203G4");
			с.Вставить("A4_4", "R0204G4");
			с.Вставить("A5_4", "R0205G4");
			с.Вставить("A6_4", "R0206G4");
			с.Вставить("A7_4", "R0207G4");
			с.Вставить("A8_4", "R0208G4");
			с.Вставить("A9_4", "R0209G4");
			с.Вставить("A10_4", "R0210G4");
			с.Вставить("A11_4", "R0211G4");
			с.Вставить("A12_4", "R0212G4");
			с.Вставить("A13_4", "R02G4");
			с.Вставить("A14_4", "R03G4");
			с.Вставить("A15_4", "R04G4");

			с.Вставить("A1_5", "R0201G5");
			с.Вставить("A2_5", "R0202G5");
			с.Вставить("A3_5", "R0203G5");
			с.Вставить("A4_5", "R0204G5");
			с.Вставить("A5_5", "R0205G5");
			с.Вставить("A6_5", "R0206G5");
			с.Вставить("A7_5", "R0207G5");
			с.Вставить("A8_5", "R0208G5");
			с.Вставить("A9_5", "R0209G5");
			с.Вставить("A10_5", "R0210G5");
			с.Вставить("A11_5", "R0211G5");
			с.Вставить("A12_5", "R0212G5");
			с.Вставить("A13_5", "R02G5");
			с.Вставить("A14_5", "R03G5");
			с.Вставить("A15_5", "R04G5");

			с.Вставить("A1_6", "R0201G6");
			с.Вставить("A2_6", "R0202G6");
			с.Вставить("A3_6", "R0203G6");
			с.Вставить("A4_6", "R0204G6");
			с.Вставить("A5_6", "R0205G6");
			с.Вставить("A6_6", "R0206G6");
			с.Вставить("A7_6", "R0207G6");
			с.Вставить("A8_6", "R0208G6");
			с.Вставить("A9_6", "R0209G6");
			с.Вставить("A10_6", "R0210G6");
			с.Вставить("A11_6", "R0211G6");
			с.Вставить("A12_6", "R0212G6");
			с.Вставить("A13_6", "R02G6");
			
			с.Вставить("FIRM_RUK", "HBOS");
			с.Вставить("FIRM_BUH", "HBUH");			
			
			ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);

		КонецОтчета(Doc);
	КонецЕсли;
		
КонецПроцедуры

//-----------------------------------------------------------------------------------------------
Процедура НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС)
	
	Попытка
		НоваяСтрока.Номенклатура  =  НоменклатураДока;
		НоваяСтрока.Количество  =  НомКоличество;
		НоваяСтрока.Цена =  НомЦена;
		НоваяСтрока.Сумма = НомСумма;
		НоваяСтрока.СтавкаНДС = НомСтавкаНДС;
		НоваяСтрока.СуммаНДС=СуммаНДС;
		
		Если ИмяБазы="УТ" или ИмяБазы="УТП" или ИмяБазы="УПП"    Тогда
			НоваяСтрока.Содержание = НоменклатураДока;
		КонецЕсли;
	Исключение
	КонецПопытки;

КонецПроцедуры

Процедура СозданиеНоменклатуры(ДатаДокаВх,  НомерДокаВх,  НоменклатураОригинал,  НаОсновании,  ЕИОригинал,  НомСтавкаНДС, ВидНоменклатуры)	
	
	Если СоздаватьНоменклатуру Тогда
		
		ГруппаМедка = Справочники.Номенклатура.НайтиПоКоду("MED");
		Если НЕ ЗначениеЗаполнено(ГруппаМедка) тогда
			ГруппаОбъект = Справочники.Номенклатура.СоздатьГруппу();
			ГруппаОбъект.Наименование  =  "Auto_MEDoc";  
			ГруппаОбъект.Код = "MED";
			ГруппаОбъект.Записать();
		КонецЕсли;
		НоменклатураМедка = Справочники.Номенклатура.СоздатьЭлемент();
		НоменклатураМедка.Родитель = Справочники.Номенклатура.НайтиПоКоду("MED");
		НоменклатураМедка.Наименование = НоменклатураОригинал;
		НоменклатураМедка.НаименованиеПолное =  НоменклатураОригинал;
		НоменклатураМедка.Комментарий =  Строка(НСтр("ru = 'Создана M.E.Doc на основании ';uk = 'Створена M.E.Doc на підставі '") +
		НаОсновании + Строка(НомерДокаВх) + НСтр("ru = 'от ';uk = 'від '") + ДатаДокаВх);
		Если ВидНоменклатуры = "Услуг" Тогда
			НоменклатураМедка.Услуга = Истина;
		КонецЕсли;
		ЕдИзмНоменклатуры = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕИОригинал);
		Если ЗначениеЗаполнено(ЕдИзмНоменклатуры) Тогда
			НоменклатураМедка.БазоваяЕдиницаИзмерения = ЕдИзмНоменклатуры;
		КонецЕсли;
		НоменклатураМедка.СтавкаНДС = НомСтавкаНДС;
		
		Если ИмяБазы = "УТ" или ИмяБазы = "УТП" или ИмяБазы = "УПП" Тогда
			НоменклатураМедка.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию(ВидНоменклатуры);
		КонецЕсли;
		НоменклатураМедка.Записать();
		
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ОсновныеДействияФормыСформировать(Кнопка)
	
	Сформировать()

КонецПроцедуры

Процедура Сформировать() 
	
	Попытка 
		App = Новый COMОбъект("MEDOC.ZApplication"); 
	Исключение 
		Предупреждение(НСтр("ru = 'Передача документов отложена. Возможные причины:';uk = 'Передача документів відкладено. Можливі причини:'") + Символы.ПС + 
		НСтр("ru = '- M.E.Doc не запущен.';uk = '- M.E.Doc не запущений.'") + символы.ПС + 
		НСтр("ru = '- не выполнен вход в предприятие из списка.';uk = '- не виконаний вхід у підприємство зі списку.'"));
		Возврат; 
	КонецПопытки;    
	//-----------------------------------------------------------------------------------------	
	Попытка 
		Если НЕ ПроверкаВерсииМедка(App.GetPrgVersion()) Тогда
			возврат;
		Конецесли;
	Исключение 
		Предупреждение(НСтр("ru = 'Ошибка при определении версии.';uk = 'Помилка при визначенні версії.'"));
	КонецПопытки;
	//-----------------------------------------------------------------------------------------	
	Попытка 
		ОргМедок = ДатьОргМЕДок();
	    Орг1С = КодЕДРПОУ(ОрганизацияПервичка);		
		orgId = App.SeekOrg(СокрЛП(КодПоЕДРПОУ), СокрЛП(пФил)); 
		Если orgId = 0 Тогда 
			//ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Сформировать.Доступность = Ложь;
			Предупреждение(НСтр("ru = 'Предприятия не существует в М.E.Doc : ';uk = 'Підприємства не існує в М.E.Doc : '") + Символы.ПС +
			НСтр("ru = 'ЕДРПОУ : ';uk = 'ЄДРПОУ : '") + КодПоЕДРПОУ + Символы.ПС + НСтр("ru = 'Филиал : ';uk = 'Філія : '") + пФил + Символы.ПС + Символы.ПС + 
			НСтр("ru = 'Проверьте :';uk = 'Перевірте :'") + Символы.ПС + 
			НСтр("ru = '- внесен ли код ЕДРПОУ корректно';uk = '- чи внесений код ЕДРПОУ коректно'") + Символы.ПС + 
			НСтр("ru = '- внесен ли код филиала корректно';uk = '- чи внесений код філії коректно'") + Символы.ПС +
			НСтр("ru = 'Если Да,  создайте в М.E.Doc новое предприятие.';uk = 'Якщо Так,  створіть в М.E.Doc нове підприємство.'")); 
			Возврат;
		ИначеЕсли ОргМедок <> Орг1С Тогда
			Предупреждение(НСтр("ru = 'Ошибка: Предприятие открытое в М.E.Doc не соответствует выбранному в 1С.';uk = 'Помилка: Підприємство відкрите в М.E.Doc не співпадає вибраному в 1С.'"));
		    Возврат;
		КонецЕсли;   
	Исключение
		Предупреждение(НСтр("ru = 'Ошибка при определении наличия предприятия в М.E.Doc.';uk = 'Помилка при визначенні наявності підприємства в М.E.Doc.'"));
	КонецПопытки; 
			
	//-----------------------------------------------------------------------------------------
	КоличествоДокументов  =  0;
	КоличествоДокументовСчет  =  0;
	КоличествоДокументовАкт  =  0; 
	КоличествоДокументовНН  =  0;
	КоличествоДокументовДод2  = 0;  
	КоличествоДокументовЗапит  =  0;
	КоличествоДокументовВидНакл  =  0;
	КоличествоДокументовВозвратТоваровОтПокупателя = 0;
	КоличествоДокументовВозвратТоваровПоставщику = 0;
	КоличествоДокументовАктСверки  =  0;
	КоличествоДокументовТТНспирт = 0;
	КоличествоДокументовТТНалкоголь = 0;
	КоличествоОтправленных =  0;
	КоличествоСуществующих =  0;
	ЭлементыФормы.ТаблицаДокументов.Колонки.Статус = "";
	СписокДляОткрытия = Новый Массив();
	//------------------------------------------------------------------------------------
	Для каждого СтрокаДокумент Из ТаблицаДокументов Цикл  //ЭлементыФормы.ТаблицаДокументов.ВыделенныеСтроки
		Если СтрокаДокумент.Пометка Тогда
			Документ  =  СтрокаДокумент.Документ; 
			ИД = Строка(Документ.УникальныйИдентификатор());  
			НайденнаяСтрока = ТаблицаДокументов.Найти(Документ,  "Документ");
			Если App.GetSendSTTByExDocID(ИД) <> -1 и App.GetInTrashStatus(ИД) = Ложь  Тогда
				КоличествоСуществующих = КоличествоСуществующих + 1;
			КонецЕсли;  
		КонецЕсли;
	КонецЦикла;		
	
	Если КоличествоСуществующих > 0 тогда   
		Ответ = Вопрос(НСтр("ru = 'Документы существуют в M.E.Doc:';uk = 'Документи існують в M.E.Doc:'") + Символы.ПС + 
		+ Число(КоличествоСуществующих) +  НСтр("ru = ' из ';uk = ' з '") + ЭлементыФормы.ТаблицаДокументов.ВыделенныеСтроки.Количество() +  НСтр("ru = ' выбранных.';uk = ' обраних.'") + Символы.ПС +		
		НСтр("ru = 'Переместить существующие в Корзину,  и передать новые документы?';uk = 'Перемістити існуючі до Корзини,  та передати нові документи?'"),  РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ  =  КодВозвратаДиалога.Да Тогда 
			ПерезаписьДокументов = "Да";
		ИначеЕсли Ответ  =  КодВозвратаДиалога.Нет Тогда 
			ПерезаписьДокументов = "Нет";
		ИначеЕсли Ответ  =  КодВозвратаДиалога.Отмена Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;     	
	
	ОтменаПередачиНН = Ложь;
	pd =  App.GetPrimaryDocs();
	Для каждого СтрокаДокумент Из ТаблицаДокументов Цикл  //ЭлементыФормы.ТаблицаДокументов.ВыделенныеСтроки
		Если СтрокаДокумент.Пометка Тогда
			Если ОтменаПередачиНН Тогда
				Прервать;
			КонецЕсли;
			Документ = СтрокаДокумент.Документ; 
			НайденнаяСтрока = ТаблицаДокументов.Найти(Документ,  "Документ");
			ИД = Строка(Документ.УникальныйИдентификатор());
			PDate = Дата(Год(Документ.Дата), Месяц(Документ.Дата), 01);
			Если ПерезаписьДокументов = "Да" Тогда   
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
					App.MoveToTrash(ИД);
				КонецЕсли;			
			ИначеЕсли ПерезаписьДокументов = "Нет" Тогда 
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли;			
			
			//------------------------------------------------------------------------------------
			Если ТипДок = "ОказаниеУслуг" Тогда
				Если (Документ.УчитыватьНДС) = Ложь Тогда
					Бланк  =  "1С82АВРБ"
				Иначе 
					Если (Документ.СуммаВключаетНДС) = Ложь Тогда
						Бланк  =  "1С82АВР0"
					Иначе
						Бланк  =  "1С82АВР"
					КонецЕсли;
				КонецЕсли;
				
				ПередаемАкт(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, НайденнаяСтрока);
			КонецЕсли;
			///--------------------------------------------------------------------------
			Если ТипДок = "Счет" Тогда 			
				
				Если (Документ.УчитыватьНДС) = Ложь Тогда 
					Бланк  =  "1С82РАХБ"
				Иначе
					Если (Документ.СуммаВключаетНДС) = Ложь Тогда
						Бланк  =  "1С82РАХ0"
					Иначе
						Бланк  =  "1С82РАХ"
					КонецЕсли;
				КонецЕсли;   
				
				ПередаемСчет(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовСчет, НайденнаяСтрока);
			КонецЕсли; 
			///--------------------------------------------------------------------------
			
			Если ТипДок = "ВозвратТоваровОтПокупателя" Тогда 			
				
				Бланк = "101";
				
				ПередаемВозвратТоваровОтПокупателя(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВозвратТоваровОтПокупателя, НайденнаяСтрока);
			КонецЕсли;  
			
			///--------------------------------------------------------------------------
			
			Если ТипДок = "ВозвратТоваровПоставщику" Тогда 			
				
				Бланк = "102";
				
				ПередаемВозвратТоваровПоставщику(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВозвратТоваровПоставщику, НайденнаяСтрока);
			КонецЕсли;  
			
			///--------------------------------------------------------------------------
			Если ТипДок = "ВидНакладна" Тогда 						
				
				//Бланк  =  "2";
				Если (Документ.УчитыватьНДС) = Ложь Тогда 
					Бланк = "1С82ВНБ"
				Иначе
					Если (Документ.СуммаВключаетНДС) = Ложь Тогда
						Бланк = "1С82ВН0"
					Иначе
						Бланк = "1С82ВН"
					КонецЕсли;
				КонецЕсли;   
				
				ПередаемРасхНакл(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВидНакл, НайденнаяСтрока); 
			КонецЕсли;      
			///--------------------------------------------------------------------------
			Если ТипДок = "АктСверки" Тогда Бланк = "1С82АЗ";
				ПередаемАЗ(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАктСверки, НайденнаяСтрока); 
			КонецЕсли;    
			//---------------------------------------------------------------------------------
			Если ТипДок = "НалоговаяНакладная" Тогда
				Если ЮрикФизик = "Юрик" Тогда
					Бланк = "J1201010"; 
				Иначе 
					Бланк = "F1201010"; 
				КонецЕсли;
				
				ПередаемНН(App, Документ, Бланк, PDate, ИД, КоличествоДокументовНН, НайденнаяСтрока, orgId);   
				
			КонецЕсли;  	
			//------------------------------------------------------------------------------------
			Если ТипДок = "Приложение2" Тогда 			
				
				Если ЮрикФизик = "Юрик" Тогда
					Бланк = "J1201210"; 
				Иначе 
					Бланк = "F1201210";
				КонецЕсли;
				
				ПередаемДод2(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовДод2, НайденнаяСтрока, orgId);			
			КонецЕсли;
			
			//-------------------------------ТТН по спирту и алкоголю----------------------------------------//
			
			Если ТипДок = "ТТНспирт" Тогда 			
				
				Если ЮрикФизик = "Юрик" Тогда
					Бланк  =  "J1204101";  		
				Иначе 
					Бланк  =  "F1204101";    
				КонецЕсли;
				
				ПередаемТТНспирт(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовТТНспирт, НайденнаяСтрока, orgId);			
			КонецЕсли;
			
			Если ТипДок = "ТТНалкоголь" Тогда 			
				
				
				Если ЮрикФизик = "Юрик" Тогда
					Бланк  =  "J1204201";  		
				Иначе 
					Бланк  =  "F1204201";    
				КонецЕсли;
				
				ПередаемТТНалкоголь(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовТТНалкоголь, НайденнаяСтрока, orgId);			
			КонецЕсли;
			
			//----------------------------------Конец блока ТТН----------------------------------------------//
		КонецЕсли;	
	КонецЦикла;
	//--------------------------------------------------------------------------
	КоличествоДокументов =  КоличествоДокументовВидНакл + КоличествоДокументовАктСверки + КоличествоДокументовСчет + КоличествоДокументовАкт +
	КоличествоДокументовНН + КоличествоДокументовДод2 + КоличествоДокументовЗапит + КоличествоДокументовВозвратТоваровОтПокупателя + КоличествоДокументовВозвратТоваровПоставщику+
	КоличествоДокументовТТНспирт+КоличествоДокументовТТНалкоголь;  	
	
	Если КоличествоДокументов>0 Тогда
		Предупреждение(НСтр("ru = 'Передано в M.E.Doc:';uk = 'Передано в M.E.Doc:'") + Символы.ПС +   
		"  - " + КоличествоДокументов + " шт.");
		//--------------------------------------------------------------------------
		Если ОтпрНет  =  2 и App.GetDocStatus(ИД)<>3 Тогда 
			Sender  =  App.GetDocSender();
			Для каждого СтрокаДокумент Из ЭлементыФормы.ТаблицаДокументов.ВыделенныеСтроки Цикл 
				ИД  =  Строка(Документ.УникальныйИдентификатор());
				Sender.Add(ИД);    
			КонецЦикла;    
			
			Предупреждение(НСтр("ru = 'Отправляем в ГФС. Перейдите в M.E.Doc';uk = 'Відправляємо до ДФС. Перейдіть в M.E.Doc'"));
			cnt  =  Sender.Send(1);    
			ОтправленоЧисло = cnt;
			
			Для каждого СтрокаДокумент Из ЭлементыФормы.ТаблицаДокументов.ВыделенныеСтроки Цикл 
				Документ  =  СтрокаДокумент.Документ; 
				ИД  =  Строка(Документ.УникальныйИдентификатор());
                ПроверкаСтатусов(App, Документ, ИД);
			КонецЦикла;   
			
		ИначеЕсли 
			ОтпрНет  =  2 и App.GetDocStatus(ИД) = 3 Тогда 
			Сообщить(Нстр("ru = 'Документ ошибочный, поэтому в ГФС не отправляется.';uk = 'Документ помилковий, тому в ДФС не відправляється.'"));
		КонецЕсли; 
		
		Если ОтпрНет  =  3  Тогда
			Sender  =  App.GetDocSender(); 
			Для каждого СтрокаДокумент Из ЭлементыФормы.ТаблицаДокументов.ВыделенныеСтроки Цикл 
				Документ  =  СтрокаДокумент.Документ;   
				Если Документ.Контрагент.КодПоЕДРПОУ = "" Тогда
					Сообщить(Строка(Документ) + НСтр("ru = ' не будет отправлен контрагенту,  т.к. у него не указан ЕДРПОУ.';uk = ' не буде відправлено контрагенту,  оскліьки в нього не вказаний ЄДРПОУ.'"));
				Иначе 
					ИД  =  Строка(Документ.УникальныйИдентификатор());
					Sender.Add(ИД);    
				КонецЕсли;
			КонецЦикла;    
			
			Предупреждение(Нстр("ru = 'Отправляем Контрагенту. Перейдите в M.E.Doc';uk = 'Відправляємо Контрагенту. Перейдіть в M.E.Doc'"));	
			cnt  =  Sender.Send(0); 
			ОтправленоЧисло = cnt;
			
			Для каждого СтрокаДокумент Из ЭлементыФормы.ТаблицаДокументов.ВыделенныеСтроки Цикл 
				Документ  =  СтрокаДокумент.Документ; 
				ИД  =  Строка(Документ.УникальныйИдентификатор());
                ПроверкаСтатусов(App, Документ, ИД);
			КонецЦикла;   

		КонецЕсли;     
		//---------------------------------------------------------------  		
		Если ФР = Истина Тогда 
			Попытка
				Если ТипДок = "НалоговаяНакладная" Тогда
					ТипДокФильтр = "10100"
				ИначеЕсли ТипДок = "Приложение2" Тогда
					ТипДокФильтр = "10101"
				ИначеЕсли ТипДок = "Счет" Тогда
					ТипДокФильтр = "10103" 
				ИначеЕсли ТипДок = "ОказаниеУслуг" Тогда
					ТипДокФильтр = "10104" 
				ИначеЕсли ТипДок = "ВидНакладна" Тогда
					ТипДокФильтр = "10105" 
				ИначеЕсли ТипДок = "АктСверки" Тогда
					ТипДокФильтр = "10106"   
				ИначеЕсли ТипДок = "ВозвратТоваровОтПокупателя" Тогда
					ТипДокФильтр = "10107"  
				ИначеЕсли ТипДок = "ВозвратТоваровПоставщику" Тогда
					ТипДокФильтр = "10108"  
				КонецЕсли;
				
				reestrFil  = App.RunModule("PrimaryDocsRstNew");  
				filterTbl  =  reestrFil.GetFilter(); 
				filterTbl.Fields.Item("DOCTYPE").Value  =  ТипДокФильтр; 
				filterTbl.Fields.Item("PERFROM").Value  =  Дата(НачПериода);  
				filterTbl.Fields.Item("PERTO").Value  =  Дата(КонПериода);   			
				Если ЗначениеЗаполнено(Контрагент.КодПоЕДРПОУ) Тогда
					filterTbl.Fields.Item("PARTNEREDRPOU").Value  =  Контрагент.КодПоЕДРПОУ; //ЕДРПОУ КОНТРАГЕНТА
					filterTbl.Fields.Item("PARTNERDEPT").Value  =  ""; //КОД ФИЛИАЛА КОНТРАГЕНТА
				КонецЕсли;   				
				filterTbl.Fields.Item("STAN").Value  =  2; //1 - входящие 2 - исходящие 
				//filterTbl.Fields.Item("ROUTE").Value  =  2;
				//filterTbl.Fields.Item("SUBROUTE").Value  =  -3; 
				reestrFil.ApplyFilter(); 
			Исключение
			КонецПопытки;
		КонецЕсли;  		 
		
		Если ОД = Истина Тогда
			Для Каждого ИД Из СписокДляОткрытия Цикл
				App.ShowDocument(ИД);
			КонецЦикла;        		
		КонецЕсли;     
		//---------------------------------------------------------------
	Иначе 
		Предупреждение(НСтр("ru = 'Не передано ни одного документа.';uk = 'Не передано жодного документа.'"));
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИД(Объект)
	Перем Стр;
	Стр  =  Объект.УникальныйИдентификатор();
	Возврат Стр;
КонецФункции

Функция ПолучитьСчетаРасчетовСКонтрагентом(Организация,  Контрагент,  Договор,  ВалютаРегламентированногоУчета  =  Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВалютаРегламентированногоУчета) тогда
		ВалютаРегламентированногоУчета  =  Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Результат  =  Новый Структура("
	|СчетРасчетов,  СчетАвансов, 
	|СчетРасчетовПокупателя,  СчетАвансовПокупателя, 
	|СчетУчетаТары,  СчетУчетаТарыПокупателя, 
	|СчетАвансовПоТаре,  СчетАвансовПоТареПокупателя, 
	|СчетРасчетовПриБартере,  СчетАвансовПриБартере, 
	|СчетРасчетовПокупателяПриБартере,  СчетАвансовПокупателяПриБартере, 
	|СчетУчетаНДСПриобретений, СчетУчетаНДСПриобретенийПодтвержденный, 
	|СчетУчетаНДСПродаж, СчетУчетаНДСПродажПодтвержденный, 
	|НалоговоеНазначениеПриобретений, НалоговоеНазначениеПриобретенийПоТаре, 
	|НалоговоеНазначениеПродаж,  НалоговоеНазначениеПродажПоТаре, 
	|СтавкаНДСПриобретений, СтавкаНДСПродаж, 
	|Организация,  Контрагент,  Договор,  ВидРасчетовПоДоговору,  Амортизируется");
	
	ВидРасчетовПоДоговору  =  ОпределениеВидаРасчетовПоПараметрамДоговора(Договор, ВалютаРегламентированногоУчета);
	
	Если ИмяБазы = "УТП" Тогда 
		СписокГруппКонтрагентов  =  УправлениеВзаиморасчетами.ПолучитьСписокВышестоящихГрупп(Контрагент);	
		СписокГруппДоговоров  =  УправлениеВзаиморасчетами.ПолучитьСписокВышестоящихГрупп(Договор);
	Иначе	
		СписокГруппКонтрагентов  =  ОбщегоНазначения.ПолучитьСписокВышестоящихГрупп(Контрагент);	
		СписокГруппДоговоров  =  ОбщегоНазначения.ПолучитьСписокВышестоящихГрупп(Договор);
	КонецЕсли;
	
	Запрос     =  Новый Запрос();
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("Контрагент",         Контрагент);
	Запрос.УстановитьПараметр("Договор",            Договор);
	Запрос.УстановитьПараметр("ВидРасчетов",        ВидРасчетовПоДоговору);
	Запрос.УстановитьПараметр("ПустаяОрганизация",  Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",      Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидРасчетов",  Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка());
	
	Если ИмяБазы="УПП" Тогда УчетКонтр = "КонтрагентыОрганизаций" 
	Иначе  УчетКонтр= "СчетаУчетаРасчетовСКонтрагентами" 
	КонецЕсли;
	Если ИмяБазы="УПП" Тогда Аморт = ""
	Иначе  Аморт = "Амортизируется,"
	КонецЕсли;
	
	ШаблонЗапросаБезГде  = ", 
	|	СчетУчетаРасчетовСПоставщиком, 
	|	СчетУчетаАвансовВыданных, 
	|	СчетУчетаРасчетовСПокупателем, 
	|	СчетУчетаАвансовПолученных, 
	|	СчетУчетаРасчетовПоТареСПоставщиком, 
	|	СчетУчетаАвансовПоТареВыданных, 
	|	СчетУчетаРасчетовПоТареСПокупателем, 
	|	СчетУчетаАвансовПоТареПолученных, 
	|	СчетУчетаРасчетовСПоставщикомПриБартере, 
	|	СчетУчетаРасчетовСПокупателемПриБартере, 
	|	СчетУчетаНДСПриобретений, 
	|	СчетУчетаНДСПриобретенийПодтвержденный, 
	|	СчетУчетаНДСПродаж, 
	|	СчетУчетаНДСПродажПодтвержденный, 
	|	НалоговоеНазначениеПриобретений, 
	|	НалоговоеНазначениеПриобретенийПоТаре, 
	|	НалоговоеНазначениеПродаж, 
	|   НалоговоеНазначениеПродажПоТаре, 
	|	СтавкаНДСПриобретений, 
	|	СтавкаНДСПродаж, 
	|	Организация, 
	|	Контрагент, 
	|	Договор, 
	|	"+Аморт+" 
	|  	ВидРасчетовПоДоговору
	|
	|ИЗ
	|	РегистрСведений."+УчетКонтр+"
	|";
	
	Индекс  =  1;
	                   
	ТекстЗапроса  =  "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	" + Формат(Индекс, "ЧГ = 0") + " КАК Приоритет" +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	
	|	Организация  =  &Организация И
	|	Контрагент   =  &Контрагент И
	|	Договор      =  &Договор И НЕ &Договор  =  &ПустойДоговор
	|";
	
	Индекс  =  Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс,  ГруппаДоговоров);
		
		ТекстЗапроса  =  ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ	
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ = 0") +
		ШаблонЗапросаБезГде + "
		|ГДЕ
		|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
		|	Организация 		   =  &Организация И
		|	Контрагент  		   =  &Контрагент И
		|	Договор     		   =  &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс  =  Индекс + 1;
		
	КонецЦикла;
	
	ТекстЗапроса  =  ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ	
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ = 0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
	|	Организация 		   =  &Организация И
	|	Контрагент  		   =  &Контрагент И
	|	Договор     		   =  &ПустойДоговор
	|";
	
	Индекс  =  Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс,  ГруппаКонтрагентов);
		
		ТекстЗапроса  =  ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ = 0") +
		ШаблонЗапросаБезГде + "
		|ГДЕ
		|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
		|	Организация 		   =  &Организация И
		|	Контрагент             =  &ГруппаКонтрагентов" + Индекс + " И
		|	Договор     		   =  &ПустойДоговор
		|";
		
		Индекс  =  Индекс + 1;
		
	КонецЦикла;
	
	ТекстЗапроса  =  ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ = 0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
	|	Организация 		   =  &Организация И
	|	Контрагент  		   =  &ПустойКонтрагент И
	|	Договор     		   =  &ПустойДоговор
	|";
	
	Индекс  =  Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс,  ГруппаДоговоров);
		
		ТекстЗапроса  =  ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ = 0") +
		ШаблонЗапросаБезГде + "
		|ГДЕ
		|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
		|	Организация 	 	   =  &ПустаяОрганизация И
		|	Контрагент             =  &Контрагент И
		|	Договор                =  &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс  =  Индекс + 1;
		
	КонецЦикла;
	
	ТекстЗапроса  =  ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ = 0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
	|	Организация 		   =  &ПустаяОрганизация И
	|	Контрагент 			   =  &Контрагент И
	|	Договор     		   =  &ПустойДоговор
	|";
	
	Индекс  =  Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс,  ГруппаКонтрагентов);
		
		ТекстЗапроса  =  ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ = 0") +
		ШаблонЗапросаБезГде + "
		|ГДЕ
		|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
		|	Организация            =  &ПустаяОрганизация И
		|	Контрагент             =  &ГруппаКонтрагентов" + Индекс + " И
		|	Договор                =  &ПустойДоговор
		|";
		
		Индекс  =  Индекс + 1;
		
	КонецЦикла;
	
	ТекстЗапроса  =  ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ = 0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
	|	Организация            =  &ПустаяОрганизация И
	|	Контрагент             =  &ПустойКонтрагент И
	|	Договор                =  &ПустойДоговор
	|";
	
	Индекс  =  Индекс + 1;
	
	ТекстЗапроса  =  ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ = 0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору  =  &ПустойВидРасчетов И
	|	Организация            =  &ПустаяОрганизация И
	|	Контрагент             =  &ПустойКонтрагент И
	|	Договор                =  &ПустойДоговор
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.Текст  =  ТекстЗапроса;
	
	Выборка  =  Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Результат.СчетРасчетов                      =  Выборка.СчетУчетаРасчетовСПоставщиком;
		Результат.СчетАвансов                       =  Выборка.СчетУчетаАвансовВыданных;
		Результат.СчетРасчетовПокупателя            =  Выборка.СчетУчетаРасчетовСПокупателем;
		Результат.СчетАвансовПокупателя             =  Выборка.СчетУчетаАвансовПолученных;
		
		Результат.СчетУчетаТары                     =  Выборка.СчетУчетаРасчетовПоТареСПоставщиком;
		Результат.СчетАвансовПоТаре                 =  Выборка.СчетУчетаАвансовПоТареВыданных;
		Результат.СчетУчетаТарыПокупателя           =  Выборка.СчетУчетаРасчетовПоТареСПокупателем;
		Результат.СчетАвансовПоТареПокупателя       =  Выборка.СчетУчетаАвансовПоТареПолученных;
		
		Результат.СчетРасчетовПриБартере            =  Выборка.СчетУчетаРасчетовСПоставщикомПриБартере;
		Результат.СчетАвансовПриБартере             =  Выборка.СчетУчетаРасчетовСПокупателемПриБартере;
		Результат.СчетРасчетовПокупателяПриБартере  =  Выборка.СчетУчетаРасчетовСПокупателемПриБартере;
		Результат.СчетАвансовПокупателяПриБартере   =  Выборка.СчетУчетаРасчетовСПоставщикомПриБартере;
		
		Результат.СчетУчетаНДСПриобретений            		 =  Выборка.СчетУчетаНДСПриобретений;
		Результат.СчетУчетаНДСПриобретенийПодтвержденный 	 =  Выборка.СчетУчетаНДСПриобретенийПодтвержденный;
		Результат.СчетУчетаНДСПродаж             			 =  Выборка.СчетУчетаНДСПродаж;
		Результат.СчетУчетаНДСПродажПодтвержденный           =  Выборка.СчетУчетаНДСПродажПодтвержденный;
		
		Результат.НалоговоеНазначениеПриобретений    		 =  Выборка.НалоговоеНазначениеПриобретений;
		Результат.НалоговоеНазначениеПриобретенийПоТаре      =  Выборка.НалоговоеНазначениеПриобретенийПоТаре;
		Результат.НалоговоеНазначениеПродаж    			     =  Выборка.НалоговоеНазначениеПродаж;
		Результат.НалоговоеНазначениеПродажПоТаре            =  Выборка.НалоговоеНазначениеПродажПоТаре;
		
		Результат.СтавкаНДСПриобретений	                 =  Выборка.СтавкаНДСПриобретений;
		Результат.СтавкаНДСПродаж            			 =  Выборка.СтавкаНДСПродаж;
		Если НЕ ИмяБазы="УПП" Тогда
			Результат.Амортизируется            			 =  Выборка.Амортизируется;
		КонецЕсли;
		Результат.Организация						 =  Выборка.Организация;
		Результат.Контрагент            			 =  Выборка.Контрагент;
		Результат.Договор            				 =  Выборка.Договор;
		Результат.ВидРасчетовПоДоговору            	 =  Выборка.ВидРасчетовПоДоговору;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

Функция ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента, ВалютаРегламентированногоУчета) Экспорт
	
	Если ДоговорКонтрагента.ВалютаВзаиморасчетов  =  ВалютаРегламентированногоУчета 
		ИЛИ НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		ВидРасчетовПоДоговору  =  Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;
		
	Иначе
		ВидРасчетовПоДоговору  =  Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
		
	Конецесли;
	
	Возврат ВидРасчетовПоДоговору;
	
КонецФункции              
//-----------------------------------------------------------------------------------------------

Процедура КаталогДанныхНачалоВыбора(Элемент,  СтандартнаяОбработка)
	
	Диалог  =  Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок  =  НСтр("ru = 'Выберите каталог сохранения xml файлов';uk = 'Виберіть каталог збереження xml файлів'");
	
	Диалог  =  Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Диалог.Заголовок  =  НСтр("ru = 'Выберите каталог сохранения xml файлов';uk = 'Виберіть каталог збереження xml файлів'");
	
	Если Диалог.Выбрать() Тогда
		КаталогДанных  =  Диалог.Каталог;
		КаталогДанныхЭкспорта  =  Диалог.Каталог;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ОрганизацияПервичка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ЮрикФизик = "Юрик";
		Если Локализация.КодЯзыкаИнтерфейса() = "ru" Тогда
			ЭлементыФормы.НадписьКодПоЕДРПОУ.Значение = "ЕДРПОУ";
		ИначеЕсли Локализация.КодЯзыкаИнтерфейса() = "uk" Тогда
			ЭлементыФормы.НадписьКодПоЕДРПОУ.Значение = "ЄДРПОУ";
		КонецЕсли;
	Иначе 
		ЮрикФизик = "Физик";
		ЭлементыФормы.НадписьКодПоЕДРПОУ.Значение = "ДРФО";
	КонецЕсли;
	//-----------------------------------------------------------------
	КодОргДоИзменений = Строка(КодПоЕДРПОУ);  
	
	Если (ЗначениеЗаполнено(ДоговорКонтрагента))
		И (ДоговорКонтрагента.Организация <> ОрганизацияПервичка) Тогда
		ДоговорКонтрагента  =  Неопределено;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ОбособленноеПодразделение)) 
		И (ОбособленноеПодразделение.Владелец <> ОрганизацияПервичка) Тогда
		ОбособленноеПодразделение  =  Неопределено;
	КонецЕсли;
	//-----------------------------------------------------------------
	
	Если НЕ ОрганизацияПервичка.Пустая() Тогда
		КодЯзыкаПечать  =  Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),  "РежимФормированияПечатныхФорм"));
		СведенияОПоставщике  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ОрганизацияПервичка,  ТекущаяДата(), , , КодЯзыкаПечать);
		Если ОрганизацияПервичка.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ЮрЛицо Тогда			
			Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоЕДРПОУ) Тогда
				КодПоЕДРПОУ  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ);
			Иначе
				Предупреждение(НСтр("ru = 'У Вас не указан код ЕДРПОУ для "+ОрганизацияПервичка+"!';uk = 'У Вас не вказаний код ЄДРПОУ для "+ОрганизацияПервичка+"'"));
				КодПоЕДРПОУ =  НСтр("ru = 'Неопределен';uk = 'Невизначений'");
			КонецЕсли;    
		ИначеЕсли ОрганизацияПервичка.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоДРФО) Тогда
				КодПоЕДРПОУ  =  СокрЛП(СведенияОПоставщике.КодПоДРФО);
			Иначе
				Предупреждение(НСтр("ru = 'У Вас не указан код ДРФО!';uk = 'У Вас не вказаний код ДРФО!'"));
				КодПоЕДРПОУ =  НСтр("ru = 'Неопределен';uk = 'Невизначений'");
			КонецЕсли;  
		КонецЕсли;	
	КонецЕсли;    
	//-----------------------------------------------------------
	
	Если КодОргДоИзменений<>Строка(КодПоЕДРПОУ)   тогда
		ИзменениеОсновныхПараметров();
	КонецЕсли;                      
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент,  КонтрагентДоИзменений)
	
	Если (ЗначениеЗаполнено(ДоговорКонтрагента)) 
		И (ДоговорКонтрагента.Владелец <> Контрагент) Тогда
		ДоговорКонтрагента  =  Неопределено;
	КонецЕсли;   
	
	Если КонтрагентДоИзменений<>Строка(Контрагент) Тогда
		ИзменениеОсновныхПараметров();
	КонецЕсли;    
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ЭлементыФормы.ДоговорКонтрагента.Доступность = Истина;
	Иначе
		ЭлементыФормы.ДоговорКонтрагента.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент,  СтандартнаяОбработка)
	
	СтандартнаяОбработка  =  Ложь;
	
	Если Не ЗначениеЗаполнено(ОрганизацияПервичка) ИЛИ Не ЗначениеЗаполнено(Контрагент) Тогда
		Предупреждение(НСтр("ru  =  'Не указан контрагент!'; uk  =  'Не вказаний контрагент'"));
		Возврат;
	КонецЕсли;
	
	ФормаВыбора  =  Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(, Элемент,  ЭтаФорма);
	
	ФормаВыбора.ПараметрОтборПоВладельцу  =  Контрагент;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность  =  Ложь;
	
	ФормаВыбора.СправочникСписок.Отбор.Организация.Значение                             =  ОрганизацияПервичка;
	ФормаВыбора.СправочникСписок.Отбор.Организация.Использование                        =  Истина;
	ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                         =  ВидСравнения.Равно;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность  =  Ложь;
	
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока  =  ДоговорКонтрагента;
	ФормаВыбора.ПараметрВыборГруппИЭлементов  =  ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовНН(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Ссылка.СпецРежимНалогообложения КАК СпецРежимНалогообложения, 
	|	//#ЕстьОбособленноеПодразделение	ВЫБОР
	|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
	|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
	|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.СуммаНДСДокумента, 
	|	ВложенныйЗапрос.Ответственный, 
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.ПометкаУдаления,      
	|	ВложенныйЗапрос.КтоВыписалНалоговуюНакладную, 
	|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 	
	|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных	
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		НалоговаяНакладная.Ссылка КАК Ссылка, 
	|		НалоговаяНакладная.Номер КАК Номер, 
	|		НалоговаяНакладная.Дата КАК Дата, 
	|		НалоговаяНакладная.Контрагент КАК Контрагент, 
	|		НалоговаяНакладная.ВалютаДокумента КАК ВалютаДокумента, 
	|		НалоговаяНакладная.СуммаДокумента КАК СуммаДокумента, 
	|		НалоговаяНакладная.СуммаНДСДокумента КАК СуммаНДСДокумента, 
	|		НалоговаяНакладная.Ответственный КАК Ответственный, 
	|		НалоговаяНакладная.КтоВыписалНалоговуюНакладную, 
	|		НалоговаяНакладная.Проведен как Проведен, 
	|		НалоговаяНакладная.ПометкаУдаления как ПометкаУдаления,   
	|		НалоговаяНакладная.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных как ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
	|		НалоговаяНакладная.ВключенаВЕдиныйРеестрНалоговыхНакладных как ВключенаВЕдиныйРеестрНалоговыхНакладных
	|	ИЗ
	|		Документ.НалоговаяНакладная КАК НалоговаяНакладная
	|	ГДЕ
	|		НалоговаяНакладная.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	Если УчетПоОбособленнымПодразделениям Тогда
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#ЕстьОбособленноеПодразделение",  "");	
	Иначе
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#НетОбособленноеПодразделение",  "");
	КонецЕсли;
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл 		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		
		// в номере исходящей налоговой накладной будем показывать оба номера: в начале реальный (тот,  что видят получатели), 
		// а второй - номер документа,  которые не несет существенного смысла
		
		НомерБезПрефикса  = ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		КодСпецРежима = "";
		Если (ЕстьРеквизитДокумента("СпецРежимНалогообложения", РеквизитыДокумента.Документ.Метаданные()))
			И (РеквизитыДокумента.Документ.СпецРежимНалогообложения > 0) Тогда
			КодСпецРежима = "/" + РеквизитыДокумента.Документ.СпецРежимНалогообложения + "/";
		КонецЕсли;

		Если (ЕстьРеквизитДокумента("ОбособленноеПодразделение", РеквизитыДокумента.Документ.Метаданные()))
			И (ЗначениеЗаполнено(РеквизитыДокумента.Документ.ОбособленноеПодразделение.Префикс)) Тогда
			НомерБезПрефикса = НомерБезПрефикса + ?(ЗначениеЗаполнено(КодСпецРежима),КодСпецРежима,"//") + РеквизитыДокумента.Документ.ОбособленноеПодразделение.Префикс;
		Иначе
			Если ЗначениеЗаполнено(КодСпецРежима) Тогда
				НомерБезПрефикса = НомерБезПрефикса + КодСпецРежима;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицыДокументов.Номер  = НомерБезПрефикса;
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
		// КИТ-2005
		СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИНН;	
		
		ФИО = РегистрыСведений.ФИОФизЛиц.СрезПоследних(СтрокаТаблицыДокументов.Документ.Дата, Новый Структура("ФизЛицо", СтрокаТаблицыДокументов.Документ.КтоВыписалНалоговуюНакладную));
		Если ФИО.Количество() > 0 Тогда
			СтрокаТаблицыДокументов.КтоВыписалНалоговуюНакладную = ВРег(Лев(СокрЛ(ФИО[0].Имя), 1))
										 + ". "
										 + ВРег(Лев(СокрЛ(ФИО[0].Отчество), 1))
										 + ". "
										 + СокрЛП(ФИО[0].Фамилия); 
			
		Иначе
			СтрокаТаблицыДокументов.КтоВыписалНалоговуюНакладную = "" + СокрЛП(СтрокаТаблицыДокументов.Документ.КтоВыписалНалоговуюНакладную);									 
		КонецЕсли;

	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовДод2(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Ссылка.СпецРежимНалогообложения КАК СпецРежимНалогообложения, 
	|	//#ЕстьОбособленноеПодразделение	ВЫБОР
	|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
	|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
	|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.СуммаНДСДокумента, 
	|	ВложенныйЗапрос.Ответственный, 
	|	ВложенныйЗапрос.Проведен, 
	|	ВложенныйЗапрос.ПометкаУдаления, 
	|	ВложенныйЗапрос.КтоВыписалНалоговуюНакладную, 
	|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
	|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных
	|ИЗ
	|	(ВЫБРАТЬ
	|		Приложение2КНалоговойНакладной.Ссылка, 
	|		Приложение2КНалоговойНакладной.Номер, 
	|		Приложение2КНалоговойНакладной.Дата, 
	|		Приложение2КНалоговойНакладной.Контрагент, 
	|		Приложение2КНалоговойНакладной.ВалютаДокумента, 
	|		Приложение2КНалоговойНакладной.СуммаДокумента, 
	|		Приложение2КНалоговойНакладной.СуммаНДСДокумента, 
	|		Приложение2КНалоговойНакладной.Ответственный, 
	|		Приложение2КНалоговойНакладной.Проведен, 
	|		Приложение2КНалоговойНакладной.ПометкаУдаления, 
	|		Приложение2КНалоговойНакладной.КтоВыписалНалоговуюНакладную, 
	|		Приложение2КНалоговойНакладной.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
	|		Приложение2КНалоговойНакладной.ВключенаВЕдиныйРеестрНалоговыхНакладных как ВключенаВЕдиныйРеестрНалоговыхНакладных   
	|	ИЗ
	|		Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
	|	ГДЕ
	|		Приложение2КНалоговойНакладной.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	Если УчетПоОбособленнымПодразделениям Тогда
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#ЕстьОбособленноеПодразделение",  "");	
	Иначе
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#НетОбособленноеПодразделение",  "");
	КонецЕсли;
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента);		
		
		// в номере исходящей налоговой накладной будем показывать оба номера: в начале реальный (тот,  что видят получатели), 
		// а второй - номер документа,  которые не несет существенного смысла
		ФилиалПрефикс  =  "";
		СпецРежим  =  СокрЛП(РеквизитыДокумента.СпецРежимНалогообложения);
		Если (ЗначениеЗаполнено(РеквизитыДокумента.СпецРежимНалогообложения))
			И (НЕ РеквизитыДокумента.СпецРежимНалогообложения  =  "0") Тогда
			КодСпецРежима  =  "" + СпецРежим;
		Иначе
			КодСпецРежима  =  " ";//как и в реестре
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыДокумента.ПрефиксОП) Тогда
			НомерФилиала  =  Прав("0000" + СокрЛП(РеквизитыДокумента.ПрефиксОП), 4);
		Иначе
			НомерФилиала  =  "";	
		КонецЕсли;
		Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
			ФилиалПрефикс  =  "/" + КодСпецРежима + НомерФилиала;
		КонецЕсли;		
		
		НомерБезПрефикса = ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		КодСпецРежима = "";
		Если (ЕстьРеквизитДокумента("СпецРежимНалогообложения", РеквизитыДокумента.Документ.Метаданные()))
			И (РеквизитыДокумента.Документ.СпецРежимНалогообложения > 0) Тогда
			КодСпецРежима = "/" + РеквизитыДокумента.Документ.СпецРежимНалогообложения + "/";
		КонецЕсли;

		Если (ЕстьРеквизитДокумента("НалоговаяНакладная", РеквизитыДокумента.Документ.Метаданные()))
			И (ЗначениеЗаполнено(РеквизитыДокумента.Документ.НалоговаяНакладная.ОбособленноеПодразделение.Префикс)) Тогда
			НомерБезПрефикса = НомерБезПрефикса + ?(ЗначениеЗаполнено(КодСпецРежима),КодСпецРежима,"//") + РеквизитыДокумента.Документ.НалоговаяНакладная.ОбособленноеПодразделение.Префикс;
		Иначе
			Если ЗначениеЗаполнено(КодСпецРежима) Тогда
				НомерБезПрефикса = НомерБезПрефикса + КодСпецРежима;
			КонецЕсли;
		КонецЕсли;

		СтрокаТаблицыДокументов.Номер = НомерБезПрефикса;
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовАкт(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИмяБазы="УТ" Тогда
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	//|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.ПометкаУдаления,    
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		АктОбОказанииПроизводственныхУслуг.Ссылка КАК Ссылка, 
	|		АктОбОказанииПроизводственныхУслуг.Номер КАК Номер, 
	|		АктОбОказанииПроизводственныхУслуг.Дата КАК Дата, 
	|		АктОбОказанииПроизводственныхУслуг.Контрагент КАК Контрагент, 
	|		АктОбОказанииПроизводственныхУслуг.ВалютаДокумента КАК ВалютаДокумента, 
	//|		АктОбОказанииПроизводственныхУслуг.СуммаДокумента КАК СуммаДокумента, 
	|		АктОбОказанииПроизводственныхУслуг.Проведен КАК Проведен, 
	|		АктОбОказанииПроизводственныхУслуг.ПометкаУдаления КАК ПометкаУдаления, 
	|		АктОбОказанииПроизводственныхУслуг.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	|	ГДЕ
	|		АктОбОказанииПроизводственныхУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2, 
	|	РеализацияТоваровУслуг.Ссылка, 
	|	РеализацияТоваровУслуг.Номер, 
	|	РеализацияТоваровУслуг.Дата, 
	|	РеализацияТоваровУслуг.Контрагент, 
	|	РеализацияТоваровУслуг.ВалютаДокумента, 
	//|	РеализацияТоваровУслуг.СуммаДокумента, 
	|	РеализацияТоваровУслуг.ПометкаУдаления, 
	|	РеализацияТоваровУслуг.Проведен,    
	|	РеализацияТоваровУслуг.Ответственный
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)";
Иначе
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	//|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.ПометкаУдаления,    
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	//|		1 КАК ВидДокумента, 
	//|		АктОбОказанииПроизводственныхУслуг.Ссылка КАК Ссылка, 
	//|		АктОбОказанииПроизводственныхУслуг.Номер КАК Номер, 
	//|		АктОбОказанииПроизводственныхУслуг.Дата КАК Дата, 
	//|		АктОбОказанииПроизводственныхУслуг.Контрагент КАК Контрагент, 
	//|		АктОбОказанииПроизводственныхУслуг.ВалютаДокумента КАК ВалютаДокумента, 
	////|		АктОбОказанииПроизводственныхУслуг.СуммаДокумента КАК СуммаДокумента, 
	//|		АктОбОказанииПроизводственныхУслуг.Проведен КАК Проведен, 
	//|		АктОбОказанииПроизводственныхУслуг.ПометкаУдаления КАК ПометкаУдаления, 
	//|		АктОбОказанииПроизводственныхУслуг.Ответственный КАК Ответственный
	//|	ИЗ
	//|		Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	//|	ГДЕ
	//|		АктОбОказанииПроизводственныхУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	2, 
	|	РеализацияТоваровУслуг.Ссылка, 
	|	РеализацияТоваровУслуг.Номер, 
	|	РеализацияТоваровУслуг.Дата, 
	|	РеализацияТоваровУслуг.Контрагент, 
	|	РеализацияТоваровУслуг.ВалютаДокумента, 
	//|	РеализацияТоваровУслуг.СуммаДокумента, 
	|	РеализацияТоваровУслуг.ПометкаУдаления, 
	|	РеализацияТоваровУслуг.Проведен,    
	|	РеализацияТоваровУслуг.Ответственный
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
КонецЕсли;
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		СтрокаТаблицыДокументов.Номер  =   ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовСчет(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.СуммаДокумента,   
	|	ВложенныйЗапрос.ПометкаУдаления,  
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		СчетНаОплатуПокупателю.Ссылка КАК Ссылка, 
	|		СчетНаОплатуПокупателю.Номер КАК Номер, 
	|		СчетНаОплатуПокупателю.Дата КАК Дата, 
	|		СчетНаОплатуПокупателю.Контрагент КАК Контрагент, 
	|		СчетНаОплатуПокупателю.ВалютаДокумента КАК ВалютаДокумента, 
	|		СчетНаОплатуПокупателю.СуммаДокумента КАК СуммаДокумента, 
	|		СчетНаОплатуПокупателю.ПометкаУдаления КАК ПометкаУдаления, 
	|		СчетНаОплатуПокупателю.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|	ГДЕ
	|		СчетНаОплатуПокупателю.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		СтрокаТаблицыДокументов.Номер  =   ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовВозвратТоваровОтПокупателя(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.СуммаДокумента,   
	|	ВложенныйЗапрос.ПометкаУдаления,  
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка, 
	|		ВозвратТоваровОтПокупателя.Номер КАК Номер, 
	|		ВозвратТоваровОтПокупателя.Дата КАК Дата, 
	|		ВозвратТоваровОтПокупателя.Контрагент КАК Контрагент, 
	|		ВозвратТоваровОтПокупателя.ВалютаДокумента КАК ВалютаДокумента, 
	|		ВозвратТоваровОтПокупателя.СуммаДокумента КАК СуммаДокумента, 
	|		ВозвратТоваровОтПокупателя.ПометкаУдаления КАК ПометкаУдаления, 
	|		ВозвратТоваровОтПокупателя.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|	ГДЕ
	|		ВозвратТоваровОтПокупателя.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		СтрокаТаблицыДокументов.Номер  =   ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовВозвратТоваровПоставщику(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.СуммаДокумента,   
	|	ВложенныйЗапрос.ПометкаУдаления,  
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		ВозвратТоваровПоставщику.Ссылка КАК Ссылка, 
	|		ВозвратТоваровПоставщику.Номер КАК Номер, 
	|		ВозвратТоваровПоставщику.Дата КАК Дата, 
	|		ВозвратТоваровПоставщику.Контрагент КАК Контрагент, 
	|		ВозвратТоваровПоставщику.ВалютаДокумента КАК ВалютаДокумента, 
	|		ВозвратТоваровПоставщику.СуммаДокумента КАК СуммаДокумента, 
	|		ВозвратТоваровПоставщику.ПометкаУдаления КАК ПометкаУдаления, 
	|		ВозвратТоваровПоставщику.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|	ГДЕ
	|		ВозвратТоваровПоставщику.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		СтрокаТаблицыДокументов.Номер  =   ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовВидНакл(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов = Неопределено Тогда
		СтрокиТаблицыДокументов = ТаблицаДокументов;
		МассивДокументов = ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов = Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.Проведен, 
	|	ВложенныйЗапрос.ПометкаУдаления,   
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		РеализацияТоваровУслуг.Ссылка КАК Ссылка, 
	|		РеализацияТоваровУслуг.Номер КАК Номер, 
	|		РеализацияТоваровУслуг.Дата КАК Дата, 
	|		РеализацияТоваровУслуг.Контрагент КАК Контрагент, 
	|		РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента, 
	|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента, 
	|		РеализацияТоваровУслуг.Проведен КАК Проведен, 
	|		РеализацияТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления, 
	|		РеализацияТоваровУслуг.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению = Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке = Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента = РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента = Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		//СтрокаТаблицыДокументов.Номер  = ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		СтрокаТаблицыДокументов.Номер  = ОбщегоНазначения.ПолучитьНомерНаПечать(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовАктСверки(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.Проведен, 
	|	ВложенныйЗапрос.ПометкаУдаления,  
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		АктСверкиВзаиморасчетов.Ссылка КАК Ссылка, 
	|		АктСверкиВзаиморасчетов.Номер КАК Номер, 
	|		АктСверкиВзаиморасчетов.Дата КАК Дата, 
	|		АктСверкиВзаиморасчетов.Контрагент КАК Контрагент, 
	|		АктСверкиВзаиморасчетов.ВалютаДокумента КАК ВалютаДокумента, 
	|		АктСверкиВзаиморасчетов.Проведен КАК Проведен, 
	|		АктСверкиВзаиморасчетов.ПометкаУдаления КАК ПометкаУдаления, 
	|		АктСверкиВзаиморасчетов.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|	ГДЕ
	|		АктСверкиВзаиморасчетов.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 		
		СтрокаТаблицыДокументов.Номер  =   ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовЗапит(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.СуммаНДСДокумента, 
	|	ВложенныйЗапрос.Проведен, 
	|	ВложенныйЗапрос.ПометкаУдаления, 
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		РегистрацияВходящегоНалоговогоДокумента.Ссылка КАК Ссылка, 
	|		РегистрацияВходящегоНалоговогоДокумента.Номер КАК Номер, 
	|		РегистрацияВходящегоНалоговогоДокумента.Дата КАК Дата, 
	|		РегистрацияВходящегоНалоговогоДокумента.Контрагент КАК Контрагент, 
	|		РегистрацияВходящегоНалоговогоДокумента.СуммаДокумента КАК СуммаДокумента, 
	|		РегистрацияВходящегоНалоговогоДокумента.СуммаНДСДокумента КАК СуммаНДСДокумента, 
	|		РегистрацияВходящегоНалоговогоДокумента.ПометкаУдаления КАК ПометкаУдаления, 
	|		РегистрацияВходящегоНалоговогоДокумента.Проведен КАК Проведен, 
	|		РегистрацияВходящегоНалоговогоДокумента.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.РегистрацияВходящегоНалоговогоДокумента КАК РегистрацияВходящегоНалоговогоДокумента
	|	ГДЕ
	|		РегистрацияВходящегоНалоговогоДокумента.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		
		ФилиалПрефикс  =  "";
		Если ЗначениеЗаполнено(РеквизитыДокумента.ПрефиксОП) Тогда
			НомерФилиала  =  Прав("0000" + СокрЛП(РеквизитыДокумента.ПрефиксОП), 4);
		Иначе
			НомерФилиала  =  "";	
		КонецЕсли;
		СтрокаТаблицыДокументов.Номер  =  ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовВхНН(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе 
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяБазы = "БУ" 
		ИЛИ ИмяБазы = "УТП" 
		ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
		ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	//#ЕстьОбособленноеПодразделение	ВЫБОР
	|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
	|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
	|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.СуммаНДСДокумента, 
	|	ВложенныйЗапрос.Ответственный, 
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.ПометкаУдаления      
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		РегистрацияВходящегоНалоговогоДокумента.Ссылка КАК Ссылка, 
	|		РегистрацияВходящегоНалоговогоДокумента.Номер КАК Номер, 
	|		РегистрацияВходящегоНалоговогоДокумента.Дата КАК Дата, 
	|		РегистрацияВходящегоНалоговогоДокумента.Контрагент КАК Контрагент, 
	|		РегистрацияВходящегоНалоговогоДокумента.СуммаДокумента КАК СуммаДокумента, 
	|		РегистрацияВходящегоНалоговогоДокумента.СуммаНДСДокумента КАК СуммаНДСДокумента, 
	|		РегистрацияВходящегоНалоговогоДокумента.Ответственный КАК Ответственный, 
	|		РегистрацияВходящегоНалоговогоДокумента.Проведен как Проведен, 
	|		РегистрацияВходящегоНалоговогоДокумента.ПометкаУдаления как ПометкаУдаления   
	|	ИЗ
	|		Документ.РегистрацияВходящегоНалоговогоДокумента КАК РегистрацияВходящегоНалоговогоДокумента
	|	ГДЕ
	|		РегистрацияВходящегоНалоговогоДокумента.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
ИначеЕсли ИмяБазы="УПП" или ИмяБазы="УТ" Тогда
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	//|	//#ЕстьОбособленноеПодразделение	ВЫБОР
	//|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
	//|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	//|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
	//|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
	//|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.СуммаНДСДокумента, 
	|	ВложенныйЗапрос.Ответственный, 
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.ПометкаУдаления      
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		ЗаписьКнигиПриобретения.Ссылка КАК Ссылка, 
	|		ЗаписьКнигиПриобретения.Номер КАК Номер, 
	|		ЗаписьКнигиПриобретения.Дата КАК Дата, 
	|		ЗаписьКнигиПриобретения.Контрагент КАК Контрагент, 
	|		ЗаписьКнигиПриобретения.СуммаДокумента КАК СуммаДокумента, 
	|		ЗаписьКнигиПриобретения.СуммаНДСДокумента КАК СуммаНДСДокумента, 
	|		ЗаписьКнигиПриобретения.Ответственный КАК Ответственный, 
	|		ЗаписьКнигиПриобретения.Проведен как Проведен, 
	|		ЗаписьКнигиПриобретения.ПометкаУдаления как ПометкаУдаления   
	|	ИЗ
	|		Документ.ЗаписьКнигиПриобретения КАК ЗаписьКнигиПриобретения
	|	ГДЕ
	|		ЗаписьКнигиПриобретения.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
КонецЕсли;
	
	Если УчетПоОбособленнымПодразделениям Тогда
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#ЕстьОбособленноеПодразделение",  "");	
	Иначе
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#НетОбособленноеПодразделение",  "");
	КонецЕсли;
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл 		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		
		// в номере исходящей налоговой накладной будем показывать оба номера: в начале реальный (тот,  что видят получатели), 
		// а второй - номер документа,  которые не несет существенного смысла
		//ФилиалПрефикс  =  "";
		//СпецРежим  =  СокрЛП(РеквизитыДокумента.СпецРежимНалогообложения);
		//Если ЗначениеЗаполнено(РеквизитыДокумента.СпецРежимНалогообложения)
		//	И НЕ РеквизитыДокумента.СпецРежимНалогообложения  =  "0" Тогда
		//	КодСпецРежима  =  "" + СпецРежим;
		//Иначе
		//	КодСпецРежима  =  " ";//как и в реестре
		//КонецЕсли;
		
		//Если ЗначениеЗаполнено(РеквизитыДокумента.ПрефиксОП) Тогда
		//	НомерФилиала  =  Прав("0000" + СокрЛП(РеквизитыДокумента.ПрефиксОП), 4);
		//Иначе
		//	НомерФилиала  =  "";	
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
		//	ФилиалПрефикс  =  "/" + КодСпецРежима + НомерФилиала;
		//КонецЕсли;			

		СтрокаТаблицыДокументов.Номер  = ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовВхПТУ(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе 
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	Если ИмяБазы = "БУ" 
		ИЛИ ИмяБазы="УТП" 
		ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
		ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
		|	ВложенныйЗапрос.Ссылка КАК Документ, 
		|	ВложенныйЗапрос.Номер, 
		//|	//#ЕстьОбособленноеПодразделение	ВЫБОР
		//|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
		//|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
		//|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
		//|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
		//|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
		|	ВложенныйЗапрос.Дата КАК Дата, 
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.СуммаДокумента, 
		|	ВложенныйЗапрос.СуммаНДСПропорциональноВсего, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.Проведен,  
		|	ВложенныйЗапрос.ПометкаУдаления      
		|ИЗ
		|	(ВЫБРАТЬ
		|		1 КАК ВидДокумента, 
		|		ПоступлениеТоваровУслуг.Ссылка КАК Ссылка, 
		|		ПоступлениеТоваровУслуг.Номер КАК Номер, 
		|		ПоступлениеТоваровУслуг.Дата КАК Дата, 
		|		ПоступлениеТоваровУслуг.Контрагент КАК Контрагент, 
		|		ПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента, 
		|		ПоступлениеТоваровУслуг.СуммаНДСПропорциональноВсего КАК СуммаНДСПропорциональноВсего, 
		|		ПоступлениеТоваровУслуг.Ответственный КАК Ответственный, 
		|		ПоступлениеТоваровУслуг.Проведен как Проведен, 
		|		ПоступлениеТоваровУслуг.ПометкаУдаления как ПометкаУдаления   
		|	ИЗ
		|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|	ГДЕ
		|		ПоступлениеТоваровУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
		
	ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда	
		
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
		|	ВложенныйЗапрос.Ссылка КАК Документ, 
		|	ВложенныйЗапрос.Номер, 
		//|	//#ЕстьОбособленноеПодразделение	ВЫБОР
		//|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
		//|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
		//|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
		//|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
		//|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
		|	ВложенныйЗапрос.Дата КАК Дата, 
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.СуммаДокумента, 
		//|	ВложенныйЗапрос.СуммаНДСПропорциональноВсего, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.Проведен,  
		|	ВложенныйЗапрос.ПометкаУдаления      
		|ИЗ
		|	(ВЫБРАТЬ
		|		1 КАК ВидДокумента, 
		|		ПоступлениеТоваровУслуг.Ссылка КАК Ссылка, 
		|		ПоступлениеТоваровУслуг.Номер КАК Номер, 
		|		ПоступлениеТоваровУслуг.Дата КАК Дата, 
		|		ПоступлениеТоваровУслуг.Контрагент КАК Контрагент, 
		|		ПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента, 
		//|		ПоступлениеТоваровУслуг.СуммаНДСПропорциональноВсего КАК СуммаНДСПропорциональноВсего, 
		|		ПоступлениеТоваровУслуг.Ответственный КАК Ответственный, 
		|		ПоступлениеТоваровУслуг.Проведен как Проведен, 
		|		ПоступлениеТоваровУслуг.ПометкаУдаления как ПометкаУдаления   
		|	ИЗ
		|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|	ГДЕ
		|		ПоступлениеТоваровУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	КонецЕсли;
	Если УчетПоОбособленнымПодразделениям Тогда
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#ЕстьОбособленноеПодразделение",  "");	
	Иначе
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#НетОбособленноеПодразделение",  "");
	КонецЕсли;
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл 		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		
		// в номере исходящей налоговой накладной будем показывать оба номера: в начале реальный (тот,  что видят получатели), 
		// а второй - номер документа,  которые не несет существенного смысла
		//ФилиалПрефикс  =  "";
		//СпецРежим  =  СокрЛП(РеквизитыДокумента.СпецРежимНалогообложения);
		//Если ЗначениеЗаполнено(РеквизитыДокумента.СпецРежимНалогообложения)
		//	И НЕ РеквизитыДокумента.СпецРежимНалогообложения  =  "0" Тогда
		//	КодСпецРежима  =  "" + СпецРежим;
		//Иначе
		//	КодСпецРежима  =  " ";//как и в реестре
		//КонецЕсли;
		
		//Если ЗначениеЗаполнено(РеквизитыДокумента.ПрефиксОП) Тогда
		//	НомерФилиала  =  Прав("0000" + СокрЛП(РеквизитыДокумента.ПрефиксОП), 4);
		//Иначе
		//	НомерФилиала  =  "";	
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
		//	ФилиалПрефикс  =  "/" + КодСпецРежима + НомерФилиала;
		//КонецЕсли;			
		
		СтрокаТаблицыДокументов.Номер  = ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовВхСчет(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе 
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	//#ЕстьОбособленноеПодразделение	ВЫБОР
	|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
	|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
	|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	//|	ВложенныйЗапрос.СуммаНДСПропорциональноВсего, 
	|	ВложенныйЗапрос.Ответственный, 
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.ПометкаУдаления      
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		СчетНаОплатуПоставщика.Ссылка КАК Ссылка, 
	|		СчетНаОплатуПоставщика.Номер КАК Номер, 
	|		СчетНаОплатуПоставщика.Дата КАК Дата, 
	|		СчетНаОплатуПоставщика.Контрагент КАК Контрагент, 
	|		СчетНаОплатуПоставщика.СуммаДокумента КАК СуммаДокумента, 
	//|		СчетНаОплатуПоставщика.СуммаНДСПропорциональноВсего КАК СуммаНДСПропорциональноВсего, 
	|		СчетНаОплатуПоставщика.Ответственный КАК Ответственный, 
	|		СчетНаОплатуПоставщика.Проведен как Проведен, 
	|		СчетНаОплатуПоставщика.ПометкаУдаления как ПометкаУдаления   
	|	ИЗ
	|		Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
	|	ГДЕ
	|		СчетНаОплатуПоставщика.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	Если УчетПоОбособленнымПодразделениям Тогда
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#ЕстьОбособленноеПодразделение",  "");	
	Иначе
		ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#НетОбособленноеПодразделение",  "");
	КонецЕсли;
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл 		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		
		// в номере исходящей налоговой накладной будем показывать оба номера: в начале реальный (тот,  что видят получатели), 
		// а второй - номер документа,  которые не несет существенного смысла
		//ФилиалПрефикс  =  "";
		//СпецРежим  =  СокрЛП(РеквизитыДокумента.СпецРежимНалогообложения);
		//Если ЗначениеЗаполнено(РеквизитыДокумента.СпецРежимНалогообложения)
		//	И НЕ РеквизитыДокумента.СпецРежимНалогообложения  =  "0" Тогда
		//	КодСпецРежима  =  "" + СпецРежим;
		//Иначе
		//	КодСпецРежима  =  " ";//как и в реестре
		//КонецЕсли;
		
		//Если ЗначениеЗаполнено(РеквизитыДокумента.ПрефиксОП) Тогда
		//	НомерФилиала  =  Прав("0000" + СокрЛП(РеквизитыДокумента.ПрефиксОП), 4);
		//Иначе
		//	НомерФилиала  =  "";	
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
		//	ФилиалПрефикс  =  "/" + КодСпецРежима + НомерФилиала;
		//КонецЕсли;			
		
		СтрокаТаблицыДокументов.Номер  = ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 
	
КонецПроцедуры
//======================ТТН=========================//
Процедура ЗаполнитьРеквизитыДокументовТТН(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.ПометкаУдаления,    
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента,  
	|	РеализацияТоваровУслуг.Ссылка, 
	|	РеализацияТоваровУслуг.Номер, 
	|	РеализацияТоваровУслуг.Дата, 
	|	РеализацияТоваровУслуг.Контрагент, 
	|	РеализацияТоваровУслуг.ВалютаДокумента, 
	|	РеализацияТоваровУслуг.СуммаДокумента, 
	|	РеализацияТоваровУслуг.ПометкаУдаления, 
	|	РеализацияТоваровУслуг.Проведен,    
	|	РеализацияТоваровУслуг.Ответственный
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		СтрокаТаблицыДокументов.Номер  =   ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИНН;
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); 



	
	
КонецПроцедуры
//======================ТТН=========================//


Процедура ОбновлениеОтображения()
	ТекСпецРежим  =  мСписокВыбораСпецРежимНалогообложения.НайтиПоЗначению(СпецРежимНалогообложения);
КонецПроцедуры

Процедура КоманднаяПанельТаблицаДокументовЗаполнить(Кнопка)
	
	  ВыбратьПервичку();
	
КонецПроцедуры

Процедура ВыбратьПервичку()
	
	Если Не ЗначениеЗаполнено(НачПериода) ИЛИ 
		Не ЗначениеЗаполнено(КонПериода) ИЛИ
		Не ЗначениеЗаполнено(ОрганизацияПервичка) ИЛИ 
		Не ЗначениеЗаполнено(ТипДок)  
		Тогда
		ТекстСообщения  =  НСтр("ru  =  'Не указаны все обязательные поля!'; uk  =  'Не вказано всі обовязкові поля!'");
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;  
	
	Если Дата(НачПериода)>Дата(КонПериода) Тогда
		ТекстСообщения  =  НСтр("ru  =  'Начальная дата должна быть меньше конечной!'; uk  =  'Початкова дата повинна бути менше кінцевої!'");
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументов.Очистить();
	ВсегоЧисло = "0";
	ИзНихЧисло = "0"; 
	БезНДСЧисло = "0";
	ВсегоНДСЧисло = "0";
	ВсегоЧисло1 = "0"; 
	
	ЭлементыФормы.Надпись19.Видимость = Истина;
	ЭлементыФормы.Надпись20.Видимость = Истина;
	ЭлементыФормы.Надпись21.Видимость = Истина;
	ЭлементыФормы.БезНДСЧисло.Видимость = Истина;
	ЭлементыФормы.ВсегоНДСЧисло.Видимость = Истина;
	ЭлементыФормы.ВсегоЧисло1.Видимость = Истина;
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ДополнительныеДанные.Доступность = Ложь;
	
	//----------------------------------------------------------------------------------
	Если ТипДок = "ОказаниеУслуг" Тогда
		
		Попытка
			Если Метаданные.Имя = "УТ" Тогда
				ВызватьИсключение Истина;
			КонецЕсли; 
		Исключение
			Предупреждение((НСтр("ru = 'Документ не предусмотрен конфигурацией ';uk = 'Документ не передбачено конфігурацією '")) + Символы.пс + Метаданные.КраткаяИнформация);
			Возврат;
		КонецПопытки;
		
		Если НЕ ИмяБазы = "УТ" Тогда
			ТекстЗапроса  =  
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		АктОбОказанииПроизводственныхУслуг.Дата КАК Дата, 
			|		АктОбОказанииПроизводственныхУслуг.Ссылка КАК Ссылка, 
			|		АктОбОказанииПроизводственныхУслуг.Контрагент КАК Контрагент, 
			|		АктОбОказанииПроизводственныхУслуг.Ответственный КАК Ответственный, 
			|		АктОбОказанииПроизводственныхУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента, 
			|		АктОбОказанииПроизводственныхУслуг.Проведен КАК Проведен
			|	ИЗ
			|		Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
			|	ГДЕ
			|		АктОбОказанииПроизводственныхУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И АктОбОказанииПроизводственныхУслуг.Организация  =  &Организация
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		РеализацияТоваровУслуг.Дата, 
			|		РеализацияТоваровУслуг.Ссылка, 
			|		РеализацияТоваровУслуг.Контрагент, 
			|		РеализацияТоваровУслуг.Ответственный, 
			|		РеализацияТоваровУслуг.ДоговорКонтрагента, 
			|		РеализацияТоваровУслуг.Проведен
			|	ИЗ
			|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|	ГДЕ
			|		РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И РеализацияТоваровУслуг.Организация  =  &Организация
			|		И РеализацияТоваровУслуг.Услуги.Количество>0
			|		И (НЕ РеализацияТоваровУслуг.Товары.Количество > 0)) КАК ВложенныйЗапрос     
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Ответственный, 
			|	ВложенныйЗапрос.Проведен, 
			|	ВложенныйЗапрос.ДоговорКонтрагента}
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ"; 
		Иначе
			ТекстЗапроса  =  
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			//|		АктОбОказанииПроизводственныхУслуг.Дата КАК Дата, 
			//|		АктОбОказанииПроизводственныхУслуг.Ссылка КАК Ссылка, 
			//|		АктОбОказанииПроизводственныхУслуг.Контрагент КАК Контрагент, 
			//|		АктОбОказанииПроизводственныхУслуг.Ответственный КАК Ответственный, 
			//|		АктОбОказанииПроизводственныхУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента, 
			//|		АктОбОказанииПроизводственныхУслуг.Проведен КАК Проведен
			//|	ИЗ
			//|		Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
			//|	ГДЕ
			//|		АктОбОказанииПроизводственныхУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
			//|		И АктОбОказанииПроизводственныхУслуг.Организация  =  &Организация
			//|	
			//|	ОБЪЕДИНИТЬ ВСЕ
			//|	
			//|	ВЫБРАТЬ
			|		РеализацияТоваровУслуг.Дата, 
			|		РеализацияТоваровУслуг.Ссылка, 
			|		РеализацияТоваровУслуг.Контрагент, 
			|		РеализацияТоваровУслуг.Ответственный, 
			|		РеализацияТоваровУслуг.ДоговорКонтрагента, 
			|		РеализацияТоваровУслуг.Проведен
			|	ИЗ
			|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|	ГДЕ
			|		РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И РеализацияТоваровУслуг.Организация  =  &Организация
			|		И РеализацияТоваровУслуг.Услуги.Количество>0
			|		И (НЕ РеализацияТоваровУслуг.Товары.Количество > 0)) КАК ВложенныйЗапрос     
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Ответственный, 
			|	ВложенныйЗапрос.Проведен, 
			|	ВложенныйЗапрос.ДоговорКонтрагента}
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";  
		КонецЕсли;
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);
		
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);
		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если Проведен = Истина Тогда 
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		ОбщийБезНДС = 0;
		ОбщийНДС  = 0;
		ОбщийСума = 0;
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			Док  =  ПодобранныйДокумент.Документ;
			Если НЕ ИмяБазы = "УТ" Тогда
				Если ТипЗнч(Док)  =  Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
					НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС");
					НоваяСтрока.СуммаНДСДокумента =  Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
					НоваяСтрока.СуммаДокумента  =  Док.СуммаДокумента;
				Иначе
					НоваяСтрока.СуммаДокумента  =  Док.Услуги.Итог("Сумма"); 
					НоваяСтрока.СуммаНДСДокумента = Док.Услуги.Итог("СуммаНДС");
					НоваяСтрока.СуммаБезНДС  =  Док.Услуги.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС"); 
				КонецЕсли;
			Иначе
				НоваяСтрока.СуммаДокумента  =  Док.Услуги.Итог("Сумма"); 
				НоваяСтрока.СуммаНДСДокумента = Док.Услуги.Итог("СуммаНДС");
				НоваяСтрока.СуммаБезНДС  =  Док.Услуги.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС");
			КонецЕсли;
			
			ОбщийБезНДС = ОбщийБезНДС +НоваяСтрока.СуммаБезНДС;
			ОбщийНДС  = ОбщийНДС+НоваяСтрока.СуммаНДСДокумента;
			ОбщийСума = ОбщийСума+ НоваяСтрока.СуммаДокумента;
			
		КонецЦикла; 
		
		Если ТаблицаДокументов.Количество() > 0 Тогда
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовАкт();
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		БезНДСЧисло = ОбщийБезНДС;
		ВсегоНДСЧисло = ОбщийНДС;
		ВсегоЧисло1 = ОбщийСума;
		Скрытие(БезНДСЧисло, ВсегоНДСЧисло, ВсегоЧисло1);
		
		//ЗаполнитьРеквизитыДокументовАкт();		
	КонецЕсли;
	//-----------------------------------------------
	Если ТипДок = "ВозвратТоваровОтПокупателя" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВозвратТоваровОтПокупателя.Дата КАК Дата, 
		|		ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка, 
		|		ВозвратТоваровОтПокупателя.Контрагент КАК Контрагент, 
		|		ВозвратТоваровОтПокупателя.Ответственный КАК Ответственный, 
		|		ВозвратТоваровОтПокупателя.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		ВозвратТоваровОтПокупателя.Проведен КАК Проведен
		|	ИЗ
		|		Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|	ГДЕ
		|		ВозвратТоваровОтПокупателя.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И ВозвратТоваровОтПокупателя.Организация  =  &Организация
		|		И ВозвратТоваровОтПокупателя.Товары.Количество>0) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Проведен}
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";      	
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);
		
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);
		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;   
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;   
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		ОбщийБезНДС = 0;
		ОбщийНДС  =0;
		ОбщийСума=0;
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			Док  =  ПодобранныйДокумент.Документ;
			//Если ИмяБазы = "УТ" Тогда
			//	НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			//Иначе 				
			//	Если ТипЗнч(Док)  =  Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			//		НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС");
			//	Иначе
			//		НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			//	КонецЕсли;
			//КонецЕсли;
			//НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС;
			
			ОбщийБезНДС = ОбщийБезНДС +НоваяСтрока.СуммаБезНДС;
			ОбщийНДС  =ОбщийНДС+НоваяСтрока.СуммаНДСДокумента;
			ОбщийСума=ОбщийСума+Док.суммаДокумента;
			
		КонецЦикла;		
		
		Если ТаблицаДокументов.Количество() > 0 Тогда
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовВозвратТоваровОтПокупателя(); 
		Иначе 
			ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		БезНДСЧисло =ОбщийБезНДС;
		ВсегоНДСЧисло = ОбщийНДС;
		ВсегоЧисло1 = ОбщийСума;
		
		Скрытие(БезНДСЧисло, ВсегоНДСЧисло, ВсегоЧисло1);
		//ЗаполнитьРеквизитыДокументовВидНакл();  		
	КонецЕсли;    	
	//-----------------------------------------------
	Если ТипДок = "ВозвратТоваровПоставщику" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВозвратТоваровПоставщику.Дата КАК Дата, 
		|		ВозвратТоваровПоставщику.Ссылка КАК Ссылка, 
		|		ВозвратТоваровПоставщику.Контрагент КАК Контрагент, 
		|		ВозвратТоваровПоставщику.Ответственный КАК Ответственный, 
		|		ВозвратТоваровПоставщику.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		ВозвратТоваровПоставщику.Проведен КАК Проведен
		|	ИЗ
		|		Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|	ГДЕ
		|		ВозвратТоваровПоставщику.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И ВозвратТоваровПоставщику.Организация  =  &Организация
		|		И ВозвратТоваровПоставщику.Товары.Количество>0) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Проведен}
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";      	
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);
		
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);
		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;   
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;   
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		ОбщийБезНДС = 0;
		ОбщийНДС  =0;
		ОбщийСума=0;
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			Док  =  ПодобранныйДокумент.Документ;
			//Если ИмяБазы = "УТ" Тогда
			//	НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			//Иначе 				
			//	Если ТипЗнч(Док)  =  Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			//		НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС");
			//	Иначе
			//		НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			//	КонецЕсли;
			//КонецЕсли;
			//НоваяСтрока.СуммаНДСДокумента = Док.суммаДокумента - НоваяСтрока.СуммаБезНДС;
			
			ОбщийБезНДС = ОбщийБезНДС +НоваяСтрока.СуммаБезНДС;
			ОбщийНДС  =ОбщийНДС+НоваяСтрока.СуммаНДСДокумента;
			ОбщийСума=ОбщийСума+Док.суммаДокумента;
			
			
		КонецЦикла;		
		
		Если ТаблицаДокументов.Количество() > 0 Тогда
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовВозвратТоваровПоставщику(); 
		Иначе 
			ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		БезНДСЧисло =ОбщийБезНДС;
		ВсегоНДСЧисло =ОбщийНДС;
		ВсегоЧисло1 =ОбщийСума;
		Скрытие(БезНДСЧисло, ВсегоНДСЧисло, ВсегоЧисло1);
		
		//ЗаполнитьРеквизитыДокументовВидНакл();  		
	КонецЕсли;    	
	//-----------------------------------------------
	
	Если ТипДок = "ВидНакладна" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Дата КАК Дата, 
		|		РеализацияТоваровУслуг.Ссылка КАК Ссылка, 
		|		РеализацияТоваровУслуг.Контрагент КАК Контрагент, 
		|		РеализацияТоваровУслуг.Ответственный КАК Ответственный, 
		|		РеализацияТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		РеализацияТоваровУслуг.Проведен КАК Проведен
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|	ГДЕ
		|		РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И РеализацияТоваровУслуг.Организация  =  &Организация
		|		И РеализацияТоваровУслуг.Товары.Количество>0) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Проведен}
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";      	
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);
		
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);
		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;   
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;   
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		ОбщийБезНДС = 0;
		ОбщийНДС = 0;
		ОбщийСума = 0;
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			НоваяСтрока = ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			Док  =  ПодобранныйДокумент.Документ;
			Если ИмяБазы = "УТ" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			Иначе 				
				Если ТипЗнч(Док)  =  Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
					НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС");
				Иначе
					НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.СуммаНДСДокумента = Док.суммаДокумента - НоваяСтрока.СуммаБезНДС;
			
			ОбщийБезНДС = ОбщийБезНДС +НоваяСтрока.СуммаБезНДС;
			ОбщийНДС  = ОбщийНДС+НоваяСтрока.СуммаНДСДокумента;
			ОбщийСума = ОбщийСума+Док.суммаДокумента;
			
		КонецЦикла;		
		
		Если ТаблицаДокументов.Количество() > 0 Тогда
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовВидНакл(); 
		Иначе 
			ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		БезНДСЧисло = ОбщийБезНДС;
		ВсегоНДСЧисло = ОбщийНДС;
		ВсегоЧисло1 = ОбщийСума;
		Скрытие(БезНДСЧисло, ВсегоНДСЧисло, ВсегоЧисло1);
		
		//ЗаполнитьРеквизитыДокументовВидНакл();  		
	КонецЕсли;   
	//-----------------------------------------------
	Если ТипДок = "АктСверки" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		АктСверкиВзаиморасчетов.Дата КАК Дата, 
		|		АктСверкиВзаиморасчетов.Ссылка КАК Ссылка, 
		|		АктСверкиВзаиморасчетов.Контрагент КАК Контрагент, 
		|		АктСверкиВзаиморасчетов.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		АктСверкиВзаиморасчетов.Ответственный КАК Ответственный, 
		|		АктСверкиВзаиморасчетов.Проведен КАК Проведен
		|	ИЗ
		|		Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
		|	ГДЕ
		|		АктСверкиВзаиморасчетов.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И АктСверкиВзаиморасчетов.Организация  =  &Организация) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента,  
		|	ВложенныйЗапрос.Проведен}
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";   
		
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);
		
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);
		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		ОбщийБезНДС =0;
		ОбщийНДС  =0;
		ОбщийСума=0;
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			Док  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.СуммаДокумента  =  Док.ОстатокНаНачало + Док.ПоДаннымОрганизации.Итог("Дебет") -  Док.ПоДаннымОрганизации.Итог("Кредит");
			
			ОбщийСума=ОбщийСума+НоваяСтрока.СуммаДокумента;
		КонецЦикла;
		
		Если ТаблицаДокументов.Количество() > 0 Тогда
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовАктСверки(); 
		КонецЕсли;
		
		БезНДСЧисло =ОбщийБезНДС;
		ВсегоНДСЧисло =ОбщийНДС;
		ВсегоЧисло1 =ОбщийСума; 
		Скрытие(БезНДСЧисло, ВсегоНДСЧисло, ВсегоЧисло1);
		
		//ЗаполнитьРеквизитыДокументовАктСверки(); 		
	КонецЕсли;       
	//------------------------------------------------------------------------
	Если ТипДок = "Счет" Тогда
		
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		СчетНаОплатуПокупателю.Дата КАК Дата, 
		|		СчетНаОплатуПокупателю.Ссылка КАК Ссылка, 
		|		СчетНаОплатуПокупателю.Контрагент КАК Контрагент, 
		|		СчетНаОплатуПокупателю.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		СчетНаОплатуПокупателю.Ответственный КАК Ответственный
		|	ИЗ
		|		Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|	ГДЕ
		|		СчетНаОплатуПокупателю.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И СчетНаОплатуПокупателю.Организация  =  &Организация) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Ответственный}
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";   
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);   		
		ПостроительЗапроса.ЗаполнитьНастройки();      		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		ОбщийБезНДС = 0;
		ОбщийНДС  =0;
		ОбщийСума=0; 
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			Док  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			НоваяСтрока.СуммаНДСДокумента = Док.суммаДокумента - НоваяСтрока.СуммаБезНДС; 
			
			ОбщийБезНДС = ОбщийБезНДС +НоваяСтрока.СуммаБезНДС;
			ОбщийНДС  =ОбщийНДС+НоваяСтрока.СуммаНДСДокумента;
			ОбщийСума=ОбщийСума+Док.суммаДокумента;
		КонецЦикла;		
		
		Если ТаблицаДокументов.Количество() > 0 Тогда
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовСчет(); 
		КонецЕсли;
		
		БезНДСЧисло =ОбщийБезНДС;
		ВсегоНДСЧисло =ОбщийНДС;
		ВсегоЧисло1 =ОбщийСума; 
		Скрытие(БезНДСЧисло, ВсегоНДСЧисло, ВсегоЧисло1);
		
		//ЗаполнитьРеквизитыДокументовСчет(); 		
	КонецЕсли;         
	//-----------------------------------------------
	Если ТипДок = "НалоговаяНакладная" Тогда  
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		НалоговаяНакладная.Дата КАК Дата, 
		|		НалоговаяНакладная.Ссылка КАК Ссылка, 
		|		НалоговаяНакладная.Контрагент КАК Контрагент, 
		|		НалоговаяНакладная.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		НалоговаяНакладная.Ответственный КАК Ответственный, 
		|		НалоговаяНакладная.СпецРежимНалогообложения КАК СпецРежимНалогообложения, 
		|		НалоговаяНакладная.ПометкаУдаления КАК ПометкаУдаления,   
		|		НалоговаяНакладная.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
		|		НалоговаяНакладная.ВключенаВЕдиныйРеестрНалоговыхНакладных КАК ВключенаВЕдиныйРеестрНалоговыхНакладных, 
		|		НалоговаяНакладная.Проведен КАК Проведен,
		|		НалоговаяНакладная.КтоВыписалНалоговуюНакладную КАК КтоВыписалНалоговуюНакладную,
		|		НалоговаяНакладная.Контрагент.ИНН КАК ИНН
		|	ИЗ
		|		Документ.НалоговаяНакладная КАК НалоговаяНакладная
		|	ГДЕ
		|		НалоговаяНакладная.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И НалоговаяНакладная.Организация = &Организация
		|		И (НалоговаяНакладная.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены = ЗНАЧЕНИЕ(Документ.НалоговаяНакладная.ПустаяСсылка)
		|		ИЛИ &ОтображатьСлужебные = ИСТИНА)
		|		) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.СпецРежимНалогообложения, 
		|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
		|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.КтоВыписалНалоговуюНакладную,
		|	ВложенныйЗапрос.ИНН,
		|	ВложенныйЗапрос.Проведен} 		
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";   
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса); 		
		ПостроительЗапроса.ЗаполнитьНастройки();     		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   ЭлементыФормы.НачПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));//ЭлементыФормы.КонПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка); 
		ПостроительЗапроса.Параметры.Вставить("ОтображатьСлужебные", ОтображатьСлужебныеНН);
		Отбор  =  ПостроительЗапроса.Отбор;
		Если ЗарегистрированныеПоДанным1С и ЭлементыФормы.ДаФ.Значение = 1 Тогда
			ЭлементОтбора  =  Отбор.Добавить("ВключенаВЕдиныйРеестрНалоговыхНакладных");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		Если ЗарегистрированныеПоДанным1С и ЭлементыФормы.ДаФ.Значение = 2 Тогда
			ЭлементОтбора  =  Отбор.Добавить("ВключенаВЕдиныйРеестрНалоговыхНакладных");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.НеРавно 
		КонецЕсли;
		
		Если ЗарегистрированныеПоДанным1СПлан и ЭлементыФормы.ДаП.Значение = 1 Тогда
			ЭлементОтбора  =  Отбор.Добавить("ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		Если ЗарегистрированныеПоДанным1СПлан и ЭлементыФормы.ДаП.Значение = 2 Тогда
			ЭлементОтбора  =  Отбор.Добавить("ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.НеРавно 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если СпецРежимНалогообложения <> Неопределено Тогда
			ЭлементОтбора  =  Отбор.Добавить("СпецРежимНалогообложения");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  СпецРежимНалогообложения;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно;
		КонецЕсли;
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыписалНН) Тогда
			ЭлементОтбора  =  Отбор.Добавить("КтоВыписалНалоговуюНакладную");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ВыписалНН;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если БезНеплательщиков Тогда
			ЭлементОтбора  =  Отбор.Добавить("ИНН");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  "";
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.НеРавно; 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		ОбщийНДС = 0;
		ОбщийБезНДС = 0;
		ОбщийСума = 0;
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			Док  =  ПодобранныйДокумент.Документ;
			Если ИмяБазы = "УПП" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС")- Док.ОС.Итог("СуммаНДС") - Док.НематериальныеАктивы.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			ИначеЕсли ИмяБазы = "УТ" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			Иначе	
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС")- Док.ОС.Итог("СуммаНДС") - Док.НМА.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			КонецЕсли;	
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
			
			ОбщийНДС = ОбщийНДС + НоваяСтрока.СуммаНДСДокумента;
			ОбщийБезНДС = ОбщийБезНДС + НоваяСтрока.СуммаБезНДС;
			ОбщийСума = ОбщийСума + Док.СуммаДокумента;
			
		КонецЦикла; 
		
		Если ТаблицаДокументов.Количество() > 0 Тогда 	
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовНН(); 
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		БезНДСЧисло = ОбщийБезНДС;
		ВсегоНДСЧисло = ОбщийНДС;
		ВсегоЧисло1 = ОбщийСума; 
		Скрытие(БезНДСЧисло, ВсегоНДСЧисло, ВсегоЧисло1);
		
		//ЗаполнитьРеквизитыДокументовНН(); 		
	КонецЕсли;
	//-----------------------------------------------
	Если ТипДок = "Приложение2" Тогда
		
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		Приложение2КНалоговойНакладной.Дата КАК Дата,
		|		Приложение2КНалоговойНакладной.Ссылка КАК Ссылка,
		|		Приложение2КНалоговойНакладной.Контрагент КАК Контрагент,
		|		Приложение2КНалоговойНакладной.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		Приложение2КНалоговойНакладной.Ответственный КАК Ответственный,
		|		Приложение2КНалоговойНакладной.СпецРежимНалогообложения КАК СпецРежимНалогообложения,
		|		Приложение2КНалоговойНакладной.Проведен КАК Проведен,
		|		Приложение2КНалоговойНакладной.ПометкаУдаления КАК ПометкаУдаления,
		|		Приложение2КНалоговойНакладной.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
		|		Приложение2КНалоговойНакладной.ВключенаВЕдиныйРеестрНалоговыхНакладных КАК ВключенаВЕдиныйРеестрНалоговыхНакладных,
		|		Приложение2КНалоговойНакладной.Контрагент.ИНН КАК ИНН,
		|		Приложение2КНалоговойНакладной.КтоВыписалНалоговуюНакладную КАК КтоВыписалНалоговуюНакладную
		|	ИЗ
		|		Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
		|	ГДЕ
		|		Приложение2КНалоговойНакладной.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И Приложение2КНалоговойНакладной.Организация = &Организация) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.СпецРежимНалогообложения, 
		|	ВложенныйЗапрос.Проведен, 
		|	ВложенныйЗапрос.ПометкаУдаления, 
		|	ВложенныйЗапрос.ИНН,
		|	ВложенныйЗапрос.КтоВыписалНалоговуюНакладную,
		|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
		|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных, 
		|	ВложенныйЗапрос.Проведен} 
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";  
		
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);  		
		ПостроительЗапроса.ЗаполнитьНастройки();           		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);    		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗарегистрированныеПоДанным1С и ЭлементыФормы.ДаФ.Значение = 1 Тогда
			ЭлементОтбора  =  Отбор.Добавить("ВключенаВЕдиныйРеестрНалоговыхНакладных");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если ЗарегистрированныеПоДанным1С и ЭлементыФормы.ДаФ.Значение = 2 Тогда
			ЭлементОтбора  =  Отбор.Добавить("ВключенаВЕдиныйРеестрНалоговыхНакладных");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.НеРавно 
		КонецЕсли;
		
		Если ЗарегистрированныеПоДанным1СПлан и ЭлементыФормы.ДаП.Значение = 1 Тогда
			ЭлементОтбора  =  Отбор.Добавить("ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		Если ЗарегистрированныеПоДанным1СПлан и ЭлементыФормы.ДаП.Значение = 2 Тогда
			ЭлементОтбора  =  Отбор.Добавить("ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.НеРавно 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СпецРежимНалогообложения) Тогда
			ЭлементОтбора  =  Отбор.Добавить("СпецРежимНалогообложения");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  СпецРежимНалогообложения;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно;
		КонецЕсли;
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыписалНН) Тогда
			ЭлементОтбора  =  Отбор.Добавить("КтоВыписалНалоговуюНакладную");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ВыписалНН;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если БезНеплательщиков Тогда
			ЭлементОтбора  =  Отбор.Добавить("ИНН");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  "";
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.НеРавно; 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		ОбщийНДС = 0;
		ОбщийСума=0;
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			ОбщийНДС = ОбщийНДС + ПодобранныйДокумент.Документ.СуммаНДСДокумента;
			ОбщийСума = ОбщийСума + ПодобранныйДокумент.Документ.СуммаДокумента;
		КонецЦикла; 
		
		Если ТаблицаДокументов.Количество() > 0 Тогда 
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовДод2(); 
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		ВсегоНДСЧисло = ОбщийНДС;
		ВсегоЧисло1 = ОбщийСума;
		
		Скрытие(БезНДСЧисло, ВсегоНДСЧисло, ВсегоЧисло1);
		//ЗаполнитьРеквизитыДокументовДод2();  		
	КонецЕсли;
	//====================Блок ТТН=====================//
	
	Если ТипДок = "ТТНспирт" или ТипДок="ТТНалкоголь" Тогда  
		ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ДополнительныеДанные.Доступность = Истина;
		
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Дата КАК Дата, 
		|		РеализацияТоваровУслуг.Ссылка КАК Ссылка, 
		|		РеализацияТоваровУслуг.Контрагент КАК Контрагент, 
		|		РеализацияТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		РеализацияТоваровУслуг.Ответственный КАК Ответственный, 
		//|		РеализацияТоваровУслуг.СпецРежимНалогообложения КАК СпецРежимНалогообложения, 
		|		РеализацияТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления,   
		//|		РеализацияТоваровУслуг.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
		//|		РеализацияТоваровУслуг.ВключенаВЕдиныйРеестрНалоговыхНакладных КАК ВключенаВЕдиныйРеестрНалоговыхНакладных, 
		|		РеализацияТоваровУслуг.Проведен КАК Проведен,
		|		РеализацияТоваровУслуг.ПредставительОрганизации КАК ПредставительОрганизации,
		|		РеализацияТоваровУслуг.Контрагент.ИНН КАК ИНН
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|	ГДЕ
		|		РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И РеализацияТоваровУслуг.Организация = &Организация) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		//|	ВложенныйЗапрос.СпецРежимНалогообложения, 
		//|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
		//|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.ПредставительОрганизации,
		|	ВложенныйЗапрос.ИНН,
		|	ВложенныйЗапрос.Проведен} 		
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";   
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса); 		
		ПостроительЗапроса.ЗаполнитьНастройки();     		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   ЭлементыФормы.НачПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));//ЭлементыФормы.КонПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);      		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыписалНН) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ПредставительОрганизации");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ВыписалНН;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если БезНеплательщиков Тогда
			ЭлементОтбора  =  Отбор.Добавить("ИНН");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  "";
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.НеРавно; 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		ОбщийНДС = 0;
		ОбщийБезНДС = 0;
		ОбщийСума=0;
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			НоваяСтрока = ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			Док = ПодобранныйДокумент.Документ;
			//Если ИмяБазы = "УПП" Тогда
			//	НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС")- Док.ОС.Итог("СуммаНДС") - Док.НематериальныеАктивы.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			//ИначеЕсли ИмяБазы = "УТ" Тогда
			НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			//Иначе	
			//	НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС")- Док.ВозвратнаяТара.Итог("Сумма") - Док.НМА.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			//КонецЕсли;	
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
			
			ОбщийНДС = ОбщийНДС + НоваяСтрока.СуммаНДСДокумента;
			ОбщийБезНДС = ОбщийБезНДС + НоваяСтрока.СуммаБезНДС;
			ОбщийСума = ОбщийСума + Док.СуммаДокумента;
			
		КонецЦикла; 
		
		Если ТаблицаДокументов.Количество() > 0 Тогда 	
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовТТН(); 
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
	КонецЕсли;	
	
	//------===========================ТТН конец запроса========================//	
	
	//-----------------------------------------------  	
	Если ТипДок = "ЗаписьКнигиПриобретения" Тогда  	
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		РегистрацияВходящегоНалоговогоДокумента.Дата КАК Дата, 
		|		РегистрацияВходящегоНалоговогоДокумента.Ссылка КАК Ссылка, 
		|		РегистрацияВходящегоНалоговогоДокумента.Контрагент КАК Контрагент, 
		|		РегистрацияВходящегоНалоговогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		РегистрацияВходящегоНалоговогоДокумента.Ответственный КАК Ответственный, 
		//|		&ОбособленноеПодразделениеЗапит КАК ОбособленноеПодразделениеЗапит
		|	ИЗ
		|		Документ.РегистрацияВходящегоНалоговогоДокумента КАК РегистрацияВходящегоНалоговогоДокумента
		|	ГДЕ
		|		РегистрацияВходящегоНалоговогоДокумента.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И РегистрацияВходящегоНалоговогоДокумента.Организация  =  &Организация) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Ответственный}
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";      
		
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);   		
		ПостроительЗапроса.ЗаполнитьНастройки(); 		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);	
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			Док  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС")- Док.ОС.Итог("СуммаНДС") - Док.НМА.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС;
			
		КонецЦикла; 
		
		Если ТаблицаДокументов.Количество() > 0 Тогда 
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовЗапит(); 
		Иначе
			ИзменениеОсновныхПараметров();			
		КонецЕсли;    		
		//ЗаполнитьРеквизитыДокументовЗапит();  		
	КонецЕсли; 
	//---------------------------------------------------------------
	Если ТипДок = "ВхНалоговыйДокумент" Тогда  
		Если ИмяБазы = "БУ" 
			ИЛИ ИмяБазы = "УТП" 
			ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
			ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
			ТекстЗапроса  =  
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		РегистрацияВходящегоНалоговогоДокумента.Дата КАК Дата, 
			|		РегистрацияВходящегоНалоговогоДокумента.Ссылка КАК Ссылка, 
			|		РегистрацияВходящегоНалоговогоДокумента.Контрагент КАК Контрагент, 
			|		РегистрацияВходящегоНалоговогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента, 
			|		РегистрацияВходящегоНалоговогоДокумента.Ответственный КАК Ответственный, 
			|		РегистрацияВходящегоНалоговогоДокумента.ПометкаУдаления КАК ПометкаУдаления, 
			|		РегистрацияВходящегоНалоговогоДокумента.ВидОперации КАК ВидОперации,  
			|		РегистрацияВходящегоНалоговогоДокумента.Проведен КАК Проведен,
			|		РегистрацияВходящегоНалоговогоДокумента.Комментарий КАК Комментарий 
			|	ИЗ
			|		Документ.РегистрацияВходящегоНалоговогоДокумента КАК РегистрацияВходящегоНалоговогоДокумента
			|	ГДЕ
			|		РегистрацияВходящегоНалоговогоДокумента.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И РегистрацияВходящегоНалоговогоДокумента.Организация  =  &Организация 
			|		) КАК ВложенныйЗапрос 
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Ответственный, 
			|	ВложенныйЗапрос.ДоговорКонтрагента, 
			|	ВложенныйЗапрос.ВидОперации,
			|	ВложенныйЗапрос.Проведен,
			|	ВложенныйЗапрос.Комментарий} 		
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";
		ИначеЕсли ИмяБазы="УПП" или ИмяБазы="УТ" Тогда
			ТекстЗапроса  =  
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЗаписьКнигиПриобретения.Дата КАК Дата, 
			|		ЗаписьКнигиПриобретения.Ссылка КАК Ссылка, 
			|		ЗаписьКнигиПриобретения.Контрагент КАК Контрагент, 
			|		ЗаписьКнигиПриобретения.ДоговорКонтрагента КАК ДоговорКонтрагента, 
			|		ЗаписьКнигиПриобретения.Ответственный КАК Ответственный, 
			|		ЗаписьКнигиПриобретения.ПометкаУдаления КАК ПометкаУдаления, 
			|		ЗаписьКнигиПриобретения.ВидОперации КАК ВидОперации,  
			|		ЗаписьКнигиПриобретения.Проведен КАК Проведен,
			|		ЗаписьКнигиПриобретения.Комментарий КАК Комментарий 
			|	ИЗ
			|		Документ.ЗаписьКнигиПриобретения КАК ЗаписьКнигиПриобретения
			|	ГДЕ
			|		ЗаписьКнигиПриобретения.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И ЗаписьКнигиПриобретения.Организация  =  &Организация 
			|		) КАК ВложенныйЗапрос 
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Ответственный, 
			|	ВложенныйЗапрос.ДоговорКонтрагента, 
			|	ВложенныйЗапрос.ВидОперации,
			|	ВложенныйЗапрос.Проведен,
			|	ВложенныйЗапрос.Комментарий} 		
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";  
		КонецЕсли;
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса); 		
		ПостроительЗапроса.ЗаполнитьНастройки();     		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   ЭлементыФормы.НачПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));//ЭлементыФормы.КонПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			
			Если ВхДокМедок = Истина Тогда
				Если Лев(ПодобранныйДокумент.Документ.Комментарий, 5)="Переданий з M.E.Doc" тогда
				Иначе 
					Продолжить;
				КонецЕсли; 
			КонецЕсли;     		
			
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			Док  =  ПодобранныйДокумент.Документ;
			Если ИмяБазы = "УПП" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС")- Док.ВозвратнаяТара.Итог("Сумма");
			ИначеЕсли ИмяБазы = "УТ" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС");
			Иначе	
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС");
			КонецЕсли;	
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
		КонецЦикла; 
		
		Если ТаблицаДокументов.Количество() > 0 Тогда 	
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовВхНН(); 
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		//ЗаполнитьРеквизитыДокументовВхНН(); 
	КонецЕсли;
	//---------------------------------------------------------------
	Если ТипДок = "ВхПостТовУслуг" Тогда
		
		Если ИмяБазы = "БУ" 
			ИЛИ ИмяБазы = "УТП" 
			ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
			ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
			ТекстЗапроса  =  
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		ПоступлениеТоваровУслуг.Дата КАК Дата, 
			|		ПоступлениеТоваровУслуг.Ссылка КАК Ссылка, 
			|		ПоступлениеТоваровУслуг.Контрагент КАК Контрагент, 
			|		ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента, 
			|		ПоступлениеТоваровУслуг.Ответственный КАК Ответственный, 
			|		ПоступлениеТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления,
			|		ПоступлениеТоваровУслуг.Комментарий КАК Комментарий,
			|		ПоступлениеТоваровУслуг.ВидОперации КАК ВидОперации, 
			|		ПоступлениеТоваровУслуг.Проведен КАК Проведен 
			|	ИЗ
			|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
			|	ГДЕ
			|		ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И ПоступлениеТоваровУслуг.Организация  =  &Организация
			|		) КАК ВложенныйЗапрос 
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Ответственный, 
			|	ВложенныйЗапрос.ДоговорКонтрагента, 
			|	ВложенныйЗапрос.ВидОперации, 
			|	ВложенныйЗапрос.Комментарий, 
			|	ВложенныйЗапрос.Проведен} 		
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";  
			
		ИначеЕсли ИмяБазы = "УПП" ИЛИ ИмяБазы = "УТ" Тогда
			ТекстЗапроса =  
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		ПоступлениеТоваровУслуг.Дата КАК Дата, 
			|		ПоступлениеТоваровУслуг.Ссылка КАК Ссылка, 
			|		ПоступлениеТоваровУслуг.Контрагент КАК Контрагент, 
			|		ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента, 
			|		ПоступлениеТоваровУслуг.Ответственный КАК Ответственный, 
			|		ПоступлениеТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления,
			|		ПоступлениеТоваровУслуг.Комментарий КАК Комментарий,
			|		ПоступлениеТоваровУслуг.Проведен КАК Проведен 
			|	ИЗ
			|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
			|	ГДЕ
			|		ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И ПоступлениеТоваровУслуг.Организация  =  &Организация
			|		) КАК ВложенныйЗапрос 
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Ответственный, 
			|	ВложенныйЗапрос.ДоговорКонтрагента, 
			|	ВложенныйЗапрос.Комментарий, 
			|	ВложенныйЗапрос.Проведен} 		
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";   
		КонецЕсли;
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса); 		
		ПостроительЗапроса.ЗаполнитьНастройки();     		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   ЭлементыФормы.НачПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   ЭлементыФормы.КонПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка); 	
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			
			Если ВхДокМедок = Истина Тогда
				Если Лев(ПодобранныйДокумент.Документ.Комментарий, 5)="Переданий з M.E.Doc" тогда
				Иначе 
					Продолжить;
				КонецЕсли; 
			КонецЕсли;   
			
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			
			Док  =  ПодобранныйДокумент.Документ;
			Если ИмяБазы = "УПП" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС") - Док.Оборудование.Итог("СуммаНДС") - Док.ОбъектыСтроительства.Итог("Сумма") - Док.БланкиСтрогогоУчета.Итог("Сумма") ; 
			ИначеЕсли ИмяБазы = "УТ" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			Иначе	
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС")- Док.Оборудование.Итог("СуммаНДС")- Док.ОбъектыСтроительства.Итог("СуммаНДС") - Док.БланкиСтрогогоУчета.Итог("СуммаНДС");
			КонецЕсли;	
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
		КонецЦикла; 
		
		Если ТаблицаДокументов.Количество() > 0 Тогда 	
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовВхПТУ();
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
	КонецЕсли;	
	
	//ЗаполнитьРеквизитыДокументовВхПТУ();
	//---------------------------------------------------------------
	Если ТипДок = "ВхСчет" Тогда 
		
		Если ИмяБазы = "БУ" 
			ИЛИ ИмяБазы = "УТП" 
			ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
			ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
			ТекстЗапроса  =  
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		СчетНаОплатуПоставщика.Дата КАК Дата, 
			|		СчетНаОплатуПоставщика.Ссылка КАК Ссылка, 
			|		СчетНаОплатуПоставщика.Контрагент КАК Контрагент, 
			|		СчетНаОплатуПоставщика.ДоговорКонтрагента КАК ДоговорКонтрагента, 
			|		СчетНаОплатуПоставщика.Ответственный КАК Ответственный, 
			|		СчетНаОплатуПоставщика.ПометкаУдаления КАК ПометкаУдаления,
			|		СчетНаОплатуПоставщика.Комментарий КАК Комментарий,
			|		СчетНаОплатуПоставщика.ВидОперации КАК ВидОперации, 
			|		СчетНаОплатуПоставщика.Проведен КАК Проведен 
			|	ИЗ
			|		Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
			|	ГДЕ
			|		СчетНаОплатуПоставщика.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И СчетНаОплатуПоставщика.Организация  =  &Организация
			|		) КАК ВложенныйЗапрос 
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Ответственный, 
			|	ВложенныйЗапрос.ДоговорКонтрагента, 
			|	ВложенныйЗапрос.Комментарий,
			|	ВложенныйЗапрос.ВидОперации,
			|	ВложенныйЗапрос.Проведен} 		
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";
		ИначеЕсли ИмяБазы = "УПП" ИЛИ ИмяБазы = "УТ" Тогда 
			ТекстЗапроса  =  
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		СчетНаОплатуПоставщика.Дата КАК Дата, 
			|		СчетНаОплатуПоставщика.Ссылка КАК Ссылка, 
			|		СчетНаОплатуПоставщика.Контрагент КАК Контрагент, 
			|		СчетНаОплатуПоставщика.ДоговорКонтрагента КАК ДоговорКонтрагента, 
			|		СчетНаОплатуПоставщика.Ответственный КАК Ответственный, 
			|		СчетНаОплатуПоставщика.ПометкаУдаления КАК ПометкаУдаления,
			|		СчетНаОплатуПоставщика.Комментарий КАК Комментарий,
			|		СчетНаОплатуПоставщика.Проведен КАК Проведен 
			|	ИЗ
			|		Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
			|	ГДЕ
			|		СчетНаОплатуПоставщика.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И СчетНаОплатуПоставщика.Организация  =  &Организация
			|		) КАК ВложенныйЗапрос 
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Ответственный, 
			|	ВложенныйЗапрос.ДоговорКонтрагента, 
			|	ВложенныйЗапрос.Комментарий,
			|	ВложенныйЗапрос.Проведен} 		
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ"; 
		КонецЕсли;
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса); 		
		ПостроительЗапроса.ЗаполнитьНастройки();     		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   ЭлементыФормы.НачПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));//ЭлементыФормы.КонПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка); 	
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			
			Если ВхДокМедок = Истина Тогда
				Если Лев(ПодобранныйДокумент.Документ.Комментарий, 5)="Переданий з M.E.Doc" тогда
				Иначе 
					Продолжить;
				КонецЕсли; 
			КонецЕсли;   
			
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			Док  =  ПодобранныйДокумент.Документ;
			Если ИмяБазы = "УПП" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС") - Док.Оборудование.Итог("СуммаНДС") - Док.НематериальныеАктивы.Итог("СуммаНДС") ;
			ИначеЕсли ИмяБазы = "УТ" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			Иначе	
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС")- Док.Оборудование.Итог("СуммаНДС")- Док.ОбъектыСтроительства.Итог("СуммаНДС") - Док.НематериальныеАктивы.Итог("СуммаНДС");
			КонецЕсли;	
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
		КонецЦикла; 
		
		Если ТаблицаДокументов.Количество() > 0 Тогда 	
			ОтобразитьВозможности(); 
			ЗаполнитьРеквизитыДокументовВхСчет(); 
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
		//ЗаполнитьРеквизитыДокументовВхСчет();
	КонецЕсли;
	//---------------------------------------------------------------
	ПроверитьНаличиеПервички();
	ПроверитьНаличиеОтчетов(СуффиксДСС,  СуффиксДФС,  СуффиксЕО,  СуффиксФСС);
	
КонецПроцедуры

Процедура ДополнительныеДанные(Кнопка) Экспорт
		
	Форма = ПолучитьФорму("ТТНФорма");
	Форма.Открыть();
	Параметр = ВосстановитьЗначение("Марка");
	
КонецПроцедуры

Процедура ПроверитьНаличиеПервички()
	
	Попытка 
		App = Новый COMОбъект("MEDOC.ZApplication"); 
		Для Каждого СтрокаДокумент из ТаблицаДокументов Цикл
			Документ = СтрокаДокумент.Документ;
			ИД = Строка(Документ.УникальныйИдентификатор());
			
			Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
				СтатусТекст = СокрЛП(ПолучитьРасшифровкуСтатуса(Строка(App.GetSendSTTByExDocID(ИД)))); 	
				СтатусТекст2 = СокрЛП(ПроверитьСтатусПоИД(Строка(App.GetDocStatus(ИД))));
				СтрокаДокумент.Статус = Формат(Строка(СтатусТекст + ",  " + СтатусТекст2));
			ИначеЕсли (НЕ ТипДок = "ВхНалоговыйДокумент") 
				И (НЕ ТипДок = "ВхПостТовУслуг") 
				И (НЕ ТипДок = "ВхСчет") 
				И App.GetInTrashStatus(ИД) = Ложь Тогда
				СтрокаДокумент.Статус = Формат(НСтр("ru = 'Документ не передавался в M.E.Doc';uk = 'Документ не передавався в M.E.Doc'")); 					
			ИначеЕсли App.GetInTrashStatus(ИД) = Истина	Тогда
				СтрокаДокумент.Статус = Формат(НСтр("ru = 'Документ в корзине';uk = 'Документ в корзині'"));			
			Иначе
				СтрокаДокумент.Статус = Формат(НСтр("ru = 'Документ не передавался в M.E.Doc';uk = 'Документ не передавався в M.E.Doc'"));//"ru = '';uk = ''" 
			КонецЕсли;     		
		КонецЦикла;	
		ЭлементыФормы.ЭДОВозможен.Видимость = Ложь;//Истина;
		ЭлементыФормы.ЭДОНевозможен.Видимость = ложь;
		DLLПодключена()
	Исключение
		ЭлементыФормы.ЭДОВозможен.Видимость = Ложь;
		ЭлементыФормы.ЭДОНевозможен.Видимость = Ложь;//Истина;
		DLLНеПодключена();
		Возврат; 
	КонецПопытки;     
	
КонецПроцедуры

Процедура ПриОткрытии() 
	
	ЭлементыФормы.ВерсияСтыковкиНадпись.Заголовок = НСтр("ru = 'Версия ';uk = 'Версія '") + ВерсияСтыковки;
	ЭлементыФормы.НадписьПараметры.Значение       	 =  ВосстановитьЗначение("НадписьПараметры");   	
	ПроверитьПараметры();
	ЭлементыФормы.ПараметрыПредприятияПоле.Значение  =  ВосстановитьЗначение("ПараметрыПредприятияПоле"); 
	ЭлементыФормы.ПараметрыФилиалПоле.Значение       =  ВосстановитьЗначение("ПараметрыФилиалПоле"); 
	ЭлементыФормы.ПараметрыЛогинПоле.Значение        =  ВосстановитьЗначение("ПараметрыЛогинПоле"); 
	ЭлементыФормы.ПараметрыПарольПоле.Значение       =  ВосстановитьЗначение("ПараметрыПарольПоле");   
	
	ЭлементыФормы.НастройкаКонтрольВерсииМедка.Значение  =  1001170;
	ИмяБазы = ПолучитьИмяБазы();
	ЭлементыФормы.ОтпрНет.Значение  =  1;
	//ЭлементыФормы.ОтпрНетОтч.значение  =  1; 
//	ЭлементыФормы.ПСпрКонтрагентов.Значение = 4;
	ОбратитесьКРазработчику = Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");
	
	ЭлементыФормы.ПерСохраненнный.Значение = ?(ЭлементыФормы.ПерСохраненнный.Значение <> Неопределено,  ВосстановитьЗначение("ПерСохраненнный"),  1);
	ЭлементыФормы.ПерНачГода.Значение       =  ВосстановитьЗначение("ПерНачГода"); 
	ЭлементыФормы.ПерНачМесяца.Значение     =  ВосстановитьЗначение("ПерНачМесяца"); 
	ЭлементыФормы.ПерНачНедели.Значение     =  ВосстановитьЗначение("ПерНачНедели"); 
	ЭлементыФормы.ПерТекДата.Значение       =  ВосстановитьЗначение("ПерТекДата");   
//	ЭлементыФормы.СпрУдалять.Значение       =  ВосстановитьЗначение("СпрУдалять"); 
	
	ЭлементыФормы.ЗапЛок.Значение = ?(ЭлементыФормы.ЗапЛок.Значение <> Неопределено,  ВосстановитьЗначение("ЗапЛок"),  1);
	ЭлементыФормы.ЗапЛок.Значение  =  ВосстановитьЗначение("ЗапЛок");
	ЭлементыФормы.ЗапТерм.Значение  =  ВосстановитьЗначение("ЗапТерм");
	ЭлементыФормы.ЗапКлиент.Значение  =  ВосстановитьЗначение("ЗапКлиент");
		
	ЭлементыФормы.ФР.Значение  =  ВосстановитьЗначение("ФР"); 
	ЭлементыФормы.ОД.Значение  =  ВосстановитьЗначение("ОД"); 
	
	//ЭлементыФормы.ФР1.Значение  =  ВосстановитьЗначение("ФР1"); 
	//ЭлементыФормы.ОД1.Значение  =  ВосстановитьЗначение("ОД1");
	
	ЭлементыФормы.СозданиеКонтрагентов.Значение  =  ВосстановитьЗначение("СозданиеКонтрагентов"); 
	ЭлементыФормы.СозданиеКонтрагентовМед.Значение  =  ВосстановитьЗначение("СозданиеКонтрагентовМед");

	ЭлементыФормы.ОтображатьСлужебныеНН.Значение  =  ВосстановитьЗначение("ОтображатьСлужебныеНН");
	
	ЭлементыФормы.СоздаватьНоменклатуру.Значение  =  ВосстановитьЗначение("СоздаватьНоменклатуру");
	
	ЭлементыФормы.НЕоткрыватьВхДок.Значение  =  ВосстановитьЗначение("НЕоткрыватьВхДок");
	
	ЭлементыФормы.Вкл.Значение  =  ВосстановитьЗначение("Вкл"); 
	
	ВыборЯрлыка();
	ЭлементыФормы.ТипДокОтчета.СписокВыбора  =  СписокРеглОтчетов;   	
	
	ПутьКФайлуМедка  =  ВосстановитьЗначение("ПутьКФайлуМедка");
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуМедка) Тогда 
		ПутьКФайлуМедкаНачалоВыбораИзСписка(Неопределено,  Ложь);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуМедка) Тогда 
		Предупреждение(НСтр("ru = 'Настройки программы не выполнены!';uk = 'Налаштування програми не вказано!'"));
		ЭтаФорма.ТекущийЭлемент  =  ЭлементыФормы.ПутьКФайлуМедка;
		ЭтаФорма.ЭлементыФормы.ЭДОВозможен.Видимость =  Ложь;
		ЭтаФорма.ЭлементыФормы.ЭДОНЕвозможен.Видимость = Ложь;// Истина;
		DLLНеПодключена();
	КонецЕсли;   
	
	ОрганизацияПервичка = ВосстановитьЗначение("ОрганизацияПервичка");
	Если Не ЗначениеЗаполнено(ОрганизацияПервичка) Тогда
		ВыборкаДетальныеЗаписи = ВыбратьОрганизации();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ОрганизацияПервичка  =  ВыборкаДетальныеЗаписи.Ссылка; 		 
		КонецЕсли;
	КонецЕсли; 
	
	ОрганизацияСправочники = ОрганизацияПервичка;
	
	ЭлементыФормы.ОрганизацияПервичка.Значение = ОрганизацияПервичка;
	
	КодПоЕДРПОУ = ВосстановитьЗначение("КодПоЕДРПОУ");
	
	пФил   	    = ВосстановитьЗначение("пФил");
	
	КодДок 	    = ВосстановитьЗначение("КодДок");
	
	Ответственный = ВосстановитьЗначение("Ответственный");
	ЗарегистрированныеПоДанным1С = ВосстановитьЗначение("ЗарегистрированныеПоДанным1С");
	ЗарегистрированныеПоДанным1СПлан = ВосстановитьЗначение("ЗарегистрированныеПоДанным1СПлан"); 
	
	ЭтаФорма.ЭлементыФормы.ДаФ.Доступность  =  ЗарегистрированныеПоДанным1С; 
	ЭтаФорма.ЭлементыФормы.ДаП.Доступность  =  ЗарегистрированныеПоДанным1СПлан; 
	ЭтаФорма.ЭлементыФормы.Нетф.Доступность =  ЗарегистрированныеПоДанным1С; 
	ЭтаФорма.ЭлементыФормы.НетП.Доступность =  ЗарегистрированныеПоДанным1СПлан; 
	
	//----------------------------------------------------------	
	Контрагент  =  ВосстановитьЗначение("Контрагент");
	ДоговорКонтрагента  =  ВосстановитьЗначение("ДоговорКонтрагента");		
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ЭлементыФормы.ДоговорКонтрагента.Доступность = Истина;
	Иначе
		ЭлементыФормы.ДоговорКонтрагента.Доступность = Ложь;
	КонецЕсли;        
	//-----------------------------------------------------------
	НачПериодаОтч  =  ВосстановитьЗначение("НачПериодаОтч");   
	КонПериодаОтч  =  ВосстановитьЗначение("КонПериодаОтч"); 
	ОрганизацияОтчета  =  ВосстановитьЗначение("ОрганизацияОтчета"); 
	ТипДокОтчета  =  ВосстановитьЗначение("ТипДокОтчета");
	
	БезНДССтатья  =  ВосстановитьЗначение("БезНДССтатья");
	УчетПоОбособленнымПодразделениям  =  Ложь;
	
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ДополнительныеДанные.Доступность  =  Ложь;

	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ВывестиСписок.Доступность  =  Ложь;
	ЭлементыФормы.х2.Доступность  =  Ложь;
	ЭлементыФормы.х3.Доступность  =  Ложь;
	
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.УпорядочитьАЗ.Доступность  =  Ложь;
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.УпорядочитьЗА.Доступность  =  Ложь; 
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.УпорядочитьАЗОтчеты.Доступность  =  Ложь;
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.УпорядочитьЗАОтчеты.Доступность  =  Ложь; 
	
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ВывестиСписокОтчетов.Доступность = Ложь;
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ДействиеОтчеты.Доступность = Ложь;	       	
	
	СепараторВПервичке();
	СепараторВОтчетах();
	ДобавитьСписокПервички();
	Элементыформы.ТипДок.СписокВыбора = СписокПервички;
	ТипДок = ВосстановитьЗначение("ТипДок");
	ДоступностьКнопокПервички();
	ЭлементыФормы.СпецРежимНалогообложения.СписокВыбора = мСписокВыбораСпецРежимНалогообложения;
	СпецРежимНалогообложения = ВосстановитьЗначение("СпецРежимНалогообложения");  
	
	ОрганизацияПриИзменении(ЭлементыФормы.ОрганизацияПервичка);
	ОрганизацияОтчетаПриИзменении(ЭлементыФормы.ОрганизацияПервичка);  
	
	Если ЭлементыФормы.НачПериода.Значение = Дата('00010101') и ЭлементыФормы.КонПериода.Значение = Дата('00010101') Тогда
		ЭлементыФормы.НачПериода.Значение = Дата(Год(Текущаядата()), 01, 01);
		ЭлементыФормы.КонПериода.Значение = КонецДня(Дата(Год(Текущаядата()), 12, 31));	
	КонецЕСли;
	
	ВыборПериодаОтбораПервичкиДефолтные(); 		
	
	Если ЗначениеЗаполнено(ПутьКФайлуМедка) Тогда
		ЭлементыФормы.НетСтрокиМедка.Видимость =  Ложь;
	Иначе
		ЭлементыФормы.НетСтрокиМедка.Видимость =  Истина; 
	КонецЕсли;   
	//----------------------------------------------------------------------------
	ДоступносьПриложений();
	//ВыборСправочникаКлюч();      
	Подключение1СМедок(); 
	
	//выполняем 1 раз при открытии 
	//и по запросу пользователя
	Если Вкл = 0 Тогда
		Результат = ПроверитьНаличиеОбновления();
		Если Результат.ЕстьОбновление Тогда
			Кнопки = Новый СписокЗначений;
			Кнопки.Вставить(0,КодВозвратаДиалога.Да,"Перейти на сайт");
			Кнопки.Вставить(1,КодВозвратаДиалога.Отмена);
			
			Ответ = Вопрос(НСтр("ru = 'Доступна новая версия стыковки!';uk = 'Доступна нова версія стикування!'"), Кнопки,0) ;
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЗапуститьПриложение(Результат.СсылкаНаОбновление);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 

	СписокДокуменов = Новый СписокЗначений(); 	
	Для каждого Док из Метаданные.Документы Цикл
		Если НЕ Лев(Док.Синоним, 1) = "("  Тогда
			СписокДокуменов.Добавить(Док.Имя, Док.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	СписокДокуменов.СортироватьПоЗначению();
	
	РегОтчетИнициализация();
	СбросНастроекТабПриложений();	
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначение("НадписьПараметры",       ЭлементыФормы.НадписьПараметры.Значение);
	СохранитьЗначение("ПараметрыПредприятияПоле",       ПараметрыПредприятияПоле);
	СохранитьЗначение("ПараметрыФилиалПоле",       ЭлементыФормы.ПараметрыФилиалПоле.Значение);
	СохранитьЗначение("ПараметрыЛогинПоле",       ПараметрыЛогинПоле);
	СохранитьЗначение("ПараметрыПарольПоле",       ЭлементыФормы.ПараметрыПарольПоле.Значение);
	                  
	СохранитьЗначение("НачПериода",       ЭлементыФормы.НачПериода.Значение); 
	СохранитьЗначение("КонПериода",       ЭлементыФормы.КонПериода.Значение);
	СохранитьЗначение("ПутьКФайлуМедка",  ПутьКФайлуМедка);	
	СохранитьЗначение("ОрганизацияПервичка",      ОрганизацияПервичка);  
	//СохранитьЗначение("ОрганизацияСправочники",      ОрганизацияСправочники); 
	СохранитьЗначение("КодПоЕДРПОУ",      КодПоЕДРПОУ);
	//СохранитьЗначение("КодПоЕДРПОУСпр",      КодПоЕДРПОУСпр);
	СохранитьЗначение("пФил",     		 пФил);
	СохранитьЗначение("ТипДок",     		 ТипДок);  
	СохранитьЗначение("КодДок",     		 КодДок);
	СохранитьЗначение("СпецРежимНалогообложения",  СпецРежимНалогообложения); 	
	СохранитьЗначение("Контрагент",  Контрагент);   
	СохранитьЗначение("Ответственный",  Ответственный);
	СохранитьЗначение("ДоговорКонтрагента",  ДоговорКонтрагента);
	СохранитьЗначение("ЗарегистрированныеПоДанным1С",   ЗарегистрированныеПоДанным1С);
	СохранитьЗначение("ЗарегистрированныеПоДанным1СПлан",   ЗарегистрированныеПоДанным1СПлан);
	СохранитьЗначение("ДаП",   ЭлементыФормы.ДаП);
	СохранитьЗначение("ДаФ",   ЭлементыФормы.ДаФ);
	СохранитьЗначение("НетП",   ЭлементыФормы.НетП);
	СохранитьЗначение("НетФ",   ЭлементыФормы.НетФ);
	
	СохранитьЗначение("ПерСохраненнный",   ЭлементыФормы.ПерСохраненнный.Значение); 
	СохранитьЗначение("ПерНачГода",   ЭлементыФормы.ПерНачГода.Значение); 
	СохранитьЗначение("ПерНачМесяца",   ЭлементыФормы.ПерНачМесяца.Значение); 
	СохранитьЗначение("ПерНачНедели",   ЭлементыФормы.ПерНачНедели.Значение); 
	СохранитьЗначение("ПерТекДата",   ЭлементыФормы.ПерТекДата.Значение); 
		
	СохранитьЗначение("ЗапЛок",   ЭлементыФормы.ЗапЛок.Значение); 
	СохранитьЗначение("ЗапТерм",   ЭлементыФормы.ЗапТерм.Значение); 
	СохранитьЗначение("ЗапКлиент",   ЭлементыФормы.ЗапКлиент.Значение); 
	
	СохранитьЗначение("НачПериодаОтч",   ЭлементыФормы.НачПериодаОтч.Значение);
	СохранитьЗначение("КонПериодаОтч",   ЭлементыФормы.КонПериодаОтч.Значение);
	СохранитьЗначение("ОрганизацияОтчета",   ЭлементыФормы.ОрганизацияОтчета.Значение);
	СохранитьЗначение("ТипДокОтчета",   ЭлементыФормы.ТипДокОтчета.Значение); 
	
	СохранитьЗначение("ФР",       ЭлементыФормы.ФР.Значение);
	СохранитьЗначение("ОД",       ЭлементыФормы.ОД.Значение);
	
	СохранитьЗначение("СозданиеКонтрагентов", ЭлементыФормы.СозданиеКонтрагентов.Значение);
	СохранитьЗначение("СозданиеКонтрагентовМед", ЭлементыФормы.СозданиеКонтрагентовМед.Значение);
	СохранитьЗначение("НЕоткрыватьВхДок", ЭлементыФормы.НЕоткрыватьВхДок.Значение);
	СохранитьЗначение("СоздаватьНоменклатуру", ЭлементыФормы.СоздаватьНоменклатуру.Значение);
	СохранитьЗначение("ОтображатьСлужебныеНН", ОтображатьСлужебныеНН);
	СохранитьЗначение("Вкл", Вкл);

	Если НЕ МедКомпонент = Неопределено Тогда
		МедКомпонент.CloseAddin();
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаДокументовПриПолученииДанных(Элемент,  ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		ОформлениеСтроки.Ячейки.НомерСтроки.УстановитьТекст(Строка(ТаблицаДокументов.Индекс(ДанныеСтроки)+1));
		
		Если (НЕ ТипДок = "НалоговаяНакладная") 
			И (НЕ ТипДок = "Приложение2") Тогда
			ОформлениеСтроки.Ячейки.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных.ЦветФона = ЦветаСтиля.ЦветФонаКнопки; 
			ОформлениеСтроки.Ячейки.ВключенаВЕдиныйРеестрНалоговыхНакладных.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
		КонецЕсли;

		Если (ТипДок = "ВхНалоговыйДокумент") ИЛИ (ТипДок = "ВхПостТовУслуг") ИЛИ (ТипДок = "ВхСчет") Тогда 
              ОформлениеСтроки.Ячейки.Статус.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриНажатииНажатие(Элемент) 	
	
	Если (ЭлементыФормы.ПутьКФайлуМедка.Значение <> "" и ЭлементыФормы.НадписьЯрлык.Значение<>"") Тогда
		Попытка 
			Путь  = Строка(ЭлементыФормы.ПутьКФайлуМедка.Значение) + Строка(ЭлементыФормы.НадписьЯрлык.Заголовок);
			Если НадписьПараметры Тогда
				Параметры  =  ?(ЗначениеЗаполнено(СокрЛП(ПараметрыПредприятияПоле)),  " -org "+СокрЛП(ПараметрыПредприятияПоле),  "") + 
				?(ЗначениеЗаполнено(СокрЛП(ПараметрыФилиалПоле)),  " -dept "+СокрЛП(ПараметрыФилиалПоле),  "") + 
				?(ЗначениеЗаполнено(СокрЛП(ПараметрыЛогинПоле)),  " -user "+СокрЛП(ПараметрыЛогинПоле),  "") + 
				?(ЗначениеЗаполнено(СокрЛП(ПараметрыПарольПоле)),  " -pass "+СокрЛП(ПараметрыПарольПоле),  "");
			Иначе
				Параметры = "";
			КонецЕсли;
			ЗапуститьПриложение(Путь + Параметры);      
			Возврат;
		Исключение
			Предупреждение(НСтр("ru = 'Не удалось запустить M.E.Doc. Проверьте путь к ехе-файлу программы!';uk = 'Не вдалось запустити  M.E.Doc. Перевірте шлях до ехе-файлу програми!'"));
		КонецПопытки;
	Иначе 
		Предупреждение(НСтр("ru = 'Не указан путь к М.E.Doc на вкладке Настройки !';uk = 'Не вказаний шлях до М.E.Doc на вкладці Налаштування!'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ТипДокПриИзменении(Элемент)
	
	ДоступностьКнопокПервички();
	
КонецПроцедуры

Процедура ДоступностьКнопокПервички()
	
	КодДокДоИзменений = Строка(КодДок);	

	Если Не ЗначениеЗаполнено(ТипДок) Тогда 		
		ТипДок  =  "НалоговаяНакладная";  	
	КонецЕсли; 

	Если ТипДок  =  "ОказаниеУслуг" Тогда 			КодДок = "А";
		Если ИмяБазы = "УТП" Тогда
			ЭлементыФормы.Проведен.Доступность = Ложь;
			ЭлементыФормы.Проведен.Значение = Ложь;
		Иначе
			ЭлементыФормы.Проведен.Доступность = Истина; 
		КонецЕсли;
	ИначеЕсли ТипДок  =  "Счет"  Тогда				 КодДок = "С";
		ЭлементыФормы.Проведен.Значение = Ложь;
		ЭлементыФормы.Проведен.Доступность = Ложь;
	ИначеЕсли ТипДок  =  "ВозвратТоваровОтПокупателя" Тогда 		КодДок = "ВОП";
		ЭлементыФормы.Проведен.Доступность = Истина; 
	ИначеЕсли ТипДок  =  "ВозвратТоваровПоставщику" Тогда 		КодДок = "ВТП";
		ЭлементыФормы.Проведен.Доступность = Истина; 
	ИначеЕсли ТипДок  =  "ВидНакладна" Тогда 		КодДок = "ВН";
		ЭлементыФормы.Проведен.Доступность = Истина; 
	ИначеЕсли ТипДок  =  "ТТНспирт" Тогда 		КодДок = "ТТНС";
		ЭлементыФормы.Проведен.Доступность = Истина; 
	ИначеЕсли ТипДок  =  "ТТНалкоголь" Тогда 		КодДок = "ТТНА";
		ЭлементыФормы.Проведен.Доступность = Истина;
	ИначеЕсли ТипДок  =  "АктСверки"  Тогда 		КодДок = "АС";
		Если ИмяБазы = "УПП" или ИмяБазы = "УТ"  Тогда
			ЭлементыФормы.Проведен.Доступность = Ложь;
			ЭлементыФормы.Проведен.Значение = Ложь;
		Иначе
			ЭлементыФормы.Проведен.Доступность = Истина; 
		КонецЕсли;
	ИначеЕсли ТипДок  =  "Приложение2"  Тогда 		КодДок = "П2";
		ЭлементыФормы.Проведен.Доступность = Истина; 
	ИначеЕсли ТипДок  =  "ВхНалоговыйДокумент" Тогда КодДок = "ВхНД";
	ИначеЕсли ТипДок  =  "ВхПостТовУслуг" Тогда 	КодДок = "ВхПТУ"; 
	ИначеЕсли ТипДок  =  "ВхСчет" Тогда 			КодДок = "ВхС";
	КонецЕсли;
	
	Если ТипДок  =  "НалоговаяНакладная" или ТипДок  =  "Приложение2" Тогда КодДок = "НН";
		Элементыформы.РамкаГруппыЕРНН_П.Видимость = Истина;
		Элементыформы.РамкаГруппыЕРНН_Ф.Видимость = Истина;
		Элементыформы.ЗарегистрированныеПоДанным1СПлан.Видимость = Истина;
		Элементыформы.ЗарегистрированныеПоДанным1С.Видимость = Истина;
		ЭлементыФормы.СпецРежимНалогообложения.Видимость = Истина;
		ЭлементыФормы.ДаП.Видимость = Истина;
		ЭлементыФормы.ДаФ.Видимость = Истина;
		ЭлементыФормы.НетП.Видимость = Истина;
		ЭлементыФормы.НетФ.Видимость = Истина;
		ЭлементыФормы.НадписьСпецрежим.Видимость = Истина;
		ЭлементыФормы.НадписьСпецрежим.Значение = "Спецрежим"; 
		ЭлементыФормы.Проведен.Доступность = Истина;
		ЭлементыФормы.ОтображатьСлужебныеНН.Видимость = Истина;
		
	Иначе 
		Элементыформы.РамкаГруппыЕРНН_П.Видимость = Ложь;
		Элементыформы.РамкаГруппыЕРНН_Ф.Видимость = Ложь;
		Элементыформы.ЗарегистрированныеПоДанным1СПлан.Видимость = Ложь;
		Элементыформы.ЗарегистрированныеПоДанным1СПлан.Значение = Ложь;
		Элементыформы.ЗарегистрированныеПоДанным1С.Видимость = Ложь;
		Элементыформы.ЗарегистрированныеПоДанным1С.Значение = Ложь;
		ЭлементыФормы.ДаП.Видимость = Ложь;
		ЭлементыФормы.ДаФ.Видимость = Ложь;
		ЭлементыФормы.НетП.Видимость = Ложь;
		ЭлементыФормы.НетФ.Видимость = Ложь;
		ЭлементыФормы.СпецРежимНалогообложения.Видимость = Ложь;
		ЭлементыФормы.НадписьСпецрежим.Видимость = Ложь;
		ЭлементыФормы.ОтображатьСлужебныеНН.Видимость = Ложь;
	КонецЕсли;     	    	
	
	Если ТипДок = "ВхНалоговыйДокумент" Тогда

	ИначеЕсли ТипДок = "ВхПостТовУслуг" Тогда

	ИначеЕсли ТипДок = "ВхСчет" Тогда
		Если ИмяБазы = "БУ" 
			ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
			ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
			ЭлементыФормы.Проведен.Значение = Ложь;
		КонецЕсли;
    КонецЕсли;     
	
	Если ТипДок = "ВхНалоговыйДокумент" ИЛИ ТипДок = "ВхПостТовУслуг" ИЛИ ТипДок = "ВхСчет" Тогда
		ЭлементыФормы.ВхДокМедок.Видимость = Истина;
		ЭлементыФормы.НадписьОтправлять.Видимость = Ложь;
		ЭлементыФормы.ОтпрНет.Видимость = Ложь;
		ЭлементыФормы.х2.Видимость = Ложь;
		ЭлементыФормы.х3.Видимость = Ложь;
		ЭлементыФормы.ФР.Видимость = Ложь;
		ЭлементыФормы.ОД.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ВхДокМедок.Видимость = Ложь;
		ЭлементыФормы.НадписьОтправлять.Видимость = Истина;
		ЭлементыФормы.ОтпрНет.Видимость = Истина;
		ЭлементыФормы.х2.Видимость = Истина;
		ЭлементыФормы.х3.Видимость = Истина;
		ЭлементыФормы.ФР.Видимость = Истина;
		ЭлементыФормы.ОД.Видимость = Истина;  
	КонецЕсли;
	
	СепараторВПервичке();
	
	Если КодДокДоИзменений <> Строка(КодДок) Тогда
		ИзменениеОсновныхПараметров();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ИзменениеОсновныхПараметров()
	
	ТаблицаДокументов.Очистить();
	ВсегоЧисло = "0";
	ИзНихЧисло = "0";
	ОтправленоЧисло = "0";
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Сформировать.Доступность  =  Ложь;
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ВывестиСписок.Доступность = Ложь;  
	ЭлементыФормы.ОтпрНет.Доступность = Ложь; 	
	ЭлементыФормы.х2.Доступность = Ложь;	
	ЭлементыФормы.х3.Доступность = Ложь;
		
КонецПроцедуры

Процедура ИзменениеОсновныхПараметровОтчетов()
	
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.УпорядочитьАЗОтчеты.Доступность = Ложь; 
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.УпорядочитьЗАОтчеты.Доступность = Ложь; 
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ВывестиСписокОтчетов.Доступность = Ложь;  
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ДействиеОтчеты.Доступность = Ложь;
	ТаблицаОтчетов.Очистить();
	
КонецПроцедуры

Процедура ИзменениеОсновныхПараметровБезОчисткиТаблицы()
	
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Сформировать.Доступность  =  Ложь;
	ЭлементыФормы.ОтпрНет.Доступность = Ложь; 	
	ЭлементыФормы.х2.Доступность = Ложь;	
	ЭлементыФормы.х3.Доступность = Ложь; 
	
КонецПроцедуры

Процедура ОтобразитьВозможности()
	
	ВсегоЧисло = ТаблицаДокументов.Количество();
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ВывестиСписок.Доступность = Истина;  			
	
	Если ТипДок = "ОказаниеУслуг" или ТипДок = "Счет" или ТипДок = "АктСверки" или ТипДок = "ВидНакладна" или ТипДок = "ВозвратТоваровОтПокупателя"
		или ТипДок = "ВозвратТоваровПоставщику" Тогда
		ЭлементыФормы.х2.Доступность = Ложь;
		ЭлементыФормы.х3.Доступность = Истина;
	Иначе                    
		ЭлементыФормы.х2.Доступность = Истина;
		ЭлементыФормы.х3.Доступность = Истина;
	КонецЕсли;
	
	ЭлементыФормы.ОтпрНет.Доступность = Истина;  
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.УпорядочитьАЗ.Доступность = Истина;
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.УпорядочитьЗА.Доступность = Истина;
	ОтпрНет  =  1;
	
КонецПроцедуры

Процедура ОтобразитьВозможностиОтчетов()
	
	ВсегоЧислоОтч = ТаблицаОтчетов.Количество();
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ВывестиСписокОтчетов.Доступность = Истина;
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.УпорядочитьАЗОтчеты.Доступность = Истина;
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.УпорядочитьЗАОтчеты.Доступность = Истина;
	ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ДействиеОтчеты.Доступность = Истина;
	
КонецПроцедуры

Процедура ОбособленноеПодразделениеНачалоВыбора(Элемент,  СтандартнаяОбработка)		
	Если Не ЗначениеЗаполнено(ОрганизацияПервичка) Тогда
		СтандартнаяОбработка  =  Ложь;
		Предупреждение(НСтр("ru  =  'Не указана организация'; uk  =  'Не вказана організація'"));
		Возврат;
	КонецЕсли;     
КонецПроцедуры

Процедура ПутьКФайлуМедкаОкончаниеВводаТекста(Элемент,  Текст,  Значение,  СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ЭлементыФормы.ПутьКФайлуМедка.Значение) Тогда
		ЭлементыФормы.НетСтрокиМедка.Видимость =  Истина;    
	Иначе 
		ЭлементыФормы.НетСтрокиМедка.Видимость =  Ложь;		
	КонецЕсли;   
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаДокументовМодосЗапуск(Кнопка)
	
	ПрефиксТекст = "Внимание";
	ЗапускМедка(ПрефиксТекст);
	
КонецПроцедуры

Процедура КПТаблПредпрЗапускМедокТП(Кнопка)
	
	ПрефиксТекст="Внимание";	
	ЗапускМедка(ПрефиксТекст);
	
КонецПроцедуры

Процедура АвтоСохрПредХМЛПриИзменении(Элемент)
	
	Если ЭлементыФормы.АвтоСохрПредХМЛ.Значение  =  Истина Тогда 
		ЭлементыФормы.ПутьКСохрХМЛПредпр.Доступность  =  Истина;
		ЭлементыФормы.НастройкиОткрыватьХМЛПредпр.Доступность  =  Истина;
	Иначе
		ЭлементыФормы.ПутьКСохрХМЛПредпр.Доступность  =  Ложь;
		ЭлементыФормы.НастройкиОткрыватьХМЛПредпр.Доступность  =  Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПутьКСохрХМЛПредпрНачалоВыбора(Элемент,  СтандартнаяОбработка)
	
	Папка  =  Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если Папка.Выбрать() Тогда
		ПутьКСохрХМЛПредпр  =  Строка(Папка.Каталог); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаПредприятийПредприятиеПриИзменении(Элемент)
	
	ТекДанные  =  ЭлементыФормы.ТаблицаПредприятий.ТекущиеДанные; 
	Если НЕ ЗначениеЗаполнено(ТекДанные.Предприятие) Тогда 
		ТекДанные.ЕДРПОУИНН  =  ""; 
	Иначе 
		КодЯзыкаПечать  =  Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),  "РежимФормированияПечатныхФорм"));
		СведенияОПоставщике  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ТекДанные.Предприятие,  ТекущаяДата(), , , КодЯзыкаПечать);
		Если ТекДанные.Предприятие.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ЮрЛицо Тогда			
			Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоЕДРПОУ) Тогда
				ТекДанные.ЕДРПОУИНН  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ);
			Иначе 
				ТекДанные.ЕДРПОУИНН  =  "";
			КонецЕсли;    
		ИначеЕсли ТекДанные.Предприятие.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоДРФО) Тогда
				ТекДанные.ЕДРПОУИНН  =  СокрЛП(СведенияОПоставщике.КодПоДРФО);
			Иначе 
				ТекДанные.ЕДРПОУИНН  =  "";
				
			КонецЕсли;  
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбнПериодПДНажатие(Элемент)
	
	ВыборПериодаОтбораПервичкиДефолтные();  
	
КонецПроцедуры

Процедура ПутьКФайлуМедкаНачалоВыбораИзСписка(Элемент,  СтандартнаяОбработка)
	
	УстановленныйМедок  =  Новый СписокЗначений(); 		
	HKEY_LOCAL_MACHINE = 2147483650;
	
	Н = 0; 	
	Пока Н<>25 Цикл 			
		ПутьККлючу = ?(Н = 0, "SoftWare\IntellectService\BusinessDoc", "SoftWare\IntellectService\BusinessDoc" + Н); 			
		ИмяПараметра = "PATH";
		Reg  =  ПолучитьCOMОбъект("winmgmts:{impersonationLevel = impersonate}!\\" +
		ИмяКомпьютера()+ "\root\default:stdRegProv");
		Reg.GetStringValue(HKEY_LOCAL_MACHINE,  ПутьККлючу,  ИмяПараметра,  СтрокаРегистрации);
		Если ЗначениеЗаполнено(СтрокаРегистрации) Тогда
			Файл = новый Файл(СокрЛП(СтрокаРегистрации));
			Если НЕ Лев(Файл.Имя, 2) = "1C" и НЕ Лев(Файл.Имя, 3) = "Arm" Тогда
				УстановленныйМедок.Добавить(СтрокаРегистрации);
			КонецЕсли;		
		КонецЕсли;
		Н = Н+1;  		
	КонецЦикла;
	
	Н = 0; 	
	Пока Н<>10 Цикл 			
		ПутьККлючу = ?(Н = 0, "SoftWare\IntellectService\BusinessDocStation",  "SoftWare\IntellectService\BusinessDocStation" + Н); 			
		ИмяПараметра = "PATH";
		Reg  =  ПолучитьCOMОбъект("winmgmts:{impersonationLevel = impersonate}!\\" +
		ИмяКомпьютера()+ "\root\default:stdRegProv");
		Reg.GetStringValue(HKEY_LOCAL_MACHINE,  ПутьККлючу,  ИмяПараметра,  СтрокаРегистрации);
		Если ЗначениеЗаполнено(СтрокаРегистрации) Тогда
			Файл = новый Файл(СокрЛП(СтрокаРегистрации));
			УстановленныйМедок.Добавить(СтрокаРегистрации);  	
		КонецЕсли;
		Н = Н+1;  		
	КонецЦикла;  
	
	
		HKEY_CURRENT_USER = 2147483649;
	
	Н = 0; 	
	Пока Н<>25 Цикл 			
		ПутьККлючу = ?(Н = 0, "SoftWare\IntellectService\BusinessDoc", "SoftWare\IntellectService\BusinessDoc" + Н); 			
		ИмяПараметра = "PATH";
		Reg  =  ПолучитьCOMОбъект("winmgmts:{impersonationLevel = impersonate}!\\" +
		ИмяКомпьютера()+ "\root\default:stdRegProv");
		Reg.GetStringValue(HKEY_CURRENT_USER,  ПутьККлючу,  ИмяПараметра,  СтрокаРегистрации);
		Если ЗначениеЗаполнено(СтрокаРегистрации) Тогда
			Файл = новый Файл(СокрЛП(СтрокаРегистрации));
			Если НЕ Лев(Файл.Имя, 2) = "1C" и НЕ Лев(Файл.Имя, 3) = "Arm" Тогда
				УстановленныйМедок.Добавить(СтрокаРегистрации);
			КонецЕсли;		
		КонецЕсли;
		Н = Н+1;  		
	КонецЦикла;
	
	Н = 0; 	
	Пока Н<>10 Цикл 			
		ПутьККлючу = ?(Н = 0, "SoftWare\IntellectService\BusinessDocStation",  "SoftWare\IntellectService\BusinessDocStation" + Н); 			
		ИмяПараметра = "PATH";
		Reg  =  ПолучитьCOMОбъект("winmgmts:{impersonationLevel = impersonate}!\\" +
		ИмяКомпьютера()+ "\root\default:stdRegProv");
		Reg.GetStringValue(HKEY_CURRENT_USER,  ПутьККлючу,  ИмяПараметра,  СтрокаРегистрации);
		Если ЗначениеЗаполнено(СтрокаРегистрации) Тогда
			Файл = новый Файл(СокрЛП(СтрокаРегистрации));
			УстановленныйМедок.Добавить(СтрокаРегистрации);  	
		КонецЕсли;
		Н = Н+1;  		
	КонецЦикла;  

	
	ЭлементыФормы.ПутьКФайлуМедка.СписокВыбора  =  УстановленныйМедок;
	
	Если НЕ СтандартнаяОбработка и УстановленныйМедок.Количество() = 1 Тогда
		ПутьКФайлуМедка  =  УстановленныйМедок[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПутьКСохрХМЛПредпрОкончаниеВводаТекста(Элемент,  Текст,  Значение,  СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ЭлементыФормы.ПутьКСохрХМЛПредпр.Значение) Тогда
		ЭлементыФормы.НетСтрокиХМЛПредприятий.Видимость =  Истина;    
	Иначе 
		ЭлементыФормы.НетСтрокиХМЛПредприятий.Видимость =  Ложь;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаПредприятийПередОкончаниемРедактирования(Элемент,  НоваяСтрока,  ОтменаРедактирования,  Отказ)
	
	//Отказ = Истина;
КонецПроцедуры

Процедура ЗапЛокПриИзменении(Элемент)
	
	ВыборЯрлыка();
	
КонецПроцедуры

Функция ПроверкаНаЮрЛицо(ВыбраннаяОрганизация)
	Если ВыбраннаяОрганизация.ЮрФизЛицо  <>  Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		 Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Процедура КоманднаяПанель1ЗаполнитьДокументами(Кнопка)
	
	ОтправленоЧислоОтч = 0;
	
	Если Не ЗначениеЗаполнено(НачПериодаОтч) ИЛИ 
		Не ЗначениеЗаполнено(КонПериодаОтч) ИЛИ
		Не ЗначениеЗаполнено(ОрганизацияОтчета) ИЛИ 
		Не ЗначениеЗаполнено(ТипДокОтчета)  
		Тогда
		ТекстСообщения  =  НСтр("ru  =  'Не указаны все обязательные поля!'; uk  =  'Не вказано всі обовязкові поля!'");
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;  
	
	Если Дата(НачПериодаОтч)>Дата(КонПериодаОтч) Тогда
		ТекстСообщения  =  НСтр("ru  =  'Начальная дата должна быть меньше конечной!'; uk  =  'Початкова дата повинна бути менше кінцевої!'");
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;   
	
	ТаблицаОтчетов.Очистить();  	
	//----------------------------------------------------------------------------------
	Запрос  =  Новый Запрос();  		
	Запрос.Текст =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегламентированныйОтчет.Ссылка КАК ДокументОтчет,
	|	РегламентированныйОтчет.Периодичность КАК ПериодОтчета,
	|	РегламентированныйОтчет.ДатаПодписи КАК Модифицирован,
	|	РегламентированныйОтчет.ПометкаУдаления КАК ПометкаУдаленияОтчета,
	|	РегламентированныйОтчет.НаименованиеОтчета КАК Название
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.Дата МЕЖДУ &НачПериодаОтч И &КонПериодаОтч
	|	И РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	|	И РегламентированныйОтчет.Организация = &ОрганизацияОтчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегламентированныйОтчет.ДатаПодписи УБЫВ";
	Запрос.УстановитьПараметр("НачПериодаОтч", НачалоДня(НачПериодаОтч));
	Запрос.УстановитьПараметр("КонПериодаОтч", КонецДня(КонПериодаОтч));
	Запрос.УстановитьПараметр("ОрганизацияОтчета", ОрганизацияОтчета);
	Запрос.УстановитьПараметр("ИсточникОтчета", ТипДокОтчета);       
	Выборка  =  Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НовыйРядок  =  ТаблицаОтчетов.Добавить();	
		ЗаполнитьЗначенияСвойств(НовыйРядок,  Выборка);
	КонецЦикла;
	
	//-----------------------------------------------------------------
	Если Выборка.Количество() > 0 Тогда
		ОтобразитьВозможностиОтчетов();
		ДоступносьПриложений();
	КонецЕсли;
	//-----------------------------------------------------------------
	ПроверитьНаличиеОтчетов(СуффиксДСС, СуффиксДФС, СуффиксЕО, СуффиксФСС);   
	
КонецПроцедуры

Процедура КоманднаяПанель1ЗапускМедокОтчеты(Кнопка)
	
	ПрефиксТекст="Внимание";
	ЗапускМедка(ПрефиксТекст);
	
КонецПроцедуры

Процедура КоманднаяПанель1ДействиеОтчеты(Кнопка)
	
	Если ЭлементыФормы.ТипДокОтчета.Значение  =  "РегламентированныйОтчетЕдиныйСоциальныйВзнос"
		И ЭлементыФормы.Приложения_таб1.Значение = Ложь
		И ЭлементыФормы.Приложения_таб2.Значение  = Ложь
		И ЭлементыФормы.Приложения_таб3.Значение  = Ложь
		И ЭлементыФормы.Приложения_таб4.Значение  = Ложь Тогда
		
		Предупреждение(Нстр("ru = 'Не выбрана таблица Додатка 4 (ЕСВ) для передачи в M.E.Doc';uk = 'Не вибрана таблиця Додатку 4 (ЕСВ) для передачі в M.E.Doc'"));
		Возврат;
	КонецЕсли; 
	
	Если ЭлементыФормы.ОтчНал.Значение = Ложь и ЭлементыФормы.ОтчСтат.Значение = Ложь и ЭлементыФормы.ОтчФСС.Значение = Ложь и ЭлементыФормы.ОтчЕО.Значение = Ложь Тогда
		Предупреждение(Нстр("ru = 'Выберите получателя отчета !';uk = 'Оберіть отримувача звіту !'"));
		Возврат;
	КонецЕсли;   
	
	Попытка 
		App  =  Новый COMОбъект("MEDOC.ZApplication"); 
	Исключение 
		Предупреждение(НСтр("ru = 'Передача документов отложена. Возможные причины:';uk = 'Передача документів відкладено. Можливі причини:'") + Символы.ПС + 
		НСтр("ru = '- приложение М.E.Doc не запущено.';uk = '- програма М.E.Doc не запущена.'") + символы.ПС + 
		НСтр("ru = '- предприятие из списка не выбрано.';uk = '- підприємство із списку не вибрано.'"));
		Возврат; 
	КонецПопытки;    
	
	Попытка 
		Если НЕ ПроверкаВерсииМедка(App.GetPrgVersion()) Тогда
			Возврат;
		КонецЕсли; 
	Исключение 
		Предупреждение(НСтр("ru = 'Ошибка при определении версии.';uk = 'Помилка при визначенні версії.'"));
	КонецПопытки;
	
	Попытка
		ОргМедок = ДатьОргМЕДок();
		Орг1С = КодЕДРПОУ(ОрганизацияОтчета);
		orgId  =  App.SeekOrg(КодПоЕДРПОУ1, пФил1);
		Если orgId = 0 Тогда 
			ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.Сформировать.Доступность = Ложь;
			Предупреждение(НСтр("ru = 'Предприятия не существует в М.E.Doc : ';uk = 'Підприємства не існує в М.E.Doc : '") + Символы.ПС +
			НСтр("ru = 'ЕДРПОУ : ';uk = 'ЄДРПОУ : '") + КодПоЕДРПОУ + Символы.ПС + НСтр("ru = 'Филиал : ';uk = 'Філія : '") + пФил + Символы.ПС + Символы.ПС + 
			НСтр("ru = 'Проверьте :';uk = 'Перевірте :'") + Символы.ПС + 
			НСтр("ru = '- внесен ли код ЕДРПОУ корректно';uk = '- чи внесений код ЕДРПОУ коректно'") + Символы.ПС + 
			НСтр("ru = '- внесен ли код филиала  корректно';uk = '- чи внесений код філії коректно'") + Символы.ПС +
			НСтр("ru = 'Если Да,  создайте в М.E.Doc новое предприятие.';uk = 'Якщо Так,  створіть в М.E.Doc нове підприємство.'")); 
			Возврат;
		ИначеЕсли ОргМедок <> Орг1С Тогда
			Предупреждение(НСтр("ru = 'Ошибка: Предприятие открытое в М.E.Doc не соответствует выбранному в 1С.';uk = 'Помилка: Підприємство відкрите в М.E.Doc не співпадає вибраному в 1С.'"));
			Возврат;
		КонецЕсли;   
	Исключение 
		Предупреждение(НСтр("ru = 'Ошибка при определении наличия предприятия в М.E.Doc.';uk = 'Помилка при визначенні наявності підприємства в М.E.Doc.'"));
		Возврат;
	КонецПопытки;           	
	
	//обновим статусы всех отчетов
	ОбновитьСтатусыОтчетов(App);
	
	//----------------------------------------------------------------------------------------- 
	КоличествоОтчетов = 0;	
	КолвоОтчетов  =  0;
	Колво1ПВ  =  0;
	КолвоРНН  =  0;
	КолвоБаланс  =  0;
	КолвоФинрез  =  0;
	КолвоБалансМП  =  0;
	КолвоФСС = 0;
	КолвоЕСВ = 0;
	КолвоЕН_ЮР = 0;
	КолвоЕН_ФОП = 0;
	КолвоДПР = 0;
	КолвоДНДС = 0;
	КолвоМПС = 0;
	
	СписокДляОткрытияОтчет = Новый Массив();
	
	ПредупреждениеПериодОтчета = НСтр("ru = 'Документы передаются, начиная с отчетности за ';uk = 'Документи передаютсья починаючи зі звітносіті за '");
	ПредупреждениеПериодТекст = НСтр("ru = 'Выбран отчет за: ';uk = 'Ваш звіт має період: '");
	
	МассивОтчетовДляПередачи = Новый Массив;
	МассивСообщений = Новый Массив;
	МассивСообщений.Добавить(НСтр("ru = 'Повторная передача доступна для документов со статусом ""Готовится"" и ""Не принято"" :';uk = 'Повторна передача доступна для документів зі статусом ""Готується"" і ""Не прийнято"":'"));
	
	Для каждого СтрокаОтчет Из ЭлементыФормы.ТаблицаОтчетов.ВыделенныеСтроки Цикл  
		ДокументОтчет = СтрокаОтчет.ДокументОтчет; 
		ИД = Строка(ДокументОтчет.УникальныйИдентификатор());
		Юрлицо = ПроверкаНаЮрЛицо(ДокументОтчет.Организация);
		
		//НайденнаяСтрока = ТаблицаОтчетов.Найти(ДокументОтчет, "ДокументОтчет"); 		
		Если App.GetSendSTTByExDocID(ИД) <> -1 и App.GetInTrashStatus(ИД) = Ложь  Тогда
			
			Если ТипДокОтчета = "РегламентированныйОтчетЕдиныйСоциальныйВзнос"    
				И (App.GetSendSTTByExDocID(ИД) = 1 
				ИЛИ App.GetSendSTTByExDocID(ИД) = 2 
				ИЛИ App.GetSendSTTByExDocID(ИД) = 3 
				ИЛИ App.GetSendSTTByExDocID(ИД) = 4 
				ИЛИ App.GetSendSTTByExDocID(ИД) = 6 
				ИЛИ App.GetSendSTTByExDocID(ИД) = 7 
				ИЛИ App.GetSendSTTByExDocID(ИД) = 8 
				ИЛИ App.GetSendSTTByExDocID(ИД) = 9 
				//ИЛИ App.GetSendSTTByExDocID(ИД) = 10
				ИЛИ App.GetSendSTTByExDocID(ИД) = 11 
				ИЛИ App.GetSendSTTByExDocID(ИД) = 12 
				ИЛИ App.GetSendSTTByExDocID(ИД) = 13) Тогда 
				
				МассивСообщений.Добавить("Стр. №" + СтрокаОтчет.НомерСтрокиОтч + " " + ДокументОтчет + НСтр("ru = ' передача невозможна';uk = ' передача неможлива'"));
				
				Продолжить;
				
			Иначе
				МассивОтчетовДляПередачи.Добавить(ДокументОтчет);
			КонецЕсли; 
		ИначеЕсли App.GetSendSTTByExDocID(ИД) = -1 Тогда 
			МассивОтчетовДляПередачи.Добавить(ДокументОтчет);
		КонецЕсли;
		
	КонецЦикла;	
	
	Если МассивСообщений.Количество() > 1  Тогда
		Для каждого Сообщение Из МассивСообщений Цикл
			Сообщить(Сообщение);
		КонецЦикла; 	
	КонецЕсли; 
	
	Если МассивОтчетовДляПередачи.Количество() > 0 Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Документы существуют в M.E.Doc:';uk = 'Документи існують в M.E.Doc:'") + Символы.ПС + 
		+ Число(МассивОтчетовДляПередачи.Количество()) +  НСтр("ru = ' из ';uk = ' з '") + 
		ЭлементыФормы.ТаблицаОтчетов.ВыделенныеСтроки.Количество() +  
		НСтр("ru = ' выбранных.';uk = ' обраних.'") + Символы.ПС +		
		НСтр("ru = 'Переместить существующие в Корзину, и передать новые документы?';uk = 'Перемістити існуючі до Корзини, та передати нові документи?'"),  РежимДиалогаВопрос.ДаНетОтмена);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда 
			ПерезаписьОтчетов = "Да";
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда 
			ПерезаписьОтчетов = "Нет";
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли; 
	
	Для каждого ДокументОтчет Из МассивОтчетовДляПередачи Цикл  
		
		МасивДокументов = Новый Массив;
		МасивДокументов.Добавить(ДокументОтчет);
		
		Пакет = Ложь;
		ИДФормПакета = Новый Массив;
		//---------------------------Ф1 Баланс---------------------------------------------------------
		Если ТипДокОтчета = "РегламентированныйОтчетБаланс" Тогда
			Приложения = Новый Массив;
			Приложения.Добавить("РегламентированныйОтчетФинансовыйРезультат");
			Приложения.Добавить("РегламентированныйОтчетДвижениеДенежныхСредств");
			Приложения.Добавить("РегламентированныйОтчетОСобственномКапитале");
			Приложения.Добавить("РегламентированныйОтчетФорма5");
			Результат = СформироватьПакетПоГлавномуОтчету(МасивДокументов, Приложения);
			Пакет = Истина;
			
			Для Каждого СтрокаОтчет из Результат цикл
				Документ  =  СтрокаОтчет.Ссылка;
				ИД = Строка(Строка(СтрокаОтчет.Ссылка.УникальныйИдентификатор()));
				
				Если СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетБаланс" Тогда 
					
					Если НЕ СокрЛП(Документ.ЕдиницаИзмерения) = "1 000" Тогда
						Предупреждение(Нстр("ru = 'Единица измерения доумента должна быть только в тысячах!';uk = 'Одиниця вимірювання документу повининна бути лише в тисячах!'"));
						Возврат;
					КонецЕсли;  
					БланкЕО = "S0100113";
					
					Если ОтчЕО = Истина Тогда
						PDate = Дата(Год(Документ.Дата), Месяц(Документ.Дата), 01);
						ИДГлавнойФормы  =  Строка(Строка(Документ.УникальныйИдентификатор()));  
						Если ПерезаписьОтчетов = "Да" Тогда   
							Если App.GetSendSTTByExDocID(ИДГлавнойФормы) <> -1 Тогда
								App.MoveToTrash(ИДГлавнойФормы);
							КонецЕсли;
							Формирование_БалансЕО(App,  Документ,  БланкЕО,  PDate,  ИДГлавнойФормы); 				
							КолвоБаланс =  КолвоБаланс+1;
							СписокДляОткрытияОтчет.Добавить(ИДГлавнойФормы); 
						ИначеЕсли ПерезаписьОтчетов = "Нет" Тогда 
							Если App.GetSendSTTByExDocID(ИДГлавнойФормы) <> -1 Тогда
								Продолжить;
							Иначе 
								Формирование_БалансЕО(App,  Документ,  БланкЕО,  PDate,  ИДГлавнойФормы); 				
								КолвоБаланс =  КолвоБаланс+1;
								СписокДляОткрытияОтчет.Добавить(ИДГлавнойФормы); 
							КонецЕсли;
						Иначе 
							Формирование_БалансЕО(App,  Документ,  БланкЕО,  PDate,  ИДГлавнойФормы); 			
							КолвоБаланс =  КолвоБаланс+1; 
							СписокДляОткрытияОтчет.Добавить(ИДГлавнойФормы); 
						КонецЕсли; 
					КонецЕсли;
					//-------------------------Вложения-для-Ф1-------------------------------//     			
				ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетФинансовыйРезультат" Тогда		
					БланкФ2 = "S0100213";			
					PDate = Дата(Год(Документ.Дата), Месяц(Документ.Дата), 01);
					ИДФормПакета.Добавить(ИД);
					Если ПерезаписьОтчетов = "Да" Тогда 
						App.MoveToTrash(ИД);
						Формирование_Финрез(App,  Документ,  БланкФ2,  PDate,  ИД);
					КонецЕсли; 				
				ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетДвижениеДенежныхСредств" И СтрокаОтчет.ВыбраннаяФорма = "ФормаОтчета2013ПрямойМетод" Тогда			
					БланкФ3 = "S0100309";			                                                                                  
					PDate = Дата(Год(Документ.Дата), Месяц(Документ.Дата), 01);
					ИДФормПакета.Добавить(ИД);
					Если ПерезаписьОтчетов = "Да" Тогда 
						App.MoveToTrash(ИД);
						Формирование_ПрямойМетод(App,  Документ,  БланкФ3,  PDate,  ИД);
					КонецЕсли;
				ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетДвижениеДенежныхСредств" И СтрокаОтчет.ВыбраннаяФорма = "ФормаОтчета2013НеПрямойМетод" Тогда		
					БланкФ3Н = "S0103353";			
					PDate = Дата(Год(Документ.Дата), Месяц(Документ.Дата), 01);
					ИДФормПакета.Добавить(ИД);
					Если ПерезаписьОтчетов = "Да" Тогда 
						App.MoveToTrash(ИД);
						Формирование_НеПрямойМетод(App,  Документ,  БланкФ3Н,  PDate,  ИД);
					КонецЕсли;	
				ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетОСобственномКапитале" Тогда		
					БланкФ4 = "S0104008";			
					PDate = Дата(Год(Документ.Дата), Месяц(Документ.Дата), 01);
					ИДФормПакета.Добавить(ИД);
					Если ПерезаписьОтчетов = "Да" Тогда 
						App.MoveToTrash(ИД);
						Формирование_Капитал(App,  Документ,  БланкФ4,  PDate,  ИД);
					КонецЕсли;
				ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетФорма5" Тогда		
					БланкФ5 = "S0105007";			
					PDate = Дата(Год(Документ.Дата), Месяц(Документ.Дата), 01);
					ИДФормПакета.Добавить(ИД);
					Если ПерезаписьОтчетов = "Да" Тогда
						App.MoveToTrash(ИД);
						Формирование_Форма5(App,  Документ,  БланкФ5,  PDate,  ИД);
					КонецЕсли;
				КонецЕсли;	
				
			КонецЦикла;
			
			Если Пакет Тогда
				packetDoc = App.GetPacketDoc();
				Для Каждого ЭлементМассива Из ИДФормПакета Цикл	
					КодВозврата = packetDoc.Add(ИДГлавнойФормы, ЭлементМассива);
				КонецЦикла;	
			КонецЕсли;			
			//--------------------------------Отчет-по-труду-------------------------------------------------------			
		ИначеЕсли ТипДокОтчета = "РегламентированныйОтчетПоТруду" Тогда 
			
			Если ДокументОтчет.Дата < Дата(2017, 12, 01) Тогда 
				Предупреждение(НСтр("ru = 'За выбранный период документы не передаются!';uk = 'За обраний період документи не передаютсья!'"));
				Возврат;
			ИначеЕсли
				ДокументОтчет.Дата > Дата(2017, 12, 01) Тогда				
				Если Месяц(ДокументОтчет.ДатаНачала) = Месяц(ДокументОтчет.ДатаОкончания) Тогда
					БланкДСС = "S0301011"; 
					Мес = Истина;
				Иначе
					БланкДСС = "S0301114";
					Мес = Ложь;
				КонецЕсли;   			
			КонецЕсли; 				
			
			PDate = Дата(Год(ДокументОтчет.Дата), Месяц(ДокументОтчет.Дата), 01);
			ИД = Строка(Строка(ДокументОтчет.УникальныйИдентификатор()));   
			Если ПерезаписьОтчетов = "Да" Тогда   
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
					App.MoveToTrash(ИД);
				КонецЕсли;
				Если Мес Тогда
					Формирование_1ПВМес(App,  ДокументОтчет,  БланкДСС,  PDate,  ИД); 				
					Колво1ПВ = Колво1ПВ+1;
					СписокДляОткрытияОтчет.Добавить(ИД); 
				Иначе
					Формирование_1ПВКВ(App,  ДокументОтчет,  БланкДСС,  PDate,  ИД); 				
					Колво1ПВ = Колво1ПВ+1;
					СписокДляОткрытияОтчет.Добавить(ИД); 
				КонецЕсли;
			ИначеЕсли ПерезаписьОтчетов = "Нет" Тогда 
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
					Продолжить;
				Иначе 
					Если Мес Тогда
						Формирование_1ПВМес(App,  ДокументОтчет,  БланкДСС,  PDate,  ИД); 				
						Колво1ПВ = Колво1ПВ+1;
						СписокДляОткрытияОтчет.Добавить(ИД); 
					Иначе 
						Формирование_1ПВКВ(App,  ДокументОтчет,  БланкДСС,  PDate,  ИД); 				
						Колво1ПВ = Колво1ПВ+1;
						СписокДляОткрытияОтчет.Добавить(ИД); 
					КонецЕсли;  					
				КонецЕсли;
			Иначе 
				Если Мес Тогда
					Формирование_1ПВМес(App,  ДокументОтчет,  БланкДСС,  PDate,  ИД); 				
					Колво1ПВ = Колво1ПВ+1;
					СписокДляОткрытияОтчет.Добавить(ИД); 
				Иначе 
					Формирование_1ПВКВ(App,  ДокументОтчет,  БланкДСС,  PDate,  ИД); 				
					Колво1ПВ = Колво1ПВ+1;
					СписокДляОткрытияОтчет.Добавить(ИД); 
				КонецЕсли;       				
			КонецЕсли;  
			Приложения = Неопределено;
			//------------------------Отчет--ФСС--------------------------------			
		ИначеЕсли ТипДокОтчета = "РегламентированныйОтчетФСС" Тогда 			
			БланкФСС = "C0100224";
			ИД = Строка(Строка(ДокументОтчет.УникальныйИдентификатор()));
			Если ОтчФСС Тогда
				PDate = Дата(Год(ДокументОтчет.Дата), Месяц(ДокументОтчет.Дата), 01); 
				Если ПерезаписьОтчетов = "Да" Тогда  
					Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
						App.MoveToTrash(ИД);
					КонецЕсли;  
					Формирование_Ф4ФСС(App, ДокументОтчет, БланкФСС, PDate, ИД);
					КолвоФСС =  КолвоФСС+1; 
					СписокДляОткрытияОтчет.Добавить(ИД); 						 
				ИначеЕсли ПерезаписьОтчетов = "Нет" Тогда 
					Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
						Продолжить;
					Иначе 
						Формирование_Ф4ФСС(App, ДокументОтчет, БланкФСС, PDate, ИД);
						КолвоФСС =  КолвоФСС+1; 
						СписокДляОткрытияОтчет.Добавить(ИД); 						 
					КонецЕсли;
				Иначе
					Формирование_Ф4ФСС(App, ДокументОтчет, БланкФСС, PDate, ИД);
					КолвоФСС =  КолвоФСС+1; 
					СписокДляОткрытияОтчет.Добавить(ИД); 						 
				КонецЕсли;
			КонецЕсли;	
			//------------------------------1ДФ----------------------------  			
		ИначеЕсли ТипДокОтчета = "РегламентированныйОтчетФорма1ДФ" Тогда 
			Если Юрлицо Тогда
				БланкДФС = "J0500105";
			Иначе
				БланкДФС = "F0500105";
			КонецЕсли;
			Если ОтчНал Тогда
				PDate = Дата(Год(ДокументОтчет.Дата), Месяц(ДокументОтчет.Дата), 01); 
				Если ПерезаписьОтчетов = "Да" Тогда  
					Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
						App.MoveToTrash(ИД);
					КонецЕсли;  
					Формирование_1ДФ(App, ДокументОтчет, БланкДФС, PDate, ИД);
					КолвоФСС =  КолвоФСС+1; 
					СписокДляОткрытияОтчет.Добавить(ИД); 						 
				ИначеЕсли ПерезаписьОтчетов = "Нет" Тогда 
					Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
						Продолжить;
					Иначе 
						Формирование_1ДФ(App, ДокументОтчет, БланкДФС, PDate, ИД);
						КолвоФСС =  КолвоФСС+1; 
						СписокДляОткрытияОтчет.Добавить(ИД); 						 
					КонецЕсли;
				Иначе
					Формирование_1ДФ(App, ДокументОтчет, БланкДФС, PDate, ИД);
					КолвоФСС =  КолвоФСС+1; 
					СписокДляОткрытияОтчет.Добавить(ИД); 						 
				КонецЕсли;
			КонецЕсли;
			//------------------------ЕСВ----------------------------------				
		ИначеЕсли ТипДокОтчета = "РегламентированныйОтчетЕдиныйСоциальныйВзнос" Тогда 
			Если Приложения_таб1 = Истина Или Приложения_таб2 = Истина Или Приложения_таб3 = Истина Или Приложения_таб4 = Истина Тогда	
				Если ОтчНал Тогда   		
					Если Юрлицо Тогда
						Бланк = "J3000412";
					Иначе
						Бланк = "F3000412";
					КонецЕсли;
					Если ПерезаписьОтчетов = "Да" Тогда
						PDate = Дата(Год(ДокументОтчет.Дата), Месяц(ДокументОтчет.Дата), 01);
						ИД = Строка(ДокументОтчет.УникальныйИдентификатор());
						Формирование_ЕСВ(App, ДокументОтчет, Бланк, PDate, ИД, 1, App.GetSendSTTByExDocID(ИД));
						КолвоЕСВ = КолвоЕСВ+1
					ИначеЕсли ПерезаписьОтчетов = "Нет" Тогда
						Продолжить;
					Иначе
						PDate = Дата(Год(ДокументОтчет.Дата), Месяц(ДокументОтчет.Дата), 01);
						ИД = Строка(ДокументОтчет.УникальныйИдентификатор());
						Формирование_ЕСВ(App, ДокументОтчет, Бланк, PDate, ИД, 0);
						КолвоЕСВ = КолвоЕСВ+1
					КонецЕсли; 
				КонецЕсли
				
			Иначе
				Предупреждение(НСтр("ru = 'Не выбрано ни одной таблицы'; uk = 'Не вибрано жодної таблиці'"));	
				Возврат;
			КонецЕсли
			//------------------------Налог декларация----------------------------------				
		ИначеЕсли ТипДокОтчета = "РегламентированныйОтчетРасчетЕдиногоНалога" ИЛИ ТипДокОтчета = "РегламентированныйОтчетРасчетЕдиногоНалогаФизЛиц" Тогда 
			Если ОтчНал Тогда
				Если ПерезаписьОтчетов = "Да" Тогда	
					Если Юрлицо Тогда
						Бланк = "J0103507";
						PDate = Дата(Год(ДокументОтчет.Дата), Месяц(ДокументОтчет.Дата), 01);
						ИД  =  Строка(Строка(ДокументОтчет.УникальныйИдентификатор()));
						Формирование_ДекларацияЕН_ЮР(App,  ДокументОтчет,  Бланк,  PDate,  ИД);
						КолвоЕН_ЮР = КолвоЕН_ЮР+1
					Иначе
						Бланк = "F0103306";
						PDate = Дата(Год(ДокументОтчет.Дата), Месяц(ДокументОтчет.Дата), 01);
						ИД  =  Строка(Строка(ДокументОтчет.УникальныйИдентификатор()));
						Формирование_ДекларацияЕН_ФОП(App,  ДокументОтчет,  Бланк,  PDate,  ИД);
						КолвоЕН_ФОП = КолвоЕН_ФОП+1
					КонецЕсли;
				ИначеЕсли ПерезаписьОтчетов = "Нет" Тогда
					Продолжить;
				Иначе
					Если Юрлицо Тогда
						Бланк = "J0103507";
						PDate = Дата(Год(ДокументОтчет.Дата), Месяц(ДокументОтчет.Дата), 01);
						ИД  =  Строка(Строка(ДокументОтчет.УникальныйИдентификатор()));
						Формирование_ДекларацияЕН_ЮР(App,  ДокументОтчет,  Бланк,  PDate,  ИД);
						КолвоЕН_ЮР = КолвоЕН_ЮР+1
					Иначе
						Бланк = "F0103306";
						PDate = Дата(Год(ДокументОтчет.Дата), Месяц(ДокументОтчет.Дата), 01);
						ИД  =  Строка(Строка(ДокументОтчет.УникальныйИдентификатор()));
						Формирование_ДекларацияЕН_ФОП(App,  ДокументОтчет,  Бланк,  PDate,  ИД);
						КолвоЕН_ФОП = КолвоЕН_ФОП+1
					КонецЕсли;				
				КонецЕсли; 
			КонецЕсли
			//------------------------Декларация-о-прибыли-------------------------------- 
		ИначеЕсли ТипДокОтчета = "РегламентированныйОтчетДекларацияОПрибыли" Тогда 
			Если ОтчЕО Тогда
				Если ПерезаписьОтчетов = "Да" Тогда
					Бланк = "J0100116";
					PDate = Дата(Год(ДокументОтчет.Дата), Месяц(ДокументОтчет.Дата), 01);
					ИД  =  Строка(Строка(ДокументОтчет.УникальныйИдентификатор()));
					Формирование_Декларация_Прибыль(App,  ДокументОтчет,  Бланк,  PDate,  ИД);
					КолвоДПР = КолвоДПР+1
				ИначеЕсли ПерезаписьОтчетов = "Нет" Тогда
					Продолжить;
				Иначе
					Бланк = "J0100116";
					PDate = Дата(Год(ДокументОтчет.Дата), Месяц(ДокументОтчет.Дата), 01);
					ИД  =  Строка(Строка(ДокументОтчет.УникальныйИдентификатор()));
					Формирование_Декларация_Прибыль(App,  ДокументОтчет,  Бланк,  PDate,  ИД);
					КолвоДПР = КолвоДПР+1	
				КонецЕсли; 
			КонецЕсли;
			//-----------------------Налоговая-Декларация-по-НДС------------------------------- 
		ИначеЕсли ТипДокОтчета = "РегламентированныйОтчетДекларацияНДС" Тогда
			Если Приложения_таб1 = Истина Или Приложения_таб2 = Истина Или Приложения_таб3 = Истина Или Приложения_таб4 = Истина Или Приложения_таб5 = Истина 
				Или Приложения_таб6 = Истина Или Приложения_таб7 = Истина Или Приложения_таб8 = Истина Или Приложения_таб9 = Истина Тогда
				Если ОтчНал Тогда
					Если ПерезаписьОтчетов = "Да" Тогда
						Бланк = "J0200120";
						PDate = Дата(Год(ДокументОтчет.Дата), Месяц(ДокументОтчет.Дата), 01);
						ИД  =  Строка(Строка(ДокументОтчет.УникальныйИдентификатор()));
						Формирование_Декларация_НДС(App,  ДокументОтчет,  Бланк,  PDate,  ИД);
						КолвоДНДС = КолвоДНДС+1
					ИначеЕсли ПерезаписьОтчетов = "Нет" Тогда
						Продолжить;
					Иначе
						Бланк = "J0200120";
						PDate = Дата(Год(ДокументОтчет.Дата), Месяц(ДокументОтчет.Дата), 01);
						ИД  =  Строка(Строка(ДокументОтчет.УникальныйИдентификатор()));
						Формирование_Декларация_НДС(App,  ДокументОтчет,  Бланк,  PDate,  ИД);
						КолвоДНДС = КолвоДНДС+1	
					КонецЕсли; 
				КонецЕсли;
			Иначе
				Предупреждение(НСтр("ru = 'Не выбрано ни одной таблицы'; uk = 'Не вибрано жодної таблиці'"));	
				Возврат;
			КонецЕсли
			
			//--------------------------------Баланс-МП----------------------------------					
		ИначеЕсли ТипДокОтчета = "РегламентированныйОтчетБалансМП" Тогда
			Если НЕ СокрЛП(ДокументОтчет.ЕдиницаИзмерения) = "1 000" Тогда
				Предупреждение(Нстр("ru = 'Единица измерения документа должна быть только в тысячах!';uk = 'Одиниця вимірювання документу повининна бути лише в тисячах!'"));
				Возврат;
			КонецЕсли; 
			БланкЕО = "S0110011";				
			Если ОтчЕО = Истина Тогда   
				PDate = Дата(Год(ДокументОтчет.Дата), Месяц(ДокументОтчет.Дата), 01);
				ИД  =  Строка(Строка(ДокументОтчет.УникальныйИдентификатор()));  
				Если ПерезаписьОтчетов = "Да" Тогда   
					Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
						App.MoveToTrash(ИД);
					КонецЕсли;
					Формирование_БалансМПЕО(App,  ДокументОтчет,  БланкЕО,  PDate,  ИД); 				
					КолвоФинрез = КолвоФинрез + 1;
					СписокДляОткрытияОтчет.Добавить(ИД); 
				ИначеЕсли ПерезаписьОтчетов = "Нет" Тогда 
					Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
						Продолжить;
					Иначе 
						Формирование_БалансМПЕО(App, ДокументОтчет, БланкЕО, PDate, ИД); 				
						КолвоФинрез = КолвоФинрез+1;
						СписокДляОткрытияОтчет.Добавить(ИД); 
					КонецЕсли;
				Иначе 
					Формирование_БалансМПЕО(App,  ДокументОтчет, БланкЕО, PDate, ИД); 			
					КолвоФинрез = КолвоФинрез+1;
					СписокДляОткрытияОтчет.Добавить(ИД); 
				КонецЕсли; 
			КонецЕсли;

		ИначеЕсли ТипДокОтчета = "РегламентированныйОтчетБалансМПС" Тогда
			Если НЕ СокрЛП(ДокументОтчет.ЕдиницаИзмерения) = "1 000" Тогда
				Предупреждение(Нстр("ru = 'Единица измерения документа должна быть только в тысячах!';uk = 'Одиниця вимірювання документу повининна бути лише в тисячах!'"));
				Возврат;
			КонецЕсли; 
			БланкМПС = "S0111003";				
			Если ОтчЕО = Истина Тогда   
				PDate = Дата(Год(ДокументОтчет.Дата), Месяц(ДокументОтчет.Дата), 01);
				ИД = Строка(Строка(ДокументОтчет.УникальныйИдентификатор()));  
				Если ПерезаписьОтчетов = "Да" Тогда   
					Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
						App.MoveToTrash(ИД);
					КонецЕсли;
					Формирование_БалансМПС(App, ДокументОтчет, БланкМПС, PDate, ИД); 				
					КолвоМПС = КолвоМПС + 1;
					СписокДляОткрытияОтчет.Добавить(ИД); 
				ИначеЕсли ПерезаписьОтчетов = "Нет" Тогда 
					Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
						Продолжить;
					Иначе 
						Формирование_БалансМПС(App, ДокументОтчет, БланкМПС, PDate, ИД); 				
						КолвоМПС = КолвоМПС + 1;
						СписокДляОткрытияОтчет.Добавить(ИД); 
					КонецЕсли;
				Иначе 
					Формирование_БалансМПС(App, ДокументОтчет, БланкМПС, PDate, ИД); 			
					КолвоМПС = КолвоМПС + 1;
					СписокДляОткрытияОтчет.Добавить(ИД); 
				КонецЕсли; 
			КонецЕсли;
			
		Иначе 
			ВРазработке();
		КонецЕсли; 
	КонецЦикла;

	
	КолвоОтчетов = Колво1ПВ + КолвоРНН + КолвоБаланс + КолвоФинрез + КолвоБалансМП + КолвоФСС + КолвоЕСВ + КолвоЕН_ЮР + КолвоЕН_ФОП + КолвоДПР + КолвоДНДС + КолвоМПС;
	
	Если КолвоОтчетов >0 Тогда
		
		Предупреждение(НСтр("ru = 'Переданы в M.E.Doc:';uk = 'Передано в M.E.Doc:'") + Символы.ПС + "   - " + КолвоОтчетов + " шт.");
		ОтправленоЧислоОтч = КолвоОтчетов;
		App.RefreshRstDoc(); 
		
		Если ФР1= Истина Тогда
			App.RunModule("DocRst");			
		КонецЕсли;
		
		Если ОД1 = Истина Тогда
			Для Каждого ИД Из СписокДляОткрытияОтчет Цикл
				App.ShowDocument(ИД);
			КонецЦикла;        		
		КонецЕсли;    
		
		ПроверитьНаличиеОтчетов(СуффиксДСС,  СуффиксДФС,  СуффиксЕО,  СуффиксФСС);
		
	Иначе 
		Предупреждение(НСтр("ru = 'Не передано ни одного документа.';uk = 'Не передано жодного документа.'"));
	КонецЕсли; 
	
КонецПроцедуры

Функция СформироватьПакетПоГлавномуОтчету(ТаблицаОтчетов, Приложения)

	Для каждого СтрокаОтчет из ТаблицаОтчетов цикл
		Запрос = Новый Запрос(); 		
		Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| *
		|ИЗ
		|	Документ.РегламентированныйОтчет как РегламентированныйОтчет
		|Где 
		|	Год(РегламентированныйОтчет.Дата) = &Год 
		|	И Месяц(РегламентированныйОтчет.Дата) = &Месяц
		|	И День(РегламентированныйОтчет.Дата)= &День
		|   И РегламентированныйОтчет.Организация = &ОрганизацияОтчета
		|   И (РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета";
		
		Для Каждого ЭлементМассива Из Приложения Цикл
        	Текст = Текст + "
			|	ИЛИ РегламентированныйОтчет.ИсточникОтчета = &" + ЭлементМассива;   
		КонецЦикла;
		
		Текст = Текст + " )
		|  УПОРЯДОЧИТЬ ПО
		|  РегламентированныйОтчет.ИсточникОтчета ВОЗР";
	
		Запрос.Текст = Текст;
		Запрос.УстановитьПараметр("Год",Год(СтрокаОтчет.Дата));
		Запрос.УстановитьПараметр("Месяц",Месяц(СтрокаОтчет.Дата));
		Запрос.УстановитьПараметр("День",День(СтрокаОтчет.Дата));
		Запрос.УстановитьПараметр("ОрганизацияОтчета", СтрокаОтчет.Организация);
		Запрос.УстановитьПараметр("ИсточникОтчета", СтрокаОтчет.ИсточникОтчета);
		
		Для Каждого ЭлементМассива Из Приложения Цикл
			Запрос.УстановитьПараметр(ЭлементМассива, ЭлементМассива);
		КонецЦикла;
			
		Результат  =  Запрос.Выполнить().Выгрузить();	

		Кол =  Результат.Количество();
	
	    Возврат Результат;	
	КонецЦикла;	
КонецФункции

Процедура ИзМв1СНажатие(Элемент)
	
	ВРазработке();
	
КонецПроцедуры

Процедура ТипДокОтчетаПриИзменении(Элемент)
	
	СепараторВОтчетах();
	ИзменениеОсновныхПараметровОтчетов();
	СбросНастроекТабПриложений();
	ДоступносьПриложений();	
	
КонецПроцедуры

Процедура СепараторВОтчетах()
	
	Если ТипДокОтчета  =  "сепаратор" Тогда                 
		ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ЗаполнитьДокументами.Доступность  =  Ложь; 
		ЭлементыФормы.ОтчНал.Значение = Ложь;
		ЭлементыФормы.ОтчСтат.Значение = Ложь;
		ЭлементыФормы.ОтчНал.Доступность = Ложь;
		ЭлементыФормы.ОтчСтат.Доступность = Ложь;      
	Иначе 
		ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ЗаполнитьДокументами.Доступность  =  Истина; 
	КонецЕсли;
	
КонецПроцедуры

Процедура СепараторВПервичке()
	
	Если 
		ТипДок  =  "сепаратор" Тогда
		КодДок = ""; 
		ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Заполнить.Доступность  =  Ложь; 
		ЭлементыФормы.ФР.Доступность=Ложь;
		ЭлементыФормы.од.Доступность=Ложь;
	Иначе 
		ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Заполнить.Доступность  =  Истина;
		ЭлементыФормы.ФР.Доступность=Истина;
		ЭлементыФормы.од.Доступность=Истина; 
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаВнешнегоСобытияМедка(Источник,  Событие,  Данные)
	
	//не понятно нужна ли она вообще
	//Попытка
	//	Если ИмяБазы = "БУ" или ИмяБазы  = "ТЕХТРЕЙД"  или ИмяБазы  = "кпЖРЕУ" Тогда
	//		Актуальная = "1.2.48.1";
	//		НашаВерсия = Метаданные.Версия;
	//		ВерсияПрограммыАктуальная = Число(СтрЗаменить(Актуальная,  ".",  ""));
	//		ВерсияПрограммыНаша  =  Число(СтрЗаменить(НашаВерсия,  ".",  "")); 
	//	ИначеЕсли ИмяБазы = "УТ" Тогда
	//		Актуальная = "2.3.26";
	//		НашаВерсия = Метаданные.Версия;
	//		ВерсияПрограммыАктуальная = Число(СтрЗаменить(Актуальная,  ".",  ""));
	//		ВерсияПрограммыНаша  =  Число(СтрЗаменить(НашаВерсия,  ".",  "")); 
	//		Если 
	//			ВерсияПрограммыНаша < ВерсияПрограммыАктуальная
	//			Тогда
	//			x =  1/0;
	//		КонецЕсли;    			
	//	ИначеЕсли ИмяБазы = "УТП" Тогда
	//		Актуальная = "1.2.41";
	//		НашаВерсия = Метаданные.Версия;
	//		ВерсияПрограммыАктуальная = Число(СтрЗаменить(Актуальная,  ".",  ""));
	//		ВерсияПрограммыНаша  =  Число(СтрЗаменить(НашаВерсия,  ".",  "")); 
	//		Если 
	//			ВерсияПрограммыНаша < ВерсияПрограммыАктуальная
	//			Тогда
	//			x =  1/0;  
	//		КонецЕсли; 
	//	ИначеЕсли ИмяБазы = "УПП" Тогда
	//		Актуальная = "1.3.50";
	//		НашаВерсия = Метаданные.Версия;
	//		ВерсияПрограммыАктуальная = Число(СтрЗаменить(Актуальная,  ".",  ""));
	//		ВерсияПрограммыНаша  =  Число(СтрЗаменить(НашаВерсия,  ".",  "")); 
	//		Если ВерсияПрограммыНаша < ВерсияПрограммыАктуальная Тогда
	//			x =  1/0;
	//		КонецЕсли;
	//	ИначеЕсли ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
	//		Актуальная = "1.2.40.2";
	//		НашаВерсия = Метаданные.Версия;
	//		ВерсияПрограммыАктуальная = Число(СтрЗаменить(Актуальная,  ".",  ""));
	//		ВерсияПрограммыНаша = Число(СтрЗаменить(НашаВерсия,  ".",  "")); 
	//		Если ВерсияПрограммыНаша < ВерсияПрограммыАктуальная Тогда
	//			x = 1/0;
	//		КонецЕсли;
	//	Иначе
	//		МедКомпонент.CancelDoc(НСтр("ru = 'Передача данных в Вашу конфигурацию не реализована!';uk = 'Передача документу не реалізовано для Вашої конфгурації!'"));
	//		Возврат;	
	//	КонецЕсли;
	//Исключение
	//	МедКомпонент.CancelDoc(НСтр("ru = 'Ваша конфигурация устарела (';uk = 'Ваша конфігурація застаріла ('") + НашаВерсия + ")" + Символы.ПС + 
	//	НСтр("ru = 'Используйте не менее версии ';uk = 'Використовуйте не менше версії '") + Актуальная);
	//	Возврат;
	//КонецПопытки; 

	Попытка
		Если (Источник = "Medoc") 
			И (Событие = "PRIMARYDOC") Тогда
			Отчет = МедКомпонент.GetPrimaryDoc(Данные); 			
			ИмяСхемы = Отчет.CharCode; 
			ИмяДокумента = Отчет.DocName; 
			ТипПериода = Отчет.PeriodType; 
			ДатаПериода = Отчет.PeriodDate; 
			пGUID = Отчет.DOCGUID; 
			
			//Если Сред(ИмяСхемы,2,6) = "120101" Тогда
			Если Найти(ИмяСхемы,"12010") <> 0 И Найти(ИмяДокумента,"Податкова накладна") <> 0 Тогда
				Попытка
					НазваниеДока = Нстр("ru = 'Налоговая накладная ';uk = 'Податкова накладна '");
					ДатаДокаВх = Дата(Отчет.GetValue("MAIN",  "N11"));  
					
					ФилиалВхДок = Строка(Отчет.GetValue("MAIN",  "N2_13"));
					Если ФилиалВхДок = "" Тогда
						НомерДокаВх = Строка(Отчет.GetValue("MAIN",  "N2_11"));
					Иначе
						НомерДокаВх = Строка(Отчет.GetValue("MAIN",  "N2_11") + "/" + ФилиалВхДок);	
					КонецЕсли;
					
					Если ИмяБазы = "БУ" 
						ИЛИ ИмяБазы = "УТП" 
						ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
						ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
						
						ННВх = Документы.РегистрацияВходящегоНалоговогоДокумента.СоздатьДокумент();
						ННВх.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная;
					ИначеЕсли ИмяБазы = "УПП" 
						ИЛИ ИмяБазы = "УТ" Тогда
						
						ННВх = Документы.ЗаписьКнигиПриобретения.СоздатьДокумент();
						ННВх.ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.НалоговаяНакладная;
                    КонецЕсли;

					NNTable = МедКомпонент.CreateNNStatusQuery(); 
					NNTable.NewRow("TAB1"); 
					NNTable.SetValue("TAB1",  "DOC_TYPE",  1); 
					NNTable.SetValue("TAB1",  "DOC_MOVE",  2);  
					NNTable.SetValue("TAB1",  "DOC_ID",  пGUID); 
					
					NNStatusResult  =  МедКомпонент.ExecNNStatusQuery(NNTable); 
					Если (Отчет.GetValue("MAIN",  "SEND_DPA")) = 12 Тогда 
						ННВх.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных  =  Отчет.GetValue("MAIN",  "SEND_DPA_DATE");    				
					КонецЕсли;

					ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ННВх,  ПараметрыСеанса.ТекущийПользователь);
					ННВх.Дата  =  Дата(Отчет.GetValue("MAIN",  "N11"));
					ННВх.ДатаВходящегоДокумента  =  Дата(Отчет.GetValue("MAIN",  "N11"));
					Филиал =  Строка(Отчет.GetValue("MAIN",  "N2_13"));
					Если Филиал = "" Тогда
						ННВх.НомерВходящегоДокумента  =  Строка(Отчет.GetValue("MAIN",  "N2_11"));
					Иначе
						ННВх.НомерВходящегоДокумента  =  Строка(Отчет.GetValue("MAIN",  "N2_11") + "/" + Филиал);	
					КонецЕсли;
					
					ИННОрганизации = Строка(СокрЛП(Отчет.GetValue("MAIN",  "N4")));
					Если ИННОрганизации = "" Тогда
						МедКомпонент.CancelDoc("В накладній не вказаний ІПН!");
						Возврат;
					КонецЕсли;
					//ЕДРПОУОрганизации = Строка(СокрЛП(Отчет.GetValue("MAIN",  "EDR_POK")));
					ЕДРПОУОрганизации = ДатьОргМЕДок();
					
					Организация = НайтиОрганизациюПоИНН(СокрЛП(ИННОрганизации),ЕДРПОУОрганизации);

					Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
						МедКомпонент.CancelDoc("Організації з ІПН = " + ИННОрганизации + " не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!");
						Возврат;
					КонецЕсли;     
					ННВх.Организация = Организация; 
					
					КонтрНаименование = СокрЛП(Отчет.GetValue("MAIN", "FIRM_NAME"));
					КонтрЕДРПОУ = СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU"));
					КонтрИНН =  СокрЛП(Отчет.GetValue("MAIN", "FIRM_INN"));
					КонтрАдр = СокрЛП(Отчет.GetValue("MAIN", "FIRM_ADR"));
					КонтрТлф = СокрЛП(Отчет.GetValue("MAIN", "FIRM_PHON"));
					
					Продавец = ПолучитьКонтрагента(КонтрИНН,ФилиалВхДок);
				
					Если НЕ ЗначениеЗаполнено(Продавец) Тогда 
						
						Если СозданиеКонтрагентов Тогда
							Продавец = СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх, ФилиалВхДок);	
						Иначе
							МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") 
													+ Символы.ПС + "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+" не існує в 1С!" + Символы.ПС 
													+ "Створення накладної неможливо!"  + Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							
							Сообщение = Новый СообщениеПользователю();
							Сообщение.Текст = ("Податкова накладна " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") 
													+ Символы.ПС + "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+" не існує в 1С!" + Символы.ПС 
													+ "Створення накладної неможливо!"  + Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							Сообщение.Сообщить();
						КонецЕсли;
						
					КонецЕсли;

					ННВх.Контрагент = Продавец;
					
					//-------------------------------------------------------------- 
					Если ИмяБазы = "БУ" 
						ИЛИ ИмяБазы = "УТП" 
						ИЛИ ИмяБазы = "кпЖРЕУ" 
						ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
						ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
						
						СуществованиеДокаНазвание = "РегистрацияВходящегоНалоговогоДокумента";
					ИначеЕсли ИмяБазы = "УПП" ИЛИ ИмяБазы = "УТ" Тогда
                    	СуществованиеДокаНазвание= "ЗаписьКнигиПриобретения";
					КонецЕсли;
					Если ПроверитьСуществованиеДокумента(СуществованиеДокаНазвание,  Организация,  Продавец,  ДатаДокаВх,  НомерДокаВх) Тогда
						ДокументСуществует(НазваниеДока,  ДатаДокаВх,  НомерДокаВх);
						Возврат;
					КонецЕсли;      					
					//--------------------------------------------------------------
					
					Попытка
						Если ЗначениеЗаполнено(Отчет.GetValue("MAIN", "N82")) и ЗначениеЗаполнено(Отчет.GetValue("MAIN",  "N81")) Тогда
							ДатаДог = Дата(Отчет.GetValue("MAIN", "N82"));
							НомерДог = СокрЛП(Отчет.GetValue("MAIN", "N81"));
							ННВх.ДоговорКонтрагента = СоздатьНовыйДоговор(Продавец, Организация, ДатаДог, НомерДог);
						Иначе 
							//Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", КонтрИНН); 
							ННВх.ДоговорКонтрагента = ННВх.Контрагент.ОсновнойДоговорКонтрагента;
						КонецЕсли	
					Исключение
						 	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ННВх.ДоговорКонтрагента,
														ННВх.Контрагент,
														ННВх.Организация, 
														,
														);
					КонецПопытки;
					//--------------------------------------------------------------
					Попытка
						СчетУчета = ПолучитьСчетаРасчетовСКонтрагентом(Организация, Покупатель, ДоговорКонтрагента);
						Если ЗначениеЗаполнено(СчетУчета.СчетУчетаНДСПриобретений) Тогда
							СчетУчетаНДС = СчетУчета.СчетУчетаНДСПриобретений;
						Иначе
							СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НайтиПоКоду("6442");
						КонецЕсли;
						ННВх.СчетУчетаНДС = СчетУчетаНДС;
					Исключение
					КонецПопытки;  					
					//------------------------------------------------------------------------------ 
					Если не ИмяБазы = "УТ" Тогда
						ННВх.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;
						Если ЕстьРеквизитДокумента("ЭлектронныйДокумент", ННВх.Метаданные()) Тогда
							ННВх.ЭлектронныйДокумент =  Истина; 
						КонецЕсли;
					КонецЕсли;
					
					Если ИмяБазы = "БУ" 
						ИЛИ ИмяБазы = "УТП" 
						ИЛИ ИмяБазы = "кпЖРЕУ" 
						ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
						ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
						
						ННВх.СуммаВозвратнойТары = Отчет.GetValue("MAIN",  "A3_11"); 
					ИначеЕсли ИмяБазы = "УПП" 
						ИЛИ ИмяБазы = "УТ" Тогда
						
						Если ЗначениеЗаполнено(Отчет.GetValue("MAIN",  "A3_11")) тогда
							ВозвратнаяТара = ННВх.ВозвратнаяТара.Добавить();
							ВозвратнаяТара.НомерСтроки = 1;
							ВозвратнаяТара.Сумма = Отчет.GetValue("MAIN",  "A3_11"); 
							ВозвратнаяТара.НалоговоеНазначение= Справочники.НалоговыеНазначенияАктивовИЗатрат.ХозДеятельность;
						КонецЕсли;
					КонецЕсли; 
					ННВх.СпецРежимНалогообложения = СокрЛП(Отчет.GetValue("MAIN",  "N2_12")); 
					ННвх.Комментарий = "Переданий з M.E.Doc";
 
					ННВх.Товары.Очистить();					
					table = Отчет.First("TAB1");
					спецрежим = ?(ЗначениеЗаполнено(Отчет.GetValue("MAIN",  "N2_12")),Число(Отчет.GetValue("MAIN",  "N2_12")),0); 
					Пока table Цикл
						НоваяСтрока = ННвх.Товары.Добавить();
						
					//ставка 20%
					Если Отчет.GetValue("TAB1", "TAB1_A8")=20 Тогда
							НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.НДС20;
							Новаястрока.Сумма  = Отчет.GetValue("TAB1",  "TAB1_A10");
							Новаястрока.СуммаНДС = Новаястрока.Сумма * 0.2;
							НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
							//НоваяСтрока.СуммаВзаиморасчетов =  Отчет.GetValue("MAIN",  "A7_7");
							Если ИмяБазы = "БУ" 
								ИЛИ ИмяБазы = "УТП" 
								ИЛИ ИмяБазы = "кпЖРЕУ" 
								ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
								ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
								
								НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
								НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
								НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;
							ИначеЕсли ИмяБазы = "УПП" ИЛИ ИмяБазы = "УТ" Тогда          						
								Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;
								НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НайтиПоНаименованию("Обл. НДС");
							КонецЕсли;
						//ставка 7%
						ИначеЕсли  Отчет.GetValue("TAB1", "TAB1_A8")=7 Тогда
							НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.НДС7;						
							Новаястрока.Сумма  = Отчет.GetValue("TAB1",  "TAB1_A10");
							Новаястрока.СуммаНДС = Новаястрока.Сумма * 0.07;
							НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
							//НоваяСтрока.СуммаВзаиморасчетов =  Отчет.GetValue("MAIN",  "A7_71");
							Если ИмяБазы = "БУ" 
								ИЛИ ИмяБазы = "УТП" 
								ИЛИ ИмяБазы = "кпЖРЕУ" 
								ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
								ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
								
								НоваяСтрока.ДляХозяйственнойДеятельности = Истина;
								НоваяСтрока.ДляОперацийОблагаемыхНДС = Истина; 
								НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;
							ИначеЕсли ИмяБазы = "УПП" 
								ИЛИ ИмяБазы = "УТ" Тогда          						
								
								Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
								НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НайтиПоНаименованию("Обл. НДС");
							КонецЕсли;
						//0% или 7%для старых
						ИначеЕсли Отчет.GetValue("TAB1", "TAB1_A8")=902 Тогда							
							НоваяСтрока.СтавкаНДС  = ?( спецрежим = 7, Перечисления.СтавкиНДС.НДС7, Перечисления.СтавкиНДС.НДС0);
							Новаястрока.Сумма  = Отчет.GetValue("TAB1",  "TAB1_A10");
							Новаястрока.СуммаНДС = Новаястрока.Сумма * ?(спецрежим = 7, 0.07, 0);
							НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
							//НоваяСтрока.СуммаВзаиморасчетов =  Отчет.GetValue("MAIN",  "A7_8");
							Если ИмяБазы = "БУ" 
								ИЛИ ИмяБазы = "УТП" 
								ИЛИ ИмяБазы = "кпЖРЕУ" 
								ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
								ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
								
								НоваяСтрока.ДляХозяйственнойДеятельности = Истина;
								НоваяСтрока.ДляОперацийОблагаемыхНДС = Истина; 
								НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;
							ИначеЕсли ИмяБазы = "УПП" ИЛИ ИмяБазы = "УТ" Тогда          						
								Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
							КонецЕсли;
						//0%
						ИначеЕсли Отчет.GetValue("TAB1", "TAB1_A8")=901 Тогда
							НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
							Новаястрока.Сумма = Отчет.GetValue("TAB1",  "TAB1_A10");
							Новаястрока.СуммаНДС = 0;
							НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
							//НоваяСтрока.СуммаВзаиморасчетов =  Отчет.GetValue("MAIN",  "A7_9");
							Если ИмяБазы = "БУ" 
								ИЛИ ИмяБазы = "УТП" 
								ИЛИ ИмяБазы = "кпЖРЕУ" 
								ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
								ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
								
						        НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
								НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
								НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРОблаг;
							ИначеЕсли ИмяБазы = "УПП" 
								ИЛИ ИмяБазы = "УТ" Тогда
								
								Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРОблаг;
								НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НайтиПоНаименованию("Обл. НДС");
							КонецЕсли;
						//Без НДС
						ИначеЕсли Отчет.GetValue("TAB1", "TAB1_A8")  = 903 Тогда  
							НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.БезНДС;
							Новаястрока.Сумма  = Отчет.GetValue("TAB1",  "TAB1_A10");
							Новаястрока.СуммаНДС = 0;
							НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма;
							//НоваяСтрока.СуммаВзаиморасчетов =  Отчет.GetValue("MAIN",  "A7_10");
							Если ИмяБазы = "БУ" 
								ИЛИ ИмяБазы = "УТП" 
								ИЛИ ИмяБазы = "кпЖРЕУ" 
								ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
								ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
								
								НоваяСтрока.ДляХозяйственнойДеятельности = Истина;
								НоваяСтрока.ДляОперацийОблагаемыхНДС = Истина; 
								НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРОблаг;
							ИначеЕсли ИмяБазы = "УПП" 
								ИЛИ ИмяБазы = "УТ" Тогда          						
								
								Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
							КонецЕсли;          
						КонецЕсли;
						НоваяСтрока.НаименованиеТовара = Отчет.GetValue("TAB1",  "TAB1_A13");
						НоваяСтрока.Количество =  Отчет.GetValue("TAB1",  "TAB1_A15");
						НоваяСтрока.Цена = Отчет.GetValue("TAB1",  "TAB1_A16");
									
						table = Отчет.Next("TAB1");
					КонецЦикла;
					//ННВх.Записать(РежимЗаписиДокумента.Проведение);
					ННВх.Записать(); 
					//---------------------------------------------------------------------------
					МедКомпонент.AcceptDoc(пGUID);   	
					
					Форма = ННВх.ПолучитьФорму("ФормаДокумента");
					Если ЭтаФорма.НЕоткрыватьВхДок = Ложь Тогда 
						Форма.Открыть();
					КонецЕсли;
					
			   	Исключение
					МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				//----------------------------------------------------------------------------------------------------------    
			//ИначеЕсли Сред(ИмяСхемы, 2, 6) = "120121" Тогда
			ИначеЕсли Найти(ИмяСхемы,"12012") <> 0 И Найти(ИмяДокумента,"Додаток №2") <> 0 Тогда
				Попытка
					НазваниеДока = Нстр("ru = 'Приложение 2 ';uk = 'Додаток 2 '"); 
					ДатаДокаВх =  Дата(Отчет.GetValue("MAIN",  "N15"));
					ФилиалВхДок =  Строка(Отчет.GetValue("MAIN",  "N1_13"));
					Если ФилиалВхДок = "" Тогда
						НомерДокаВх  =  Строка(Отчет.GetValue("MAIN",  "N1_11"));
					Иначе
						НомерДокаВх  =  Строка(Отчет.GetValue("MAIN",  "N1_11") + "/" + ФилиалВхДок);	
					КонецЕсли;  					
					
					Если ИмяБазы = "БУ" 
						ИЛИ ИмяБазы = "УТП" 
						ИЛИ ИмяБазы = "кпЖРЕУ" 
						ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
						ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
						
						Дод2  =  Документы.РегистрацияВходящегоНалоговогоДокумента.СоздатьДокумент();
						Дод2.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат;
					ИначеЕсли ИмяБазы = "УПП" 
						ИЛИ ИмяБазы = "УТ" Тогда
						
						Дод2 = Документы.ЗаписьКнигиПриобретения.СоздатьДокумент();
						Дод2.ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат;    
					КонецЕсли;  					
					//---------------------------------------------------------------------------
					NNTable = МедКомпонент.CreateNNStatusQuery(); 
					NNTable.NewRow("TAB1"); 
					NNTable.SetValue("TAB1",  "DOC_TYPE",  2); 
					NNTable.SetValue("TAB1",  "DOC_MOVE",  2);  
					NNTable.SetValue("TAB1",  "DOC_ID",  пGUID); 
					
					NNStatusResult  =  МедКомпонент.ExecNNStatusQuery(NNTable);
					Если (Отчет.GetValue("MAIN",  "SEND_DPA")) = 12 Тогда 
						Дод2.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных  =  Отчет.GetValue("MAIN",  "SEND_DPA_DATE");    				
					КонецЕсли;
					//--------------------------------------------------------------------------- 
					ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Дод2,  ПараметрыСеанса.ТекущийПользователь);
					Дод2.Дата  =  Дата(Отчет.GetValue("MAIN",  "N15"));
					Дод2.ДатаВходящегоДокумента  =  Дата(Отчет.GetValue("MAIN",  "N15"));
					
					ФилиалПродавца =  Строка(Отчет.GetValue("MAIN",  "N1_13"));
					Если НЕ ЗначениеЗаполнено(ФилиалПродавца) Тогда
						Дод2.НомерВходящегоДокумента  =  Строка(Отчет.GetValue("MAIN",  "N1_11"));
					Иначе
						Дод2.НомерВходящегоДокумента  =  Строка(Отчет.GetValue("MAIN",  "N1_11") + "/" + ФилиалПродавца);	
					КонецЕсли;
					//---------------------------------------------------------------------------
					Дод2.ДатаКорректируемогоВходящегоДокумента  =  Дата(Отчет.GetValue("MAIN",  "N2"));
					
					Филиал2 =  Строка(Отчет.GetValue("MAIN",  "N2_13"));
					Если НЕ ЗначениеЗаполнено(Филиал2) Тогда
						Дод2.НомерКорректируемогоВходящегоДокумента  =  Строка(Отчет.GetValue("MAIN",  "N2_11"));
					Иначе
						Дод2.НомерКорректируемогоВходящегоДокумента  =  Строка(Отчет.GetValue("MAIN",  "N2_11") + "/" + Филиал2);	
					КонецЕсли;  
					//---------------------------------------------------------------------------
					ИННОрганизации  =  Строка(СокрЛП(Отчет.GetValue("MAIN",  "N4")));
					Если НЕ ЗначениеЗаполнено(ИННОрганизации) Тогда
						МедКомпонент.CancelDoc("В накладній не вказаний ІПН!");
						Возврат;
					КонецЕсли;
					//ЕДРПОУОрганизации = Строка(СокрЛП(Отчет.GetValue("MAIN",  "EDR_POK")));
					ЕДРПОУОрганизации = ДатьОргМЕДок();
					
					Организация = НайтиОрганизациюПоИНН(СокрЛП(ИННОрганизации),ЕДРПОУОрганизации);
					Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
						МедКомпонент.CancelDoc("Організації з ІПН = " + ИННОрганизации + " не існує в 1С!" + Символы.ПС + "Створення Додатку_2 неможливо!");
						Возврат;
					КонецЕсли;     
					Дод2.Организация = Организация; 
					
					ИННПродавца = СокрЛП(Отчет.GetValue("MAIN",  "FIRM_INN"));
										
					КонтрНаименование = СокрЛП(Отчет.GetValue("MAIN", "FIRM_NAME"));
					КонтрЕДРПОУ = СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU"));
					КонтрИНН =  СокрЛП(Отчет.GetValue("MAIN", "FIRM_INN"));
					КонтрАдр = СокрЛП(Отчет.GetValue("MAIN", "FIRM_ADR"));
					КонтрТлф = СокрЛП(Отчет.GetValue("MAIN", "FIRM_PHON"));
					
					Продавец = ПолучитьКонтрагента(ИННПродавца,ФилиалВхДок);

					Если НЕ ЗначениеЗаполнено(Продавец) Тогда 
						
						Если СозданиеКонтрагентов Тогда
							Продавец = СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх, ФилиалВхДок);	
						Иначе
							МедКомпонент.CancelDoc("Дододаток 2 " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") 
													+ Символы.ПС + "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+" не існує в 1С!" + Символы.ПС 
													+ "Створення документу неможливо!"  + Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							
							Сообщение = Новый СообщениеПользователю();
							Сообщение.Текст = ("Дододаток 2 " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") 
													+ Символы.ПС + "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+" не існує в 1С!" + Символы.ПС 
													+ "Створення документу неможливо!"  + Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							Сообщение.Сообщить();
						КонецЕсли;
						
					КонецЕсли;

					Дод2.Контрагент = Продавец;

					Если ИмяБазы = "БУ" 
						ИЛИ ИмяБазы = "УТП" 
						ИЛИ ИмяБазы = "кпЖРЕУ" 
						ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
						ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
						
						СуществованиеДокаНазвание = "РегистрацияВходящегоНалоговогоДокумента";
					ИначеЕсли ИмяБазы = "УПП" 
						ИЛИ ИмяБазы = "УТ" Тогда
						
						СуществованиеДокаНазвание = "ЗаписьКнигиПриобретения";
                    КонецЕсли;	
					Если ПроверитьСуществованиеДокумента(СуществованиеДокаНазвание, Организация, Продавец, ДатаДокаВх, НомерДокаВх) Тогда
						ДокументСуществует(НазваниеДока,  ДатаДокаВх,  НомерДокаВх);
						Возврат;
					КонецЕсли;     
					//--------------------------------------------------------------
					Попытка
						Если ЗначениеЗаполнено(Отчет.GetValue("MAIN",  "N82")) и ЗначениеЗаполнено(Отчет.GetValue("MAIN",  "N81")) Тогда
							ДатаДог  =  Дата(Отчет.GetValue("MAIN",  "N82"));
							НомерДог  =  СокрЛП(Отчет.GetValue("MAIN",  "N81"));
							Дод2.ДоговорКонтрагента = СоздатьНовыйДоговор(Продавец,  Организация,  ДатаДог,  НомерДог); 
						Иначе 
							//Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", КонтрИНН); 
							Дод2.ДоговорКонтрагента = Дод2.Контрагент.ОсновнойДоговорКонтрагента;
						КонецЕсли
					Исключение
						 	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(Дод2.ДоговорКонтрагента,
														Дод2.Контрагент,
														Дод2.Организация, 
														,
														);
					КонецПопытки;
					//------------------------------------------------------------------------------
					Дод2.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
					Если ЕстьРеквизитДокумента("ЭлектронныйДокумент", Дод2.Метаданные()) Тогда
						Дод2.ЭлектронныйДокумент =  Истина;
					КонецЕсли;					
					Дод2.СпецРежимНалогообложения = СокрЛП(Отчет.GetValue("MAIN",  "N1_12")); 
					Дод2.Комментарий = "Переданий з M.E.Doc";

					Дод2.Товары.Очистить();
					table = Отчет.First("TAB1");
					Пока table Цикл
						НоваяСтрока = Дод2.Товары.Добавить();
						//20%
						Если Отчет.GetValue("TAB1", "TAB1_A011")=20 Тогда
							НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.НДС20;
							Новаястрока.Сумма = Отчет.GetValue("TAB1",  "TAB1_A013");
							Новаястрока.СуммаНДС = Новаястрока.Сумма * 0.2;
							НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
							Если ИмяБазы = "БУ" 
								ИЛИ ИмяБазы = "УТП" 
								ИЛИ ИмяБазы = "кпЖРЕУ" 
								ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
								ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
								
								НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
								НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
								НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКИзменениеСтоимости;
							ИначеЕсли ИмяБазы = "УПП" 
								ИЛИ ИмяБазы = "УТ" Тогда
								
								НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НайтиПоНаименованию("Обл. НДС");
								Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКИзменениеСтоимости;
							КонецЕсли; 
						//7%
						ИначеЕсли  Отчет.GetValue("TAB1", "TAB1_A011")=7 Тогда
							НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.НДС7;							
							Новаястрока.Сумма  = Отчет.GetValue("TAB1",  "TAB1_A013");
							Новаястрока.СуммаНДС = Новаястрока.Сумма * 0.07;
							НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
							Если ИмяБазы = "БУ" 
								ИЛИ ИмяБазы = "УТП" 
								ИЛИ ИмяБазы = "кпЖРЕУ"
								ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
								ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
 								
								НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
								НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
								НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКИзменениеСтоимости;
							ИначеЕсли ИмяБазы = "УПП" 
								ИЛИ ИмяБазы = "УТ" Тогда  
								
								НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НайтиПоНаименованию("Обл. НДС");
								Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКИзменениеСтоимости;
							КонецЕсли;
						//0%
						ИначеЕсли  Отчет.GetValue("TAB1", "TAB1_A011")=901 или Отчет.GetValue("TAB1", "TAB1_A011")=902 Тогда
							НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.НДС0;							
							Новаястрока.Сумма  = Отчет.GetValue("TAB1",  "TAB1_A013");
							Новаястрока.СуммаНДС =  0;
							НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
							Если ИмяБазы ="БУ" 
								ИЛИ ИмяБазы = "УТП" 
								ИЛИ ИмяБазы = "кпЖРЕУ" 
								ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
								ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
								
								НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
								НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
								НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  = Справочники.СтатьиНалоговыхДеклараций.НДС_НКИзменениеСтоимости;
							ИначеЕсли ИмяБазы = "УПП" 
								ИЛИ ИмяБазы = "УТ" Тогда   
								
								НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НайтиПоНаименованию("Обл. НДС");
								Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКИзменениеСтоимости;
							КонецЕсли;	
							
					
						//БезНдс
						ИначеЕсли Отчет.GetValue("TAB1", "TAB1_A011")=903 Тогда  
							НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.БезНДС;
							Новаястрока.Сумма  = Отчет.GetValue("TAB1",  "TAB1_A013");
							Новаястрока.СуммаНДС =  0;
							НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
							Если ИмяБазы = "БУ" 
								ИЛИ ИмяБазы = "УТП" 
								ИЛИ ИмяБазы = "кпЖРЕУ" 
								ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
								ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
								
								НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
								НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
								НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаБезНК;
							ИначеЕсли ИмяБазы = "УПП" 
								ИЛИ ИмяБазы = "УТ" Тогда 
								
								Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаБезНК;
							КонецЕсли; 
						КонецЕсли;
						НоваяСтрока.НаименованиеТовара = Отчет.GetValue("TAB1",  "TAB1_A3");
						НоваяСтрока.Количество =  Отчет.GetValue("TAB1",  "TAB1_A8");
						НоваяСтрока.Цена = Отчет.GetValue("TAB1",  "TAB1_A6");


						table = Отчет.Next("TAB1");
					КонецЦикла;
					Дод2.Записать(); 
					//---------------------------------------------------------------------------			
					МедКомпонент.AcceptDoc(пGUID);
					
					Форма  =  Дод2.ПолучитьФорму("ФормаДокумента");
					Если ЭтаФорма.НЕоткрыватьВхДок = Ложь
					Тогда 
						Форма.Открыть();
					КонецЕсли;
					   			    				
				Исключение
					МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
				//----------------------------------------------------------------------------------------------------------
			ИначеЕсли Лев(ИмяСхемы,  7) = "1С82АВР" Тогда
				
				Попытка
					Акт = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
					Если ИмяБазы = "БУ" 
						ИЛИ ИмяБазы = "УТП" 
						ИЛИ ИмяБазы = "кпЖРЕУ" 
						ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
						ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
						
						Акт.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
						//ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда
					КонецЕсли;
					НазваниеДока = "Акт ";
					ДатаДокаВх =  Дата(Отчет.GetValue("MAIN",  "DOCDATE"));
					НомерДокаВх =  Строка(Отчет.GetValue("MAIN",  "NUM"));
					
					Акт.ДатаВходящегоДокумента  =  ДатаДокаВх;
					Акт.НомерВходящегоДокумента =  НомерДокаВх; 
					Акт.Дата  =  Дата(ТекущаяДата()); 
					Акт.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("980");
					ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Акт,  ПараметрыСеанса.ТекущийПользователь);
					//-----------------------------------------------------  
					ЕДРПОУОрганизации  =  Строка(СокрЛП(Отчет.GetValue("MAIN",  "SIDE_EDRPOU_K")));
					Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда
						МедКомпонент.CancelDoc("В акті не вказаний ЄДРПОУ!");
						Возврат;
					КонецЕсли; 

					Организация = НайтиОрганизациюПоЕДРПОУ(СокрЛП(ЕДРПОУОрганизации));  	
					Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
						МедКомпонент.CancelDoc("Організації з ЄДРПОУ = " + ЕДРПОУОрганизации + 
						" не існує в 1С!" + Символы.ПС + "Створення документу неможливо!");
						Возврат;
					КонецЕсли;     
					Акт.Организация = Организация; 

					ЕДРПОУПокупателя = СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU"));
					
					КонтрНаименование = СокрЛП(Отчет.GetValue("MAIN", "FIRM_NAME"));
					КонтрЕДРПОУ = СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU"));
					КонтрИНН = СокрЛП(Отчет.GetValue("MAIN", "FIRM_INN"));
					КонтрАдр = СокрЛП(Отчет.GetValue("MAIN", "FIRM_ADR"));
					КонтрТлф = СокрЛП(Отчет.GetValue("MAIN", "FIRM_TELEFON"));
					
					Покупатель  =  Справочники.Контрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ",  КонтрЕДРПОУ);

					Если НЕ ЗначениеЗаполнено(Покупатель) Тогда 
						
						Если СозданиеКонтрагентов Тогда
							Покупатель = СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх, ФилиалВхДок);	
						Иначе
							МедКомпонент.CancelDoc("Акт " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") 
													+ Символы.ПС + "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+" не існує в 1С!" + Символы.ПС 
													+ "Створення документу неможливо!"  + Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							
							Сообщение = Новый СообщениеПользователю();
							Сообщение.Текст = ("Акт " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") 
													+ Символы.ПС + "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+" не існує в 1С!" + Символы.ПС 
													+ "Створення документу неможливо!"  + Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							Сообщение.Сообщить();
						КонецЕсли;
						
					КонецЕсли;

					Акт.Контрагент  =  Покупатель;

					//-----------------------------------------------------
					СуществованиеДокаНазвание = "ПоступлениеТоваровУслуг";
					Если ПроверитьСуществованиеДокумента(СуществованиеДокаНазвание,  Организация,  Покупатель,  ДатаДокаВх,  НомерДокаВх) Тогда
						ДокументСуществует(НазваниеДока,  ДатаДокаВх,  НомерДокаВх);
						Возврат;
					КонецЕсли;       				
					//-----------------------------------------------------
					Акт.Комментарий="Переданий з M.E.Doc";
					Если ИмяБазы="УТ" или ИмяБазы="УТП"  Тогда
						Акт.ОтражатьВБухгалтерскомУчете=Истина;
					КонецЕсли;
					//-----------------------------------------------------
					table  =  Отчет.First("TAB1"); 
					Пока table Цикл
						
						НоменклатураОригинал = СокрЛП(Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_NAME"));
						
						
						НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
						НомКоличество = Отчет.GetValue("TAB1",  "TAB1_A3");
						НомЦена = Отчет.GetValue("TAB1",  "TAB1_A5");
						Если ИмяСхемы = "1С82АВР" Тогда
							НомЦена = НомЦена;
							НомСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
							СуммаНДС = НомЦена * 0.2;
						ИначеЕсли ИмяСхемы = "1С82АВРБ" Тогда
							НомЦена = НомЦена;
							НомСтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
							СуммаНДС = 0;
						ИначеЕсли ИмяСхемы = "1С82АВР0" Тогда
							НомЦена = НомЦена;
							НомСтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
							СуммаНДС = 0;
						КонецЕсли;
						НомСумма = Отчет.GetValue("TAB1",  "TAB1_A6");
						//НомСтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
						ЕИОригинал = СокрЛП(Отчет.GetValue("TAB1", "TAB1_NOMENKLATURA_CHARCODEUMEASURE"));
						ЕдИзмНоменклатуры  =  Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕИОригинал);   
						
						Если ЗначениеЗаполнено(НоменклатураДока) Тогда
							НоваяСтрока =  Акт.Услуги.Добавить();
							НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС);
						иначе
							НаОсновании =  Строка(НСтр("ru = 'Акта ';uk = 'Акту '"));
							СозданиеНоменклатуры(ДатаДокаВх,  НомерДокаВх,  НоменклатураОригинал,  НаОсновании,  ЕИОригинал,  НомСтавкаНДС, "Услуг");						
							
							НоваяСтрока =  Акт.Услуги.Добавить();						
							НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
							НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС);
						КонецЕсли;
						table  =  Отчет.Next("TAB1"); 
					КонецЦикла;
					//-----------------------------------------------------
					Акт.Записать();
					
					МедКомпонент.AcceptDoc(пGUID); 
					Форма  =  Акт.ПолучитьФорму("ФормаДокумента");
					
					Если ЭтаФорма.НЕоткрыватьВхДок = Ложь
					Тогда 
						Форма.Открыть();
					КонецЕсли;
					
				Исключение
					МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке())); 
				КонецПопытки;
			//----------------------------------------------------------------------------------------------------------
		
			ИначеЕсли Лев(ИмяСхемы,  6) = "1С82ВН" Тогда
				
				Попытка
					Акт  =  Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
					Если ИмяБазы = "БУ" 
						ИЛИ ИмяБазы = "УТП" 
						ИЛИ ИмяБазы = "кпЖРЕУ" 
						ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
						ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
						
						Акт.ВидОперации=Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
						//ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда
					КонецЕсли;
					НазваниеДока = "Акт ";
					ДатаДокаВх = Дата(Отчет.GetValue("MAIN",  "DOCDATE"));
					НомерДокаВх = Строка(Отчет.GetValue("MAIN",  "NUM"));
					
					Акт.ДатаВходящегоДокумента  =  ДатаДокаВх;
					Акт.НомерВходящегоДокумента  =  НомерДокаВх; 
					Акт.Дата  =  Дата(ТекущаяДата()); 
					Акт.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("980");
					ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Акт,  ПараметрыСеанса.ТекущийПользователь);
					//-----------------------------------------------------  
					ЕДРПОУОрганизации  =  Строка(СокрЛП(Отчет.GetValue("MAIN",  "SIDE_EDRPOU_K")));
					Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда
						МедКомпонент.CancelDoc("В акті не вказаний ЄДРПОУ!");
						Возврат;
					КонецЕсли; 
					
					Организация = НайтиОрганизациюПоЕДРПОУ(СокрЛП(ЕДРПОУОрганизации));  	
					Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
						МедКомпонент.CancelDoc("Організації з ЄДРПОУ = " + ЕДРПОУОрганизации + 
						" не існує в 1С!" + Символы.ПС + "Створення документу неможливо!");
						Возврат;
					КонецЕсли;     
					Акт.Организация = Организация; 
					
					ЕДРПОУПокупателя = СокрЛП(Отчет.GetValue("MAIN",  "FIRM_EDRPOU"));
					
					КонтрНаименование = СокрЛП(Отчет.GetValue("MAIN", "FIRM_NAME"));
					КонтрЕДРПОУ = СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU"));
					КонтрИНН =  СокрЛП(Отчет.GetValue("MAIN", "FIRM_INN"));
					КонтрАдр = СокрЛП(Отчет.GetValue("MAIN", "FIRM_ADR"));
					КонтрТлф = СокрЛП(Отчет.GetValue("MAIN", "FIRM_TELEFON"));
					
					Покупатель  =  Справочники.Контрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ",  КонтрЕДРПОУ);
					
					Если НЕ ЗначениеЗаполнено(Покупатель) Тогда 
						
						Если СозданиеКонтрагентов Тогда
							Покупатель = СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх, "");	
						Иначе
							МедКомпонент.CancelDoc("Видаткова накладна " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") 
													+ Символы.ПС + "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+" не існує в 1С!" + Символы.ПС 
													+ "Створення документу неможливо!"  + Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							
							Сообщение = Новый СообщениеПользователю();
							Сообщение.Текст = ("Видаткова накладна " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") 
													+ Символы.ПС + "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+" не існує в 1С!" + Символы.ПС 
													+ "Створення документу неможливо!"  + Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							Сообщение.Сообщить();
						КонецЕсли;
						
					КонецЕсли;

					Акт.Контрагент  =  Покупатель;
					
					СуществованиеДокаНазвание = "ПоступлениеТоваровУслуг";
					Если ПроверитьСуществованиеДокумента(СуществованиеДокаНазвание, Организация, Покупатель, ДатаДокаВх, НомерДокаВх) Тогда
						ДокументСуществует(НазваниеДока, ДатаДокаВх, НомерДокаВх);
						Возврат;
					КонецЕсли;       				
					//-----------------------------------------------------
					Акт.Комментарий = "Переданий з M.E.Doc";
					Если ИмяБазы = "УТ" или ИмяБазы = "УТП"  Тогда
						Акт.ОтражатьВБухгалтерскомУчете=Истина;
					КонецЕсли;
					//-----------------------------------------------------
					table  =  Отчет.First("TAB1"); 
					Пока table Цикл 
						НоменклатураОригинал = СокрЛП(Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_NAME"));
						НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
						НомКоличество = Отчет.GetValue("TAB1",  "TAB1_A3");
						НомЦена = Отчет.GetValue("TAB1",  "TAB1_A5");
						Если ИмяСхемы="1С82ВН" Тогда
							НомЦена= НомЦена;
							НомСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
							СуммаНДС=НомЦена * 0.2;
						ИначеЕсли ИмяСхемы = "1С82ВНБ" Тогда
							НомЦена= НомЦена;
							НомСтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
							СуммаНДС=0;
						ИначеЕсли ИмяСхемы = "1С82ВН0" Тогда
							НомЦена= НомЦена;
							НомСтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
							СуммаНДС=0;
						КонецЕсли;
						НомСумма = Отчет.GetValue("TAB1",  "TAB1_A6");
						//НомСтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
						ЕИОригинал = СокрЛП(Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_CHARCODEUMEASURE"));
						ЕдИзмНоменклатуры  =  Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕИОригинал);   
						
						Если ЗначениеЗаполнено(НоменклатураДока) Тогда
							НоваяСтрока =  Акт.Товары.Добавить();
							НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС);
						иначе
							НаОсновании =  Строка(НСтр("ru = 'Акта ';uk = 'Акту '"));
							СозданиеНоменклатуры(ДатаДокаВх,  НомерДокаВх,  НоменклатураОригинал,  НаОсновании,  ЕИОригинал,  НомСтавкаНДС, "Товар");						
							
							НоваяСтрока =  Акт.Товары.Добавить();						
							НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
							НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС);
						КонецЕсли;
						table  =  Отчет.Next("TAB1"); 
					КонецЦикла;
					//-----------------------------------------------------
					Акт.Записать();
					
					МедКомпонент.AcceptDoc(пGUID); 
					Форма  =  Акт.ПолучитьФорму("ФормаДокумента");
					Если ЭтаФорма.НЕоткрыватьВхДок = Ложь
					Тогда 
						Форма.Открыть();
					КонецЕсли;
					
				Исключение
					МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке())); 
				КонецПопытки;
				 				
			ИначеЕсли Лев(ИмяСхемы,  7) = "1С77АВР" Тогда	
				
				Попытка
					Акт  =  Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
					Если ИмяБазы = "БУ" 
						ИЛИ ИмяБазы = "УТП" 
						ИЛИ ИмяБазы = "кпЖРЕУ" 
						ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
						ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
						
						Акт.ВидОперации=Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
						//ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда
					КонецЕсли;
					НазваниеДока = "Акт ";
					ДатаДокаВх =  Дата(Отчет.GetValue("MAIN",  "DOCDATE"));
					НомерДокаВх =  Строка(Отчет.GetValue("MAIN",  "NUM"));
					
					Акт.ДатаВходящегоДокумента  =  ДатаДокаВх;
					Акт.НомерВходящегоДокумента  =  НомерДокаВх; 
					Акт.Дата  =  Дата(ТекущаяДата()); 
					Акт.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("980");
					ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Акт,  ПараметрыСеанса.ТекущийПользователь);
					//-----------------------------------------------------  
					ЕДРПОУОрганизации  =  Строка(СокрЛП(Отчет.GetValue("MAIN",  "SIDE_EDRPOU_K")));
					Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда
						МедКомпонент.CancelDoc("В акті не вказаний ЄДРПОУ!");
						Возврат;
					КонецЕсли; 

					Организация = НайтиОрганизациюПоЕДРПОУ(СокрЛП(ЕДРПОУОрганизации));  	
					Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
						МедКомпонент.CancelDoc("Організації з ЄДРПОУ = " + ЕДРПОУОрганизации + 
						" не існує в 1С!" + Символы.ПС + "Створення документу неможливо!");
						Возврат;
					КонецЕсли;     
					Акт.Организация = Организация; 

					ЕДРПОУПокупателя = СокрЛП(Отчет.GetValue("MAIN",  "FIRM_EDRPOU"));
					
					КонтрНаименование = СокрЛП(Отчет.GetValue("MAIN", "FIRM_NAME"));
					КонтрЕДРПОУ = СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU"));
					КонтрИНН =  СокрЛП(Отчет.GetValue("MAIN", "FIRM_INN"));
					КонтрАдр = СокрЛП(Отчет.GetValue("MAIN", "FIRM_ADR"));
					КонтрТлф = СокрЛП(Отчет.GetValue("MAIN", "FIRM_TELEFON"));

					 Покупатель  =  Справочники.Контрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ",  КонтрЕДРПОУ);

					Если НЕ ЗначениеЗаполнено(Покупатель) Тогда 
						
						Если СозданиеКонтрагентов Тогда
							Покупатель = СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх, "");	
						Иначе
							МедКомпонент.CancelDoc("Акт " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") 
													+ Символы.ПС + "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+" не існує в 1С!" + Символы.ПС 
													+ "Створення документу неможливо!"  + Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							
							Сообщение = Новый СообщениеПользователю();
							Сообщение.Текст = ("Акт " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") 
													+ Символы.ПС + "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+" не існує в 1С!" + Символы.ПС 
													+ "Створення документу неможливо!"  + Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							Сообщение.Сообщить();
						КонецЕсли;
						
					КонецЕсли;

					Акт.Контрагент  =  Покупатель;

					СуществованиеДокаНазвание = "ПоступлениеТоваровУслуг";
					Если ПроверитьСуществованиеДокумента(СуществованиеДокаНазвание, Организация, Покупатель, ДатаДокаВх, НомерДокаВх) Тогда
						ДокументСуществует(НазваниеДока, ДатаДокаВх, НомерДокаВх);
						Возврат;
					КонецЕсли;       				
					//-----------------------------------------------------
					Акт.Комментарий = "Переданий з M.E.Doc";
					Если ИмяБазы = "УТ" Тогда
						Акт.ОтражатьВБухгалтерскомУчете=Истина;
					КонецЕсли;

					table  =  Отчет.First("TAB1"); 
					Пока table Цикл 
					Если Лев(ИмяСхемы,  8) = "1С77АВРБ" Тогда
						НоменклатураОригинал = СокрЛП(Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_NAME"));
					Иначе
						НоменклатураОригинал = СокрЛП(Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_NAME1"));
					КонецЕсли;
						НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
						НомКоличество = Отчет.GetValue("TAB1",  "TAB1_A3");						
						НомЦена = Отчет.GetValue("TAB1",  "TAB1_A6") / Отчет.GetValue("TAB1",  "TAB1_A3");
						НомСумма = Отчет.GetValue("TAB1",  "TAB1_A6");

						Если ИмяСхемы = "1С77АВР" Тогда
							НомСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
							СуммаНДС = НомЦена * 0.2 * НомКоличество;
						ИначеЕсли ИмяСхемы = "1С77АВРБ" Тогда
							НомСтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
							СуммаНДС=0;
						КонецЕсли; 
						ЕИОригинал = СокрЛП(Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_CHARCODEUMEASURE"));
						ЕдИзмНоменклатуры  =  Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕИОригинал);   
						
						Если ЗначениеЗаполнено(НоменклатураДока) Тогда
							НоваяСтрока =  Акт.Услуги.Добавить();
							НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС);
						иначе
							НаОсновании =  Строка(НСтр("ru = 'Акта ';uk = 'Акту '"));
							СозданиеНоменклатуры(ДатаДокаВх,  НомерДокаВх,  НоменклатураОригинал,  НаОсновании,  ЕИОригинал,  НомСтавкаНДС, "Услуг");						
							
							НоваяСтрока =  Акт.Услуги.Добавить();						
							НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
							НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС);
						КонецЕсли;
						table  =  Отчет.Next("TAB1"); 
					КонецЦикла;
					//-----------------------------------------------------
					Акт.Записать();
					
					МедКомпонент.AcceptDoc(пGUID); 
					Форма  =  Акт.ПолучитьФорму("ФормаДокумента");
					Если ЭтаФорма.НЕоткрыватьВхДок = Ложь
					Тогда 
						Форма.Открыть();
					КонецЕсли;
					 
				Исключение
					МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));  					
				КонецПопытки;      					
				 				
			ИначеЕсли Лев(ИмяСхемы,  6) = "1С77ВН" Тогда	
				
				Попытка
					Акт  =  Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
					Если ИмяБазы = "БУ" 
						ИЛИ ИмяБазы = "УТП" 
						ИЛИ ИмяБазы = "кпЖРЕУ" 
						ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
						ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
						
						Акт.ВидОперации=Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
						//ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда
					КонецЕсли;
					НазваниеДока = "Акт ";
					ДатаДокаВх = Дата(Отчет.GetValue("MAIN",  "DOCDATE"));
					НомерДокаВх = Строка(Отчет.GetValue("MAIN",  "NUM"));
					
					Акт.ДатаВходящегоДокумента = ДатаДокаВх;
					Акт.НомерВходящегоДокумента = НомерДокаВх; 
					Акт.Дата = Дата(ТекущаяДата()); 
					Акт.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("980");
					ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Акт,  ПараметрыСеанса.ТекущийПользователь);
					//-----------------------------------------------------  
					ЕДРПОУОрганизации  =  Строка(СокрЛП(Отчет.GetValue("MAIN",  "SIDE_EDRPOU_K")));
					Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда
						МедКомпонент.CancelDoc("В акті не вказаний ЄДРПОУ!");
						Возврат;
					КонецЕсли; 
					
					Организация = НайтиОрганизациюПоЕДРПОУ(СокрЛП(ЕДРПОУОрганизации));  	
					Если Организация =  Справочники.Организации.ПустаяСсылка() Тогда
						МедКомпонент.CancelDoc("Організації з ЄДРПОУ = " + ЕДРПОУОрганизации + 
						" не існує в 1С!" + Символы.ПС + "Створення документу неможливо!");
						Возврат;
					КонецЕсли;     
					Акт.Организация = Организация; 
					
					ЕДРПОУПокупателя = СокрЛП(Отчет.GetValue("MAIN",  "FIRM_EDRPOU"));
					
					КонтрНаименование = СокрЛП(Отчет.GetValue("MAIN", "FIRM_NAME"));
					КонтрЕДРПОУ = СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU"));
					КонтрИНН =  СокрЛП(Отчет.GetValue("MAIN", "FIRM_INN"));
					КонтрАдр = СокрЛП(Отчет.GetValue("MAIN", "FIRM_ADR"));
					КонтрТлф = СокрЛП(Отчет.GetValue("MAIN", "FIRM_TELEFON"));
					
					Покупатель = Справочники.Контрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ",  КонтрЕДРПОУ);
					
					Если НЕ ЗначениеЗаполнено(Покупатель) Тогда 
						
						Если СозданиеКонтрагентов Тогда
							Покупатель = СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх, "");	
						Иначе
							МедКомпонент.CancelDoc("Видаткова накладна " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") 
							+ Символы.ПС + "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+" не існує в 1С!" + Символы.ПС 
													+ "Створення документу неможливо!"  + Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							
							Сообщение = Новый СообщениеПользователю();
							Сообщение.Текст = ("Видаткова накладна " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") 
													+ Символы.ПС + "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+" не існує в 1С!" + Символы.ПС 
													+ "Створення документу неможливо!"  + Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							Сообщение.Сообщить();
						КонецЕсли;
						
					КонецЕсли;

					Акт.Контрагент  =  Покупатель;

					СуществованиеДокаНазвание = "ПоступлениеТоваровУслуг";
					Если ПроверитьСуществованиеДокумента(СуществованиеДокаНазвание,  Организация,  Покупатель,  ДатаДокаВх,  НомерДокаВх) Тогда
						ДокументСуществует(НазваниеДока,  ДатаДокаВх,  НомерДокаВх);
						Возврат;
					КонецЕсли;       				
					//-----------------------------------------------------
					Акт.Комментарий="Переданий з M.E.Doc";
					Если ИмяБазы="УТ" Тогда
						Акт.ОтражатьВБухгалтерскомУчете=Истина;
					КонецЕсли;
					
					table  =  Отчет.First("TAB1"); 
					Пока table Цикл 
						НоменклатураОригинал = СокрЛП(Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_NAME"));
						НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
						НомКоличество = Отчет.GetValue("TAB1",  "TAB1_A3");						
						НомЦена = Отчет.GetValue("TAB1",  "TAB1_A6") / Отчет.GetValue("TAB1",  "TAB1_A3");
						НомСумма = Отчет.GetValue("TAB1",  "TAB1_A6");
						
						Если ИмяСхемы = "1С77ВН" Тогда
							НомСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
							СуммаНДС = НомЦена * 0.2 * НомКоличество;
						ИначеЕсли ИмяСхемы = "1С77ВНБ" Тогда
							НомСтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
							СуммаНДС = 0;
						КонецЕсли; 
						ЕИОригинал = СокрЛП(Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_CHARCODEUMEASURE"));
						ЕдИзмНоменклатуры  =  Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕИОригинал);   
						
						Если ЗначениеЗаполнено(НоменклатураДока) Тогда
							НоваяСтрока =  Акт.Товары.Добавить();
							НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС);
						иначе
							НаОсновании =  Строка(НСтр("ru = 'Акта ';uk = 'Акту '"));
							СозданиеНоменклатуры(ДатаДокаВх,  НомерДокаВх,  НоменклатураОригинал,  НаОсновании,  ЕИОригинал,  НомСтавкаНДС, "Товар");						
							
							НоваяСтрока =  Акт.Товары.Добавить();						
							НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
							НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС);
						КонецЕсли;
						table  =  Отчет.Next("TAB1"); 
					КонецЦикла;
					//-----------------------------------------------------
					Акт.Записать();
					
					МедКомпонент.AcceptDoc(пGUID); 
					Форма  =  Акт.ПолучитьФорму("ФормаДокумента");
					Если ЭтаФорма.НЕоткрыватьВхДок = Ложь
					Тогда 
						Форма.Открыть();
					КонецЕсли;
					 
				Исключение
					МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;      					

			//===================ТТН====================ТТН=====================ТТН===================ТТН======================ТТН============	
			ИначеЕсли Сред(ИмяСхемы,  2,  6) = "120410" или Сред(ИмяСхемы,  2,  6) = "120420"  Тогда
				Попытка
					ТТН  =  Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
					Если ИмяБазы = "БУ" 
						ИЛИ ИмяБазы = "УТП" 
						ИЛИ ИмяБазы = "кпЖРЕУ" 
						ИЛИ ИмяБазы = "БухгалтерияСельскохозяйственногоПредприятия" 
						ИЛИ ИмяБазы = "БухгалтерияСтроительнойОрганизации" Тогда
						
						ТТН.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
						//ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда
					КонецЕсли;
					НазваниеДока = "ТТН ";
					ДатаДокаВх =  Дата(Отчет.GetValue("MAIN",  "N1"));
					НомерДокаВх =  Строка(Отчет.GetValue("MAIN",  "N2"));
					
					ТТН.ДатаВходящегоДокумента  =  ДатаДокаВх;
					ТТН.НомерВходящегоДокумента  =  НомерДокаВх; 
					ТТН.Дата  =  Дата(ТекущаяДата()); 
					ТТН.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("980");
					ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ТТН,  ПараметрыСеанса.ТекущийПользователь);
					//-----------------------------------------------------  
					ЕДРПОУОрганизации  =  Строка(СокрЛП(Отчет.GetValue("MAIN",  "EDR_POK")));
					Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда
						МедКомпонент.CancelDoc("В ТТН не вказаний ЄДРПОУ!");
						Возврат;
					КонецЕсли; 
					
					Организация = НайтиОрганизациюПоЕДРПОУ(СокрЛП(ЕДРПОУОрганизации));  	
					Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
						МедКомпонент.CancelDoc("Організації з ЄДРПОУ = " + ЕДРПОУОрганизации + 
						" не існує в 1С!" + Символы.ПС + "Створення документу неможливо!");
						Возврат;
					КонецЕсли;     
					ТТН.Организация = Организация; 
					
					ЕДРПОУПокупателя = СокрЛП(Отчет.GetValue("MAIN",  "FIRM_EDRPOU"));
					
					КонтрНаименование = СокрЛП(Отчет.GetValue("MAIN", "FIRM_NAME"));
					КонтрЕДРПОУ = СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU"));
					//КонтрИНН =  СокрЛП(Отчет.GetValue("MAIN", "FIRM_INN"));
					КонтрАдр = СокрЛП(Отчет.GetValue("MAIN", "FIRM_ADR"));
					//КонтрТлф = СокрЛП(Отчет.GetValue("MAIN", "FIRM_TELEFON"));
					
					Покупатель = Справочники.Контрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ",  КонтрЕДРПОУ);
				
			//-----------------------------------------------------------------------------------------------------------------------------------------------//  
					Если НЕ ЗначениеЗаполнено(Покупатель) Тогда 
						
						Если СозданиеКонтрагентов Тогда
							Покупатель = СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх, "");	
						Иначе
							МедКомпонент.CancelDoc("Видаткова накладна " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") 
							+ Символы.ПС + "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+" не існує в 1С!" + Символы.ПС 
													+ "Створення документу неможливо!"  + Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							
							Сообщение = Новый СообщениеПользователю();
							Сообщение.Текст = ("Видаткова накладна " + СокрЛП(ННВх.НомерВходящегоДокумента) + " від " + Формат(ННВх.ДатаВходящегоДокумента,  "ДЛФ = Д") 
													+ Символы.ПС + "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " +КонтрЕДРПОУ+" не існує в 1С!" + Символы.ПС 
													+ "Створення документу неможливо!"  + Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							Сообщение.Сообщить();
						КонецЕсли;
						
					КонецЕсли;

					ТТН.Контрагент  =  Покупатель;
					
					СуществованиеДокаНазвание = "ПоступлениеТоваровУслуг";
					Если ПроверитьСуществованиеДокумента(СуществованиеДокаНазвание, Организация, Покупатель, ДатаДокаВх, НомерДокаВх) Тогда
						ДокументСуществует(НазваниеДока,  ДатаДокаВх,  НомерДокаВх);
						Возврат;
					КонецЕсли;       				
					//-----------------------------------------------------
					ТТН.Комментарий="Переданий з M.E.Doc";
					Если ИмяБазы="УТ" или ИмяБазы="УТП"  Тогда
						ТТН.ОтражатьВБухгалтерскомУчете=Истина;
					КонецЕсли;
					//-----------------------------------------------------
					table  =  Отчет.First("TAB1"); 
					Пока table Цикл 
						НоменклатураОригинал = СокрЛП(Отчет.GetValue("TAB1",  "TAB1_A81"));
						НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
											
						
						Если Сред(ИмяСхемы,  2,  6) = "120420" Тогда
							НомКоличество = Отчет.GetValue("TAB1",  "TAB1_A13");
						   	НомЦена = Отчет.GetValue("TAB1",  "TAB1_A14");
						ИначеЕсли Сред(ИмяСхемы,  2,  6) = "120410" Тогда 
							//ЕИОригинал = СокрЛП("дал");
							НомКоличество = Отчет.GetValue("TAB1",  "TAB1_A15");
						   	НомЦена = Отчет.GetValue("TAB1",  "TAB1_A16");
							//ЕдИзмНоменклатуры  =  ЕИОригинал; 
						КонецЕсли;	
						
						НомСумма = НомЦена*НомКоличество;
						НомСтавкаНДС = Перечисления.СтавкиНДС.НДС20;						
						СуммаНДС=НомСумма * 0.2;
						
						//ЕдИзмНоменклатуры  =  Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕИОригинал);   
						
						Если ЗначениеЗаполнено(НоменклатураДока) Тогда
							НоваяСтрока =  ТТН.Товары.Добавить();
							НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС);
						иначе
							НаОсновании =  Строка(НСтр("ru = 'ТТНа ';uk = 'ТТНу '"));
							СозданиеНоменклатуры(ДатаДокаВх,  НомерДокаВх,  НоменклатураОригинал,  НаОсновании,  ЕИОригинал,  НомСтавкаНДС, "Товар");						
							
							НоваяСтрока =  ТТН.Товары.Добавить();						
							НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
							НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС);
						КонецЕсли;
						table  =  Отчет.Next("TAB1"); 
					КонецЦикла;
					//-----------------------------------------------------
					ТТН.Записать();
					
					МедКомпонент.AcceptDoc(пGUID); 
					Форма  =  ТТН.ПолучитьФорму("ФормаДокумента");
					Если ЭтаФорма.НЕоткрыватьВхДок = Ложь
					Тогда 
						Форма.Открыть();
					КонецЕсли;
					
				Исключение
					МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));  
				КонецПопытки;
				//-----------------ТТН------------------------ТТН-----------------------ТТН--------------------------ТТН----------------

								
			Иначе
				МедКомпонент.CancelDoc("Код:      " + """" + ИмяСхемы + """"+ Символы.ПС + "Назва: " + """"+ ИмяДокумента + """" + Символы.ПС + 
				"Для документу не створено можливості вигрузки до 1С!"); 
			КонецЕсли;
			
		КонецЕсли; 

	Исключение
		МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
КонецПроцедуры       

Процедура ТаблицаОтчетовПриПолученииДанных(Элемент,  ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки  =  ОформлениеСтроки.ДанныеСтроки;
		ОформлениеСтроки.Ячейки.НомерСтрокиОтч.УстановитьТекст(Строка(ТаблицаОтчетов.Индекс(ДанныеСтроки)+1));
	КонецЦикла;
	
КонецПроцедуры

Процедура ОрганизацияОтчетаПриИзменении(Элемент)
	
	Если ОрганизацияОтчета.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ЮрикФизикОтчет = "Юрик";
		Если Локализация.КодЯзыкаИнтерфейса() = "ru" Тогда
			ЭлементыФормы.НадписьКодПоЕДРПОУ1.Значение = "ЕДРПОУ";   			
		ИначеЕсли Локализация.КодЯзыкаИнтерфейса() = "uk" Тогда
			ЭлементыФормы.НадписьКодПоЕДРПОУ1.Значение = "ЄДРПОУ"; 			
		КонецЕсли;
	Иначе 
		ЮрикФизикОтчет = "Физик";
		ЭлементыФормы.НадписьКодПоЕДРПОУ1.Значение = "ДРФО";
	КонецЕсли;
	//-----------------------------------------------------------------
	КодОргДоИзмененийОтч = Строка(КодПоЕДРПОУ1);   	
	
	Если НЕ ОрганизацияОтчета.Пустая() Тогда
		КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),  "РежимФормированияПечатныхФорм"));
		СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ОрганизацияОтчета,  ТекущаяДата(), , , КодЯзыкаПечать);
		
		Если ОрганизацияОтчета.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда			
			Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоЕДРПОУ) Тогда
				КодПоЕДРПОУ1 = СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ);
			Иначе
				Предупреждение(НСтр("ru = 'У Вас не указан код ЕДРПОУ для "+ОрганизацияОтчета+"!';uk = 'У Вас не вказаний код ЄДРПОУ для "+ОрганизацияОтчета+"'"));
				КодПоЕДРПОУ1 = НСтр("ru = 'Неопределен';uk = 'Невизначений'");
			КонецЕсли;    
		ИначеЕсли ОрганизацияОтчета.ЮрФизЛицо  =  Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоДРФО) Тогда
				КодПоЕДРПОУ1 = СокрЛП(СведенияОПоставщике.КодПоДРФО);
			Иначе
				Предупреждение(НСтр("ru = 'У Вас не указан код ДРФО!';uk = 'У Вас не вказаний код ДРФО!'"));
				КодПоЕДРПОУ1 =  НСтр("ru = 'Неопределен';uk = 'Невизначений'");
			КонецЕсли;  
		КонецЕсли;	
	КонецЕсли;    
	//----------------------------------------------------------- 	
	Если КодОргДоИзмененийОтч <> Строка(КодПоЕДРПОУ1) Тогда
		ИзменениеОсновныхПараметровОтчетов();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТаблицаДокументовВыбор(Элемент,  ВыбраннаяСтрока,  Колонка,  СтандартнаяОбработка)
	
	Док =  ВыбраннаяСтрока.Документ.ПолучитьОбъект();
	ФормаДок = Док.ПолучитьФорму();
	ФормаДок.Открыть();
	
КонецПроцедуры

Процедура ТаблицаОтчетовВыбор(Элемент,  ВыбраннаяСтрока,  Колонка,  СтандартнаяОбработка)
	
	Если НЕ Колонка.Имя = "ФлагВыгрузитьОтчет"   Тогда
		Док =  ВыбраннаяСтрока.ДокументОтчет.ПолучитьОбъект();
		ФормаДок = Док.ПолучитьФорму();
		ФормаДок.ОткрытьМодально();
	КонецЕсли;
	
КонецПроцедуры    

Процедура ТаблицаДокументовПриАктивизацииСтроки(Элемент)
	
	ИзНихЧисло = ЭлементыФормы.ТаблицаДокументов.ВыделенныеСтроки.Количество();
	Помеченные = ТаблицаДокументов.НайтиСтроки(Новый Структура("Пометка",Истина));
	
	Если ИзнИхЧисло > 0 ИЛИ Помеченные.Количество() > 0 тогда 
		ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Сформировать.Доступность = Истина;
		//ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ОбновитьСтатусыПД.Доступность  =  Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Сформировать.Доступность = Ложь;
		//ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ОбновитьСтатусыПД.Доступность  =  Ложь;
	КонецЕсли;
	
	Если (ТипДок = "ВхНалоговыйДокумент") ИЛИ (ТипДок = "ВхПостТовУслуг") ИЛИ (ТипДок = "ВхСчет") Тогда
		//ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Сформировать.Доступность=Ложь;
		ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.УдалитьСтрокуДокумента.Доступность = Ложь;
	Иначе
		//ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Сформировать.Доступность=Истина;
		ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.УдалитьСтрокуДокумента.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВнешнееСобытие(Источник,  Событие,  Данные)
	
	ОбработкаВнешнегоСобытияМедка(Источник,  Событие,  Данные);
	
КонецПроцедуры

Процедура ПутьКФайлуМедкаПриИзменении(Элемент) 	
	
	Если 
		ЭлементыФормы.ЗапЛок.Значение  =  1 Тогда   
		ЭлементыФормы.НадписьЯрлык.Заголовок = "\ezvit.exe";
	ИначеЕсли 
		ЭлементыФормы.ЗапЛок.Значение  =  2 Тогда
		ЭлементыФормы.НадписьЯрлык.Заголовок = "\ezvitnet.exe"; 
	ИначеЕсли 
		ЭлементыФормы.ЗапЛок.Значение  =  3 Тогда
		ЭлементыФормы.НадписьЯрлык.Заголовок = "\station.exe";
	КонецЕсли;  
	
	Если ЗначениеЗаполнено(ПутьКФайлуМедка) Тогда
		ЭлементыФормы.НетСтрокиМедка.Видимость =  Ложь;
	Иначе
		ЭлементыФормы.НетСтрокиМедка.Видимость =  Истина; 
	КонецЕсли; 
	
	Подключение1СМедок();
	
КонецПроцедуры

Процедура КонтрагентОбработкаВыбора(Элемент,  ВыбранноеЗначение,  СтандартнаяОбработка)
	
	КонтрагентДоИзменений = Строка(Контрагент);
	
КонецПроцедуры	
	
Процедура ТаблицаОтчетовПриАктивизацииСтроки(Элемент)
	
	ИзНихЧислоОтч = ЭлементыФормы.ТаблицаОтчетов.ВыделенныеСтроки.Количество();
	
	Если ИзНихЧислоОтч>0 тогда 
		ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ДействиеОтчеты.Доступность = Истина;
		//ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ОбновитьСтатусыПД.Доступность  =  Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельТаблицаОтчетов.Кнопки.ДействиеОтчеты.Доступность = Ложь;
		//ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ОбновитьСтатусыПД.Доступность  =  Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	мНастройкаПериода.УстановитьПериод(НачПериода,  КонПериода); 	
	Если мНастройкаПериода.Редактировать() Тогда    		
		НачПериода  =  мНастройкаПериода.ПолучитьДатуНачала();
		КонПериода  =  мНастройкаПериода.ПолучитьДатуОкончания();		
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаНастройкаПериода1Нажатие(Элемент)
	
	мНастройкаПериода.УстановитьПериод(НачПериодаОтч,  КонПериодаОтч); 	
	Если мНастройкаПериода.Редактировать() Тогда         		
		НачПериодаОтч  =  мНастройкаПериода.ПолучитьДатуНачала();
		КонПериодаОтч  =  мНастройкаПериода.ПолучитьДатуОкончания();  		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЭДОВозможенНажатие(Элемент)
	
	ТекстЧтоДелать=Нстр("ru = 'Для этого зайдите в M.E.Doc:';uk = 'Для цього зайдіть в  M.E.Doc:'");
	ТекстМодульПервички =Нстр("ru = 'Первичные документы - Реестр первичных документов';uk = 'Первинні документи - Реєстр первинних документів'"); 
	ТекстДействие=Нстр("ru = 'Выберите входящие документы и выберите меню ';uk = 'Оберіть вхідні документи та оберіть меню '");
	ТекстДействиеМеню=Нстр("ru = 'Сервис - Отправить в 1С';uk = 'Сервіс - відправити в 1С'");
	ТекстПримечание=Нстр("ru = 'Примечание:';uk = 'Примітка:'");
	ТекстДляДокументов=Нстр("ru = 'передача из M.E.Doc в 1С реализована для документов:';uk = 'передавання з  M.E.Doc до 1С реалізовано для документів:'");
	ТекстХотитеПередать=Нстр("ru = 'Хотите передать их в 1С прямо сейчас?';uk = 'Спробувати передати їх прямо зараз?'");
	ТекстЗаголовок=Нстр("ru = 'Получение документов из M.E.Doc в 1С';uk = 'Отримати документи з  M.E.Doc в 1С'");
	ТекстЧтоДелатьВМедке=Нстр("ru = 'Модуль первичных документов запущен. Перейдите в M.E.Doc';uk = 'Модуль первинних документів запущено. Перейдіть до M.E.Doc'");
	
	Ответ  = Вопрос(ТекстЧтоДелать + Символы.ПС + 
	Строка("Модуль " + """") + ТекстМодульПервички + Строка(""".") + Символы.ПС + 
	ТекстДействие + Строка("""") + ТекстДействиеМеню + Строка(""".") + Символы.ПС + Символы.ПС + 
	ТекстПримечание + Символы.ПС + ТекстДляДокументов + Символы.ПС +
	Нстр("ru = '1) Налоговая накладная';uk = '1) Податкова накладна'") + Символы.ПС +
	Нстр("ru = '2) Приложение 2';uk = '2) Додаток 2'") + Символы.ПС +
	Нстр("ru = '3) Акт выполненных работ (на основании типовых шаблонов поставки M.E.Doc):';uk = 'Акт виконаних робіт (на основі типових шаблонів поставки M.E.Doc)'") + Символы.ПС +
	"   - 1С77АВР, 1С77АВРБ" + Символы.ПС +
	"   - 1С82АВР, 1С82АВРБ, 1С82АВР0" + Символы.ПС +  Символы.ПС +
	ТекстХотитеПередать,  РежимДиалогаВопрос.ДаНет, , , ТекстЗаголовок,);
	
	Если Ответ = КодВозвратаДиалога.Да  Тогда
		Попытка
			App  =  Новый COMОбъект("MEDOC.ZApplication");
			App.RunModule("PrimaryDocsRstNew"); 
			Предупреждение(ТекстЧтоДелатьВМедке);
		Исключение
			ПрефиксТекст="Внимание";
			ЗапускМедка(ПрефиксТекст); 
		КонецПопытки;  		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЭДОНевозможенНажатие(Элемент)
	
	ПрефиксТекст=Нстр("ru = 'Обмен документами НЕ ВОЗМОЖЕН ';uk = 'Обмін документами НЕ МОЖЛИВИЙ '"); 
	ЗапускМедка(ПрефиксТекст);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаДокументовОпрограмме(Кнопка)
	ЗапуститьПриложение("https://medoc.ua/pdf/instruction-1.2.pdf");
КонецПроцедуры

Процедура ТаблицаДокументовПослеУдаления(Элемент)
	
	ВсегоЧисло = ТаблицаДокументов.Количество();
	
КонецПроцедуры

Процедура ТаблицаОтчетовПослеУдаления(Элемент)
	
	ВсегоЧислоОтч = ТаблицаОтчетов.Количество();
	
КонецПроцедуры

Процедура ТаблицаУСПриПолученииДанных(Элемент,  ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки  =  ОформлениеСтроки.ДанныеСтроки;
		//ОформлениеСтроки.Ячейки.НомерСтроки.УстановитьТекст(Строка(ТаблицаУС.Индекс(ДанныеСтроки)+1));
		//ОформлениеСтроки.Ячейки.name. = Новый Цвет(0,  255,  0); 
		//Данные.ТранспондерОформлениеЯчейки.ЦветФона  =  WebЦвета.БледноЗолотистый;
		ОформлениеСтроки.Ячейки.НомерСтроки.ЦветФона  =  WebЦвета.Роса; 
		ОформлениеСтроки.Ячейки.name.ЦветФона  =  WebЦвета.ЗамшаСветлый; 
		ОформлениеСтроки.Ячейки.caption.ЦветФона  =  WebЦвета.ЗамшаСветлый; 
		ОформлениеСтроки.Ячейки.type.ЦветФона  =  WebЦвета.ЗамшаСветлый; 
		ОформлениеСтроки.Ячейки.maxlength.ЦветФона  =  WebЦвета.ЗамшаСветлый; 
		ОформлениеСтроки.Ячейки.spr.ЦветФона  =  WebЦвета.ЗамшаСветлый; 
		ОформлениеСтроки.Ячейки.sprname.ЦветФона  =  WebЦвета.ЗамшаСветлый;
		ОформлениеСтроки.Ячейки.Поле1СНазвание.ЦветФона  =  WebЦвета.Перламутровый; 
		ОформлениеСтроки.Ячейки.Таблица1С.ЦветФона  =  WebЦвета.Перламутровый; 
		ОформлениеСтроки.Ячейки.ПолеТаблицы1С.ЦветФона  =  WebЦвета.Перламутровый;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыборТипаУСМНачалоВыбораИзСписка(Элемент,  СтандартнаяОбработка)
	
	Попытка  
		App  =  Новый COMОбъект("MEDOC.ZApplication");
	Исключение
		ПрефиксТекст="";
		ЗапускМедка(ПрефиксТекст);
		Возврат;
	КонецПопытки;
	
	мСписокГруппШаблоновМедок  =  Новый СписокЗначений();	
	IPrim  =  App.GetPrimaryDocs(); 
	parts  =  IPrim.GetParts(); 
	Пока НЕ parts.EOF Цикл 
		мСписокГруппШаблоновМедок.Добавить(parts.Fields.Item("CODE").Value,  parts.Fields.Item("NAME").Value);
		parts.Next(); 
	КонецЦикла;     	
	ЭлементыФормы.ВыборТипаУСМ.СписокВыбора  =  мСписокГруппШаблоновМедок;
	
КонецПроцедуры

Процедура ЗаявкаСформироватьНажатие(Элемент)
	
	ВРазработке();
	
КонецПроцедуры

Процедура ПолеВыбора1ПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		Реквизиты  =  Метаданные.Документы[Элемент.Значение].Реквизиты;
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьПараметрыПриИзменении(Элемент)
	
	ПроверитьПараметры();
	
КонецПроцедуры

Процедура ДобавитьСписокПервички()
	
	  
	СписокПервички  =  Новый СписокЗначений();
	СписокПервички.Добавить("ОказаниеУслуг",  Нстр("ru = 'Акт выполненных работ';uk = 'Акт виконаних послуг'"));
	СписокПервички.Добавить("АктСверки",  Нстр("ru = 'Акт сверки';uk = 'Акт звіряння'"));
	СписокПервички.Добавить("ВидНакладна",  Нстр("ru = 'Расходная накладная';uk = 'Видаткова накладна'"));
	СписокПервички.Добавить("Счет",  Нстр("ru = 'Счет покупателям';uk = 'Рахунок покупцям'"));  
	СписокПервички.Добавить("ВозвратТоваровОтПокупателя",  Нстр("ru = 'Возврат от покупателя';uk = 'Зворотна накладна від покупця'"));
	СписокПервички.Добавить("ВозвратТоваровПоставщику",  Нстр("ru = 'Возврат поставщику';uk = 'Повернення постачальнику'"));
	СписокПервички.Добавить("сепаратор",  Нстр("ru = '-------------------------------------------';uk = '-------------------------------------------'"));
	СписокПервички.Добавить("НалоговаяНакладная",  Нстр("ru = 'Налоговая накладная';uk = 'Податкова накладна'"));
	СписокПервички.Добавить("Приложение2",  Нстр("ru = 'Приложение 2';uk = 'Додаток 2'"));
	СписокПервички.Добавить("сепаратор",  Нстр("ru = '-------------------------------------------';uk = '-------------------------------------------'"));
	СписокПервички.Добавить("ТТНспирт",  Нстр("ru = 'ТТН спирт этиловый';uk = 'ТТН спири етиловий'"));
	СписокПервички.Добавить("ТТНалкоголь",  Нстр("ru = 'ТТН алкогольные напитки';uk = 'ТТН акогольні вироби'"));

	//СписокПервички.Добавить("ВхНалоговыйДокумент",  Нстр("ru = 'Входящие налоговые документы';uk = 'Вхідні податкові документи'"));
	//СписокПервички.Добавить("ВхПостТовУслуг",  Нстр("ru = 'Поступление товаров и услуг';uk = 'Надходження товарів та послуг'"));
	//СписокПервички.Добавить("ВхСчет",  Нстр("ru = 'Счет поставщиков';uk = 'Рахунок постачальників'"));	
	
КонецПроцедуры

Процедура ПередаемАкт(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, НайденнаяСтрока)
	
	Попытка
		Формирование_Акт(App, pd, OrgId, Документ, Бланк, ИД); 				
		КоличествоДокументовАкт = КоличествоДокументовАкт+1;
		ПроверкаСтатусов(App, Документ, ИД);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус = ОбратитесьКРазработчику;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПередаемВозвратТоваровОтПокупателя(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВозвратТоваровОтПокупателя, НайденнаяСтрока)
	
	Попытка
		Формирование_ВозвратТоваровОтПокупателя(App,  pd,  OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовВозвратТоваровОтПокупателя  =  КоличествоДокументовВозвратТоваровОтПокупателя+1;
		ПроверкаСтатусов(App, Документ, ИД);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус = ОбратитесьКРазработчику;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПередаемВозвратТоваровПоставщику(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВозвратТоваровПоставщику, НайденнаяСтрока)
	
	Попытка
		Формирование_ВозвратТоваровПоставщику(App,  pd,  OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовВозвратТоваровПоставщику  =  КоличествоДокументовВозвратТоваровПоставщику+1;
		ПроверкаСтатусов(App, Документ, ИД);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус = ОбратитесьКРазработчику;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПередаемСчет(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовСчет, НайденнаяСтрока)
	
	Попытка	
		Формирование_Счет(App,  pd,  OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовСчет  =  КоличествоДокументовСчет+1;
		ПроверкаСтатусов(App, Документ, ИД);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=ОбратитесьКРазработчику;
		App.MoveToTrash(ИД); 		
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПередаемАЗ(App, pd, OrgId, Документ, Бланк, ИД, КоличествоДокументовАктСверки, НайденнаяСтрока)
	
	Попытка
		Формирование_АктаСверки(App, pd, OrgId, Документ, Бланк, ИД); 				
		КоличествоДокументовАктСверки = КоличествоДокументовАктСверки+1; 
		ПроверкаСтатусов(App, Документ, ИД);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=ОбратитесьКРазработчику;
		App.MoveToTrash(ИД); 
		Возврат;
	КонецПопытки;

КонецПроцедуры

Процедура ПередаемРасхНакл(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВидНакл, НайденнаяСтрока)
	
	Попытка	
		Формирование_РасхНакл(App,  pd,  OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовВидНакл  =  КоличествоДокументовВидНакл+1;
		ПроверкаСтатусов(App, Документ, ИД);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=ОбратитесьКРазработчику;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПередаемНН(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовНН, НайденнаяСтрока, orgId)
	
	Попытка	
		Если Формирование_НН(App, Документ, Бланк, PDate, ИД, orgId) Тогда		
			КоличествоДокументовНН = КоличествоДокументовНН + 1;
			ПроверкаСтатусов(App, Документ, ИД);
			СписокДляОткрытия.Добавить(ИД);
		КонецЕсли;
	Исключение
		НайденнаяСтрока.Статус = ОбратитесьКРазработчику;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПередаемДод2(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовДод2, НайденнаяСтрока, orgId)
	
	Попытка
		Если Формирование_Дод2(App,  Документ,  Бланк,  PDate,  ИД, orgId) Тогда			
			КоличествоДокументовДод2  =  КоличествоДокументовДод2+1;
			ПроверкаСтатусов(App, Документ, ИД);
			СписокДляОткрытия.Добавить(ИД);
		КонецЕсли;
	Исключение
		НайденнаяСтрока.Статус=ОбратитесьКРазработчику;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;

КонецПроцедуры

Процедура ПередаемТТНспирт(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовТТНспирт, НайденнаяСтрока, orgId)
	
	Попытка	
		Если Формирование_ТТН(App,  Документ,  Бланк,  PDate,  ИД, orgId) Тогда 				
			 КоличествоДокументовТТНспирт  =  КоличествоДокументовТТНспирт+1;
			 ПроверкаСтатусов(App, Документ, ИД);
			 СписокДляОткрытия.Добавить(ИД);
		КонецЕсли;
	Исключение
		НайденнаяСтрока.Статус=ОбратитесьКРазработчику;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПередаемТТНалкоголь(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовТТНалкоголь, НайденнаяСтрока, orgId)
	
	Попытка	
		Если Формирование_ТТН(App,  Документ,  Бланк,  PDate,  ИД, orgId) Тогда 				
		КоличествоДокументовТТНалкоголь  =  КоличествоДокументовТТНалкоголь+1;
		ПроверкаСтатусов(App, Документ, ИД);
		СписокДляОткрытия.Добавить(ИД);
	КонецЕсли;
	Исключение
		НайденнаяСтрока.Статус=ОбратитесьКРазработчику;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Позволяет определить есть ли среди реквизитов шапки документа
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции

Функция ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти) Экспорт

	ТабЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти);

	Если ТабЧасть = Неопределено Тогда // Нет такой таб. части в документе
		Возврат Ложь;

	Иначе
		Возврат НЕ (ТабЧасть.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

	КонецЕсли;

КонецФункции // ЕстьРеквизитТабЧастиДокумента()

Функция ПроверкаНовойФормыНН()	
	Ответ = Вопрос( НСтр("ru = 'Внимание! Возможны расхождения при передаче данных.';uk = 'Увага! Можливі розбіжності при передачі даних.'") + Символы.ПС
	+ НСтр("ru = 'Причина: отсутствие обновления программы 1С соответственно по новым формам Налоговой накладной и Расчета Корректировки.';uk = 'Причина: відсутність оновлення програми 1С відповідно до нових форм Податкової накладної та Розрахунку коригувань.'") + Символы.ПС
	+ НСтр("ru = 'Отменить передачу документа?';uk = 'Відмінити передачу документів'"),  РежимДиалогаВопрос.ДаНет );
	Если Ответ  =  КодВозвратаДиалога.Да Тогда 
		ОтменаПередачиНН = Истина;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

Функция СозданиеКонтрагента(Отчет, НазваниеДока, НомерДокаВх, ДатаДокаВх, ФилиалВхДок) 
	
	СозданныеМедком = Строка("СозданныеМедком");
	ГруппаКонтрагентов = Справочники.Контрагенты.НайтиПоНаименованию(СозданныеМедком);
	
	Если НЕ ЗначениеЗаполнено(ГруппаКонтрагентов) тогда   	
		ГруппаОбъект = Справочники.Контрагенты.СоздатьГруппу();
		ГруппаОбъект.Наименование = СозданныеМедком;         
		ГруппаОбъект.Записать(); 				
	КонецЕсли;
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.Родитель =?(НЕ ЗначениеЗаполнено(ГруппаКонтрагентов), ГруппаОбъект.Ссылка, ГруппаКонтрагентов.Ссылка);				
	НовыйКонтрагент.Наименование = КонтрНаименование; 	   
	НовыйКонтрагент.НаименованиеПолное  = КонтрНаименование;
	НовыйКонтрагент.КодПоЕДРПОУ = КонтрЕДРПОУ;  
	НовыйКонтрагент.ИНН =  КонтрИНН;
	НовыйКонтрагент.КодФилиала =  ФилиалВхДок;
	НовыйКонтрагент.Комментарий = Строка(НСтр("ru = 'Создан M.E.Doc на основании';uk = 'Створено M.E.Doc на підставі'") + 
	НазваниеДока + "№" + Строка(НомерДокаВх) + НСтр("ru = ' от ';uk = ' від '") + Формат(ДатаДокаВх, "ДЛФ = Д"));
	НовыйКонтрагент.Записать();
	
	Если ЗначениеЗаполнено(КонтрАдр)
		Тогда 
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.установить(НовыйКонтрагент.Ссылка);
		НаборЗаписей.Отбор.Тип.установить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		НаборЗаписей.Отбор.Вид.установить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		НаборЗаписей.Прочитать();
		Запись = НаборЗаписей.Добавить();
		Запись.Объект = (НовыйКонтрагент.Ссылка);
		Запись.Тип = (Перечисления.ТипыКонтактнойИнформации.Адрес);
		Запись.Вид = (Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		Запись.Представление = КонтрАдр;
		Запись.Поле1=Справочники.КлассификаторСтранМира.НайтиПоКоду("804");
		Попытка 
			НаборЗаписей.Записать();
		Исключение
		КонецПопытки;
		
		Если ЗначениеЗаполнено(КонтрТлф) 
			Тогда
			НаборЗаписейТел = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
			НаборЗаписейТел.Отбор.Объект.установить(НовыйКонтрагент.ссылка);
			НаборЗаписейТел.Отбор.Тип.установить(Перечисления.ТипыКонтактнойИнформации.Телефон);
			НаборЗаписейТел.Отбор.Вид.установить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
			НаборЗаписейТел.Прочитать();
			ЗаписьТел = НаборЗаписейТел.Добавить();
			ЗаписьТел.Объект = (НовыйКонтрагент.Ссылка);
			ЗаписьТел.Тип = (Перечисления.ТипыКонтактнойИнформации.Телефон);
			ЗаписьТел.Вид = (Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
			ЗаписьТел.Представление = КонтрТлф; 				
			Попытка 
				НаборЗаписейТел.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Возврат НовыйКонтрагент.Ссылка;
	Иначе
		Возврат Контрагент.Пустая();
	КонецЕсли;
	
КонецФункции

Функция СозданиеКонтрагентовМедок(App, Документ, orgId)
	
	КодГруппыНайден=0;
	НаличиеКонтр=0;
	//-------------Сведения о контрагенте из документа--------------------
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата);
	
	Если ИмяБазы = "УПП" или ИмяБазы = "УТП" Тогда
			ТекТелефоныКонтрагента  =  СведенияОПокупателе.Телефоны;
			Позиция2  =  Найти (ТекТелефоныКонтрагента, ", ");  		
			Если ЗначениеЗаполнено(Найти(ТекТелефоныКонтрагента, ", ")) Тогда  
				Позиция2  =  Сред(ТекТелефоныКонтрагента, 1, Позиция2-1);
			Иначе
				Позиция2 =  ТекТелефоныКонтрагента;
			КонецЕсли;   		
			Позиция2  =  СтрЗаменить(Позиция2,  " ",  "");
			Позиция2  =  СтрЗаменить(Позиция2,  "(",  "");
			Позиция2  =  СтрЗаменить(Позиция2,  ")",  "");
			Позиция2  =  СтрЗаменить(Позиция2,  "-",  ""); 
			ТекТелефоныКонтрагента  =  Позиция2;
		Иначе
			ТекТелефоныКонтрагента  =  ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,     "Телефоны, ",           Ложь);
			ТекТелефоныКонтрагента  =  ФормированиеПечатныхФорм.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
		КонецЕсли;
		
		//------------Проверка наличия и создания группі контр в медке------------------
				
	Попытка 
			Dict = App.GetDictionary();
			tab2 = Dict.Open("HBPARTNERGRP");
			Пока НЕ tab2.EOF Цикл 			
				Если
					tab2.Fields.Item("IDORG").Value= orgId и 
					tab2.Fields.Item("NAME").Value = СокрЛП("Созданные 1С") и 
					tab2.Fields.Item("NUM").Value=88888   
				Тогда
					КодГруппы= tab2.Fields.Item("CODE").Value;
					КодГруппыНайден=КодГруппыНайден + 1; 
				КонецЕсли;
				tab2.Next(); 
			КонеЦЦикла;		  		
					
			Если КодГруппыНайден=0 Тогда
				tab2.Last();
				tab2.Edit();  
				tab2.Append();
				КодГруппы = Dict.GetGenID("HBPARTNERGRP");
				tab2.Fields.Item("CODE").Value = СокрЛП(КодГруппы);
				tab2.Fields.Item("NUM").Value= 88888;
				tab2.Fields.Item("IDORG").Value = orgId;
				tab2.Fields.Item("NAME").Value= СокрЛП("Созданные 1С"); 
				//tab2.Post(); 
				Dict.Save();
				КонецЕсли;
		Исключение
		КонецПопытки;
		
		//---------------Проверка и создания контрагентов в медке------------------
	
	Попытка
		Dict = App.GetDictionary();
		tabl = Dict.Open("HBPARTNER");
		ЕДРПОУ = ?(ЗначениеЗаполнено (СведенияОПокупателе.КодПоЕдрпоу), СведенияОПокупателе.КодПоЕдрпоу, СведенияОПокупателе.КодПоДРФО);
		Пока НЕ tabl.EOF Цикл
			Если
				tabl.Fields.Item("NUM").Value=ЕДРПОУ
			Тогда 
				НаличиеКонтр=НаличиеКонтр+1;
			КонецЕсли;
			tabl.Next(); 
		КонеЦЦикла;
		
		КлючПартнера=Dict.GetGenID("HBPARTNER");
		tabl.Last();
		tabl.Edit();  
		tabl.Append();
		tabl.Fields.Item("CODE").Value = КлючПартнера;
		tabl.Fields.Item("IDPARTNERGRP").Value = КодГруппы; 
		
		tabl.Fields.Item("NUM").Value= ЕДРПОУ; 
		
		tabl.Fields.Item("NAME").Value= Лев(СокрЛП(СведенияОПокупателе.ПолноеНаименование), 250);
		tabl.Fields.Item("SHORTNAME").Value= СокрЛП(СведенияОПокупателе.Представление);
		tabl.Fields.Item("INDTAXNUM").Value= Лев(СокрЛП(СведенияОПокупателе.ИНН), 20);
		Попытка
			tabl.Fields.Item("ADR").Value= СокрЛП(СведенияОПокупателе.ЮридическийАдрес); 
		Исключение
		КонецПопытки;
		Попытка
			tabl.Fields.Item("CODENDS").Value= СокрЛП(СведенияОПокупателе.НомерСвидетельства); 
		Исключение
		КонецПопытки;
		Попытка
			tabl.Fields.Item("BANK").Value= СокрЛП(СведенияОПокупателе.Банк); 
			tabl.Fields.Item("MFO").Value= СокрЛП(СведенияОПокупателе.МФО);
		Исключение
		КонецПопытки;	
		//tabl.Fields.Item("NREZ").Value = ?(СведенияОПокупателе.НеЯвляетсяРезидентом=Истина, 1,0);
		//Если ЗначениеЗаполнено(Сведения.НомерСчета) Тогда
		Попытка
			tabl.Fields.Item("ACCNUM").Value= СокрЛП(СведенияОПокупателе.НомерСчета);
		Исключение
		КонецПопытки;
		//КонецЕсли;

		 Если Не НаличиеКонтр=0 Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Контрагент с ЕДРПОУ "+СокрЛП(СведенияОПокупателе.КодПоЕдрпоу)+" вже існує в M.E.Doc. Створити нового контрагента на основі передаваємого документа "
				+ СокрЛП(Документ)+" ?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
						Сообщить("Создание контрагента отменено");	
					Иначе			
				tabl.Post();
				Dict.Save();
				Сообщить("Контрагент создан");
			КонецЕсли;
		КонецЕсли;	
		
		Если НаличиеКонтр=0 Тогда
			tabl.Post();
			Dict.Save();
			Сообщить("Контрагент создан");
		КонецЕсли;
		
	Исключение
		Сообщить("Не удалось создать контрагента в Медке",);
	КонецПопытки;
	
КонецФункции

Процедура ОбновлениеСостоянияРегистрацииЕРНН(Кнопка)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос(НСтр("ru = 'Обновить статус по выделенным  документам в ЕРНН?'; uk = 'Оновити статус обраних документів в ЕРПН?'"), Режим, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбновлениеСтатусаРНН();
	Иначе 
		Сообщить(НСтр("ru = 'Обновление статуса в ЕРНН отменено'; uk = 'Оновлення статусу в ЕРПН відмінено'"));	
	КонецЕсли;

КонецПроцедуры 
	
Процедура ОбновлениеСтатусаРНН() 
	
	Попытка
		App = Новый COMОбъект("Medoc.ZApplication")
	Исключение
		Предупреждение(НСтр("ru = 'Медок не запущен или не выполнен вход в предприятие'; uk = 'Медок не запущено або не виконано вхід в підприємство'"));
		Возврат;
	КонецПопытки;	
	
	Для каждого СтрокаДокумент Из ТаблицаДокументов Цикл  //ЭлементыФормы.ТаблицаДокументов.ВыделенныеСтроки
		Если СтрокаДокумент.Пометка Тогда
			
			Документ = СтрокаДокумент.Документ; 
			ИД = Строка(Документ.УникальныйИдентификатор()); 
			НомерДока = ПолучитьНомерБезНулей(Документ);
			//НомерДока = Прав(Документ.Номер,7);
			//НомерДока = СтрЗаменить(Номер,"0","");
			
			//Для каждого СтрокаДокумент Из ЭлементыФормы.ТаблицаДокументов.ВыделенныеСтроки Цикл 
			//ВыделенаяСтрока = 1;			
			//Документ  =  СтрокаДокумент.Документ; 
			//ИД = Строка(Документ.УникальныйИдентификатор());
			//НомерДока = СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(Документ));
			
			Если ТипДок = "НалоговаяНакладная" Тогда
				docType = "10100";
			ИначеЕсли ТипДок = "Приложение2" Тогда 
				docType = "10101"; 
			КонецЕсли;
			
			Попытка  
				НалоговыйДокументОбъект = Документ.ПолучитьОбъект();
				СтруктураПараметров = НалоговыйДокументОбъект.ПечатьДокумента(Истина);
			Исключение
			КонецПопытки; 
			
			Контр = СокрЛП(СтруктураПараметров.НалоговыйДокумент.HKBUY);
			Дата = Формат(Документ.Дата, "ДЛФ=Д"); 
			prim = App.GetPrimaryDocs();
			Reestr = prim.GetPrimaryReestr(docType, 1, Дата, Дата);
			Reestr.First();
			Счетчик = Reestr.RecordCount;
			Пока Счетчик <> 0 Цикл
				МедИд = Reestr.Fields.Item("EXDOC_ID").Value;
				НомерДокаМед = Reestr.Fields.Item("DOC_NUM").Value;
				КонтрМед = Reestr.Fields.Item("PATRNER_IPN").Value;
				
				Если ИД = МедИд и НомерДока = НомерДокаМед и КонтрМед = Контр Тогда
					НаличиеВМедке = Истина;
					ЕРНН = Reestr.Fields.Item("REGDATE").Value; 
					РегКод = Reestr.Fields.Item("REG_NUM").Value;
					Если ЗначениеЗаполнено(ЕРНН) и Документ.ВключенаВЕдиныйРеестрНалоговыхНакладных = Ложь Тогда
						Док = Документ.ПолучитьОбъект();
						Док.ВключенаВЕдиныйРеестрНалоговыхНакладных = Истина;
						Док.Комментарий = Строка("Дата регистрации - "+Формат(ЕРНН,  "ДФ = dd.MM.yyyy")+", номер регистрации - "+РегКод);
						Док.Записать();
					ИначеЕсли ЗначениеЗаполнено(ЕРНН) и Документ.ВключенаВЕдиныйРеестрНалоговыхНакладных = Истина Тогда	
						Сообщить("Документ " +Документ+ " уже зарегестрирован в ЕРНН.");
					КонецЕсли;
					
					//Иначе Сообщить("Докуммент " +Документ+ " не существует в медке.");
				КонецЕсли;
				Счетчик = Счетчик-1;
				Reestr.Next();
			КонецЦикла;
			
			Если НаличиеВМедке <> Истина Тогда 
				Сообщить("Документ " +Документ+ " не существует в медке.");
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;
	
	//Если ВыделенаяСтрока <> 1 Тогда 
	//	Предупреждение("Не выделенно ни одного документа!");
	//Иначе 
	//	ВыбратьПервичку();	
	//КонецЕсли;	
	
КонецПроцедуры
	
Функция Скрытие(БезНДСЧисло, ВсегоНДСЧисло, ВсегоЧисло1)
	
	Если БезНДСЧисло = 0 тогда
		ЭлементыФормы.БезНДСЧисло.Видимость = Ложь;
		ЭлементыФормы.Надпись19.Видимость = Ложь;
	КонецЕсли;
	Если ВсегоНДСЧисло = 0 тогда
		ЭлементыФормы.ВсегоНДСЧисло.Видимость = Ложь;
		ЭлементыФормы.Надпись20.Видимость = Ложь;
	КонецЕсли;
	Если ВсегоЧисло1 = 0 тогда
		ЭлементыФормы.ВсегоЧисло1.Видимость = Ложь;
		ЭлементыФормы.Надпись21.Видимость = Ложь;
	КонецЕсли;		
КонецФункции

// Регламентированные отчеты
Функция КодЕДРПОУ(организация) Экспорт
	Результат = "";
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТ" Тогда
		Результат = СокрЛП(Организация.КодПоЕДРПОУ);
	Иначе
Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КодыОрганизацииСрезПоследних.КодПоЕДРПОУ
		|ИЗ
		|	РегистрСведений.КодыОрганизации.СрезПоследних(, Организация = &Организация) КАК КодыОрганизацииСрезПоследних";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Результат = СокрЛП(ВыборкаДетальныеЗаписи.КодПоЕДРПОУ);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ДатьОргМЕДок()
	Попытка
		мед = Новый COMОбъект("MEDOC.ZApplication");
		Возврат мед.GetCurrEdrpou();
	Исключение
	КонецПопытки;
	
	Возврат "";
КонецФункции

Процедура РегОтчетИнициализация()
	ПериодГод = Год(ТекущаяДата());
	спп = ДатьСписокПериодов();
	//сппф = ДатьСписокПериодовФиз();
	мес = Месяц(ТекущаяДата());
	//Если мес < 0 Тогда
	//	мес = спп.Количество() - 1;
	//КонецЕсли;
	//Если мес < спп.Количество() Тогда
		Период = спп[мес-1];
	//КонецЕсли;
	
//	Таб4 = Истина;
КонецПроцедуры

Процедура РегОтчетИнициализацияФиз()
	ПериодГод = Год(ТекущаяДата());
	сппф = ДатьСписокПериодовФиз();
	мес = Месяц(ТекущаяДата()) - 2;
	Если мес < 0 Тогда
		мес = сппф.Количество() - 1;
	КонецЕсли;
	Если мес < сппф.Количество() Тогда
		Период = сппф[мес];
	КонецЕсли;
КонецПроцедуры

Процедура ВидимостРегОтчетСпискаЮр()
	ЭтаФорма.Панель.Страницы.РегламентированныеОтчетыФиз.Видимость = Ложь;
	ЭтаФорма.Панель.Страницы.РегламентированныеОтчеты.Видимость = Ложь;//Истина;
	Таб4ф = Ложь;
	Таб7ф = Ложь;
	Таб5 = Ложь;
	Таб6 = Ложь;
	ДФФ = Ложь;
	ФЗФ = Ложь;
КонецПроцедуры

Процедура ВидимостРегОтчетСпискаФиз()
	ЭтаФорма.Панель.Страницы.РегламентированныеОтчеты.Видимость = Ложь;	
	ЭтаФорма.Панель.Страницы.РегламентированныеОтчетыФиз.Видимость = Ложь;//Истина;
	Таб4 = Ложь;
	Таб7 = Ложь;
	ДФЮ = Ложь;
	ФЗЮ = Ложь;
КонецПроцедуры

Процедура РегОтчетОбновитьПереченьГрупп()
	//РегОтчетыТабличноеПолеГруппы.Очистить();
	//
	//Попытка
	//	мед = Новый COMОбъект("MEDOC.ZApplication");
	//Исключение
	//КонецПопытки;
	//с = РегОтчетыТабличноеПолеГруппы.Добавить();
	//с.Наименование = "фыв";
КонецПроцедуры

Процедура РегОтчетОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
    спОрг = Новый СписокЗначений;	
	
	медокОрг = ДатьОргМЕДок();
	орги = ВыбратьОрганизации();
	Пока орги.Следующий() Цикл
		сОрг = орги.ПолучитьОбъект().Ссылка;
		Если КодЕДРПОУ(сОрг) = медокОрг Тогда
			спОрг.Добавить(сОрг);
		КонецЕсли;
	КонецЦикла;
	
	формаВыбора = Справочники.Организации.ПолучитьФормуВыбора(, Элемент);
	элОтбора = формаВыбора.Отбор.Ссылка;
	Если элОтбора <> Неопределено Тогда
		элОтбора.ВидСравнения = ВидСравнения.ВСписке;
		элОтбора.Значение = спОрг;
		элОтбора.Использование = Истина;
	КонецЕсли;
	
	формаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Ссылка.Доступность = Ложь;
    формаВыбора.Открыть();
	
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Функция ДатьСписокПериодов()
	сп = Новый СписокЗначений;
	
	сп.Добавить(НСтр("ru = 'Январь'; uk = 'Січень'"));
	сп.Добавить(НСтр("ru = 'Февраль'; uk = 'Лютий'"));
	сп.Добавить(НСтр("ru = 'Март'; uk = 'Березень'"));
	сп.Добавить(НСтр("ru = 'I Квартал'; uk = 'I Квартал'"));
	сп.Добавить(НСтр("ru = 'Апрель'; uk = 'Квітень'"));
	сп.Добавить(НСтр("ru = 'Май'; uk = 'Травень'"));
	сп.Добавить(НСтр("ru = 'Июнь'; uk = 'Червень'"));
	сп.Добавить(НСтр("ru = 'II Квартал'; uk = 'II Квартал'"));
	//сп.Добавить(НСтр("ru = 'I Полугодие'; uk = 'I Півріччя'"));
	сп.Добавить(НСтр("ru = 'Июль'; uk = 'Липень'"));
	сп.Добавить(НСтр("ru = 'Август'; uk = 'Серпень'"));
	сп.Добавить(НСтр("ru = 'Сентябрь'; uk = 'Вересень'"));
	сп.Добавить(НСтр("ru = 'III Квартал'; uk = 'III Квартал'"));
	//сп.Добавить(НСтр("ru = '9 месяцев'; uk = '9 місяців'"));
	сп.Добавить(НСтр("ru = 'Октябрь'; uk = 'Жовтень'"));
	сп.Добавить(НСтр("ru = 'Ноябрь'; uk = 'Листопад'"));
	сп.Добавить(НСтр("ru = 'Декабрь'; uk = 'Грудень'"));
	сп.Добавить(НСтр("ru = 'IV Квартал'; uk = 'IV Квартал'"));
//	сп.Добавить(НСтр("ru = 'II Полугодие'; uk = 'II Півріччя'"));
	//сп.Добавить(НСтр("ru = 'Год'; uk = 'Рік'"));
	
	Возврат сп;
КонецФункции

Функция ДатьСписокПериодовФиз()
	 сппф = Новый СписокЗначений;
	 сппф = ДатьСписокПериодов();
	 сппф.Добавить(НСтр("ru = 'Год'; uk = 'Рік'"));
	 
	 Возврат сппф;
КонецФункции

Функция ДатьДатуИТипПериода(имяПериода, год)
	возв = Новый Структура;
	возв.Вставить("Тип");
	возв.Вставить("Дата");
	
	Если имяПериода = "Январь" Или имяПериода = "Січень" Тогда
		возв.Тип = 0;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "0101");
	ИначеЕсли имяПериода = "Февраль" Или имяПериода = "Лютий" Тогда
		возв.Тип = 0;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "0201");
	ИначеЕсли имяПериода = "Март" Или имяПериода = "Березень" Тогда
		возв.Тип = 0;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "0301");
	ИначеЕсли имяПериода = "I Квартал" Или имяПериода = "I Квартал" Тогда
		возв.Тип = 10;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "0301");
	ИначеЕсли имяПериода = "Апрель" Или имяПериода = "Квітень" Тогда
		возв.Тип = 0;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "0401");
	ИначеЕсли имяПериода = "Май" Или имяПериода = "Травень" Тогда
		возв.Тип = 0;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "0501");
	ИначеЕсли имяПериода = "Июнь" Или имяПериода = "Червень" Тогда
		возв.Тип = 0;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "0601");
	ИначеЕсли имяПериода = "II Квартал" Или имяПериода = "II Квартал" Тогда
		возв.Тип = 10;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "0601");
	ИначеЕсли имяПериода = "I Полугодие" Или имяПериода = "I Півріччя" Тогда
		возв.Тип = 20;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "0601");
	ИначеЕсли имяПериода = "Июль" Или имяПериода = "Липень" Тогда
		возв.Тип = 0;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "0701");
	ИначеЕсли имяПериода = "Август" Или имяПериода = "Серпень" Тогда
		возв.Тип = 0;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "0801");
	ИначеЕсли имяПериода = "Сентябрь" Или имяПериода = "Вересень" Тогда
		возв.Тип = 0;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "0901");
	ИначеЕсли имяПериода = "III Квартал" Или имяПериода = "III Квартал" Тогда
		возв.Тип = 10;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "0901");
	ИначеЕсли имяПериода = "9 месяцев" Или имяПериода = "9 місяців" Тогда
		возв.Тип = 25;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "0901");
	ИначеЕсли имяПериода = "Октябрь" Или имяПериода = "Жовтень" Тогда
		возв.Тип = 0;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "1001");
	ИначеЕсли имяПериода = "Ноябрь" Или имяПериода = "Листопад" Тогда
		возв.Тип = 0;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "1101");
	ИначеЕсли имяПериода = "Декабрь" Или имяПериода = "Грудень" Тогда
		возв.Тип = 0;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "1201");
	ИначеЕсли имяПериода = "IV Квартал" Или имяПериода = "IV Квартал" Тогда
		возв.Тип = 10;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "1201");
	ИначеЕсли имяПериода = "II Полугодие" Или имяПериода = "II Півріччя" Тогда
		возв.Тип = 20;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "1201");
	ИначеЕсли имяПериода = "Год" Или имяПериода = "Рік" Тогда
		возв.Тип = 30;
		возв.Дата = Дата(Формат(год, "ЧГ=0;") + "1201");
	Иначе
		ВызватьИсключение "Тип периода не поддерживается: " + имяПериода;
	КонецЕсли;
	
	Возврат возв;
КонецФункции

Процедура СоздатьПакетОтчетов(
	кодГлавногоОтчета, списокКодовДочерних, типПериода, датаПериода, едрпоуОрганизации)
	
	мед = Новый COMОбъект("MEDOC.ZApplication");
	Если едрпоуОрганизации <> мед.GetCurrEdrpou() Тогда
		Сообщить("Текущая организация M.E.Doc отличается от организации в отчете.");
		Возврат;
	КонецЕсли;
	Попытка	
		м1с = РегламентированнаяОтчетность.РеглОтчеты("РегламентированныйОтчетМенеджерЗвит1С").Создать();
	Исключение
		м1с = РегламентированнаяОтчетность.РеглОтчеты("РегламентированныйОтчетМенеджерЗвит1С");
	КонецПопытки;
		
	м1с.ОбработкаВнешнегоСобытияЗвит1С(, "BEGINREPGROUP", );
	
	Попытка
		главный = СоздатьОтчет(кодГлавногоОтчета, типПериода, датаПериода, едрпоуОрганизации, 0, м1с, мед);
		Если главный > 0 Тогда
			Для Каждого дочКод Из списокКодовДочерних Цикл
				СоздатьОтчет(Строка(дочКод), типПериода, датаПериода, едрпоуОрганизации, главный, м1с, мед);
			КонецЦикла;
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	м1с.ОбработкаВнешнегоСобытияЗвит1С(, "ENDREPGROUP", );
	мед.RefreshRstDoc();
КонецПроцедуры

Функция СоздатьОтчет(кодОтчета, типПериода, датаПериода, едрпоуОрганизации, кодРодителя, м1с, мед)
	
	док = мед.CreateDocumentByParam(кодОтчета, типПериода, датаПериода, 0);
	док.ClearDoc();
	Если кодРодителя > 0 Тогда
		док.IDParent = кодРодителя;
	КонецЕсли;
		
	отчетЗвит1С	= док.Zvit1CReport;
	фе = отчетЗвит1С.FIRM_EDRPOU;
	м1с.Компонента = отчетЗвит1С.ZvitInterop;	
	данные = Новый Структура;
	данные.Вставить("ОтчетЗвит1С", отчетЗвит1С);
	данные.Вставить("ОткрыватьОтчет", Ложь);
	м1с.ОбработкаВнешнегоСобытияЗвит1С(, "REPORT", данные);
	док.Save();
	Возврат док.CardCode;
КонецФункции

Процедура РегОтчетОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура РегОтчетОрганизацияПриИзменении(Элемент)
	РегОтчетОбновитьПереченьГрупп()
КонецПроцедуры

Функция ПреобразоватьСтрокуВЧисло(Строка)
	Строка = СокрЛП(Строка);
	Строка = СтрЗаменить(Строка,Символы.НПП,"");
	Строка = СтрЗаменить(Строка,",",".");
	Возврат Число(Строка);
КонецФункции

Процедура ЗарегистрированныеПоДанным1СПланПриИзменении(Элемент)
	ЭлементыФормы.ДаП.Доступность = ЗарегистрированныеПоДанным1СПлан;
	ЭлементыФормы.НетП.Доступность = ЗарегистрированныеПоДанным1СПлан;	
КонецПроцедуры

Процедура ЗарегистрированныеПоДанным1СПриИзменении(Элемент)
	ЭлементыФормы.ДаФ.Доступность = ЗарегистрированныеПоДанным1С;
	ЭлементыФормы.НетФ.Доступность = ЗарегистрированныеПоДанным1С;
КонецПроцедуры

Процедура ВыделитьВсе()
	//wsh = Новый COMОбъект("WSCript.Shell");
	//ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаДокументов;
	//wsh.sendkeys("^{A}");
	ТаблицаДокументов.ЗаполнитьЗначения(Истина,"Пометка");
	ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.Сформировать.Доступность = Истина;
	
КонецПроцедуры

Процедура ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ДоступносьПриложений();	
КонецПроцедуры

Процедура ОбновитьСтатусыОтчетов(App)
	
	Для каждого СтрОтч Из ТаблицаОтчетов Цикл
		
		Статус = App.GetSendSTTByExDocID(Строка(СтрОтч.ДокументОтчет.УникальныйИдентификатор()));
		СтатусСтрока = ПолучитьРасшифровкуСтатуса(Статус); 
		СтрОтч.СтатусОтчетаДФС = СтатусСтрока;
		СтрОтч.СтатусОтчетаДСС = СтатусСтрока;
		СтрОтч.СтатусОтчетаФСС = СтатусСтрока;
		
	КонецЦикла; 
	
КонецПроцедуры

Функция ВыбратьОрганизации()
	
	Запрос = Новый Запрос; 
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления"; 
	
	Возврат Запрос.Выполнить().Выбрать(); 
	
КонецФункции

Процедура МедокДЛЛНажатие(Элемент)
	Подключение1СМедок();
КонецПроцедуры

Процедура ПроверитьОбновлениеНажатие(Элемент)
	Результат = ПроверитьНаличиеОбновления();
	Если Результат.ЕстьОбновление Тогда
		ЭлементыФормы.ГиперСсылкаНаОбновление.Значение = Результат.СсылкаНаОбновление;
		ЭлементыФормы.НадписьИнфаОбОбновлении.Заголовок = НСтр("ru = 'Доступна новая версия медовой стыковки!';uk = 'Доступна нова версія медової стиковки!'");
	Иначе
		ЭлементыФормы.НадписьИнфаОбОбновлении.Заголовок = НСтр("ru = 'Вы используете актуальную версию медовой стыковки!';uk = 'Ви використовуєте актуальну версію медової стиковки!'");
	КонецЕсли; 
КонецПроцедуры

Процедура ГиперСсылкаНаОбновлениеНажатие(Элемент)
	Если Элемент.Значение <> "" Тогда
		ЗапуститьПриложение(Элемент.Значение);	
	КонецЕсли; 
КонецПроцедуры
 

СуффиксДСС = Строка("");
СуффиксДФС = Строка("");
СуффиксЕО = Строка("");
СуффиксФСС = Строка("");
//СуффиксДСС = Строка("S");
//СуффиксДФС = Строка("N");
//СуффиксЕО = Строка("E");
//СуффиксФСС = Строка("F");



мНастройкаПериода  =  Новый НастройкаПериода;
мВалютаРегламентированногоУчета  =  Константы.ВалютаРегламентированногоУчета.Получить();

мСписокВыбораСпецРежимНалогообложения  =  Новый СписокЗначений();
мСписокВыбораСпецРежимНалогообложения.Добавить(Неопределено,  НСтр("ru = '     ';uk = '     '"));
мСписокВыбораСпецРежимНалогообложения.Добавить(2,  НСтр("ru = '2   с/х предприятия (специальный режим)';uk = '2   с/г підприємства (спеціальний режим)'"));
мСписокВыбораСпецРежимНалогообложения.Добавить(3,  НСтр("ru = '3   с/х предприятия (всех форм собственности)';uk = '3   с/г підприємства (усіх форм власності)'"));
мСписокВыбораСпецРежимНалогообложения.Добавить(4,  НСтр("ru = '4   перерабатывающие предприятия (всех форм собственности)';uk = '4   переробні підприємства (усіх форм власності)'"));


СписокРеглОтчетов  =  Новый СписокЗначений();
СписокРеглОтчетов.Добавить("РегламентированныйОтчетБаланс",  Нстр("ru = 'Форма № 1. Баланс';uk = 'Форма № 1. Баланс'"));
СписокРеглОтчетов.Добавить("РегламентированныйОтчетБалансМП",  Нстр("ru = '1-м, 2-м. Отчет МП (стандарт № 25) ';uk = '1-м, 2-м. Звіт МП (стандарт № 25) '"));
СписокРеглОтчетов.Добавить("РегламентированныйОтчетБалансМПС",  Нстр("ru = '1-мс, 2-мс. Отчет МП сокращенный (стандарт № 25) ';uk = '1-мс, 2-мс. Звіт МП скорочений (стандарт № 25) '"));
СписокРеглОтчетов.Добавить("РегламентированныйОтчетПоТруду",  Нстр("ru = '1-ПВ. Отчет по труду';uk = '1-ПВ. Звіт з праці'"));
СписокРеглОтчетов.Добавить("РегламентированныйОтчетФорма1ДФ",  Нстр("ru = 'Форма №1ДФ';uk = 'Форма №1ДФ'"));
СписокРеглОтчетов.Добавить("РегламентированныйОтчетФСС",  Нстр("ru = 'Отчет Ф4-ФССсТВП';uk = 'Звіт Ф4-ФССзТВП'"));  
СписокРеглОтчетов.Добавить("РегламентированныйОтчетЕдиныйСоциальныйВзнос",  Нстр("ru = 'Отчет по единому социальному взносу (Приложение 4)';uk = 'Звіт по єдиному соціальному внеску (Додаток 4)'"));
СписокРеглОтчетов.Добавить("РегламентированныйОтчетРасчетЕдиногоНалога",  Нстр("ru = 'Декларация плательщика единого налога';uk = 'Декларація платника єдиного податку'"));
СписокРеглОтчетов.Добавить("РегламентированныйОтчетРасчетЕдиногоНалогаФизЛиц",  Нстр("ru = 'Декларация плательщика единого налога ФОП';uk = 'Декларація платника єдиного податку ФОП'"));
СписокРеглОтчетов.Добавить("РегламентированныйОтчетДекларацияОПрибыли",  Нстр("ru = 'Декларация о прибыли';uk = 'Декларація з податку на прибуток'"));
СписокРеглОтчетов.Добавить("РегламентированныйОтчетДекларацияНДС",  Нстр("ru = 'Декларация по НДС';uk = 'Декларація по ПДВ'"));

wshShell  =  Новый COMОбъект("WScript.Shell");
WshExec  =  Неопределено;
