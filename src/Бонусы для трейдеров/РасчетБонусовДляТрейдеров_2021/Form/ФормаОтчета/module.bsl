// УстановитьОтбор
//
Процедура УстановитьОтбор(КомпоновщикНастроек, ИмяПараметра, ЗначениеПараметра, ВидСравнения)
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПараметра);
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	ЭлементОтбора.ПравоеЗначение = ЗначениеПараметра;	
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	ЭлементОтбора.Использование = ЗначениеЗаполнено(ЗначениеПараметра);
КонецПроцедуры

// УстановитьПараметр
//
Процедура УстановитьПараметр(КомпоновщикНастроек, ИмяПараметра, ЗначениеПараметра)
	ПараметрДанныхТекущий = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	ПараметрДанныхТекущий.Значение = ЗначениеПараметра;
	ПараметрДанныхТекущий.Использование = ЗначениеЗаполнено(ЗначениеПараметра);
КонецПроцедуры

Процедура УстановитьПараметрыОтборы()
	
	ПроверитьПравильностьДоговоров();
	ПроверитьПравильностьПланов();

	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек[ЭлементыФормы.СписокВариантов.Значение].Настройки);
	
	//УстановитьПараметр(КомпоновщикНастроек, "ДатаОтчета", КонецМесяца( ДатаОтчета ) );
	//УстановитьПараметр(КомпоновщикНастроек, "ГГУ", глЗначениеПеременной("ОрганизацииГленкорАгрикалчерУкраина") );
	//УстановитьПараметр(КомпоновщикНастроек, "НоменклатураЗПУ", глЗначениеПеременной("НоменклатураЗПУВартаУніверсал") );
	//
	//УстановитьПараметр(КомпоновщикНастроек, "FODirector", глЗначениеПеременной("ДолжностиОрганизацийFODirector") );
	//УстановитьПараметр(КомпоновщикНастроек, "FOManager", глЗначениеПеременной("ДолжностиОрганизацийFOManager") );
	//
	//УстановитьПараметр(КомпоновщикНастроек, "Администрация", глЗначениеПеременной("ПодразделенияАдминистрация") );
	//УстановитьПараметр(КомпоновщикНастроек, "Винница", глЗначениеПеременной("ПодразделенияВинница") );
	//УстановитьПараметр(КомпоновщикНастроек, "Киев", глЗначениеПеременной("ПодразделенияКиев") );
	//УстановитьПараметр(КомпоновщикНастроек, "Николаев", глЗначениеПеременной("ПодразделенияНиколаев") );
	//УстановитьПараметр(КомпоновщикНастроек, "Одеса", глЗначениеПеременной("ПодразделенияОдеса") );
	//УстановитьПараметр(КомпоновщикНастроек, "Харьков", глЗначениеПеременной("ПодразделенияХарьков") );
	//УстановитьПараметр(КомпоновщикНастроек, "Чернигов", глЗначениеПеременной("ПодразделенияЧернигов") );
	//
	//УстановитьПараметр(КомпоновщикНастроек, "Борисов", глЗначениеПеременной("ФизическиеЛицаБорисовОлегОлексійович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Вергун", глЗначениеПеременной("ФизическиеЛицаВергунВадимІгорович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Галунга", глЗначениеПеременной("ФизическиеЛицаГалунгаЄвгенМиколайович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Гнип", глЗначениеПеременной("ФизическиеЛицаГнипАртурТомаш") );
	//УстановитьПараметр(КомпоновщикНастроек, "Дроздов", глЗначениеПеременной("ФизическиеЛицаДроздовДмитроВячеславович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Емец", глЗначениеПеременной("ФизическиеЛицаЄмецьПетроОлександрович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Заборовський", глЗначениеПеременной("ФизическиеЛицаЗаборовськийАнатолійВалентинович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Кисельов", глЗначениеПеременной("ФизическиеЛицаКисельовОлександрОлександрович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Ковбасюк", глЗначениеПеременной("ФизическиеЛицаКовбасюкСергійВікторович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Козяренко", глЗначениеПеременной("ФизическиеЛицаКозяренкоОлегЄвгенович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Корнеев", глЗначениеПеременной("ФизическиеЛицаКорнєєвВалерійІгоревич") );
	//УстановитьПараметр(КомпоновщикНастроек, "Крамаренко", глЗначениеПеременной("ФизическиеЛицаКрамаренкоЄвгенСергійович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Лабунец", глЗначениеПеременной("ФизическиеЛицаЛабунецьЄвгенСергійович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Лациба", глЗначениеПеременной("ФизическиеЛицаЛацибаВалерійВасильович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Лебедь", глЗначениеПеременной("ФизическиеЛицаЛебедьРоманЄфремович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Матчак", глЗначениеПеременной("ФизическиеЛицаМатчакРоманІгорович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Поковба", глЗначениеПеременной("ФизическиеЛицаПоковбаМихайлоПетрович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Пустовит", глЗначениеПеременной("ФизическиеЛицаПустовітСергійВолодимирович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Руденко", глЗначениеПеременной("ФизическиеЛицаРуденкоЮліяВалеріївна") );
	//УстановитьПараметр(КомпоновщикНастроек, "Святишенко", глЗначениеПеременной("ФизическиеЛицаСвятишенкоСергійСергійович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Сивак", глЗначениеПеременной("ФизическиеЛицаСивакВіталійІванович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Сотник", глЗначениеПеременной("ФизическиеЛицаСотникКостянтинЮрійович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Тихонюк", глЗначениеПеременной("ФизическиеЛицаТихонюкСергійОлександрович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Тлумацький", глЗначениеПеременной("ФизическиеЛицаТлумацькийБогданЗіновійович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Устинов", глЗначениеПеременной("ФизическиеЛицаУстиновІгорГеннадійович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Чебиряко", глЗначениеПеременной("ФизическиеЛицаЧебірякоСергійЄвгенійович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Шишкевич", глЗначениеПеременной("ФизическиеЛицаШишкевичОлександрДмитрович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Щербаков", глЗначениеПеременной("ФизическиеЛицаЩербаковРоманВалерійович") );
	//УстановитьПараметр(КомпоновщикНастроек, "Юраш", глЗначениеПеременной("ФизическиеЛицаЮрашЮрійІванович") );
	//УстановитьПараметр(КомпоновщикНастроек, "ВакансияВинница1", Справочники.ФизическиеЛица.ПустаяСсылка() );
	//УстановитьПараметр(КомпоновщикНастроек, "ВакансияНиколаев1", Справочники.ФизическиеЛица.ПустаяСсылка() );
	//УстановитьПараметр(КомпоновщикНастроек, "ВакансияНиколаев2", Справочники.ФизическиеЛица.ПустаяСсылка() );
	//УстановитьПараметр(КомпоновщикНастроек, "ВакансияОдеса1", Справочники.ФизическиеЛица.ПустаяСсылка() );
	//УстановитьПараметр(КомпоновщикНастроек, "ВакансияЧернигов1", Справочники.ФизическиеЛица.ПустаяСсылка() );
	//УстановитьПараметр(КомпоновщикНастроек, "ВакансияЧернигов2", Справочники.ФизическиеЛица.ПустаяСсылка() );
	
КонецПроцедуры

Процедура ПриОткрытии()
	Если Не ЗначениеЗаполнено(ДатаОтчета) Тогда ДатаОтчета = НачалоМесяца( ТекущаяДата() ) - 1; КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаНачалаПериода) Тогда ДатаНачалаПериода = НачалоГода( ДатаОтчета ); КонецЕсли;
	
	лсзВарианты = Новый СписокЗначений;
	Для каждого лВариант Из СхемаКомпоновкиДанных.ВариантыНастроек Цикл лсзВарианты.Добавить( лВариант.Имя, лВариант.Представление ); КонецЦикла;
	ЭлементыФормы.СписокВариантов.СписокВыбора = лсзВарианты;
	ЭлементыФормы.СписокВариантов.Значение = лсзВарианты.Получить(0).Значение;
	
	ЗаполнитьПланыЗакупок();
	
	УстановитьПараметрыОтборы();
КонецПроцедуры

Процедура ДатаОтчетаПриИзменении(Элемент)
	Если 	  Не ЗначениеЗаполнено(ДатаОтчета) Тогда ДатаОтчета = КонецМесяца( ТекущаяДата() );
	ИначеЕсли Не ДатаОтчета = КонецМесяца( ДатаОтчета ) Тогда ДатаОтчета = КонецМесяца( ДатаОтчета ); 
	КонецЕсли;
	Если ДатаОтчета < '20190731' Тогда ДатаОтчета = КонецМесяца( ТекущаяДата() ); КонецЕсли;
	
	УстановитьПараметрыОтборы();
КонецПроцедуры

Процедура СписокВариантовПриИзменении(Элемент)
	УстановитьПараметрыОтборы();
КонецПроцедуры

// ПроверитьПравильностьДоговоров
//
Процедура ПроверитьПравильностьДоговоров()
	лЗапрос = Новый Запрос;
	лЗапрос.УстановитьПараметр("ГГУ", глЗначениеПеременной("ОрганизацииГленкорАгрикалчерУкраина") );
	лЗапрос.УстановитьПараметр("НоменклатураЗПУ", глЗначениеПеременной("НоменклатураЗПУВартаУніверсал") );
	лЗапрос.УстановитьПараметр("ДатаОтчета", КонецМесяца( ДатаОтчета ));
	лЗапрос.Текст =
	"ВЫБРАТЬ
	|	ДокТЧ.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДокТЧ.Ссылка.ДоговорКонтрагента.Подразделение КАК Подразделение,
	|	ДокТЧ.Ссылка.ДоговорКонтрагента.Ответственный КАК Ответственный,
	|	ДокТЧ.Ссылка.ДоговорКонтрагента.Ответственный.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ДокТЧ
	|ГДЕ
	|	ДокТЧ.Ссылка.Проведен
	|	И ДокТЧ.Ссылка.Организация = &ГГУ
	|	И ДокТЧ.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаОтчета, ГОД) И КОНЕЦПЕРИОДА(&ДатаОтчета, МЕСЯЦ)
	|	И НЕ ДокТЧ.Номенклатура = &НоменклатураЗПУ
	|	И (ДокТЧ.Ссылка.ДоговорКонтрагента.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			ИЛИ ДокТЧ.Ссылка.ДоговорКонтрагента.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ИЛИ ДокТЧ.Ссылка.ДоговорКонтрагента.Ответственный.ФизЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТЧ.Ссылка.ДоговорКонтрагента,
	|	ДокТЧ.Ссылка.ДоговорКонтрагента.Подразделение,
	|	ДокТЧ.Ссылка.ДоговорКонтрагента.Ответственный,
	|	ДокТЧ.Ссылка.ДоговорКонтрагента.Ответственный.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокТЧ.Ссылка.ДоговорОтправитель,
	|	ДокТЧ.Ссылка.ДоговорОтправитель.Подразделение,
	|	ДокТЧ.Ссылка.ДоговорОтправитель.Ответственный,
	|	ДокТЧ.Ссылка.ДоговорОтправитель.Ответственный.ФизЛицо
	|ИЗ
	|	Документ.ЦБТ_ДвижениеЗапасов.Товары КАК ДокТЧ
	|ГДЕ
	|	ДокТЧ.Ссылка.Проведен
	|	И НЕ ДокТЧ.Ссылка.ДоговорОтправитель = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	И НЕ ДокТЧ.Ссылка.Организация = &ГГУ
	|	И ДокТЧ.Ссылка.Отправитель ССЫЛКА Справочник.Контрагенты
	|	И ДокТЧ.Ссылка.Получатель ССЫЛКА Справочник.Склады
	|	И ДокТЧ.Ссылка.ДатаРазгрузки МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаОтчета, ГОД) И КОНЕЦПЕРИОДА(&ДатаОтчета, МЕСЯЦ)
	|	И НЕ ДокТЧ.Номенклатура = &НоменклатураЗПУ
	|	И (ДокТЧ.Ссылка.ДоговорОтправитель.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			ИЛИ ДокТЧ.Ссылка.ДоговорОтправитель.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ИЛИ ДокТЧ.Ссылка.ДоговорОтправитель.Ответственный.ФизЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТЧ.Ссылка.ДоговорОтправитель,
	|	ДокТЧ.Ссылка.ДоговорОтправитель.Подразделение,
	|	ДокТЧ.Ссылка.ДоговорОтправитель.Ответственный,
	|	ДокТЧ.Ссылка.ДоговорОтправитель.Ответственный.ФизЛицо
	|";
	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() Цикл
		Если лВыборка.Подразделение = Справочники.Подразделения.ПустаяСсылка() Тогда
			ОбщегоНазначения.СообщитьИнформацию("Не заполнен реквизит 'Подразделение' в договоре - " + лВыборка.ДоговорКонтрагента);
		КонецЕсли;
		Если лВыборка.Ответственный = Справочники.Пользователи.ПустаяСсылка() Тогда
			ОбщегоНазначения.СообщитьИнформацию("Не заполнен реквизит 'Ответственный' в договоре - " + лВыборка.ДоговорКонтрагента);
		КонецЕсли;
		Если лВыборка.ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			ОбщегоНазначения.СообщитьИнформацию("Не заполнен реквизит 'ФизЛицо' для пользователя - " + лВыборка.Ответственный);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ПроверитьПравильностьДоговоров

// ПроверитьПравильностьПланов
//
Процедура ПроверитьПравильностьПланов()
	лЗапрос = Новый Запрос;
	лЗапрос.УстановитьПараметр("ДатаОтчета", КонецМесяца( ДатаОтчета ) );
	лЗапрос.УстановитьПараметр("ГГУ", глЗначениеПеременной("ОрганизацииГленкорАгрикалчерУкраина") );
	лЗапрос.УстановитьПараметр("НоменклатураЗПУ", глЗначениеПеременной("НоменклатураЗПУВартаУніверсал") );
	лЗапрос.УстановитьПараметр("Администрация", глЗначениеПеременной("ПодразделенияАдминистрация") );
	лЗапрос.УстановитьПараметр("Киев", глЗначениеПеременной("ПодразделенияКиев") );
	лЗапрос.УстановитьПараметр("Гнип", глЗначениеПеременной("ФизическиеЛицаГнипАртурТомаш") );
	лЗапрос.УстановитьПараметр("Планы", ПланыЗакупок.Выгрузить() );
	лЗапрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.Работник,
	|	ТЗ.Подразделение,
	|	ТЗ.План,
	|	ТЗ.БонусПоПлану,
	|	ТЗ.Должность,
	|	ТЗ.Фильтр
	|ПОМЕСТИТЬ Планы
	|ИЗ
	|	&Планы КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТЗ.Работник КАК Справочник.ФизическиеЛица) КАК Работник,
	|	ВЫРАЗИТЬ(ТЗ.Должность КАК Справочник.ДолжностиОрганизаций) КАК Должность,
	|	ВЫРАЗИТЬ(ТЗ.Подразделение КАК Справочник.Подразделения) КАК Подразделение,
	|	ТЗ.План,
	|	ТЗ.БонусПоПлану
	|ПОМЕСТИТЬ ПланыПоФилиалам
	|ИЗ
	|	Планы КАК ТЗ
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ТЗ.Фильтр) = ТИП(Справочник.Подразделения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТЗ.Работник КАК Справочник.ФизическиеЛица) КАК Работник,
	|	ВЫРАЗИТЬ(ТЗ.Должность КАК Справочник.ДолжностиОрганизаций) КАК Должность,
	|	ВЫРАЗИТЬ(ТЗ.Подразделение КАК Справочник.Подразделения) КАК Подразделение,
	|	ТЗ.План,
	|	ТЗ.БонусПоПлану
	|ПОМЕСТИТЬ ПланыПоРаботникам
	|ИЗ
	|	Планы КАК ТЗ
	|ГДЕ
	|	НЕ ТИПЗНАЧЕНИЯ(ТЗ.Фильтр) = ТИП(Справочник.Подразделения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДокТЧ.Ссылка.ДоговорКонтрагента.Подразделение = &Администрация
	|			ТОГДА &Киев
	|		ИНАЧЕ ДокТЧ.Ссылка.ДоговорКонтрагента.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ДокТЧ.Ссылка.ДоговорКонтрагента.Подразделение = &Администрация
	|				ИЛИ ДокТЧ.Ссылка.ДоговорКонтрагента.Подразделение = &Киев
	|			ТОГДА &Гнип
	|		ИНАЧЕ ДокТЧ.Ссылка.ДоговорКонтрагента.Ответственный.ФизЛицо
	|	КОНЕЦ КАК Работник,
	|	ДокТЧ.Номенклатура КАК Номенклатура,
	|	ДокТЧ.Ссылка КАК Документ,
	|	СУММА(ДокТЧ.Количество) КАК КоличествоГАУ,
	|	0 КАК КоличествоГГБВ
	|ПОМЕСТИТЬ ДокТЧ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ДокТЧ
	|ГДЕ
	|	ДокТЧ.Ссылка.Проведен
	|	И ДокТЧ.Ссылка.Организация = &ГГУ
	|	И ДокТЧ.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаОтчета, ГОД) И КОНЕЦПЕРИОДА(&ДатаОтчета, МЕСЯЦ)
	|	И НЕ ДокТЧ.Номенклатура = &НоменклатураЗПУ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ДокТЧ.Ссылка.ДоговорКонтрагента.Подразделение = &Администрация
	|			ТОГДА &Киев
	|		ИНАЧЕ ДокТЧ.Ссылка.ДоговорКонтрагента.Подразделение
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДокТЧ.Ссылка.ДоговорКонтрагента.Подразделение = &Администрация
	|				ИЛИ ДокТЧ.Ссылка.ДоговорКонтрагента.Подразделение = &Киев
	|			ТОГДА &Гнип
	|		ИНАЧЕ ДокТЧ.Ссылка.ДоговорКонтрагента.Ответственный.ФизЛицо
	|	КОНЕЦ,
	|	ДокТЧ.Ссылка,
	|	ДокТЧ.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДокТЧ.Ссылка.ДоговорОтправитель.Подразделение = &Администрация
	|			ТОГДА &Киев
	|		ИНАЧЕ ДокТЧ.Ссылка.ДоговорОтправитель.Подразделение
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДокТЧ.Ссылка.ДоговорОтправитель.Подразделение = &Администрация
	|				ИЛИ ДокТЧ.Ссылка.ДоговорОтправитель.Подразделение = &Киев
	|			ТОГДА &Гнип
	|		ИНАЧЕ ДокТЧ.Ссылка.ДоговорОтправитель.Ответственный.ФизЛицо
	|	КОНЕЦ,
	|	ДокТЧ.Номенклатура,
	|	ДокТЧ.Ссылка,
	|	0,
	|	СУММА(ВЫБОР
	|			КОГДА ДокТЧ.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.Возврат)
	|				ТОГДА -ДокТЧ.КоличествоРазгрузка
	|			ИНАЧЕ ДокТЧ.КоличествоРазгрузка
	|		КОНЕЦ)
	|ИЗ
	|	Документ.ЦБТ_ДвижениеЗапасов.Товары КАК ДокТЧ
	|ГДЕ
	|	ДокТЧ.Ссылка.Проведен
	|	И НЕ ДокТЧ.Ссылка.ДоговорОтправитель = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	И НЕ ДокТЧ.Ссылка.Организация = &ГГУ
	|	И ДокТЧ.Ссылка.Отправитель ССЫЛКА Справочник.Контрагенты
	|	И ДокТЧ.Ссылка.Получатель ССЫЛКА Справочник.Склады
	|	И ДокТЧ.Ссылка.ДатаРазгрузки МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаОтчета, ГОД) И КОНЕЦПЕРИОДА(&ДатаОтчета, МЕСЯЦ)
	|	И НЕ ДокТЧ.Номенклатура = &НоменклатураЗПУ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ДокТЧ.Ссылка.ДоговорОтправитель.Подразделение = &Администрация
	|			ТОГДА &Киев
	|		ИНАЧЕ ДокТЧ.Ссылка.ДоговорОтправитель.Подразделение
	|	КОНЕЦ,
	|	ДокТЧ.Номенклатура,
	|	ДокТЧ.Ссылка,
	|	ВЫБОР
	|		КОГДА ДокТЧ.Ссылка.ДоговорОтправитель.Подразделение = &Администрация
	|				ИЛИ ДокТЧ.Ссылка.ДоговорОтправитель.Подразделение = &Киев
	|			ТОГДА &Гнип
	|		ИНАЧЕ ДокТЧ.Ссылка.ДоговорОтправитель.Ответственный.ФизЛицо
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокТЧ.Подразделение,
	|	ДокТЧ.Работник КАК Работник
	|ИЗ
	|	ДокТЧ КАК ДокТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланыПоРаботникам КАК ПланыПоРаботникам
	|		ПО ДокТЧ.Подразделение = ПланыПоРаботникам.Подразделение
	|			И ДокТЧ.Работник = ПланыПоРаботникам.Работник
	|ГДЕ
	|	ПланыПоРаботникам.План ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТЧ.Подразделение,
	|	ДокТЧ.Работник
	|";
	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() Цикл
		ОбщегоНазначения.СообщитьИнформацию("Не задан план для подразделения - '" + лВыборка.Подразделение + "' по сотруднику '" + лВыборка.Работник + "'");
	КонецЦикла;
КонецПроцедуры // ПроверитьПравильностьПланов

// ЗаполнитьПланыЗакупок
//
Процедура ЗаполнитьПланыЗакупок()
	лстрНомераКолонок = Новый Структура("Работник,Подразделение,План,БонусПоПлану,Должность,Фильтр", 1, 2, 3, 4, 5, 6);
	лМакетПланов = ПолучитьМакет("ПланыЗакупок");
	Для лНомСтроки = 2 По 200 Цикл
		лТекст = СокрЛП(лМакетПланов.Область(лНомСтроки, лстрНомераКолонок.Подразделение, лНомСтроки, лстрНомераКолонок.Подразделение).Текст);
		Если лТекст = "" Тогда Прервать; КонецЕсли;
		лНоваяСтрока = ПланыЗакупок.Добавить();
		лНоваяСтрока.Подразделение = Справочники.Подразделения.НайтиПоНаименованию(лТекст, Истина);
		лТекст = СокрЛП(лМакетПланов.Область(лНомСтроки, лстрНомераКолонок.Работник, лНомСтроки, лстрНомераКолонок.Работник).Текст);
		Если лТекст = "" Тогда 
			лНоваяСтрока.Работник = Справочники.ФизическиеЛица.ПустаяСсылка();
		Иначе
			лНоваяСтрока.Работник = Справочники.ФизическиеЛица.НайтиПоНаименованию(лТекст, Истина);
		КонецЕсли;
		лТекст = СокрЛП(лМакетПланов.Область(лНомСтроки, лстрНомераКолонок.План, лНомСтроки, лстрНомераКолонок.План).Текст);
		лНоваяСтрока.План = ?(лТекст = "", 0, Число(лТекст) );
		лТекст = СокрЛП(лМакетПланов.Область(лНомСтроки, лстрНомераКолонок.БонусПоПлану, лНомСтроки, лстрНомераКолонок.БонусПоПлану).Текст);
		лНоваяСтрока.БонусПоПлану = ?(лТекст = "", 0, Число(лТекст) );
		лТекст = СокрЛП(лМакетПланов.Область(лНомСтроки, лстрНомераКолонок.Должность, лНомСтроки, лстрНомераКолонок.Должность).Текст);
		лНоваяСтрока.Должность = Справочники.ДолжностиОрганизаций.НайтиПоНаименованию(лТекст, Истина);
		
		лТекст = СокрЛП(лМакетПланов.Область(лНомСтроки, лстрНомераКолонок.Фильтр, лНомСтроки, лстрНомераКолонок.Фильтр).Текст);
		Если лНоваяСтрока.Должность = глЗначениеПеременной("ДолжностиОрганизацийFODirector") Тогда
			лНоваяСтрока.Фильтр = Справочники.Подразделения.НайтиПоНаименованию(лТекст, Истина);
		Иначе
			лНоваяСтрока.Фильтр = Справочники.ФизическиеЛица.НайтиПоНаименованию(лТекст, Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьПланыЗакупок
