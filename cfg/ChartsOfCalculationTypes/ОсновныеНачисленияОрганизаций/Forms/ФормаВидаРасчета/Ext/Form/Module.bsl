Перем мТабличнаяЧасть;
Перем мСписокПредопределенныхПоказателей;
Перем мНомерВыбираемогоПоказателя;


// Открывает список видов расчета для подбора
Процедура ОткрытьФормуПодбора(ИмяПВР)

	ФормаПодбора = ПланыВидовРасчета[ИмяПВР].ПолучитьФормуВыбора(, ЭтаФорма);
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	ФормаПодбора.Открыть();

КонецПроцедуры

// Составляет описания-расшифровки различных реквизитов
//
// Параметры
//  ИмяОбновляемогоЭлемента - строка, содержит имя описываемого реквизита или имя закладки
//
Процедура ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента)
	
	Если ИмяОбновляемогоЭлемента = "ВидВремени" или ИмяОбновляемогоЭлемента = "ЗакладкаВремя" Тогда
		Если ВидВремени = Перечисления.ВидыВремени.ОтработанноеВПределахНормы Тогда
			РасшифровкаВидовВремени = НСтр("ru='Оплачивается время, отработанное в пределах нормы времени по графику работы и ';uk='Оплачується час, відпрацьований у межах норми часу по графіку роботи і '") + 
			НСтр("ru=' измеряемое целыми днями (сменами). Это такие начисления как оклад по дням или оплата по часовому тарифу.';uk=' що вимірюється цілими днями (змінами). Це такі нарахування як оклад по днях або оплата по часовому тарифу.'");
		ИначеЕсли ВидВремени = Перечисления.ВидыВремени.ОтработанноеСверхНормы Тогда
			РасшифровкаВидовВремени = НСтр("ru='Оплачивается время, отработанное ';uk='Оплачується час, відпрацьований '") + 
			НСтр("ru='сверх нормы времени, например, сверхурочные часы или работа в выходные, нерабочие по графику, дни.';uk='понад норми часу, наприклад, понаднормові години або робота у вихідні, неробочі по графіку, дні.'");
		ИначеЕсли ВидВремени = Перечисления.ВидыВремени.ЦелодневноеНеотработанное Тогда
			РасшифровкаВидовВремени = НСтр("ru='Оплачивается (или не оплачивается) неотработанное время ';uk='Оплачується (або не оплачується) невідпрацьований час '") + 
			НСтр("ru='за пропущенный день (смену). Это такие начисления как, ежегодный отпуск или оплата больничных листов.';uk='за пропущений день (зміну). Це такі як нарахування як, щорічна відпустка або оплата лікарняних листів.'");
		ИначеЕсли ВидВремени = Перечисления.ВидыВремени.ЧасовоеНеотработанное Тогда
			РасшифровкаВидовВремени = НСтр("ru='Оплачивается (или не оплачивается) неотработанное время ';uk='Оплачується (або не оплачується) невідпрацьований час '") + 
			НСтр("ru='за внутрисменное отсутствие, простой.';uk='за внутрішньозмінну відсутність, простій.'");
		ИначеЕсли ВидВремени = Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы Тогда
			РасшифровкаВидовВремени = НСтр("ru='Оплачивается время, отработанное в пределах нормы времени по графику работы и ';uk='Оплачується час, відпрацьований у межах норми часу по графіку роботи і '") + 
			НСтр("ru='измеряемое часами внутри смены.';uk='що вимірюється годинами всередині зміни.'");
		ИначеЕсли ВидВремени = Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы Тогда
			РасшифровкаВидовВремени = НСтр("ru='Регистрируется дополнительная оплата отработанного времени, ';uk='Реєструється додаткова оплата відпрацьованого часу, '") + 
			НСтр("ru='оплачиваемого по тарифным ставкам или по фактической выработке другими видами расчетов. Это такие начисления как, доплата за ночные часы, ';uk='оплачуваного по тарифним ставкам або по фактичному виробітку іншими видами розрахунків. Це такі як нарахування як, доплата за нічні години, '") + 
			НСтр("ru='доплата за совмещение профессий или замещение должности.';uk='доплата за суміщення професій або заміщення посади.'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ для ТЧ "Является базой для"

Процедура ЗаполнитьЯвляетсяБазойДля()
	
	ЯвляетсяБазойДля.Очистить();
	
	Для Каждого ПВР Из ПланыВидовРасчета Цикл
		Выборка = ПВР.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(ПВР) = Тип("ПланВидовРасчетаМенеджер.ВзносыВФонды") Тогда
				Если ПроведениеРасчетов.ИспользуетсяЕСВ() Тогда
					Если НЕ Выборка.Актуальность Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
			Если Выборка.БазовыеВидыРасчета.Найти(ЭтотОбъект.Ссылка) <> Неопределено Тогда
				ЯвляетсяБазойДля.Добавить(Выборка.Ссылка);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЯвляетсяБазойДля(Элемент)
	
	мТабличнаяЧасть = "ЯвляетсяБазойДля";
	ЭлементыФормы.ЯвляетсяБазойДля.ДобавитьСтроку();
	
КонецПроцедуры

Процедура ЗаписатьЯвляетсяБазойДля()

	Для каждого ПВР Из ПланыВидовРасчета Цикл
		
		СписокПВР = ПВР.Выбрать();
		
		Если ТипЗнч(ПВР) = Тип("ПланВидовРасчетаМенеджер.ВзносыВФонды") Тогда
			ЭтоВзносы = Истина;
		Иначе
			ЭтоВзносы = Ложь;
		КонецЕсли;
       		
		Пока СписокПВР.Следующий() Цикл
			
			Если ЭтоВзносы Тогда
				Если НЕ СписокПВР.Ссылка.Актуальность Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ВР = СписокПВР.Ссылка.ПолучитьОбъект();
			ЯвляетсяБазой = ВР.БазовыеВидыРасчета.Найти(ЭтотОбъект.Ссылка);
			Если ЯвляетсяБазой = Неопределено Тогда      
				
				Строка = ЯвляетсяБазойДля.НайтиПоЗначению(ВР.Ссылка);
				Если Строка <> Неопределено Тогда
					ОбъектВР = ВР.БазовыеВидыРасчета.Добавить();
					ОбъектВР.ВидРасчета = ЭтотОбъект.Ссылка;
					ВР.Записать();
					Если ЭтоВзносы Тогда  
						ПроведениеРасчетов.ПроверкаБазыЕСВ(ВР);   
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Строка = ЯвляетсяБазойДля.НайтиПоЗначению(ВР.Ссылка);
				Если Строка = Неопределено Тогда
					ВР.БазовыеВидыРасчета.Удалить(ВР.БазовыеВидыРасчета.Индекс(ЯвляетсяБазой));
					ВР.Записать();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ОбъектКопирования.Предопределенный Тогда
		ТЧ = ВытесняющиеВидыРасчета.Выгрузить();
		ТЧ.ЗаполнитьЗначения(Ложь,"Предопределенный");
		ВытесняющиеВидыРасчета.Загрузить(ТЧ);
	КонецЕсли;
	
	ДоходНДФЛ	= ОбъектКопирования.ДоходНДФЛ;
	
		
	// Скопируем является базой для
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПВР.ВидРасчета КАК ВидРасчета
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		2						  КАК Тип,
	|		ОсновныеНачисления.Ссылка КАК ВидРасчета
	|	ИЗ
	|		ПланВидовРасчета.ОсновныеНачисленияОрганизаций.БазовыеВидыРасчета КАК ОсновныеНачисления
	|	ГДЕ
	|		ОсновныеНачисления.ВидРасчета = &Ссылка
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		1 					КАК Тип,
	|		ВзносыВФонды.Ссылка	КАК ВидРасчета
	|	ИЗ
	|		ПланВидовРасчета.ВзносыВФонды.БазовыеВидыРасчета КАК ВзносыВФонды
	|	ГДЕ
	|	   ВзносыВФонды.ВидРасчета = &Ссылка
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		3 									КАК Тип,
	|		ОтражениеЗарплатыОрганизаций.Ссылка	КАК ВидРасчета
	|	ИЗ
	|		ПланВидовРасчета.ОтражениеЗарплатыОрганизаций.БазовыеВидыРасчета КАК ОтражениеЗарплатыОрганизаций
	|	ГДЕ
	|	   ОтражениеЗарплатыОрганизаций.ВидРасчета = &Ссылка
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		4 						КАК Тип,
	|		СреднийЗаработок.Ссылка	КАК ВидРасчета
	|	ИЗ
	|		ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработок
	|	ГДЕ
	|	   СреднийЗаработок.ВидРасчета = &Ссылка
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		5 							КАК Тип,
	|		УдержанияОрганизаций.Ссылка	КАК ВидРасчета
	|	ИЗ
	|		ПланВидовРасчета.УдержанияОрганизаций.БазовыеВидыРасчета КАК УдержанияОрганизаций
	|	ГДЕ
	|	   УдержанияОрганизаций.ВидРасчета = &Ссылка
	|	)КАК ПВР
	|УПОРЯДОЧИТЬ ПО ПВР.Тип,
	|				ПВР.ВидРасчета.Ссылка.Наименование
	|";
	Запрос.УстановитьПараметр("Ссылка", ОбъектКопирования.Ссылка);
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета");
	ЯвляетсяБазойДля.ЗагрузитьЗначения(Массив);
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		
		Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ПриКопировании(ПараметрОбъектКопирования)
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(СпособРасчета) И Не ПроизвольнаяФормулаРасчета Тогда
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(КатегорияРасчета) Тогда
			КатегорияРасчета	= Перечисления.КатегорииРасчетов.ЗависимоеПервогоУровня;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДоходНДФЛ) Тогда
			ДоходНДФЛ			= Справочники.ВидыДоходовНДФЛ.Код01;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
			СчетУчета			= ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВидВремени) Тогда
			ВидВремени = Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы;
		КонецЕсли;
		
	КонецЕсли;
	
	
	// Для предопределённых элементов запрещено редактирование способа расчета 
	ЭлементыФормы.СпособРасчетаНачисления.ТолькоПросмотр = Предопределенный ИЛИ ПроизвольнаяФормулаРасчета;
	ЭлементыФормы.ПроизвольнаяФормулаРасчета.Доступность = Не Предопределенный;
	ЭлементыФормы.ПроизвольнаяФормулаРасчета1.Доступность = Не Предопределенный;
	ЭлементыФормы.ЗадатьФормулу.Видимость = НЕ Предопределенный И ПроизвольнаяФормулаРасчета;

	// Доступные способы расчета - все начисления
	СписокВозможныхСпособовРасчета = ПроведениеРасчетов.ПолучитьСписокОсновныхВариантовНачисленийОрганизации();
	ЭлементыФормы.СпособРасчетаНачисления.ДоступныеЗначения = СписокВозможныхСпособовРасчета;
	Если СписокВозможныхСпособовРасчета.НайтиПоЗначению(СпособРасчета) = Неопределено Тогда
		СпособРасчетаНачисления = Перечисления.СпособыРасчетаОплатыТруда.ПустаяСсылка();
		ЭлементыФормы.СпособРасчетаНачисления.ОтметкаНезаполненного = Ложь;
	Иначе
		СпособРасчетаНачисления = СписокВозможныхСпособовРасчета.НайтиПоЗначению(СпособРасчета).Значение;
	КонецЕсли;

	// установим текст формулы расчета
	Элементыформы.СпособРасчетаПредставление.УстановитьТекст(ПроведениеРасчетов.ВизуализироватьФормулуРасчета(ЭтотОбъект, "HTML"));
	
	// установим видимость панелей в описании формулы расчета
	РаботаСДиалогами.УстановитьОтборыИСверткуПоказателей(ЭлементыФормы, Показатели, ПроизвольнаяФормулаРасчета);

	УстановитьВидимость();
	
	// Отобразить нужные поля и генерация формулы.
	//РаботаСДиалогами.ОтобразитьПоляПоказателейСхемМотивации(ЭтаФорма);
	
	// Установим значение переключателя "ОчередностьНачисления" и список выбора для реквизита "КатегорияРасчета"
	СписокВыбораКатегорииРасчета = Новый СписокЗначений;
	СписокВыбораКатегорииРасчета.Добавить(Перечисления.КатегорииРасчетов.ЗависимоеПервогоУровня);
	СписокВыбораКатегорииРасчета.Добавить(Перечисления.КатегорииРасчетов.ЗависимоеВторогоУровня);
	СписокВыбораКатегорииРасчета.Добавить(Перечисления.КатегорииРасчетов.ЗависимоеТретьегоУровня);
	ЭлементыФормы.КатегорияРасчета.СписокВыбора = СписокВыбораКатегорииРасчета;
	ЭлементыФормы.КатегорияРасчета.ТолькоПросмотр = КатегорияРасчета = Перечисления.КатегорииРасчетов.Первичное;
	ЭлементыФормы.ОчередностьНачисления1.ВыбираемоеЗначение = ?(КатегорияРасчета = Перечисления.КатегорииРасчетов.Первичное,Перечисления.КатегорииРасчетов.ЗависимоеПервогоУровня,КатегорияРасчета);
	
	// контексно-зависимое управление доступностью
	ОпределитьДоступностьРеквизитов();	
	ОбновитьПредставлениеЭлемента("ЗакладкаВремя");
	
	ЭлементыФормы.НадписьТекстБукваВТабеле.Заголовок = ОбозначениеВТабелеУчетаРабочегоВремени.ПолноеНаименование;
	
	РаботаСДиалогами.СоздатьКнопкуПодбораДляПВР(Ссылка, ЭтаФорма, Истина, Истина);
	Если НЕ ЭтоНовый() Тогда
		ЗаполнитьЯвляетсяБазойДля();
	КонецЕсли;	
	НДФЛНаименование = ДоходНДФЛ.Наименование;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если Ссылка = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СтажВДнях Или
    	Ссылка = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СтажВЧасах Тогда
		Возврат;
	КонецЕсли;	
	
	// Проверка правильности настройки вида расчета
	РезультатПроверки = ПроведениеРасчетов.ПроверитьНастройкуВидаРасчета(ЭтотОбъект, Отказ);
	Если Не Отказ Тогда
		Если Не ПустаяСтрока(РезультатПроверки) Тогда
			Ответ = Вопрос(РезультатПроверки + НСтр("ru=' Записать вид расчета?';uk=' Записати вид розрахунку?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			// отказались от записи
			Отказ = Ответ <> КодВозвратаДиалога.Да;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписи()
	ЗаписатьЯвляетсяБазойДля();
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВыслугаЛет И ВидСтажа = Справочники.ВидыСтажа.ПустаяСсылка() Тогда
		Сообщить(НСтр("ru='Способ учета стажа не задан, будет изменен на ';uk='Спосіб обліку стажу не заданий, буде змінений на '") + """"+  Строка(Справочники.ВидыСтажа.ОбщийТрудовойСтаж) + """");
		ВидСтажа = Справочники.ВидыСтажа.ОбщийТрудовойСтаж;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если мТабличнаяЧасть = "БазовыеВидыРасчета" Тогда
		
		Если БазовыеВидыРасчета.Найти(ЗначениеВыбора,"ВидРасчета") = Неопределено Тогда
			БазовыеВидыРасчета.Добавить().ВидРасчета = ЗначениеВыбора;
		КонецЕсли;
		
	ИначеЕсли мТабличнаяЧасть = "ВедущиеВидыРасчета"  Тогда
		
		Если ВедущиеВидыРасчета.Найти(ЗначениеВыбора,"ВидРасчета") = Неопределено Тогда
			ВедущиеВидыРасчета.Добавить().ВидРасчета = ЗначениеВыбора;
		КонецЕсли;
		
	ИначеЕсли мТабличнаяЧасть = "ВытесняющиеВидыРасчета"  Тогда
		
		Если ВытесняющиеВидыРасчета.Найти(ЗначениеВыбора,"ВидРасчета") = Неопределено Тогда
			ВытесняющиеВидыРасчета.Добавить().ВидРасчета = ЗначениеВыбора;
		КонецЕсли;
		
	ИначеЕсли мТабличнаяЧасть = "ЯвляетсяБазойДля"  Тогда
		
		Если ЯвляетсяБазойДля.НайтиПоЗначению(ЗначениеВыбора.Ссылка) = Неопределено Тогда
			ЯвляетсяБазойДля.Добавить(ЗначениеВыбора.Ссылка);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ПоказателиСхемМотивации") Тогда
		Если мНомерВыбираемогоПоказателя = 0 Тогда
			Показатель1 = ЗначениеВыбора;
		ИначеЕсли мНомерВыбираемогоПоказателя = 1 Тогда
			Показатель2 = ЗначениеВыбора;
		ИначеЕсли мНомерВыбираемогоПоказателя = 2 Тогда
			Показатель3 = ЗначениеВыбора;
		ИначеЕсли мНомерВыбираемогоПоказателя = 3 Тогда
			Показатель4 = ЗначениеВыбора;
		ИначеЕсли мНомерВыбираемогоПоказателя = 4 Тогда
			Показатель5 = ЗначениеВыбора;
		КонецЕсли;
		
		// Установим видимость страницы "Время" 
		ОпределитьДоступностьРеквизитов();	
		
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ВидыСтажа") Тогда
		ВидСтажа = ЗначениеВыбора;
		Элементыформы.СпособРасчетаПредставление.УстановитьТекст(ПроведениеРасчетов.ВизуализироватьФормулуРасчета(ЭтотОбъект, "HTML"));		
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОпределитьДоступностьРеквизитов()

	ЭтоРасчетПоТарифнойСтавке = СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке						
							Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням
							Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам
							Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке;
							
	ЭлементыФормы.РамкаГруппыРасчетПоТарифнымСтавкам.Видимость = ЭтоРасчетПоТарифнойСтавке;
	ЭлементыФормы.ТребуетВводаТарифногоРазряда.Видимость = ЭтоРасчетПоТарифнойСтавке;
	ЭлементыФормы.ТарифнаяСтавкаОтОбратного.Видимость = ЭтоРасчетПоТарифнойСтавке;
								
							
	Если Не ЭтоРасчетПоТарифнойСтавке и ТребуетВводаТарифногоРазряда Тогда
		ТребуетВводаТарифногоРазряда = Ложь
	КонецЕсли;
    Если Не ЭтоРасчетПоТарифнойСтавке и ТарифнаяСтавкаОтОбратного Тогда
		ТарифнаяСтавкаОтОбратного = Ложь
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимость()
	Если ЭтоОтпуск Тогда
		ЭлементыФормы.НадписьВидОтпуска.Видимость = Истина;
		ЭлементыФормы.ВидОтпуска.Видимость = Истина;
	Иначе
		Если ЗначениеЗаполнено(ВидОтпуска) Тогда
			ВидОтпуска = Справочники.ВидыОтпусков.ПустаяСсылка();
		КонецЕсли;	
		ЭлементыФормы.НадписьВидОтпуска.Видимость = Ложь;
		ЭлементыФормы.ВидОтпуска.Видимость = Ложь;
	КонецЕсли;
	
	Если Ссылка = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СтажВДнях Или
    	Ссылка = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СтажВЧасах Тогда
		
		ЭлементыФормы.ПанельСпискиВидовРасчета.Страницы.Расчет.Видимость = Ложь;
		ЭлементыФормы.ПанельСпискиВидовРасчета.Страницы.Учет.Видимость = Ложь;
		ЭлементыФормы.ПанельСпискиВидовРасчета.Страницы.Время.Видимость = Ложь;
		
		ЭлементыФормы.ВедущиеВидыРасчета.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Доступность = Ложь;
		ЭлементыФормы.ЯвляетсяБазойДля.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельЯвляетсяБазойДля.Доступность = Ложь;
		ЭлементыФормы.ВытесняющиеВидыРасчета.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельВытесняющиеВидыРасчета.Доступность = Ложь;
		
	КонецЕсли;	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ПоказателиВидовОплатыТрудаНачалоВыбора(Элемент, СтандартнаяОбработка)
			
	РаботаСДиалогами.НачалоВыбораСтатьяНалоговойДекларации(Элемент, СтандартнаяОбработка, 
			Перечисления.ВидыНалоговыхДеклараций.ОтчетПоТруду);

КонецПроцедуры

Процедура ВидИспользованияРабочегоВремениНачалоВыбора(Элемент, СтандартнаяОбработка)
			
	РаботаСДиалогами.НачалоВыбораСтатьяНалоговойДекларации(Элемент, СтандартнаяОбработка, 
			Перечисления.ВидыНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени);
			
КонецПроцедуры

Процедура ДоходНДФЛПриИзменении(Элемент)
		
	ОпределитьДоступностьРеквизитов();
	НДФЛНаименование = ДоходНДФЛ.Наименование;
	
КонецПроцедуры

Процедура ПереключательОчередностьНачисленияПриИзменении()
	
	ЭлементыФормы.КатегорияРасчета.ТолькоПросмотр = КатегорияРасчета = Перечисления.КатегорииРасчетов.Первичное;
	
КонецПроцедуры //ПереключательОчередностьНачисленияПриИзменении

Процедура КатегорияРасчетаПриИзменении()
	
	ЭлементыФормы.ОчередностьНачисления1.ВыбираемоеЗначение = ?(КатегорияРасчета = Перечисления.КатегорииРасчетов.Первичное,Перечисления.КатегорииРасчетов.ЗависимоеПервогоУровня,КатегорияРасчета);

КонецПроцедуры // КатегорияРасчетаПриИзменении

Процедура ВидВремениПриИзменении(Элемент)
	ОбновитьПризнакиУчетаВремени();
	ОбновитьПредставлениеЭлемента(Элемент.Имя);
	//СформироватьСписокВозможныхОбозначений();
	//УстановитьЗначениеОбозначенияВТабелеУчетаРабочегоВремени();
КонецПроцедуры

Процедура ЭтоОтпускПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры


// подбирает и проставляет показатели в зависимости о способа расчета
Процедура ПодобратьПоказатели()
	
	
КонецПроцедуры //ПодобратьПоказатели

//Процедура - вызывается при нажатие на HTML поле СпособРасчетаПредставление
//
Процедура HTMLСпособРасчетаПредставлениеonclick(Элемент, pEvtObj)
	
	htmlElement = pEvtObj.srcElement;
	
	
	Если Лев(htmlElement.id,4) = "Staj" Тогда
		Форма = Справочники.ВидыСтажа.ПолучитьФормуВыбора();
		
		Форма.ВладелецФормы = ЭтаФорма;
		Форма.ОткрытьМодально();					
		
		pEvtObj.returnValue = Ложь;

	КонецЕсли;


КонецПроцедуры //HTMLСпособРасчетаПредставлениеonclick



Процедура ОбозначениеВТабелеУчетаРабочегоВремениПриИзменении(Элемент)
	
	ЭлементыФормы.НадписьТекстБукваВТабеле.Заголовок = ОбозначениеВТабелеУчетаРабочегоВремени.ПолноеНаименование;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ТЧ Показатели

Процедура ПоказателиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура ПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ТЧ БазовыеВидыРасчета

// Не является ошибкой проверки конфигурации - Обработчик устанавливается динамически методом "Действие"
// в процедуре "СоздатьКнопкуПодбораДляПВР" общего модуля "РаботаСДиалогами"
// 
Процедура КоманднаяПанельБазовыеВидыРасчетаПодборПодМеню(Кнопка)
	
	мТабличнаяЧасть = "БазовыеВидыРасчета";
	ОткрытьФормуПодбора(Кнопка.Имя);
	
КонецПроцедуры

// Не является ошибкой проверки конфигурации - Обработчик устанавливается динамически
//
Процедура КоманднаяПанельБазовыеВидыРасчетаПодбор(Кнопка)
	
	мТабличнаяЧасть = "БазовыеВидыРасчета";
	
	Для каждого СтрокаКолекции Из Метаданные().БазовыеВидыРасчета Цикл
		
		ОткрытьФормуПодбора(СтрокаКолекции.Имя);
		Прервать;
		
	КонецЦикла; 
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ТЧ ЯвляетсяБазойДля

// Не является ошибкой проверки конфигурации - Обработчик устанавливается динамически методом "Действие"
// в процедуре "СоздатьКнопкуПодбораДляПВР" общего модуля "РаботаСДиалогами"
// 
Процедура КоманднаяПанельЯвляетсяБазойДляПодМеню(Кнопка)
	
	мТабличнаяЧасть = "ЯвляетсяБазойДля";
	ОткрытьФормуПодбора(Кнопка.Имя);
	
КонецПроцедуры

// Не является ошибкой проверки конфигурации - Обработчик устанавливается динамически методом "Действие"
// в процедуре "СоздатьКнопкуПодбораДляПВР" общего модуля "РаботаСДиалогами"
// 
Процедура КоманднаяПанельЯвляетсяБазойДляПодбор(Кнопка)
	
	мТабличнаяЧасть = "ЯвляетсяБазойДля";
	
	////Для каждого СтрокаКолекции Из Метаданные().ЯвляетсяБазойДля Цикл
	////	
	////	ОткрытьФормуПодбора(СтрокаКолекции.Имя);
	////	Прервать;
	////	
	////КонецЦикла; 
	
КонецПроцедуры

// Не является ошибкой проверки конфигурации - Обработчик устанавливается динамически
//
Процедура КоманднаяПанельЯвляетсяБазойДля(Кнопка)
	
	мТабличнаяЧасть = "ЯвляетсяБазойДля";
	ОткрытьФормуПодбора("ВзносыВФонды");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ТЧ ВедущиеВидыРасчета

// Не является ошибкой проверки конфигурации - Обработчик устанавливается динамически методом "Действие"
// в процедуре "СоздатьКнопкуПодбораДляПВР" общего модуля "РаботаСДиалогами"
// 
Процедура КоманднаяПанельВедущиеВидыРасчетаПодМеню(Кнопка)
	
	мТабличнаяЧасть = "ВедущиеВидыРасчета";
	ОткрытьФормуПодбора(Кнопка.Имя);
	
КонецПроцедуры

// Не является ошибкой проверки конфигурации - Обработчик устанавливается динамически
//
Процедура КоманднаяПанельВедущиеВидыРасчетаПодбор(Кнопка)
	
	мТабличнаяЧасть = "ВедущиеВидыРасчета";
	
	Для каждого СтрокаКолекции Из Метаданные().БазовыеВидыРасчета Цикл
		
		ОткрытьФормуПодбора(СтрокаКолекции.Имя);
		Прервать;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ВедущиеВидыРасчетаВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	КоллекцияБазовыхВидовРасчета = Метаданные.ПланыВидовРасчета[Метаданные().Имя].БазовыеВидыРасчета;
	
	Если КоллекцияБазовыхВидовРасчета.Количество() = 1 Тогда
		Элемент.Значение = ЭлементыФормы.ВедущиеВидыРасчета.Колонки.ВидРасчета.ЭлементУправления.ОграничениеТипа.ПривестиЗначение(Элемент.Значение);		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельВедущиеВидыРасчетаЗаполнить(Кнопка)
	
	Если Модифицированность() Тогда	
		Если Вопрос(НСтр("ru='Перед заполнением необходимо записать. Записать вид расчета?';uk='Перед заповненням необхідно записати. Записати вид розрахунку?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Нет Тогда
			// отказались от записи
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Записать();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамВидРасчета", Ссылка);
	ТекстЗапроса = "
	|// Правило 1: Все Базовые должны быть прописаны в ведущих
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Базовые.ВидРасчета КАК ВидРасчета
	|ИЗ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.БазовыеВидыРасчета КАК Базовые
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВедущиеВидыРасчета КАК Ведущие
	|ПО 	Ведущие.Ссылка = &парамВидРасчета
	|	И	Базовые.ВидРасчета = Ведущие.ВидРасчета 
	|
	|ГДЕ 	Базовые.Ссылка = &парамВидРасчета
	|	И	Базовые.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|	И	Ведущие.ВидРасчета ЕСТЬ NULL  // только те которых не хватает
	|
	|
	|// Правило 2: Все ведущие расчеты базовых текущего ВР должны быть прописаны в списке ведущих текущего ВР	
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БазовыеВедущие.ВидРасчета КАК ВидРасчета
	|ИЗ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.БазовыеВидыРасчета КАК Базовые
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВедущиеВидыРасчета КАК БазовыеВедущие
	|ПО 	Базовые.ВидРасчета = БазовыеВедущие.Ссылка 
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВедущиеВидыРасчета КАК Ведущие
	|ПО 	Ведущие.Ссылка = &парамВидРасчета
	|	И	БазовыеВедущие.ВидРасчета = Ведущие.ВидРасчета 
	|
	|ГДЕ 	Базовые.Ссылка = &парамВидРасчета
	|	И	БазовыеВедущие.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|	И	Ведущие.ВидРасчета ЕСТЬ NULL  // только те которых не хватает
	|";
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		СтрокаВедущие = ВедущиеВидыРасчета.Добавить();
		СтрокаВедущие.ВидРасчета = Выборка.ВидРасчета;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ТЧ ВытесняющиеВидыРасчета

// Не является ошибкой проверки конфигурации - Обработчик устанавливается динамически
//
Процедура КоманднаяПанельВытесняющиеВидыРасчетаПодбор(Кнопка)
	
	мТабличнаяЧасть = "ВытесняющиеВидыРасчета";
	ОткрытьФормуПодбора(Метаданные().Имя);
	
КонецПроцедуры

Процедура ЯвляетсяБазойДляПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Ячейки.ВидРасчета.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Ячейки.ПВРСтр.УстановитьТекст(СтрокаТабличнойЧасти.Ячейки.ВидРасчета.Значение.Метаданные().Имя);
		
	КонецЦикла;
	
КонецПроцедуры


Процедура РегламентированныйСпособРасчетаПриИзменении(Элемент)
	
	ЭлементыФормы.СпособРасчетаНачисления.ТолькоПросмотр = ПроизвольнаяФормулаРасчета;
	ЭлементыФормы.ЗадатьФормулу.Видимость = НЕ Предопределенный И ПроизвольнаяФормулаРасчета;

	Если ПроизвольнаяФормулаРасчета Тогда
		СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула;
		мБылСпособРасчетаНачисления = СпособРасчетаНачисления; // запомним значение
		СпособРасчетаНачисления = Перечисления.СпособыРасчетаОплатыТруда.ПустаяСсылка();
		ЭлементыФормы.СпособРасчетаНачисления.ОтметкаНезаполненного = Ложь;
	Иначе
		СпособРасчетаНачисления = мБылСпособРасчетаНачисления; // восстановим предыдущее значение
		Если Не ЗначениеЗаполнено(СпособРасчетаНачисления) Тогда
			СпособРасчетаНачисления = Перечисления.СпособыРасчетаОплатыТруда.Процентом;	
		КонецЕсли;
		СпособРасчета = СпособРасчетаНачисления;
		ЭлементыФормы.СпособРасчетаНачисления.ОтметкаНезаполненного = Не ЗначениеЗаполнено(СпособРасчетаНачисления);
	КонецЕсли;
	
	// установим описание формулы расчета
	Элементыформы.СпособРасчетаПредставление.УстановитьТекст(ПроведениеРасчетов.ВизуализироватьФормулуРасчета(ЭтотОбъект, "HTML"));
	// установим видимость панелей в описании формулы расчета
	РаботаСДиалогами.УстановитьОтборыИСверткуПоказателей(ЭлементыФормы, Показатели, ПроизвольнаяФормулаРасчета);
	
	ОпределитьДоступностьРеквизитов();
	
КонецПроцедуры

Процедура ЗадатьФормулуНажатие(Элемент)
	
	РаботаСДиалогами.ОткрытьФормуРедактированияФормулы(ЭтаФорма, Показатели, Наименование, ФормулаРасчета, Ссылка, "ПлановыеНачисленияРаботниковОрганизаций");
	
КонецПроцедуры

Процедура СпособРасчетаНачисленияПриИзменении(Элемент)
	
	СпособРасчета = Элемент.Значение;

	Элементыформы.СпособРасчетаПредставление.УстановитьТекст(ПроведениеРасчетов.ВизуализироватьФормулуРасчета(ЭтотОбъект, "HTML"));
	
	ОбработатьИзменениеФормулыСпособаРасчета();
	
	ОпределитьДоступностьРеквизитов();
	
КонецПроцедуры

Процедура ОбработатьИзменениеФормулыСпособаРасчета()
														
	ЭтоРасчетПоТарифнойСтавке = СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке						
							Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням
							Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам
							Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке;
							
										
	
	Если Не ЭтоРасчетПоТарифнойСтавке и ТребуетВводаТарифногоРазряда Тогда
		ТребуетВводаТарифногоРазряда = Ложь
	КонецЕсли;
    Если Не ЭтоРасчетПоТарифнойСтавке и ТарифнаяСтавкаОтОбратного Тогда
		ТарифнаяСтавкаОтОбратного = Ложь
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		Если ИмяСобытия = "ВводФормулыРасчета" и Источник = ЭтаФорма Тогда
			ПроведениеРасчетов.УстановитьПараметрыВидаРасчета(Параметр, ЭтотОбъект, Элементыформы);
			РаботаСДиалогами.УстановитьОтборыИСверткуПоказателей(ЭлементыФормы, Показатели, ПроизвольнаяФормулаРасчета);
			ОбработатьИзменениеФормулыСпособаРасчета();
		КонецЕсли;
КонецПроцедуры

