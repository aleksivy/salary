////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТабличнаяЧасть;
Перем мСписокВозможныхКатегорийРасчета;

// Переменные для запоминания значений реквизитов до очистки значения
Перем мБылаОчередностьРасчета;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

// Открывает список видов расчета для подбора
Процедура ОткрытьФормуПодбора(ИмяПВР)
	
	ФормаПодбора = ПланыВидовРасчета[ИмяПВР].ПолучитьФормуВыбора(, ЭтаФорма);
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	ФормаПодбора.мМассивВыбранныхЗначений	= ЭтаФорма[мТабличнаяЧасть].ВыгрузитьКолонку("ВидРасчета");
	ФормаПодбора.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ЗадатьФормулуНажатие(Элемент)
	
	РаботаСДиалогами.ОткрытьФормуРедактированияФормулы(ЭтаФорма, Показатели, Наименование, ФормулаРасчета, Ссылка, "ПлановыеУдержанияРаботников");
	
КонецПроцедуры

Процедура ОчередностьУдержаниеПриИзменении(Элемент)
	
	ЭлементыФормы.ОчередностьРасчета.ТолькоПросмотр = ЭтоПервичноеУдержание;
	Если ЭтоПервичноеУдержание Тогда
		КатегорияРасчета = Перечисления.КатегорииРасчетов.Первичное;
		мБылаОчередностьРасчета = ОчередностьРасчета; // запомним значение
		ОчередностьРасчета = Перечисления.КатегорииРасчетов.ПустаяСсылка();
		ЭлементыФормы.ОчередностьРасчета.ОтметкаНезаполненного = Ложь;
	Иначе
		ОчередностьРасчета = мБылаОчередностьРасчета; // восстановим предыдущее значение
		Если Не ЗначениеЗаполнено(ОчередностьРасчета) Тогда
			ОчередностьРасчета = Перечисления.КатегорииРасчетов.ЗависимоеПервогоУровня;	
		КонецЕсли;
		КатегорияРасчета = ОчередностьРасчета;
		ЭлементыФормы.ОчередностьРасчета.ОтметкаНезаполненного = Не ЗначениеЗаполнено(ОчередностьРасчета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчередностьРасчетаПриИзменении(Элемент)
	
	КатегорияРасчета = Элемент.Значение;
	
КонецПроцедуры

Процедура ОчередностьРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлементСписка = ВыбратьИзСписка(мСписокВозможныхКатегорийРасчета,Элемент,мСписокВозможныхКатегорийРасчета.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		КатегорияРасчета = Элемент.Значение;
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - вызывается при открытии формы
Процедура ПриОткрытии()

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПодМенюБазовыхВидовРасчета",Новый Действие("КоманднаяПанельБазовыеВидыРасчетаПодборПодМеню"));
	СтруктураДействий.Вставить("КнопкаБазовыхВидовРасчета",Новый Действие("КоманднаяПанельБазовыеВидыРасчетаПодбор"));
	РаботаСДиалогами.СоздатьКнопкуПодбораДляПВР(Ссылка, ЭтаФорма);
	
	Если ЭтоНовый() Тогда

		// Инициализация реквизитов для нового объекта
		Если НЕ ЗначениеЗаполнено(СпособРасчета) Тогда
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула;
			ПроизвольнаяФормулаРасчета = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КатегорияРасчета) Тогда
			КатегорияРасчета = Перечисления.КатегорииРасчетов.Первичное;
		КонецЕсли;		
		
	КонецЕсли;
	
	// Заполним реквизиты формы, обслуживающие работу переключателей
	ЭтоПервичноеУдержание = КатегорияРасчета = Перечисления.КатегорииРасчетов.Первичное;
	
	// Установим доступность ЭУ в зависимости от значений реквизиов
	ЭлементыФормы.ОчередностьРасчета.ТолькоПросмотр = ЭтоПервичноеУдержание;
	
	// Для предопределённых элементов запрещено редактирование 
	ЭлементыФормы.ОчередностьУдержание.Доступность		= Не Предопределенный;
	ЭлементыФормы.ОчередностьУдержание1.Доступность 	= Не Предопределенный;
	ЭлементыФормы.ЗадатьФормулу.Доступность 			= Не Предопределенный;
	
	// список возможных значений категории расчета
	мСписокВозможныхКатегорийРасчета = Новый СписокЗначений;
	мСписокВозможныхКатегорийРасчета.Добавить(Перечисления.КатегорииРасчетов.ЗависимоеПервогоУровня);
	мСписокВозможныхКатегорийРасчета.Добавить(Перечисления.КатегорииРасчетов.ЗависимоеВторогоУровня);
	мСписокВозможныхКатегорийРасчета.Добавить(Перечисления.КатегорииРасчетов.ЗависимоеТретьегоУровня);
	ЭлементыФормы.ОчередностьРасчета.ДоступныеЗначения = мСписокВозможныхКатегорийРасчета;
	Если мСписокВозможныхКатегорийРасчета.НайтиПоЗначению(КатегорияРасчета) = Неопределено Тогда
		ОчередностьРасчета = Перечисления.КатегорииРасчетов.ПустаяСсылка();
		ЭлементыФормы.ОчередностьРасчета.ОтметкаНезаполненного = Ложь;
	Иначе
		ОчередностьРасчета = мСписокВозможныхКатегорийРасчета.НайтиПоЗначению(КатегорияРасчета).Значение;
	КонецЕсли;

	// установим текст формулы расчета
	Элементыформы.СпособРасчетаПредставление.УстановитьТекст(ПроведениеРасчетов.ВизуализироватьФормулуРасчета(ЭтотОбъект, "HTML"));
	
	// установим видимость панелей в описании формулы расчета
	РаботаСДиалогами.УстановитьОтборыИСверткуПоказателей(ЭлементыФормы, Показатели, ПроизвольнаяФормулаРасчета);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВводФормулыРасчета" и Источник = ЭтаФорма Тогда
		
		ПроведениеРасчетов.УстановитьПараметрыВидаРасчета(Параметр, ЭтотОбъект, ЭлементыФормы);
		РаботаСДиалогами.УстановитьОтборыИСверткуПоказателей(ЭлементыФормы, Показатели, ПроизвольнаяФормулаРасчета);
		
	ИначеЕсли ИмяСобытия = "ПодборОтменаВыбора" Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидРасчета", Параметр);
		НайденныеСтроки = Источник.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			Источник.Удалить(ТекСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью вида расчета
//
Процедура ПередЗаписью(Отказ)
	
	// Проверка правильности настройки вида расчета.
	Если Модифицированность Тогда
		
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		
		РаботаСДиалогами.ПроверитьПВРНаПустыеСтрокиВТЧ(ЭтотОбъект);
		РезультатПроверки = ПроведениеРасчетов.ПроверитьНастройкуВидаРасчета(ЭтотОбъект, Отказ, Ложь);
		Если не Отказ Тогда
			Если не ПустаяСтрока(РезультатПроверки) Тогда
				ТекстВопроса = РезультатПроверки + НСтр("ru=' Записать вид расчета?';uk=' Записати вид розрахунку?'");
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,);
				Если Ответ <> КодВозвратаДиалога.Да Тогда
					Отказ = Ответ <> КодВозвратаДиалога.Да;
				КонецЕсли; 
			КонецЕсли;
		Иначе	
			ОбработкаКомментариев.ДобавитьСообщение(НСтр("ru='Удержание не записано!';uk='Утримання не записано!'"), Перечисления.ВидыСообщений.Информация);
		КонецЕсли;
		
		ОбработкаКомментариев.ПоказатьСообщения();
		
	КонецЕсли;
	
КонецПроцедуры //ПередЗаписью

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если мТабличнаяЧасть = "БазовыеВидыРасчета" Тогда
		
		Если БазовыеВидыРасчета.Найти(ЗначениеВыбора,"ВидРасчета") = Неопределено Тогда
			БазовыеВидыРасчета.Добавить().ВидРасчета = ЗначениеВыбора;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ТЧ БазовыеВидыРасчета

Процедура КоманднаяПанельБазовыеВидыРасчетаПодборПодМеню(Кнопка)
	
	мТабличнаяЧасть = "БазовыеВидыРасчета";
	ОткрытьФормуПодбора(Кнопка.Имя);
	
КонецПроцедуры

Процедура КоманднаяПанельБазовыеВидыРасчетаПодбор(Кнопка)
	
	мТабличнаяЧасть = "БазовыеВидыРасчета";
	
	Для каждого СтрокаКоллекции Из Метаданные().БазовыеВидыРасчета Цикл
		
		ОткрытьФормуПодбора(СтрокаКоллекции.Имя);
		Прервать;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура БазовыеВидыРасчетаПередУдалением(Элемент, Отказ)
	
	Если Не Отказ Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Оповестить("ПодборОтменаВыбора", ДанныеСтроки.ВидРасчета, Элемент.Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура БазовыеВидыРасчетаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ПодборВыбор", ДанныеСтроки.ВидРасчета, Элемент.Значение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТП Показатели

Процедура ПоказателиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура ПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мБылаОчередностьРасчета = Перечисления.КатегорииРасчетов.ПустаяСсылка();

