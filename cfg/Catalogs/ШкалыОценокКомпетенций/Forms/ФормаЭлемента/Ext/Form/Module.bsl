
Перем ВозможностьИзменений;    // Булево. Определяет возможность изменения шкалы оценок. 



///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Проверяет, введены ли оценки.
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	// Проверить заполнения шкалы оценками.
	НаборОценок = Справочники.СоставОценочныхШкалКомпетенций.Выбрать(,ЭтотОбъект.Ссылка,,);
	
	Если НаборОценок.Следующий() = Ложь Тогда
		Ответ = Вопрос (НСтр("ru='Не введен список оценок для данной шкалы. Шкалой невозможно будет пользоваться. Вернуться к редактированию?';uk='Не введений список оцінок для даної шкали. Шкалою неможливо буде користуватися. Повернутися до редагування?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да,);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры //  ПередЗакрытием(Отказ, СтандартнаяОбработка)


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Проверяет, записан элемент справочника или нет.
Процедура ТабличноеПолеОценокПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработчикОжиданияТабличноеПолеОценокПриАктивизацииСтроки", 0.1, Истина);		
КонецПроцедуры // ТабличноеПолеОценокПриАктивизацииСтроки(Элемент)

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля ТабличноеПолеОценок
//
Процедура ОбработчикОжиданияТабличноеПолеОценокПриАктивизацииСтроки()
	
	Элемент = ЭлементыФормы.ТабличноеПолеОценок;
	
	// Проверить записан элемент справочника или нет.
	Если ЭтоНовый() Тогда
        Ответ = Вопрос(НСтр("ru='Перед началом ввода оценок надо записать новую шкалу оценок! Записать?';uk='Перед початком введення оцінок необхідно записати нову шкалу оцінок! Записати?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да,);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьВФорме();
		КонецЕсли;
	КонецЕсли;
	
	// Если строка не выбрана  - например поле пустое, то расчет проводить не нужно
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	// проверка на новую строку.
	Если Элемент.ТекущаяСтрока.ПриоритетОценки = 0 тогда
		
		МаксимальныйПриоритет = 0;
		ВыборкаШкал = Справочники.СоставОценочныхШкалКомпетенций.Выбрать(,ЭтотОбъект.Ссылка,,"Код");

		Пока ВыборкаШкал.Следующий() Цикл

			Если ВыборкаШкал.ПриоритетОценки > МаксимальныйПриоритет Тогда
				МаксимальныйПриоритет = ВыборкаШкал.ПриоритетОценки;
			КонецЕсли;

		КонецЦикла;
		
		МаксимальныйПриоритет = МаксимальныйПриоритет + 1;		
	КонецЕсли;	
КонецПроцедуры // ОбработчикОжиданияТабличноеПолеОценокПриАктивизацииСтроки
	

// Проверяет, ворзможно измение шкалы или нет.
Процедура ПриОткрытии()
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);	
	
	запрос = новый запрос;
	запрос.УстановитьПараметр("шкала",ЭтотОбъект.Ссылка);
	
	запрос.Текст = ("ВЫБРАТЬ ПЕРВЫЕ 1
	|	КомпетенцииРаботников.ШкалаОценок
	|ИЗ
	|	Справочник.КомпетенцииРаботников КАК КомпетенцииРаботников
	|
	|ГДЕ
	|	КомпетенцииРаботников.ШкалаОценок = &Шкала");
	
	ВыборкаСправочников = запрос.Выполнить().Выбрать();
	
	Если ВыборкаСправочников.Следующий() Тогда 
		ВозможностьИзменений = Ложь
	Иначе
		ВозможностьИзменений = Истина
	КонецЕсли;
	
	
	Если ВозможностьИзменений = Ложь Тогда 
		
		ЭлементыФормы.ТабличноеПолеОценок.Колонки.ПриоритетОценки.ТолькоПросмотр = истина;	
		
	КонецЕсли;
	
	
	
	
	
КонецПроцедуры //  ПриОткрытии



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ

// Проверяет возможность добавления элементов
Процедура ТабличноеПолеОценокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Если ВозможностьИзменений = Ложь Тогда 
		Отказ = истина;
		Возврат
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеОценокПередНачаломДобавления


// Проверяет возможность удаления элементов
Процедура ТабличноеПолеОценокПередУдалением(Элемент, Отказ)
	
	Если ВозможностьИзменений = Ложь Тогда 
		Отказ = истина;
		Возврат
	КонецЕсли;

КонецПроцедуры // ТабличноеПолеОценокПередУдалением


Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры





