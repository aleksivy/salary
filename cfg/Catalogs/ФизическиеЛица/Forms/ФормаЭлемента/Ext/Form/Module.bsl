
Перем мОбработкаПоискаПоСтрокеВидаКИ;
Перем мТекстПоискаПоСтрокеВидаКИ;
Перем мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ;

Перем мФормаВводаМестаРождения;
Перем мТекущееОсновноеИзображение;
Перем мПустаяКартинка;

Перем мКнопкаРедактироватьКИВДиалоге;

Перем мНаборЗаписейДокументаУдостоверяющегоЛичность Экспорт;
Перем мНаборЗаписейГражданство Экспорт;
Перем мНаборЗаписейВоинскийУчет Экспорт;
Перем мНаборЗаписейСемейноеПоложение Экспорт;
Перем мНаборЗаписейФИО Экспорт;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()


	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает в поле картинки основное изображение
//
Процедура ПоказатьОсновноеИзображение()

	Если мТекущееОсновноеИзображение = Неопределено Тогда
		ЭлементыФормы.ОсновноеИзображение.Картинка = мПустаяКартинка;
	Иначе
		ЭлементыФормы.ОсновноеИзображение.Картинка = мТекущееОсновноеИзображение;
	КонецЕсли;

КонецПроцедуры // ПоказатьОсновноеИзображение()

// Процедура считывает место рождения физлица
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПрочитатьМестоРождения()

	МестоРожденияФизЛица = РегламентированнаяОтчетность.ПредставлениеМестаРождения(МестоРождения);
	Если НЕ ЗначениеЗаполнено(МестоРожденияФизЛица) тогда
		МестоРожденияФизЛица = НСтр("ru='Ввести место рождения';uk='Ввести місце народження'");
	КонецЕсли;

КонецПроцедуры // ПрочитатьМестоРождения

// Процедура считывает заметки физлица
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПрочитатьЗаметки()
	
	Заметки.Отбор.Объект.Значение = Ссылка;
	Заметки.Отбор.Объект.Использование = Истина;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица;
	ПрочитатьЗаполнитьСвойстваИЗначения();

	ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица;
	ПрочитатьЗаполнитьКатегории();
	
	Если ЭтоНовый() И ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, ПараметрОбъектКопирования);
	Иначе
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
	КонецЕсли;
	
	УстановитьКнопкиПечати();
	
КонецПроцедуры

// Процедура - вызывается при открытии формы
Процедура ПриОткрытии()
	
	ОбновитьПредставлениеЭлемента("Гражданство");
	ОбновитьПредставлениеЭлемента("СемейноеПоложение");
	ОбновитьПредставлениеЭлемента("УдостоверениеЛичности");
	ОбновитьПредставлениеЭлемента("ФИО");
	ОбновитьПредставлениеЭлемента("ВоинскийУчет");
	ОбновитьПредставлениеЭлемента("ОсновноеИзображение");
	ОбновитьПредставлениеЭлемента("ИзмененСписокСправочникаХранилищеДопИнформации");
	Модифицированность = Ложь;
	
	мКнопкаРедактироватьКИВДиалоге = ЭлементыФормы.КоманднаяПанельКонтактнойИнформации.Кнопки.РедактироватьВДиалоге;
	УправлениеКонтактнойИнформацией.ИнициализацияКнопкиРедактированиеКИВДиалоге(мКнопкаРедактироватьКИВДиалоге);
	
	//ПрочитатьПреобразуемыеДанные();

	// Место рождения.
	ПрочитатьМестоРождения();

	ПрочитатьЗаметки();
	
	Заголовок = НСтр("ru='Личные данные физического лица: ';uk='Особисті дані фізичної особи: '") + Наименование;

	ЭлементыФормы.Образование.Колонки.Специальность.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КлассификаторСпециальностейПоОбразованию");
	
	// Выведем картинку на первой странице
	мТекущееОсновноеИзображение = ОсновноеИзображение.Хранилище.Получить();
	ПоказатьОсновноеИзображение();
	
	Если ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Найти("РедактироватьКодНомер") = Неопределено Тогда
		МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	КонецЕсли;	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Код);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	Если ИсточникВыбора = мФормаВводаМестаРождения тогда
		
		МестоРождения = РезультатВыбора;
		//Представление места рождения
		МестоРожденияФизЛица = РегламентированнаяОтчетность.ПредставлениеМестаРождения(МестоРождения);
		Если НЕ ЗначениеЗаполнено(МестоРожденияФизЛица) тогда
			МестоРожденияФизЛица = НСтр("ru='Ввести место рождения';uk='Ввести місце народження'");
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.ХранилищеДополнительнойИнформации") Тогда
		
		Если НЕ ОсновноеИзображение = РезультатВыбора Тогда
			ОсновноеИзображение = РезультатВыбора;
		КонецЕсли;
		
		мТекущееОсновноеИзображение = ОсновноеИзображение.Хранилище.Получить();
		ПоказатьОсновноеИзображение();
		
		СписокКнопокФайлов = Новый СписокЗначений;
		СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
		СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
		РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)

	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.СвойстваИЗначения);
	КонецЕсли;

	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента);
	
	Если ИмяОбновляемогоЭлемента = "Гражданство" Тогда
		
		Если мНаборЗаписейГражданство.Количество() > 0 Тогда
			Гражданство = "" + мНаборЗаписейГражданство[0].Страна + ?(мНаборЗаписейГражданство[0].НеИмеетПравоНаПенсию,НСтр("ru=', не ';uk=', не '"),", " ) + НСтр("ru='имеет право на пенсию';uk='має право на пенсію'") +  ?(мНаборЗаписейГражданство[0].НеЯвляетсяНалоговымРезидентом,НСтр("ru=', не ';uk=', не '"),", " ) + НСтр("ru='является налоговым резидентом';uk='є податковим резидентом'");
			ГражданствоСтрана = "" + мНаборЗаписейГражданство[0].Страна;
			
			Модифицированность = Истина;
			
		Иначе
			Гражданство = НСтр("ru='Ввести данные о гражданстве';uk='Ввести дані про громадянство'");
			
		КонецЕсли;

	ИначеЕсли ИмяОбновляемогоЭлемента = "СемейноеПоложение" Тогда
		
		Если мНаборЗаписейСемейноеПоложение.Количество() > 0 Тогда
			СемейноеПоложение = мНаборЗаписейСемейноеПоложение[0].СемейноеПоложение;
			
			Модифицированность = Истина;
			
		Иначе
			СемейноеПоложение = НСтр("ru='Ввести данные о семейном положении';uk='Ввести дані про сімейний стан'");
			
		КонецЕсли;

	ИначеЕсли ИмяОбновляемогоЭлемента = "УдостоверениеЛичности" Тогда
		
		Если мНаборЗаписейДокументаУдостоверяющегоЛичность.Количество() > 0 Тогда
			Паспорт = мНаборЗаписейДокументаУдостоверяющегоЛичность[0];
			УдостоверениеЛичности = "" + Паспорт.ДокументВид + НСтр("ru=', серия: ';uk=', серія: '") + Паспорт.ДокументСерия + ", № " + Паспорт.ДокументНомер 
									+ НСтр("ru=', выдан: ';uk=', виданий: '") + Формат(Паспорт.ДокументДатаВыдачи,"ДФ='дд ММММ гггг'; ДП='Не указано'") + НСтр("ru=' года, ';uk=' року, '") 
									+ Паспорт.ДокументКемВыдан;
			
			УдостоверениеЛичности = СтрЗаменить(УдостоверениеЛичности,"Не указано","...");
			
			Модифицированность = Истина;
			
		Иначе
			УдостоверениеЛичности = НСтр("ru='Ввести данные об удостоверении личности';uk='Ввести дані про посвідчення особи'");
			
		КонецЕсли;
			
	ИначеЕсли ИмяОбновляемогоЭлемента = "ФИО" Тогда
		
		Если мНаборЗаписейФИО.Количество() > 0 Тогда
			ФИОСрез = мНаборЗаписейФИО[0];
			
			Фамилия  = ФИОСрез.Фамилия;
			Имя      = ФИОСрез.Имя;
			Отчество = ФИОСрез.Отчество;
		КонецЕсли;

	ИначеЕсли ИмяОбновляемогоЭлемента = "ВоинскийУчет" Тогда
		
		Если мНаборЗаписейВоинскийУчет.Количество() > 0 Тогда
			СтруктураВоинскийУчет = мНаборЗаписейВоинскийУчет[0];
			
			Если СтруктураВоинскийУчет.ОтношениеКВоинскойОбязанности = Перечисления.ОтношениеКВоинскойОбязанности.НеВоеннообязанный Тогда
				ВоинскийУчет = СтруктураВоинскийУчет.ОтношениеКВоинскойОбязанности;
				
			Иначе
				ВоинскийУчет = "" + СтруктураВоинскийУчет.ОтношениеКВоинскойОбязанности
								+ НСтр("ru=', Категория: ';uk=', Категорія: '")+ СтруктураВоинскийУчет.Категория
								+НСтр("ru=', Звание: ';uk=', Звання: '") + СтруктураВоинскийУчет.Звание 
								+ НСтр("ru=', ВУС: ';uk=', ВОС: '")+ СтруктураВоинскийУчет.ВУС + НСтр("ru=', Годность: ';uk=', Придатність: '") 
								+ СтруктураВоинскийУчет.Годность + НСтр("ru=', Военкомат: ';uk=', Військкомат: '") 
								+ СтруктураВоинскийУчет.Военкомат
									+ ", " + СтруктураВоинскийУчет.ОтношениеКВоинскомуУчету 
								+ ?(ЗначениеЗаполнено(СтруктураВоинскийУчет.ЗабронированОрганизацией),НСтр("ru=', Забронирован за организацией ';uk=', Заброньований за організацією '") + СтруктураВоинскийУчет.ЗабронированОрганизацией.НаименованиеПолное,"")
								+ ?(СтруктураВоинскийУчет.НаличиеМобпредписания,НСтр("ru=', имеет мобпредписание';uk=', має мобприпис'"),"");
	
			КонецЕсли;
			
			Модифицированность = Истина;

		Иначе
			ВоинскийУчет = НСтр("ru='Ввести данные о воинском учете';uk='Ввести дані про військовий облік'");
	
		КонецЕсли;

			
		ИначеЕсли ИмяОбновляемогоЭлемента = "ОсновноеИзображение" Тогда
			
			// обновляем картинку на первой странице
			Если мТекущееОсновноеИзображение <> ОсновноеИзображение.Хранилище.Получить() Тогда
				мТекущееОсновноеИзображение = ОсновноеИзображение.Хранилище.Получить();
				ПоказатьОсновноеИзображение();
			КонецЕсли;
					
		ИначеЕсли ИмяОбновляемогоЭлемента = "ИзмененСписокСправочникаХранилищеДопИнформации" Тогда
			
			СписокКнопокФайлов = Новый СписокЗначений;
			СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
			СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
			РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);
			
		КонецЕсли;
		
КонецПроцедуры

// Процедура - обработчик пришедшего оповещения
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбновитьФорму" и (Источник = Ссылка или (ТипЗнч(Источник) = Тип("СправочникСсылка.ФизическиеЛица") и Источник.Пустая())) Тогда
		
		ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;
		ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента);
		
	ИначеЕсли ИмяСобытия = "ОбновитьУдостоверениеЛичности" Тогда
		
		ОбновитьПредставлениеЭлемента("УдостоверениеЛичности");
		
	ИначеЕсли ИмяСобытия = "ЗаписанаКИ" И ТипЗнч(Параметр) = Тип("Структура") И (Источник = ЭтаФорма) Тогда
		
		Если ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные <> Неопределено
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Вид = Параметр.Вид
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип = Параметр.Тип Тогда
		
			УправлениеКонтактнойИнформацией.УстановитьВозможностьРедактированияТекстаКИ(ЭлементыФормы.КонтактнаяИнформация);
		
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииДанных()

	ПрочитатьЗаполнитьСвойстваИЗначения();
	ПрочитатьЗаполнитьКатегории();

КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	ФИО = Фамилия + " " + Имя + " " + Отчество;
	Если мНаборЗаписейДокументаУдостоверяющегоЛичность.Количество() > 0 Тогда
		
		СтруктураЗаписейДокументаУдостоверяющегоЛичность = Новый Структура("ДокументВид, ДокументСерия, ДокументНомер, ДокументДатаВыдачи", 
																мНаборЗаписейДокументаУдостоверяющегоЛичность[0].ДокументВид,
																мНаборЗаписейДокументаУдостоверяющегоЛичность[0].ДокументСерия,
																мНаборЗаписейДокументаУдостоверяющегоЛичность[0].ДокументНомер,
																мНаборЗаписейДокументаУдостоверяющегоЛичность[0].ДокументДатаВыдачи);
		ПолныеПрава.ПроверитьДублиФизлиц(Ссылка, СтруктураЗаписейДокументаУдостоверяющегоЛичность, , КодПоДРФО, ФИО);
		
	Иначе
		ПолныеПрава.ПроверитьДублиФизлиц(Ссылка, , , КодПоДРФО, ФИО);
	КонецЕсли;
	
	// запись в регистр паспортных данных
	Если мНаборЗаписейДокументаУдостоверяющегоЛичность.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Период) Тогда
		мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Физлицо = Ссылка;
		
		мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Физлицо.Использование	= Истина;
		мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Физлицо.Значение		= мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Физлицо;
		мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Период.Использование	= Истина;
		мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Период.Значение			= мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Период;
		мНаборЗаписейДокументаУдостоверяющегоЛичность.Записать(Истина);
	КонецЕсли;

	// запись в регистр гражданство
	Если мНаборЗаписейГражданство.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейГражданство[0].Период) Тогда
		мНаборЗаписейГражданство[0].Физлицо = Ссылка;
		
		мНаборЗаписейГражданство.Отбор.Физлицо.Использование	= Истина;
		мНаборЗаписейГражданство.Отбор.Физлицо.Значение			= мНаборЗаписейГражданство[0].Физлицо;
		мНаборЗаписейГражданство.Отбор.Период.Использование		= Истина;
		мНаборЗаписейГражданство.Отбор.Период.Значение			= мНаборЗаписейГражданство[0].Период;
		мНаборЗаписейГражданство.Записать(Истина);
	КонецЕсли;
	
	// запись в регистр воинский учет
	Если мНаборЗаписейВоинскийУчет.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейВоинскийУчет[0].Период) Тогда
		мНаборЗаписейВоинскийУчет[0].Физлицо = Ссылка;
		
		мНаборЗаписейВоинскийУчет.Отбор.Физлицо.Использование	= Истина;
		мНаборЗаписейВоинскийУчет.Отбор.Физлицо.Значение		= мНаборЗаписейВоинскийУчет[0].Физлицо;
		мНаборЗаписейВоинскийУчет.Отбор.Период.Использование	= Истина;
		мНаборЗаписейВоинскийУчет.Отбор.Период.Значение			= мНаборЗаписейВоинскийУчет[0].Период;
		мНаборЗаписейВоинскийУчет.Записать(Истина);
	КонецЕсли;
	
	// запись в регистр семейное положение
	Если мНаборЗаписейСемейноеПоложение.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейСемейноеПоложение[0].Период) Тогда
		мНаборЗаписейСемейноеПоложение[0].Физлицо = Ссылка;
		
		мНаборЗаписейСемейноеПоложение.Отбор.Физлицо.Использование	= Истина;
		мНаборЗаписейСемейноеПоложение.Отбор.Физлицо.Значение		= мНаборЗаписейСемейноеПоложение[0].Физлицо;
		мНаборЗаписейСемейноеПоложение.Отбор.Период.Использование	= Истина;
		мНаборЗаписейСемейноеПоложение.Отбор.Период.Значение		= мНаборЗаписейСемейноеПоложение[0].Период;
		мНаборЗаписейСемейноеПоложение.Записать(Истина);
	КонецЕсли;
	
	// запись в регистр ФИО
	Если мНаборЗаписейФИО.Количество() = 0 Тогда
		ЗаписьНабора = мНаборЗаписейФИО.Добавить();
		ЗаписьНабора.Период		= '19000101';
		ЗаписьНабора.Фамилия	= Фамилия;
		ЗаписьНабора.Имя		= Имя;
		ЗаписьНабора.Отчество	= Отчество;
	КонецЕсли;
	
	Если мНаборЗаписейФИО.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейФИО[0].Период) Тогда
		мНаборЗаписейФИО[0].Физлицо = Ссылка;
		
		мНаборЗаписейФИО.Отбор.Физлицо.Использование	= Истина;
		мНаборЗаписейФИО.Отбор.Физлицо.Значение			= мНаборЗаписейФИО[0].Физлицо;
		мНаборЗаписейФИО.Отбор.Период.Использование		= Истина;
		мНаборЗаписейФИО.Отбор.Период.Значение			= мНаборЗаписейФИО[0].Период;
		мНаборЗаписейФИО.Записать(Истина);
	КонецЕсли;
	
	// Обработка записи свойств и категорий
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений = Ссылка;
	Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();

	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	Отказ = НЕ ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();
	
	// Запись в регистр контактной информации
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка, Отказ);

	// Заметки
	Заметки.Отбор.Объект.Значение = Ссылка;
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	Оповестить("ОбновитьДанныеОФизлице",Ссылка);
	УстановитьКнопкиПечати();
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначение("РедактироватьКИВДиалоге", мКнопкаРедактироватьКИВДиалоге.Пометка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ДЕЙСТВИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыТруд(Кнопка)
	
	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Вопрос = НСтр("ru='Перед вводом сведений необходимо записать элемент. Записать?';uk='Перед введенням відомостей необхідно записати елемент. Записати?'");
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если НЕ Отказ Тогда
		
		ФормаРедактирования = ПолучитьФорму("ФормаВводаДанныхТруд", ЭтаФорма);
		ФормаРедактирования.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыФайлы(Кнопка)

	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Вопрос = НСтр("ru='Перед вводом файлов и изображений необходимо записать элемент. Записать?';uk='Перед введенням файлів і зображень необхідно записати елемент. Записати?'");
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

 	Если НЕ Отказ Тогда

		СтруктураДляСпискаИзображдений = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
		СтруктураДляСпискаДополнительныхФайлов = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
		ОбязательныеОтборы = Новый Структура("Объект", Ссылка);
		
		РаботаСФайлами.ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображдений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

Процедура ДействияФормыПеречитать(Кнопка)
	
	Если Модифицированность Тогда
		ОтветНаВопрос = Вопрос(НСтр("ru='Данные были изменены. Перечитать данные?';uk='Дані були змінені. Перечитати дані?'"), РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Нет Тогда
			УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
			ЭтотОбъект.Прочитать();
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры

Процедура УДФОткрыть(Кнопка)
	
	Форма = Обработки.УправлениеДаннымиРаботника.ПолучитьФорму();
	Форма.УстановитьРеквизиты(Ссылка, "Основное", НачалоМесяца(ТекущаяДата()));
	Форма.Открыть();
	
КонецПроцедуры // УДФОткрыть()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура формирует список вариантов для наименования элемента
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СписокВозможныхНаименований = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Фамилия) Тогда
		СписокВозможныхНаименований.Добавить(Фамилия);
		Если ЗначениеЗаполнено(Имя) Тогда
			СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + СокрЛП(Имя));
			СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + Лев(Имя,1) + ".");
			Если ЗначениеЗаполнено(Отчество) Тогда
				СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество));
				СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+ ".");
 			КонецЕсли;
		 КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Имя) Тогда
			СписокВозможныхНаименований.Добавить(Имя);
			Если ЗначениеЗаполнено(Отчество) Тогда
				СписокВозможныхНаименований.Добавить(СокрЛП(Имя) + " " + СокрЛП(Отчество));
				СписокВозможныхНаименований.Добавить(СокрЛП(Имя) + ". " + Лев(Отчество,1)+ ".");
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Отчество) Тогда
				СписокВозможныхНаименований.Добавить(Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элемент.СписокВыбора = СписокВозможныхНаименований;
КонецПроцедуры

Процедура НаименованиеПриИзменении(Элемент)

	ФИО = Наименование;

	Если ПустаяСтрока(Фамилия) ИЛИ ЭтоНовый() Тогда
		Фамилия  = ОбщегоНазначения.ВыделитьСлово(ФИО);
		Имя      = ОбщегоНазначения.ВыделитьСлово(ФИО);
		Отчество = ОбщегоНазначения.ВыделитьСлово(ФИО);
		
		Если ЗначениеЗаполнено(Отчество) Тогда
			
			Пол = ПроцедурыУправленияПерсоналом.ПолучитьПол(Отчество);
			
			
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

Процедура КнопкаВызоваДанныхФИОНажатие(Элемент)

	ФормаВвода = ПолучитьФорму("ФормаЗаписиФИО", ЭтаФорма);
	
	Если мНаборЗаписейФИО.Количество() = 0 Тогда
		мНаборЗаписейФИО.Добавить();
	КонецЕсли;
	
	Если ПустаяСтрока(мНаборЗаписейФИО[0].Фамилия + мНаборЗаписейФИО[0].Имя + мНаборЗаписейФИО[0].Отчество) Тогда
		мНаборЗаписейФИО[0].Фамилия		= Фамилия;
		мНаборЗаписейФИО[0].Имя			= Имя;
		мНаборЗаписейФИО[0].Отчество	= Отчество;
	КонецЕсли;
	
	ФормаВвода.НаборЗаписей = мНаборЗаписейФИО;
	ФормаВвода.Открыть();
	
КонецПроцедуры


Процедура МестоРожденияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	мФормаВводаМестаРождения = ПолучитьОбщуюФорму("ФормаВводаМестаРождения", ЭтаФорма, "ФизЛицо"+Код);
	мФормаВводаМестаРождения.МестоРожденияСтрокой = МестоРождения;
	мФормаВводаМестаРождения.ЗаголовокФормы       = НСтр("ru='Место рождения физ. лица: ';uk='Місце народження фіз. особи: '")+Наименование;
	мФормаВводаМестаРождения.Открыть();
	
КонецПроцедуры

Процедура УдостоверениеЛичностиНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;

	ФормаВвода	 			= ПолучитьОбщуюФорму("РедактированиеДокументаУдостоверяющегоЛичность", ЭтаФорма);
	ФормаВвода.НаборЗаписей = мНаборЗаписейДокументаУдостоверяющегоЛичность;
	ФормаВвода.Открыть();
	
КонецПроцедуры

// Процедура открывает основное изображение в отдельном окне.
Процедура ОсновноеИзображениеНажатие(Элемент)
	
	Отказ = Ложь;
	Если ЭтоНовый() Тогда
		Вопрос = НСтр("ru='Перед вводом основного изображения необходимо записать элемент. Записать?';uk='Перед введенням основного зображення необхідно записати елемент. Записати?'");
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		РаботаСФайлами.ОткрытьФормуИзображения(ЭтаФорма, ОсновноеИзображение, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ГражданствоНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка 	= Ложь;
	Отказ 					= Ложь;
	ФормаВвода	 			= ПолучитьФорму("ФормаЗаписиГражданство", ЭтаФорма);
	ФормаВвода.НаборЗаписей = мНаборЗаписейГражданство;
	ФормаВвода.Открыть();
	
КонецПроцедуры

Процедура ВоинскийУчетНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
	ФормаВвода	 			= ПолучитьФорму("ФормаЗаписиВоинскийУчет", ЭтаФорма);
	ФормаВвода.НаборЗаписей = мНаборЗаписейВоинскийУчет;
	ФормаВвода.Открыть();

КонецПроцедуры
 
Процедура СемейноеПоложениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
	ФормаВвода	 			= ПолучитьФорму("ФормаЗаписиСемейноеПоложение", ЭтаФорма);
	ФормаВвода.НаборЗаписей = мНаборЗаписейСемейноеПоложение;
	ФормаВвода.Открыть();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.РедактироватьВДиалоге.
//
Процедура КоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(Кнопка)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияРедактироватьВДиалоге(Кнопка);
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Обработки.РедактированиеКонтактнойИнформации.Создать().РедактироватьЗапись(ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные,, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы КонтактнаяИнформация,Тип.
//
Процедура КонтактнаяИнформацияТипОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформацией.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Ссылка));
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
	мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ = Элемент.Значение;
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Ссылка)), Тип("СправочникСсылка.ВидыКонтактнойИнформации"));
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Ссылка)), ЭтаФорма, Тип("СправочникСсылка.ВидыКонтактнойИнформации"), мОбработкаПоискаПоСтрокеВидаКИ, мТекстПоискаПоСтрокеВидаКИ, мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мТекстПоискаПоСтрокеВидаКИ, мОбработкаПоискаПоСтрокеВидаКИ);
	
	Если Не (НоваяСтрока и ОтменаРедактирования) и Не Отказ Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.УстановитьОсновным.
//
Процедура КоманднаяПанельКонтактнойИнформацииУстановитьОсновным(Кнопка)
	
	УправлениеКонтактнойИнформацией.УстановитьЗаписьОсновной(НаборКонтактнойИнформации, ЭлементыФормы.КонтактнаяИнформация, Кнопка);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, ЭлементыФормы.КоманднаяПанельКонтактнойИнформации.Кнопки.УстановитьОсновным);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередУдалением(Элемент, Отказ)

	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование)
	ЭтотОбъект.Записать();
	ПриЗаписи(ложь);


	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге, ЭлементыФормы.КонтактнаяИнформация, НаборКонтактнойИнформации, Ложь, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
	
	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге, Ложь, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Тип.
//
Процедура КонтактнаяИнформацияТипПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияТипПриИзмененииОбщее(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ 

Процедура ОбразованиеПриНачалеРедактирования(Элемент, НоваяСтрока)
	Если Элемент.ТекущаяСтрока.Специальность = Неопределено Тогда
	    Элемент.ТекущаяСтрока.Специальность = Справочники.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка()
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ СВОЙСТВ И КАТЕГОРИЙ

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОбработкаОбъектЗначенияСвойств.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;
	
	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные, Элемент);
	
	Модифицированность = Истина;
	
КонецПроцедуры


// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ИнвертироватьПометкуУдаленияКатегории(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, НоваяСтрока)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПОДДЕРЖКИ МЕХАНИЗМОВ СВОЙСТВ И КАТЕГОРИЙ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием
	Если ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица Тогда
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
	КонецЕсли;

КонецПроцедуры

// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием.
	Если ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица Тогда
		ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
		ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();
	КонецЕсли;

КонецПроцедуры

Процедура ЗаметкиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	Форма = РегистрыСведений.Заметки.ПолучитьФормуРедактированияЗаписи();
	Форма.Автор  = глЗначениеПеременной("глТекущийПользователь");
	Форма.Объект = Ссылка;
	Форма.Дата   = ТекущаяДата();
	
	Если Копирование Тогда
		ОбъектКопирования = Элемент.ТекущиеДанные;
		Форма.ВидЗаметки = ОбъектКопирования.ВидЗаметки;
		Форма.Содержание = ОбъектКопирования.Содержание;
	КонецЕсли; 

	Форма.Открыть();

КонецПроцедуры

Процедура КоманднаяПанельФормыПрава(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаПравДоступа.РедактироватьПраваДоступа(Ссылка);
	
КонецПроцедуры

Процедура СоставСемьиРодственникПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементыформы.СоставСемьи.ТекущиеДанные.ФизЛицо.ДатаРождения) Тогда
		Элементыформы.СоставСемьи.ТекущиеДанные.ГодРождения = Год( Элементыформы.СоставСемьи.ТекущиеДанные.ФизЛицо.ДатаРождения);
	Иначе
		Элементыформы.СоставСемьи.ТекущиеДанные.ГодРождения = 0;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДействияФормыНачальныйСтаж(Кнопка)
	
	Форма = РегистрыСведений.НачальныеСведенияОСтажеРаботниковОрганизации.ПолучитьФорму("ФормаСписка");
	Форма.ЭлементыФормы.Сотрудники.Значение.Отбор.Наименование.Значение = Ссылка.Наименование;
	Форма.ЭлементыФормы.Сотрудники.Значение.Отбор.Наименование.Использование = Истина;
	Форма.Открыть();
	
КонецПроцедуры

мПустаяКартинка = Новый Картинка;

мОбработкаПоискаПоСтрокеВидаКИ                 = Ложь;
мТекстПоискаПоСтрокеВидаКИ                     = "";
мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ = Неопределено;

// Прочитать связанную информацию
// Чтение при создании формы необходимо для механизмов типовой конфигурации

мНаборЗаписейДокументаУдостоверяющегоЛичность	= РегистрыСведений.ПаспортныеДанныеФизЛиц.СоздатьНаборЗаписей();
мНаборЗаписейГражданство						= РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
мНаборЗаписейВоинскийУчет						= РегистрыСведений.ВоинскийУчет.СоздатьНаборЗаписей();
мНаборЗаписейСемейноеПоложение					= РегистрыСведений.СемейноеПоложениеФизЛиц.СоздатьНаборЗаписей();
мНаборЗаписейФИО								= РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();

Запрос = Новый Запрос;
Запрос.УстановитьПараметр("ФизЛицо", Ссылка);
	
Запрос.Текст =
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	ПаспортныеДанныеФизЛицСрезПоследних.Период,
|	ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо,
|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид,
|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан
|ИЗ
|	РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних";
Выборка = Запрос.Выполнить().Выбрать();
Если Выборка.Следующий() Тогда
	ЗаполнитьЗначенияСвойств(мНаборЗаписейДокументаУдостоверяющегоЛичность.Добавить(), Выборка);
КонецЕсли; 
	
Запрос.Текст =
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	ГражданствоФизЛицСрезПоследних.Период,
|	ГражданствоФизЛицСрезПоследних.ФизЛицо,
|	ГражданствоФизЛицСрезПоследних.Страна,
|	ГражданствоФизЛицСрезПоследних.НеИмеетПравоНаПенсию,
|	ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентом
|ИЗ
|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ГражданствоФизЛицСрезПоследних";
Выборка = Запрос.Выполнить().Выбрать();
Если Выборка.Следующий() Тогда
	ЗаполнитьЗначенияСвойств(мНаборЗаписейГражданство.Добавить(), Выборка);
КонецЕсли;

Запрос.Текст =
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	ВоинскийУчетСрезПоследних.Период,
|	ВоинскийУчетСрезПоследних.Физлицо,
|	ВоинскийУчетСрезПоследних.ОтношениеКВоинскойОбязанности,
|	ВоинскийУчетСрезПоследних.ОтношениеКВоинскомуУчету,
|	ВоинскийУчетСрезПоследних.Звание,
|	ВоинскийУчетСрезПоследних.ВУС,   
|	ВоинскийУчетСрезПоследних.РеквизитыВоенногоБилета,   
|	ВоинскийУчетСрезПоследних.Годность,
|	ВоинскийУчетСрезПоследних.Военкомат,
|	ВоинскийУчетСрезПоследних.ВоенкоматФМП,
|	ВоинскийУчетСрезПоследних.НаличиеМобпредписания,
|	ВоинскийУчетСрезПоследних.ЗабронированОрганизацией,
|	ВоинскийУчетСрезПоследних.ОснованиеНегодности,
|	ВоинскийУчетСрезПоследних.СпецУчет,
|   ВоинскийУчетСрезПоследних.ГруппаДо2016,
|   ВоинскийУчетСрезПоследних.Группа,
|   ВоинскийУчетСрезПоследних.Категория,
|   ВоинскийУчетСрезПоследних.Профиль,
|   ВоинскийУчетСрезПоследних.ДатаИНомерПриказаОПризыве,
|   ВоинскийУчетСрезПоследних.СрокКонтракта
|ИЗ
|	РегистрСведений.ВоинскийУчет.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ВоинскийУчетСрезПоследних";
Выборка = Запрос.Выполнить().Выбрать();
Если Выборка.Следующий() Тогда
	ЗаполнитьЗначенияСвойств(мНаборЗаписейВоинскийУчет.Добавить(), Выборка);
КонецЕсли;

Запрос.Текст =
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	СемейноеПоложениеФизЛицСрезПоследних.Период,
|	СемейноеПоложениеФизЛицСрезПоследних.ФизЛицо,
|	СемейноеПоложениеФизЛицСрезПоследних.СемейноеПоложение
|ИЗ
|	РегистрСведений.СемейноеПоложениеФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК СемейноеПоложениеФизЛицСрезПоследних";
Выборка = Запрос.Выполнить().Выбрать();
Если Выборка.Следующий() Тогда
	ЗаполнитьЗначенияСвойств(мНаборЗаписейСемейноеПоложение.Добавить(), Выборка);
КонецЕсли;

Запрос.Текст =
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	ФИОФизЛицСрезПоследних.Период,
|	ФИОФизЛицСрезПоследних.ФизЛицо,
|	ФИОФизЛицСрезПоследних.Фамилия,
|	ФИОФизЛицСрезПоследних.Имя,
|	ФИОФизЛицСрезПоследних.Отчество
|ИЗ
|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";
Выборка = Запрос.Выполнить().Выбрать();
Если Выборка.Следующий() Тогда
	ЗаполнитьЗначенияСвойств(мНаборЗаписейФИО.Добавить(), Выборка);
КонецЕсли;

