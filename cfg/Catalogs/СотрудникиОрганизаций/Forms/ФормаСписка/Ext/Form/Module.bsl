////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мЗаголовокФормы;

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура УстановитьОтборПоАктуальности()
	
	Элемент = ЭлементыФормы.ОтборПоАктуальности.Значение;
	СправочникСписок.Отбор.Актуальность.Значение = ЗначениеЗаполнено(Элемент) и Элемент;
	СправочникСписок.Отбор.Актуальность.Использование = ЗначениеЗаполнено(Элемент);	
	
КонецПроцедуры

Процедура УстановитьОтборПоВидуДоговора()
	
	ЗначениеИзСписка = ЭлементыФормы.ОтборПоВидуДоговора.Значение;
	СправочникСписок.Отбор.ВидДоговора.Использование = Истина;
	Если ЗначениеИзСписка = Неопределено Тогда
		СправочникСписок.Отбор.ВидДоговора.Использование = Ложь;	
	ИначеЕсли ЗначениеИзСписка = 0 Тогда
		СправочникСписок.Отбор.ВидДоговора.ВидСравнения  = ВидСравнения.НеРавно;
		СправочникСписок.Отбор.ВидДоговора.Значение = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий;
	ИначеЕсли ЗначениеИзСписка = 1 Тогда
		СправочникСписок.Отбор.ВидДоговора.ВидСравнения  = ВидСравнения.Равно;
		СправочникСписок.Отбор.ВидДоговора.Значение = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;
	ИначеЕсли ЗначениеИзСписка = 2 Тогда
		СписокДоговоров = Новый СписокЗначений;
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		СправочникСписок.Отбор.ВидДоговора.ВидСравнения  = ВидСравнения.ВСписке;
		СправочникСписок.Отбор.ВидДоговора.Значение		 = СписокДоговоров;
	ИначеЕсли ЗначениеИзСписка = 3 Тогда
		СправочникСписок.Отбор.ВидДоговора.ВидСравнения  = ВидСравнения.Равно;
		СправочникСписок.Отбор.ВидДоговора.Значение = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий;
	ИначеЕсли ЗначениеИзСписка = 4 Тогда
		СправочникСписок.Отбор.ВидДоговора.Использование = Ложь;	
	КонецЕсли;
		
КонецПроцедуры

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровТайпинга()

	СтруктураПараметров = Новый Структура("ГоловнаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровТайпинга()()

Процедура ИзменитьУпорядочивание()
	
	СправочникСписок.Обновить();
	
	мКодПорядка = ?(ЭлементыФормы.СправочникСписок.ИерархическийПросмотр, 1, 0);
	ИмяПоляУпорядочивания = СправочникСписок.Порядок[мКодПорядка].Имя;
	
	Кнопки1	= ЭлементыФормы.ДействияФормы.Кнопки.УпорядочитьПо.Кнопки;
	
	Для Каждого Кнопка Из Кнопки1 Цикл
		Кнопка.Пометка = Кнопка.Имя = ИмяПоляУпорядочивания;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура УДФОткрыть(Кнопка)
	
	Форма = Обработки.УправлениеДаннымиРаботника.ПолучитьФорму();
	ТекущиеДанные = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		Форма.УстановитьРеквизиты(ТекущиеДанные.Ссылка.Физлицо, "Основное", НачалоМесяца(ТекущаяДата()));
	Иначе
		Форма.УстановитьРеквизиты(Справочники.ФизическиеЛица.ПустаяСсылка(), "Основное", НачалоМесяца(ТекущаяДата()));
	КонецЕсли;	
		
	Форма.Открыть();
	
КонецПроцедуры // УДФОткрыть()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	мЗаголовокФормы = НСтр("ru='Сотрудники организации ';uk='Співробітники організації '");

	РаботаСДиалогами.ЗаполнениеОтбораПоОрганизацииПоУмолчанию(ЭтаФорма, Отбор.Организация, ЭлементыФормы.Организация, НеОпределено, Ложь, глЗначениеПеременной("глТекущийПользователь"), мЗаголовокФормы);
	СправочникСписок.Отбор.Организация.Использование = Не СправочникСписок.Отбор.Организация.Значение.Пустая();
	ПодключитьОбработчикИзмененияДанных("СправочникСписок.Отбор.Организация",  "УстановитьЗаговокФормы", Истина);
	
	СохраненноеЗначениеОтборПоАктуальности = ЭлементыФормы.ОтборПоАктуальности.СписокВыбора.НайтиПоЗначению(ВосстановитьЗначение("ЗначениеОтбораПоАктуальностиФормыСписка"));
	Если СохраненноеЗначениеОтборПоАктуальности = НеОпределено Тогда
		ЭлементыФормы.ОтборПоАктуальности.Значение = ЭлементыФормы.ОтборПоАктуальности.СписокВыбора.Получить(0).Значение;
	Иначе
		ЭлементыФормы.ОтборПоАктуальности.Значение = СохраненноеЗначениеОтборПоАктуальности.Значение;
	КонецЕсли;
	
	СохраненноеЗначениеОтборПоВидуДоговора = ЭлементыФормы.ОтборПоВидуДоговора.СписокВыбора.НайтиПоЗначению(ВосстановитьЗначение("ЗначениеОтбораПоВидуДоговораФормыСписка"));
	Если СохраненноеЗначениеОтборПоВидуДоговора = НеОпределено Тогда
		ЭлементыФормы.ОтборПоВидуДоговора.Значение = ЭлементыФормы.ОтборПоВидуДоговора.СписокВыбора.Получить(0).Значение;
	Иначе
		ЭлементыФормы.ОтборПоВидуДоговора.Значение = СохраненноеЗначениеОтборПоВидуДоговора.Значение;
	КонецЕсли;

	УстановитьОтборПоАктуальности();
	УстановитьОтборПоВидуДоговора();
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначение("ЗначениеОтбораПоАктуальностиФормыСписка", ЭлементыФормы.ОтборПоАктуальности.Значение);
	СохранитьЗначение("ЗначениеОтбораПоВидуДоговораФормыСписка", ЭлементыФормы.ОтборПоВидуДоговора.Значение);
	
КонецПроцедуры



//Процедура обрабатывает подключаемый обработчик события, отслеживается изменение отбора по организации
Процедура УстановитьЗаговокФормы(ПутьКДанным = Неопределено)
	
	Если ТипЗнч(Отбор.Организация.Значение) = Тип("СписокЗначений") и Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке Тогда
		Если Отбор.Организация.Значение.Количество() = 0 Тогда
			Заголовок = СтрЗаменить(мЗаголовокФормы,"организации","организаций");	
		ИначеЕсли Отбор.Организация.Значение.Количество() = 1 Тогда
			Заголовок = мЗаголовокФормы + Отбор.Организация.Значение[0].Значение.Наименование;
		Иначе
			Заголовок = СтрЗаменить(мЗаголовокФормы,"организации","организаций");
			Для каждого СтрокаСписка Из Отбор.Организация.Значение Цикл
				Заголовок = Заголовок + СтрокаСписка.Значение.Наименование + "; ";
			КонецЦикла;
			Заголовок = Лев(СОКРЛП(Заголовок),СтрДлина(СОКРЛП(Заголовок))-1);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Отбор.Организация.Значение) = Тип("СправочникСсылка.Организации") Тогда
		Если Отбор.Организация.Значение.Пустая() или Не Отбор.Организация.Использование Тогда
			Заголовок = СтрЗаменить(мЗаголовокФормы,"организации","организаций");
		ИначеЕсли Отбор.Организация.Использование Тогда 
			Заголовок = мЗаголовокФормы + Отбор.Организация.Значение.Наименование;
		КонецЕсли;
	Иначе
		Заголовок = СтрЗаменить(мЗаголовокФормы,"организации","организаций");
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

//Процедура - обработчик события "ПриИзменении" ЭУ ОтборПоАктуальности
Процедура ОтборПоВидуДоговораПриИзменении(Элемент)
	
	УстановитьОтборПоВидуДоговора();
	
КонецПроцедуры

//Процедура - обработчик события "ПриИзменении" ЭУ ОтборПоАктуальности
Процедура ОтборПоАктуальностиПриИзменении(Элемент)
	
	УстановитьОтборПоАктуальности();
	
КонецПроцедуры

Процедура ОрганизацияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), Тип("СправочникСсылка.Организации"));
	
КонецПроцедуры

Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), ЭтаФорма, Тип("СправочникСсылка.Организации"), мОбработкаТайпинга, мТекстТайпинга, мПоследнееЗначениеЭлементаТайпинга, Ложь);
	
КонецПроцедуры

Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//установим список выбора головных организаций
	СписокВыбора = ПроцедурыУправленияПерсоналом.ПолучитьСписокОрганизаций();
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено и Элемент.Значение <> ЭлементСписка.Значение Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ СправочникСписок

//Процедура - обработчик события "ПриПолученииДанных" табличного поля СправочникСписок
Процедура СправочникСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	
	НетКолонкиВидДоговора = (СправочникСписок.Колонки.Найти("ВидДоговора") = Неопределено);
	
	Если НетКолонкиВидДоговора Тогда
		СправочникСписок.Колонки.Добавить("ВидДоговора");
	КонецЕсли;
	
	Для Каждого Оформление Из ОформленияСтрок Цикл
		Если НЕ Оформление.ДанныеСтроки.ЭтоГруппа И Не Оформление.ДанныеСтроки.Актуальность Тогда
			Оформление.ЦветТекста = ЦветаСтиля.ЦветРамки;
		КонецЕсли;
		
		Если Не Элементыформы.СправочникСписок.Колонки.ДРФО.Видимость Тогда
			Продолжить;
		ИначеЕсли Оформление.ДанныеСтроки = Неопределено Тогда
			Продолжить;	
		ИначеЕсли Оформление.ДанныеСтроки.Ссылка.ЭтоГруппа Тогда
			Продолжить;	
		Иначе	
			Оформление.Ячейки.ДРФО.УстановитьТекст(Оформление.ДанныеСтроки.Ссылка.ФизЛицо.КодПоДРФО);
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

//Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля СправочникСписок
Процедура СправочникСписокПриАктивизацииСтроки(Элемент)
	
	Если Не ЭлементыФормы.СправочникСписок.ТекущиеДанные = НеОпределено Тогда
		ЭлементыФормы.СправочникДерево.ТекущаяСтрока = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Родитель;
	КонецЕсли; 
	
КонецПроцедуры

Процедура СправочникСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Если Не ЭтоГруппа Тогда
		ВидДоговораСотрудника = Перечисления.ВидыДоговоровСФизЛицами.ПустаяСсылка();
		ОрганизацияСотрудника = Справочники.Организации.ПустаяСсылка();
		Если ТипЗнч(СправочникСписок.Отбор.ВидДоговора.Значение) = Тип("ПеречислениеСсылка.ВидыДоговоровСФизЛицами")
			и СправочникСписок.Отбор.ВидДоговора.Использование 
			и СправочникСписок.Отбор.ВидДоговора.ВидСравнения = ВидСравнения.Равно Тогда
			ВидДоговораСотрудника = СправочникСписок.Отбор.ВидДоговора.Значение;
		ИначеЕсли ОтборПоВидуДоговора = 2 Тогда
			ВидДоговораСотрудника = Перечисления.ВидыДоговоровСФизЛицами.Подряда;	
		КонецЕсли;
		Если ТипЗнч(СправочникСписок.Отбор.Организация.Значение) = Тип("СправочникСсылка.Организации") 
			и СправочникСписок.Отбор.Организация.Использование
			и СправочникСписок.Отбор.Организация.ВидСравнения = ВидСравнения.Равно Тогда
			ОрганизацияСотрудника = СправочникСписок.Отбор.Организация.Значение;
		КонецЕсли;
		
		// проверим какую форму надо использовать
		ИспользоватьПомощника = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИспользоватьПомощникаПриемаНаРаботу");
		Если ИспользоватьПомощника Тогда
			Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуНовогоЭлемента("ФормаПомощник", Элемент);
			Отказ = истина;
		Иначе
			Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуНовогоЭлемента(,Элемент);
		КонецЕсли;
		
		Если Форма.Открыта() Тогда
			// просто активизируем уже открытую форму
			Форма.Активизировать();
			Возврат;
		КонецЕсли;
		
		Если ИспользоватьПомощника Тогда
			Форма.СоздатьДокумент = ЭтаФорма.ВладелецФормы = Неопределено;
		КонецЕсли;
		Форма.Организация	= ОрганизацияСотрудника;
		Форма.ВидДоговора	= ВидДоговораСотрудника;
		Форма.Родитель		= Родитель;
		
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыНачальныйСтаж(Кнопка)
	
	Форма = РегистрыСведений.НачальныеСведенияОСтажеРаботниковОрганизации.ПолучитьФорму("ФормаСписка");
	Форма.ЭлементыФормы.Сотрудники.Значение.Отбор.Наименование.Значение = ЭлементыФормы.СправочникСписок.ТекущаяСтрока.Наименование;
	Форма.ЭлементыФормы.Сотрудники.Значение.Отбор.Наименование.Использование = Истина;
	Форма.Открыть();
	
КонецПроцедуры

Процедура УпорядочитьПо(Кнопка)
	
	Если Кнопка.Имя = "Наименование" Тогда
		СправочникСписок.Порядок.Установить("Наименование, Ссылка");
		
	ИначеЕсли Найти(Кнопка.Имя, "Дата") = 1 Тогда
		СправочникСписок.Порядок.Установить(Кнопка.Имя + " УБЫВ, Наименование, Ссылка");
		
	Иначе
		СправочникСписок.Порядок.Установить(Кнопка.Имя + ", Наименование, Ссылка");
		
	КонецЕсли;
	
	ИзменитьУпорядочивание();
	
КонецПроцедуры

Процедура ДействияФормыИзменитьЛичныеДанные(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.Ссылка.Физлицо.ПолучитьФорму().Открыть();
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

СправочникСписок.Колонки.Добавить("Актуальность");

//список отборов по видам договоров
СписокОтборов = Новый СписокЗначений;
СписокОтборов.Добавить(0, 	НСтр("ru='Все договоры организаций';uk='Всі договори організацій'"));
СписокОтборов.Добавить(1,	НСтр("ru='Трудовые договоры';uk='Трудові договори'"));
СписокОтборов.Добавить(2,	НСтр("ru='Договоры ГПХ';uk='Договори ЦПХ'"));
СписокОтборов.Добавить(3,	НСтр("ru='Без договора';uk='Без договору'"));
СписокОтборов.Добавить(4,	НСтр("ru='Все сотрудники';uk='Всі співробітники'"));
ЭлементыФормы.ОтборПоВидуДоговора.СписокВыбора = СписокОтборов;

//список отборов по актуальности сотрудников
СписокОтборов = Новый СписокЗначений;
СписокОтборов.Добавить(Истина, НСтр("ru='Актуальные сотрудники';uk='Актуальні співробітники'"));
СписокОтборов.Добавить(0, НСтр("ru='Все сотрудники';uk='Всі співробітники'"));
СписокОтборов.Добавить(Ложь, НСтр("ru='Не актуальные сотрудники';uk='Не актуальні співробітники'"));
ЭлементыФормы.ОтборПоАктуальности.СписокВыбора = СписокОтборов;

мОбработкаТайпинга                 = Ложь;
мТекстТайпинга                     = "";
мПоследнееЗначениеЭлементаТайпинга = Неопределено;


