////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;
// Хранит элемент управления подменю печати
Перем мПодменюПечати;
// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

Перем мВалютаРегламентированногоУчета;
Перем мЭтоСотрудникКомпании; //запоминаем что сотрудник принят в компанию
Перем мСписокОбособленныхПодразделений;
Перем мЭтоНовый; 		//запоминаем перед записью, что элемент был новый
Перем мДатаДоговора;	//для автонумерации трудовых договоров
Перем мСведенияОВидахРасчета;
Перем мЕстьНачисления;

Перем мНаборЗаписейФИО Экспорт;
Перем мНаборЗаписейГражданство Экспорт;
Перем мНаборЗаписейИнвалидность Экспорт;
Перем мНаборЗаписейПенсионер Экспорт;
Перем мНаборЗаписейНаличиеГарантий Экспорт; 

// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;
Перем мМассивЭУЕНВД;

// Переменные механизма встроенной справки
Перем ОтображатьСправкуФормы;

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;
Перем мОбработкаТайпингаОрганизация;
Перем мТекстТайпингаОрганизация;
Перем мПоследнееЗначениеЭлементаТайпингаОрганизация;

Перем мДоступнаРольРасчетчикаРегл;
Перем мДоступнаРольКадровикаРегл;
Перем мЕстьОграниченияПравДоступаНаУровнеЗаписей;
Перем мДоступныРолиУпрУчета;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Процедура входит в состав механизма интерактивной справки
Процедура ВыполнитьКомандуФормы(Команда, Значение) Экспорт
	
	Если Команда = "ИзменитьРежим" Тогда
		ВыборФизлица = Не ВыборФизлица;
		ОбработатьВыборФизлицаПриИзменении();
		
	ИначеЕсли Команда = "НовоеФизлицо" Тогда
		Если ВыборФизлица Тогда
			ВыборФизлица = Ложь;
			ОбработатьВыборФизлицаПриИзменении();
		КонецЕсли;
		ТекущийЭлемент = ЭлементыФормы.НаименованиеФизлица;
		
	ИначеЕсли Команда = "ВыбратьФизлицо" Тогда
		Если Не ВыборФизлица Тогда
			ВыборФизлица = Истина;
			ОбработатьВыборФизлицаПриИзменении();
		КонецЕсли;
		ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуВыбора(, ЭтаФорма);
		ФормаВыбора.ОткрытьМодально();
		
	ИначеЕсли Команда = "ВыбратьОрганизацию" Тогда
		//установим список выбора головных организаций
		СписокВыбора = ПроцедурыУправленияПерсоналом.ПолучитьСписокГоловныхОрганизаций();
		Если мЭтоНовый Тогда
			ЭлементСписка = ВыбратьИзСписка(СписокВыбора, ЭлементыФормы.Организация, СписокВыбора.НайтиПоЗначению(Организация));
		Иначе
			ЭлементСписка = ВыбратьИзСписка(СписокВыбора, ЭлементыФормы.Организация1, СписокВыбора.НайтиПоЗначению(Организация));
		КонецЕсли;
		Если ЭлементСписка <> Неопределено и Организация <> ЭлементСписка.Значение Тогда
			Организация = ЭлементСписка.Значение;
			ОбработатьИзменениеОрганизации();
		КонецЕсли;
		
	ИначеЕсли Команда = "ВыбратьВидЗанятости" Тогда
		Если мЭтоНовый Тогда
			ФормаВыбора = Перечисления.ВидыЗанятостиВОрганизации.ПолучитьФормуВыбора(, ЭлементыФормы.ВидЗанятости);
		Иначе
			ФормаВыбора = Перечисления.ВидыЗанятостиВОрганизации.ПолучитьФормуВыбора(, ЭлементыФормы.ВидЗанятости1);
		КонецЕсли;
		
		СписокЗначенийДляВыбора = Новый СписокЗначений;
		СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
		СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыЗанятостиВОрганизации.Совместительство);
		
		ПоддержкаВнутреннегоСовместительства = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ПоддержкаВнутреннегоСовместительства");
		
		Если ПоддержкаВнутреннегоСовместительства Тогда
			СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
		КонецЕсли;
		
		ФормаВыбора.Отбор.Ссылка.Значение		= СписокЗначенийДляВыбора;
		ФормаВыбора.Отбор.Ссылка.Использование	= Истина;
		ФормаВыбора.Открыть();
		
	ИначеЕсли Команда = "ОформитьПриемНаРаботу" Тогда
		Если ЗаписатьЭлементПередВыполнениемДействия() Тогда
			ДокументОбъект = Документы.ПриемНаРаботу.СоздатьДокумент();
			ДокументОбъект.Заполнить(Ссылка);
			ФормаДокумента = ДокументОбъект.ПолучитьФорму();
			ФормаДокумента.Открыть();
		КонецЕсли;
		
	ИначеЕсли Команда = "ОформитьКадровоеПеремещение" Тогда
		Если ЗаписатьЭлементПередВыполнениемДействия() Тогда
			ДокументОбъект = Документы.КадровоеПеремещение.СоздатьДокумент();
			ДокументОбъект.Заполнить(Ссылка);
			ФормаДокумента = ДокументОбъект.ПолучитьФорму();
			ФормаДокумента.Открыть();
		КонецЕсли;
		
	ИначеЕсли Команда = "ОформитьУвольнение" Тогда
		Если ЗаписатьЭлементПередВыполнениемДействия() Тогда
			ДокументОбъект = Документы.Увольнение.СоздатьДокумент();
			ДокументОбъект.Заполнить(Ссылка);
			ФормаДокумента = ДокументОбъект.ПолучитьФорму();
			ФормаДокумента.Открыть();
		КонецЕсли;
		
	ИначеЕсли Команда = "ОформитьПриемНаРаботуВОрганизацию" Тогда
		Если ЗаписатьЭлементПередВыполнениемДействия() Тогда
			ДокументОбъект = Документы.ПриемНаРаботуВОрганизацию.СоздатьДокумент();
			ДокументОбъект.Заполнить(Ссылка);
			ФормаДокумента = ДокументОбъект.ПолучитьФорму();
			ФормаДокумента.Открыть();
		КонецЕсли;
		
	ИначеЕсли Команда = "ОформитьКадровоеПеремещениеОрганизации" Тогда
		Если ЗаписатьЭлементПередВыполнениемДействия() Тогда
			ДокументОбъект = Документы.КадровоеПеремещениеОрганизаций.СоздатьДокумент();
			ДокументОбъект.Заполнить(Ссылка);
			ФормаДокумента = ДокументОбъект.ПолучитьФорму();
			ФормаДокумента.Открыть();
		КонецЕсли;
		
	ИначеЕсли Команда = "ОформитьУвольнениеИзОрганизации" Тогда
		Если ЗаписатьЭлементПередВыполнениемДействия() Тогда
			ДокументОбъект = Документы.УвольнениеИзОрганизаций.СоздатьДокумент();
			ДокументОбъект.Заполнить(Ссылка);
			ФормаДокумента = ДокументОбъект.ПолучитьФорму();
			ФормаДокумента.Открыть();
		КонецЕсли;
		
	ИначеЕсли Команда = "ОформитьДоговорНаВыполнениеРаботСФизЛицом" Тогда
		Если ЗаписатьЭлементПередВыполнениемДействия() Тогда
			ДокументОбъект = Документы.ДоговорНаВыполнениеРаботСФизЛицом.СоздатьДокумент();
			ДокументОбъект.Заполнить(Ссылка);
			ФормаДокумента = ДокументОбъект.ПолучитьФорму();
			ФормаДокумента.Открыть();
		КонецЕсли;
		
	ИначеЕсли Команда = "ИзменитьАктуальность" Тогда
		Актуальность = Не Актуальность;
		
	ИначеЕсли Команда = "ПерейтиКСпискуДоговоров" Тогда
		ЭлементыФормы.ПанельДанныхСотрудник.ТекущаяСтраница = ЭлементыФормы.ПанельДанныхСотрудник.Страницы.СписокДоговоров;
		
	Иначе
		Сообщить(НСтр("ru='Неизвестная команда: ';uk='Невідома команда: '") + Команда);
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКомандуСправки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВВОДА НА ОСНОВАНИИ


Процедура ДействиеВводНаОснованииДоговорНаВыполнениеРаботСФизЛицом()
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ДоговорНаВыполнениеРаботСФизЛицом) Тогда
		ВыполнитьКомандуФормы("ОформитьДоговорНаВыполнениеРаботСФизЛицом", Неопределено);
	Иначе
		Предупреждение(НСтр("ru='Нарушение прав доступа!';uk='Порушення прав доступу!'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействиеВводНаОснованииПриемНаРаботуВОрганизацию()
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПриемНаРаботуВОрганизацию) Тогда
		ВыполнитьКомандуФормы("ОформитьПриемНаРаботуВОрганизацию", Неопределено);
	Иначе
		Предупреждение(НСтр("ru='Нарушение прав доступа!';uk='Порушення прав доступу!'"));	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействиеВводНаОснованииКадровоеПеремещениеОрганизаций()
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.КадровоеПеремещениеОрганизаций) Тогда
		ВыполнитьКомандуФормы("ОформитьКадровоеПеремещениеОрганизации", Неопределено);
	Иначе
		Предупреждение(НСтр("ru='Нарушение прав доступа!';uk='Порушення прав доступу!'"));	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействиеВводНаОснованииУвольнениеИзОрганизаций()
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.УвольнениеИзОрганизаций) Тогда
		ВыполнитьКомандуФормы("ОформитьУвольнениеИзОрганизации", Неопределено);
	Иначе
		Предупреждение(НСтр("ru='Нарушение прав доступа!';uk='Порушення прав доступу!'"));	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействиеВводНаОснованииПриемНаРаботу()
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПриемНаРаботу) Тогда
		ВыполнитьКомандуФормы("ОформитьПриемНаРаботу", Неопределено);
	Иначе
		Предупреждение(НСтр("ru='Нарушение прав доступа!';uk='Порушення прав доступу!'"));	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействиеВводНаОснованииКадровоеПеремещение()
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.КадровоеПеремещение) Тогда
		ВыполнитьКомандуФормы("ОформитьКадровоеПеремещение", Неопределено);
	Иначе
		Предупреждение(НСтр("ru='Нарушение прав доступа!';uk='Порушення прав доступу!'"));	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействиеВводНаОснованииУвольнение()
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.Увольнение) Тогда
		ВыполнитьКомандуФормы("ОформитьУвольнение", Неопределено);
	Иначе
		Предупреждение(НСтр("ru='Нарушение прав доступа!';uk='Порушення прав доступу!'"));	
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры // УстановитьКнопкиПечати

// Функция записывает элемент, спросив об этом у пользователя
Функция ЗаписатьЭлементПередВыполнениемДействия(ТекстВопроса = "")
	
	Если Модифицированность() Тогда
		Если Не ЗначениеЗаполнено(ТекстВопроса) Тогда
			ТекстВопроса = НСтр("ru='Перед вводом на основании необходимо записать элемент. Записать элемент?';uk='Перед введенням на підставі необхідно записати елемент. Записати елемент?'");
		КонецЕсли;
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Попытка
				Возврат ЗаписатьВФорме();
			Исключение
				Возврат Ложь;
			КонецПопытки;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 	
	
	Возврат Истина;
	
КонецФункции // ЗаписатьЭлементПередВыполнениемДействия()

// Функция проверяется прием на работу сотрудника или наличие начислений
 //
 // Параметры  Нет
 //
 // Возвращаемое значение:
 //   Булево
 //
Функция ЕстьНачисленияИлиПриемНаРаботу()
 
	 Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		 //проверим по наличию записей в регистре РаботникиОрганизаций
		 Запрос = Новый Запрос;
		 ТекстЗапроса = 
		 "ВЫБРАТЬ ПЕРВЫЕ 1
		 |	РаботникиОрганизаций.Сотрудник
		 |ИЗ
		 |	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		 |ГДЕ
		 |	РаботникиОрганизаций.Сотрудник = &ПарамСотрудник";
		 
		 Запрос.УстановитьПараметр("ПарамСотрудник", Ссылка);
		 Запрос.Текст = ТекстЗапроса;
		 Выборка = Запрос.Выполнить().Выбрать();
		 Если Выборка.Следующий() Тогда
			 Возврат Истина;	
		 КонецЕсли; 
	 ИначеЕсли Не ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда 
		 //договор ГПХ, проверим регистрацию договоров документом
		 Запрос = Новый Запрос;
		 ТекстЗапроса = 
		 "ВЫБРАТЬ ПЕРВЫЕ 1
		 |	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник
		 |ИЗ
		 |	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
		 |ГДЕ
		 |	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник = &парамСотрудник
		 |	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен";
		 
		 Запрос.УстановитьПараметр("ПарамСотрудник", Ссылка);
		 Запрос.Текст = ТекстЗапроса;
		 Выборка = Запрос.Выполнить().Выбрать();
		 Если Выборка.Следующий() Тогда
			 Возврат Истина;	
		 КонецЕсли; 
	 КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции // ЕстьНачисленияИлиПриемНаРаботу()

// Функция возвращает список доступных видов договоров для выбора
Функция ПолучитьСписокДоступныхДоговоров()
	
	СписокЗначенийДляВыбора = Новый СписокЗначений;
	СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
	СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
	СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);

    Возврат СписокЗначенийДляВыбора;
	
КонецФункции

// Процедура устанавливает видимость ЭУ в зависимости от использования тарифного разряда
Процедура УстановитьВидимостьЭУПоИспользваниюТарифногоРазряда()
	
	Если мДоступнаРольРасчетчикаРегл или мДоступнаРольКадровикаРегл Тогда
		
		ИспользоватьТарифныйРазряд = ВидРасчета.ТребуетВводаТарифногоРазряда;
		ЭлементыФормы.НадписьТарифнаяСтавка.Заголовок = ?(ИспользоватьТарифныйРазряд,НСтр("ru='Разряд:';uk='Розряд:'"),НСтр("ru='Тариф \ Оклад:';uk='Тариф \ Оклад:'"));
		ЭлементыФормы.ТарифныйРазряд.Видимость = ИспользоватьТарифныйРазряд;
		ЭлементыФормы.ТарифнаяСтавка.Видимость = Не ИспользоватьТарифныйРазряд;
		
		ЭлементыФормы.НадписьТарифнаяСтавка1.Заголовок = ?(ИспользоватьТарифныйРазряд,НСтр("ru='Разряд:';uk='Розряд:'"),НСтр("ru='Тариф \ Оклад:';uk='Тариф \ Оклад:'"));
		ЭлементыФормы.ТарифныйРазряд1.Видимость = ИспользоватьТарифныйРазряд;
		ЭлементыФормы.ТарифнаяСтавка1.Видимость = Не ИспользоватьТарифныйРазряд;
		
		Если ИспользоватьТарифныйРазряд Тогда
			ЭлементыФормы.НадписьВалютаТарифнойСтавки.Видимость = Ложь;
			ЭлементыФормы.ВалютаТарифнойСтавки.Видимость 		= Ложь;
			
			ЭлементыФормы.НадписьВалютаТарифнойСтавки1.Видимость = Ложь;
			ЭлементыФормы.ВалютаТарифнойСтавки1.Видимость 		= Ложь;
		Иначе
			РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьЭУПоИспользваниюТарифногоРазряда()

// Процедура устанавиливает видимость панелей формы 
Процедура УстановитьВидимостьЭУ()

	ЭтоТрудовойДоговор = (ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	ЭтоДоговорГПХ = (ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда) ИЛИ (ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский);
	ЭтоПредварительноеСоглашение = (ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "СтраницаНовыйСотрудник" Тогда
		
		//форма нового сотрудника
		ЭлементыФормы.Организация.ТолькоПросмотр  = Не (ЭтоТрудовойДоговор или ЭтоДоговорГПХ);	
		ЭлементыФормы.ВидЗанятости.ТолькоПросмотр = Не ЭтоТрудовойДоговор;
		ЭлементыФормы.ПанельДанныхНовыйСотрудник.Страницы.ТрудовойДоговор.Видимость = мДоступнаРольРасчетчикаРегл или мДоступнаРольКадровикаРегл;
		ЭлементыФормы.ПанельДанныхНовыйСотрудник.Страницы.ТрудовойДоговор.Доступность = ЭтоТрудовойДоговор;
		ЭлементыФормы.ПерейтиКВводуТрудовогоДоговора.Видимость = ЭтоТрудовойДоговор и (мДоступнаРольКадровикаРегл или мДоступнаРольРасчетчикаРегл);
		
		Если ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство
			ИЛИ ЭтоДоговорГПХ
			Тогда
			ЭлементыФормы.ОсновноеНазначение.Видимость = (мДоступнаРольКадровикаРегл или мДоступнаРольРасчетчикаРегл);
			ЭлементыФормы.НадписьОсновноеНазначение.Видимость = (мДоступнаРольКадровикаРегл или мДоступнаРольРасчетчикаРегл);
		Иначе
			ЭлементыФормы.ОсновноеНазначение.Видимость = Ложь;
			ЭлементыФормы.НадписьОсновноеНазначение.Видимость = Ложь;
		КонецЕсли;
		
		Если ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
			ЭлементыФормы.ГруппаВзносов.Видимость = Ложь;
		ИначеЕсли ЭтоДоговорГПХ и НЕ ОсновноеНазначение.Пустая() Тогда
			ЭлементыФормы.ГруппаВзносов.Видимость = Ложь;
		Иначе
			ЭлементыФормы.ГруппаВзносов.Видимость = Истина;
		КонецЕсли;	
		
	Иначе 
		
		ЭлементыФормы.ПанельДанныхСотрудник.Страницы.КадровыеДанные.Видимость 	   = (мДоступнаРольКадровикаРегл или мДоступнаРольРасчетчикаРегл) и ЭтоТрудовойДоговор;
		ЭлементыФормы.ПанельДанныхСотрудник.Страницы.НачисленияУдержания.Видимость = мДоступнаРольРасчетчикаРегл и ЭтоТрудовойДоговор;
		ЭлементыФормы.ПанельДанныхСотрудник.Страницы.ТрудовойДоговор.Видимость     = (мДоступнаРольКадровикаРегл или мДоступнаРольРасчетчикаРегл) и ЭтоТрудовойДоговор;
		ЭлементыФормы.ПанельДанныхСотрудник.Страницы.СписокДоговоров.Видимость 	   = (мДоступнаРольКадровикаРегл или мДоступнаРольРасчетчикаРегл) и ЭтоДоговорГПХ;
		ЭлементыФормы.ПанельДанныхСотрудник.Страницы.ОтражениеВУчете.Видимость     = мДоступнаРольРасчетчикаРегл и (ЭтоТрудовойДоговор или ЭтоДоговорГПХ);
		
		ЭлементыФормы.ПанельДанныхСотрудник.Страницы.КадровыеДанныеУпрУчет.Видимость = мДоступныРолиУпрУчета;
		
		Если Не мЕстьНачисления Тогда
			ЭлементыФормы.Организация1.ТолькоПросмотр  = Не (ЭтоТрудовойДоговор или ЭтоДоговорГПХ);	
			ЭлементыФормы.ВидЗанятости1.ТолькоПросмотр = Не ЭтоТрудовойДоговор;
		КонецЕсли;
		
		
		Если ВидЗанятости <> Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы
			ИЛИ ЭтоДоговорГПХ 
			Тогда
			ЭлементыФормы.ОсновноеНазначение1.Видимость = (мДоступнаРольКадровикаРегл или мДоступнаРольРасчетчикаРегл);
			ЭлементыФормы.НадписьОсновноеНазначение1.Видимость = (мДоступнаРольКадровикаРегл или мДоступнаРольРасчетчикаРегл);
		Иначе
			ЭлементыФормы.ОсновноеНазначение1.Видимость = Ложь;
			ЭлементыФормы.НадписьОсновноеНазначение1.Видимость = Ложь;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует список обособленных подразделений организации
Процедура СформироватьСписокОбособленныхПодразделений()

	мСписокОбособленныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	мСписокОбособленныхПодразделений.Вставить(0,Организация);

КонецПроцедуры // СформироватьСписокОбособленныхПодразделений()

// Процедура формирует заголовок надписи ПерсональныеНадбавки
Процедура СформироватьЗаголовокПерсональныхНадбавок()

	ТекстНадписи = НСтр("ru='Персональные надбавки ... ';uk='Персональні надбавки ... '") + Символы.ПС;
	
	Для каждого ПерсональнаяНадбавка Из ПерсональныеНадбавки Цикл
		ТекстНадписи = ТекстНадписи + ПерсональнаяНадбавка.Надбавка + Символы.ПС;
	КонецЦикла;	
	
	ЭлементыФормы.НадбавкиПоТрудовомуДоговоруТекст.Заголовок = ТекстНадписи;
	ЭлементыФормы.НадбавкиПоТрудовомуДоговоруТекст1.Заголовок = ТекстНадписи;

КонецПроцедуры

Процедура УстановитьОтборыВСписках()

	Если Не мЭтоНовый Тогда
		
		ЭтоТрудовойДоговор = (ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
		ЭтоДоговорГПХ = (ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда) ИЛИ (ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		
		КадровыеДокументы.Отбор.Организация.ВидСравнения  	= ВидСравнения.Равно;
		КадровыеДокументы.Отбор.Организация.Значение 		= Организация;
		КадровыеДокументы.Отбор.Организация.Использование 	= ЭтоТрудовойДоговор;
		КадровыеДокументы.Отбор.ДокументыПоСотрудникуОрганизации.Значение 		= Ссылка;
		КадровыеДокументы.Отбор.ДокументыПоСотрудникуОрганизации.Использование 	= ЭтоТрудовойДоговор;
		
		ПлановыеНачисления.Отбор.Организация.Значение 		= Организация;
		ПлановыеНачисления.Отбор.Организация.Использование 	= ЭтоТрудовойДоговор;
		ПлановыеНачисления.Отбор.Сотрудник.Значение 		= Ссылка;
		ПлановыеНачисления.Отбор.Сотрудник.Использование 	= ЭтоТрудовойДоговор;
		ПлановыеНачисления.Отбор.Действие.Значение	 		= Перечисления.ВидыДействияСНачислением.Прекратить;
		ПлановыеНачисления.Отбор.Действие.ВидСравнения		= ВидСравнения.НеРавно;
		ПлановыеНачисления.Отбор.Действие.Использование 	= ЭтоТрудовойДоговор;
		
		ПлановыеУдержания.Отбор.Организация.Значение 		= Организация;
		ПлановыеУдержания.Отбор.Организация.Использование 	= ЭтоТрудовойДоговор;
		ПлановыеУдержания.Отбор.Сотрудник.Значение 			= Ссылка;
		ПлановыеУдержания.Отбор.Сотрудник.Использование 	= ЭтоТрудовойДоговор;
		ПлановыеУдержания.Отбор.Действие.Значение	 		= Перечисления.ВидыДействияСНачислением.Прекратить;
		ПлановыеУдержания.Отбор.Действие.ВидСравнения		= ВидСравнения.НеРавно;
		ПлановыеУдержания.Отбор.Действие.Использование 		= ЭтоТрудовойДоговор;
		
		ОтражениеОсновныхНачислений.Отбор.Сотрудник.Значение = Ссылка;
		ОтражениеОсновныхНачислений.Отбор.Сотрудник.Использование = ЭтоТрудовойДоговор ИЛИ ЭтоДоговорГПХ;
		ОтражениеПлановыхНачислений.Отбор.Сотрудник.Значение = Ссылка;
		ОтражениеПлановыхНачислений.Отбор.Сотрудник.Использование = ЭтоТрудовойДоговор ИЛИ ЭтоДоговорГПХ;
		
		МестоРаботы.Отбор.Организация.Значение		= Организация;
		МестоРаботы.Отбор.Организация.Использование = ЭтоТрудовойДоговор;
		МестоРаботы.Отбор.Сотрудник.Значение 		= Ссылка;
		МестоРаботы.Отбор.Сотрудник.Использование 	= ЭтоТрудовойДоговор;
		МестоРаботы.Отбор.ПричинаИзмененияСостояния.Значение      = Перечисления.ПричиныИзмененияСостояния.Увольнение;
		МестоРаботы.Отбор.ПричинаИзмененияСостояния.ВидСравнения  = ВидСравнения.НеРавно;
		МестоРаботы.Отбор.ПричинаИзмененияСостояния.Использование = ЭтоТрудовойДоговор;
		
		СписокДоговоровГПХ.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
		СписокДоговоровГПХ.Отбор.Организация.Значение      = Организация;
		СписокДоговоровГПХ.Отбор.Организация.Использование = ЭтоДоговорГПХ;
		СписокДоговоровГПХ.Отбор.Сотрудник.Значение 	   = Ссылка;
		СписокДоговоровГПХ.Отбор.Сотрудник.Использование   = ЭтоДоговорГПХ;
		
		//для упр учета
		ПоказываемУпрУчет = Истина;
		
		КадровыеДокументыУпрУчет.Отбор.ДокументыПоРаботнику.Значение 		= Ссылка.Физлицо;
		КадровыеДокументыУпрУчет.Отбор.ДокументыПоРаботнику.Использование 	= ПоказываемУпрУчет;
		
		МестоРаботыУпрУчет.Отбор.Физлицо.Значение 		= Ссылка.Физлицо;
		МестоРаботыУпрУчет.Отбор.Физлицо.Использование 	= ПоказываемУпрУчет;
		МестоРаботыУпрУчет.Отбор.ПричинаИзмененияСостояния.Значение      = Перечисления.ПричиныИзмененияСостояния.Увольнение;
		МестоРаботыУпрУчет.Отбор.ПричинаИзмененияСостояния.ВидСравнения  = ВидСравнения.НеРавно;
		МестоРаботыУпрУчет.Отбор.ПричинаИзмененияСостояния.Использование = ПоказываемУпрУчет;
		
	КонецЕсли; 	

КонецПроцедуры

// Процедура формирует список доступных видов занятости, в зависимости от учетной политики по персоналу организаций
Процедура УстановитьДоступныеЗначениеВидЗанятости(Редактировать = Ложь)

	СписокЗначенийДляВыбора = Новый СписокЗначений;
	СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыЗанятостиВОрганизации.Совместительство);
	
	ПоддержкаВнутреннегоСовместительства = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ПоддержкаВнутреннегоСовместительства");
	
	Если ПоддержкаВнутреннегоСовместительства Тогда
		СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	КонецЕсли;
	
	ЭлементыФормы.ВидЗанятости.ДоступныеЗначения 	= СписокЗначенийДляВыбора;
	ЭлементыФормы.ВидЗанятости1.ДоступныеЗначения 	= СписокЗначенийДляВыбора;
	
	Если ЗначениеЗаполнено(ВидЗанятости) и СписокЗначенийДляВыбора.НайтиПоЗначению(ВидЗанятости) = Неопределено и Редактировать Тогда
	
		ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка();
		ЭлементыФормы.ВидЗанятости1.ОтметкаНезаполненного 		= Истина;
		ЭлементыФормы.ВидЗанятости1.АвтоОтметкаНезаполненного 	= Истина;
		ЭлементыФормы.ВидЗанятости.ОтметкаНезаполненного 		= Истина;
		ЭлементыФормы.ВидЗанятости.АвтоОтметкаНезаполненного 	= Истина;
	
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСписокВидовЗанятости()

// Процедура очищает не используемые реквизиты перед записью объекта
Процедура ОчиститьНеИспользуемыеРеквизиты()
	
	Если Не ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		
		ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка();
		НомерДоговора ="";
		ДатаДоговора = Дата('00010101');
		ОбособленноеПодразделение = Справочники.Организации.ПустаяСсылка();
		ПодразделениеОрганизеции  = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Должность		 = Справочники.ДолжностиОрганизаций.ПустаяСсылка();
		ГрафикРаботы	 = Справочники.ГрафикиРаботы.ПустаяСсылка();
		ЗанимаемыхСтавок = 0;
		ДатаНачала 	  = Дата('00010101');
		ДатаОкончания = Дата('00010101');
		ИспытательныйСрок = 0;
		СпособРасчета  = Перечисления.СпособыРасчетаОплатыТруда.ПустаяСсылка();
		ТарифнаяСтавка = 0;
		ТарифныйРазряд = Справочники.ТарифныеРазряды.ПустаяСсылка();
		ВалютаТарифнойСтавки = Справочники.Валюты.ПустаяСсылка();
			
	КонецЕсли; 
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура управляет видимостью гиперссылки открытия формы физлица при вводе нового сотрудника
// и заголовком гиперссылки
 Процедура УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно()

	Если ПустаяСтрока(ФизлицоОбъект.Наименование) Тогда
		ЭлементыФормы.РедактироватьФизлицоОтдельно.Видимость = Ложь;
	Иначе
		ЭлементыФормы.РедактироватьФизлицоОтдельно.Видимость = Истина;	
		ЭлементыФормы.РедактироватьФизлицоОтдельно.Заголовок = НСтр("ru='Более подробно о физическом лице ';uk='Більш докладно про фізичну особу '") + ФизлицоОбъект.Наименование + "...";
	КонецЕсли;	

КонецПроцедуры // УстановитьЗаголовокВидимостьРедактированияФизлица()

// Процедура изменяет заголовок гиперссылки ПерейтиКВводуГруппыДоступа
Процедура УстановитьЗаголовокВидимостьПерейтиКВводуГруппыДоступа()
	
	ЭлементыФормы.ПерейтиКВводуГруппыДоступа.Видимость = мЕстьОграниченияПравДоступаНаУровнеЗаписей И Не ВыборФизлица И Не ПустаяСтрока(ФизлицоОбъект.Наименование);
	
	Если ЭлементыФормы.ПерейтиКВводуГруппыДоступа.Видимость Тогда
		Если ЗначениеЗаполнено(ФизлицоОбъект.ГруппаФизическихЛиц) Тогда
			ЭлементыФормы.ПерейтиКВводуГруппыДоступа.Заголовок = НСтр("ru='Группа доступа: ';uk='Група доступу: '") + ФизлицоОбъект.ГруппаФизическихЛиц + " ...";
			ЭлементыФормы.ПерейтиКВводуГруппыДоступа.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
		Иначе
			ЭлементыФормы.ПерейтиКВводуГруппыДоступа.Заголовок = НСтр("ru='Введите группу доступа для физического лица ...';uk='Введіть групу доступу для фізичної особи ...'");	
			ЭлементыФормы.ПерейтиКВводуГруппыДоступа.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
		КонецЕсли;	
	КонецЕсли; 
	
КонецПроцедуры // УстановитьЗаголовокПерейтиКВводуГруппыДоступа()

// Процедура устанавливает заголовок гиперссылкни ОткрытьСправочникФизлиц
// в зависимости от варианта ввода физлица
Процедура УстановитьЗаголовокОткрытьСправочникФизлиц()
	
	Если ВыборФизлица Тогда
		ЭлементыФормы.ОткрытьСправочникФизлиц.Заголовок = НСтр("ru='Открыть справочник физических лиц для выбора...';uk='Відкрити довідник фізичних осіб для вибору...'");
	Иначе
		ЭлементыФормы.ОткрытьСправочникФизлиц.Заголовок = НСтр("ru='Открыть справочник физических лиц...';uk='Відкрити довідник фізичних осіб...'");
	КонецЕсли;	
	
КонецПроцедуры // УстановитьЗаголовокОткрытьСправочникФизлиц()

// Процедура получает ФИО физлица
Процедура ПрочитатьФИО()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", Физлицо);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Период,
	|	ФИОФизЛицСрезПоследних.ФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	мНаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейФИО.Добавить(), Выборка);
		ФИОСрез  = мНаборЗаписейФИО[0];
		Фамилия  = ФИОСрез.Фамилия;
		Имя      = ФИОСрез.Имя;
		Отчество = ФИОСрез.Отчество;
	Иначе
		Фамилия  = "";
		Имя      = "";
		Отчество = "";
	КонецЕсли;

КонецПроцедуры // ПрочитатьФИО()

// Процедура устанавливает доступность реквизитов физлица в зависимости от варианта ввода нового сотрудника
Процедура УстановитьДоступностьРеквизитовФизлица()
	
	ЭлементыФормы.НаименованиеФизлица.Видимость = Не ВыборФизлица;
	ЭлементыФормы.Физлицо.Видимость = ВыборФизлица;
	ЭлементыФормы.ДатаРождения.ТолькоПросмотр = ВыборФизлица;
	ЭлементыФормы.Пол.ТолькоПросмотр = ВыборФизлица;
	ЭлементыФормы.ДРФО.ТолькоПросмотр = ВыборФизлица;
	
КонецПроцедуры // УстановитьДоступностьПоВИду()

// Функция проверяет что сотрудник работает или работал в компании
// Возвращаемое значение:
//   Булево
//
Функция ЭтоСотрудникКомпании()
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда 
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Работники.ФизЛицо
		|ИЗ
		|	РегистрСведений.Работники КАК Работники
		|ГДЕ
		|	Работники.Физлицо = &парамФизлицо";
		
		Запрос.УстановитьПараметр("парамФизлицо", Ссылка.Физлицо);
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Истина;	
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции // ЭтоСотрудникКомпании()

// Процедура устанваливает видимость страниц панелей договоров
Процедура ОбработатьИзменениеВидаДоговора()
	
	УстановитьВидимостьЭУ();
	УстановитьОтборыВСписках();
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "СтраницаНовыйСотрудник" Тогда
		//форма нового сотрудника
		Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			
			ПроверитьИУстановитьВидЗанятости(Ложь);
			
			СформироватьЗаголовокПерсональныхНадбавок();
			ЭлементыФормы.ВидЗанятости.ТолькоПросмотр = Ложь;
			ЭлементыФормы.ВидЗанятости.ОтметкаНезаполненного = Не ЗначениеЗаполнено(ВидЗанятости);
			ЭлементыФормы.ВидЗанятости.АвтоОтметкаНезаполненного = Истина;
			
			ЭлементыФормы.Организация.ТолькоПросмотр = Ложь;
			Если Организация.Пустая() Тогда
				ОбособленноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
				Организация = ОбособленноеПодразделение;
				ОбработатьИзменениеОрганизации();
			КонецЕсли;
			ЭлементыФормы.Организация.ОтметкаНезаполненного     = Не ЗначениеЗаполнено(Организация);
			ЭлементыФормы.Организация.АвтоОтметкаНезаполненного = Истина;
			
			Если ВалютаТарифнойСтавки.Пустая() Тогда
				ВалютаТарифнойСтавки =  мВалютаРегламентированногоУчета;
			КонецЕсли;

			ОбработатьОтображениеОбособленногоПодразделения();
			
			ЭлементыФормы.ПерейтиКВводуТрудовогоДоговора.Видимость = мДоступнаРольКадровикаРегл или мДоступнаРольРасчетчикаРегл;
			ЭлементыФормы.ПанельДанныхНовыйСотрудник.Страницы.ТрудовойДоговор.Доступность = Истина;
			
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
			
			ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка();
			ЭлементыФормы.ВидЗанятости.ТолькоПросмотр = Истина;
			ЭлементыФормы.ВидЗанятости.АвтоОтметкаНезаполненного = Ложь;
			ЭлементыФормы.ВидЗанятости.ОтметкаНезаполненного = Ложь;
			
			Организация = Справочники.Организации.ПустаяСсылка();
			ЭлементыФормы.Организация.ТолькоПросмотр = Истина;
			ЭлементыФормы.Организация.АвтоОтметкаНезаполненного  = Ложь;
			ЭлементыФормы.Организация.ОтметкаНезаполненного  = Ложь;
			ЭлементыФормы.ПерейтиКВводуТрудовогоДоговора.Видимость = Ложь;
			ЭлементыФормы.ПанельДанныхНовыйСотрудник.Страницы.ТрудовойДоговор.Доступность = Ложь;
			
		Иначе // авторский договор или договор подряда
			
			ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка();
			ЭлементыФормы.ВидЗанятости.ТолькоПросмотр = Истина;
			ЭлементыФормы.ВидЗанятости.АвтоОтметкаНезаполненного = Ложь;
			ЭлементыФормы.ВидЗанятости.ОтметкаНезаполненного = Ложь;
			
			ЭлементыФормы.Организация.ТолькоПросмотр = Ложь;
			Если Организация.Пустая() Тогда
				ОбособленноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
				Организация = ОбособленноеПодразделение;
				ОбработатьИзменениеОрганизации();
			КонецЕсли;
			ЭлементыФормы.Организация.ОтметкаНезаполненного     = Не ЗначениеЗаполнено(Организация);
			ЭлементыФормы.Организация.АвтоОтметкаНезаполненного = Истина;
			ЭлементыФормы.ПерейтиКВводуТрудовогоДоговора.Видимость = Ложь;
			ЭлементыФормы.ПанельДанныхНовыйСотрудник.Страницы.ТрудовойДоговор.Доступность = Ложь;
			
		КонецЕсли;
		
	Иначе //форма сотрудника

		Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			
			СформироватьЗаголовокПерсональныхНадбавок();
			ЭлементыФормы.ВидЗанятости1.ТолькоПросмотр = Ложь;
			ЭлементыФормы.ВидЗанятости1.ОтметкаНезаполненного     = Не ЗначениеЗаполнено(ВидЗанятости);
			ЭлементыФормы.ВидЗанятости1.АвтоОтметкаНезаполненного = Истина;
			
			ЭлементыФормы.Организация1.ТолькоПросмотр = Ложь;
			ЭлементыФормы.Организация1.ОтметкаНезаполненного      = Не ЗначениеЗаполнено(Организация);
			ЭлементыФормы.Организация1.АвтоОтметкаНезаполненного  = Истина;
			
			Если ВалютаТарифнойСтавки.Пустая() Тогда
				ВалютаТарифнойСтавки =  мВалютаРегламентированногоУчета;
			КонецЕсли;
			
			ОбработатьОтображениеОбособленногоПодразделения();
			
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
			
			ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка();
			ЭлементыФормы.ВидЗанятости1.ТолькоПросмотр = Истина;
			ЭлементыФормы.ВидЗанятости1.ОтметкаНезаполненного = Ложь;
			
			Организация = Справочники.Организации.ПустаяСсылка();
			ЭлементыФормы.Организация1.ТолькоПросмотр = Истина;
			ЭлементыФормы.Организация1.АвтоОтметкаНезаполненного  = Ложь;
			ЭлементыФормы.Организация1.ОтметкаНезаполненного  	  = Ложь;
			
		Иначе // авторский договор или договор подряда
			
			ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка();
			ЭлементыФормы.ВидЗанятости1.ТолькоПросмотр = Истина;
			ЭлементыФормы.ВидЗанятости1.АвтоОтметкаНезаполненного = Ложь;
			ЭлементыФормы.ВидЗанятости1.ОтметкаНезаполненного = Ложь;
			
			ЭлементыФормы.Организация1.ТолькоПросмотр = Ложь;
			ЭлементыФормы.Организация1.ОтметкаНезаполненного      = Не ЗначениеЗаполнено(Организация);
			ЭлементыФормы.Организация1.АвтоОтметкаНезаполненного  = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Код = ПолучитьОчереднойТабельныйНомер();

КонецПроцедуры

// Процедура управляет отображением кнопок выбора из списка
Процедура ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию()
	
	Если мДоступнаРольРасчетчикаРегл или мДоступнаРольКадровикаРегл Тогда //для других ролей не видна закладка ТрудовойДоговор
		ОрганизацияДляШР = Организация;
		
		СписокПодразделений = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации("ПодразделениеОрганизации", ОрганизацияДляШР, Должность);
		КоличествоЗначений = СписокПодразделений.Количество();
		ЭлементыФормы.ПодразделениеОрганизации.КнопкаСпискаВыбора = КоличествоЗначений > 0;
		ЭлементыФормы.ПодразделениеОрганизации1.КнопкаСпискаВыбора = КоличествоЗначений > 0;
		
		СписокДолжностей = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации("Должность", ОрганизацияДляШР, ПодразделениеОрганизации);
		КоличествоЗначений = СписокДолжностей.Количество();
		ЭлементыФормы.Должность.КнопкаСпискаВыбора = КоличествоЗначений > 0;
		ЭлементыФормы.Должность1.КнопкаСпискаВыбора = КоличествоЗначений > 0;
		
		Если ГрафикРаботы.Пустая() Тогда
			ДанныеШР = ПроцедурыУправленияПерсоналом.СведенияОПозицииШтатногоРасписания(ДатаДоговора, ПодразделениеОрганизации, Должность);
			Если ДанныеШР.Количество() > 0 Тогда
				ГрафикРаботы = ДанныеШР[0].ГрафикРаботы;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию()


// Процедура обрабатывает изменение организации
Процедура ОбработатьИзменениеОрганизации()

	//сформируем новый список обособленных подразделений
	СформироватьСписокОбособленныхПодразделений();
	
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	//БухгалтерскийИНалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("глУчетнаяПолитикаПоНалоговомуУчету"), КонецМесяца(ТекущаяДата()), Организация);
	//БухгалтерскийИНалоговыйУчет.УстановитьВидимостьРеквизитовЕНВД(мМассивЭУЕНВД, Организация, ТекущаяДата(), глЗначениеПеременной("глУчетнаяПолитикаПоНалоговомуУчету"));

	УстановитьВидимостьЭУПоИспользваниюТарифногоРазряда();
	УстановитьДоступныеЗначениеВидЗанятости(Истина);
	Код = ПолучитьОчереднойТабельныйНомер();
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		
		ПроверитьИУстановитьВидЗанятости(Ложь);
		
		//получим новый номер трудового договора
		НомерДоговора = ПолучитьНомерТрудовогоДоговора();	
		
		// обработаем отображение обособленного подразделения в трудовом договоре
		ОбработатьОтображениеОбособленногоПодразделения();
		// и проверим ПодразделениеОрганизации в трудовом договоре
		ОбработкаРеквизитовТрудовогоДоговора();
		// обработаем возможность выбора из списка ПодразделенияОрганизации и Должности по штатному расписанию
		ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию();
		
		Если ВалютаТарифнойСтавки.Пустая() Тогда
			ВалютаТарифнойСтавки =  мВалютаРегламентированногоУчета;
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ОбработатьОтображениеОбособленногоПодразделения(ИзменятьДанные = Истина)

	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		ПоказыватьПодразделения = Организация.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо и ЗначениеЗаполнено(Организация);
		Если ПоказыватьПодразделения Тогда
			// Получим список обособленных подразделений организации
			ПоказыватьПодразделения =  ЗначениеЗаполнено(Организация.ГоловнаяОрганизация) или ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация).Количество() > 0;
		КонецЕсли;
		
		ЭлементыФормы.ОбособленноеПодразделение.Доступность = ПоказыватьПодразделения;
		ЭлементыФормы.ОбособленноеПодразделение1.Доступность = ПоказыватьПодразделения;
		
		Если ИзменятьДанные и Не ПоказыватьПодразделения Тогда
			ОбособленноеПодразделение = Справочники.Организации.ПустаяСсылка();
		ИначеЕсли ИзменятьДанные и ПоказыватьПодразделения и ОбособленноеПодразделение.Пустая() Тогда
			ОбособленноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
			Если мСписокОбособленныхПодразделений.НайтиПоЗначению(ОбособленноеПодразделение) = НеОпределено Тогда
				ОбособленноеПодразделение = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;
		ИначеЕсли ИзменятьДанные и ПоказыватьПодразделения и НЕ ОбособленноеПодразделение.Пустая() Тогда
			Если мСписокОбособленныхПодразделений.НайтиПоЗначению(ОбособленноеПодразделение) = НеОпределено Тогда
				ОбособленноеПодразделение = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает отображение обособленного подразделения
// и провереят ПодразделениеОрганизации в трудовом договоре
Процедура ОбработкаРеквизитовТрудовогоДоговора()

	ПоказыватьПодразделения = Организация.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо и ЗначениеЗаполнено(Организация);
	Если ПоказыватьПодразделения Тогда
		// Получим список обособленных подразделений организации
		ПоказыватьПодразделения = ЗначениеЗаполнено(Организация.ГоловнаяОрганизация) или ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация).Количество() > 0;
	КонецЕсли;
	
	Если Не ПодразделениеОрганизации.Пустая() 
		и Не ПодразделениеОрганизации.Владелец = ?(ПоказыватьПодразделения,ОбособленноеПодразделение,Организация) Тогда
		//выбранное подразделение организации не соответствует организации
		ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Предупреждение(НСтр("ru='Выбранное подразделение не соответствует организации!';uk='Обраний підрозділ не відповідає організації!'"));
	КонецЕсли;	
	
	ЭлементыФормы.ПодразделениеОрганизации.ВыборПоВладельцу = ?(ПоказыватьПодразделения,ОбособленноеПодразделение,Организация);	
	ЭлементыФормы.ПодразделениеОрганизации1.ВыборПоВладельцу = ?(ПоказыватьПодразделения,ОбособленноеПодразделение,Организация);

КонецПроцедуры

Функция ПолучитьСтруктуруПараметровТайпинга()
	
	ВидыВремени = Новый Массив;
	ВидыВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);

	СтруктураПараметров = Новый Структура("ВидВремени", ВидыВремени);
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровТайпинга()

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровТайпингаОрганизации()

	СтруктураПараметров = Новый Структура("ГоловнаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровТайпинга()()

Процедура ЗаполнитьНаборыПоФизлицу()

	мНаборЗаписейГражданство = РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
	мНаборЗаписейИнвалидность = РегистрыСведений.СведенияОбИнвалидностиФизлиц.СоздатьНаборЗаписей();
	мНаборЗаписейПенсионер = РегистрыСведений.СведенияОПенсионерах.СоздатьНаборЗаписей();
	мНаборЗаписейНаличиеГарантий = РегистрыСведений.СведенияОЛицахСДополнительнымиГарантиями.СоздатьНаборЗаписей();  
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", Физлицо);
	Запрос.УстановитьПараметр("Дата", РабочаяДата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГражданствоФизЛицСрезПоследних.Период,
	|	ГражданствоФизЛицСрезПоследних.ФизЛицо,
	|	ГражданствоФизЛицСрезПоследних.Страна,
	|	ГражданствоФизЛицСрезПоследних.НеИмеетПравоНаПенсию,
	|	ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентом
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ГражданствоФизЛицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейГражданство.Добавить(), Выборка);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Период,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Физлицо,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Инвалидность,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.УдостоверениеСерия,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.УдостоверениеНомер,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.УдостоверениеДатаВыдачи,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Группа,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Комментарий 
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК СведенияОбИнвалидностиФизлицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейИнвалидность.Добавить(), Выборка);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОПенсионерахСрезПоследних.Период,
	|	СведенияОПенсионерахСрезПоследних.Физлицо,
	|	СведенияОПенсионерахСрезПоследних.Пенсионер,
	|	СведенияОПенсионерахСрезПоследних.СвидетельствоСерия,
	|	СведенияОПенсионерахСрезПоследних.СвидетельствоНомер,
	|	СведенияОПенсионерахСрезПоследних.СвидетельствоДатаВыдачи
	|ИЗ
	|	РегистрСведений.СведенияОПенсионерах.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК СведенияОПенсионерахСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейПенсионер.Добавить(), Выборка);
	КонецЕсли;
	
	ИзменитьГруппуВзносов();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОЛицахСДополнительнымиГарантиямиСрезПоследних.Период,
	|	СведенияОЛицахСДополнительнымиГарантиямиСрезПоследних.Физлицо,
	|	СведенияОЛицахСДополнительнымиГарантиямиСрезПоследних.НаличиеГарантий,
	|	СведенияОЛицахСДополнительнымиГарантиямиСрезПоследних.ВидГарантии
	|ИЗ
	|	РегистрСведений.СведенияОЛицахСДополнительнымиГарантиями.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК СведенияОЛицахСДополнительнымиГарантиямиСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейНаличиеГарантий.Добавить(), Выборка);
	КонецЕсли;
	

	
КонецПроцедуры

Процедура ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента)
	
	Если ИмяОбновляемогоЭлемента = "Гражданство" Тогда
		
		Если мНаборЗаписейГражданство.Количество() > 0 Тогда
			Гражданство = "" + мНаборЗаписейГражданство[0].Страна + ?(мНаборЗаписейГражданство[0].НеИмеетПравоНаПенсию,НСтр("ru=', не ';uk=', не '"),", " ) + НСтр("ru='имеет право на пенсию';uk='має право на пенсію'") +  ?(мНаборЗаписейГражданство[0].НеЯвляетсяНалоговымРезидентом,НСтр("ru=', не ';uk=', не '"),", " ) + НСтр("ru='является налоговым резидентом';uk='є податковим резидентом'");
			ГражданствоСтрана = "" + мНаборЗаписейГражданство[0].Страна;
			
			Модифицированность = Истина;
			
		Иначе
			Гражданство = НСтр("ru='Ввести данные о гражданстве';uk='Ввести дані про громадянство'");
		КонецЕсли;
		
	ИначеЕсли ИмяОбновляемогоЭлемента = "Инвалидность" Тогда
		
		Если мНаборЗаписейИнвалидность.Количество() > 0 Тогда
			ЗаписьИзНабора = мНаборЗаписейИнвалидность[0];
			
			Если ЗаписьИзНабора.Инвалидность Тогда
				Инвалидность = 	НСтр("ru='инвалид: группа: ';uk='інвалід: група: '") + ЗаписьИзНабора.Группа 
				+ НСтр("ru=', удостоверение серия: ';uk=', посвідчення серія: '") + ЗаписьИзНабора.УдостоверениеСерия + НСтр("ru=', номер: ';uk=', номер: '") + ЗаписьИзНабора.УдостоверениеНомер 
				+ НСтр("ru=', выдана: ';uk=', видана: '")  + Формат(ЗаписьИзНабора.УдостоверениеДатаВыдачи,"ДФ='дд ММММ гггг';ДП='...'") + НСтр("ru=' года ';uk=' року '");
				
			Иначе
				Инвалидность = НСтр("ru='Не является инвалидом';uk='Не є інвалідом'");
				
			КонецЕсли;
			
			Модифицированность = Истина;
			
		Иначе
			Инвалидность = НСтр("ru='Ввести данные об инвалидности';uk='Ввести дані про інвалідність'");
		КонецЕсли;
	ИначеЕсли ИмяОбновляемогоЭлемента = "НаличиеГарантий" Тогда
		
		Если мНаборЗаписейНаличиеГарантий.Количество() > 0 Тогда
			ЗаписьИзНабора = мНаборЗаписейНаличиеГарантий[0];
			
			Если ЗаписьИзНабора.НаличиеГарантий Тогда
				НаличиеГарантий = 	НСтр("ru='Имеет дополнительную гарантию: вид гарантии: ';uk='Має додаткову гарантію: вид гарантії: '") + ЗаписьИзНабора.ВидГарантии;
				
			Иначе
				НаличиеГарантий = НСтр("ru='Не имеет гарантий';uk='Не має гарантій'");
				
			КонецЕсли;
			
			Модифицированность = Истина;
			
		Иначе
			НаличиеГарантий = НСтр("ru='Ввести данные о наличии гарантий';uk='Ввести дані про наявність гарантій'");
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает изменения ЭУ ВыборФизлица
Процедура ОбработатьВыборФизлицаПриИзменении()

	//сбрасываем ссылку на физлицо, если выбрали - создавать новое физлицо
	Если Не ВыборФизлица И НЕ Физлицо.Пустая() Тогда
		Физлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		ФизлицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
	ИначеЕсли ВыборФизлица И Физлицо.Пустая() Тогда
		ФизлицоОбъект.Наименование = "";
	КонецЕсли;
	
	УстановитьДоступностьРеквизитовФизлица();
	Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
	УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно();
	УстановитьЗаголовокВидимостьПерейтиКВводуГруппыДоступа();
	УстановитьЗаголовокОткрытьСправочникФизлиц();
	мНаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
	ПрочитатьФИО();

КонецПроцедуры // ОбработатьВыборФизлицаПриИзменении()

// Функция возвращает постфикс наименования, который соответствует виду договра
// Возвращаемое значение:
//   <Строка>   – постфикс наименования
//
Функция ПолучитьПостфиксПоВидуДоговра()

	НовыйПостфикс = "";
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		Если ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
			НовыйПостфикс =НСтр("ru='(вн. совм.)';uk='(вн. сум.)'"); 
		ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда
			НовыйПостфикс = НСтр("ru='(осн.)';uk='(осн.)'");
		Иначе
			НовыйПостфикс = НСтр("ru='(совм.)';uk='(сум.)'");
		КонецЕсли; 
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
		НовыйПостфикс = НСтр("ru='(дог. подр.)';uk='(дог. підр.)'");
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
		НовыйПостфикс = НСтр("ru='(дог. авт.)';uk='(дог. авт.)'");
	КонецЕсли;
	
	Возврат НовыйПостфикс;

КонецФункции // ПолучитьПостфиксПоВидуДоговра()

// Функция проверяет наличие в выборке из запроса постфикса, переданного
// в качестве параметра и если есть такой, пытается подобрать другой постфикс
// Параметры
//  ПостфиксДляПроверки  – Строка – постфикс, который передаем для проверки
//                 <продолжение описания параметра>
//  ВыборкаИзЗапроса  – выборка из запроса по которой проверяем
//
// Возвращаемое значение:
//   Строка   – подобранный постфикс наименования
//
Функция ПроверитьИПодобратьПостфикс(ПостфиксДляПроверки, ВыборкаИзЗапроса)

	НомПопытки = 1;
	НовыйПостфикс = ПостфиксДляПроверки;
	Пока Истина Цикл
		
		Если НомПопытки > 9 Тогда
			//выходи из цикла, не удалось автоматически подобрать постфикс
			НовыйПостфикс = "";
			Прервать;
		КонецЕсли;
		
		ВыборкаИзЗапроса.Сбросить();
		Если ВыборкаИзЗапроса.НайтиСледующий(НовыйПостфикс,"Постфикс")Тогда
			НовыйПостфикс = Лев(ПостфиксДляПроверки,СтрДлина(ПостфиксДляПроверки)-1) + " " + Строка(НомПопытки) + ")";
			НомПопытки=НомПопытки + 1;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыйПостфикс;

КонецФункции // ПроверитьИПодобратьПостфикс()


// Процедура подбирает постфикс наименования перед записью нового сотрудника
Процедура ПодобратьПостфиксНаименования()
	
	//запросом выбираем выбираем Актуальных не уволенных сотрудников
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сотрудники.ПостфиксНаименования КАК Постфикс
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		,
	|		Организация = &парамОрганизация
	|			И Сотрудник.Физлицо = &парамФизлицо) КАК Работники
	|		ПО Сотрудники.Ссылка = Работники.Сотрудник
	|			И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|ГДЕ
	|	Сотрудники.Физлицо = &парамФизлицо
	|	И Сотрудники.Ссылка <> &Ссылка
	|	И Сотрудники.Организация = &парамОрганизация
	|	И Работники.ПричинаИзмененияСостояния ЕСТЬ NULL
	|	И Сотрудники.Актуальность";
	
	Запрос.УстановитьПараметр("парамФизлицо",     Физлицо);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = ТекстЗапроса;
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаИзЗапроса.Количество()>0 Тогда
		//есть сотрудники по этому физлицу, необходимо подобрать постфикс
		// проверим, есть сотрудник с пустым постфиксом
		Если ВыборкаИзЗапроса.НайтиСледующий(СОКРЛП(ПостфиксНаименования),"Постфикс")Тогда
			//есть сотрудники с таким постфиксом, значит необходимо назначить другой постфикс этому сотруднику
			ПостфиксНаименования = ПроверитьИПодобратьПостфикс(ПолучитьПостфиксПоВидуДоговра(), ВыборкаИзЗапроса);
			Если Не ПустаяСтрока(ПостфиксНаименования) Тогда
				Наименование = СОКРЛП(ФизлицоОбъект.Наименование) + " " + ПостфиксНаименования;
			КонецЕсли;
		ИначеЕсли Не ПустаяСтрока(ПостфиксНаименования) Тогда	
			//проверим, может у сотрудника остался постфикс, который не соответствует виду договора
			ПостфиксПоВидуДоговра = ПолучитьПостфиксПоВидуДоговра();
			Если Лев(ПостфиксНаименования,СтрДлина(ПостфиксПоВидуДоговра)-1) <> Лев(ПостфиксПоВидуДоговра,СтрДлина(ПостфиксПоВидуДоговра)-1)Тогда
				//скорее всего текущий постфикс наименования не соответствует виду договора
				ПостфиксНаименования = ПроверитьИПодобратьПостфикс(ПостфиксПоВидуДоговра, ВыборкаИзЗапроса);
				Если Не ПустаяСтрока(ПостфиксНаименования) Тогда
					Наименование = СОКРЛП(ФизлицоОбъект.Наименование) + " " + ПостфиксНаименования;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодобратьПостфиксНаименования()

// Процедура проверяет какой вид занятости установить по умолчанию
Процедура ПроверитьИУстановитьВидЗанятости(НеЗадаватьВопрос = Истина)

	Если (ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы 
		или ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство) и ЗначениеЗаполнено(Организация)
		и ЗначениеЗаполнено(Физлицо) Тогда
		//проверим, есть актуальный не уволенный сотрудник в этой организации с видом занятости
		// основное место работы или совместитель
		// и если есть установим вид занятости - Внутреннее совместительство
		
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сотрудники.ВидЗанятости,
		|	Сотрудники.Физлицо.Наименование КАК ФизлицоНаименование
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|		,
		|		Организация = &парамОрганизация
		|			И Сотрудник.Физлицо = &парамФизлицо) КАК Работники
		|		ПО Сотрудники.Ссылка = Работники.Сотрудник
		|			И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|ГДЕ
		|	Сотрудники.Физлицо = &парамФизлицо
		|	И Сотрудники.Организация = &парамОрганизация
		|	И Работники.ПричинаИзмененияСостояния ЕСТЬ NULL 
		|	И Сотрудники.Актуальность
		|	И Сотрудники.Ссылка <> &парамТекущийСотрудник
		|	И Сотрудники.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство))";
		
		Запрос.УстановитьПараметр("парамФизлицо",     Физлицо);
		Запрос.УстановитьПараметр("парамТекущийСотрудник", Ссылка);
		Запрос.УстановитьПараметр("парамОрганизация", Организация);
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			НетПоддержкиВнутреннегоСовместительства = ЭлементыФормы.ВидЗанятости.ДоступныеЗначения.НайтиПоЗначению(Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство) = Неопределено;
			
			Если НеЗадаватьВопрос Тогда
				Если НетПоддержкиВнутреннегоСовместительства Тогда
					ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка();
				Иначе	
					ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;
				КонецЕсли;
			Иначе 
				// проверим, есть поддержка внутреннего совместительства у организации
				Если НетПоддержкиВнутреннегоСовместительства Тогда
					//нет поддержки внутреннего совместительства
					ТекстПредупреждения = НСтр("ru='В организации уже есть сотрудник ""';uk='В організації вже є співробітник ""'") + Выборка.ФизлицоНаименование + НСтр("ru='"" с видом занятости ""';uk='"" з видом зайнятості ""'") + Выборка.ВидЗанятости + НСтр("ru='""."
"Для возможности создания сотрудника с видом занятости ""Внутреннее совместительство"" необходимо включить поддержку"
"внутреннего совместительства в параметрах учетной политики организации по персоналу';uk='""."
"Для можливості створення співробітника з видом зайнятості ""Внутрішнє сумісництво"" необхідно включити підтримку"
"внутрішнього сумісництва в параметрах облікової політики організації з персоналу'");         

					Предупреждение(ТекстПредупреждения, 30);
					
				Иначе
					// спросим у пользователя, заменить вид занятости или нет
					ТекстВопроса = НСтр("ru='В организации уже есть сотрудник ""';uk='В організації вже є співробітник ""'") + Выборка.ФизлицоНаименование + НСтр("ru='"" с видом занятости ""';uk='"" з видом зайнятості ""'") + Выборка.ВидЗанятости + НСтр("ru='"","
"поменять вид занятости на ""Внутреннее совместительство""?';uk='"","
"поміняти вид зайнятості на ""Внутрішнє сумісництво""?'");
					Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 20) = КодВозвратаДиалога.Да Тогда
						ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;	
						
						Запрос = Новый Запрос;
						ТекстЗапроса =
						"ВЫБРАТЬ
						|	Работники.Сотрудник КАК Сотрудник
						|ИЗ
						|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
						|		,
						|		Организация = &парамОрганизация
						|			И Сотрудник.Физлицо = &парамФизлицо И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК Работники
						|ГДЕ
						|	Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
						|";
						
						Запрос.УстановитьПараметр("парамФизлицо",     Физлицо);
						Запрос.УстановитьПараметр("парамОрганизация", Организация);
						Запрос.Текст = ТекстЗапроса;
						ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
						Если ВыборкаИзЗапроса.Количество() = 1 Тогда
							ВыборкаИзЗапроса.Следующий();
							ОсновноеНазначение = ВыборкаИзЗапроса.Сотрудник;
						КонецЕсли;
						УстановитьВидимостьЭУ();
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры // ПроверитьИУстановитьВидЗанятости()


// Процедура обрабатывает изменение ЭУ физлицо
Процедура ОбработатьИзменениеФизлица()

	Если Физлицо.Пустая() Тогда
		Физлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		ФизлицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
	Иначе
		ФизлицоОбъект = Физлицо.ПолучитьОбъект();
		ПроверитьИУстановитьВидЗанятости();
		Если ВидЗанятости <> Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
			ОсновноеНазначение = Неопределено;
		Иначе
			Запрос = Новый Запрос;
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Работники.Сотрудник КАК Сотрудник
			|ИЗ
			|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|		,
			|		Организация = &парамОрганизация
			|			И Сотрудник.Физлицо = &парамФизлицо И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК Работники
			|ГДЕ
			|	Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|";
			
			Запрос.УстановитьПараметр("парамФизлицо",     Физлицо);
			Запрос.УстановитьПараметр("парамОрганизация", Организация);
			Запрос.Текст = ТекстЗапроса;
			ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
			Если ВыборкаИзЗапроса.Количество() = 1 Тогда
				ВыборкаИзЗапроса.Следующий();
				ОсновноеНазначение = ВыборкаИзЗапроса.Сотрудник;
			КонецЕсли;	
		КонецЕсли;	
		УстановитьВидимостьЭУ();
	КонецЕсли;
	
	Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
	УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно();
	ПрочитатьФИО();
	ЗаполнитьНаборыПоФизлицу();

КонецПроцедуры // ОбработатьИзменениеФизлица()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_СотрудникиОрганизаций;
	ПрочитатьЗаполнитьСвойстваИЗначения();

	ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_СотрудникиОрганизаций;
	ПрочитатьЗаполнитьКатегории();
	
	мЕстьОграниченияПравДоступаНаУровнеЗаписей = Ложь;
	
	мДоступнаРольРасчетчикаРегл = НастройкаПравДоступа.ДоступнаРольРасчетчикаРегл();
	мДоступнаРольКадровикаРегл  = НастройкаПравДоступа.ДоступнаРольКадровикаРегл();
	
	мДоступныРолиУпрУчета = РольДоступна("КадровикУправленческихДанных") или РольДоступна("РасчетчикУправленческойЗарплаты");
	мДоступныРолиУпрУчета = мДоступныРолиУпрУчета и (НЕ мДоступнаРольРасчетчикаРегл или Не мДоступнаРольКадровикаРегл);
	
	мЭтоНовый = ЭтоНовый();
	Если мЭтоНовый Тогда
		
		Если Не ЗначениеЗаполнено(ВидДоговора) ТОгда
			ВидДоговора  = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;	
		КонецЕсли;	
		Если ВидДоговора  = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы;	
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Организация) и ВидДоговора <> Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
			Организация  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		КонецЕсли;
		ВалютаТарифнойСтавки =  мВалютаРегламентированногоУчета;
		
		Если Не Физлицо.Пустая() Тогда
			//если в форму передали физлицо
			ВыборФизлица  = Истина;
			ФизлицоОбъект = Физлицо.ПолучитьОбъект();
			Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
			УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно();
			ПрочитатьФИО();
			ПроверитьИУстановитьВидЗанятости();
		Иначе
			ФизлицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
			ВыборФизлица  = Ложь;
			мЕстьОграниченияПравДоступаНаУровнеЗаписей = Ложь;
			//мЕстьОграниченияПравДоступаНаУровнеЗаписей = ЕстьОграничениеПравДоступаНаУровнеЗаписейПоФизлицам();
			УстановитьЗаголовокВидимостьПерейтиКВводуГруппыДоступа();
		КонецЕсли;
		
	Иначе //открываем существующий элемент справочника
		
		ФизлицоОбъект = Физлицо.ПолучитьОбъект();
		ЗаполнитьНаборыПоФизлицу();
		
		ОбновитьПредставлениеЭлемента("Гражданство");
		ОбновитьПредставлениеЭлемента("Инвалидность");
		ОбновитьПредставлениеЭлемента("НаличиеГарантий"); 

		
		Модифицированность = Ложь;
		
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Справка формы
	ОтображатьСправкуФормы = ВосстановитьЗначение("Справочник.СотрудникиОрганизаций.ОтображатьСправкуФормы");
	Если ОтображатьСправкуФормы = Неопределено Тогда
		ОтображатьСправкуФормы = Истина;
	КонецЕсли;
	
	НовыйЭлементЗаписан = Не мЭтоНовый;
	
	ПодготовитьСправкуФормы();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	// запомним значения в переменных
	мДатаДоговора = ДатаДоговора; //для правильной автонумерации номера трудового договора
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.СписокДоговоровГПХ.Колонки.Валюта);
	мМассивЭУ.Добавить(ЭлементыФормы.ПлановыеНачисления.Колонки.Валюта1);
	мМассивЭУ.Добавить(ЭлементыФормы.ПлановыеНачисления.Колонки.Валюта2);
	мМассивЭУ.Добавить(ЭлементыФормы.ПлановыеНачисления.Колонки.Валюта3);
	мМассивЭУ.Добавить(ЭлементыФормы.ПлановыеНачисления.Колонки.Валюта4);
	мМассивЭУ.Добавить(ЭлементыФормы.ПлановыеНачисления.Колонки.Валюта5);
	мМассивЭУ.Добавить(ЭлементыФормы.ПлановыеНачисления.Колонки.Валюта6);
	мМассивЭУ.Добавить(ЭлементыФормы.ПлановыеУдержания.Колонки.Валюта1);
	мМассивЭУ.Добавить(ЭлементыФормы.ПлановыеУдержания.Колонки.Валюта2);
	мМассивЭУ.Добавить(ЭлементыФормы.ПлановыеУдержания.Колонки.Валюта3);
	мМассивЭУ.Добавить(ЭлементыФормы.ПлановыеУдержания.Колонки.Валюта4);
	мМассивЭУ.Добавить(ЭлементыФормы.ПлановыеУдержания.Колонки.Валюта5);
	мМассивЭУ.Добавить(ЭлементыФормы.ПлановыеУдержания.Колонки.Валюта6);
	мМассивЭУ.Добавить(ЭлементыФормы.НадписьВалютаТарифнойСтавки);
	мМассивЭУ.Добавить(ЭлементыФормы.ВалютаТарифнойСтавки);
	мМассивЭУ.Добавить(ЭлементыФормы.НадписьВалютаТарифнойСтавки1);
	мМассивЭУ.Добавить(ЭлементыФормы.ВалютаТарифнойСтавки1);
	
	//мМассивЭУЕНВД = Новый Массив();
	//мМассивЭУЕНВД.Добавить(ЭлементыФормы.ОтражениеОсновныхНачислений.Колонки.ПодпадаетПодЕНВД);
	//мМассивЭУЕНВД.Добавить(ЭлементыФормы.ОтражениеПлановыхНачислений.Колонки.ОтнесениеРасходовКДеятельностиЕНВД);
	
	Если мЭтоНовый Тогда
		
		УстановитьДоступностьРеквизитовФизлица();
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаНовыйСотрудник;
		ЭлементыФормы.РедактироватьФизлицоОтдельно.Видимость = Ложь;
		мЭтоСотрудникКомпании = Ложь;
		ЭлементыФормы.ПерейтиКВводуТрудовогоДоговора.Видимость = мДоступнаРольРасчетчикаРегл или мДоступнаРольКадровикаРегл;
		УстановитьЗаголовокОткрытьСправочникФизлиц();
		
		ЭлементыФормы.Организация.ОтметкаНезаполненного     = Не ЗначениеЗаполнено(Организация) и Не ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий;
		ЭлементыФормы.Организация.АвтоОтметкаНезаполненного = Не ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий;
		
		//получим очередной код элемента
		Код = ПолучитьОчереднойТабельныйНомер();
		
		ИзменитьГруппуВзносов();
		
	Иначе
		//продублируем стратегию нумерации для поля Код1
		ЭлементыФормы.Код1.ТолькоПросмотр = ЭлементыФормы.Код.ТолькоПросмотр;
		Если ЭлементыФормы.Код1.ТолькоПросмотр Тогда
			ЭлементыФормы.Код1.Подсказка = НСтр("ru='Возможность редактирования Табельного № включается в меню ""Действия""';uk='Можливість редагування Табельного № включається в меню ""Дії""'");	
		Иначе
			ЭлементыФормы.Код1.Подсказка = "";
		КонецЕсли;
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаСотрудник;
		мЕстьНачисления = ЕстьНачисленияИлиПриемНаРаботу();
		ЭлементыФормы.Организация1.ТолькоПросмотр  = мЕстьНачисления;
		ЭлементыФормы.ВидДоговора1.ТолькоПросмотр  = мЕстьНачисления;
		ЭлементыФормы.ВидЗанятости1.ТолькоПросмотр = мЕстьНачисления;
		
		СформироватьСписокОбособленныхПодразделений();
		ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию();
		СформироватьЗаголовокПерсональныхНадбавок();
		мЭтоСотрудникКомпании = ЭтоСотрудникКомпании();
		ЭлементыФормы.РедактироватьФизлицоОтдельно1.Заголовок = НСтр("ru='Более подробно о физическом лице ';uk='Більш докладно про фізичну особу '") + ФизлицоОбъект.Наименование + "...";
		ЭлементыФормы.ПодразделениеОрганизации1.ВыборПоВладельцу = ?(ЗначениеЗаполнено(ОбособленноеПодразделение),ОбособленноеПодразделение,Организация);
		
	КонецЕсли;
	
	Если НЕ (мДоступнаРольРасчетчикаРегл или мДоступнаРольКадровикаРегл) Тогда
		Кнопки = ЭлементыФормы.ДействияФормы.Кнопки;
		Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюПерейти);
	КонецЕсли;
	

	УстановитьВидимостьСправкиФормы(Ложь);
	УстановитьВидимостьЭУ();
	УстановитьОтборыВСписках();
	УстановитьДоступныеЗначениеВидЗанятости();
	
	СформироватьСписокОбособленныхПодразделений();
	ОбработатьОтображениеОбособленногоПодразделения(Ложь);
	
	ПоказыватьПодразделения = Организация.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо и ЗначениеЗаполнено(Организация);
	Если ПоказыватьПодразделения Тогда
		// Получим список обособленных подразделений организации
		ПоказыватьПодразделения = ЗначениеЗаполнено(Организация.ГоловнаяОрганизация) или ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация).Количество() > 0;
	КонецЕсли;
	ЭлементыФормы.ПодразделениеОрганизации.ВыборПоВладельцу = ?(ПоказыватьПодразделения,ОбособленноеПодразделение,Организация);
	ЭлементыФормы.ПодразделениеОрганизации1.ВыборПоВладельцу = ?(ПоказыватьПодразделения,ОбособленноеПодразделение,Организация);
	
	СписокДоступныхВидовДоговоров = ПолучитьСписокДоступныхДоговоров();
	ЭлементыФормы.ВидДоговора.ДоступныеЗначения		= СписокДоступныхВидовДоговоров;
	ЭлементыФормы.ВидДоговора1.ДоступныеЗначения	= СписокДоступныхВидовДоговоров;
	
	СформироватьЗаголовокПерсональныхНадбавок();
	
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация]);
	УстановитьВидимостьЭУПоИспользваниюТарифногоРазряда();
	
	Если ОткрытьКакТрудовойДоговор Тогда
		ЭлементыФормы.ПанельДанныхСотрудник.ТекущаяСтраница = ЭлементыФормы.ПанельДанныхСотрудник.Страницы.ТрудовойДоговор;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Отказ = Ложь;
	
	ОчиститьНеИспользуемыеРеквизиты();
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	СписокНеЗаполненныхРеквизитов = Новый СписокЗначений;
	ОбнаруженыОшибки = Ложь;
	
	СрокаСообщенияОбОшибке = "";
	Если ЭтоНовый()Тогда // для нового сотрудника проверим возможность записи
		
		Актуальность  = Истина; //установим актуальность для нового сотрудника
		
		//если создаем новое физлицо, проверим заполнение реквизитов
		Если Не ВыборФизлица Тогда
			//необходимо создать новое физлицо, проверим реквизиты
			Если ПустаяСтрока(ФизлицоОбъект.Наименование) Тогда
				СписокНеЗаполненныхРеквизитов.Добавить(" Имя");
				ОбнаруженыОшибки = Истина;	
			ИначеЕсли мЕстьОграниченияПравДоступаНаУровнеЗаписей И Не ЗначениеЗаполнено(ФизлицоОбъект.ГруппаФизическихЛиц) Тогда
				//имеет смысл сообщать об ошибке если заполнены данные по физлицу
				СрокаСообщенияОбОшибке = НСтр("ru='Не задана группа доступа для физического лица!';uk='Не задана група доступу для фізичної особи!'");
				ОбнаруженыОшибки = Истина;	
			КонецЕсли; 	
		Иначе
			Если Не ЗначениеЗаполнено(Физлицо) Тогда
				СрокаСообщенияОбОшибке = НСтр("ru='Не выбрано физическое лицо!';uk='Не обране фізична особа!'");
				ОбнаруженыОшибки = Истина;	
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
	
	//проверим заполнение организации, вида договра, вида занятости
	Если Не ЗначениеЗаполнено(ВидДоговора) Тогда
		СписокНеЗаполненныхРеквизитов.Добавить(" Вид договора");
		ОбнаруженыОшибки = Истина;
	КонецЕсли;
	
	Если ВидДоговора <> Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий и Не ЗначениеЗаполнено(Организация)  Тогда
		СписокНеЗаполненныхРеквизитов.Добавить(" Организация");
		ОбнаруженыОшибки = Истина;
	КонецЕсли;
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор и Не ЗначениеЗаполнено(ВидЗанятости) Тогда
		СписокНеЗаполненныхРеквизитов.Добавить(" Вид занятости");
		ОбнаруженыОшибки = Истина;
	КонецЕсли;
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор и Не ЗначениеЗаполнено(ВалютаТарифнойСтавки) Тогда
		Если ЭлементыФормы.ВалютаТарифнойСтавки.Видимость Тогда
			СписокНеЗаполненныхРеквизитов.Добавить(" Валюта");
			ОбнаруженыОшибки = Истина;
		Иначе //не ведется валютный учет, заполним реквизит значением валюты регл. учете
			ВалютаТарифнойСтавки =  мВалютаРегламентированногоУчета;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбнаруженыОшибки Тогда
		Если Не ПустаяСтрока(СрокаСообщенияОбОшибке) Тогда
			ОбработкаКомментариев.ДобавитьСообщение(СрокаСообщенияОбОшибке, Перечисления.ВидыСообщений.Ошибка);
			ОбработкаКомментариев.ДобавитьСообщение(НСтр("ru='Элемент не записан!';uk='Елемент не записаний!'"), Перечисления.ВидыСообщений.ВажнаяИнформация);
		КонецЕсли;
		Если СписокНеЗаполненныхРеквизитов.Количество()>0 Тогда
			ОбработкаКомментариев.ДобавитьСообщение(НСтр("ru='Не заполнены реквизиты: ';uk='Не заповнені реквізити: '") + СписокНеЗаполненныхРеквизитов, Перечисления.ВидыСообщений.Ошибка);
			ОбработкаКомментариев.ДобавитьСообщение(НСтр("ru='Элемент не записан!';uk='Елемент не записаний!'"), Перечисления.ВидыСообщений.ВажнаяИнформация);
		КонецЕсли;
		ОбработкаКомментариев.ПоказатьСообщения();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбнаруженыОшибки И ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор и ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство и НЕ ЗначениеЗаполнено(ОсновноеНазначение) Тогда
		ОбработкаКомментариев.ДобавитьСообщение(НСтр("ru='Для внутреннего совместителя не указано основное назначение!';uk='Для внутрішнього сумісника не зазначене основне призначення!'"), Перечисления.ВидыСообщений.ВажнаяИнформация);
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;

	
	Если ЭтоНовый() Тогда
		Если Не ВыборФизлица Тогда
			//попытка записать новое физлицо
			Попытка
				ФизлицоОбъект.Записать();
				Физлицо = ФизлицоОбъект.Ссылка;
			Исключение
				ТекстСообщения = НСтр("ru='При записи нового Сотрудника не удалось создать новое физлицо по причине: ';uk='При записі нового Співробітника не вдалося створити нову фізособу з причини: '") + ОписаниеОшибки();
				Отказ = Истина;
				ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.Ошибка);
				ОбработкаКомментариев.ДобавитьСообщение(НСтр("ru='Элемент не записан!';uk='Елемент не записаний!'"), Перечисления.ВидыСообщений.ВажнаяИнформация);
				ОбработкаКомментариев.ПоказатьСообщения();
				Возврат;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	//запись не нового Сотрудника, проверим необходимось записи физлица
	Если Не мЭтоНовый и ФизлицоОбъект.Модифицированность() Тогда
		
		Попытка	
			ФизлицоОбъект.Заблокировать();
		Исключение
			ТекстСообщения = НСтр("ru='Физическое лицо: ';uk='Фізична особа: '") + ФизлицоОбъект + НСтр("ru=' - объект заблокирован.';uk="" - об'єкт заблокований.""");
			
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
			ОбработкаКомментариев.УдалитьСообщения();
			ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.Ошибка);
			ОбработкаКомментариев.ДобавитьСообщение(НСтр("ru='Элемент не записан!';uk='Елемент не записаний!'"), Перечисления.ВидыСообщений.ВажнаяИнформация);
			ОбработкаКомментариев.ПоказатьСообщения();
			
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
		ФизлицоОбъект.Записать();
		ФИО = Фамилия + " " + Имя + " " + Отчество;
		ПолныеПрава.ПроверитьДублиФизлиц(ФизлицоОбъект.Ссылка, , , ФизлицоОбъект.КодПоДРФО, ФИО);
		
	КонецЕсли;
	
	Если мЭтоНовый Тогда
		// запись в регистр ФИО, делаем только для нового сотрудника
		Если мНаборЗаписейФИО.Количество() = 0 Тогда
			ЗаписьНабора = мНаборЗаписейФИО.Добавить();
			ЗаписьНабора.Период		= ?(ЗначениеЗаполнено(ФизлицоОбъект.ДатаРождения),ФизлицоОбъект.ДатаРождения,'19800101');
			ЗаписьНабора.Фамилия	= Фамилия;
			ЗаписьНабора.Имя		= Имя;
			ЗаписьНабора.Отчество	= Отчество;
		КонецЕсли;
		
		Если мНаборЗаписейФИО.Количество() > 0 И ЗначениеЗаполнено(мНаборЗаписейФИО[0].Период) Тогда
			мНаборЗаписейФИО[0].Физлицо = Физлицо;
			мНаборЗаписейФИО.Отбор.Физлицо.Использование	= Истина;
			мНаборЗаписейФИО.Отбор.Физлицо.Значение			= мНаборЗаписейФИО[0].Физлицо;
			мНаборЗаписейФИО.Отбор.Период.Использование		= Истина;
			мНаборЗаписейФИО.Отбор.Период.Значение			= мНаборЗаписейФИО[0].Период;
			мНаборЗаписейФИО.Записать(Истина);
		КонецЕсли;
		
		
	КонецЕсли;
	
	Если мНаборЗаписейГражданство.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейГражданство[0].Период) Тогда
		мНаборЗаписейГражданство[0].Физлицо = Ссылка.Физлицо;
		
		мНаборЗаписейГражданство.Отбор.Физлицо.Использование	= Истина;
		мНаборЗаписейГражданство.Отбор.Физлицо.Значение			= мНаборЗаписейГражданство[0].Физлицо;
		мНаборЗаписейГражданство.Отбор.Период.Использование		= Истина;
		мНаборЗаписейГражданство.Отбор.Период.Значение			= мНаборЗаписейГражданство[0].Период;
		мНаборЗаписейГражданство.Записать(Истина);
	КонецЕсли;
	
	// запись в регистр Сведения об инвалидности
	Если мНаборЗаписейИнвалидность.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейИнвалидность[0].Период) Тогда
		мНаборЗаписейИнвалидность[0].Физлицо = Ссылка.Физлицо;
		
		мНаборЗаписейИнвалидность.Отбор.Физлицо.Использование	= Истина;
		мНаборЗаписейИнвалидность.Отбор.Физлицо.Значение		= мНаборЗаписейИнвалидность[0].Физлицо;
		мНаборЗаписейИнвалидность.Отбор.Период.Использование	= Истина;
		мНаборЗаписейИнвалидность.Отбор.Период.Значение			= мНаборЗаписейИнвалидность[0].Период;
		мНаборЗаписейИнвалидность.Записать(Истина);
	КонецЕсли;
	// запись в регистр Сведения о лицах с дополнительными гарантиями
	Если мНаборЗаписейНаличиеГарантий.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейНаличиеГарантий[0].Период) Тогда
		мНаборЗаписейНаличиеГарантий[0].Физлицо = Ссылка.Физлицо;
		
		мНаборЗаписейНаличиеГарантий.Отбор.Физлицо.Использование	= Истина;
		мНаборЗаписейНаличиеГарантий.Отбор.Физлицо.Значение		= мНаборЗаписейНаличиеГарантий[0].Физлицо;
		мНаборЗаписейНаличиеГарантий.Отбор.Период.Использование	= Истина;
		мНаборЗаписейНаличиеГарантий.Отбор.Период.Значение			= мНаборЗаписейНаличиеГарантий[0].Период;
		мНаборЗаписейНаличиеГарантий.Записать(Истина);
	КонецЕсли;


	
	// Обработка записи свойств и категорий
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений = Ссылка;
    НуженОтказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();
    Если НуженОтказ Тогда
        Отказ = Истина
	КонецЕсли; 
	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	НуженОтказ = НЕ ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();
	Если НуженОтказ Тогда
	   Отказ = Истина
	КонецЕсли;

	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	СформироватьЗаголовокПерсональныхНадбавок();
	ПроцедурыУправленияПерсоналом.СинхронизироватьНаименованияСотрудников(Физлицо, Ссылка);
	
	Если мЭтоНовый Тогда
		
		ЭлементыФормы.ВыборФизлица.Доступность = Ложь;
		ЭлементыФормы.ВыборФизлица1.Доступность = Ложь;
		ЭлементыФормы.ОткрытьСправочникФизлиц.Доступность = Ложь;
	КонецЕсли;
	
	// Устанавливаем новое значение реквизиту только, если новый элемент был записан в первый раз
	// Это позволит избежать обновление встроенной справки при каждой записи элемента
	Если мЭтоНовый И НЕ НовыйЭлементЗаписан Тогда
		НовыйЭлементЗаписан = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначение("Справочник.СотрудникиОрганизаций.ОтображатьСправкуФормы", ОтображатьСправкуФормы);
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ГруппыФизическихЛиц") Тогда
		ФизлицоОбъект.ГруппаФизическихЛиц = ЗначениеВыбора;
		УстановитьЗаголовокВидимостьПерейтиКВводуГруппыДоступа();
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ФизическиеЛица") И ВыборФизлица Тогда
		Если Физлицо <> ЗначениеВыбора Тогда
			Физлицо = ЗначениеВыбора;
			ОбработатьИзменениеФизлица();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.СотрудникиОрганизаций")Тогда
		Если ОсновноеНазначение <> ЗначениеВыбора Тогда
			ОсновноеНазначение = ЗначениеВыбора;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму" и (Источник = Ссылка или (ТипЗнч(Источник) = Тип("СправочникСсылка.ФизическиеЛица") и Источник.Пустая())) Тогда
		
		ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;
		ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента);
		
	ИначеЕсли ИмяСобытия = "ОбновитьФорму" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.ИмяЭлемента  = "Инвалидность" Тогда
				ЗаполнитьНаборыПоФизлицу();
				ОбновитьПредставлениеЭлемента("Инвалидность");
			Конецесли;
			Если Параметр.ИмяЭлемента  = "НаличиеГарантий" Тогда  
				ЗаполнитьНаборыПоФизлицу();
				ОбновитьПредставлениеЭлемента("НаличиеГарантий");
			Конецесли;	
		КонецЕсли;	
		
	ИначеЕсли ИмяСобытия = "ОбновитьПерсональныеНадбавки" Тогда	
		
		СформироватьЗаголовокПерсональныхНадбавок();
		
	ИначеЕсли ИмяСобытия = "ОбновитьДанныеОФизлице" Тогда
		
		Если НЕ Физлицо.Пустая() Тогда
			//пустое физлицо будет когда вводим нового сотрудника из из него открылиформу физлица
			БалаМодифицированность = Модифицированность;
			ФизлицоОбъект = Физлицо.ПолучитьОбъект();
			ПрочитатьФИО();
			ЗаполнитьНаборыПоФизлицу();
			ОбновитьПредставлениеЭлемента("Гражданство");
			ОбновитьПредставлениеЭлемента("Инвалидность");
			ОбновитьПредставлениеЭлемента("НаличиеГарантий"); 
			Модифицированность = БалаМодифицированность или Ложь;
		КонецЕсли;
		УстановитьЗаголовокВидимостьПерейтиКВводуГруппыДоступа();
		
	ИначеЕсли ИмяСобытия = "ОбновитьДоступностьРеквизитов" и не ЭтоНовый() Тогда
		мЕстьНачисления = ЕстьНачисленияИлиПриемНаРаботу();
		ЭлементыФормы.Организация1.ТолькоПросмотр  = мЕстьНачисления;
		ЭлементыФормы.ВидДоговора1.ТолькоПросмотр  = мЕстьНачисления;
		ЭлементыФормы.ВидЗанятости1.ТолькоПросмотр = мЕстьНачисления;
		ЭлементыФормы.Организация.ТолькоПросмотр  = мЕстьНачисления;
		ЭлементыФормы.ВидДоговора.ТолькоПросмотр  = мЕстьНачисления;
		ЭлементыФормы.ВидЗанятости.ТолькоПросмотр = мЕстьНачисления;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)
	
	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.СвойстваИЗначения);
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаписиНовогоОбъекта()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ПереключитьВидимостьСправкиФормы(Кнопка)
	
	ОтображатьСправкуФормы = НЕ ОтображатьСправкуФормы;
	УстановитьВидимостьСправкиФормы();
	
КонецПроцедуры

Процедура ПоказатьИсториюОтражениеОсновныхНачислений(Кнопка)
	
	ФормаРегистра = РегистрыСведений.УчетОсновногоЗаработкаРаботниковОрганизаций.ПолучитьФормуСписка( ,ЭтаФорма, Ссылка);
	ФормаРегистра.РегистрСведенийСписок.Отбор.Сотрудник.Установить(Ссылка);
	ФормаРегистра.РегистрСведенийСписок.Отбор.Организация.Установить(Организация);
	ФормаРегистра.ЭлементыФормы.Организация.Доступность = Ложь;
	ФормаРегистра.ЭлементыФормы.РегистрСведенийСписок.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Конец;
	ФормаРегистра.Открыть();
	
КонецПроцедуры

Процедура ПоказатьИсториюОтражениеПлановыхНачислений(Кнопка)
	
	ФормаРегистра = РегистрыСведений.УчетПлановыхНачисленийРаботниковОрганизаций.ПолучитьФормуСписка( ,ЭтаФорма, Ссылка);
	ФормаРегистра.РегистрСведенийСписок.Отбор.Сотрудник.Установить(Ссылка);
	ФормаРегистра.РегистрСведенийСписок.Отбор.Организация.Установить(Организация);
	ФормаРегистра.ЭлементыФормы.Организация.Доступность = Ложь;
	ФормаРегистра.ЭлементыФормы.РегистрСведенийСписок.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Конец;
	ФормаРегистра.Открыть();	
	
КонецПроцедуры

Процедура УДФОткрыть(Кнопка)
	
	Форма = Обработки.УправлениеДаннымиРаботника.ПолучитьФорму();
	Форма.УстановитьРеквизиты(Физлицо, "Основное", НачалоМесяца(ТекущаяДата()));
	Форма.Открыть();
	
КонецПроцедуры // УДФОткрыть()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);

	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ВыборФизлицаПриИзменении(Элемент)
	
	ОбработатьВыборФизлицаПриИзменении();
		
КонецПроцедуры

Процедура ОткрытьСправочникФизлицНажатие(Элемент)
	
	Если ВыборФизлица Тогда
		ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуВыбора(, ЭтаФорма);
	Иначе
		ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуСписка(, ЭтаФорма);
	КонецЕсли;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура НаименованиеФизлицаПриИзменении(Элемент)
	
	Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
	
	ФИО = Элемент.Значение;
	Если ПустаяСтрока(Фамилия) ИЛИ ЭтоНовый() Тогда
		
		Фамилия  = ОбщегоНазначения.ВыделитьСлово(ФИО);
		Имя      = ОбщегоНазначения.ВыделитьСлово(ФИО);
		Отчество = ОбщегоНазначения.ВыделитьСлово(ФИО);
		
		Если ЗначениеЗаполнено(Отчество) Тогда
			ФизлицоОбъект.Пол = ПроцедурыУправленияПерсоналом.ПолучитьПол(Отчество);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно();
	УстановитьЗаголовокВидимостьПерейтиКВводуГруппыДоступа();
	
КонецПроцедуры

Процедура РедактироватьФизлицоОтдельноНажатие(Элемент)
	
	Форма = ФизлицоОбъект.ПолучитьФорму(, ЭтаФорма);
	Форма.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ВидДоговора
Процедура ВидДоговораПриИзменении(Элемент)
	
	Если мЭтоСотрудникКомпании
		и ВидДоговора <> Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор
		и ВидДоговора <> Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
		ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий; 
		Стр = НСтр("ru='Для сотрудника компании вид договора можно изменить только на ""Трудовой договор""';uk='Для співробітника компанії вид договору можна змінити тільки на ""Трудовий договір""'");
		Предупреждение (Стр, 10,);
	Иначе
		ОбработатьИзменениеВидаДоговора();
		УстановитьКнопкиПечати();
		ПодобратьПостфиксНаименования();
		ИзменитьГруппуВзносов();
	КонецЕсли;
		
КонецПроцедуры // ВидДоговораПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода Организация
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизации();
	ПодобратьПостфиксНаименования();
	
КонецПроцедуры // ОрганизацияПриИзменении

Процедура ИзменитьГруппуВзносов()
	
	Если НЕ мЭтоНовый И ЗначениеЗаполнено(ГруппаВзносов) Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ОсновноеНазначение.Пустая() Тогда
		ГруппаВзносов = Справочники.ГруппыВзносовВФонды.ПустаяСсылка();	
		Возврат;
	КонецЕсли;	
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
		ГруппаВзносов = Справочники.ГруппыВзносовВФонды.Договорники;
		Возврат;
	КонецЕсли;	
	
	Если мНаборЗаписейИнвалидность.Количество() = 0 Тогда
		Инвалид = Ложь;
	Иначе
		Инвалид = мНаборЗаписейИнвалидность[0].Инвалидность;
	КонецЕсли;
	
	Если мНаборЗаписейПенсионер.Количество() = 0 Тогда
		Пенсионер = Ложь;
	Иначе
		Пенсионер = мНаборЗаписейПенсионер[0].Пенсионер;
	КонецЕсли; 
	
	Если Инвалид и Пенсионер Тогда
		ГруппаВзносов = Справочники.ГруппыВзносовВФонды.ИнвалидыПенсионеры;
		Возврат;
	ИначеЕсли Инвалид Тогда
		ГруппаВзносов = Справочники.ГруппыВзносовВФонды.Инвалиды;
		Возврат;
	ИначеЕсли Пенсионер Тогда
		ГруппаВзносов = Справочники.ГруппыВзносовВФонды.Пенсионеры;
		Возврат;	
	КонецЕсли;	
	
	ГруппаВзносов = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ГруппаВзносов;
	Если НЕ ЗначениеЗаполнено(ГруппаВзносов) Тогда
		ГруппаВзносов = Справочники.ГруппыВзносовВФонды.ОсновнойСостав;	
	КонецЕсли;
	Если мНаборЗаписейНаличиеГарантий.Количество() = 0 Тогда
		НаличиеГарантий = Ложь;
	Иначе
		НаличиеГарантий = мНаборЗаписейНаличиеГарантий[0].НаличиеГарантий;
	КонецЕсли; 

	
КонецПроцедуры // ОрганизацияПриИзменении

// Процедура - обработчик события "НачалоВыбора" поля ввода Организация
Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//установим список выбора головных организаций
	СписокВыбора = ПроцедурыУправленияПерсоналом.ПолучитьСписокОрганизаций();
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено и Элемент.Значение <> ЭлементСписка.Значение Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		ОбработатьИзменениеОрганизации();
		ПодобратьПостфиксНаименования();
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияНачалоВыбора

Процедура ПостфиксНаименованияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВозможныхЗначений = Новый СписокЗначений;
	НаименованиеБезПостфикса = ФизлицоОбъект.Наименование;
	СписокВозможныхЗначений.Добавить(НаименованиеБезПостфикса);
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		Если ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
			СписокВозможныхЗначений.Добавить(НаименованиеБезПостфикса + НСтр("ru=' (вн. совм.)';uk=' (вн. сум.)'"));
		ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда	
			СписокВозможныхЗначений.Добавить(НаименованиеБезПостфикса + НСтр("ru=' (осн.)';uk=' (осн.)'"));
		Иначе
			СписокВозможныхЗначений.Добавить(НаименованиеБезПостфикса + НСтр("ru=' (совм.)';uk=' (сум.)'"));			
		КонецЕсли; 
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
		СписокВозможныхЗначений.Добавить(НаименованиеБезПостфикса + НСтр("ru=' (дог. подр.)';uk=' (дог. підр.)'"));
		СписокВозможныхЗначений.Добавить(НаименованиеБезПостфикса + НСтр("ru=' (дг.)';uk=' (дг.)'"));
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
		СписокВозможныхЗначений.Добавить(НаименованиеБезПостфикса + НСтр("ru=' (дог. авт.)';uk=' (дог. авт.)'"));
		СписокВозможныхЗначений.Добавить(НаименованиеБезПостфикса + НСтр("ru=' (дг.)';uk=' (дг.)'"));
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПостфиксНаименования) и СписокВозможныхЗначений.НайтиПоЗначению(Наименование) = Неопределено Тогда
		СписокВозможныхЗначений.Добавить(Наименование);	
	КонецЕсли;	
	
	СписокВозможныхЗначений.Добавить(НСтр("ru='Произвольное';uk='Довільне'"),НСтр("ru='задать произвольное дополнение наименования (не более 15-и символов)';uk='задати довільне доповнення найменування (не більше 15-і символів)'"));
	
	Элемент.СписокВыбора = СписокВозможныхЗначений;
	
КонецПроцедуры

Процедура ПостфиксНаименованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = НСтр("ru='Произвольное';uk='Довільне'") Тогда
		Текст = ПостфиксНаименования;
		ВвестиСтроку(Текст, НСтр("ru='Введите дополнение наименования';uk='Уведіть доповнення найменування'"), 15);
		ПостфиксНаименования = Текст;
		Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
	Иначе
		Наименование = ВыбранноеЗначение;
		НаименованиеБезПостфикса = ФизлицоОбъект.Наименование;
		ПостфиксНаименования = СокрЛП(СтрЗаменить(ВыбранноеЗначение, НаименованиеБезПостфикса, ""));	
	КонецЕсли; 

КонецПроцедуры

Процедура ПерейтиКВводуТрудовогоДоговораНажатие(Элемент)
	
	ЭлементыФормы.ПанельДанныхНовыйСотрудник.ТекущаяСтраница = ЭлементыФормы.ПанельДанныхНовыйСотрудник.Страницы.ТрудовойДоговор;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ДатаДоговора
Процедура ДатаДоговораПриИзменении(Элемент)
	
	ПроверитьНомерТрудовогоДоговора(мДатаДоговора);
	мДатаДоговора = ДатаДоговора;
	
КонецПроцедуры // ДатаДоговораПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода ОбособленноеПодразделение
Процедура ОбособленноеПодразделениеПриИзменении(Элемент)
	
	 ОбработкаРеквизитовТрудовогоДоговора();
	 ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию();
	
КонецПроцедуры // ОбособленноеПодразделениеПриИзменении

// Процедура - обработчик события "НачалоВыбора" поля ввода ОбособленноеПодразделение
Процедура ОбособленноеПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//установим список выбора 
	ЭлементСписка = ВыбратьИзСписка(мСписокОбособленныхПодразделений,Элемент,мСписокОбособленныхПодразделений.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено и Элемент.Значение <> ЭлементСписка.Значение Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		ОбработкаРеквизитовТрудовогоДоговора();
		ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию();
	КонецЕсли;

	
КонецПроцедуры //ОбособленноеПодразделениеНачалоВыбора

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода Должности
Процедура ДолжностьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации("Должность", Организация, ПодразделениеОрганизации);
	
	Элемент.ВысотаСпискаВыбора = Мин(10, СписокВыбора.Количество());
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	
		Если ГрафикРаботы.Пустая() Тогда
			ДанныеШР = ПроцедурыУправленияПерсоналом.СведенияОПозицииШтатногоРасписания(ДатаДоговора, ПодразделениеОрганизации, Должность);
			Если ДанныеШР.Количество() > 0 Тогда
				ГрафикРаботы = ДанныеШР[0].ГрафикРаботы;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода Подразделения
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации("ПодразделениеОрганизации", Организация, Должность);
	
	Элемент.ВысотаСпискаВыбора = Мин(10, СписокВыбора.Количество());
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	
		Если ГрафикРаботы.Пустая() Тогда
			ДанныеШР = ПроцедурыУправленияПерсоналом.СведенияОПозицииШтатногоРасписания(ДатаДоговора, ПодразделениеОрганизации, Должность);
			Если ДанныеШР.Количество() > 0 Тогда
				ГрафикРаботы = ДанныеШР[0].ГрафикРаботы;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;

	
КонецПроцедуры

Процедура ЗанимаемыхСтавокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если Направление = 1 Тогда // увеличиваем значение
		ЗанимаемыхСтавок = ЗанимаемыхСтавок + 0.25
	Иначе // = -1 - уменьшаем значение
		ЗанимаемыхСтавок = ЗанимаемыхСтавок - 0.25
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура НадбавкиПоТрудовомуДоговоруТекстНажатие(Элемент)
	
	Отказ = Ложь;
	
	Если Модифицированность Тогда
		Если Вопрос(НСтр("ru='Данные сотрудника еще не записаны! Записать?';uk='Дані співробітника ще не записані! Записати?'"), РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК,) = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		Попытка	
			ЭтотОбъект.Заблокировать();
		Исключение
			Предупреждение(НСтр("ru='Не удалось заблокировать объект ""';uk='Не вдалося заблокувати об''єкт ""'") + ЭтотОбъект + """!
                  |" + ОписаниеОшибки(), 60);
			Возврат;
		КонецПопытки;
		
		ФормаПерсональныеНадбавки = ЭтотОбъект.ПолучитьФорму("ФормаПерсональныеНадбавки", ЭтаФорма, Ссылка);
		ФормаПерсональныеНадбавки.СправочникОбъект = ЭтотОбъект;
		ФормаПерсональныеНадбавки.ОткрытьМодально();
		ЭтотОбъект.Разблокировать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора(,Элемент,Ссылка);
	
	//СписокВидовВремени = Новый СписокЗначений;
	//СписокВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
	//
	//ФормаВыбора.Отбор.ВидВремени.ВидСравнения = ВидСравнения.ВСписке;
	//ФормаВыбора.Отбор.ВидВремени.Значение = СписокВидовВремени;
	//ФормаВыбора.Отбор.ВидВремени.Использование = Истина;
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ВидРасчетаПриИзменении(Элемент)
	
	УстановитьВидимостьЭУПоИспользваниюТарифногоРазряда();
	
КонецПроцедуры

Процедура ВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));	
КонецПроцедуры 

Процедура ВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаТайпинга, мТекстТайпинга, мПоследнееЗначениеЭлементаТайпинга, Ложь);
КонецПроцедуры

Процедура ГражданствоНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка 	= Ложь;
	ФормаВвода	 			= Справочники.ФизическиеЛица.ПолучитьФорму("ФормаЗаписиГражданство", ЭтаФорма);
	ФормаВвода.НаборЗаписей = мНаборЗаписейГражданство;
	ФормаВвода.Открыть();
	
КонецПроцедуры

Процедура ИнвалидностьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;

    ФормаРегистра = РегистрыСведений.СведенияОбИнвалидностиФизлиц.ПолучитьФорму("ФормаЗаписиДополнительная", ЭтаФорма);
	ФормаРегистра.Физлицо  = Ссылка.Физлицо;
	
	ТаблицаРегистра = РегистрыСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(, Новый Структура("ФизЛицо",Ссылка.Физлицо));
	
	Если ТаблицаРегистра.Количество() > 0 Тогда
		
		ФормаРегистра.Период  			  		= ТаблицаРегистра[0].Период;
		ФормаРегистра.Группа			  		= ТаблицаРегистра[0].Группа;
		ФормаРегистра.УдостоверениеДатаВыдачи   = ТаблицаРегистра[0].УдостоверениеДатаВыдачи;
		ФормаРегистра.Инвалидность		  		= ТаблицаРегистра[0].Инвалидность;
		ФормаРегистра.УдостоверениеНомер	    = ТаблицаРегистра[0].УдостоверениеНомер;
		ФормаРегистра.УдостоверениеСерия        = ТаблицаРегистра[0].УдостоверениеСерия;
		ФормаРегистра.Комментарий				= ТаблицаРегистра[0].Комментарий;
		
	Иначе
		ФормаРегистра.Период = '19000101';
	КонецЕсли;
	
	ФормаРегистра.Открыть();
	
КонецПроцедуры

Процедура ВстроеннаяСправкаonclick(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnClick(Элемент, pEvtObj, ЭтаФорма);
	
КонецПроцедуры

Процедура ВстроеннаяСправкаonmouseout(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnMouseOut(Элемент, pEvtObj);
	
КонецПроцедуры

Процедура ВстроеннаяСправкаonmouseover(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnMouseOver(Элемент, pEvtObj);
	
КонецПроцедуры

Процедура ОрганизацияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпингаОрганизации(), Тип("СправочникСсылка.Организации"));
КонецПроцедуры

Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпингаОрганизации(), ЭтаФорма, Тип("СправочникСсылка.Организации"), мОбработкаТайпингаОрганизация, мТекстТайпингаОрганизация, мПоследнееЗначениеЭлементаТайпингаОрганизация, Ложь);
КонецПроцедуры

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию();
КонецПроцедуры

Процедура ДолжностьПриИзменении(Элемент)
	ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию();
КонецПроцедуры

Процедура ФизлицоПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Физлицо) ИЛИ Физлицо <> ФизлицоОбъект.Ссылка Тогда
		ОбработатьИзменениеФизлица();
		ПодобратьПостфиксНаименования();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидЗанятостиПриИзменении(Элемент)
	
	ПроверитьИУстановитьВидЗанятости(Ложь);
	ПодобратьПостфиксНаименования();
	Если ВидЗанятости <> Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
		ОсновноеНазначение = Неопределено;
	Иначе
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Работники.Сотрудник КАК Сотрудник
		|ИЗ
		|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|		,
		|		Организация = &парамОрганизация
		|			И Сотрудник.Физлицо = &парамФизлицо И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК Работники
		|ГДЕ
		|	Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|";
		
		Запрос.УстановитьПараметр("парамФизлицо",     Физлицо);
		Запрос.УстановитьПараметр("парамОрганизация", Организация);
		Запрос.Текст = ТекстЗапроса;
		ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
		Если ВыборкаИзЗапроса.Количество() = 1 Тогда
			ВыборкаИзЗапроса.Следующий();
			ОсновноеНазначение = ВыборкаИзЗапроса.Сотрудник;
		КонецЕсли;	
	КонецЕсли;	
	УстановитьВидимостьЭУ();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ

Процедура ПлановыеНачисленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ТипЗнч(ДанныеСтроки.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
		
		РаботаСДиалогами.ПриВыводеСтрокиПлановыхНачисленийИУдержаний(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчета, Элемент.Данные = "ПлановыеНачисления");
		ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;
		
	Иначе
		
		ОформлениеСтроки.Ячейки["НаименованиеПоказатель1"].Видимость	= Истина;
		ОформлениеСтроки.Ячейки["НаименованиеПоказатель1"].УстановитьТекст(НСтр("ru='Размер';uk='Розмір'"));
		ОформлениеСтроки.Ячейки["Показатель1"].Видимость				= Истина;
		ОформлениеСтроки.Ячейки["Валюта1"].Видимость					= Истина;
		
		ОформлениеСтроки.Ячейки["НаименованиеПоказательТР1"].Видимость	= Ложь;
		ОформлениеСтроки.Ячейки["ТарифныйРазряд1"].Видимость			= Ложь;
		
		Для СчПоказателей = 2 По 6 Цикл
			
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей ].Видимость	= Ложь;
			ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость	= Ложь;
			ОформлениеСтроки.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость				= Ложь;
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость					= Ложь;
			ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].Видимость						= Ложь;
			
		КонецЦикла;
		
		ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;
		
	КонецЕсли;

	
КонецПроцедуры

Процедура СписокДоговоровГПХПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

// Процедура обеспечивает ввод на основании кадрового документа
Процедура КадровыеДокументыДействиеДобавить(Кнопка)
	
	Если ЗаписатьЭлементПередВыполнениемДействия(НСтр("ru='Перед выполнением действия необходимо записать элемент. Записать элемент?';uk='Перед виконанням дії необхідно записати елемент. Записати елемент?'")) Тогда
		
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.Добавить(Документы.ПриемНаРаботуВОрганизацию, НСтр("ru='Прием на работу в организацию';uk='Прийом на роботу в організацію '"));
		СписокДокументов.Добавить(Документы.КадровоеПеремещениеОрганизаций, НСтр("ru='Кадровое перемещение организаций';uk='Кадрове переміщення організацій'"));
		СписокДокументов.Добавить(Документы.УвольнениеИзОрганизаций, НСтр("ru='Увольнение из организаций';uk='Звільнення з організацій'"));
		
		ВыбранноеЗначение = СписокДокументов.ВыбратьЭлемент(НСтр("ru='Выбор вида документа';uk='Вибір виду документа'"));
		Если Не ВыбранноеЗначение = Неопределено Тогда
			ДокументОбъект = ВыбранноеЗначение.Значение.СоздатьДокумент();
			ДокументОбъект.Заполнить(Ссылка);
			ФормаДокумента = ДокументОбъект.ПолучитьФорму();
			ФормаДокумента.Открыть();
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура КадровыеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Не Копирование Тогда
		Отказ = Истина;
		КадровыеДокументыДействиеДобавить(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обеспечивает ввод на основании кадрового документа
Процедура КадровыеДокументыУпрУчетДействиеДобавить(Кнопка)
	
	Если ЗаписатьЭлементПередВыполнениемДействия(НСтр("ru='Перед выполнением действия необходимо записать элемент. Записать элемент?';uk='Перед виконанням дії необхідно записати елемент. Записати елемент?'")) Тогда
		
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.Добавить(Документы.ПриемНаРаботу, НСтр("ru='Прием на работу';uk='Прийом на роботу'"));
		СписокДокументов.Добавить(Документы.КадровоеПеремещение, НСтр("ru='Кадровое перемещение';uk='Кадрове переміщення'"));
		СписокДокументов.Добавить(Документы.Увольнение, НСтр("ru='Увольнение';uk='Звільнення'"));
		
		ВыбранноеЗначение = СписокДокументов.ВыбратьЭлемент(НСтр("ru='Выбор вида документа';uk='Вибір виду документа'"));
		Если Не ВыбранноеЗначение = Неопределено Тогда
			ДокументОбъект = ВыбранноеЗначение.Значение.СоздатьДокумент();
			ДокументОбъект.Заполнить(Ссылка);
			ФормаДокумента = ДокументОбъект.ПолучитьФорму();
			ФормаДокумента.Открыть();
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура КадровыеДокументыУпрУчетПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Не Копирование Тогда
		Отказ = Истина;
		КадровыеДокументыУпрУчетДействиеДобавить(Неопределено);
	КонецЕсли;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА СПРАВКИ

Процедура ПодготовитьСправкуФормы()
	
	СотрудникНеПринятВКомпанию	= "none";
	СотрудникРаботаетВКомпании	= "none";
	СотрудникУволенИзКомпании	= "none";
	
	Если НовыйЭлементЗаписан И ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
		СрезПоРаботнику = РегистрыСведений.Работники.СрезПоследних(РабочаяДата, Новый Структура("Физлицо", Физлицо));
		Если СрезПоРаботнику.Количество() > 0 Тогда
			Если СрезПоРаботнику[0].ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
				Если Актуальность Тогда
					СотрудникУволенИзКомпании	= "block";
				КонецЕсли;
			Иначе
				СотрудникРаботаетВКомпании		= "block";
			КонецЕсли;
		Иначе
			СотрудникНеПринятВКомпанию			= "block";
		КонецЕсли;
	КонецЕсли;
	
	СотрудникНеПринятВОрганизацию	= "none";
	СотрудникРаботаетВОрганизации	= "none";
	СотрудникУволенИзОрганизации	= "none";
	
	СотрудникРаботаетВОрганизацииТекст = "none";
	
	Организация_Показывать	= "none";
	ВидЗанятости_Показывать	= "none";
	
	Если НовыйЭлементЗаписан И ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор И (мДоступнаРольКадровикаРегл ИЛИ мДоступнаРольРасчетчикаРегл) Тогда
		Организация_Показывать	= ?(Организация.Пустая(), "block", "none");
		ВидЗанятости_Показывать	= ?(ВидЗанятости.Пустая(), "block", "none");
		Если НЕ (Организация.Пустая() И ВидЗанятости.Пустая()) Тогда
			СрезПоРаботнику = РегистрыСведений.РаботникиОрганизаций.СрезПоследних(ТекущаяДата(), Новый Структура("Сотрудник, Организация", Ссылка, Организация));
			Если СрезПоРаботнику.Количество() > 0 Тогда
				Если СрезПоРаботнику[0].ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
					Если Актуальность Тогда
						СотрудникУволенИзОрганизации	= "block";
					КонецЕсли;
				Иначе
					СотрудникРаботаетВОрганизации		= "block";
				КонецЕсли;
			Иначе
				СотрудникНеПринятВОрганизацию			= "block";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НовыйЭлементЗаписан И ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		СотрудникРаботаетВОрганизацииТекст		= "block";
	
	КонецЕсли;
	
	СотрудникПоДоговоруГПХ	= ?(НовыйЭлементЗаписан И (ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский ИЛИ ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда), "block", "none");
	
	ЦветФонаСправки		= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветФона());
	ЦветСсылкиСправки	= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки());
	
	ЭлементыФормы.ПанельСправкиФормы.ЦветРамки			= РаботаСДиалогами.ВстроеннаяСправка_ЦветРамки();
	ЭлементыФормы.НадписьЗакрытьСправкуФормы.ЦветФона	= РаботаСДиалогами.ВстроеннаяСправка_ЦветФона();
	ЭлементыФормы.НадписьЗакрытьСправкуФормы.ЦветТекста	= РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки();
	
	Если мЭтоНовый Тогда
		ВыборФизлица_Показывать	= ?(НЕ НовыйЭлементЗаписан, "inline", "none");
		ВыборФизлица_Выбирать	= ?(НЕ НовыйЭлементЗаписан И ВыборФизлица, "block", "none");
		ВыборФизлица_НеВыбирать	= ?(НЕ НовыйЭлементЗаписан И НЕ ВыборФизлица, "block", "none");
		
		ТекстМакетаВстроеннойСправки =
		"<HTML>
		|	<HEAD>
		|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогами.ВстроеннаяСправка_СтилиДокумента() + "
		|	</HEAD>
		|
		|	<BODY aLink="+ЦветСсылкиСправки+" vLink="+ЦветСсылкиСправки+" link="+ЦветСсылкиСправки+" bgColor="+ЦветФонаСправки+" scroll=auto><FONT face=""MS Sans Serif"" size=1>
		|		<IMG src="+РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы, ЭлементыФормы.ВстроеннаяСправка)+">
		|		<DIV class=""top"" id=ВыборФизлица style=""DISPLAY:"+ВыборФизлица_Показывать+""">
		|			<DIV>Вы вводите нового сотрудника и данные о его договоре с компанией.</DIV>
		|			<DIV>Если это - новый для вашей компании сотрудник, вы можете сразу <A id=Команда href=""1C:НовоеФизлицо"">ввести его личные данные в справочник физических лиц</A>.</DIV>
		|			<DIV>Если сотрудник ранее уже работал в вашей компании по другому договору или его личные данные уже были предварительно внесены в справочник физических лиц, вам необходимо <A id=Команда href=""1C:ВыбратьФизлицо"">выбрать его из справочника</A>.</DIV>
		|			<DIV id=ВыборФизлица_Выбирать style=""DISPLAY:"+ВыборФизлица_Выбирать+""">Сейчас выбран ввод сотрудника из справочника физических лиц. Вы можете <A id=Команда href=""1C:ИзменитьРежим"">изменить это действие</A>, или <A id=Команда href=""1C:ВыбратьФизлицо"">выбрать сотрудника из справочника</A>.</DIV>
		|			<DIV id=ВыборФизлица_НеВыбирать style=""DISPLAY:"+ВыборФизлица_НеВыбирать+""">Сейчас выбран ввод личных данных о новом сотруднике. Вы можете <A id=Команда href=""1C:ИзменитьРежим"">изменить это действие</A>, или <A id=Команда href=""1C:НовоеФизлицо"">приступить к вводу данных</A>.</DIV>
		|		</DIV>
		|		<DIV id=СотрудникНеПринятВКомпанию style=""DISPLAY:"+СотрудникНеПринятВКомпанию+""">Вы можете сразу <A id=Команда href=""1C:ОформитьПриемНаРаботу"">оформить приказ о приеме на работу</A>.</DIV>
		|		<DIV id=СотрудникРаботаетВКомпании style=""DISPLAY:"+СотрудникРаботаетВКомпании+""">Сотрудник работает в компании. Вы можете <A id=Команда href=""1C:ОформитьКадровоеПеремещение"">изменить условия труда</A> сотрудника или <A id=Команда href=""1C:ОформитьУвольнение"">уволить</A> его.</DIV>
		|		<DIV id=СотрудникУволенИзКомпании style=""DISPLAY:"+СотрудникУволенИзКомпании+""">Этот сотрудник уволен из компании. Вы можете <A id=Команда href=""1C:ИзменитьАктуальность"">отключить актуальность</A> сотрудника, чтобы он не отображался в списке.</DIV>
		|		<DIV id=Организация_Показывать style=""DISPLAY:"+Организация_Показывать+""">Вам необходимо <A id=Команда href=""1C:ВыбратьОрганизацию"">выбрать организацию</A> для того, чтобы оформить приказ о приеме на работу.</DIV>
		|		<DIV id=ВидЗанятости_Показывать style=""DISPLAY:"+ВидЗанятости_Показывать+""">Вам необходимо <A id=Команда href=""1C:ВыбратьВидЗанятости"">выбрать вид занятости</A> для того, чтобы оформить приказ о приеме на работу.</DIV>
		|		<DIV id=СотрудникНеПринятВОрганизацию style=""DISPLAY:"+СотрудникНеПринятВОрганизацию+""">Вы можете сразу <A id=Команда href=""1C:ОформитьПриемНаРаботуВОрганизацию"">оформить приказ о приеме на работу</A>.</DIV>
		|		<DIV id=СотрудникРаботаетВОрганизации style=""DISPLAY:"+СотрудникРаботаетВОрганизации+""">Сотрудник работает в организации "+ Организация + ". Вы можете <A id=Команда href=""1C:ОформитьКадровоеПеремещениеОрганизации"">изменить условия труда</A> сотрудника или <A id=Команда href=""1C:ОформитьУвольнениеИзОрганизации"">уволить</A> его.</DIV>
		|		<DIV id=СотрудникУволенИзОрганизации style=""DISPLAY:"+СотрудникУволенИзОрганизации+""">Этот сотрудник уволен из организации. Вы можете <A id=Команда href=""1C:ИзменитьАктуальность"">отключить актуальность</A> сотрудника, чтобы он не отображался в списке.</DIV>
		|		<DIV class=""top"" id=СотрудникПоДоговоруГПХ style=""DISPLAY:"+СотрудникПоДоговоруГПХ+""">
		|			<DIV>Сотрудник работает по договору ГПХ.</DIV>
		|			<DIV>Вы можете <A id=Команда href=""1C:ПерейтиКСпискуДоговоров"">перейти к списку</A> зарегистрированных по сотруднику договоров</DIV>
		|		</DIV>
		|	</FONT></BODY>
		|</HTML>";
	Иначе
		ТекстМакетаВстроеннойСправки =
		"<HTML>
		|	<HEAD>
		|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогами.ВстроеннаяСправка_СтилиДокумента() + "
		|	</HEAD>
		|
		|	<BODY aLink="+ЦветСсылкиСправки+" vLink="+ЦветСсылкиСправки+" link="+ЦветСсылкиСправки+" bgColor="+ЦветФонаСправки+" scroll=auto><FONT face=""MS Sans Serif"" size=1>
		|		<IMG src="+РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы, ЭлементыФормы.ВстроеннаяСправка)+">
		|		<DIV id=СотрудникНеПринятВКомпанию style=""DISPLAY:"+СотрудникНеПринятВКомпанию+""">Вы можете сразу <A id=Команда href=""1C:ОформитьПриемНаРаботу"">оформить приказ о приеме на работу</A>.</DIV>
		|		<DIV id=СотрудникРаботаетВКомпании style=""DISPLAY:"+СотрудникРаботаетВКомпании+""">Сотрудник работает в компании. Вы можете <A id=Команда href=""1C:ОформитьКадровоеПеремещение"">изменить условия труда</A> сотрудника или <A id=Команда href=""1C:ОформитьУвольнение"">уволить</A> его.</DIV>
		|		<DIV id=СотрудникУволенИзКомпании style=""DISPLAY:"+СотрудникУволенИзКомпании+""">Этот сотрудник уволен из компании. Вы можете <A id=Команда href=""1C:ИзменитьАктуальность"">отключить актуальность</A> сотрудника, чтобы он не отображался в списке.</DIV>
		|		<DIV id=Организация_Показывать style=""DISPLAY:"+Организация_Показывать+""">Вам необходимо <A id=Команда href=""1C:ВыбратьОрганизацию"">выбрать организацию</A> для того, чтобы оформить приказ о приеме на работу.</DIV>
		|		<DIV id=ВидЗанятости_Показывать style=""DISPLAY:"+ВидЗанятости_Показывать+""">Вам необходимо <A id=Команда href=""1C:ВыбратьВидЗанятости"">выбрать вид занятости</A> для того, чтобы оформить приказ о приеме на работу.</DIV>
		|		<DIV id=СотрудникНеПринятВОрганизацию style=""DISPLAY:"+СотрудникНеПринятВОрганизацию+""">Вы можете сразу <A id=Команда href=""1C:ОформитьПриемНаРаботуВОрганизацию"">оформить приказ о приеме на работу</A>.</DIV>
		|		<DIV id=СотрудникРаботаетВОрганизации style=""DISPLAY:"+СотрудникРаботаетВОрганизации+""">Сотрудник работает в организации "+ Организация + ". Вы можете <A id=Команда href=""1C:ОформитьКадровоеПеремещениеОрганизации"">изменить условия труда</A> сотрудника или <A id=Команда href=""1C:ОформитьУвольнениеИзОрганизации"">уволить</A> его.</DIV>
		|		<DIV id=СотрудникРаботаетВОрганизацииТекст style=""DISPLAY:"+СотрудникРаботаетВОрганизацииТекст+""">У сотрудника оформлены трудовые отношения с организацией: "+ Организация + "</DIV>
		|		<DIV id=СотрудникУволенИзОрганизации style=""DISPLAY:"+СотрудникУволенИзОрганизации+""">Этот сотрудник уволен из организации. Вы можете <A id=Команда href=""1C:ИзменитьАктуальность"">отключить актуальность</A> сотрудника, чтобы он не отображался в списке.</DIV>
		|		<DIV class=""top"" id=СотрудникПоДоговоруГПХ style=""DISPLAY:"+СотрудникПоДоговоруГПХ+""">
		|			<DIV>Сотрудник работает по договору ГПХ.</DIV>
		|			<DIV>Вы можете <A id=Команда href=""1C:ПерейтиКСпискуДоговоров"">перейти к списку</A> зарегистрированных по сотруднику договоров</DIV>
		|		</DIV>
		|	</FONT></BODY>
		|</HTML>";
	КонецЕсли;
	
	ЭлементыФормы.ВстроеннаяСправка.УстановитьТекст(ТекстМакетаВстроеннойСправки);
	
КонецПроцедуры

Процедура ОбновитьСправкуФормы(ПолеДанных = Неопределено)
	
	ДокHTML = ЭлементыФормы.ВстроеннаяСправка.Документ;
	
	Если ПолеДанных = Неопределено ИЛИ ПолеДанных = "ОбновитьНовый" ИЛИ ПолеДанных = "НовыйЭлементЗаписан" ИЛИ ПолеДанных = "ВыборФизлица" Тогда
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ВыборФизлица", мЭтоНовый И НЕ НовыйЭлементЗаписан, "inline");
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ВыборФизлица_Выбирать", мЭтоНовый И НЕ НовыйЭлементЗаписан И ВыборФизлица, "block");
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ВыборФизлица_НеВыбирать", мЭтоНовый И НЕ НовыйЭлементЗаписан И НЕ ВыборФизлица, "block");
	КонецЕсли;
	
	Если ПолеДанных = Неопределено ИЛИ ПолеДанных = "ОбновитьСуществующий" ИЛИ ПолеДанных = "НовыйЭлементЗаписан" ИЛИ ПолеДанных = "СправочникОбъект.ВидДоговора" ИЛИ ПолеДанных = "СправочникОбъект.Организация" ИЛИ ПолеДанных = "СправочникОбъект.ВидЗанятости"  ИЛИ ПолеДанных = "СправочникОбъект.Актуальность" Тогда
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникНеПринятВКомпанию", Ложь, "block");
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникРаботаетВКомпании", Ложь, "block");
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникУволенИзКомпании", Ложь, "block");
		
		Если НовыйЭлементЗаписан И ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
			СрезПоРаботнику = РегистрыСведений.Работники.СрезПоследних(РабочаяДата, Новый Структура("Физлицо", Физлицо));
			Если СрезПоРаботнику.Количество() > 0 Тогда
				Если СрезПоРаботнику[0].ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
					Если Актуальность Тогда
						РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникУволенИзКомпании", Истина, "block");
					КонецЕсли;
				Иначе
					РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникРаботаетВКомпании", Истина, "block");
				КонецЕсли;
			Иначе
				РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникНеПринятВКомпанию", Истина, "block");
			КонецЕсли;
		КонецЕсли;
	
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникНеПринятВОрганизацию", Ложь, "block");
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникРаботаетВОрганизации", Ложь, "block");
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникУволенИзОрганизации", Ложь, "block");
		
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "Организация_Показывать", Ложь, "block");
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ВидЗанятости_Показывать", Ложь, "block");
		
		Если НовыйЭлементЗаписан И ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор И (мДоступнаРольКадровикаРегл ИЛИ мДоступнаРольРасчетчикаРегл) Тогда
			Если НЕ (Организация.Пустая() ИЛИ ВидЗанятости.Пустая()) Тогда
				СрезПоРаботнику = РегистрыСведений.РаботникиОрганизаций.СрезПоследних(ТекущаяДата(), Новый Структура("Сотрудник, Организация", Ссылка, Организация));
				Если СрезПоРаботнику.Количество() > 0 Тогда
					Если СрезПоРаботнику[0].ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
						Если Актуальность Тогда
							РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникУволенИзОрганизации", Истина, "block");
						КонецЕсли;
					Иначе
						РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникРаботаетВОрганизации", Истина, "block");
					КонецЕсли;
				Иначе
					РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникНеПринятВОрганизацию", Истина, "block");
				КонецЕсли;
			КонецЕсли;
			
			РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "Организация_Показывать", Организация.Пустая(), "block");
			РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ВидЗанятости_Показывать", ВидЗанятости.Пустая(), "block");
			
		КонецЕсли;
		
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникПоДоговоруГПХ", НовыйЭлементЗаписан И (ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский ИЛИ ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда), "block");
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСправкуФормы()

Процедура УстановитьВидимостьСправкиФормы(ОбновитьСправку = Истина)
	
	РаботаСДиалогами.ИзменитьВидимостьПанелиПоГоризонтали(ЭтаФорма, ОтображатьСправкуФормы, "ОсновнаяПанель", "СправкиФормы");
	ЭлементыФормы.ДействияФормыСправка.Кнопки.ПереключениеСправкиФормы.Пометка = ОтображатьСправкуФормы;
	
	Если ОтображатьСправкуФормы Тогда
		ПодключитьОбработчикИзмененияДанных("НовыйЭлементЗаписан",	"ОбновитьСправкуФормы");
		ПодключитьОбработчикИзмененияДанных("ВыборФизлица",			"ОбновитьСправкуФормы");
		ПодключитьОбработчикИзмененияДанных("ВидДоговора",			"ОбновитьСправкуФормы");
		ПодключитьОбработчикИзмененияДанных("Организация",			"ОбновитьСправкуФормы");
		ПодключитьОбработчикИзмененияДанных("ВидЗанятости",			"ОбновитьСправкуФормы");
		ПодключитьОбработчикИзмененияДанных("Актуальность",			"ОбновитьСправкуФормы");
		Если ОбновитьСправку Тогда
			Если мЭтоНовый Тогда
				Если ЭтоНовый() Тогда
					ОбновитьСправкуФормы("ОбновитьНовый");
				Иначе
					ОбновитьСправкуФормы("НовыйЭлементЗаписан");
				КонецЕсли;
			Иначе
				ОбновитьСправкуФормы("ОбновитьСуществующий");
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ОтключитьОбработчикИзмененияДанных("НовыйЭлементЗаписан");
		ОтключитьОбработчикИзмененияДанных("ВыборФизлица");
		ОтключитьОбработчикИзмененияДанных("ВидДоговора");
		ОтключитьОбработчикИзмененияДанных("Организация");
		ОтключитьОбработчикИзмененияДанных("ВидЗанятости");
		ОтключитьОбработчикИзмененияДанных("Актуальность");
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА СВОЙСТВ И КАТЕГОРИЙ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием
	Если ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_СотрудникиОрганизаций Тогда
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
	КонецЕсли;

КонецПроцедуры

// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием.
	Если ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_СотрудникиОрганизаций Тогда
		ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
		ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока)

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОбработкаОбъектЗначенияСвойств.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные, Элемент);

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ИнвертироватьПометкуУдаленияКатегории(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, НоваяСтрока)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры


Процедура ПерейтиКВводуГруппыДоступаНажатие(Элемент)
	
	ФормаВыбора = Справочники.ГруппыФизическихЛиц.ПолучитьФормуВыбора(,ЭтаФорма,);
	ФормаВыбора.ПараметрТекущаяСтрока		= ФизлицоОбъект.ГруппаФизическихЛиц;
	ФормаВыбора.ОткрытьМодально();
	
КонецПроцедуры

Процедура ОсновноеНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
		ФормаВыбора = Справочники.СотрудникиОрганизаций.ПолучитьФормуВыбора("ФормаВыбора",ЭтаФорма);
		ФормаВыбора.Отбор.ВидЗанятости.Использование = Истина;
		ФормаВыбора.Отбор.ВидЗанятости.ВидСравнения = ВидСравнения.НеРавно;
		ФормаВыбора.Отбор.ВидЗанятости.Значение = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;
		
		ФормаВыбора.Отбор.Актуальность.Использование = Истина;
		ФормаВыбора.Отбор.Актуальность.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.Отбор.Актуальность.Значение = Истина;
		
		ФормаВыбора.Отбор.Организация.Использование = Истина;
		ФормаВыбора.Отбор.Организация.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.Отбор.Организация.Значение = Организация;
		
		ФормаВыбора.Отбор.Физлицо.Использование = Истина;
		ФормаВыбора.Отбор.Физлицо.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.Отбор.Физлицо.Значение = Физлицо;
		
		ФормаВыбора.Открыть();
		
		СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОсновноеНазначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Элемент.Значение = ВыбранноеЗначение;
	
КонецПроцедуры

Процедура ДействияФормыНачальныйСтаж(Кнопка)
	Форма = РегистрыСведений.НачальныеСведенияОСтажеРаботниковОрганизации.ПолучитьФорму("ФормаСписка");
	Форма.ЭлементыФормы.Сотрудники.Значение.Отбор.Наименование.Значение = Ссылка.ФизЛицо.Наименование;
	Форма.ЭлементыФормы.Сотрудники.Значение.Отбор.Наименование.Использование = Истина;
	Форма.Открыть();
КонецПроцедуры

Процедура ПлановыеУдержанияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
		Если ТипЗнч(ДанныеСтроки.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций") Тогда
		
		РаботаСДиалогами.ПриВыводеСтрокиПлановыхНачисленийИУдержаний(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчета, Ложь);
		ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;
		
	Иначе
		
		ОформлениеСтроки.Ячейки["НаименованиеПоказатель1"].Видимость	= Истина;
		ОформлениеСтроки.Ячейки["НаименованиеПоказатель1"].УстановитьТекст(НСтр("ru='Размер';uk='Розмір'"));
		ОформлениеСтроки.Ячейки["Показатель1"].Видимость				= Истина;
		ОформлениеСтроки.Ячейки["Валюта1"].Видимость					= Истина;
				
		Для СчПоказателей = 2 По 6 Цикл
			
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей ].Видимость	= Ложь;
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость					= Ложь;
			ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].Видимость						= Ложь;
			
		КонецЦикла;
		
		ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;
		
	КонецЕсли;

КонецПроцедуры

Процедура НаличиеГарантийНачалоВыбора(Элемент, СтандартнаяОбработка) 
	
	ФормаРегистра = РегистрыСведений.СведенияОЛицахСДополнительнымиГарантиями.ПолучитьФорму("ФормаЗаписиДополнительная", ЭтаФорма);
	ФормаРегистра.Физлицо  = Ссылка.Физлицо;
	
	ТаблицаРегистра = РегистрыСведений.СведенияОЛицахСДополнительнымиГарантиями.СрезПоследних(РабочаяДата, Новый Структура("ФизЛицо",Ссылка.Физлицо));
	
	Если ТаблицаРегистра.Количество() > 0 Тогда
		
		ФормаРегистра.Период  			  		= ТаблицаРегистра[0].Период;
		ФормаРегистра.ВидГарантии		  		= ТаблицаРегистра[0].ВидГарантии;
		ФормаРегистра.НаличиеГарантий	  		= ТаблицаРегистра[0].НаличиеГарантий;
		ФормаРегистра.Комментарий				= ТаблицаРегистра[0].Комментарий;
		
	Иначе
		ФормаРегистра.Период = '19000101';
	КонецЕсли;
	
	ФормаРегистра.Открыть();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
мНаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
мСведенияОВидахРасчета = Новый Соответствие;
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мНаборЗаписейГражданство = РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
мНаборЗаписейИнвалидность = РегистрыСведений.СведенияОбИнвалидностиФизлиц.СоздатьНаборЗаписей();
мНаборЗаписейПенсионер = РегистрыСведений.СведенияОПенсионерах.СоздатьНаборЗаписей();
мНаборЗаписейНаличиеГарантий = РегистрыСведений.СведенияОЛицахСДополнительнымиГарантиями.СоздатьНаборЗаписей(); 

мОбработкаТайпинга					= Ложь;
мТекстТайпинга						= "";
мПоследнееЗначениеЭлементаТайпинга	= Неопределено;
мОбработкаТайпингаОрганизация					= Ложь;
мТекстТайпингаОрганизация						= "";
мПоследнееЗначениеЭлементаТайпингаОрганизация	= Неопределено;

