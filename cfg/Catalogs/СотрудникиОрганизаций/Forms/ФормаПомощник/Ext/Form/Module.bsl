////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяСтраница;
Перем мВалютаРегламентированногоУчета;
Перем мВалютаУправленческогоУчета;

Перем мДатаДоговора Экспорт;

Перем мОбработкаПодбораПоСтрокеОрганизация;
Перем мТекстПодбораПоСтрокеОрганизация;
Перем мПоследнееЗначениеЭлементаПодбораПоСтрокеОрганизация;

Перем мПодразделениеДоговора;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

Перем мСписокНедоступныхРасчетов;

Перем мМассивЭУ;

Перем мСписокПредопределенныхВР; // список ненужных видов расчета
Перем мВалютаТарифнойСтавки;
Перем мСведенияОВидахРасчетаОснНачислений;
Перем мСведенияОВидахРасчетаУпр;
Перем мСпособыРасчетов;

Перем мНаборЗаписейФИО Экспорт;
Перем мНаборЗаписейГражданство Экспорт;
Перем мНаборЗаписейИнвалидность Экспорт;
Перем мНаборЗаписейПенсионер Экспорт;
Перем мНаборЗаписейНаличиеГарантий Экспорт; 
	  
Перем мНеСоздаватьДокумент;
Перем мЭтоТрудовойДоговор;
Перем мЭтоДоговорник;
Перем мЭтоСотрудникБезДоговора;

// картинки для ЭУ страницы Готово
Перем мКартинкаФизлицо;
Перем мКартинкаСотрудник;
Перем мКартинкаДоговораГПХ;
Перем мКартинкаПриказ;

Перем ОбработкаКомментариев;

Перем мДоступнаРольРасчетчикаРегл;
Перем мДоступнаРольКадровикаРегл;
Перем мПолныеПрава;
Перем мДоступныРолиУпрУчета;

Перем мПроверкаШтатногоРасписания;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПолучитьОчереднойТабельныйНомерПомощник() Экспорт

	Если Не ЗначениеЗаполнено(ВидДоговора) Тогда
		Возврат "";
	КонецЕсли;
	
	Префикс = "";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамОрганизация",Организация);
	парамВидДоговора = Новый Массив;
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		парамВидДоговора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
		парамВидДоговора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
	Иначе
		Префикс = "д";
		парамВидДоговора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		парамВидДоговора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
	КонецЕсли;
	Запрос.УстановитьПараметр("парамВидДоговора",парамВидДоговора);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СотрудникиОрганизаций.Код) КАК Код
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Организация = &парамОрганизация
	|	И СотрудникиОрганизаций.ВидДоговора В(&парамВидДоговора)
	|	И СотрудникиОрганизаций.Ссылка <> &Ссылка";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатаЗапроса = Запрос.Выполнить();
	Если РезультатаЗапроса.Пустой() Тогда
		Возврат ?(ЗначениеЗаполнено(Префикс), Префикс + "000000001", "0000000001");
	Иначе
		СтрокаРезультата = РезультатаЗапроса.Выгрузить()[0];
		Если НЕ ЗначениеЗаполнено(СтрокаРезультата.Код) Тогда
			Возврат ?(ЗначениеЗаполнено(Префикс), Префикс + "000000001", "0000000001");
		Иначе
			Возврат ПроцедурыУправленияПерсоналом.ПолучитьСледующийНомер(СокрП(СтрокаРезультата.Код));
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПолучитьОчереднойТабельныйНомерПомощник()


// Процедура проверяет какой вид занятости установить по умолчанию
Процедура ПроверитьИУстановитьВидЗанятости(НеЗадаватьВопрос = Истина)

	Если (ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы 
		или ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство) и ЗначениеЗаполнено(Организация)
		и ЗначениеЗаполнено(ФизлицоОбъект.Ссылка) Тогда
		//проверим, есть актуальный не уволенный сотрудник в этой организации с видом занятости
		// основное место работы или совместитель
		// и если есть установим вид занятости - Внутреннее совместительство
		
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сотрудники.ВидЗанятости,
		|	Сотрудники.Физлицо.Наименование КАК ФизлицоНаименование
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|		,
		|		Организация = &парамОрганизация
		|			И Сотрудник.Физлицо = &парамФизлицо) КАК Работники
		|		ПО Сотрудники.Ссылка = Работники.Сотрудник
		|			И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|ГДЕ
		|	Сотрудники.Физлицо = &парамФизлицо
		|	И Сотрудники.Организация = &парамОрганизация
		|	И Работники.ПричинаИзмененияСостояния ЕСТЬ NULL 
		|	И Сотрудники.Актуальность
		|	И Сотрудники.Ссылка <> &парамТекущийСотрудник
		|	И Сотрудники.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство))";
		
		Запрос.УстановитьПараметр("парамФизлицо",     ФизлицоОбъект.Ссылка);
		Запрос.УстановитьПараметр("парамТекущийСотрудник", Ссылка);
		Запрос.УстановитьПараметр("парамОрганизация", Организация);
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если НеЗадаватьВопрос Тогда
				ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;
			Иначе 
				// спросим у пользователя, заменить вид занятости или нет
				ТекстВопроса = НСтр("ru='В организации уже есть сотрудник ""';uk='В організації вже є співробітник ""'") + Выборка.ФизлицоНаименование + НСтр("ru='"" с видом занятости ""';uk='"" з видом зайнятості ""'") + Выборка.ВидЗанятости + НСтр("ru='"","
"поменять вид занятости на ""Внутреннее совместительство""?';uk='"","
"поміняти вид зайнятості на ""Внутрішнє сумісництво""?'");
				Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 20) = КодВозвратаДиалога.Да Тогда
					ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;	
					
					Запрос = Новый Запрос;
					ТекстЗапроса =
					"ВЫБРАТЬ
					|	Работники.Сотрудник КАК Сотрудник
					|ИЗ
					|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
					|		,
					|		Организация = &парамОрганизация
					|			И Сотрудник.Физлицо = &парамФизлицо И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК Работники
					|ГДЕ
					|	Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
					|";
					
					Запрос.УстановитьПараметр("парамФизлицо",     ФизлицоОбъект.Ссылка);
					Запрос.УстановитьПараметр("парамОрганизация", Организация);
					Запрос.Текст = ТекстЗапроса;
					ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
					Если ВыборкаИзЗапроса.Количество() = 1 Тогда
						ВыборкаИзЗапроса.Следующий();
						ОсновноеНазначение = ВыборкаИзЗапроса.Сотрудник;
					КонецЕсли;

				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры // ПроверитьИУстановитьВидЗанятости()

// Процедура управляет отображением кнопок выбора из списка
Процедура ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию()
	
	Если мДоступнаРольРасчетчикаРегл или мДоступнаРольКадровикаРегл Тогда //для других ролей не видна закладка ТрудовойДоговор
		ОрганизацияДляШР = Организация;
		
		СписокПодразделений = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации("ПодразделениеОрганизации", ОрганизацияДляШР, Должность);
		КоличествоЗначений = СписокПодразделений.Количество();
		ЭлементыФормы.ПодразделениеОрганизации.КнопкаСпискаВыбора = КоличествоЗначений > 0;
		ЭлементыФормы.ПодразделениеОрганизации1.КнопкаСпискаВыбора = КоличествоЗначений > 0;
		
		СписокДолжностей = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации("Должность", ОрганизацияДляШР, ПодразделениеОрганизации);
		КоличествоЗначений = СписокДолжностей.Количество();
		ЭлементыФормы.Должность.КнопкаСпискаВыбора = КоличествоЗначений > 0;
		
		Если ГрафикРаботы.Пустая() Тогда
			ДанныеШР = ПроцедурыУправленияПерсоналом.СведенияОПозицииШтатногоРасписания(ДатаДоговора, ПодразделениеОрганизации, Должность);
			Если ДанныеШР.Количество() > 0 Тогда
				ГрафикРаботы = ДанныеШР[0].ГрафикРаботы;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию()

// Процедура подбирает постфикс наименования перед записью нового сотрудника
Процедура ПодобратьПостфиксНаименования()
	
	//запросом выбираем выбираем Актуальных не уволенных сотрудников
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сотрудники.ПостфиксНаименования КАК Постфикс
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		,
	|		Организация = &парамОрганизация
	|			И Сотрудник.Физлицо = &парамФизлицо) КАК Работники
	|		ПО Сотрудники.Ссылка = Работники.Сотрудник
	|			И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|ГДЕ
	|	Сотрудники.Физлицо = &парамФизлицо
	|	И Сотрудники.Ссылка <> &Ссылка
	|	И Сотрудники.Организация = &парамОрганизация
	|	И Работники.ПричинаИзмененияСостояния ЕСТЬ NULL
	|	И Сотрудники.Актуальность";
	
	Запрос.УстановитьПараметр("парамФизлицо",     Физлицо);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = ТекстЗапроса;
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаИзЗапроса.Количество()>0 Тогда
		//есть сотрудники по этому физлицу, необходимо подобрать постфикс
		// проверим, есть сотрудник с пустым постфиксом
		Если ВыборкаИзЗапроса.НайтиСледующий(СОКРЛП(ПостфиксНаименования),"Постфикс")Тогда
			//есть сотрудники с таким постфиксом, значит необходимо назначить другой постфикс этому сотруднику
			ПостфиксНаименования = ПроверитьИПодобратьПостфикс(ПолучитьПостфиксПоВидуДоговра(), ВыборкаИзЗапроса);
			Если Не ПустаяСтрока(ПостфиксНаименования) Тогда
				Наименование = СОКРЛП(ФизлицоОбъект.Наименование) + " " + ПостфиксНаименования;
			КонецЕсли;
		ИначеЕсли Не ПустаяСтрока(ПостфиксНаименования) Тогда	
			//проверим, может у сотрудника остался постфикс, который не соответствует виду договора
			ПостфиксПоВидуДоговра = ПолучитьПостфиксПоВидуДоговра();
			Если Лев(ПостфиксНаименования,СтрДлина(ПостфиксПоВидуДоговра)-1) <> Лев(ПостфиксПоВидуДоговра,СтрДлина(ПостфиксПоВидуДоговра)-1)Тогда
				//скорее всего текущий постфикс наименования не соответствует виду договора
				ПостфиксНаименования = ПроверитьИПодобратьПостфикс(ПостфиксПоВидуДоговра, ВыборкаИзЗапроса);
				Если Не ПустаяСтрока(ПостфиксНаименования) Тогда
					Наименование = СОКРЛП(ФизлицоОбъект.Наименование) + " " + ПостфиксНаименования;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодобратьПостфиксНаименования()

// Функция проверяет наличие в выборке из запроса постфикса, переданного
// в качестве параметра и если есть такой, пытается подобрать другой постфикс
// Параметры
//  ПостфиксДляПроверки  – Строка – постфикс, который передаем для проверки
//                 <продолжение описания параметра>
//  ВыборкаИзЗапроса  – выборка из запроса по которой проверяем
//
// Возвращаемое значение:
//   Строка   – подобранный постфикс наименования
//
Функция ПроверитьИПодобратьПостфикс(ПостфиксДляПроверки, ВыборкаИзЗапроса)

	НомПопытки = 1;
	НовыйПостфикс = ПостфиксДляПроверки;
	Пока Истина Цикл
		
		Если НомПопытки > 9 Тогда
			//выходи из цикла, не удалось автоматически подобрать постфикс
			НовыйПостфикс = "";
			Прервать;
		КонецЕсли;
		
		ВыборкаИзЗапроса.Сбросить();
		Если ВыборкаИзЗапроса.НайтиСледующий(НовыйПостфикс,"Постфикс")Тогда
			НовыйПостфикс = Лев(ПостфиксДляПроверки,СтрДлина(ПостфиксДляПроверки)-1) + " " + Строка(НомПопытки) + ")";
			НомПопытки=НомПопытки + 1;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыйПостфикс;

КонецФункции // ПроверитьИПодобратьПостфикс()

// Функция возвращает постфикс наименования, который соответствует виду договра
// Возвращаемое значение:
//   <Строка>   – постфикс наименования
//
Функция ПолучитьПостфиксПоВидуДоговра()

	НовыйПостфикс = "";
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		Если ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
			НовыйПостфикс ="(вн. совм.)"; 
		ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда
			НовыйПостфикс = "(осн.)";
		Иначе
			НовыйПостфикс = "(совм.)";
		КонецЕсли; 
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
		НовыйПостфикс = "(дог. подр.)";
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
		НовыйПостфикс = "(дог. авт.)";
	КонецЕсли;
	
	Возврат НовыйПостфикс;

КонецФункции // ПолучитьПостфиксПоВидуДоговра()

Процедура ЗаполнитьНаборыПоФизлицу()

	мНаборЗаписейГражданство = РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
	мНаборЗаписейИнвалидность = РегистрыСведений.СведенияОбИнвалидностиФизлиц.СоздатьНаборЗаписей();
	мНаборЗаписейПенсионер = РегистрыСведений.СведенияОПенсионерах.СоздатьНаборЗаписей();
	мНаборЗаписейНаличиеГарантий = РегистрыСведений.СведенияОЛицахСДополнительнымиГарантиями.СоздатьНаборЗаписей(); 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", Физлицо);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГражданствоФизЛицСрезПоследних.Период,
	|	ГражданствоФизЛицСрезПоследних.ФизЛицо,
	|	ГражданствоФизЛицСрезПоследних.Страна,
	|	ГражданствоФизЛицСрезПоследних.НеИмеетПравоНаПенсию,
	|	ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентом
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ГражданствоФизЛицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейГражданство.Добавить(), Выборка);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Период,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Физлицо,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Инвалидность,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.УдостоверениеСерия,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.УдостоверениеНомер,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.УдостоверениеДатаВыдачи,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Группа
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК СведенияОбИнвалидностиФизлицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейИнвалидность.Добавить(), Выборка);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОПенсионерахСрезПоследних.Период,
	|	СведенияОПенсионерахСрезПоследних.Физлицо,
	|	СведенияОПенсионерахСрезПоследних.Пенсионер,
	|	СведенияОПенсионерахСрезПоследних.СвидетельствоСерия,
	|	СведенияОПенсионерахСрезПоследних.СвидетельствоНомер,
	|	СведенияОПенсионерахСрезПоследних.СвидетельствоДатаВыдачи
	|ИЗ
	|	РегистрСведений.СведенияОПенсионерах.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК СведенияОПенсионерахСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейПенсионер.Добавить(), Выборка);
	КонецЕсли;
	
	//********ИзменитьГруппуВзносов();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОЛицахСДополнительнымиГарантиямиСрезПоследних.Период,
	|	СведенияОЛицахСДополнительнымиГарантиямиСрезПоследних.Физлицо,
	|	СведенияОЛицахСДополнительнымиГарантиямиСрезПоследних.НаличиеГарантий,
	|	СведенияОЛицахСДополнительнымиГарантиямиСрезПоследних.ВидГарантии
	|ИЗ
	|	РегистрСведений.СведенияОЛицахСДополнительнымиГарантиями.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК СведенияОЛицахСДополнительнымиГарантиямиСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейНаличиеГарантий.Добавить(), Выборка);
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает не используемые реквизиты перед записью объекта
Процедура ОчиститьНеИспользуемыеРеквизиты()
	
	Если Не ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		
		ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка();
		НомерДоговора ="";
		ДатаДоговора = Дата('00010101');
		ОбособленноеПодразделение = Справочники.Организации.ПустаяСсылка();
		ПодразделениеОрганизеции  = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Должность		 = Справочники.ДолжностиОрганизаций.ПустаяСсылка();
		ГрафикРаботы	 = Справочники.ГрафикиРаботы.ПустаяСсылка();
		ЗанимаемыхСтавок = 0;
		ДатаНачала 	  = Дата('00010101');
		ДатаОкончания = Дата('00010101');
		ИспытательныйСрок = 0;
		СпособРасчета  = Перечисления.СпособыРасчетаОплатыТруда.ПустаяСсылка();
		ТарифнаяСтавка = 0;
		ТарифныйРазряд = Справочники.ТарифныеРазряды.ПустаяСсылка();
		ВалютаТарифнойСтавки = Справочники.Валюты.ПустаяСсылка();
			
	КонецЕсли; 
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровТайпингаОрганизации()

	СтруктураПараметров = Новый Структура("ГоловнаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровТайпинга()

// Функция формирует Наименование физлица из ФИО
Функция ПолучитьНаименованиеФизлица()

	Возврат СОКРЛП(?(ПустаяСтрока(Фамилия),"",СОКРЛП(Фамилия))
				+ ?(ПустаяСтрока(Имя),""," " + СОКРЛП(Имя))
				+ ?(ПустаяСтрока(Отчество),""," " + СОКРЛП(Отчество)));

КонецФункции // ПолучитьНаименованиеФизлица()

// в процедуре проверяются дубли физлиц
Процедура ПроверитьФизлицо()

	Если ФизлицоОбработано Тогда
		// не ищем дубли физлиц, физлицо уже обработано
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ФизлицоОбъект.Наименование) Тогда
		Возврат;
	КонецЕсли;
	
	СписокФизлиц = ПолучитьСписокФизлиц();
	Если СписокФизлиц.Количество() = 0 Тогда
		// дубли физлиц не обнаружены
		Возврат;
	КонецЕсли;
	
	ФормаФЛ = Справочники.СотрудникиОрганизаций.ПолучитьФорму("ФормаВыбораФизлица", ЭтаФорма);
	ФормаФЛ.СписокФизлиц.Отбор.Ссылка.Использование = Истина;
	ФормаФЛ.СписокФизлиц.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаФЛ.СписокФизлиц.Отбор.Ссылка.Значение 		= СписокФизлиц;
	ФормаФЛ.ОткрытьМодально();

КонецПроцедуры

// Получает список Физлиц - дублей
//
// Возвращаемое значение:
//   СписокЗначений   - список физлиц - дублей
//
Функция ПолучитьСписокФизлиц()

	НаименованиеФизлица = ПолучитьНаименованиеФизлица();
	
	НетДатыРождения = Не ЗначениеЗаполнено(ФизлицоОбъект.ДатаРождения);
	НетДРФО = Не ЗначениеЗаполнено(ФизлицоОбъект.КодПоДРФО) ;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	(НЕ ФизическиеЛица.ЭтоГруппа)
	|	И (&парамНетДатыРождения
	|			ИЛИ &парамДатаРождения = ФизическиеЛица.ДатаРождения)
	|	И (&парамНетДРФО
	|			ИЛИ &парамДРФО = ФизическиеЛица.КодПоДРФО)
	|	И ФизическиеЛица.Наименование ПОДОБНО &парамНаименование";
	
	Запрос.УстановитьПараметр("парамНаименование", НаименованиеФизлица);
	Запрос.УстановитьПараметр("парамНетДатыРождения", НетДатыРождения);
	Запрос.УстановитьПараметр("парамДатаРождения", ФизлицоОбъект.ДатаРождения);
	Запрос.УстановитьПараметр("парамНетДРФО", НетДРФО);
	Запрос.УстановитьПараметр("парамДРФО", ФизлицоОбъект.КодПоДРФО);
	
	МассивФизлиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	СписокФизлиц = Новый СписокЗначений;
	СписокФизлиц.ЗагрузитьЗначения(МассивФизлиц);
	Возврат СписокФизлиц;

КонецФункции // ПолучитьСписокФизлиц()

Процедура ОбработатьВыборФизлица()

	ЭлементыФормы.Фамилия.ТолькоПросмотр		= ВыборФизлица;
	ЭлементыФормы.Имя.ТолькоПросмотр			= ВыборФизлица;
	ЭлементыФормы.Отчество.ТолькоПросмотр		= ВыборФизлица;

	ЭлементыФормы.ДатаРождения.ТолькоПросмотр		= ВыборФизлица;
	ЭлементыФормы.Пол.ТолькоПросмотр 				= ВыборФизлица;
	ЭлементыФормы.ДРФО.ТолькоПросмотр 				= ВыборФизлица;
	
	ПроверитьИУстановитьВидЗанятости(Ложь);
	
	// заполним наборы записей данными физлица
	ЗаполнитьНаборыПоФизлицу();

КонецПроцедуры

// Процедура обрабатывает изменение организации
Процедура ОбработатьИзменениеОрганизации()

	ПроверитьИУстановитьВидЗанятости();
	
	Код = ПолучитьОчереднойТабельныйНомерПомощник();
	
	Если мЭтоТрудовойДоговор Тогда
		
		//получим новый номер трудового договора
		НомерДоговора = ПолучитьНомерТрудовогоДоговора();	
		
		Если ВалютаТарифнойСтавки.Пустая() Тогда
			ВалютаТарифнойСтавки =  мВалютаРегламентированногоУчета;
		КонецЕсли;
		
	КонецЕсли;
	ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию();
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	мПроверкаШтатногоРасписания = Ложь;
	Если ЗначениеЗаполнено(Организация) Тогда
		УчетнаяПолитикаПоПерсоналуОрганизации	= глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
		мПроверкаШтатногоРасписания = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналуОрганизации, Организация, "ПроверкаШтатногоРасписания");
	КонецЕсли;
	
КонецПроцедуры


Процедура ОбработатьИзменениеВидаДоговора()

    мЭтоТрудовойДоговор = ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;
	мЭтоСотрудникБезДоговора = ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий;
    мЭтоДоговорник = ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда или ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский;
    
	Код = ПолучитьОчереднойТабельныйНомерПомощник();
	ПроверитьИУстановитьВидЗанятости();
	ПодобратьПостфиксНаименования();
	
	РежимСвертки = ?(мЭтоСотрудникБезДоговора, РежимСверткиЭлементаУправления.Верх, РежимСверткиЭлементаУправления.Нет); 
	ЭлементыФормы.ПанельОрганизация.Свертка = РежимСвертки;
	
КонецПроцедуры

// Процедура устанавливает видимость ЭУ в зависимости от использования тарифного разряда
Процедура ФормаПомощникУстановитьВидимостьЭУПоИспользованиюТарифногоРазряда()
		
	ИспользоватьТарифныйРазряд = ВидРасчета.ТребуетВводаТарифногоРазряда;
	Если ИспользоватьТарифныйРазряд Тогда
		ЭлементыФормы.ПанельРазмерОклада.ТекущаяСтраница = ЭлементыФормы.ПанельРазмерОклада.Страницы.ТарифныйРазряд;
	Иначе
		ЭлементыФормы.ПанельРазмерОклада.ТекущаяСтраница = ЭлементыФормы.ПанельРазмерОклада.Страницы.ВРублях;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьЭУПоИспользованиюТарифногоРазряда()

Функция СоздатьПриказОПриемеНаРаботу()

	ДокументОбъект = Документы.ПриемНаРаботуВОрганизацию.СоздатьДокумент();
	ДокументОбъект.Заполнить(Ссылка);
    ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект);
    ДокументОбъект.Дата = РабочаяДата;
	Если ДокументОбъект.РаботникиОрганизации.Количество() > 0 Тогда
		СтрокаРаботникиОрганизации = ДокументОбъект.РаботникиОрганизации[0];
		СтрокаРаботникиОрганизации.ПринятНаНовоеРабочееМесто = ПринятНаНовоеРабочееМесто;
		СтрокаРаботникиОрганизации.ДатаСозданияРабочегоМеста = ДатаСозданияРабочегоМеста;
	КонецЕсли;	
	Возврат ДокументОбъект;
    
КонецФункции 

Функция СоздатьПриказОПриемеНаРаботуВКомпанию()

	ДокументОбъект = Документы.ПриемНаРаботу.СоздатьДокумент();
    ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект);
	ДокументОбъект.Дата = РабочаяДата;
	
	НоваяСтрока = ДокументОбъект.Работники.Добавить();
	НоваяСтрока.Сотрудник = Ссылка;
	НоваяСтрока.ФизЛицо	= Ссылка.ФизЛицо;
	НоваяСтрока.ДатаПриема = ДатаПриемаУпр;
	НоваяСтрока.ГрафикРаботы = ГрафикРаботыУпр;
	НоваяСтрока.Должность = ДолжностьУпр;
	НоваяСтрока.Подразделение = ПодразделениеУпр;
	НоваяСтрока.ЗанимаемыхСтавок = ЗанимаемыхСтавокУпр;
	НоваяСтрока.НапомнитьПоЗавершении = Истина;
	Если НоваяСтрока.ЗанимаемыхСтавок = 0 Тогда
		НоваяСтрока.ЗанимаемыхСтавок = 1;
	КонецЕсли;
	
	//начисления
	Для каждого СтрокаТЗ Из НачисленияУпр Цикл
		НоваяСтрока = ДокументОбъект.Начисления.Добавить();
		НоваяСтрока.Сотрудник = Ссылка;
		НоваяСтрока.ФизЛицо = Ссылка.ФизЛицо;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
	КонецЦикла;
	
	//удержания
	Для каждого СтрокаТЗ Из УдержанияУпр Цикл
		НоваяСтрока = ДокументОбъект.Взыскания.Добавить();
		НоваяСтрока.ФизЛицо = Ссылка.ФизЛицо;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
	КонецЦикла;
	
	Возврат ДокументОбъект;
    
КонецФункции

Функция СоздатьДоговорПодряда()

	ДокументОбъект = Документы.ДоговорНаВыполнениеРаботСФизЛицом.СоздатьДокумент();
	ДокументОбъект.Заполнить(Ссылка);
    ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект);
	ДокументОбъект.ПодразделениеОрганизации = мПодразделениеДоговора;
    ДокументОбъект.Дата = РабочаяДата;
	ДокументОбъект.ВидРасчета = ВидРасчетаДоговорГПХ;
	ДокументОбъект.ДатаНачала = ДатаНачалаДоговораГПХ;
	ДокументОбъект.ДатаОкончания = ДатаОкончанияДоговораГПХ;
	ДокументОбъект.ХарактерОплаты = ХарактерОплаты;
	ДокументОбъект.СуммаЗаРаботу = СуммаЗаРаботу;
	ДокументОбъект.ВалютаДокумента = ВалютаДоговораГПХ;
	ДокументОбъект.НазначитьВзносы = НазначитьВзносы;
	
	Возврат ДокументОбъект;

КонецФункции

Процедура ОбработатьИзменениеФлагаСоздатьДокумент()

    ОбновитьНадписиХодаВыполненияИЗаголовки();
    ОбновитьШрифтНадписиХодаВыполнения();
    
	РежимСверткиЭУ = ?(СоздатьДокумент, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	
	ЭлементыФормы.ПодразделениеОрганизации.АвтоОтметкаНезаполненного = СоздатьДокумент;
	ЭлементыФормы.Должность.АвтоОтметкаНезаполненного = СоздатьДокумент;
	ЭлементыФормы.ГрафикРаботы.АвтоОтметкаНезаполненного = СоздатьДокумент;
	ЭлементыФормы.ЗанимаемыхСтавок.АвтоОтметкаНезаполненного = СоздатьДокумент;
	ЭлементыФормы.ДатаНачала.АвтоОтметкаНезаполненного = СоздатьДокумент;
	
	ЭлементыФормы.ПодразделениеОрганизации.ОтметкаНезаполненного = СоздатьДокумент и Не ЗначениеЗаполнено(ПодразделениеОрганизации);
	ЭлементыФормы.Должность.ОтметкаНезаполненного = СоздатьДокумент и Не ЗначениеЗаполнено(Должность);
	ЭлементыФормы.ГрафикРаботы.ОтметкаНезаполненного = СоздатьДокумент и Не ЗначениеЗаполнено(ГрафикРаботы);
	ЭлементыФормы.ЗанимаемыхСтавок.ОтметкаНезаполненного = СоздатьДокумент и Не ЗначениеЗаполнено(ЗанимаемыхСтавок);
	ЭлементыФормы.ДатаНачала.ОтметкаНезаполненного = СоздатьДокумент и Не ЗначениеЗаполнено(ДатаНачала);
	
	ТекстСоздатьДоговорГПХ = "По окончании работы помощника будет создан документ ""Договор на выполнение работ""";
	Если Не СоздатьДокумент Тогда
		ТекстСоздатьДоговорГПХ = "Документ ""Договор на выполнение работ"" можно будет создать позже в разделе ""Расчет зарплаты"" - ""Договоры ГПХ""";
	КонецЕсли;	
	ЭлементыФормы.ПанельУсловияДоговораГПХ.Видимость = СоздатьДокумент;
	
	ЭлементыФормы.ПанельУсловияПриемаУпр.Видимость = СоздатьДокумент;

КонецПроцедуры

Процедура ЗаполнитьДанныеДоговораГПХ()

	Если Не ЗначениеЗаполнено(ХарактерОплаты) Тогда
		ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.Ежемесячно;
	КонецЕсли;
	
	Если ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.ПоСдельномуНаряду Тогда
		ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплатаГПХ;
	Иначе
		Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
			ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.АвторскоеВознаграждение;
		ИначеЕсли ЗначениеЗаполнено(ОсновноеНазначение) Тогда
			ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоговорПодряда;
		Иначе
			ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоговорПодрядаСПД;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновноеНазначение) Тогда
		НазначитьВзносы = Ложь;
		ЭлементыФормы.НазначитьВзносы.Видимость = Ложь;
	Иначе
		ЭлементыФормы.НазначитьВзносы.Видимость = Истина;
	КонецЕсли;	


КонецПроцедуры

Процедура ЗаполнитьДанныеТрудовогоДоговора()

	//заполним поле График работы
	ГрафикРаботы = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ГрафикРаботы");
	Если НЕ ЗначениеЗаполнено(ГрафикРаботы) Тогда
		ГрафикРаботы = Константы.ОсновнойГрафикРаботыПредприятий.Получить();
	КонецЕсли;

КонецПроцедуры

Функция СохранитьДанные(ОписаниеОшибки = "")
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
    НачатьТранзакцию();
	
	Если мЭтоДоговорник Тогда
        ВидДоговора = ВидДоговораГПХ;
		мПодразделениеДоговора = ПодразделениеОрганизации;
    КонецЕсли;
	
	// очистим реквизиты, которые не используются
	ОчиститьНеИспользуемыеРеквизиты();
	
	//установим актуальность для нового сотрудника
	Актуальность  = Истина;
	
	//если создаем новое физлицо, проверим заполнение реквизитов
	// и запишем физлицо
	Если Не ВыборФизлица Тогда
		//необходимо создать новое физлицо, проверим реквизиты
		Если ПустаяСтрока(ФизлицоОбъект.Наименование) Тогда
			// заполним наименование
			ФизлицоОбъект.Наименование = ПолучитьНаименованиеФизлица();
		КонецЕсли;
		
		//попытка записать новое физлицо
		Попытка
			ФизлицоОбъект.Записать();
			Физлицо = ФизлицоОбъект.Ссылка;
		Исключение
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат Ложь;
		КонецПопытки;

	КонецЕсли; 
	
	// запишем наборы записей
	Попытка
		
		Если Не ВыборФизлица Тогда
			// запишем ФИО физлица, для вновь созданного физлица
			НаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
			ДатаЗаписиФИО = ?(ЗначениеЗаполнено(ФизлицоОбъект.ДатаРождения),ФизлицоОбъект.ДатаРождения,'19800101');
			ЗаписьНабора = НаборЗаписейФИО.Добавить();
			ЗаписьНабора.Период		= ДатаЗаписиФИО;
			ЗаписьНабора.Фамилия	= Фамилия;
			ЗаписьНабора.Имя		= Имя;
			ЗаписьНабора.Отчество	= Отчество;
			ЗаписьНабора.Физлицо 	= Физлицо;
			
			НаборЗаписейФИО.Отбор.Физлицо.Использование	= Истина;
			НаборЗаписейФИО.Отбор.Физлицо.Значение 		= Физлицо;
			НаборЗаписейФИО.Отбор.Период.Использование	= Истина;
			НаборЗаписейФИО.Отбор.Период.Значение		= ДатаЗаписиФИО;
			
			НаборЗаписейФИО.Записать(Истина);
			
		КонецЕсли;
		
		Если мНаборЗаписейГражданство.Количество() > 0 И ЗначениеЗаполнено(мНаборЗаписейГражданство[0].Период) Тогда
			
			мНаборЗаписейГражданство[0].Физлицо = ФизлицоОбъект.Ссылка;
			мНаборЗаписейГражданство.Отбор.Физлицо.Использование	= Истина;
			мНаборЗаписейГражданство.Отбор.Физлицо.Значение			= мНаборЗаписейГражданство[0].Физлицо;
			мНаборЗаписейГражданство.Отбор.Период.Использование		= Истина;
			мНаборЗаписейГражданство.Отбор.Период.Значение			= мНаборЗаписейГражданство[0].Период;
			мНаборЗаписейГражданство.Записать(Истина);
			
		КонецЕсли;
		
		ЗаполнитьНаборыПоФизлицу();
		
		Если мНаборЗаписейИнвалидность.Количество() > 0 И ЗначениеЗаполнено(мНаборЗаписейИнвалидность[0].Период) Тогда
			
			мНаборЗаписейИнвалидность[0].Физлицо = ФизлицоОбъект.Ссылка;
			мНаборЗаписейИнвалидность.Отбор.Физлицо.Использование	= Истина;
			мНаборЗаписейИнвалидность.Отбор.Физлицо.Значение		= мНаборЗаписейИнвалидность[0].Физлицо;
			мНаборЗаписейИнвалидность.Отбор.Период.Использование	= Истина;
			мНаборЗаписейИнвалидность.Отбор.Период.Значение			= мНаборЗаписейИнвалидность[0].Период;
			мНаборЗаписейИнвалидность.Записать(Истина);
			
		КонецЕсли;
		Если мНаборЗаписейНаличиеГарантий.Количество() > 0 И ЗначениеЗаполнено(мНаборЗаписейНаличиеГарантий[0].Период) Тогда
			
			мНаборЗаписейНаличиеГарантий[0].Физлицо = ФизлицоОбъект.Ссылка;
			мНаборЗаписейНаличиеГарантий.Отбор.Физлицо.Использование	= Истина;
			мНаборЗаписейНаличиеГарантий.Отбор.Физлицо.Значение		= мНаборЗаписейНаличиеГарантий[0].Физлицо;
			мНаборЗаписейИнвалидность.Отбор.Период.Использование	= Истина;
			мНаборЗаписейНаличиеГарантий.Отбор.Период.Значение			= мНаборЗаписейНаличиеГарантий[0].Период;
			мНаборЗаписейНаличиеГарантий.Записать(Истина);
			
		КонецЕсли;

		
	Исключение
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
		Если ТранзакцияАктивна() Тогда
            ОтменитьТранзакцию();
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	// запишем сотрудника
	Если СоздатьДокумент Тогда
		Если мЭтоТрудовойДоговор Тогда
			ТекущееПодразделениеОрганизации  = ПодразделениеОрганизации;
			ТекущаяДолжностьОрганизации      = Должность;
			ДатаПриемаНаРаботу               = ДатаНачала;
			ДатаУвольнения               	 = ДатаОкончания;
		ИначеЕсли мЭтоСотрудникБезДоговора Тогда
			ТекущееПодразделениеКомпании = ПодразделениеУпр;
			ТекущаяДолжностьКомпании 	 = ДолжностьУпр;
			ДатаПриемаНаРаботуВКомпанию  = ДатаПриемаУпр;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
		ГруппаВзносов = Справочники.ГруппыВзносовВФонды.Договорники;
	Иначе	

		Если мНаборЗаписейИнвалидность.Количество() = 0 Тогда
			Инвалид = Ложь;
		Иначе
			Инвалид = мНаборЗаписейИнвалидность[0].Инвалидность;
		КонецЕсли;
		
		Если мНаборЗаписейПенсионер.Количество() = 0 Тогда
			Пенсионер = Ложь;
		Иначе
			Пенсионер = мНаборЗаписейПенсионер[0].Пенсионер;
		КонецЕсли; 
		
		Если Инвалид и Пенсионер Тогда
			ГруппаВзносов = Справочники.ГруппыВзносовВФонды.ИнвалидыПенсионеры;
		ИначеЕсли Инвалид Тогда
			ГруппаВзносов = Справочники.ГруппыВзносовВФонды.Инвалиды;
		ИначеЕсли Пенсионер Тогда
			ГруппаВзносов = Справочники.ГруппыВзносовВФонды.Пенсионеры;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ГруппаВзносов) Тогда
			ГруппаВзносов = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ГруппаВзносов;
		КонецЕсли;	
	
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ГруппаВзносов) Тогда
		ГруппаВзносов = Справочники.ГруппыВзносовВФонды.ОсновнойСостав;	
	КонецЕсли;


    Попытка
		СправочникОбъект.ВидДоговора = ВидДоговора;
		ЗаписатьВФорме();
	Исключение
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
        Если ТранзакцияАктивна() Тогда
            ОтменитьТранзакцию();
		КонецЕсли;
        Возврат Ложь;
    КонецПопытки;
    
    Если СоздатьДокумент Тогда
        
		// в зависимости от вида договора создадим нужный документ
		Если мЭтоТрудовойДоговор Тогда 
			ДокументОбъект = СоздатьПриказОПриемеНаРаботу();
		ИначеЕсли мЭтоСотрудникБезДоговора Тогда
			ДокументОбъект = СоздатьПриказОПриемеНаРаботуВКомпанию();
		Иначе
			ДокументОбъект = СоздатьДоговорПодряда();
		КонецЕсли;
		
		// записываем документ без проведения
        Попытка
            ДокументОбъект.Записать(); 
        Исключение
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
            Если ТранзакцияАктивна() Тогда
                ОтменитьТранзакцию();
            КонецЕсли;
            Возврат Ложь;
        КонецПопытки;
		
		// записываем документ с проведением
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение); 
		Исключение
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат Ложь;
		КонецПопытки;    
        
    КонецЕсли;
    
    Если БольшеНеИспользоватьПомощника Тогда
        // сбросим в настройках пользователя использование помощника
        УправлениеПользователями.УстановитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИспользоватьПомощникаПриемаНаРаботу", Ложь);
    КонецЕсли;
	
	
    ЗафиксироватьТранзакцию();
    
    Возврат Истина;
    
КонецФункции // СохранитьДанные()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНОВ ФОРМЫ 

Процедура ТрудовойДоговорПриИзменении(Элемент)
	// изменили вид договора
	ОбработатьИзменениеВидаДоговора();
	ОбновитьНадписиХодаВыполненияИЗаголовки();
	
КонецПроцедуры


Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизации();
	ПодобратьПостфиксНаименования();
	
КонецПроцедуры

Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//установим список выбора головных организаций
	СписокВыбора = ПроцедурыУправленияПерсоналом.ПолучитьСписокГоловныхОрганизаций();
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено и Элемент.Значение <> ЭлементСписка.Значение Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		ОбработатьИзменениеОрганизации();
		ПодобратьПостфиксНаименования();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпингаОрганизации(), Тип("СправочникСсылка.Организации"));
	
КонецПроцедуры

Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпингаОрганизации(), ЭтаФорма, Тип("СправочникСсылка.Организации"), мОбработкаПодбораПоСтрокеОрганизация, мТекстПодбораПоСтрокеОрганизация, мПоследнееЗначениеЭлементаПодбораПоСтрокеОрганизация, Ложь);
	
КонецПроцедуры

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
    ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию();
	ОбработатьИзменениеВидаРасчета();
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода Подразделения
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации("ПодразделениеОрганизации", Организация, Должность);
	
	Элемент.ВысотаСпискаВыбора = Мин(10, СписокВыбора.Количество());
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	
		Если ГрафикРаботы.Пустая() Тогда
			ДанныеШР = ПроцедурыУправленияПерсоналом.СведенияОПозицииШтатногоРасписания(ДатаДоговора, ПодразделениеОрганизации, Должность);
			Если ДанныеШР.Количество() > 0 Тогда
				ГрафикРаботы = ДанныеШР[0].ГрафикРаботы;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;

	
КонецПроцедуры

Процедура ДолжностьПриИзменении(Элемент)
	ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию();
	ОбработатьИзменениеВидаРасчета();
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода Должности
Процедура ДолжностьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации("Должность", Организация, ПодразделениеОрганизации);
	
	Элемент.ВысотаСпискаВыбора = Мин(10, СписокВыбора.Количество());
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
			ДанныеШР = ПроцедурыУправленияПерсоналом.СведенияОПозицииШтатногоРасписания(ДатаДоговора, ПодразделениеОрганизации, Должность);
			Если ДанныеШР.Количество() > 0 Тогда
				ГрафикРаботы = ДанныеШР[0].ГрафикРаботы;
			КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокВидовВремени = Новый СписокЗначений;
	СписокВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
	СписокВидовВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора(,Элемент,Ссылка);
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();

КонецПроцедуры

Процедура ОбработатьИзменениеВидаРасчета()
	
	ФормаПомощникУстановитьВидимостьЭУПоИспользованиюТарифногоРазряда();
	
	СведенияОВидеРасчета = РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчетаОснНачислений, ВидРасчета);
	ЭлементыФормы.ТарифнаяСтавка.Формат = "ЧДЦ=" + СведенияОВидеРасчета.Показатель1Точность;
	
КонецПроцедуры


Процедура ВидРасчетаПриИзменении(Элемент)
	
	ОбработатьИзменениеВидаРасчета();

КонецПроцедуры

Процедура ВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры 

Процедура ВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Надбавка
Процедура НадбавкиНадбавкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мФормаВыбораВидаНадбавки = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаТрудовойДоговор");

	мФормаВыбораВидаНадбавки.Отбор.СпособРасчета.ВидСравнения	= ВидСравнения.ВСписке;
	мФормаВыбораВидаНадбавки.Отбор.СпособРасчета.Значение		= мСпособыРасчетов;
	мФормаВыбораВидаНадбавки.Отбор.СпособРасчета.Использование	= Истина;
	
	мФормаВыбораВидаНадбавки.Открыть();
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура ПерсональныеНадбавкиНадбавкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Элемент.Значение = ВыбранноеЗначение;
	
КонецПроцедуры

Процедура ПерсональныеНадбавкиНадбавкаПриИзменении(Элемент)
	
	// для ночных и вчерних определим "процент отплаты"
	Если Элемент.Значение = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы Тогда
		ЭлементыФормы.ПерсональныеНадбавки.ТекущиеДанные.Показатель2 = 100*РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).КоэффициентВечерних;
	ИначеЕсли Элемент.Значение = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы Тогда
		ЭлементыФормы.ПерсональныеНадбавки.ТекущиеДанные.Показатель2 = 100*РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).КоэффициентНочных;
	КонецЕсли;

	
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" ТЧ
//
Процедура НадбавкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.Надбавка) Тогда
		Для СчПоказателей = 1 По 6 Цикл
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость		= Ложь;
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость					= Ложь;		
			ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].Видимость						= Ложь;
			ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость	= Ложь;	
			ОформлениеСтроки.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость				= Ложь;
		КонецЦикла;
	Иначе
		РаботаСДиалогами.ПриВыводеСтрокиПлановыхНачисленийИУдержаний(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчетаОснНачислений);
	КонецЕсли;	

КонецПроцедуры //ПерсональныеНадбавкиПриВыводеСтроки

Процедура ФамилияПриИзменении(Элемент)
	
	ФизлицоОбъект.Наименование = ПолучитьНаименованиеФизлица();
	Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
	ПроверитьФизлицо();
	
КонецПроцедуры

Процедура ИмяПриИзменении(Элемент)
	
	ФизлицоОбъект.Наименование = ПолучитьНаименованиеФизлица();
	Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
	ПроверитьФизлицо();
	
КонецПроцедуры

Процедура ОтчествоПриИзменении(Элемент)
	
	ФизлицоОбъект.Наименование = ПолучитьНаименованиеФизлица();
	Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
	Если ЗначениеЗаполнено(Отчество) И Не ЗначениеЗаполнено(ФизлицоОбъект.Пол) Тогда
		ФизлицоОбъект.Пол = ПроцедурыУправленияПерсоналом.ПолучитьПол(Отчество);
	КонецЕсли;
	
	ПроверитьФизлицо();
	
КонецПроцедуры

Процедура ОтчествоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроверитьФизлицо();
	
КонецПроцедуры

Процедура ОтчествоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроверитьФизлицо();	
	
КонецПроцедуры

Процедура ДатаРожденияПриИзменении(Элемент)
	ПроверитьФизлицо();
КонецПроцедуры

Процедура НадписьГражданствоНажатие(Элемент)
	
	ФормаВвода	= Справочники.ФизическиеЛица.ПолучитьФорму("ФормаЗаписиГражданство", ЭтаФорма);
	ФормаВвода.Физлицо = ФизлицоОбъект.Ссылка;
	ФормаВвода.НаборЗаписей = мНаборЗаписейГражданство;
	ФормаВвода.Открыть()
	
КонецПроцедуры

Процедура НадписьИнвалидностьНажатие(Элемент)
	
	Попытка
		ФизлицоОбъект.Записать();
		Физлицо = ФизлицоОбъект.Ссылка;
	Исключение
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
		Возврат;
	КонецПопытки;

	
	ФормаРегистра = РегистрыСведений.СведенияОбИнвалидностиФизлиц.ПолучитьФорму("ФормаЗаписиДополнительная", ЭтаФорма);
	ФормаРегистра.Физлицо  = ФизлицоОбъект.Ссылка;
	ФормаРегистра.Период = '19000101';
	
	ФормаРегистра.Открыть();

	
КонецПроцедуры

Процедура ПостфиксНаименованияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВозможныхЗначений = Новый СписокЗначений;
		
	Если мЭтоТрудовойДоговор Тогда
		Если ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
			СписокВозможныхЗначений.Добавить("(вн. совм.)");
		ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда	
			СписокВозможныхЗначений.Добавить("(осн.)");
		Иначе
			СписокВозможныхЗначений.Добавить("(совм.)");			
		КонецЕсли; 
	ИначеЕсли мЭтоДоговорник Тогда	
		Если ВидДоговораГПХ = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
			СписокВозможныхЗначений.Добавить("(дог. подр.)");
			СписокВозможныхЗначений.Добавить("(дг.)");
		ИначеЕсли ВидДоговораГПХ = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
			СписокВозможныхЗначений.Добавить("(дог. авт.)");
			СписокВозможныхЗначений.Добавить("(дг.)");
		КонецЕсли;
	КонецЕсли;
	
	Элемент.СписокВыбора = СписокВозможныхЗначений;

КонецПроцедуры

Процедура ПостфиксНаименованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПостфиксНаименования = " " + ВыбранноеЗначение;
	Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);

КонецПроцедуры

Процедура ПостфиксНаименованияПриИзменении(Элемент)
	
	ПостфиксНаименования = " " + СОКРЛП(ПостфиксНаименования);
	Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
	
КонецПроцедуры

Процедура ОбновитьНадписиХодаВыполненияИЗаголовки()

	// уточним надписи в зависимости от вида договора
	Если мЭтоТрудовойДоговор или мЭтоСотрудникБезДоговора Тогда
		
		ЭлементыФормы.НадписьМестоРаботы.Заголовок = НСтр("ru='Место работы';uk='Місце роботи'");
        
        ЭлементыФормы.НадписьХод2.Заголовок = НСтр("ru='Место работы';uk='Місце роботи'");
		ЭлементыФормы.НадписьХод3.Заголовок = НСтр("ru='Оплата труда';uk='Оплата праці'");
        ЭлементыФормы.НадписьХод4.Заголовок = НСтр("ru='Доп. информация';uk='Дод. інформація'");
        ЭлементыФормы.НадписьХод5.Заголовок = НСтр("ru='Завершение работы';uk='Завершення роботи'");
        
	ИначеЕсли мЭтоДоговорник Тогда		
                            
		ЭлементыФормы.НадписьМестоРаботы.Заголовок = НСтр("ru='Вид договора';uk='Вид договору'");
        
        ЭлементыФормы.НадписьХод2.Заголовок = НСтр("ru='Вид договора';uk='Вид договору'");
        ЭлементыФормы.НадписьХод3.Заголовок = НСтр("ru='Доп. информация';uk='Дод. інформація'");
        ЭлементыФормы.НадписьХод4.Заголовок = НСтр("ru='Завершение работы';uk='Завершення роботи'");
        ЭлементыФормы.НадписьХод5.Заголовок = "";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьШрифтНадписиХодаВыполнения()

	ЖирныйШрифт  = Новый Шрифт(, 8, Истина, Ложь, Ложь, Ложь);
	ОбычныйШрифт = Новый Шрифт(, 8, Ложь, Ложь, Ложь, Ложь);
    
	Если мЭтоТрудовойДоговор Тогда
		
		ЭлементыФормы.НадписьХод1.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные, ЖирныйШрифт, ОбычныйШрифт);
		ЭлементыФормы.НадписьХод2.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема, ЖирныйШрифт, ОбычныйШрифт);
		ЭлементыФормы.НадписьХод3.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ОплатаТруда, ЖирныйШрифт, ОбычныйШрифт);
		ЭлементыФормы.НадписьХод4.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ДополнительнаяИнформация, ЖирныйШрифт, ОбычныйШрифт);
		ЭлементыФормы.НадписьХод5.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово, ЖирныйШрифт, ОбычныйШрифт);
		
	ИначеЕсли мЭтоДоговорник Тогда
		
		ЭлементыФормы.НадписьХод1.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные, ЖирныйШрифт, ОбычныйШрифт);
		ЭлементыФормы.НадписьХод2.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема, ЖирныйШрифт, ОбычныйШрифт);
		ЭлементыФормы.НадписьХод3.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ДополнительнаяИнформация, ЖирныйШрифт, ОбычныйШрифт);
		ЭлементыФормы.НадписьХод4.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово, ЖирныйШрифт, ОбычныйШрифт);
		
	КонецЕсли;
    
КонецПроцедуры

Процедура СоздатьПриказОПриемеПриИзменении(Элемент)
	
	ОбработатьИзменениеФлагаСоздатьДокумент();
	
КонецПроцедуры

Процедура СоздатьДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеФлагаСоздатьДокумент();
	
КонецПроцедуры

Процедура ВидДоговораГПХПриИзменении(Элемент)
	
	ЗаполнитьДанныеДоговораГПХ();
	
КонецПроцедуры

Процедура ВидРасчетаДоговорГПХНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	//Предложим для выбора список расчетов, имеющих способ расчета, соответствующий указанной форме оплаты
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаДоговорНаВыполнениеРаботСФизЛицом");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	Если ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.ПоСдельномуНаряду Тогда
		ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок;
	Иначе
	    ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой;
	КонецЕсли;	
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

Процедура ВидРасчетаДоговорГПХОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Если ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.ПоСдельномуНаряду Тогда
		Способ = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок;
	Иначе
	    Способ = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой;
	КонецЕсли;	
	
	Значение = ПроцедурыПоискаПоСтроке.ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(Текст, "ОсновныеНачисленияОрганизаций", "СпособРасчета = &СпособРасчета", Новый Структура("СпособРасчета", Способ));
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура ВидРасчетаДоговорГПХОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Элемент.Значение = ВыбранноеЗначение;
	
КонецПроцедуры

Процедура ДатаДоговораПриИзменении(Элемент)
	
	ПроверитьНомерТрудовогоДоговора(мДатаДоговора);
	мДатаДоговора = ДатаДоговора;
	
КонецПроцедуры

Процедура НачисленияУпрПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		РаботаСДиалогами.ПриВыводеСтрокиПлановыхНачисленийИУдержаний(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчетаУпр, Элемент.Данные = "НачисленияУпр");
	КонецЦикла;
	
КонецПроцедуры

Процедура НачисленияУпрВидРасчетаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриИзмененииВидаРасчета("Начисления",Элемент.Значение, ЭлементыФормы, мСведенияОВидахРасчетаУпр, мВалютаУправленческогоУчета);
	
КонецПроцедуры

Процедура НачисленияУпрВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ФормаВыбораВидаРасчета = ПланыВидовРасчета.УправленческиеНачисления.ПолучитьФормуВыбора("ФормаВыбора", ЭлементыФормы.НачисленияУпр, "дляДокументаПриемНаРаботу");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = мСписокНедоступныхРасчетов;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

Процедура НачисленияУпрВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыПоискаПоСтроке.ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(Текст, "УправленческиеНачисления", "Не (Ссылка В(&СпВидовРасчета))", Новый Структура("СпВидовРасчета", мСписокНедоступныхРасчетов), СтандартнаяОбработка);	
	
КонецПроцедуры

Процедура НачисленияУпрОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления") Тогда
		Элемент.ТекущаяСтрока.ВидРасчета = ВыбранноеЗначение;
		РаботаСДиалогами.ПриИзмененииВидаРасчета("НачисленияУпр",ВыбранноеЗначение, ЭлементыФормы, мСведенияОВидахРасчетаУпр, мВалютаУправленческогоУчета);		
	КонецЕсли
	
КонецПроцедуры

Процедура УдержанияУпрВидРасчетаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриИзмененииВидаРасчета("УдержанияУпр",Элемент.Значение, ЭлементыФормы, мСведенияОВидахРасчетаУпр, мВалютаУправленческогоУчета);		
	
КонецПроцедуры

Процедура УдержанияУпрВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыПоискаПоСтроке.ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(Текст, "УправленческиеУдержания", "Не (Ссылка В(&СпВидовРасчета))", Новый Структура("СпВидовРасчета", мСписокНедоступныхРасчетов), СтандартнаяОбработка);
	
КонецПроцедуры

Процедура УдержанияУпрПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		РаботаСДиалогами.ПриВыводеСтрокиПлановыхНачисленийИУдержаний(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчетаУпр, Элемент.Данные = "Начисления");
	КонецЦикла;

КонецПроцедуры

Процедура ЗанимаемыхСтавокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если Направление = 1 Тогда // увеличиваем значение
		ЗанимаемыхСтавок = ЗанимаемыхСтавок + 0.25
	Иначе // = -1 - уменьшаем значение
		ЗанимаемыхСтавок = ЗанимаемыхСтавок - 0.25
	КонецЕсли;
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура ОсновноеНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
		ФормаВыбора = Справочники.СотрудникиОрганизаций.ПолучитьФормуВыбора("ФормаВыбора",Элемент);
		ФормаВыбора.Отбор.ВидЗанятости.Использование = Истина;
		ФормаВыбора.Отбор.ВидЗанятости.ВидСравнения = ВидСравнения.НеРавно;
		ФормаВыбора.Отбор.ВидЗанятости.Значение = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;
		
		ФормаВыбора.Отбор.Актуальность.Использование = Истина;
		ФормаВыбора.Отбор.Актуальность.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.Отбор.Актуальность.Значение = Истина;
		
		ФормаВыбора.Отбор.Организация.Использование = Истина;
		ФормаВыбора.Отбор.Организация.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.Отбор.Организация.Значение = Организация;
		
		ФормаВыбора.Отбор.Физлицо.Использование = Истина;
		ФормаВыбора.Отбор.Физлицо.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.Отбор.Физлицо.Значение = ФизЛицоОбъект.Ссылка;
		
		ФормаВыбора.Открыть();
		
		СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
	

Процедура ОсновноеНазначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Элемент.Значение = ВыбранноеЗначение;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	СотрудникОбъект = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
	ФизлицоОбъект   = Справочники.ФизическиеЛица.СоздатьЭлемент();
	
	// роль расчетчика реглучета
	мДоступнаРольРасчетчикаРегл = РольДоступна("РасчетчикРегламентированнойЗарплаты");
	мДоступнаРольКадровикаРегл = РольДоступна("КадровикРегламентированныхДанных");
	
	мДоступныРолиУпрУчета = РольДоступна("КадровикУправленческихДанных") или РольДоступна("РасчетчикУправленческойЗарплаты");
							
	мПолныеПрава = РольДоступна("ПолныеПрава");						
		
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	мВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	Если Не ЗначениеЗаполнено(ВидДоговора) Тогда
		ВидДоговора  = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;
	КонецЕсли;
	
	мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерии);
	мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерииСдельно);

	
	// заполним, но если реквизиты будут не нужны очистим их перед записью сотрудника
	ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы;
	ЗанимаемыхСтавок = 1;
	
	// предустановим вид договора ГПХ на форме помощника
	ВидДоговораГПХ = Перечисления.ВидыДоговоровСФизЛицами.Подряда;
	
	Если ВидДоговора <> Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
		
		Если Не ЗначениеЗаполнено(Организация)  Тогда
			Организация  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		КонецЕсли;

	КонецЕсли;
	
	ВалютаТарифнойСтавки =  мВалютаРегламентированногоУчета;
    
    ОбработатьИзменениеВидаДоговора();
	// заполним дату договора сегодняшней датой
	ДатаДоговора = ОбщегоНазначения.ПолучитьРабочуюДату();
	мДатаДоговора = ДатаДоговора; //для правильной автонумерации номера трудового договора
	
	мКартинкаФизлицо = БиблиотекаКартинок["ФизическиеЛица32"];
	мКартинкаСотрудник = БиблиотекаКартинок["Сотрудники32"];
	мКартинкаПриказ = БиблиотекаКартинок["ЖурналКоричневый32"];
	мКартинкаДоговораГПХ = Новый Картинка;
	
	мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные;

	мСписокПредопределенныхВР = ПроведениеРасчетов.ПредопределенныеНачисленияОрганизации();

	мНаборЗаписейГражданство	= РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
	мНаборЗаписейИнвалидность	= РегистрыСведений.СведенияОбИнвалидностиФизлиц.СоздатьНаборЗаписей();
    мНаборЗаписейПенсионер   	= РегистрыСведений.СведенияОПенсионерах.СоздатьНаборЗаписей();
	мНаборЗаписейНаличиеГарантий = РегистрыСведений.СведенияОЛицахСДополнительнымиГарантиями.СоздатьНаборЗаписей(); 
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	// установим видимость переключателя в зависимости от того, что передали в форму при открытии
	РежимСверткиЭУ = ?(СоздатьДокумент, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	ЭлементыФормы.ПанельСоздатьПриказ.Свертка = РежимСверткиЭУ;
	ЭлементыФормы.ПанельСоздатьПриказУправленческий.Свертка = РежимСверткиЭУ;
	ЭлементыФормы.СоздатьДоговор.Видимость = СоздатьДокумент;
	ЭлементыФормы.ПанельУсловияДоговораГПХ.Видимость = СоздатьДокумент;
	ЭлементыФормы.ПанельУсловияПриемаУпр.Видимость = СоздатьДокумент;
	
	//*ЭлементыФормы.БезДоговора.Видимость = глЗначениеПеременной("глИспользоватьУправленческийУчет") и (мПолныеПрава или мДоступныРолиУпрУчета или ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
	
	мНеСоздаватьДокумент = Не СоздатьДокумент;
	ОбработатьИзменениеФлагаСоздатьДокумент();
	
	ЭлементыФормы.КоманднаяПанельДополнительныеДействия.Кнопки.ШагНазад.Доступность = Ложь;
	
	мМассивЭУ = Новый Массив();
	Для Сч = 1 По 6 Цикл
		мМассивЭУ.Добавить(ЭлементыФормы.ПерсональныеНадбавки.Колонки["Валюта"+Сч]);
	КонецЦикла;
	мМассивЭУ.Добавить(ЭлементыФормы.НадписьВалютаТарифнойСтавки);
	мМассивЭУ.Добавить(ЭлементыФормы.ВалютаТарифнойСтавки);
	мМассивЭУ.Добавить(ЭлементыФормы.ВалютаДоговораГПХ);
	мМассивЭУ.Добавить(ЭлементыФормы.НадписьВалютаДоговораГПХ);
	мМассивЭУ.Добавить(ЭлементыФормы.ВнутреннееСовместительство);
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	ТекущийЭлемент = ЭлементыФормы.Фамилия;
	
    ОбработатьИзменениеОрганизации();
	
	ОбновитьНадписиХодаВыполненияИЗаголовки();
	ЭлементыФормы.НадписьХод1.Шрифт = Новый Шрифт(, 8, Истина, Ложь, Ложь, Ложь);
    
    Модифицированность = Ложь;
    
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
	
	Если Модифицированность Тогда
		Ответ = Вопрос(НСтр("ru='При закрытии формы все введенные данные будут потеряны. Закрыть форму?';uk='При закритті форми всі введені дані будуть втрачені. Закрити форму?'"), РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;	
	
КонецПроцедуры


Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытаФормаВыбораФизлиц" Тогда
		
		Если ЗначениеЗаполнено(Параметр) Тогда
			Физлицо = Параметр;
			ФизлицоОбъект = Параметр.ПолучитьОбъект();
			ВыборФизлица = Истина;
			
			ФИО = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ТекущаяДата(),Новый Структура("ФизЛицо", Физлицо));
			Если ФИО.Количество() > 0 Тогда
				Фамилия = ФИО[0].Фамилия;
				Имя = ФИО[0].Имя;
				Отчество = ФИО[0].Отчество;
			КонецЕсли;	
			
		КонецЕсли;
		
		ФизлицоОбработано = Истина;
		ОбработатьВыборФизлица();
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ОТОБРАЖЕНИЯ ДАННЫХ НА СТРАНИЦАХ

// процедура вызывается всегда после смены страницы
// 
Процедура ОбработатьОтображениеНовойСтраницы()

	Если мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема Тогда	
			
		Если ПустаяСтрока(Код) Тогда
			// если табельный номер еще не присвоен, то получим очередной
			Код = ПолучитьОчереднойТабельныйНомерПомощник();
		КонецЕсли;
		
		Если ПустаяСтрока(Наименование) Тогда
			Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
		КонецЕсли;
		
		Если мЭтоДоговорник Тогда	
			
			ЭлементыФормы.ПанельУсловияПриема.ТекущаяСтраница = ЭлементыФормы.ПанельУсловияПриема.Страницы.ДоговорПодряда;
			ЭлементыФормы.НадписьМестоРаботы.Заголовок = НСтр("ru='Вид договора';uk='Вид договору'");
			ТекущийЭлемент = ЭлементыФормы.ВидДоговораГПХ;
			
			ЗаполнитьДанныеДоговораГПХ();
			
		ИначеЕсли мЭтоТрудовойДоговор Тогда
			
			ЭлементыФормы.ПанельУсловияПриема.ТекущаяСтраница = ЭлементыФормы.ПанельУсловияПриема.Страницы.ТрудовойДоговор;
			
			ТекущийЭлемент = ЭлементыФормы.ПодразделениеОрганизации;
			
			ЗаполнитьДанныеТрудовогоДоговора();
			
		ИначеЕсли мЭтоСотрудникБезДоговора Тогда
			
			ЭлементыФормы.ПанельУсловияПриема.ТекущаяСтраница = ЭлементыФормы.ПанельУсловияПриема.Страницы.ДоговорУправленческий;
			Если Не ЗначениеЗаполнено(ЗанимаемыхСтавокУпр) Тогда
				ЗанимаемыхСтавокУпр = 1;
			КонецЕсли;
			
		КонецЕсли;	
		
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ОплатаТруда Тогда
		
		Если мЭтоТрудовойДоговор Тогда
			ЭлементыФормы.ПанельОплатаТруда.ТекущаяСтраница = ЭлементыФормы.ПанельОплатаТруда.Страницы.ТрудовойДоговор;
		ИначеЕсли мЭтоСотрудникБезДоговора Тогда  
			ЭлементыФормы.ПанельОплатаТруда.ТекущаяСтраница = ЭлементыФормы.ПанельОплатаТруда.Страницы.ДоговорУправленческий;
		КонецЕсли;	
		
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ДополнительнаяИнформация Тогда	
		
			
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово Тогда	
		
		ЭлементыФормы.НадписьИнформация1.Заголовок = "";
		ЭлементыФормы.НадписьИнформация2.Заголовок = "";
		ЭлементыФормы.НадписьИнформация3.Заголовок = "";
		ЭлементыФормы.НадписьИнформация4.Заголовок = "";
		ПустаяКартинка = Новый Картинка;
		ЭлементыФормы.НадписьИнформация1.Картинка = ПустаяКартинка;
		ЭлементыФормы.НадписьИнформация2.Картинка = ПустаяКартинка;
		ЭлементыФормы.НадписьИнформация3.Картинка = ПустаяКартинка;
		ЭлементыФормы.НадписьИнформация4.Картинка = ПустаяКартинка;
		
		СписокСообщений = Новый СписокЗначений;
		Если НЕ ВыборФизлица Тогда
			СписокСообщений.Добавить(мКартинкаФизлицо, НСтр("ru=' личные данные '") + ФизлицоОбъект.Наименование);
		КонецЕсли;
		СписокСообщений.Добавить(мКартинкаСотрудник, НСтр("ru=' запись о сотруднике'"));
		Если СоздатьДокумент Тогда
			Если мЭтоДоговорник Тогда
				СписокСообщений.Добавить(мКартинкаДоговораГПХ, НСтр("ru=' договора на выполнение работ'"));
			Иначе
				СписокСообщений.Добавить(мКартинкаПриказ, НСтр("ru=' приказ о приеме на работу'"));	
			КонецЕсли;	
		КонецЕсли;
		
		Для Сч = 0 По СписокСообщений.Количество() - 1 Цикл
			СтрокаСообщения = СписокСообщений.Получить(Сч).Представление;
			Картинка = СписокСообщений.Получить(Сч).Значение;
			Если Сч = 0 Тогда
				ЭлементыФормы.НадписьИнформация1.Заголовок = СтрокаСообщения;
				ЭлементыФормы.НадписьИнформация1.Картинка = Картинка;
			ИначеЕсли Сч = 1 Тогда
				ЭлементыФормы.НадписьИнформация2.Заголовок = СтрокаСообщения;
				ЭлементыФормы.НадписьИнформация2.Картинка = Картинка;
			ИначеЕсли Сч = 2 Тогда
				ЭлементыФормы.НадписьИнформация3.Заголовок = СтрокаСообщения;
				ЭлементыФормы.НадписьИнформация3.Картинка = Картинка;
			ИначеЕсли Сч = 3 Тогда	
				ЭлементыФормы.НадписьИнформация4.Заголовок = СтрокаСообщения;
				ЭлементыФормы.НадписьИнформация4.Картинка = Картинка;
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;
	
	ОбновитьШрифтНадписиХодаВыполнения();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ

Процедура ОсновныеДействияФормыШагВперед(Кнопка)
	
	ЗаписатьДанные = Ложь;
	
	// обработаем нажатие кнопки Шаг вперед
	Если мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные Тогда
		
		//проверим возможность перехода к следующему шагу
		СообщениеОбОшибке = "";
		Если Не ЗначениеЗаполнено(Фамилия) Тогда
			СообщениеОбОшибке = НСтр("ru='Не указана Фамилия';uk='Не вказано Прізвище'") + Символы.ПС;	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Имя) Тогда
			СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru='Не указано Имя';uk=""Не вказано Ім'я""") + Символы.ПС;	
		КонецЕсли;
		
		Если Не мЭтоСотрудникБезДоговора и  Не ЗначениеЗаполнено(Организация) Тогда
			СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru='Не указана организация';uk='Не зазначена організація'") + Символы.ПС;	
		КонецЕсли;
		
		Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
			Предупреждение(СообщениеОбОшибке);
			Возврат;	
		КонецЕсли;	
		
		// при переходе со страницы ПерсональныеДанные проверим физлицо на дубли
		// и установим режим ввода физлица
		Если Не ФизлицоОбработано Тогда
			ПроверитьФизлицо();
		КонецЕсли;
		
		// определим текущую страницу
		Если мЭтоСотрудникБезДоговора Тогда
			Если ЭлементыФормы.ПанельСоздатьПриказУправленческий.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
				//при запуске помощника установлено не создавать документ
				мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово;
			Иначе
				мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема;
			КонецЕсли;
		Иначе	
			мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема;
		КонецЕсли;
		
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема Тогда
        
        //проверим возможность перехода к следующему шагу
        СообщениеОбОшибке = "";
		Если СоздатьДокумент Тогда
			Если мЭтоДоговорник Тогда
				Если Не ЗначениеЗаполнено(ДатаНачалаДоговораГПХ) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru='Не указана Дата начала договора';uk='Не вказана Дата початку договору'") + Символы.ПС;
				КонецЕсли;	
				Если Не ЗначениеЗаполнено(ДатаОкончанияДоговораГПХ) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru='Не указана Дата окончания договора';uk='Не вказана Дата закінчення договору'") + Символы.ПС;
				КонецЕсли;	
				Если Не ЗначениеЗаполнено(ВидРасчетаДоговорГПХ) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru='Не указано Начисление по договору';uk='Не вказано Нарахування по договору'") + Символы.ПС;
				КонецЕсли;	
				Если Не ЗначениеЗаполнено(ХарактерОплаты) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru='Не указана Оплата по договору';uk='Не зазначена Оплата по договору'") + Символы.ПС;
				КонецЕсли;	
				Если Не ЗначениеЗаполнено(СуммаЗаРаботу) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru='Не указана Стоимость';uk='Не зазначена Вартість'") + Символы.ПС;
				КонецЕсли;
			ИначеЕсли мЭтоТрудовойДоговор Тогда	
				Если Не ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru='Не указано Подразделение';uk='Не вказаний Підрозділ'") + Символы.ПС;
				КонецЕсли;	
				Если Не ЗначениеЗаполнено(Должность) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru='Не указана Должность';uk='Не зазначена Посада'") + Символы.ПС;
				КонецЕсли;    
				Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru='Не указана Дата приема на работу';uk='Не вказана Дата прийому на роботу'") + Символы.ПС;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ГрафикРаботы) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru='Не указан График работы';uk='Не зазначений Графік роботи'") + Символы.ПС;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ЗанимаемыхСтавок) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru='Не указано Количество занимаемых ставок';uk='Не зазначена Кількість ставок, що займаються'") + Символы.ПС;
				КонецЕсли;
			ИначеЕсли мЭтоСотрудникБезДоговора Тогда
				Если Не ЗначениеЗаполнено(ПодразделениеУпр) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru='Не указано Подразделение';uk='Не вказаний Підрозділ'") + Символы.ПС;
				КонецЕсли;	
				Если Не ЗначениеЗаполнено(ДолжностьУпр) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru='Не указана Должность';uk='Не зазначена Посада'") + Символы.ПС;
				КонецЕсли;    
				Если Не ЗначениеЗаполнено(ДатаПриемаУпр) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru='Не указана Дата приема на работу';uk='Не вказана Дата прийому на роботу'") + Символы.ПС;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ГрафикРаботыУпр) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru='Не указан График работы';uk='Не зазначений Графік роботи'") + Символы.ПС;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ЗанимаемыхСтавокУпр) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru='Не указано Количество занимаемых ставок';uk='Не зазначена Кількість ставок, що займаються'") + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
        
        Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
			Предупреждение(СообщениеОбОшибке);
			Возврат;	
		КонецЕсли;
		
		Если СоздатьДокумент  и мПроверкаШтатногоРасписания и мЭтоТрудовойДоговор Тогда
			// все поля заполнены, теперь проверим соответсвие должности и подразделения штатному расписанию
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(ШтатноеРасписание.КоличествоСтавок, 0) - ЕСТЬNULL(Вакансии.КоличествоСтавок, 0) КАК ОстатокСтавок
			|ИЗ
			|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(
			|			&ДатаПриема,
			|			ПодразделениеОрганизации = &ПодразделениеОрганизации
			|				И Должность = &Должность) КАК ШтатноеРасписание
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СУММА(ВЫБОР
			|					КОГДА Вакансии.ВидДвижения = &Приход
			|						ТОГДА Вакансии.КоличествоСтавок
			|					ИНАЧЕ -Вакансии.КоличествоСтавок
			|				КОНЕЦ) КАК КоличествоСтавок
			|		ИЗ
			|			РегистрНакопления.ЗанятыеШтатныеЕдиницыОрганизаций КАК Вакансии
			|		ГДЕ
			|			Вакансии.ПодразделениеОрганизации = &ПодразделениеОрганизации
			|			И Вакансии.Должность = &Должность
			|			И Вакансии.Период <= &ДатаПриема) КАК Вакансии
			|		ПО (ИСТИНА)";
			Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
			Запрос.УстановитьПараметр("Должность", Должность);
			Запрос.УстановитьПараметр("ДатаПриема", ДатаНачала);
			Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
			Выборка = Запрос.Выполнить().Выбрать();
			
			НетСвободныхСтавок = Истина;
			Если Выборка.Следующий() Тогда
				НетСвободныхСтавок = Не Выборка.ОстатокСтавок > 0;	
			КонецЕсли;	
			
			Если НетСвободныхСтавок Тогда
				
				ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
				ОбработкаКомментариев.УдалитьСообщения();
				
				Расшифровки = Новый Массив;
				// расшифровка сообщений представляет собой массив структур "Представление+Расшифровка"
				ОткрытьШтатноеРасписание = Новый Массив;
				ОткрытьШтатноеРасписание.Добавить("ПроцедурыУправленияПерсоналом.ОткрытьФормуШтатноеРасписаниеОрганизаций");
				ОткрытьШтатноеРасписание.Добавить(Новый Структура("Организация, ПодразделениеОрганизации, Должность", Организация, ПодразделениеОрганизации, Должность));
				Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", "штатном расписании", ОткрытьШтатноеРасписание));
				
				ОбщегоНазначения.ВывестиИнформациюОбОшибке(
				НСтр("ru='В %% не предусмотрены ставки для приема сотрудника ! Подразделение: ';uk='В %% не передбачені ставки для прийому співробітника ! Підрозділ: '") + 
				ПодразделениеОрганизации + 
				НСтр("ru=', должность: ';uk=', посада: '") + Должность,
				 , "Внимание!", Перечисления.ВидыСообщений.Ошибка, Расшифровки);
				
				ОбработкаКомментариев.ПоказатьСообщения();
				Возврат;
			КонецЕсли;		
			
		КонецЕсли;	
        
        // определим текущую страницу
		Если мЭтоДоговорник Тогда
			мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ДополнительнаяИнформация;
		ИначеЕсли мЭтоСотрудникБезДоговора и Не СоздатьДокумент Тогда
			мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово;
		Иначе
			мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ОплатаТруда;
		КонецЕсли;	
		
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ОплатаТруда Тогда
		
		мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ДополнительнаяИнформация;
		
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ДополнительнаяИнформация Тогда
		
		мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово;
		
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово Тогда
		
		ЗаписатьДанные = Истина;
		
	КонецЕсли;
	
	Если ЗаписатьДанные Тогда
        
        Если СохранитьДанные() Тогда
            Закрыть();
		Иначе
			ОбработкаКомментариев.ПоказатьСообщения();
			// попытка завершения работы оказалась не удачной, заполним реквизиты, которые очищали
			Если мЭтоДоговорник Тогда
				ПодразделениеОрганизации = мПодразделениеДоговора;
				ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда;
			КонецЕсли;
			
			Если СоздатьДокумент Тогда
				Если мЭтоТрудовойДоговор Тогда
					ТекущееПодразделениеОрганизации  = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
					ТекущаяДолжностьОрганизации      = Справочники.ДолжностиОрганизаций.ПустаяСсылка();
					ДатаПриемаНаРаботу               = "";
				ИначеЕсли мЭтоСотрудникБезДоговора Тогда
					ТекущееПодразделениеКомпании = Справочники.Подразделения.ПустаяСсылка();
					ТекущаяДолжностьКомпании 	 = Справочники.ДолжностиОрганизаций.ПустаяСсылка();
					ДатаПриемаНаРаботуВКомпанию  = "";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ОбработатьОтображениеНовойСтраницы();
		
		// установим нужную страницу
		ЭлементыФормы.ПанельДанные.ТекущаяСтраница = мТекущаяСтраница;
		
		ЭлементыФормы.КоманднаяПанельДополнительныеДействия.Кнопки.ШагНазад.Доступность = мТекущаяСтраница <> ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные;
		
		ТекстКнопкиШагВперед = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово, НСтр("ru='Готово';uk='Готово'"), НСтр("ru='Далее';uk='Далі'"));
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ШагВперед.Текст = ТекстКнопкиШагВперед;
		
		КартинкаКнопки = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово, БиблиотекаКартинок.РаботаПоЗаявкеЗавершена, БиблиотекаКартинок.КартинкаСтрелкаВперед);
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ШагВперед.Картинка = КартинкаКнопки;
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура ОсновныеДействияФормыШагНазад(Кнопка)
	
	Если мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово Тогда	
		
		Если мЭтоСотрудникБезДоговора Тогда
			Если ЭлементыФормы.ПанельСоздатьПриказУправленческий.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
				ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные;
			ИначеЕсли НЕ СоздатьДокумент Тогда
				ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема;
			Иначе
				ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ОплатаТруда;
			КонецЕсли;
		Иначе	
			ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ДополнительнаяИнформация;
		КонецЕсли;

	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ДополнительнаяИнформация Тогда
		
		Если мЭтоДоговорник Тогда
			ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема;
		ИначеЕсли мЭтоСотрудникБезДоговора Тогда
			Если ЭлементыФормы.ПанельСоздатьПриказУправленческий.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
				ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные;
			ИначеЕсли НЕ СоздатьДокумент Тогда
				ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема;
			Иначе
				ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ОплатаТруда;
			КонецЕсли;	
		Иначе
			ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ОплатаТруда;
		КонецЕсли;
		
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ОплатаТруда Тогда
		
		ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема;
		
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема Тогда
		
		ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные;
			
	КонецЕсли;
	
	мТекущаяСтраница = ЭлементыФормы.ПанельДанные.ТекущаяСтраница;
	
	ЭлементыФормы.КоманднаяПанельДополнительныеДействия.Кнопки.ШагНазад.Доступность = мТекущаяСтраница <> ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные;
	
	ТекстКнопкиШагВперед = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово, НСтр("ru='Готово';uk='Готово'"), НСтр("ru='Далее';uk='Далі'"));
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ШагВперед.Текст = ТекстКнопкиШагВперед;
	
	КартинкаКнопки = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово, БиблиотекаКартинок.РаботаПоЗаявкеЗавершена, БиблиотекаКартинок.КартинкаСтрелкаВперед);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ШагВперед.Картинка = КартинкаКнопки;
	
	ОбновитьШрифтНадписиХодаВыполнения();
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Если ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство 
		или ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
		ЭлементыФормы.НадписьОсновноеНазначение.Видимость = Истина;
		ЭлементыФормы.ОсновноеНазначение.Видимость = Истина;
	Иначе
		ЭлементыФормы.НадписьОсновноеНазначение.Видимость = Ложь;
		ЭлементыФормы.ОсновноеНазначение.Видимость = Ложь;
		Если ЗначениеЗаполнено(ОсновноеНазначение) Тогда
			ОсновноеНазначение = "";
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПринятНаНовоеРабочееМестоПриИзменении(Элемент) 
	
	Если ЭлементыФормы.ПринятНаНовоеРабочееМесто.Значение = Истина Тогда 
		ДанныеШР = ПроцедурыУправленияПерсоналом.СведенияОПозицииШтатногоРасписания(ДатаДоговора, ПодразделениеОрганизации, Должность);
		Если ДанныеШР.Количество() > 0 Тогда
			ЭлементыФормы.ДатаСозданияРабочегоМеста.Значение = ДанныеШР[0].Период;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ДатаСозданияРабочегоМеста.Значение = Дата('00010101');
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьНаличиеГарантийНажатие(Элемент) 
	
	Попытка
		ФизлицоОбъект.Записать();
		Физлицо = ФизлицоОбъект.Ссылка;
	Исключение
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
		Возврат;
	КонецПопытки;

	
	ФормаРегистра = РегистрыСведений.СведенияОЛицахСДополнительнымиГарантиями.ПолучитьФорму("ФормаЗаписиДополнительная", ЭтаФорма);
	ФормаРегистра.Физлицо  = ФизлицоОбъект.Ссылка;
	ФормаРегистра.Период = '19000101';
	
	ФормаРегистра.Открыть();

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
мСведенияОВидахРасчетаУпр = Новый Соответствие;
мСведенияОВидахРасчетаОснНачислений = Новый Соответствие;
мСпособыРасчетов = ПроведениеРасчетов.ПолучитьСписокВариантовНадбавок();

мСписокНедоступныхРасчетов = Новый СписокЗначений;
мОбработкаПодбораПоСтрокеОрганизация					= Ложь;
мТекстПодбораПоСтрокеОрганизация						= "";
мПоследнееЗначениеЭлементаПодбораПоСтрокеОрганизация	= Неопределено;

мОбработкаПодбораПоСтроке								= Ложь;
мТекстПодбораПоСтроке									= "";
мПоследнееЗначениеЭлементаПодбораПоСтроке				= Неопределено;

