
Перем мОбработкаПоискаПоСтрокеВидаКИ;
Перем мТекстПоискаПоСтрокеВидаКИ;
Перем мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ;

Перем мКнопкаРедактироватьКИВДиалоге;

// Хранит список видов настроек, для которых разрешен выбор группы
Перем мСписокНастроекВыбораГруппы;

Перем мСтароеИмяПользователя;

Перем мНаличиеПраваАдминистрирования;

Перем мЭтоНовыйЭлементСправочника;

Перем мОрганизация;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура обновляет информацию в таблице настроек
Процедура ЗаполнитьДерево()
	
	ЗначенияПоУмолчанию = Новый Соответствие;
	ЗначенияПоУмолчанию.Вставить(ПланыВидовХарактеристик.НастройкиПользователей.ЗапрашиватьПодтверждениеПриЗакрытии, Истина);
	
	ДеревоНастроек.Строки.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст="
	|Выбрать Родитель, Ссылка, ЭтоГруппа, ЗначениеНастроек.Значение Из ПланВидовХарактеристик.НастройкиПользователей КАК Настройки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|РегистрСведений.НастройкиПользователей КАК ЗначениеНастроек
	|ПО ЗначениеНастроек.Настройка=Настройки.Ссылка
	|И  ЗначениеНастроек.Пользователь=&Пользователь
	|ГДЕ не ПометкаУдаления
	|УПОРЯДОЧИТЬ По Настройки.ЭтоГруппа ИЕРАРХИЯ, Настройки.Наименование
	|";
	Запрос.УстановитьПараметр("Пользователь", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Родитель.Пустая() Тогда
			СтрокаГруппы = ДеревоНастроек.Строки.Найти(Выборка.Родитель, "Настройка", Истина);
			Если СтрокаГруппы=Неопределено Тогда
				СтрокаГруппы = ДеревоНастроек.Строки.Добавить();
				СтрокаГруппы.Настройка = Выборка.Родитель;
				СтрокаГруппы.ЭтоГруппа = Выборка.ЭтоГруппа;
			КонецЕсли;
		Иначе
			СтрокаГруппы = ДеревоНастроек;
		КонецЕсли;		
		
		СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
		СтрокаНастройки.Настройка = Выборка.Ссылка;
		
		Если ЭтоНовый() Тогда
			СтрокаНастройки.Значение = Выборка.Ссылка.ТипЗначения.ПривестиЗначение(ЗначенияПоУмолчанию[Выборка.Ссылка]);
		Иначе
			СтрокаНастройки.Значение = Выборка.Ссылка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
		КонецЕсли;
		
		СтрокаНастройки.ЭтоГруппа = Выборка.ЭтоГруппа;
		
		Если СтрокаНастройки.Настройка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
			мОрганизация = СтрокаНастройки.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет запись значений настроек в регистр сведений
Процедура ОбновитьНастройки()
	
	Набор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	Набор.Отбор.Пользователь.Использование = Истина;
	Набор.Отбор.Пользователь.Значение = Ссылка;
	ЗаполнитьНаборЗаписей(ДеревоНастроек.Строки, Набор);
	Набор.Записать();
	
КонецПроцедуры
   
// Процедура заполняет набор записей регистра сведений значениями настроек
Процедура ЗаполнитьНаборЗаписей(СтрокиДерева, НаборЗаписей)
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если Не СтрокаДерева.ЭтоГруппа Тогда
			
			Если СтрокаДерева.Настройка.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			Запись = НаборЗаписей.Добавить();
			Запись.Пользователь = Ссылка;
			Запись.Настройка = СтрокаДерева.Настройка;
			Запись.Значение = СтрокаДерева.Настройка.ТипЗначения.ПривестиЗначение(СтрокаДерева.Значение);
			ЕСли мЭтоНовыйЭлементСправочника И Запись.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойОтветственный 
				 И Запись.Значение.Пустая() Тогда
				 Запись.Значение = Ссылка;
			КонецЕсли;
				
		Иначе
			ЗаполнитьНаборЗаписей(СтрокаДерева.Строки, НаборЗаписей)
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьИсполняемыеФункции(Отказ)
	
	Если Отказ или НЕ ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.РолиИИсполнители.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Исполнитель.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.Исполнитель	= Ссылка;
        НаборЗаписей.Записать();
	КонецЕсли;	
		
	
	//Для Каждого ИсполняемаяФункция Из ИсполняемыеФункции Цикл
	//	Если Не ИсполняемаяФункция.Использование Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Запись = НаборЗаписей.Добавить();
	//	ЗаполнитьЗначенияСвойств(Запись, ИсполняемаяФункция);
	//	Запись.Исполнитель	= Ссылка;
	//КонецЦикла;
	//
	//ПервичныйНабор = НаборЗаписей.Выгрузить();
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ * ИЗ РегистрСведений.РолиИИсполнители ГДЕ Исполнитель = &Исполнитель";
	//Запрос.УстановитьПараметр("Исполнитель", Ссылка);
	//
	//Если Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(Запрос.Выполнить().Выгрузить(), НаборЗаписей.Выгрузить()) Тогда
	//	
	//	Попытка
	//		НаборЗаписей.Записать();
	//	Исключение
	//		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ("Элемент """ + СокрЛП(Ссылка) + """ не записан. Не записаны исполняемые функции пользователя."));
	//		// возвратим обратно данные набора
	//		НаборЗаписей.Загрузить(ПервичныйНабор);
	//		Отказ = Истина;
	//		Возврат;
	//	КонецПопытки;
	//	
	//	ПрочитатьИсполняемыеФункции();
	//	
	//Иначе
	//	НаборЗаписей.Загрузить(ПервичныйНабор);
	//КонецЕсли;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//Процедура Обновляет данные пользователя
Процедура ОбновитьДанныеПользователя()
	
	УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
	ЗаполнитьДерево();
	ЭтотОбъект.Прочитать();	
	
КонецПроцедуры

// Обработчик события ДействияФормыПеречитать Формы.
//
Процедура ДействияФормыПеречитать(Кнопка)
	
	// Контактная информация
	Если Модифицированность Тогда
		
		ОтветНаВопрос = Вопрос(НСтр("ru='Данные были изменены. Перечитать данные?';uk='Дані були змінені. Перечитати дані?'"), РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Нет Тогда
			
			ОбновитьДанныеПользователя();
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ОбработкаОповещения Формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанаКИ" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		// Контактная информация
		Если ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные <> Неопределено
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Вид = Параметр.Вид
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип = Параметр.Тип Тогда
		
			УправлениеКонтактнойИнформацией.УстановитьВозможностьРедактированияТекстаКИ(ЭлементыФормы.КонтактнаяИнформация);
		
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриОткрытии Формы.
//
Процедура ПриОткрытии()
	
	// Контактная информация
	мКнопкаРедактироватьКИВДиалоге = ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.РедактироватьВДиалоге;
	УправлениеКонтактнойИнформацией.ИнициализацияКнопкиРедактированиеКИВДиалоге(мКнопкаРедактироватьКИВДиалоге);
				
КонецПроцедуры

// Обработчик события ПриЗакрытии Формы.
//
Процедура ПриЗакрытии()
	
	// Контактная информация
	СохранитьЗначение("РедактироватьКИВДиалоге", мКнопкаРедактироватьКИВДиалоге.Пометка);
	
КонецПроцедуры

//Процедура обновляет визуальные объекты формы
Процедура ОбновитьВизуальныеОбъектыФормы()
	
	мЭтоНовыйЭлементСправочника = ЭтоНовый();
	
	мСтароеИмяПользователя = Код;
	
	//можно ли код редактировать или нет
	РазрешитьРедактироватьКод = Ложь;

	Если НЕ ЗначениеЗаполнено(Код) Тогда
		
		РазрешитьРедактироватьКод = Истина;
				
	Иначе	
		
		СтарыйПользовательИБ = УправлениеПользователями.НайтиПользователяИБ(СокрЛП(мСтароеИмяПользователя));
		РазрешитьРедактироватьКод = (СтарыйПользовательИБ = Неопределено);
			
	КонецЕсли;
	
	ЭлементыФормы.Код.ТолькоПросмотр = Не РазрешитьРедактироватьКод;	
	
КонецПроцедуры

// Обработчик события ПередОткрытием для Формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ мНаличиеПраваАдминистрирования Тогда 

		// удаляем лишние кнопки
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.РазделительПользовательИБ);
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.ПользовательИБ);
				
	КонецЕсли;
	
	ОбновитьВизуальныеОбъектыФормы();	
		
    Если мЭтоНовыйЭлементСправочника
	   И ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, ПараметрОбъектКопирования);
	Иначе
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
	КонецЕсли;
		
КонецПроцедуры

// Обработчик события ПриЗаписи для Формы.
//
Процедура ПриЗаписи(Отказ)
	
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка, Отказ);
	ЗаписатьИсполняемыеФункции(Отказ);
	
	ОбновитьНастройки();

КонецПроцедуры

// Обработчик события ПослеЗаписи для Формы.
//
Процедура ПослеЗаписи()
	
	ПроверитьПодключениеОбработчикаОжидания();
	
	мСтароеИмяПользователя = Код;
	
	// надо для нового элемента предложить ввести пользователя ИБ
	Если мЭтоНовыйЭлементСправочника Тогда
		
		СтарыйПользовательИБ = УправлениеПользователями.НайтиПользователяИБ(СокрЛП(мСтароеИмяПользователя));
		
		Если СтарыйПользовательИБ = Неопределено Тогда
		
			ОтветПользователя = Вопрос(НСтр("ru='Автоматически создать пользователя ИБ?';uk='Автоматично створити користувача ІБ?'"), РежимДиалогаВопрос.ДаНет);
			Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
				
				ОткрытьФормуРедактированияПользователяИБ(Истина);
				
			КонецЕсли;		
			
		Иначе
			
			ОбновитьВизуальныеОбъектыФормы();
		
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Обработчик события ПриИзмененииДанных для Формы.
Процедура ПриИзмененииДанных()
	
	ЗаполнитьДерево();
	
КонецПроцедуры

Процедура ДействияФормыНастройкаПрав(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаПравДоступа.РедактироватьПраваДоступа(Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКИ ПОЛЬЗОВАТЕЛЯ

// Обработчик события ПриВыводеСтроки элемента формы ДеревоНастроек.
Процедура ДеревоНастроекПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.Настройка.ОтображатьКартинку = Истина;
	Если ДанныеСтроки.ЭтоГруппа Тогда
		ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Настройка.ИндексКартинки=0
	Иначе
		ОформлениеСтроки.Ячейки.Настройка.ИндексКартинки=1
	КонецЕсли;
	Если ДанныеСтроки.Настройка.ТипЗначения.СодержитТип(Тип("Булево"))
		 И ДанныеСтроки.Настройка.ТипЗначения.Типы().Количество()=1 Тогда
		ОформлениеСтроки.Ячейки.Значение.ОтображатьТекст = Ложь;
		ОформлениеСтроки.Ячейки.Значение.ОтображатьФлажок = Истина;
		ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Значение.Флажок = ДанныеСтроки.Настройка.ТипЗначения.ПривестиЗначение(ДанныеСтроки.Значение);
	КонецЕсли;
КонецПроцедуры

// Обработчик события ПриИзмененииФлажка элемента формы ДеревоНастроек.
Процедура ДеревоНастроекПриИзмененииФлажка(Элемент, Колонка)
	СтрокаДерева = ДеревоНастроек.Строки.Найти(Элемент.ТекущиеДанные.Настройка, "Настройка", Истина);
	СтрокаДерева.Значение = Не СтрокаДерева.Настройка.ТипЗначения.ПривестиЗначение(СтрокаДерева.Значение);
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

// Обработчик события НачалоВыбора значения настройки
Процедура ДеревоНастроекЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если мСписокНастроекВыбораГруппы.НайтиПоЗначению(ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка)=Неопределено Тогда
		ЭлементыФормы.ДеревоНастроек.Колонки.Значение.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	Иначе
		ЭлементыФормы.ДеревоНастроек.Колонки.Значение.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
	КонецЕсли;
	
	Если ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойКаталогФайлов Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		Диалог.Каталог = Элемент.Значение;
		Диалог.Заголовок = НСтр("ru='Укажите каталог...';uk='Укажіть каталог...'");
		Если Не Диалог.Выбрать() Тогда
			Возврат;
		КонецЕсли;
		Элемент.Значение = Диалог.Каталог;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;		
	
	
	Если ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделениеОрганизации Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = Справочники.ПодразделенияОрганизаций.ПолучитьФормуВыбора(, Элемент );
		ФормаВыбора.Организация = мОрганизация;
		ФормаВыбора.Открыть();
			
	КонецЕсли;

	
КонецПроцедуры

// Обработчик события ПриИзменении значения настройки
Процедура ДеревоНастроекЗначениеПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

Процедура ДеревоНастроекПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если мСписокНастроекВыбораГруппы.НайтиПоЗначению(ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка)=Неопределено Тогда
		ЭлементыФормы.ДеревоНастроек.Колонки.Значение.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	Иначе
		ЭлементыФормы.ДеревоНастроек.Колонки.Значение.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;		
	КонецЕсли;
	
КонецПроцедуры




///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.РедактироватьВДиалоге.
//
Процедура КоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(Кнопка)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияРедактироватьВДиалоге(Кнопка);
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
	ОбработкаРедактирования.ДоступностьОбъекта = Ложь;
	ОбработкаРедактирования.РедактироватьЗапись(ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные, , ЭтаФорма);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы КонтактнаяИнформация,Тип.
//
Процедура КонтактнаяИнформацияТипОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформацией.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Ссылка));
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
	мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ = Элемент.Значение;
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Ссылка)), Тип("СправочникСсылка.ВидыКонтактнойИнформации"));
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Ссылка)), ЭтаФорма, Тип("СправочникСсылка.ВидыКонтактнойИнформации"), мОбработкаПоискаПоСтрокеВидаКИ, мТекстПоискаПоСтрокеВидаКИ, мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мТекстПоискаПоСтрокеВидаКИ, мОбработкаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.УстановитьОсновным.
//
Процедура КоманднаяПанельКонтактнойИнформацииУстановитьОсновным(Кнопка)
	
	УправлениеКонтактнойИнформацией.УстановитьЗаписьОсновной(НаборКонтактнойИнформации, ЭлементыФормы.КонтактнаяИнформация, Кнопка);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.УстановитьОсновным);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередУдалением(Элемент, Отказ)

	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге, ЭлементыФормы.КонтактнаяИнформация, НаборКонтактнойИнформации, Ложь, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
	
	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге, Ложь, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Тип.
//
Процедура КонтактнаяИнформацияТипПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияТипПриИзмененииОбщее(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

//Процедура открывает форму редактирования пользователя ИБ
Процедура ОткрытьФормуРедактированияПользователяИБ(Знач АвтоматическиСоздаватьНовогоПользователяИБ = Ложь)
	
	СтарыйПользовательИБ = УправлениеПользователями.НайтиПользователяИБ(СокрЛП(мСтароеИмяПользователя));
		
	Если СтарыйПользовательИБ = Неопределено Тогда
		
		Если НЕ мНаличиеПраваАдминистрирования Тогда
			
			// нет прав на администрирование
			Предупреждение(НСтр("ru='Нет прав на просмотр информации о пользователях ИБ.';uk='Немає прав на перегляд інформації про користувачів ІБ.'"));
				
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;	
		
	// есть права администрирования, а пользователь ИБ не найден
	// надо проверить модифицирована ли форма или нет
	Если Модифицированность Тогда
		
		УспешноЗаписан = РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
		
		Если НЕ УспешноЗаписан Тогда
			Возврат;
		КонецЕсли;	
			
		// еще раз попробуем взять пользователя ИБ
		СтарыйПользовательИБ = УправлениеПользователями.НайтиПользователяИБ(СокрЛП(мСтароеИмяПользователя));
			
	КонецЕсли;
	
	СозданНовыйЭлемент = Ложь;
	Если СтарыйПользовательИБ = Неопределено Тогда
		
		Если НЕ АвтоматическиСоздаватьНовогоПользователяИБ Тогда
			
			// есть права на изменение пользователя ИБ
			ОтветПользователя = Вопрос(НСтр("ru='Пользователь ИБ с именем ""';uk='Користувач ІБ з іменем ""'") + СокрЛП(мСтароеИмяПользователя) + НСтр("ru='"" не найден. Создать нового пользователя ИБ?';uk='"" не знайдений. Створити нового користувача ІБ?'"), РежимДиалогаВопрос.ДаНет);
			Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		
		КонецЕсли;
		
		// создаем нового пользователя ИБ
		СтарыйПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		СтарыйПользовательИБ.Имя = СокрЛП(Код);
		СтарыйПользовательИБ.ПолноеИмя = СокрЛП(Наименование);
		
		СозданНовыйЭлемент = Истина;
		
	КонецЕсли;
		
	// надо показать форму редактирования настроек пользователя ИБ
	ФормаРедактированияПользователяИБ = ПолучитьОбщуюФорму("ФормаПользователяИБ");
	ФормаРедактированияПользователяИБ.ПользовательИБ = СтарыйПользовательИБ;
	ФормаРедактированияПользователяИБ.Модифицированность = СозданНовыйЭлемент;
	ФормаРедактированияПользователяИБ.Пользователь = ЭтотОбъект;
	
	РезультатОткрытия = ФормаРедактированияПользователяИБ.ОткрытьМодально();
	
	Если РезультатОткрытия = Истина Тогда
		
		ОбновитьДанныеПользователя();
		ОбновитьВизуальныеОбъектыФормы();
		
	КонецЕсли;	
	
КонецПроцедуры


// редактирование настроек пользователя ИБ
Процедура ДействияФормыПользовательИБ(Кнопка)
	
	ОткрытьФормуРедактированияПользователяИБ();
		
КонецПроцедуры

// редактирование Кода
Процедура КодОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактированияПользователяИБ();
	
КонецПроцедуры

// при изменении кода пользователя
Процедура КодПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		Наименование = СокрЛП(Код);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыГруппыПользователя(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаНастройкиГруппПользователя = ПолучитьФорму("ФормаНастройкиГруппПользователя");
	ФормаНастройкиГруппПользователя.Пользователь = Ссылка;
	ФормаНастройкиГруппПользователя.ОткрытьМодально();

	
КонецПроцедуры

Процедура ДеревоНастроекЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация Тогда
		
		мОрганизация = ВыбранноеЗначение;
		
		Для Каждого Настройка Из ДеревоНастроек.Строки Цикл
			Если Настройка.Строки.Количество() > 0 Тогда
				Для Каждого Строка Из Настройка.Строки Цикл
					Если Строка.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделениеОрганизации Тогда
						Если НЕ (Строка.Значение.Владелец = мОрганизация) ИЛИ НЕ ЗначениеЗаполнено(мОрганизация) Тогда
							Строка.Значение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
	
	Если ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделениеОрганизации Тогда
		
		Если ЗначениеЗаполнено(мОрганизация) И НЕ (ВыбранноеЗначение.Владелец = мОрганизация) Тогда
			
			Сообщить(НСтр("ru='Выбранное подразделение не принадлежит основной организации.';uk='Обраний підрозділ не належить основній організації.'"));
			
			СтандартнаяОбработка = Ложь;
			
		Иначе
			
			Для Каждого Настройка Из ДеревоНастроек.Строки Цикл
				Если Настройка.Строки.Количество() > 0 Тогда
					Для Каждого Строка Из Настройка.Строки Цикл
						Если Строка.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация Тогда
							Если Строка.Значение = Справочники.Организации.ПустаяСсылка() Тогда
								Строка.Значение = ВыбранноеЗначение.Владелец;
								мОрганизация    = ВыбранноеЗначение.Владелец;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ДеревоНастроекЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация Тогда
		
		мОрганизация = Справочники.Организации.ПустаяСсылка();
		СтрокаДерева = ДеревоНастроек.Строки.Найти( ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделениеОрганизации, "Настройка", Истина);
		Если НЕ СтрокаДерева = Неопределено Тогда
			СтрокаДерева.Значение = мОрганизация;
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

// Чтобы избежать чтения при выводе строки, заполним признак группы сразу запросом
ДеревоНастроек.Колонки.Добавить("ЭтоГруппа");
мСписокНастроекВыбораГруппы = Новый СписокЗначений;

мОбработкаПоискаПоСтрокеВидаКИ                 = Ложь;
мТекстПоискаПоСтрокеВидаКИ                     = "";
мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ = Неопределено;

мСтароеИмяПользователя = "";

мНаличиеПраваАдминистрирования = ПравоДоступа("Администрирование", Метаданные);
