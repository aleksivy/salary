
Перем мРегламентноеЗадание Экспорт;

//Функция определяет есть ли для данной настройки Автоматический обмен данными
Функция ЭтоНастройкаАвтоматическогоОбменаДанными() Экспорт
	
	Возврат КаждыйЗапускПрограммы 
		ИЛИ КаждоеЗавершениеРаботыСПрограммой
		ИЛИ Не ПустаяСтрока(КаталогПроверкиДоступности);
	
КонецФункции
	
//Функция по настройке определяет нужно ли для нее периодически определять необходимость обмена данными
Функция ОпределитьНеобходимостьПериодическогоОпределенияВыполненияОбменаДанными() Экспорт
	
	Возврат Не ПустаяСтрока(КаталогПроверкиДоступности);
	
КонецФункции

// процедура производит работу с параметрами обмена данными
Процедура ОбработатьНаборЗаписейНастроек()
	
	Если ЗначениеЗаполнено(Ссылка) 
		И ((ПроизводитьОтправкуСообщений <> Ссылка.ПроизводитьОтправкуСообщений)
		ИЛИ (ПроизводитьПриемСообщений <> Ссылка.ПроизводитьОтправкуСообщений)) Тогда
		
		// если изменились флажки выгрузки и загрузки данных, то надо очищать информацию по последнему действию
		НаборЗаписейПараметров = РегистрыСведений.ПараметрыОбменаДанными.СоздатьНаборЗаписей();
		
		НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.Значение = Ссылка;	
		НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.Использование = Истина;
		НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.ВидСравнения = ВидСравнения.Равно;
		
		НаборЗаписейПараметров.Прочитать();
		
		Если НаборЗаписейПараметров.Количество() = 1 Тогда
			
			ЗаписьПараметров = НаборЗаписейПараметров[0];
			
			Если ПроизводитьПриемСообщений <> Ссылка.ПроизводитьПриемСообщений Тогда
				
				ЗаписьПараметров.ДатаПоследнейЗагрузки = Неопределено;	
				ЗаписьПараметров.РезультатПоследнейЗагрузки = Ложь;
				
			КонецЕсли;
			
			Если ПроизводитьОтправкуСообщений <> Ссылка.ПроизводитьОтправкуСообщений Тогда
				
				ЗаписьПараметров.ДатаПоследнейВыгрузки = Неопределено;	
				ЗаписьПараметров.РезультатПоследнейВыгрузки = Ложь;
				
			КонецЕсли;
			
			Попытка
				НаборЗаписейПараметров.Записать();
			Исключение
				#Если Клиент Тогда
					Сообщить(НСтр("ru='Ошибка при записи изменений в настройку обмена ""';uk='Помилка при записі змін у настройку обміну ""'") + Ссылка + """ : " + ОписаниеОшибки(), СтатусСообщения.Важное);
				#КонецЕсли
			КонецПопытки;
		
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// при записи
Процедура ПриЗаписи(Отказ) 
	
	// надо проверить наличие одной записи в регистре сведений
	НаборЗаписейПараметров = РегистрыСведений.ПараметрыОбменаДанными.СоздатьНаборЗаписей();
		
	НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.Значение = Ссылка;	
	НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.Использование = Истина;
	НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.ВидСравнения = ВидСравнения.Равно;
		
	НаборЗаписейПараметров.Прочитать();
		
	Если НаборЗаписейПараметров.Количество() = 1 Тогда
		// запись есть, ничего делать не надо
		Возврат;
	КонецЕсли;
	
	// добавляем только одну запись и все
	ЗаписьДатПараметров = НаборЗаписейПараметров.Добавить();
	ЗаписьДатПараметров.НастройкаОбменаДанными = Ссылка;
		
	Попытка
		НаборЗаписейПараметров.Записать();
	Исключение
		#Если Клиент Тогда
			Сообщить(НСтр("ru='Ошибка при записи изменений в настройку обмена ""';uk='Помилка при записі змін у настройку обміну ""'") + Ссылка + """ : " + ОписаниеОшибки(), СтатусСообщения.Важное);
		#КонецЕсли
	КонецПопытки;	
		
КонецПроцедуры

Функция НайтиРегламентноеЗаданиеПоНастройке() Экспорт
	
	Попытка
		
		Если НЕ ПустаяСтрока(РегламентноеЗадание) Тогда
			
			УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(РегламентноеЗадание);
			ТекущееРегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);
			
		Иначе
			
			ТекущееРегламентноеЗадание = Неопределено;
			
		КонецЕсли;
		
	Исключение
		
		ТекущееРегламентноеЗадание = Неопределено;
		
    КонецПопытки;
	
	Возврат ТекущееРегламентноеЗадание;
	
КонецФункции


// Перед записью
Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипНастройки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не заполнено поле ""Тип настройки""';uk='Не заповнене поле ""Тип настройки""'"), Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УзелИнформационнойБазы) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не заполнено поле ""Узел""';uk='Не заповнене поле ""Вузол""'"), Отказ);
	КонецЕсли;
	
	Если ЭтоНастройкаАвтоматическогоОбменаДанными() Тогда
		
		Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не заполнено поле ""Пользователь"". Автоматический обмен по такой настройке невозможен.';uk='Не заповнене поле ""Користувач"". Автоматичний обмін по такій настройці неможливий.'"), Отказ);	
		КонецЕсли;
				
	КонецЕсли;
	
	
	// работа с регламентными заданиями
	Если мРегламентноеЗадание = Неопределено Тогда
		
		мРегламентноеЗадание = НайтиРегламентноеЗаданиеПоНастройке();
			
	КонецЕсли;
	
	Если ПометкаУдаления
		ИЛИ НЕ ИспользоватьРегламентныеЗадания Тогда
		
		Если мРегламентноеЗадание <> Неопределено Тогда
			мРегламентноеЗадание.Использование = Ложь;			
		КонецЕсли;
			
	ИначеЕсли ИспользоватьРегламентныеЗадания Тогда
		
		Если мРегламентноеЗадание = Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не выбрано регламентное задание для настройки обмена.';uk='Не обране регламентне завдання для настройки обміну.'"), Отказ);
		Иначе
			мРегламентноеЗадание.Использование = Истина;	
		КонецЕсли;
			
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если мРегламентноеЗадание = Неопределено Тогда
		
		РегламентноеЗадание = "";
		
	Иначе	
		
		РегламентноеЗадание = Строка(мРегламентноеЗадание.УникальныйИдентификатор);
		
		мРегламентноеЗадание.Наименование = Наименование;
		// генерируем уникальный ключ, что бы в один момент времени 2 регламентных задания не выполнялись
		Если ПустаяСтрока(мРегламентноеЗадание.Ключ) Тогда
			мРегламентноеЗадание.Ключ = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
		Массив = Новый Массив();
		Массив.Добавить(Код);
		
		мРегламентноеЗадание.Параметры = Массив;
		мРегламентноеЗадание.Записать();	
					
	КонецЕсли;
			
	ОбработатьНаборЗаписейНастроек();
	
	// в зависимости от типа настройки очищаем настройки остальных типов
	Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс Тогда
		
		КаталогОбменаИнформацией = СокрЛП(КаталогОбменаИнформацией);
		
		FTPАдресОбмена = "";
		ПользовательFTPСоединения = "";
		ПарольFTPСоединения = "";		
				
	ИначеЕсли ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезFTPРесурс Тогда
		
		Если ПустаяСтрока(ПользовательFTPСоединения) Тогда
			ПарольFTPСоединения = "";	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПортFTPСоединения) Тогда
			ПортFTPСоединения = 21;	
		КонецЕсли;
		
		КаталогОбменаИнформацией = "";
			
	КонецЕсли;
		
	КаталогПроверкиДоступности = СокрЛП(КаталогПроверкиДоступности);
			
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РегламентноеЗадание = "";
	мРегламентноеЗадание = Неопределено;
	
КонецПроцедуры
