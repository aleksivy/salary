Перем мИмяТекущегоДняНедели;

Перем мСохранитьИзменения Экспорт;

// Процедура переносит выбранные значения в списке дней недели в объект
Процедура ЗаполнитьДниНеделиОбъекта()
	
	Для Каждого СтрокаСпискаЗначений Из НастройкиОбменовПоДнямНедели Цикл
		
		ЭтаФорма[СтрокаСпискаЗначений.Значение] = СтрокаСпискаЗначений.Пометка; 
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается по событию НачалоВыбораИзСписка
// у полей ввода, в которых редактируются даты со временем.
// 
//  Параметры
//   ЭлементУправления - ПолеВвода, в котором редактируется значение даты
//   ЭтаФорма - Форма
//   СтандартнаяОбработка - булево
//
Процедура ВыбратьВремяИзВыпадающегоСписка(ЭлементУправления, ЭтаФорма, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	
	ДатаВремени = ЭлементУправления.Значение;
	
	ДатаНачала      = '00010101000000';
	ДатаОкончания   = '00010101235959';
	
	СписокВремен = Новый СписокЗначений;

	а = 1;
	Пока Истина Цикл
		
		ВремяСписка = ДатаНачала + а*30*60;
		Если НачалоЧаса(ВремяСписка) > НачалоЧаса(ДатаОкончания) Тогда
			Прервать;
		КонецЕсли;
		
		СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='ЧЧ:мм'"));
		а = а + 1;
		
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(ДатаВремени);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ЭлементУправления);
	Иначе
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ЭлементУправления, НачальноеЗначение);
	КонецЕсли; 

	Если ВыбранноеВремя <> Неопределено Тогда
		ЭлементУправления.Значение =  ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры

// процедура организует выбор из списка интервалов обмена данными
Процедура ВыбратьИнтервалИзВыпадающегоСписка(ЭлементУправления, ЭтаФорма, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
		
	СписокВремен = Новый СписокЗначений;
	СписокВремен.Добавить(30, "Пол часа");
	СписокВремен.Добавить(60, "1 час");
	СписокВремен.Добавить(90, "1 час 30 минут");
	СписокВремен.Добавить(120,"2 часа");
	СписокВремен.Добавить(180,"3 часа");
	СписокВремен.Добавить(240,"4 часа");
	СписокВремен.Добавить(300,"5 часов");
	СписокВремен.Добавить(360,"6 часов");
	СписокВремен.Добавить(720,"12 часов");
    	
	НачальноеЗначение = СписокВремен.НайтиПоЗначению(ЭлементУправления.Значение);
	
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ЭлементУправления);
	Иначе
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ЭлементУправления, НачальноеЗначение);
	КонецЕсли; 

	Если ВыбранноеВремя <> Неопределено Тогда
		ЭлементУправления.Значение =  ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьВремяПериодическогоОбмена()
	
КонецПроцедуры

// процедура устанавливает доступность конечного времени обмена
Процедура УстановитьДоступностьКонечногоВремениОбмена()
	
	ДоступностьЭлемента = (КоличествоМинутМеждуОбменами > 0) 
		И НЕ ЭлементыФормы.КоличествоМинутМеждуОбменами.ТолькоПросмотр
		И НЕ ЭлементыФормы.ЗаданноеВремя.ТолькоПросмотр;
	
	ЭлементыФормы.НадписьОкончаниеОбменов.Доступность = ДоступностьЭлемента;
	ЭлементыФормы.КонечноеВремяОбменов.ТолькоПросмотр = НЕ ДоступностьЭлемента;
	
КонецПроцедуры

//Процедура заполняет список значений дней недели
Процедура ЗаполнитьСписокДнейНедели()
	
	НастройкиОбменовПоДнямНедели.Очистить();
	НастройкиОбменовПоДнямНедели.Добавить("Понедельник", , Понедельник);
	НастройкиОбменовПоДнямНедели.Добавить("Вторник", , Вторник);
	НастройкиОбменовПоДнямНедели.Добавить("Среда", , Среда);
	НастройкиОбменовПоДнямНедели.Добавить("Четверг", , Четверг);
	НастройкиОбменовПоДнямНедели.Добавить("Пятница", , Пятница);
	НастройкиОбменовПоДнямНедели.Добавить("Суббота", , Суббота);
	НастройкиОбменовПоДнямНедели.Добавить("Воскресенье", , Воскресенье);
		
КонецПроцедуры

Процедура ОсновныеДействияФормыОК(Кнопка)
	
	мСохранитьИзменения = Истина;
	Закрыть();
	
КонецПроцедуры

// при выводе строки дней недели
Процедура НастройкиОбменовПоДнямНеделиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если Врег(ДанныеСтроки.Значение) = мИмяТекущегоДняНедели Тогда
		
		НовыйШрифт = Новый Шрифт(,,Истина);
		ОформлениеСтроки.Шрифт = НовыйШрифт;	
		
	КонецЕсли;
	
	Если (Врег(ДанныеСтроки.Значение) = "СУББОТА")
		ИЛИ (Врег(ДанныеСтроки.Значение) = "ВОСКРЕСЕНЬЕ") Тогда
		
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаданноеВремяНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбратьВремяИзВыпадающегоСписка(Элемент, ЭтаФорма, СтандартнаяОбработка);
	ОбновитьВремяПериодическогоОбмена();

КонецПроцедуры

Процедура ЗаданноеВремяПриИзменении(Элемент)
	
	// при изменении заданного времени обмена
	ОбновитьВремяПериодическогоОбмена();

КонецПроцедуры

// при изменении интервала обмена данными
Процедура КоличествоМинутМеждуОбменамиПриИзменении(Элемент)
	
	УстановитьДоступностьКонечногоВремениОбмена();
	ОбновитьВремяПериодическогоОбмена();
	
КонецПроцедуры

// выбор из списка интервала обмена данными
Процедура КоличествоМинутМеждуОбменамиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбратьИнтервалИзВыпадающегоСписка(Элемент, ЭтаФорма, СтандартнаяОбработка);
	ОбновитьВремяПериодическогоОбмена();
	
КонецПроцедуры

// при изменении конечного времени обменов
Процедура КонечноеВремяОбменовПриИзменении(Элемент)
	
	ОбновитьВремяПериодическогоОбмена();
	
КонецПроцедуры

// параметры настройки обновления конфигурации
Процедура КонечноеВремяОбменовНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбратьВремяИзВыпадающегоСписка(Элемент, ЭтаФорма, СтандартнаяОбработка);
	ОбновитьВремяПериодическогоОбмена();
	
КонецПроцедуры

// отметить все дни недели
Процедура КоманднаяПанельНастройкиДнейНеделиВыделитьВсе(Кнопка)
	
	НастройкиОбменовПоДнямНедели.ЗаполнитьПометки(Истина);
	ОбновитьВремяПериодическогоОбмена();

КонецПроцедуры

// отменить все дни недели
Процедура КоманднаяПанельНастройкиДнейНеделиОтменитьВсе(Кнопка)
	
	НастройкиОбменовПоДнямНедели.ЗаполнитьПометки(Ложь);
	ОбновитьВремяПериодическогоОбмена();
    	
КонецПроцедуры

// перед открытием формы
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокДнейНедели();
	
КонецПроцедуры

// перед закрытием формы
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если мСохранитьИзменения <> Истина Тогда
	
		Если Модифицированность Тогда
			
			ОтветПользователя = Вопрос(НСтр("ru='Данные в форме были изменены. Сохранить изменения?';uk='Дані у формі були змінені. Зберегти зміни?'"), РежимДиалогаВопрос.ДаНетОтмена);
			
			Если ОтветПользователя = КодВозвратаДиалога.Отмена Тогда
				
				Отказ = Истина;
				
			ИначеЕсли ОтветПользователя = КодВозвратаДиалога.Да Тогда	
				
				мСохранитьИзменения = Истина;
				
			Иначе	
				
				мСохранитьИзменения = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если Отказ Тогда
		
		мСохранитьИзменения = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьДниНеделиОбъекта();
		
КонецПроцедуры

// при открытии формы
Процедура ПриОткрытии()
	
	ТолькоПросмотр = НЕ ВыполнятьАвтоматически;
	
КонецПроцедуры


мИмяТекущегоДняНедели = Врег(ПроцедурыОбменаДанными.ПолучитьИмяДняНедели());
мСохранитьИзменения = Ложь;
