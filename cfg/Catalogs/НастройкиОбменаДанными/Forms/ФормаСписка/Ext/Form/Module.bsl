
Процедура СправочникСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	
	// отображаем дату загрузки и выгрузки данных
	Для Каждого Оформление Из ОформленияСтрок Цикл
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПараметрыОбменаДанными.ДатаПоследнейЗагрузки,
		               |	ПараметрыОбменаДанными.ДатаПоследнейВыгрузки,
		               |	ПараметрыОбменаДанными.РезультатПоследнейЗагрузки,
		               |	ПараметрыОбменаДанными.РезультатПоследнейВыгрузки
		               |ИЗ
		               |	РегистрСведений.ПараметрыОбменаДанными КАК ПараметрыОбменаДанными
					   |	ГДЕ (ПараметрыОбменаДанными.НастройкаОбменаДанными = &Ссылка)";
					   
		Запрос.УстановитьПараметр("Ссылка", Оформление.ДанныеСтроки.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
            ДатаПоследнейЗагрузки = Выборка.ДатаПоследнейЗагрузки;
			ДатаПоследнейВыгрузки = Выборка.ДатаПоследнейВыгрузки; 
			
			РезультатПоследнейЗагрузки = Выборка.РезультатПоследнейЗагрузки;
			РезультатПоследнейВыгрузки = Выборка.РезультатПоследнейВыгрузки;
					
		Иначе
			ДатаПоследнейЗагрузки = Неопределено;
			ДатаПоследнейВыгрузки = Неопределено;
			
			РезультатПоследнейЗагрузки = Ложь;
			РезультатПоследнейВыгрузки = Ложь;
		КонецЕсли;
		
		ПроизводитьЗагрузку = Оформление.ДанныеСтроки.ПроизводитьПриемСообщений;
		ПроизводитьВыгрузку = Оформление.ДанныеСтроки.ПроизводитьОтправкуСообщений;

		// отображаем дату последней загрузки по следующему принципу
		// если стоит признак загрузки, но нет информации о последней загрузке - пишем - не производился
		// если есть информация, то ее выводим
		// если не стоит признак производить загрузку - то пишем не загружать и все
			
		ОтображатьФлаг = Ложь;
		ОтображатьКартинку = Ложь;
		Если ПроизводитьЗагрузку Тогда
			
			Если ЗначениеЗаполнено(ДатаПоследнейЗагрузки) Тогда 
					
				Оформление.Ячейки.ЗагрузкаДанных.Значение = ДатаПоследнейЗагрузки;
					
				ОтображатьКартинку = Истина;
				Если РезультатПоследнейЗагрузки = Истина Тогда
					Оформление.Ячейки.ЗагрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.Утвердить);
				Иначе	
					Оформление.Ячейки.ЗагрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.Остановить);
				КонецЕсли;	
					
			Иначе
				ОтображатьФлаг = Истина;
				// флаг показываем, но данные нет
				Оформление.Ячейки.ЗагрузкаДанных.ЗначениеФлажка = ПроизводитьЗагрузку;	
				Оформление.Ячейки.ЗагрузкаДанных.Значение = "Не производилась";
				
			КонецЕсли;
			
		Иначе
			// не производить загрузку
			Оформление.Ячейки.ЗагрузкаДанных.Значение = "Не загружать";
		КонецЕсли;
			
		Оформление.Ячейки.ЗагрузкаДанных.ОтображатьФлажок = ОтображатьФлаг;
		Оформление.Ячейки.ЗагрузкаДанных.ОтображатьКартинку = ОтображатьКартинку;
			
			
		ОтображатьФлаг = Ложь;
		ОтображатьКартинку = Ложь;
			
		Если ПроизводитьВыгрузку Тогда

			   Если ЗначениеЗаполнено(ДатаПоследнейВыгрузки) Тогда 
					
				Оформление.Ячейки.ВыгрузкаДанных.Значение = ДатаПоследнейВыгрузки;
				ОтображатьКартинку = Истина;
				Если РезультатПоследнейВыгрузки = Истина Тогда
					Оформление.Ячейки.ВыгрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.Утвердить);
				Иначе	
					Оформление.Ячейки.ВыгрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.Остановить);
				КонецЕсли;	
					
			Иначе	
					
				ОтображатьФлаг = Истина;
				// флаг показываем, но данные нет
				Оформление.Ячейки.ВыгрузкаДанных.ЗначениеФлажка = ПроизводитьВыгрузку;	
				Оформление.Ячейки.ВыгрузкаДанных.Значение = "Не производилась";
					
			КонецЕсли;
				
		Иначе
			Оформление.Ячейки.ВыгрузкаДанных.Значение = "Не выгружать";	
		КонецЕсли;
				
		Оформление.Ячейки.ВыгрузкаДанных.ОтображатьФлажок = ОтображатьФлаг;	
		Оформление.Ячейки.ВыгрузкаДанных.ОтображатьКартинку = ОтображатьКартинку;			
            						
		Если Оформление.ДанныеСтроки.ИспользоватьРегламентныеЗадания Тогда
			Оформление.Ячейки.ДатаОчередногоОбмена.Значение = "Регламентное задание";
		Иначе
			Оформление.Ячейки.ДатаОчередногоОбмена.Значение = "Не производится";
		КонецЕсли;				
		
	КонецЦикла
	
КонецПроцедуры

// выполненеи обмена данными
Процедура ПроизвестиОбменДанными()
	
	Если ЭлементыФормы.СправочникСписок.ВыделенныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбменов = Новый Массив();
    Для Каждого ВыделеннаяСтрока Из ЭлементыФормы.СправочникСписок.ВыделенныеСтроки Цикл
		МассивОбменов.Добавить(ВыделеннаяСтрока.Ссылка);
	КонецЦикла;
	
	ПроцедурыОбменаДанными.ПроизвестиСписокОбменовДанными(МассивОбменов, Истина, глЗначениеПеременной("глОбработкаАвтоОбменДанными"), глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"));
	
	// после проведения обмена данными, надо обновить список
	Обновить();
	
КонецПроцедуры

// параметры для обновления конфигурации
Процедура ДействияФормыПараметрыДляОбновленияКонфигурации(Кнопка)
	
	ОткрытьФормуРедактированияНастройкиФайлаОбновления();
	
КонецПроцедуры

// обмен данными
Процедура ДействияФормыПроизвестиОбменданными(Кнопка)
	
	ПроизвестиОбменДанными();
	
КонецПроцедуры

// обмен данными
Процедура ДействияФормыДействиеЧтениеИЗаписьСообщенийСИзменениями(Кнопка)
	
	ПроизвестиОбменДанными();
	
КонецПроцедуры


// пи открытии формы списка
Процедура ПриОткрытии()
	
	// каждые 1 минуту список должен обновляться
	ЭлементыФормы.СправочникСписок.ПериодАвтоОбновления = 60;
	ЭлементыФормы.СправочникСписок.АвтоОбновление = Истина;
	                                                       	
КонецПроцедуры

// при выводе строки настройки обмена данными
Процедура СправочникСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если (ДанныеСтроки.Ответственный = ПараметрыСеанса.ТекущийПользователь)
		И ТипЗнч(ОформлениеСтроки.Ячейки.ДатаОчередногоОбмена.Значение) = Тип("Дата") Тогда
				
		ОформлениеСтроки.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		
	ИначеЕсли ТипЗнч(ОформлениеСтроки.Ячейки.ДатаОчередногоОбмена.Значение) = Тип("Строка")
		И ОформлениеСтроки.Ячейки.ДатаОчередногоОбмена.Значение = "Регламентное задание" Тогда	
		
		ОформлениеСтроки.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
		
	КонецЕсли;
	
КонецПроцедуры


// Добавляем нужные для работы колонки
СправочникСписок.Колонки.Добавить("ПроизводитьПриемСообщений");
СправочникСписок.Колонки.Добавить("ПроизводитьОтправкуСообщений");
СправочникСписок.Колонки.Добавить("Ответственный");

СправочникСписок.Колонки.Добавить("ИспользоватьРегламентныеЗадания");

