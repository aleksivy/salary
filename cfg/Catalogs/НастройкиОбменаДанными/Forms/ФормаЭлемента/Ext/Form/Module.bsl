
Перем мОбновлятьСписокАвтоОбмена;

Перем мЖирныйШрифт;
Перем мОбычныйШрифт;

// ОСНОВНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
///////////////////////////////////////////////////////////////////////////////

 //Процедура устанавливает доступность полей доп. ограниченйи для автообмена
Процедура УстановитьДоступностьЭлементовДопОграниченияДляавтообмена()
	
	ЭлементыФормы.НаличиеКаталогаДляЗапускаАвтообмена.ТолькоПросмотр = НЕ ФлажокВыполнятьАвтообменПриВидимостиКаталога;
	
	ЭлементыФормы.ОтсутствиеКаталогаДляЗапускаАвтообмена.ТолькоПросмотр = НЕ ФлажокВыполнятьАвтообменПриНЕВидимостиКаталога;
	
КонецПроцедуры

// процедура по узлу устанавливает наименованеи плана обмена
Процедура УстановитьНаименованиеПланаОбмена()
	
	ИмяПланаОбмена = ПроцедурыОбменаДанными.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
	
	ЭтаФорма.Заголовок = НСтр("ru='Настройки обмена данными. План обмена: ';uk='Настройки обміну даними. План обміну: '") + ИмяПланаОбмена + НСтр("ru=', Настройка';uk=', Настройка'"); 
	
КонецПроцедуры

// процедура устанавливает доступность пароля архивации файлов при отправке
Процедура УстановитьДоступностьАрхивацииФайловПриОтправке()
	
	ЭлементыФормы.НадписьПарольНаЗапись.Доступность = ВыполнятьАрхивациюФайловОбмена;
	ЭлементыФормы.ПарольНаОтправку.ТолькоПросмотр = НЕ ВыполнятьАрхивациюФайловОбмена;
	
КонецПроцедуры

//процедура устанавливает доступность редактирования каталога отслеживания видимости
Процедура УстановитьДоступностьРедактированияКаталогаОтслеживанияВидимости()
	
	ЭлементыФормы.КаталогПроверкиДоступности.ТолькоПросмотр = НЕ ПриИзмененииВидимостиКаталога;
	
КонецПроцедуры

// процедура устанавливает активной нужную страницу дополнительных настроек
Процедура УстановитьСтраницуДополнительныхНастроек()
	
	// в зависимости от типа обмена устанавливаем нужную настройку
	Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс Тогда
		
		ЭлементыФормы.ПанельНастройкиТипов.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиТипов.Страницы.Файловый;
		
	ИначеЕсли ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезFTPРесурс Тогда
		
		ЭлементыФормы.ПанельНастройкиТипов.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиТипов.Страницы.FTPОбмен;
		
	ИначеЕсли ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезПочту Тогда
		
		ЭлементыФормы.ПанельНастройкиТипов.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиТипов.Страницы.Почта;
		
	КонецЕсли;
	
КонецПроцедуры

// процедура устанавливает надписи удачной или нет операции
Процедура УстановитьНадписиПроведенныхОпераций()

	Если ПроизводитьПриемСообщений 
		И ЗначениеЗаполнено(ДатаПоследнейЗагрузки) Тогда
		
		ЭлементыФормы.ПолеКартинкиДатаЗагрузки.Видимость = Истина;
		
		Если РезультатПоследнейЗагрузки = Истина Тогда 
			ЭлементыФормы.НадписьРезультатЗагрузки.Заголовок = "Успешно";
			ЭлементыФормы.ПолеКартинкиДатаЗагрузки.Картинка = БиблиотекаКартинок.Утвердить;
		Иначе
			ЭлементыФормы.НадписьРезультатЗагрузки.Заголовок = НСтр("ru='С ошибками';uk='З помилками'");
			ЭлементыФормы.ПолеКартинкиДатаЗагрузки.Картинка = БиблиотекаКартинок.Остановить;
		КонецЕсли;
		
	Иначе
		ЭлементыФормы.НадписьРезультатЗагрузки.Заголовок = "";	
		ЭлементыФормы.ПолеКартинкиДатаЗагрузки.Видимость = Ложь;
	КонецЕсли;	
	
	Если ПроизводитьОтправкуСообщений
		И ЗначениеЗаполнено(ДатаПоследнейВыгрузки) Тогда
		
		ЭлементыФормы.ПолеКартинкиДатаВыгрузки.Видимость = Истина;
		Если РезультатПоследнейВыгрузки = Истина Тогда 
			ЭлементыФормы.НадписьРезультатВыгрузки.Заголовок = "Успешно";
			ЭлементыФормы.ПолеКартинкиДатаВыгрузки.Картинка = БиблиотекаКартинок.Утвердить;
		Иначе
			ЭлементыФормы.НадписьРезультатВыгрузки.Заголовок = НСтр("ru='С ошибками';uk='З помилками'");
			ЭлементыФормы.ПолеКартинкиДатаВыгрузки.Картинка = БиблиотекаКартинок.Остановить;
		КонецЕсли;
		
	Иначе
		ЭлементыФормы.НадписьРезультатВыгрузки.Заголовок = "";	
		ЭлементыФормы.ПолеКартинкиДатаВыгрузки.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// процедура перечитывает данные параметорв настройки
Процедура ПеречитатьПараметрыНастройки()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПараметрыОбменаДанными.ДатаПоследнегоОбмена,
	               |	ПараметрыОбменаДанными.ДатаПоследнегоФайлаОбмена,
	               |	ПараметрыОбменаДанными.ДатаПоследнейЗагрузки,
	               |	ПараметрыОбменаДанными.ДатаПоследнейВыгрузки,
	               |	ПараметрыОбменаДанными.РезультатПоследнейЗагрузки,
	               |	ПараметрыОбменаДанными.РезультатПоследнейВыгрузки,
				   |    ПараметрыОбменаДанными.ДоступностьКаталогаПроверки
	               |ИЗ
	               |	РегистрСведений.ПараметрыОбменаДанными КАК ПараметрыОбменаДанными
				   |	ГДЕ (ПараметрыОбменаДанными.НастройкаОбменаДанными = &Ссылка)";
				   
	Запрос.УстановитьПараметр("Ссылка", Ссылка); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ДатаПоследнегоОбмена = Выборка.ДатаПоследнегоОбмена;
		ДатаПоследнегоФайлаОбмена = Выборка.ДатаПоследнегоФайлаОбмена;
		
		ДатаПоследнейЗагрузки = Выборка.ДатаПоследнейЗагрузки;
		ДатаПоследнейВыгрузки = Выборка.ДатаПоследнейВыгрузки;
		РезультатПоследнейЗагрузки = Выборка.РезультатПоследнейЗагрузки;
		РезультатПоследнейВыгрузки = Выборка.РезультатПоследнейВыгрузки;
		
		ДоступностьКаталогаПроверки = Выборка.ДоступностьКаталогаПроверки;
		
		УстановитьНадписиПроведенныхОпераций();
		
	Иначе
		
		ДатаПоследнегоОбмена = Неопределено;
		ДатаПоследнегоФайлаОбмена = Неопределено;
		
		ДатаПоследнейЗагрузки = Неопределено;
		ДатаПоследнейВыгрузки = Неопределено;
		РезультатПоследнейЗагрузки = Ложь;
		РезультатПоследнейВыгрузки = Ложь;
		
		ДоступностьКаталогаПроверки = Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

// процедура устанавливает в качестве реквизита узел обмена - единственный узел для обмена данными с текущей ИБ
Процедура УстановитьЕдинственныйУзелДляОбмена()
	
	ТекущийПодходящийУзел = Неопределено;
	// пробегаем все узлы всех планов обмена
	Для Каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
		
		ТекущийПланОбмена = ПланыОбмена[ПланОбмена.Имя];
		ТекущийУзелИБ = ТекущийПланОбмена.ЭтотУзел();
		
		// все узлы пробегаем
		ВыборкаУзлов = ТекущийПланОбмена.Выбрать();
		Пока ВыборкаУзлов.Следующий() Цикл
			
			Узел = ВыборкаУзлов.Ссылка;
			Если (Узел <> ТекущийУзелИБ) Тогда
				
				Если ТекущийПодходящийУзел <> Неопределено Тогда
					// уже нашли второй узел с которым можно обменяться...
					Возврат;
				КонецЕсли;
				
				ТекущийПодходящийУзел = Узел; 
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТекущийПодходящийУзел <> Неопределено Тогда
		
		УзелИнформационнойБазы = ТекущийПодходящийУзел;
		
	КонецЕсли;		
	
КонецПроцедуры

//Функция для текущей редактируемой настройки определяет она для автоматического обмена или нет
Функция ОпределитьПоНастройкеРедактированияОнаДляавтообмена()
	
	Возврат КаждыйЗапускПрограммы 
		ИЛИ КаждоеЗавершениеРаботыСПрограммой
		ИЛИ ( ПриИзмененииВидимостиКаталога
			И Не ПустаяСтрока(КаталогПроверкиДоступности));
	
КонецФункции

Процедура УстановитьТекстНадписиРегламентнойНастройки()
	
	РасписаниеАктивно = Ложь;
	
	Если мРегламентноеЗадание = Неопределено Тогда
		ТекстРасписания = "<Расписание не задано>";
	Иначе
		Если мРегламентноеЗадание.Использование Тогда
			ПрефиксРасписания = "Расписание: ";
			РасписаниеАктивно = Истина;
		Иначе
			ПрефиксРасписания = "Расписание (НЕ АКТИВНО): ";
		КонецЕсли;
		
		ТекстРасписания = ПрефиксРасписания + Строка(мРегламентноеЗадание.Расписание);
	КонецЕсли;
			
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Заголовок = ТекстРасписания;
	
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Шрифт = ?(РасписаниеАктивно И ИспользоватьРегламентныеЗадания, мЖирныйШрифт, мОбычныйШрифт);
	
КонецПроцедуры

// СОБЫТИЯ
///////////////////////////////////////////////////////////////////////////////

// СОБЫТИЯ ПРИ ВЫБОРЕ И ПРОСМОТРЕ КАТАЛОГА

// при изменении каталога
Процедура ОбработчикПриИзмененииКаталога(Элемент)
	
	Элемент.Значение = СокрЛП(Элемент.Значение);
	
КонецПроцедуры

// событие при нажатии на кнопку выбора у каталога 
Функция ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РезультатВыбора = РаботаСФайлами.ВыбратьКаталог(Элемент.Значение);
	
	Возврат РезультатВыбора;
	
КонецФункции

// при нажатии на "Открытие" у каталога 
Процедура ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	// открываем каталог который в настройках
	ЗапуститьПриложение(Элемент.Значение);
	
КонецПроцедуры

// при открытии формы
Процедура ПриОткрытии()

	Если ЭтоНовый() 
		И ПараметрОбъектКопирования = Неопределено 
		И ПараметрОснование = Неопределено Тогда
		
		// ищем те узлы с которыми может текущий пользователь обмениваться
		УстановитьЕдинственныйУзелДляОбмена();
		
		ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс;
		КаталогОбменаИнформацией = КаталогВременныхФайлов();
						
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
		
		ПроизводитьПриемСообщений = Истина;
		ПроизводитьОтправкуСообщений = Истина;
		
		ВыполнятьАрхивациюФайловОбмена = Истина;
		
		ПортFTPСоединения = 21;
		
		мНаборЗаписейПараметров = Неопределено;
		
		ВестиЛог = Истина;
		
		ВопросПриАвтообмене = Истина;
		ВыводитьСообщенияОбОшибкахПриАвтоматическомОбменеДанными = Истина;
		ВыводитьИнформационныеСообщенияПриАвтоматическомОбменеДанными = Ложь;
		
	Иначе
		
		ПеречитатьПараметрыНастройки();
				
	КонецЕсли;
	
	ПриИзмененииВидимостиКаталога = Не ПустаяСтрока(КаталогПроверкиДоступности);
	УстановитьДоступностьРедактированияКаталогаОтслеживанияВидимости();
	
	УстановитьСтраницуДополнительныхНастроек();
	УстановитьНаименованиеПланаОбмена();
			
	УстановитьДоступностьАрхивацииФайловПриОтправке();
			
	Если мРегламентноеЗадание = Неопределено Тогда
	
		мРегламентноеЗадание = НайтиРегламентноеЗаданиеПоНастройке();
		
	КонецЕсли;
	
	УстановитьТекстНадписиРегламентнойНастройки();
	
	ФлажокВыполнятьАвтообменПриВидимостиКаталога = Не ПустаяСтрока(НаличиеКаталогаДляЗапускаАвтообмена);
	ФлажокВыполнятьАвтообменПриНЕВидимостиКаталога = Не ПустаяСтрока(ОтсутствиеКаталогаДляЗапускаАвтообмена);
		
	УстановитьДоступностьЭлементовДопОграниченияДляавтообмена();
	
	ОбновитьДоступностьАвтообмена();
	
	ЭтаФорма.Модифицированность = Ложь;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Код);
КонецПроцедуры

// при изменении узла обмена
Процедура УзелИнформационнойБазыПриИзменении(Элемент)
	
	УстановитьНаименованиеПланаОбмена();
	
КонецПроцедуры

// при изменении типа настройки
Процедура ТипНастройкиПриИзменении(Элемент)
	
	УстановитьСтраницуДополнительныхНастроек();
	
КонецПроцедуры


// процедура выполняет действия после изменения каталога обмена данными
Процедура ДействияПриИзмененииКаталогаОбменаДанными()
	
	НаличиеКаталогаПроверкиДоступности = ПриИзмененииВидимостиКаталога
										И Не ПустаяСтрока(КаталогПроверкиДоступности) 
										И (Врег(КаталогПроверкиДоступности) <> Врег(КаталогОбменаИнформацией));
										
	НаличиеКаталогаДляПроведенияАвтообмена = ФлажокВыполнятьАвтообменПриВидимостиКаталога
										И Не ПустаяСтрока(НаличиеКаталогаДляЗапускаАвтообмена)
										И (Врег(НаличиеКаталогаДляЗапускаАвтообмена) <> Врег(КаталогОбменаИнформацией));
										
	Если НЕ НаличиеКаталогаПроверкиДоступности И НЕ НаличиеКаталогаДляПроведенияАвтообмена Тогда
											
		Возврат;
		
	ИначеЕсли НаличиеКаталогаПроверкиДоступности И НаличиеКаталогаДляПроведенияАвтообмена Тогда
		// оба каталога есть в наличии
		ТекстВопроса = НСтр("ru='Установить автоматически для реквизитов настройки обмена ""При появлении каталога"" и ""Выполнять автообмен только при видимости каталога"" значение:"
"';uk='Встановити автоматично для реквізитів настройок обміну ""З появою каталогу"" і ""Виконувати автообмін тільки при видимості каталогу"" значення:"
"'") + КаталогОбменаИнформацией;
			
	ИначеЕсли НаличиеКаталогаПроверкиДоступности Тогда
		
		ТекстВопроса = НСтр("ru='Установить автоматически для реквизита настройки обмена ""При появлении каталога"" значение:"
"';uk='Встановити автоматично для реквізиту настрйки обміну ""З появою каталогу"" значення:"
"'") + КаталогОбменаИнформацией;
			
	ИначеЕсли НаличиеКаталогаДляПроведенияАвтообмена Тогда
		
		ТекстВопроса = НСтр("ru='Установить автоматически для реквизита настройки обмена ""Выполнять автообмен только при видимости каталога"" значение:"
"';uk='Встановити автоматично для реквізиту настройки обміну ""Виконувати автообмін тільки при видимості каталогу"" значення:"
"'") + КаталогОбменаИнформацией;		
		
	КонецЕсли;
		
	ОтветПользователя = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НаличиеКаталогаПроверкиДоступности Тогда
		КаталогПроверкиДоступности = КаталогОбменаИнформацией;	
	КонецЕсли;
	
	Если НаличиеКаталогаДляПроведенияАвтообмена Тогда
		НаличиеКаталогаДляЗапускаАвтообмена = КаталогОбменаИнформацией;	
	КонецЕсли;
	
КонецПроцедуры

// событие при нажатии на кнопку выбора у каталога обмена информацией
Процедура КаталогОбменаИнформациейНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РезультатВыбора = ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка);
	
	Если РезультатВыбора Тогда
		ДействияПриИзмененииКаталогаОбменаДанными();
	КонецЕсли;
	
КонецПроцедуры

// при изменении каталога обмена информацией
Процедура КаталогОбменаИнформациейПриИзменении(Элемент)
	
	ОбработчикПриИзмененииКаталога(Элемент);
	
	ДействияПриИзмененииКаталогаОбменаДанными();
	
КонецПроцедуры

// при изменении FTP адреса обмена
Процедура FTPАдресОбменаПриИзменении(Элемент)
	
	Элемент.Значение = СокрЛП(Элемент.Значение);
	
КонецПроцедуры

// при изменении почтового адреса отправления
Процедура ПочтовыйАдресПолучателяПриИзменении(Элемент)
	
	Элемент.Значение = СокрЛП(Элемент.Значение);
	
КонецПроцедуры

// после записи объекта
Процедура ПослеЗаписи()
	
	Если мОбновлятьСписокАвтоОбмена И глЗначениеПеременной("глОбработкаАвтоОбменДанными") <> Неопределено Тогда
		
		глЗначениеПеременной("глОбработкаАвтоОбменДанными").ОбновитьНастройкуАвтоматическогоОбмена(Ссылка);
				
	КонецЕсли;
	
	мОбновлятьСписокАвтоОбмена = Ложь;	
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
		
КонецПроцедуры

// перед записью объекта
Процедура ПередЗаписью(Отказ)
	
	//пустой каталог отслеживания изменения видимости
	Если ПриИзмененииВидимостиКаталога
		И ПустаяСтрока(КаталогПроверкиДоступности) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не задан каталог при появлении которого необходимо выполнять обмен данными';uk='Не заданий каталог з появою якого необхідно виконувати обмін даними'"), Отказ);
		
	КонецЕсли;
	
	Если ФлажокВыполнятьАвтообменПриВидимостиКаталога
		И ПустаяСтрока(НаличиеКаталогаДляЗапускаАвтообмена) Тогда
			
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указан каталог при видимости которого можно выполнять автоматический обмен данными';uk='Не зазначений каталог при видимості якого можна виконувати автоматичний обмін даними'"), Отказ);
			
	КонецЕсли;
		
	Если ФлажокВыполнятьАвтообменПриНЕВидимостиКаталога 
		И ПустаяСтрока(ОтсутствиеКаталогаДляЗапускаАвтообмена) Тогда
			
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указан каталог при НЕ видимости которого можно выполнять автоматический обмен данными';uk='Не зазначений каталог при НЕ видимості якого можна виконувати автоматичний обмін даними'"), Отказ);			
			
	КонецЕсли;
	
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЭтоНовый() Тогда
		
		Если ОпределитьНеобходимостьПериодическогоОпределенияВыполненияОбменаДанными() 
			ИЛИ Ответственный = ПараметрыСеанса.ТекущийПользователь Тогда
			
			мОбновлятьСписокАвтоОбмена = Истина;
			
		КонецЕсли; 
		
	Иначе
		
		Если КаталогПроверкиДоступности <> Ссылка.КаталогПроверкиДоступности	
		 ИЛИ Ответственный = ПараметрыСеанса.ТекущийПользователь 
		 ИЛИ Ссылка.Ответственный = ПараметрыСеанса.ТекущийПользователь Тогда
		 
			мОбновлятьСписокАвтоОбмена = Истина;
			
		КонецЕсли;
		
	КонецЕсли; 
		
	// если в настройке указано, что нужно автоматически производить обмен данными
	// но не установлена контанта автоматического обмена данными в системе то предупредим его
	
	ПоНастройкеЕстьАвтообмен = ОпределитьПоНастройкеРедактированияОнаДляавтообмена();
	
	Если ПоНастройкеЕстьАвтообмен Тогда
		
		КонстантаАвтоматическогоВыполненияОбменов = Константы.ИспользоватьМеханизмАвтоматическогоОбменаДанными.Получить();
				
		Если Не КонстантаАвтоматическогоВыполненияОбменов Тогда 
			
			Сообщить(НСтр("ru='Не установлена константа ""Использовать механизм автоматического обмена данными"". Обмен данными по событиям выполняться не будет!';uk='Не встановлена константа ""Використовувати механізм автоматичного обміну даними"". Обмін даними по подіях виконуватися не буде!'"), СтатусСообщения.ОченьВажное);
			
		КонецЕсли;
								
	КонецЕсли;
	
	ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая();
	
	Если ЭтоФайловаяИБ Тогда
		
		ПользовательДляВыполненияРеглЗаданий = Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить();
		
		Если Не ЗначениеЗаполнено(ПользовательДляВыполненияРеглЗаданий) Тогда
			
			Сообщить(НСтр("ru='Не установлена константа ""Пользователь, для выполнения регламентных заданий в файловом режиме"". Периодический обмен выполняться не будет!';uk='Не встановлена константа ""Користувач, для виконання регламентних завдань у файловому режимі"". Періодичний обмін виконуватися не буде!'"), СтатусСообщения.ОченьВажное);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// для помеченой на удаление настройки обмен автоматически не производится
	Если (ПоНастройкеЕстьАвтообмен ИЛИ ИспользоватьРегламентныеЗадания)
		И ПометкаУдаления Тогда
			
		Сообщить(НСтр("ru='Настройка помечена на удаление. Автоматический обмен по ней производится не будет!';uk='Настройку відмічено для вилучення. Автоматичний обмін по ній проводитись не буде!'"), СтатусСообщения.Важное);	
					
	КонецЕсли;
		
	// предложим создать каталог обмена если его не обнаружили
	Если ЭтоНовый()
		И ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс И 
		Не ПустаяСтрока(КаталогОбменаИнформацией) Тогда
		
		// существует ли указанный каталог обмена данными
		РаботаСФайлами.ПроверитьСуществованиеКаталога(КаталогОбменаИнформацией);
		
	КонецЕсли;
	
	// очищаем каталог отслеживания видимости
	Если Не ПриИзмененииВидимостиКаталога
		И Не ПустаяСтрока(КаталогПроверкиДоступности) Тогда
		
		КаталогПроверкиДоступности = "";
		
	КонецЕсли;
	
	Если Не ФлажокВыполнятьАвтообменПриВидимостиКаталога Тогда
		НаличиеКаталогаДляЗапускаАвтообмена = "";
	КонецЕсли;
	
	Если Не ФлажокВыполнятьАвтообменПриНЕВидимостиКаталога Тогда
		ОтсутствиеКаталогаДляЗапускаАвтообмена = "";
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет данные настройки обмена
Процедура ОбновитьДанныеНастройкиОбмена()
	
	ЭтотОбъект.Прочитать();
	ПеречитатьПараметрыНастройки();
		
КонецПроцедуры

Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры
// перечитать
Процедура ДействияФормыПеречитать(Кнопка)
	
	// перечитываем данные не только объекта но и регистра параметров
	// Контактная информация
	Если Модифицированность Тогда
		
		ОтветНаВопрос = Вопрос(НСтр("ru='Данные были изменены. Перечитать данные?';uk='Дані були змінені. Перечитати дані?'"), РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Возврат;			
		КонецЕсли;
		
	КонецЕсли; 	
	
	ОбновитьДанныеНастройкиОбмена();
	
КонецПроцедуры

// при нажатии на "Открытие" у каталога обмена данными
Процедура КаталогОбменаИнформациейОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// при изменении флажка архивация при записи изменений
Процедура ВыполнятьАрхивациюФайловОбменаПриИзменении(Элемент)
	
	УстановитьДоступностьАрхивацииФайловПриОтправке();
	
КонецПроцедуры

// при нажатии на кнопку проверить FTP соединение
Процедура ПроверитьНажатие(Элемент)
	
	РезультатПроверки = ПроцедурыОбменаДанными.ПроверитьНастройкиFTPПодключения(ЭтотОбъект);
	
	Если РезультатПроверки Тогда
		Предупреждение(НСтр("ru='Проверка успешно пройдена !';uk='Перевірка успішно пройдена !'") , 30, "Проверка FTP подключения");
	Иначе
		Предупреждение(НСтр("ru='Возникли ошибки при подключении !';uk='Виникли помилки при підключенні !'"), 30, "Проверка FTP подключения");
	КонецЕсли;
	
КонецПроцедуры


// открытие каталога FTP
Процедура FTPАдресОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	// открываем каталог который в настройках
	ЗапуститьПриложение("ftp://" + ПроцедурыОбменаДанными.НормализоватьFTPАдрес(Элемент.Значение));
	
КонецПроцедуры

// событие при нажатии на кнопку произвести обмен
Процедура ПроизвестиОбменДаннымиДляНастройкиОбмена()
	
	// надо проверить редактируется ли объект
	Если Модифицированность Тогда
		ОтветНаВопрос = Вопрос(НСтр("ru='Данные настроек обмена были изменены. Для проведения обмена данными необходимо сохранить изменения. Сохранить внесенные в настройку обмена изменения?';uk='Дані настройок обміну були змінені. Для проведення обміну даними необхідно зберегти зміни. Зберегти внесені в настройки обміну зміни?'"), РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		ЭтотОбъект.Записать();
	КонецЕсли; 
	
	МассивОбменов = Новый Массив();
	МассивОбменов.Добавить(ЭтотОбъект.Ссылка);

	ПроцедурыОбменаДанными.ПроизвестиСписокОбменовДанными(МассивОбменов, Истина, глЗначениеПеременной("глОбработкаАвтоОбменДанными"), глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"));
	
	// обновляем данные
	ОбновитьДанныеНастройкиОбмена();
	
КонецПроцедуры

// произвести обмен данными
Процедура ДействияФормыПроизвестиОбменДанными(Кнопка)
	
	ПроизвестиОбменДаннымиДляНастройкиОбмена();
	
КонецПроцедуры

// произвести обмен данными
Процедура ДействияФормыДействиеЧтениеИЗаписьСообщений(Кнопка)
	
	ПроизвестиОбменДаннымиДляНастройкиОбмена();
	
КонецПроцедуры

// при изменении доспуности каталога
Процедура КаталогПроверкиДоступностиПриИзменении(Элемент)
	
	ОбработчикПриИзмененииКаталога(Элемент);
			
КонецПроцедуры

// при начале выбора каталога проверки доступности
Процедура КаталогПроверкиДоступностиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// при открытии каталога доступности
Процедура КаталогПроверкиДоступностиОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// при изменении флажка каталога отслеживания изменений видимости
Процедура ПриИзмененииВидимостиКаталогаПриИзменении(Элемент)
	
	УстановитьДоступностьРедактированияКаталогаОтслеживанияВидимости();
	
	Если ПриИзмененииВидимостиКаталога 
		И ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс
		И ПустаяСтрока(КаталогПроверкиДоступности) Тогда
		
		КаталогПроверкиДоступности = КаталогОбменаИнформацией;
		
	КонецЕсли;
	
КонецПроцедуры

// при изменении флажка доп ограничения для автообмена
//Процедура ФлагИспользоватьДополнительныеОграниченияДляЗапускаАвтообменаПриИзменении(Элемент)
//	
//	УстановитьДоступностьЭлементовДопОграниченияДляавтообмена();
//	
//КонецПроцедуры

// при изменении каталога Наличие для автообмена
Процедура НаличиеКаталогаДляЗапускаАвтообменаПриИзменении(Элемент)
	
	ОбработчикПриИзмененииКаталога(Элемент);
	
КонецПроцедуры

// начало выбора каталога Наличие для автообмена
Процедура НаличиеКаталогаДляЗапускаАвтообменаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// открытие каталога Наличие для автообмена
Процедура НаличиеКаталогаДляЗапускаАвтообменаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// при изменении каталога Отсутствие для автообмена
Процедура ОтсутствиеКаталогаДляЗапускаАвтообменаПриИзменении(Элемент)
	
	ОбработчикПриИзмененииКаталога(Элемент);
	
КонецПроцедуры

// начало выбора каталога Отсутствие для автообмена
Процедура ОтсутствиеКаталогаДляЗапускаАвтообменаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// открытие каталога Отсутствие для автообмена
Процедура ОтсутствиеКаталогаДляЗапускаАвтообменаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// при изменении флажка редактирования каталога видимости каталога для выполнения автоообмена
Процедура ФлажокВыполнятьАвтообменПриВидимостиКаталогаПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовДопОграниченияДляавтообмена();
	
	Если ФлажокВыполнятьАвтообменПриВидимостиКаталога 
		И ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс
		И ПустаяСтрока(НаличиеКаталогаДляЗапускаАвтообмена) Тогда
		
		НаличиеКаталогаДляЗапускаАвтообмена = КаталогОбменаИнформацией;
		
	КонецЕсли;
	
КонецПроцедуры

// при изменении флажка редактирования каталога НЕ видимости каталога для выполнения автоообмена
Процедура ФлажокВыполнятьАвтообменПриНЕВидимостиКаталогаПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовДопОграниченияДляавтообмена();
	
КонецПроцедуры

Процедура ОбновитьДоступностьАвтообмена()
	
	ЭлементыФормы.НастройкаРегламентногоЗадания.Доступность = ИспользоватьРегламентныеЗадания;
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Доступность = ИспользоватьРегламентныеЗадания;
	
КонецПроцедуры

Процедура ИспользоватьРегламентныеЗаданияПриИзменении(Элемент)
	
	ОбновитьДоступностьАвтообмена();
	
	Если ИспользоватьРегламентныеЗадания Тогда
		
		НадписьРасписаниеРегламентногоЗаданияНажатие(ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки);
		
	Конецесли;
	
КонецПроцедуры

Процедура НадписьНастройкаРегламентногоЗаданияНажатие(Элемент)
	
	Если мРегламентноеЗадание = Неопределено Тогда
	
		мРегламентноеЗадание = НайтиРегламентноеЗаданиеПоНастройке();
			
	КонецЕсли;
	
	Диалог = ПолучитьОбщуюФорму("ДиалогРегламентногоЗадания");
	Диалог.РегламентноеЗадание = мРегламентноеЗадание;
	Диалог.Наименование = Наименование;
	Диалог.МетаданныеВыбор = "ЗаданиеАвтономноеРешение";
	
	Если Диалог.ОткрытьМодально() <> Истина Тогда
		
		мРегламентноеЗадание = НайтиРегламентноеЗаданиеПоНастройке();
				
	Иначе
		
		Модифицированность = Истина;
		мРегламентноеЗадание = Диалог.РегламентноеЗадание;
				
	КонецЕсли;	
	
	Если мРегламентноеЗадание <> Неопределено Тогда
		
		РегламентноеЗадание = Строка(мРегламентноеЗадание.УникальныйИдентификатор);
		
	КонецЕсли;
	
	УстановитьТекстНадписиРегламентнойНастройки();
	
КонецПроцедуры

Процедура ПротоколПроксиFTPПриИзменении(Элемент)
	
	ПротоколПроксиFTP = СокрЛП(ПротоколПроксиFTP);
	
	Если ПустаяСтрока(ПротоколПроксиFTP) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПротокола = Врег(ПротоколПроксиFTP);
	
	Если НЕ (ИмяПротокола = "HTTP" ИЛИ ИмяПротокола = "HTTPS" ИЛИ ИмяПротокола = "FTP") Тогда
					
		ОбщегоНазначения.СообщитьОбОшибке("Указан не допустимый для использования протокол. 
			|Допустимые для использования протоколы прокси-сервера: http, https и ftp.");
									
	КонецЕсли;				
		
КонецПроцедуры

Процедура НадписьРасписаниеРегламентногоЗаданияНажатие(Элемент)
	
	Если мРегламентноеЗадание = Неопределено Тогда
	
		мРегламентноеЗадание = НайтиРегламентноеЗаданиеПоНастройке();
			
	КонецЕсли;
	
	Если мРегламентноеЗадание = Неопределено Тогда
		
		мРегламентноеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание("ЗаданиеАвтономноеРешение");
				
		мРегламентноеЗадание.Наименование = Наименование;
		мРегламентноеЗадание.Использование = Истина;
	        		
	КонецЕсли;
	
	// редактирование самого расписания непосредственно
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(мРегламентноеЗадание.Расписание);
		
	Если Диалог.ОткрытьМодально() Тогда
		
		мРегламентноеЗадание.Расписание = Диалог.Расписание;
		мРегламентноеЗадание.Записать();
		РегламентноеЗадание = Строка(мРегламентноеЗадание.УникальныйИдентификатор);
		
	Иначе
		
		мРегламентноеЗадание = НайтиРегламентноеЗаданиеПоНастройке();
		
	КонецЕсли;
	
	УстановитьТекстНадписиРегламентнойНастройки();
	
КонецПроцедуры

мОбновлятьСписокАвтоОбмена = Ложь;
мРегламентноеЗадание = Неопределено;

мЖирныйШрифт = Новый Шрифт(,,Истина);
мОбычныйШрифт = Новый Шрифт();
