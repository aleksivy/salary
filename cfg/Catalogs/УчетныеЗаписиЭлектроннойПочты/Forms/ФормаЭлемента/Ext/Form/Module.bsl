
Перем мОбновлятьСписокАвтополучения;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ЗаполнитьСписокКодировок()

	ЭлементыФормы.КодировкаПисемПоУмолчанию.СписокВыбора = УправлениеЭлектроннойПочтой.ПолучитьСписокКодировок();

КонецПроцедуры

Процедура ПроверитьОсновнуюУчетнуюЗаписьПользователя()

	ОснавнаяУчетнаяЗаписьПользователя = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяУчетнаяЗапись");
	Если НЕ ЗначениеЗаполнено(ОснавнаяУчетнаяЗаписьПользователя) Тогда
	
		ОтветНаВопрос = Вопрос(НСтр("ru='Установить данную учетную запись основной для пользователя?';uk='Встановити даний обліковий запис основним для користувача?'"), РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Набор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
		Набор.Отбор.Пользователь.Установить(глЗначениеПеременной("глТекущийПользователь"));
		Набор.Отбор.Настройка.Установить(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяУчетнаяЗапись);
		Набор.Прочитать();
		Набор.Очистить();
		НоваяЗапись = Набор.Добавить();
		НоваяЗапись.Пользователь = глЗначениеПеременной("глТекущийПользователь");
		НоваяЗапись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяУчетнаяЗапись;
		НоваяЗапись.Значение     = Ссылка;
		
		Попытка
			Набор.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, НСтр("ru='Учетная запись не установлена в качестве основной.';uk='Обліковий запис не встановлений у якості основного.'"));
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с
// механизмом автосохранения писем
//
Процедура ДоступностьАвтосохраненияПисем()

	ЭлементыФормы._ИнтервалАвтосохраненияПисем.Доступность	= АвтосохранениеПисем;
	ЭлементыФормы.ИнтервалАвтосохраненияПисем_.Доступность	= АвтосохранениеПисем;
	ЭлементыФормы.ИнтервалАвтосохраненияПисем.Доступность	= АвтосохранениеПисем;

КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с
// механизмом автополучения/отправки писем
//
Процедура ДоступностьПараметровАвтополучения()

	ЭлементыФормы.НадписьИнтервалАвтоПолученияОтправкиСообщенийДо.Доступность		= АвтоПолучениеОтправкаСообщений;
	ЭлементыФормы.ИнтервалАвтоПолученияОтправкиСообщений.Доступность				= АвтоПолучениеОтправкаСообщений;
	ЭлементыФормы.НадписьИнтервалАвтоПолученияОтправкиСообщенийПосле.Доступность	= АвтоПолучениеОтправкаСообщений;
	ЭлементыФормы.НадписьОтветственныйЗаАвтоПолучениеОтправкуСообщений.Доступность	= АвтоПолучениеОтправкаСообщений;
	ЭлементыФормы.ОтветственныйЗаАвтоПолучениеОтправкуСообщений.Доступность			= АвтоПолучениеОтправкаСообщений;
	ЭлементыФормы.НадписьДействиеАвтополученияОтправкиСообщений.Доступность			= АвтоПолучениеОтправкаСообщений;
	ЭлементыФормы.ДействиеАвтополученияОтправкиСообщений.Доступность				= АвтоПолучениеОтправкаСообщений;

КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с
// механизмом атентификации при доступе к SMTP серверу электронной почты
//
Процедура ДоступностьSMTPАутентификации()

	ЭлементыФормы.ПарольSMTP.Доступность	= ТребуетсяSMTPАутентификация;
	ЭлементыФормы.ЛогинSMTP.Доступность		= ТребуетсяSMTPАутентификация;
	ЭлементыФормы.Надпись19.Доступность		= ТребуетсяSMTPАутентификация;
	ЭлементыФормы.Надпись20.Доступность		= ТребуетсяSMTPАутентификация;

КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с
// механизмом автоустановки рассмотренности писем электронной почты
//
Процедура ДоступностьИнтервалаАвтопометкиРассмотрено()

	ЭлементыФормы.ИнтервалАвтоматическойУстановкиОтметкиРассмотрено.Доступность			= АвтоматическаяУстановкаПометкиРассмотрено;
	ЭлементыФормы.НадписьИнтервалАвтоматическойУстановкиОтметкиРассмотрено.Доступность	= АвтоматическаяУстановкаПометкиРассмотрено;

КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с
// механизмом классификации писем по предметам
//
Процедура ДоступностьПредметовПисем()
	
	ЭлементыФормы.ЗаполнятьПустойПредметДляНовыхПисемИзТемыПисьма.Доступность											= ИспользоватьКлассификациюПисемПоПредметам;
	ЭлементыФормы.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьПредмет.Доступность					= ИспользоватьКлассификациюПисемПоПредметам;
	ЭлементыФормы.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьОснованиеНовогоПисьма.Доступность		= ИспользоватьКлассификациюПисемПоПредметам;
	ЭлементыФормы.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьГруппуПисемНовогоПисьма.Доступность	= ИспользоватьКлассификациюПисемПоПредметам;
	
КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с
// механизмом настройки получения/удаления писем с сервера
//
Процедура ДоступностьНастройкиПолученияПисемССервера()

	ЭлементыФормы.УдалятьПисьмаССервераЧерез.Доступность			= ОставлятьКопииСообщенийНаСервере;
	ЭлементыФормы.КоличествоДнейУдаленияПисемССервера.Доступность	= УдалятьПисьмаССервераЧерез;
	ЭлементыФормы.НадписьДней.Доступность							= УдалятьПисьмаССервераЧерез;

КонецПроцедуры

// Процедура управляет доступностью страниц панели.
//
Процедура ДоступностьСтраниц()

	ЭлементыФормы.ПанельНастройки.Страницы.ГруппыПисем.Доступность		= НЕ ЭтоНовый();
	ЭлементыФормы.ПанельНастройки.Страницы.Дополнительно.Доступность	= НЕ ЭтоНовый();
	ЭлементыФормы.ПанельНастройки.Страницы.Фильтры.Доступность			= НЕ ЭтоНовый();

КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с
// механизмом настройкой подписи электронных писем
//
Процедура ДоступностьФлажковИспользованияПодписи()
	
	ЭлементыФормы.ДобавлятьПодписьКОтветамИПересылкам.Доступность	= ДобавлятьПодписьКИсходящимПисьмам;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		
		Если НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
			Предупреждение(НСтр("ru='В настройках учета не установлено использование встроенного почтового клиента.';uk='У настройках обліку не встановлене використання убудованого поштового клієнта.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		ПортSMTP = 25;
		ПортPOP3 = 110;
		ВремяОжиданияСервера = 60;
		ФорматТекстаПисьмаПоУмолчанию = Перечисления.ВидыТекстовЭлектронныхПисем.HTML;
		ИнтервалАвтоматическойУстановкиОтметкиРассмотрено = 5;
		ИнтервалАвтосохраненияПисем = 30;
		
		Если ДоступКУчетнойЗаписи.Найти(глЗначениеПеременной("глТекущийПользователь")) = Неопределено Тогда
			Администратор = ДоступКУчетнойЗаписи.Добавить();
			Администратор.Пользователь		= глЗначениеПеременной("глТекущийПользователь");
			Администратор.Администрирование = Истина;
			Администратор.Запись = Истина;
		КонецЕсли;
			
		КодировкаПисемПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "КодировкаПисьмаЭлектроннойПочтыПоУмолчанию");
		
		НазначениеУчетнойЗаписи = Перечисления.НазначенияУчетнойЗаписи.ПерепискаСКандидатами;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	Если НЕ ЭтоНовый() Тогда
		ЭлементыФормы.Подпись.УстановитьТекст(ТекстПодписи);
	Иначе
		ЭлементыФормы.Подпись.УстановитьТекст("<HTML><HEAD>
											  |<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
											  |<META content=""MSHTML 6.00.2900.2912"" name=GENERATOR></HEAD>
											  |<BODY><DIV></DIV></BODY></HTML>");
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);	
	
	ДоступностьНастройкиПолученияПисемССервера();
	ДоступностьСтраниц();
	ДоступностьПредметовПисем();
	ДоступностьАвтосохраненияПисем();
	ДоступностьФлажковИспользованияПодписи();
	ДоступностьSMTPАутентификации();
	ДоступностьПараметровАвтополучения();
	ДоступностьИнтервалаАвтопометкиРассмотрено();
	
	Для каждого ЭлементНастройкиПорядка Из ЭлементыФормы.ГруппыПисем.НастройкаПорядка Цикл
		ЭлементНастройкиПорядка.Доступность = Ложь;
	КонецЦикла;
	ГруппыПисем.Порядок.Установить("Порядок ВОЗР");
	
	Для каждого ЭлементНастройкиПорядка Из ЭлементыФормы.ФильтрыПисем.НастройкаПорядка Цикл
		ЭлементНастройкиПорядка.Доступность = Ложь;
	КонецЦикла;
	ФильтрыПисем.Порядок.Установить("Порядок ВОЗР");
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	ДоступностьСтраниц();
	
	Если мОбновлятьСписокАвтополучения Тогда
		глЗначениеПеременной("глОбработкаАвтоПолученияОтправкиЭлектронныхПисем").ОбновитьСписокУчетныхЗаписей();
		мОбновлятьСписокАвтополучения = Ложь;
	КонецЕсли;
	
	Если УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписи(глЗначениеПеременной("глТекущийПользователь")).Чтение.НайтиПоЗначению(Ссылка) <> Неопределено Тогда
		ПроверитьОсновнуюУчетнуюЗаписьПользователя();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ)
	
	Если НазначениеУчетнойЗаписи.Пустая() Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указано назначение учетной записи';uk='Не вказано призначення облікового запису'"));
		Возврат;
	КонецЕсли;
	
	ТекстПодписи = ЭлементыФормы.Подпись.ПолучитьТекст();
	
	Если ЭтоНовый() Тогда
		Если АвтоПолучениеОтправкаСообщений И ОтветственныйЗаАвтоПолучениеОтправкуСообщений = глЗначениеПеременной("глТекущийПользователь") Тогда
			мОбновлятьСписокАвтополучения = Истина;
		КонецЕсли;
	Иначе
		Если АвтоПолучениеОтправкаСообщений <> Ссылка.АвтоПолучениеОтправкаСообщений
		 ИЛИ ИнтервалАвтоПолученияОтправкиСообщений <> Ссылка.ИнтервалАвтоПолученияОтправкиСообщений 
		 ИЛИ ДействиеАвтополученияОтправкиСообщений <> Ссылка.ДействиеАвтополученияОтправкиСообщений 
		 ИЛИ (ОтветственныйЗаАвтоПолучениеОтправкуСообщений <> Ссылка.ОтветственныйЗаАвтоПолучениеОтправкуСообщений
		    И (ОтветственныйЗаАвтоПолучениеОтправкуСообщений = глЗначениеПеременной("глТекущийПользователь") ИЛИ Ссылка.ОтветственныйЗаАвтоПолучениеОтправкуСообщений = глЗначениеПеременной("глТекущийПользователь"))) Тогда
			мОбновлятьСписокАвтополучения = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи" формы.
//
Процедура ПриЗаписи(Отказ)
	
	ДоступностьФлажковИспользованияПодписи();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельГруппыПисем.ПереместитьВверх".
//
Процедура КоманднаяПанельГруппыПисемПереместитьВверх(Кнопка)
	
	Если ЭлементыФормы.ГруппыПисем.ТекущиеДанные <> Неопределено Тогда
		ОбщегоНазначения.ИзменитьПорядок(ЭлементыФормы.ГруппыПисем.ТекущиеДанные.Ссылка, "Вверх");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельГруппыПисем.ПереместитьВниз".
//
Процедура КоманднаяПанельГруппыПисемПереместитьВниз(Кнопка)
	
	Если ЭлементыФормы.ГруппыПисем.ТекущиеДанные <> Неопределено Тогда
		ОбщегоНазначения.ИзменитьПорядок(ЭлементыФормы.ГруппыПисем.ТекущиеДанные.Ссылка, "Вниз");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельФильтрыПисем.ПереместитьВверх".
//
Процедура КоманднаяПанельФильтрыПисемПереместитьВверх(Кнопка)
	
	Если ЭлементыФормы.ФильтрыПисем.ТекущиеДанные <> Неопределено Тогда
		ОбщегоНазначения.ИзменитьПорядок(ЭлементыФормы.ФильтрыПисем.ТекущиеДанные.Ссылка, "Вверх");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельФильтрыПисем.ПереместитьВниз".
//
Процедура КоманднаяПанельФильтрыПисемПереместитьВниз(Кнопка)
	
	Если ЭлементыФормы.ФильтрыПисем.ТекущиеДанные <> Неопределено Тогда
		ОбщегоНазначения.ИзменитьПорядок(ЭлементыФормы.ФильтрыПисем.ТекущиеДанные.Ссылка, "Вниз");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" элемента формы "АвтоматическаяУстановкаПометкиРассмотрено".
//
Процедура АвтоматическаяУстановкаПометкиРассмотреноПриИзменении(Элемент)
	
	ДоступностьИнтервалаАвтопометкиРассмотрено();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "АвтосохранениеПисем".
//
Процедура АвтосохранениеПисемПриИзменении(Элемент)
	
	ДоступностьАвтосохраненияПисем();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "ОставлятьКопииСообщенийНаСервере".
//
Процедура ОставлятьКопииСообщенийНаСервереПриИзменении(Элемент)
	
	УдалятьПисьмаССервераЧерез = Элемент.Значение;
	
	ДоступностьНастройкиПолученияПисемССервера();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "УдалятьПисьмаССервераЧерез".
//
Процедура УдалятьПисьмаССервераЧерезПриИзменении(Элемент)
	
	ДоступностьНастройкиПолученияПисемССервера();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "АдресЭлектроннойПочты".
//
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	
	Если ПустаяСтрока(Наименование) Тогда
		Наименование = Элемент.Значение;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "ДобавлятьПодписьКИсходящимПисьмам".
//
Процедура ДобавлятьПодписьКИсходящимПисьмамПриИзменении(Элемент)
	
	ДобавлятьПодписьКОтветамИПересылкам = Элемент.Значение;
	ДоступностьФлажковИспользованияПодписи();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "ТребуетсяSMTPАутентификация".
//
Процедура ТребуетсяSMTPАутентификацияПриИзменении(Элемент)
	
	ДоступностьSMTPАутентификации();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "АвтоПолучениеОтправкаСообщений".
//
Процедура АвтоПолучениеОтправкаСообщенийПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ОтветственныйЗаАвтоПолучениеОтправкуСообщений) Тогда
		ОтветственныйЗаАвтоПолучениеОтправкуСообщений = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИнтервалАвтоПолученияОтправкиСообщений) Тогда
		ИнтервалАвтоПолученияОтправкиСообщений = 15;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДействиеАвтополученияОтправкиСообщений) Тогда
		ДействиеАвтополученияОтправкиСообщений = Перечисления.ВидыДействийАвтоПолученияОтправкиЭлектронныхПисем.ПолучениеИОтправка;
	КонецЕсли;
	
	ДоступностьПараметровАвтополучения();
	
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" элемента формы "ГруппыПисем".
//
Процедура ГруппыПисемПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Наименование.ОтображатьКартинку = Истина;
	Если ДанныеСтроки = Неопределено Тогда
		ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 1;
	Иначе
		Если ЗначениеЗаполнено(ДанныеСтроки.Владелец) Тогда
			Если ЗначениеЗаполнено(ГруппаВходящие) И ГруппаВходящие = ДанныеСтроки.Ссылка Тогда
				ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 3;
			ИначеЕсли ЗначениеЗаполнено(ГруппаИсходящие) И ГруппаИсходящие = ДанныеСтроки.Ссылка Тогда
				ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 2;
			ИначеЕсли ЗначениеЗаполнено(ГруппаУдаленные) И ГруппаУдаленные = ДанныеСтроки.Ссылка Тогда
				ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 0;
			ИначеЕсли ЗначениеЗаполнено(ГруппаЧерновики) И ГруппаЧерновики = ДанныеСтроки.Ссылка Тогда
				ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 5;
			ИначеЕсли ЗначениеЗаполнено(ГруппаНежелательные) И ГруппаНежелательные = ДанныеСтроки.Ссылка Тогда
				ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 7;
			Иначе
				Если ДанныеСтроки.ПометкаУдаления Тогда
					ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 4;
				Иначе
					ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 1;
				КонецЕсли; 
			КонецЕсли; 

		Иначе
			ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииКолонки" элемента формы "ФильтрыПисем".
//
Процедура ФильтрыПисемПриАктивизацииКолонки(Элемент)
	
	Если Элемент.ТекущаяКолонка = Элемент.Колонки.Использование Тогда
		Элемент.СпособРедактирования = СпособРедактированияСписка.ВСписке;
	Иначе
		Элемент.СпособРедактирования = СпособРедактированияСписка.ВДиалоге;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КнопкаПроверитьНастройкиУчетнойЗаписи".
//
Процедура КнопкаПроверитьНастройкиУчетнойЗаписиНажатие(Элемент)
	
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(ЭтотОбъект);
	
	ИнтернетПочта = Новый ИнтернетПочта;
	
	Попытка
		ИнтернетПочта.Подключиться(Профиль);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Проверка = ПроверитьЗаполнениеОбязательныхПолей();
		Если ЗначениеЗаполнено(Проверка) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("" + Проверка);
		КонецЕсли;
		Предупреждение(НСтр("ru='Произошли ошибки при проверке настроек учетной записи."
"Описание ошибки приведено в окне сообщения.';uk='Виникли помилки при перевірці настройок облікового запису."
"Опис помилки наведений у вікні повідомлення.'"));
		Возврат;
	КонецПопытки;
	
	Предупреждение(НСтр("ru='Проверка подключения к почтовому серверу с заданными параметрами выполнена успешно.';uk='Перевірка підключення до поштового сервера із заданими параметрами виконана успішно.'"));
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КнопкаУдалитьПомеченныеНаУдаление".
//
Процедура КнопкаУдалитьПомеченныеНаУдалениеНажатие(Элемент)
	
	ОбработкаУдаления = Обработки.УдалениеПисемЭлектроннойПочты.Создать();
	ОбработкаУдаления.УчетнаяЗапись = Ссылка;
	ФормаПоискаДокументов = ОбработкаУдаления.ПолучитьФорму(, ЭтаФорма);
	ФормаПоискаДокументов.Заголовок = НСтр("ru='Удаление электронных писем, учетная запись ""';uk='Вилучення електронних листів, обліковий запис ""'") + Наименование + " <" + АдресЭлектроннойПочты + ">""";
	ФормаПоискаДокументов.Открыть();
	
КонецПроцедуры

Процедура ДоступКУчетнойЗаписиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Чтение.ОтображатьФлажок = Истина;
	ОформлениеСтроки.Ячейки.Чтение.Флажок = 1;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "ИспользоватьКлассификациюПисемПоПредметам".
//
Процедура ИспользоватьКлассификациюПисемПоПредметамПриИзменении(Элемент)
	
	Если НЕ ИспользоватьКлассификациюПисемПоПредметам Тогда
		ЗаполнятьПустойПредметДляНовыхПисемИзТемыПисьма											= Ложь;
		ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьПредмет					= Ложь;
		ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьОснованиеНовогоПисьма	= Ложь;
		ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьГруппуПисемНовогоПисьма	= Ложь;
	КонецЕсли;
	
	ДоступностьПредметовПисем();
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры


// Сформируем список выбора возможных видов текстов электронных писем
ЭлементыФормы.ФорматТекстаПисьмаПоУмолчанию.СписокВыбора.Добавить(Перечисления.ВидыТекстовЭлектронныхПисем.HTML);
ЭлементыФормы.ФорматТекстаПисьмаПоУмолчанию.СписокВыбора.Добавить(Перечисления.ВидыТекстовЭлектронныхПисем.Текст);

ЗаполнитьСписокКодировок();

ГруппыПисем.Колонки.Добавить("Владелец", Ложь);
ГруппыПисем.Колонки.Добавить("Порядок", Ложь);

ФильтрыПисем.Колонки.Добавить("Порядок", Ложь);

мОбновлятьСписокАвтополучения = Ложь;
