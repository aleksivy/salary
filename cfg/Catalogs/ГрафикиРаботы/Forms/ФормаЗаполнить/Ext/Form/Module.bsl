////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ


Перем мНочные;
Перем мВечерние;
Перем мШаблон;
Перем Графики;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обнуляет реквизиты графика при выборе метода заполнения по шаблону
//
Процедура СброситьНастройкиГрафиков()
	Праздники = Ложь;
	СкользящиеВыходные = Ложь;
	Ночные = Ложь;
	Вечерние = Ложь;
	СокращенноеРабочееВремя = Ложь;
	ГрафикПолногоРабочегоВремени = Справочники.ГрафикиРаботы.ПустаяСсылка();
	ЧасовВНеделе = 40;
	ЭлементыФормы.СуммированныйУчет.Значение = Ложь;
	 
КонецПроцедуры // СброситьНастройкиГрафиков()	

// Процедура устанавливает доступность элементов формы
//
Процедура УстановитьДоступностьЭлементовФормы()
	
	ЭлементыФормы.ПолеСпискаШаблонов.Доступность = ПоШаблону="ПоШаблону";
	ЭлементыФормы.Ночные1.Доступность = ПоШаблону="ПоШаблону";
	ЭлементыФормы.Вечерние1.Доступность = ПоШаблону="ПоШаблону";
	ЭлементыФормы.НадписьДатаНачала.Доступность = ПоШаблону="ПоШаблону" И (ЭлементыФормы.ПолеСпискаШаблонов.ТекущаяСтрока.Значение <> Перечисления.ШаблонЗаполненияГрафикаРаботы.Пятидневка40)
		И (ЭлементыФормы.ПолеСпискаШаблонов.ТекущаяСтрока.Значение <> Перечисления.ШаблонЗаполненияГрафикаРаботы.Шестидневка40);
	ЭлементыФормы.ДатаНачала.Доступность = ПоШаблону="ПоШаблону" И (ЭлементыФормы.ПолеСпискаШаблонов.ТекущаяСтрока.Значение <> Перечисления.ШаблонЗаполненияГрафикаРаботы.Пятидневка40)
	И (ЭлементыФормы.ПолеСпискаШаблонов.ТекущаяСтрока.Значение <> Перечисления.ШаблонЗаполненияГрафикаРаботы.Шестидневка40);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Доступность = ПоШаблону="Вручную";
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыОК.Доступность =  НЕ ПоШаблону="Вручную";
	
	ГрафикСсылка = ВладелецФормы.Ссылка;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГрафикСсылка", ГрафикСсылка);
	Если ПоШаблону = "ПоДополнительномуСпособуЗаполнения" Тогда
	Иначе
		ЭлементыФормы.ПоШаблону.Доступность = Истина;
		ЭлементыФормы.ДополнительныйСпособЗаполнения.Доступность = Истина;
		ЭлементыФормы.НовыйГрафик.Доступность = Истина;
	КонецЕсли;
	
	
КонецПроцедуры

// Функция проверяет правильность заполения графика работы
//
Функция ПроверитьПравильностьЗаполненияГрафика()
	Если (Графики.ВидГрафика = Перечисления.ВидыРабочихГрафиков.Пятидневка
		Или Графики.ВидГрафика = Перечисления.ВидыРабочихГрафиков.Шестидневка)
		И НЕ Графики.ВидГрафика = Перечисления.ВидыРабочихГрафиков.КалендарныеДни
		И НЕ Графики.СуммированныйУчетРабочегоВремени Тогда
		
		ВремяПоПериодамСмены = 0;
		Для Каждого СтрокаПериодов Из Графики.ПериодыСмены Цикл
			ВремяПоПериодамСмены = ВремяПоПериодамСмены + (СтрокаПериодов.ВремяОкончания - СтрокаПериодов.ВремяНачала);
			Если Час(СтрокаПериодов.ВремяОкончания) = 23 и  Минута(СтрокаПериодов.ВремяОкончания) = 59 Тогда
				ВремяПоПериодамСмены = ВремяПоПериодамСмены + 60;
			КонецЕсли;	
		КонецЦикла;
		ВремяПоПериодамСмены = ВремяПоПериодамСмены / 3600;
		Если Графики.ДлительностьРабочейНедели <> ВремяПоПериодамСмены Тогда
			Предупреждение(НСтр("ru='Количество часов в неделе не равно сумме часов по таблице расписания работы!';uk='Кількість годин у тижні не дорівнює сумі годин по таблиці розкладу роботи!'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции // ПроверитьПравильностьЗаполненияГрафика()

// Процедура заполняет список шаблонов для заполнения графика
//
Процедура ЗаполнитьСписокШаблонов()
	
	ЭлементыФормы.ПолеСпискаШаблонов.Значение.Добавить(Перечисления.ШаблонЗаполненияГрафикаРаботы.Пятидневка40, НСтр("ru='Пятидневка (40-час. раб. неделя)';uk=""П'ятиденка (40-год. роб. тиждень)"""));
	ЭлементыФормы.ПолеСпискаШаблонов.Значение.Добавить(Перечисления.ШаблонЗаполненияГрафикаРаботы.Шестидневка40, НСтр("ru='Шестидневка (40-час. раб. неделя)';uk='Шестиденка (40-год. роб. тиждень)'"));
	ЭлементыФормы.ПолеСпискаШаблонов.Значение.Добавить(Перечисления.ШаблонЗаполненияГрафикаРаботы.СуткиЧерезДвое, НСтр("ru='Сутки через двое (40-час. раб. неделя)';uk='Доба через двоє (40-год. роб. тиждень)'"));
	ЭлементыФормы.ПолеСпискаШаблонов.Значение.Добавить(Перечисления.ШаблонЗаполненияГрафикаРаботы.СуткиЧерезТрое, НСтр("ru='Сутки через трое (40-час. раб. неделя)';uk='Доба через три (40-год. роб. тиждень)'"));
	ЭлементыФормы.ПолеСпискаШаблонов.Значение.Добавить(Перечисления.ШаблонЗаполненияГрафикаРаботы.КалендарныеДни, НСтр("ru='Календарные дни';uk='Календарні дні'"));

	ЭлементыФормы.ПолеСпискаШаблонов.ТекущаяСтрока = ЭлементыФормы.ПолеСпискаШаблонов.Значение[0];
КонецПроцедуры

// Процедура устанавливает значение неполного рабочего времени по значениям из элемента справочника Графики
//
Процедура УстановитьЗначениеВидаНеполногоРабочегоВремени()
	Если СокращенноеРабочееВремя Тогда
		Графики.НеполныйРабочийДень = НеполныйРабочийДень;
		Графики.СокращеннаяРабочаяНеделя = НЕ НеполныйРабочийДень;
	Иначе
		Графики.НеполныйРабочийДень = Ложь;
		Графики.СокращеннаяРабочаяНеделя = Ложь;
	КонецЕсли;
	Графики.СокращенноеРабочееВремя = СокращенноеРабочееВремя;
КонецПроцедуры // УстановитьЗначениеВидаНеполногоРабочегоВремени()

// Процедура устанавливает доступность элементов неполного рабочего времени
//
Процедура ДоступностьЭлементовНеполноеРабочееВремя()
	
	ЭлементыФормы.НеполныйРабочийДень.Доступность = СокращенноеРабочееВремя;
	ЭлементыФормы.СокращеннаяРабочаяНеделя.Доступность = СокращенноеРабочееВремя;
	ЭлементыФормы.ПереключательПоТекущемуГрафику.Доступность = СокращенноеРабочееВремя;
	ЭлементыФормы.ПереключательПоУказанномуГрафику.Доступность = СокращенноеРабочееВремя;
		
	Если СокращенноеРабочееВремя Тогда
		
		
	Иначе
		ЭлементыФормы.НеполныйРабочийДень.Значение = Истина;
		ЭлементыФормы.ПереключательПоТекущемуГрафику.Значение = Истина;
		
		ЭлементыФормы.ГрафикПолногоРабочегоВремени.ТолькоПросмотр = Истина;
		ЭлементыФормы.ГрафикПолногоРабочегоВремени.Значение = Справочники.ГрафикиРаботы.ПустаяСсылка();
		ЭлементыФормы.ГрафикПолногоРабочегоВремени.АвтоВыборНезаполненного = Ложь;
		ЭлементыФормы.ГрафикПолногоРабочегоВремени.АвтоОтметкаНезаполненного = Ложь;
		ЭлементыФормы.ГрафикПолногоРабочегоВремени.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	мСокращенноеРабочееВремя = СокращенноеРабочееВремя;
	мГрафикПолногоРабочегоВремени = ГрафикПолногоРабочегоВремени;
	ПереключательПоТекущемуГрафикуПриИзменении(ЭлементыФормы.ПереключательПоТекущемуГрафику);
	ДоступностьСокращатьКалендарныеДни();
	
КонецПроцедуры

Процедура ДоступностьСокращатьКалендарныеДни()
	
	Если СокращенноеРабочееВремя И НЕ НеполныйРабочийДень и НЕ ПереключательПоТекущемуГрафику Тогда
		ЭлементыФормы.СокращатьКалендарныеДни.Доступность = Истина;
	Иначе
		ЭлементыФормы.СокращатьКалендарныеДни.Доступность = Ложь;
		Если СокращатьКалендарныеДни Тогда
			СокращатьКалендарныеДни = Ложь;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	


// Процедура устанавливает вид расписания, в зависимости от указанных значений вечерних, ночных часов и типа графика
//
Процедура УстановитьВидРасписания()
	
	Если ЭлементыФормы.ТипГрафика.Значение = Перечисления.ВидыРабочихГрафиков.Сменный Тогда
		ЭлементыФормы.ПанельРасписание.ТекущаяСтраница = ЭлементыФормы.ПанельРасписание.Страницы.Сменный;
	Иначе
		Если Вечерние = Истина Или Ночные = Истина Тогда
			ЭлементыФормы.ПанельРасписание.ТекущаяСтраница = ЭлементыФормы.ПанельРасписание.Страницы.СУчетомНочных;
		Иначе
			ЭлементыФормы.ПанельРасписание.ТекущаяСтраница = ЭлементыФормы.ПанельРасписание.Страницы.Обычный;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость начала вечерних часов
//
Процедура ВидимостьНачалаВечерних()
	
	ЭлементыФормы.НачалоДневных.Видимость = Вечерние Или Ночные;
	ЭлементыФормы.НадписьНачалоДневныхЧасов.Видимость = Вечерние Или Ночные;
	ЭлементыФормы.НачалоВечерних.Видимость = Вечерние;
	ЭлементыФормы.НадписьНачалоВечернихЧасов.Видимость = Вечерние;
	Если Вечерние Тогда
		Если ЭтаФорма.ВладелецФормы.НачалоВечернихЧасов = Дата("00010101000000") Тогда
			ЭлементыФормы.НачалоВечерних.Значение = Дата(1,1,1,20,0,0);
		КонецЕсли;	
		ЭлементыФормы.ПанельВечерних.Свертка = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ЭлементыФормы.ПанельВечерних.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.НачалоВечерних.Значение = Дата(1,1,1,22,0,0);
	КонецЕсли;

КонецПроцедуры

// Процедура устанавливает видимость начала ночных часов
//
Процедура ВидимостьНачалаНочных()
	ЭлементыФормы.НачалоДневных.Видимость = Вечерние Или Ночные;
	ЭлементыФормы.НадписьНачалоДневныхЧасов.Видимость = Вечерние Или Ночные;
	ЭлементыФормы.НачалоНочных.Видимость = Ночные;
	ЭлементыФормы.НадписьНачалоНочныхЧасов.Видимость = Ночные;
	Если Ночные и не Вечерние Тогда
		НачалоВечерних = НачалоНочных;
	КонецЕсли;
КонецПроцедуры

// Процедура пересчитывать количество часов за день в таблице расписания по часам
//
Процедура ОбновитьИтогоЧасовЗаДень()
	ТекущаяСтрока = ЭлементыФормы.РасписаниеПоЧасам.ТекущиеДанные;
	ТекущаяСтрока.ЧасовЗаДень = ТекущаяСтрока.Окончание - ТекущаяСтрока.Начало;
	Если ТекущаяСтрока.Окончание = Дата(1,1,1, 23,59,0) Тогда
		ТекущаяСтрока.ЧасовЗаДень = ТекущаяСтрока.ЧасовЗаДень + 60;
	КонецЕсли;
	Для НомерПерерыва = 1 По КоличествоПерерывов Цикл
		ТекущаяСтрока.ЧасовЗаДень = ТекущаяСтрока.ЧасовЗаДень 	- (ТекущаяСтрока["ОкончаниеПерерыва" + НомерПерерыва] - ТекущаяСтрока["НачалоПерерыва" + НомерПерерыва]);
	КонецЦикла;
	ТекущаяСтрока.ЧасовЗаДень = ТекущаяСтрока.ЧасовЗаДень / 3600;
КонецПроцедуры // ОбновитьИтогоЧасовЗаДень()

// Процедура заполняет таблицу смен из исходного элемента справочника
Процедура ЗаполнитьСмены()
	РасписаниеСменный.Очистить();
	Для Каждого ИсходнаяСтрокаСмены Из Графики.Смены Цикл
		СтрокаСмены = РасписаниеСменный.Добавить();
		СтрокаСмены.НомерДня = ИсходнаяСтрокаСмены.НомерДня;
		СтрокаСмены.Смена = ИсходнаяСтрокаСмены.Смена;
		ВремяСмены = 0;
		Для Каждого ПериодРаботы Из СтрокаСмены.Смена.ПериодыСмены Цикл
			Если ПериодРаботы.ВремяНачала > ПериодРаботы.ВремяОкончания Тогда
				ВремяСмены = (КонецДня(ПериодРаботы.ВремяНачала) - ПериодРаботы.ВремяНачала)
					+ (ПериодРаботы.ВремяОкончания - НачалоДня(ПериодРаботы.ВремяОкончания))
					+ ВремяСмены;
			Иначе
				ВремяСмены = ПериодРаботы.ВремяОкончания - ПериодРаботы.ВремяНачала + ВремяСмены;
			КонецЕсли;
			
		КонецЦикла;
		СтрокаСмены.ЧасовВСмене =  ВремяСмены/3600;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСмены()	

//Процедура автозаполнения расписания при переходе на последнюю закладку мастера
Процедура ЗаполнитьРасписание(ТипГрафика, УчетВечернихНочных)
	
	РасписаниеСводно.Очистить();
	РасписаниеПоЧасам.Очистить();
	//РасписаниеСменный.Очистить();
	
	Если ТипГрафика <> Перечисления.ВидыРабочихГрафиков.Сменный Тогда
		Если ТипГрафика = Перечисления.ВидыРабочихГрафиков.Пятидневка Тогда
			КоличествоРабочихДней = 5;
		ИначеЕсли ТипГрафика = Перечисления.ВидыРабочихГрафиков.Шестидневка Тогда
			КоличествоРабочихДней = 6;
		ИначеЕсли ТипГрафика = Перечисления.ВидыРабочихГрафиков.КалендарныеДни Тогда
			КоличествоРабочихДней = 7;
		Иначе
			КоличествоРабочихДней = 5;
		КонецЕсли;
		
		
		РасписаниеЗаполняемСводно  = (ТипГрафика = Перечисления.ВидыРабочихГрафиков.Пятидневка 
				Или ТипГрафика = Перечисления.ВидыРабочихГрафиков.КалендарныеДни
				Или ТипГрафика = Перечисления.ВидыРабочихГрафиков.Шестидневка)
				И Не УчетВечернихНочных ;
				
		Если Графики.Ссылка.Пустая() Тогда
			РасписаниеЗаполняемСводноПоОбъекту = РасписаниеЗаполняемСводно;
		Иначе
			Если ТипЗнч(Графики) = Тип("СправочникОбъект.ГрафикиРаботы") Тогда
				СпрОбъект = Графики;
			Иначе
				СпрОбъект = Графики.СправочникОбъект;
			КонецЕсли;
			РасписаниеЗаполняемСводноПоОбъекту = (СпрОбъект.ВидГрафика = Перечисления.ВидыРабочихГрафиков.Пятидневка 
				Или СпрОбъект.ВидГрафика = Перечисления.ВидыРабочихГрафиков.КалендарныеДни
				Или СпрОбъект.ВидГрафика = Перечисления.ВидыРабочихГрафиков.Шестидневка)
				И Не СпрОбъект.УчитыватьВечерниеЧасы И НЕ СпрОбъект.УчитыватьНочныеЧасы;

		КонецЕсли;
			
					
				
		Если РасписаниеЗаполняемСводно И Графики.ПериодыСмены.Количество() = 7 Тогда
			Для Каждого СтрокаПериодыСмены Из Графики.ПериодыСмены Цикл
				НоваяСтрока = РасписаниеСводно.Добавить();
				НоваяСтрока.ДеньНедели = СтрокаПериодыСмены.ДеньНедели;
				НоваяСтрока.ЧасовЗаДень = (СтрокаПериодыСмены.ВремяОкончания - СтрокаПериодыСмены.ВремяНачала) / 3600;
			КонецЦикла;
			Если РасписаниеСводно.Итог("ЧасовЗаДень") = ЧасовВНеделе Тогда 
				Возврат;
			Иначе
				РасписаниеСводно.Очистить();
			КонецЕсли;
		ИначеЕсли Не РасписаниеЗаполняемСводно 
			И РасписаниеЗаполняемСводноПоОбъекту = РасписаниеЗаполняемСводно
			//И Графики.ПериодыСмены.Количество() >= 7 
			Тогда
			РасписаниеРаботы = Графики.ПериодыСмены.Выгрузить();
			
			СуммаЧасов = 0;
			Для Каждого СтрокаРасписания Из РасписаниеРаботы Цикл
				СуммаЧасов = СуммаЧасов + (СтрокаРасписания.ВремяОкончания - СтрокаРасписания.ВремяНачала) / 3600;
				Если Минута(СтрокаРасписания.ВремяОкончания) = 59 И Час(СтрокаРасписания.ВремяОкончания) = 23 Тогда
					СуммаЧасов = СуммаЧасов + 1/60;
				КонецЕсли;	
			КонецЦикла;
			СуммаЧасов = Окр(СуммаЧасов, 2);
			Если СуммаЧасов = ЧасовВНеделе Тогда
				
				ПредДень = 0;
				НоваяСтрока = 0;
				НомерСтрокиДня = 0;
				СуммаЧасовПоТаблице = 0;
				Для Каждого СтрокаРасписания Из РасписаниеРаботы Цикл
					Если ПредДень = 0 Или ПредДень <> СтрокаРасписания.ДеньНедели Тогда
						Если НоваяСтрока <> 0 Тогда
							Если Минута(НоваяСтрока.Окончание) = 59 И Час(НоваяСтрока.Окончание) = 23 Тогда
								НоваяСтрока.ЧасовЗаДень = Окр((60+(НоваяСтрока.Окончание - НоваяСтрока.Начало 
								- (НоваяСтрока.ОкончаниеПерерыва1 - НоваяСтрока.НачалоПерерыва1)
								- (НоваяСтрока.ОкончаниеПерерыва2 - НоваяСтрока.НачалоПерерыва2)
								- (НоваяСтрока.ОкончаниеПерерыва3 - НоваяСтрока.НачалоПерерыва3)
								- (НоваяСтрока.ОкончаниеПерерыва4 - НоваяСтрока.НачалоПерерыва4)
								- (НоваяСтрока.ОкончаниеПерерыва5 - НоваяСтрока.НачалоПерерыва5))) / 3600, 2);
							Иначе	
								НоваяСтрока.ЧасовЗаДень = Окр((НоваяСтрока.Окончание - НоваяСтрока.Начало 
								- (НоваяСтрока.ОкончаниеПерерыва1 - НоваяСтрока.НачалоПерерыва1)
								- (НоваяСтрока.ОкончаниеПерерыва2 - НоваяСтрока.НачалоПерерыва2)
								- (НоваяСтрока.ОкончаниеПерерыва3 - НоваяСтрока.НачалоПерерыва3)
								- (НоваяСтрока.ОкончаниеПерерыва4 - НоваяСтрока.НачалоПерерыва4)
								- (НоваяСтрока.ОкончаниеПерерыва5 - НоваяСтрока.НачалоПерерыва5)) / 3600, 2);
							КонецЕсли;
							СуммаЧасовПоТаблице = НоваяСтрока.ЧасовЗаДень + СуммаЧасовПоТаблице;
						КонецЕсли;
						НоваяСтрока = РасписаниеПоЧасам.Добавить();
						НоваяСтрока.ДеньНедели = СтрокаРасписания.ДеньНедели;
						НомерСтрокиДня = 0;
					КонецЕсли;
					
					Если НомерСтрокиДня = 0 Тогда
						НоваяСтрока.Начало = СтрокаРасписания.ВремяНачала;
						НоваяСтрока.Окончание = СтрокаРасписания.ВремяОкончания;
					ИначеЕсли НомерСтрокиДня <= 5 Тогда
						НоваяСтрока["НачалоПерерыва"+ Строка(НомерСтрокиДня)] = НоваяСтрока.Окончание;
						НоваяСтрока["ОкончаниеПерерыва" + Строка(НомерСтрокиДня)] = СтрокаРасписания.ВремяНачала;
						НоваяСтрока.Окончание = СтрокаРасписания.ВремяОкончания;
					КонецЕсли;
					
					НомерСтрокиДня = НомерСтрокиДня + 1;
					ПредДень = СтрокаРасписания.ДеньНедели;
				КонецЦикла;
				Если Минута(НоваяСтрока.Окончание) = 59 И Час(НоваяСтрока.Окончание) = 23 Тогда
					НоваяСтрока.ЧасовЗаДень = Окр((60+(НоваяСтрока.Окончание - НоваяСтрока.Начало 
					- (НоваяСтрока.ОкончаниеПерерыва1 - НоваяСтрока.НачалоПерерыва1)
					- (НоваяСтрока.ОкончаниеПерерыва2 - НоваяСтрока.НачалоПерерыва2)
					- (НоваяСтрока.ОкончаниеПерерыва3 - НоваяСтрока.НачалоПерерыва3)
					- (НоваяСтрока.ОкончаниеПерерыва4 - НоваяСтрока.НачалоПерерыва4)
					- (НоваяСтрока.ОкончаниеПерерыва5 - НоваяСтрока.НачалоПерерыва5))) / 3600, 2);
				Иначе
					НоваяСтрока.ЧасовЗаДень = Окр((НоваяСтрока.Окончание - НоваяСтрока.Начало 
					- (НоваяСтрока.ОкончаниеПерерыва1 - НоваяСтрока.НачалоПерерыва1)
					- (НоваяСтрока.ОкончаниеПерерыва2 - НоваяСтрока.НачалоПерерыва2)
					- (НоваяСтрока.ОкончаниеПерерыва3 - НоваяСтрока.НачалоПерерыва3)
					- (НоваяСтрока.ОкончаниеПерерыва4 - НоваяСтрока.НачалоПерерыва4)
					- (НоваяСтрока.ОкончаниеПерерыва5 - НоваяСтрока.НачалоПерерыва5)) / 3600, 2);
				КонецЕсли;
				СуммаЧасовПоТаблице = Окр(НоваяСтрока.ЧасовЗаДень + СуммаЧасовПоТаблице, 2);
				Если СуммаЧасовПоТаблице = ЧасовВНеделе Тогда
					Возврат;
				Иначе
					РасписаниеПоЧасам.Очистить();
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
			
		Для ДеньНедели = 0 По 6 Цикл
			
			Если РасписаниеЗаполняемСводно Тогда
				НоваяСтрока = РасписаниеСводно.Добавить();
			Иначе
				
				НоваяСтрока = РасписаниеПоЧасам.Добавить();
			КонецЕсли;
			НазваниеДня = Перечисления.ДниНедели.Получить(ДеньНедели);
			НоваяСтрока.Установить(0, НазваниеДня);
			Если ДеньНедели <= КоличествоРабочихДней-1 
				ИЛИ ТипГрафика = Перечисления.ВидыРабочихГрафиков.КалендарныеДни Тогда
				НоваяСтрока.ЧасовЗаДень = Цел(ЧасовВНеделе/КоличествоРабочихДней) + ?(ДеньНедели < ЧасовВНеделе%КоличествоРабочихДней, 1, 0);
			КонецЕсли;
			
			Если Не РасписаниеЗаполняемСводно И НоваяСтрока.ЧасовЗаДень > 0 Тогда
				НоваяСтрока.Начало = Дата(1,1,1, 9,0,0);
				НоваяСтрока.НачалоПерерыва1 = Дата(1,1,1, 13,0,0);
				НоваяСтрока.ОкончаниеПерерыва1 = Дата(1,1,1, 14,0,0);
				НоваяСтрока.Окончание = НоваяСтрока.Начало + (НоваяСтрока.ЧасовЗаДень+1)*3600;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливат доступность кнопок "Назад", "Далее"
//
Процедура ДоступностьКнопокНазадДалее(Элемент)
	
	Если Элемент.Имя = "Страница1" Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Ложь;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Доступность = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыОК.Доступность = Ложь;
	ИначеЕсли
		Элемент.Имя = "Страница3" Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Доступность = Ложь;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыОК.Доступность = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыОК.КнопкаПоУмолчанию = Истина;
	Иначе
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Доступность = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыОК.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет строку, содержащую описание текущего графика
//
Процедура ОбновитьИнформационнуюСтроку()
	ИнфСтрока = "";
	Если Графики.ВидГрафика = Перечисления.ВидыРабочихГрафиков.КалендарныеДни Тогда
		ИнфСтрока = ИнфСтрока + НСтр("ru='График по календарным дням. ';uk='Графік по календарним дням. '");
	ИначеЕсли Графики.ВидГрафика = Перечисления.ВидыРабочихГрафиков.Пятидневка 
		И Графики.ПериодыСмены.Количество() = 5
		И Графики.ПериодыСмены[0].ДеньНедели = Перечисления.ДниНедели.Понедельник И Графики.ПериодыСмены[0].ВремяНачала = Дата(1,1,1,8,0,0) И Графики.ПериодыСмены[0].ВремяОкончания = Дата(1,1,1,16,0,0)
		И Графики.ПериодыСмены[1].ДеньНедели = Перечисления.ДниНедели.Вторник И Графики.ПериодыСмены[1].ВремяНачала = Дата(1,1,1,8,0,0) И Графики.ПериодыСмены[1].ВремяОкончания = Дата(1,1,1,16,0,0)
		И Графики.ПериодыСмены[2].ДеньНедели = Перечисления.ДниНедели.Среда И Графики.ПериодыСмены[2].ВремяНачала = Дата(1,1,1,8,0,0) И Графики.ПериодыСмены[2].ВремяОкончания = Дата(1,1,1,16,0,0)
		И Графики.ПериодыСмены[3].ДеньНедели = Перечисления.ДниНедели.Четверг И Графики.ПериодыСмены[3].ВремяНачала = Дата(1,1,1,8,0,0) И Графики.ПериодыСмены[3].ВремяОкончания = Дата(1,1,1,16,0,0)
		И Графики.ПериодыСмены[4].ДеньНедели = Перечисления.ДниНедели.Пятница И Графики.ПериодыСмены[4].ВремяНачала = Дата(1,1,1,8,0,0) И Графики.ПериодыСмены[4].ВремяОкончания = Дата(1,1,1,16,0,0) Тогда
		ИнфСтрока = ИнфСтрока + НСтр("ru='График пятидневка, 40-часовая рабочая неделя, выходные суббота и воскресенье. ';uk=""Графік п'ятиденка, 40-годинний робочий тиждень, вихідні субота і неділя. """);
		
	ИначеЕсли Графики.ВидГрафика = Перечисления.ВидыРабочихГрафиков.Пятидневка Тогда
		ИнфСтрока = ИнфСтрока + НСтр("ru='Вид графика - Пятидневка. ';uk=""Вид графіка - П'ятиденка. """);
	ИначеЕсли Графики.ВидГрафика = Перечисления.ВидыРабочихГрафиков.Шестидневка Тогда
		ИнфСтрока = ИнфСтрока + НСтр("ru='Вид графика - Шестидневка. ';uk='Вид графіка - Шестиденка. '");	
	ИначеЕсли Графики.Смены.Количество() = 3 
		И Графики.Смены[0].Смена = Справочники.Смены.Смена24Часа
		И Графики.Смены[1].Смена = Справочники.Смены.ПустаяСсылка()
		И Графики.Смены[2].Смена = Справочники.Смены.ПустаяСсылка() Тогда
		ИнфСтрока = ИнфСтрока + НСтр("ru='График сутки через двое. ';uk='Графік доба через двоє. '");	
		ИнфСтрока = ИнфСтрока + НСтр("ru='Дата отсчета - ';uk='Дата відліку - '") + Формат(Графики.ДатаОтсчета, "ДЛФ=Д") + ".";
	ИначеЕсли Графики.Смены.Количество() = 4 
		И Графики.Смены[0].Смена = Справочники.Смены.Смена24Часа
		И Графики.Смены[1].Смена = Справочники.Смены.ПустаяСсылка()
		И Графики.Смены[2].Смена = Справочники.Смены.ПустаяСсылка()
		И Графики.Смены[3].Смена = Справочники.Смены.ПустаяСсылка() Тогда
		ИнфСтрока = ИнфСтрока + НСтр("ru='График сутки через трое. ';uk='Графік доба через троє. '");		
		ИнфСтрока = ИнфСтрока + НСтр("ru='Дата отсчета - ';uk='Дата відліку - '") + Формат(Графики.ДатаОтсчета, "ДЛФ=Д") + ".";
	ИначеЕсли Графики.ВидГрафика = Перечисления.ВидыРабочихГрафиков.Сменный Тогда
		ИнфСтрока = ИнфСтрока + НСтр("ru='Вид графика -  Сменный. ';uk='Вид графіка - Змінний. '");
		ИнфСтрока = ИнфСтрока + НСтр("ru='Дата отсчета - ';uk='Дата відліку - '") + Формат(Графики.ДатаОтсчета, "ДЛФ=Д") + ".";
	Иначе	
		ИнфСтрока = ИнфСтрока + НСтр("ru='Вид графика - не заполнен. ';uk='Вид графіка - не заповнений. '");
	КонецЕсли;

	Если Графики.СуммированныйУчетРабочегоВремени Тогда
		ИнфСтрока = ИнфСтрока + НСтр("ru='Суммированный учет рабочего времени. ';uk='Підсумований облік робочого часу. '");		
	КонецЕсли;
	Если Графики.СокращенноеРабочееВремя Тогда
		ИнфСтрока = ИнфСтрока + НСтр("ru='Сокращенное рабочее время. ';uk='Скорочений робочий час. '");		
	КонецЕсли;
	Если Графики.СокращеннаяРабочаяНеделя Тогда
		ИнфСтрока = ИнфСтрока + НСтр("ru='Неполная рабочая неделя. ';uk='Неповний робочий тиждень. '");		
	КонецЕсли;
	Если Графики.НеполныйРабочийДень Тогда
		ИнфСтрока = ИнфСтрока + НСтр("ru='Неполный рабочий день. ';uk='Неповний робочий день. '");		
	КонецЕсли;
	Если НЕ Графики.ГрафикПолногоРабочегоВремени.Пустая() Тогда
		ИнфСтрока = ИнфСтрока + НСтр("ru='График полного рабочего времени: ';uk='Графік повного робочого часу: '") + Графики.ГрафикПолногоРабочегоВремени + ". ";		
	КонецЕсли;
	Если Графики.НачалоДневныхЧасов <> Дата(1,1,1, 0,0,0)
		И (Графики.УчитыватьНочныеЧасы ИЛИ Графики.УчитыватьВечерниеЧасы) Тогда
		ИнфСтрока = ИнфСтрока + НСтр("ru='Начало дневных часов: ';uk='Початок денних годин: '") + Формат(Графики.НачалоДневныхЧасов, "ДФ=Ч:мм") + ". ";		
	КонецЕсли;
	Если Графики.НачалоВечернихЧасов <> Дата(1,1,1, 0,0,0) 
		И Графики.УчитыватьВечерниеЧасы Тогда
		ИнфСтрока = ИнфСтрока + НСтр("ru='Начало вечерних часов: ';uk='Початок вечірніх годин: '") + Формат(Графики.НачалоВечернихЧасов, "ДФ=Ч:мм") + ". ";		
	КонецЕсли;
	Если Графики.НачалоНочныхЧасов <> Дата(1,1,1, 0,0,0) 
		И Графики.УчитыватьНочныеЧасы Тогда
		ИнфСтрока = ИнфСтрока + НСтр("ru='Начало ночных часов: ';uk='Початок нічних годин: '") + Формат(Графики.НачалоНочныхЧасов, "ДФ=Ч:мм") + ". ";		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьИнформационнуюСтроку()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	Графики = ЭтаФорма.ВладелецФормы;
	ЗаполнитьСписокШаблонов();
	//Заполняем поля формы значениями реквизитов справочника
	Если Графики.ЭтоНовый() Тогда
		ПоШаблону = "ПоШаблону";
		Элементыформы.ПанельЗаполнить.ТекущаяСтраница = ЭлементыФормы.ПанельЗаполнить.Страницы.Страница1;
		ЭлементыФормы.ДатаНачала.Значение = НачалоГода(ТекущаяДата());
		ЭлементыФормы.ТипГрафика.Значение = Перечисления.ВидыРабочихГрафиков.Пятидневка;
		ЭлементыФормы.ЧасовВНеделе.Значение = 40;
		ЭлементыФормы.СуммированныйУчет.Значение = Ложь;
		Элементыформы.УчитыватьПраздники.Значение = Истина;
		ЭлементыФормы.КоличествоПерерывов.Значение = 1;
		ЭлементыФормы.НачалоДневных.Значение = Дата(1,1,1,6,0,0);
		ЭлементыФормы.НачалоВечерних.Значение = Дата(1,1,1,20,0,0);
		ЭлементыФормы.НачалоНочных.Значение = Дата(1,1,1,22,0,0);
		ЭлементыФормы.ПанельВечерних.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ОсновныеДействияФормы.Видимость = Истина;
		ЭлементыФормы.КоманднаяПанельЗаполнения.Видимость = Ложь;
	Иначе
		Если ОткрыватьНастройки Тогда
			Элементыформы.ПанельЗаполнить.ТекущаяСтраница = ЭлементыФормы.ПанельЗаполнить.Страницы.Страница1;
			ЭлементыФормы.ОсновныеДействияФормы.Видимость = Истина;
			ЭлементыФормы.КоманднаяПанельЗаполнения.Видимость = Ложь;
		Иначе
			Элементыформы.ПанельЗаполнить.ТекущаяСтраница = ЭлементыФормы.ПанельЗаполнить.Страницы.Страница0;
			ЭлементыФормы.ОсновныеДействияФормы.Видимость = Ложь;
			ЭлементыФормы.КоманднаяПанельЗаполнения.Видимость = Истина;
		КонецЕсли;
		
		Праздники = Графики.УчитыватьПраздники;
		
		Если ЗначениеЗаполнено(Графики.ШаблонЗаполнения) Тогда
			ПоШаблону = "ПоШаблону";
			Если Графики.ШаблонЗаполнения = Перечисления.ШаблонЗаполненияГрафикаРаботы.Пятидневка40
				ИЛИ Графики.ШаблонЗаполнения = Перечисления.ШаблонЗаполненияГрафикаРаботы.Шестидневка40 Тогда
				Праздники = Истина;
			ИначеЕсли Графики.ШаблонЗаполнения = Перечисления.ШаблонЗаполненияГрафикаРаботы.КалендарныеДни Тогда
				Праздники = Ложь;
			КонецЕсли;
			ЭлементыФормы.ПолеСпискаШаблонов.ТекущаяСтрока = ПолеСпискаШаблонов.НайтиПоЗначению(Графики.ШаблонЗаполнения);
		Иначе
			
			ПоШаблону = "Вручную";
		КонецЕсли;
		Ночные = Графики.УчитыватьНочныеЧасы;
		Вечерние = Графики.УчитыватьВечерниеЧасы;
		
		
		
		СокращенноеРабочееВремя = Графики.СокращенноеРабочееВремя;
		
		НеполныйРабочийДень = Графики.НеполныйРабочийДень;
		ГрафикПолногоРабочегоВремени = Графики.ГрафикПолногоРабочегоВремени;
		ПереключательПоТекущемуГрафику = Графики.ГрафикПолногоРабочегоВремени.Пустая() ИЛИ (ГрафикПолногоРабочегоВремени = Графики.Ссылка);
		СокращатьКалендарныеДни = Графики.СокращатьКалендарныеДни;
		
		ДатаОтсчета = Графики.ДатаОтсчета;
		
		ЭлементыФормы.ТипГрафика.Значение = Графики.ВидГрафика;
		
		ЭлементыФормы.ЧасовВНеделе.Значение = Графики.ДлительностьРабочейНедели;
		ЭлементыФормы.СуммированныйУчет.Значение = Графики.СуммированныйУчетРабочегоВремени;
		
		ЭлементыФормы.НачалоДневных.Значение = Дата(1,1,1,6,0,0);
		ЭлементыФормы.НачалоВечерних.Значение = Дата(1,1,1,20,0,0);
		ЭлементыФормы.НачалоНочных.Значение = Дата(1,1,1,22,0,0);
		
		ЭлементыФормы.КоличествоПерерывов.Значение = 1;
		ЭлементыФормы.НачалоДневных.Значение = Графики.НачалоДневныхЧасов;
		ЭлементыФормы.НачалоВечерних.Значение = Графики.НачалоВечернихЧасов;
		ЭлементыФормы.НачалоНочных.Значение = Графики.НачалоНочныхЧасов;
		
		ОбновитьИнформационнуюСтроку();
	КонецЕсли;
	
	НомерТекущегоГода = Графики.НомерТекущегоГода;
	ДоступностьКнопокНазадДалее(ЭлементыФормы.ПанельЗаполнить.ТекущаяСтраница);
	ЗаполнитьСмены();
	УстановитьДоступностьЭлементовФормы();
	ДоступностьЭлементовНеполноеРабочееВремя();
	ВидимостьНачалаВечерних();
	ВидимостьНачалаНочных();
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ОсновныеДействияФормыПереключениеСтраниц(Кнопка)
	
	ТекущаяЗакладка = ЭлементыФормы.ПанельЗаполнить.Страницы.Индекс(ЭлементыФормы.ПанельЗаполнить.ТекущаяСтраница);
	Если Кнопка = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее Тогда
		Если ТекущаяЗакладка = 1 
			И ЧасовВНеделе = 0 Тогда
			Предупреждение(НСтр("ru='Количество часов в неделе должно быть заполнено!';uk='Кількість годин у тижні має бути заповнена!'"));
			Возврат;
		КонецЕсли;
		СледующаяЗакладка = ЭлементыФормы.ПанельЗаполнить.Страницы.Получить(ТекущаяЗакладка+1);
	Иначе
		Если ТекущаяЗакладка > 0 Тогда
			СледующаяЗакладка = ЭлементыФормы.ПанельЗаполнить.Страницы.Получить(ТекущаяЗакладка-1);
		КонецЕсли;
	КонецЕсли;
	ЭлементыФормы.ПанельЗаполнить.ТекущаяСтраница = СледующаяЗакладка;
	ДоступностьКнопокНазадДалее(СледующаяЗакладка);
	
	Если СледующаяЗакладка.Имя = "Страница3" И СледующаяЗакладка.Раскрыта Тогда
		УстановитьВидРасписания();
		УчетВечернихНочных = Вечерние Или Ночные;
		ЗаполнитьРасписание(ТипГрафика, УчетВечернихНочных);
	ИначеЕсли СледующаяЗакладка.Имя = "Страница0" И СледующаяЗакладка.Раскрыта Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Видимость = Ложь;
		ЭлементыФормы.КоманднаяПанельЗаполнения.Видимость = Истина;
		ОбновитьИнформационнуюСтроку();
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОсновныеДействияФормыОК(Кнопка)
	Графики = ЭтаФорма.ВладелецФормы.ЭтотОбъект;
	
	Графики.УчитыватьВечерниеЧасы = Вечерние;
	Графики.УчитыватьНочныеЧасы = Ночные;
	
	Если ПоШаблону="ПоШаблону" Тогда
		Графики.НачалоДневныхЧасов = Дата(1,1,1,8,0,0);
		Графики.НачалоВечернихЧасов = Дата(1,1,1,20,0,0);
		Графики.НачалоНочныхЧасов = Дата(1,1,1,22,0,0);
		Графики.ДлительностьРабочейНедели = 40;
		Графики.ГрафикПолногоРабочегоВремени = Справочники.ГрафикиРаботы.ПустаяСсылка();
		Графики.НеполныйРабочийДень = Ложь;
		Графики.СокращеннаяРабочаяНеделя = Ложь;
		Графики.СокращенноеРабочееВремя = Ложь;
		Графики.СуммированныйУчетРабочегоВремени = Ложь;
		Графики.СокращатьКалендарныеДни = Ложь;
		
		Если ЭлементыФормы.ПолеСпискаШаблонов.ТекущаяСтрока.Значение = Перечисления.ШаблонЗаполненияГрафикаРаботы.Пятидневка40 Тогда
			Графики.УчитыватьПраздники = Истина;
			Графики.ЗаполнитьГрафикПоПятидневка40();
			
		ИначеЕсли ЭлементыФормы.ПолеСпискаШаблонов.ТекущаяСтрока.Значение = Перечисления.ШаблонЗаполненияГрафикаРаботы.Шестидневка40 Тогда
			Графики.УчитыватьПраздники = Истина;
			Графики.ЗаполнитьГрафикПоШестидневка40();
			
		ИначеЕсли ЭлементыФормы.ПолеСпискаШаблонов.ТекущаяСтрока.Значение = Перечисления.ШаблонЗаполненияГрафикаРаботы.СуткиЧерезДвое Тогда
			Графики.ВидГрафика = Перечисления.ВидыРабочихГрафиков.Сменный;
			Графики.УчитыватьПраздники = Ложь;
			Графики.ШаблонЗаполнения = Перечисления.ШаблонЗаполненияГрафикаРаботы.СуткиЧерезДвое;
			Графики.Смены.Очистить();
			Смена = Графики.Смены.Добавить();
			Смена.НомерДня = 1;
			Смена.Смена = Справочники.Смены.Смена24часа;
			Смена = Графики.Смены.Добавить();
			Смена.НомерДня = 2;
			Смена = Графики.Смены.Добавить();
			Смена.НомерДня = 3;
			
		ИначеЕсли ЭлементыФормы.ПолеСпискаШаблонов.ТекущаяСтрока.Значение = Перечисления.ШаблонЗаполненияГрафикаРаботы.СуткиЧерезТрое Тогда
			Графики.ВидГрафика = Перечисления.ВидыРабочихГрафиков.Сменный;
			Графики.УчитыватьПраздники = Ложь;
			Графики.ШаблонЗаполнения = Перечисления.ШаблонЗаполненияГрафикаРаботы.СуткиЧерезТрое;
			Графики.Смены.Очистить();
			Смена = Графики.Смены.Добавить();
			Смена.НомерДня = 1;
			Смена.Смена = Справочники.Смены.Смена24Часа;
			Смена = Графики.Смены.Добавить();
			Смена.НомерДня = 2;
			Смена = Графики.Смены.Добавить();
			Смена.НомерДня = 3;
			Смена = Графики.Смены.Добавить();
			Смена.НомерДня = 4;
		ИначеЕсли ЭлементыФормы.ПолеСпискаШаблонов.ТекущаяСтрока.Значение = Перечисления.ШаблонЗаполненияГрафикаРаботы.КалендарныеДни Тогда
			Графики.ВидГрафика = Перечисления.ВидыРабочихГрафиков.КалендарныеДни;
			Графики.УчитыватьПраздники = Ложь;
			Графики.ШаблонЗаполнения = Перечисления.ШаблонЗаполненияГрафикаРаботы.КалендарныеДни;
			Графики.ДлительностьРабочейНедели = 56;
			Графики.ПервыйВыходной = Перечисления.ДниНедели.ПустаяСсылка();
			Графики.ВторойВыходной = Перечисления.ДниНедели.ПустаяСсылка();
			Графики.ПериодыСмены.Очистить();
			Для ИндексДня = 0 По 6 Цикл
				Смена = Графики.ПериодыСмены.Добавить();
				Смена.ВремяНачала = Дата(1,1,1,8,0,0);
				Смена.ВремяОкончания = Дата(1,1,1,16,0,0);
				Смена.ДеньНедели = Перечисления.ДниНедели[ИндексДня];
			КонецЦикла;
		КонецЕсли;
		
		
	ИначеЕсли ПоШаблону="ПоДополнительномуСпособуЗаполнения" Тогда
		Графики.УчитыватьПраздники = Ложь;
		Графики.ШаблонЗаполнения = Перечисления.ШаблонЗаполненияГрафикаРаботы.ПустаяСсылка();
		
	Иначе
		Графики.ШаблонЗаполнения = Перечисления.ШаблонЗаполненияГрафикаРаботы.ПустаяСсылка();
		Если Праздники Тогда
			Графики.ПервыйВыходной = Перечисления.ДниНедели.Суббота;
			Графики.ВторойВыходной = Перечисления.ДниНедели.Воскресенье;
		КонецЕсли;
		Графики.ПериодыСмены.Очистить();
		Для Каждого СтрокаСводногоРасписания Из РасписаниеСводно Цикл
			ПериодСмены = Графики.ПериодыСмены.Добавить();
			ПериодСмены.ДеньНедели = СтрокаСводногоРасписания.ДеньНедели;
			ПериодСмены.ВремяНачала = НачалоДневных;
			ПериодСмены.ВремяОкончания = НачалоДневных + СтрокаСводногоРасписания.ЧасовЗаДень*3600;
		КонецЦикла;
		
		Если РасписаниеСменный.Количество() > 0 Тогда
			Графики.Смены.Очистить();
			Для Каждого СтрокаСмена Из РасписаниеСменный Цикл
				Смена = Графики.Смены.Добавить();
				Смена.НомерДня = СтрокаСмена.НомерДня;
				Смена.Смена = СтрокаСмена.Смена;
			КонецЦикла;
			
		КонецЕсли;
		
		Если РасписаниеПоЧасам.Количество() > 0 Тогда
			Графики.ПериодыСмены.Очистить();
			ТаблицаНачалаПериодов = Новый ТаблицаЗначений;
			ТаблицаОкончанияПериодов = Новый ТаблицаЗначений;
			ТаблицаНачалаПериодов.Колонки.Добавить("Начало");
			ТаблицаОкончанияПериодов.Колонки.Добавить("Окончание");
			
			Для Каждого СтрокаПоЧасам Из РасписаниеПоЧасам Цикл
				ТаблицаНачалаПериодов.Очистить();
				ТаблицаОкончанияПериодов.Очистить();
				ТаблицаНачалаПериодов.Добавить().Начало = СтрокаПоЧасам.Начало;
				ТаблицаОкончанияПериодов.Добавить().Окончание = СтрокаПоЧасам.Окончание;
				Для НомерПерерыва = 1 По КоличествоПерерывов Цикл
					НачалоПерерыва = СтрокаПоЧасам["НачалоПерерыва"+НомерПерерыва];
					ОкончаниеПерерыва = СтрокаПоЧасам["ОкончаниеПерерыва"+НомерПерерыва];
					Если НачалоПерерыва <> Дата(1,1,1)
						И ОкончаниеПерерыва <> Дата(1,1,1) Тогда
						
						Если НачалоПерерыва > ОкончаниеПерерыва Тогда
							Предупреждение(НСтр("ru='В строке расписания ';uk='У рядку розкладу '") + (РасписаниеПоЧасам.Индекс(СтрокаПоЧасам)+1) + НСтр("ru=' неверно указано начало и окончание перерыва!';uk=' невірно вказаний початок і закінчення перерви!'"));
							Возврат;
						ИначеЕсли НачалоПерерыва > СтрокаПоЧасам.Окончание
							ИЛИ НачалоПерерыва < СтрокаПоЧасам.Начало
							ИЛИ ОкончаниеПерерыва > СтрокаПоЧасам.Окончание
							ИЛИ ОкончаниеПерерыва < СтрокаПоЧасам.Начало Тогда
							Предупреждение(НСтр("ru='В строке расписания ';uk='У рядку розкладу '") + (РасписаниеПоЧасам.Индекс(СтрокаПоЧасам)+1) + НСтр("ru=' время перерыва выходит за рамки рабочего времени!';uk=' час перерви виходить за рамки робочого часу!'"));
							Возврат;
						КонецЕсли;
						ТаблицаОкончанияПериодов.Добавить().Окончание = НачалоПерерыва;
						ТаблицаНачалаПериодов.Добавить().Начало = ОкончаниеПерерыва;
						
					КонецЕсли;
				КонецЦикла;
				ТаблицаНачалаПериодов.Сортировать("Начало");
				ТаблицаОкончанияПериодов.Сортировать("Окончание");
				Для НомерСтрокиТаблицы = 0 По ТаблицаНачалаПериодов.Количество()-1 Цикл
					ПериодСмены = Графики.ПериодыСмены.Добавить();
					ПериодСмены.ДеньНедели = СтрокаПоЧасам.ДеньНедели;
					ПериодСмены.ВремяНачала = ТаблицаНачалаПериодов[НомерСтрокиТаблицы].Начало;
					ПериодСмены.ВремяОкончания = ТаблицаОкончанияПериодов[НомерСтрокиТаблицы].Окончание;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		Если Ночные и не Вечерние Тогда
			НачалоВечерних = НачалоНочных;
		ИначеЕсли Вечерние И не Ночные Тогда
			НачалоНочных = Дата(1,1,1, 23,59,59);
		КонецЕсли;
		
		Графики.СуммированныйУчетРабочегоВремени = Графики.СуммированныйУчетРабочегоВремени ИЛИ Графики.УчитыватьПраздники;
		Графики.ВидГрафика = ТипГрафика;
		Графики.ДлительностьРабочейНедели = ЧасовВНеделе;
		Графики.СуммированныйУчетРабочегоВремени = ЭлементыФормы.СуммированныйУчет.Значение;
		Графики.УчитыватьПраздники = Элементыформы.УчитыватьПраздники.Значение;
		Графики.ГрафикПолногоРабочегоВремени = ГрафикПолногоРабочегоВремени;
		Графики.НачалоДневныхЧасов = ЭлементыФормы.НачалоДневных.Значение;
		Графики.НачалоВечернихЧасов = ЭлементыФормы.НачалоВечерних.Значение;
		Графики.НачалоНочныхЧасов = ЭлементыФормы.НачалоНочных.Значение;
		Графики.СокращатьКалендарныеДни = СокращатьКалендарныеДни;
		
	КонецЕсли;	
	
	Графики.ДатаОтсчета = ДатаОтсчета;
	Если ПроверитьПравильностьЗаполненияГрафика() Тогда
		ЭтаФорма.Закрыть("Заполнить");
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ


Процедура ПоШаблонуПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	Если ПоШаблону = "ПоДополнительномуСпособуЗаполнения" Тогда
		СброситьНастройкиГрафиков();
	ИначеЕсли ПоШаблону = "Вручную" Тогда
		Если НЕ Графики.ЭтоНовый() Тогда
			ТипГрафика = Графики.ВидГрафика;
		КонецЕсли;
	Иначе
		СброситьНастройкиГрафиков();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВечерниеПриИзменении(Элемент)
	
	ВидимостьНачалаВечерних();
	УстановитьВидРасписания();
	
КонецПроцедуры

Процедура НочныеПриИзменении(Элемент)
	
	ВидимостьНачалаНочных();
	УстановитьВидРасписания();
	
КонецПроцедуры

Процедура РасписаниеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.Перерыв1.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.Перерыв2.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.Перерыв3.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.Перерыв4.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.Перерыв5.Видимость = Ложь;
КонецПроцедуры

Процедура СокращенноеРабочееВремяПриИзменении(Элемент)
	
	ДоступностьЭлементовНеполноеРабочееВремя();
	УстановитьЗначениеВидаНеполногоРабочегоВремени();
КонецПроцедуры

Процедура ПереключательПоТекущемуГрафикуПриИзменении(Элемент)
	
	Если ПереключательПоТекущемуГрафику ИЛИ НЕ СокращенноеРабочееВремя Тогда
		ЭлементыФормы.ГрафикПолногоРабочегоВремени.Доступность = Ложь;
		ЭлементыФормы.ГрафикПолногоРабочегоВремени.ТолькоПросмотр = Истина;
		ЭлементыФормы.ГрафикПолногоРабочегоВремени.Значение = Справочники.ГрафикиРаботы.ПустаяСсылка();
	Иначе
		ЭлементыФормы.ГрафикПолногоРабочегоВремени.Доступность = Истина;
		Элементыформы.ГрафикПолногоРабочегоВремени.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	ДоступностьСокращатьКалендарныеДни();

КонецПроцедуры

Процедура РасписаниеСменныйСменаПриИзменении(Элемент)
	Если Элемент.Значение <> Неопределено Тогда
		ВремяСмены = 0;
		Для Каждого ПериодРаботы Из Элемент.Значение.ПериодыСмены Цикл
			Если ПериодРаботы.ВремяНачала > ПериодРаботы.ВремяОкончания Тогда
				ВремяСмены = (КонецДня(ПериодРаботы.ВремяНачала) - ПериодРаботы.ВремяНачала)
					+ (ПериодРаботы.ВремяОкончания - НачалоДня(ПериодРаботы.ВремяОкончания))
					+ ВремяСмены;
			Иначе
				ВремяСмены = ПериодРаботы.ВремяОкончания - ПериодРаботы.ВремяНачала + ВремяСмены;
			КонецЕсли;
			
		КонецЦикла;
		ЭлементыФормы.РасписаниеСменный.ТекущаяСтрока.ЧасовВСмене = ВремяСмены/3600;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасписаниеСменныйПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		
		Если Не Копирование И РасписаниеСменный.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Элемент.ТекущаяСтрока, РасписаниеСменный[0],,"НомерДня");
		КонецЕсли;	
		
		ЭлементыФормы.РасписаниеСменный.ТекущаяСтрока.НомерДня = РасписаниеСменный.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоличествоПерерывовПриИзменении(Элемент)
	Для НомерПерерыва = 1 По 5 Цикл
		ПоказыватьПерерыв = НомерПерерыва <= КоличествоПерерывов;
		ЭлементыФормы.РасписаниеПоЧасам.Колонки["Перерыв"+НомерПерерыва].Видимость = ПоказыватьПерерыв;
		ЭлементыФормы.РасписаниеПоЧасам.Колонки["НачалоПерерыва"+НомерПерерыва].Видимость = ПоказыватьПерерыв;
		ЭлементыФормы.РасписаниеПоЧасам.Колонки["ОкончаниеПерерыва"+НомерПерерыва].Видимость = ПоказыватьПерерыв;
		Если НомерПерерыва > КоличествоПерерывов Тогда
			Для Каждого СтрокаРасписанияПоЧасам Из РасписаниеПоЧасам Цикл
				СтрокаРасписанияПоЧасам["НачалоПерерыва" + НомерПерерыва] = Дата(1,1,1);
				СтрокаРасписанияПоЧасам["ОкончаниеПерерыва" + НомерПерерыва] = Дата(1,1,1);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура РасписаниеСводноПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура РасписаниеСводноПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

Процедура ПолеСпискаШаблоновПриАктивизацииСтроки(Элемент)
	Если ЭлементыФормы.ПолеСпискаШаблонов.ТекущаяСтрока.Значение = Перечисления.ШаблонЗаполненияГрафикаРаботы.Пятидневка40
		Или ЭлементыФормы.ПолеСпискаШаблонов.ТекущаяСтрока.Значение = Перечисления.ШаблонЗаполненияГрафикаРаботы.Шестидневка40 Тогда
		ЭлементыФормы.ДатаНачала.Доступность = Ложь;
		ЭлементыФормы.ПанельВечернихИНочныхЧасовДляШаблона.Свертка = РежимСверткиЭлементаУправления.Верх;
		Праздники = Истина;
		Если ЭлементыФормы.ПолеСпискаШаблонов.ТекущаяСтрока.Значение = Перечисления.ШаблонЗаполненияГрафикаРаботы.Пятидневка40 Тогда
			ТипГрафика = Перечисления.ВидыРабочихГрафиков.Пятидневка;
		Иначе
			ТипГрафика = Перечисления.ВидыРабочихГрафиков.Шестидневка;
		КонецЕсли;
	ИначеЕсли ЭлементыФормы.ПолеСпискаШаблонов.ТекущаяСтрока.Значение = Перечисления.ШаблонЗаполненияГрафикаРаботы.СуткиЧерезДвое
		Или ЭлементыФормы.ПолеСпискаШаблонов.ТекущаяСтрока.Значение = Перечисления.ШаблонЗаполненияГрафикаРаботы.СуткиЧерезТрое Тогда
		Праздники = Ложь;
		ЭлементыФормы.ДатаНачала.Доступность = Истина;
		ЭлементыФормы.ПанельВечернихИНочныхЧасовДляШаблона.Свертка = РежимСверткиЭлементаУправления.Нет;
		ТипГрафика = Перечисления.ВидыРабочихГрафиков.Сменный;
	Иначе
		Праздники = Ложь;
		ЭлементыФормы.ДатаНачала.Доступность = Истина;
		ЭлементыФормы.ПанельВечернихИНочныхЧасовДляШаблона.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
КонецПроцедуры

Процедура РасписаниеПоЧасамНачалоПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

Процедура РасписаниеПоЧасамОкончаниеПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

Процедура РасписаниеПоЧасамНачалоПерерыва1ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

Процедура РасписаниеПоЧасамОкончаниеПерерыва1ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

Процедура РасписаниеПоЧасамНачалоПерерыва2ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

Процедура РасписаниеПоЧасамОкончаниеПерерыва2ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

Процедура РасписаниеПоЧасамНачалоПерерыва3ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

Процедура РасписаниеПоЧасамОкончаниеПерерыва3ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

Процедура РасписаниеПоЧасамНачалоПерерыва4ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

Процедура РасписаниеПоЧасамОкончаниеПерерыва4ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

Процедура РасписаниеПоЧасамНачалоПерерыва5ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

Процедура РасписаниеПоЧасамОкончаниеПерерыва5ПриИзменении(Элемент)
	ОбновитьИтогоЧасовЗаДень();
КонецПроцедуры

Процедура РасписаниеПоЧасамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование И РасписаниеПоЧасам.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Элемент.ТекущаяСтрока, РасписаниеПоЧасам[0],,"ДеньНедели");
	КонецЕсли;
КонецПроцедуры

Процедура НеполныйРабочийДеньПриИзменении(Элемент)
	УстановитьЗначениеВидаНеполногоРабочегоВремени();
	ДоступностьСокращатьКалендарныеДни();
КонецПроцедуры

Процедура РасписаниеПоЧасамПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

Процедура РасписаниеПоЧасамПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры






