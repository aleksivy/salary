
Перем мОбработкаПоискаПоСтрокеВидаКИ;
Перем мТекстПоискаПоСтрокеВидаКИ;
Перем мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ;

Перем мКнопкаРедактироватьКИВДиалоге;

Перем текФамилия;
Перем текИмя;
Перем текОтчество;

Перем мНаборЗаписейДокументаУдостоверяющегоЛичность;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура управляет видимостью закладки События панели ПанельФормы.
// 
Процедура ВидимостьЗакладкиСобытия()

	ЭлементыФормы.ПанельФормы.Страницы.События.Видимость   = Истина;
	ЭлементыФормы.ПанельФормы.Страницы.События.Доступность = НЕ ЭтоНовый();

КонецПроцедуры

// Процедура устанавливает свойства ReadOnly для элементоф формы, относящихся к дате рождения контактного
// лица и напоминаниям о дне рождения
//
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
//
Процедура ДоступностьДанныхНапоминанияОДнеРождения()

	Если ДатаРождения = '00010101000000' Тогда
	
		ЭлементыФормы.НапоминатьОДнеРождения.Доступность      = Ложь;
		ЭлементыФормы.КоличествоДнейДоНапоминания.Доступность = Ложь;
		ЭлементыФормы.НадписьДней.Доступность                 = Ложь;
		
	Иначе
		
		ЭлементыФормы.НапоминатьОДнеРождения.Доступность      = Истина;
		ЭлементыФормы.КоличествоДнейДоНапоминания.Доступность = НапоминатьОДнеРождения;
		ЭлементыФормы.НадписьДней.Доступность                 = НапоминатьОДнеРождения;
		
	КонецЕсли; 

КонецПроцедуры

// Функция определяет номера позиций пробелов в строке реквизита Наименование
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  Массив, числа - позиции пробелов в строке
//
Функция ОпределитьПозицииПробелов()

	Пробелы = Новый Массив;

	Для а = 1 По 2 Цикл
	
		Пробелы.Добавить(0);
	
	КонецЦикла; 
	
	КолПробелов = 0;
	
	Для а = 1 По СтрДлина(Наименование) Цикл
	
		Если Сред(Наименование, а, 1) = " " Тогда

			Пробелы[КолПробелов] = а;
			КолПробелов = КолПробелов + 1;
		
		КонецЕсли; 

		Если КолПробелов = 2 Тогда
		
			Прервать;
		
		КонецЕсли; 
		
	КонецЦикла; 

	Возврат Пробелы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ОбработкаОповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанаКИ" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		// Контактная информация
		Если ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные <> Неопределено
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Вид = Параметр.Вид
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип = Параметр.Тип Тогда
		
			УправлениеКонтактнойИнформацией.УстановитьВозможностьРедактированияТекстаКИ(ЭлементыФормы.КонтактнаяИнформация);
		
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "ОбновитьУдостоверениеЛичности"  Тогда
		
		ОбновитьНадписьУдостоверенияЛичности();
		
	КонецЕсли;

	
КонецПроцедуры

// Обработчик события ПослеЗаписи формы.
//
Процедура ПослеЗаписи()
	
	ВидимостьЗакладкиСобытия();
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
	
КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	// Контактная информация
	мКнопкаРедактироватьКИВДиалоге = ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.РедактироватьВДиалоге;
	УправлениеКонтактнойИнформацией.ИнициализацияКнопкиРедактированиеКИВДиалоге(мКнопкаРедактироватьКИВДиалоге);
	
	События.Отбор.КонтактноеЛицоБезКонтрагента.Значение                            = Ссылка;
	События.Отбор.КонтактноеЛицоБезКонтрагента.Использование                       = Истина;
	ЭлементыФормы.События.НастройкаОтбора.КонтактноеЛицоБезКонтрагента.Доступность = Ложь;
	События.Отбор.Контрагент.Использование                                         = Ложь;
	ЭлементыФормы.События.НастройкаОтбора.Контрагент.Доступность                   = Истина;

	текФамилия = Фамилия;
	текИмя = Имя;
	текОтчество = Отчество;
	
	ДоступностьДанныхНапоминанияОДнеРождения();
	ВидимостьЗакладкиСобытия();
	
	ОбновитьНадписьУдостоверенияЛичности();
	Модифицированность = Ложь;
	
	// Установим ЭУ по умолчанию
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Фамилия;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Код);
КонецПроцедуры

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)
	
	События.Отбор.КонтактноеЛицоБезКонтрагента.Значение                            = Ссылка;
	События.Отбор.КонтактноеЛицоБезКонтрагента.Использование                       = Истина;
	ЭлементыФормы.События.НастройкаОтбора.КонтактноеЛицоБезКонтрагента.Доступность = Ложь;
	
	События.Отбор.Контрагент.Использование                       = Ложь;
	ЭлементыФормы.События.НастройкаОтбора.Контрагент.Доступность = Истина;
	
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений = Ссылка;
	Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();

	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	Отказ = НЕ ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();
	
	Если НЕ Отказ Тогда
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка, Отказ);
	КонецЕсли; 
	
	// запишем набор записей контрагентов
	// проверим заполнения периода (может быть незаполнен для новых записей)
	Для каждого ЗаписьИзНабора из НаборКонтрагентов Цикл
		
		Если НЕ ЗначениеЗаполнено(ЗаписьИзНабора.Период) Тогда
			ЗаписьИзНабора.Период = ТекущаяДата();
		КонецЕсли;
		
		Если ЗаписьИзНабора.Контрагент <> ЗаписьИзНабора.КонтактноеЛицоКонтрагента.Владелец Тогда
			ЗаписьИзНабора.Контрагент = ЗаписьИзНабора.КонтактноеЛицоКонтрагента.Владелец;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборКонтрагентов.Отбор.КонтактноеЛицо.Установить(Ссылка);
	Если НаборКонтрагентов.Модифицированность() Тогда
		НаборКонтрагентов.Записать();
	КонецЕсли;
	
	// запись в регистр паспортных данных
	мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Физлицо = Ссылка;
	Если ЗначениеЗаполнено(мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Период) тогда
		мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Физлицо.Использование 	= Истина;
		мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Физлицо.Значение 		= мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Физлицо;
		мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Период.Использование = Истина;
		мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Период.Значение 		= мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Период;
		мНаборЗаписейДокументаУдостоверяющегоЛичность.Записать(Истина);
	КонецЕсли;

	НаборКонтрагентов.Отбор.КонтактноеЛицо.Значение = Ссылка;
	
КонецПроцедуры

// Обработчик события ОбработкаЗаписиНовогоОбъекта формы.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)
	
	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.СвойстваИЗначения);
	КонецЕсли;

	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, ПараметрОбъектКопирования);
	Иначе
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
	КонецЕсли;
	
	
КонецПроцедуры

// Обработчик события ПриИзмененииДанных формы.
//
Процедура ПриИзмененииДанных()
	
	ПрочитатьЗаполнитьСвойстваИЗначения();
	
	ПрочитатьЗаполнитьКатегории();
	
КонецПроцедуры

// Обработчик события ПриЗакрытии формы.
//
Процедура ПриЗакрытии()
	
	// Контактная информация
	СохранитьЗначение("РедактироватьКИВДиалоге", мКнопкаРедактироватьКИВДиалоге.Пометка);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.РедактироватьВДиалоге.
//
Процедура КоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(Кнопка)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияРедактироватьВДиалоге(Кнопка);
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
	ОбработкаРедактирования.ДоступностьОбъекта = Ложь;
	ОбработкаРедактирования.РедактироватьЗапись(ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные, , ЭтаФорма);

КонецПроцедуры

// Обработчик события Очистка элемента формы КонтактнаяИнформация,Тип.
//
Процедура КонтактнаяИнформацияТипОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформацией.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Ссылка));
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
	мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ = Элемент.Значение;
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Ссылка)), Тип("СправочникСсылка.ВидыКонтактнойИнформации"));
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Ссылка)), ЭтаФорма, Тип("СправочникСсылка.ВидыКонтактнойИнформации"), мОбработкаПоискаПоСтрокеВидаКИ, мТекстПоискаПоСтрокеВидаКИ, мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мТекстПоискаПоСтрокеВидаКИ, мОбработкаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.УстановитьОсновным.
//
Процедура КоманднаяПанельКонтактнойИнформацииУстановитьОсновным(Кнопка)
	
	УправлениеКонтактнойИнформацией.УстановитьЗаписьОсновной(НаборКонтактнойИнформации, ЭлементыФормы.КонтактнаяИнформация, Кнопка);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.УстановитьОсновным);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередУдалением(Элемент, Отказ)

	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге, ЭлементыФормы.КонтактнаяИнформация, НаборКонтактнойИнформации, Ложь, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
	
	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге, Ложь, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Тип.
//
Процедура КонтактнаяИнформацияТипПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияТипПриИзмененииОбщее(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры
// Обработчик события Нажатие элемента формы ДействияФормы.НаписатьПисьмо.
//
Процедура ДействияФормыНаписатьПисьмо(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеЭлектроннойПочтой.НаписатьПисьмоОбъекту(Ссылка);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы ДействияФормы.ЭлектронныеПисьма.
//
Процедура ДействияФормыЭлектронныеПисьма(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеЭлектроннойПочтой.ОткрытьЭлектронныеПисьмаПоОбъекту(Ссылка);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы Контакты.
//
Процедура СобытияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.СостояниеСобытия.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.СостояниеСобытия.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.СостояниеСобытия.ОтображатьТекст    = Ложь;
	Если ДанныеСтроки.СостояниеСобытия = Перечисления.СостоянияСобытий.Завершено Тогда
		ОформлениеСтроки.Ячейки.СостояниеСобытия.ИндексКартинки = 4;
	ИначеЕсли ДанныеСтроки.СостояниеСобытия = Перечисления.СостоянияСобытий.Запланировано Тогда
		ОформлениеСтроки.Ячейки.СостояниеСобытия.ИндексКартинки = 6;
	ИначеЕсли ДанныеСтроки.СостояниеСобытия = Перечисления.СостоянияСобытий.Отменено Тогда
		ОформлениеСтроки.Ячейки.СостояниеСобытия.ИндексКартинки = 5;
	КонецЕсли; 

	ОформлениеСтроки.Ячейки.Важность.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.Важность.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.Важность.ОтображатьТекст    = Ложь;
	Если ДанныеСтроки.Важность = Перечисления.Важность.Высокая Тогда
		ОформлениеСтроки.Ячейки.Важность.ИндексКартинки = 0;
	ИначеЕсли ДанныеСтроки.Важность = Перечисления.Важность.Низкая Тогда
		ОформлениеСтроки.Ячейки.Важность.ИндексКартинки = 1;
	КонецЕсли; 

	ОформлениеСтроки.Ячейки.ВидСобытия.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.ВидСобытия.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.ВидСобытия.ОтображатьТекст    = Истина;
	ОформлениеСтроки.Ячейки.ВидСобытия.ИндексКартинки     = УправлениеКонтактами.ОпределитьИндексКартинкиВидаСобытия(ДанныеСтроки.ВидСобытия,ДанныеСтроки.ТипСобытия);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы События.
//
Процедура СобытияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли; 

	Если Копирование Тогда
		Если Элемент.ТекущаяСтрока <> Неопределено И НЕ Элемент.ТекущаяСтрока.Пустая() Тогда
			Элемент.ТекущаяСтрока.Скопировать().ПолучитьФорму(,ЭтаФорма).Открыть();
		КонецЕсли;
	Иначе
		СписокВыбора = Новый СписокЗначений;
		Для каждого ВидСобытия Из Перечисления.ВидыСобытий Цикл
			СписокВыбора.Добавить(ВидСобытия, Строка(ВидСобытия));
		КонецЦикла; 

		Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.Ссылка.Пустая() Тогда
			ЗначенияПоискаВСписке = Элемент.ТекущиеДанные.ВидСобытия;
		КонецЕсли;

		НайденныйЭлементСписка = СписокВыбора.НайтиПоЗначению(ЗначенияПоискаВСписке);
		
		ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент(НСтр("ru='Выберите тип документа';uk='Виберіть тип документа'"), НайденныйЭлементСписка);
		Если ВыбранныйЭлемент <> Неопределено Тогда
			
			Док = Документы.Событие.СоздатьДокумент();
			
			КонтрагентыКонтактногоЛица = УправлениеКонтактами.ВернутьТаблицуКонтрагентовКонтактногоЛица(Ссылка);
			
			Если КонтрагентыКонтактногоЛица.Количество()>0 Тогда
				Док.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
				Док.Контрагент = КонтрагентыКонтактногоЛица[0].Контрагент;
			Иначе
				Док.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица;
			КонецЕсли; 
			
			Док.ВидОбъекта     = Перечисления.ВидыОбъектовСобытия.Контрагент;
			Док.ВидСобытия     = ВыбранныйЭлемент.Значение;
			Док.КонтактноеЛицо = Ссылка;

			Док.ПолучитьФорму(,ЭтаФорма).Открыть();
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента Фамилия.
//
Процедура ФамилияПриИзменении(Элемент)

	ПозицииПробелов = ОпределитьПозицииПробелов();

	Если ПозицииПробелов[0] > 0 Тогда
	
		ФамилияИзНаименования = Сред(Наименование, 1, (ПозицииПробелов[0] - 1));
		
		Если ФамилияИзНаименования <> текФамилия И НЕ ПустаяСтрока(ФамилияИзНаименования) Тогда
		
			текФамилия = СокрЛП(Элемент.Значение);
			Возврат;
		
		КонецЕсли;

		Наименование = СокрЛП(Элемент.Значение) + Сред(Наименование, ПозицииПробелов[0]);

	Иначе

		Если ПустаяСтрока(Наименование) Тогда
			
			Наименование = СокрЛП(Элемент.Значение);

		Иначе

			Если СокрЛП(Наименование) = текФамилия Тогда
			
				Наименование = СокрЛП(Элемент.Значение);
			
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	текФамилия = СокрЛП(Элемент.Значение);

КонецПроцедуры

// Обработчик события ПриИзменении элемента Имя.
//
Процедура ИмяПриИзменении(Элемент)

	ПозицииПробелов = ОпределитьПозицииПробелов();

	Если ПозицииПробелов[0] > 0 И ПозицииПробелов[1] > 0 Тогда
	
		ИмяИзНаименования = Сред(Наименование, (ПозицииПробелов[0] + 1), (ПозицииПробелов[1] - ПозицииПробелов[0] - 1));
		
		Если ИмяИзНаименования <> текИмя И НЕ ПустаяСтрока(ИмяИзНаименования) Тогда
		
			текИмя = СокрЛП(Элемент.Значение);
			Возврат;
		
		КонецЕсли;

		Наименование = Сред(Наименование, 1, ПозицииПробелов[0]) + СокрЛП(Элемент.Значение) + Сред(Наименование, ПозицииПробелов[1]);

	ИначеЕсли ПозицииПробелов[0] > 0 Тогда

		ИмяИзНаименования = Сред(Наименование, (ПозицииПробелов[0] + 1));

		Если ИмяИзНаименования <> текИмя И НЕ ПустаяСтрока(ИмяИзНаименования) Тогда
		
			текИмя = СокрЛП(Элемент.Значение);
			Возврат;
		
		КонецЕсли; 

		Наименование = Сред(Наименование, 1, ПозицииПробелов[0]) + СокрЛП(Элемент.Значение);

	Иначе

		Если НЕ ПустаяСтрока(Наименование) Тогда
		
			Наименование = Наименование + " " + СокрЛП(Элемент.Значение);

		Иначе

			Наименование = " " + СокрЛП(Элемент.Значение);
		
		КонецЕсли; 
		
	КонецЕсли;
	
	текИмя = СокрЛП(Элемент.Значение);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента Отчество.
//
Процедура ОтчествоПриИзменении(Элемент)

	ПозицииПробелов = ОпределитьПозицииПробелов();

	Если ПозицииПробелов[1] > 0 Тогда
	
		ОтчествоИзНаименования = Сред(Наименование, (ПозицииПробелов[1] + 1));
		
		Если ОтчествоИзНаименования <> текОтчество И НЕ ПустаяСтрока(ОтчествоИзНаименования) Тогда
		
			текОтчество = СокрЛП(Элемент.Значение);
			Возврат;
		
		КонецЕсли;

		Наименование = Сред(Наименование, 1, ПозицииПробелов[1]) + СокрЛП(Элемент.Значение);

	Иначе

		Если НЕ ПустаяСтрока(Наименование) Тогда
		
			Наименование = Наименование + " " + СокрЛП(Элемент.Значение);

		Иначе

			Наименование = "  " + СокрЛП(Элемент.Значение);
		
		КонецЕсли; 
		
	КонецЕсли;
	
	текОтчество = СокрЛП(Элемент.Значение);
	
КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка элемента Наименование.
//
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СписокВыбора = Новый СписокЗначений;

	Если НЕ ПустаяСтрока(Фамилия) Тогда
		СписокВыбора.Добавить(СокрЛП(Фамилия));
	КонецЕсли;

	Если НЕ ПустаяСтрока(Фамилия) И НЕ ПустаяСтрока(Имя) Тогда
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Имя)));
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Сред(Имя,1,1)) + "."));
	КонецЕсли; 

	Если НЕ ПустаяСтрока(Фамилия) И НЕ ПустаяСтрока(Имя) И НЕ ПустаяСтрока(Отчество) Тогда
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество)));
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Сред(Имя,1,1)) + "." + СокрЛП(Сред(Отчество,1,1)) + "."));
	КонецЕсли; 

	ЭлементыФормы.Наименование.СписокВыбора = СписокВыбора;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента ДатаРождения.
//
Процедура ДатаРожденияПриИзменении(Элемент)
	
	Если ДатаРождения = '00010101000000' Тогда
		НапоминатьОДнеРождения = Ложь;
	КонецЕсли; 
	
	ДоступностьДанныхНапоминанияОДнеРождения();
	
КонецПроцедуры

Процедура УдостоверениеЛичностиНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;

	ФормаВвода              = ПолучитьОбщуюФорму("РедактированиеДокументаУдостоверяющегоЛичность", ЭтаФорма);
	ФормаВвода.НаборЗаписей = мНаборЗаписейДокументаУдостоверяющегоЛичность;
	ФормаВвода.Открыть();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента НапоминатьОДнеРождения.
//
Процедура НапоминатьОДнеРожденияПриИзменении(Элемент)
	
	ДоступностьДанныхНапоминанияОДнеРождения();
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма, Элемент, Копирование);

КонецПроцедуры

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока)

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОбработкаОбъектЗначенияСвойств.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные, Элемент);

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ИнвертироватьПометкуУдаленияКатегории(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзмененииФлажка элемента Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, Колонка)

	Модифицированность = Истина;

КонецПроцедуры


// Обработчик события ПриВыводеСтроки элемента НаборКонтрагентов.
//
Процедура НаборКонтрагентовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеСтроки.Контрагент) И ЗначениеЗаполнено(ДанныеСтроки.Контрагент.ОсновноеКонтактноеЛицо) И ДанныеСтроки.Контрагент.ОсновноеКонтактноеЛицо.КонтактноеЛицо = Ссылка Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
	КонецЕсли; 

КонецПроцедуры

// Обработчик события ПередУдалением элемента НаборКонтрагентов.
//
Процедура НаборКонтрагентовПередУдалением(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Контрагент) И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Контрагент.ОсновноеКонтактноеЛицо) И Элемент.ТекущиеДанные.Контрагент.ОсновноеКонтактноеЛицо.КонтактноеЛицо = Ссылка Тогда
		Отказ = Истина;
	КонецЕсли; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПОДДЕРЖКИ МЕХАНИЗМОВ СВОЙСТВ И КАТЕГОРИЙ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
	ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();

КонецПроцедуры

// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием.
	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();

КонецПроцедуры

Процедура ОбновитьНадписьУдостоверенияЛичности()
	
	Паспорт = мНаборЗаписейДокументаУдостоверяющегоЛичность[0];
	
	УдостоверениеЛичности = "" + Паспорт.ДокументВид + ", серия: " + Паспорт.ДокументСерия + ", № " + Паспорт.ДокументНомер 
	+ ", выдан: " + Формат(Паспорт.ДокументДатаВыдачи,"ДФ='дд ММММ гггг'; ДП='Не указано'") + " года, " 
	+ Паспорт.ДокументКемВыдан;
	//+ Символы.Таб + "Дата регистрации по месту жительства: " + Формат(Паспорт.ДатаРегистрацииПоМестуЖительства,"ДФ='дд ММММ гггг'; ДП='Не указано'");
	Модифицированность = Истина;
	Если УдостоверениеЛичности = ", серия: , № , выдан: Не указано года, , № подр. 	Дата регистрации по месту жительства: Не указано" Тогда
		УдостоверениеЛичности = "Ввести данные об удостоверении личности";
	Иначе
		УдостоверениеЛичности = СтрЗаменить(УдостоверениеЛичности,"Не указано","...");
	КонецЕсли;
	
КонецПроцедуры

мОбработкаПоискаПоСтрокеВидаКИ                 = Ложь;
мТекстПоискаПоСтрокеВидаКИ                     = "";
мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ = Неопределено;

мНаборЗаписейДокументаУдостоверяющегоЛичность = РегистрыСведений.ПаспортныеДанныеФизЛиц.СоздатьНаборЗаписей();
СрезПаспортныхДанных						  = РегистрыСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(,Новый Структура("ФизЛицо",Ссылка));
ЗаписьНабора = мНаборЗаписейДокументаУдостоверяющегоЛичность.Добавить();
Если СрезПаспортныхДанных.Количество() > 0 тогда
	ЗаписьНабора.Период 							= СрезПаспортныхДанных[0].Период;
	ЗаписьНабора.Физлицо 							= СрезПаспортныхДанных[0].Физлицо;
	//ЗаписьНабора.ДатаРегистрацииПоМестуЖительства	= СрезПаспортныхДанных[0].ДатаРегистрацииПоМестуЖительства;
	ЗаписьНабора.ДокументВид 						= СрезПаспортныхДанных[0].ДокументВид;
	ЗаписьНабора.ДокументДатаВыдачи 				= СрезПаспортныхДанных[0].ДокументДатаВыдачи;
	ЗаписьНабора.ДокументКемВыдан 					= СрезПаспортныхДанных[0].ДокументКемВыдан;
	//ЗаписьНабора.ДокументКодПодразделения 			= СрезПаспортныхДанных[0].ДокументКодПодразделения;
	ЗаписьНабора.ДокументНомер 						= СрезПаспортныхДанных[0].ДокументНомер;
	ЗаписьНабора.ДокументСерия 						= СрезПаспортныхДанных[0].ДокументСерия;
КонецЕсли;

События.Колонки.Добавить("ТипСобытия");
