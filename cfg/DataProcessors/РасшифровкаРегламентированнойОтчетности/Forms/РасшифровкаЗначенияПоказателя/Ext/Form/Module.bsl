Перем Таб;// поле табличного документа, в который осуществляется вывод расшифровки
Перем СпП Экспорт;// таблица расшифровок
Перем Знак;
Перем Расшифровка;
Перем СуммаПоПоказателю;// сумма по показателю, складываемая из слагаемых
Перем Организация;// организация, требуется для открытия стандартных отчетов
Перем ДатаНачала;// дата начала периода формирования отчета, требуется для открытия стандартных отчетов
Перем ДатаКонца;// дата окончания периода формирования отчета, требуется для открытия стандартных отчетов
Перем ОбластиГруппыСтрок;
Перем Табл;
Перем СписокПоказателей;

Перем ПередаватьДанныеВСистемуЗвит1С Экспорт;
Перем мКомпонентаЗвит1С Экспорт;

// Функция возвращает пользовательское представление слагаемого
//
// Параметры:
//	ИмяСлагаемого - макроимя или готовое имя слагаемого
//	КодСчета - код счета, соответствующего слагемому
//  КодКорСчета - код корсчета, соответствующего слагаемому
//	ДатаНачалаПериода - дата начала периода, на основании итогов или оборотов за который вычисляется
//		значение слагаемого
//	ДатаКонцаПериода - дата конца периода, на основании итогов или оборотов за который вычисляется
//		значение слагаемого
//
// Возвращаемое значение:
//	Строка - пользовательское представление слагаемого
Функция НаименованиеСлагаемого(ИмяСлагаемого, КодСчета, КодКорСчета, ДатаНачалаПериода, ДатаКонцаПериода)
	
	Если Лев(ИмяСлагаемого, 1)="!" Тогда
		// передана мнемоника, будем расшифровывать
		Наименование = "";
		Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаНачала) И КонецДня(ДатаКонцаПериода) = КонецДня(ДатаКонца) Тогда
			ПредставлениеПериодаС = " ";
		Иначе
			ПредставлениеПериодаС = " " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода, "ФП = Истина" ) + " ";
		КонецЕсли;
		Макроимя = Сред(ИмяСлагаемого, 2);
		Если Макроимя = "СНД" Тогда
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сальдо на начало периода%1по дебету счета %2';uk='Сальдо на початок періоду%1по дебету рахунку %2'"), ПредставлениеПериодаС, СокрЛП( КодСчета ));
		ИначеЕсли Макроимя = "СНДР" Тогда
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сальдо на начало периода%1по дебету субсчетов счета %2';uk='Сальдо на початок періоду%1по дебету субрахунків рахунку %2'"), ПредставлениеПериодаС, СокрЛП( КодСчета ));
		ИначеЕсли Макроимя = "СНДРС" Тогда
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сальдо на начало периода%1по дебету счета %2 по субконто';uk='Сальдо на початок періоду%1по дебету рахунку %2 по субконто'"), ПредставлениеПериодаС, СокрЛП( КодСчета ));
		ИначеЕсли Макроимя = "СКД" Тогда
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сальдо на конец периода%1по дебету счета %2';uk='Сальдо на кінець періоду%1по дебету рахунку %2'"), ПредставлениеПериодаС, СокрЛП( КодСчета ));
		ИначеЕсли Макроимя = "СКДР" Тогда
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сальдо на конец периода%1по дебету субсчетов счета %2';uk='Сальдо на кінець періоду%1по дебету субрахунків рахунку %2'"), ПредставлениеПериодаС, СокрЛП( КодСчета ));
		ИначеЕсли Макроимя = "СКДРС" Тогда
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сальдо на конец периода%1по дебету субсчетов счета %2 по субконто';uk='Сальдо на кінець періоду%1по дебету субрахунків рахунку %2 по субконто'"), ПредставлениеПериодаС, СокрЛП( КодСчета ));
		ИначеЕсли Макроимя = "СНК" Тогда
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сальдо на начало периода%1по кредиту счета %2';uk='Сальдо на початок периода%1по кредиту рахунку %2'"), ПредставлениеПериодаС, СокрЛП( КодСчета ));
		ИначеЕсли Макроимя = "СНКР" Тогда
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сальдо на начало периода%1по кредиту субсчетов счета %2';uk='Сальдо на початок періоду%1по кредиту субрахунків рахунку %2'"), ПредставлениеПериодаС, СокрЛП( КодСчета ));
		ИначеЕсли Макроимя = "СНКРС" Тогда
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сальдо на начало периода%1по кредиту счета %2 по субконто';uk='Сальдо на початок периода%1по кредиту рахунку %2 по субконто'"), ПредставлениеПериодаС, СокрЛП( КодСчета ));
		ИначеЕсли Макроимя = "СКК" Тогда
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сальдо на конец периода%1по кредиту счета %2';uk='Сальдо на кінець періоду%1по кредиту рахунку %2'"), ПредставлениеПериодаС, СокрЛП( КодСчета ));
		ИначеЕсли Макроимя = "СККР" Тогда
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сальдо на конец периода%1по кредиту субсчетов счета %2';uk='Сальдо на кінець періоду%1по кредиту субрахунків рахунку %2'"), ПредставлениеПериодаС, СокрЛП( КодСчета ));
		ИначеЕсли Макроимя = "СККРС" Тогда
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сальдо на конец периода%1по кредиту счета %2 по субконто';uk='Сальдо на кінець періоду%1по кредиту рахунку %2 по субконто'"), ПредставлениеПериодаС, СокрЛП( КодСчета ));
		ИначеЕсли Макроимя = "ДО" Тогда
			Наименование = НСтр("ru='Оборот по дебету счета ';uk='Оборот по дебету рахунку '") + СокрЛП( КодСчета ) + ?(ПредставлениеПериодаС = " ", "", НСтр("ru=' за период ';uk=' за період '") + ПредставлениеПериодаС);
		ИначеЕсли Макроимя = "КО" Тогда
			Наименование = НСтр("ru='Оборот по кредиту счета ';uk='Оборот по кредиту рахунку '") + СокрЛП( КодСчета ) + ?(ПредставлениеПериодаС = " ", "", НСтр("ru=' за период ';uk=' за період '") + ПредставлениеПериодаС);
		ИначеЕсли Макроимя = "АС" Тогда
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Обороты субконто'; uk = 'Обороти субконто'")) + ?(ПредставлениеПериодаС = " ", "", НСтр("ru=' за период ';uk=' за період '") + ПредставлениеПериодаС);
		ИначеЕсли Макроимя = "ОМС" Тогда
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Обороты между субконто'; uk = 'Обороти между субконто'")) + ?(ПредставлениеПериодаС = " ", "", НСтр("ru=' за период ';uk=' за період '") + ПредставлениеПериодаС);
		ИначеЕсли Макроимя = "ОБ" Тогда
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Оборот в дебет счета %1 с кредита счета %2';uk='Оборот у дебет рахунку %1 із кредиту рахунку %2'"), СокрЛП( КодСчета ), СокрЛП( КодКорСчета )) + ?(ПредставлениеПериодаС = " ", "", НСтр("ru=' за период ';uk=' за період '") + ПредставлениеПериодаС);
		КонецЕсли;
		Возврат Наименование;
	Иначе
		// передано имя, ничего расшифровывать не нужно
		Возврат ИмяСлагаемого;
	КонецЕсли;
КонецФункции	

// Процедура выводит секцию указанного вида с указанными значениями в поле табличного документа
//
// Параметры:
//	Таб - поле табличного документа или табличный документ, в который следует осуществить вывод
//	ИмяОбласти - имя области, которую следует вывести в Таб
//	Значение - первое значение для заполнения в области ИмяОбласти
//	Значение2 - второе значение для заполнения в области ИмяОбласти
//	Расшифровка - значение расшифровки для соответствующих ячеек области
//
Процедура ВывестиСекцию(Таб, ИмяОбласти, Значение = Неопределено, Значение2 = Неопределено, Расшифровка = Неопределено)
	
	Если ПередаватьДанныеВСистемуЗвит1С = Истина Тогда
				
		Если мКомпонентаЗвит1С = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Область = ПолучитьМакет("Макет").ПолучитьОбласть(ИмяОбласти);
		Таб.Вывести(Область);
		
		Если ВРЕГ(ИмяОбласти) = ВРЕГ("Заголовок") Тогда
			
			мКомпонентаЗвит1С.DetailsAddHeader(СокрЛП(Значение));	
			
		ИначеЕсли ВРЕГ(ИмяОбласти) = ВРЕГ("ПодЗаголовок") Тогда
			
			мКомпонентаЗвит1С.DetailsAddRow(0, "   " + СокрЛП(Значение), "");
			
		ИначеЕсли ВРЕГ(ИмяОбласти) = ВРЕГ("Слагаемое") Тогда
			
			ВысотаТаблицы = Таб.ВысотаТаблицы; // Гарантируем неизменность данного поля в FREDO Звіт
			мКомпонентаЗвит1С.DetailsAddRow(ВысотаТаблицы, СокрЛП(Значение), Формат(Значение2,"ЧЦ=15; ЧДЦ=2; ЧН=0"));	
			
		ИначеЕсли ВРЕГ(ИмяОбласти) = ВРЕГ("Итог") Тогда
			
			мКомпонентаЗвит1С.DetailsAddFooter(НСтр("ru = 'Итого по строке:'; uk = 'Разом по рядку:'"), Формат(Значение,"ЧЦ=15; ЧДЦ=2; ЧН=0"));
			
		ИначеЕсли ВРЕГ(ИмяОбласти) = ВРЕГ("Плюс") Тогда
			
			мКомпонентаЗвит1С.DetailsAddRow(0, " + ПЛЮС", "");
			
		ИначеЕсли ВРЕГ(ИмяОбласти) = ВРЕГ("Минус") Тогда
			
			мКомпонентаЗвит1С.DetailsAddRow(0, НСтр("ru = ' - МИНУС'; uk = ' - МІНУС'"), "");
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Область = ПолучитьМакет("Макет").ПолучитьОбласть(ИмяОбласти);
	Если Значение <> Неопределено ИЛИ Значение2 <> Неопределено Тогда
		НомерОбласти = 0;
		Для Каждого Обл Из Область.Области Цикл
			Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Обл.СодержитЗначение Тогда
				НомерОбласти = НомерОбласти + 1;
				Обл.Значение = ?(НомерОбласти = 1, Значение, Значение2);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Расшифровка <> Неопределено Тогда
		Если ИмяОбласти = "Заголовок" Тогда
			
			Область.Область(1,1,Область.ВысотаТаблицы,Область.ШиринаТаблицы).Расшифровка = Новый Структура("Действие, Расшифровка", "Активизировать", Расшифровка);
			
		Иначе
		
			Область.Область(1,1,Область.ВысотаТаблицы,Область.ШиринаТаблицы).Расшифровка = Расшифровка;
			
		КонецЕсли;
	КонецЕсли;
	Таб.Вывести(Область);
	
КонецПроцедуры

// Процедура выводить слагаемое, описываемое строкой таблицы значений в поле табличного документа на форме
//
// Параметры:
//	Стр - строка таблицы значений, описывающая выводимое слагаемое
//
Процедура ВыводСтроки(Стр)
	
	Если ТипЗнч(Стр.ИмяСлагаемого) <> Тип("Строка") Тогда
		Стр.ИмяСлагаемого = НСтр("ru='субконто: ';uk='субконто: '") + Стр.ИмяСлагаемого;
	КонецЕсли;
	
	Если Лев(Стр.ИмяСлагаемого, 1)="#" Тогда
		// Получена строка-разделитель, просто выдаем эту секцию
		ПодзаголовокНаименование = Сред( Стр.ИмяСлагаемого, 2, СтрДлина( Стр.ИмяСлагаемого ) );
		ВывестиСекцию(Таб, "Подзаголовок", ПодзаголовокНаименование);
		Возврат;
	Иначе
		СлагаемоеНаименование = НаименованиеСлагаемого(Стр.ИмяСлагаемого,Стр.КодСчета,Стр.КодКорСчета,Стр.ДатаНачала, Стр.ДатаКонца);
	КонецЕсли;
	
	Если Стр.Субконто1 <> Неопределено Тогда
		Если ТипЗнч(Стр.Субконто1) = Тип("СписокЗначений") Тогда                                           
			СлагаемоеНаименование = СлагаемоеНаименование + "." + НСтр("ru=' Субконто ';uk='Субконто '") + ОпределитьВидСубконто(Стр.Субконто1, Стр.КодСчета, 1).Наименование + НСтр("ru=' принимает одно из следующих значений: ';uk=' приймає одне з наступних значень: '");
			Для Каждого Эл Из Стр.Субконто1 Цикл
				СлагаемоеНаименование = СлагаемоеНаименование + Эл.Значение + ", "+ Символы.ПС;
			КонецЦикла;
			СлагаемоеНаименование = Лев(СлагаемоеНаименование, СтрДлина(СлагаемоеНаименование) - 3) + "; ";
		Иначе
			СлагаемоеНаименование = СлагаемоеНаименование + "." + Символы.ПС + НСтр("ru='Субконто ';uk='Субконто '") + ОпределитьВидСубконто(Стр.Субконто1, Стр.КодСчета, 1).Наименование + НСтр("ru=' принимает одно из следующих значений: ';uk=' приймає одне з наступних значень: '") + Стр.Субконто1 + ";";
		КонецЕсли;
	КонецЕсли;
	
	Если Стр.Субконто2 <> Неопределено Тогда
		Если ТипЗнч(Стр.Субконто2) = Тип("СписокЗначений") Тогда
			СлагаемоеНаименование = СлагаемоеНаименование + "." + НСтр("ru=' Субконто ';uk='Субконто '") +ОпределитьВидСубконто(Стр.Субконто2, Стр.КодСчета, 2).Наименование + НСтр("ru=' принимает одно из следующих значений: ';uk=' приймає одне з наступних значень: '");
			Для Каждого Эл Из Стр.Субконто2 Цикл
				СлагаемоеНаименование = СлагаемоеНаименование + Эл.Значение + ", "+ Символы.ПС;
			КонецЦикла;
			СлагаемоеНаименование = Лев(СлагаемоеНаименование, СтрДлина(СлагаемоеНаименование) - 3) + "; ";
		Иначе
			СлагаемоеНаименование = СлагаемоеНаименование + "." + Символы.ПС + НСтр("ru='Субконто ';uk='Субконто '") + ОпределитьВидСубконто(Стр.Субконто2, Стр.КодСчета, 2).Наименование + НСтр("ru=' принимает одно из следующих значений: ';uk=' приймає одне з наступних значень: '") + Стр.Субконто2 + ";";
		КонецЕсли;
	КонецЕсли;
	
	Если Стр.Субконто3 <> Неопределено Тогда
		Если ТипЗнч(Стр.Субконто3) = Тип("СписокЗначений") Тогда
			СлагаемоеНаименование = СлагаемоеНаименование + "." + НСтр("ru=' Субконто ';uk='Субконто '") + ОпределитьВидСубконто(Стр.Субконто3, Стр.КодСчета, 3).Наименование + НСтр("ru=' принимает одно из следующих значений: ';uk=' приймає одне з наступних значень: '");
			Для Каждого Эл Из Стр.Субконто3 Цикл
				СлагаемоеНаименование = СлагаемоеНаименование + Эл.Значение + ", "+ Символы.ПС;
			КонецЦикла;
			СлагаемоеНаименование = Лев(СлагаемоеНаименование, СтрДлина(СлагаемоеНаименование) - 3) + "; ";
		Иначе
			СлагаемоеНаименование = СлагаемоеНаименование + "." + Символы.ПС + НСтр("ru='Субконто ';uk='Субконто '") + ОпределитьВидСубконто(Стр.Субконто3, Стр.КодСчета, 3).Наименование + НСтр("ru=' принимает одно из следующих значений: ';uk=' приймає одне з наступних значень: '") + Стр.Субконто3 + ";";
		КонецЕсли;
	КонецЕсли;
	
	Если Стр.ЗнакОперации <> Знак Тогда
		Если Стр.ЗнакОперации = "+" Тогда
			ВывестиСекцию(Таб, "Плюс");
		Иначе
			ВывестиСекцию(Таб, "Минус");
			//Знак = "";
		КонецЕсли;
	КонецЕсли;
	Знак = "";
	
	Сумма = Стр.Сумма;
	Если Стр.ЗнакОперации = "+" Тогда
		СуммаПоПоказателю = СуммаПоПоказателю + Сумма;
	Иначе
		СуммаПоПоказателю = СуммаПоПоказателю - Сумма;
	КонецЕсли;
	
	ВывестиСекцию(Таб, "Слагаемое", СлагаемоеНаименование, Сумма, ?(Лев(Стр.ИмяСлагаемого, 1) = "!", Стр, Неопределено));
	
КонецПроцедуры	

// Функция возвращает строку таблицы значений, описывающую значение ручной корректировки для показателя
//
// Параметры:
//	Стр - строка таблицы значений, описывающая показатель, для которого требуется получить корректировку
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений, описывающая значение ручной корректировки. Неопределено - если строка не задана.
//
Функция ПолучитьСмещение(Стр)
	Перем МассивВариантовЗаполненияСтраниц;
	
	Если НЕ Форма.мСтруктураВариантыЗаполнения.Свойство(Стр.Раздел, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если МассивВариантовЗаполненияСтраниц.Количество() < ?(Стр.Страница = Неопределено, 1, Стр.Страница) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаВариантовЗаполнения = МассивВариантовЗаполненияСтраниц[?(Стр.Страница = Неопределено, 0, Стр.Страница)];
	ИскомаяСтрока = ТаблицаВариантовЗаполнения.Найти(ИмяЯчейки, "КодПоказателя");
	
	Если ИскомаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИскомаяСтрока;
	
КонецФункции

// Процедура формирует и выводит в поле табличного документа на форме расшифровку значения показателя,
// соответствующего текущей ячейке активного поля табличного документа вызывающей формы (задана в переменной модуля "Форма").
// В случае, если для показателя, соответсвующего текущей активной ячейки расшифровка неопределена, то расшифровка 
// выводится для всех показателей, для которых расшифровка определена.
// Процедура вызывается из модуля формы отчета.
//
// Параметры:
//	Нет.
//
Процедура Показать() Экспорт
	
	Если СпП.Количество() = 0 Тогда
		Если НЕ ПередаватьДанныеВСистемуЗвит1С = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Предупреждение(НСтр("ru='Расшифровка не сформирована."
"Расшифровка формируется при нажатии на кнопку ""Заполнить"".';uk='Розшифровка не сформована."
"Розшифровка формується при натисканні на кнопку ""Заповнити"".'"));
		Возврат;
	КонецЕсли;	
	
	Таб = ЭлементыФормы.ПолеРасшифровки;//Новый ТабличныйДокумент;
	Таб.Очистить();
	
	СуммаПоПоказателю = 0;
	Зг = 0;
	Стр = 1;
	
	НомерСтрокиЗначения = 0;
	
	СтруктураПоиска = Новый Структура("ИмяЯчейки", ИмяЯчейки);
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		СтруктураПоиска.Вставить("Раздел", ИмяПоля);
	КонецЕсли;
	НайденныеСтроки = СпП.НайтиСтроки(СтруктураПоиска);
	
	//Заголовок = "";
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		// Расшифровка для выбранного показателя найдена
		Знак="+";
		
		Смещение = ПолучитьСмещение(НайденныеСтроки.Получить(0));
	
		Наименование = НайденныеСтроки[0].ИмяПоказателя;
		
		НовСтр = ОбластиГруппыСтрок.Добавить();
		НовСтр.Наименование = Наименование;
		НовСтр.Верх = Таб.ВысотаТаблицы + 1;
		
		ВывестиСекцию(Таб, "Заголовок", Символы.ПС + Наименование + Символы.ПС + Символы.ПС, , НайденныеСтроки[0]);
		
		Для Каждого Стр Из НайденныеСтроки Цикл
			ВыводСтроки(Стр);
		КонецЦикла;
		
		Дельта = 0;
		Если Смещение <> Неопределено И Смещение.Дельта <> 0 Тогда
			ВывестиСекцию(Таб, "Плюс");
			Если ПустаяСтрока(Смещение.Комментарий) Тогда
				ТекстКомментария = НСтр("ru='Ручная корректировка';uk='Ручне коректування'");
			Иначе	
				ТекстКомментария = Смещение.Комментарий + НСтр("ru=' - ручная корректировка';uk=' - ручне коректування'");
			КонецЕсли;	
			ВывестиСекцию(Таб, "Слагаемое", ТекстКомментария, Смещение.Дельта, НайденныеСтроки[0]);
			Дельта = Дельта + Смещение.Дельта;
		КонецЕсли;
		
		ВывестиСекцию(Таб, "Итог", СуммаПоПоказателю + Дельта);
		
		НовСтр.Низ = Таб.ВысотаТаблицы;
		
		Таб.ТолькоПросмотр = Истина;
		Таб.ОтображатьЗаголовки = Ложь;
		Таб.ОтображатьСетку = Ложь;
		Заголовок = Наименование + НСтр("ru=' - расшифровка значения';uk=' - розшифровка значення'");
		
		Если ПередаватьДанныеВСистемуЗвит1С = Неопределено Тогда
			Открыть();
		КонецЕсли;
		
	Иначе
		
		Если НЕ ПередаватьДанныеВСистемуЗвит1С = Неопределено
			ИЛИ 
			Вопрос( НСтр("ru='Расшифровка для выбранной ячейки не существует."
"Показать расшифровку для всех ячеек формы?';uk='Розшифровка для обраної комірки не існує."
"Показати розшифровку для всіх комірок форми?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда

			ИмяЯчейки = "";
			
			НовСтр = ОбластиГруппыСтрок.Добавить();
			НовСтр.Верх = Таб.ВысотаТаблицы + 1;
			
			Для Каждого Стр Из СпП Цикл
				
				Если Стр.ИмяЯчейки <> ИмяЯчейки Тогда
					
					Если ИмяЯчейки <> "" Тогда
						
						Смещение = ПолучитьСмещение(Стр);
				
						Дельта = 0;
						Если Смещение <> Неопределено И Смещение.Дельта <> 0 Тогда
							ВывестиСекцию(Таб, "Плюс");
							Если ПустаяСтрока(Смещение.Комментарий) Тогда
								ТекстКомментария = НСтр("ru='Корректировка';uk='Коректування'");
							Иначе
								ТекстКомментария = Смещение.Комментарий + НСтр("ru=' - корректировка';uk=' - коректування'");
							КонецЕсли;	
							ВывестиСекцию(Таб, "Слагаемое", ТекстКомментария, Смещение.Дельта, Стр);
							Дельта = Дельта + Смещение.Дельта;
						КонецЕсли;
						
						ВывестиСекцию(Таб, "Итог", СуммаПоПоказателю + Дельта);
						
						НовСтр.Низ = Таб.ВысотаТаблицы;
						
						НовСтр = ОбластиГруппыСтрок.Добавить();
						НовСтр.Верх = Таб.ВысотаТаблицы + 1;
						СуммаПоПоказателю = 0;
					КонецЕсли;
					
					Наименование = Стр.ИмяПоказателя;
					НовСтр.Наименование = Наименование;
					ВывестиСекцию(Таб, "Заголовок", Символы.ПС + Наименование + Символы.ПС + Символы.ПС, , Стр);
					Знак = "+";
					
				КонецЕсли;
				
				ИмяЯчейки = Стр.ИмяЯчейки;
				
				ВыводСтроки(Стр);
				
			КонецЦикла;
			
			ВывестиСекцию(Таб, "Итог", СуммаПоПоказателю);
			
			НовСтр.Низ = Таб.ВысотаТаблицы;
			Таб.ТолькоПросмотр = Истина;
			Таб.ОтображатьЗаголовки = Ложь;
			Таб.ОтображатьСетку = Ложь;
			Заголовок = Форма.Заголовок + НСтр("ru=' - расшифровка значений';uk=' - розшифровка значень'");
			
			Если ПередаватьДанныеВСистемуЗвит1С = Неопределено Тогда
				Открыть();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает вид стандартного отчета, который следует открыть при вызове расшифровки для слагаемого,
// описываемого в строке таблицы значений, переданной в процедуру в качестве параметра
// 
// Параметры:
//	Стр - СтрокаТаблицыЗначений, описывающая расшифровывавемое слагаемое
//
// Возвращемое значение:
//	Строка - префикс имени объекта метаданных - стандартного отчета
//
Функция ПолучитьВидОтчета(Стр)
	ИмяСлагаемого = Стр.ИмяСлагаемого;
	Если Лев(ИмяСлагаемого, 1) <> "!" Тогда
		ВидОтчета = "ОборотноСальдоваяВедомость";
	Иначе
		Макроимя = Сред(ИмяСлагаемого, 2);
		Если Макроимя = "СНД" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СНДР" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СНДРС" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СКД" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СКДР" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СКДРС" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СНК" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СНКР" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СНКРС" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СКК" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СККР" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СККРС" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "ДО" Тогда
			ВидОтчета = "АнализСчета";
		ИначеЕсли Макроимя = "ДОРС" Тогда
			ВидОтчета = "АнализСчета";
		ИначеЕсли Макроимя = "КО" Тогда
			ВидОтчета = "АнализСчета";
		ИначеЕсли Макроимя = "КОРС" Тогда
			ВидОтчета = "АнализСчета";
		ИначеЕсли Макроимя = "ОБ" Тогда
			ВидОтчета = "АнализСчета";
		ИначеЕсли Макроимя = "АС" Тогда
			ВидОтчета = "АнализСубконто";
		ИначеЕсли Макроимя = "ОМС" Тогда
			ВидОтчета = "ОборотыМеждуСубконто";
		Иначе
			ВидОтчета = "КарточкаСчета";
		КонецЕсли;
	КонецЕсли;
	Возврат ВидОтчета;
КонецФункции

// Процедура - обработчик события "Обработка расшифровки" поля табличного документа "ПолеРасшифровки" формы
// Открывает стандартный отчет, соответствующий активной ячейки поля табличного документа
//
Процедура ПолеРасшифровкиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		Попытка
			
			Форма.АктивизироватьЯчейку(Расшифровка.Расшифровка);
			Форма.Активизировать();
			
		Исключение
			
		КонецПопытки;
		
	Иначе
		
		Если ЭлементыФормы.ПолеРасшифровки.ТекущаяОбласть.Лево = 3 И ЭлементыФормы.ПолеРасшифровки.ТекущаяОбласть.Право = 3 Тогда
			ТекОбл = ЭлементыФормы.ПолеРасшифровки.Область(ЭлементыФормы.ПолеРасшифровки.ТекущаяОбласть.Верх, 
						  2, ЭлементыФормы.ПолеРасшифровки.ТекущаяОбласть.Верх, 2);
			Расшифровка = ТекОбл.Расшифровка;
		Иначе
			ТекОбл = Неопределено;
		КонецЕсли;
		
		Попытка
			Если Расшифровка.Открыта() Тогда
				Расшифровка.Активизировать();
			Иначе
				Расшифровка.ОбновитьОтчет();
				Расшифровка.Открыть();
			КонецЕсли;
			Возврат;
		Исключение
		КонецПопытки;
		
		Если  (НЕ Расшифровка.КодСчета = Неопределено И ТипЗнч(Расшифровка.КодСчета) = Тип("ПланСчетовСсылка.Налоговый"))
				ИЛИ (ТипЗнч(Расшифровка.КодКорСчета) = Тип("ПланСчетовСсылка.Налоговый")) Тогда
		
		
			// оставляем поддержку старых налоговых отчетов для декл. по прибыли до 2011 года.
			ПараметрыНастройки = Новый Структура;
			ПараметрыНастройки.Вставить("Счет", Расшифровка.КодСчета);		
			ПараметрыНастройки.Вставить("КорСчет", Расшифровка.КодКорСчета);
			ПараметрыНастройки.Вставить("Организация", Организация);
			ПараметрыНастройки.Вставить("ДатаНач", Расшифровка.ДатаНачала);
			ПараметрыНастройки.Вставить("ДатаКон", Расшифровка.ДатаКонца);
			ОтборПоСубконто = Новый Структура;
			Если Расшифровка.Субконто1 <> Неопределено Тогда
				ОтборПоСубконто.Вставить("Субконто1", Расшифровка.Субконто1);
			КонецЕсли;
			Если Расшифровка.Субконто2 <> Неопределено Тогда
				ОтборПоСубконто.Вставить("Субконто2", Расшифровка.Субконто2);
			КонецЕсли;
			Если Расшифровка.Субконто3 <> Неопределено Тогда
				ОтборПоСубконто.Вставить("Субконто3", Расшифровка.Субконто3);
			КонецЕсли;
			Если ОтборПоСубконто.Количество() > 0 Тогда
				ПараметрыНастройки.Вставить("Отбор", ОтборПоСубконто);
			КонецЕсли;
			
			ВидОтчета = ПолучитьВидОтчета(Расшифровка);
			
			ИмяПланаСчетов =  "Налоговый";
			
			Отчет = Отчеты[ВидОтчета + ИмяПланаСчетов].Создать();
			
			Если ВидОтчета <> "ОборотноСальдоваяВедомость" Тогда
				Если ВидОтчета = "АнализСчета" Тогда
					ПараметрыНастройки.Вставить("ПоВалютам", Истина);
					ПараметрыНастройки.Вставить("ПоКоличеству", Истина);
					ПараметрыНастройки.Вставить("ПоСубсчетамИСубконто", Истина);
					ПараметрыНастройки.Вставить("ПоКорСубсчетамИСубконто", Истина);
				ИначеЕсли ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету" Тогда
					ПараметрыНастройки.Вставить("ПоВалютам", Истина);
					ПараметрыНастройки.Вставить("ПоКоличеству", Истина);
					ПараметрыНастройки.Вставить("ПоСубсчетам", Истина);
				КонецЕсли;
				Отчет.Настроить(ПараметрыНастройки);
			КонецЕсли;
			
			ФормаОтчета = Отчет.ПолучитьФорму(, , Новый УникальныйИдентификатор());
			
			ФормаОтчета.ПоказыватьЗаголовок = Истина;
			
			ФормаОтчета.ОбновитьОтчет();

			ФормаОтчета.Открыть();
			
			Если ТекОбл <> Неопределено Тогда
				ТекОбл.Расшифровка = ФормаОтчета;
			Иначе
				ЭлементыФормы.ПолеРасшифровки.ТекущаяОбласть.Расшифровка = ФормаОтчета;
			КонецЕсли;
		
		Иначе
			//новые отчеты
			ВидОтчета = ПолучитьВидОтчета(Расшифровка);
			
			ВидУчета = Новый Массив;
			ВидУчета.Добавить("БУ");
			Если СпП.Колонки.Найти("НалоговоеНазначение") <> Неопределено Тогда
				ВидУчета.Добавить("НУ");
			КонецЕсли;
			
			ФормаОтчета = Отчеты[ВидОтчета].ПолучитьФорму();
			
			ФормаОтчета.РежимРасшифровки = Истина;
			ФормаОтчета.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
			Счет    = Расшифровка.КодСчета;
			КорСчет = Расшифровка.КодКорСчета;
			ФормаОтчета.Организация = Организация;
			
			Если Расшифровка.Субконто1 <> Неопределено Тогда
				Если ТипЗнч(Расшифровка.Субконто1) = Тип("СписокЗначений") Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке; 
				Иначе
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
				ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроек, "Субконто1", Расшифровка.Субконто1, ВидСравненияОтбора);
			КонецЕсли;
			Если Расшифровка.Субконто2 <> Неопределено Тогда
				Если ТипЗнч(Расшифровка.Субконто2) = Тип("СписокЗначений") Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке; 
				Иначе
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
				Если НЕ ВидОтчета = "ОборотыМеждуСубконто" Тогда
					ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроек, "Субконто2", Расшифровка.Субконто2, ВидСравненияОтбора);
				КонецЕсли;
			КонецЕсли;
			Если Расшифровка.Субконто3 <> Неопределено Тогда
				Если ТипЗнч(Расшифровка.Субконто3) = Тип("СписокЗначений") Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке; 
				Иначе
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
				ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроек, "Субконто3", Расшифровка.Субконто3, ВидСравненияОтбора);
			КонецЕсли;
			ФормаОтчета.НачалоПериода = Расшифровка.ДатаНачала;
			ФормаОтчета.КонецПериода  = Расшифровка.ДатаКонца;
			Если ВидОтчета <> "ОборотноСальдоваяВедомость" Тогда
				Если ВидОтчета = "АнализСчета" Тогда
					ФормаОтчета.Счет = Счет;
					ФормаОтчета.Настроить();
					Если ЗначениеЗаполнено(Счет) Тогда
						Если СвойствоОпределено(Счет, "Валютный") И Счет.Валютный Тогда
							ВидУчета.Добавить("ВалютнаяСумма");
						КонецЕсли;
						Если СвойствоОпределено(Счет, "Количественный") И Счет.Количественный Тогда
							ВидУчета.Добавить("Количество");
						КонецЕсли;
					КонецЕсли;
					ФормаОтчета.ПоСубсчетам          = Истина;
					ФормаОтчета.ПоСубсчетамКорСчетов = Истина;
				ИначеЕсли ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету" Тогда
					ФормаОтчета.Счет = Счет;
					ФормаОтчета.Настроить();
					Если ЗначениеЗаполнено(Счет) Тогда
						Если СвойствоОпределено(Счет, "Валютный") И Счет.Валютный Тогда
							ВидУчета.Добавить("ВалютнаяСумма");
						КонецЕсли;
						Если СвойствоОпределено(Счет, "Количественный") И Счет.Количественный Тогда
							ВидУчета.Добавить("Количество");
						КонецЕсли;
					КонецЕсли;
					ФормаОтчета.ПоСубсчетам          = Истина;
					
					// включим признак развернутого сальдо
					Если ВРег(Прав(Расшифровка.ИмяСлагаемого,2)) = "РС" Тогда
						ВидУчета.Добавить("РазвернутоеСальдо");
					КонецЕсли;
					
				ИначеЕсли ВидОтчета = "АнализСубконто" Тогда
					
					ФормаОтчета.ПоСубсчетам = Истина;
					
					Если Расшифровка.Субконто1 <> Неопределено Тогда
						ФормаОтчета.СписокВидовСубконто.Добавить(ОпределитьВидСубконто(Расшифровка.Субконто1,Счет,1));
						ТиповыеОтчеты.ДобавитьГруппировку(ФормаОтчета.КомпоновщикНастроек, "Субконто1");
					КонецЕсли;
					Если Расшифровка.Субконто2 <> Неопределено Тогда
						ФормаОтчета.СписокВидовСубконто.Добавить(ОпределитьВидСубконто(Расшифровка.Субконто2,Счет,2));
						ТиповыеОтчеты.ДобавитьГруппировку(ФормаОтчета.КомпоновщикНастроек, "Субконто2");
					КонецЕсли;
					Если Расшифровка.Субконто3 <> Неопределено Тогда
						ФормаОтчета.СписокВидовСубконто.Добавить(ОпределитьВидСубконто(Расшифровка.Субконто3,Счет,3));
						ТиповыеОтчеты.ДобавитьГруппировку(ФормаОтчета.КомпоновщикНастроек, "Субконто3");
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Счет) Тогда
						ВидСравненияСчет = Неопределено;
						Если ТипЗнч(Счет) = Тип("СписокЗначений") Тогда
							ВидСравненияСчет = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
						КонецЕсли;
						
						ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроек, "Счет", Счет, ВидСравненияСчет);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Расшифровка.НалоговоеНазначение) Тогда
						ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроек, "НалоговоеНазначение", Расшифровка.НалоговоеНазначение);
					КонецЕсли;
					
					ФормаОтчета.Настроить();
					
				ИначеЕсли ВидОтчета = "ОборотыМеждуСубконто" Тогда
					
					Если Расшифровка.Субконто1 <> Неопределено Тогда
						ФормаОтчета.СписокВидовСубконто.Добавить(ОпределитьВидСубконто(Расшифровка.Субконто1,Счет,1));
						ТиповыеОтчеты.ДобавитьГруппировку(ФормаОтчета.КомпоновщикНастроек, "Субконто1");
					КонецЕсли;
					Если Расшифровка.Субконто2 <> Неопределено Тогда
						ФормаОтчета.СписокВидовКорСубконто.Добавить(ОпределитьВидСубконто(Расшифровка.Субконто2,Счет,2));
						ТиповыеОтчеты.ДобавитьГруппировку(ФормаОтчета.КомпоновщикНастроек, "КорСубконто1");
						
						Если ТипЗнч(Расшифровка.Субконто2) = Тип("СписокЗначений") Тогда
							ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке; 
						Иначе
							ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
						КонецЕсли;
						
						ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроек, "КорСубконто1", Расшифровка.Субконто2, ВидСравненияОтбора);				
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Расшифровка.НалоговоеНазначение) Тогда
						ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроек, "НалоговоеНазначение", Расшифровка.НалоговоеНазначение);
					КонецЕсли;
					
					ФормаОтчета.Настроить();					
				Иначе
					ФормаОтчета.Настроить();
					ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроек, "Счет"   , Счет   , ВидСравненияКомпоновкиДанных.ВИерархии);
					ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроек, "КорСчет", КорСчет, ВидСравненияКомпоновкиДанных.ВИерархии);
				КонецЕсли;
			Иначе
				ФормаОтчета.Настроить();
			КонецЕсли;
			
			Для Каждого Показатель Из ФормаОтчета.ДанныеОтчета.ПоказателиОтчета Цикл
				Показатель.Значение.Значение = Ложь;
			КонецЦикла;
			Для Каждого ЭлементМассива Из ВидУчета Цикл
				ФормаОтчета.ДанныеОтчета.ПоказателиОтчета[ЭлементМассива].Значение = Истина;
			КонецЦикла;
			
			Если ФормаОтчета.Открыта() Тогда
				ФормаОтчета.ОбновитьПанельНастроек();
				ФормаОтчета.Активизировать();
			Иначе
				ФормаОтчета.Открыть();
			КонецЕсли;
			
			ФормаОтчета.ОбновитьОтчет();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "Сохранить" нижней командной панели формы
// Сохраняет табличный документ в виде файла MXL, в который выводятся расшифровки выбранных
// пользователем показателей
//
Процедура ОсновныеДействияФормыКнопкаСохранить(Кнопка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.Расширение = "mxl";
	Диалог.Фильтр = НСтр("ru='Табличные документы (*.mxl)|*.mxl';uk='Табличні документи (*.mxl)|*.mxl'");
	Если НЕ Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	//ОтветНаВопрос = Вопрос("Выбрать показатели, расшифровки которых следует сохранить?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	//Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
	//	Возврат;
	//КонецЕсли;
	
	СписокПоказателей = Новый СписокЗначений;
	Для Каждого Стр Из ОбластиГруппыСтрок Цикл
		СписокПоказателей.Добавить(Стр, Стр.Наименование, Истина);
	КонецЦикла;
	
	//Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		Если НЕ СписокПоказателей.ОтметитьЭлементы(НСтр("ru='Выберите показатели';uk='Виберіть показники'")) Тогда
			Возврат;
		КонецЕсли;
	//КонецЕсли;
	
	Табл = Новый ТабличныйДокумент;
	Для Каждого Стр Из СписокПоказателей Цикл
		Если Стр.Пометка Тогда
			Табл.Вывести(ЭлементыФормы.ПолеРасшифровки.ПолучитьОбласть(Стр.Значение.Верх, , Стр.Значение.Низ, ));
		КонецЕсли;
	КонецЦикла;
	Табл.ОтображатьЗаголовки = Ложь;
	Табл.ОтображатьСетку = Ложь;
	
	Попытка
		Табл.Записать(Диалог.ПолноеИмяФайла, ТипФайлаТабличногоДокумента.MXL);
	Исключение
		Сообщить(НСтр("ru='Не удалось записать файл на диск. Возможно, диск защищен от записи или недостаточно места на диске';uk='Не вдалося записати файл на диск. Можливо, диск захищений від запису або недостатньо місця на диску'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "Печать" нижней командной панели формы
// Выводит на печать табличный документ, в который выводятся расшифровки выбранных
// пользователем показателей
//
Процедура ОсновныеДействияФормыКнопкаВывестиНаПечать(Кнопка)
	
	//ОтветНаВопрос = Вопрос("Выбрать показатели для печати?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	//Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
	//	Возврат;
	//КонецЕсли;
	
	СписокПоказателей = Новый СписокЗначений;
	Для Каждого Стр Из ОбластиГруппыСтрок Цикл
		СписокПоказателей.Добавить(Стр, Стр.Наименование, Истина);
	КонецЦикла;
	
	//Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		Если НЕ СписокПоказателей.ОтметитьЭлементы(НСтр("ru='Выберите показатели для печати';uk='Виберіть показники для друку'")) Тогда
			Возврат;
		КонецЕсли;
	//КонецЕсли;
	
	Табл = Новый ТабличныйДокумент;
	Для Каждого Стр Из СписокПоказателей Цикл
		Если Стр.Пометка Тогда
			Табл.Вывести(ЭлементыФормы.ПолеРасшифровки.ПолучитьОбласть(Стр.Значение.Верх, , Стр.Значение.Низ, ));
		КонецЕсли;
	КонецЦикла;
	Табл.ОтображатьЗаголовки = Ложь;
	Табл.ОтображатьСетку = Ложь;
	Табл.ТолькоПросмотр = Истина;
	Табл.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	Табл.ВерхнийКолонтитул.НачальнаяСтраница = 1;
	Табл.ВерхнийКолонтитул.Выводить = Истина;
	Табл.ВерхнийКолонтитул.ТекстСлева = Заголовок + ". Страница [&НомерСтраницы] из [&СтраницВсего].";
	Табл.Показать(Заголовок);
		
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "КнопкаАктивизироватьРодительскийОтчет" нижней командной панели формы
// Активизирует форму родительского отчета, если та еще не закрыта
//
Процедура ОсновныеДействияФормыКнопкаАктивизироватьРодительскийОтчет(Кнопка)
	
	Если Форма <> Неопределено И Форма.Открыта() Тогда
		Форма.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Отказ = (Форма = Неопределено);
	
	Если ТипЗнч(Форма) = Тип("Структура") Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.КнопкаАктивизироватьРодительскийОтчет.Доступность = Ложь;	
	КонецЕсли;
	
КонецПроцедуры
    
Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
    Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Функция ОпределитьВидСубконто(Знач ЗначениеСубконто, Счет, НомерСубконто)
	
	Если  ТипЗнч(ЗначениеСубконто) = Тип("СписокЗначений")
		И ЗначениеСубконто.Количество() > 0 Тогда
		
		ТипыСовпадают = Истина;
		Для каждого ТекЭлемент Из ЗначениеСубконто Цикл
			Если НЕ ТипЗнч(ТекЭлемент.Значение) = ТипЗнч(ЗначениеСубконто[0].Значение) Тогда
				ТипыСовпадают = Ложь;	
				Прервать;				
			КонецЕсли;	
		КонецЦикла;
		
		Если ТипыСовпадают Тогда
			ЗначениеСубконто = ЗначениеСубконто[0].Значение;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
		
	ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.СтатьиДоходов") Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов;
		
	ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.СтатьиНеоперационныхРасходов") Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов;
		
	ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.СтатьиНалоговыхДеклараций") Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций;
		
	ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;
		
	ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы;
		
	ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
		
	Иначе	
		Если ЗначениеЗаполнено(Счет) Тогда
			Если ТипЗнч(Счет) = Тип("СписокЗначений") Тогда
				Возврат Счет[0].Значение.ВидыСубконто[НомерСубконто - 1].ВидСубконто;		
			Иначе
				Возврат Счет.ВидыСубконто[НомерСубконто - 1].ВидСубконто;
			КонецЕсли;
		Иначе		
			Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();	
		КонецЕсли;
	КонецЕсли;

КонецФункции // ()


Если Форма <> Неопределено Тогда
	СпП = Новый ТаблицаЗначений;
	СпП = Форма.СпП.Скопировать();// копируем таблицы расшифровок из родительского отчета
	Для Каждого Стр Из СпП Цикл
		Если Стр.Раздел = Неопределено Тогда
			Стр.Раздел = "ФормаОтчета";
		КонецЕсли;
	КонецЦикла;
	СпП.Колонки.Добавить("ОтчетДляРасшифровки");
	
	// инициализируем все переменные модуля формы из переменных модуля вызывающей формы
	Организация = Форма.Организация;
	ДатаНачала = Форма.мДатаНачалаПериодаОтчета;
	ДатаКонца = Форма.мДатаКонцаПериодаОтчета;
КонецЕсли;

// инициализируем таблицу, в которой будут хранится описания областей отчета, соответствующих
// расшифровкам показателей
ОбластиГруппыСтрок = Новый ТаблицаЗначений;
ОбластиГруппыСтрок.Колонки.Добавить("Наименование", , НСтр("ru='Наименование показателя';uk='Найменування показника'"));
ОбластиГруппыСтрок.Колонки.Добавить("Верх");
ОбластиГруппыСтрок.Колонки.Добавить("Низ");
