////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

Перем мЖирныйШрифт;
Перем мОтображенныеОрганизации;

Перем мИспользоватьИерархию;

// Переменная соответствие названия действия - действию
// Для формирования динамического меню
Перем мСтруктураСоответствияДействий;

Перем мМассивВыбранныхЗначений Экспорт;

Перем мКодПорядка;

// Переменная для отбора из вне, например из формы контрактов
Перем мВидДоговора Экспорт;

// Переменная для включения режима рабочего места
Перем мРежимРаботыФормы Экспорт;
Перем мПараметрыПодбора Экспорт;

Перем мВидимыеСтраховыеПолисы;
Перем мОстаткиОтпусковТекущегоСотрудника;

// Оптимизация работы события ПриПолученииДанных
Перем мИспользоватьКешПриПолученииДанных;
Перем мКешПриПолученииДанных;

Перем мДанныеСпискаПодготовлены;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура УстановитьОтборПоВидуДоговора()
	
	мИспользоватьКешПриПолученииДанных = Ложь;
	
	Если ЭлементыФормы.ПолеРежимОтображенияСписка.Значение <> "ПоВидуДоговора" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ЭлементыФормы.ВидыДоговоров.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		СправочникСписок.Отбор.ВидДоговора.Использование = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.ВидДоговора = 3 Тогда
		// трудовые договора
		СправочникСписок.Отбор.ВидДоговора.ВидСравнения		= ВидСравнения.Равно;
		СправочникСписок.Отбор.ВидДоговора.Значение			= Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;
		СправочникСписок.Отбор.ВидДоговора.Использование	= Истина;
		
	ИначеЕсли ДанныеСтроки.ВидДоговора = 4 Тогда
		// договорники
		СписокДоговоров = Новый СписокЗначений;
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		СправочникСписок.Отбор.ВидДоговора.ВидСравнения		= ВидСравнения.ВСписке;
		СправочникСписок.Отбор.ВидДоговора.Значение			= СписокДоговоров;
		СправочникСписок.Отбор.ВидДоговора.Использование	= Истина;
		
	ИначеЕсли ДанныеСтроки.ВидДоговора = 5 Тогда
		СправочникСписок.Отбор.ВидДоговора.Использование	= Ложь;
		
		
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьОтборПоОрганизации()
	
	мИспользоватьКешПриПолученииДанных = Ложь;
	
	ЗначениеИзСписка = ЭлементыФормы.ОтборПоОрганизации.Значение;
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеИзСписка);
	Если ИспользоватьОтбор Тогда
		СправочникСписок.Отбор.Организация.ВидСравнения	= ВидСравнения.Равно;
		СправочникСписок.Отбор.Организация.Значение		= ЗначениеИзСписка;
		
		Если ЭлементыФормы.ПанельРежимОтображенияСписка.ТекущаяСтраница = ЭлементыФормы.ПанельРежимОтображенияСписка.Страницы.ПоПодразделениям Тогда
			// В форме отбор устанавливается только по головным организациям
			// В списке подразделений кроме головных, есть еще и обособленные подразделения
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ЗначениеИзСписка);
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	(Организации.Ссылка = &ГоловнаяОрганизация
			|			ИЛИ Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация)";
			СписокОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
			ПодразделенияОрганизаций.Отбор.Владелец.ВидСравнения	= ВидСравнения.ВСписке;
			ПодразделенияОрганизаций.Отбор.Владелец.Значение.ЗагрузитьЗначения(СписокОрганизаций);
		КонецЕсли;
	КонецЕсли;
	СправочникСписок.Отбор.Организация.Использование = ИспользоватьОтбор;
	
	Если ЭлементыФормы.ПанельРежимОтображенияСписка.ТекущаяСтраница = ЭлементыФормы.ПанельРежимОтображенияСписка.Страницы.ПоПодразделениям Тогда
		ПодразделенияОрганизаций.Отбор.Владелец.Использование		= Ложь;
		Если ИспользоватьОтбор Тогда
			ПодразделенияОрганизаций.Отбор.Владелец.Использование	= Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборПоПодразделению()
	
	мИспользоватьКешПриПолученииДанных = Ложь;
	
	Элемент = ЭлементыФормы.ПодразделенияОрганизаций;
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Если СправочникСписок.Отбор.ТекущееПодразделениеОрганизации.Использование Тогда
			СправочникСписок.Отбор.ТекущееПодразделениеОрганизации.Использование	= Ложь;
		КонецЕсли;
//		Если СправочникСписок.Отбор.ТекущееОбособленноеПодразделение.Использование Тогда
//			СправочникСписок.Отбор.ТекущееОбособленноеПодразделение.Использование	= Ложь;
//		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущаяКолонка.Имя <> "Организация" Тогда
		ТекущийОтбор = СправочникСписок.Отбор.ТекущееПодразделениеОрганизации;
		Если Не ТекущийОтбор.Использование ИЛИ ТекущийОтбор.Значение <> ДанныеСтроки.Ссылка Тогда
			СправочникСписок.Отбор.ТекущееПодразделениеОрганизации.Использование	= Ложь;
			ТекущийОтбор.ВидСравнения	= ВидСравнения.ВСписке;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Спр.Ссылка
			|ИЗ
			|	Справочник.ПодразделенияОрганизаций КАК Спр
			|ГДЕ
			|	Спр.Родитель = &Ссылка";
			
			Ссылка = ДанныеСтроки.Ссылка;
			СписокПодразделений = Новый СписокЗначений;
			СписокПодразделений.Добавить(Ссылка);
			Пока Ссылка <> Неопределено И Не Ссылка.Пустая() Цикл
				Запрос.УстановитьПараметр("Ссылка",	Ссылка);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Ссылка = Выборка.Ссылка;
					Если Не Ссылка.Пустая() Тогда
						СписокПодразделений.Добавить(Ссылка);
					КонецЕсли;
				Иначе
					Ссылка = Неопределено;
				КонецЕсли;
			КонецЦикла;
			
			ТекущийОтбор.Значение		= СписокПодразделений;
			ТекущийОтбор.Использование	= Истина;
		КонецЕсли;
		
	Иначе
		Если ТипЗнч(ДанныеСтроки.Владелец) = Тип("СправочникСсылка.ПодразделенияОрганизаций")  Тогда
			ТекущийОтбор = СправочникСписок.Отбор.ТекущееПодразделениеОрганизации;
		ИначеЕсли ТипЗнч(ДанныеСтроки.Владелец) = Тип("СправочникСсылка.Организации") Тогда
			ТекущийОтбор = СправочникСписок.Отбор.Организация;
		КонецЕсли;
		
		Если Не ТекущийОтбор.Использование ИЛИ ТекущийОтбор.Значение <> ДанныеСтроки.Владелец Тогда
			СправочникСписок.Отбор.ТекущееПодразделениеОрганизации.Использование	= Ложь;
			ТекущийОтбор.Значение		= ДанныеСтроки.Владелец;
			ТекущийОтбор.Использование	= Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьОтборыПоРежимуОтображенияСписка(РежимОтображенияСписка = "")
	
	Отборы = СправочникСписок.Отбор;
	
	Если РежимОтображенияСписка <> "ПоГруппам" Тогда
		ЭлементыФормы.СправочникСписок.ИерархическийПросмотр		= Ложь;
		ЭлементыФормы.СправочникСписок.ТекущийРодитель				= 0;
	КонецЕсли;
	
	Если РежимОтображенияСписка <> "ПоПодразделениям" Тогда
	//	Если Отборы.ТекущееОбособленноеПодразделение.Использование Тогда
	//		Отборы.ТекущееОбособленноеПодразделение.Использование	= Ложь;
	//	КонецЕсли;
		Если Отборы.ТекущееПодразделениеОрганизации.Использование Тогда
			Отборы.ТекущееПодразделениеОрганизации.Использование	= Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимОтображенияСписка <> "ПоВидуДоговора" И ЭлементыФормы.ПолеРежимОтображенияСписка.СписокВыбора.НайтиПоЗначению("ПоВидуДоговора") <> Неопределено И Отборы.ВидДоговора.Использование Тогда
		Отборы.ВидДоговора.Использование							= Ложь;
	КонецЕсли;
	
	//СотрудникиОрганизацийПереопределяемый.ОчиститьОтборыПоРежимуОтображенияСписка(ЭтаФорма, РежимОтображенияСписка);
	
КонецПроцедуры

Процедура УстановитьРежимОтображенияСписка()
	
	Если Не мИспользоватьИерархию Тогда
		ОчиститьОтборыПоРежимуОтображенияСписка();
		
	Иначе
		РежимОтображенияСписка = ЭлементыФормы.ПолеРежимОтображенияСписка.Значение;
		
		ЭлементыФормы.ПанельРежимОтображенияСписка.ТекущаяСтраница	= ЭлементыФормы.ПанельРежимОтображенияСписка.Страницы[РежимОтображенияСписка];
		
		ОчиститьОтборыПоРежимуОтображенияСписка(РежимОтображенияСписка);
		
		Если РежимОтображенияСписка = "ПоГруппам" Тогда
			ДанныеСтроки = ЭлементыФормы.СправочникДерево.ТекущиеДанные;
			Если ДанныеСтроки <> Неопределено Тогда
				ЭлементыФормы.СправочникСписок.ТекущийРодитель		= ДанныеСтроки.Ссылка;
			КонецЕсли;
			ЭлементыФормы.СправочникСписок.ИерархическийПросмотр	= ДанныеСтроки <> Неопределено;
			
		ИначеЕсли РежимОтображенияСписка = "ПоВидуДоговора" Тогда
			УстановитьОтборПоВидуДоговора();
			
		ИначеЕсли РежимОтображенияСписка = "ПоПодразделениям" Тогда
			УстановитьОтборПоОрганизации();
			УстановитьОтборПоПодразделению();
			
		Иначе // программный интерфейс для реализации дополнительных режимов отображения списка
			//СотрудникиОрганизацийПереопределяемый.УстановитьОтборПоРежимуОтображенияСписка(ЭтаФорма, РежимОтображенияСписка);
			
		КонецЕсли;
	КонецЕсли;
	
	мКодПорядка = ?(ЭлементыФормы.СправочникСписок.ИерархическийПросмотр, 1, 0);
	
	мИспользоватьКешПриПолученииДанных = Ложь;
	
КонецПроцедуры

Функция ПервоеПодразделение(Подразделение, Организация, НазваниеОрганизации)
	
	Если мОтображенныеОрганизации[Организация] <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодразделенияОрганизаций.Ссылка,
	|	ПодразделенияОрганизаций.Владелец.Наименование КАК НазваниеОрганизации
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПодразделенияОрганизаций.Наименование";
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	НазваниеОрганизации = Выборка.НазваниеОрганизации;
	
	мОтображенныеОрганизации[Организация] = Истина;
	
	Возврат Выборка.Ссылка = Подразделение;
	
КонецФункции

Процедура ПереключитьИерархию()
	
	ИзменитьВидимостьПанелиПоГоризонталиЛево(ЭтаФорма, мИспользоватьИерархию, ЭлементыФормы.ОсновнаяПанель, ЭлементыФормы.ПанельИерархическийПросмотр, ЭлементыФормы.РазделительИерархическийПросмотр);
	
	ЭлементыФормы.ДействияФормы.Кнопки.ИспользоватьИерархию.Пометка					= мИспользоватьИерархию;
	ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ИспользоватьИерархию.Пометка	= мИспользоватьИерархию;
	
КонецПроцедуры


// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ИЗМЕНЕНИЯ ВИДИМОСТИ ПАНЕЛЕЙ

Процедура ИзменитьВидимостьПанелиПоГоризонтали(Форма, ОтображатьПанель, ИмяОсновнойПанели, ПостфиксЭлементов) Экспорт
	
	Перем Элемент, Граница, Пусто;
	
	ОсновнаяПанель	= Форма.ЭлементыФормы[ИмяОсновнойПанели];
	Панель			= Форма.ЭлементыФормы["Панель" + ПостфиксЭлементов];
	Разделитель		= Форма.ЭлементыФормы["Разделитель" + ПостфиксЭлементов];
	
	Если ОтображатьПанель Тогда
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Право Тогда
			// установить привязку основной панели к разделителю
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Разделитель, ГраницаЭлементаУправления.Лево);
			
			// развернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// развернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			Если Панель.Ширина > Форма.Ширина / 2 Тогда
				// если максимизировать форму с закрытой справкой, а потом открыть справку, то форма
				// будет выглядеть очень некрасиво
				// поэтому необходимо ограничить ширину панели справки в случаях, когда справка получается на шире чем 1/2 формы
				РазницаВШирине = Форма.Ширина - 250 - Разделитель.Лево;
			Иначе
				РазницаВШирине = Панель.Ширина - Макс(250, Мин(Форма.Ширина - 350, Панель.Ширина));
			КонецЕсли;
			Если РазницаВШирине < 0 Тогда
				РазницаВШирине = 0;
			КонецЕсли;
			
			// восстановить привязки разделителя
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Форма.Панель, ГраницаЭлементаУправления.Право);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Разделитель, ГраницаЭлементаУправления.Лево);
			
			// установить привязку панели справки к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Разделитель, ГраницаЭлементаУправления.Право);
			
			Разделитель.Лево = Разделитель.Лево + РазницаВШирине;
		КонецЕсли;
	Иначе
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			ШиринаОсновнойПанели = ОсновнаяПанель.Ширина + Разделитель.Ширина + Панель.Ширина;
			
			// сбросить привязку панели к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
			
			// установить привязку разделителя к панели справки
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Лево);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Лево);
			
			// свернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Право;
			// свернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Право;
			
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Право);
			
			// установить привязку основной панели к форме
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.Панель, ГраницаЭлементаУправления.Право);
			ОсновнаяПанель.Ширина = ШиринаОсновнойПанели;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьВидимостьПанелиПоВертикали(Форма, ОтображатьПанель, ИмяОсновнойПанели, ПостфиксЭлементов) Экспорт
	
	Перем Элемент, Граница, Пусто;
	
	ОсновнаяПанель	= Форма.ЭлементыФормы[ИмяОсновнойПанели];
	Панель			= Форма.ЭлементыФормы["Панель" + ПостфиксЭлементов];
	Разделитель		= Форма.ЭлементыФормы["Разделитель" + ПостфиксЭлементов];
	
	Если ОтображатьПанель Тогда
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
			// установить привязку основной панели к разделителю
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
			
			// развернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// развернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// восстановить привязки разделителя
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Форма.Панель, ГраницаЭлементаУправления.Верх);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
			
			// установить привязку панели справки к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Верх);
		КонецЕсли;
	Иначе
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			ВысотаОсновнойПанели = ОсновнаяПанель.Высота + (ОсновнаяПанель.Верх - Панель.Верх);
			
			// сбросить привязку панели к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Низ);
			
			// установить привязку разделителя к панели справки
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Низ);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			
			// свернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Верх;
			// свернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Верх;
			
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Верх);
			
			// установить привязку основной панели к форме
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Форма.Панель, ГраницаЭлементаУправления.Верх);
			ОсновнаяПанель.Верх		= Панель.Верх;
			ОсновнаяПанель.Высота	= ВысотаОсновнойПанели;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьВидимостьПанелиПоГоризонталиЛево(Форма, ОтображатьПанель, ПраваяПанель, ЛеваяПанель, Разделитель) Экспорт
	
	Если ОтображатьПанель Тогда
		Если ЛеваяПанель.Свертка = РежимСверткиЭлементаУправления.Лево Тогда
			// установить привязку основной панели к разделителю
			ПраваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Разделитель, ГраницаЭлементаУправления.Право);
			
			// развернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// развернуть панель
			ЛеваяПанель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// Переместим разделитель к левой панели
			Разделитель.Лево = ЛеваяПанель.Лево + ЛеваяПанель.Ширина;
			
			// восстановить привязки разделителя
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.Панель, ГраницаЭлементаУправления.Лево);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Разделитель, ГраницаЭлементаУправления.Право);
			
			// установить привязку панели справки к разделителю
			ЛеваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Разделитель, ГраницаЭлементаУправления.Лево);
			
			// Ширину определим от текущего размера формы, за минусом отступов по 8 слева и справа и шириной левой панели и разделителя
			ПраваяПанель.Ширина	= Форма.Ширина - ЛеваяПанель.Ширина - Разделитель.Ширина - 8 * 2;
			ПраваяПанель.Лево	= Разделитель.Лево + Разделитель.Ширина;
		КонецЕсли;
	Иначе
		Если ЛеваяПанель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			ШиринаОсновнойПанели = ПраваяПанель.Ширина + Разделитель.Ширина + ЛеваяПанель.Ширина;
			
			// сбросить привязку панели к разделителю
			ЛеваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право);
			
			// установить привязку разделителя к панели справки
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЛеваяПанель, ГраницаЭлементаУправления.Право);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЛеваяПанель, ГраницаЭлементаУправления.Право);
			
			// свернуть панель
			ЛеваяПанель.Свертка = РежимСверткиЭлементаУправления.Лево;
			// свернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Лево;
			
			ЛеваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЛеваяПанель, ГраницаЭлементаУправления.Лево);
			
			// установить привязку основной панели к форме
			ПраваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Форма.Панель, ГраницаЭлементаУправления.Лево);
			ПраваяПанель.Лево	= 8;
			ПраваяПанель.Ширина	= ШиринаОсновнойПанели;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет отображением панелей формы путем свертки в низ
// Пареметры
//	 Панель - Панель, к низу которой производим привязку панели ВерхняяПанель при свертке панели НижняяПанель
//	 ОтображатьПанель - булево
//	 ВерхняяПанель - панель формы, которая всегда видима
//	 НижняяПанель - панель формы, которую сворачиваем в низ
//	 Разделитель - разделитель верхней и нижней панели
//
Процедура ИзменитьВидимостьПанелиПоВертикалиНиз(Панель, ОтображатьПанель, ВерхняяПанель, НижняяПанель, Разделитель) Экспорт
	
	Если ОтображатьПанель Тогда
		
		Если НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Низ Тогда
			// необходимо развернуть панель
			
			// текущая высота основной панели
			НачальнаяВысотаОсновнойПанели = ВерхняяПанель.Высота;
			
			// на основную панель отдаем половину высоты
			ВерхняяПанель.Высота = Окр(НачальнаяВысотаОсновнойПанели * 0.6 ,0);
			
			// развернем разделитель, устатановим его внизу основной панели, настроим привязки
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			Разделитель.Верх = ВерхняяПанель.Верх + ВерхняяПанель.Высота;
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Низ);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
			
			// развернем нижнюю панель,установим ее к разделителю, настроим привязки
			НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Нет;
			НижняяПанель.Верх = Разделитель.Верх + 6;
			НижняяПанель.Высота = НачальнаяВысотаОсновнойПанели - ВерхняяПанель.Высота - 6;
			НижняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Верх);
			НижняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			
		КонецЕсли;
		
		ВерхняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Верх);
		
	Иначе // надо скрыть нижнюю панель	
		
		Если НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			
			//это та высота основной панели, которую необходимо установить
			ВысотаОсновнойПанели = НижняяПанель.Верх + НижняяПанель.Высота - ВерхняяПанель.Верх;
			
			// свернем элементы
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Низ;
			НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Низ;
			
			//перенесем ЭУ в низ формы и переопределим привязки
			Разделитель.Верх  = ВысотаОсновнойПанели;
			НижняяПанель.Верх = ВысотаОсновнойПанели;
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			НижняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			
			// распахнем и привяжем основную панель
			ВерхняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			ВерхняяПанель.Высота = ВысотаОсновнойПанели;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьГруппуПорядка(ДанныеСтроки, ИмяРеквизитаПорядка)
	
	Группа = "";
	Если ИмяРеквизитаПорядка = "Наименование" Тогда
		Группа = ВРЕГ(Лев(СокрЛ(ДанныеСтроки.Наименование), 1));
		
	ИначеЕсли Найти(ИмяРеквизитаПорядка, "Дата") = 1 Тогда
		Группа = НачалоМесяца(ДанныеСтроки[ИмяРеквизитаПорядка]);
		
	ИначеЕсли ИмяРеквизитаПорядка <> "Код" Тогда
		Группа = ДанныеСтроки[ИмяРеквизитаПорядка];
		
	КонецЕсли;
	
	Возврат Группа;
	
КонецФункции

Функция ПолучитьПервыхСотрудников(ОформленияСтрок, ИмяРеквизитаПорядка)
	
	КС = Новый КвалификаторыСтроки(100);
	
	ТаблицаГрупп = Новый ТаблицаЗначений;
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Группа = ПолучитьГруппуПорядка(ОформлениеСтроки.ДанныеСтроки, ИмяРеквизитаПорядка);
		
		Если ТаблицаГрупп.Колонки.Количество() = 0 Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(Группа));
			ТаблицаГрупп.Колонки.Добавить("Группа", Новый ОписаниеТипов(МассивТипов, , КС));
		КонецЕсли;
		
		Если ТаблицаГрупп.Найти(Группа, "Группа") = Неопределено Тогда
			ТаблицаГрупп.Добавить().Группа = Группа;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаГрупп",	ТаблицаГрупп);
	
	Если ИмяРеквизитаПорядка = "Наименование" Тогда
		УсловиеНаРеквизитПорядка = "СотрудникиОрганизаций.Наименование >= Группы.Группа";
		
	ИначеЕсли Найти(ИмяРеквизитаПорядка, "Дата") = 1 Тогда
		УсловиеНаРеквизитПорядка = "НАЧАЛОПЕРИОДА(СотрудникиОрганизаций." + ИмяРеквизитаПорядка + ", МЕСЯЦ) = Группы.Группа";
		
	Иначе
		УсловиеНаРеквизитПорядка = "СотрудникиОрганизаций." + ИмяРеквизитаПорядка + " = Группы.Группа";
		
	КонецЕсли;
	
	УсловиеНаОтборСотрудников = "";
	
	Если ЭлементыФормы.СправочникСписок.ИерархическийПросмотр И ЗначениеЗаполнено(ЭлементыФормы.СправочникСписок.ТекущийРодитель) Тогда
		УсловиеНаОтборСотрудников = УсловиеНаОтборСотрудников + "И СотрудникиОрганизаций.Родитель В (&Родитель)";
		
		Запрос.УстановитьПараметр("Родитель",	ЭлементыФормы.СправочникСписок.ТекущийРодитель);
	КонецЕсли;
		
	Для Каждого ТекущийОтбор Из СправочникСписок.Отбор Цикл
		Если Не ТекущийОтбор.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(УсловиеНаОтборСотрудников) Тогда
			УсловиеНаОтборСотрудников = УсловиеНаОтборСотрудников + Символы.ПС;
		КонецЕсли;
		
		ВидСравненияСтрокой = "";
		Если ТекущийОтбор.ВидСравнения = ВидСравнения.Равно Тогда
			ВидСравненияСтрокой = " = &"+ТекущийОтбор.Имя;
			
		ИначеЕсли ТекущийОтбор.ВидСравнения = ВидСравнения.НеРавно Тогда
			ВидСравненияСтрокой = " <> &"+ТекущийОтбор.Имя;
			
		ИначеЕсли ТекущийОтбор.ВидСравнения = ВидСравнения.ВСписке Тогда
			ВидСравненияСтрокой = " В (&"+ТекущийОтбор.Имя+")";
			
		ИначеЕсли ТекущийОтбор.ВидСравнения = ВидСравнения.НеВСписке Тогда
			ВидСравненияСтрокой = " НЕ В (&"+ТекущийОтбор.Имя+")";
			
		ИначеЕсли ТекущийОтбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии ИЛИ ТекущийОтбор.ВидСравнения = ВидСравнения.ВИерархии Тогда
			ВидСравненияСтрокой = " В ИЕРАРХИИ (&"+ТекущийОтбор.Имя+")";
			
		ИначеЕсли ТекущийОтбор.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии ИЛИ ТекущийОтбор.ВидСравнения = ВидСравнения.НеВИерархии Тогда
			ВидСравненияСтрокой = " НЕ В ИЕРАРХИИ (&"+ТекущийОтбор.Имя+")";
			
		КонецЕсли;
		
		Если ПустаяСтрока(ВидСравненияСтрокой) Тогда
			Продолжить;
		КонецЕсли;
		
		УсловиеНаОтборСотрудников = УсловиеНаОтборСотрудников + "И СотрудникиОрганизаций."+ТекущийОтбор.Имя+ВидСравненияСтрокой;
			
		Запрос.УстановитьПараметр(ТекущийОтбор.Имя,	ТекущийОтбор.Значение);
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаГрупп.Группа КАК Группа
	|ПОМЕСТИТЬ ВТ_ТаблицаГрупп
	|ИЗ
	|	&ТаблицаГрупп КАК ТаблицаГрупп
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Группа";
	Запрос.Выполнить();
	
	Если Найти(ИмяРеквизитаПорядка, "Дата") = 1 Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Группы.Группа КАК Группа,
		|	СотрудникиОрганизаций.Наименование КАК Наименование,
		|	СотрудникиОрганизаций." + ИмяРеквизитаПорядка + " КАК РеквизитСДатой
		|ПОМЕСТИТЬ ВТ_Сотрудники
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаГрупп КАК Группы
		|		ПО " + УсловиеНаРеквизитПорядка + "
		|			" + УсловиеНаОтборСотрудников + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сотрудники.Группа КАК Группа,
		|	МИНИМУМ(Сотрудники.Наименование) КАК Наименование,
		|	Сотрудники.РеквизитСДатой КАК РеквизитСДатой
		|ПОМЕСТИТЬ ВТ_ПервыеСотрудникиПоДням
		|ИЗ
		|	ВТ_Сотрудники КАК Сотрудники
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.Группа,
		|	Сотрудники.РеквизитСДатой
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Группа,
		|	РеквизитСДатой
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сотрудники.Группа КАК Группа,
		|	МАКСИМУМ(Сотрудники.РеквизитСДатой) КАК РеквизитСДатой
		|ПОМЕСТИТЬ ВТ_МаксимальныеДатыВГруппах
		|ИЗ
		|	ВТ_Сотрудники КАК Сотрудники
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.Группа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Группа,
		|	РеквизитСДатой
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПервыеСотрудникиПоДням.Группа,
		|	ПервыеСотрудникиПоДням.Наименование
		|ПОМЕСТИТЬ ВТ_ПервыеСотрудники
		|ИЗ
		|	ВТ_ПервыеСотрудникиПоДням КАК ПервыеСотрудникиПоДням
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксимальныеДатыВГруппах КАК МаксимальныеДатыВГруппах
		|		ПО ПервыеСотрудникиПоДням.Группа = МаксимальныеДатыВГруппах.Группа
		|			И ПервыеСотрудникиПоДням.РеквизитСДатой = МаксимальныеДатыВГруппах.РеквизитСДатой";
		Запрос.Выполнить();
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Группы.Группа КАК Группа,
		|	МИНИМУМ(СотрудникиОрганизаций.Наименование) КАК Наименование
		|ПОМЕСТИТЬ ВТ_ПервыеСотрудники
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаГрупп КАК Группы
		|		ПО " + УсловиеНаРеквизитПорядка + "
		|			" + УсловиеНаОтборСотрудников + "
		|
		|СГРУППИРОВАТЬ ПО
		|	Группы.Группа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Наименование,
		|	Группа";
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Группы.Группа КАК Группа,
	|	Группы.Наименование КАК Наименование,
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
	|ИЗ
	|	ВТ_ПервыеСотрудники КАК Группы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО " + УсловиеНаРеквизитПорядка + "
	|			" + УсловиеНаОтборСотрудников + "
	|			И Группы.Наименование = СотрудникиОрганизаций.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Группа,
	|	Наименование,
	|	Сотрудник УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПервыеСотрудники = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		ПервыеСотрудники.Вставить(Выборка.Группа, Выборка.Сотрудник);
	КонецЦикла;
	
	Возврат ПервыеСотрудники;
	
КонецФункции

Процедура ИзменитьУпорядочивание()
	
	СправочникСписок.Обновить();
	
	ИмяПоляУпорядочивания = СправочникСписок.Порядок[мКодПорядка].Имя;
	
	Кнопки1	= ЭлементыФормы.ДействияФормы.Кнопки.УпорядочитьПо.Кнопки;
	Кнопки2	= ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.УпорядочитьПо.Кнопки;
	Кнопки3	= ЭлементыФормы.КоманднаяПанельСпискаСотрудников.Кнопки.УпорядочитьПо.Кнопки;
	
	Для Каждого Кнопка Из Кнопки1 Цикл
		Кнопка.Пометка = Кнопка.Имя = ИмяПоляУпорядочивания;
	КонецЦикла;
	Для Каждого Кнопка Из Кнопки2 Цикл
		Кнопка.Пометка = Кнопка.Имя = ИмяПоляУпорядочивания;
	КонецЦикла;
	Для Каждого Кнопка Из Кнопки3 Цикл
		Кнопка.Пометка = Кнопка.Имя = ИмяПоляУпорядочивания;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерерисоватьКнопкиВыбора(ДанныеСтроки)
	
	КнопкиКонтекстногоМеню	= ЭлементыФормы.КоманднаяПанельСпискаСотрудников.Кнопки;
	
	// В зависимости от того, подобран элемент или нет, "дорисуем" контекстное меню
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.ЭтоГруппа Тогда
		Кнопка = КнопкиКонтекстногоМеню.Найти("КнопкаВыбрать");
		Если Кнопка <> Неопределено Тогда
			КнопкиКонтекстногоМеню.Удалить(Кнопка);
		КонецЕсли;
		
	ИначеЕсли мМассивВыбранныхЗначений = Неопределено ИЛИ мМассивВыбранныхЗначений.Найти(ДанныеСтроки.Ссылка) = Неопределено Тогда
		Если КнопкиКонтекстногоМеню.Найти("КнопкаВыбрать") = Неопределено Тогда
			НоваяКнопка = КнопкиКонтекстногоМеню.Вставить(0);
			НоваяКнопка.ТипКнопки	= ТипКнопкиКоманднойПанели.Действие;
			НоваяКнопка.Действие	= Новый Действие("ДействияФормыВыбор");
			НоваяКнопка.Имя			= "КнопкаВыбрать";
			НоваяКнопка.Текст		= "Выбрать";
			НоваяКнопка.Подсказка	= "Выбрать";
			НоваяКнопка.Пояснение	= "Выбрать значение";
			НоваяКнопка.Картинка	= БиблиотекаКартинок.ВыбратьИзСписка;
		КонецЕсли;
		
	Иначе
		Кнопка = КнопкиКонтекстногоМеню.Найти("КнопкаВыбрать");
		Если Кнопка <> Неопределено Тогда
			КнопкиКонтекстногоМеню.Удалить(Кнопка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПерерисоватьКнопкиВыбора()

Функция СформироватьСоответствиеДействий()
	
	СтруктураСоответствияДействий = Новый Структура;
	СтруктураСоответствияДействий.Вставить("ДействиеВводНаОснованииДоговорНаВыполнениеРаботСФизЛицом", Новый Действие("ДействиеВводНаОснованииДоговорНаВыполнениеРаботСФизЛицом"));
	СтруктураСоответствияДействий.Вставить("ДействиеВводНаОснованииПриемНаРаботуВОрганизацию"        , Новый Действие("ДействиеВводНаОснованииПриемНаРаботуВОрганизацию"));
	СтруктураСоответствияДействий.Вставить("ДействиеВводНаОснованииКадровоеПеремещениеОрганизаций"   , Новый Действие("ДействиеВводНаОснованииКадровоеПеремещениеОрганизаций"));
	СтруктураСоответствияДействий.Вставить("ДействиеВводНаОснованииУвольнениеИзОрганизаций"          , Новый Действие("ДействиеВводНаОснованииУвольнениеИзОрганизаций"));
	СтруктураСоответствияДействий.Вставить("ДействиеОтпуск"                                          , Новый Действие("ДействиеОтпуск"));
	СтруктураСоответствияДействий.Вставить("ДействиеНачислениеОтпуска"								 , Новый Действие("ДействиеНачислениеОтпуска"));
	СтруктураСоответствияДействий.Вставить("ДействиеБольничныйЛист"                                  , Новый Действие("ДействиеБольничныйЛист"));
	
	ДополнительныеДействия = Новый Действие("ДополнительныеДействия");
	
	//СотрудникиОрганизацийПереопределяемый.ДополнитьСтруктуруСоответствияДействий(СтруктураСоответствияДействий, ДополнительныеДействия);
	
	Возврат СтруктураСоответствияДействий;
	
КонецФункции

Процедура УточнитьНаименованиеИДоступностьКомандыИзменитьАктуальность(ВыделенныеСтроки, ДанныеСтроки)
	
	// Если выделенных строк нет - команды недоступны
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстЗаголовкаКоманды = "";
		
	// Если выделенная строка одна - обратимся к текущим данным строки
	ИначеЕсли ВыделенныеСтроки.Количество() = 1 Тогда
		Если ДанныеСтроки.Актуальность Тогда
			ТекстЗаголовкаКоманды = НСтр("ru='Поместить сотрудника в архив';uk='Помістити співробітника в архів'");
		Иначе
			ТекстЗаголовкаКоманды = НСтр("ru='Извлечь сотрудника из архива';uk='Вилучити співробітника з архіву'");
		КонецЕсли;
		
	// Выделенных строк больше одной, получим данные запросом
	Иначе
		СписокСотрудников = Новый Массив;
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			СписокСотрудников.Добавить(ВыделеннаяСтрока);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокСотрудников",	СписокСотрудников);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	МАКСИМУМ(СотрудникиОрганизаций.Актуальность) КАК Актуальные,
		|	МИНИМУМ(СотрудникиОрганизаций.Актуальность) КАК Неактуальные
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка В(&СписокСотрудников)
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(СотрудникиОрганизаций.Актуальность) = МАКСИМУМ(СотрудникиОрганизаций.Актуальность)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если Выборка.Актуальные Тогда
				ТекстЗаголовкаКоманды = НСтр("ru='Поместить сотрудников в архив';uk='Помістити співробітників в архів'");
			Иначе
				ТекстЗаголовкаКоманды = НСтр("ru='Извлечь сотрудников из архива';uk='Вилучити співробітників з архіву'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстЗаголовкаКоманды) Тогда
		ЭлементыФормы.КоманднаяПанельСпискаСотрудников.Кнопки.ИзменитьАктуальность.Доступность = Ложь;
		ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ИзменитьАктуальность.Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельСпискаСотрудников.Кнопки.ИзменитьАктуальность.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанельСпискаСотрудников.Кнопки.ИзменитьАктуальность.Текст = ТекстЗаголовкаКоманды;
		ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ИзменитьАктуальность.Доступность = Истина;
		ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ИзменитьАктуальность.Текст = ТекстЗаголовкаКоманды;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает заголовки реквизитов, в которых указывается организация
//
Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.НадписьОрганизация.Заголовок									= ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.СправочникСписок.Колонки.ОбособленноеПодразделение.ТекстШапки	= ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
	
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

Процедура ДобавитьРеквизитыПодбора(ПараметрыПодбора)
	
	Если ТипЗнч(ПараметрыПодбора) = Тип("Массив") Тогда
		РеквизитыПодбора			= ПараметрыПодбора;
		ОтборыПодбора				= Неопределено;
		НачальныеЗначенияПодбора	= Неопределено;
		Представления				= Неопределено;
		
	ИначеЕсли ТипЗнч(ПараметрыПодбора) = Тип("Структура") Тогда
		РеквизитыПодбора			= ПараметрыПодбора.Реквизиты;
		ПараметрыПодбора.Свойство("Отборы",				ОтборыПодбора);
		ПараметрыПодбора.Свойство("НачальныеЗначения",	НачальныеЗначенияПодбора);
		ПараметрыПодбора.Свойство("Представления",		Представления);
		
	КонецЕсли;
	
	// 6 - расстояние между элементами
	// 19 - высота элемента
	// на каждый элемент требуется 6 + 19 = 25, и 6 после последнего элемента
	ВысотаЭпицентра	= РеквизитыПодбора.Количество() * 25 + 6;
	// 14 - отступ от поля ввода Организация
	ВысотаПанели	= ВысотаЭпицентра + 14;
	
	// Эпицентр привязан к панели. Изменим высоту панели, эпицентр изменится автоматически
	ЭлементыФормы.ПанельПодбор.Высота	= ВысотаПанели;
	
	ВерхЭлемента = 0;
	Для Каждого РеквизитПодбора Из РеквизитыПодбора Цикл
		ИмяЭлемента = РеквизитПодбора.Имя;
		
		Если Представления = Неопределено ИЛИ Представления.Получить(РеквизитПодбора) = Неопределено Тогда
			ЗаголовокЭлемента = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса(РеквизитПодбора.Синоним);
		Иначе
			ЗаголовокЭлемента = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса(Представления.Получить(РеквизитПодбора));
		КонецЕсли;
		
		Если РеквизитПодбора.Тип.СодержитТип(Тип("Булево")) Тогда
			ЭлементПолеВвода = ЭлементыФормы.Добавить(Тип("Флажок"), ИмяЭлемента, Истина, ЭлементыФормы.ПанельПодбор);
			ЭлементПолеВвода.Заголовок			= ЗаголовокЭлемента;
			ЭлементПолеВвода.ТипЗначения		= РеквизитПодбора.Тип;
			ЭлементПолеВвода.Лево				= 6;
			ЭлементПолеВвода.Верх				= ВерхЭлемента + 6;
			ЭлементПолеВвода.Высота				= 19;
			ЭлементПолеВвода.Ширина				= 372;
			ЭлементПолеВвода.ЦветФона			= ЦветаСтиля.ФонЭпицентра;
			
		Иначе
			ЭлементНадпись = ЭлементыФормы.Добавить(Тип("Надпись"), "Надпись"+ИмяЭлемента, Истина, ЭлементыФормы.ПанельПодбор);
			ЭлементНадпись.Заголовок		= ЗаголовокЭлемента + ":";
			ЭлементНадпись.Лево				= 6;
			ЭлементНадпись.Верх				= ВерхЭлемента + 6;
			ЭлементНадпись.Высота			= 19;
			ЭлементНадпись.Ширина			= 160;
			ЭлементНадпись.ЦветФона			= ЦветаСтиля.ФонЭпицентра;
			
			ЭлементПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"), ИмяЭлемента, Истина, ЭлементыФормы.ПанельПодбор);
			ЭлементПолеВвода.ТипЗначения	= РеквизитПодбора.Тип;
			ЭлементПолеВвода.Лево			= ЭлементНадпись.Лево + ЭлементНадпись.Ширина + 6;
			ЭлементПолеВвода.Верх			= ЭлементНадпись.Верх;
			ЭлементПолеВвода.Высота			= ЭлементНадпись.Высота;
			Если ЭлементПолеВвода.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				ЭлементПолеВвода.Ширина		= 80;
			Иначе
				ЭлементПолеВвода.Ширина		= 200;
			КонецЕсли;
			
		КонецЕсли;
		
		// Отбор по владельцу нужен справочникам, у которых есть владелец
		Если ОтборыПодбора <> Неопределено Тогда
			ЗначениеВыбораПоВладельцу = ОтборыПодбора.Получить(РеквизитПодбора);
			Если ЗначениеВыбораПоВладельцу <> Неопределено Тогда
				ЭлементПолеВвода.ВыборПоВладельцу = ЗначениеВыбораПоВладельцу;
			КонецЕсли;
		КонецЕсли;
		
		// Установить начальные значения
		Если НачальныеЗначенияПодбора <> Неопределено Тогда
			ЭлементПолеВвода.Значение = НачальныеЗначенияПодбора.Получить(РеквизитПодбора);
		КонецЕсли;
		
		ВерхЭлемента = ЭлементПолеВвода.Верх + ЭлементПолеВвода.Высота;
	КонецЦикла;
	
КонецПроцедуры

// Процедура изменяет форму в зависимости от того, установлен или нет режим подбора
//
Процедура УстановитьРежимПодбора()
	
	РежимПодбора = РежимВыбора И Не ЗакрыватьПриВыборе;
	
	Если (ТипЗнч(мПараметрыПодбора) <> Тип("Массив") И ТипЗнч(мПараметрыПодбора) <> Тип("Структура"))
		ИЛИ (ТипЗнч(мПараметрыПодбора) = Тип("Массив") И мПараметрыПодбора.Количество() = 0)
		ИЛИ (ТипЗнч(мПараметрыПодбора) = Тип("Структура") И мПараметрыПодбора.Реквизиты.Количество() = 0) Тогда
		ЭлементыФормы.ПанельПодбор.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
	Если Не РежимПодбора Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.СправочникСписок.ИзменятьСоставСтрок	= Ложь;
	ЭлементыФормы.СправочникСписок.ТолькоПросмотр		= Истина;
	
	Кнопки1	= ЭлементыФормы.ДействияФормы.Кнопки;
	Кнопки2	= ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки;
	Кнопки3	= ЭлементыФормы.КоманднаяПанельСпискаСотрудников.Кнопки;
	
	Кнопки1.Удалить(Кнопки1.Добавить);
	Кнопки1.Удалить(Кнопки1.Изменить);
	Кнопки1.Удалить(Кнопки1.Скопировать);
	Кнопки1.Удалить(Кнопки1.ИзменитьЛичныеДанные);
	Кнопки1.Удалить(Кнопки1.СоздатьДокумент);
	
	Кнопки2.Удалить(Кнопки2.Добавить);
	Кнопки2.Удалить(Кнопки2.Изменить);
	Кнопки2.Удалить(Кнопки2.Скопировать);
	Кнопки2.Удалить(Кнопки2.УстановитьПометкуУдаления);
	Кнопки2.Удалить(Кнопки2.ИзменитьЛичныеДанные);
	Кнопки2.Удалить(Кнопки2.СоздатьДокумент);
	
	Кнопки3.Удалить(Кнопки3.Добавить);
	Кнопки3.Удалить(Кнопки3.Изменить);
	Кнопки3.Удалить(Кнопки3.Скопировать);
	Кнопки3.Удалить(Кнопки3.УстановитьПометкуУдаления);
	Кнопки3.Удалить(Кнопки3.ИзменитьЛичныеДанные);
	Кнопки3.Удалить(Кнопки3.СоздатьДокумент);
	
	Если мПараметрыПодбора <> Неопределено Тогда
		ДобавитьРеквизитыПодбора(мПараметрыПодбора);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(мРежимРаботыФормы) Тогда
		Если РежимВыбора Тогда
			мРежимРаботыФормы = ?(ЗакрыватьПриВыборе, "ФормаВыбора", "ФормаПодбора");
			Если Не ЗакрыватьПриВыборе Тогда
				КлючСохраненияПоложенияОкна = "СправочникСотрудники_" + мРежимРаботыФормы; // 8.2
			КонецЕсли;
			
		Иначе
			мРежимРаботыФормы = "ФормаСписка";
			
		КонецЕсли;
		
	Иначе
		КлючСохраненияПоложенияОкна = "СправочникСотрудники_" + мРежимРаботыФормы; // 8.2
		
	КонецЕсли;
	
	// Если пользователь открывает форму в первый раз, необходимо настроить колонки
	Если ВосстановитьЗначение("СправочникСотрудники_" + мРежимРаботыФормы + "_ИспользоватьИерархию") = Неопределено Тогда
		КолонкиСправочника = ЭлементыФормы.СправочникСписок.Колонки;
		
		// Необходимо все колонки, которые находятся до наименования перенести за наименование
		ВсегоКолонок = КолонкиСправочника.Количество();
		КолонкаГруппа = КолонкиСправочника.Найти("Группа");
		Если КолонкаГруппа<> Неопределено Тогда
			Пока КолонкиСправочника.Индекс(КолонкаГруппа) > 0 Цикл
				КолонкиСправочника.Сдвинуть(0, ВсегоКолонок-1);
			КонецЦикла;
		КонецЕсли;
		КолонкаНаименование = КолонкиСправочника.Найти("Наименование");
		Если КолонкаНаименование <> Неопределено Тогда
			Пока КолонкиСправочника.Индекс(КолонкаНаименование) > 1 Цикл
				КолонкиСправочника.Сдвинуть(1, ВсегоКолонок-1);
			КонецЦикла;
		КонецЕсли;
		// Все колонки должны быть расположены на следующей строке
		Для Каждого Колонка Из КолонкиСправочника Цикл
			Если (Колонка = КолонкаГруппа) ИЛИ (Колонка = КолонкаНаименование) Тогда
				Продолжить;
			КонецЕсли;
			
			Колонка.Положение = ПоложениеКолонки.ВТойЖеКолонке;
		КонецЦикла;
		
		// В режиме подбора отключим все колонки кроме наименования
		Если РежимВыбора И Не ЗакрыватьПриВыборе Тогда
			Для Каждого Колонка Из КолонкиСправочника Цикл
				Если Колонка.Имя = "Наименование" Тогда
					Продолжить;
				КонецЕсли;
				
				Если Колонка.Видимость Тогда
					Колонка.Видимость = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьРежимПодбора();
	
	// Если при открытии формы уже установлен отбор, необходимо включить использование иерархии
	Если СправочникСписок.Отбор.ТекущееПодразделениеОрганизации.Использование Тогда
		//ИЛИ СотрудникиОрганизацийПереопределяемый.ИспользоватьИерархию(СправочникСписок.Отбор) Тогда
		мИспользоватьИерархию = Истина;
		
	Иначе
		мИспользоватьИерархию = ВосстановитьЗначение("СправочникСотрудники_" + мРежимРаботыФормы + "_ИспользоватьИерархию");
		Если мИспользоватьИерархию = Неопределено Тогда
			мИспользоватьИерархию = Не (РежимВыбора И Не ЗакрыватьПриВыборе);
		КонецЕсли;
		
	КонецЕсли;
	ПереключитьИерархию();
	
	// Отображать в группах
	ОтображатьСГруппировкой = ВосстановитьЗначение("СправочникСотрудники_" + мРежимРаботыФормы + "_ОтображатьСГруппировкой");
	Если ОтображатьСГруппировкой = Неопределено Тогда
		ОтображатьСГруппировкой = Ложь;
	КонецЕсли;
	ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ОтображатьСГруппировкой.Пометка = ОтображатьСГруппировкой;
	
	// отбор по актуальности
	ПоказыватьАрхив = ВосстановитьЗначение("СправочникСотрудники_" + мРежимРаботыФормы + "_ПоказыватьАрхив");
	Если ПоказыватьАрхив = Неопределено Тогда
		ПоказыватьАрхив = Ложь;
	КонецЕсли;
	СправочникСписок.Отбор.Актуальность.Использование = Не ПоказыватьАрхив;
	СправочникСписок.Отбор.Актуальность.Значение = Не ПоказыватьАрхив;
	ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ПоказыватьАрхив.Пометка = ПоказыватьАрхив;
	
	// отбор по виду договора
	СписокОтборов = Новый СписокЗначений;
	СписокОтборов.Добавить(5,		НСтр("ru='Все сотрудники';uk='Всі співробітники'"));
	СписокОтборов.Добавить(3,		НСтр("ru='Трудовые договоры';uk='Трудові договори'"));
	СписокОтборов.Добавить(4,		НСтр("ru='Договоры ГПХ';uk='Договори ЦПХ'"));
	//СотрудникиОрганизацийПереопределяемый.ДополнитьСписокОтборов(СписокОтборов);
	
	Для Каждого ОтборПоВидуДоговора Из СписокОтборов Цикл
		Строка = ВидыДоговоров.Добавить();
		Строка.Наименование	= ОтборПоВидуДоговора.Представление;
		Строка.ВидДоговора	= ОтборПоВидуДоговора.Значение;
	КонецЦикла;
	ЭлементыФормы.ВидыДоговоров.ТекущаяСтрока = ВидыДоговоров[0];
	
	// отбор по организации
	СписокОтборов = ПроцедурыУправленияПерсоналом.ПолучитьСписокОрганизаций();
	СписокОтборов.Вставить(0, Справочники.Организации.ПустаяСсылка(), НСтр("ru='По всем сотрудникам';uk='По всім співробітникам'"));
	ЭлементыФормы.ОтборПоОрганизации.СписокВыбора = СписокОтборов;
	Если РежимВыбора Тогда
		Если Отбор.Организация.Использование Тогда
			ОрганизацияДляОтбора	= ЭлементыФормы.ОтборПоОрганизации.СписокВыбора.НайтиПоЗначению(Отбор.Организация.Значение);
		КонецЕсли;
		
	Иначе
		ОрганизацияПользователя	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		ОрганизацияДляОтбора	= ЭлементыФормы.ОтборПоОрганизации.СписокВыбора.НайтиПоЗначению(ОрганизацияПользователя);
		
	КонецЕсли;
	
	// Если форма открыта по команде "Найти в списке", отбор по организации необходимо изменить
	Если Не РежимВыбора И ЗначениеЗаполнено(ПараметрТекущаяСтрока) И ОрганизацияДляОтбора <> Неопределено И ЗначениеЗаполнено(ОрганизацияДляОтбора.Значение) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сотрудник",	ПараметрТекущаяСтрока);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Организация
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ОрганизацияДляОтбора = ЭлементыФормы.ОтборПоОрганизации.СписокВыбора.НайтиПоЗначению(Выборка.Организация);
	КонецЕсли;
	Если ОрганизацияДляОтбора = Неопределено Тогда
		ЭлементыФормы.ОтборПоОрганизации.Значение = ЭлементыФормы.ОтборПоОрганизации.СписокВыбора.Получить(0).Значение;
	Иначе
		ЭлементыФормы.ОтборПоОрганизации.Значение = ОрганизацияДляОтбора.Значение;
	КонецЕсли;
	
	
	// Режим отображения списка
	//СотрудникиОрганизацийПереопределяемый.ДополнитьРежимыОтображенияСписка(
	//	ЭтаФорма,
	//	Новый Действие("РежимОтображенияДанныхПриАктивизацииСтроки"),
	//	Новый Действие("РежимОтображенияДанныхПриПолученииДанных"));
	
	Если РежимВыбора Тогда
		Если СправочникСписок.Отбор.ВидДоговора.Использование Тогда
			СписокВыбора = ЭлементыФормы.ПолеРежимОтображенияСписка.СписокВыбора;
			СписокВыбора.Удалить(СписокВыбора.НайтиПоЗначению("ПоВидуДоговора"));
		КонецЕсли;
	КонецЕсли;
	
	// Если при открытии формы уже установлен отбор, необходимо отобразить его использование в иерархическом списке
	РежимОтображенияСписка = "";
	Если СправочникСписок.Отбор.ТекущееПодразделениеОрганизации.Использование Тогда
		РежимОтображенияСписка = "ПоПодразделениям";
		ЭлементыФормы.ПодразделенияОрганизаций.ТекущаяСтрока = СправочникСписок.Отбор.ТекущееПодразделениеОрганизации.Значение;
		
	Иначе
		//РежимОтображенияСписка = СотрудникиОрганизацийПереопределяемый.ОпределитьРежимОтображенияСпискаПоОтбору(СправочникСписок.Отбор);
		
	КонецЕсли;
		
	Если ПустаяСтрока(РежимОтображенияСписка) Тогда
		РежимОтображенияСписка = ВосстановитьЗначение("СправочникСотрудники_" + мРежимРаботыФормы + "_РежимОтображенияСписка");
		Если РежимОтображенияСписка = Неопределено ИЛИ ЭлементыФормы.ПолеРежимОтображенияСписка.СписокВыбора.НайтиПоЗначению(РежимОтображенияСписка) = Неопределено Тогда
			РежимОтображенияСписка = ЭлементыФормы.ПолеРежимОтображенияСписка.СписокВыбора[1].Значение;
		КонецЕсли;
	КонецЕсли;
	ЭлементыФормы.ПолеРежимОтображенияСписка.Значение	= РежимОтображенияСписка;
	УстановитьРежимОтображенияСписка();
	
	УстановитьОтборПоОрганизации();
	
	
	// Упорядочивание
//	ПодразделенияОрганизаций.Порядок.Установить("Владелец, Порядок");
	
	//СотрудникиОрганизацийПереопределяемый.ДополнитьУпорядочивание(ЭтаФорма);
	
	Для Каждого ЭлементУправленияПорядком Из ЭлементыФормы.СправочникСписок.НастройкаПорядка Цикл
		ЭлементУправленияПорядком.Доступность = Ложь;
	КонецЦикла;
	
	ТекущееУпорядочивание = ВосстановитьЗначение("СправочникСотрудники_" + мРежимРаботыФормы + "_ТекущееУпорядочивание");
	Если	ТекущееУпорядочивание = Неопределено
		ИЛИ ТекущееУпорядочивание = "Наименование"
		ИЛИ СправочникСписок.Колонки.Найти(ТекущееУпорядочивание) = Неопределено Тогда
		ТекущееУпорядочивание	= "";
		
	ИначеЕсли Найти(ТекущееУпорядочивание, "Дата") = 1 Тогда
		ТекущееУпорядочивание	= ТекущееУпорядочивание + " УБЫВ";
		
	КонецЕсли;
	ТекущееУпорядочивание = ТекущееУпорядочивание + ?(ПустаяСтрока(ТекущееУпорядочивание), "", ", ") + "Наименование, Ссылка";
	СправочникСписок.Порядок.Установить(ТекущееУпорядочивание);
	
	ИзменитьУпорядочивание();
	
	
	// Кнопки выбора
	Если Не РежимВыбора Тогда
		Кнопки = ЭлементыФормы.ДействияФормы.Кнопки;
		Кнопки.Удалить(Кнопки.КнопкаВыбрать);
	КонецЕсли;
	Если Не РежимВыбора ИЛИ ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
		Кнопки = ЭлементыФормы.КоманднаяПанельСправочникДерево.Кнопки;
		Кнопки.Удалить(Кнопки.ВыбратьГруппу);
	КонецЕсли;
	
	// Видимость колонок в зависимости от прав
	Если (мРежимРаботыФормы <> "ФормаСписка" И мРежимРаботыФормы <> "ФормаВыбора" И мРежимРаботыФормы <> "ФормаПодбора")
		ИЛИ Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.АвансыРаботникамОрганизаций) Тогда
		ЭлементыФормы.СправочникСписок.Колонки.Аванс.Видимость			= Ложь;
		ЭлементыФормы.СправочникСписок.Колонки.Аванс.ИзменятьВидимость	= Ложь;
	КонецЕсли;
//	Если (мРежимРаботыФормы <> "ФормаСписка" И мРежимРаботыФормы <> "ФормаВыбора" И мРежимРаботыФормы <> "ФормаПодбора")
//		ИЛИ Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЛицевыеСчетаРаботниковОрганизации) Тогда
//		ЭлементыФормы.СправочникСписок.Колонки.НомерЛицевогоСчета.Видимость			= Ложь;
//		ЭлементыФормы.СправочникСписок.Колонки.НомерЛицевогоСчета.ИзменятьВидимость	= Ложь;
//		ЭлементыФормы.СправочникСписок.Колонки.Банк.Видимость			= Ложь;
//		ЭлементыФормы.СправочникСписок.Колонки.Банк.ИзменятьВидимость	= Ложь;
//	КонецЕсли;
	
	// Добавление колонок программно
	//СотрудникиОрганизацийПереопределяемый.УправлениеСпискомКолонок(ЭтаФорма, мРежимРаботыФормы);
	мДанныеСпискаПодготовлены = Истина;
	// Если строка в списке уже спозиционирована, необходимо построить меню
	Если ЭлементыФормы.СправочникСписок.ТекущаяСтрока <> НеОпределено Тогда
		Если ЭлементыФормы.ДействияФормы.Кнопки.Найти("СоздатьДокумент") <> Неопределено Тогда
			МассивПодменю = Новый Массив;
			МассивПодменю.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.СоздатьДокумент);
			МассивПодменю.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.СоздатьДокумент);
			МассивПодменю.Добавить(ЭлементыФормы.КоманднаяПанельСпискаСотрудников.Кнопки.СоздатьДокумент);
			
			//СотрудникиОрганизацийПереопределяемый.СформироватьПодменюВвестиДокумент(МассивПодменю, мСтруктураСоответствияДействий, ЭлементыФормы.СправочникСписок.ТекущиеДанные);
			
		КонецЕсли;
	КонецЕсли;
		
	
	// Рабочее место
	РабочееМестоПередОткрытием(Отказ, СтандартнаяОбработка);
	
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	УстановитьЗаголовкиОрганизацийВФорме();
	
	ТекущийЭлемент = ЭлементыФормы.СправочникСписок;
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СохранитьЗначение("СправочникСотрудники_" + мРежимРаботыФормы + "_ИспользоватьИерархию",	мИспользоватьИерархию);
	СохранитьЗначение("СправочникСотрудники_" + мРежимРаботыФормы + "_РежимОтображенияСписка",	ЭлементыФормы.ПолеРежимОтображенияСписка.Значение);
	СохранитьЗначение("СправочникСотрудники_" + мРежимРаботыФормы + "_ТекущееУпорядочивание",	СправочникСписок.Порядок[мКодПорядка].Имя);
	СохранитьЗначение("СправочникСотрудники_" + мРежимРаботыФормы + "_ПоказыватьАрхив",			ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ПоказыватьАрхив.Пометка);
	СохранитьЗначение("СправочникСотрудники_" + мРежимРаботыФормы + "_ОтображатьСГруппировкой",		ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ОтображатьСГруппировкой.Пометка);
	
	// Для добавленных программно колонок
	//СотрудникиОрганизацийПереопределяемый.СохранитьВидимостьКолонок(ЭтаФорма, мРежимРаботыФормы);
	
	// Рабочее место
	РабочееМестоПриЗакрытии();
	
	мИспользоватьИерархию = Истина;
	ПереключитьИерархию();
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РабочееМестоОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "СотрудникЕжегодныеОтпуска" Тогда
		ОстаткиОтпусковПриАктивизацииСтрокиОбработчикОжидания();
		Возврат;
	КонецЕсли;
		
	Если мМассивВыбранныхЗначений = Неопределено ИЛИ ТипЗнч(Параметр) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ПодборВыбор" Тогда
		Если мМассивВыбранныхЗначений.Найти(Параметр) = Неопределено Тогда
			мМассивВыбранныхЗначений.Добавить(Параметр);
			
			ДанныеСтроки = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
			Если ДанныеСтроки <> Неопределено Тогда
				ПерерисоватьКнопкиВыбора(ДанныеСтроки);
			КонецЕсли;
			ЭлементыФормы.СправочникСписок.ОбновитьСтроки(Параметр);
		КонецЕсли;
	
	ИначеЕсли ИмяСобытия = "ПодборОтменаВыбора" Тогда
		ИндексСтроки = мМассивВыбранныхЗначений.Найти(Параметр);
		
		Если ИндексСтроки <> Неопределено Тогда
			мМассивВыбранныхЗначений.Удалить(ИндексСтроки);
			
			ДанныеСтроки = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
			Если ДанныеСтроки <> Неопределено Тогда
				ПерерисоватьКнопкиВыбора(ДанныеСтроки);
			КонецЕсли;
			ЭлементыФормы.СправочникСписок.ОбновитьСтроки(Параметр);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура УДФОткрыть(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Физлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	Иначе
		Физлицо = ДанныеСтроки.Ссылка.Физлицо;
	КонецЕсли;
	
	Форма = Обработки.УправлениеДаннымиРаботника.ПолучитьФорму();
	Форма.УстановитьРеквизиты(Физлицо, "Основное", ОбщегоНазначения.ПолучитьРабочуюДату());
	Форма.Открыть();
	
КонецПроцедуры // УДФОткрыть()

Процедура ДействияФормыИспользоватьИерархию(Кнопка)
	
	мИспользоватьИерархию = Не мИспользоватьИерархию;
	ПереключитьИерархию();
	УстановитьРежимОтображенияСписка();
	
КонецПроцедуры

Процедура УпорядочитьПо(Кнопка)
	
	Если Кнопка.Имя = "Наименование" Тогда
		СправочникСписок.Порядок.Установить("Наименование, Ссылка");
		
	ИначеЕсли Найти(Кнопка.Имя, "Дата") = 1 Тогда
		СправочникСписок.Порядок.Установить(Кнопка.Имя + " УБЫВ, Наименование, Ссылка");
		
	Иначе
		СправочникСписок.Порядок.Установить(Кнопка.Имя + ", Наименование, Ссылка");
		
	КонецЕсли;
	
	ИзменитьУпорядочивание();
	
КонецПроцедуры

Процедура ДействияФормыИзменитьАктуальность(Кнопка)
	
	// команда изменения актуальности доступна только при наличии
	// выделенных строк и только если у всех выделенных сотрудников одинаковая актуальность
	
	ВыделенныеСтроки = ЭлементыФормы.СправочникСписок.ВыделенныеСтроки;
	ДанныеСтроки		= ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	ТекущаяАктуальность	= ДанныеСтроки.Актуальность;
	Наименование		= ДанныеСтроки.Наименование;
	
	МассивСотрудников = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		МассивСотрудников.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	
	// если ТекущаяАктуальность = Ложь, то пользователь видит архив
	
	Форма = ПолучитьОбщуюФорму("ДиалогВопрос");
	Если МассивСотрудников.Количество() > 1 Тогда
		
		Если ТекущаяАктуальность Тогда
			Форма.Заголовок	= НСтр("ru='Перемещение сотрудников в архив';uk='Переміщення співробітників в архів'");
			Форма.ЭлементыФормы.НадписьТекстВопроса.Заголовок =
			НСтр("ru='Поместить выделенных сотрудников в архив."
""
"Сотрудники, помещенные в архив, не будут показаны в списке.';uk='Помістити виділених співробітників в архів."
""
"Співробітники, поміщені в архів, не будуть показані в списку.'");
			Форма.ЭлементыФормы.КнопкаДействие1.Заголовок = НСтр("ru='Поместить в архив';uk='Помістити в архів'");
		Иначе
			Форма.Заголовок	= НСтр("ru='Извлечение сотрудников из архива';uk='Вилучення співробітників з архіву'");
			Форма.ЭлементыФормы.НадписьТекстВопроса.Заголовок =
			НСтр("ru='Извлечь выделенных сотрудников из архива. "
""
"После извлечения из архива сотрудники будут показываться в списке.';uk='Витягти виділених співробітників з архіву. "
""
"Після витягування з архіву співробітники будуть відображатися в списку.'");
			Форма.ЭлементыФормы.КнопкаДействие1.Заголовок = НСтр("ru='Извлечь из архива';uk='Витягти з архіву'");
		КонецЕсли;
		
	Иначе
		
		Если ТекущаяАктуальность Тогда
			Форма.Заголовок	= НСтр("ru='Перемещение сотрудника в архив';uk='Переміщення співробітника в архів'");
			Форма.ЭлементыФормы.НадписьТекстВопроса.Заголовок =
			НСтр("ru='Поместить сотрудника: ';uk='Помістити співробітника: '") + Наименование + НСтр("ru=' в архив."
""
"Сотрудник, помещенный в архив, не будет показан в списке.';uk=' в архів."
""
"Співробітник, що поміщений до архіву, не буде показаний у списку.'");
			Форма.ЭлементыФормы.КнопкаДействие1.Заголовок = НСтр("ru='Поместить в архив';uk='Помістити в архів'");
		Иначе
			Форма.Заголовок	= НСтр("ru='Извлечение сотрудника из архива';uk='Вилучення співробітника з архіву'");
			Форма.ЭлементыФормы.НадписьТекстВопроса.Заголовок =
			НСтр("ru='Извлечь сотрудника: ';uk='Витягти співробітника: '") + Наименование + НСтр("ru=' из архива. "
""
"После извлечения из архива сотрудник будет показываться в списке.';uk=' з архіву. "
""
"Після витягування з архіву співробітник буде відображатися в списку.'");
			Форма.ЭлементыФормы.КнопкаДействие1.Заголовок = НСтр("ru='Извлечь из архива';uk='Витягти з архіву'");
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.ЭлементыФормы.КнопкаДействие2.Заголовок = "Отмена";
	Результат = Форма.ОткрытьМодально();
	
	Если ПустаяСтрока(Результат) или Результат = "2" Тогда
		// отказались от смены актуальности
		Возврат;
	Иначе
		
		НачатьТранзакцию();
		Для Каждого ЭлементМассива Из МассивСотрудников Цикл
			Сотрудник = ЭлементМассива.ПолучитьОбъект();
			Сотрудник.Актуальность = Не ТекущаяАктуальность;
			Сотрудник.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
		// после смены актуальности уточним заголовок команды
		УточнитьНаименованиеИДоступностьКомандыИзменитьАктуальность(ВыделенныеСтроки, ДанныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыПоказыватьАрхив(Кнопка)
	
	ПоказыватьАрхив = НЕ ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ПоказыватьАрхив.Пометка;
	СправочникСписок.Отбор.Актуальность.Использование = Не ПоказыватьАрхив;
	СправочникСписок.Отбор.Актуальность.Значение = Не ПоказыватьАрхив;
	ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ПоказыватьАрхив.Пометка = ПоказыватьАрхив;
	
КонецПроцедуры

Процедура ДействияФормыОтображатьСГруппировкой(Кнопка)
	
	ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ОтображатьСГруппировкой.Пометка = НЕ ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ОтображатьСГруппировкой.Пометка;
	СправочникСписок.Обновить();
	
КонецПроцедуры

Процедура ДействияФормыИзменитьЛичныеДанные(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.Физлицо.ПолучитьФорму(, ЭлементыФормы.СправочникСписок, ДанныеСтроки.Физлицо).Открыть();
	
КонецПроцедуры

Процедура ДействияФормыВыбор(Кнопка)
	
	ВыделенныеСтроки = ЭлементыФормы.СправочникСписок.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СправочникСписокВыбор(ЭлементыФормы.СправочникСписок, ВыделенныеСтроки, ЭлементыФормы.СправочникСписок.ТекущаяКолонка, Истина);
	
КонецПроцедуры

Процедура ДействияФормыВыборГруппы(Кнопка)
	
	ВыделенныеСтроки = ЭлементыФормы.СправочникДерево.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СправочникСписокВыбор(ЭлементыФормы.СправочникДерево, ВыделенныеСтроки, ЭлементыФормы.СправочникДерево.ТекущаяКолонка, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДМЕНЮ ВВОД НА ОСНОВАНИИ

Процедура ДействиеВводНаОснованииДоговорНаВыполнениеРаботСФизЛицом(Кнопка)
	
	ВыделенныеСтроки = ЭлементыФормы.СправочникСписок.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.ДоговорНаВыполнениеРаботСФизЛицом) Тогда
		Предупреждение(НСтр("ru='Нарушение прав доступа!';uk='Порушення прав доступу!'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДокументОбъект = Документы.ДоговорНаВыполнениеРаботСФизЛицом.СоздатьДокумент();
		ДокументОбъект.Заполнить(ВыделеннаяСтрока);
		ФормаДокумента = ДокументОбъект.ПолучитьФорму();
		ФормаДокумента.Открыть();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДействиеВводНаОснованииПриемНаРаботуВОрганизацию(Кнопка)
	
	ВыделенныеСтроки = ЭлементыФормы.СправочникСписок.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.ПриемНаРаботуВОрганизацию) Тогда
		Предупреждение(НСтр("ru='Нарушение прав доступа!';uk='Порушення прав доступу!'"));
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Документы.ПриемНаРаботуВОрганизацию.СоздатьДокумент();
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДокументОбъект.Заполнить(ВыделеннаяСтрока);
	КонецЦикла;
	ФормаДокумента = ДокументОбъект.ПолучитьФорму();
	ФормаДокумента.Открыть();
	
КонецПроцедуры

Процедура ДействиеВводНаОснованииКадровоеПеремещениеОрганизаций(Кнопка)
	
	ВыделенныеСтроки = ЭлементыФормы.СправочникСписок.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.КадровоеПеремещениеОрганизаций) Тогда
		Предупреждение(НСтр("ru='Нарушение прав доступа!';uk='Порушення прав доступу!'"));
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Документы.КадровоеПеремещениеОрганизаций.СоздатьДокумент();
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДокументОбъект.Заполнить(ВыделеннаяСтрока);
	КонецЦикла;
	ФормаДокумента = ДокументОбъект.ПолучитьФорму();
	ФормаДокумента.Открыть();
	
КонецПроцедуры

Процедура ДействиеВводНаОснованииУвольнениеИзОрганизаций(Кнопка)
	
	ВыделенныеСтроки = ЭлементыФормы.СправочникСписок.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.УвольнениеИзОрганизаций) Тогда
		Предупреждение(НСтр("ru='Нарушение прав доступа!';uk='Порушення прав доступу!'"));
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Документы.УвольнениеИзОрганизаций.СоздатьДокумент();
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДокументОбъект.Заполнить(ВыделеннаяСтрока);
	КонецЦикла;
	ДокументОбъект.ЗаполнитьКомпенсируемыеДниОтпуска();
	ФормаДокумента = ДокументОбъект.ПолучитьФорму();
	ФормаДокумента.Открыть();
	
КонецПроцедуры

Процедура ДействиеОтпуск(Кнопка)
	
	ВыделенныеСтроки = ЭлементыФормы.СправочникСписок.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.ОтпускаОрганизаций) Тогда
		Предупреждение(НСтр("ru='Нарушение прав доступа!';uk='Порушення прав доступу!'"));
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Документы.ОтпускаОрганизаций.СоздатьДокумент();
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДокументОбъект.Заполнить(ВыделеннаяСтрока);
	КонецЦикла;
	ФормаДокумента = ДокументОбъект.ПолучитьФорму();
	ФормаДокумента.Открыть();
	
КонецПроцедуры

Процедура ДействиеНачислениеОтпуска(Кнопка)
	
	ВыделенныеСтроки = ЭлементыФормы.СправочникСписок.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.ОтпускаОрганизаций) Тогда
		Предупреждение(НСтр("ru='Нарушение прав доступа!';uk='Порушення прав доступу!'"));
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Документы.НачислениеОтпускаРаботникамОрганизаций.СоздатьДокумент();
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДокументОбъект.Заполнить(ВыделеннаяСтрока);
	КонецЦикла;
	ФормаДокумента = ДокументОбъект.ПолучитьФорму();
	ФормаДокумента.Открыть();
	
КонецПроцедуры

Процедура ДействиеБольничныйЛист(Кнопка)
	
	ВыделенныеСтроки = ЭлементыФормы.СправочникСписок.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.НачислениеПоБольничномуЛисту) Тогда
		Предупреждение(НСтр("ru='Нарушение прав доступа!';uk='Порушення прав доступу!'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДокументОбъект = Документы.НачислениеПоБольничномуЛисту.СоздатьДокумент();
		ДокументОбъект.Заполнить(ВыделеннаяСтрока);
		ФормаДокумента = ДокументОбъект.ПолучитьФорму();
		ФормаДокумента.Открыть();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнительныеДействия(Кнопка) 
	
	ВыделенныеСтроки = ЭлементыФормы.СправочникСписок.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	//СотрудникиОрганизацийПереопределяемый.ВыполнитьДополнительныеДействия(Кнопка, ВыделенныеСтроки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ОтборПоОрганизацииПриИзменении(Элемент)
	
	УстановитьОтборПоОрганизации();
	
КонецПроцедуры

Процедура ПолеРежимОтображенияСпискаПриИзменении(Элемент)
	
	УстановитьРежимОтображенияСписка();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ СправочникДерево

Процедура СправочникДеревоВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ПараметрВыборГруппИЭлементов <> ИспользованиеГруппИЭлементов.Элементы Тогда
		СправочникСписокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура СправочникДеревоПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("СправочникДеревоПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
	мИспользоватьКешПриПолученииДанных = Ложь;
	
КонецПроцедуры

Процедура СправочникДеревоПриАктивизацииСтрокиОбработчикОжидания()
	
	ДанныеСтроки = ЭлементыФормы.СправочникДерево.ТекущиеДанные;
	Если ЭлементыФормы.СправочникСписок.ИерархическийПросмотр <> (ДанныеСтроки <> Неопределено) Тогда
		ЭлементыФормы.СправочникСписок.ИерархическийПросмотр	= ДанныеСтроки <> Неопределено;
	КонецЕсли;
	
	мКодПорядка = ?(ЭлементыФормы.СправочникСписок.ИерархическийПросмотр, 1, 0);
	
	Если ДанныеСтроки = Неопределено Тогда
		ЭлементыФормы.СправочникСписок.ТекущийРодитель = 0;
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.СправочникСписок.ТекущийРодитель = ДанныеСтроки.Ссылка;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Подразделения

Процедура ПодразделенияОрганизацийПриАктивизацииЯчейки(Элемент)
	
	ПодключитьОбработчикОжидания("ПодразделенияОрганизацийПриАктивизацииЯчейкиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

Процедура ПодразделенияОрганизацийПриАктивизацииЯчейкиОбработчикОжидания()
	
	УстановитьОтборПоПодразделению();
	
КонецПроцедуры

Процедура ПодразделенияОрганизацийПриПолученииДанных(Элемент, ОформленияСтрок)
	
	мОтображенныеОрганизации.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ЭлементыФормы.ОтборПоОрганизации.Значение);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	Если ЗначениеЗаполнено(ЭлементыФормы.ОтборПоОрганизации.Значение) Тогда
	Запрос.Текст = Запрос.Текст + "
	|ГДЕ
	|	(Организации.Ссылка = &ГоловнаяОрганизация
	|			ИЛИ Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация)";
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для Каждого Оформление Из ОформленияСтрок Цикл
		Если Оформление.ДанныеСтроки = Неопределено Тогда
			Оформление.Ячейки.Наименование.УстановитьТекст(?(Выборка.Количество() = 2, НСтр("ru='Все ';uk='Всі '")+ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации"), НСтр("ru='Все подразделения';uk='Всі підрозділи'")));
			Оформление.Ячейки.Наименование.ОтображатьКартинку	= Ложь;
			Оформление.Ячейки.Наименование.Шрифт				= мЖирныйШрифт;
			Оформление.Ячейки.Организация.Видимость				= Ложь;
			Продолжить;
		КонецЕсли;
		
		НазваниеОрганизации	= "";
		Если (Выборка.Количество() = 2) И ПервоеПодразделение(Оформление.ДанныеСтроки.Ссылка, Оформление.ДанныеСтроки.Владелец, НазваниеОрганизации) Тогда
			Оформление.Ячейки.Организация.УстановитьТекст("      " + НазваниеОрганизации);
			Оформление.Ячейки.Организация.Шрифт = мЖирныйШрифт;
		Иначе
			Оформление.Ячейки.Организация.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодразделенияОрганизацийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Отказ = Истина;
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
		ЗначениеИзСписка = ЭлементыФормы.ОтборПоОрганизации.Значение;
		ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеИзСписка);
		
		Если ИспользоватьОтбор Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ЗначениеИзСписка);
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|		Организации.Ссылка = &ГоловнаяОрганизация";
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() <> 1 Тогда
			Возврат;
		КонецЕсли;
		
		Выборка.Следующий();
		ВладелецПодразделения	= Выборка.Ссылка;
		РодительПодразделения	= 0;
		
	Иначе
		ВладелецПодразделения	= ДанныеСтроки.Владелец;
		РодительПодразделения	= ?(Элемент.ТекущаяКолонка.Имя <> "Организация", ДанныеСтроки.Ссылка, Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
		
	КонецЕсли;
	
	Форма = Справочники.ПодразделенияОрганизаций.ПолучитьФормуНовогоЭлемента(, Элемент);
	Форма.Владелец	= ВладелецПодразделения;
	Форма.Родитель	= РодительПодразделения;
	Форма.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ВидыДоговоров

Процедура ВидыДоговоровПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ВидыДоговоровПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

Процедура ВидыДоговоровПриАктивизацииСтрокиОбработчикОжидания()
	
	УстановитьОтборПоВидуДоговора();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ СправочникСписок

Процедура СправочникСписокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка =  ?(РежимВыбора, Ложь, Колонка.Имя <> "Группа");
	
	Если РежимВыбора Тогда
		ВыбранныеЭлементы = Новый Массив;
		
		ТипСтрок = ТипЗнч(ВыбраннаяСтрока);
		
		Если ТипСтрок = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
			Если мМассивВыбранныхЗначений <> Неопределено И мМассивВыбранныхЗначений.Найти(ВыбраннаяСтрока) = Неопределено Тогда
				мМассивВыбранныхЗначений.Добавить(ВыбраннаяСтрока);
			КонецЕсли;
			Если ВыборФизлица Тогда
				ВыбранныеЭлементы.Добавить(ВыбраннаяСтрока.Физлицо);
			Иначе
				ВыбранныеЭлементы.Добавить(ВыбраннаяСтрока);
			КонецЕсли;
			
		ИначеЕсли ТипСтрок = Тип("ВыделенныеСтрокиТабличногоПоля") ИЛИ ТипСтрок = Тип("Массив") Тогда
			Для Каждого Строка Из ВыбраннаяСтрока Цикл
				Если мМассивВыбранныхЗначений <> Неопределено И мМассивВыбранныхЗначений.Найти(Строка) = Неопределено Тогда
					мМассивВыбранныхЗначений.Добавить(Строка);
				КонецЕсли;
				Если ВыборФизлица Тогда
					ВыбранныеЭлементы.Добавить(Строка.Физлицо);
				Иначе
					ВыбранныеЭлементы.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Возврат;
			
		КонецЕсли;
		
		Если ТипЗнч(мПараметрыПодбора) = Тип("Массив") Тогда
			ПараметрыВыбора = Новый Структура;
			ПараметрыПодбора = Новый Структура;
			Для Каждого ПараметрПодбора Из мПараметрыПодбора Цикл
				ПараметрыПодбора.Вставить(ПараметрПодбора.Имя, ЭлементыФормы[ПараметрПодбора.Имя].Значение);
			КонецЦикла;
			ПараметрыВыбора.Вставить("ПараметрыПодбора",	ПараметрыПодбора);
			ПараметрыВыбора.Вставить("Сотрудники",			ВыбранныеЭлементы);
			
			ОповеститьОВыборе(ПараметрыВыбора);
			
		ИначеЕсли ТипЗнч(мПараметрыПодбора) = Тип("Структура") Тогда
			ПараметрыВыбора = Новый Структура;
			ПараметрыПодбора = Новый Структура;
			Для Каждого ПараметрПодбора Из мПараметрыПодбора.Реквизиты Цикл
				ПараметрыПодбора.Вставить(ПараметрПодбора.Имя, ЭлементыФормы[ПараметрПодбора.Имя].Значение);
			КонецЦикла;
			ПараметрыВыбора.Вставить("ПараметрыПодбора",	ПараметрыПодбора);
			ПараметрыВыбора.Вставить("Сотрудники",			ВыбранныеЭлементы);
			
			ОповеститьОВыборе(ПараметрыВыбора);
			
		Иначе
			Для Каждого ВыбранныйЭлемент Из ВыбранныеЭлементы Цикл
				ОповеститьОВыборе(ВыбранныйЭлемент);
			КонецЦикла;
			
		КонецЕсли;
		
		ЭлементыФормы.СправочникСписок.ОбновитьСтроки(ВыбраннаяСтрока);
		
		ПерерисоватьКнопкиВыбора(Элемент.ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СправочникСписокПриАктивизацииСтроки(Элемент)
	
	// Нельзя переносить код в обработчик ожидания
	// Контекстное меню появляется быстрее, чем срабатывает обработчик
	// В результате пользователь увидит подменю, сформированное для предыдущего активного элемента
	
	ДанныеСтроки = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	
	Если мДанныеСпискаПодготовлены Тогда
		Если ЭлементыФормы.ДействияФормы.Кнопки.Найти("СоздатьДокумент") <> Неопределено Тогда
			МассивПодменю = Новый Массив;
			МассивПодменю.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.СоздатьДокумент);
			МассивПодменю.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.СоздатьДокумент);
			МассивПодменю.Добавить(ЭлементыФормы.КоманднаяПанельСпискаСотрудников.Кнопки.СоздатьДокумент);
			
			СформироватьПодменюВвестиДокумент(МассивПодменю, мСтруктураСоответствияДействий, ДанныеСтроки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РежимВыбора Тогда
		ПерерисоватьКнопкиВыбора(ДанныеСтроки);
	КонецЕсли;
	
	// уточним наименование и доступность команды ИзменитьАктуальность
	УточнитьНаименованиеИДоступностьКомандыИзменитьАктуальность(ЭлементыФормы.СправочникСписок.ВыделенныеСтроки, ЭлементыФормы.СправочникСписок.ТекущиеДанные);
	
	РабочееМестоПриАктивизацииСтроки(Элемент);
	
	мИспользоватьКешПриПолученииДанных = Истина;
	
КонецПроцедуры

Процедура СформироватьПодменюВвестиДокумент(МассивКнопокПодменю, СтруктураСоответствияДействий, ДанныеСотрудника) Экспорт
	
//	ИспользоватьУправленческийУчетЗарплаты = глЗначениеПеременной("глИспользоватьУправленческийУчетЗарплаты");
	//
	Если ДанныеСотрудника <> Неопределено Тогда
		ВидДоговора			= ДанныеСотрудника.ВидДоговора;
		ДатаПриема			= ДанныеСотрудника.ДатаПриемаНаРаботу;
		ДатаУвольнения		= ДанныеСотрудника.ДатаУвольнения;
		
	//	Если ИспользоватьУправленческийУчетЗарплаты Тогда
	//		ДатаПриемаВКомпанию	= ДанныеСотрудника.ДатаПриемаНаРаботуВКомпанию;
	//	Иначе
			ДатаПриемаВКомпанию	= Дата(1,1,1);
	//	КонецЕсли;
	Иначе
		ВидДоговора			= Неопределено;
		ДатаПриема			= Дата(1,1,1);
		ДатаУвольнения		= Дата(1,1,1);
		
		ДатаПриемаВКомпанию	= Дата(1,1,1);
	КонецЕсли;
	
	Для Каждого КнопкаПодменю Из МассивКнопокПодменю Цикл
		КнопкаПодменю.Кнопки.Очистить();
	КонецЦикла;
	
	Если ВидДоговора = Неопределено Тогда
		Для Каждого КнопкаПодменю Из МассивКнопокПодменю Цикл
			КнопкаПодменю.Доступность = Ложь;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Принят			= (ДатаПриема <> Дата(1,1,1));
	Уволен			= (ДатаУвольнения <> Дата(1,1,1));
	
	ПринятВКомпанию	= (ДатаПриемаВКомпанию <> Дата(1,1,1));
	
	Если Уволен Тогда
		Для Каждого КнопкаПодменю Из МассивКнопокПодменю Цикл
			КнопкаПодменю.Доступность = Ложь;
		КонецЦикла;
		Возврат;
	Иначе
		Для Каждого КнопкаПодменю Из МассивКнопокПодменю Цикл
			КнопкаПодменю.Доступность = Истина;
		КонецЦикла;
	КонецЕсли;
	
	//// Проверка прав доступа на выполнение действий будет осуществляться непосредственно при выборе действий
	//Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
	//	
		Если Не Принят Тогда
			ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "ПриемНаРаботуВОрганизацию", ТипКнопкиКоманднойПанели.Действие, НСтр("ru='Прием на работу в организацию';uk='Прийом на роботу в організацію '"), СтруктураСоответствияДействий.ДействиеВводНаОснованииПриемНаРаботуВОрганизацию);
			ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель1", ТипКнопкиКоманднойПанели.Разделитель);
		КонецЕсли;
		
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "КадровоеПеремещениеОрганизаций", ТипКнопкиКоманднойПанели.Действие, НСтр("ru='Кадровое перемещение организаций';uk='Кадрове переміщення організацій'"), СтруктураСоответствияДействий.ДействиеВводНаОснованииКадровоеПеремещениеОрганизаций);
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "УвольнениеИзОрганизаций", ТипКнопкиКоманднойПанели.Действие, НСтр("ru='Увольнение из организаций';uk='Звільнення з організацій'"), СтруктураСоответствияДействий.ДействиеВводНаОснованииУвольнениеИзОрганизаций);
		
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель3", ТипКнопкиКоманднойПанели.Разделитель);
		
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Отпуск", ТипКнопкиКоманднойПанели.Действие, НСтр("ru='Отпуск';uk='Відпустка'"),СтруктураСоответствияДействий.ДействиеОтпуск);
		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "НачислениеОтпуска", ТипКнопкиКоманднойПанели.Действие, НСтр("ru='Начисление отпуска';uk='Нарахування відпустки'"),СтруктураСоответствияДействий.ДействиеНачислениеОтпуска);
		
		//ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Отпуск", ТипКнопкиКоманднойПанели.Действие, "Отпуск", СтруктураСоответствияДействий.ДействиеОтпуск);
		//ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "БольничныйЛист", ТипКнопкиКоманднойПанели.Действие, "Больничный лист", СтруктураСоответствияДействий.ДействиеБольничныйЛист);
		
		//Если ИспользоватьУправленческийУчетЗарплаты Тогда
		//	
		//	Если Не ПринятВКомпанию Тогда
		//		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель4", ТипКнопкиКоманднойПанели.Разделитель);
		//		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "ПриемНаРаботу", ТипКнопкиКоманднойПанели.Действие, "Прием на работу", СтруктураСоответствияДействий.ДействиеВводНаОснованииПриемНаРаботу);
		//		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель5", ТипКнопкиКоманднойПанели.Разделитель);
		//	КонецЕсли;
		//	
		//	ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "КадровоеПеремещение", ТипКнопкиКоманднойПанели.Действие, "Кадровое перемещение", СтруктураСоответствияДействий.ДействиеВводНаОснованииКадровоеПеремещение);
		//	ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Увольнение", ТипКнопкиКоманднойПанели.Действие, "Увольнение", СтруктураСоответствияДействий.ДействиеВводНаОснованииУвольнение);
		//	
		//	ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель6", ТипКнопкиКоманднойПанели.Разделитель);
		//	
		//КонецЕсли;
		
	//ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
	//	
	//	Если Не ПринятВКомпанию Тогда
	//		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель4", ТипКнопкиКоманднойПанели.Разделитель);
	//		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "ПриемНаРаботу", ТипКнопкиКоманднойПанели.Действие, "Прием на работу", СтруктураСоответствияДействий.ДействиеВводНаОснованииПриемНаРаботу);
	//		ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель5", ТипКнопкиКоманднойПанели.Разделитель);
	//	КонецЕсли;
	//	
	//	ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "КадровоеПеремещение", ТипКнопкиКоманднойПанели.Действие, "Кадровое перемещение", СтруктураСоответствияДействий.ДействиеВводНаОснованииКадровоеПеремещение);
	//	ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Увольнение", ТипКнопкиКоманднойПанели.Действие, "Увольнение", СтруктураСоответствияДействий.ДействиеВводНаОснованииУвольнение);
	//	
	//	ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "Разделитель6", ТипКнопкиКоманднойПанели.Разделитель);
	//	
	//ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский
	//	или ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
	//	
	//	ДобавитьКнопкуВПодменю(МассивКнопокПодменю, "ДоговорНаВыполнениеРабот", ТипКнопкиКоманднойПанели.Действие, "Договор на выполнение работ", СтруктураСоответствияДействий.ДействиеВводНаОснованииДоговорНаВыполнениеРаботСФизЛицом);
		
	////КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКнопкуВПодменю(МассивКнопок, ИмяКнопки, ТипКнопки, ТекстКнопки = "", Действие = Неопределено)
	
	Для Каждого КнопкаПодменю Из МассивКнопок Цикл
		КнопкаПодменю.Кнопки.Добавить(ИмяКнопки, ТипКнопки, ТекстКнопки, Действие);
	КонецЦикла;
	
КонецПроцедуры


//Процедура - обработчик события "ПриПолученииДанных" табличного поля СправочникСписок
//
Процедура СправочникСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	
	//СотрудникиОрганизацийПереопределяемый.ЗаполнитьДанныеПоРаботникамОрганизации(ЭлементыФормы.СправочникСписок, ОформленияСтрок, мИспользоватьКешПриПолученииДанных, мКешПриПолученииДанных);
	
	ИмяРеквизитаПорядка = СправочникСписок.Порядок[мКодПорядка].Имя;
	
	// по коду не группируем
	ПоказыватьГруппы = ИмяРеквизитаПорядка <> "Код" И ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ОтображатьСГруппировкой.Пометка;
	
	ПервыеСотрудники = мКешПриПолученииДанных.ПервыеСотрудники;
	Если ПоказыватьГруппы И (Не мИспользоватьКешПриПолученииДанных ИЛИ ПервыеСотрудники = Неопределено) Тогда
		ПервыеСотрудники = ПолучитьПервыхСотрудников(ОформленияСтрок, ИмяРеквизитаПорядка);
	КонецЕсли;
	                       
						   
	Для Каждого Оформление Из ОформленияСтрок Цикл
		ДанныеСтроки = Оформление.ДанныеСтроки;
		
		Если РежимВыбора Тогда
			Если мМассивВыбранныхЗначений <> Неопределено И мМассивВыбранныхЗначений.Найти(ДанныеСтроки.Ссылка) <> Неопределено Тогда
				Оформление.ЦветТекста	= ЦветаСтиля.ЦветПодобранногоЭлемента;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ДанныеСтроки.ЭтоГруппа И Не ДанныеСтроки.Актуальность Тогда
			Оформление.ЦветТекста = ЦветаСтиля.ЦветРамки;
		КонецЕсли;
		
		Если ПоказыватьГруппы Тогда
			Группа = ПолучитьГруппуПорядка(ДанныеСтроки, ИмяРеквизитаПорядка);
		КонецЕсли;
		
		Если ПоказыватьГруппы
			И ПервыеСотрудники.Получить(Группа) = ДанныеСтроки.Ссылка Тогда
			Если ЗначениеЗаполнено(Группа) Тогда
				Если Найти(ИмяРеквизитаПорядка, "Дата") = 1  Тогда
					Оформление.Ячейки.Группа.УстановитьТекст(Формат(Группа, "ДФ='ММММ гггг""г.""'"));
					
				Иначе
					Оформление.Ячейки.Группа.УстановитьТекст(Группа);
					
				КонецЕсли;
				
			Иначе
				Если ИмяРеквизитаПорядка = "ТекущееПодразделениеОрганизации" Тогда
					Оформление.Ячейки.Группа.УстановитьТекст(НСтр("ru='Подразделение не указано';uk='Підрозділ не вказаний'"));
					
				ИначеЕсли ИмяРеквизитаПорядка = "ТекущаяДолжностьОрганизации" Тогда
					Оформление.Ячейки.Группа.УстановитьТекст(НСтр("ru='Должность не указана';uk='Посада не вказана'"));
					
				ИначеЕсли ИмяРеквизитаПорядка = "ДатаПриемаНаРаботу" Тогда
					Оформление.Ячейки.Группа.УстановитьТекст(НСтр("ru='Не работают';uk='Не працюють'"));
					
				Иначе
					//Оформление.Ячейки.Группа.УстановитьТекст(СотрудникиОрганизацийПереопределяемый.СформироватьТекстПриПолученииДанныхДляПустойГруппы(ИмяРеквизитаПорядка));
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИмяРеквизитаПорядка <> "Наименование" Тогда
				Оформление.Ячейки.Группа.Шрифт = Новый Шрифт(, 10, Истина);
			КонецЕсли;
			
		Иначе
			Оформление.Ячейки.Группа.Видимость = Ложь;
			
		КонецЕсли;
		
		Оформление.Ячейки.Наименование.УстановитьТекст("   " + Оформление.Ячейки.Наименование.Текст);
		
		Если ДанныеСтроки.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			Оформление.Ячейки.Состояние.УстановитьТекст(ДанныеСтроки.ВидЗанятости);
		Иначе
			Оформление.Ячейки.Состояние.УстановитьТекст(ДанныеСтроки.ВидДоговора);
		КонецЕсли;
		
	КонецЦикла;
	
	РабочееМестоПриПолученииДанных(ЭлементыФормы.СправочникСписок, ОформленияСтрок);
	
	мИспользоватьКешПриПолученииДанных = Ложь;
	
КонецПроцедуры

Процедура СправочникСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ВидДоговораСотрудника = Перечисления.ВидыДоговоровСФизЛицами.ПустаяСсылка();
	ОрганизацияСотрудника = Справочники.Организации.ПустаяСсылка();
	
	ОтборВидДоговора = СправочникСписок.Отбор.ВидДоговора;
	Если ОтборВидДоговора.Использование Тогда
		Если ОтборВидДоговора.ВидСравнения = ВидСравнения.Равно Тогда
			ВидДоговораСотрудника = ОтборВидДоговора.Значение;
			
		ИначеЕсли ОтборВидДоговора.ВидСравнения = ВидСравнения.ВСписке Тогда
			Если ОтборВидДоговора.Значение.НайтиПоЗначению(Перечисления.ВидыДоговоровСФизЛицами.Подряда) <> Неопределено Тогда
				ВидДоговораСотрудника = Перечисления.ВидыДоговоровСФизЛицами.Подряда;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ТипЗнч(СправочникСписок.Отбор.ВидДоговора.Значение) = Тип("ПеречислениеСсылка.ВидыДоговоровСФизЛицами")
		и СправочникСписок.Отбор.ВидДоговора.Использование 
		и СправочникСписок.Отбор.ВидДоговора.ВидСравнения = ВидСравнения.Равно Тогда
		ВидДоговораСотрудника = СправочникСписок.Отбор.ВидДоговора.Значение;
	КонецЕсли;
	
	Если ТипЗнч(СправочникСписок.Отбор.Организация.Значение) = Тип("СправочникСсылка.Организации") 
		и СправочникСписок.Отбор.Организация.Использование
		и СправочникСписок.Отбор.Организация.ВидСравнения = ВидСравнения.Равно Тогда
		ОрганизацияСотрудника = СправочникСписок.Отбор.Организация.Значение;
	КонецЕсли;
	
	// проверим какую форму надо использовать
	ИспользоватьПомощника = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИспользоватьПомощникаПриемаНаРаботу");
	Если ИспользоватьПомощника Тогда
		Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуНовогоЭлемента("ФормаПомощник", Элемент);
		Отказ = истина;
	Иначе
		Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуНовогоЭлемента(,Элемент);
	КонецЕсли;
	
	Если Форма.Открыта() Тогда
		// просто активизируем уже открытую форму
		Форма.Активизировать();
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьПомощника Тогда
		Форма.СоздатьДокумент = ВладелецФормы = Неопределено;
	КонецЕсли;
	Форма.Организация	= ОрганизацияСотрудника;
	Форма.ВидДоговора	= ВидДоговораСотрудника;
	Форма.Родитель		= Родитель;
	
	Форма.Открыть();
	
КонецПроцедуры

Процедура СправочникСписокПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущаяКолонка.Имя = "Аванс" Тогда
		Если Элемент.СпособРедактирования <> СпособРедактированияСписка.ВСписке Тогда
			Элемент.СпособРедактирования = СпособРедактированияСписка.ВСписке;
		КонецЕсли;
		Элемент.ТекущаяКолонка.ЭлементУправления.Значение	= мКешПриПолученииДанных.Авансы.Получить(Элемент.ТекущиеДанные.Ссылка);
	Иначе
		Если Элемент.СпособРедактирования <> СпособРедактированияСписка.ВДиалоге Тогда
			Элемент.СпособРедактирования = СпособРедактированияСписка.ВДиалоге;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СправочникСписокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.ГруппыДоступаФизическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудников",	ЭлементыФормы.СправочникСписок.ВыделенныеСтроки);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизаций.Физлицо
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка В(&СписокСотрудников)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Физлицо.ПолучитьОбъект();
		Объект.ГруппаДоступаФизическогоЛица = ВыбранноеЗначение;
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ СправочникСписок

Процедура СправочникСписокАвансПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	
	НаборЗаписей = РегистрыСведений.АвансыРаботникамОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Физлицо.Установить(ДанныеСтроки.Физлицо);
	НаборЗаписей.Отбор.Организация.Установить(ДанныеСтроки.ТекущееОбособленноеПодразделение);
	
	Строка = НаборЗаписей.Добавить();
	Строка.Физлицо		= ДанныеСтроки.Физлицо;
	Строка.Организация	= ДанныеСтроки.ТекущееОбособленноеПодразделение;
	Строка.СуммаАванса	= Элемент.Значение;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РежимОтображенияДанных

Процедура РежимОтображенияДанныхПриАктивизацииСтроки(Элемент)
	
	//СотрудникиОрганизацийПереопределяемый.РежимОтображенияДанныхПриАктивизацииСтроки(ЭтаФорма, ЭлементыФормы.ПолеРежимОтображенияСписка.Значение);
	
КонецПроцедуры

Процедура РежимОтображенияДанныхПриПолученииДанных(Элемент, ОформленияСтрок)
	
	//СотрудникиОрганизацийПереопределяемый.РежимОтображенияДанныхПриПолученииДанных(ЭтаФорма, ОформленияСтрок, ЭлементыФормы.ПолеРежимОтображенияСписка.Значение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФУНКЦИОНАЛЬНОСТИ РАБОЧЕГО МЕСТА

Процедура РабочееМестоПередОткрытием(Отказ, СтандартнаяОбработка)
	
//	Если мРежимРаботыФормы = "ФормаМедицинскогоСтрахования" Тогда
//		РаботаСДиалогами.ИзменитьВидимостьПанелиПоВертикалиНиз(Панель, Истина, ЭлементыФормы.ОсновнаяПанель, ЭлементыФормы.ПанельРабочееМесто, ЭлементыФормы.РазделительРабочееМесто);
//		ЭлементыФормы.ПанельРабочееМесто.ТекущаяСтраница = ЭлементыФормы.ПанельРабочееМесто.Страницы[мРежимРаботыФормы];
//		
//		МедицинскоеСтрахованиеПередОткрытием(Отказ, СтандартнаяОбработка);
		
//	ИначеЕсли мРежимРаботыФормы = "ФормаОстатковОтпусков" Тогда
		РаботаСДиалогами.ИзменитьВидимостьПанелиПоВертикалиНиз(Панель, Истина, ЭлементыФормы.ОсновнаяПанель, ЭлементыФормы.ПанельРабочееМесто, ЭлементыФормы.РазделительРабочееМесто);
		ЭлементыФормы.ПанельРабочееМесто.ТекущаяСтраница = ЭлементыФормы.ПанельРабочееМесто.Страницы.ФормаОстатковОтпусков;
		
		ОстаткиОтпусковПередОткрытием(Отказ, СтандартнаяОбработка);
		
//	Иначе
//		РаботаСДиалогами.ИзменитьВидимостьПанелиПоВертикалиНиз(Панель, Ложь, ЭлементыФормы.ОсновнаяПанель, ЭлементыФормы.ПанельРабочееМесто, ЭлементыФормы.РазделительРабочееМесто);
//		
//	КонецЕсли;
	
	мКешПриПолученииДанных.Вставить("РабочееМесто");
	
КонецПроцедуры

Процедура РабочееМестоПриЗакрытии()
	
		
		ОстаткиОтпусковПриЗакрытии();
		
	
КонецПроцедуры

Процедура РабочееМестоОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
		ОстаткиОтпусковОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

Процедура РабочееМестоПриАктивизацииСтроки(Элемент)
	
		
		ОстаткиОтпусковПриАктивизацииСтроки(Элемент);
		
	
КонецПроцедуры

Процедура РабочееМестоПриПолученииДанных(Элемент, ОформленияСтрок)
	
		
	ОстаткиОтпусковПриПолученииДанных(Элемент, ОформленияСтрок);
		
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РАБОЧЕГО МЕСТА Остатки отпусков

Процедура ОстаткиОтпусковПередОткрытием(Отказ, СтандартнаяОбработка)
	
	
	КолонкиСписка	= ЭлементыФормы.СправочникСписок.Колонки;
	
	Если НЕ КолонкиСписка.Найти("ТекущийОстатокОтпуска") <> Неопределено Тогда
		Видимость = ВосстановитьЗначение("СправочникСотрудники_" + мРежимРаботыФормы + "_Колонка_ТекущийОстатокОтпуска");
		Если Видимость = Неопределено Тогда
			Видимость = Истина;
		КонецЕсли;
		
		НоваяКолонка = КолонкиСписка.Добавить("ТекущийОстатокОтпуска", НСтр("ru='Текущий остаток отпуска';uk='Поточний залишок відпустки'"));
		НоваяКолонка.Видимость	= Видимость;
		НоваяКолонка.Положение	= ПоложениеКолонки.ВТойЖеКолонке;
	КонецЕсли;
	
	Заголовок			= НСтр("ru='Остатки отпусков';uk='Залишки відпусток'");
	КартинкаЗаголовка	= БиблиотекаКартинок.РедактированиеОстатковОтпусков;
	
КонецПроцедуры

Процедура ОстаткиОтпусковПриЗакрытии()
	
	КолонкиСписка	= ЭлементыФормы.СправочникСписок.Колонки;
	
	Колонка = КолонкиСписка.Найти("ТекущийОстатокОтпуска");
	Если Колонка <> Неопределено Тогда
		СохранитьЗначение("СправочникСотрудники_" + мРежимРаботыФормы + "_Колонка_ТекущийОстатокОтпуска",	Колонка.Видимость);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОстаткиОтпусковОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыОстаткиОтпусковОрганизаций" Тогда
		ОстаткиОтпусковПриАктивизацииСтрокиОбработчикОжидания();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельОстаткиОтпусковОрганизацийРедактироватьОстатокОтпуска(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.ДатаПриемаНаРаботу) Тогда
		Предупреждение(НСтр("ru='Нельзя именять остатки сотрудника, не принятого на работу!';uk='Не можна змінювати залишки співробітника, не прийнятого на роботу!'"));
		Возврат;
	КонецЕсли;
	
	ДокументОтпуска = Документы.ОтпускаОрганизаций.СоздатьДокумент();
	ДокументОтпуска.ВидОперации = Перечисления.ВидыОперацийОтпускаОрганизаций.КорректировкаОтпуска;
	ДокументОтпуска.Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
	ДокументОтпуска.Организация = ДанныеСтроки.Ссылка.Организация;
	НоваяСтрока =  ДокументОтпуска.ИспользованиеЕжегодногоОтпуска.Добавить();
	НоваяСтрока.Сотрудник = ДанныеСтроки.Ссылка;
	ДанныеОтпусков = ЭлементыФормы.ОстаткиОтпусков.ТекущиеДанные;
	Если ДанныеОтпусков <> Неопределено Тогда
		НоваяСтрока.РабочийПериодНачало = ДанныеОтпусков.ДатаНачалаРабочегоГода;
		НоваяСтрока.РабочийПериодОкончание = ДанныеОтпусков.ДатаОкончанияРабочегоГода;
		НоваяСтрока.ВидОтпуска = ДанныеОтпусков.ВидежегодногоОтпуска;
	КонецЕсли;
	Форма = ДокументОтпуска.ПолучитьФорму();
	Форма.Открыть();
	
//	ДокументОтпуска.Записать();
	
	
	//Если мОстаткиОтпусковТекущегоСотрудника = Неопределено Тогда
	//	Форма						= Справочники.ОстаткиОтпусковОрганизаций.ПолучитьФормуНовогоЭлемента(, ЭтаФорма);
	//	Форма.Сотрудник				= ДанныеСтроки.Ссылка;
	//	Форма.ДатаАктуальности		= ОбщегоНазначения.ПолучитьРабочуюДату();
	//	
	//Иначе
	//	Форма = мОстаткиОтпусковТекущегоСотрудника.ПолучитьОбъект().ПолучитьФорму(, ЭтаФорма);
	//	
	//КонецЕсли;
	//
	//Форма.ОткрытьМодально();
	
КонецПроцедуры

Процедура КоманднаяПанельОстаткиОтпусковОрганизацийСправкаПоОтпуску(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Отчет = Отчеты.ИспользованиеОтпусков.Создать();
	ТиповыеОтчеты.ДобавитьОтбор(отчет.КомпоновщикНастроек,      "Сотрудник",           ДанныеСтроки.Ссылка);
	Форма = Отчет.ПолучитьФорму();
	
//	ТиповыеОтчеты.СформироватьТиповойОтчет(Отчет, Форма.ЭлементыФормы.Результат) ;
	Форма.Открыть();
//	ФормированиеПечатныхФорм.ПечатьСправкиПоРегламентированнымОтпускамСотрудника(ДанныеСтроки.Ссылка);
	
КонецПроцедуры

Процедура КоманднаяПанельОстаткиОтпусковОрганизацийИзменитьКоличествоДнейОтпуска(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Форма = РегистрыСведений.ПоложенныеЕжегодныеОтпускаРаботников.ПолучитьФормуСписка();
	
	Форма.Отбор.Сотрудник.Использование = Истина;
	Форма.Отбор.Сотрудник.Значение = ДанныеСтроки.Ссылка;
	
	Форма.Отбор.Организация.Использование = Истина;
	Форма.Отбор.Организация.Значение = ДанныеСтроки.Ссылка.Организация;
	
	Форма.Открыть();
	

	
КонецПроцедуры

Процедура ОстаткиОтпусковПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОстаткиОтпусковПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

Процедура ОстаткиОтпусковПриАктивизацииСтрокиОбработчикОжидания()
	
	ДанныеСтроки = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		ОстаткиОтпусков.Очистить();
		мОстаткиОтпусковТекущегоСотрудника = Неопределено;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудник",	ДанныеСтроки.Ссылка);
	Запрос.УстановитьПараметр("РабочаяДата", ОбщегоНазначения.ПолучитьРабочуюДату());
	Запрос.УстановитьПараметр("Должность",	ДанныеСтроки.ТекущаяДолжностьОрганизации);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник 	КАК Сотрудник,
	|	РаботникиОрганизации.Организация	КАК Организация,
	|	ПоложенныеЕжегодныеОтпуска.ВидОтпуска	КАК ВидОтпуска,
	|	&РабочаяДата КАК ДатаОкончания
	|ПОМЕСТИТЬ
	|	ВТРаботникиОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПервых(,Сотрудник = &Сотрудник) КАК РаботникиОрганизации
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ПоложенныеЕжегодныеОтпускаРаботников.СрезПоследних(&РабочаяДата) КАК ПоложенныеЕжегодныеОтпуска
	|ПО
	|	РаботникиОрганизации.Сотрудник = ПоложенныеЕжегодныеОтпуска.Сотрудник
	|";
	Запрос.Выполнить();
	
	
	//Получаем таблицу остатков отпусков
	ПроцедурыУправленияПерсоналом.ПолучитьТаблицуОстатковДнейОтпуска(Запрос.МенеджерВременныхТаблиц);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОстатокОтпуска.Сотрудник			КАК Сотрудник,
	|	ОстатокОтпуска.РабочийПериодНачало	КАК РабочийПериодНачало,
	|	ОстатокОтпуска.РабочийПериодОкончание	КАК РабочийПериодОкончание,
	|	ОстатокОтпуска.ВидОтпуска			КАК ВидОтпуска,
	|	ОстатокОтпуска.ПоложеноДнейОтпуска	КАК ПоложеноДнейОтпуска,
	|	ОстатокОтпуска.ОстатокДнейОтпуска	КАК ОстатокДнейОтпуска,
	|	ВЫБОР КОГДА
	|		ОстатокОтпуска.ВидОтпуска.ОтпускНеПереноситсяНаСледующийГод ТОГДА
	|			ВЫБОР КОГДА &РабочаяДата МЕЖДУ ОстатокОтпуска.РабочийПериодНачало И ОстатокОтпуска.РабочийПериодОкончание ТОГДА
	|				ОстатокОтпуска.ОстатокДнейОтпуска 
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ
	|		ИНАЧЕ
	|			ОстатокОтпуска.ОстатокДнейОтпуска
	|	КОНЕЦ КАК ДоступныйОстатокОтпуска
 	|ИЗ
	|	ВТОстатокДнейОтпуска КАК ОстатокОтпуска
	|УПОРЯДОЧИТЬ ПО ОстатокОтпуска.РабочийПериодНачало";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОстаткиОтпусков.Очистить();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ОстаткиОтпусков.Добавить();
		НоваяСтрока.ВидЕжегодногоОтпуска = Выборка.ВидОтпуска;
		НоваяСтрока.ДатаНачалаРабочегоГода = Выборка.РабочийПериодНачало;
		НоваяСтрока.ДатаОкончанияРабочегоГода = Выборка.РабочийПериодОкончание;
		НоваяСтрока.ПоложеноДнейОтпуска	= Выборка.ПоложеноДнейОтпуска;
		НоваяСтрока.ОстатокДнейОтпуска = Выборка.ОстатокДнейОтпуска;
		НоваяСтрока.ДоступныйОстатокОтпуска = Выборка.ДоступныйОстатокОтпуска;
	КонецЦикла;
	
	ТекстСостояния = "";
	Если Не ЗначениеЗаполнено(ДанныеСтроки.ДатаПриемаНаРаботу) ИЛИ ЗначениеЗаполнено(ДанныеСтроки.ДатаУвольнения) Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.ДатаУвольнения) Тогда
			ТекстСостояния = ТекстСостояния + НСтр("ru='Cотрудник уволен';uk='Співробітник звільнений'");
		Иначе
			ТекстСостояния = ТекстСостояния + НСтр("ru='Cотрудник не принят на работу';uk='Співробітник не прийнятий на роботу'");
		КонецЕсли;
	Иначе
		//Если ДобавитьМесяц(ДанныеСтроки.ДатаПриемаНаРаботу, 12) > ОбщегоНазначения.ПолучитьРабочуюДату() Тогда
		//	ТекстСостояния = ТекстСостояния + "Нет необходимости заполнять остатки прошлых лет, так как сотрудник отработал менее одного рабочего года";
		//Иначе
			ТекстСостояния = ТекстСостояния + НСтр("ru='Программа будет рассчитывать остатки начиная с даты приема (не с начала календарного года).';uk='Програма буде розраховувати залишки починаючи з дати прийому (не з початку календарного року).'");	
		//КонецЕсли;                                                                                                                         		
	КонецЕсли;
	
	ЭлементыФормы.НадписьОстатокОтпуска.Заголовок = ТекстСостояния;
	
КонецПроцедуры

Процедура ОстаткиОтпусковПриПолученииДанных(Элемент, ОформленияСтрок)
	
	//Если Не Элемент.Колонки.ТекущийОстатокОтпуска.Видимость Тогда
	//	Возврат;
	//КонецЕсли;
	//
	ДанныеРабочегоМеста = мКешПриПолученииДанных.РабочееМесто;
	
	ДанныеСотрудников = Новый ТаблицаЗначений;
	ДанныеСотрудников.Колонки.Добавить("Сотрудник",Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Если мИспользоватьКешПриПолученииДанных И ДанныеРабочегоМеста <> Неопределено Тогда
			Если ДанныеРабочегоМеста.Получить(ОформлениеСтроки.ДанныеСтроки.Ссылка) = Неопределено Тогда
				НоваяСтрока = ДанныеСотрудников.Добавить();
				НоваяСтрока.Сотрудник = ОформлениеСтроки.ДанныеСтроки.Ссылка;
				//ДанныеСотрудников.Добавить(ОформлениеСтроки.ДанныеСтроки.Ссылка);
			КонецЕсли;
			
		Иначе
			//ДанныеСотрудников.Добавить(ОформлениеСтроки.ДанныеСтроки);
			НоваяСтрока = ДанныеСотрудников.Добавить();
			НоваяСтрока.Сотрудник = ОформлениеСтроки.ДанныеСтроки.Ссылка;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеСотрудников.Количество() > 0 Тогда
		
		РабДата = ОбщегоНазначения.ПолучитьРабочуюДату();
		
		ДлинаСуток = 86400;
		
		Если ДанныеРабочегоМеста = Неопределено Тогда
			ДанныеРабочегоМеста = Новый Соответствие;
		КонецЕсли;
		
		НомерСтроки = 0;
		      
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ДанныеСотрудников", ДанныеСотрудников);
		Запрос.УстановитьПараметр("РабочаяДата", РабДата);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизации.Организация	КАК Организация,
		|	&РабочаяДата		КАК ДатаОкончания,
		|	ПоложенныеЕжегодныеОтпуска.ВидОтпуска	КАК ВидОтпуска
		|	
		|ПОМЕСТИТЬ
		|	ВТРаботникиОрганизации
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПервых(,Сотрудник В (&ДанныеСотрудников)) КАК РаботникиОрганизации
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.ПоложенныеЕжегодныеОтпускаРаботников.СрезПоследних(&РабочаяДата) КАК ПоложенныеЕжегодныеОтпуска
		|ПО
		|	РаботникиОрганизации.Сотрудник = ПоложенныеЕжегодныеОтпуска.Сотрудник
		|
		|";
		Запрос.Выполнить();
				
		ПроцедурыУправленияПерсоналом.ПолучитьТаблицуОстатковДнейОтпуска(Запрос.МенеджерВременныхТаблиц);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВТОстатокДнейОтпуска.Сотрудник	 КАК Сотрудник,
		|	ЕстьNULL(ВТОстатокДнейОтпуска.ОстатокДнейОтпуска,0) КАК ОстатокДнейОтпуска
		|ИЗ
		|	ВТОстатокДнейОтпуска КАК ВТОстатокДнейОтпуска
		|ИТОГИ СУММА(ОстатокДнейОтпуска)
		|ПО
		|	ВТОстатокДнейОтпуска.Сотрудник  
		|";
		
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Сотрудник");
		
		//Пока Выборка.Следующий() Цикл
		//КонецЦикла;
		
		Для Каждого ДанныеСтроки Из ДанныеСотрудников Цикл
		// Если сотрудник не работает, запрос по отпускам такого сотрудника не вернет.
		// Отсутствие в кеше данных по этому сотруднику будет пораждать повторный запрос к данным
			ДанныеРабочегоМеста.Вставить(ДанныеСтроки.Сотрудник, НСтр("ru='0 дней';uk='0 днів'"));
		КонецЦикла;

	
		Пока Выборка.Следующий() Цикл
			мОстатокДнейОтпуска = Выборка.ОстатокДнейОтпуска;
			ТекущийОстатокОтпуска = "" + мОстатокДнейОтпуска + "  " + ОбщегоНазначения.ФормаМножественногоЧисла(НСтр("ru='день';uk='день'"),НСтр("ru='дня';uk='дня'"),НСтр("ru='дней';uk='днів'"),мОстатокДнейОтпуска);
			ДанныеРабочегоМеста.Вставить(Выборка.Сотрудник,ТекущийОстатокОтпуска);
		КонецЦикла;
		мКешПриПолученииДанных.Вставить("РабочееМесто", ДанныеРабочегоМеста);
	КонецЕсли;

       	// Вывести примечание в ячейку
		Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
			ТекущийОстатокОтпуска = ДанныеРабочегоМеста.Получить(ОформлениеСтроки.ДанныеСтроки.Ссылка);
			ОформлениеСтроки.Ячейки.ТекущийОстатокОтпуска.УстановитьТекст(ТекущийОстатокОтпуска);
		КонецЦикла;
КонецПроцедуры

Процедура ОстаткиОтпусковПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ГодРаботы.Видимость = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мЖирныйШрифт = Новый Шрифт(ШрифтыСтиля.ШрифтТекста,,, Истина);

мОтображенныеОрганизации	= Новый Соответствие;

СправочникСписок.Колонки.Добавить("Актуальность");
СправочникСписок.Колонки.Добавить("Родитель");
СправочникСписок.Колонки.Добавить("ДатаПриемаНаРаботу");
//СправочникСписок.Колонки.Добавить("ТекущееОбособленноеПодразделение");
//СправочникСписок.Колонки.Добавить("ТекущееПодразделениеОрганизации");
//СправочникСписок.Колонки.Добавить("ТекущаяДолжностьОрганизации");
СправочникСписок.Колонки.Добавить("ДатаУвольнения");
СправочникСписок.Колонки.Добавить("ВидДоговора");
СправочникСписок.Колонки.Добавить("ВидЗанятости");
СправочникСписок.Колонки.Добавить("Физлицо");

мОбработкаПодбораПоСтроке					= Ложь;
мТекстПодбораПоСтроке						= "";
мПоследнееЗначениеЭлементаПодбораПоСтроке	= Неопределено;

мСтруктураСоответствияДействий = СформироватьСоответствиеДействий();

мВидимыеСтраховыеПолисы = Новый ТаблицаЗначений;
//мВидимыеСтраховыеПолисы.Колонки.Добавить("Сотрудник",					Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
//мВидимыеСтраховыеПолисы.Колонки.Добавить("ОМС",							Новый ОписаниеТипов("СправочникСсылка.МедицинскиеСтраховыеПолисы"));
//мВидимыеСтраховыеПолисы.Колонки.Добавить("ДМС",							Новый ОписаниеТипов("СправочникСсылка.МедицинскиеСтраховыеПолисы"));
//мВидимыеСтраховыеПолисы.Колонки.Добавить("ДМС_ПрограммаСтрахования",	Новый ОписаниеТипов("СправочникСсылка.ПрограммыМедицинскогоСтрахования"));
//мВидимыеСтраховыеПолисы.Колонки.Добавить("ДМС_ДатаВыдачиПолиса",		Новый ОписаниеТипов("Дата"));
//мВидимыеСтраховыеПолисы.Колонки.Добавить("ДМС_ДатаОкончанияПолиса",		Новый ОписаниеТипов("Дата"));

//мВидимыеСтраховыеПолисы.Индексы.Добавить("Сотрудник");

мИспользоватьКешПриПолученииДанных	= Ложь;
мКешПриПолученииДанных = Новый Структура;
мКешПриПолученииДанных.Вставить("ПервыеСотрудники");
мКешПриПолученииДанных.Вставить("Авансы",	Новый Соответствие);

мДанныеСпискаПодготовлены = Ложь;
