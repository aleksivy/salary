////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;
Перем ДатаДокПервого;                 // Дата
Перем МаксимальнаяГраницаГрафика;     // Число
Перем ТаблицаГрафика;                 // Таблица значений для графиков
Перем СтрокаТекущегоОтпуска;          // Строка таблицы значений
Перем ТаблицаПроведенныхДокументов;	  // Таблица значений, содержит список проведенных Документов за сеанс
Перем ТаблицаОтчета;
Перем ФлагИзменений;				  // Булево

Перем ТекущийКвота;                   // Настройки
Перем ТекущийСерииГантаСогласованные; // Настройки
Перем ТекущийСерииГантаРеализованные; // Настройки
Перем ТекущийПереключательГрафика; 	  // Настройки
Перем ТипСтрока;

// Диалог настройки периода
Перем мНастройкаПериода;
Перем мНастройкаПериодаГанта;

//Статусы принятия решения:
//"Нет решения"           - нет ни какого решения.
//"РекомендуюУтвердить"   - рекомендация 1С, утвердить отпуск.
//"РекомендуюОтклонить"   - рекомендация 1С, Отклонить отпуск 
//"Отклонить"             - пользователь принял решение Отклонить отпуск.
//"Утвердить"             - пользователь принял решение утвердить отпуск.


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ
// 

// Функция вызывает функцию обновления графиков
//
// Параметры: 
//  Нет.            
//
Процедура ОбновлениеЭлементовФормы() Экспорт
	
Если  ТекущийКвота <> Квота Или ТекущийПереключательГрафика <> ПереключательГрафика Тогда 
	Если ЭлементыФормы.ГрафикОбщий.КоличествоТочек > 0  ИЛИ
		 ЭлементыФормы.ОбщийГрафикЛинии.КоличествоТочек > 0 Тогда
		 ПостройкаГрафика()
	КонецЕсли;
КонецЕсли;
	
Если ТекущийСерииГантаСогласованные <> СерииГантаСогласованные ИЛИ 	ТекущийСерииГантаРеализованные <> СерииГантаРеализованные Тогда 
	Если ЭлементыФормы.ДиаграммаГанта1.Точки.Количество() > 0 Тогда
		  ДиаграммаГанта()
	КонецЕсли;
КонецЕсли;
	
КонецПроцедуры // ОбновлениеЭлементовФормы() 

Процедура ВписатьСообщениеОбОшибке(ВыводитьОтчет,НеИзменятьРешение,СтрокаТекущегоОтпуска,ТабличныйДокумент,ОбластьВывода,ТекстОшибки,ФлагДобавлять)
	
	Если ВыводитьОтчет Тогда
		ОбластьВывода.Параметры.ТекстОшибки = ТекстОшибки;
		ТабличныйДокумент.Вывести(ОбластьВывода);
	КонецЕсли;
	Если ФлагДобавлять тогда 
		СтрокаТекущегоОтпуска.Комментарий = СтрокаТекущегоОтпуска.Комментарий + НСтр("ru='ОШИБКА: ';uk='ПОМИЛКА: '") + ТекстОшибки; 
	КонецЕсли;
	Если Не НеИзменятьРешение Тогда
		СтрокаТекущегоОтпуска.Результат = "РекомендуюОтклонить";
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиДокументыВСправку(ФизЛицо,ТабличныйДокумент,Макет)

	ЗапросДокументы = новый Запрос ("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СборДанныхДляПланированияЗанятостиФизлиц.Регистратор
	|ИЗ
	|	РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК СборДанныхДляПланированияЗанятостиФизлиц
	|
	|ГДЕ
	|	СборДанныхДляПланированияЗанятостиФизлиц.ФизЛицо = &ФизЛицо И
	|	СборДанныхДляПланированияЗанятостиФизлиц.Состояние = &Состояние
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СобытийныйПланЗанятостиФизлиц.Регистратор
	|ИЗ
	|	РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
	|
	|ГДЕ
	|	СобытийныйПланЗанятостиФизлиц.ФизЛицо = &ФизЛицо И
	|	СобытийныйПланЗанятостиФизлиц.Состояние = &Состояние
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СостояниеРаботников.Регистратор
	|ИЗ
	|	РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	|
	|ГДЕ
	|	СостояниеРаботников.ФизЛицо = &ФизЛицо И
	|	СостояниеРаботников.Состояние = &Отпуск");
	
	
	ЗапросДокументы.УстановитьПараметр("ФизЛицо",ФизЛицо);
	ЗапросДокументы.УстановитьПараметр("Отпуск",Перечисления.СостоянияРаботника.ОтпускЕжегодный);
	ЗапросДокументы.УстановитьПараметр("Состояние",Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
	
	ТабРезультата = ЗапросДокументы.Выполнить().Выгрузить();
	
	// Выведем в справку существующие документы на отпуск.
	Отбивка = Макет.ПолучитьОбласть("Отбивка"); 
	ТабличныйДокумент.Вывести(Отбивка);
	
	ОбластьДокОтпуск = Макет.ПолучитьОбласть("ОтпускныеДокументыШапка");
	ТабличныйДокумент.Вывести(ОбластьДокОтпуск);
	ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы,,ТабличныйДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
	
	ТабличныйДокумент.НачатьГруппуСтрок("",Истина);
	
	ОбластьДокОтпуск = Макет.ПолучитьОбласть("ОтпускныеДокументы");
	
	Для каждого строка из ТабРезультата цикл
		// Выводим документы по планированию отпуска.
		ОбластьДокОтпуск.Параметры.Документ = строка[0];	
		ТабличныйДокумент.Вывести(ОбластьДокОтпуск);
	КонецЦикла; 
	
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ЗаполнитьПроизводственныйКалендарь(ДатаНачала,ДатаОкончания)

		Запрос = Новый Запрос ("ВЫБРАТЬ
		                       |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК ДатаКалендаря,
		                       |	РегламентированныйПроизводственныйКалендарь.Год
		                       |ИЗ
		                       |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		                       |
		                       |ГДЕ
		                       |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &ДатаНачалаОтпуска И
		                       |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &ДатаКонцаОтпуска
		                       |
		                       |СГРУППИРОВАТЬ ПО
		                       |	РегламентированныйПроизводственныйКалендарь.Год");
				 
				 
		Запрос.УстановитьПараметр("ДатаНачалаОтпуска",ДатаНачала);
		Запрос.УстановитьПараметр("ДатаКонцаОтпуска",ДатаОкончания);
	    Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьНаборЗаписей();
		Для ГодЗаполнения = Год(ДатаНачала) По Год(ДатаОкончания) Цикл
			Если Не Выборка.НайтиСледующий(ГодЗаполнения,"Год") или Выборка.ДатаКалендаря = 0 Тогда
				НаборЗаписей.ЗаписатьИзТаблицыВРегистр(НаборЗаписей.ПервоначальноеЗаполнениеРегистра(Дата(Формат(ГодЗаполнения,"ЧЦ=4; ЧДЦ=0; ЧГ=0")+"0101"),Ложь),ГодЗаполнения);
			КонецЕсли;
		КонецЦикла;
КонецПроцедуры

// Функция рассчитывает параметры справки по данным строки из "ТаблицаОтчета"и заполняет табличное поле "ПолеСправки" 
// справкой на правомочность. Выносит промежуточное решение, котрое хранится в таблице "ТаблицаОтчета"
// в колонке "результат".
//
// Параметры: 
//  СтрокаТекущегоОтпуска - строка в таблице "ТаблицаОтчета". 
//
// Возвращаемое значение:
//  Истина         - справка создана, 
//  Ложь 		   - не создана.
//
Процедура ПроверитьОтпускНаПравомочность(СтрокаТекущегоОтпуска, ВыводитьОтчет = Истина, ПроверятьПроизводственныйКалендарь = Истина);
	
	//! проверка параметра 
	Если  СтрокаТекущегоОтпуска = Неопределено Тогда 
		Возврат
	КонецЕсли;
	
	// Установка неизменяемого решения
	НеИзменятьРешение = СтрокаТекущегоОтпуска.Результат="Отклонить" или СтрокаТекущегоОтпуска.Результат="Утвердить";
	
	ОбластьВыводаОшибки = Неопределено;
	
	РазмерЖелаемогоОтпуска = (СтрокаТекущегоОтпуска.ДатаПо-СтрокаТекущегоОтпуска.ДатаС) / мДлинаСуток;
	
	Если ВыводитьОтчет Тогда
		//создадим заголовок справки
		Макет = ПолучитьМакет("МакетСправки");
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.ЭтоФизЛицо = СтрокаТекущегоОтпуска.ФизЛицо;
		Область.Параметры.ДатаСправки = ТекущаяДата();
		Область.Параметры.ДатаНачалаОтпуска = СтрокаДаты(СтрокаТекущегоОтпуска.ДатаС);
		Область.Параметры.ДатаКонцаОтпуска = СтрокаДаты(СтрокаТекущегоОтпуска.ДатаПо);
		Область.Параметры.СрокОтпускаДни = РазмерЖелаемогоОтпуска;
		ЭлементыФормы.ПолеСправки.Вывести(Область);
		ОбластьВыводаОшибки = Макет.ПолучитьОбласть("Ошибка");
	КонецЕсли;
	
	// Установим флаг добавления текста ошибки в комментарий.
	// Тескт ошибки добавляется если отпуск не проверялся и такое добавление разрешено в настройках
	ФлагДобавлять = ПриПроверке = истина И СтрокаТекущегоОтпуска.Результат="Нет решения";
	
	// Узнаем дату начала работы этого работника. 
	ФизЛицо=СтрокаТекущегоОтпуска.ФизЛицо;
	
	
	ЗапросСправка1 = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                              |	МАКСИМУМ(Работники.Период) КАК ДатаПриемаНаРаботу
	                              |ИЗ
	                              |	РегистрСведений.Работники КАК Работники
	                              |
	                              |ГДЕ
	                              |	Работники.ПричинаИзмененияСостояния = &ПриемНаРаботу И
	                              |	Работники.ФизЛицо = &ФизЛицо");
	
	ЗапросСправка1.УстановитьПараметр("ФизЛицо",ФизЛицо);
	ЗапросСправка1.УстановитьПараметр("ПриемНаРаботу",Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	
	Выборка = ЗапросСправка1.Выполнить().Выбрать();
	
	// посмотрим, есть такой человек в компании или нет?, если нет - пропускаем расчет для него.
	// критериями работник/неработник служат: отсутствие даты приема на работу в регистре состояний работников
	// найдем последнюю дату начала работы работника,
	// по умолчанию, все отпуска до даты начала работы - реализованны,
	Выборка.Следующий();
	ДатаНачалаРаботы = Выборка.ДатаПриемаНаРаботу;
	
	Если ДатаНачалаРаботы = null Тогда   
		ВписатьСообщениеОбОшибке(ВыводитьОтчет,НеИзменятьРешение,СтрокаТекущегоОтпуска,ЭлементыФормы.ПолеСправки,ОбластьВыводаОшибки,"На данного человека не оформлялся прием на работу.",ФлагДобавлять);
		Если ВыводитьОтчет Тогда
			ВывестиДокументыВСправку(ФизЛицо,ЭлементыФормы.ПолеСправки,Макет);
		КонецЕсли;	
		Возврат;
	КонецЕсли;	
	
	// проверим отпуск, а входит ли он в интервал работы работника? Проверим дату оформления и Датуначала отпуска
	// находим последний интервал работы работника с даты начала работы по планируемую дату увольнения
	// и смотрим на совпадение с отпуском, 
	// Если отпуск запланировн раньше даты приема на работу - ошибка, формируем сообщение об ошибке в справке и заканчиваем.	
	Если  ДатаНачалаРаботы > СтрокаТекущегоОтпуска.ДатаС Тогда
		ВписатьСообщениеОбОшибке(ВыводитьОтчет,НеИзменятьРешение,СтрокаТекущегоОтпуска,ЭлементыФормы.ПолеСправки,ОбластьВыводаОшибки,"Отпуск запланирован раньше приема на работу",ФлагДобавлять);
		Если ВыводитьОтчет Тогда
			ВывестиДокументыВСправку(ФизЛицо,ЭлементыФормы.ПолеСправки,Макет);
		КонецЕсли;	
		Возврат;
	КонецЕсли;
	
	// найдем ближайшее увольнение, но не меньшее даты приема на работу
	// проверим, а есть ли даты увольнения, которые больше даты начала работы?
	ЗапросСправка2 = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                              |	Работники.Период КАК ДатаУвольнения,
	                              |	NULL КАК ДатаИзменения
	                              |ИЗ
	                              |	РегистрСведений.Работники КАК Работники
	                              |
	                              |ГДЕ
	                              |	Работники.ПричинаИзмененияСостояния = &Увольнение И
	                              |	Работники.ФизЛицо = &ФизЛицо И
	                              |	Работники.Период > &ДатаНачалаРаботы
	                              |
	                              |ОБЪЕДИНИТЬ ВСЕ
	                              |
	                              |ВЫБРАТЬ
	                              |	NULL,
	                              |	НамеченныеСобытияПоПерсоналу.ДатаИзменения
	                              |ИЗ
	                              |	РегистрСведений.НамеченныеСобытияПоПерсоналу КАК НамеченныеСобытияПоПерсоналу
	                              |
	                              |ГДЕ
	                              |	НамеченныеСобытияПоПерсоналу.ФизЛицо = &ФизЛицо И
	                              |	НамеченныеСобытияПоПерсоналу.ПланируемоеСобытие = &УвольнениеПланируемое И
	                              |	НамеченныеСобытияПоПерсоналу.ДатаИзменения > &ДатаНачалаРаботы
	                              |
	                              |ОБЪЕДИНИТЬ ВСЕ
	                              |
	                              |ВЫБРАТЬ
	                              |	NULL,
	                              |	НамеченныеСобытияПоПерсоналу.ДатаИзменения
	                              |ИЗ
	                              |	РегистрСведений.НамеченныеСобытияПоПерсоналу КАК НамеченныеСобытияПоПерсоналу
	                              |
	                              |ГДЕ
	                              |	НамеченныеСобытияПоПерсоналу.ФизЛицо = &ФизЛицо И
	                              |	НамеченныеСобытияПоПерсоналу.ПланируемоеСобытие = &УвольнениеПослеИспытательногоСрока И
	                              |	НамеченныеСобытияПоПерсоналу.ДатаИзменения > &ДатаНачалаРаботы
	                              |
	                              |УПОРЯДОЧИТЬ ПО
	                              |	ДатаИзменения УБЫВ");
	
	ЗапросСправка2.УстановитьПараметр("ФизЛицо",ФизЛицо);
	ЗапросСправка2.УстановитьПараметр("Увольнение",Перечисления.ПричиныИзмененияСостояния.Увольнение);
	ЗапросСправка2.УстановитьПараметр("УвольнениеПланируемое",Перечисления.НамеченныеСобытияПоПерсоналу.Увольнение);
	ЗапросСправка2.УстановитьПараметр("УвольнениеПослеИспытательногоСрока",Перечисления.НамеченныеСобытияПоПерсоналу.УвольнениеПослеИспытательногоСрока);
	ЗапросСправка2.УстановитьПараметр("ДатаНачалаРаботы",ДатаНачалаРаботы);
	
	Выборка = ЗапросСправка2.Выполнить().Выбрать();
	
	// выведем дату увольнения, если она есть
	Если  Выборка.Количество() > 0 Тогда
		
		Выборка.Следующий();
		ДатаУвольнения = Выборка.ДатаУвольнения;
		
		Если ЗначениеЗаполнено(ДатаУвольнения) Тогда
			
			Если ВыводитьОтчет Тогда
				Область = Макет.ПолучитьОбласть("Увольнение");
				Область.Параметры.ДатаУвольнения = СтрокаДаты(ДатаУвольнения); 
				ЭлементыФормы.ПолеСправки.Вывести(Область);
			КонецЕсли;
			
			// проверим, а не превышает ли дата конца отпуска даты увольнения
			Если  ДатаУвольнения<СтрокаТекущегоОтпуска.ДатаПо Тогда
				ВписатьСообщениеОбОшибке(ВыводитьОтчет,НеИзменятьРешение,СтрокаТекущегоОтпуска,ЭлементыФормы.ПолеСправки,ОбластьВыводаОшибки,"Отпуск запланирован позже даты увольнения.",ФлагДобавлять);
				Если ВыводитьОтчет Тогда
					ВывестиДокументыВСправку(ФизЛицо,ЭлементыФормы.ПолеСправки,Макет);
				КонецЕсли;	
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыводитьОтчет Тогда
		// Узнаем где он сейчас числится  и добавим в справку
		Запрос3 = Новый Запрос("ВЫБРАТЬ
		                       |	РаботникиКомпанииСрезПоследних.ФизЛицо,
		                       |	РаботникиКомпанииСрезПоследних.Подразделение,
		                       |	РаботникиКомпанииСрезПоследних.Должность
		                       |ИЗ
		                       |	РегистрСведений.Работники.СрезПоследних(&ДатаАктуальности, ФизЛицо = &ФизЛицо) КАК РаботникиКомпанииСрезПоследних");
		
		Запрос3.УстановитьПараметр("ФизЛицо",СтрокаТекущегоОтпуска.ФизЛицо);
		Запрос3.УстановитьПараметр("ДатаАктуальности",ТекущаяДата());
		
		ТабМесто = Запрос3.Выполнить().Выгрузить();
		ОбластьЧислится = Макет.ПолучитьОбласть("Числится");
		Если ТабМесто.Количество() < 1 тогда 
			Подразделение = "Не указано";
			ОбластьЧислится.Параметры.Отдел = Подразделение; 
			Должность = "Не указана";
			ОбластьЧислится.Параметры.Должность = Должность;
		Иначе 
			Подразделение = ТабМесто[0].Подразделение;
			ОбластьЧислится.Параметры.Отдел = Подразделение; 
			Должность = ТабМесто[0].Должность;
			ОбластьЧислится.Параметры.Должность = Должность;
		КонецЕсли;
	
	КонецЕсли;
	
	
	// постройка таблицы
	Запрос4 = новый Запрос("ВЫБРАТЬ
	|	СборДанныхДляПланированияЗанятостиФизлиц.Регистратор,
	|	СборДанныхДляПланированияЗанятостиФизлиц.ФизЛицо,
	|	СборДанныхДляПланированияЗанятостиФизлиц.Период КАК ДатаС,
	|	СборДанныхДляПланированияЗанятостиФизлиц.ДатаОкончания КАК ДатаПо,
	|	0 КАК Решение
	|ИЗ
	|	РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК СборДанныхДляПланированияЗанятостиФизлиц
	|
	|ГДЕ
	|	СборДанныхДляПланированияЗанятостиФизлиц.Состояние = &Задача И
	|	СборДанныхДляПланированияЗанятостиФизлиц.ФизЛицо = &ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СобытийныйПланЗанятостиФизлиц.Регистратор,
	|	СобытийныйПланЗанятостиФизлиц.ФизЛицо,
	|	СобытийныйПланЗанятостиФизлиц.Период,
	|	СобытийныйПланЗанятостиФизлиц.ДатаОкончания,
	|	1
	|ИЗ
	|	РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
	|
	|ГДЕ
	|	СобытийныйПланЗанятостиФизлиц.Состояние = &Задача И
	|	СобытийныйПланЗанятостиФизлиц.ФизЛицо = &ФизЛицо");
	
	Запрос4.УстановитьПараметр("Задача",Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
	Запрос4.УстановитьПараметр("Занятость",Перечисления.Занятость.Занято);
	Запрос4.УстановитьПараметр("ФизЛицо",СтрокаТекущегоОтпуска.ФизЛицо);
	Запрос4.УстановитьПараметр("ДатаНачалаРаботы",ДатаНачалаРаботы);
	
	
	ТабРезультата = Запрос4.Выполнить().Выгрузить();
	
	// Перестройка данных в таблице:
	ТабРезультата.Колонки.Вставить(4,"Размер");
	
	
	// Проверим, есть ли пересекающиеся или дублирующиеся отпуска на этого работника.
	ДатаНачалаОтпуска = СтрокаТекущегоОтпуска.ДатаС;
	ДатаКонцаОтпуска = СтрокаТекущегоОтпуска.ДатаПо;
	
	// Найдем строчку в таблице ТабРезультата с нашим отпуском.
	// НашИндекс - номер строки в таблице проверяемого отпуска. 
	НашИндекс = -1;
	
	Для Индекс = 0 по ТабРезультата.Количество() - 1 Цикл
		Если (ТабРезультата[Индекс].ДатаС = ДатаНачалаОтпуска) И (ТабРезультата[Индекс].ДатаПо = ДатаКонцаОтпуска) Тогда 
			НашИндекс = Индекс; 
			НашаСтрока = ТабРезультата[Индекс];
		КонецЕсли;
	КонецЦикла;	
	
	// Если данных на отпуск нет - что маловероятно - просим обновить данные.
	Если НашИндекс < 0 тогда 
		ВписатьСообщениеОбОшибке(ВыводитьОтчет,НеИзменятьРешение,СтрокаТекущегоОтпуска,ЭлементыФормы.ПолеСправки,ОбластьВыводаОшибки,"Данные на этот отпуск устарели, обновите данные",ФлагДобавлять);
		Если ВыводитьОтчет Тогда
			ВывестиДокументыВСправку(ФизЛицо,ЭлементыФормы.ПолеСправки,Макет);
		КонецЕсли;	
		Возврат;
	КонецЕсли;
	
	// Поищем пересечения отпускных интервалов для данного человека. 
	Сигнал = 0;
	
	Для Индекс = 0 по ТабРезультата.Количество() - 1 Цикл
		Если Индекс = Нашиндекс Тогда Продолжить; КонецЕсли;	
		
		Если  (ТабРезультата[Индекс].ДатаС  >= ДатаНачалаОтпуска) И (ТабРезультата[Индекс].ДатаС  <= ДатаКонцаОтпуска) Тогда Сигнал = Сигнал + 1; КонецЕсли;
		Если  (ТабРезультата[Индекс].ДатаПо >= ДатаНачалаОтпуска) И (ТабРезультата[Индекс].ДатаПо <= ДатаКонцаОтпуска) Тогда Сигнал = Сигнал + 1; КонецЕсли;	
		Если  (ТабРезультата[Индекс].ДатаС  >= ДатаНачалаОтпуска) И (ТабРезультата[Индекс].ДатаПо <= ДатаКонцаОтпуска) Тогда Сигнал = Сигнал + 1; КонецЕсли;
		Если  (ТабРезультата[Индекс].ДатаС  <= ДатаНачалаОтпуска) И (ТабРезультата[Индекс].ДатаПо >= ДатаКонцаОтпуска) Тогда Сигнал = Сигнал + 1; КонецЕсли;
		
	КонецЦикла;	
	
	// Если пересечения существуют, тогда добавим в справку сообщение об ошибке
	// и добавим в справку документы с пересечениями.
	Если сигнал > 0 тогда 
		
		ВписатьСообщениеОбОшибке(ВыводитьОтчет,НеИзменятьРешение,СтрокаТекущегоОтпуска,ЭлементыФормы.ПолеСправки,ОбластьВыводаОшибки,"Есть пересекающиеся или дублирующиеся отпуска на этого работника",ФлагДобавлять);
		
		Если ВыводитьОтчет Тогда
			// Вывод пересечений
			ОбластьПересечений = Макет.ПолучитьОбласть("ШапкаОшибочныхПересечений");
			ЭлементыФормы.ПолеСправки.Вывести(ОбластьПересечений);
			ОбластьПересечений = Макет.ПолучитьОбласть("ОшибочныхПересечений");
			// Заново найдем пересечения и выведем их в справку
			Сигнал = 0;
			
			Для Индекс = 0 по ТабРезультата.Количество() - 1 Цикл
				Если Индекс = Нашиндекс Тогда Продолжить; КонецЕсли;	
				
				Если  (ТабРезультата[Индекс].ДатаС  >= ДатаНачалаОтпуска) И (ТабРезультата[Индекс].ДатаС  <= ДатаКонцаОтпуска) Тогда Сигнал = Сигнал + 1; КонецЕсли;
				Если  (ТабРезультата[Индекс].ДатаПо >= ДатаНачалаОтпуска) И (ТабРезультата[Индекс].ДатаПо <= ДатаКонцаОтпуска) Тогда Сигнал = Сигнал + 1; КонецЕсли;	
				Если  (ТабРезультата[Индекс].ДатаС  >= ДатаНачалаОтпуска) И (ТабРезультата[Индекс].ДатаПо <= ДатаКонцаОтпуска) Тогда Сигнал = Сигнал + 1; КонецЕсли;
				Если  (ТабРезультата[Индекс].ДатаС  <= ДатаНачалаОтпуска) И (ТабРезультата[Индекс].ДатаПо >= ДатаКонцаОтпуска) Тогда Сигнал = Сигнал + 1; КонецЕсли;
				
				Если сигнал>0 тогда 
					
					// Выводим персекающийся документ в справку
					сигнал=0;
					Док = ТабРезультата[Индекс][0];
					ОбластьПересечений.Параметры.Автор = Док.Ответственный;
					ОбластьПересечений.Параметры.Документ = Док;
					ОбластьПересечений.Параметры.ДатаС = СтрокаДаты(ТабРезультата[Индекс].ДатаС); 
					ОбластьПересечений.Параметры.ДатаПо = СтрокаДаты(ТабРезультата[Индекс].ДатаПо);
					ЭлементыФормы.ПолеСправки.Вывести(ОбластьПересечений);
				КонецЕсли; 
			КонецЦикла;
			
			ВывестиДокументыВСправку(ФизЛицо,ЭлементыФормы.ПолеСправки,Макет);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	
	// Посмотрим, а не запланирован ли отпуск на прошедшую дату.
	Если СтрокаТекущегоОтпуска.ДатаС < ТекущаяДата() или СтрокаТекущегоОтпуска.ДатаПо < ТекущаяДата() Тогда 
		ВписатьСообщениеОбОшибке(ВыводитьОтчет,НеИзменятьРешение,СтрокаТекущегоОтпуска,ЭлементыФормы.ПолеСправки,ОбластьВыводаОшибки,НСтр("ru='Отпуск запланирован в прошедшем времени';uk='Відпустка запланована у минулому часі'"),ФлагДобавлять);
		Если ВыводитьОтчет Тогда
			ВывестиДокументыВСправку(ФизЛицо,ЭлементыФормы.ПолеСправки,Макет);
		КонецЕсли;	
		Возврат;
	КонецЕсли;
	
	// Проверили возможные ошибки. Рассчитаем возможный отпуск и выведем расчет в справку.
	ПроработаетДни = (СтрокаТекущегоОтпуска.ДатаС-ДатаНачалаРаботы)/мДлинаСуток + 1;
	ПроработаетГоды = ПроработаетДни/365.25;
	// Расчет отпуска - за каждый год 28 дней.
	ОбщийОтпуск = Окр(ПроработаетГоды*28,0);
	
	Если ВыводитьОтчет Тогда
		Область = Макет.ПолучитьОбласть("РаботаСтаж");
		Область.Параметры.ПроработаетДни = ПроработаетДни;
		Область.Параметры.ПроработаетГоды = Окр(ПроработаетГоды,1);
		Область.Параметры.ПроработаетМесяцев = Окр(ПроработаетДни * 12 / 365.25,1);
		Область.Параметры.ДатаНачалаОтпуска = СтрокаДаты(ДатаНачалаОтпуска);
		Область.Параметры.ОбщийОтпуск = ОбщийОтпуск;
	КонецЕсли;
	
	// Подсчитаем размер дней отпусков в таблице.
	Для каждого Строка Из ТабРезультата Цикл	
		Строка.Размер = (Строка.ДатаПо - Строка.ДатаС) / мДлинаСуток;
	КонецЦикла;
	
	// Посчитаем отпуск,который реализовал, т.е. есть данные, что отсутствовал по причине ежегодного отпуска
	// Размер реализованного отпуска не учавствет в расчетах, он нужен как справочная информация.
	
	РазмерРеализованногоОтпуска = 0;
	
	Запрос5 = Новый Запрос (
	"ВЫБРАТЬ
	|	СостояниеРаботников.Регистратор,
	|	СостояниеРаботников.ФизЛицо,
	|	СостояниеРаботников.Период КАК ДатаС,
	|	ВЫБОР
	|		КОГДА СостояниеРаботников.Состояние = &ОтпускЕжегодный
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Отпуск,
	|	СостояниеРаботников.Состояние
	|ИЗ
	|	РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	|ГДЕ
	|	СостояниеРаботников.ФизЛицо = &ФизЛицо
	|	И СостояниеРаботников.Период > &ДатаНачалаРаботы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СостояниеРаботников.Регистратор,
	|	СостояниеРаботников.ФизЛицо,
	|	СостояниеРаботников.ПериодЗавершения,
	|	ВЫБОР
	|		КОГДА СостояниеРаботников.СостояниеЗавершения = &ОтпускЕжегодный
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	СостояниеРаботников.СостояниеЗавершения
	|ИЗ
	|	РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботников КАК СостояниеРаботниковПроверка
	|		ПО СостояниеРаботников.ФизЛицо = СостояниеРаботниковПроверка.ФизЛицо
	|			И СостояниеРаботниковПроверка.Период > СостояниеРаботников.Период
	|			И СостояниеРаботниковПроверка.Период <= СостояниеРаботников.ПериодЗавершения
	|ГДЕ
	|	СостояниеРаботников.ФизЛицо = &ФизЛицо
	|	И СостояниеРаботников.ПериодЗавершения > &ДатаНачалаРаботы
	|	И СостояниеРаботниковПроверка.ФизЛицо ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаС УБЫВ");
	
	Запрос5.УстановитьПараметр("ФизЛицо",СтрокаТекущегоОтпуска.ФизЛицо);
	Запрос5.УстановитьПараметр("ДатаНачалаРаботы",ДатаНачалаРаботы);
	Запрос5.УстановитьПараметр("ОтпускЕжегодный", Перечисления.СостоянияРаботника.ОтпускЕжегодный);
	
	ТабОтсутствий = Запрос5.Выполнить().Выгрузить();
	ТабОтсутствий.Колонки.Вставить(3,"ДатаПо");
	ТабОтсутствий.Колонки.Вставить(4,"Размер");
	
	Для индекс = 1 по ТабОтсутствий.Количество()-1 Цикл
		Если  ТабОтсутствий[индекс].Отпуск = 1 Тогда 
			ТабОтсутствий[индекс].ДатаПо = ТабОтсутствий[индекс - 1].ДатаС;
			ТабОтсутствий[индекс].Размер = (ТабОтсутствий[индекс - 1].ДатаС - ТабОтсутствий[индекс].ДатаС) / мДлинаСуток;
			РазмерРеализованногоОтпуска = РазмерРеализованногоОтпуска + ТабОтсутствий[индекс].Размер;	
		КонецЕсли;		
	КонецЦикла;
	
	// удалить ненужные строки.
	
	Для Каждого Строка из ТабОтсутствий Цикл
		Если Строка.Отпуск = 0 Тогда ТабОтсутствий.Удалить(Строка);КонеЦесли;
	КонецЦикла;
	
	// Посчитаем размер отпуска, который согласовал, т.е. сколько дней отпуска за свою трудовую жизнь работник согласовал. 
	РазмерСогласованногоОтпуска = 0;
	Для Каждого Строка Из ТабРезультата Цикл
		Если Строка.Решение = 1  Тогда 
			РазмерСогласованногоОтпуска = РазмерСогласованногоОтпуска + Строка.Размер;
		КонецЕсли;
	КонецЦикла;
	
	// Посчитаем отпуск,который еще запланировал до даты текущего отпуска.
	РазмерЗапланированногоОтпуска = 0;
	Для Каждого Строка Из ТабРезультата Цикл
		Если (Строка.Решение = 1) 
			Или (Строка.ДатаС > ДатаНачалаОтпуска)
			Или (Строка = НашаСтрока)
		Тогда Продолжить; КонецЕсли;
		РазмерЗапланированногоОтпуска = РазмерЗапланированногоОтпуска + Строка.Размер;
	КонецЦикла;
	
	// Выводим в справку кол-во дней отпуска у работника остается к дате проверяемого отпуска:
	РазмерВозможногоОтпуска = ОбщийОтпуск-РазмерЗапланированногоОтпуска-РазмерСогласованногоОтпуска;
	
	Если ВыводитьОтчет Тогда
		
		Область.Параметры.РазмерРеализованногоОтпуска = РазмерРеализованногоОтпуска;
		Область.Параметры.РазмерСогласованногоОтпуска = РазмерСогласованногоОтпуска;
		
		Область.Параметры.РазмерЗапланированногоОтпуска = РазмерЗапланированногоОтпуска;
		Область.Параметры.СуммаВсехОтпусков = РазмерЗапланированногоОтпуска + РазмерСогласованногоОтпуска;
		
		ОбластьИмеет = Макет.ПолучитьОбласть("ИмеетПраво");
		ОбластьИмеет.Параметры.ВозможныйОтпуск = РазмерВозможногоОтпуска;
		Область.Параметры.ВозможныйОтпуск = РазмерВозможногоОтпуска;
		
		// Добавим в справку дату начала работы.
		Область.Параметры.ДатаНачалаРаботы = СтрокаДаты(ДатаНачалаРаботы); 
		
		// Выведем в справку область с размером возможного отпуска.
		ЭлементыФормы.ПолеСправки.Вывести(ОбластьИмеет);
		
	КонецЕсли;		
	
	// Выведем решение в справку. 
	Если РазмерВозможногоОтпуска < РазмерЖелаемогоОтпуска  тогда
		Если ВыводитьОтчет Тогда
			Область1 = Макет.ПолучитьОбласть("Предупреждение"); 
			Область1.Параметры.ТекстПредупреждения = НСтр("ru='Остаток возможного отпуска МЕНЬШЕ размера желаемого отпуска';uk='Залишок можливої відпустки МЕНШЕ розміру бажаної відпустки'");
			ЭлементыФормы.ПолеСправки.Вывести(Область1);
			ЭлементыФормы.ПолеСправки.Вывести(ОбластьЧислится);	
		КонецЕсли;
		Если Не НеИзменятьРешение Тогда
			СтрокаТекущегоОтпуска.Результат = "РекомендуюОтклонить"
		КонецЕсли;
	Иначе
		Если ВыводитьОтчет Тогда
			Область1 = Макет.ПолучитьОбласть("ЧтоХорошо"); 
			ЭлементыФормы.ПолеСправки.Вывести(Область1);
			ЭлементыФормы.ПолеСправки.Вывести(ОбластьЧислится);	
		КонецЕсли;	
		Если Не НеИзменятьРешение Тогда
			СтрокаТекущегоОтпуска.Результат = "РекомендуюУтвердить";
		КонецЕсли;
	КонецЕсли;	
	
	///////////////////////////////////////////////
	// Предупреждения и решение об отклонении отпуска
	
	// Проверим, срок работы работника, если он меньше полугод тогда рекомендуем отклонить отпуск.
	// 
	Если ПроработаетДни < (0.5 * 365.25) тогда
		Если ВыводитьОтчет Тогда
			ОбластьПредупреждения = Макет.ПолучитьОбласть("Предупреждение"); 
			ОбластьПредупреждения.Параметры.ТекстПредупреждения = НСтр("ru='Работник к дате начала отпуска проработает меньше полугода';uk='Працівник до дати початку відпустки пропрацює менше півроку'");
			ЭлементыФормы.ПолеСправки.Вывести(ОбластьПредупреждения);
		КонецЕсли;	
		Если Не НеИзменятьРешение Тогда
			СтрокаТекущегоОтпуска.Результат = "РекомендуюОтклонить"	
		КонецЕсли;
	КонецЕсли;
	
	
	// Проверим размер отпуска, если он больше 28 дней выведем предупреждение.
	Если РазмерЖелаемогоОтпуска > 28 тогда
		Если ВыводитьОтчет Тогда
			ОбластьПредупреждения = Макет.ПолучитьОбласть("Предупреждение"); 
			ОбластьПредупреждения.Параметры.ТекстПредупреждения = НСтр("ru='Размер отпуска превышает 28 дней';uk='Розмір відпустки, що перевищує 28 днів'");
			ЭлементыФормы.ПолеСправки.Вывести(ОбластьПредупреждения);
		КонецЕсли;	
		Если Не НеИзменятьРешение Тогда
			СтрокаТекущегоОтпуска.Результат = "РекомендуюОтклонить"	
		КонецЕсли;	
	КонецЕсли;
	
	// урезание ненужных отпусков	
	
	// Узнаем, сколько работников работает на дату начала отпуска для проверки превышения квоты отпуск РазмерЖелаемогоОтпускаников
	ЗапросНарод = Новый Запрос();
	ЗапросНарод.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РаботникиКомпанииСрезПоследних.ФизЛицо) КАК КоличествоРаботников
	|ИЗ
	|	РегистрСведений.Работники.СрезПоследних(&ДатаНачОтп, ) КАК РаботникиКомпанииСрезПоследних
	|ГДЕ
	|	РаботникиКомпанииСрезПоследних.ПричинаИзмененияСостояния <> &Уволен";
	
	ЗапросНарод.УстановитьПараметр("ДатаНачОтп",ДатаНачалаОтпуска);
	ЗапросНарод.УстановитьПараметр("Уволен",Перечисления.ПричиныИзмененияСостояния.Увольнение);
	
	Выборка = ЗапросНарод.Выполнить().Выбрать();
	КоличествоРаботников = 0;
	Если Выборка.Следующий() Тогда
		КоличествоРаботников = Выборка.КоличествоРаботников;
	КонецЕсли;
	
	// Проверим на каждый день отпуска количество отпускников.
	Если ПроверятьПроизводственныйКалендарь Тогда
		ЗаполнитьПроизводственныйКалендарь(ДатаНачалаОтпуска,ДатаКонцаОтпуска)
	КонецЕсли;
	
	КоличествоОтпускников = 0;
	ЗапросКолОтпускников = Новый Запрос (
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.ФизЛицо) КАК ФизЛицо
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СборДанныхДляПланированияЗанятостиФизлиц.ФизЛицо КАК ФизЛицо
		|	ИЗ
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря
		|		ИЗ
		|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		
		|		ГДЕ
		|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &ДатаНачОтп И
		|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &ДатаКонОтп) КАК ВложенныйЗапрос
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК СборДанныхДляПланированияЗанятостиФизлиц
		|			ПО ВложенныйЗапрос.ДатаКалендаря >= СборДанныхДляПланированияЗанятостиФизлиц.Период И ВложенныйЗапрос.ДатаКалендаря <= СборДанныхДляПланированияЗанятостиФизлиц.ДатаОкончания И (СборДанныхДляПланированияЗанятостиФизлиц.Состояние = &Задача)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СобытийныйПланЗанятостиФизлиц.ФизЛицо
		|	ИЗ
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря
		|		ИЗ
		|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		
		|		ГДЕ
		|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &ДатаНачОтп И
		|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &ДатаКонОтп) КАК ВложенныйЗапрос
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
		|			ПО ВложенныйЗапрос.ДатаКалендаря >= СобытийныйПланЗанятостиФизлиц.Период И ВложенныйЗапрос.ДатаКалендаря <= СобытийныйПланЗанятостиФизлиц.ДатаОкончания И (СобытийныйПланЗанятостиФизлиц.Состояние = &Задача)) КАК ВложенныйЗапрос");
	
	
	ЗапросКолОтпускников.УстановитьПараметр("Задача",Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
	ЗапросКолОтпускников.УстановитьПараметр("ДатаНачОтп",ДатаНачалаОтпуска);
	ЗапросКолОтпускников.УстановитьПараметр("ДатаКонОтп",ДатаКонцаОтпуска);
	
	ВыборкаОтпускников = ЗапросКолОтпускников.Выполнить().Выбрать();
	
	Если  ВыборкаОтпускников.Следующий() Тогда 
		КоличествоОтпускников = ВыборкаОтпускников.ФизЛицо 
	КонецЕсли;
	
	ПроцентОтпускников = Окр(КоличествоОтпускников * 100 / КоличествоРаботников,0);
	
	// Добавим в справку загрузку отпускного интервала другими отпускниками.
	Если ВыводитьОтчет Тогда
	
		Отбивка = Макет.ПолучитьОбласть("Отбивка"); 
		ЭлементыФормы.ПолеСправки.Вывести(Отбивка);
		
		ОбластьЗагрузки = Макет.ПолучитьОбласть("Загрузка_Шапка");
		ЭлементыФормы.ПолеСправки.Вывести(ОбластьЗагрузки);
		ЭлементыФормы.ПолеСправки.Область(ЭлементыФормы.ПолеСправки.ВысотаТаблицы,,ЭлементыФормы.ПолеСправки.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня; 
		ЭлементыФормы.ПолеСправки.НачатьГруппуСтрок("",Истина);
		
		ОбластьЗагрузки = Макет.ПолучитьОбласть("Загрузка");
		ОбластьЗагрузки.Параметры.человек = КоличествоРаботников;
		ОбластьЗагрузки.Параметры.отпускник = КоличествоОтпускников;
		ОбластьЗагрузки.Параметры.квота = квота;
		
		ОбластьЗагрузки.Параметры.Процентик = ПроцентОтпускников;
		ЭлементыФормы.ПолеСправки.Вывести(ОбластьЗагрузки);
		ЭлементыФормы.ПолеСправки.ЗакончитьГруппуСтрок();
		
	КонецЕсли;
	
	// Если превышение квоты, вываодим предупреждение и отклоняем отпуск.
	Если ПроцентОтпускников > квота Тогда
		Если ВыводитьОтчет Тогда
			Область1 = Макет.ПолучитьОбласть("Предупреждение"); 
			Область1.Параметры.ТекстПредупреждения = НСтр("ru='Квота отпускников в этот период превышена на ';uk='Квота відпускників в цей період перевищена на '")
				+ Строка(ПроцентОтпускников - квота) + "%";
			ЭлементыФормы.ПолеСправки.Вывести(Область1);
		КонецЕсли;
		Если Не НеИзменятьРешение Тогда
			СтрокаТекущегоОтпуска.Результат = "РекомендуюОтклонить"
		КонецЕсли;
	КонецЕсли;
	
	// Построим список работников, чей отпуск попадает в интервал проверяемого отпуска
	// ! как развитие, возможно создание групп работников, которым нельзя идти в отпуск одновременно
	// и проверять попадание в группы с сообщением об отклонении отпска
	
	Если ВыводитьОтчет тогда
		
		// Посмотрим, кто еще идет в отпуск в эти даты, кроме нашего работника:
		Запрос6 = Новый Запрос ("ВЫБРАТЬ РАЗЛИЧНЫЕ
		                        |	СборДанныхДляПланированияЗанятостиФизлиц.ФизЛицо,
		                        |	0 КАК Решение,
		                        |	СборДанныхДляПланированияЗанятостиФизлиц.Период КАК ДатаС,
		                        |	СборДанныхДляПланированияЗанятостиФизлиц.ДатаОкончания КАК ДатаПо
		                        |ИЗ
		                        |	РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК СборДанныхДляПланированияЗанятостиФизлиц
		                        |
		                        |ГДЕ
		                        |	СборДанныхДляПланированияЗанятостиФизлиц.Состояние = &Задача И
		                        |	(СборДанныхДляПланированияЗанятостиФизлиц.Период МЕЖДУ &ДатаНачОтп И &ДатаКонОтп ИЛИ СборДанныхДляПланированияЗанятостиФизлиц.ДатаОкончания МЕЖДУ &ДатаНачОтп И &ДатаКонОтп) И
		                        |	СборДанныхДляПланированияЗанятостиФизлиц.ФизЛицо <> &ФизЛицо
		                        |
		                        |ОБЪЕДИНИТЬ ВСЕ
		                        |
		                        |ВЫБРАТЬ
		                        |	СобытийныйПланЗанятостиФизлиц.ФизЛицо,
		                        |	1,
		                        |	СобытийныйПланЗанятостиФизлиц.Период,
		                        |	СобытийныйПланЗанятостиФизлиц.ДатаОкончания
		                        |ИЗ
		                        |	РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
		                        |
		                        |ГДЕ
		                        |	СобытийныйПланЗанятостиФизлиц.Состояние = &Задача И
		                        |	(СобытийныйПланЗанятостиФизлиц.Период МЕЖДУ &ДатаНачОтп И &ДатаКонОтп ИЛИ СобытийныйПланЗанятостиФизлиц.ДатаОкончания МЕЖДУ &ДатаНачОтп И &ДатаКонОтп) И
		                        |	СобытийныйПланЗанятостиФизлиц.ФизЛицо <> &ФизЛицо");
		
		
		Запрос6.УстановитьПараметр("Задача",Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
		Запрос6.УстановитьПараметр("Занятость",Перечисления.Занятость.Занято);					
		Запрос6.УстановитьПараметр("ДатаНачОтп",ДатаНачалаОтпуска);
		Запрос6.УстановитьПараметр("ДатаКонОтп",ДатаКонцаОтпуска);
		Запрос6.УстановитьПараметр("ФизЛицо",СтрокаТекущегоОтпуска.ФизЛицо);
		
		ТабОтпускаЕще = Запрос6.Выполнить().Выгрузить();	
		
		Если ТабОтпускаЕще.Количество() > 0 тогда
			
			Отбивка = Макет.ПолучитьОбласть("Отбивка"); 
			ЭлементыФормы.ПолеСправки.Вывести(Отбивка);
			
			ОбластьОтпускников = Макет.ПолучитьОбласть("СНимИдут_Шапка");
			ЭлементыФормы.ПолеСправки.Вывести(ОбластьОтпускников);
			ЭлементыФормы.ПолеСправки.Область(ЭлементыФормы.ПолеСправки.ВысотаТаблицы,,ЭлементыФормы.ПолеСправки.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
			
			ЭлементыФормы.ПолеСправки.НачатьГруппуСтрок("",Истина);
			
			
			ОбластьОтпускников = Макет.ПолучитьОбласть("СНимИдутШапка"); 	
			ЭлементыФормы.ПолеСправки.Вывести(ОбластьОтпускников);
			ОбластьОтпускников = Макет.ПолучитьОбласть("СНимИдут"); 	
			Для каждого СтрокаОтпускника из ТабОтпускаЕще Цикл
				Если СтрокаОтпускника.ДатаС = "" Тогда Продолжить КонецЕсли;
				ОбластьОтпускников.Параметры.ФизЛицо = СтрокаОтпускника.ФизЛицо;
				ОбластьОтпускников.Параметры.ДатаС = СтрокаДаты(СтрокаОтпускника.ДатаС);
				ОбластьОтпускников.Параметры.ДатаПо = СтрокаДаты(СтрокаОтпускника.ДатаПо);
				Если  СтрокаОтпускника.Решение = 1  //проверка отпуска на согласованность
					тогда
					ОбластьОтпускников.Параметры.ФактСогласования = НСтр("ru='Утвержден';uk='Затверджено'");
				иначе
					ОбластьОтпускников.Параметры.ФактСогласования = НСтр("ru='Заявлен';uk='Заявлений'");
				КонецЕсли;
				ЭлементыФормы.ПолеСправки.Вывести(ОбластьОтпускников);
			КонецЦикла;
			ЭлементыФормы.ПолеСправки.ЗакончитьГруппуСтрок();
			
		КонецЕсли;
	
		// Построим список мероприятий, пересекающихся с анализируемым отпуском.
		Запрос555 = Новый Запрос ("ВЫБРАТЬ
		|	МероприятияКомпании.Наименование КАК Мероприятие,
		|	МероприятияКомпании.ДатаНачала,
		|	МероприятияКомпании.ДатаОкончания
		|ИЗ
		|	Справочник.Мероприятия КАК МероприятияКомпании
		|
		|ГДЕ
		|	МероприятияКомпании.ДатаОкончания МЕЖДУ &ДатаНачОтп И &ДатаКонОтп ИЛИ
		|	МероприятияКомпании.ДатаНачала МЕЖДУ &ДатаНачОтп И &ДатаКонОтп");
		
		Запрос555.УстановитьПараметр("ДатаНачОтп",ДатаНачалаОтпуска);
		Запрос555.УстановитьПараметр("ДатаКонОтп",ДатаКонцаОтпуска);
		
		ТабМероприятия = Запрос555.Выполнить().Выгрузить();
		
		// Если есть мероприятия, добавим их список в справку.
		Если ТабМероприятия.Количество() > 0 тогда 
			ОбластьМер = Макет.ПолучитьОбласть("МероприятияШапка");
			ЭлементыФормы.ПолеСправки.Вывести(ОбластьМер);
			ОбластьМер = Макет.ПолучитьОбласть("Мероприятие");
			Для Каждого мероприятие из ТабМероприятия цикл
				ОбластьМер.Параметры.Мероприятие = мероприятие[0];
				ОбластьМер.Параметры.ДатаС = СтрокаДаты(мероприятие[1]);
				ОбластьМер.Параметры.ДатаПо = СтрокаДаты(мероприятие[2]);
				ЭлементыФормы.ПолеСправки.Вывести(ОбластьМер);	
			КонецЦикла;
		КонецЕсли;
		
		
		// Выведем информацию рсчета отпуска в коней справки.
		Отбивка = Макет.ПолучитьОбласть("Отбивка"); 
		ЭлементыФормы.ПолеСправки.Вывести(Отбивка);
		
		ОбластьПоля = Макет.ПолучитьОбласть("РаботаСтаж_Шапка");
		ЭлементыФормы.ПолеСправки.Вывести(ОбластьПоля);
		ЭлементыФормы.ПолеСправки.Область(ЭлементыФормы.ПолеСправки.ВысотаТаблицы,,ЭлементыФормы.ПолеСправки.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
		ЭлементыФормы.ПолеСправки.НачатьГруппуСтрок("",Ложь);
		
		ЭлементыФормы.ПолеСправки.Вывести(Область);
		ЭлементыФормы.ПолеСправки.ЗакончитьГруппуСтрок();
		
		// Список мероприятий для данного работника
		Отбивка = Макет.ПолучитьОбласть("Отбивка"); 
		ЭлементыФормы.ПолеСправки.Вывести(Отбивка);
		
        ОбластьСобытий = Макет.ПолучитьОбласть("События_Шапка");
		ЭлементыФормы.ПолеСправки.Вывести(ОбластьСобытий);
		ЭлементыФормы.ПолеСправки.Область(ЭлементыФормы.ПолеСправки.ВысотаТаблицы,,ЭлементыФормы.ПолеСправки.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
		ЭлементыФормы.ПолеСправки.НачатьГруппуСтрок("",Истина);
		
		ОбластьСобытий = Макет.ПолучитьОбласть("События_Шапка2");
        ЭлементыФормы.ПолеСправки.Вывести(ОбластьСобытий);


		Запрос = новый запрос;
		
		Запрос.Текст = ("ВЫБРАТЬ
		                |	СборДанныхДляПланированияЗанятостиФизлиц.Состояние КАК Событие,
		                |	СборДанныхДляПланированияЗанятостиФизлиц.Период КАК ДатаС,
		                |	СборДанныхДляПланированияЗанятостиФизлиц.ДатаОкончания КАК ДатаПо,
		                |	""запланированно"" КАК Состояние,
		                |	СборДанныхДляПланированияЗанятостиФизлиц.Регистратор как Регистратор
		                |ИЗ
		                |	РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК СборДанныхДляПланированияЗанятостиФизлиц
		                |
		                |ГДЕ
		                |	СборДанныхДляПланированияЗанятостиФизлиц.ФизЛицо = &ФизЛицо И
		                |	СборДанныхДляПланированияЗанятостиФизлиц.Состояние <> &Свободен И
		                |	СборДанныхДляПланированияЗанятостиФизлиц.Регистратор <> &Регистратор И
		                |	СборДанныхДляПланированияЗанятостиФизлиц.Период < &ДатаКонцаОтпукса И
		                |	СборДанныхДляПланированияЗанятостиФизлиц.ДатаОкончания > &ДатаНачалаОтпуска
		                |
		                |ОБЪЕДИНИТЬ ВСЕ
		                |
		                |ВЫБРАТЬ
		                |	СобытийныйПланЗанятостиФизлиц.Состояние,
		                |	СобытийныйПланЗанятостиФизлиц.Период,
		                |	СобытийныйПланЗанятостиФизлиц.ДатаОкончания,
		                |	""УТВЕРЖДЕНО"",
		                |	СобытийныйПланЗанятостиФизлиц.Регистратор
		                |ИЗ
		                |	РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
		                |
		                |ГДЕ
		                |	СобытийныйПланЗанятостиФизлиц.ФизЛицо = &ФизЛицо И
		                |	СобытийныйПланЗанятостиФизлиц.Состояние <> &Свободен И
		                |	СобытийныйПланЗанятостиФизлиц.Регистратор <> &Регистратор И
		                |	СобытийныйПланЗанятостиФизлиц.Период < &ДатаКонцаОтпукса И
		                |	СобытийныйПланЗанятостиФизлиц.ДатаОкончания > &ДатаНачалаОтпуска");
		
		Запрос.УстановитьПараметр("Свободен",Перечисления.ТипыПериодическихЗадачРаботника.Свободен);				
		Запрос.УстановитьПараметр("ФизЛицо",ФизЛицо);
		Запрос.УстановитьПараметр("Регистратор",СтрокаТекущегоОтпуска.Документ);
		Запрос.УстановитьПараметр("ДатаНачалаОтпуска",СтрокаТекущегоОтпуска.ДатаС);
		Запрос.УстановитьПараметр("ДатаКонцаОтпукса",СтрокаТекущегоОтпуска.ДатаПо);		
	    ТаблицаСобытий = Запрос.Выполнить().Выгрузить();
		
		ОбластьСобытий = Макет.ПолучитьОбласть("События");

		Если ТаблицаСобытий.Количество() < 1 Тогда 
				ОбластьСобытий.Параметры.Событие = "Нет Событий";
				ЭлементыФормы.ПолеСправки.Вывести(ОбластьСобытий);
			Иначе
				Для Каждого  СтрокаСобытия Из ТаблицаСобытий Цикл
					ОбластьСобытий.Параметры.Событие   = СтрокаСобытия.Событие;
	                ОбластьСобытий.Параметры.Состояние = СтрокаСобытия.Состояние;
					ОбластьСобытий.Параметры.ДатаС	   = СтрокаСобытия.ДатаС;					
					ОбластьСобытий.Параметры.ДатаПо    = СтрокаСобытия.ДатаПо;
					ОбластьСобытий.Параметры.Документ  = СтрокаСобытия.Регистратор;
					ЭлементыФормы.ПолеСправки.Вывести(ОбластьСобытий);
				КонецЦикла;
		КонецЕсли;
		ЭлементыФормы.ПолеСправки.ЗакончитьГруппуСтрок();

		
		// Построим таблицу документов на отпуск для данного ФизЛица
		ВывестиДокументыВСправку(ФизЛицо,ЭлементыФормы.ПолеСправки,Макет);
	
	КонецЕсли;
	
КонецПроцедуры //ПроверитьОтпускНаПравомочность(СтрокаТекущегоОтпуска)

// Функция преобразет значение типа "Дата", преданное через параметр "Дата"
// в значение типа "строка"
//
// Параметры: 
//  Дата           - Тип "Дата", содержит значение, которое надо преобразовать. 
//
// Возвращаемое значение:
//  Тип "строка"
//
Функция СтрокаДаты(Дата)
	
	Возврат Формат(Дата,"ДЛФ=DD");
	
КонецФункции // СтрокаДаты(Дата) 

// Процедура устанавливает интервал для диаграммы.
// Устанавливает обор в интерфейсном объекте ЭлементыФормы.ТаблицаДокументов.
// И актуализирует таблицу значений "ТаблицаОтчета".
//
// Параметры:
//  Нет.
//
Процедура ОбновитьДанные() 
	
	// Обновить данные таблицы ТаблицаОтчета	 
	// Создать новую ТаблицуОтчета - НоваяТаблицуОтчета.
	 
	 
	Запрос3 = новый Запрос("ВЫБРАТЬ
	                       |	СборДанныхДляПланированияЗанятостиФизлиц.Документ КАК Документ,
	                       |	СборДанныхДляПланированияЗанятостиФизлиц.ФизЛицо КАК ФизЛицо,
	                       |	СборДанныхДляПланированияЗанятостиФизлиц.Период КАК ДатаС,
	                       |	СборДанныхДляПланированияЗанятостиФизлиц.ДатаОкончания КАК ДатаПо
	                       |ИЗ
	                       |	РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК СборДанныхДляПланированияЗанятостиФизлиц
	                       |
	                       |ГДЕ
	                       |	СборДанныхДляПланированияЗанятостиФизлиц.Состояние = &Задача
	                       |
	                       |УПОРЯДОЧИТЬ ПО
	                       |	ФизЛицо");
							
							
	Запрос3.УстановитьПараметр("Задача",Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
	
	НоваяТаблицаОтчета = Запрос3.Выполнить().Выгрузить();
	НоваяТаблицаОтчета.Индексы.Добавить("Документ,ФизЛицо,ДатаС,ДатаПо");
	
	// ПроверитьОтпуск количество отпускников.
	Если НоваяТаблицаОтчета.Количество()<1 Тогда 
		// выход
		ТаблицаОтпусковДокумента.Очистить();
		ТаблицаВсехОтпусков.Очистить();
		ТаблицаДокументов.Очистить();
		ТаблицаОтчета.Очистить();
		//Обновить();
		Сообщить(НСтр("ru='Нет документов на утверждение';uk='Немає документів на затвердження'")); 
		Возврат;
	КонецЕсли;	
	 
	// Добавить в ТаблицаОтчета колонки результат и комментарий
	НоваяТаблицаОтчета.Колонки.Добавить("Результат",ТипСтрока);
	НоваяТаблицаОтчета.ЗаполнитьЗначения("Нет решения","Результат");
	НоваяТаблицаОтчета.Колонки.Добавить("Комментарий",ТипСтрока);
	
	// Скопировать в новую таблицу старые результаты.
	Для каждого Строка Из ТаблицаОтчета Цикл
		МассивСтрок = НоваяТаблицаОтчета.НайтиСтроки(Новый Структура("Документ,ФизЛицо,ДатаС,ДатаПо",Строка.Документ,Строка.ФизЛицо,Строка.ДатаС,Строка.ДатаПо));
		Для каждого СтрокаНового из МассивСтрок Цикл
			СтрокаНового.Результат   = Строка.Результат;
			СтрокаНового.Комментарий = Строка.Комментарий;
		КонецЦикла;
	КонецЦикла;
	  
	 
	// Переименовать новую таблицу в старую.
	ТаблицаОтчета.Очистить();
	ТаблицаОтчета = НоваяТаблицаОтчета.Скопировать();
		 
	 
	// Установим интервал планирования
	// Найдем Дату самого раннего и самого позднего , запланированного отпуска
	ДатаМин  = ТаблицаОтчета[0].ДатаС;
	ДатаМакс = ТаблицаОтчета[0].ДатаПо;

	Для Каждого строка из ТаблицаОтчета Цикл
		Если строка.ДатаС < ДатаМин Тогда ДатаМин = Строка.ДатаС КонецЕсли;
		Если строка.ДатаПо > ДатаМакс Тогда ДатаМакс = Строка.ДатаПо КонецЕсли;	 
	КонецЦикла;
	 
	 
	 ДатаМинГанта = ДатаМин;
	 ДатаМаксГанта = ДатаМакс;

	 ОбновитьПолеДокументов();
	 ОбновитьПолеВсехОтпусков();

КонецПроцедуры // ОбновитьДанные()

// Процедура построения диаграммы.
//
// Параметры:
//  Нет.
//
Процедура ПостройкаГрафика()
		Перем ПредыдущаяСтрокаОбщегоГрафика;
	
	ЗапросГраф = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.ДатаСобытия КАК ДатаСобытия,
	|	СУММА(Таблица.Числится) КАК Числится,
	|	СУММА(Таблица.Запланировано) КАК Запланировано,
	|	СУММА(Таблица.Утверждено) КАК Утверждено,
	|	СУММА(Таблица.ВОтпуске) КАК ВОтпуске
	|ИЗ
	|	(ВЫБРАТЬ
	|		&ДатаМин КАК ДатаСобытия,
	|		СУММА(1) КАК Числится,
	|		СУММА(0) КАК Запланировано,
	|		СУММА(0) КАК Утверждено,
	|		СУММА(0) КАК ВОтпуске,
	|		СостояниеРаботников.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрСведений.Работники.СрезПоследних(&ДатаМин, ) КАК СостояниеРаботников
	|	ГДЕ
	|		СостояниеРаботников.ПричинаИзмененияСостояния <> &Увольнение
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СостояниеРаботников.Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СостояниеРаботников.Период,
	|		СУММА(ВЫБОР
	|				КОГДА СостояниеРаботников.ПричинаИзмененияСостояния = &Прием
	|					ТОГДА 1
	|				ИНАЧЕ -1
	|			КОНЕЦ),
	|		СУММА(0),
	|		СУММА(0),
	|		СУММА(0),
	|		СостояниеРаботников.Регистратор
	|	ИЗ
	|		РегистрСведений.Работники КАК СостояниеРаботников
	|	ГДЕ
	|		(СостояниеРаботников.ПричинаИзмененияСостояния = &Прием
	|				ИЛИ СостояниеРаботников.ПричинаИзмененияСостояния = &Увольнение)
	|		И СостояниеРаботников.Период > &ДатаМин
	|		И СостояниеРаботников.Период <= &ДатаМакс
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СостояниеРаботников.Период,
	|		СостояниеРаботников.Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ДатаМин,
	|		СУММА(0),
	|		СУММА(1),
	|		СУММА(0),
	|		СУММА(0),
	|		СборДанныхДляПланированияЗанятостиФизлиц.Регистратор
	|	ИЗ
	|		РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц.СрезПоследних(&ДатаМин, ) КАК СборДанныхДляПланированияЗанятостиФизлиц
	|	ГДЕ
	|		СборДанныхДляПланированияЗанятостиФизлиц.Состояние = &Состояние
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СборДанныхДляПланированияЗанятостиФизлиц.Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СборДанныхДляПланированияЗанятостиФизлиц.Период,
	|		СУММА(0),
	|		СУММА(1),
	|		СУММА(0),
	|		СУММА(0),
	|		СборДанныхДляПланированияЗанятостиФизлиц.Регистратор
	|	ИЗ
	|		РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК СборДанныхДляПланированияЗанятостиФизлиц
	|	ГДЕ
	|		СборДанныхДляПланированияЗанятостиФизлиц.Состояние = &Состояние
	|		И СборДанныхДляПланированияЗанятостиФизлиц.Период <= &ДатаМакс
	|		И СборДанныхДляПланированияЗанятостиФизлиц.Период > &ДатаМин
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СборДанныхДляПланированияЗанятостиФизлиц.Период,
	|		СборДанныхДляПланированияЗанятостиФизлиц.Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА СборДанныхДляПланированияЗанятостиФизлиц.ДатаОкончания > &ДатаМакс
	|				ТОГДА &ДатаМакс
	|			ИНАЧЕ СборДанныхДляПланированияЗанятостиФизлиц.ДатаОкончания
	|		КОНЕЦ,
	|		СУММА(0),
	|		ВЫБОР
	|			КОГДА СборДанныхДляПланированияЗанятостиФизлиц.ДатаОкончания > &ДатаМакс
	|				ТОГДА СУММА(0)
	|			ИНАЧЕ СУММА(-1)
	|		КОНЕЦ,
	|		СУММА(0),
	|		СУММА(0),
	|		СборДанныхДляПланированияЗанятостиФизлиц.Регистратор
	|	ИЗ
	|		РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК СборДанныхДляПланированияЗанятостиФизлиц
	|	ГДЕ
	|		СборДанныхДляПланированияЗанятостиФизлиц.Состояние = &Состояние
	|		И СборДанныхДляПланированияЗанятостиФизлиц.Период <= &ДатаМакс
	|		И СборДанныхДляПланированияЗанятостиФизлиц.ДатаОкончания >= &ДатаМин
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СборДанныхДляПланированияЗанятостиФизлиц.ДатаОкончания,
	|		СборДанныхДляПланированияЗанятостиФизлиц.Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ДатаМин,
	|		СУММА(0),
	|		СУММА(1),
	|		СУММА(1),
	|		СУММА(0),
	|		СобытийныйПланЗанятостиФизлиц.Регистратор
	|	ИЗ
	|		РегистрСведений.СобытийныйПланЗанятостиФизлиц.СрезПоследних(&ДатаМин, ) КАК СобытийныйПланЗанятостиФизлиц
	|	ГДЕ
	|		СобытийныйПланЗанятостиФизлиц.Состояние = &Состояние
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СобытийныйПланЗанятостиФизлиц.Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СобытийныйПланЗанятостиФизлиц.Период,
	|		СУММА(0),
	|		СУММА(1),
	|		СУММА(1),
	|		СУММА(0),
	|		СобытийныйПланЗанятостиФизлиц.Регистратор
	|	ИЗ
	|		РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
	|	ГДЕ
	|		СобытийныйПланЗанятостиФизлиц.Состояние = &Состояние
	|		И СобытийныйПланЗанятостиФизлиц.Период > &ДатаМин
	|		И СобытийныйПланЗанятостиФизлиц.Период <= &ДатаМакс
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СобытийныйПланЗанятостиФизлиц.Период,
	|		СобытийныйПланЗанятостиФизлиц.Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА СобытийныйПланЗанятостиФизлиц.ДатаОкончания > &ДатаМакс
	|				ТОГДА &ДатаМакс
	|			ИНАЧЕ СобытийныйПланЗанятостиФизлиц.ДатаОкончания
	|		КОНЕЦ,
	|		СУММА(0),
	|		ВЫБОР
	|			КОГДА СобытийныйПланЗанятостиФизлиц.ДатаОкончания > &ДатаМакс
	|				ТОГДА СУММА(0)
	|			ИНАЧЕ СУММА(-1)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СобытийныйПланЗанятостиФизлиц.ДатаОкончания > &ДатаМакс
	|				ТОГДА СУММА(0)
	|			ИНАЧЕ СУММА(-1)
	|		КОНЕЦ,
	|		СУММА(0),
	|		СобытийныйПланЗанятостиФизлиц.Регистратор
	|	ИЗ
	|		РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
	|	ГДЕ
	|		СобытийныйПланЗанятостиФизлиц.Состояние = &Состояние
	|		И СобытийныйПланЗанятостиФизлиц.Период <= &ДатаМакс
	|		И СобытийныйПланЗанятостиФизлиц.ДатаОкончания >= &ДатаМин
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СобытийныйПланЗанятостиФизлиц.ДатаОкончания,
	|		СобытийныйПланЗанятостиФизлиц.Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ДатаМин,
	|		СУММА(0),
	|		СУММА(0),
	|		СУММА(0),
	|		СУММА(1),
	|		СостояниеРаботников.Регистратор
	|	ИЗ
	|		РегистрСведений.СостояниеРаботников.СрезПоследних(&ДатаМин, ) КАК СостояниеРаботников
	|	ГДЕ
	|		СостояниеРаботников.Состояние = &Отпуск
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СостояниеРаботников.Период,
	|		СостояниеРаботников.Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СостояниеРаботников.Период,
	|		СУММА(0),
	|		СУММА(0),
	|		СУММА(0),
	|		СУММА(1),
	|		СостояниеРаботников.Регистратор
	|	ИЗ
	|		РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	|	ГДЕ
	|		СостояниеРаботников.Состояние = &Отпуск
	|		И СостояниеРаботников.Период > &ДатаМин
	|		И СостояниеРаботников.Период <= &ДатаМакс
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СостояниеРаботников.Период,
	|		СостояниеРаботников.Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(МИНИМУМ(ВсеФакты.Период), &ДатаМакс) > &ДатаМакс
	|				ТОГДА &ДатаМакс
	|			ИНАЧЕ ЕСТЬNULL(МИНИМУМ(ВсеФакты.Период), &ДатаМакс)
	|		КОНЕЦ,
	|		СУММА(0),
	|		СУММА(0),
	|		СУММА(0),
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(МИНИМУМ(ВсеФакты.Период), &ДатаМакс) >= &ДатаМакс
	|				ТОГДА СУММА(0)
	|			ИНАЧЕ СУММА(-1)
	|		КОНЕЦ,
	|		УходыВОтпуск.ФизЛицо
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СостояниеРаботников.ФизЛицо КАК ФизЛицо,
	|			СостояниеРаботников.Период КАК Период,
	|			СостояниеРаботников.Регистратор КАК Регистратор
	|		ИЗ
	|			РегистрСведений.СостояниеРаботников.СрезПоследних(&ДатаМин, ) КАК СостояниеРаботников
	|		ГДЕ
	|			СостояниеРаботников.Состояние = &Отпуск
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СостояниеРаботников.ФизЛицо,
	|			СостояниеРаботников.Период,
	|			СостояниеРаботников.Регистратор
	|		ИЗ
	|			РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	|		ГДЕ
	|			СостояниеРаботников.Состояние = &Отпуск
	|			И СостояниеРаботников.Период > &ДатаМин
	|			И СостояниеРаботников.Период <= &ДатаМакс) КАК УходыВОтпуск
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				СостояниеРаботников.ФизЛицо КАК ФизЛицо,
	|				СостояниеРаботников.Период КАК Период,
	|				СостояниеРаботников.Состояние КАК Состояние
	|			ИЗ
	|				РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				СостояниеРаботников.ФизЛицо,
	|				СостояниеРаботников.ПериодЗавершения,
	|				СостояниеРаботников.СостояниеЗавершения
	|			ИЗ
	|				РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботников КАК СостояниеРаботниковПроверка
	|					ПО СостояниеРаботников.ФизЛицо = СостояниеРаботниковПроверка.ФизЛицо
	|						И СостояниеРаботниковПроверка.Период > СостояниеРаботников.Период
	|						И СостояниеРаботниковПроверка.Период <= СостояниеРаботников.ПериодЗавершения
	|			ГДЕ
	|				СостояниеРаботниковПроверка.ФизЛицо ЕСТЬ NULL ) КАК ВсеФакты
	|			ПО УходыВОтпуск.ФизЛицо = ВсеФакты.ФизЛицо
	|				И УходыВОтпуск.Период < ВсеФакты.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		УходыВОтпуск.ФизЛицо,
	|		ВсеФакты.Период) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.ДатаСобытия");
	
	ЗапросГраф.УстановитьПараметр("ДатаМин", ДатаМин);
	ЗапросГраф.УстановитьПараметр("ДатаМакс", ДатаМакс);
	ЗапросГраф.УстановитьПараметр("Прием",Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	ЗапросГраф.УстановитьПараметр("Увольнение",Перечисления.ПричиныИзмененияСостояния.Увольнение);
	ЗапросГраф.УстановитьПараметр("Состояние", Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
	ЗапросГраф.УстановитьПараметр("Отпуск", Перечисления.СостоянияРаботника.ОтпускЕжегодный);
	
	Если  ДатаМакс > ТекущаяДата() Тогда 
		ЗапросГраф.УстановитьПараметр("ВиртуальнаяДата", ТекущаяДата()) Иначе
		ЗапросГраф.УстановитьПараметр("ВиртуальнаяДата", ДатаМакс)
	КонецЕсли;
	

	ТаблицаГрафика = ЗапросГраф.Выполнить().Выгрузить();
	
	Если ТаблицаГрафика.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаМин)  Или НЕ ЗначениеЗаполнено(ДатаМакс) Тогда
      Возврат;
	КонецЕсли;

	// нормировка дат в таблице

	Для Каждого СтрокаТаблицы из ТаблицаГрафика Цикл
		Если СтрокаТаблицы.ВОтпуске < 0 Тогда СтрокаТаблицы.ДатаСобытия = СтрокаТаблицы.ДатаСобытия - 1
		КонецЕсли;
		
			СтрокаТаблицы.ДатаСобытия = НачалоДня(СтрокаТаблицы.ДатаСобытия); 
	КонецЦикла;
		
		
	 // Раздуть таблицу:	 
	м=ДатаМин;
	Пока м<ДатаМакс Цикл;
	строка = ТаблицаГрафика.Добавить();
	строка.ДатаСобытия = м;
	строка.Числится = 0;
	строка.Запланировано = 0;
	строка.Утверждено = 0;
	строка.ВОтпуске = 0;
	м=м+24*60*60;	
	КонецЦикла;

		
	
	
	
	// Обрезка диапазонов в таблице.
	//Для индекс = 0 по ТаблицаГрафика.Количество()-1 Цикл
	//Если ТаблицаГрафика[индекс].ДатаСобытия < ДатаМин Тогда ТаблицаГрафика[индекс].ДатаСобытия = ДатаМин КонецЕсли;
	//Если ТаблицаГрафика[индекс].ДатаСобытия > ДатаМакс  Тогда ТаблицаГрафика[индекс].ДатаСобытия = ДатаМакс КонецЕсли;
	//КонецЦикла;

	//
	ТаблицаГрафика.Свернуть("ДатаСобытия","Числится,Запланировано,Утверждено,ВОтпуске,");
	ТаблицаГрафика.Сортировать("ДатаСобытия");
	
	ТаблицаГрафика.Колонки[1].Заголовок = НСтр("ru='Квота численности отпускников';uk='Квота чисельності відпускників'");
	ТаблицаГрафика.Колонки[2].Заголовок = НСтр("ru='Запланированные отпуска';uk='Заплановані відпустки'");
	ТаблицаГрафика.Колонки[3].Заголовок = НСтр("ru='Утвержденные отпуска';uk='Затверджені відпустки'");
	ТаблицаГрафика.Колонки[4].Заголовок = НСтр("ru='Реализованные отпуска';uk='Реалізовані відпустки'");
	
	
	
    // суммовая пробежка
	Числится = 0;
	Запланировано = 0;
	Утверждено = 0;
	ВОтпуске = 0;
	МаксимальнаяГраницаГрафика = 0;
	
	Для индекс = 0 по ТаблицаГрафика.Количество()-1 Цикл
	Числится      = Числится + ТаблицаГрафика[индекс].Числится;
	Запланировано = Запланировано + ТаблицаГрафика[индекс].Запланировано;
	Утверждено    = Утверждено + ТаблицаГрафика[индекс].Утверждено;
	ВОтпуске      = ВОтпуске + ТаблицаГрафика[индекс].ВОтпуске;	
	Если Числится > МаксимальнаяГраницаГрафика Тогда МаксимальнаяГраницаГрафика = Числится; КонецЕсли;  
	ТаблицаГрафика[индекс].Числится = окр(Числится * Квота / 100,0,0);
	ТаблицаГрафика[индекс].Запланировано = Запланировано;
	ТаблицаГрафика[индекс].Утверждено = Утверждено;
	ТаблицаГрафика[индекс].ВОтпуске = ВОтпуске;
	КонецЦикла;

	Числится = ТаблицаГрафика[0].Числится;
	ТаблицаГрафика[0].Числится = окр(Числится * Квота / 100,0,0);
		
	ЭлементыФормы.ОбщийГрафикЛинии.Видимость = ложь;
	ЭлементыФормы.ГрафикОбщий.Видимость = ложь;
	Если ПереключательГрафика = 0 Тогда  
		ЭлементыФормы.ГрафикОбщий.Видимость = истина; 
	КонецЕсли;
	
	Если ПереключательГрафика = 1 Тогда  
		ЭлементыФормы.ОбщийГрафикЛинии.Видимость = истина; 
	КонецЕсли;

	
    серия1 = ЭлементыФормы.ГрафикОбщий.Серии.Получить(1);
	ЭлементыФормы.ГрафикОбщий.СерииВСтроках = Ложь;
	ЭлементыФормы.ГрафикОбщий.ИсточникДанных = ТаблицаГрафика;
			
	ЭлементыФормы.ОбщийГрафикЛинии.СерииВСтроках = Ложь;
	ЭлементыФормы.ОбщийГрафикЛинии.ИсточникДанных = ТаблицаГрафика;
		
	КонецПроцедуры // ПостройкаГрафика()

// Процедура построения интерфейсного объекта "ТаблицаВсехОтпусков".
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПолеВсехОтпусков()
			
	 ТаблицаВсехОтпусков.Очистить();
	 
	 Для каждого строка из ТаблицаОтчета Цикл
		 
		 // добавляем отпуск
		 ОтпускНаЭкране = ТаблицаВсехОтпусков.Добавить();
		 
		 ОтпускНаЭкране.ФизЛицо = строка.ФизЛицо; 
		 ОтпускНаЭкране.Комментарий = строка.Комментарий;
		 ОтпускНаЭкране.СтрокаТаблицыОтчета = строка;
		 
	 КонецЦикла;
	 
конецПроцедуры // ОбновитьПолеВсехОтпусков()

// Процедура построения интерфейсного объекта "ТаблицаДокументов".
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПолеДокументов()
	
	Запрос = новый Запрос ("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                       |	СборДанныхДляПланированияЗанятостиФизлиц.Документ КАК Документ
	                       |ИЗ
	                       |	РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК СборДанныхДляПланированияЗанятостиФизлиц
	                       |
	                       |ГДЕ
	                       |	СборДанныхДляПланированияЗанятостиФизлиц.Состояние = &Задача");

	
	Запрос.УстановитьПараметр("Задача",Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		
КонецПроцедуры // ОбновитьПолеВсехОтпусков()

// Процедура построения Отчета.
//
// Параметры:
//  Нет.
//
Процедура ПостроениеОтчета()
	 
	 //подготовка отчета:	
	ЭлементыФормы.ПолеСправки.Очистить();
	Макет = ПолучитьМакет("МакетСправки");

	Область = Макет.ПолучитьОбласть("ШапкаОбщейСправки");
	Область.Параметры.ТекущаяДата = СтрокаДаты(ТекущаяДата());
	ЭлементыФормы.ПолеСправки.Вывести(Область);
    ОбластьДокУтв = Макет.ПолучитьОбласть("УтвержденныйДокумент");
    ОбластьРазделитель = Макет.ПолучитьОбласть("ШапкаНеутвержденныхДокументов");

	ОбластьДок = Макет.ПолучитьОбласть("Документ");
    ОбластьОтп = Макет.ПолучитьОбласть("Отпуск");
		
	// вывод утвержденных документов.
	
	Если ТаблицаПроведенныхДокументов = Неопределено или ТаблицаПроведенныхДокументов.количество()<1 Тогда 
		
		ОбластьДокУтв.Параметры.Документ = НСтр("ru='-- Нет документов --';uk='-- Немає документів --'");
		ЭлементыФормы.ПолеСправки.Вывести(ОбластьДокУтв);
	Иначе
		Для Каждого Строка Из ТаблицаПроведенныхДокументов Цикл
			ОбластьДокУтв.Параметры.Документ = Строка.Документ;
			ЭлементыФормы.ПолеСправки.Вывести(ОбластьДокУтв);
		конецЦикла;
	КонецЕсли;
	
	
	 ЭлементыФормы.ПолеСправки.Вывести(ОбластьРазделитель);
	
	
	
	// вывод неутвержденных документов. 
	
	 Запрос1 = новый Запрос ("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                         |	СборДанныхДляПланированияЗанятостиФизлиц.Документ КАК Документ
	                         |ИЗ
	                         |	РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК СборДанныхДляПланированияЗанятостиФизлиц
	                         |
	                         |ГДЕ
	                         |	СборДанныхДляПланированияЗанятостиФизлиц.Состояние = &Состояние");	  

							 
	Запрос1.УстановитьПараметр("Состояние",Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);						 
	ТабДоков = запрос1.Выполнить().Выгрузить();  
	
	Если ТабДоков.количество()<1 Тогда 
		
		ОбластьДокУтв.Параметры.Документ = НСтр("ru='-- Нет документов --';uk='-- Немає документів --'");
		ЭлементыФормы.ПолеСправки.Вывести(ОбластьДокУтв);
	КонецЕсли;
	

	
    Для каждого Документ из ТабДоков цикл
		    		
		//вывод данных документа
		ОбластьДок.Параметры.Представление = Документ[0];
		ОбластьДок.Параметры.Автор = Документ[0].Ответственный;
		ЭлементыФормы.ПолеСправки.Вывести(ОбластьДок);
		////вывод данных документа
		
		Док = Документ[0];
		
		
		Для Каждого СтрокаТаблицыОтчета из ТаблицаОтчета Цикл
			
		Если СтрокаТаблицыОтчета.Документ = Док Тогда	
			
	
			
		//вывод данных строки
		ОбластьОтп.Параметры.ФизЛицо = СтрокаТаблицыОтчета.ФизЛицо;
		ОбластьОтп.Параметры.ДатаС   = СтрокаДаты(СтрокаТаблицыОтчета.ДатаС);
		ОбластьОтп.Параметры.ДатаПо  = СтрокаДаты(СтрокаТаблицыОтчета.ДатаПо);
				
		решение = НСтр("ru='Нет решения';uk='Немає рішення'");
		Если СтрокаТаблицыОтчета.Результат = "Отклонить" тогда решение = НСтр("ru='Пересмотреть';uk='Переглянути'");КонецЕсли;
        Если СтрокаТаблицыОтчета.Результат = "Утвердить" тогда решение = НСтр("ru='Разрешить';uk='Дозволити'");КонецЕсли;
        ОбластьОтп.Параметры.Решение = решение;
        ОбластьОтп.Параметры.Комментарий = СтрокаТаблицыОтчета.Комментарий;			
		ЭлементыФормы.ПолеСправки.Вывести(ОбластьОтп);
		 

		КонецЕсли;
		
		КонецЦикла;
	КонецЦикла;		
		
конецПроцедуры // ПостроениеОтчета()

// Процедура построения общей справки по отпускам.
//
// Параметры:
//  Нет.
//
Процедура ПостроениеОбщейСправки()
	
	
	Запрос = Новый Запрос (
	"ВЫБРАТЬ
	|	Работники.ФизЛицо КАК ФизЛицо,
	|	Работники.ФизЛицо.Наименование КАК ФизЛицоНаименование,
	|	Работники.Подразделение КАК Подразделение,
	|	Работники.Подразделение.Наименование,
	|	Работники.Должность КАК Должность,
	|	Работники.Должность.Наименование,
	|	Работники.ДатаПриемаНаРаботу,
	|	ЕСТЬNULL(Работники.ЗаработанныйОтпуск, 0) КАК ЗаработанныйОтпуск,
	|	ЕСТЬNULL(СУММА(Отпуска.РазмерЗапланированного), 0) КАК РазмерЗапланированного,
	|	ЕСТЬNULL(СУММА(Отпуска.РазмерУтвержденного), 0) КАК РазмерУтвержденного,
	|	ЕСТЬNULL(СУММА(Отпуска.РазмерРеализованного), 0) КАК РазмерРеализованного
	|ИЗ
	|	(ВЫБРАТЬ
	|		Работники.ФизЛицо КАК ФизЛицо,
	|		Работники.Должность КАК Должность,
	|		Работники.Подразделение КАК Подразделение,
	|		ВЫРАЗИТЬ(РАЗНОСТЬДАТ(НачалаРаботы.ДатаПриемаНаРаботу, &ДатаМакс, ДЕНЬ) * 28 / 365.25 КАК ЧИСЛО(5, 0)) КАК ЗаработанныйОтпуск,
	|		НачалаРаботы.ДатаПриемаНаРаботу КАК ДатаПриемаНаРаботу
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РаботникиСрезПоследних.ФизЛицо КАК ФизЛицо,
	|			РаботникиСрезПоследних.Должность КАК Должность,
	|			РаботникиСрезПоследних.Подразделение КАК Подразделение
	|		ИЗ
	|			РегистрСведений.Работники.СрезПоследних(&ДатаМакс, ) КАК РаботникиСрезПоследних) КАК Работники
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ПринятыеРаботники.ФизЛицо КАК ФизЛицо,
	|				МАКСИМУМ(ВсеДатыПриемаНаРаботу.ДатаПриемаНаРаботу) КАК ДатаПриемаНаРаботу
	|			ИЗ
	|				(ВЫБРАТЬ
	|					СостояниеРаботников.ФизЛицо КАК ФизЛицо
	|				ИЗ
	|					РегистрСведений.Работники КАК СостояниеРаботников
	|				ГДЕ
	|					СостояниеРаботников.ПричинаИзмененияСостояния = &Прием) КАК ПринятыеРаботники
	|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|						СостояниеРаботников.ФизЛицо КАК ФизЛицо,
	|						СостояниеРаботников.Период КАК ДатаПриемаНаРаботу
	|					ИЗ
	|						РегистрСведений.Работники КАК СостояниеРаботников
	|					ГДЕ
	|						СостояниеРаботников.ПричинаИзмененияСостояния = &Прием) КАК ВсеДатыПриемаНаРаботу
	|					ПО ПринятыеРаботники.ФизЛицо = ВсеДатыПриемаНаРаботу.ФизЛицо
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПринятыеРаботники.ФизЛицо) КАК НачалаРаботы
	|			ПО Работники.ФизЛицо = НачалаРаботы.ФизЛицо
	|	ГДЕ
	|		НачалаРаботы.ДатаПриемаНаРаботу <= &ДатаМакс) КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СборДанныхДляПланированияЗанятостиФизлиц.ФизЛицо КАК ФизЛицо,
	|			СборДанныхДляПланированияЗанятостиФизлиц.Период КАК ДатаС1,
	|			СборДанныхДляПланированияЗанятостиФизлиц.ДатаОкончания КАК ДатаПо1,
	|			NULL КАК ДатаС2,
	|			NULL КАК ДатаПо2,
	|			NULL КАК ДатаС3,
	|			NULL КАК ДатаПо3,
	|			РАЗНОСТЬДАТ(СборДанныхДляПланированияЗанятостиФизлиц.Период, СборДанныхДляПланированияЗанятостиФизлиц.ДатаОкончания, ДЕНЬ) + 1 КАК РазмерЗапланированного,
	|			0 КАК РазмерУтвержденного,
	|			0 КАК РазмерРеализованного
	|		ИЗ
	|			РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК СборДанныхДляПланированияЗанятостиФизлиц
	|		ГДЕ
	|			СборДанныхДляПланированияЗанятостиФизлиц.Состояние = &Состояние
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СобытийныйПланЗанятостиФизлиц.ФизЛицо,
	|			NULL,
	|			NULL,
	|			СобытийныйПланЗанятостиФизлиц.Период,
	|			СобытийныйПланЗанятостиФизлиц.ДатаОкончания,
	|			NULL,
	|			NULL,
	|			0,
	|			РАЗНОСТЬДАТ(СобытийныйПланЗанятостиФизлиц.Период, СобытийныйПланЗанятостиФизлиц.ДатаОкончания, ДЕНЬ),
	|			0
	|		ИЗ
	|			РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
	|		ГДЕ
	|			СобытийныйПланЗанятостиФизлиц.Состояние = &Состояние
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			УходыВОтпуск.ФизЛицо,
	|			NULL,
	|			NULL,
	|			NULL,
	|			NULL,
	|			УходыВОтпуск.Период,
	|			ЕСТЬNULL(МИНИМУМ(ВсеФакты.Период), &ДатаМакс),
	|			0,
	|			0,
	|			РАЗНОСТЬДАТ(УходыВОтпуск.Период, ЕСТЬNULL(МИНИМУМ(ВсеФакты.Период), &ДатаМакс), ДЕНЬ) - 1
	|		ИЗ
	|			(ВЫБРАТЬ
	|				СостояниеРаботников.ФизЛицо КАК ФизЛицо,
	|				СостояниеРаботников.Период КАК Период,
	|				СостояниеРаботников.Регистратор КАК Регистратор
	|			ИЗ
	|				РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	|			ГДЕ
	|				СостояниеРаботников.Состояние = &Отпуск) КАК УходыВОтпуск
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					СостояниеРаботников.ФизЛицо КАК ФизЛицо,
	|					СостояниеРаботников.Период КАК Период,
	|					СостояниеРаботников.Состояние КАК Состояние
	|				ИЗ
	|					РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ
	|					СостояниеРаботников.ФизЛицо,
	|					СостояниеРаботников.ПериодЗавершения,
	|					СостояниеРаботников.СостояниеЗавершения
	|				ИЗ
	|					РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботников КАК СостояниеРаботниковПроверка
	|						ПО СостояниеРаботников.ФизЛицо = СостояниеРаботниковПроверка.ФизЛицо
	|							И СостояниеРаботниковПроверка.Период > СостояниеРаботников.Период
	|							И СостояниеРаботниковПроверка.Период <= СостояниеРаботников.ПериодЗавершения
	|				ГДЕ
	|					СостояниеРаботниковПроверка.ФизЛицо ЕСТЬ NULL ) КАК ВсеФакты
	|				ПО УходыВОтпуск.ФизЛицо = ВсеФакты.ФизЛицо
	|					И УходыВОтпуск.Период < ВсеФакты.Период
	|		
	|		СГРУППИРОВАТЬ ПО
	|			УходыВОтпуск.ФизЛицо,
	|			УходыВОтпуск.Регистратор,
	|			УходыВОтпуск.Период) КАК Отпуска
	|		ПО Работники.ФизЛицо = Отпуска.ФизЛицо
	|			И (Отпуска.ДатаС1 ЕСТЬ NULL 
	|				ИЛИ Отпуска.ДатаС1 >= Работники.ДатаПриемаНаРаботу)
	|			И (Отпуска.ДатаС2 ЕСТЬ NULL 
	|				ИЛИ Отпуска.ДатаС2 >= Работники.ДатаПриемаНаРаботу)
	|			И (Отпуска.ДатаС3 ЕСТЬ NULL 
	|				ИЛИ Отпуска.ДатаС3 >= Работники.ДатаПриемаНаРаботу)
	|
	|СГРУППИРОВАТЬ ПО
	|	Работники.ФизЛицо,
	|	Работники.Подразделение,
	|	Работники.Должность,
	|	Работники.ЗаработанныйОтпуск,
	|	Работники.ФизЛицо.Наименование,
	|	Работники.ДатаПриемаНаРаботу,
	|	Работники.Подразделение.Наименование,
	|	Работники.Должность.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицоНаименование");
	
		Запрос.УстановитьПараметр("ДатаМакс", ТекущаяДата());
		Запрос.УстановитьПараметр("Прием",Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
		Запрос.УстановитьПараметр("Состояние", Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
		Запрос.УстановитьПараметр("Отпуск", Перечисления.СостоянияРаботника.ОтпускЕжегодный);

		ТаблицаОбщейСправки = Запрос.Выполнить().Выгрузить();
		
		
		// Вывести сообщение, если на данный момент нет ни одного принятого на работу работника. 
		Если ТаблицаОбщейСправки.Количество() <1 Тогда
			Сообщить (НСтр("ru='Справка не может быть предоставлена! На данный момент нет работников, принятых на работу';uk='Довідка не може бути надана! На даний момент немає працівників, прийнятих на роботу'"));
			Возврат;
		КонецЕсли;

		ЭлементыФормы.ПолеСправки.Очистить();
		
		Макет = ПолучитьМакет("МакетОбщейСправки"); 

		ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
		ОбластьЗаголовка = Макет.ПолучитьОбласть("Строка_Заголовок");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
		
		ОбластьШапки.Параметры.ТекущаяДата = СтрокаДаты(ТекущаяДата());
		ЭлементыФормы.ПолеСправки.Вывести(ОбластьШапки);

		Для каждого Строка из  ТаблицаОбщейСправки Цикл
			
			ОбластьЗаголовка.Параметры.ФизЛицо = Строка.ФизЛицоНаименование;
			ОбластьЗаголовка.Параметры.НеСпланировано = Окр(Строка.ЗаработанныйОтпуск - Строка.РазмерЗапланированного - Строка.РазмерУтвержденного,0);
			
			ЭлементыФормы.ПолеСправки.Вывести(ОбластьЗаголовка);	
			ЭлементыФормы.ПолеСправки.Область(ЭлементыФормы.ПолеСправки.ВысотаТаблицы,,ЭлементыФормы.ПолеСправки.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня; 
			ЭлементыФормы.ПолеСправки.НачатьГруппуСтрок("",Ложь);

			
			ОбластьСтроки.Параметры.ДатаПриемаНаРаботу = СтрокаДаты(Строка.ДатаПриемаНаРаботу);
			ОбластьСтроки.Параметры.ЗаработанныйОтпуск = Окр(Строка.ЗаработанныйОтпуск,0);
            ОбластьСтроки.Параметры.РазмерЗапланированного = Окр(Строка.РазмерЗапланированного,0) ;
			ОбластьСтроки.Параметры.РазмерУтвержденного =  Окр(Строка.РазмерУтвержденного,0) ;
			ОбластьСтроки.Параметры.РазмерРеализованного =  Окр(Строка.РазмерРеализованного,0) ;
			ОбластьСтроки.Параметры.Подразделение = Строка.ПодразделениеНаименование;
			ОбластьСтроки.Параметры.Должность = Строка.ДолжностьНаименование;
			
			
			ЭлементыФормы.ПолеСправки.Вывести(ОбластьСтроки);
			ЭлементыФормы.ПолеСправки.ЗакончитьГруппуСтрок();
	
		КонецЦикла;
		
КонецПроцедуры // ПостроениеОбщейсправки()

// Процедура построения диаграммы Ганта.
//
// Параметры:
//  Нет.
//
Процедура ДиаграммаГанта() 
	
	Гант = ЭлементыФормы.ДиаграммаГанта1;
	Гант.Очистить();
	Гант.Обновление = Ложь;
	
	ЗапросГанта = Новый Запрос;
	ЗапросГанта.Текст = 
	"ВЫБРАТЬ
	|	Работники.Подразделение КАК Подразделение,
	|	Работники.Должность КАК Должность,
	|	Отпуска.ФизЛицо КАК ФизЛицо,
	|	Отпуска.ДатаС1 КАК ДатаС1,
	|	Отпуска.ДатаПо1 КАК ДатаПо1,
	|	Отпуска.ДатаС2 КАК ДатаС2,
	|	Отпуска.ДатаПо2 КАК ДатаПо2,
	|	Отпуска.ДатаС3 КАК ДатаС3,
	|	Отпуска.ДатаПо3 КАК ДатаПо3
	|ИЗ
	|	(ВЫБРАТЬ
	|		СборДанныхДляПланированияЗанятостиФизлиц.ФизЛицо КАК ФизЛицо,
	|		ВЫБОР
	|			КОГДА СборДанныхДляПланированияЗанятостиФизлиц.Период < &ДатаМин
	|				ТОГДА &ДатаМин
	|			ИНАЧЕ СборДанныхДляПланированияЗанятостиФизлиц.Период
	|		КОНЕЦ КАК ДатаС1,
	|		ВЫБОР
	|			КОГДА СборДанныхДляПланированияЗанятостиФизлиц.ДатаОкончания > &ДатаМакс
	|				ТОГДА &ДатаМакс
	|			ИНАЧЕ СборДанныхДляПланированияЗанятостиФизлиц.ДатаОкончания
	|		КОНЕЦ КАК ДатаПо1,
	|		NULL КАК ДатаС2,
	|		NULL КАК ДатаПо2,
	|		NULL КАК ДатаС3,
	|		NULL КАК ДатаПо3
	|	ИЗ
	|		РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК СборДанныхДляПланированияЗанятостиФизлиц
	|	ГДЕ
	|		СборДанныхДляПланированияЗанятостиФизлиц.Состояние = &Состояние
	|		И СборДанныхДляПланированияЗанятостиФизлиц.Период <= &ДатаМакс
	|		И СборДанныхДляПланированияЗанятостиФизлиц.ДатаОкончания >= &ДатаМин
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СобытийныйПланЗанятостиФизлиц.ФизЛицо,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СобытийныйПланЗанятостиФизлиц.Период < &ДатаМин
	|				ТОГДА &ДатаМин
	|			ИНАЧЕ СобытийныйПланЗанятостиФизлиц.Период
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СобытийныйПланЗанятостиФизлиц.ДатаОкончания > &ДатаМакс
	|				ТОГДА &ДатаМакс
	|			ИНАЧЕ СобытийныйПланЗанятостиФизлиц.ДатаОкончания
	|		КОНЕЦ,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
	|	ГДЕ
	|		СобытийныйПланЗанятостиФизлиц.Состояние = &Состояние
	|		И СобытийныйПланЗанятостиФизлиц.Период <= &ДатаМакс
	|		И СобытийныйПланЗанятостиФизлиц.ДатаОкончания >= &ДатаМин
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		УходыВОтпуск.ФизЛицо,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА УходыВОтпуск.Период < &ДатаМин
	|				ТОГДА &ДатаМин
	|			ИНАЧЕ УходыВОтпуск.Период
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(МИНИМУМ(ВсеФакты.Период), &ДатаМакс) > &ДатаМакс
	|				ТОГДА &ТекущаяДата
	|			ИНАЧЕ ЕСТЬNULL(МИНИМУМ(ВсеФакты.Период), &ДатаМакс)
	|		КОНЕЦ
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СостояниеРаботников.ФизЛицо КАК ФизЛицо,
	|			СостояниеРаботников.Период КАК Период,
	|			СостояниеРаботников.Регистратор КАК Регистратор
	|		ИЗ
	|			РегистрСведений.СостояниеРаботников.СрезПоследних(&ДатаМин, ) КАК СостояниеРаботников
	|		ГДЕ
	|			СостояниеРаботников.Состояние = &Отпуск
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СостояниеРаботников.ФизЛицо,
	|			СостояниеРаботников.Период,
	|			СостояниеРаботников.Регистратор
	|		ИЗ
	|			РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	|		ГДЕ
	|			СостояниеРаботников.Состояние = &Отпуск
	|			И СостояниеРаботников.Период > &ДатаМин
	|			И СостояниеРаботников.Период <= &ДатаМакс) КАК УходыВОтпуск
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				СостояниеРаботников.ФизЛицо КАК ФизЛицо,
	|				СостояниеРаботников.Период КАК Период,
	|				СостояниеРаботников.Состояние КАК Состояние
	|			ИЗ
	|				РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				СостояниеРаботников.ФизЛицо,
	|				СостояниеРаботников.ПериодЗавершения,
	|				СостояниеРаботников.СостояниеЗавершения
	|			ИЗ
	|				РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботников КАК СостояниеРаботниковПроверка
	|					ПО СостояниеРаботников.ФизЛицо = СостояниеРаботниковПроверка.ФизЛицо
	|						И СостояниеРаботниковПроверка.Период > СостояниеРаботников.Период
	|						И СостояниеРаботниковПроверка.Период <= СостояниеРаботников.ПериодЗавершения
	|			ГДЕ
	|				СостояниеРаботниковПроверка.ФизЛицо ЕСТЬ NULL ) КАК ВсеФакты
	|			ПО УходыВОтпуск.ФизЛицо = ВсеФакты.ФизЛицо
	|				И УходыВОтпуск.Период < ВсеФакты.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		УходыВОтпуск.ФизЛицо,
	|		УходыВОтпуск.Период) КАК Отпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаботникиСрезПоследних.ФизЛицо КАК ФизЛицо,
	|			РаботникиСрезПоследних.Должность КАК Должность,
	|			РаботникиСрезПоследних.Подразделение КАК Подразделение
	|		ИЗ
	|			РегистрСведений.Работники.СрезПоследних(&ДатаМакс, ) КАК РаботникиСрезПоследних) КАК Работники
	|		ПО Отпуска.ФизЛицо = Работники.ФизЛицо";
					
	ЗапросГанта.УстановитьПараметр("ДатаМин",ДатаМинГанта);
    ЗапросГанта.УстановитьПараметр("ДатаМакс",ДатаМаксГанта);
	ЗапросГанта.УстановитьПараметр("Состояние", Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
	ЗапросГанта.УстановитьПараметр("Отпуск", Перечисления.СостоянияРаботника.ОтпускЕжегодный);
	ЗапросГанта.УстановитьПараметр("ТекущаяДата", Мин(ОбщегоНазначения.ПолучитьРабочуюДату(),ДатаМаксГанта));

	ТаблицаГанта=ЗапросГанта.Выполнить().Выгрузить();
	
	Гант.АвтоОпределениеПолногоИнтервала = ложь;
	Если НЕ ЗначениеЗаполнено(ДатаМинГанта)  Или НЕ ЗначениеЗаполнено(ДатаМаксГанта) Тогда
      Возврат;
	КонецЕсли;
	
	Гант.УстановитьПолныйИнтервал(ДатаМинГанта,ДатаМаксГанта);
	
	//заказ серий в диаграмме ганта
	
	серия1 = Гант.УстановитьСерию(НСтр("ru='Запланировал отпуск';uk='Запланував відпустку'"),"");
	цвет = новый цвет(54,209,39);
	Серия1.Цвет = цвет;	
	
	Если СерииГантаСогласованные = Истина Тогда 
		серия2 = Гант.УстановитьСерию(НСтр("ru='Утвердил отпуск';uk='Затвердив відпустку'"),"");
		цвет = новый цвет(37,113,225);
		Серия2.Цвет = цвет;	
	КонецЕсли;
	
	Если СерииГантаРеализованные = истина Тогда 
		серия3 = Гант.УстановитьСерию(НСтр("ru='Реализовал отпуск';uk='Реалізував відпустку'"),"");
		цвет = новый цвет(15,30,103);
		Серия3.Цвет = цвет;	
	КонецЕсли;
		
	//строим диаграмму.
	Для Каждого Строка из ТаблицаГанта Цикл
		Если Строка[0] = null тогда Продолжить КонецЕсли;
		//создаем точку для работника
		Если строка.ДатаС1 <> null Тогда 
		
			//создаем первое значение - запланированный отпуск.
			
				Точка = гант.УстановитьТочку(Строка.ФизЛицо,"");
				Значение1 = Гант.ПолучитьЗначение(Точка, Серия1);										
				Интервал = Значение1.Добавить();
				Интервал.Начало = строка.ДатаС1;
				Интервал.Конец = строка.ДатаПо1;
				
				//Точка.Расшифровка = строка.Документ; 
			
		КонецЕсли;
	
				//создаем второе значение - согласованный отпуск.
		Если СерииГантаСогласованные = Истина И строка.ДатаС2 <> null тогда 
				Точка=гант.УстановитьТочку(Строка.ФизЛицо,"");
				Значение2 = Гант.ПолучитьЗначение(Точка, Серия2);										
				Интервал = Значение2.Добавить();
				Интервал.Начало = строка.ДатаС2;
				Интервал.Конец = строка.ДатаПо2;
					
				//Точка.Расшифровка = строка.Документ; 
		КонецЕсли;
				
			
				
		//создаем третье значение - реализованный отпуск.
		Если  СерииГантаРеализованные = истина и строка.ДатаС3 <> null тогда
			Точка = гант.УстановитьТочку(Строка.ФизЛицо,"");	
			Значение3 = Гант.ПолучитьЗначение(Точка, Серия3);										
			Интервал = Значение3.Добавить();
			Интервал.Начало = строка.ДатаС3;
			Интервал.Конец = строка.ДатаПо3-1;
						
			//Точка.Расшифровка = строка.Документ; 
		КонецЕсли;
		 
	КонецЦикла;
	 
	//показ диаграммы
	Гант.ПоказатьУровеньТочек(0);
	гант.ПоказатьУровеньСерий(0);
	Гант.Обновление = Истина;
		
КонецПроцедуры // ДиаграммаГанта()

Процедура ПровестиВсе()

	// Обновить данные
	ОбновитьДанные();
	
	// Построить список документов.
	Запрос = новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	СборДанныхДляПланированияЗанятостиФизлиц.Регистратор КАК Документ,
	                      |	ЛОЖЬ КАК Решение
	                      |ИЗ
	                      |	РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК СборДанныхДляПланированияЗанятостиФизлиц
	                      |
	                      |ГДЕ
	                      |	СборДанныхДляПланированияЗанятостиФизлиц.Состояние = &Отпуск");
								
	Запрос.УстановитьПараметр("Отпуск",Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);							
	ТаблицаЗапланированныхДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	
	// Для каждого документа установить разрешение на проведение
	Для Каждого Документ из ТаблицаЗапланированныхДокументов Цикл
		МассивСтрок = ТаблицаОтчета.НайтиСтроки(Новый Структура("Документ",Документ));
		Найден = МассивСтрок.Количество() > 0;
		Проводить = Истина;
		Для каждого Строка из МассивСтрок Цикл
			Проводить = Строка.Результат = "Утвердить";
			Если Не Проводить Тогда 
				Прервать; 
			КонецЕсли;  			
		КонецЦикла;
		Если Найден И Проводить Тогда 
			Док = Документ.ПолучитьОбъект(); 
		    Док.Решение = Перечисления.СостоянияОбъектов.Утвержден;	
		    Док.Записать(РежимЗаписиДокумента.Проведение);
			СтрокаПроведенных = ТаблицаПроведенныхДокументов.Добавить();
			СтрокаПроведенных.Документ = Док; 
		КонецЕсли;
	КонецЦикла;
	
	// Обновить данные
	ОбновитьДанные();
	// ОбновитьПолеВсехОтпусков();
  

КонецПроцедуры // ПровестиВсе()

Процедура ПроверитьОтпуск()

	Если ТаблицаОтчета.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	ФормаПрогрессора.КомментарийЗначения = "Проверяются отпуска, подождите пожалуйста...";
	ФормаПрогрессора.МаксимальноеЗначение = ТаблицаОтчета.Количество();
	ФормаПрогрессора.Значение = 0;
	ФормаПрогрессора.Открыть();
	
	Запрос = новый Запрос("ВЫБРАТЬ
	                       |	МИНИМУМ(СборДанныхДляПланированияЗанятостиФизлиц.Период) КАК ДатаС,
	                       |	МАКСИМУМ(СборДанныхДляПланированияЗанятостиФизлиц.ДатаОкончания) КАК ДатаПо
	                       |ИЗ
	                       |	РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК СборДанныхДляПланированияЗанятостиФизлиц
	                       |
	                       |ГДЕ
	                       |	СборДанныхДляПланированияЗанятостиФизлиц.Состояние = &Задача");
						   
	Запрос.УстановитьПараметр("Задача",Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьПроизводственныйКалендарь(Выборка.ДатаС,Выборка.ДатаПо)
	КонецЕсли;
	
	индекс = 0;
	Для Каждого строка из ТаблицаОтчета цикл
		
		ФормаПрогрессора.Значение = индекс;
        индекс = индекс + 1;
		
		ПроверитьОтпускНаПравомочность(Строка,Ложь,Ложь);
	КонецЦикла;

	Если ФормаПрогрессора.Открыта() Тогда
		ФормаПрогрессора.Закрыть();
	КонецЕсли; 

	ОбновитьПолеВсехОтпусков();	
	
КонецПроцедуры // ПроверитьОтпуск()

Процедура ПроставитьРешение(ТекущаяСтрока,Решение)

	Если ТекущаяСтрока = Неопределено Тогда 
		Возврат; 
	КонецЕсли;

	ФлагИзменений = Истина;
	
	ТекущаяСтрока.СтрокаТаблицыОтчета.Результат = Решение;	
	Обновить();

КонецПроцедуры


// Процедура добавляет в таблицу отчетов для отправки по эл.почие новый отчет
//
Функция ДобавитьВТаблицуОтчетов(ОбластьОтчета, МассивСОтчетом, Ответственный, Документ)

	новаяСтрокаМассива = МассивСОтчетом.Найти(Ответственный, "Ответственный");
	Если новаяСтрокаМассива = Неопределено Тогда
		Отчет = Новый ТабличныйДокумент;
		новаяСтрокаМассива = МассивСОтчетом.Добавить();
		новаяСтрокаМассива.Ответственный = Ответственный;
		Отчет.Вывести(ОбластьОтчета);
		новаяСтрокаМассива.Отчет = Отчет;
		ТекущийОтчет = новаяСтрокаМассива.Отчет;  
	Иначе
		новаяСтрокаМассива.Отчет.Вывести(ОбластьОтчета);
		ТекущийОтчет = новаяСтрокаМассива.Отчет; 
	КонецЕсли;
	
	новаяСтрокаМассива.МассивДокументов.Добавить(Документ);

	Возврат ТекущийОтчет;
	
КонецФункции

// Функция находит строку в таблице значений "ТаблицаОтчета" содержащую, 
// в колонке "Регистратор" (5) ссылку на параметр "Документ".  
// В случае отсутствия строки с таким параметрам, функция создает новую строку.
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Тип "ТаблицаЗначений", содержит отчет. 
//
Функция ОтчетДляРассылки(Параметр)
	
	МассивСОтчетом = новый ТаблицаЗначений;
	МассивСОтчетом.Колонки.Добавить("Ответственный");
	МассивСОтчетом.Колонки.Добавить("Отчет");
	МассивСОтчетом.Колонки.Добавить("МассивДокументов", Новый ОписаниеТипов("Массив"));
	МассивСОтчетом.Индексы.Добавить("Ответственный");
	
	Макет = ПолучитьМакет("МакетСправки");
	ОбластьШапкиДокумента = Макет.ПолучитьОбласть("Документ");
	ОбластьСтрокиОтпуска  = Макет.ПолучитьОбласть("Отпуск");

	
	Если НЕ ЗначениеЗаполнено(Параметр) ИЛИ Параметр ="Утверждено" Тогда
		
		// вывод Утвержденных документов
		Для каждого строкаРезультатов из ТаблицаПроведенныхДокументов Цикл
			Документ = строкаРезультатов.Документ.ссылка;
			
			ОбластьШапкиДокумента.Параметры.Представление    = Документ;
			ОбластьШапкиДокумента.Параметры.Автор     		 = Документ.Ответственный;
			
			ТекущийОтчет = ДобавитьВТаблицуОтчетов(ОбластьШапкиДокумента, МассивСОтчетом, Документ.Ответственный, Документ);

			
			Для каждого СтрокаТЧ из Документ.Работники Цикл
				ОбластьСтрокиОтпуска.Параметры.ФизЛицо     = СтрокаТЧ.ФизЛицо;	
				ОбластьСтрокиОтпуска.Параметры.ДатаС       = СтрокаТЧ.ДатаНачала;
				ОбластьСтрокиОтпуска.Параметры.ДатаПо      = СтрокаТЧ.ДатаОкончания;
				ОбластьСтрокиОтпуска.Параметры.Решение 	   = НСтр("ru='Утвержден';uk='Затверджено'");
				ОбластьСтрокиОтпуска.Параметры.Комментарий = "";
				ТекущийОтчет.Вывести (ОбластьСтрокиОтпуска);
			КонецЦикла;
						
			
		КонецЦикла;
	КонецЕсли; 
	
	
	
	
	Если НЕ ЗначениеЗаполнено(Параметр) ИЛИ Параметр = "НеРассмотрено" Тогда
	
		ДокументыВТаблицеОтчета = ТаблицаОтчета.Скопировать();
		ДокументыВТаблицеОтчета. Свернуть("Документ");
	
	
		// вывод документов по которым нет решения.
		Для каждого строкаРезультатов из ДокументыВТаблицеОтчета Цикл
			Документ = строкаРезультатов.Документ.ссылка;
			
			ОбластьШапкиДокумента.Параметры.Представление  = Документ;
			ОбластьШапкиДокумента.Параметры.Автор     	   = Документ.Ответственный;
			
			ТекущийОтчет = ДобавитьВТаблицуОтчетов(ОбластьШапкиДокумента, МассивСОтчетом, Документ.Ответственный, Документ);

		
			Для каждого СтрокаТБ из ТаблицаОтчета Цикл
				Если СтрокаТБ.Документ = Документ Тогда
					ОбластьСтрокиОтпуска.Параметры.ФизЛицо = СтрокаТБ.ФизЛицо;	
					ОбластьСтрокиОтпуска.Параметры.ДатаС   = СтрокаТБ.ДатаС;
					ОбластьСтрокиОтпуска.Параметры.ДатаПо  = СтрокаТБ.ДатаПо;
					
					Результат = НСтр("ru='Нет решения';uk='Немає рішення'");
					Если СтрокаТБ.Результат = "Отклонить" Тогда 
							Результат = НСтр("ru='Отклонить';uk='Відхилити'");
					КонецЕсли;
						
					Если СтрокаТБ.Результат = "Утвердить" Тогда 
							Результат = НСтр("ru='Утвердить';uk='Затвердити'");
					КонецЕсли;
	
					ОбластьСтрокиОтпуска.Параметры.Решение = Результат;
					ОбластьСтрокиОтпуска.Параметры.Комментарий = СтрокаТБ.Комментарий;

					ТекущийОтчет.Вывести (ОбластьСтрокиОтпуска);
				КонецЕсли;
			КонецЦикла;
	
	       
	
	
      КонецЦикла;
	КонецЕсли; 
	
	Возврат МассивСОтчетом;

КонецФункции // ОтчетДляРассылки()

// Процедура отправляет оповещения по электронной почте.
//
Процедура ОповеститьПоПочте(Параметр = "")

	ТаблицаОтчетов = ОтчетДляРассылки(Параметр);
	
	Если Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
		
		МассивПисемДляОтправки = Новый Массив;
		ЕстьПисьмаБезПолучателей = Ложь;
		
		Для каждого СтрокаТаблицы Из ТаблицаОтчетов Цикл
			
			ИмяТемпФайла = ПолучитьИмяВременногоФайла();
			СтрокаТаблицы.Отчет.Записать(ИмяТемпФайла, ТипФайлаТабличногоДокумента.HTML);
			ТекстХТМЛ = Новый ТекстовыйДокумент;
			ТекстХТМЛ.Прочитать(ИмяТемпФайла);
			ТекстХТМЛ = ТекстХТМЛ.ПолучитьТекст();
			
			// Вставим гиперссылки
			Для каждого Документ Из СтрокаТаблицы.МассивДокументов Цикл
				ИскомыйТекст = Строка(Документ);
				НачалоТекста = Найти(ТекстХТМЛ, ИскомыйТекст);
				Если НачалоТекста > 0 Тогда
					ТекстХТМЛ = Сред(ТекстХТМЛ, 1, НачалоТекста - 1) + "<A href=""" + Строка(Документ.УникальныйИдентификатор()) + """>" + ИскомыйТекст + "</A>" + Сред(ТекстХТМЛ, (НачалоТекста + СтрДлина(ИскомыйТекст)));
				КонецЕсли; 
			КонецЦикла; 
			
			СтруктураНовогоПисьма = Новый Структура;
			
			СтруктураНовогоПисьма.Вставить("Тема", "Оповещение об утверждении отпусков.");
			СтруктураНовогоПисьма.Вставить("Тело", ТекстХТМЛ);
			СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.HTML);
			
			Адрес = УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(СтрокаТаблицы.Ответственный);
			Если ЗначениеЗаполнено(Адрес) Тогда
				СписокКому = Новый СписокЗначений;
				СписокКому.Добавить(Адрес, Строка(СтрокаТаблицы.Ответственный));
				СтруктураНовогоПисьма.Вставить("Кому", СписокКому);
				СтруктураВозврата = УправлениеЭлектроннойПочтой.НаписатьПисьмо(глЗначениеПеременной("глТекущийПользователь"), СтруктураНовогоПисьма,,,,,, Истина, Ложь);
				Если ТипЗнч(СтруктураВозврата) = Тип("Строка") Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтруктураВозврата,, ("Оповещение " + Строка(СтрокаТаблицы.Ответственный) + НСтр("ru=' не создано';uk=' не створено'")));
				ИначеЕсли ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
					МассивПисемДляОтправки.Добавить(СтруктураВозврата.ПисьмоСсылка);
				Иначе
					Прервать;
				КонецЕсли; 
			Иначе
				Если УправлениеЭлектроннойПочтой.НаписатьПисьмо(глЗначениеПеременной("глТекущийПользователь"), СтруктураНовогоПисьма,,,,,, Истина, Истина) = Неопределено Тогда
					Прервать;
				КонецЕсли; 
				ЕстьПисьмаБезПолучателей = Истина;
			КонецЕсли;
			
		КонецЦикла; 
		
		Если МассивПисемДляОтправки.Количество() > 0 Тогда
			УправлениеЭлектроннойПочтой.ОтправитьПисьма(МассивПисемДляОтправки, глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"));
		КонецЕсли; 
		
		Если ЕстьПисьмаБезПолучателей Тогда
			Сообщить(НСтр("ru='У некоторых пользователей не указаны адреса эл.почты."
"Предлагается указать и отправить письма самостоятельно.';uk='У деяких користувачів не вказані адреси ел.пошти."
"Пропонується вказати і відправити листи самостійно.'"));
		КонецЕсли; 
		
	Иначе
		
		Почта = Новый Почта;
		Попытка
			Почта.Подключиться();
		Исключение
		    Предупреждение(НСтр("ru='Не удалось подключиться к почтовому клиенту!';uk='Не вдалося підключитися до поштового клієнта!'"));
			Возврат;
		КонецПопытки;
		
		Для каждого СтрокаТаблицы Из ТаблицаОтчетов Цикл
			
			ИмяТемпФайла = РаботаСФайлами.ПолучитьИмяКаталога(глЗначениеПеременной("глТекущийПользователь")) + "\Утверждение отпусков.htm";
			СтрокаТаблицы.Отчет.Записать(ИмяТемпФайла, ТипФайлаТабличногоДокумента.HTML);
			
			Адрес = УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(СтрокаТаблицы.Ответственный);
			Если ЗначениеЗаполнено(Адрес) Тогда
				
				НовоеПисьмо = Новый ПочтовоеСообщение;
				
				НовоеПисьмо.Тема = "Оповещение по решению кадровых изменений.";
				НовоеПисьмо.Текст = "Решения по кадровым изменениям находятся во вложении письма.";
				НовоеПисьмо.Получатели.Добавить(Адрес);
				НовоеПисьмо.Вложения.Добавить(ИмяТемпФайла);
				
				Почта.Послать(НовоеПисьмо);
				
				// Удалим сохраненный файл
				Файл = Новый Файл(ИмяТемпФайла);
				Если Файл.Существует() Тогда
					УдалитьФайлы(ИмяТемпФайла);
				КонецЕсли;
				
			Иначе
				Сообщить("Адресату " + Строка(СтрокаТаблицы.Ответственный) + НСтр("ru=' письмо не отправлено, не найден адрес электронной почты.';uk=' лист не відправлений, не знайдена адреса електронної пошти.'"));
			КонецЕсли;
			
		КонецЦикла; 
		
		Почта.Отключиться();
		
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "При открытии" основной Формы. Устанавливает ряд значений "по умолчанию". 
// Создает таблицы значений "ТаблицаОтчета", "ТаблицаВсехОтпусков", "ТаблицаОбщегоГрафика".
// Вызывает процедуру "ОбновитьДанные()".
//
Процедура ПриОткрытии()
	
	// настройки по умолчанию
	// диаграмма Ганта
	СерииГантаРеализованные = ложь;
	СерииГантаСогласованные = ложь;
	ФлажокЛегенды = истина;
	ФлагИзменений = ложь;
	
	// установка квоты
	//! как развитие предусмотреть загрузку квоты из файла или конфигурации
	квота = 30;
	
	// флаг добавления текста ошибки при проверке отпуска в колонку "комментарий" таблицы результатов проверки "ТаблицаОтчета"
	// истина - добавляем текс ошибки
	// ложь - не добавляем
	ПриПроверке = истина;
	
	// показ выбранного графика
	ЭлементыФормы.ОбщийГрафикЛинии.Видимость = ложь;
	ЭлементыФормы.ГрафикОбщий.Видимость = ложь;
	Если ПереключательГрафика = 0 Тогда  
		ЭлементыФормы.ГрафикОбщий.Видимость = истина; 
	ИначеЕсли ПереключательГрафика = 1 Тогда  
		ЭлементыФормы.ОбщийГрафикЛинии.Видимость = истина; 
	КонецЕсли;
	
	// создадние таблицы значений "ТаблицаОбщегоГрафика", которая будет использоваться
	// для построения графика
	ТаблицаОбщегоГрафика = Новый ТаблицаЗначений;
	
	// Созхдание Таблицы для графиков
	ТаблицаГрафика = новый ТаблицаЗначений;
	
	ТаблицаПроведенныхДокументов = новый ТаблицаЗначений;
	ТаблицаПроведенныхДокументов.Колонки.Добавить("Документ");
	
	// Создать таблицу отчета.
	ТаблицаОтчета = новый ТаблицаЗначений;
	ТаблицаОтчета.Колонки.Добавить("Документ");
	ТаблицаОтчета.Колонки.Добавить("ФизЛицо");
	ТаблицаОтчета.Колонки.Добавить("ДатаС");
	ТаблицаОтчета.Колонки.Добавить("ДатаПо");
	ТаблицаОтчета.Индексы.Добавить("Документ");
	
	// Создать таблицу значений  "ТаблицаОтчета", в которой будет содержаться результаты принятия решения
	Запрос3 = Новый Запрос;
	Запрос3.Текст =
	"ВЫБРАТЬ
	|	СборДанныхДляПланированияЗанятостиФизлиц.Документ КАК Документ,
	|	СборДанныхДляПланированияЗанятостиФизлиц.ФизЛицо КАК ФизЛицо,
	|	СборДанныхДляПланированияЗанятостиФизлиц.Период КАК ДатаС,
	|	СборДанныхДляПланированияЗанятостиФизлиц.ДатаОкончания КАК ДатаПо
	|ИЗ
	|	РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК СборДанныхДляПланированияЗанятостиФизлиц
	|ГДЕ
	|	СборДанныхДляПланированияЗанятостиФизлиц.Состояние = &Задача
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо
	|ИТОГИ
	|	МИНИМУМ(ДатаС),
	|	МАКСИМУМ(ДатаПо)
	|ПО
	|	ОБЩИЕ";
	
	Запрос3.УстановитьПараметр("Задача", Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
	
	ТаблицаОтчета = Запрос3.Выполнить().Выгрузить();
	
	// Добавить в ТаблицаОтчета колонку комментарий
	
	// ПроверитьОтпуск количество отпускников.
	Если ТаблицаОтчета.Количество() = 0 Тогда 
		// выход
		Сообщить(НСтр("ru='Нет документов на утверждение';uk='Немає документів на затвердження'")); 
		Возврат;
	КонецЕсли;
	
	// Установить настройку периода по умолчанию 
	мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	
	// установим интервал планирования
	ДатаМин  = ТаблицаОтчета[0].ДатаС;
	ДатаМакс = ТаблицаОтчета[0].ДатаПо;

	ТаблицаОтчета.Удалить(ТаблицаОтчета[0]);
	ТаблицаОтчета.Колонки.Добавить("Результат",ТипСтрока);
	ТаблицаОтчета.Колонки.Добавить("Комментарий",ТипСтрока);
	ТаблицаОтчета.ЗаполнитьЗначения(НСтр("ru='Нет решения';uk='Немає рішення'"),"Результат");
	
	ДатаМинГанта = ДатаМин;
	ДатаМаксГанта = ДатаМакс;

	// Установить настройку периода по умолчанию
	мНастройкаПериодаГанта.ВариантНастройки = ВариантНастройкиПериода.Период;
	
	// установим даты для быстрой установки дат в диаграмме Ганта
	Дата1 = ДатаМинГанта;
	Дата2 = ДатаМаксГанта;
	
	ОбновитьПолеВсехОтпусков();
	
	ОбновитьПолеДокументов();
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события "ПередЗакрытием" основной Формы. 
// Задает вопрос о подтверждении закрытия формы. 
// 
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ФлагИзменений Тогда
		ответ = Вопрос(НСтр("ru='После закрытия формы все промежуточные данные будут утеряны. Закрыть форму?';uk='Після закриття форми всі проміжні дані будуть загублені. Закрити форму?'"),РежимДиалогаВопрос.ДаНетОтмена,,,);
		Если ответ = КодВозвратаДиалога.Да Тогда Отказ = Ложь; КонецЕсли;
		Если ответ = КодВозвратаДиалога.Нет Тогда Отказ = Истина;КонецЕсли;
		Если ответ = КодВозвратаДиалога.Отмена Тогда Отказ = Истина;КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ДЕЙСТВИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик события "Действие" элемента панели "Настройка" командной панели "КоманднаяПанельФормы".
// Отображает форму с настройками.
//
Процедура КоманднаяПанельФормыНастройка(Кнопка)
	
	ТекущийКвота = Квота;
	ТекущийСерииГантаСогласованные = СерииГантаСогласованные;
	ТекущийСерииГантаРеализованные = СерииГантаРеализованные;
	ТекущийПереключательГрафика = ПереключательГрафика;	   
		   
	 Форма=ПолучитьФорму("ФормаНастройкиГрафика",ЭтаФорма);
	 Форма.открыть();

				
КонецПроцедуры // КоманднаяПанельФормыНастройка(Кнопка)

////////////////////////////////////////////////////////////////////////////////
// т.п. "Все запланированные отпуска"

// Обработчик события "Действие" элемента панели "Разрешить" командной панели "КоманднаяПанельОтпусков".
// Присваивает значение "Утвердить" ячейки "Результат", что соответсвует принятию положительного решения
// для отпуска соответствующего отпуска текущей строке в интерфейсном объекте "ТаблицаВсехОтпусков".
//  
Процедура КоманднаяПанельОтпусковРазрешить(Кнопка)
	
	ПроставитьРешение(ЭлементыФормы.ТаблицаВсехОтпусков.ТекущаяСтрока,"Утвердить")	
	
КонецПроцедуры // КоманднаяПанельОтпусковРазрешить(Кнопка)

// Обработчик события "Действие" элемента панели "Отклонить" командной панели "КоманднаяПанельОтпусков".
// Присваивает значение "Отклонить" ячейки "Результат", что соответсвует принятию отрицательного решения
// для отпуска соответствующего отпуска текущей строке в интерфейсном объекте "ТаблицаВсехОтпусков".
// 
Процедура КоманднаяПанельОтпусковОтклонить(Кнопка)
	
	ПроставитьРешение(ЭлементыФормы.ТаблицаВсехОтпусков.ТекущаяСтрока,"Отклонить")	
	
КонецПроцедуры // КоманднаяПанельОтпусковОтклонить(Кнопка)

// Обработчик события "Действие" элемента панели "ПроверитьОтпуск" командной панели "КоманднаяПанель1". 
// Проверяет все отпуска не проведенных документов на правомочность.
//
Процедура КоманднаяПанельОтпусковПроверить(Кнопка)
	ПроверитьОтпуск()	
КонецПроцедуры // КоманднаяПанельФормыПроверить()

// Обработчик события "Действие" элемента панели "Согласовать" командной панели "КоманднаяПанельФормы". 
// Проверяет все отпуска не проведенных документов на правомочность
// и если документ по результатам проверке рекомендован к согласованию 
// присваивает значение "Утвердить" ячейки "Результат", что соответсвует принятию положительного решения
// для проверяемого отпуска.
//  
//
Процедура КоманднаяПанельОтпусковСогласовать(Кнопка)
	
	// согласуем
	Для каждого строка из ТаблицаОтчета цикл
		Если строка[4] = "РекомендуюУтвердить" Тогда 
			строка[4] = "Утвердить" 
		КонецЕсли;	
    КонецЦикла;
	
	Обновить();

 КонецПроцедуры // КоманднаяПанельФормыСогласовать(Кнопка)

// Обработчик события "Действие" элемента панели "ПровестиВсе" командной панели "КоманднаяПанельОтпусков".
// С документами, в которых все отпуска утверждены, делает следующее.
// Реквизиту документа "Решение" присваивает значение "Перечисления.СостоянияОбъектов.Утвержден"
// Записывает документ с режимом записи "проведение". 
//
Процедура КоманднаяПанельОтпусковПровестиВсе(Кнопка)
	ПровестиВсе();	
КонецПроцедуры // КоманднаяПанельОтпусковПровестиВсе()

// Обработчик события "Действие" элемента панели "ОбновитьДанные" командной панели "КоманднаяПанельОтпусков".
// Вызывает процедуру "Обновить данные"
//
Процедура КоманднаяПанельОтпусковОбновитьДанные(Кнопка)
	ОбновитьДанные()
КонецПроцедуры // КоманднаяПанельФормыОбновитьДанные()

////////////////////////////////////////////////////////////////////////////////
// диаграммы

// Обработчик события "Действие" элементе панели "ОбновитьГрафик" командной панели "КоманднаяПанель4".  
// Обновляет данные графика, отображает выбранный вид графика.
//
Процедура КоманднаяПанельДиаграммыОбновитьГрафик(Элемент)
	ПостройкаГрафика()	
КонецПроцедуры // КнопкаВыполнитьНажатие(Элемент)

// Обработчик события "Действие" элемента панели "ОбновитьДиаграмму" командной панели "КоманднаяПанель6". 
// Построение диаграммы Ганта.
//
Процедура КоманднаяПанельДиаграммыГантаОбновитьДиаграмму(Кнопка) 
	
	ДиаграммаГанта();
	
КонецПроцедуры // КоманднаяПанель6ОбновитьДиаграмму(Кнопка)

////////////////////////////////////////////////////////////////////////////////
// т.п. "Документы"

// Обработчик события "Действие" элемента панели "УтвердитьДокумент" командной панели "КоманднаяПанельДокументов".
// С текущим документом делает следующее.
// Реквизиту документа "Решение" присваивает значение "Перечисления.СостоянияОбъектов.Утвержден"
// Записывает документ с режимом записи "проведение". 
//
Процедура КоманднаяПанельДокументовУтвердитьДокумент(Кнопка)
	
	Если ЭлементыФормы.ТаблицаДокументов.ТекущиеДанные = Неопределено тогда возврат КонецЕсли;
	
	Документ = ЭлементыФормы.ТаблицаДокументов.ТекущиеДанные.Документ;
	
	Док = Документ.ПолучитьОбъект(); 
	Док.Решение=Перечисления.СостоянияОбъектов.Утвержден;	
	Док.Записать(РежимЗаписиДокумента.Проведение);
	
	СтрокаПроведенных = ТаблицаПроведенныхДокументов.Добавить();
	СтрокаПроведенных.Документ = Док; 
			
	ОбновитьДанные();
	ОбновитьПолеДокументов()
	
КонецПроцедуры

// Обработчик события "Действие" элемента панели "Разрешить" командной панели "КоманднаяПанель7".
// Вызывает процедуру ОтметитьСогласование с параметрами текущих данных 
// в интерфейсных элементах - таблицах: "ТаблицаДокументов" и "ТаблицаОтпусков"
//
Процедура КоманднаяПанельОтпусковДокументаРазрешить(Элемент)
	
	ПроставитьРешение(ЭлементыФормы.ТаблицаОтпусковДокумента.ТекущаяСтрока,"Утвердить");

КонецПроцедуры // КоманднаяПанельОтпусковДокументаРазрешить(Элемент)

// Обработчик события "Действие" элемента панели "Отклонить" командной панели "КоманднаяПанель7".
// Вызывает процедуру ОтметитьНЕСогласование с параметрами текущих данных 
// в интерфейсных объектах - таблицах: "ТаблицаДокументов" и "ТаблицаОтпусков"
//
Процедура КоманднаяПанельОтпусковДокументаОтклонить(Элемент)
	
	ПроставитьРешение(ЭлементыФормы.ТаблицаОтпусковДокумента.ТекущаяСтрока,"Отклонить");
	
КонецПроцедуры // КоманднаяПанельОтпусковДокументаОтклонить(Элемент)

// Обработчик события "Действие" элемента панели "ПроверитьОтпуск" командной панели "КоманднаяПанель1". 
// Проверяет все отпуска не проведенных документов на правомочность.
//
Процедура КоманднаяПанельОтпусковДокументаПроверить(Кнопка)
	ПроверитьОтпуск()	
КонецПроцедуры // КоманднаяПанельОтпусковДокументаПроверить()

// Обработчик события "Действие" элемента панели "Согласовать" командной панели "КоманднаяПанельФормы". 
// Проверяет все отпуска не проведенных документов на правомочность
// и если документ по результатам проверке рекомендован к согласованию 
// присваивает значение "Утвердить" ячейки "Результат", что соответсвует принятию положительного решения
// для проверяемого отпуска.
//  
//
Процедура КоманднаяПанельОтпусковДокументаСогласовать(Кнопка)
		
	
	// согласуем
	Для каждого строка из ТаблицаОтчета цикл
	Если строка[4] = "РекомендуюУтвердить" Тогда строка[4] = "Утвердить" КонецЕсли;	
    КонецЦикла;
	
	Обновить();

КонецПроцедуры

// Обработчик события "Действие" элемента панели "ПровестиВсе" командной панели "КоманднаяПанельОтпусковДокумента".
// С документами, в которых все отпуска утверждены, делает следующее.
// Реквизиту документа "Решение" присваивает значение "Перечисления.СостоянияОбъектов.Утвержден"
// Записывает документ с режимом записи "проведение". 
//
Процедура КоманднаяПанельОтпусковДокументаПровестиВсе(Кнопка)
	ПровестиВсе();	
КонецПроцедуры // КоманднаяПанельОтпусковДокументаПровестиВсе()

// Обработчик события "Действие" элемента панели "ОбновитьДанные" командной панели "КоманднаяПанельОтпусковДокумента".
// Вызывает процедуру "Обновить данные"
//
Процедура КоманднаяПанельОтпусковДокументаОбновитьДанные(Кнопка)
	ОбновитьДанные()
КонецПроцедуры // КоманднаяПанельФормыОбновитьДанные1()

////////////////////////////////////////////////////////////////////////////////
// справки

// Обработчик события "Действие" элемента панели "Справка" командной панели "КоманднаяПанель5".
// Создает в интерфейсном объекте "ПолеСправки" справку на правомочность для отпуска,
// либо содержащегося в текущей строке интерфейсного объекта "ТаблицаОтпусков",
// либо содержащегося в текущей строке интерфейсного объекта "ТаблицаВсехОтпусков".
//
Процедура КоманднаяПанельСправкиСправка(Кнопка)
	
	ЭлементыФормы.ПолеСправки.Очистить();
	
	Если ЭлементыФормы.ПанельОтпусков.ТекущаяСтраница.Имя = "Страница1" Тогда
		ТекущаяСтрока = ЭлементыФормы.ТаблицаОтпусковДокумента.ТекущаяСтрока;
	КонецЕсли;		
	
	Если ЭлементыФормы.ПанельОтпусков.ТекущаяСтраница.Имя = "Страница2" Тогда
		ТекущаяСтрока = ЭлементыФормы.ТаблицаВсехОтпусков.ТекущаяСтрока;
	КонецЕсли;	
	
	Если ТекущаяСтрока = Неопределено Тогда Возврат КонецЕсли;
	
	СтрокаТекущегоОтпуска = ТекущаяСтрока.СтрокаТаблицыОтчета;
	
	ПроверитьОтпускНаПравомочность(СтрокаТекущегоОтпуска);
	ТекущаяСтрока.Комментарий = СтрокаТекущегоОтпуска.Комментарий;  
	Обновить();	
	
		
КонецПроцедуры // КоманднаяПанельСправкиСправка(Кнопка)

// Обработчик события "Действие" элемента панели "СправкаОтпускников" командной панели "КоманднаяПанельСправки".
// Вызывает процедуру построения Справки отпускников.
//
Процедура КоманднаяПанельСправкиСправкаОтпускников(Кнопка)
		
	 ПостроениеОбщейСправки()
						  
КонецПроцедуры

// Обработчик события "Действие" элемента панели "ОбщаяСправка" командной панели "КоманднаяПанель5".
// Формирует отчет по результатам принятия решений.
//
Процедура КоманднаяПанельСправкиОбщаяСправка(Кнопка)
		
	   ПостроениеОтчета()
	   
КонецПроцедуры // КоманднаяПанель5ОбщаяСправка(Кнопка)

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДИАГРАММ	

// Обработчик события "Выбор" иттерфейсного объекта "ГрафикОбщий".
// Осуществляет выбор даты для диаграммы Ганта.
//
Процедура ГрафикОбщийВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
		
		Типсерии = ЭлементыФормы.ГрафикОбщий.Серии.Получить(1);
		Если  Тип(ЗначениеДиаграммы) = тип(типсерии) тогда Возврат КонецЕсли;
		
		Дата1 = Дата2;
		
		строкаДаты = ЗначениеДиаграммы.точка.текст;
		Дата2 = Дата(строкаДаты);
		
		ДатаМинГанта  = ?(Дата2 < Дата1,Дата2,Дата1);
		ДатаМаксГанта = ?(Дата2 > Дата1,Дата2,Дата1)
		
КонецПроцедуры // ГрафикОбщийВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)

// Обработчик события "Выбор" иттерфейсного объекта "ОбщийГрафикЛинии".
// Осуществляет выбор даты для диаграммы Ганта.
//
Процедура ОбщийГрафикЛинииВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	 типсерии = ЭлементыФормы.ОбщийГрафикЛинии.Серии.Получить(1);
		Если  Тип(ЗначениеДиаграммы)=тип(типсерии) тогда Возврат КонецЕсли;
		
		Дата1 = Дата2;
		
		строкаДаты=ЗначениеДиаграммы.точка.текст;
		Дата2 = Дата(строкаДаты);
		
		ДатаМинГанта   = ?(Дата2<Дата1,Дата2,Дата1);
		ДатаМаксГанта  = ?(Дата2>Дата1,Дата2,Дата1);

	
	
КонецПроцедуры // ОбщийГрафикЛинииВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ

// Обработчик события "Выбор" интерфейсного элемента "ТаблицаВсехОтпусков".
// Создает в интерфейсном объекте "ПолеСправки" справку на правомочность 
// для отпуска, содержащегося в текущей строке интерфейсного объекта "ТаблицаВсехОтпусков".
//
Процедура ТаблицаВсехОтпусковВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ФлагИзменений = истина;
	
	ЭлементыФормы.ПолеСправки.Очистить();
	
	СтрокаТекущегоОтпуска = ВыбраннаяСтрока.СтрокаТаблицыОтчета;
	
	ПроверитьОтпускНаПравомочность(СтрокаТекущегоОтпуска);
	ВыбраннаяСтрока.Комментарий = СтрокаТекущегоОтпуска.Комментарий;
	ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Страница2;

	Обновить();

			
КонецПроцедуры // ТаблицаВсехОтпусковВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

// Обработчик события "При активации строки" интерфейсного объекта "ТаблицаВсехОтпусков".
Процедура ТаблицаВсехОтпусковПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
	    Возврат
	КонецЕсли;
	
	Документ = Элемент.ТекущиеДанные.СтрокаТаблицыОтчета.Документ;
	КомментарийАвтора = "" + Документ.Ответственный 	+ ":  "	+ Документ.Комментарий; 
	
КонецПроцедуры

// Обработчик события "При выводе строки" интерфейсного объекта "ТаблицаВсехОтпусков".
// Осуществляет выбор картинки выводимой строки.
//
Процедура ТаблицаВсехОтпусковПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
		
	строкаВсех = Данныестроки;
	Если  Данныестроки = Неопределено Тогда 
		возврат 
	КонецЕсли;
	
	строка = строкаВсех[3];
	картинка = 1;
	
	
	Если строка.Результат = "Отклонить" Тогда картинка = 4;КонецЕсли;
	Если строка.Результат = "Нет решения" Тогда картинка = 0;КонецЕсли;
	Если строка.Результат = "Утвердить" Тогда картинка = 3;КонецЕсли;
	Если строка.Результат = "РекомендуюУтвердить" Тогда картинка = 1;КонецЕсли;
	Если строка.Результат = "РекомендуюОтклонить" Тогда картинка = 2;КонецЕсли;
	
	
	ОформлениеСтроки.Ячейки.Рез.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.Рез.ИндексКартинки = картинка;
	
КонецПроцедуры // ТаблицаВсехОтпусковПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

// Обработчик события "При Окончании Редактирования" интерфейсного элемента "ТаблицаВсехОтпусков".
// Сохраняет написанный комментарий в ТаблицеРезультатов.
// 
Процедура ТаблицаВсехОтпусковПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
			
	РедактируемаяСтрока = ЭлементыФормы.ТаблицаВсехОтпусков.ТекущаяСтрока;
	РедактируемаяСтрока.СтрокаТаблицыОтчета.Комментарий = РедактируемаяСтрока.Комментарий;
		
КонецПроцедуры // ТаблицаВсехОтпусковПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

// Обработчик события "При активации строки" интерфейсного объекта "ТаблицаДокументов".
// Проверяет наличие записей об отпусках в "ТаблицеОтчета", соответсвующих табличной части
// текущего документа в "ТаблицаДокументов".
//
Процедура ТаблицаДокументовПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбработчикОжиданияТаблицаДокументовПриАктивизацииСтроки", 0.1, Истина);	 	
    
КонецПроцедуры // ТаблицаДокументовПриАктивизацииСтроки(Элемент)

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля ТаблицаДокументов
//
Процедура ОбработчикОжиданияТаблицаДокументовПриАктивизацииСтроки()
    
    Если ЭлементыФормы.ТаблицаДокументов.ТекущаяСтрока = Неопределено Тогда
	    Возврат
	КонецЕсли;
	
	Документ = ЭлементыФормы.ТаблицаДокументов.ТекущиеДанные.Документ;
	
	// строим таблицу
	ТаблицаОтпусковДокумента.Очистить();	
	МассивСтрок = ТаблицаОтчета.НайтиСтроки(Новый Структура("Документ",Документ));
	Для каждого строка из МассивСтрок Цикл
		ОтпускНаЭкране = ТаблицаОтпусковДокумента.Добавить();
		ОтпускНаЭкране.ФизЛицо = строка.ФизЛицо; 
		ОтпускНаЭкране.Комментарий = строка.Комментарий;
		ОтпускНаЭкране.СтрокаТаблицыОтчета = строка;
	КонецЦикла;
	
	КомментарийАвтора = "" + Документ.Ответственный 	+ ":  "	+ Документ.Комментарий; 	

КонецПроцедуры // ОбработчикОжиданияТаблицаДокументовПриАктивизацииСтроки

 
// Обработчик события "Выбор" интерфейсного объекта "ТаблицаОтпусков".
// Осуществляет выбор картинки выводимой строки.
//
Процедура ТаблицаОтпусковДокументаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ФлагИзменений = истина;
	
	ЭлементыФормы.ПолеСправки.Очистить();
	
	СтрокаТекущегоОтпуска = ВыбраннаяСтрока.СтрокаТаблицыОтчета;
	
	ПроверитьОтпускНаПравомочность(СтрокаТекущегоОтпуска);
	ВыбраннаяСтрока.Комментарий = СтрокаТекущегоОтпуска.Комментарий;
	ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Страница2;

	Обновить();

КонецПроцедуры

// Обработчик события "При выводе строки" интерфейсного объекта "ТаблицаОтпусков".
// Осуществляет выбор картинки выводимой строки.
//
Процедура ТаблицаОтпусковДокументаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если Данныестроки.СтрокаТаблицыОтчета = Неопределено или ТаблицаОтчета.Индекс(Данныестроки.СтрокаТаблицыОтчета) = -1 Тогда 
		возврат 
	КонецЕсли;
	
	Результат = ДанныеСтроки.СтрокаТаблицыОтчета.Результат;
	
	НомерКартинки = 0;
	Если Результат = "Отклонить" Тогда 
		НомерКартинки = 4
	ИначеЕсли Результат = "Нет решения" Тогда 
		НомерКартинки = 0
	ИначеЕсли Результат = "РекомендуюУтвердить" Тогда 
		НомерКартинки = 1
	ИначеЕсли Результат = "РекомендуюОтклонить" Тогда 
		НомерКартинки = 2
	ИначеЕсли Результат = "Утвердить" Тогда 
		НомерКартинки = 3
	КонецЕсли;
	ОформлениеСтроки.Ячейки.Рез.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.Рез.ИндексКартинки = НомерКартинки;
	
КонецПроцедуры // ТаблицаОтпусковПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

// Обработчик события "ПриОкончанииРедактирования" интерфейсного объекта "ТаблицаОтпусковДокумента".
// Сохраняет введеный комментарий в таблицу отчета.
//
Процедура ТаблицаОтпусковДокументаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РедактируемаяСтрока = ЭлементыФормы.ТаблицаОтпусковДокумента.ТекущаяСтрока;
	РедактируемаяСтрока.СтрокаТаблицыОтчета.Комментарий = РедактируемаяСтрока.Комментарий;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ прочих э.ф.

// Обработчик события "ПриИзменении" интерфейсного объекта "флажекЛегенды".
// Управляет отображением легенды в графиках.
//
Процедура ФлажокЛегендыПриИзменении(Элемент)
	ЭлементыФормы.ГрафикОбщий.ОтображатьЛегенду = Элемент.Значение;
	ЭлементыФормы.ОбщийГрафикЛинии.ОтображатьЛегенду = Элемент.Значение
КонецПроцедуры

// Обработчик изменения интервала Диаграммы.
// 
//
Процедура ВыбПериодНажатие(Элемент)
	
	мНастройкаПериода.УстановитьПериод(ДатаМин, ?(ДатаМакс='0001-01-01', ДатаМакс, КонецДня(ДатаМакс)));
	
	Если мНастройкаПериода.Редактировать() Тогда
		ДатаМин		= мНастройкаПериода.ПолучитьДатуНачала();
		ДатаМакс	= мНастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	
	Если ЭлементыФормы.ГрафикОбщий.КоличествоТочек > 0
	 ИЛИ ЭлементыФормы.ОбщийГрафикЛинии.КоличествоТочек > 0 Тогда
	
		ПостройкаГрафика();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик изменения интервала ДиаграммыГанта.
// 
//
Процедура ВыбПериодНажатие1(Элемент)
	
	мНастройкаПериодаГанта.УстановитьПериод(ДатаМинГанта, ?(ДатаМаксГанта='0001-01-01', ДатаМаксГанта, КонецДня(ДатаМаксГанта)));
	
	Если мНастройкаПериодаГанта.Редактировать() Тогда
		ДатаМинГанта	= мНастройкаПериодаГанта.ПолучитьДатуНачала();
		ДатаМаксГанта	= мНастройкаПериодаГанта.ПолучитьДатуОкончания();
	КонецЕсли;
	
	Если ЭлементыФормы.ДиаграммаГанта1.Точки.Количество() > 0 Тогда
		ДиаграммаГанта();
	КонецЕсли;

КонецПроцедуры

// Обработчик события "Действие" элемента панели "КоманднаяПанельСправки" командной панели "ПоВсемДокументам". 
// Вызывает процедуру построения отчета.
//
Процедура КоманднаяПанельСправкиПоВсемДокументам(Кнопка)
	
	ОповеститьПоПочте();
	
КонецПроцедуры // КоманднаяПанельСправкиПоВсемДокументам

// Обработчик события "Действие" элемента панели "КоманднаяПанельСправки" командной панели "ПоУтвежденнымДокументам". 
// Вызывает процедуру построения отчета.
//
Процедура КоманднаяПанельСправкиПоУтвежденнымДокументам(Кнопка)
	
	
	 ОповеститьПоПочте("Утверждено");

	
КонецПроцедуры // КоманднаяПанельСправкиПоУтвежденнымДокументам

// Обработчик события "Действие" элемента панели "КоманднаяПанельСправки" командной панели "ПоНеУтвержденнымДокументам". 
// Вызывает процедуру построения отчета.
//
Процедура КоманднаяПанельСправкиПоНеУтвержденнымДокументам(Кнопка)
	
	 ОповеститьПоПочте("НеРассмотрено");

	
КонецПроцедуры  // КоманднаяПанельСправкиПоНеУтвержденнымДокументам

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// создадние таблицы значений "ТаблицаВсехОтпусков", которая будет использоваться
// для отображения всех отпусков в интерфейсном объекте ЭлементыФормыформ.ТаблицаВсехОтпусков.
ТаблицаВсехОтпусков.Колонки.Добавить("СтрокаТаблицыОтчета");
ТаблицаОтпусковДокумента.Колонки.Добавить("СтрокаТаблицыОтчета");

ТипСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0);

мДлинаСуток = 86400;

мНастройкаПериода = Новый НастройкаПериода;
мНастройкаПериодаГанта = Новый НастройкаПериода;
