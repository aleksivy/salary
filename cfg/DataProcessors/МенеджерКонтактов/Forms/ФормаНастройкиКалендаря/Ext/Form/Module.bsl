
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура управляет доступностью реквизитов ограничения интервала показа календаря
//
Процедура ДоступностьПараметровОграниченияВремени()
	
	ЭлементыФормы.ОграничитьВремяС.Доступность = ОграничитьВремя;
	ЭлементыФормы.ОграничитьВремяПо.Доступность = ОграничитьВремя;
	
КонецПроцедуры

// Процедура заполняет данные построителя отчета
// для выбора списка пользователей календаря
Процедура ЗаполнитьПостроительОтчета();
	ПостроительОтчета.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ответственный
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|{ГДЕ
	|	Пользователи.Ссылка КАК Ответственный}";
	
	Если ПостроительОтчета.Отбор.Найти("Ответственный") = Неопределено Тогда
		
		ПостроительОтчета.Отбор.Добавить("Ответственный", "Ответственный", "Ответственный");
		
	КонецЕсли;
	
	ПостроительОтчета.Отбор["Ответственный"].Использование = Истина;
	ПостроительОтчета.Отбор["Ответственный"].ВидСравнения  = ВидСравнения.ВСписке;
	ПостроительОтчета.Отбор["Ответственный"].Значение      = ПользовательКалендаря.Скопировать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	СохраненныеЗначения = ВосстановитьЗначение("КалендарьПользователя");
	Если СохраненныеЗначения <> Неопределено И ТипЗнч(СохраненныеЗначения) = Тип("Структура") Тогда
		СохраненныеЗначения.Свойство("КоличествоДнейНаЗакладкеДень", КоличествоДнейНаЗакладкеДень);
		СохраненныеЗначения.Свойство("КоличествоДнейНедели", КоличествоДнейНедели);
		СохраненныеЗначения.Свойство("ОтображатьЗапланированныеСобытия", ОтображатьЗапланированныеСобытия);
		СохраненныеЗначения.Свойство("ТипСобытияКалендаря", ТипСобытияКалендаря);
		СохраненныеЗначения.Свойство("ОграничитьВремя",  ОграничитьВремя); 
		СохраненныеЗначения.Свойство("ОграничитьВремяС",  ОграничитьВремяС); 
		СохраненныеЗначения.Свойство("ОграничитьВремяПо", ОграничитьВремяПо); 
		СохраненныеЗначения.Свойство("ОтображатьЗанятостьПомещений", ОтображатьЗанятостьПомещений);
		СохраненныеЗначения.Свойство("ПользовательКалендаря", ПользовательКалендаря);
	КонецЕсли; 
	
	Если КоличествоДнейНаЗакладкеДень = 0 Тогда
		КоличествоДнейНаЗакладкеДень  = 2;
	КонецЕсли; 
	
	Если КоличествоДнейНедели = 0 Тогда
		КоличествоДнейНедели = 7;
	КонецЕсли; 
	
	ЗаполнитьПостроительОтчета();
	
КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	ДоступностьПараметровОграниченияВремени();
	
	Если УправлениеДопПравамиПользователей.РазрешитьИзменениеПользователяВКалендареПользователя(глЗначениеПеременной("глТекущийПользователь")) <> Истина Тогда
		ЭлементыФормы.Ответственные.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ЭлементыФормы.ОграничитьВремяС.ШиринаСпискаВыбора  = 7;
	ЭлементыФормы.ОграничитьВремяПо.ШиринаСпискаВыбора = 7;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события Нажатие элемента формы ОсновныеДействияФормы.ОК.
//
Процедура ОсновныеДействияФормыОК(Кнопка)
	
	СтароеЗначение = ПользовательКалендаря.Скопировать();
	ПользовательКалендаря.Очистить();
	
	Для каждого ЗначениеОтбора из ПостроительОтчета.Отбор Цикл
		Если ЗначениеОтбора.Использование Тогда
			Если ТипЗнч(ЗначениеОтбора.Значение) = Тип("СписокЗначений") Тогда
				МассивЗначений = ЗначениеОтбора.Значение.ВыгрузитьЗначения();
				Для каждого Значение из МассивЗначений Цикл
					Если ЗначениеЗаполнено(Значение) Тогда
						ПользовательКалендаря.Добавить(Значение);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ЗначениеЗаполнено(ЗначениеОтбора.Значение) Тогда
				ПользовательКалендаря.Добавить(ЗначениеОтбора.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПользовательКалендаря.Количество()=0 Тогда
		ПользовательКалендаря = СтароеЗначение;
		ЗаполнитьПостроительОтчета();
		Предупреждение(НСтр("ru='Обязательно выберите пользователей календаря';uk=""Обов'язково виберіть користувачів календаря"""));
		Возврат;
	КонецЕсли; 
	
	СтруктураСохраняемыхЗначений = Новый Структура;
	СтруктураСохраняемыхЗначений.Вставить("КоличествоДнейНаЗакладкеДень", КоличествоДнейНаЗакладкеДень);
	СтруктураСохраняемыхЗначений.Вставить("КоличествоДнейНедели", КоличествоДнейНедели);
	СтруктураСохраняемыхЗначений.Вставить("ОтображатьЗапланированныеСобытия", ОтображатьЗапланированныеСобытия);
	СтруктураСохраняемыхЗначений.Вставить("ТипСобытияКалендаря", ТипСобытияКалендаря);
	СтруктураСохраняемыхЗначений.Вставить("ОграничитьВремя", ОграничитьВремя); 
	СтруктураСохраняемыхЗначений.Вставить("ОграничитьВремяС", ОграничитьВремяС); 
    СтруктураСохраняемыхЗначений.Вставить("ОграничитьВремяПо", ОграничитьВремяПо); 
	СтруктураСохраняемыхЗначений.Вставить("ОтображатьЗанятостьПомещений", ОтображатьЗанятостьПомещений); 
	СтруктураСохраняемыхЗначений.Вставить("ПользовательКалендаря", ПользовательКалендаря); 
	
	СохранитьЗначение("КалендарьПользователя", СтруктураСохраняемыхЗначений);

	ЭтаФорма.Закрыть(Истина);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ОграничитьВремя.
//
Процедура ОграничитьВремяПриИзменении(Элемент)
	ДоступностьПараметровОграниченияВремени();
КонецПроцедуры

Процедура ОграничитьВремяПоНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДлинаЧаса = 3600;
	
	СписокВремен = Новый СписокЗначений;
	
	а = 0;
	ВремяСписка = ОграничитьВремяС; 
	НачалоДня = НачалоЧаса(ОграничитьВремяС)+1;
	ОкончаниеДня = КонецДня(ОграничитьВремяС);
	Пока НачалоЧаса(ВремяСписка) < НачалоЧаса(ОкончаниеДня) Цикл
		ВремяСписка = НачалоДня + а * ДлинаЧаса;
		СписокВремен.Добавить(ВремяСписка, СокрЛП(Формат(ВремяСписка,"ДФ=ЧЧ")));
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(Элемент.Значение);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ВыбратьИзСписка(СписокВремен,Элемент);
	Иначе
		ВыбранноеВремя = ВыбратьИзСписка(СписокВремен,Элемент,НачальноеЗначение);
	КонецЕсли; 
	
	Если ВыбранноеВремя <> Неопределено Тогда
		Элемент.Значение = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОграничитьВремяСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДлинаЧаса = 3600;
	
	СписокВремен = Новый СписокЗначений;
	
	а = 0;
	ВремяСписка = ОграничитьВремяС; 
	НачалоДня = НачалоДня(ОграничитьВремяС)+1;
	КонецДня  = ?(ЗначениеЗаполнено(ОграничитьВремяПо),НачалоЧаса(ОграничитьВремяПо),КонецДня(ОграничитьВремяС));
	Пока НачалоЧаса(ВремяСписка) < НачалоЧаса(КонецДня) Цикл
		ВремяСписка = НачалоДня + а * ДлинаЧаса;
		СписокВремен.Добавить(ВремяСписка, СокрЛП(Формат(ВремяСписка,"ДФ=ЧЧ")));
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(Элемент.Значение);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ВыбратьИзСписка(СписокВремен,Элемент);
	Иначе
		ВыбранноеВремя = ВыбратьИзСписка(СписокВремен,Элемент,НачальноеЗначение);
	КонецЕсли; 
	
	Если ВыбранноеВремя <> Неопределено Тогда
		Элемент.Значение = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры




