
// КАЛЕНДАРЬ

Перем ПроизвестиНачальноеЗаполнениеКалендаря;
Перем ПроизвестиНачальноеЗаполнениеПочты;

Перем ШиринаТабличногоПоляДня;
Перем ШиринаТабличногоПоляНедели;
Перем ШиринаТабличногоПоляМесяца;
Перем ШиринаРазделителяДвухДней;

Перем ВерхняяСтрокаНевидимойОбластиДня;
Перем НижняяСтрокаНевидимойОбластиДня;

Перем ВерхняяСтрокаНевидимойОбластиНедели;
Перем НижняяСтрокаНевидимойОбластиНедели;

Перем ОбщаяШиринаДня;

Перем СписокНепрочитанностиПисем;

// Список значений, содержащий список истории отборов с параметрами отборов
Перем мСписокИсторииОтбора;

Перем мДокументыОснования;

Перем мСписокДокументовДобавления;

Перем мМассивЗначенийБыстрогоСобытия;

Перем мТаблицаЯчеекИДатНедели;

Перем мСписокМесяцевВыбора;

Перем мДатаКалендаря;

Перем мБылоПервоеЗаполнениеНедели;

Перем мИмяТекущейОбластиДвойногоДня;

Перем мИмяТекущейОбластиДня;

Перем мБиблиотекаКартинокДокумент;

Перем СмещениеОтНачалаПервойЯчейкиДня;
Перем НомерПоследнейЯчейкиДня;
Перем НомерПоследнейЯчейкиНедели;

Перем мСкрепкиЛистовКалендаряПользователяНеРабочие;
Перем мСкрепкиЛистовКалендаряПользователяРабочие;

// ПОЧТА

// Переменная содержит объект Шрифт с установленной жирностью
Перем мЖирныйШрифт;

// содержит строку списка писем, которая в данный момент отображена
// в поле ХТМЛ документа
Перем мОтображеннаяСтрокаСпискаПисем;

// Текущее письмо списка писем
Перем мТекущееПисьмо;

// Признак изменения списка писем при выборе папки или при активизации
Перем мИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем;

// Содержит залипающуюся кнопку командной панели управления отбором скрытых предметов
Перем мКнопкаОтображатьСкрытыеПредметыПисем;

// В переменной сохраняется структура ключа текущей строки списка предметов
Перем мСтруктураПредмета;

// Флаг режима выделения видимых строк списка писем
Перем ВыделитьВидимыеСтроки;

Перем СоответствиеСокращенныхТекстовЭлектронныхПисем;

// В переменной хранятся значение использования предметов писем в учетных записях
Перем мКлассификацияУчетныхЗаписейПоПредметам;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает флаг использования предметов писем в учетной записи
//
// Параметры
//  УчетнаяЗаписьАнализа - анализируемая учетная запись
//
// Возвращаемое значение:
//   Булево
//
Функция ФлагКлассификацииПисемПоПредметам(УчетнаяЗаписьАнализа)

	Если ТипЗнч(УчетнаяЗаписьАнализа) <> Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьАнализа) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ЗначениеФлага = мКлассификацияУчетныхЗаписейПоПредметам.Получить(УчетнаяЗаписьАнализа);
	Если ЗначениеФлага = Неопределено Тогда
		ЗначениеФлага = УправлениеЭлектроннойПочтой.ПолучитьЗначениеРеквизитаУчетнойЗаписи(УчетнаяЗаписьАнализа, "ИспользоватьКлассификациюПисемПоПредметам");
		мКлассификацияУчетныхЗаписейПоПредметам.Вставить(УчетнаяЗаписьАнализа, ЗначениеФлага);
	КонецЕсли;
	
	Возврат ЗначениеФлага;

КонецФункции

// Процедура обрабатывает событие перетаскивания в поле календаря режима День и Неделя.
//
Процедура ПолеКалендаряПеретаскиваниеОбщее(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ВыбраннаяДата, Неделя = Ложь)
	
	Если Неделя Тогда
		Область = ЭлементыФормы.ПолеТабличногоДокументаНеделя.ТекущаяОбласть;
	Иначе
		Область = ЭлементыФормы.ПолеТабличногоДокументаДеньВторой.ТекущаяОбласть;
	КонецЕсли; 
	
	Если ТипЗнч(Область.Расшифровка) <> Тип("ДокументСсылка.Событие") Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	НовоеНачалоСобытия    = ВыбраннаяДата + (Область.Расшифровка.НачалоСобытия - НачалоДня(Область.Расшифровка.НачалоСобытия));
	НовоеОкончаниеСобытия = ВыбраннаяДата + (Область.Расшифровка.ОкончаниеСобытия - НачалоДня(Область.Расшифровка.ОкончаниеСобытия));
	
	Если НовоеНачалоСобытия = Область.Расшифровка.НачалоСобытия
		И НовоеОкончаниеСобытия = Область.Расшифровка.ОкончаниеСобытия Тогда
		Возврат;
	КонецЕсли; 
	
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
		Объект = Область.Расшифровка.Скопировать();
		Объект.Дата = ТекущаяДата();
	Иначе
		Объект = Область.Расшифровка.ПолучитьОбъект();
	КонецЕсли; 
	
	Объект.НачалоСобытия    = НовоеНачалоСобытия;
	Объект.ОкончаниеСобытия = НовоеОкончаниеСобытия;
	Попытка
		Объект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗаписьДокументаСобытие();
	
КонецПроцедуры

// Процедура обрабатывает событие проверки перетаскивания в поле табличного документа режима День и Двойной день.
//
Процедура ПолеТабличногоДокументаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка) <> Тип("ДокументСсылка.Событие") 
		ИЛИ Область.Низ > НомерПоследнейЯчейкиДня Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает событие начала перетаскивания в поле табличного документа режима День и Двойной день.
//
Процедура ПолеТабличногоДокументаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Элемент.ТолькоПросмотр = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.КопированиеИПеремещение;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	
КонецПроцедуры

// Процедура обрабатывает событие перетаскивания в поле табличного документа режима День и Двойной день.
//
Процедура ПолеТабличногоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область, ДваДня = Ложь)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка) <> Тип("ДокументСсылка.Событие") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	НовоеНачалоСобытия    = ОпределитьДатыОбластиДня(Область, Истина);
	НовоеОкончаниеСобытия = ОпределитьДатыОбластиДня(Область, Ложь);
	Если КоличествоДнейНаЗакладкеДень = 2 И ДваДня И Область.Лево > ОбщаяШиринаДня+3 Тогда
		НовоеНачалоСобытия    = НовоеНачалоСобытия + 60*60*24;
		НовоеОкончаниеСобытия = НовоеОкончаниеСобытия + 60*60*24;
	КонецЕсли; 
	
	Если НовоеНачалоСобытия = ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка.НачалоСобытия
		И НовоеОкончаниеСобытия = ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка.ОкончаниеСобытия Тогда
		Возврат;
	КонецЕсли; 
	
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
		Объект = ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка.Скопировать();
		Объект.Дата = ТекущаяДата();
	Иначе
		Объект = ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка.ПолучитьОбъект();
	КонецЕсли; 
	
	Объект.НачалоСобытия    = НовоеНачалоСобытия;
	Объект.ОкончаниеСобытия = НовоеОкончаниеСобытия;
	Попытка
		Объект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗаписьДокументаСобытие();
	Элемент.ТекущаяОбласть = Область;
	
КонецПроцедуры

// Процедура обрабатывает событие записи документа Событие из календаря пользователя
//
Процедура ЗаписьДокументаСобытие()
	
	ОбновитьСписок[0]  = Истина;
	ОбновитьСписок[1]  = Ложь;
	
	ОбновитьМесяц[0]  = Истина;
	ОбновитьМесяц[2]  = Истина;
	
	ОбновитьНеделю[0] = Истина;
	ОбновитьНеделю[2] = Истина;
	
	ОбновитьДень[0]   = Истина;
	ОбновитьДень[2]   = Истина;
	
	ОбновитьИнформациюНаФорме();
	
КонецПроцедуры

// Процедура выполняется по нажатию на одну из кнопок подменю
// кнопки ИсторияОтборов командной панели КоманднаяПанельСписка.
// 
// Параметры
//  Кнопка - Кнопка командной панели, по нажатию на которую вызывается данная процедура
//
// Возвращаемые значения
//  НЕТ
Процедура ОбработкаИсторииОтбора(Кнопка)
	
	СтарыйОтборКонтрагент = СтруктураОтборов.Получить("КонтактноеЛицо");
	
	ИндексСпискаЗначений = Число(Кнопка.Имя);
	
	Если (ИндексСпискаЗначений + 1) > мСписокИсторииОтбора.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// Очистим отборы
	Для каждого ЭлементСоответствия Из СтруктураОтборов Цикл
		Если ЭлементСоответствия.Ключ = "Пользователь" Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОтборов.Удалить(ЭлементСоответствия.Ключ);
	КонецЦикла; 
	
	ЗначениеЭлементаСпискаЗначений = мСписокИсторииОтбора[ИндексСпискаЗначений].Значение;
	Для каждого ЭлементСтруктуры Из ЗначениеЭлементаСпискаЗначений Цикл
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(ЭлементСтруктуры.Значение[0]);
		Если ЭлементСтруктуры.Значение[0] = ВидСравнения.Интервал
			ИЛИ ЭлементСтруктуры.Значение[0] = ВидСравнения.ИнтервалВключаяГраницы
			ИЛИ ЭлементСтруктуры.Значение[0] = ВидСравнения.ИнтервалВключаяНачало
			ИЛИ ЭлементСтруктуры.Значение[0] = ВидСравнения.ИнтервалВключаяОкончание Тогда
			МассивОтбора.Добавить(ЭлементСтруктуры.Значение[2]);
			МассивОтбора.Добавить(ЭлементСтруктуры.Значение[3]);
		Иначе
			МассивОтбора.Добавить(ЭлементСтруктуры.Значение[1]);
		КонецЕсли;
		СтруктураОтборов.Вставить(ЭлементСтруктуры.Ключ, МассивОтбора);
	КонецЦикла;
	
	ОбновитьЗаказыСобытия(СтарыйОтборКонтрагент = СтруктураОтборов.Получить("КонтактноеЛицо"));
	
	СостояниеКнопокСнятияОтбора();
	СостояниеКнопкиОтбораПоТекущемуЗначению();
	
КонецПроцедуры

// Процедура формирует строковое представление отбора, для записи в историю отборов.
// 
// Параметры
//  СтрокаОтбора - Строка, строковое представление отбора
//  ЭлементОтбора - Массив, массив парметров и значений отбора
//
// Возвращаемые значения
//  НЕТ
Процедура ДописатьСтрокуОтбора(СтрокаОтбора, ЭлементОтбора)
	
	Если НЕ ПустаяСтрока(СтрокаОтбора) Тогда
		СтрокаОтбора = СтрокаОтбора + ", ";
	КонецЕсли; 
	Если ЭлементОтбора.Значение[0] = ВидСравнения.Равно Тогда
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " = "+ СокрЛП(Строка(ЭлементОтбора.Значение[1]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.НеРавно Тогда
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " <> "+ СокрЛП(Строка(ЭлементОтбора.Значение[1]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.ВСписке Тогда
		СтрокаСписка = "";
		Для каждого ЭлементСписка Из ЭлементОтбора.Значение[1] Цикл
			Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
				СтрокаСписка = СтрокаСписка + "; ";
			КонецЕсли; 
			СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
		КонецЦикла; 
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " в списке "+ СтрокаСписка;
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.НеВСписке Тогда
		СтрокаСписка = "";
		Для каждого ЭлементСписка Из ЭлементОтбора.Значение[1] Цикл
			Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
				СтрокаСписка = СтрокаСписка + "; ";
			КонецЕсли; 
			СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
		КонецЦикла; 
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " не в списке "+ СтрокаСписка;
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.Больше Тогда
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " > "+ СокрЛП(Строка(ЭлементОтбора.Значение[1]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.БольшеИлиРавно Тогда
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " >= "+ СокрЛП(Строка(ЭлементОтбора.Значение[1]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.Меньше Тогда
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " < "+ СокрЛП(Строка(ЭлементОтбора.Значение[1]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.МеньшеИлиРавно Тогда
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " <= "+ СокрЛП(Строка(ЭлементОтбора.Значение[1]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.Интервал Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.Значение[1])) + " < " + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " < "+ СокрЛП(Строка(ЭлементОтбора.Значение[2]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.ИнтервалВключаяГраницы Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.Значение[1])) + " <= " + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " <= "+ СокрЛП(Строка(ЭлементОтбора.Значение[2]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.ИнтервалВключаяНачало Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.Значение[1])) + " <= " + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " < "+ СокрЛП(Строка(ЭлементОтбора.Значение[2]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.ИнтервалВключаяОкончание Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.Значение[1])) + " < " + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " <= "+ СокрЛП(Строка(ЭлементОтбора.Значение[2]));
	КонецЕсли; 
	
КонецПроцедуры

// Процедура проверяет наличие и при необходимости добавляет новый элемент в писок истории отборов.
// 
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
Процедура ДобавитьНовыйОтборВИсторию()
	
	СтрокаТекущихОтборов = "";
	СтруктураАктуальныхОтборов = Новый Структура;
	
	Для каждого ЭлементОтбора Из СтруктураОтборов Цикл
		Если ЭлементОтбора.Ключ = "Пользователь" Тогда
			Продолжить;
		КонецЕсли; 
		МассивИсторииОтбора = Новый Массив;
		МассивИсторииОтбора.Добавить(ЭлементОтбора.Значение[0]);
		МассивИсторииОтбора.Добавить(ЭлементОтбора.Значение[1]);
		Если ЭлементОтбора.Значение.Количество() = 3 Тогда
			МассивИсторииОтбора.Добавить(ЭлементОтбора.Значение[1]);
			МассивИсторииОтбора.Добавить(ЭлементОтбора.Значение[2]);
		КонецЕсли; 
		МассивИсторииОтбора.Добавить(Истина);
		ДописатьСтрокуОтбора(СтрокаТекущихОтборов, ЭлементОтбора);
		СтруктураАктуальныхОтборов.Вставить(ЭлементОтбора.Ключ, МассивИсторииОтбора);
	КонецЦикла;
	
	Если СтруктураАктуальныхОтборов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	НайденныйЭлементСпискаЗначений = Неопределено;
	Для каждого ЭлементСписка Из мСписокИсторииОтбора Цикл
		Если ЭлементСписка.Представление = СтрокаТекущихОтборов Тогда
			НайденныйЭлементСпискаЗначений = ЭлементСписка;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденныйЭлементСпискаЗначений = Неопределено Тогда
		
		Если мСписокИсторииОтбора.Количество() > 0 Тогда
			мСписокИсторииОтбора.Вставить(0, СтруктураАктуальныхОтборов, СтрокаТекущихОтборов);
		Иначе
			мСписокИсторииОтбора.Добавить(СтруктураАктуальныхОтборов, СтрокаТекущихОтборов);
		КонецЕсли;
		
		Если мСписокИсторииОтбора.Количество() > 20 Тогда
			ИндУдаляемогоЭлемента = 20;
			Пока 1 = 1 Цикл
				Если (ИндУдаляемогоЭлемента + 1) > мСписокИсторииОтбора.Количество() Тогда
					Прервать;
				КонецЕсли;
				мСписокИсторииОтбора.Удалить(20);
			КонецЦикла; 
		КонецЕсли; 
		
	Иначе
		
		мСписокИсторииОтбора.Сдвинуть(НайденныйЭлементСпискаЗначений, (-мСписокИсторииОтбора.Индекс(НайденныйЭлементСпискаЗначений)));
		
	КонецЕсли; 
	
	СформироватьПодменюПоСпискуАктуальныхОтборов();
	
КонецПроцедуры

// Процедура формирует кноаки подменю для кнопки ИсторияОтборов командной панели КоманднаяПанельСписка.
// 
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
Процедура СформироватьПодменюПоСпискуАктуальныхОтборов()
	
	КнопкаПодменю = ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ИсторияОтборов;
	КнопкаПодменю.Кнопки.Очистить();
	КнопкаПодменю1 = ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ИсторияОтборов;
	КнопкаПодменю1.Кнопки.Очистить();
	Для каждого ЭлементСписка Из мСписокИсторииОтбора Цикл
		КнопкаПодменю.Кнопки.Добавить(Строка(мСписокИсторииОтбора.Индекс(ЭлементСписка)), ТипКнопкиКоманднойПанели.Действие, ЭлементСписка.Представление, Новый Действие("ОбработкаИсторииОтбора"));
		КнопкаПодменю1.Кнопки.Добавить(Строка(мСписокИсторииОтбора.Индекс(ЭлементСписка)), ТипКнопкиКоманднойПанели.Действие, ЭлементСписка.Представление, Новый Действие("ОбработкаИсторииОтбора"));
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает доступность кнопки СнятьОтбор
// командной панели формы.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура СостояниеКнопокСнятияОтбора()
	
	Доступность = Ложь;
	
	Для каждого Отбор Из СтруктураОтборов Цикл
		Если Отбор.Ключ <> "Пользователь" Тогда
			Доступность = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДатаНач <> Дата("00010101000000") ИЛИ ДатаКон <> Дата("00010101000000") Тогда
		Доступность = Истина;
	КонецЕсли; 
	
	ЭлементыФормы.КоманднаяПанельСписка.Кнопки.СнятьОтбор.Доступность                = Доступность;
	ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.СнятьОтбор.Доступность = Доступность;
	
КонецПроцедуры

// Функция определяет необходимость вывода строки
// элемента формы События
//
// Параметры
//  Строки - строка таблицы значений
//  СписокПроверяемыхПолей - Список значений, поля, которые надо проверять
//
// Возвращаемое значение:
//   Булево
//
Функция НужноПоказыватьСтрокуСобытий(Строки, СписокПроверяемыхПолей)
	
	ЗначениеВозврата = Истина;
	
	Для каждого ЭлементСписка Из СписокПроверяемыхПолей Цикл
		
		Если ЭлементСписка.Значение = "ТипДокумента" Тогда
			ЗначениеСтроки = ТипЗнч(Строки.Документ);
			Отбор = СтруктураОтборов.Получить(ЭлементСписка.Значение);
			Если Отбор <> Неопределено Тогда
				ВидСравненияОтбора = Отбор[0];
				ЗначениеОтбора = Отбор[1];
				
				Если НЕ ЗначениеОтбора.СодержитТип(ЗначениеСтроки) Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
		Иначе
			ЗначениеСтроки = Строки[ЭлементСписка.Значение];
			Отбор = СтруктураОтборов.Получить(ЭлементСписка.Значение);
			Если Отбор <> Неопределено Тогда
				ВидСравненияОтбора = Отбор[0];
				ЗначениеОтбора = Отбор[1];
				Если ВидСравненияОтбора = ВидСравнения.Равно И ЗначениеОтбора <> ЗначениеСтроки Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеРавно И ЗначениеОтбора = ЗначениеСтроки Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.Больше И ЗначениеОтбора >= ЗначениеСтроки Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно И ЗначениеОтбора > ЗначениеСтроки Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.Меньше И ЗначениеОтбора <= ЗначениеСтроки Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно И ЗначениеОтбора < ЗначениеСтроки Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.ВСписке И ЗначениеОтбора.НайтиПоЗначению(ЗначениеСтроки) = Неопределено Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеВСписке И ЗначениеОтбора.НайтиПоЗначению(ЗначениеСтроки) <> Неопределено Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.Интервал Тогда
					Если ЗначениеСтроки > Отбор[2] ИЛИ ЗначениеСтроки < Отбор[1] Тогда
						ЗначениеВозврата = Ложь;
						Прервать;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат ЗначениеВозврата;
	
КонецФункции // НужноПоказыватьСтрокуСобытий()

// Процедура заполняет таблицу значений События
//
// Параметры
//  БезЗапроса - Булево, выполнить запрос или нет
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ОбновитьЗаказыСобытия(БезЗапроса = Истина) Экспорт
	
	Состояние(НСтр("ru='Выполняется заполнение списка сделок ...';uk='Виконується заповнення списку угод ...'"));
	
	СписокПроверяемыхПолей = Новый СписокЗначений;
	СписокПроверяемыхПолей.Добавить("Важность");
	СписокПроверяемыхПолей.Добавить("Тип");
	СписокПроверяемыхПолей.Добавить("Номер");
	СписокПроверяемыхПолей.Добавить("ВидОперации");
	СписокПроверяемыхПолей.Добавить("ДатаСобытия");
	
	Если НЕ БезЗапроса Тогда
		ЗаполнитьСобытия(ОтображатьЗаказы, ОтображаемыеЗаказы);
	КонецЕсли; 
	
	ТекущаяСтрокаСобытий = Неопределено;
	Если ЗаказыИСобытияПредставление.Количество() > 0 И ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные <> Неопределено Тогда
		ТекущаяСтрокаСобытий = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные.Документ;
		ТекущийВид = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные.ВидОперации;
	КонецЕсли;
	
	ЗаказыИСобытияПредставление.Очистить();
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для каждого Строки Из ЗаказыСобытия Цикл
		
		Если ТипЗнч(Строки.Документ) = Тип("ДокументСсылка.Событие") Тогда
			
			НоваяСтрока = ЗаказыИСобытияПредставление.Добавить();
			НоваяСтрока.Документ                       = Строки.Документ;
			НоваяСтрока.Состояние                      = Строки.СостояниеСобытия;
			НоваяСтрока.Важность                       = Строки.Важность;
			НоваяСтрока.Тип                            = Строки.ТипСобытия;
			НоваяСтрока.Информация                     = СокрЛП(Строки.ОписаниеСобытия);
			НоваяСтрока.ДатаДокумента                  = Строки.Дата;
			НоваяСтрока.ДатаСобытия                    = Строки.НачалоСобытия;
			НоваяСтрока.ВидОперации                    = Строки.ВидОперации;
			НоваяСтрока.Номер                          = СокрЛП(Строки.Номер);
			
		КонецЕсли; 
	КонецЦикла;
	
	ИндексСтроки = 0;
	Пока 1 = 1 Цикл
		Если ИндексСтроки > ЗаказыИСобытияПредставление.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;
		Если НЕ НужноПоказыватьСтрокуСобытий(ЗаказыИСобытияПредставление[ИндексСтроки], СписокПроверяемыхПолей) Тогда
			ЗаказыИСобытияПредставление.Удалить(ИндексСтроки);
			Продолжить;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла; 
	
	ЗаказыИСобытияПредставление.Сортировать("ДатаСобытия ВОЗР");
	
	Если ТекущаяСтрокаСобытий <> Неопределено Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Документ",ТекущаяСтрокаСобытий);
		СтруктураПоиска.Вставить("ВидОперации",ТекущийВид);
		МассивСтрок = ЗаказыИСобытияПредставление.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			ТекущаяСтрокаСобытий = МассивСтрок[0];
			Если ТекущаяСтрокаСобытий <> Неопределено Тогда
				ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущаяСтрока = ТекущаяСтрокаСобытий;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает значение реквизита формы ВыбКонтрагент
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ОпределитьКонтрагентаФормы()
	
	ОтборКонтрагент = СтруктураОтборов.Получить("КонтактноеЛицо");
	
	Если ОтборКонтрагент = Неопределено Тогда
		ВыбКонтактноеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	Иначе
		ВыбКонтактноеЛицо = ОтборКонтрагент[1];
	КонецЕсли; 
	
КонецПроцедуры

// Функция определяет список документов, которые можно
//  вводить на основании заданного
//  элемента формы События
//
// Параметры
//  ИмяДокумента - строка имя документа, как оно задано в метаданных
//
// Возвращаемое значение:
//   Список значений
//
Функция НайтиДокументыДляОснования(ИмяДокумента)
	
	СписокДокументов = Неопределено;
	
	мДокументыОснования.Свойство(ИмяДокумента, СписокДокументов);
	
	Если ТипЗнч(СписокДокументов) = Тип("СписокЗначений") Тогда
		Возврат СписокДокументов;
	КонецЕсли; 
	
	СписокДокументов = Новый СписокЗначений;
	
	Для каждого Док Из Метаданные.Документы Цикл
		Для каждого Основание Из Док.ВводитсяНаОсновании Цикл
			Если Основание.Имя = ИмяДокумента Тогда
				СписокДокументов.Добавить(Док.Имя, Док.Синоним);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
	мДокументыОснования.Вставить(ИмяДокумента, СписокДокументов);
	Возврат СписокДокументов;
	
КонецФункции

// Процедура открывает форму документа, введенного на основании текущего
//
// Параметры
//  Кнопка - кнопка командной панели формы
//
// Возвращаемое значение:
//  НЕТ
// (процедура назначается через Действие)
Процедура ВводНаОсновании(Кнопка)
	
	Если ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные <> Неопределено И НЕ ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные.Документ.Пустая() Тогда
		
		Док = Новый("ДокументМенеджер."+СокрЛП(Кнопка.Имя));
		Док = Док.СоздатьДокумент();
		Док.Заполнить(ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные.Документ);
		Док.ПолучитьФорму(, ЭтаФорма).Открыть();
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает пометку кнопки ОтборПоТекущемуЗначению
// командной панели формы
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
Процедура СостояниеКнопкиОтбораПоТекущемуЗначению()
	
	Если ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные = Неопределено ИЛИ ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущаяКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекКолонка = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущаяКолонка;
	ИмяКолонки = ТекКолонка.Имя;
	КнопкаПанели = ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоТекущемуЗначению;
	КнопкаПанели1 = ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоТекущемуЗначению;
	
	Если ИмяКолонки = "Картинка" Тогда
		Возврат;
	КонецЕсли; 
	
	ТекЗначение = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные[ИмяКолонки];
	
	Если ИмяКолонки = "ДатаДокумента" Тогда
		Если НачалоДня(ТекЗначение) = НачалоДня(ДатаНач) И НачалоДня(ТекЗначение) = НачалоДня(ДатаКон) Тогда
			КнопкаПанели.Пометка = Истина;
			КнопкаПанели1.Пометка = Истина;
		Иначе
			КнопкаПанели.Пометка = Ложь;
			КнопкаПанели1.Пометка = Ложь;
		КонецЕсли;
	Иначе
		ЗначениеСоответствия = СтруктураОтборов.Получить(ИмяКолонки);
		Если ЗначениеСоответствия <> Неопределено И ЗначениеСоответствия[0] = ВидСравнения.Равно И ТекЗначение = ЗначениеСоответствия[1] Тогда
			КнопкаПанели.Пометка = Истина;
			КнопкаПанели1.Пометка = Истина;
		Иначе
			КнопкаПанели.Пометка = Ложь;
			КнопкаПанели1.Пометка = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Функция возвращает наименование дня недели по его номеру
//
// Параметры
//  НомерДняНедели - Число, номер дня недели
//
// Возвращаемое значение:
//   Строка, наименование дня недели
//
Функция ОпределитьДеньНедели(НомерДняНедели)
	
	Если НомерДняНедели = 1 Тогда
		Возврат "Понедельник";
	ИначеЕсли НомерДняНедели = 2 Тогда
		Возврат "Вторник";
	ИначеЕсли НомерДняНедели = 3 Тогда
		Возврат "Среда";
	ИначеЕсли НомерДняНедели = 4 Тогда
		Возврат "Четверг";
	ИначеЕсли НомерДняНедели = 5 Тогда
		Возврат "Пятница";
	ИначеЕсли НомерДняНедели = 6 Тогда
		Возврат "Суббота";
	Иначе
		Возврат "Воскресенье";
	КонецЕсли;
	
КонецФункции

// Процедура формирует строковое представление текущего значения интервалов
//  календаря пользователя
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
Процедура СформироватьПредставлениеДня()
	
	СтрокаДня = Формат(ДатаКалендаря, "ДЛФ=DD") + ", " + ОпределитьДеньНедели(ДеньНедели(ДатаКалендаря));
	СтрокаМесяца = Формат(ДатаКалендаря, "ДФ=ММММ") + ", " + Формат(ДатаКалендаря, "ДФ=yyyy") + " г.";
	СтрокаНедели = Формат(НачалоНедели(ДатаКалендаря), "ДФ='dd MMMM yyyy'") + " г. - " + Формат(КонецНедели(ДатаКалендаря), "ДФ='dd MMMM yyyy'") + " г.";
	
	ЭлементыФормы.НадписьДня.Значение = СтрокаДня;
	ЭлементыФормы.НадписьМесяца.Значение = СтрокаМесяца;
	ЭлементыФормы.НадписьНедели.Значение = СтрокаНедели;
	
КонецПроцедуры

// Функция возвращает картинку вида События по значению вида
//
// Параметры
//  ВидСобытия - перчисление, вид события
//
// Возвращаемое значение:
//   Картинка - картинка вида события
//
Функция ОпределитьКартинку(ВидСобытия,ТипСобытия)
	
	Если ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
		Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат БиблиотекаКартинок.ЛичнаяВстречаИсходящяя;
		Иначе
			Возврат БиблиотекаКартинок.ЛичнаяВстречаВходящяя;
		КонецЕсли;
	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ПочтовоеПисьмо Тогда
		Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат БиблиотекаКартинок.ПочтовоеПисьмоИсходящее;
		Иначе
			Возврат БиблиотекаКартинок.ПочтовоеПисьмоВходящее;
		КонецЕсли;
	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.Прочее Тогда
		Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат БиблиотекаКартинок.ПрочееСобытиеИсходящее;
		Иначе
			Возврат БиблиотекаКартинок.ПрочееСобытиеВходящее;
		КонецЕсли;
	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ТелефонныйЗвонок Тогда
		Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат БиблиотекаКартинок.ТелефонныйЗвонокИсходящий;
		Иначе
			Возврат БиблиотекаКартинок.ТелефонныйЗвонокВходящий;
		КонецЕсли;
	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо Тогда
		Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат БиблиотекаКартинок.ЭлектронноеПисьмоИсходящее;
		Иначе
			Возврат БиблиотекаКартинок.ЭлектронноеПисьмоВходящее;
		КонецЕсли;
	Иначе
		Возврат Новый Картинка;
	КонецЕсли; 
	
КонецФункции // ОпределитьКартинку()

// Процедура на таблице документа визуально показывает наличие событий,
// не отображаемых в текущей настройки показа времени календаря
//
// Параметры
//  Таб                        - табличный документ
//  РисункиТабличногоДокумента - список рисунков табличного документа
//  ВерхНиз                    - направление отображения невидимых событий, принимаемые значения "Верх или "Низ"
//  Колонка                    - начальная колонка для отображения картинки
//  СмещениеСтрок              - смещение строк для отображаемой картинки
//
Процедура УказатьНаличиеНевидимыхСобытий(Таб,РисункиТабличногоДокумента,ВерхНиз = "Верх",Колонка = 2,СмещениеСтрок = 0,ДополнительнаяОбластьНачКолонка = 0,ДополнительнаяОбластьКонКолонка = 0)
	
	НовыйРисунок = РисункиТабличногоДокумента.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	
	Если ВерхНиз = "Верх" Тогда
		НовыйРисунок.Картинка = БиблиотекаКартинок.СтрелкаВверхКалендаря;
		ОбластьРисунка = Таб.Область(1+СмещениеСтрок, Колонка, 1+СмещениеСтрок, Колонка);
		
		ОбластьЧисло = Таб.Область(1+СмещениеСтрок, Колонка-1, 1+СмещениеСтрок, Колонка-1);
		ОбластьЧисло.ЦветТекста = WebЦвета.Красный;
	Иначе
		НовыйРисунок.Картинка = БиблиотекаКартинок.СтрелкаВнизКалендаря;
		ОбластьРисунка = Таб.Область(НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня+СмещениеСтрок, Колонка, НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня+СмещениеСтрок, Колонка);
		
		ОбластьЧисло = Таб.Область(НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня-1+СмещениеСтрок, Колонка-1, НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня+СмещениеСтрок, Колонка-1);
		ОбластьЧисло.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;   
	
	Если ДополнительнаяОбластьНачКолонка>0 И ДополнительнаяОбластьКонКолонка>0 Тогда
		ОбластьЧисло = Таб.Область(1, ДополнительнаяОбластьНачКолонка, 2, ДополнительнаяОбластьКонКолонка);
		ОбластьЧисло.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;
	
	НовыйРисунок.ГраницаСлева = Ложь;
	НовыйРисунок.ЦветЛинии    = ОбластьРисунка.ЦветРамки;
	НовыйРисунок.ЦветФона     = ОбластьРисунка.ЦветФона;
	
	НайденныйРисунок = НовыйРисунок;
	
	НайденныйРисунок.Расшифровка = Новый Структура("Действие,Направление","Раскрыть",ВерхНиз);
	НайденныйРисунок.Защита = Истина;
	НайденныйРисунок.Расположить(ОбластьРисунка);
	
КонецПроцедуры

// Процедура заполняет данными поле табличного документа ПолеТабличногоДокументаДень.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
Процедура ЗаполнитьТаблицуДня()
	
	ЭлементыФормы.ПанельМоксельГрид.ТекущаяСтраница = ЭлементыФормы.ПанельМоксельГрид.Страницы.Моксель;
	
	// Построим первый день
	
	МакетДня = ПолучитьМакет("МакетДняПолный");
	
	Таб = ЭлементыФормы.ПолеТабличногоДокументаДеньВторой;
	Таб.Очистить();
	
	ШиринаТабличногоПоляДня = Таб.Ширина;
	ШиринаРазделителяДвухДней = ЭлементыФормы.Разделитель9.Лево;
	
	Если КоличествоДнейНаЗакладкеДень=1 Тогда
		ОбщаяШиринаДня = Цел(148*(ШиринаТабличногоПоляДня-56)/(1094-56));
	Иначе
		ОбщаяШиринаДня_ = Цел(140*(ШиринаТабличногоПоляДня-112)/(1094-112)/2);
		ОбщаяШиринаДня = Цел(148*(ШиринаРазделителяДвухДней+13-56)/(1094-56));
	КонецЕсли;
	
	Таб.ВставитьОбласть(МакетДня.Область(1+СмещениеОтНачалаПервойЯчейкиДня,1,НомерПоследнейЯчейкиДня,ОбщаяШиринаДня+2), Таб.Область(1,1,НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня,ОбщаяШиринаДня+2));
	
	Таб.Область(,1,,1).ШиринаКолонки  = 4;
	Таб.Область(,2,,2).ШиринаКолонки  = 2;
	Таб.Область(,3,,ОбщаяШиринаДня+2).ШиринаКолонки = 1;
	Таб.Область(1,,НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня,).ВысотаСтроки  = 11;
	
	СформироватьПредставлениеДня();
	
	СтруктураРабочегоВремени = мОпределитьНачалоИОкончениеРабочегоДняПользователя(ПользовательКалендаря, ДатаКалендаря);
	
	ДатаНачалаРабочегоДня    = СтруктураРабочегоВремени.ДатаНачала;
	ДатаОкончанияРабочегоДня = СтруктураРабочегоВремени.ДатаОкончания;
	
	Если ДатаНачалаРабочегоДня = '00010101000000' И ДатаОкончанияРабочегоДня = '00010101235959' Тогда
		
		ОбластьРабочегоДня = Таб.Область(1,3,НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня,ОбщаяШиринаДня+2);
		ОбластьРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
		КонечнаяСтрокаРабочегоДня  = Неопределено;
		НачальнаяСтрокаРабочегоДня = Неопределено;
		Таб.Область(1,1,НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня,2).ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
		
	Иначе
		
		НачальнаяСтрокаРабочегоДня = УправлениеКонтактами.ВозвратитьНомерСтроки(Формат(ДатаНачалаРабочегоДня,"ДФ=Ч"), Формат(ДатаНачалаРабочегоДня,"ДФ=м"), ДатаКалендаря, Истина, ДатаКалендаря);
		Если Формат(ДатаНачалаРабочегоДня,"ДФ=Ч") = Формат(ДатаОкончанияРабочегоДня,"ДФ=Ч") И Формат(ДатаНачалаРабочегоДня,"ДФ=м") = Формат(ДатаОкончанияРабочегоДня,"ДФ=м") Тогда
			КонечнаяСтрокаРабочегоДня  = НачальнаяСтрокаРабочегоДня;
		Иначе
			КонечнаяСтрокаРабочегоДня = УправлениеКонтактами.ВозвратитьНомерСтроки(Формат(ДатаОкончанияРабочегоДня,"ДФ=Ч"), Формат(ДатаОкончанияРабочегоДня,"ДФ=м"), ДатаКалендаря, Ложь, ДатаКалендаря);
		КонецЕсли; 
		
		ОбластьДоРабочегоДня = Таб.Область(1,3,(НачальнаяСтрокаРабочегоДня - 1-СмещениеОтНачалаПервойЯчейкиДня),ОбщаяШиринаДня+2);
		ОбластьДоРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
		ОбластьРабочегоДня = Таб.Область(НачальнаяСтрокаРабочегоДня-СмещениеОтНачалаПервойЯчейкиДня,3,КонечнаяСтрокаРабочегоДня-СмещениеОтНачалаПервойЯчейкиДня,ОбщаяШиринаДня+2);
		ОбластьРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		Если КонечнаяСтрокаРабочегоДня < НомерПоследнейЯчейкиДня Тогда
			ОбластьПослеРабочегоДня = Таб.Область((КонечнаяСтрокаРабочегоДня + 1 -СмещениеОтНачалаПервойЯчейкиДня),3,НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня,ОбщаяШиринаДня+2);
			ОбластьПослеРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
		КонецЕсли; 
		Таб.Область(НачальнаяСтрокаРабочегоДня-СмещениеОтНачалаПервойЯчейкиДня,1,КонечнаяСтрокаРабочегоДня-СмещениеОтНачалаПервойЯчейкиДня,2).ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		
	КонецЕсли; 
	
	Если НачалоДня(ТекущаяДата()) = НачалоДня(ДатаКалендаря) Тогда
		ТекущийЧас = Час(ТекущаяДата());
		СтрокаТекущегоЧаса = ТекущийЧас*2+1-СмещениеОтНачалаПервойЯчейкиДня+?(Минута(ТекущаяДата())>29,1,0);
		
		Если СтрокаТекущегоЧаса <= НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня Тогда
			Таб.Область(СтрокаТекущегоЧаса,2,Мин(СтрокаТекущегоЧаса+1,НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня),ОбщаяШиринаДня+2).ЦветФона = WebЦвета.Бежевый;
		КонецЕсли;
	КонецЕсли;
	
	Таб.Рисунки.Очистить();
	РисункиТабличногоДокумента = Таб.Рисунки;
	
	ЗначениеРеквизитаДняНедели = ОбработкаОбъект["СобытияНедели_День" + Строка(ДеньНедели(ДатаКалендаря))];
	
	ВерхняяСтрокаНевидимойОбластиДня = 1+СмещениеОтНачалаПервойЯчейкиДня;
	НижняяСтрокаНевидимойОбластиДня  = НомерПоследнейЯчейкиДня;
	
	Если ТипЗнч(ЗначениеРеквизитаДняНедели) = Тип("Структура") Тогда
		
		СписокЗначенийВремен = ЗначениеРеквизитаДняНедели.РасположениеСобытий;
		ТаблицаСобытий       = ЗначениеРеквизитаДняНедели.ТаблицаСобытий.Скопировать();
		Если ТипЗнч(ТаблицаСобытий) = Тип("ТаблицаЗначений") Тогда
			Если ТаблицаСобытий.Колонки.Найти("Документ")<>Неопределено ТОгда
				ТаблицаСобытий.Индексы.Добавить("Документ");
			КонецЕсли;
		КонецЕсли;
		
		СписокЗначенийВременПоПомещениям = ЗначениеРеквизитаДняНедели.РасположениеСобытийПоПомещениям;
		ТаблицаСобытийПоПомещениям       = ЗначениеРеквизитаДняНедели.ТаблицаСобытийПоПомещениям.Скопировать();
		Если ТипЗнч(ТаблицаСобытийПоПомещениям) = Тип("ТаблицаЗначений") Тогда
			Если ТаблицаСобытийПоПомещениям.Колонки.Найти("Документ")<>Неопределено ТОгда
				ТаблицаСобытийПоПомещениям.Индексы.Добавить("Документ");
			КонецЕсли;
		КонецЕсли;
		
		Если ОтображатьЗанятостьПомещений И ТаблицаСобытийПоПомещениям.Количество()>0 Тогда
			ОбщаяШиринаДняДляРаспределенияСобытий = Цел(ОбщаяШиринаДня/2);
			Таб.Область(1,ОбщаяШиринаДняДляРаспределенияСобытий+2,НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня,ОбщаяШиринаДняДляРаспределенияСобытий+2).ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		Иначе
			ОбщаяШиринаДняДляРаспределенияСобытий = ОбщаяШиринаДня;
		КонецЕсли;
		
		// определим колонки для таблицы событий (независимо от диапозона показа)
		Для а = 0 По 47 Цикл
			
			ПоследнийСтолбец = 2;
			
			СписокТекущихДокументов = СписокЗначенийВремен.Получить(а).Значение;
			
			Для каждого ТекДокумент Из СписокТекущихДокументов Цикл
				
				СтрокаТаблицыДокументов = ТаблицаСобытий.Найти(ТекДокумент.Значение, "Документ");
				Если СтрокаТаблицыДокументов <> Неопределено Тогда
					ШиринаТекущегоДокумента = Цел(ОбщаяШиринаДняДляРаспределенияСобытий/СтрокаТаблицыДокументов.КоличествоОдновременныхДокументов);
				Иначе
					ШиринаТекущегоДокумента = 0;
					Продолжить;
				КонецЕсли;
				
				Если (ПоследнийСтолбец + ШиринаТекущегоДокумента) = (ОбщаяШиринаДняДляРаспределенияСобытий + 1) Тогда
					ШиринаТекущегоДокумента = ШиринаТекущегоДокумента + 1;
				ИначеЕсли (ПоследнийСтолбец + ШиринаТекущегоДокумента) = (ОбщаяШиринаДняДляРаспределенияСобытий) Тогда
					ШиринаТекущегоДокумента = ШиринаТекущегоДокумента + 2;
				КонецЕсли; 
				
				Если ШиринаТекущегоДокумента < 4 Тогда
					Если ШиринаТекущегоДокумента < 2 Тогда
						ШиринаТекущегоДокумента = 2;
					КонецЕсли; 
				КонецЕсли; 
				
				Если СтрокаТаблицыДокументов.НомерНачальнойКолонки = 0 И СтрокаТаблицыДокументов.НомерКонечнойКолонки = 0 Тогда
					СтрокаТаблицыДокументов.НомерНачальнойКолонки = ПоследнийСтолбец + 1;
					СтрокаТаблицыДокументов.НомерКонечнойКолонки = ПоследнийСтолбец + ШиринаТекущегоДокумента;
				КонецЕсли;
				
				ПоследнийСтолбец = СтрокаТаблицыДокументов.НомерНачальнойКолонки - 1 + ШиринаТекущегоДокумента;
				
			КонецЦикла; 
			
		КонецЦикла;   
		
		ИндексСтрокиТаблицы = 0;
		Пока 1 = 1 Цикл
			
			Если ИндексСтрокиТаблицы > ТаблицаСобытий.Количество() - 1 Тогда
				Прервать;
			КонецЕсли; 
			
			СтрокаТаблицы = ТаблицаСобытий[ИндексСтрокиТаблицы];
			
			Если СтрокаТаблицы.НомерНачальнойКолонки = 0 ИЛИ СтрокаТаблицы.НомерКонечнойКолонки = 0 Тогда
				ТаблицаСобытий.Удалить(СтрокаТаблицы);
			Иначе
				ИндексСтрокиТаблицы = ИндексСтрокиТаблицы + 1;
			КонецЕсли; 
			
		КонецЦикла; 
		
		Для каждого СтрокаТаблицы Из ТаблицаСобытий Цикл
			
			ПерваяСтрокаОбласти    = СтрокаТаблицы.НомерНачальнойСтроки-СмещениеОтНачалаПервойЯчейкиДня;
			ПоследняяСтрокаОбласти = СтрокаТаблицы.НомерКонечнойСтроки-СмещениеОтНачалаПервойЯчейкиДня;
			Если ПерваяСтрокаОбласти < 1 Тогда
				ВерхняяСтрокаНевидимойОбластиДня = Мин(СтрокаТаблицы.НомерНачальнойСтроки,ВерхняяСтрокаНевидимойОбластиДня);
				УказатьНаличиеНевидимыхСобытий(Таб,РисункиТабличногоДокумента,"Верх",2); 
				Если ПоследняяСтрокаОбласти < 1 Тогда
					Продолжить;
				Иначе
					ПерваяСтрокаОбласти = 1;
				КонецЕсли;
			ИначеЕсли ПерваяСтрокаОбласти > НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня Тогда
				НижняяСтрокаНевидимойОбластиДня = Макс(СтрокаТаблицы.НомерКонечнойСтроки,НижняяСтрокаНевидимойОбластиДня);
				УказатьНаличиеНевидимыхСобытий(Таб,РисункиТабличногоДокумента,"Низ",2); 
				Продолжить;
			КонецЕсли;
			
			Если ПоследняяСтрокаОбласти > НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня Тогда
				НижняяСтрокаНевидимойОбластиДня = Макс(СтрокаТаблицы.НомерКонечнойСтроки,НижняяСтрокаНевидимойОбластиДня);
				УказатьНаличиеНевидимыхСобытий(Таб,РисункиТабличногоДокумента,"Низ",2); 
				ПоследняяСтрокаОбласти = НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня;
			КонецЕсли;
			
			ТекОбласть = Таб.Область(ПерваяСтрокаОбласти, СтрокаТаблицы.НомерНачальнойКолонки, ПоследняяСтрокаОбласти, СтрокаТаблицы.НомерКонечнойКолонки);
			
			ТекстЯчейки = "";
			Если ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.Событие") Тогда
				
				ТекстЯчейки = "" + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) > 2 , Символы.ПС, "") + ТекстЯчейки + Формат(СтрокаТаблицы.ДатаНачалаСобытия, "ДФ=ЧЧ:мм") + " - " + Формат(СтрокаТаблицы.ДатаКонцаСобытия, "ДФ=ЧЧ:мм");
				Если ЗначениеЗаполнено(СтрокаТаблицы.КонтактноеЛицо) Тогда
					Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
						ТекстЯчейки = ТекстЯчейки + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) > 2 , ?(((ТекОбласть.Низ - ТекОбласть.Верх + 1) = 3), ", ", Символы.ПС), ", ");
					КонецЕсли; 
					ТекстЯчейки = ТекстЯчейки + Строка(СтрокаТаблицы.КонтактноеЛицо);
				КонецЕсли;
				Если НЕ ПустаяСтрока(СтрокаТаблицы.ОписаниеСобытия) Тогда
					Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
						ТекстЯчейки = ТекстЯчейки + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) >= 2 , Символы.ПС, ", ");
					КонецЕсли;
					ТекстЯчейки = ТекстЯчейки + СокрЛП(СтрокаТаблицы.ОписаниеСобытия);
				КонецЕсли; 
				
				Если ПользовательКалендаря.Количество()>1 Тогда
					ТекстЯчейки = ТекстЯчейки + ", "+ СтрокаТаблицы.Документ.Ответственный;
				КонецЕсли;
				
			КонецЕсли; 
			
			Если (ТекОбласть.Право - ТекОбласть.Лево + 1) < 4 Тогда
				ТекстЯчейки = ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) >= 2 , Символы.ПС, "          ") + ТекстЯчейки;
			Иначе
				Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) <= 2 Тогда
					ТекстЯчейки = "     " + ТекстЯчейки;
				КонецЕсли; 
			КонецЕсли; 
			
			ТекОбласть.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ТекОбласть.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ТекОбласть.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ТекОбласть.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ТекОбласть.Объединить();
			ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
			ТекОбласть.ЦветФона = Новый Цвет;
			
			ТекОбласть.Текст = ТекстЯчейки;
			Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) < 2 Тогда
				ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
			Иначе
				ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			КонецЕсли; 
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.ПоВыделеннымКолонкам = Истина;
			ТекОбласть.Расшифровка = СтрокаТаблицы.Документ;
			
			Если СтрокаТаблицы.Важность = Перечисления.Важность.Высокая Тогда
				ТекОбласть.ЦветТекста = WebЦвета.Красный;
			КонецЕсли;
			Если СтрокаТаблицы.СостояниеСобытия <> Перечисления.СостоянияСобытий.Запланировано Тогда
				ТекОбласть.ЦветФона = WebЦвета.Перламутровый;
				ТекОбласть.ЦветТекста = WebЦвета.Серый;
			КонецЕсли; 
			
			// Отобразим вид с типом события
			
			КартинкаВидаСобытия = ОпределитьКартинку(СтрокаТаблицы.ВидСобытия,СтрокаТаблицы.ТипСобытия);
			НовыйРисунок = РисункиТабличногоДокумента.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			НовыйРисунок.Картинка = КартинкаВидаСобытия;
			НовыйРисунок.ЦветЛинии = ЦветаСтиля.ЦветРамки;
			Если СтрокаТаблицы.СостояниеСобытия <> Перечисления.СостоянияСобытий.Запланировано Тогда
				НовыйРисунок.ЦветФона = WebЦвета.Перламутровый;
			КонецЕсли;
			НовыйРисунок.ГраницаСверху = Истина;
			Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) < 2 Тогда
				НовыйРисунок.ГраницаСнизу = Истина;
			Иначе
				НовыйРисунок.ГраницаСнизу = Ложь;
			КонецЕсли;
			НовыйРисунок.ГраницаСлева = Истина;
			Если (ТекОбласть.Право - ТекОбласть.Лево + 1) = 2 Тогда
				НовыйРисунок.ГраницаСправа = Истина;
			Иначе
				НовыйРисунок.ГраницаСправа = Ложь;
			КонецЕсли;
			НайденныйРисунок = НовыйРисунок;
			
			ОбластьРисунка = Таб.Область(ТекОбласть.Верх, ТекОбласть.Лево, ТекОбласть.Верх, (ТекОбласть.Лево + 1));
			НайденныйРисунок.Расшифровка = СтрокаТаблицы.Документ;
			НайденныйРисунок.Защита = Истина;
			НайденныйРисунок.Расположить(ОбластьРисунка);
			
		КонецЦикла; 
		
		
		Если ОтображатьЗанятостьПомещений И ТаблицаСобытийПоПомещениям.Количество()>0  Тогда
			
			// определим колонки для таблицы событий (независимо от диапозона показа)
			ОбщаяШиринаДняДляРаспределенияСобытий = Цел((ОбщаяШиринаДня+1)/2);
			
			Для а = 0 По 47 Цикл
				
				ПоследнийСтолбец = ОбщаяШиринаДня-Цел((ОбщаяШиринаДня-1)/2)+1;
				
				СписокТекущихДокументов = СписокЗначенийВременПоПомещениям.Получить(а).Значение;
				
				Для каждого ТекДокумент Из СписокТекущихДокументов Цикл
					
					СтрокаТаблицыДокументов = ТаблицаСобытийПоПомещениям.Найти(ТекДокумент.Значение, "Документ");
					Если СтрокаТаблицыДокументов <> Неопределено Тогда
						ШиринаТекущегоДокумента = Цел(ОбщаяШиринаДняДляРаспределенияСобытий/СтрокаТаблицыДокументов.КоличествоОдновременныхДокументов);
					Иначе
						ШиринаТекущегоДокумента = 0;
						Продолжить;
					КонецЕсли;
					
					Если (ПоследнийСтолбец + ШиринаТекущегоДокумента) = (ОбщаяШиринаДняДляРаспределенияСобытий + 1) Тогда
						ШиринаТекущегоДокумента = ШиринаТекущегоДокумента + 1;
					ИначеЕсли (ПоследнийСтолбец + ШиринаТекущегоДокумента) = (ОбщаяШиринаДняДляРаспределенияСобытий) Тогда
						ШиринаТекущегоДокумента = ШиринаТекущегоДокумента + 2;
					КонецЕсли; 
					
					Если ШиринаТекущегоДокумента < 4 Тогда
						Если ШиринаТекущегоДокумента < 2 Тогда
							ШиринаТекущегоДокумента = 2;
						КонецЕсли; 
					КонецЕсли; 
					
					Если СтрокаТаблицыДокументов.НомерНачальнойКолонки = 0 И СтрокаТаблицыДокументов.НомерКонечнойКолонки = 0 Тогда
						СтрокаТаблицыДокументов.НомерНачальнойКолонки = ПоследнийСтолбец + 1;
						СтрокаТаблицыДокументов.НомерКонечнойКолонки = ПоследнийСтолбец + ШиринаТекущегоДокумента;
					КонецЕсли;
					
					ПоследнийСтолбец = СтрокаТаблицыДокументов.НомерНачальнойКолонки - 1 + ШиринаТекущегоДокумента;
					
				КонецЦикла; 
				
			КонецЦикла;   
			
			ИндексСтрокиТаблицы = 0;
			Пока 1 = 1 Цикл
				
				Если ИндексСтрокиТаблицы > ТаблицаСобытийПоПомещениям.Количество() - 1 Тогда
					Прервать;
				КонецЕсли; 
				
				СтрокаТаблицы = ТаблицаСобытийПоПомещениям[ИндексСтрокиТаблицы];
				
				Если СтрокаТаблицы.НомерНачальнойКолонки = 0 ИЛИ СтрокаТаблицы.НомерКонечнойКолонки = 0 Тогда
					ТаблицаСобытийПоПомещениям.Удалить(СтрокаТаблицы);
				Иначе
					ИндексСтрокиТаблицы = ИндексСтрокиТаблицы + 1;
				КонецЕсли; 
				
			КонецЦикла; 
			
			Для каждого СтрокаТаблицы Из ТаблицаСобытийПоПомещениям Цикл
				
				ПерваяСтрокаОбласти    = СтрокаТаблицы.НомерНачальнойСтроки-СмещениеОтНачалаПервойЯчейкиДня;
				ПоследняяСтрокаОбласти = СтрокаТаблицы.НомерКонечнойСтроки-СмещениеОтНачалаПервойЯчейкиДня;
				Если ПерваяСтрокаОбласти < 1 Тогда
					Если ПоследняяСтрокаОбласти < 1 Тогда
						Продолжить;
					Иначе
						ПерваяСтрокаОбласти = 1;
					КонецЕсли;
				ИначеЕсли ПерваяСтрокаОбласти > НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПоследняяСтрокаОбласти > НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня Тогда
					ПоследняяСтрокаОбласти = НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня;
				КонецЕсли;
				
				ТекОбласть = Таб.Область(ПерваяСтрокаОбласти, СтрокаТаблицы.НомерНачальнойКолонки, ПоследняяСтрокаОбласти, СтрокаТаблицы.НомерКонечнойКолонки);
				
				ТекстЯчейки = "";
				
				ТекстЯчейки = "" + ТекстЯчейки + Формат(СтрокаТаблицы.ДатаНачалаСобытия, "ДФ=ЧЧ:мм") + " - " + Формат(СтрокаТаблицы.ДатаКонцаСобытия, "ДФ=ЧЧ:мм");
				
				Помещения = "";
				Если ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.Событие") Тогда
					Помещения = СтрокаТаблицы.Документ.Помещение;
				Иначе
					Для каждого СтрокаПомещение из СтрокаТаблицы.Документ.СписокПомещений Цикл
						Помещения = Помещения + ?(ПустаяСтрока(Помещения),"",", ")+СокрЛП(СтрокаПомещение.Помещение);
					КонецЦикла;
				КонецЕсли; 
				
				Если НЕ ПустаяСтрока(Помещения) Тогда
					Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
						ТекстЯчейки = ТекстЯчейки + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) >= 2 , Символы.ПС, ", ");
					КонецЕсли;
					ТекстЯчейки = ТекстЯчейки + СокрЛП(Помещения);
				КонецЕсли; 
				
				//Если (ТекОбласть.Право - ТекОбласть.Лево + 1) < 4 Тогда
				//	ТекстЯчейки = ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) >= 2 , Символы.ПС, "          ") + ТекстЯчейки;
				//Иначе
				//	Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) <= 2 Тогда
				//		ТекстЯчейки = "          " + ТекстЯчейки;
				//	КонецЕсли; 
				//КонецЕсли; 
				
				ТекОбласть.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.Объединить();
				ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
				ТекОбласть.ЦветФона = Новый Цвет;
				
				ТекОбласть.Текст = ТекстЯчейки;
				Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) < 2 Тогда
					ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
				Иначе
					ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				КонецЕсли; 
				ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
				ТекОбласть.ПоВыделеннымКолонкам = Истина;
				ТекОбласть.Расшифровка = СтрокаТаблицы.Документ;
				
				Если СтрокаТаблицы.Важность = Перечисления.Важность.Высокая Тогда
					ТекОбласть.ЦветТекста = WebЦвета.Красный;
				КонецЕсли;
				
				ТекОбласть.ЦветФона = WebЦвета.СветлоЖелтый;
				ТекОбласть.ЦветТекста = WebЦвета.Серый;
				
			КонецЦикла; 
			
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	// Построим второй день
	Если КоличествоДнейНаЗакладкеДень = 2 Тогда
		ОбщаяШиринаВторогоДня = ОбщаяШиринаДня_ + (ОбщаяШиринаДня_ - ОбщаяШиринаДня);
		
		ПерваяКолонкаВтрогоДня = ОбщаяШиринаДня+4;
		ПоследняяКолонкаВтрогоДня = ОбщаяШиринаДня+4 + ОбщаяШиринаВторогоДня+1;
		
		ДатаВторогоДня = ДатаКалендаря + 60*60*24;
		
		Таб.ВставитьОбласть(МакетДня.Область(1+СмещениеОтНачалаПервойЯчейкиДня,1,НомерПоследнейЯчейкиДня,ОбщаяШиринаВторогоДня+2), Таб.Область(1,ПерваяКолонкаВтрогоДня,НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня,ПоследняяКолонкаВтрогоДня));
		
		Таб.Область(,ПерваяКолонкаВтрогоДня,,ПерваяКолонкаВтрогоДня).ШиринаКолонки = 4;
		Таб.Область(,(ПерваяКолонкаВтрогоДня + 1),,(ПерваяКолонкаВтрогоДня + 1)).ШиринаКолонки = 2;
		Таб.Область(,(ПерваяКолонкаВтрогоДня + 2),,ПоследняяКолонкаВтрогоДня).ШиринаКолонки = 1;
		Таб.Область(1,,НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня,).ВысотаСтроки = 11;
		
		ЭлементыФормы.Разделитель9.Видимость = Истина;
		ЭлементыФормы.НадписьДняВторого.Видимость = Истина;
		ЭлементыФормы.ПолеКартинки1.Видимость = Истина;
		
		СтрокаДня = Формат(ДатаВторогоДня, "ДЛФ=DD") + ", " + ОпределитьДеньНедели(ДеньНедели(ДатаВторогоДня));
		ЭлементыФормы.НадписьДняВторого.Значение = СтрокаДня;
		
		СтруктураРабочегоВремени = мОпределитьНачалоИОкончениеРабочегоДняПользователя(ПользовательКалендаря, ДатаВторогоДня);
		
		НачальнаяСтрокаПервогоРабочегоДня = НачальнаяСтрокаРабочегоДня;
		КонечнаяСтрокаПервогоРабочегоДня  = КонечнаяСтрокаРабочегоДня;
		
		ДатаНачалаРабочегоДня    = СтруктураРабочегоВремени.ДатаНачала;
		ДатаОкончанияРабочегоДня = СтруктураРабочегоВремени.ДатаОкончания;
		
		Если ДатаНачалаРабочегоДня = '00010101000000' И ДатаОкончанияРабочегоДня = '00010101235959' Тогда
			
			ОбластьРабочегоДня = Таб.Область(1,(ПерваяКолонкаВтрогоДня + 2),НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня,ПоследняяКолонкаВтрогоДня);
			ОбластьРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			НачальнаяСтрокаРабочегоДня  = Неопределено;
			КонечнаяСтрокаРабочегоДня   = Неопределено;
			Таб.Область(1,ПерваяКолонкаВтрогоДня,НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня,(ПерваяКолонкаВтрогоДня + 1)).ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			
		Иначе
			
			НачальнаяСтрокаРабочегоДня = УправлениеКонтактами.ВозвратитьНомерСтроки(Формат(ДатаНачалаРабочегоДня,"ДФ=Ч"), Формат(ДатаНачалаРабочегоДня,"ДФ=м"), ДатаКалендаря, Истина, ДатаКалендаря);
			Если Формат(ДатаНачалаРабочегоДня,"ДФ=Ч") = Формат(ДатаОкончанияРабочегоДня,"ДФ=Ч") И Формат(ДатаНачалаРабочегоДня,"ДФ=м") = Формат(ДатаОкончанияРабочегоДня,"ДФ=м") Тогда
				КонечнаяСтрокаРабочегоДня  = НачальнаяСтрокаРабочегоДня;
			Иначе
				КонечнаяСтрокаРабочегоДня = УправлениеКонтактами.ВозвратитьНомерСтроки(Формат(ДатаОкончанияРабочегоДня,"ДФ=Ч"), Формат(ДатаОкончанияРабочегоДня,"ДФ=м"), ДатаКалендаря, Ложь, ДатаКалендаря);
			КонецЕсли; 
			
			ОбластьДоРабочегоДня = Таб.Область(1,(ПерваяКолонкаВтрогоДня + 2),(НачальнаяСтрокаРабочегоДня - 1-СмещениеОтНачалаПервойЯчейкиДня),ПоследняяКолонкаВтрогоДня);
			ОбластьДоРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			ОбластьРабочегоДня = Таб.Область(НачальнаяСтрокаРабочегоДня-СмещениеОтНачалаПервойЯчейкиДня,(ПерваяКолонкаВтрогоДня + 2),КонечнаяСтрокаРабочегоДня-СмещениеОтНачалаПервойЯчейкиДня,ПоследняяКолонкаВтрогоДня);
			ОбластьРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
			Если КонечнаяСтрокаРабочегоДня < НомерПоследнейЯчейкиДня Тогда
				ОбластьПослеРабочегоДня = Таб.Область((КонечнаяСтрокаРабочегоДня + 1 -СмещениеОтНачалаПервойЯчейкиДня),(ПерваяКолонкаВтрогоДня + 2),НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня,ПоследняяКолонкаВтрогоДня);
				ОбластьПослеРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			КонецЕсли; 
			
			Таб.Область(НачальнаяСтрокаРабочегоДня-СмещениеОтНачалаПервойЯчейкиДня,ПерваяКолонкаВтрогоДня,КонечнаяСтрокаРабочегоДня-СмещениеОтНачалаПервойЯчейкиДня,(ПерваяКолонкаВтрогоДня + 1)).ЦветФона = ЦветаСтиля.ЦветФонаФормы;
			
		КонецЕсли; 
		
		Если НачалоДня(ТекущаяДата()) = НачалоДня(ДатаВторогоДня) Тогда
			ТекущийЧас = Час(ТекущаяДата());
			СтрокаТекущегоЧаса = ТекущийЧас*2+1-СмещениеОтНачалаПервойЯчейкиДня+?(Минута(ТекущаяДата())>29,1,0);
			
			Если СтрокаТекущегоЧаса <= НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня Тогда
				Таб.Область(СтрокаТекущегоЧаса,ПерваяКолонкаВтрогоДня+1,Мин(СтрокаТекущегоЧаса+1,НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня),ПоследняяКолонкаВтрогоДня).ЦветФона = WebЦвета.Бежевый;
			КонецЕсли;
		КонецЕсли;
		
		Для с = 1 По НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня Цикл
			
			ОбластьКартинки = Таб.Область(с,ОбщаяШиринаДня+3,с,ОбщаяШиринаДня+3);
			ОбластьКартинки.ШиринаКолонки = 2;
			ОбластьКартинки.ВысотаСтроки = 11;
			
			РисунокРазделительСтраниц = РисункиТабличногоДокумента.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			Если (КонечнаяСтрокаРабочегоДня = Неопределено И НачальнаяСтрокаРабочегоДня = Неопределено) ИЛИ ((КонечнаяСтрокаПервогоРабочегоДня = Неопределено И НачальнаяСтрокаПервогоРабочегоДня = Неопределено)) Тогда
				
				РисунокРазделительСтраниц.Картинка = мСкрепкиЛистовКалендаряПользователяНеРабочие;
				
				Если с = 1 Тогда
					РисунокРазделительСтраниц.ГраницаСнизу  = Ложь;
					РисунокРазделительСтраниц.ГраницаСверху = Истина;
					РисунокРазделительСтраниц.ЦветЛинии = ЦветаСтиля.ЦветРамки;
				ИначеЕсли с = НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня Тогда
					РисунокРазделительСтраниц.ГраницаСверху = Ложь;
					РисунокРазделительСтраниц.ГраницаСнизу  = Истина;
					РисунокРазделительСтраниц.ЦветЛинии = ЦветаСтиля.ЦветРамки;
				Иначе
					РисунокРазделительСтраниц.ГраницаСверху = Ложь;
					РисунокРазделительСтраниц.ГраницаСнизу  = Ложь;
				КонецЕсли; 
				
			Иначе
				
				Если с < Мин(НачальнаяСтрокаПервогоРабочегоДня-СмещениеОтНачалаПервойЯчейкиДня, НачальнаяСтрокаРабочегоДня-СмещениеОтНачалаПервойЯчейкиДня) ИЛИ с > Макс(КонечнаяСтрокаПервогоРабочегоДня-СмещениеОтНачалаПервойЯчейкиДня, КонечнаяСтрокаРабочегоДня-СмещениеОтНачалаПервойЯчейкиДня) Тогда
					РисунокРазделительСтраниц.Картинка = мСкрепкиЛистовКалендаряПользователяНеРабочие;
				Иначе
					РисунокРазделительСтраниц.Картинка = мСкрепкиЛистовКалендаряПользователяРабочие;
				КонецЕсли; 
				
				Если с = 1+СмещениеОтНачалаПервойЯчейкиДня Тогда
					РисунокРазделительСтраниц.ГраницаСнизу  = Ложь;
					РисунокРазделительСтраниц.ГраницаСверху = Истина;
					РисунокРазделительСтраниц.ЦветЛинии = ЦветаСтиля.ЦветРамки;
				ИначеЕсли с = Мин(НачальнаяСтрокаПервогоРабочегоДня, НачальнаяСтрокаРабочегоДня)-СмещениеОтНачалаПервойЯчейкиДня - 1 ИЛИ с = Макс(КонечнаяСтрокаПервогоРабочегоДня, КонечнаяСтрокаРабочегоДня)-СмещениеОтНачалаПервойЯчейкиДня ИЛИ с = НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня Тогда
					РисунокРазделительСтраниц.ГраницаСверху = Ложь;
					РисунокРазделительСтраниц.ГраницаСнизу  = Истина;
					РисунокРазделительСтраниц.ЦветЛинии = ЦветаСтиля.ЦветРамки;
				Иначе
					РисунокРазделительСтраниц.ГраницаСверху = Ложь;
					РисунокРазделительСтраниц.ГраницаСнизу  = Ложь;
				КонецЕсли; 
				
			КонецЕсли; 
			
			РисунокРазделительСтраниц.ГраницаСправа = Ложь;
			РисунокРазделительСтраниц.ГраницаСлева  = Ложь;
			
			РисунокРазделительСтраниц.Расположить(ОбластьКартинки);
			
		КонецЦикла; 
		
		Если НачалоНедели(ДатаКалендаря) = НачалоНедели(ДатаВторогоДня) Тогда
			ЗначениеРеквизитаДняНедели = ОбработкаОбъект["СобытияНедели_День" + Строка(ДеньНедели(ДатаВторогоДня))];
		Иначе
			// Это может быть только понедельник следующей недели
			ЗначениеРеквизитаДняНедели = ОбработкаОбъект["СобытияНедели_День8"];
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеРеквизитаДняНедели) = Тип("Структура") Тогда
			
			СписокЗначенийВремен = ЗначениеРеквизитаДняНедели.РасположениеСобытий;
			ТаблицаСобытий       = ЗначениеРеквизитаДняНедели.ТаблицаСобытий.Скопировать();
			Если ТипЗнч(ТаблицаСобытий) = Тип("ТаблицаЗначений") Тогда
				ТаблицаСобытий.Индексы.Добавить("Документ");
			КонецЕсли;
			
			СписокЗначенийВременПоПомещениям = ЗначениеРеквизитаДняНедели.РасположениеСобытийПоПомещениям;
			ТаблицаСобытийПоПомещениям       = ЗначениеРеквизитаДняНедели.ТаблицаСобытийПоПомещениям.Скопировать();
			
			Если ОтображатьЗанятостьПомещений  И ТаблицаСобытийПоПомещениям.Количество()>0  Тогда
				ОбщаяШиринаДняДляРаспределенияСобытий = Цел(ОбщаяШиринаВторогоДня/2);
				Таб.Область(1,ПерваяКолонкаВтрогоДня+ОбщаяШиринаДняДляРаспределенияСобытий+1,НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня,ПерваяКолонкаВтрогоДня+ОбщаяШиринаДняДляРаспределенияСобытий+1).ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			Иначе
				ОбщаяШиринаДняДляРаспределенияСобытий = ОбщаяШиринаВторогоДня;
			КонецЕсли;
			
			// определим колонки для таблицы событий (независимо от диапозона показа)
			Для а = 0 По 47 Цикл
				
				ПоследнийСтолбец = 2;
				
				СписокТекущихДокументов = СписокЗначенийВремен.Получить(а).Значение;
				
				Для каждого ТекДокумент Из СписокТекущихДокументов Цикл
					
					СтрокаТаблицыДокументов = ТаблицаСобытий.Найти(ТекДокумент.Значение, "Документ");
					Если СтрокаТаблицыДокументов <> Неопределено Тогда
						ШиринаТекущегоДокумента = Цел(ОбщаяШиринаДняДляРаспределенияСобытий/СтрокаТаблицыДокументов.КоличествоОдновременныхДокументов);
					Иначе
						ШиринаТекущегоДокумента = 0;
						Продолжить;
					КонецЕсли;
					
					Если (ПоследнийСтолбец + ШиринаТекущегоДокумента) = (ОбщаяШиринаДняДляРаспределенияСобытий + 1) Тогда
						ШиринаТекущегоДокумента = ШиринаТекущегоДокумента + 1;
					ИначеЕсли (ПоследнийСтолбец + ШиринаТекущегоДокумента) = (ОбщаяШиринаДняДляРаспределенияСобытий) Тогда
						ШиринаТекущегоДокумента = ШиринаТекущегоДокумента + 2;
					КонецЕсли; 
					
					Если ШиринаТекущегоДокумента < 4 Тогда
						Если ШиринаТекущегоДокумента < 2 Тогда
							ШиринаТекущегоДокумента = 2;
						КонецЕсли; 
					КонецЕсли; 
					
					Если СтрокаТаблицыДокументов.НомерНачальнойКолонки = 0 И СтрокаТаблицыДокументов.НомерКонечнойКолонки = 0 Тогда
						СтрокаТаблицыДокументов.НомерНачальнойКолонки = ПерваяКолонкаВтрогоДня + ПоследнийСтолбец + 1 - 1;
						СтрокаТаблицыДокументов.НомерКонечнойКолонки = ПерваяКолонкаВтрогоДня + ПоследнийСтолбец + ШиринаТекущегоДокумента - 1;
					КонецЕсли;
					
					ПоследнийСтолбец = СтрокаТаблицыДокументов.НомерНачальнойКолонки + ШиринаТекущегоДокумента - ПерваяКолонкаВтрогоДня;
					
				КонецЦикла; 
				
			КонецЦикла;
			
			ИндексСтрокиТаблицы = 0;
			Пока 1 = 1 Цикл
				
				Если ИндексСтрокиТаблицы > ТаблицаСобытий.Количество() - 1 Тогда
					Прервать;
				КонецЕсли; 
				
				СтрокаТаблицы = ТаблицаСобытий[ИндексСтрокиТаблицы];
				
				Если СтрокаТаблицы.НомерНачальнойКолонки = 0 ИЛИ СтрокаТаблицы.НомерКонечнойКолонки = 0 Тогда
					ТаблицаСобытий.Удалить(СтрокаТаблицы);
				Иначе
					ИндексСтрокиТаблицы = ИндексСтрокиТаблицы + 1;
				КонецЕсли; 
				
			КонецЦикла; 
			
			Для каждого СтрокаТаблицы Из ТаблицаСобытий Цикл
				
				ПерваяСтрокаОбласти    = СтрокаТаблицы.НомерНачальнойСтроки-СмещениеОтНачалаПервойЯчейкиДня;
				ПоследняяСтрокаОбласти = СтрокаТаблицы.НомерКонечнойСтроки-СмещениеОтНачалаПервойЯчейкиДня;
				Если ПерваяСтрокаОбласти < 1 Тогда
					ВерхняяСтрокаНевидимойОбластиДня = Мин(СтрокаТаблицы.НомерНачальнойСтроки,ВерхняяСтрокаНевидимойОбластиДня);
					УказатьНаличиеНевидимыхСобытий(Таб,РисункиТабличногоДокумента,"Верх",ОбщаяШиринаДня+5); 
					Если ПоследняяСтрокаОбласти < 1 Тогда
						Продолжить;
					Иначе
						ПерваяСтрокаОбласти = 1;
					КонецЕсли;
				ИначеЕсли ПерваяСтрокаОбласти > НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня Тогда
					НижняяСтрокаНевидимойОбластиДня = Макс(СтрокаТаблицы.НомерКонечнойСтроки,НижняяСтрокаНевидимойОбластиДня);
					УказатьНаличиеНевидимыхСобытий(Таб,РисункиТабличногоДокумента,"Низ",ОбщаяШиринаДня+5); 
					Продолжить;
				КонецЕсли;
				
				Если ПоследняяСтрокаОбласти > НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня Тогда
					НижняяСтрокаНевидимойОбластиДня = Макс(СтрокаТаблицы.НомерКонечнойСтроки,НижняяСтрокаНевидимойОбластиДня);
					УказатьНаличиеНевидимыхСобытий(Таб,РисункиТабличногоДокумента,"Низ",ОбщаяШиринаДня+5); 
					ПоследняяСтрокаОбласти = НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня;
				КонецЕсли;
				
				ТекОбласть = Таб.Область(ПерваяСтрокаОбласти, СтрокаТаблицы.НомерНачальнойКолонки, ПоследняяСтрокаОбласти, СтрокаТаблицы.НомерКонечнойКолонки);
				
				ТекстЯчейки = "";
				Если ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.Событие") Тогда
					
					ТекстЯчейки = "" + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) > 2 , Символы.ПС, "") + ТекстЯчейки + Формат(СтрокаТаблицы.ДатаНачалаСобытия, "ДФ=ЧЧ:мм") + " - " + Формат(СтрокаТаблицы.ДатаКонцаСобытия, "ДФ=ЧЧ:мм");
					Если ЗначениеЗаполнено(СтрокаТаблицы.КонтактноеЛицо) Тогда
						Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
							ТекстЯчейки = ТекстЯчейки + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) > 2 , Символы.ПС, " ");
						КонецЕсли; 
						ТекстЯчейки = ТекстЯчейки + Строка(СтрокаТаблицы.КонтактноеЛицо);
					КонецЕсли;
					Если НЕ ПустаяСтрока(СтрокаТаблицы.ОписаниеСобытия) Тогда
						Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
							ТекстЯчейки = ТекстЯчейки + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) >= 2 , Символы.ПС, " ");
						КонецЕсли;
						ТекстЯчейки = ТекстЯчейки + СокрЛП(СтрокаТаблицы.ОписаниеСобытия);
					КонецЕсли; 
					
					Если ПользовательКалендаря.Количество()>1 Тогда
						ТекстЯчейки = ТекстЯчейки + ", "+ СтрокаТаблицы.Документ.Ответственный;
					КонецЕсли;
					
				КонецЕсли; 
				
				Если (ТекОбласть.Право - ТекОбласть.Лево + 1) < 4 Тогда
					ТекстЯчейки = ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) >= 2 , Символы.ПС, "          ") + ТекстЯчейки;
				Иначе
					Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) <= 2 Тогда
						ТекстЯчейки = "     " + ТекстЯчейки;
					КонецЕсли; 
				КонецЕсли; 
				
				ТекОбласть.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.Объединить();
				ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
				ТекОбласть.ЦветФона = Новый Цвет;
				
				ТекОбласть.Текст = ТекстЯчейки;
				Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) < 2 Тогда
					ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
				Иначе
					ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				КонецЕсли; 
				ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
				ТекОбласть.ПоВыделеннымКолонкам = Истина;
				ТекОбласть.Расшифровка = СтрокаТаблицы.Документ;
				
				Если СтрокаТаблицы.Важность = Перечисления.Важность.Высокая Тогда
					ТекОбласть.ЦветТекста = WebЦвета.Красный;
				КонецЕсли;
				Если СтрокаТаблицы.СостояниеСобытия <> Перечисления.СостоянияСобытий.Запланировано Тогда
					ТекОбласть.ЦветФона = WebЦвета.Перламутровый;
					ТекОбласть.ЦветТекста = WebЦвета.Серый;
				КонецЕсли; 
				
				// Отобразим вид с типом события
				
				КартинкаВидаСобытия = ОпределитьКартинку(СтрокаТаблицы.ВидСобытия,СтрокаТаблицы.ТипСобытия);
				НовыйРисунок = РисункиТабличногоДокумента.Добавить(ТипРисункаТабличногоДокумента.Картинка);
				НовыйРисунок.Картинка = КартинкаВидаСобытия;
				НовыйРисунок.ЦветЛинии = ЦветаСтиля.ЦветРамки;
				Если СтрокаТаблицы.СостояниеСобытия <> Перечисления.СостоянияСобытий.Запланировано Тогда
					НовыйРисунок.ЦветФона = WebЦвета.Перламутровый;
				КонецЕсли;
				НовыйРисунок.ГраницаСверху = Истина;
				Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) < 2 Тогда
					НовыйРисунок.ГраницаСнизу = Истина;
				Иначе
					НовыйРисунок.ГраницаСнизу = Ложь;
				КонецЕсли;
				НовыйРисунок.ГраницаСлева = Истина;
				Если (ТекОбласть.Право - ТекОбласть.Лево + 1) = 2 Тогда
					НовыйРисунок.ГраницаСправа = Истина;
				Иначе
					НовыйРисунок.ГраницаСправа = Ложь;
				КонецЕсли;
				НайденныйРисунок = НовыйРисунок;
				
				ОбластьРисунка = Таб.Область(ТекОбласть.Верх, ТекОбласть.Лево, ТекОбласть.Верх, (ТекОбласть.Лево + 1));
				НайденныйРисунок.Расшифровка = СтрокаТаблицы.Документ;
				НайденныйРисунок.Защита = Истина;
				НайденныйРисунок.Расположить(ОбластьРисунка);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		
		Если ОтображатьЗанятостьПомещений И ТаблицаСобытийПоПомещениям.Количество()>0  Тогда
			
			// определим колонки для таблицы событий (независимо от диапозона показа)
			ОбщаяШиринаДняДляРаспределенияСобытий = Цел((ОбщаяШиринаВторогоДня+1)/2);
			
			Для а = 0 По 47 Цикл
				
				ПоследнийСтолбец = ОбщаяШиринаВторогоДня-Цел((ОбщаяШиринаВторогоДня-1)/2)+1;
				
				СписокТекущихДокументов = СписокЗначенийВременПоПомещениям.Получить(а).Значение;
				
				Для каждого ТекДокумент Из СписокТекущихДокументов Цикл
					
					СтрокаТаблицыДокументов = ТаблицаСобытийПоПомещениям.Найти(ТекДокумент.Значение, "Документ");
					Если СтрокаТаблицыДокументов <> Неопределено Тогда
						ШиринаТекущегоДокумента = Цел(ОбщаяШиринаДняДляРаспределенияСобытий/СтрокаТаблицыДокументов.КоличествоОдновременныхДокументов);
					Иначе
						ШиринаТекущегоДокумента = 0;
						Продолжить;
					КонецЕсли;
					
					Если (ПоследнийСтолбец + ШиринаТекущегоДокумента) = (ОбщаяШиринаДняДляРаспределенияСобытий + 1) Тогда
						ШиринаТекущегоДокумента = ШиринаТекущегоДокумента + 1;
					ИначеЕсли (ПоследнийСтолбец + ШиринаТекущегоДокумента) = (ОбщаяШиринаДняДляРаспределенияСобытий) Тогда
						ШиринаТекущегоДокумента = ШиринаТекущегоДокумента + 2;
					КонецЕсли; 
					
					Если ШиринаТекущегоДокумента < 4 Тогда
						Если ШиринаТекущегоДокумента < 2 Тогда
							ШиринаТекущегоДокумента = 2;
						КонецЕсли; 
					КонецЕсли; 
					
					Если СтрокаТаблицыДокументов.НомерНачальнойКолонки = 0 И СтрокаТаблицыДокументов.НомерКонечнойКолонки = 0 Тогда
						СтрокаТаблицыДокументов.НомерНачальнойКолонки = ПерваяКолонкаВтрогоДня + ПоследнийСтолбец + 1 - 1;
						СтрокаТаблицыДокументов.НомерКонечнойКолонки = ПерваяКолонкаВтрогоДня + ПоследнийСтолбец + ШиринаТекущегоДокумента - 1;
					КонецЕсли;
					
					ПоследнийСтолбец = СтрокаТаблицыДокументов.НомерНачальнойКолонки + ШиринаТекущегоДокумента - ПерваяКолонкаВтрогоДня;
					
				КонецЦикла; 
				
			КонецЦикла;   
			
			ИндексСтрокиТаблицы = 0;
			Пока 1 = 1 Цикл
				
				Если ИндексСтрокиТаблицы > ТаблицаСобытийПоПомещениям.Количество() - 1 Тогда
					Прервать;
				КонецЕсли; 
				
				СтрокаТаблицы = ТаблицаСобытийПоПомещениям[ИндексСтрокиТаблицы];
				
				Если СтрокаТаблицы.НомерНачальнойКолонки = 0 ИЛИ СтрокаТаблицы.НомерКонечнойКолонки = 0 Тогда
					ТаблицаСобытийПоПомещениям.Удалить(СтрокаТаблицы);
				Иначе
					ИндексСтрокиТаблицы = ИндексСтрокиТаблицы + 1;
				КонецЕсли; 
				
			КонецЦикла; 
			
			Для каждого СтрокаТаблицы Из ТаблицаСобытийПоПомещениям Цикл
				
				ПерваяСтрокаОбласти    = СтрокаТаблицы.НомерНачальнойСтроки-СмещениеОтНачалаПервойЯчейкиДня;
				ПоследняяСтрокаОбласти = СтрокаТаблицы.НомерКонечнойСтроки-СмещениеОтНачалаПервойЯчейкиДня;
				Если ПерваяСтрокаОбласти < 1 Тогда
					Если ПоследняяСтрокаОбласти < 1 Тогда
						Продолжить;
					Иначе
						ПерваяСтрокаОбласти = 1;
					КонецЕсли;
				ИначеЕсли ПерваяСтрокаОбласти > НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПоследняяСтрокаОбласти > НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня Тогда
					ПоследняяСтрокаОбласти = НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня;
				КонецЕсли;
				
				ТекОбласть = Таб.Область(ПерваяСтрокаОбласти, СтрокаТаблицы.НомерНачальнойКолонки, ПоследняяСтрокаОбласти, СтрокаТаблицы.НомерКонечнойКолонки);
				
				ТекстЯчейки = "";
				
				ТекстЯчейки = "" + ТекстЯчейки + Формат(СтрокаТаблицы.ДатаНачалаСобытия, "ДФ=ЧЧ:мм") + " - " + Формат(СтрокаТаблицы.ДатаКонцаСобытия, "ДФ=ЧЧ:мм");
				
				Помещения = "";
				Если ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.Событие") Тогда
					Помещения = СтрокаТаблицы.Документ.Помещение;
				Иначе
					Для каждого СтрокаПомещение из СтрокаТаблицы.Документ.СписокПомещений Цикл
						Помещения = Помещения + ?(ПустаяСтрока(Помещения),"",", ")+СокрЛП(СтрокаПомещение.Помещение);
					КонецЦикла;
				КонецЕсли; 
				
				Если НЕ ПустаяСтрока(Помещения) Тогда
					Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
						ТекстЯчейки = ТекстЯчейки + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) >= 2 , Символы.ПС, ", ");
					КонецЕсли;
					ТекстЯчейки = ТекстЯчейки + СокрЛП(Помещения);
				КонецЕсли; 
				
				//Если (ТекОбласть.Право - ТекОбласть.Лево + 1) < 4 Тогда
				//	ТекстЯчейки = ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) >= 2 , Символы.ПС, "          ") + ТекстЯчейки;
				//Иначе
				//	Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) <= 2 Тогда
				//		ТекстЯчейки = "          " + ТекстЯчейки;
				//	КонецЕсли; 
				//КонецЕсли; 
				
				ТекОбласть.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.Объединить();
				ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
				ТекОбласть.ЦветФона = Новый Цвет;
				
				ТекОбласть.Текст = ТекстЯчейки;
				Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) < 2 Тогда
					ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
				Иначе
					ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				КонецЕсли; 
				ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
				ТекОбласть.ПоВыделеннымКолонкам = Истина;
				ТекОбласть.Расшифровка = СтрокаТаблицы.Документ;
				
				Если СтрокаТаблицы.Важность = Перечисления.Важность.Высокая Тогда
					ТекОбласть.ЦветТекста = WebЦвета.Красный;
				КонецЕсли;
				
				ТекОбласть.ЦветФона = WebЦвета.СветлоЖелтый;
				ТекОбласть.ЦветТекста = WebЦвета.Серый;
				
			КонецЦикла; 
			
		КонецЕсли;
		
	Иначе
		ЭлементыФормы.Разделитель9.Видимость = Ложь;
		ЭлементыФормы.НадписьДняВторого.Видимость = Ложь;
		ЭлементыФормы.ПолеКартинки1.Видимость = Ложь;
		ОбщаяШиринаВторогоДня = 0;
	КонецЕсли;
	
	Таб.ФиксацияСлева = ОбщаяШиринаДня+ОбщаяШиринаВторогоДня+КоличествоДнейНаЗакладкеДень*2 + КоличествоДнейНаЗакладкеДень-1;
	Таб.ТолькоПросмотр = Истина;
	Таб.Показать();
	
КонецПроцедуры

// Процедура заполняет данными поле табличного документа ПолеТабличногоДокументаНеделя.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
Процедура ЗаполнитьТаблицуНедели()
	
	Состояние(НСтр("ru='Заполняется таблица недели ...';uk='Заповнюється таблиця тижня ...'"));
	
	Таб = ЭлементыФормы.ПолеТабличногоДокументаНеделя;
	Таб.Очистить();
	
	ШиринаТабличногоПоляНедели = Таб.Ширина;
	
	ОбшаяШиринаНедели = Цел(148*((ШиринаТабличногоПоляНедели-56)/(1094-56)));
	
	Таб.УдалитьОбласть(Таб.Область(1,2,1,));
	Таб.УдалитьОбласть(Таб.Область(2,1,2,1));
	Таб.УдалитьОбласть(Таб.Область(3,1,,));
	
	МакетДня = ПолучитьМакет("МакетНеделя");
	Таб.ВставитьОбласть(МакетДня.Область(3+СмещениеОтНачалаПервойЯчейкиДня,1,НомерПоследнейЯчейкиНедели+СмещениеОтНачалаПервойЯчейкиДня,(ОбшаяШиринаНедели+2)), Таб.Область(3,1,НомерПоследнейЯчейкиНедели,(ОбшаяШиринаНедели+2)));
	Таб.ВставитьОбласть(МакетДня.Область(1,1,2,2), Таб.Область(1,1,2,2));
	
	Таб.Область(,1,,1).ШиринаКолонки = 4;
	Таб.Область(,2,,2).ШиринаКолонки = 2;
	Таб.Область(,3,,(ОбшаяШиринаНедели+2)).ШиринаКолонки = 1;
	Таб.Область(3,,НомерПоследнейЯчейкиНедели,).ВысотаСтроки = 11;
	
	Таб.Область(1,,1,).ВысотаСтроки = 20;
	Таб.Область(2,,2,).ВысотаСтроки = 50;
	
	Таб.Область(1,1,НомерПоследнейЯчейкиНедели,2).ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
	
	ШиринаКолонки = Цел(ОбшаяШиринаНедели/КоличествоДнейНедели);
	ШиринаКолонки = ШиринаКолонки + ?(ОбшаяШиринаНедели - ШиринаКолонки*КоличествоДнейНедели > КоличествоДнейНедели/2,1,0);
	
	ТаблицаТаблицСделок = Новый ТаблицаЗначений;
	ТаблицаТаблицСделок.Колонки.Добавить("ДатаНедели");
	ТаблицаТаблицСделок.Колонки.Добавить("ТаблицаСделок");
	ТаблицаТаблицСделок.Колонки.Добавить("ТаблицаСобытий");
	ТаблицаТаблицСделок.Колонки.Добавить("НомерСтрокиНачало");
	ТаблицаТаблицСделок.Колонки.Добавить("НомерСтрокиКонец");
	
	ШаблонТаблицаСделок = Новый ТаблицаЗначений;
	ШаблонТаблицаСделок.Колонки.Добавить("Документ");
	ШаблонТаблицаСделок.Колонки.Добавить("КонтактноеЛицо",,"Физ.лицо");
	ШаблонТаблицаСделок.Колонки.Добавить("ВидДокументаЗаказа");
	
	Для а = 1 По КоличествоДнейНедели Цикл
		
		РазницаДней = а - ДеньНедели(ДатаКалендаря);
		ТекущаяДата = НачалоДня(ДатаКалендаря + РазницаДней*60*60*24);
		
		НоваяСтрока = ТаблицаТаблицСделок.Добавить();
		НоваяСтрока.ДатаНедели = ТекущаяДата;
		НоваяСтрока.ТаблицаСделок = ШаблонТаблицаСделок.Скопировать();
		
		ЗначениеРеквизитаДняНедели = ОбработкаОбъект["СобытияНедели_День" + Строка(а)];
		Если ТипЗнч(ЗначениеРеквизитаДняНедели) = Тип("Структура") Тогда
			НоваяСтрока.ТаблицаСобытий = ЗначениеРеквизитаДняНедели.ТаблицаСобытий.Скопировать();
		Иначе
			НоваяСтрока.ТаблицаСобытий = Неопределено;
		КонецЕсли; 
		
	КонецЦикла;
	
	Таб.Область(2,,2,).Видимость = Ложь;
	
	мТаблицаЯчеекИДатНедели = Новый ТаблицаЗначений;
	мТаблицаЯчеекИДатНедели.Колонки.Добавить("ДатаНедели");
	мТаблицаЯчеекИДатНедели.Колонки.Добавить("НомерНачальнойЯчейки");
	мТаблицаЯчеекИДатНедели.Колонки.Добавить("НомерКонечнойЯчейки");
	
	ВерхняяСтрокаНевидимойОбластиНедели = 1+СмещениеОтНачалаПервойЯчейкиДня;
	НижняяСтрокаНевидимойОбластиНедели  = НомерПоследнейЯчейкиНедели+СмещениеОтНачалаПервойЯчейкиДня-2;
	
	Для а = 1 По КоличествоДнейНедели Цикл
		
		Состояние(НСтр("ru='Заполняется таблица недели, ';uk='Заповнюється таблиця тижня, '") + СокрЛП(ОпределитьДеньНедели(а)));
		
		Если а = КоличествоДнейНедели Тогда
			Если а*ШиринаКолонки < ОбшаяШиринаНедели Тогда
				НачальноеЗначениеКолонки = (а*ШиринаКолонки + 2 - ШиринаКолонки + 1);
				КонечноеЗначениеКолонки = (а*ШиринаКолонки + 2 + (ОбшаяШиринаНедели - а*ШиринаКолонки));
			Иначе
				НачальноеЗначениеКолонки = (а*ШиринаКолонки + 2 - ШиринаКолонки + 1);
				КонечноеЗначениеКолонки = ОбшаяШиринаНедели+2;
			КонецЕсли;
		Иначе
			НачальноеЗначениеКолонки = (а*ШиринаКолонки + 2 - ШиринаКолонки + 1);
			КонечноеЗначениеКолонки = (а*ШиринаКолонки + 2);
		КонецЕсли; 
		
		ОбластьНаименованияДняНедели = Таб.Область(1,НачальноеЗначениеКолонки,1,КонечноеЗначениеКолонки);
		ОбластьНаименованияДняНедели.Объединить();
		
		РазницаДней = а - ДеньНедели(ДатаКалендаря);
		ТекущаяДата = НачалоДня(ДатаКалендаря + РазницаДней*60*60*24);
		
		СтрокаДатыНедели = мТаблицаЯчеекИДатНедели.Добавить();
		СтрокаДатыНедели.ДатаНедели = ТекущаяДата;
		СтрокаДатыНедели.НомерНачальнойЯчейки = НачальноеЗначениеКолонки;
		СтрокаДатыНедели.НомерКонечнойЯчейки = КонечноеЗначениеКолонки;
		
		ОбластьДняНедели = Таб.Область(1,НачальноеЗначениеКолонки,1,КонечноеЗначениеКолонки);
		ОбластьДняНедели.Текст = ОпределитьДеньНедели(а) + Символы.ПС + Формат(ТекущаяДата,"ДФ='d MMMM'");
		ОбластьДняНедели.Шрифт = Новый Шрифт(,9,Ложь);
		ОбластьДняНедели.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ОбластьДняНедели.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ОбластьДняНедели.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
		ОбластьДняНедели.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		ОбластьДняНедели.Расшифровка = ТекущаяДата;
		ОбластьДняНедели.ГиперСсылка = Истина;
		
		ОбластьДняНедели.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		ОбластьДняНедели.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		ОбластьДняНедели.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		ОбластьДняНедели.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		
		ОбластьДняНедели.ЦветРамки = ЦветаСтиля.ЦветРамки;
		ОбластьДняНедели.ЦветТекста = ЦветаСтиля.ЦветРамки;
		
		// Выведем события
		
		СтруктураРабочегоВремени = мОпределитьНачалоИОкончениеРабочегоДняПользователя(ПользовательКалендаря, ТекущаяДата);
		
		ДатаНачалаРабочегоДня    = СтруктураРабочегоВремени.ДатаНачала;
		ДатаОкончанияРабочегоДня = СтруктураРабочегоВремени.ДатаОкончания;
		
		Если ДатаНачалаРабочегоДня = '00010101000000' И ДатаОкончанияРабочегоДня = '00010101235959' Тогда
			
			ОбластьРабочегоДня = Таб.Область(3,НачальноеЗначениеКолонки,НомерПоследнейЯчейкиНедели,КонечноеЗначениеКолонки);
			ОбластьРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			
		Иначе
			
			НачальнаяСтрокаРабочегоДня = УправлениеКонтактами.ВозвратитьНомерСтроки(Формат(ДатаНачалаРабочегоДня,"ДФ=Ч"), Формат(ДатаНачалаРабочегоДня,"ДФ=м"), ДатаКалендаря, Истина, ДатаКалендаря)+2;
			Если Формат(ДатаНачалаРабочегоДня,"ДФ=Ч") = Формат(ДатаОкончанияРабочегоДня,"ДФ=Ч") И Формат(ДатаНачалаРабочегоДня,"ДФ=м") = Формат(ДатаОкончанияРабочегоДня,"ДФ=м") Тогда
				КонечнаяСтрокаРабочегоДня  = НачальнаяСтрокаРабочегоДня;
			Иначе
				КонечнаяСтрокаРабочегоДня = УправлениеКонтактами.ВозвратитьНомерСтроки(Формат(ДатаОкончанияРабочегоДня,"ДФ=Ч"), Формат(ДатаОкончанияРабочегоДня,"ДФ=м"), ДатаКалендаря, Ложь, ДатаКалендаря)+2;
			КонецЕсли; 
			
			ОбластьДоРабочегоДня = Таб.Область(3,НачальноеЗначениеКолонки,(НачальнаяСтрокаРабочегоДня - 1)-СмещениеОтНачалаПервойЯчейкиДня,КонечноеЗначениеКолонки);
			ОбластьДоРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			
			ОбластьРабочегоДня = Таб.Область(НачальнаяСтрокаРабочегоДня-СмещениеОтНачалаПервойЯчейкиДня,НачальноеЗначениеКолонки,КонечнаяСтрокаРабочегоДня-СмещениеОтНачалаПервойЯчейкиДня,КонечноеЗначениеКолонки);
			ОбластьРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
			
			Если КонечнаяСтрокаРабочегоДня < НомерПоследнейЯчейкиНедели+СмещениеОтНачалаПервойЯчейкиДня Тогда
				ОбластьПослеРабочегоДня = Таб.Область((КонечнаяСтрокаРабочегоДня + 1)-СмещениеОтНачалаПервойЯчейкиДня,НачальноеЗначениеКолонки,НомерПоследнейЯчейкиНедели,КонечноеЗначениеКолонки);
				ОбластьПослеРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			КонецЕсли; 
			
		КонецЕсли; 
		
		ОбластьДоРабочегоДняПоследняяКолонка = Таб.Область(3,КонечноеЗначениеКолонки,НомерПоследнейЯчейкиНедели,КонечноеЗначениеКолонки);
		ОбластьДоРабочегоДняПоследняяКолонка.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		
		РисункиТабличногоДокумента = Таб.Рисунки;
		
		ЗначениеРеквизитаДняНедели = ОбработкаОбъект["СобытияНедели_День" + Строка(а)];
		Если ТипЗнч(ЗначениеРеквизитаДняНедели) = Тип("Структура") Тогда
			
			СписокЗначенийВремен = ЗначениеРеквизитаДняНедели.РасположениеСобытий;
			ТаблицаСобытий       = ТаблицаТаблицСделок[а-1].ТаблицаСобытий;
			
			ОбщееКоличествоЯчеек = КонечноеЗначениеКолонки - НачальноеЗначениеКолонки + 1;
			
			// определим колонки для таблицы событий (независимо от диапозона показа)
			Для я = 0 По 47 Цикл
				
				ПоследнийСтолбец = НачальноеЗначениеКолонки - 1;
				
				СписокТекущихДокументов = СписокЗначенийВремен.Получить(я).Значение;
				
				Для каждого ТекДокумент Из СписокТекущихДокументов Цикл
					
					СтрокаТаблицыДокументов = ТаблицаСобытий.Найти(ТекДокумент.Значение, "Документ");
					Если СтрокаТаблицыДокументов <> Неопределено Тогда
						ШиринаТекущегоДокумента = Цел(ОбщееКоличествоЯчеек/СтрокаТаблицыДокументов.КоличествоОдновременныхДокументов);
					Иначе
						ШиринаТекущегоДокумента = 0;
						Продолжить;
					КонецЕсли;
					
					Если (ПоследнийСтолбец + ШиринаТекущегоДокумента) = (ОбщееКоличествоЯчеек + 1) Тогда
						ШиринаТекущегоДокумента = ШиринаТекущегоДокумента + 1;
					ИначеЕсли (ПоследнийСтолбец + ШиринаТекущегоДокумента) = (ОбщееКоличествоЯчеек) Тогда
						ШиринаТекущегоДокумента = ШиринаТекущегоДокумента + 2;
					КонецЕсли; 
					
					Если ШиринаТекущегоДокумента < 1 Тогда
						ШиринаТекущегоДокумента = 1;
					КонецЕсли; 
					
					Если СтрокаТаблицыДокументов.НомерНачальнойКолонки = 0 И СтрокаТаблицыДокументов.НомерКонечнойКолонки = 0 Тогда
						СтрокаТаблицыДокументов.НомерНачальнойКолонки = ПоследнийСтолбец + 1;
						СтрокаТаблицыДокументов.НомерКонечнойКолонки = ПоследнийСтолбец + ШиринаТекущегоДокумента;
					КонецЕсли;
					
					ПоследнийСтолбец = СтрокаТаблицыДокументов.НомерНачальнойКолонки - 1 + ШиринаТекущегоДокумента;
					
				КонецЦикла; 
				
			КонецЦикла;
			
			ИндексСтрокиТаблицы = 0;
			Пока 1 = 1 Цикл
				
				Если ИндексСтрокиТаблицы > ТаблицаСобытий.Количество() - 1 Тогда
					Прервать;
				КонецЕсли; 
				
				СтрокаТаблицы = ТаблицаСобытий[ИндексСтрокиТаблицы];
				
				Если СтрокаТаблицы.НомерНачальнойКолонки = 0 ИЛИ СтрокаТаблицы.НомерКонечнойКолонки = 0 Тогда
					ТаблицаСобытий.Удалить(СтрокаТаблицы);
				Иначе
					ИндексСтрокиТаблицы = ИндексСтрокиТаблицы + 1;
				КонецЕсли; 
				
			КонецЦикла; 
			
			ТаблицаСобытий.Сортировать("НомерКонечнойКолонки ВОЗР");
			
			Для каждого СтрокаТаблицы Из ТаблицаСобытий Цикл
				
				Если СтрокаТаблицы.НомерКонечнойКолонки > КонечноеЗначениеКолонки Тогда
					Прервать;
				КонецЕсли; 
				
				Если (СтрокаТаблицы.НомерНачальнойСтроки + СтрокаТаблицы.НомерНачальнойКолонки + СтрокаТаблицы.НомерКонечнойСтроки + СтрокаТаблицы.НомерКонечнойКолонки) = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
				ПерваяСтрокаОбласти    = (СтрокаТаблицы.НомерНачальнойСтроки + 2)-СмещениеОтНачалаПервойЯчейкиДня;
				ПоследняяСтрокаОбласти = (СтрокаТаблицы.НомерКонечнойСтроки + 2)-СмещениеОтНачалаПервойЯчейкиДня;
				Если ПерваяСтрокаОбласти < 3 Тогда
					ВерхняяСтрокаНевидимойОбластиНедели = Мин(СтрокаТаблицы.НомерНачальнойСтроки,ВерхняяСтрокаНевидимойОбластиНедели);
					УказатьНаличиеНевидимыхСобытий(Таб,РисункиТабличногоДокумента,"Верх",2,2,НачальноеЗначениеКолонки,КонечноеЗначениеКолонки); 
					Если ПоследняяСтрокаОбласти < 3 Тогда
						Продолжить;
					Иначе
						ПерваяСтрокаОбласти = 3;
					КонецЕсли;
				ИначеЕсли ПерваяСтрокаОбласти > НомерПоследнейЯчейкиНедели Тогда
					НижняяСтрокаНевидимойОбластиНедели = Макс(СтрокаТаблицы.НомерКонечнойСтроки,НижняяСтрокаНевидимойОбластиНедели);
					УказатьНаличиеНевидимыхСобытий(Таб,РисункиТабличногоДокумента,"Низ",2,2,НачальноеЗначениеКолонки,КонечноеЗначениеКолонки); 
					Продолжить;
				КонецЕсли;
				
				Если ПоследняяСтрокаОбласти > НомерПоследнейЯчейкиНедели Тогда
					НижняяСтрокаНевидимойОбластиНедели = Макс(СтрокаТаблицы.НомерКонечнойСтроки,НижняяСтрокаНевидимойОбластиНедели);
					УказатьНаличиеНевидимыхСобытий(Таб,РисункиТабличногоДокумента,"Низ",2,2,НачальноеЗначениеКолонки,КонечноеЗначениеКолонки);  
					ПоследняяСтрокаОбласти = НомерПоследнейЯчейкиНедели;
				КонецЕсли;
				
				ТекОбласть = Таб.Область(ПерваяСтрокаОбласти, СтрокаТаблицы.НомерНачальнойКолонки, ПоследняяСтрокаОбласти, СтрокаТаблицы.НомерКонечнойКолонки);
				
				ТекстЯчейки = "";
				Если ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.Событие") Тогда
					
					ТекстЯчейки = ТекстЯчейки + Формат(СтрокаТаблицы.ДатаНачалаСобытия, "ДФ=ЧЧ:мм") + " - " + Формат(СтрокаТаблицы.ДатаКонцаСобытия, "ДФ=ЧЧ:мм");
					Если ЗначениеЗаполнено(СтрокаТаблицы.КонтактноеЛицо) Тогда
						Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
							ТекстЯчейки = ТекстЯчейки + Символы.ПС;
						КонецЕсли; 
						ТекстЯчейки = ТекстЯчейки + Строка(СтрокаТаблицы.КонтактноеЛицо);
					КонецЕсли;
					Если НЕ ПустаяСтрока(СтрокаТаблицы.ОписаниеСобытия) Тогда
						Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
							ТекстЯчейки = ТекстЯчейки + Символы.ПС;
						КонецЕсли;
						ТекстЯчейки = ТекстЯчейки + СокрЛП(СтрокаТаблицы.ОписаниеСобытия);
					КонецЕсли; 
					
					Если ПользовательКалендаря.Количество()>1 Тогда
						ТекстЯчейки = ТекстЯчейки + ", "+ СтрокаТаблицы.Документ.Ответственный;
					КонецЕсли;
					
				КонецЕсли; 
				
				ТекОбласть.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
				ТекОбласть.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
				ТекОбласть.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
				ТекОбласть.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
				ТекОбласть.Объединить();
				ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
				ТекОбласть.ЦветФона = Новый Цвет;
				
				ТекОбласть.Текст = ТекстЯчейки;
				ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
				ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
				ТекОбласть.ПоВыделеннымКолонкам = Истина;
				ТекОбласть.Расшифровка = СтрокаТаблицы.Документ;
				
				Если СтрокаТаблицы.Важность = Перечисления.Важность.Высокая Тогда
					ТекОбласть.ЦветТекста = WebЦвета.Красный;
				КонецЕсли;
				Если СтрокаТаблицы.СостояниеСобытия <> Перечисления.СостоянияСобытий.Запланировано Тогда
					ТекОбласть.ЦветФона = WebЦвета.Перламутровый;
					ТекОбласть.ЦветТекста = WebЦвета.Серый;
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЕсли; 
		
		Если НачалоДня(ТекущаяДата)=НачалоДня(ТекущаяДата()) Тогда
			ТекущийЧас = Час(ТекущаяДата());
			СтрокаТекущегоЧаса = ТекущийЧас*2+1+2-СмещениеОтНачалаПервойЯчейкиДня+?(Минута(ТекущаяДата())>29,1,0);
			
			Если СтрокаТекущегоЧаса <= НомерПоследнейЯчейкиНедели Тогда
				Таб.Область(СтрокаТекущегоЧаса,2,Мин(СтрокаТекущегоЧаса+1,НомерПоследнейЯчейкиНедели),2).ЦветФона = WebЦвета.Бежевый;
				Таб.Область(СтрокаТекущегоЧаса,НачальноеЗначениеКолонки,Мин(СтрокаТекущегоЧаса+1,НомерПоследнейЯчейкиНедели),КонечноеЗначениеКолонки).ЦветФона = WebЦвета.Бежевый;
			КонецЕсли;
			
			ОбластьДняНедели.ЦветФона = WebЦвета.Бежевый;
		Иначе
			ОбластьДняНедели.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
		КонецЕсли;
		
	КонецЦикла;
	
	Таб.ТолькоПросмотр = Истина;
	Таб.ФиксацияСлева = (ОбшаяШиринаНедели + 2);
	Таб.ФиксацияСверху = 2;
	Таб.Показать();
	
	мБылоПервоеЗаполнениеНедели = Истина;
	
КонецПроцедуры

// Процедура заполняет данными поле табличного документа ПолеТабличногоДокументаМесяц.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
Процедура ЗаполнитьТаблицуМесяца()
	
	Состояние(НСтр("ru='Заполняется таблица месяца ...';uk='Заповнюється таблиця місяця ...'"));
	
	Таб = ЭлементыФормы.ПолеТабличногоДокументаМесяц;
	Таб.Очистить();
	
	ШиринаТабличногоПоляМесяца = Таб.Ширина;
	
	ОбшаяШиринаМесяца = Цел(109*ШиринаТабличногоПоляМесяца/764);
	
	ШиринаКолонки = Цел(ОбшаяШиринаМесяца/КоличествоДнейНедели);
	
	Таб.Область(,1,,КоличествоДнейНедели).ШиринаКолонки = ШиринаКолонки;
	Таб.Область(1,,1,).ВысотаСтроки = 15;
	
	Если (ШиринаКолонки * КоличествоДнейНедели) <> ОбшаяШиринаМесяца Тогда
		Таб.Область(,КоличествоДнейНедели,,КоличествоДнейНедели).ШиринаКолонки = ОбшаяШиринаМесяца - (ШиринаКолонки * (КоличествоДнейНедели-1));
	КонецЕсли;
	
	ОбластьДнейНедели = Таб.Область(1,1,1,КоличествоДнейНедели);
	ОбластьДнейНедели.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
	ОбластьДнейНедели.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ОбластьДнейНедели.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ОбластьДнейНедели.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ОбластьДнейНедели.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	ОбластьДнейНедели.ЦветРамки = ЦветаСтиля.ЦветРамки;
	ОбластьДнейНедели.ЦветТекста = ЦветаСтиля.ЦветРамки;
	
	Для а = 1 По КоличествоДнейНедели Цикл
		
		ОбластьДняНедели = Таб.Область(1,а,1,а);
		ОбластьДняНедели.Текст = ОпределитьДеньНедели(а);
		ОбластьДняНедели.Шрифт = Новый Шрифт(,10,Истина);
		ОбластьДняНедели.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ОбластьДняНедели.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ОбластьДняНедели.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
		ОбластьДняНедели.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		
	КонецЦикла;
	
	ВысотаСтроки = Цел(50*(Таб.Высота-30)/(359-30));
	
	ПервыйДеньНеделиМесяца = ДеньНедели(ДатаНачалаМесяцаЗапроса);
	Если ПервыйДеньНеделиМесяца > 1 Тогда
		ПерваяДатаМесяца = ДатаНачалаМесяцаЗапроса - (ПервыйДеньНеделиМесяца - 1)*60*60*24;
	Иначе
		ПерваяДатаМесяца = ДатаНачалаМесяцаЗапроса;
	КонецЕсли;
	
	ТаблицаСобытияЗаказы = Новый ТаблицаЗначений();
	ТаблицаСобытияЗаказы.Колонки.Добавить("ДатаДокумента");
	ТаблицаСобытияЗаказы.Колонки.Добавить("СтрокаДокументов");
	ТаблицаСобытияЗаказы.Индексы.Добавить("ДатаДокумента");
	
	Для каждого СтрокаДанных Из ДанныеМесяца Цикл
		
		НайденнаяСтрока = ТаблицаСобытияЗаказы.Найти(НачалоДня(СтрокаДанных.Дата), "ДатаДокумента");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = ТаблицаСобытияЗаказы.Добавить();
			НайденнаяСтрока.ДатаДокумента = НачалоДня(СтрокаДанных.Дата);
			НайденнаяСтрока.СтрокаДокументов = "";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(НайденнаяСтрока.СтрокаДокументов) Тогда
			НайденнаяСтрока.СтрокаДокументов = НайденнаяСтрока.СтрокаДокументов + Символы.ПС;
		КонецЕсли; 
		
		Если ТипЗнч(СтрокаДанных.Документ) = Тип("ДокументСсылка.Событие") Тогда
			НайденнаяСтрока.СтрокаДокументов = НайденнаяСтрока.СтрокаДокументов + Формат(СтрокаДанных.ДатаНачалаСобытия, "ДФ=ЧЧ:мм") + " - " + Формат(СтрокаДанных.ДатаКонцаСобытия, "ДФ=ЧЧ:мм");
			Если ЗначениеЗаполнено(СтрокаДанных.КонтактноеЛицо) Тогда
				НайденнаяСтрока.СтрокаДокументов = НайденнаяСтрока.СтрокаДокументов + ", " + СокрЛП(СтрокаДанных.КонтактноеЛицо);
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
	ТекущаяДата = ПерваяДатаМесяца;
	
	Для Строка = 1 По 5 Цикл
		
		Для Колонка = 1 По КоличествоДнейНедели Цикл
			
			ОбластьЧислоДня = Таб.Область((Строка*2),Колонка,(Строка*2),Колонка);
			ОбластьЧислоДня.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьЧислоДня.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьЧислоДня.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьЧислоДня.ЦветРамки = ЦветаСтиля.ЦветРамки;
			ОбластьЧислоДня.ВысотаСтроки = 11;
			
			ОбластьЧислоДня.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			ОбластьЧислоДня.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			ОбластьЧислоДня.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
			ОбластьЧислоДня.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ОбластьЧислоДня.Расшифровка = ТекущаяДата;
			
			ОбластьПоляДня = Таб.Область((Строка*2 + 1),Колонка,(Строка*2 + 1),Колонка);
			ОбластьПоляДня.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьПоляДня.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьПоляДня.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьПоляДня.ЦветРамки = ЦветаСтиля.ЦветРамки;
			ОбластьПоляДня.ВысотаСтроки = ВысотаСтроки - 11;
			ОбластьПоляДня.Расшифровка = ТекущаяДата;
			ОбластьПоляДня.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
			
			ОбластьПоляДня.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			ОбластьПоляДня.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
			ОбластьПоляДня.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			
			НайденнаяСтрокаСобытияИЗаказы = ТаблицаСобытияЗаказы.Найти(ТекущаяДата, "ДатаДокумента");
			
			ОбластьПоляДня.Текст = ?(НайденнаяСтрокаСобытияИЗаказы = Неопределено, "", НайденнаяСтрокаСобытияИЗаказы.СтрокаДокументов);
			
			Если НачалоДня(ТекущаяДата) = НачалоДня(ТекущаяДата()) Тогда
				
				ОбластьЧислоДня.Шрифт = Новый Шрифт(,,Истина);
				ОбластьЧислоДня.ЦветФона = WebЦвета.Бежевый;
				ОбластьЧислоДня.ГраницаСнизу =  Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
				
				ОбластьПоляДня.ЦветФона = Новый Цвет;
				
				ОбластьПоляДня.ЦветТекста = Новый Цвет;
				
				СтрокаДатыДня = СокрЛП(Формат(ТекущаяДата,"ДФ=d"));
				ОбластьЧислоДня.Текст = СокрЛП(Формат(ТекущаяДата,"ДФ=d"));
				
			Иначе
				
				Если Месяц(ТекущаяДата) <> Месяц(ДатаНачалаМесяцаЗапроса) Тогда
					ОбластьЧислоДня.ЦветФона = WebЦвета.Перламутровый;
					ОбластьЧислоДня.ЦветТекста = WebЦвета.Серый;
					ОбластьЧислоДня.Текст = СокрЛП(Формат(ТекущаяДата,"ДФ=dd.MM.yyyy"));
					ОбластьЧислоДня.Шрифт = Новый Шрифт(,,Ложь);
					СтрокаДатыДня = СокрЛП(Формат(ТекущаяДата,"ДФ=dd.MM.yyyy"));
					
					ОбластьПоляДня.ЦветФона = WebЦвета.Перламутровый;
					ОбластьПоляДня.ЦветТекста = WebЦвета.Серый;
				Иначе
					
					Если Колонка = 6 ИЛИ Колонка = 7 Тогда
						ОбластьЧислоДня.ЦветФона = WebЦвета.ГолубойСКраснымОттенком;
						ОбластьПоляДня.ЦветФона = WebЦвета.ГолубойСКраснымОттенком;
					Иначе
						ОбластьЧислоДня.ЦветФона = Новый Цвет;
						ОбластьПоляДня.ЦветФона = Новый Цвет;
					КонецЕсли; 
					
					ОбластьЧислоДня.ЦветТекста = Новый Цвет;
					ОбластьЧислоДня.Текст = СокрЛП(Формат(ТекущаяДата,"ДФ=d"));
					ОбластьЧислоДня.Шрифт = Новый Шрифт(,,Ложь);
					СтрокаДатыДня = СокрЛП(Формат(ТекущаяДата,"ДФ=d"));
					
					ОбластьПоляДня.ЦветТекста = Новый Цвет;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТекущаяДата = ОпределитьСледующуюДата(ТекущаяДата);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Таб.ФиксацияСверху = 11;
	Таб.ФиксацияСлева = КоличествоДнейНедели;
	Таб.ТолькоПросмотр = Истина;
	Таб.Показать();
	
КонецПроцедуры

// Функция определяет следующую дату за текущей в зависимости от
//  настроенного количества дней в недели для отображения в календаре
//
// Параметры
//  ТекущаяДата - Дата, текущая дата
//
// Возвращаемое значение:
//   Дата - следующая дата
//
Функция ОпределитьСледующуюДата(ТекущаяДата)
	
	Если КоличествоДнейНедели = 7 Тогда
		Возврат ТекущаяДата + 60*60*24;
	ИначеЕсли КоличествоДнейНедели = 6 Тогда
		Если ДеньНедели(ТекущаяДата) = 6 Тогда
			Возврат ТекущаяДата + 60*60*24*2;
		Иначе
			Возврат ТекущаяДата + 60*60*24;
		КонецЕсли; 
	ИначеЕсли КоличествоДнейНедели = 5 Тогда
		Если ДеньНедели(ТекущаяДата) = 5 Тогда
			Возврат ТекущаяДата + 60*60*24*3;
		ИначеЕсли ДеньНедели(ТекущаяДата) = 6 Тогда
			Возврат ТекущаяДата + 60*60*24*2;
		Иначе
			Возврат ТекущаяДата + 60*60*24;
		КонецЕсли; 
	КонецЕсли; 
	
КонецФункции // ОпределитьСледующуюДата()

// Процедура восстанавливает сохраненные в профайле значения пользователя..
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
Процедура ПрочитатьСохраненныеЗначенияПользователя()
	
	ОграничитьВремяС  = "";
	ОграничитьВремяПо = "";
	
	СохраненныеЗначения = ВосстановитьЗначение("КалендарьПользователя");
	Если СохраненныеЗначения <> Неопределено И ТипЗнч(СохраненныеЗначения) = Тип("Структура") Тогда
		СохраненныеЗначения.Свойство("КоличествоДнейНаЗакладкеДень", КоличествоДнейНаЗакладкеДень);
		СохраненныеЗначения.Свойство("КоличествоДнейНедели", КоличествоДнейНедели);
		СохраненныеЗначения.Свойство("ОтображатьЗапланированныеСобытия", ОтображатьЗапланированныеСобытия);
		СохраненныеЗначения.Свойство("ТипСобытияКалендаря", ТипСобытияКалендаря);
		СохраненныеЗначения.Свойство("ОтображаемыеЗаказы", ОтображаемыеЗаказы);
		СохраненныеЗначения.Свойство("ОграничитьВремя", ОграничитьВремя);
		СохраненныеЗначения.Свойство("ОграничитьВремяС", ОграничитьВремяС);
		СохраненныеЗначения.Свойство("ОграничитьВремяПо", ОграничитьВремяПо);
		СохраненныеЗначения.Свойство("ОтображатьЗанятостьПомещений", ОтображатьЗанятостьПомещений);
		СохраненныеЗначения.Свойство("ПользовательКалендаря", ПользовательКалендаря);
	КонецЕсли; 
	
	Если ПользовательКалендаря.Количество()=0 Тогда
		ПользовательКалендаря.Добавить(глЗначениеПеременной("глТекущийПользователь"));
		ОсновнойОтветственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
		Если ЗначениеЗаполнено(ОсновнойОтветственный) И ОсновнойОтветственный <> глЗначениеПеременной("глТекущийПользователь") Тогда
			ПользовательКалендаря.Добавить(ОсновнойОтветственный);
		КонецЕсли;
	КонецЕсли;
	
	МассивЗначенийОтбора = Новый Массив;
	МассивЗначенийОтбора.Добавить(ВидСравнения.ВСписке);
	МассивЗначенийОтбора.Добавить(ПользовательКалендаря);
	СтруктураОтборов.Вставить("Пользователь", МассивЗначенийОтбора);
	
	Если КоличествоДнейНаЗакладкеДень = 0 Тогда
		КоличествоДнейНаЗакладкеДень  = 2;
	КонецЕсли; 
	
	Если КоличествоДнейНедели = 0 Тогда
		КоличествоДнейНедели = 7;
	КонецЕсли; 
	
	Если ОтображаемыеЗаказы = 0 Тогда
		ОтображаемыеЗаказы = 3;
	КонецЕсли; 
	
	Если ОграничитьВремя Тогда
		//СтруктураРабочегоВремени 	= мОпределитьНачалоИОкончениеРабочегоДняПользователя(глЗначениеПеременной("глТекущийПользователь"),ДатаКалендаря);
		//
		//ДатаНачалаРабочегоДня    	= СтруктураРабочегоВремени.ДатаНачала;
		//ДатаОкончанияРабочегоДня 	= СтруктураРабочегоВремени.ДатаОкончания;
		
		// ограничиваем или по выбранному времени, или по времени начала рабочего дня, или с начала дня (0 часов)
		Если ОграничитьВремяС <> Дата('00010101000000') Тогда
			ЧасНачалаРабочегоДня 		= Час(ОграничитьВремяС);
			//ИначеЕсли ДатаНачалаРабочегоДня <> Дата('00010101000000')  Тогда
			//	ЧасНачалаРабочегоДня 		= МАКС(0,Час(ДатаНачалаРабочегоДня)-1);
		Иначе
			ЧасНачалаРабочегоДня        = 0;	
		КонецЕсли;
		
		// ограничиваем или по выбранному времени, или по времени конца рабочего дня, или по конец дня(23 часа)	
		Если ОграничитьВремяПо <> Дата('00010101000000') Тогда
			ЧасОкончанияРабочегоДня 	= Час(ОграничитьВремяПо);
			//ИначеЕсли ДатаОкончанияРабочегоДня <> Дата('00010101000000')  Тогда
			//	ЧасОкончанияРабочегоДня 	= Час(ДатаОкончанияРабочегоДня);
		Иначе
			ЧасОкончанияРабочегоДня 	= 23;	
		КонецЕсли;
		
	Иначе
		ЧасНачалаРабочегоДня    	= 0;
		ЧасОкончанияРабочегоДня 	= 23;
	КонецЕсли;
	
	СмещениеОтНачалаПервойЯчейкиДня = ЧасНачалаРабочегоДня *2;
	НомерПоследнейЯчейкиДня         = ЧасОкончанияРабочегоДня*2+2;
	НомерПоследнейЯчейкиНедели      = НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня + 2;
	
	
КонецПроцедуры

// Процедура открывает форму нового документа событие.
//
// Параметры
//  Элемент - кнопка, по нажатию которой происходит действие
//
// Возвращаемое значение
//  НЕТ
// (процедура назначается через Действие)
Процедура ВвестиДокументСобытие(Элемент)
	
	ИндексСписка = Число(Сред(Элемент.Имя, 2));
	
	ВыбранныйЭлемент = мСписокДокументовДобавления.Получить(ИндексСписка);
	
	ОбъектСобытия = Документы.Событие.СоздатьДокумент();
	
	ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаДень.ТекущаяОбласть;
	Если ТекущаяОбласть <> Неопределено Тогда
		
		ОбъектСобытия.НачалоСобытия    = ОпределитьДатыОбластиДня(ТекущаяОбласть, Истина);
		ОбъектСобытия.ОкончаниеСобытия = ОпределитьДатыОбластиДня(ТекущаяОбласть, Ложь);
		
	КонецЕсли;
	
	ОбъектСобытия.ВидСобытия      = ВыбранныйЭлемент.Значение[0];
	ОбъектСобытия.ТипСобытия      = ВыбранныйЭлемент.Значение[1];
	ОбъектСобытия.ОписаниеСобытия = ТемаНовогоСобытия;
	ОбъектСобытия.Ответственный   = ПользовательКалендаря;
	
	ОбъектСобытия.ПолучитьФорму(,ЭтаФорма).Открыть();
	
	КнопкаФормы = ЭлементыФормы.ВвестиДокумент;
	
	КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент.Значение[0]));
	КнопкаФормы.Подсказка = НСтр("ru='Ввести новое ';uk='Ввести нове '") + ВыбранныйЭлемент.Значение[1] + НСтр("ru=' событие -  ';uk=' подія '") + ВыбранныйЭлемент.Значение[0];
	КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент.Значение[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
	
	КнопкаФормы = ЭлементыФормы.ВвестиДокументНеделя;
	
	КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент.Значение[0]));
	КнопкаФормы.Подсказка = НСтр("ru='Ввести новое ';uk='Ввести нове '") + ВыбранныйЭлемент.Значение[1] + НСтр("ru=' событие -  ';uk=' подія '") + ВыбранныйЭлемент.Значение[0];
	КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент.Значение[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
	
	мМассивЗначенийБыстрогоСобытия = Новый Массив;
	мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент.Значение[0]);
	мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент.Значение[1]);
	
КонецПроцедуры

// Процедура открывает форму нового документа событие.
//
// Параметры
//  Элемент - кнопка, по нажатию которой происходит действие
//
// Возвращаемое значение
//  НЕТ
// (процедура назначается через Действие)
Процедура ВвестиДокументСобытиеНеделя(Элемент)
	
	ИндексСписка = Число(Сред(Элемент.Имя, 2));
	
	ВыбранныйЭлемент = мСписокДокументовДобавления.Получить(ИндексСписка);
	
	ОбъектСобытия = Документы.Событие.СоздатьДокумент();
	
	ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаНеделя.ТекущаяОбласть;
	Если ТекущаяОбласть <> Неопределено Тогда
		
		ОбъектСобытия.НачалоСобытия = ОпределитьДатыОбластиНедели(ТекущаяОбласть, Истина);
		ОбъектСобытия.ОкончаниеСобытия = ОпределитьДатыОбластиНедели(ТекущаяОбласть, Ложь);
		
	КонецЕсли;
	
	ОбъектСобытия.ВидСобытия = ВыбранныйЭлемент.Значение[0];
	ОбъектСобытия.ТипСобытия = ВыбранныйЭлемент.Значение[1];
	ОбъектСобытия.ОписаниеСобытия = ТемаНовогоСобытия;
	ОбъектСобытия.Ответственный   = ПользовательКалендаря;
	
	ОбъектСобытия.ПолучитьФорму(,ЭтаФорма).Открыть();
	
	КнопкаФормы = ЭлементыФормы.ВвестиДокумент;
	
	КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент.Значение[0]));
	КнопкаФормы.Подсказка = НСтр("ru='Ввести новое ';uk='Ввести нове '") + ВыбранныйЭлемент.Значение[1] + НСтр("ru=' событие -  ';uk=' подія '") + ВыбранныйЭлемент.Значение[0];
	КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент.Значение[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
	
	КнопкаФормы = ЭлементыФормы.ВвестиДокументНеделя;
	
	КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент.Значение[0]));
	КнопкаФормы.Подсказка = НСтр("ru='Ввести новое ';uk='Ввести нове '") + ВыбранныйЭлемент.Значение[1] + НСтр("ru=' событие -  ';uk=' подія '") + ВыбранныйЭлемент.Значение[0];
	КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент.Значение[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
	
	мМассивЗначенийБыстрогоСобытия = Новый Массив;
	мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент.Значение[0]);
	мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент.Значение[1]);
	
КонецПроцедуры

// Процедура открывает форму нового документа событие из контакстного меню мокселя.
//
// Параметры
//  Элемент - кнопка, по нажатию которой происходит действие
//
// Возвращаемое значение
//  НЕТ
Процедура ВвестиДокументСобытиеИзМокселя(Элемент = Неопределено)
	
	Если ТипЗнч(ЭтаФорма.ТекущийЭлемент) <> Тип("ПолеТабличногоДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСобытия = Документы.Событие.СоздатьДокумент();
	
	ТекущаяОбласть = ЭтаФорма.ТекущийЭлемент.ТекущаяОбласть;
	
	Если Элемент <> Неопределено Тогда
		ИндексСписка = Число(Сред(Элемент.Имя, 2));
		ВыбранныйЭлемент = мСписокДокументовДобавления.Получить(ИндексСписка);
		ОбъектСобытия.ВидСобытия      = ВыбранныйЭлемент.Значение[0];
		ОбъектСобытия.ТипСобытия      = ВыбранныйЭлемент.Значение[1];
		
		КнопкаФормы = ЭлементыФормы.ВвестиДокумент;
		
		КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент.Значение[0]));
		КнопкаФормы.Подсказка = НСтр("ru='Ввести новое ';uk='Ввести нове '") + ВыбранныйЭлемент.Значение[1] + НСтр("ru=' событие -  ';uk=' подія '") + ВыбранныйЭлемент.Значение[0];
		КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент.Значение[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
		
		КнопкаФормы = ЭлементыФормы.ВвестиДокументНеделя;
		
		КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент.Значение[0]));
		КнопкаФормы.Подсказка = НСтр("ru='Ввести новое ';uk='Ввести нове '") + ВыбранныйЭлемент.Значение[1] + НСтр("ru=' событие -  ';uk=' подія '") + ВыбранныйЭлемент.Значение[0];
		КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент.Значение[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
		
		мМассивЗначенийБыстрогоСобытия = Новый Массив;
		мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент.Значение[0]);
		мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент.Значение[1]);
		
	КонецЕсли; 
	
	Если ТекущаяОбласть <> Неопределено Тогда
		Если ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПолеТабличногоДокументаНеделя Тогда
			ОбъектСобытия.НачалоСобытия = ОпределитьДатыОбластиНедели(ТекущаяОбласть, Истина);
			ОбъектСобытия.ОкончаниеСобытия = ОпределитьДатыОбластиНедели(ТекущаяОбласть, Ложь);
		Иначе
			ОбъектСобытия.НачалоСобытия = ОпределитьДатыОбластиДня(ТекущаяОбласть, Истина);
			ОбъектСобытия.ОкончаниеСобытия = ОпределитьДатыОбластиДня(ТекущаяОбласть, Ложь);
			Если ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПолеТабличногоДокументаДеньВторой И ТекущаяОбласть.Лево > ОбщаяШиринаДня+3 Тогда
				ОбъектСобытия.НачалоСобытия = ОбъектСобытия.НачалоСобытия + 60*60*24;
				ОбъектСобытия.ОкончаниеСобытия = ОбъектСобытия.ОкончаниеСобытия + 60*60*24;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	ОбъектСобытия.ОписаниеСобытия = ТемаНовогоСобытия;
	ОбъектСобытия.Ответственный   = ПользовательКалендаря;
	
	ОбъектСобытия.ПолучитьФорму(,ЭтаФорма).Открыть();
	
КонецПроцедуры

// Функция определяет по области ячеек табличного документа
//  дату начала и дату окончания данной области в ПолеТабличногоДокументаДень.
//
// Параметры
//  ТекущаяОбласть - Область ячеек табличного документа.
//  Начало - Булево, признак определения даты начала или окончания.
//
// Возвращаемое значение:
//   Дата
//
Функция ОпределитьДатыОбластиДня(ТекущаяОбласть, Начало)
	
	СтрокаДаты = СтрЗаменить((Строка(Год(ДатаКалендаря))),Символ(160),"");
	
	МесяцКалендаря = ?(Месяц(ДатаКалендаря) < 10, ("0" + Строка(Месяц(ДатаКалендаря))), Строка(Месяц(ДатаКалендаря)));
	СтрокаДаты = СтрокаДаты + МесяцКалендаря;
	
	ДеньКалендаря = ?(День(ДатаКалендаря)<10, ("0" + Строка(День(ДатаКалендаря))), Строка(День(ДатаКалендаря)));
	СтрокаДаты = СтрокаДаты + ДеньКалендаря;
	
	Если Начало Тогда
		Верх = ТекущаяОбласть.Верх+СмещениеОтНачалаПервойЯчейкиДня;
		Если Верх > НомерПоследнейЯчейкиДня Тогда
			Возврат КонецДня(ДатаКалендаря);
		ИначеЕсли Верх = НомерПоследнейЯчейкиДня Тогда
			Возврат (КонецДня(ДатаКалендаря) - 60 * 30 + 1);
		ИначеЕсли Верх <= 1 Тогда
			Возврат НачалоДня(ДатаКалендаря);
		Иначе
			Если ((Верх-1)/2) = Цел(((Верх-1)/2)) Тогда
				ЧислоЧаса = (Верх-1)/2;
				СтрокаДаты = СтрокаДаты + ?(ЧислоЧаса<10, ("0"+Строка(ЧислоЧаса)),(Строка(ЧислоЧаса))) + "0000";
				Возврат Дата(СтрокаДаты);
			Иначе
				ЧислоЧаса = Цел((Верх-1)/2);
				СтрокаДаты = СтрокаДаты + ?(ЧислоЧаса<10, ("0"+Строка(ЧислоЧаса)),(Строка(ЧислоЧаса))) + "3000";
				Возврат Дата(СтрокаДаты);
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Низ = ТекущаяОбласть.Низ+СмещениеОтНачалаПервойЯчейкиДня;
		Если Низ >= НомерПоследнейЯчейкиДня Тогда
			Возврат КонецДня(ДатаКалендаря);
		ИначеЕсли Низ < 1 Тогда
			Возврат НачалоДня(ДатаКалендаря);
		ИначеЕсли Низ = 1 Тогда
			Возврат (НачалоДня(ДатаКалендаря) + 60 * 30);
		Иначе
			Если (Низ/2) = Цел((Низ)/2) Тогда
				ЧислоЧаса = Низ/2;
				СтрокаДаты = СтрокаДаты + ?(ЧислоЧаса<10, ("0"+Строка(ЧислоЧаса)),(Строка(ЧислоЧаса))) + "0000";
				Возврат Дата(СтрокаДаты);
			Иначе
				ЧислоЧаса = Цел(Низ/2);
				СтрокаДаты = СтрокаДаты + ?(ЧислоЧаса<10, ("0"+Строка(ЧислоЧаса)),(Строка(ЧислоЧаса))) + "3000";
				Возврат Дата(СтрокаДаты);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
КонецФункции

// Функция определяет по области ячеек табличного документа
//  дату начала и дату окончания данной области в ПолеТабличногоДокументаНеделя.
//
// Параметры
//  ТекущаяОбласть - Область ячеек табличного документа.
//  Начало - Булево, признак определения даты начала или окончания.
//
// Возвращаемое значение:
//   Дата
//
Функция ОпределитьДатыОбластиНедели(ТекущаяОбласть, Начало)
	
	ТекущаяДата = ДатаКалендаря;
	
	Для каждого СтрокаТаблицы Из мТаблицаЯчеекИДатНедели Цикл
		Если Начало Тогда
			Если ТекущаяОбласть.Лево >= СтрокаТаблицы.НомерНачальнойЯчейки И ТекущаяОбласть.Лево <= СтрокаТаблицы.НомерКонечнойЯчейки Тогда
				ТекущаяДата = СтрокаТаблицы.ДатаНедели;
				Прервать;
			КонецЕсли;
		Иначе
			Если ТекущаяОбласть.Право >= СтрокаТаблицы.НомерНачальнойЯчейки И ТекущаяОбласть.Право <= СтрокаТаблицы.НомерКонечнойЯчейки Тогда
				ТекущаяДата = СтрокаТаблицы.ДатаНедели;
				Прервать;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
	СтрокаДаты = СтрЗаменить((Строка(Год(ТекущаяДата))),Символ(160),"");
	
	МесяцКалендаря = ?(Месяц(ТекущаяДата) < 10, ("0" + Строка(Месяц(ТекущаяДата))), Строка(Месяц(ТекущаяДата)));
	СтрокаДаты = СтрокаДаты + МесяцКалендаря;
	
	ДеньКалендаря = ?(День(ТекущаяДата)<10, ("0" + Строка(День(ТекущаяДата))), Строка(День(ТекущаяДата)));
	СтрокаДаты = СтрокаДаты + ДеньКалендаря;
	
	Если Начало Тогда
		Верх = ТекущаяОбласть.Верх - 2 + СмещениеОтНачалаПервойЯчейкиДня;
		Если Верх > НомерПоследнейЯчейкиДня Тогда
			Возврат КонецДня(СтрокаДаты);
		ИначеЕсли Верх = НомерПоследнейЯчейкиДня Тогда
			Возврат (КонецДня(СтрокаДаты) - 60 * 30 + 1);
		ИначеЕсли Верх <= 1 Тогда
			Возврат НачалоДня(СтрокаДаты);
		Иначе
			Если ((Верх-1)/2) = Цел(((Верх-1)/2)) Тогда
				ЧислоЧаса = (Верх-1)/2;
				СтрокаДаты = СтрокаДаты + ?(ЧислоЧаса<10, ("0"+Строка(ЧислоЧаса)),(Строка(ЧислоЧаса))) + "0000";
				Возврат Дата(СтрокаДаты);
			Иначе
				ЧислоЧаса = Цел((Верх-1)/2);
				СтрокаДаты = СтрокаДаты + ?(ЧислоЧаса<10, ("0"+Строка(ЧислоЧаса)),(Строка(ЧислоЧаса))) + "3000";
				Возврат Дата(СтрокаДаты);
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Низ = ТекущаяОбласть.Низ - 2 + СмещениеОтНачалаПервойЯчейкиДня;
		Если Низ >= НомерПоследнейЯчейкиДня Тогда
			Возврат КонецДня(СтрокаДаты);
		ИначеЕсли Низ < 1 Тогда
			Возврат НачалоДня(СтрокаДаты);
		ИначеЕсли Низ = 1 Тогда
			Возврат (НачалоДня(СтрокаДаты) + 60 * 30);
		Иначе
			Если (Низ/2) = Цел((Низ)/2) Тогда
				ЧислоЧаса = Низ/2;
				СтрокаДаты = СтрокаДаты + ?(ЧислоЧаса<10, ("0"+Строка(ЧислоЧаса)),(Строка(ЧислоЧаса))) + "0000";
				Возврат Дата(СтрокаДаты);
			Иначе
				ЧислоЧаса = Цел(Низ/2);
				СтрокаДаты = СтрокаДаты + ?(ЧислоЧаса<10, ("0"+Строка(ЧислоЧаса)),(Строка(ЧислоЧаса))) + "3000";
				Возврат Дата(СтрокаДаты);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
КонецФункции // ОпределитьДатыОбластиНедели()

// Процедура меняет текущую страницу панели формы.
//
// Параметры
//  ИмяЗакладки - Строка, имя новой страницы
//
// Возвращаемое значение
//  НЕТ
Процедура УстановитьЗакладку(ИмяЗакладки)
	
	УстновитьВидимостьСтраницы(ЭлементыФормы.ПанельФормы.Страницы,ИмяЗакладки);
	
	Если ИмяЗакладки = "Неделя" И НЕ мБылоПервоеЗаполнениеНедели Тогда
		
		Если ОбновитьНеделю[2] Тогда
			СобратьДокументыНедели(ОтображатьЗапланированныеСобытия, ТипСобытияКалендаря, ОтображатьЗаказы, ОтображаемыеЗаказы, ОтображатьЗанятостьПомещений);
		КонецЕсли;
		ЗаполнитьТаблицуНедели();
		
		ОбновитьДень[1] = ДатаНачалаНедели;
		ОбновитьДень[2] = Ложь;
		
		ОбновитьНеделю[0] = Ложь;
		ОбновитьНеделю[1] = ДатаНачалаНедели;
		ОбновитьНеделю[2] = Ложь;
		
		ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы[ИмяЗакладки];
		
	Иначе
		
		ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы[ИмяЗакладки];
		
		ОбновитьИнформациюНаФорме();
		
	КонецЕсли; 
	
	СостояниеТулбараФормы();
	
КонецПроцедуры

// Процедура меняет свойства кнопок конмандной панели формы.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
Процедура СостояниеТулбараФормы()
	
	Для каждого Страница Из ЭлементыФормы.ПанельФормы.Страницы Цикл
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки[Страница.Имя].Пометка = (Страница = ЭлементыФормы.ПанельФормы.ТекущаяСтраница);
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается из обработчиков ПриИзменении элементов формы
//  ПолеКалендаря и ПолеКалендаряНеделя
//
// Параметры
//  Элемент - элемент формы ПолеКалендаря или ПолеКалендаряНеделя
//
// Возвращаемое значение
//  НЕТ
Процедура ПриИзмененииДатыКалендаря(Элемент)
	
	Если НачалоМесяца(Элемент.Значение) <> ДатаНачалаМесяцаЗапроса Тогда
		ДатаНачалаМесяцаЗапроса = НачалоМесяца(Элемент.Значение);
		ОбновитьМесяц[0] = Истина;
	КонецЕсли; 
	
	Если ДатаНачалаНедели <> НачалоНедели(Элемент.Значение) Тогда
		ДатаНачалаНедели = НачалоНедели(Элемент.Значение);
		ОбновитьНеделю[0] = Истина;
	КонецЕсли; 
	
	ОбновитьДень[0] = Истина;
	
	ОбновитьИнформациюНаФорме();
	
КонецПроцедуры

// Процедура вызывается из из различных процедур и проверяет а при необходимости
//  производит обновление информации календаря и списка сделок
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
Процедура ОбновитьИнформациюНаФорме()
	
	Если ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.Список Тогда
		Если ОбновитьСписок[0] Тогда
			ОбновитьЗаказыСобытия(ОбновитьСписок[1]);
		КонецЕсли;
		ОбновитьСписок[0] = Ложь;
		ОбновитьСписок[1] = Истина;
	ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.День Тогда
		Если ОбновитьДень[0] Тогда
			Если НачалоНедели(ОбновитьДень[1]) <> ДатаНачалаНедели ИЛИ ОбновитьДень[2] Тогда
				СобратьДокументыНедели(ОтображатьЗапланированныеСобытия, ТипСобытияКалендаря, ОтображатьЗаказы, ОтображаемыеЗаказы, ОтображатьЗанятостьПомещений);
				ОбновитьНеделю[1] = ДатаНачалаНедели;
				ОбновитьНеделю[2] = Ложь;
			КонецЕсли;
			ЗаполнитьТаблицуДня();
		КонецЕсли;
		ОбновитьДень[0] = Ложь;
		ОбновитьДень[1] = НачалоДня(ДатаКалендаря);
		ОбновитьДень[2] = Ложь;
	ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.Неделя Тогда
		Если ОбновитьНеделю[0] Тогда
			Если ОбновитьНеделю[1] <> ДатаНачалаНедели ИЛИ ОбновитьНеделю[2] Тогда
				СобратьДокументыНедели(ОтображатьЗапланированныеСобытия, ТипСобытияКалендаря, ОтображатьЗаказы, ОтображаемыеЗаказы, ОтображатьЗанятостьПомещений);
				ОбновитьДень[1] = ДатаНачалаНедели;
				ОбновитьДень[2] = Ложь;
			КонецЕсли;
			ЗаполнитьТаблицуНедели();
		КонецЕсли;
		ОбновитьНеделю[0] = Ложь;
		ОбновитьНеделю[1] = ДатаНачалаНедели;
		ОбновитьНеделю[2] = Ложь;
	ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.Месяц Тогда
		Если ОбновитьМесяц[0] Тогда
			Если ОбновитьМесяц[1] <> ДатаНачалаМесяцаЗапроса ИЛИ ОбновитьМесяц[2] Тогда
				СобратьДокументыМесяца(ОтображатьЗапланированныеСобытия, ТипСобытияКалендаря, ОтображатьЗаказы, ОтображаемыеЗаказы)
			КонецЕсли;
			ЗаполнитьТаблицуМесяца();
		КонецЕсли;
		ОбновитьМесяц[0] = Ложь;
		ОбновитьМесяц[1] = ДатаНачалаМесяцаЗапроса;
		ОбновитьМесяц[2] = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет данные в таблице списка.
//
Процедура ОбновитьТаблицуСписка()
	
	ОбновитьЗаказыСобытия(Ложь);
	
КонецПроцедуры

// Процедура обновляет данные в календаря дня.
//
Процедура ОбновитьКалендарьДня()
	
	ОбновитьДень[0] = Истина;
	ОбновитьДень[2] = Истина;
	
	ОбновитьИнформациюНаФорме();
	
КонецПроцедуры

// Процедура обновляет данные в календаря недели.
//
Процедура ОбновитьКалендарьНеделя()
	
	ОбновитьНеделю[0] = Истина;
	ОбновитьНеделю[2] = Истина;
	
	ОбновитьИнформациюНаФорме();
	
КонецПроцедуры

// Процедура обновляет данные в календаря месяца.
//
Процедура ОбновитьКалендарьМесяц()
	
	ОбновитьМесяц[0] = Истина;
	ОбновитьМесяц[2] = Истина;
	
	ОбновитьИнформациюНаФорме();
	
КонецПроцедуры

Процедура СформироватьПодменюУчетныхЗаписей(ОбновлятьДоступныеУчетныеЗаписи = Истина)
	
	ПодменюУчетныхЗаписей = ЭлементыФормы.КоманднаяПанельПочты.Кнопки.УчетнаяЗапись.Кнопки;
	ОбработчикВыбораУчЗаписи = Новый Действие("ПриВыбореУчетнойЗаписи");
	
	ПодменюУчетныхЗаписей.Очистить();
	
	Если ОбновлятьДоступныеУчетныеЗаписи Тогда
		ОбновитьДоступныеУчетныеЗаписи();
	КонецЕсли; 
	
	Если мДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		Если НЕ ПравоДоступа("Добавление", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
			ЭлементыФормы.ОсновнаяПанель.Страницы.Почта.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ЭлементУчетнойЗаписи Из мДоступныеУчетныеЗаписи Цикл
		ИмяКнопки =  "Запись" + Формат(мДоступныеУчетныеЗаписи.Индекс(ЭлементУчетнойЗаписи) + 1, "ЧЦ=2; ЧН=00; ЧВН=");
		ПодменюУчетныхЗаписей.Добавить(ИмяКнопки, ТипКнопкиКоманднойПанели.Действие, ЭлементУчетнойЗаписи.Представление, ОбработчикВыбораУчЗаписи);
		Если ЭлементУчетнойЗаписи.Значение = УчетнаяЗапись Тогда
			ПодменюУчетныхЗаписей[ИмяКнопки].Пометка = Истина;
			ЭлементыФормы.КоманднаяПанельПочты.Кнопки.УчетнаяЗапись.Текст = ЭлементУчетнойЗаписи.Представление;
		КонецЕсли;
	КонецЦикла;
	
	ПодменюУчетныхЗаписей.Добавить("РазделительВсеЗаписи", ТипКнопкиКоманднойПанели.Разделитель);
	ПодменюУчетныхЗаписей.Добавить("Запись99", ТипКнопкиКоманднойПанели.Действие, "Все учетные записи", ОбработчикВыбораУчЗаписи);
	Если УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка() Тогда
		ПодменюУчетныхЗаписей.Запись99.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельПочты.Кнопки.УчетнаяЗапись.Текст = "Все учетные записи";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриВыбореУчетнойЗаписи(Кнопка)
	
	НомерУчетнойЗаписи = Число(Прав(Кнопка.Имя, 2)) - 1;
	
	Если НомерУчетнойЗаписи = 98 Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
		
	Иначе
		УчетнаяЗапись = мДоступныеУчетныеЗаписи[НомерУчетнойЗаписи].Значение;
		
	КонецЕсли;
	
	ПодменюУчетныхЗаписей = ЭлементыФормы.КоманднаяПанельПочты.Кнопки.УчетнаяЗапись.Кнопки;
	Для каждого Кнопка Из ПодменюУчетныхЗаписей Цикл
		Если Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие Тогда
			НомерУчетнойЗаписиКнопки = Число(Прав(Кнопка.Имя, 2)) - 1;
			Если НомерУчетнойЗаписи = НомерУчетнойЗаписиКнопки Тогда
				Кнопка.Пометка = Истина;
				ЭлементыФормы.КоманднаяПанельПочты.Кнопки.УчетнаяЗапись.Текст = Кнопка.Текст;
			Иначе
				Кнопка.Пометка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	УстановитьОтборГрупп();
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		мОтображатьСписокПредметов = ФлагКлассификацииПисемПоПредметам(УчетнаяЗапись);
	Иначе
		ОтображениеПредметов = Ложь;
		Для каждого ЭлементСписка Из мДоступныеУчетныеЗаписи Цикл
			Если ФлагКлассификацииПисемПоПредметам(ЭлементСписка.Значение) Тогда
				ОтображениеПредметов = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		Если НЕ ОтображениеПредметов И мОтображатьСписокПредметов Тогда
			мОтображатьСписокПредметов = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	СобратьСтатистикуРассмотренностиПисем();
	
	УстановитьОтборПредметов();
	ВидимостьСпискаПредметов();
	
	ГруппыПисем_ПриАктивизацииСтроки(ЭлементыФормы.ГруппыПисемДерево);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	СформироватьПредставлениеДня();
	
	ПодключитьОбработчикОжидания("ОбновлениеОтображенияКалендаря",1);
	
КонецПроцедуры

Процедура ОбновлениеОтображенияКалендаря()
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Календарь" Тогда
		Если ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя = "День" Тогда
			Если ШиринаТабличногоПоляДня <> ЭлементыФормы.ПолеТабличногоДокументаДеньВторой.Ширина
				ИЛИ ШиринаРазделителяДвухДней <> ЭлементыФормы.Разделитель9.Лево Тогда
				ЗаполнитьТаблицуДня();
			КонецЕсли;
		ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя = "Неделя" Тогда
			Если ШиринаТабличногоПоляНедели <> ЭлементыФормы.ПолеТабличногоДокументаНеделя.Ширина Тогда
				ЗаполнитьТаблицуНедели();
			КонецЕсли;
		ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя = "Месяц" Тогда
			Если ШиринаТабличногоПоляМесяца <> ЭлементыФормы.ПолеТабличногоДокументаМесяц.Ширина Тогда
				ЗаполнитьТаблицуМесяца();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ПроизвестиНачальноеЗаполнениеКалендаря = Истина;
	ПроизвестиНачальноеЗаполнениеПочты     = Истина;
	
	// ПОЧТА
	
	мКнопкаОтображатьСкрытыеПредметыПисем = ЭлементыФормы.КоманднаяПанельСписокПредметов.Кнопки.ОтображатьСкрытыеПредметы;
	ВосстановленноеЗначение = ВосстановитьЗначение("ПометкаКнопкиОтображенияСкрытыхПредметов");
	Если ТипЗнч(ВосстановленноеЗначение) = Тип("Булево") Тогда
		мКнопкаОтображатьСкрытыеПредметыПисем.Пометка = ВосстановленноеЗначение;
	КонецЕсли;
	
	Если НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
		Предупреждение(НСтр("ru='В настройках учета не установлено использование встроенного почтового клиента.';uk='У настройках обліку не встановлене використання убудованого поштового клієнта.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОбновитьДоступныеУчетныеЗаписи();
	
	// Восстановим последнюю используюмую учетную запись
	СохраненнаяУчетнаяЗапись = ВосстановитьЗначение("УчетнаяЗапись");
	Если СохраненнаяУчетнаяЗапись <> Неопределено Тогда
		Если ТипЗнч(СохраненнаяУчетнаяЗапись) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			Если НЕ СохраненнаяУчетнаяЗапись.Пустая() Тогда
				Попытка
					Объект = СохраненнаяУчетнаяЗапись.ПолучитьОбъект();
					Если Объект = Неопределено Тогда
						СохраненнаяУчетнаяЗапись = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяУчетнаяЗапись");
					Иначе
						Если мДоступныеУчетныеЗаписи.НайтиПоЗначению(СохраненнаяУчетнаяЗапись) = Неопределено Тогда
							СохраненнаяУчетнаяЗапись = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяУчетнаяЗапись");
						КонецЕсли;
					КонецЕсли;
				Исключение
					СохраненнаяУчетнаяЗапись = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяУчетнаяЗапись");
				КонецПопытки;
			КонецЕсли;
		Иначе
			СохраненнаяУчетнаяЗапись = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяУчетнаяЗапись");
		КонецЕсли;
	Иначе
		СохраненнаяУчетнаяЗапись = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяУчетнаяЗапись");
	КонецЕсли;
	
	Если ТипЗнч(СохраненнаяУчетнаяЗапись) <> Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		СохраненнаяУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	КонецЕсли;
		
	Если УчетнаяЗапись.Пустая() ИЛИ СохраненнаяУчетнаяЗапись.Пустая() Тогда
		УчетнаяЗапись = СохраненнаяУчетнаяЗапись;
	КонецЕсли;
	
	// Сформируем подменю выбора текущей учетной записи
	СформироватьПодменюУчетныхЗаписей(Ложь);
	ЭлементыФормы.КоманднаяПанельПочты.Кнопки[2].Кнопки.РассмотренностиПоТекущемуПользователю.Пометка = мОтображатьРассмотренностиПисемТолькоПоТекущемуПользователю;
	
	Если мДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		Если НЕ ПравоДоступа("Добавление", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
			ЭлементыФормы.ОсновнаяПанель.Страницы.Почта.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ВидимостьСпискаПредметов();
	
	Для каждого ЭлементУправленияОтбором Из ЭлементыФормы.ЭлектронныеПисьмаСписок.НастройкаОтбора Цикл
		ЭлементУправленияОтбором.Доступность = (ЭлементУправленияОтбором.Имя <> "УчетнаяЗапись" И ЭлементУправленияОтбором.Имя <> "ЭлектронныеПисьмаИСобытияПоОбъекту");
	КонецЦикла;
	
	Для каждого ЭлементУправленияОтбором Из ЭлементыФормы.ПредметыСписок.НастройкаОтбора Цикл
		ЭлементУправленияОтбором.Доступность = (ЭлементУправленияОтбором.Имя = "Предмет");
	КонецЦикла;
	
	Для каждого ЭлементНастройкиПорядка Из ЭлементыФормы.ГруппыПисемДерево.НастройкаПорядка Цикл
		ЭлементНастройкиПорядка.Доступность = Ложь;
	КонецЦикла;
	
	ПредметыСписок.Порядок.Очистить();
	ПредметыСписок.Порядок.Установить("Предмет ВОЗР");
	
	//ПредметыОбъектов.Порядок.Очистить();
	//ПредметыОбъектов.Порядок.Установить("Предмет ВОЗР");
	//
	УстановитьОтборГрупп();
	
	ГруппыПисем_ПриАктивизацииСтроки(ЭлементыФормы.ГруппыПисемДерево);
	ПредметыСписок_ПриАктивизацииСтроки();
	ЭлектронныеПисьма_СписокПриАктивизацииСтроки(ЭлементыФормы.ЭлектронныеПисьмаСписок);
	ЗаполнитьПодменюОтправитьПолучить();
	
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Почта;
	
КонецПроцедуры

// Обработчик события ОбработкаЗаписиНовогоОбъекта формы.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Календарь" Тогда
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.Событие") ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.Событие") Тогда
			ЗаписьДокументаСобытие();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриПовторномОткрытии формы.
//
Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	
	ОбновитьЗаказыСобытия(Ложь);
	
	ОпределитьКонтрагентаФормы();
	
КонецПроцедуры

// Обработчик события ОбновлениеОтображения формы.
//
Процедура ОбновлениеОтображения()
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Календарь" Тогда
		
		ЭлементыФормы.ПолеТабличногоДокументаДень.ТолькоПросмотр       = Истина;
		ЭлементыФормы.ПолеТабличногоДокументаДеньВторой.ТолькоПросмотр = Истина;
		ЭлементыФормы.ПолеТабличногоДокументаНеделя.ТолькоПросмотр     = Истина;
		
		СформироватьПредставлениеДня();
		
		СостояниеКнопокСнятияОтбора();
		СостояниеКнопкиОтбораПоТекущемуЗначению();
		
		ОбновлениеОтображенияКалендаря();
		
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Контакты" Тогда
		
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриЗакрытии формы.
//
Процедура ПриЗакрытии()
	
	// КАЛЕНДАРЬ
	
	СохранитьЗначение("ЗначениеБыстрогоВводаСобытияКалендаря", мМассивЗначенийБыстрогоСобытия);
	СохранитьЗначение("ИсторииОтборовКалендаряПользователя"  , мСписокИсторииОтбора);
	
	// ПОЧТА
	
	СохранитьЗначение("УчетнаяЗапись"                           , УчетнаяЗапись);
	СохранитьЗначение("ПометкаКнопкиОтображенияСкрытыхПредметов", мКнопкаОтображатьСкрытыеПредметыПисем.Пометка);
	СохранитьЗначение("ПометкаКнопкиРассмотренностиПоТекущемуПользователю" , мОтображатьРассмотренностиПисемТолькоПоТекущемуПользователю);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ПриВыводеСтроки элемента формы ЗаказыИСобытияПредставление.
//
Процедура ЗаказыИСобытияПредставлениеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Состояние.ОтображатьТекст = Ложь;
	ОформлениеСтроки.Ячейки.Состояние.ОтображатьФлажок = Ложь;
	ОформлениеСтроки.Ячейки.Состояние.ОтображатьКартинку = Истина;
	Если ДанныеСтроки.Состояние = Перечисления.СостоянияСобытий.Запланировано Тогда
		Если ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.Событие") Тогда
			ОформлениеСтроки.Ячейки.Состояние.ИндексКартинки = 6;
		Иначе
			ОформлениеСтроки.Ячейки.Состояние.ИндексКартинки = 2;
		КонецЕсли; 
	ИначеЕсли ДанныеСтроки.Состояние = Перечисления.СостоянияСобытий.Отменено Тогда
		Если ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.Событие") Тогда
			ОформлениеСтроки.Ячейки.Состояние.ИндексКартинки = 5;
		Иначе
			ОформлениеСтроки.Ячейки.Состояние.ИндексКартинки = 3;
		КонецЕсли; 
	ИначеЕсли ДанныеСтроки.Состояние = Перечисления.СостоянияСобытий.Завершено Тогда
		Если ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.Событие") Тогда
			ОформлениеСтроки.Ячейки.Состояние.ИндексКартинки = 4;
		Иначе
			ОформлениеСтроки.Ячейки.Состояние.ИндексКартинки = 0;
		КонецЕсли; 
	ИначеЕсли ДанныеСтроки.Состояние.Пустая() Тогда
		Если ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.Событие") Тогда
			ОформлениеСтроки.Ячейки.Состояние.ИндексКартинки = 3;
		Иначе
			ОформлениеСтроки.Ячейки.Состояние.ИндексКартинки = 1;
		КонецЕсли; 
	Иначе
		ОформлениеСтроки.Ячейки.Состояние.ИндексКартинки = 3;
	КонецЕсли; 
	
	ОформлениеСтроки.Ячейки.Важность.ОтображатьТекст = Ложь;
	ОформлениеСтроки.Ячейки.Важность.ОтображатьФлажок = Ложь;
	ОформлениеСтроки.Ячейки.Важность.ОтображатьКартинку = Истина;
	Если ДанныеСтроки.Важность = Перечисления.Важность.Высокая Тогда
		ОформлениеСтроки.Ячейки.Важность.ИндексКартинки = 0;
	ИначеЕсли ДанныеСтроки.Важность = Перечисления.Важность.Низкая Тогда
		ОформлениеСтроки.Ячейки.Важность.ИндексКартинки = 1;
	Иначе
		ОформлениеСтроки.Ячейки.Важность.Картинка = Новый Картинка;
	КонецЕсли; 
	
	Если НЕ ДанныеСтроки.ВидОперации.Пустая() И ТипЗнч(ДанныеСтроки.ВидОперации) = Тип("ПеречислениеСсылка.ВидыСобытий") Тогда
		ОформлениеСтроки.Ячейки.ВидОперации.ОтображатьФлажок   = Ложь;
		ОформлениеСтроки.Ячейки.ВидОперации.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ВидОперации.ИндексКартинки     = РаботаСДиалогами.ОпределитьИндексКартинкиВидаСобытия(ДанныеСтроки.ВидОперации,ДанныеСтроки.Тип);
	Иначе
		ОформлениеСтроки.Ячейки.ВидОперации.ОтображатьФлажок   = Ложь;
		ОформлениеСтроки.Ячейки.ВидОперации.ОтображатьКартинку = Ложь;
	КонецЕсли;
	
	Если ДанныеСтроки.ДатаСобытия < НачалоДня(ТекущаяДата()) Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноКрасный;
	ИначеЕсли ДанныеСтроки.ДатаСобытия > КонецДня(ТекущаяДата()) Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы ЗаказыИСобытияПредставление.
//
Процедура ЗаказыИСобытияПредставлениеПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбработчикОжиданияЗаказыИСобытияПредставлениеПриАктивизацииСтроки", 0.1, Истина);	 	
    
КонецПроцедуры

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля ЗаказыИСобытияПредставление
//
Процедура ОбработчикОжиданияЗаказыИСобытияПредставлениеПриАктивизацииСтроки()
    
    Элемент = ЭлементыФормы.ЗаказыИСобытияПредставление;
    
    КнопкаРодитель = ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ВводНаОсновании;
	КнопкаРодитель.Кнопки.Очистить();
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		СписокДокументов = НайтиДокументыДляОснования(Элемент.ТекущиеДанные.Документ.Метаданные().Имя);
		Для каждого Элементы Из СписокДокументов Цикл
			Кнопка = КнопкаРодитель.Кнопки.Добавить(Элементы.Значение, ТипКнопкиКоманднойПанели.Действие, Элементы.Представление, Новый Действие("ВводНаОсновании"));
			Кнопка.Картинка = мБиблиотекаКартинокДокумент;
		КонецЦикла;
	КонецЕсли; 
КонецПроцедуры // ОбработчикОжиданияЗаказыИСобытияПредставлениеПриАктивизацииСтроки

// Обработчик события ПриАктивизацииЯчейки элемента формы ЗаказыИСобытияПредставление.
//
Процедура ЗаказыИСобытияПредставлениеПриАктивизацииЯчейки(Элемент)
	
	Доступность = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		ТекКолонка = Элемент.ТекущаяКолонка;
		
		Если ТекКолонка <> Элемент.Колонки.Информация И ТекКолонка <> Элемент.Колонки.Состояние Тогда
			
			Доступность = Истина;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоТекущемуЗначению.Доступность = Доступность;
	
	СостояниеКнопкиОтбораПоТекущемуЗначению();
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы ЗаказыИСобытияПредставление.
//
Процедура ЗаказыИСобытияПредставлениеПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.Документ.Пустая() Тогда
			Элемент.ТекущиеДанные.Документ.Скопировать().ПолучитьФорму(,ЭтаФорма).Открыть();
		КонецЕсли;
	Иначе
		СписокВыбора = Новый СписокЗначений;
		Для каждого ВидСобытия Из Перечисления.ВидыСобытий Цикл
			СписокВыбора.Добавить(ВидСобытия, Строка(ВидСобытия));
		КонецЦикла; 
		
		Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.Документ.Пустая() Тогда
			Если ТипЗнч(Элемент.ТекущиеДанные.Документ) = Тип("ДокументСсылка.Событие") Тогда
				ЗначенияПоискаВСписке = Элемент.ТекущиеДанные.Документ.ВидСобытия;
			Иначе
				ЗначенияПоискаВСписке = Элемент.ТекущиеДанные.Документ.Метаданные().Имя;
			КонецЕсли; 
		КонецЕсли;
		
		НайденныйЭлементСписка = СписокВыбора.НайтиПоЗначению(ЗначенияПоискаВСписке);
		
		ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент(НСтр("ru='Выберите тип документа';uk='Виберіть тип документа'"), НайденныйЭлементСписка);
		
		Если ВыбранныйЭлемент <> Неопределено Тогда
			
			Если ТипЗнч(ВыбранныйЭлемент.Значение) = Тип("Строка") Тогда
				
				НовыйОбъект = Документы[ВыбранныйЭлемент.Значение].СоздатьДокумент();
				НовыйОбъект.Ответственный = ПользовательКалендаря;
				
				ФормаОбъекта = НовыйОбъект.ПолучитьФорму(,ЭтаФорма);
				ФормаОбъекта.Открыть();
				
			Иначе
				
				Док = Документы.Событие.СоздатьДокумент();
				Док.Ответственный   = ПользовательКалендаря;
				Док.ВидСобытия      = ВыбранныйЭлемент.Значение;
				
				
				// Тип события
				ЭлементОтбора = СтруктураОтборов.Получить("Тип");
				Если ЭлементОтбора <> Неопределено Тогда
					Если ЭлементОтбора[0] = ВидСравнения.Равно Тогда
						Док.ТипСобытия = ЭлементОтбора[1];
					КонецЕсли; 
				КонецЕсли;
				
				// Важность
				ЭлементОтбора = СтруктураОтборов.Получить("Важность");
				Если ЭлементОтбора <> Неопределено Тогда
					Если ЭлементОтбора[0] = ВидСравнения.Равно Тогда
						Док.Важность = ЭлементОтбора[1];
					КонецЕсли; 
				КонецЕсли;
				
				ФормаСобытия = Док.ПолучитьФорму(,ЭтаФорма);
				ФормаСобытия.Открыть();
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы ЗаказыИСобытияПредставление.
//
Процедура ЗаказыИСобытияПредставлениеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.Документ.Пустая() Тогда
		Элемент.ТекущиеДанные.Документ.ПолучитьФорму(,ЭтаФорма).Открыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы ЗаказыИСобытияПредставление.
//
Процедура ЗаказыИСобытияПредставлениеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОтветНаВопрос = Вопрос(НСтр("ru='Пометить объект на удаление?';uk=""Позначити об'єкт для вилучення?"""), РежимДиалогаВопрос.ДаНет);
	Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Элемент.ТекущиеДанные.Документ.ПолучитьОбъект();
	Попытка
		Объект.УстановитьПометкуУдаления(Истина);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗаписьДокументаСобытие();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫЗЫВАЕМЫЕ ПО НАЖАТИЮ КНОПОК КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Обработчик события элемента КоманднаяПанельСписка.Интервал.
//
Процедура КоманднаяПанельСпискаИнтервал(Кнопка)
	
	МассивПериода = УправлениеОтчетами.ВвестиПериод(ДатаНач, ДатаКон);
	
	Если МассивПериода = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ДатаНач = МассивПериода[0];
	ДатаКон = МассивПериода[1];
	
	ОбновитьЗаказыСобытия(Ложь);
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельСписка.СнятьОтбор.
//
Процедура КоманднаяПанельСпискаСнятьОтбор(Кнопка)
	
	СтруктураОтборов.Удалить("КонтактноеЛицо");
	СтруктураОтборов.Удалить("Важность");
	СтруктураОтборов.Удалить("Тип");
	СтруктураОтборов.Удалить("Номер");
	СтруктураОтборов.Удалить("ВидОперации");
	СтруктураОтборов.Удалить("ДатаСобытия");
	
	ДатаНач = Дата("00010101000000");
	ДатаКон = Дата("00010101000000");
	
	ОбновитьЗаказыСобытия(Ложь);
	ОпределитьКонтрагентаФормы();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельСписка.ОтборПоТекущемуКонтрагенту.
//
Процедура КоманднаяПанельСпискаОтборПоТекущемуЗначению(Кнопка)
	
	Если Кнопка.Пометка Тогда
		
		ИмяКолонки = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущаяКолонка.Имя;
		
		Если ИмяКолонки = "ДатаДокумента" Тогда
			
			ДатаНач = Дата("00010101000000");
			ДатаКон = Дата("00010101000000");
			
		Иначе
			
			ИмяОтбора = ИмяКолонки;
			
			СтруктураОтборов.Удалить(ИмяОтбора);
			
		КонецЕсли;
		
	Иначе
		
		ИмяКолонки = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущаяКолонка.Имя;
		
		Если ИмяКолонки = "ДатаДокумента" Тогда
			
			ЗначениеОтбора = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные[ИмяКолонки];
			
			ДатаНач = НачалоДня(ЗначениеОтбора);
			ДатаКон = КонецДня(ЗначениеОтбора);
			
		ИначеЕсли ИмяКолонки = "ДатаСобытия" Тогда
			
			ЗначениеОтбора = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные[ИмяКолонки];
			
			МассивОтбора = Новый Массив;
			МассивОтбора.Добавить(ВидСравнения.Равно);
			МассивОтбора.Добавить(ЗначениеОтбора);
			МассивОтбора.Добавить(ЗначениеОтбора);
			СтруктураОтборов.Вставить("ДатаСобытия",МассивОтбора);
			
		Иначе
			
			МассивОтбора = Новый Массив;
			
			ИмяОтбора = ИмяКолонки;
			ЗначениеОтбора = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные[ИмяКолонки];
			МассивОтбора.Добавить(ВидСравнения.Равно);
			
			Если ЗначениеОтбора = Неопределено Тогда
				
				Возврат;
				
			КонецЕсли; 
			
			МассивОтбора.Добавить(ЗначениеОтбора);
			СтруктураОтборов.Вставить(ИмяОтбора,МассивОтбора);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	ОбновитьЗаказыСобытия(Ложь);
	ДобавитьНовыйОтборВИсторию();
	ОпределитьКонтрагентаФормы();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельСписка.Отборы.
//
Процедура КоманднаяПанельСпискаОтборы(Кнопка)
	
	ФормаОтбора = ПолучитьФорму("ФормаОтборов", ЭтаФорма);
	ФормаОтбора.ОткрытьМодально();
	
	ОпределитьКонтрагентаФормы();
	ДобавитьНовыйОтборВИсторию();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента ПолеКалендаря.
//
Процедура ПолеКалендаряПриИзменении(Элемент)
	
	Если ДатаКалендаря <> мДатаКалендаря Тогда
		
		мДатаКалендаря = ДатаКалендаря;
		ПриИзмененииДатыКалендаря(Элемент);
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента ПолеКалендаряНеделя.
//
Процедура ПолеКалендаряНеделяПриИзменении(Элемент)
	
	Если ДатаКалендаря <> мДатаКалендаря Тогда
		
		мДатаКалендаря = ДатаКалендаря;
		ПриИзмененииДатыКалендаря(Элемент);
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ОбработкаРасшифровки элемента ПолеТабличногоДокументаДень.
//
Процедура ПолеТабличногоДокументаДеньОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("ДокументСсылка.Событие") Тогда
		СтандартнаяОбработка = Ложь;
		Расшифровка.ПолучитьФорму(,ЭтаФорма).Открыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ОбработкаРасшифровки элемента ПолеТабличногоДокументаМесяц.
//
Процедура ПолеТабличногоДокументаМесяцОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Дата") Тогда
		
		Если НачалоДня(Расшифровка) <> НачалоДня(ДатаКалендаря) Тогда
			ДатаКалендаря = НачалоДня(Расшифровка);
			
			Если ДатаКалендаря <> мДатаКалендаря Тогда
				
				мДатаКалендаря = ДатаКалендаря;
				
				Если НачалоМесяца(ДатаКалендаря) <> ДатаНачалаМесяцаЗапроса Тогда
					ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
					ОбновитьМесяц[0] = Истина;
				КонецЕсли;
				
				Если ДатаНачалаНедели <> НачалоНедели(ДатаКалендаря) Тогда
					ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
					ОбновитьНеделю[0] = Истина;
				КонецЕсли; 
				
				ОбновитьДень[0] = Истина;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		УстновитьВидимостьСтраницы(ЭлементыФормы.ПанельФормы.Страницы,"День");
		ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.День;
		
		СостояниеТулбараФормы();
		
		ОбновитьИнформациюНаФорме();
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Нажатие элемента ВвестиДокумент.
//
Процедура ВвестиДокументНажатие(Элемент)
	
	Если ТипЗнч(мМассивЗначенийБыстрогоСобытия) = Тип("Массив") И мМассивЗначенийБыстрогоСобытия[0] <> Неопределено И мМассивЗначенийБыстрогоСобытия[1] <> Неопределено Тогда
		ВыбранныйЭлемент = мМассивЗначенийБыстрогоСобытия;
	Иначе
		ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзМеню(мСписокДокументовДобавления, Элемент);
		Если ВыбранныйЭлемент <> Неопределено Тогда
			ВыбранныйЭлемент = ВыбранныйЭлемент.Значение;
		КонецЕсли; 
	КонецЕсли;
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		ОбъектСобытия = Документы.Событие.СоздатьДокумент();
		
		ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаДеньВторой.ТекущаяОбласть;
		Если ТекущаяОбласть <> Неопределено Тогда
			ОбъектСобытия.НачалоСобытия = ОпределитьДатыОбластиДня(ТекущаяОбласть, Истина);
			ОбъектСобытия.ОкончаниеСобытия = ОпределитьДатыОбластиДня(ТекущаяОбласть, Ложь);
			Если ТекущаяОбласть.Лево > ОбщаяШиринаДня+3 Тогда
				ОбъектСобытия.НачалоСобытия = ОбъектСобытия.НачалоСобытия + 60*60*24;
				ОбъектСобытия.ОкончаниеСобытия = ОбъектСобытия.ОкончаниеСобытия + 60*60*24;
			КонецЕсли; 
		КонецЕсли;
		
		ОбъектСобытия.ВидСобытия      = ВыбранныйЭлемент[0];
		ОбъектСобытия.ТипСобытия      = ВыбранныйЭлемент[1];
		ОбъектСобытия.ОписаниеСобытия = ТемаНовогоСобытия;
		ОбъектСобытия.Ответственный   = ПользовательКалендаря;
		
		ОбъектСобытия.ПолучитьФорму(,ЭтаФорма).Открыть();
		
		КнопкаФормы = ЭлементыФормы.ВвестиДокумент;
		
		КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент[0]));
		КнопкаФормы.Подсказка = НСтр("ru='Ввести новое ';uk='Ввести нове '") + ВыбранныйЭлемент[1] + НСтр("ru=' событие -  ';uk=' подія '") + ВыбранныйЭлемент[0];
		КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
		
		КнопкаФормы = ЭлементыФормы.ВвестиДокументНеделя;
		
		КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент[0]));
		КнопкаФормы.Подсказка = НСтр("ru='Ввести новое ';uk='Ввести нове '") + ВыбранныйЭлемент[1] + НСтр("ru=' событие -  ';uk=' подія '") + ВыбранныйЭлемент[0];
		КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
		
		мМассивЗначенийБыстрогоСобытия = Новый Массив;
		мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент[0]);
		мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент[1]);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Нажатие элемента ВвестиДокументНеделя.
//
Процедура ВвестиДокументНеделяНажатие(Элемент)
	
	Если ТипЗнч(мМассивЗначенийБыстрогоСобытия) = Тип("Массив") И мМассивЗначенийБыстрогоСобытия[0] <> Неопределено И мМассивЗначенийБыстрогоСобытия[1] <> Неопределено Тогда
		ВыбранныйЭлемент = мМассивЗначенийБыстрогоСобытия;
	Иначе
		ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзМеню(мСписокДокументовДобавления, Элемент);
		Если ВыбранныйЭлемент <> Неопределено Тогда
			ВыбранныйЭлемент = ВыбранныйЭлемент.Значение;
		КонецЕсли; 
	КонецЕсли;
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		ОбъектСобытия = Документы.Событие.СоздатьДокумент();
		
		ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаНеделя.ТекущаяОбласть;
		Если ТекущаяОбласть <> Неопределено Тогда
			
			ОбъектСобытия.НачалоСобытия = ОпределитьДатыОбластиНедели(ТекущаяОбласть, Истина);
			ОбъектСобытия.ОкончаниеСобытия = ОпределитьДатыОбластиНедели(ТекущаяОбласть, Ложь);
			
		КонецЕсли;
		
		ОбъектСобытия.ВидСобытия      = ВыбранныйЭлемент[0];
		ОбъектСобытия.ТипСобытия      = ВыбранныйЭлемент[1];
		ОбъектСобытия.ОписаниеСобытия = ТемаНовогоСобытия;
		ОбъектСобытия.Ответственный   = ПользовательКалендаря;
		
		ОбъектСобытия.ПолучитьФорму(,ЭтаФорма).Открыть();
		
		КнопкаФормы = ЭлементыФормы.ВвестиДокумент;
		
		КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент[0]));
		КнопкаФормы.Подсказка = НСтр("ru='Ввести новый ';uk='Ввести новий '") + ВыбранныйЭлемент[1] + НСтр("ru=' событие -  ';uk=' подія '") + ВыбранныйЭлемент[0];
		КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
		
		КнопкаФормы = ЭлементыФормы.ВвестиДокументНеделя;
		
		КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент[0]));
		КнопкаФормы.Подсказка = НСтр("ru='Ввести новое ';uk='Ввести нове '") + ВыбранныйЭлемент[1] + НСтр("ru=' событие -  ';uk=' подія '") + ВыбранныйЭлемент[0];
		КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
		
		мМассивЗначенийБыстрогоСобытия = Новый Массив;
		мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент[0]);
		мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент[1]);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ОбработкаРасшифровки элемента ПолеТабличногоДокументаНеделя.
//
Процедура ПолеТабличногоДокументаНеделяОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Дата") Тогда
		
		Если НачалоДня(Расшифровка) <> НачалоДня(ДатаКалендаря) Тогда
			ДатаКалендаря = НачалоДня(Расшифровка);
			
			Если ДатаКалендаря <> мДатаКалендаря Тогда
				
				мДатаКалендаря = ДатаКалендаря;
				
				Если НачалоМесяца(ДатаКалендаря) <> ДатаНачалаМесяцаЗапроса Тогда
					
					ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
					ОбновитьМесяц[0] = Истина;
					
				КонецЕсли;
				
				Если ДатаНачалаНедели <> НачалоНедели(ДатаКалендаря) Тогда
					
					ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
					ОбновитьНеделю[0] = Истина;
					
				КонецЕсли; 
				
				ОбновитьДень[0] = Истина;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		УстновитьВидимостьСтраницы(ЭлементыФормы.ПанельФормы.Страницы,"День");
		ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.День;
		
		СостояниеТулбараФормы();
		
		ОбновитьИнформациюНаФорме();
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("ДокументСсылка.Событие") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Расшифровка.ПолучитьФорму(,ЭтаФорма).Открыть();
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		Если Расшифровка.Действие = "Раскрыть" Тогда
			
			ЗапомнимСмещениеОтНачалаПервойЯчейкиДня = СмещениеОтНачалаПервойЯчейкиДня;
			ЗапомнимНомерПоследнейЯчейкиДня         = НомерПоследнейЯчейкиДня;
			ЗапомнимНомерПоследнейЯчейкиНедели      = НомерПоследнейЯчейкиНедели;
			
			Если Расшифровка.Направление = "Верх" Тогда
				СмещениеОтНачалаПервойЯчейкиДня = ВерхняяСтрокаНевидимойОбластиНедели-1;
				СмещениеОтНачалаПервойЯчейкиДня = Цел((СмещениеОтНачалаПервойЯчейкиДня+1)/2)*2;
				НомерПоследнейЯчейкиНедели      = НомерПоследнейЯчейкиДня-СмещениеОтНачалаПервойЯчейкиДня + 2;
			Иначе
				НомерПоследнейЯчейкиНедели      = НижняяСтрокаНевидимойОбластиНедели+2-СмещениеОтНачалаПервойЯчейкиДня;
				НомерПоследнейЯчейкиНедели      = Цел((НомерПоследнейЯчейкиНедели+1)/2)*2;
			КонецЕсли;
			
			ОбновитьКалендарьНеделя();
			
			СмещениеОтНачалаПервойЯчейкиДня = ЗапомнимСмещениеОтНачалаПервойЯчейкиДня;
			НомерПоследнейЯчейкиДня         = ЗапомнимНомерПоследнейЯчейкиДня;
			НомерПоследнейЯчейкиНедели      = ЗапомнимНомерПоследнейЯчейкиНедели;
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриАктивизацииОбласти элемента ПолеТабличногоДокументаНеделя.
//
Процедура ПолеТабличногоДокументаНеделяПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Элемент.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Расшифровка = Элемент.ТекущаяОбласть.Расшифровка;
		Если ТипЗнч(Элемент.ТекущаяОбласть.Расшифровка) = Тип("ДокументСсылка.Событие") Тогда
			Расшифровка.ПолучитьФорму(,ЭтаФорма).Открыть();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельФормы.Список.
//
Процедура КоманднаяПанельФормыСписок(Кнопка)
	
	УстановитьЗакладку(Кнопка.Имя);
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельФормы.День.
//
Процедура КоманднаяПанельФормыДень(Кнопка)
	
	УстановитьЗакладку(Кнопка.Имя);
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельФормы.Неделя.
//
Процедура КоманднаяПанельФормыНеделя(Кнопка)
	
	УстановитьЗакладку(Кнопка.Имя);
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельФормы.Месяц.
//
Процедура КоманднаяПанельФормыМесяц(Кнопка)
	
	УстановитьЗакладку(Кнопка.Имя);
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельДень.КнопкаДеньНазад.
//
Процедура КнопкаДеньНазадНажатие(Кнопка)
	
	ДатаКалендаря = НачалоДня(НачалоДня(ДатаКалендаря) - 1);
	
	Если ДатаКалендаря <> мДатаКалендаря Тогда
		
		мДатаКалендаря = ДатаКалендаря;
		
		Если НачалоМесяца(ДатаКалендаря) <> ДатаНачалаМесяцаЗапроса Тогда
			
			ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
			ОбновитьМесяц[0] = Истина;
			
		КонецЕсли;
		
		Если НачалоНедели(ДатаКалендаря) <> ДатаНачалаНедели Тогда
			
			ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
			ОбновитьНеделю[0] = Истина;
			
		КонецЕсли; 
		
		ОбновитьДень[0] = Истина;
		
		ОбновитьИнформациюНаФорме();
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельДень.КнопкаДеньВперед.
//
Процедура КнопкаДеньВпередНажатие(Кнопка)
	
	ДатаКалендаря = НачалоДня(НачалоДня(ДатаКалендаря) + (60*60*24 + 1));
	
	Если ДатаКалендаря <> мДатаКалендаря Тогда
		
		мДатаКалендаря = ДатаКалендаря;
		
		Если НачалоМесяца(ДатаКалендаря) <> ДатаНачалаМесяцаЗапроса Тогда
			
			ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
			ОбновитьМесяц[0] = Истина;
			
		КонецЕсли; 
		
		Если НачалоНедели(ДатаКалендаря) <> ДатаНачалаНедели Тогда
			
			ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
			ОбновитьНеделю[0] = Истина;
			
		КонецЕсли; 
		
		ОбновитьДень[0] = Истина;
		
		ОбновитьИнформациюНаФорме();
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельНеделя.КнопкаНеделяНазад.
//
Процедура КнопкаНеделяНазадНажатие(Кнопка)
	
	ДатаКалендаря = НачалоДня(НачалоДня(ДатаКалендаря) - 60*60*24*7);
	
	Если ДатаКалендаря <> мДатаКалендаря Тогда
		
		мДатаКалендаря = ДатаКалендаря;
		
		Если НачалоМесяца(ДатаКалендаря) <> ДатаНачалаМесяцаЗапроса Тогда
			
			ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
			ОбновитьМесяц[0] = Истина;
			
		КонецЕсли;
		
		Если НачалоНедели(ДатаКалендаря) <> ДатаНачалаНедели Тогда
			
			ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
			ОбновитьНеделю[0] = Истина;
			
		КонецЕсли; 
		
		ОбновитьДень[0] = Истина;
		
		ОбновитьИнформациюНаФорме();
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельНеделя.КнопкаНеделяВперед.
//
Процедура КнопкаНеделяВпередНажатие(Кнопка)
	
	ДатаКалендаря = НачалоДня(НачалоДня(ДатаКалендаря) + 60*60*24*7);
	
	Если ДатаКалендаря <> мДатаКалендаря Тогда
		
		мДатаКалендаря = ДатаКалендаря;
		
		Если НачалоМесяца(ДатаКалендаря) <> ДатаНачалаМесяцаЗапроса Тогда
			
			ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
			ОбновитьМесяц[0] = Истина;
			
		КонецЕсли;
		
		Если НачалоНедели(ДатаКалендаря) <> ДатаНачалаНедели Тогда
			
			ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
			ОбновитьНеделю[0] = Истина;
			
		КонецЕсли; 
		
		ОбновитьДень[0] = Истина;
		
		ОбновитьИнформациюНаФорме();
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельМесяцВспомогательная.КнопкаМесяцНазад.
//
Процедура КнопкаМесяцНазадНажатие(Кнопка)
	
	ДатаКалендаря = НачалоДня(ДобавитьМесяц(ДатаКалендаря, -1));
	ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
	
	Если ДатаКалендаря <> мДатаКалендаря Тогда
		
		мДатаКалендаря = ДатаКалендаря;
		
		ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
		ОбновитьМесяц[0] = Истина;
		ОбновитьНеделю[0] = Истина;
		ОбновитьДень[0] = Истина;
		
		ОбновитьИнформациюНаФорме();
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельМесяцВспомогательная.КнопкаМесяцВперед.
//
Процедура КнопкаМесяцВпередНажатие(Кнопка)
	
	ДатаКалендаря = НачалоДня(ДобавитьМесяц(ДатаКалендаря, 1));
	ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
	
	Если ДатаКалендаря <> мДатаКалендаря Тогда
		
		мДатаКалендаря = ДатаКалендаря;
		
		ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
		ОбновитьМесяц[0] = Истина;
		ОбновитьНеделю[0] = Истина;
		ОбновитьДень[0] = Истина;
		
		ОбновитьИнформациюНаФорме();
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельФормыДополнительно.Обновить.
//
Процедура КоманднаяПанельФормыДополнительноОбновить(Кнопка)
	
	Если ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.Список Тогда
		ОбновитьТаблицуСписка();
	ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.День Тогда
		ОбновитьКалендарьДня();
	ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.Неделя Тогда
		ОбновитьКалендарьНеделя();
	ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.Месяц Тогда
		ОбновитьКалендарьМесяц();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ОбработкаРасшифровки элемента ПолеТабличногоДокументаДеньВторой.
//
Процедура ПолеТабличногоДокументаДеньВторойОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("ДокументСсылка.Событие") Тогда
		СтандартнаяОбработка = Ложь;
		Расшифровка.ПолучитьФорму(,ЭтаФорма).Открыть();
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		Если Расшифровка.Действие = "Раскрыть" Тогда
			
			ЗапомнимСмещениеОтНачалаПервойЯчейкиДня = СмещениеОтНачалаПервойЯчейкиДня;
			ЗапомнимНомерПоследнейЯчейкиДня         = НомерПоследнейЯчейкиДня;
			
			Если Расшифровка.Направление = "Верх" Тогда
				СмещениеОтНачалаПервойЯчейкиДня = ВерхняяСтрокаНевидимойОбластиДня-1;
				СмещениеОтНачалаПервойЯчейкиДня = Цел((СмещениеОтНачалаПервойЯчейкиДня-1)/2)*2;
			Иначе
				НомерПоследнейЯчейкиДня         = НижняяСтрокаНевидимойОбластиДня;
				НомерПоследнейЯчейкиДня         = Цел((НомерПоследнейЯчейкиДня+1)/2)*2;
			КонецЕсли;
			
			ОбновитьКалендарьДня();
			
			СмещениеОтНачалаПервойЯчейкиДня = ЗапомнимСмещениеОтНачалаПервойЯчейкиДня;
			НомерПоследнейЯчейкиДня         = ЗапомнимНомерПоследнейЯчейкиДня;
			
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриАктивизацииОбласти элемента ПолеТабличногоДокументаДеньВторой.
//
Процедура ПолеТабличногоДокументаДеньВторойПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Элемент.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Расшифровка = Элемент.ТекущаяОбласть.Расшифровка;
		Если ТипЗнч(Элемент.ТекущаяОбласть.Расшифровка) = Тип("ДокументСсылка.Событие") Тогда
			Расшифровка.ПолучитьФорму(,ЭтаФорма).Открыть();
		КонецЕсли; 
		Элемент.ТекущаяОбласть = Элемент.Область(мИмяТекущейОбластиДвойногоДня);
	Иначе
		мИмяТекущейОбластиДвойногоДня = Элемент.ТекущаяОбласть.Имя;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриАктивизацииОбласти элемента ПолеТабличногоДокументаДень.
//
Процедура ПолеТабличногоДокументаДеньПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Элемент.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Если ТипЗнч(Элемент.ТекущаяОбласть.Расшифровка) = Тип("ДокументСсылка.Событие") Тогда
			Элемент.ТекущаяОбласть.Расшифровка.ПолучитьФорму(,ЭтаФорма).Открыть();
		КонецЕсли; 
		Элемент.ТекущаяОбласть = Элемент.Область(мИмяТекущейОбластиДня);
	Иначе
		мИмяТекущейОбластиДня = Элемент.ТекущаяОбласть.Имя;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента КнопкаВыбратьМесяц.
//
Процедура КнопкаВыбратьМесяцНажатие(Элемент)
	
	СписокМесяцев = Новый СписокЗначений;
	
	Для а = -6 По 6 Цикл
		
		Если а = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаМесяца = НачалоДня(ДобавитьМесяц(ДатаКалендаря, а));
		
		СтрокаМесяца = Формат(ДатаМесяца, "ДФ=ММММ") + " " + Формат(ДатаМесяца, "ДФ=yyyy") + " г.";
		СписокМесяцев.Добавить(ДатаМесяца, СтрокаМесяца);
		
	КонецЦикла;
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзМеню(СписокМесяцев, Элемент);
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		ДатаКалендаря = НачалоДня(ВыбранныйЭлемент.Значение);
		ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
		
		Если НачалоДня(ДатаКалендаря) <> НачалоДня(мДатаКалендаря) Тогда
			
			мДатаКалендаря = ДатаКалендаря;
			
			ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
			ОбновитьМесяц[0] = Истина;
			ОбновитьНеделю[0] = Истина;
			ОбновитьДень[0] = Истина;
			
			ОбновитьИнформациюНаФорме();
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Выбор элемента ПолеТабличногоДокументаДень.
//
Процедура ПолеТабличногоДокументаДеньВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Область.Расшифровка) Тогда
		ВвестиДокументСобытиеИзМокселя();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Выбор элемента ПолеТабличногоДокументаДеньВторой.
//
Процедура ПолеТабличногоДокументаДеньВторойВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Область.Расшифровка) Тогда
		ВвестиДокументСобытиеИзМокселя();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Выбор элемента ПолеТабличногоДокументаНеделя.
//
Процедура ПолеТабличногоДокументаНеделяВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Область.Расшифровка) Тогда
		ВвестиДокументСобытиеИзМокселя();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ВыбораИзСписка элемента ТемаНовогоСобытия
//
Процедура ТемаНовогоСобытияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокТем = УправлениеКонтактами.ПолучитьСписокОсновныхТем();
	
	Выбрали = ВыбратьИзСписка(СписокТем,Элемент);
	
	Если Выбрали <> Неопределено Тогда
		ТемаНовогоСобытия = Выбрали.Значение;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ВыбораИзСписка элемента ТемаНовогоСобытияНеделя
//
Процедура ТемаНовогоСобытияНеделяНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокТем = УправлениеКонтактами.ПолучитьСписокОсновныхТем();
	
	Выбрали = ВыбратьИзСписка(СписокТем,Элемент);
	
	Если Выбрали <> Неопределено Тогда
		ТемаНовогоСобытия = Выбрали.Значение;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫЗЫВАЕМЫЕ ПРИ ПЕРЕТАСКИВАНИИ В ЭЛЕМЕНТАХ УПРАВЛЕНИЯ

// Перетаскивание день

// Обработчик события НачалоПеретаскивания элемента ПолеТабличногоДокументаДень.
//
Процедура ПолеТабличногоДокументаДеньНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ПолеТабличногоДокументаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события ОкончаниеПеретаскивания элемента ПолеТабличногоДокументаДень.
//
Процедура ПолеТабличногоДокументаДеньОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события Перетаскивание элемента ПолеТабличногоДокументаДень.
//
Процедура ПолеТабличногоДокументаДеньПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	ПолеТабличногоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область);
	
КонецПроцедуры

// Обработчик события ПроверкаПеретаскивания элемента ПолеТабличногоДокументаДень.
//
Процедура ПолеТабличногоДокументаДеньПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	ПолеТабличногоДокументаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область);
	
КонецПроцедуры

// Перетаскивание два дня

// Обработчик события НачалоПеретаскивания элемента ПолеТабличногоДокументаДеньВторой.
//
Процедура ПолеТабличногоДокументаДеньВторойНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ПолеТабличногоДокументаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события ПроверкаПеретаскивания элемента ПолеТабличногоДокументаДеньВторой.
//
Процедура ПолеТабличногоДокументаДеньВторойПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	ПолеТабличногоДокументаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область);
	
КонецПроцедуры

// Обработчик события ОкончаниеПеретаскивания элемента ПолеТабличногоДокументаДеньВторой.
//
Процедура ПолеТабличногоДокументаДеньВторойОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события Перетаскивание элемента ПолеТабличногоДокументаДеньВторой.
//
Процедура ПолеТабличногоДокументаДеньВторойПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	ПолеТабличногоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область, Истина);
	
КонецПроцедуры

// Перетаскивание неделя

// Обработчик события НачалоПеретаскивания элемента ПолеТабличногоДокументаНеделя.
//
Процедура ПолеТабличногоДокументаНеделяНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ПолеТабличногоДокументаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события ПроверкаПеретаскивания элемента ПолеТабличногоДокументаНеделя.
//
Процедура ПолеТабличногоДокументаНеделяПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка) <> Тип("ДокументСсылка.Событие") 
		ИЛИ Область.Низ > НомерПоследнейЯчейкиНедели ИЛИ Область.Право > 84 ИЛИ Область.Лево < 3 ИЛИ Область.Верх < 3 Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ОкончаниеПеретаскивания элемента ПолеТабличногоДокументаНеделя.
//
Процедура ПолеТабличногоДокументаНеделяОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события Перетаскивание элемента ПолеТабличногоДокументаНеделя.
//
Процедура ПолеТабличногоДокументаНеделяПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка) <> Тип("ДокументСсылка.Событие") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	НовоеНачалоСобытия    = ОпределитьДатыОбластиНедели(Область, Истина);
	НовоеОкончаниеСобытия = ОпределитьДатыОбластиНедели(Область, Ложь);
	НовоеОкончаниеСобытия = НачалоДня(НовоеНачалоСобытия) + (НовоеОкончаниеСобытия - НачалоДня(НовоеОкончаниеСобытия));
	
	Если НовоеНачалоСобытия = ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка.НачалоСобытия
		И НовоеОкончаниеСобытия = ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка.ОкончаниеСобытия Тогда
		Возврат;
	КонецЕсли; 
	
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
		Объект = ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка.Скопировать();
		Объект.Дата = ТекущаяДата();
	Иначе
		Объект = ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка.ПолучитьОбъект();
	КонецЕсли; 
	
	Объект.НачалоСобытия    = НовоеНачалоСобытия;
	Объект.ОкончаниеСобытия = НовоеОкончаниеСобытия;
	Попытка
		Объект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗаписьДокументаСобытие();
	Элемент.ТекущаяОбласть = Область;
	
КонецПроцедуры

// Перетаскивание календарь дня

// Обработчик события Перетаскивание элемента ПолеКалендаря.
//
Процедура ПолеКалендаряПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ВыбраннаяДата)
	
	ПолеКалендаряПеретаскиваниеОбщее(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ВыбраннаяДата);
	
КонецПроцедуры

// Обработчик события ПроверкаПеретаскивания элемента ПолеКалендаря.
//
Процедура ПолеКалендаряПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ВыбраннаяДата)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Перетаскивание календарь недели

// Обработчик события ПроверкаПеретаскивания элемента ПолеКалендаряНеделя.
//
Процедура ПолеКалендаряНеделяПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ВыбраннаяДата)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события Перетаскивание элемента ПолеКалендаряНеделя.
//
Процедура ПолеКалендаряНеделяПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ВыбраннаяДата)
	
	ПолеКалендаряПеретаскиваниеОбщее(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ВыбраннаяДата, Истина);
	
КонецПроцедуры

// ПОЧТА

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура сохраняет структуру для создания ключа
// записи регистра сведений списка предметов писем
//
Процедура СохранитьТекущийПредмет(Предмет = Неопределено)
	
	// Сохранение/Восстановление предмета необходимо, т.к. при записи нового письма
	// в тот же предмет переписывается регистр сведений, текущая строка в отображаемом
	// табличном поле предметов будет скакать, т.к. отображается срез последних
	// и ключ текущей строки становится отличным от ключа такущес строки предидущего
	// письма.
	Если ЭлементыФормы.ПредметыСписок.ТекущиеДанные <> Неопределено
		И мОтображатьСписокПредметов Тогда
		мСтруктураПредмета = Новый Структура("Предмет, ГруппаПисемЭлектроннойПочты", ?(Предмет = Неопределено, ЭлементыФормы.ПредметыСписок.ТекущиеДанные.Предмет, Предмет), ЭлементыФормы.ПредметыСписок.ТекущиеДанные.ГруппаПисемЭлектроннойПочты);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура создает ключ записи регистра сведений списка предметов писем
// и устанавливает в соответствии с ним текущую строку списка писем
//
Процедура ВосстановитьТекущийПредмет()
	
	// Сохранение/Восстановление предмета необходимо, т.к. при записи нового письма
	// в тот же предмет переписывается регистр сведений, текущая строка в отображаемом
	// табличном поле предметов будет скакать, т.к. отображается срез последних
	// и ключ текущей строки становится отличным от ключа такущес строки предидущего
	// письма.
	Если ТипЗнч(мСтруктураПредмета) = Тип("Структура")
		И мОтображатьСписокПредметов
		И ((ЭлементыФормы.ПредметыСписок.ТекущиеДанные <> Неопределено И ЭлементыФормы.ПредметыСписок.ТекущиеДанные.Предмет <> мСтруктураПредмета.Предмет) ИЛИ ЭлементыФормы.ПредметыСписок.ТекущиеДанные = Неопределено)
		И ЭлементыФормы.ГруппыПисемДерево.ТекущаяСтрока = мСтруктураПредмета.ГруппаПисемЭлектроннойПочты Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Предмет"                    , мСтруктураПредмета.Предмет);
		Запрос.УстановитьПараметр("ГруппаПисемЭлектроннойПочты", мСтруктураПредмета.ГруппаПисемЭлектроннойПочты);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПредметыЭлектронныхПисем.Период КАК Период,
		|	ПредметыЭлектронныхПисем.Регистратор,
		|	ПредметыЭлектронныхПисем.ГруппаПисемЭлектроннойПочты,
		|	ПредметыЭлектронныхПисем.Предмет
		|ИЗ
		|	РегистрСведений.ПредметыЭлектронныхПисем КАК ПредметыЭлектронныхПисем
		|
		|ГДЕ
		|	ПредметыЭлектронныхПисем.Предмет = &Предмет И
		|	ПредметыЭлектронныхПисем.ГруппаПисемЭлектроннойПочты = &ГруппаПисемЭлектроннойПочты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ЭлементыФормы.ПредметыСписок.ТекущаяСтрока = РегистрыСведений.ПредметыЭлектронныхПисем.СоздатьКлючЗаписи(Новый Структура("Регистратор,
			|Период,
			|ГруппаПисемЭлектроннойПочты,
			|Предмет",
			Выборка.Регистратор,
			Выборка.Период,
			Выборка.ГруппаПисемЭлектроннойПочты,
			Выборка.Предмет));
			
		КонецЕсли; 
		
	КонецЕсли;
	
	мСтруктураПредмета = Неопределено;
	
КонецПроцедуры

// Процедура управляет режимом отображения скрытых предметов.
//
Процедура УстановитьОтборСкрытыхПредметов()
	
	ПредметыСписок.Отбор.Скрытый.Значение = Ложь;
	ПредметыСписок.Отбор.Скрытый.Использование = НЕ мКнопкаОтображатьСкрытыеПредметыПисем.Пометка;
	
КонецПроцедуры

// Процедура обрабатывает событие "ПриАктивизацииСтроки" для списка предметов эл.писем.
//
// Параметры
//  Элемент - Табличное поле списка предметов эл.писем
//
Процедура ПредметыСписок_ПриАктивизацииСтроки()
	
	Элемент = ЭлементыФормы.ПредметыСписок;
	Если мОтображатьСписокПредметов И Элемент.Доступность Тогда
		Если Элемент.ТекущиеДанные = Неопределено Тогда
			ЭлектронныеПисьмаСписок.Отбор.ПредметКонтакта.Использование = Ложь;
		Иначе
			ЭлектронныеПисьмаСписок.Отбор.ПредметКонтакта.Использование = Истина;
			ЭлектронныеПисьмаСписок.Отбор.ПредметКонтакта.Значение      = Элемент.ТекущиеДанные.Предмет;
		КонецЕсли;
	Иначе
		ЭлектронныеПисьмаСписок.Отбор.ПредметКонтакта.Использование = Ложь;
	КонецЕсли;
	
	ВосстановитьТекущийПредмет();
	
КонецПроцедуры

// Процедура обрабатывает событие "ПриАктивизацииСтроки" для групп писем.
//
// Параметры
//  Элемент - Табличное поле списка групп писем
//
Процедура ГруппыПисем_ПриАктивизацииСтроки(Элемент)
	
	Если ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные <> Неопределено Тогда
		мОтображатьСписокПредметов = ФлагКлассификацииПисемПоПредметам(ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные.Владелец);
	КонецЕсли;
	
	// Отобразим только необходимые письма
	
	Для каждого ЭлементОтбора Из ЭлектронныеПисьмаСписок.Отбор Цикл
		Если ЭлементОтбора.Имя <> "УчетнаяЗапись" И ЭлементОтбора.Имя <> "ЭлектронныеПисьмаИСобытияПоОбъекту" Тогда
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		УдаленныеУчетнойЗаписи = мСоответствияГруппУдаленные.Получить(Элемент.ТекущиеДанные.Владелец);
		ЧерновикиУчетнойЗаписи = мСоответствияГруппЧерновики.Получить(Элемент.ТекущиеДанные.Владелец);
	Иначе
		УдаленныеУчетнойЗаписи = Неопределено;
		ЧерновикиУчетнойЗаписи = Неопределено;
	КонецЕсли; 
	
	ЭлектронныеПисьмаСписок.Отбор.УчетнаяЗапись.Использование = Истина;
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ЭлектронныеПисьмаСписок.Отбор.УчетнаяЗапись.ВидСравнения = ВидСравнения.Равно;
		ЭлектронныеПисьмаСписок.Отбор.УчетнаяЗапись.Значение     = УчетнаяЗапись;
	Иначе
		Если Элемент.ТекущиеДанные <> Неопределено И (УдаленныеУчетнойЗаписи = Элемент.ТекущиеДанные.Ссылка ИЛИ ЧерновикиУчетнойЗаписи = Элемент.ТекущиеДанные.Ссылка) Тогда
			ЭлектронныеПисьмаСписок.Отбор.УчетнаяЗапись.ВидСравнения = ВидСравнения.Равно;
			ЭлектронныеПисьмаСписок.Отбор.УчетнаяЗапись.Значение = Элемент.ТекущиеДанные.Владелец;
		Иначе
			ЭлектронныеПисьмаСписок.Отбор.УчетнаяЗапись.ВидСравнения = ВидСравнения.ВСписке;
			ЭлектронныеПисьмаСписок.Отбор.УчетнаяЗапись.Значение     = мДоступныеУчетныеЗаписи;
		КонецЕсли; 
	КонецЕсли; 
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.ВидСравнения  = ВидСравнения.Равно;
		ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Значение      = Справочники.ГруппыПисемЭлектроннойПочты.ПустаяСсылка();
		ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Использование = Истина;
	Иначе
		Если НЕ ЗначениеЗаполнено(УдаленныеУчетнойЗаписи) И НЕ ЗначениеЗаполнено(ЧерновикиУчетнойЗаписи) Тогда
			ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.ВидСравнения  = ВидСравнения.Равно;
			ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Значение      = Элемент.ТекущиеДанные.Ссылка;
			ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Использование = Истина;
		Иначе
			ЭлектронныеПисьмаСписок.Отбор.ПометкаУдаления.ВидСравнения     = ВидСравнения.Равно;
			ЭлектронныеПисьмаСписок.Отбор.ПометкаУдаления.Использование    = ЗначениеЗаполнено(УдаленныеУчетнойЗаписи);
			ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.Значение            = Перечисления.СтатусыПисем.Сохраненное;
			ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.ВидСравнения = ВидСравнения.Равно;
			ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Значение     = Элемент.ТекущиеДанные.Ссылка;
			Если Элемент.ТекущиеДанные.Ссылка = УдаленныеУчетнойЗаписи Тогда
				ЭлектронныеПисьмаСписок.Отбор.ПометкаУдаления.Значение          = Истина;
				ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.Использование        = Ложь;
				ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Использование = Ложь;
			ИначеЕсли Элемент.ТекущиеДанные.Ссылка = ЧерновикиУчетнойЗаписи Тогда
				ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.ВидСравнения         = ВидСравнения.Равно;
				ЭлектронныеПисьмаСписок.Отбор.ПометкаУдаления.Значение          = Ложь;
				ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.Использование        = Истина;
				ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Использование = Ложь;
			Иначе
				ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.ВидСравнения         = ВидСравнения.НеРавно;
				ЭлектронныеПисьмаСписок.Отбор.ПометкаУдаления.Значение          = Ложь;
				ЭлектронныеПисьмаСписок.Отбор.СтатусПисьма.Использование        = (ЧерновикиУчетнойЗаписи <> Неопределено);
				ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Использование = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	УстановитьОтборПредметов();
	
КонецПроцедуры

// Процедура обрабатывает событие "ПриАктивизацииСтроки" для списка писем.
//
// Параметры
//  Элемент - Табличное поле списка писем
//
Процедура ЭлектронныеПисьма_СписокПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		
		ЭлементыФормы.КнопкаВложения.Видимость = Ложь;
		
		ЭлементыФормы.ПолеОтправитель.Значение = "";
		ЭлементыФормы.ПолеКому.Значение        = "";
		ЭлементыФормы.ПолеТема.Значение        = "";
		ЭлементыФормы.ПолеКопии.Значение       = "";
		
		ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст("");
		
		ЭлементыФормы.КонтекстноеМенюСпискаПисем.Кнопки.УстановитьПометкуУдаления.Текст     = "Установить пометку удаления";
		ЭлементыФормы.КоманднаяПанельПочты.Кнопки[2].Кнопки.УстановитьПометкуУдаления.Текст = "Установить пометку удаления";
		
	Иначе
		
		Если Элемент.ТекущиеДанные.ПометкаУдаления Тогда
			ЭлементыФормы.КонтекстноеМенюСпискаПисем.Кнопки.УстановитьПометкуУдаления.Текст     = "Снять пометку удаления";
			ЭлементыФормы.КоманднаяПанельПочты.Кнопки[2].Кнопки.УстановитьПометкуУдаления.Текст = "Снять пометку удаления";
		Иначе
			ЭлементыФормы.КонтекстноеМенюСпискаПисем.Кнопки.УстановитьПометкуУдаления.Текст     = "Установить пометку удаления";
			ЭлементыФормы.КоманднаяПанельПочты.Кнопки[2].Кнопки.УстановитьПометкуУдаления.Текст = "Установить пометку удаления";
		КонецЕсли; 
		
		Если Элемент.ТекущиеДанные.НеРассмотрено И УправлениеЭлектроннойПочтой.ПолучитьЗначениеРеквизитаУчетнойЗаписи(Элемент.ТекущиеДанные.УчетнаяЗапись, "АвтоматическаяУстановкаПометкиРассмотрено") Тогда
			мТекущееПисьмо = Элемент.ТекущиеДанные.Ссылка;
			ПодключитьОбработчикОжидания("АвтоустановкаРассмотренностиПисьма", УправлениеЭлектроннойПочтой.ПолучитьЗначениеРеквизитаУчетнойЗаписи(Элемент.ТекущиеДанные.УчетнаяЗапись, "ИнтервалАвтоматическойУстановкиОтметкиРассмотрено"));
		КонецЕсли; 
		
		ЭлементыФормы.ПолеОтправитель.Значение = Элемент.ТекущиеДанные.ОтправительПредставление;
		ЭлементыФормы.ПолеКому.Значение        = Элемент.ТекущиеДанные.Кому;
		ЭлементыФормы.ПолеТема.Значение        = Элемент.ТекущиеДанные.Тема;
		ЭлементыФормы.ПолеКопии.Значение       = Элемент.ТекущиеДанные.Копии;
		
		ЭлементыФормы.КнопкаВложения.Видимость = Элемент.ТекущиеДанные.ЕстьВложения;
		
		Если Элемент.ТекущиеДанные.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			НайденноеСоответствие = глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем").Получить(Элемент.ТекущиеДанные.Ссылка);
			Если НайденноеСоответствие = Неопределено Тогда
				ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(Элемент.ТекущиеДанные.ТекстПисьма);
				ПодключитьОбработчикОжидания("ПриАктивизацииСтрокиСпискаПисемСОжиданием", 1);
			Иначе
				ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(НайденноеСоответствие);
				мОтображеннаяСтрокаСпискаПисем = Элемент.ТекущиеДанные.Ссылка;
			КонецЕсли; 
		Иначе
			Если Элемент.ТекущиеДанные.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст Тогда
				ТекстПисьма = УправлениеЭлектроннойПочтой.ВернутьТекстПисьмаВФорматеHTML(Элемент.ТекущиеДанные.ТекстПисьма);
				ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(ТекстПисьма);
			Иначе
				ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(Элемент.ТекущиеДанные.ТекстПисьма);
			КонецЕсли; 
			мОтображеннаяСтрокаСпискаПисем = Элемент.ТекущиеДанные.Ссылка;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает при необходимости отбор на РегистрСведенийСписок
//  предметы писем электронной почты.
//
Процедура УстановитьОтборПредметов(ОтборПоГруппе = Истина)
	
	Если мОтображатьСписокПредметов Тогда
		ПредметыСписок.Отбор.ГруппаПисемЭлектроннойПочты.Использование = ОтборПоГруппе;
		Если ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные.Ссылка) Тогда
			Если ФлагКлассификацииПисемПоПредметам(ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные.Владелец) И ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные.ИспользоватьПредметыПисем Тогда
				ПредметыСписок.Отбор.ГруппаПисемЭлектроннойПочты.Значение = ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные.Ссылка;
				ЭлементыФормы.ПредметыСписок.Доступность = Истина;
			Иначе
				ПредметыСписок.Отбор.ГруппаПисемЭлектроннойПочты.Значение = Справочники.ГруппыПисемЭлектроннойПочты.ПустаяСсылка();
				ЭлементыФормы.ПредметыСписок.Доступность = Ложь;
			КонецЕсли; 
		Иначе
			ПредметыСписок.Отбор.ГруппаПисемЭлектроннойПочты.Значение = Справочники.ГруппыПисемЭлектроннойПочты.ПустаяСсылка();
			ЭлементыФормы.ПредметыСписок.Доступность = Ложь;
		КонецЕсли;
	Иначе
		ПредметыСписок.Отбор.ГруппаПисемЭлектроннойПочты.Значение = Справочники.ГруппыПисемЭлектроннойПочты.ПустаяСсылка();
		ПредметыСписок.Отбор.ГруппаПисемЭлектроннойПочты.Использование = Истина;
		ЭлементыФормы.ПредметыСписок.Доступность = Ложь;
	КонецЕсли;
	Если НЕ ЭлементыФормы.ПредметыСписок.Доступность Тогда
		ЭлементыФормы.ПредметыСписок.Колонки.Предмет.ТекстШапки = НСтр("ru='Предметы недоступны';uk='Предмети недоступні'");
		ЭлементыФормы.ПредметыСписок.Колонки.Предмет.ШрифтШапки = Новый Шрифт(,, Истина);
	Иначе
		ЭлементыФормы.ПредметыСписок.Колонки.Предмет.ТекстШапки = НСтр("ru='Предметы писем';uk='Предмети листів'");
		ЭлементыФормы.ПредметыСписок.Колонки.Предмет.ШрифтШапки = Новый Шрифт;
	КонецЕсли; 
	ПредметыСписок_ПриАктивизацииСтроки();
	
КонецПроцедуры

// Процедура инициирует открытие формы нового электронного письма.
//
// Параметры:
//  Копирование - Булево, признак копирование письма
//  ВТекущейГруппе - Булево, Признак создания нового электронного письма в
//                   текущей группе электронных писем.
//
Процедура НаписатьНовоеПисьмо(Копирование = Ложь, ВТекущейГруппе = Ложь)
	
	Если Копирование Тогда
		
		НовыйОбъект = ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка.Скопировать();
		НовыйОбъект.ПолучитьФорму(, ЭтаФорма).Открыть();
		
	Иначе
		
		СтруктураНовогоПисьма = Новый Структура;
		
		Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			СтруктураНовогоПисьма.Вставить("УчетнаяЗапись", УчетнаяЗапись);
			Если ВТекущейГруппе Тогда
				Если ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные <> Неопределено И ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные.Ссылка.Владелец = УчетнаяЗапись Тогда
					СтруктураНовогоПисьма.Вставить("ГруппаУчетнойЗаписи", ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные.Ссылка);
				КонецЕсли;
			КонецЕсли; 
		Иначе
			Если ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные.Ссылка) Тогда
				СтруктураНовогоПисьма.Вставить("УчетнаяЗапись", ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные.Владелец);
				Если ВТекущейГруппе Тогда
					СтруктураНовогоПисьма.Вставить("ГруппаУчетнойЗаписи", ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные.Ссылка);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
		УправлениеЭлектроннойПочтой.НаписатьПисьмо(глЗначениеПеременной("глТекущийПользователь"), СтруктураНовогоПисьма,,,,, ЭтаФорма);
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура отображает текст текущего электронного письма в ХТМЛ поле.
// 
Процедура ОтображениеПисьмаТекущейСтроки()
	
	Элемент = ЭлементыФормы.ЭлектронныеПисьмаСписок;
	
	КопияТекстаПисьма = Элемент.ТекущиеДанные.ТекстПисьма;
	Если Элемент.ТекущиеДанные.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
		УправлениеЭлектроннойПочтой.ПропарситьHTMLИДВ_ТекстКартинки(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"), Элемент.ТекущиеДанные.Ссылка, КопияТекстаПисьма);
	КонецЕсли; 
	ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(КопияТекстаПисьма);
	
КонецПроцедуры

// Процедура обрабатывает событие активизации строки электронных писем с ожиданием
// в 1 сек, задержка производится для отображения больших картинок в ХТМЛ формате.
// 
Процедура ПриАктивизацииСтрокиСпискаПисемСОжиданием()
	
	ТекущаяСтрокаСпискаПисем = ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные;
	
	Если ТекущаяСтрокаСпискаПисем = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если мОтображеннаяСтрокаСпискаПисем <> ТекущаяСтрокаСпискаПисем.Ссылка Тогда
		ОтображениеПисьмаТекущейСтроки();
		ОтключитьОбработчикОжидания("ПриАктивизацииСтрокиСпискаПисемСОжиданием");
		мОтображеннаяСтрокаСпискаПисем = ТекущаяСтрокаСпискаПисем.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает отбор на список групп электронных писем
// в зависимости от текущей учетной записи.
//
Процедура УстановитьОтборГрупп()
	
	ЭлементыФормы.ГруппыПисемДерево.НастройкаОтбора.Владелец.Доступность = Ложь;
	ЭлементыФормы.ГруппыПисемДерево.Колонки.Владелец.Видимость = НЕ ЗначениеЗаполнено(УчетнаяЗапись);
	
	ГруппыПисемДерево.Порядок.Очистить();
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ГруппыПисемДерево.Отбор.Владелец.ВидСравнения  = ВидСравнения.ВСписке;
		ГруппыПисемДерево.Отбор.Владелец.Значение      = мДоступныеУчетныеЗаписи.Скопировать();
		ГруппыПисемДерево.Порядок.Установить("Владелец ВОЗР,Порядок ВОЗР");
	Иначе
		ГруппыПисемДерево.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
		ГруппыПисемДерево.Отбор.Владелец.Значение      = УчетнаяЗапись;
		ГруппыПисемДерево.Порядок.Установить("Порядок ВОЗР");
	КонецЕсли; 
	ГруппыПисемДерево.Отбор.Владелец.Использование = Истина;
	
КонецПроцедуры

// Процедура заполняет пункты меню "Отправить/Получить" в зависимости от
// уровня доступа текущего пользователя к транспорту эл.писем учетных записей.
//
Процедура ЗаполнитьПодменюОтправитьПолучить()
	
	// Подменю ПОЛУЧИТЬ/ОТПРАВИТЬ
	КнопкиПодменю = ЭлементыФормы.КоманднаяПанельПочты.Кнопки.ПодменюПолучитьОтправить.Кнопки;
	КнопкиПодменю1 = ЭлементыФормы.КоманднаяПанельПочты.Кнопки.Подменю.Кнопки.ПодменюПолучитьОтправить.Кнопки;
	КнопкиПодменю.Очистить();
	КнопкиПодменю1.Очистить();
	Для каждого ЭлементСписка Из мСтруктураДоступныхУчетныхЗаписей.Запись Цикл
		Кнопка = КнопкиПодменю.Добавить(("п" + СтрЗаменить(Строка(ЭлементСписка.Значение.УникальныйИдентификатор()), "-", "_")), ТипКнопкиКоманднойПанели.Действие, ("&" + Строка(мСтруктураДоступныхУчетныхЗаписей.Запись.Индекс(ЭлементСписка) + 1) + ". Получить: " + ЭлементСписка.Представление), Новый Действие("ПолучитьУчетнаяЗапись"));
		Кнопка.Картинка = БиблиотекаКартинок.ПолучитьУчетнаяЗапись;
		Кнопка = КнопкиПодменю1.Добавить(("п" + СтрЗаменить(Строка(ЭлементСписка.Значение.УникальныйИдентификатор()), "-", "_")), ТипКнопкиКоманднойПанели.Действие, ("&" + Строка(мСтруктураДоступныхУчетныхЗаписей.Запись.Индекс(ЭлементСписка) + 1) + ". Получить: " + ЭлементСписка.Представление), Новый Действие("ПолучитьУчетнаяЗапись"));
		Кнопка.Картинка = БиблиотекаКартинок.ПолучитьУчетнаяЗапись;
	КонецЦикла;
	Если мСтруктураДоступныхУчетныхЗаписей.Запись.Количество() > 1 Тогда
		КнопкиПодменю.Добавить("Разделитель99");
		КнопкиПодменю1.Добавить("Разделитель99");
	КонецЕсли; 
	Для каждого ЭлементСписка Из мСтруктураДоступныхУчетныхЗаписей.Запись Цикл
		Кнопка = КнопкиПодменю.Добавить(("о" + СтрЗаменить(Строка(ЭлементСписка.Значение.УникальныйИдентификатор()), "-", "_")), ТипКнопкиКоманднойПанели.Действие, ("&" + Строка(мСтруктураДоступныхУчетныхЗаписей.Запись.Индекс(ЭлементСписка) + 1) + ". Отправить: " + ЭлементСписка.Представление), Новый Действие("ОтправитьУчетнаяЗапись"));
		Кнопка.Картинка = БиблиотекаКартинок.ОтправитьУчетнаяЗапись;
		Кнопка = КнопкиПодменю1.Добавить(("о" + СтрЗаменить(Строка(ЭлементСписка.Значение.УникальныйИдентификатор()), "-", "_")), ТипКнопкиКоманднойПанели.Действие, ("&" + Строка(мСтруктураДоступныхУчетныхЗаписей.Запись.Индекс(ЭлементСписка) + 1) + ". Отправить: " + ЭлементСписка.Представление), Новый Действие("ОтправитьУчетнаяЗапись"));
		Кнопка.Картинка = БиблиотекаКартинок.ОтправитьУчетнаяЗапись;
	КонецЦикла;
	
	КнопкиПодменю.Добавить("Разделитель98");
	КнопкиПодменю1.Добавить("Разделитель98");
	
	Если мСтруктураДоступныхУчетныхЗаписей.Запись.Количество() > 1 Тогда
		Кнопка = КнопкиПодменю.Добавить("ПолучитьВсе"          , ТипКнопкиКоманднойПанели.Действие, "Получить ВСЕ"          , Новый Действие("ПолучитьВсе"));
		Кнопка.Картинка = БиблиотекаКартинок.ПолучитьВсе;
		Кнопка = КнопкиПодменю.Добавить("ОтправитьВсе"         , ТипКнопкиКоманднойПанели.Действие, "Отправить ВСЕ"         , Новый Действие("ОтправитьВсе"));
		Кнопка.Картинка = БиблиотекаКартинок.ОтправитьВсе;
		КнопкиПодменю.Добавить("Разделитель97");
	КонецЕсли; 
	Кнопка = КнопкиПодменю.Добавить("ОтправитьПолучитьВсе" , ТипКнопкиКоманднойПанели.Действие, "Получить/Отправить ВСЕ", Новый Действие("ОтправитьПолучитьВсе"));
	Кнопка.Картинка = БиблиотекаКартинок.ОтправитьПолучитьВсе;
	
	Если мСтруктураДоступныхУчетныхЗаписей.Запись.Количество() > 1 Тогда
		Кнопка = КнопкиПодменю1.Добавить("ПолучитьВсе"         , ТипКнопкиКоманднойПанели.Действие, "Получить ВСЕ"          , Новый Действие("ПолучитьВсе"));
		Кнопка.Картинка = БиблиотекаКартинок.ПолучитьВсе;
		Кнопка = КнопкиПодменю1.Добавить("ОтправитьВсе"        , ТипКнопкиКоманднойПанели.Действие, "Отправить ВСЕ"         , Новый Действие("ОтправитьВсе"));
		Кнопка.Картинка = БиблиотекаКартинок.ОтправитьВсе;
		КнопкиПодменю1.Добавить("Разделитель97");
	КонецЕсли; 
	Кнопка = КнопкиПодменю1.Добавить("ОтправитьПолучитьВсе", ТипКнопкиКоманднойПанели.Действие, "Получить/Отправить ВСЕ", Новый Действие("ОтправитьПолучитьВсе"));
	Кнопка.Картинка = БиблиотекаКартинок.ОтправитьПолучитьВсе;
	
КонецПроцедуры

// Процедура изменяет флаг рассмотренности электронного письма.
// 
// Параметры:
//  ВыделенныеСтроки  - Массив, выделенные строки табличного поля
//  НовыйФлаг         - Булево, новый флаг рассмотренности эл.писем
//  ВыдаватьСообщения - Булево, выдавать сообщения о невозможности изменения флага рассмотренности
// 
Процедура ИзменитьФлагРассмотренностьПисьма(ВыделенныеСтроки, НовыйФлаг, ВыдаватьСообщения = Истина)
	
	СписокОтправка = мСтруктураДоступныхУчетныхЗаписей.Запись;
	
	Если НовыйФлаг Тогда
		ФормаДаты = ПолучитьОбщуюФорму("ФормаИзмененияГраницыРассмотренияЭлектронногоПисьма");
		Если ВыделенныеСтроки.Количество() = 1 Тогда
			ФормаДаты.РассмотретьПосле = ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.РассмотретьПосле;
		КонецЕсли; 
		РассмотретьПосле = ФормаДаты.ОткрытьМодально();
		Если ТипЗнч(РассмотретьПосле) <> Тип("Дата") Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	КолСтрок = ВыделенныеСтроки.Количество();
	КолОбработано = 0;
	Для каждого Строка Из ВыделенныеСтроки Цикл
		Если ТипЗнч(Строка) = Тип("ДокументСсылка.ЭлектронноеПисьмо") И (Строка.НеРассмотрено <> НовыйФлаг) ИЛИ (НовыйФлаг И Строка.РассмотретьПосле <> РассмотретьПосле) Тогда
			Если СписокОтправка.НайтиПоЗначению(Строка.УчетнаяЗапись) = Неопределено Тогда
				Если ВыдаватьСообщения Тогда
					Сообщить(НСтр("ru='Вам запрещено редактировать письма учетной записи ';uk='Вам заборонено редагувати листи облікового запису '") + УчетнаяЗапись);
				КонецЕсли; 
				Продолжить;
			КонецЕсли; 
			Объект = Строка.ПолучитьОбъект();
			Объект.НеВыдаватьСообщенияПриЗаписиОбъекта = НЕ ВыдаватьСообщения;
			Объект.НеРассмотрено = НовыйФлаг;
			Если НовыйФлаг Тогда
				Объект.РассмотретьПосле = РассмотретьПосле;
			КонецЕсли;
			Если НЕ НовыйФлаг И НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
				Объект.Ответственный = глЗначениеПеременной("глТекущийПользователь");
			КонецЕсли; 
			Попытка
				Объект.Записать();
				Оповестить("ЗаписаноЭлектронноеПисьмо", Объект.Ссылка);
			Исключение
				Сообщить(НСтр("ru='Флаг рассмотренности документа ';uk='Прапор розглянутості документа '") + Объект + НСтр("ru=' не изменен.';uk=' не змінено.'"));
			КонецПопытки;
		КонецЕсли; 
		КолОбработано = КолОбработано + 1;
		Состояние(НСтр("ru='Обработано ';uk='Опрацьовано'") + КолОбработано + НСтр("ru=' из ';uk=' з '") + КолСтрок);
	КонецЦикла; 
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Процедура обработчика ожидания, которая контролирует автоматическую установку флага прочитанности
// эл.писем, настройка устанавливается в параметрах учетной записи.
// (подключается через обработчик ожидания)
Процедура АвтоустановкаРассмотренностиПисьма()
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено
		И ТипЗнч(мТекущееПисьмо) = Тип("ДокументСсылка.ЭлектронноеПисьмо") И мТекущееПисьмо.ПолучитьОбъект() <> Неопределено
		И ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка = мТекущееПисьмо
		И ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.НеРассмотрено Тогда
		ВыделенныеСтроки = Новый Массив;
		ВыделенныеСтроки.Добавить(ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущаяСтрока);
		ИзменитьФлагРассмотренностьПисьма(ВыделенныеСтроки, Ложь, Ложь);
	КонецЕсли;
	ОтключитьОбработчикОжидания("АвтоустановкаРассмотренностиПисьма");
	
КонецПроцедуры

// Процедура изменяет оформление строки письма
// 
// Параметры:
//  ВыделенныеСтроки  - Массив, выделенные строки табличного поля
//  Установить        - Булево, флаг установки/снятие оформления
//  ВыдаватьСообщения - Булево, выдавать сообщения о невозможности изменения флага рассмотренности
// 
Процедура ИзменитьОформление(ВыделенныеСтроки,Установить,ВыдаватьСообщения = Истина)
	
	СписокОтправка = мСтруктураДоступныхУчетныхЗаписей.Запись;
	
	Если Установить Тогда
		
		ФормаВыбора = Справочники.ОформленияСтрокПисем.ПолучитьФормуВыбора();
		ФормаВыбора.ОткрытьМодально();
		Оформление = ФормаВыбора.ТекущийЭлемент.ТекущаяСтрока.Ссылка;
		
		Если НЕ ЗначениеЗаполнено(Оформление) Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		Оформление = Справочники.ОформленияСтрокПисем.ПустаяСсылка();
	КонецЕсли;
	
	КолСтрок = ВыделенныеСтроки.Количество();
	КолОбработано = 0;
	Для каждого Строка Из ВыделенныеСтроки Цикл
		Если ТипЗнч(Строка) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
			Если Строка.Оформление = Оформление Тогда
				Продолжить;
			КонецЕсли;
			Если СписокОтправка.НайтиПоЗначению(Строка.УчетнаяЗапись) = Неопределено Тогда
				Если ВыдаватьСообщения Тогда
					Сообщить(НСтр("ru='Вам запрещено редактировать письма учетной записи ';uk='Вам заборонено редагувати листи облікового запису '") + УчетнаяЗапись);
				КонецЕсли; 
				Продолжить;
			КонецЕсли; 
			Объект = Строка.ПолучитьОбъект();
			Объект.НеВыдаватьСообщенияПриЗаписиОбъекта = НЕ ВыдаватьСообщения;
			Объект.Оформление = Оформление;
			Попытка
				Объект.Записать();
			Исключение
				Сообщить(НСтр("ru='Оформление документа ';uk='Оформлення документа '") + Объект + НСтр("ru=' не изменено.';uk=' не змінено.'"));
			КонецПопытки;
		КонецЕсли; 
		КолОбработано = КолОбработано + 1;
		Состояние(НСтр("ru='Обработано ';uk='Опрацьовано'") + КолОбработано + НСтр("ru=' из ';uk=' з '") + КолСтрок);
	КонецЦикла; 
	
КонецПроцедуры

// Процедура обрабатывает событие начала редактирования электронного письма.
// 
// Параметры:
//  Элемент - Табличное поле списка эл.писем
//  Отказ   - Булево, флаг отказа от редактирования эл.письма
// 
Процедура ПередНачаломИзмененияЭлектронногоПисьма(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		СписокОтправка = мСтруктураДоступныхУчетныхЗаписей.Запись;
		Если Элемент.ТекущиеДанные.НеРассмотрено И УправлениеЭлектроннойПочтой.ПолучитьЗначениеРеквизитаУчетнойЗаписи(Элемент.ТекущиеДанные.УчетнаяЗапись, "АвтоматическаяУстановкаПометкиРассмотрено") И СписокОтправка.НайтиПоЗначению(Элемент.ТекущиеДанные.УчетнаяЗапись) <> Неопределено Тогда
			Объект = Элемент.ТекущиеДанные.Ссылка.ПолучитьОбъект();
			Объект.НеРассмотрено = Ложь;
			Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
				Объект.Ответственный = глЗначениеПеременной("глТекущийПользователь");
			КонецЕсли; 
			Попытка
				Объект.Записать();
				Оповестить("ЗаписаноЭлектронноеПисьмо", Объект.Ссылка);
			Исключение
			КонецПопытки;
			СобратьСтатистикуРассмотренностиПисем();
		КонецЕсли;
		// Перехватываем для того, чтобы установить владельца формы
		Элемент.ТекущиеДанные.Ссылка.ПолучитьФорму(, ЭтаФорма).Открыть();
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура производит общее обновление связей на форме, списка доступных учетных записей
// и электронных писем.
//
// Параметры:
//  ОбновлятьОтбор               - Булево, признак необходимости обновления отбора списков
//  ОбновлятьТекстТекущегоПисьма - Булево, признак обновления текста текущего эл.письма
//                                 в поле ХТМЛ документа.
//
Процедура ОбщееОбновление(ОбновлятьОтбор = Истина, ОбновлятьТекстТекущегоПисьма = Истина)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		ТекущееПисьмо = ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка;
	КонецЕсли; 
	
	// Обновляются доступные учетные записи и подменю их выбора
	СформироватьПодменюУчетныхЗаписей();

	Если мДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Нет доступных учетных записей.';uk='Немає доступних облікових записів.'"));
		ЭтаФорма.Закрыть();
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьПодменюОтправитьПолучить();
	
	УстановитьОтборГрупп();
	
	ГруппыПисемДерево.Обновить();
	
	Если ОбновлятьОтбор Тогда
		ГруппыПисем_ПриАктивизацииСтроки(ЭлементыФормы.ГруппыПисемДерево);
	КонецЕсли; 
	
	ПредметыСписок.Обновить();
	
	СобратьСтатистикуРассмотренностиПисем();
	
	ЭлектронныеПисьмаСписок.Обновить();
	
	Если ТекущееПисьмо <> Неопределено Тогда
		ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущаяСтрока = ТекущееПисьмо;
	КонецЕсли;
	
	Если ОбновлятьТекстТекущегоПисьма Тогда
		ЭлектронныеПисьма_СписокПриАктивизацииСтроки(ЭлементыФормы.ЭлектронныеПисьмаСписок);
	КонецЕсли; 
	
	мИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем");
	
КонецПроцедуры

// Процедура обрабатывает событие начала поиска объектов ИБ по адресу эл.почты и представлению.
// 
// Параметры:
//  ВыделенныйТекст - Текст для поиска, содержащий адрес эл.почты И/ИЛИ представление объекта.
// 
Процедура ПроизвестиПоиск(ВыделенныйТекст)
	
	ТекстДляПоиска = ВыделенныйТекст;
	
	АдреснаяКнига = Обработки.АдреснаяКнига.Создать();
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		АдреснаяКнига.УчетнаяЗапись = УчетнаяЗапись;
	КонецЕсли; 
	АдреснаяКнига.ОткрытаДляВыбора  = Истина;
	АдреснаяКнига.ОткрытиеПриВыборе = Истина;
	АдреснаяКнига.ПроизвестиПоиск(ТекстДляПоиска);
	
КонецПроцедуры

// Процедура управляет видимостью списка предметов электронных писем.
//
Процедура ВидимостьСпискаПредметов()
	
	Если ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные <> Неопределено Тогда
		ТекущаяГруппа = ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные.Ссылка;
	КонецЕсли; 
	
	Если ТекущаяГруппа <> Неопределено Тогда
		ЭлементыФормы.ГруппыПисемДерево.ТекущаяСтрока = ТекущаяГруппа;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает/снимает признак пометки удаления у электронных писем.
// 
// Параметры:
//  Элемент - Табличное поле списка электронных писем.
//
Процедура УстановитьПометкуУдаленияЭлектронногоПисьма(Элемент)
	
	Если Элемент.ВыделенныеСтроки.Количество() > 0 Тогда
		
		Если Элемент.ВыделенныеСтроки.Количество() = 1 Тогда
			Если Элемент.ТекущиеДанные.ПометкаУдаления Тогда
				СтрокаВопроса = НСтр("ru='Снять с объекта пометку на удаление?';uk=""Зняти з об'єкта позначку на вилучення?""");
			Иначе
				СтрокаВопроса = НСтр("ru='Пометить объект на удаление?';uk=""Позначити об'єкт для вилучення?""");
			КонецЕсли;
		Иначе
			ФлагУдаления = Ложь;
			ФлагНеУдаления = Ложь;
			Для каждого Строка Из Элемент.ВыделенныеСтроки Цикл
				Если Строка.ПометкаУдаления Тогда
					ФлагУдаления = Истина;
				Иначе
					ФлагНеУдаления = Истина;
				КонецЕсли;
				Если ФлагНеУдаления И ФлагУдаления Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			Если ФлагНеУдаления И ФлагУдаления Тогда
				СтрокаВопроса = НСтр("ru='Изменить у объектов пометку на удаление?';uk=""Змінити в об'єктів позначку на вилучення?""");
			ИначеЕсли ФлагУдаления Тогда
				СтрокаВопроса = НСтр("ru='Снять с объекта пометку на удаление?';uk=""Зняти з об'єкта позначку на вилучення?""");
			Иначе
				СтрокаВопроса = НСтр("ru='Пометить объект на удаление?';uk=""Позначити об'єкт для вилучення?""");
			КонецЕсли;
		КонецЕсли; 
		
		ОтветНаВопрос = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ВсегоПисем = Элемент.ВыделенныеСтроки.Количество();
		ТекСтрока = 0;
		Для каждого ВыбраннаяСтрока Из Элемент.ВыделенныеСтроки Цикл
			ТекСтрока = ТекСтрока + 1;
			Состояние("Обработно " + Строка(ТекСтрока) + " из " + Строка(ВсегоПисем));
			Объект = ВыбраннаяСтрока.ПолучитьОбъект();
			Попытка
				Объект.УстановитьПометкуУдаления(НЕ Объект.ПометкаУдаления);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла; 
		
	КонецЕсли;
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Процедура формирует новый документ "Событие" на основании электронного письма.
//
Процедура ВвестиСобытиеПоПисьму()
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		НовоеСобытие = Документы.Событие.СоздатьДокумент();
		НовоеСобытие.Заполнить(ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка);
		НовоеСобытие.ПолучитьФорму().Открыть();
	КонецЕсли; 
	
КонецПроцедуры

Процедура СоздатьПисьмоСВложениями(ПараметрыПеретаскивания)
	
	// Определим учетную запись для создания письма
	УчетнаяЗапись = Неопределено;
	
	СписокДоступныхЗаписей = УправлениеЭлектроннойПочтой.ПроверитьУчетныеЗаписиДляОтправкиПисем(глЗначениеПеременной("глТекущийПользователь"));
	Если СписокДоступныхЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		УчетнаяЗапись = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяУчетнаяЗапись");
		Если СписокДоступныхЗаписей.НайтиПоЗначению(УчетнаяЗапись) = Неопределено Тогда
			УчетнаяЗапись = Неопределено;
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		УчетнаяЗапись = СписокДоступныхЗаписей[0].Значение;
	КонецЕсли;
	
	// создадим письмо
	Письмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
	Письмо.УчетнаяЗапись = УчетнаяЗапись;
	
	Форма = Письмо.ПолучитьФорму();
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		
		// добавим вложение
		ПолученныйФайл = ПараметрыПеретаскивания.Значение;
		
		НоваяСтрока = Форма.ВложенияПисьмаТЗ.Добавить();
		Попытка
			НоваяСтрока.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолученныйФайл.ПолноеИмя), Новый СжатиеДанных);
			НоваяСтрока.ИмяФайла = Сред(ПолученныйФайл.ПолноеИмя, СтрДлина(ПолученныйФайл.Путь) + 1);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Массив = ПараметрыПеретаскивания.Значение;
		
		Для каждого ПолученныйФайл Из Массив Цикл
			
			Состояние(НСтр("ru='Добавляется файл: ';uk='Додається файл: '") + ПолученныйФайл.Имя);
			
			НачатьТранзакцию();
			
			Отказ = Ложь;
			
			НоваяСтрока = Форма.ВложенияПисьмаТЗ.Добавить();
			Попытка
				НоваяСтрока.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолученныйФайл.ПолноеИмя), Новый СжатиеДанных);
				НоваяСтрока.ИмяФайла = Сред(ПолученныйФайл.ПолноеИмя, СтрДлина(ПолученныйФайл.Путь) + 1);
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
				Отказ = Истина;
			КонецПопытки;
			
			Если Отказ Тогда
				ОтменитьТранзакцию();
			Иначе
				ЗафиксироватьТранзакцию();
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ОбработкаВыбора формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Строка") И ЗначениеВыбора = "ЗаписаноЭлектронноеПисьмо" Тогда
		СохранитьТекущийПредмет();
		ОбщееОбновление(Ложь);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ОбработкаОповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РоботПолученияПисем" Тогда
		СохранитьТекущийПредмет();
		ОбщееОбновление(Ложь, Ложь);
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события НачалоПеретаскивания элемента формы ЭлектронныеПисьмаСписок.
//
Процедура ЭлектронныеПисьмаСписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Значение = Новый Структура("ПараметрыПеретаскивания", ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

// Обработчик события onclick элемента формы ПолеHTMLДокумента.
//
Процедура ПолеHTMLДокументаonclick(Элемент, pEvtObj)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные = Неопределено Тогда
		УправлениеЭлектроннойПочтой.ОбработкаСобытияOnClickПоляHTML(глЗначениеПеременной("глТекущийПользователь"), Элемент, pEvtObj,,, ЭтаФорма);
	Иначе
		УправлениеЭлектроннойПочтой.ОбработкаСобытияOnClickПоляHTML(глЗначениеПеременной("глТекущийПользователь"), Элемент, pEvtObj, ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.УчетнаяЗапись, ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка.ГруппаУчетнойЗаписи, ЭтаФорма, ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПроверкаПеретаскивания элемента формы ГруппыПисемДерево.
//
Процедура ГруппыПисемДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") или ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Строка) <> Тип("СправочникСсылка.ГруппыПисемЭлектроннойПочты") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Строка.Владелец.ГруппаЧерновики) И Строка = Строка.Владелец.ГруппаЧерновики Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
		
		ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение.ПараметрыПеретаскивания;
		
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
			Если ЗначениеПеретаскивания.Количество() = 1 Тогда
				ЗначениеПеретаскивания = ЗначениеПеретаскивания[0];
			Иначе
				Возврат;
			КонецЕсли; 
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
			Если НЕ ЗначениеЗаполнено(Строка.Владелец.ГруппаУдаленные) Тогда
				Если ЗначениеПеретаскивания.ГруппаУчетнойЗаписи = Строка Тогда
					ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
				КонецЕсли;
			Иначе
				Если (Строка.Владелец <> ЗначениеПеретаскивания.УчетнаяЗапись И Строка.Владелец.ГруппаУдаленные = Строка)
					ИЛИ (Строка = Строка.Владелец.ГруппаУдаленные И ЗначениеПеретаскивания.ПометкаУдаления)
					ИЛИ (ЗначениеПеретаскивания.ГруппаУчетнойЗаписи = Строка И НЕ ЗначениеПеретаскивания.ПометкаУдаления) Тогда
					ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.ГруппыПисемЭлектроннойПочты") Тогда
		
		Если НЕ ЗначениеЗаполнено(Строка) И (НЕ Элемент.Значение.Отбор.Владелец.Использование ИЛИ ТипЗнч(Элемент.Значение.Отбор.Владелец.Значение) <> Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты")) Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Иначе
			УчетнаяЗаписьОбъектаПеретаскивания = ПараметрыПеретаскивания.Значение.Владелец;
			Если УчетнаяЗаписьОбъектаПеретаскивания.Ответственный <> глЗначениеПеременной("глТекущийПользователь") ИЛИ (ЗначениеЗаполнено(Строка) И Строка.Владелец <> УчетнаяЗаписьОбъектаПеретаскивания) Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Перетаскивание элемента формы ГруппыПисемДерево.
//
Процедура ГруппыПисемДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПереносВДругуюУчетнуюЗапись = Неопределено;
		
		ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение.ПараметрыПеретаскивания;
		
		Если ТипЗнч(Строка) = Тип("СправочникСсылка.ГруппыПисемЭлектроннойПочты") Тогда
			Если ТипЗнч(ЗначениеПеретаскивания) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
				Если НЕ Строка.Пустая() И Строка.Владелец <> ЗначениеПеретаскивания.УчетнаяЗапись Тогда
					Если ПереносВДругуюУчетнуюЗапись = Неопределено Тогда
						ОтветНаВопрос = Вопрос(НСтр("ru='Перенести письмо в другую учетную запись?';uk='Перенести лист в інший обліковий запис?'"), РежимДиалогаВопрос.ДаНет);
						Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
							ПереносВДругуюУчетнуюЗапись = Ложь;
							Возврат;
						Иначе
							ПереносВДругуюУчетнуюЗапись = Истина;
						КонецЕсли; 
					ИначеЕсли ПереносВДругуюУчетнуюЗапись = Ложь Тогда
						Возврат;
					КонецЕсли; 
				КонецЕсли; 
				ДокументОбъект = ЗначениеПеретаскивания.ПолучитьОбъект();
				Если НЕ Строка.Пустая() Тогда
					ДокументОбъект.УчетнаяЗапись       = Строка.Владелец;
				КонецЕсли; 
				ДокументОбъект.ГруппаУчетнойЗаписи = Строка;
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			ИначеЕсли ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
				НачатьТранзакцию();
				Отказ = Ложь;
				Если Строка.Владелец.ГруппаУдаленные = Строка И ЗначениеЗаполнено(Строка) Тогда
					ЭтоКорзина = Истина;
				Иначе
					ЭтоКорзина = Ложь;
				КонецЕсли;
				КоличествоВсего = ЗначениеПеретаскивания.Количество();
				КолТекущийЭлемент = 0;
				Для каждого ЭлементМассива Из ЗначениеПеретаскивания Цикл
					КолТекущийЭлемент = КолТекущийЭлемент + 1;
					Состояние(НСтр("ru='Обработано: ';uk='Опрацьовано: '") + КолТекущийЭлемент + НСтр("ru=' из ';uk=' з '") + КоличествоВсего);
					Если ТипЗнч(ЭлементМассива) <> Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
						Продолжить;
					КонецЕсли;
					Если НЕ Строка.Пустая() И Строка.Владелец <> ЭлементМассива.УчетнаяЗапись Тогда
						Если ПереносВДругуюУчетнуюЗапись = Неопределено Тогда
							ОтветНаВопрос = Вопрос(НСтр("ru='Разрешить перенесить письма в другую учетную запись?';uk='Дозволити перенесення листа в інший обліковий запис?'"), РежимДиалогаВопрос.ДаНет);
							Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
								ПереносВДругуюУчетнуюЗапись = Ложь;
								Продолжить;
							Иначе
								ПереносВДругуюУчетнуюЗапись = Истина;
							КонецЕсли; 
						ИначеЕсли ПереносВДругуюУчетнуюЗапись = Ложь Тогда
							Продолжить;
						КонецЕсли; 
					КонецЕсли; 
					Если ЭтоКорзина И Строка.Владелец <> ЭлементМассива.УчетнаяЗапись Тогда
						Сообщить(НСтр("ru='Нельзя переносить в корзину другой учетной записи. Электронное письмо № ';uk='Не можна переносити в кошик іншого облікового запису. Електронний лист № '") + СокрЛП(ЭлементМассива.Номер) + НСтр("ru=' не перенесено.';uk=' не перенесено.'"));
						Продолжить;
					КонецЕсли; 
					ДокументОбъект = ЭлементМассива.ПолучитьОбъект();
					Если НЕ Строка.Пустая() Тогда
						ДокументОбъект.УчетнаяЗапись = Строка.Владелец;
					КонецЕсли;
					Если НЕ ЭтоКорзина Тогда
						ДокументОбъект.ГруппаУчетнойЗаписи = Строка;
					КонецЕсли;
					Если ЗначениеЗаполнено(Строка.Владелец.ГруппаУдаленные) Тогда
						ДокументОбъект.ПометкаУдаления = ЭтоКорзина;
					КонецЕсли; 
					Попытка
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						Сообщить(ОписаниеОшибки());
						Отказ = Истина;
						Прервать;
					КонецПопытки;
				КонецЦикла;
				Если Отказ Тогда
					ОтменитьТранзакцию();
				Иначе
					ЗафиксироватьТранзакцию();
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.ГруппыПисемЭлектроннойПочты") Тогда
		
		Если Строка.Владелец = ПараметрыПеретаскивания.Значение.Владелец ИЛИ НЕ ЗначениеЗаполнено(Строка.Владелец) Тогда
			
			Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
				ОбъектДляЗаписи = ПараметрыПеретаскивания.Значение.Получитьобъект();
			ИначеЕсли ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
				ОбъектДляЗаписи = ПараметрыПеретаскивания.Значение.Скопировать();
			КонецЕсли;
			
			ОбъектДляЗаписи.Родитель = Строка;
			
			Попытка
				ОбъектДляЗаписи.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") или ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СоздатьПисьмоСВложениями(ПараметрыПеретаскивания);
		
	КонецЕсли;
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КнопкаВложения.
//
Процедура КнопкаВложенияНажатие(Элемент)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекСсылка"   , ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенияЭлектронныхПисем.Ссылка   КАК Ссылка,
	|	ВложенияЭлектронныхПисем.ИмяФайла КАК ИмяФайла
	|ИЗ
	|	Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
	|ГДЕ
	|	ВложенияЭлектронныхПисем.Объект = &ТекСсылка
	|	И
	|	ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма = &ПустаяСтрока
	|";
	
	Если НЕ ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.ПометкаУдаления Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И
		|	ВложенияЭлектронныхПисем.ПометкаУдаления = Ложь
		|";
	КонецЕсли; 
	
	СписокВыбора = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Картинка = РаботаСФайлами.ПолучитьПиктограммуФайла(РаботаСФайлами.ПолучитьРасширениеФайла(Выборка.ИмяФайла));
		СписокВыбора.Добавить(Выборка.Ссылка, Выборка.ИмяФайла,, Картинка);
	КонецЦикла;
	СписокВыбора.Добавить(Справочники.ВложенияЭлектронныхПисем.ПустаяСсылка(), "Открыть список вложений");
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзМеню(СписокВыбора, Элемент);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение.Пустая() Тогда
		
		ФормаФайлов = Справочники.ВложенияЭлектронныхПисем.ПолучитьФорму("ФормаСпискаФайловИИзображений", ЭтаФорма);
		
		// Дополнительные файлы
		ФормаФайлов.Отбор.Объект.Использование = Истина;
		ФормаФайлов.Отбор.Объект.ВидСравнения  = ВидСравнения.Равно;
		ФормаФайлов.Отбор.Объект.Значение      = ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка;
		ФормаФайлов.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Объект.Доступность = Ложь;
		
		ФормаФайлов.ОбязательныеОтборы = Новый Структура("Объект", ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка);
		ФормаФайлов.Заголовок = НСтр("ru='Вложения письма (';uk='Вкладення листа ('") + СокрЛП(Строка(ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка)) + ")";
		ФормаФайлов.Открыть();
		
	Иначе
		
		ОткликФормы = ЭтотОбъект.ПолучитьФорму("ФормаОткрытияВложений").ОткрытьМодально();
		
		Если ОткликФормы = Неопределено ИЛИ ТипЗнч(ОткликФормы) <> Тип("Булево") Тогда
			Возврат;
		КонецЕсли;
		
		Если ОткликФормы Тогда
			РаботаСФайлами.ОткрытьФайлы(ВыбранныйЭлемент.Значение, глЗначениеПеременной("глТекущийПользователь"),, Ложь);
		Иначе
			
			СохраненноеИмяКаталога = ВосстановитьЗначение("ИмяКаталогаСохраненияФайлов");
			Если СохраненноеИмяКаталога = Неопределено Тогда
				ИмяКаталога = РаботаСФайлами.ПолучитьИмяКаталога(глЗначениеПеременной("глТекущийПользователь"));
			Иначе
				ИмяКаталога = СохраненноеИмяКаталога;
			КонецЕсли;
			
			ТолькоЧтение = Ложь;
			
			ФормаСохраненияФайлов = Справочники.ВложенияЭлектронныхПисем.ПолучитьФорму("ФормаСохраненияФайлов");
			ФормаСохраненияФайлов.ИмяКаталога    = ИмяКаталога;
			ФормаСохраненияФайлов.ТолькоЧтение   = ТолькоЧтение;
			ФормаСохраненияФайлов.ОткрытьКаталог = Ложь;
			СтруктураПараметров = ФормаСохраненияФайлов.ОткрытьМодально();
			
			Если СтруктураПараметров = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если Не РаботаСФайлами.ПроверитьСуществованиеКаталога(СтруктураПараметров.ИмяКаталога) Тогда
				Возврат;
			КонецЕсли;
			
			СохранитьЗначение("ИмяКаталогаСохраненияФайлов", СтруктураПараметров.ИмяКаталога);
			
			СпособПерезаписи = "";
			
			ИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(СтруктураПараметров.ИмяКаталога, ВыбранныйЭлемент.Значение.ИмяФайла);
			Состояние(НСтр("ru='Сохраняется файл: ';uk='Зберігається файл: '") + ИмяФайла);
			РаботаСФайлами.СохранитьФайлНаДиске(ВыбранныйЭлемент.Значение.Хранилище, ИмяФайла, СтруктураПараметров.ТолькоЧтение, СпособПерезаписи);
			
			Если СтруктураПараметров.ОткрытьКаталог Тогда
				ЗапуститьПриложение(СтруктураПараметров.ИмяКаталога);
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы ГруппыПисемДерево.
//
Процедура ГруппыПисемДеревоПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 1;
	Иначе
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Владелец) Тогда
			ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 1;
		Иначе
			ГруппаВходящие      = мСоответствияГруппВходящие.Получить(ДанныеСтроки.Владелец);
			ГруппаИсходящие     = мСоответствияГруппИсходящие.Получить(ДанныеСтроки.Владелец);
			ГруппаУдаленные     = мСоответствияГруппУдаленные.Получить(ДанныеСтроки.Владелец);
			ГруппаЧерновики     = мСоответствияГруппЧерновики.Получить(ДанныеСтроки.Владелец);
			ГруппаНежелательные = мСоответствияГруппНежелательные.Получить(ДанныеСтроки.Владелец);
			Если ГруппаВходящие = ДанныеСтроки.Ссылка Тогда
				ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 3;
			ИначеЕсли ГруппаИсходящие = ДанныеСтроки.Ссылка Тогда
				ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 2;
			ИначеЕсли ГруппаУдаленные = ДанныеСтроки.Ссылка Тогда
				ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 0;
			ИначеЕсли ГруппаЧерновики = ДанныеСтроки.Ссылка Тогда
				СтатистикаГруппы = мСтатистикаСохраненныхПисем.Получить(ГруппаЧерновики);
				Если СтатистикаГруппы <> Неопределено Тогда
					ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 6;
				Иначе
					ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 5;
				КонецЕсли; 
			ИначеЕсли ГруппаНежелательные = ДанныеСтроки.Ссылка Тогда
				ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 7;
			Иначе
				Если ДанныеСтроки.ПометкаУдаления Тогда
					ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 4;
				Иначе
					ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 1;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
	СтатистикаГруппы = мСтатистикаРассмотренностиПисем.Получить(?(ДанныеСтроки = Неопределено, Справочники.ГруппыПисемЭлектроннойПочты.ПустаяСсылка(), ДанныеСтроки.Ссылка));
	Если ТипЗнч(СтатистикаГруппы) = Тип("Число") И СтатистикаГруппы > 0 Тогда
		ОформлениеСтроки.Ячейки.Наименование.Текст = Строка(ДанныеСтроки.Наименование) + " (" + СтатистикаГруппы + ")";
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Выбор элемента формы ГруппыПисемДерево.
//
Процедура ГруппыПисемДеревоВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если мИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем Тогда
		СтандартнаяОбработка = Ложь;
		ГруппыПисем_ПриАктивизацииСтроки(Элемент);
		ПредметыСписок_ПриАктивизацииСтроки();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы ГруппыПисемДерево.
//
Процедура ГруппыПисемДеревоПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбработчикОжиданияГруппыПисемДеревоПриАктивизацииСтроки", 0.1, Истина);	 
    
КонецПроцедуры

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля ГруппыПисемДерево
//
Процедура ОбработчикОжиданияГруппыПисемДеревоПриАктивизацииСтроки()
    
    Если НЕ мИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем Тогда
		ГруппыПисем_ПриАктивизацииСтроки(ЭлементыФормы.ГруппыПисемДерево);
		ПредметыСписок_ПриАктивизацииСтроки();
	КонецЕсли;

КонецПроцедуры // ОбработчикОжиданияГруппыПисемДеревоПриАктивизацииСтроки



// Обработчик события ПередНачаломДобавления элемента формы ГруппыПисемДерево.
//
Процедура ГруппыПисемДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Если Элемент.ТекущиеДанные = Неопределено И НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) И НЕ Копирование Тогда
	
		Отказ = Истина;
		
		НоваяГруппа = Справочники.ГруппыПисемЭлектроннойПочты.СоздатьЭлемент();
		НоваяГруппа.Родитель = Элемент.ТекущиеДанные.Ссылка;
		НоваяГруппа.Владелец = Элемент.ТекущиеДанные.Владелец;
		НоваяГруппа.ПолучитьФорму(, Элемент).Открыть();
	
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события НачалоПеретаскивания элемента формы ГруппыПисемДерево.
//
Процедура ГруппыПисемДеревоНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.КопированиеИПеремещение;
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы ПредметыСписок.
//
Процедура ПредметыСписокПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбработчикОжиданияПредметыСписокПриАктивизацииСтроки", 0.1, Истина);	 	
	
КонецПроцедуры

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля ПредметыСписок
//
Процедура ОбработчикОжиданияПредметыСписокПриАктивизацииСтроки()
    Если НЕ мИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем Тогда
        ПредметыСписок_ПриАктивизацииСтроки();
    КонецЕсли;    
КонецПроцедуры // ОбработчикОжиданияПредметыСписокПриАктивизацииСтроки



// Обработчик события ПриПолученииДанных элемента формы ПредметыСписок.
//
Процедура ПредметыСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		
		СтатистикаГруппы = мСтатистикаРассмотренностиПисемПоПредметам.Получить(ОформлениеСтроки.ДанныеСтроки.ГруппаПисемЭлектроннойПочты);
		Если СтатистикаГруппы <> Неопределено Тогда
			СтатистикаПредмета = СтатистикаГруппы.Получить(ОформлениеСтроки.ДанныеСтроки.Предмет);
			Если ТипЗнч(СтатистикаПредмета) = Тип("Число") И СтатистикаПредмета > 0 Тогда
				ОформлениеСтроки.Ячейки.Предмет.ОтображатьТекст = Истина;
				Если ПустаяСтрока(ОформлениеСтроки.ДанныеСтроки.Предмет) Тогда
					ОформлениеСтроки.Ячейки.Предмет.Текст = "<Предмет не указан>" + " (" + СтатистикаПредмета + ")";
				Иначе
					ОформлениеСтроки.Ячейки.Предмет.Текст = Строка(ОформлениеСтроки.ДанныеСтроки.Предмет) + " (" + СтатистикаПредмета + ")";
				КонецЕсли; 
				ОформлениеСтроки.Шрифт = мЖирныйШрифт;
			Иначе
				Если ПустаяСтрока(ОформлениеСтроки.ДанныеСтроки.Предмет) Тогда
					ОформлениеСтроки.Ячейки.Предмет.ОтображатьТекст = Истина;
					ОформлениеСтроки.Ячейки.Предмет.Текст = "<Предмет не указан>";
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(ОформлениеСтроки.ДанныеСтроки.Предмет) Тогда
				ОформлениеСтроки.Ячейки.Предмет.ОтображатьТекст = Истина;
				ОформлениеСтроки.Ячейки.Предмет.Текст = "<Предмет не указан>";
			КонецЕсли;
		КонецЕсли;
		
		Если ОформлениеСтроки.ДанныеСтроки.Скрытый Тогда
			ОформлениеСтроки.Ячейки.Предмет.ЦветТекста = WebЦвета.Серый;
		Иначе
			Если мКнопкаОтображатьСкрытыеПредметыПисем.Пометка Тогда
				ОформлениеСтроки.Ячейки.Предмет.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события Выбор элемента формы ПредметыСписок.
//
Процедура ПредметыСписокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если мИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем Тогда
		ПредметыСписок_ПриАктивизацииСтроки();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПроверкаПеретаскивания элемента формы ПредметыСписок.
//
Процедура ПредметыСписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение.ПараметрыПеретаскивания;
		
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
			Если ЗначениеПеретаскивания.Количество() = 1 Тогда
				ЗначениеПеретаскивания = ЗначениеПеретаскивания[0];
			Иначе
				Возврат;
			КонецЕсли;
			Если ТипЗнч(ЗначениеПеретаскивания) <> Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			КонецЕсли;
		Иначе
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Перетаскивание элемента формы ПредметыСписок.
//
Процедура ПредметыСписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение.ПараметрыПеретаскивания;
		
		Если ТипЗнч(Строка) = Тип("РегистрСведенийКлючЗаписи.ПредметыЭлектронныхПисем") Тогда
			Если ТипЗнч(ЗначениеПеретаскивания) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
				ДокументОбъект = ЗначениеПеретаскивания.ПолучитьОбъект();
				ДокументОбъект.ПредметКонтакта = Строка.Предмет;
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			ИначеЕсли ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
				НачатьТранзакцию();
				Отказ = Ложь;
				КоличествоВсего = ЗначениеПеретаскивания.Количество();
				КолТекущийЭлемент = 0;
				Для каждого ЭлементМассива Из ЗначениеПеретаскивания Цикл
					КолТекущийЭлемент = КолТекущийЭлемент + 1;
					Состояние(НСтр("ru='Обработано: ';uk='Опрацьовано: '") + КолТекущийЭлемент + НСтр("ru=' из ';uk=' з '") + КоличествоВсего);
					Если ТипЗнч(ЭлементМассива) <> Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
						Продолжить;
					КонецЕсли;
					ДокументОбъект = ЭлементМассива.ПолучитьОбъект();
					ДокументОбъект.ПредметКонтакта = Строка.Предмет;
					Попытка
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						Сообщить(ОписаниеОшибки());
						Отказ = Истина;
						Прервать;
					КонецПопытки;
				КонецЦикла;
				Если Отказ Тогда
					ОтменитьТранзакцию();
				Иначе
					ЗафиксироватьТранзакцию();
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы ПредметыСписок.
//
Процедура ПредметыСписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУстановкойПометкиУдаления элемента формы ЭлектронныеПисьмаСписок.
//
Процедура ЭлектронныеПисьмаСписокПередУстановкойПометкиУдаления(Элемент, Отказ)
	
	Отказ = Истина;
	
	СохранитьТекущийПредмет();
	УстановитьПометкуУдаленияЭлектронногоПисьма(Элемент);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы ЭлектронныеПисьмаСписок.
//
Процедура ЭлектронныеПисьмаСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УправлениеЭлектроннойПочтой.ПриВыводеСтрокиЭлектронногоПисьма(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
	Оформление = ДанныеСтроки.Оформление;
	
	Если ЗначениеЗаполнено(Оформление) Тогда
		
		ЦветТекста = Оформление.ЦветТекста.Получить();
		ЦветФона   = Оформление.ЦветФона.Получить();
		
		Жирный       = Оформление.Жирный;
		Наклонный    = Оформление.Наклонный;
		Подчеркнутый = Оформление.Подчеркнутый;
		Зачеркнутый  = Оформление.Зачеркнутый;
		
		Если ТипЗнч(ЦветТекста) = Тип("Цвет") Тогда
			ОформлениеСтроки.ЦветТекста   = ЦветТекста;
		КонецЕсли;
		
		Если ТипЗнч(ЦветФона)  = Тип("Цвет") Тогда
			ОформлениеСтроки.ЦветФона   = ЦветФона;
		КонецЕсли;
		
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Жирный,Наклонный,Подчеркнутый,Зачеркнутый);
		
	КонецЕсли;
	
	Если ДанныеСтроки.НеРассмотрено И ДанныеСтроки.РассмотретьПосле < ТекущаяДата() Тогда
		Если НЕ (мОтображатьРассмотренностиПисемТолькоПоТекущемуПользователю И ДанныеСтроки.Ответственный <> глЗначениеПеременной("глТекущийПользователь") И ДанныеСтроки.Ответственный <> Справочники.Пользователи.ПустаяСсылка()) Тогда
			ОформлениеСтроки.Шрифт = мЖирныйШрифт;
		КонецЕсли;
		Если ДанныеСтроки.РассмотретьПосле > мПоследняяДатаОбновленияРассмотренностиПисем Тогда
			СобратьСтатистикуРассмотренностиПисем();
		КонецЕсли; 
	КонецЕсли;
	
	Если Элемент.Колонки.ТекстПисьма.Видимость Тогда
		
		ТекстПисьма = ДанныеСтроки.ТекстПисьма;
		
		Если ДанныеСтроки.ВидТекстаПисьма <> Перечисления.ВидыТекстовЭлектронныхПисем.Текст Тогда
			ТекстПисьма= УправлениеЭлектроннойПочтой.ПреобразоватьТекстИзХТМЛФорматаВПростой(ДанныеСтроки.ТекстПисьма);
		КонецЕсли;
		
		НайденноеСоответствие = СоответствиеСокращенныхТекстовЭлектронныхПисем.Получить(ДанныеСтроки.Ссылка);
		
		Если НайденноеСоответствие = Неопределено Тогда
			ВысотаЯчейки = ОформлениеСтроки.Ячейки.ТекстПисьма.ВысотаЯчейки;
			ТекстПисьма = УправлениеЭлектроннойПочтой.СократитьТекстПисьма(ТекстПисьма,ВысотаЯчейки);
			
			СоответствиеСокращенныхТекстовЭлектронныхПисем.Вставить(ДанныеСтроки.Ссылка,ТекстПисьма);
		Иначе
			ТекстПисьма = НайденноеСоответствие;
		КонецЕсли;
		
		Если ТекстПисьма <> ДанныеСтроки.ТекстПисьма Тогда
			ОформлениеСтроки.Ячейки.ТекстПисьма.Текст = ТекстПисьма;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстПисьма) Тогда
			ОформлениеСтроки.Ячейки.ТекстПисьма.ИндексКартинки = 21;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы ЭлектронныеПисьмаСписок.
//
Процедура ЭлектронныеПисьмаСписокПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	НаписатьНовоеПисьмо(Копирование);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы ЭлектронныеПисьмаСписок.
//
Процедура ЭлектронныеПисьмаСписокПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбработчикОжиданияЭлектронныеПисьмаСписокПриАктивизацииСтроки", 0.1, Истина);	 
 
КонецПроцедуры

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля ЭлектронныеПисьмаСписок
//
Процедура ОбработчикОжиданияЭлектронныеПисьмаСписокПриАктивизацииСтроки()
    ЭлектронныеПисьма_СписокПриАктивизацииСтроки(ЭлементыФормы.ЭлектронныеПисьмаСписок);
КонецПроцедуры // ОбработчикОжиданияЭлектронныеПисьмаСписокПриАктивизацииСтроки


// Обработчик события ПередНачаломИзменения элемента формы ЭлектронныеПисьмаСписок.
//
Процедура ЭлектронныеПисьмаСписокПередНачаломИзменения(Элемент, Отказ)
	
	ПередНачаломИзмененияЭлектронногоПисьма(Элемент, Отказ);
	
КонецПроцедуры

// Обработчик события ПроверкаПеретаскивания элемента формы ЭлектронныеПисьмаСписок.
//
Процедура ЭлектронныеПисьмаСписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") или ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

// Обработчик события Перетаскивание элемента формы ЭлектронныеПисьмаСписок.
//
Процедура ЭлектронныеПисьмаСписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") или ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СоздатьПисьмоСВложениями(ПараметрыПеретаскивания);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ, УСТАНАВЛИВАЕМЫХ СОБЫТИЯ ПРОГРАММНО

// Процедура отправляет подготовленные к отправке письма по текущей учетной записи.
//
Процедура ОтправитьУчетнаяЗапись(Кнопка)
	
	ИД = Сред(СтрЗаменить(Кнопка.Имя, "_", "-"), 2);
	
	Попытка
		ИД = Новый УникальныйИдентификатор(ИД);
	Исключение
		Возврат;
	КонецПопытки;
	
	ТемпУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(ИД);
	
	Если ЗначениеЗаполнено(ТемпУчетнаяЗапись) Тогда
		МассивУчетныхЗаписей = Новый Массив;
		МассивУчетныхЗаписей.Добавить(ТемпУчетнаяЗапись);
		УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"), МассивУчетныхЗаписей,, Истина);
	КонецЕсли; 
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Процедура получает письма по текущей учетной записи.
//
Процедура ПолучитьУчетнаяЗапись(Кнопка)
	
	ИД = Сред(СтрЗаменить(Кнопка.Имя, "_", "-"), 2);
	
	Попытка
		ИД = Новый УникальныйИдентификатор(ИД);
	Исключение
		Возврат;
	КонецПопытки;
	
	ТемпУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(ИД);
	
	Если ЗначениеЗаполнено(ТемпУчетнаяЗапись) Тогда
		МассивУчетныхЗаписей = Новый Массив;
		МассивУчетныхЗаписей.Добавить(ТемпУчетнаяЗапись);
		УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"), МассивУчетныхЗаписей,,, Истина);
	КонецЕсли; 
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Процедура отправляет подготовленные к отправке письма по всем доступным
// для транспорта текущему пользоваетлю учетным записям.
//
Процедура ОтправитьВсе(Кнопка)
	
	УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"),,, Истина, Ложь);
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Процедура получает письма по всем доступным
// для транспорта текущему пользоваетлю учетным записям.
//
Процедура ПолучитьВсе(Кнопка)
	
	УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"),,, Ложь, Истина);
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Процедура отправляет подготовленные к отправке письма и получает эл.письма
// по всем доступным для транспорта текущему пользоваетлю учетным записям.
//
Процедура ОтправитьПолучитьВсе(Кнопка)
	
	УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"),,, Истина, Истина);
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ОСНОВНОЙ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Обработчик события Нажатие кнопки НовоеПисьмо командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыНовоеПисьмо(Кнопка)
	
	НаписатьНовоеПисьмо();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Ответить командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыОтветить(Кнопка)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		УправлениеЭлектроннойПочтой.ОтветитьНаПисьмо(глЗначениеПеременной("глТекущийПользователь"), ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка, ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ОтветитьВсем командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыОтветитьВсем(Кнопка)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		УправлениеЭлектроннойПочтой.ОтветитьВсемНаПисьмо(глЗначениеПеременной("глТекущийПользователь"), ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка, ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Переслать командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПереслать(Кнопка)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		УправлениеЭлектроннойПочтой.ПереадресоватьПисьмо(глЗначениеПеременной("глТекущийПользователь"), ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка, , ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки УчетныеЗаписи командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыУчетныеЗаписи(Кнопка)
	
	Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ОбновитьСписокДоступныхУчетныхЗаписей командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыОбновитьСписокДоступныхУчетныхЗаписей(Кнопка)
	
	ОбновитьДоступныеУчетныеЗаписи();
	
	Если мДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Нет доступных учетных записей.';uk='Немає доступних облікових записів.'"));
		ЭтаФорма.Закрыть();
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьПодменюОтправитьПолучить();
	
	УстановитьОтборГрупп();
	
	ГруппыПисем_ПриАктивизацииСтроки(ЭлементыФормы.ГруппыПисемДерево);
	ПредметыСписок_ПриАктивизацииСтроки();
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки АдреснаяКнига командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыАдреснаяКнига(Кнопка)
	
	АдрКнига = Обработки.АдреснаяКнига.Создать();
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		АдрКнига.УчетнаяЗапись = УчетнаяЗапись;
	КонецЕсли; 
	АдрКнига.ОткрытаДляВыбора  = Истина;
	АдрКнига.ОткрытиеПриВыборе = Истина;
	АдрКнига.ПолучитьФорму("ФормаВыбора").Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки АвтополучениеПисем командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыАвтополучениеПисем(Кнопка)
	
	Если ТипЗнч(глЗначениеПеременной("глОбработкаАвтоПолученияОтправкиЭлектронныхПисем")) <> Тип("Форма") Тогда
		глЗначениеПеременнойУстановить("глОбработкаАвтоПолученияОтправкиЭлектронныхПисем", Обработки.АвтоПолучениеОтправкаЭлектронныхПисем.ПолучитьФорму());
	КонецЕсли;
	
	глЗначениеПеременной("глОбработкаАвтоПолученияОтправкиЭлектронныхПисем").Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Обновить командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыОбновить(Кнопка)
	
	ОбщееОбновление();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Обновить командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыНовоеПисьмоВТекущейГруппе(Кнопка)
	
	НаписатьНовоеПисьмо(, Истина);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Скопировать командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыСкопировать(Кнопка)
	
	НаписатьНовоеПисьмо(Истина);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Изменить командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыИзменить(Кнопка)
	
	ПередНачаломИзмененияЭлектронногоПисьма(ЭлементыФормы.ЭлектронныеПисьмаСписок, Ложь);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки УстановитьПометкуУдаления командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыУстановитьПометкуУдаления(Кнопка)
	
	УстановитьПометкуУдаленияЭлектронногоПисьма(ЭлементыФормы.ЭлектронныеПисьмаСписок);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Отправить командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыОтправить(Кнопка)
	
	Перем МассивУчетныхЗаписей;
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		МассивУчетныхЗаписей = Новый Массив;
		МассивУчетныхЗаписей.Добавить(УчетнаяЗапись);
	КонецЕсли;
	
	УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"), МассивУчетныхЗаписей,, Истина);
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Получить командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПолучить(Кнопка)
	
	Перем МассивУчетныхЗаписей;
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		МассивУчетныхЗаписей = Новый Массив;
		МассивУчетныхЗаписей.Добавить(УчетнаяЗапись);
	КонецЕсли;
	
	УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"), МассивУчетныхЗаписей,,, Истина);
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ПоискПисемПоОбъектам командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоискПисемПоОбъектам(Кнопка)
	
	Обработки.ПоискЭлектронныхПисемПоОбъектам.ПолучитьФорму().Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ВвестиСобытие командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыВвестиСобытие(Кнопка)
	
	ВвестиСобытиеПоПисьму();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки УстановитьСнятьПометкуУдаления командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыУстановитьСнятьПометкуУдаления(Кнопка)
	
	УстановитьПометкуУдаленияЭлектронногоПисьма(ЭлементыФормы.ЭлектронныеПисьмаСписок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОНТЕКСТНОГО МЕНЮ СПИСКА ПИСЕМ

// Обработчик события Нажатие кнопки Ответить командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемОтветить(Кнопка)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		УправлениеЭлектроннойПочтой.ОтветитьНаПисьмо(глЗначениеПеременной("глТекущийПользователь"), ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка, ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ПисемОтветитьВсем командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемОтветитьВсем(Кнопка)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		УправлениеЭлектроннойПочтой.ОтветитьВсемНаПисьмо(глЗначениеПеременной("глТекущийПользователь"), ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка, ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Переслать командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемПереслать(Кнопка)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		УправлениеЭлектроннойПочтой.ПереадресоватьПисьмо(глЗначениеПеременной("глТекущийПользователь"), ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка, , ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки УстановитьРассмотрено командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемУстановитьРассмотрено(Кнопка)
	
	ИзменитьФлагРассмотренностьПисьма(ЭлементыФормы.ЭлектронныеПисьмаСписок.ВыделенныеСтроки, Ложь);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки УстановитьНеРассмотрено командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемУстановитьНеРассмотрено(Кнопка)
	
	ИзменитьФлагРассмотренностьПисьма(ЭлементыФормы.ЭлектронныеПисьмаСписок.ВыделенныеСтроки, Истина);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки НовоеПисьмо командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемНовоеПисьмо(Кнопка)
	
	НаписатьНовоеПисьмо();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Скопировать командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемСкопировать(Кнопка)
	
	НаписатьНовоеПисьмо(Истина);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Изменить командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемИзменить(Кнопка)
	
	ПередНачаломИзмененияЭлектронногоПисьма(ЭлементыФормы.ЭлектронныеПисьмаСписок, Ложь);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки УстановитьПометкуУдаления командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемУстановитьПометкуУдаления(Кнопка)
	
	УстановитьПометкуУдаленияЭлектронногоПисьма(ЭлементыФормы.ЭлектронныеПисьмаСписок);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ПрименитьКПисьмамФильтры командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемПрименитьКПисьмамФильтры(Кнопка)
	
	ВсегоЭлементов = ЭлементыФормы.ЭлектронныеПисьмаСписок.ВыделенныеСтроки.Количество();
	
	Если ВсегоЭлементов > 0 Тогда
		ОтветНаВопрос = Вопрос(НСтр("ru='Применить к выбранным письмам фильтры учетных записей?';uk='Застосувати до обраних листів фільтри облікових записів?'"), РежимДиалогаВопрос.ОКОтмена);
		Если ОтветНаВопрос <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	ТекЭлемент = 1;
	Для каждого Строка Из ЭлементыФормы.ЭлектронныеПисьмаСписок.ВыделенныеСтроки Цикл
		Состояние("Обрабатывается " + Строка(ТекЭлемент) + " из " + Строка(ВсегоЭлементов));
		Объект = Строка.ПолучитьОбъект();
		УправлениеЭлектроннойПочтой.ПрименитьФильтрыКПисьму(Объект, глЗначениеПеременной("глТекущийПользователь"), Истина);
		ТекЭлемент = ТекЭлемент + 1;
	КонецЦикла; 
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ОтправитьВыбранныеПисьма командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемОтправитьВыбранныеПисьма(Кнопка)
	
	ОтветНаВопрос = Вопрос(НСтр("ru='Хотите отправить выбранные письма?';uk='Бажаєте відправити обрані листи?'"), РежимДиалогаВопрос.ОКОтмена);
	Если ОтветНаВопрос <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Писема = Новый Соответствие;
	Для каждого Строка Из ЭлементыФормы.ЭлектронныеПисьмаСписок.ВыделенныеСтроки Цикл
		Писема.Вставить(Строка);
	КонецЦикла; 
	
	УправлениеЭлектроннойПочтой.ОтправитьПисьма(Писема, глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"));
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки НовоеПисьмоВТекущейГруппе командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемНовоеПисьмоВТекущейГруппе(Кнопка)
	
	НаписатьНовоеПисьмо(, Истина);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ВвестиСобытие командной панели КонтекстноеМенюСпискаПисем.
//
Процедура КонтекстноеМенюСпискаПисемВвестиСобытие(Кнопка)
	
	ВвестиСобытиеПоПисьму();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик события Нажатие кнопки НайтиДобавить командной панели КоманднаяПанельКому.
//
Процедура КоманднаяПанельКомуНайтиДобавить(Кнопка)
	
	ПроизвестиПоиск(ЭлементыФормы.ПолеКому.ВыделенныйТекст);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки НайтиДобавить командной панели КоманднаяПанельКопии.
//
Процедура КоманднаяПанельКопииНайтиДобавить(Кнопка)
	
	ПроизвестиПоиск(ЭлементыФормы.ПолеКопии.ВыделенныйТекст);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки НайтиДобавить командной панели КоманднаяПанельОтправитель.
//
Процедура КоманднаяПанельОтправительНайтиДобавить(Кнопка)
	
	ПроизвестиПоиск(ЭлементыФормы.ПолеОтправитель.ВыделенныйТекст);
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ОткрытьСсылку командной панели КоманднаяПанельПолеХТМЛ.
//
Процедура КоманднаяПанельПолеХТМЛОткрытьСсылку(Кнопка)
	
	ВыделеннаяКоллекция = ЭлементыФормы.ПолеHTMLДокумента.Документ.selection.createRangeCollection();
	Если ВыделеннаяКоллекция.length > 0 Тогда
		ВыделенныйТекст = ВыделеннаяКоллекция.item(0).text;
		Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
			УчетнаяЗаписьПисьма = ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.УчетнаяЗапись;
		КонецЕсли; 
		УправлениеЭлектроннойПочтой.ПерейтиПоСсылкеИзХТМЛПоля(ВыделенныйТекст, глЗначениеПеременной("глТекущийПользователь"), ЭтаФорма, УчетнаяЗаписьПисьма);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ПереместитьВверх командной панели КоманднаяПанельПорядокГрупп.
//
Процедура КоманднаяПанельПорядокГруппПереместитьВверх(Кнопка)
	
	Если ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные <> Неопределено Тогда
		ОбщегоНазначения.ИзменитьПорядок(ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные.Ссылка, "Вверх");
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ПереместитьВниз командной панели КоманднаяПанельПорядокГрупп.
//
Процедура КоманднаяПанельПорядокГруппПереместитьВниз(Кнопка)
	
	Если ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные <> Неопределено Тогда
		ОбщегоНазначения.ИзменитьПорядок(ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные.Ссылка, "Вниз");
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ИзменитьНазваниеПредмета командной панели КоманднаяПанельСписокПредметов.
//
Процедура КоманднаяПанельСписокПредметовИзменитьНазваниеПредмета(Кнопка)
	
	Если ЭлементыФормы.ПредметыСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаИзмененияПредмета = ПолучитьФорму("ФормаИзмененияПредмета");
	Если ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Использование Тогда
		ФормаИзмененияПредмета.ГруппаУчетнойЗаписи = ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Значение;
		ГруппаПисем = ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Значение;
	КонецЕсли;
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ФормаИзмененияПредмета.УчетнаяЗапись = УчетнаяЗапись;
	КонецЕсли;
	ФормаИзмененияПредмета.Предмет = ЭлементыФормы.ПредметыСписок.ТекущиеДанные.Предмет;
	
	НовыйПредмет = ФормаИзмененияПредмета.ОткрытьМодально();
	Если НовыйПредмет = Неопределено ИЛИ НЕ Метаданные.Документы.ЭлектронноеПисьмо.Реквизиты.ПредметКонтакта.Тип.СодержитТип(ТипЗнч(НовыйПредмет)) Тогда
		Возврат;
	КонецЕсли; 
	
	СохранитьТекущийПредмет(НовыйПредмет);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Предмет"                    , ЭлементыФормы.ПредметыСписок.ТекущиеДанные.Предмет);
	Запрос.УстановитьПараметр("ГруппаПисемЭлектроннойПочты", ГруппаПисем);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПредметыЭлектронныхПисем.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПредметыЭлектронныхПисем КАК ПредметыЭлектронныхПисем
	|
	|ГДЕ
	|	ПредметыЭлектронныхПисем.Предмет = &Предмет
	|	" + ?(ГруппаПисем <> Неопределено, "И
	|	ПредметыЭлектронныхПисем.ГруппаПисемЭлектроннойПочты = &ГруппаПисемЭлектроннойПочты", "") + "
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Всего = Выборка.Количество();
	ТекНомер = 0;
	Пока Выборка.Следующий() Цикл
		
		ТекНомер = ТекНомер + 1;
		Состояние(НСтр("ru='Обработано ';uk='Опрацьовано'") + ТекНомер + НСтр("ru=' из ';uk=' з '") + Всего);
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ПредметКонтакта = НовыйПредмет;
		Попытка
			Объект.Записать();
		Исключение
			Сообщить("" + Объект + НСтр("ru=' не изменен, ';uk=' не змінений, '") + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки ПрименитьКПисьмамПапкиФильтры командной панели КоманднаяПанельПорядокГрупп.
//
Процедура КоманднаяПанельПорядокГруппПрименитьКПисьмамПапкиФильтры(Кнопка)
	
	Если ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДоступКУчетнойЗаписи = ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные.Владелец.ДоступКУчетнойЗаписи.Найти(глЗначениеПеременной("глТекущийПользователь"));
	Если ДоступКУчетнойЗаписи = Неопределено ИЛИ НЕ ДоступКУчетнойЗаписи.Администрирование Тогда
		Предупреждение(НСтр("ru='Данная функция доступна только администратору учетной записи.';uk='Ця функція доступна лише адміністратору облікового запису.'"));
		Возврат;
	КонецЕсли;
	
	ФормаПараметров = ЭтотОбъект.ПолучитьФорму("ФормаНастройкиПринудительнойФильтрацииПисем");
	ФормаПараметров.ГруппаПисемДляОбработки = ЭлементыФормы.ГруппыПисемДерево.ТекущиеДанные.Ссылка;
	Запрос = ФормаПараметров.ОткрытьМодально();
	
	Если ТипЗнч(Запрос) = Тип("Запрос") Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		ВсегоЭлементов = Выборка.Количество();
		ТекЭлемент = 1;
		Пока Выборка.Следующий() Цикл
			Состояние("Обрабатывается " + Строка(ТекЭлемент) + " из " + Строка(ВсегоЭлементов));
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			УправлениеЭлектроннойПочтой.ПрименитьФильтрыКПисьму(Объект, глЗначениеПеременной("глТекущийПользователь"), Истина);
			ТекЭлемент = ТекЭлемент + 1;
		КонецЦикла; 
	КонецЕсли;
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки СнятьОтборПоПредметам командной панели КоманднаяПанельСписокПредметов.
//
Процедура КоманднаяПанельСписокПредметовСнятьОтборПоПредметам(Кнопка)
	
	ЭлектронныеПисьмаСписок.Отбор.ПредметКонтакта.Использование = Ложь;
	
КонецПроцедуры

// Обработчик события Нажатие кнопки УстановитьУбратьСкрытостьПредмета командной панели КоманднаяПанельСписокПредметов.
//
Процедура КоманднаяПанельСписокПредметовУстановитьУбратьСкрытостьПредмета(Кнопка)
	
	Если ЭлементыФормы.ПредметыСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФлагСкрытостиПредмета = НЕ ЭлементыФормы.ПредметыСписок.ТекущиеДанные.Скрытый;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПредметыЭлектронныхПисем.Регистратор
	|ИЗ
	|	РегистрСведений.ПредметыЭлектронныхПисем КАК ПредметыЭлектронныхПисем
	|ГДЕ
	|	ПредметыЭлектронныхПисем.Предмет = &Предмет
	|	И
	|	ПредметыЭлектронныхПисем.ГруппаПисемЭлектроннойПочты = &ГруппаПисемЭлектроннойПочты
	|";
	
	Запрос.УстановитьПараметр("Предмет"                    , ЭлементыФормы.ПредметыСписок.ТекущиеДанные.Предмет);
	Запрос.УстановитьПараметр("ГруппаПисемЭлектроннойПочты", ЭлементыФормы.ПредметыСписок.ТекущиеДанные.ГруппаПисемЭлектроннойПочты);
	
	НачатьТранзакцию();
	ОтменаТранзакции = Ложь;
	Выборка = Запрос.Выполнить().Выбрать();
	ТекНомер = 0;
	Пока Выборка.Следующий() Цикл
		ТекНомер = ТекНомер + 1;
		Состояние(НСтр("ru='Обработано ';uk='Опрацьовано'") + ТекНомер + НСтр("ru=' из ';uk=' з '") + Выборка.Количество());
		Набор = РегистрыСведений.ПредметыЭлектронныхПисем.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Значение = Выборка.Регистратор;
		Набор.Прочитать();
		Если Набор.Количество() = 1 И Набор[0].Скрытый <> ФлагСкрытостиПредмета Тогда
			Набор[0].Скрытый = ФлагСкрытостиПредмета;
			Попытка
				Набор.Записать();
			Исключение
				ОтменаТранзакции = Истина;
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, НСтр("ru='Изменение не произведено';uk='Зміна не зроблена'"));
				Прервать;
			КонецПопытки;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ОтменаТранзакции Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки УстановитьУбратьСкрытостьПредмета командной панели ОтображатьСкрытыеПредметы.
//
Процедура КоманднаяПанельСписокПредметовОтображатьСкрытыеПредметы(Кнопка)
	
	мКнопкаОтображатьСкрытыеПредметыПисем.Пометка = НЕ мКнопкаОтображатьСкрытыеПредметыПисем.Пометка;
	
	УстановитьотборСкрытыхПредметов();
	
КонецПроцедуры

// Обработчик события Нажатие кнопки СнятьОтборПоГруппе командной панели КоманднаяПанельПорядокГрупп.
//
Процедура КоманднаяПанельПорядокГруппСнятьОтборПоГруппе(Кнопка)
	
	ЭлектронныеПисьмаСписок.Отбор.ГруппаУчетнойЗаписи.Использование = Ложь;
	УстановитьОтборПредметов(Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыЭкспортИмпортКонтактнойИнформации(Кнопка)
	
	Обработки.ЭкспортИмпортКонтактныхДанныхОбъектов.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПечать(Кнопка)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка.ПолучитьОбъект().НапечататьПисьмо();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельФормыЗагрузкаПочтовыхСообщений(Кнопка)
	
	Обработка = Обработки.ЗагрузкаПочтовыхСообщений.Создать();
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Обработка.УчетнаяЗапись = УчетнаяЗапись;
	КонецЕсли; 
	Обработка.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура КонтекстноеМенюСпискаПисемПоказатьЗаголовокПисьма(Кнопка)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные <> Неопределено Тогда
		ТекстЗаголовкаПисьма = Новый ТекстовыйДокумент;
		ТекстЗаголовкаПисьма.УстановитьТекст(ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.ЗаголовокПисьма);
		ТекстЗаголовкаПисьма.ТолькоПросмотр = Истина;
		ТекстЗаголовкаПисьма.Показать(Строка(ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка));
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура оставляет видимой только текущую страницу
//
// Параметры:
//     Страницы - коллекция страниц панели управления
//     ИмяСтраницы - имя текущей (переключаемой) страницы
Процедура УстновитьВидимостьСтраницы(Страницы,ИмяСтраницы)
	
	Для каждого Страница из Страницы Цикл
		Если Страница.Имя = ИмяСтраницы Тогда
			Страница.Видимость = Истина;
		Иначе
			Страница.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура КоманднаяПанельФормыКалендарьДополнительноНастройка(Кнопка)
	
	ФормаНастройки = ОбработкаОбъект.ПолучитьФорму("ФормаНастройкиКалендаря", ЭтаФорма);
	Если ФормаНастройки.ОткрытьМодально() = Истина Тогда
		
		Если ТипЗнч(СтруктураОтборов) = Тип("Соответствие") Тогда
			МассивЗначенийОтбора = Новый Массив;
			МассивЗначенийОтбора.Добавить(ВидСравнения.Равно);
			МассивЗначенийОтбора.Добавить(ПользовательКалендаря);
			СтруктураОтборов.Вставить("Пользователь", МассивЗначенийОтбора);
		КонецЕсли; 
		
		ПрочитатьСохраненныеЗначенияПользователя();
		
		ОбновитьСписок[0] = Истина;
		ОбновитьСписок[1] = Ложь;
		
		ОбновитьМесяц[0] = Истина;
		ОбновитьМесяц[2] = Истина;
		
		ОбновитьНеделю[0] = Истина;
		ОбновитьНеделю[2] = Истина;
		
		ОбновитьДень[0] = Истина;
		ОбновитьДень[2] = Истина;
		
		ОбновитьИнформациюНаФорме();
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриСменеСтраницы элемента ОсновнаяПанель
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элемент.ТекущаяСтраница.Имя = "Календарь" Тогда
		
		Если ПроизвестиНачальноеЗаполнениеКалендаря Тогда
			
			Состояние(НСтр("ru='Выполняется заполнение начальных настроек ...';uk='Виконується заповнення початкових настройок ...'"));
			
			ДатаКалендаря = НачалоДня(ТекущаяДата());
			мДатаКалендаря = ДатаКалендаря;
			ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
			
			ПрочитатьСохраненныеЗначенияПользователя();
			
			мМассивЗначенийБыстрогоСобытия = ВосстановитьЗначение("ЗначениеБыстрогоВводаСобытияКалендаря");
			
			Если ТипЗнч(мМассивЗначенийБыстрогоСобытия) = Тип("Массив") И мМассивЗначенийБыстрогоСобытия[0] <> Неопределено И мМассивЗначенийБыстрогоСобытия[1] <> Неопределено Тогда
				
				КнопкаФормы = ЭлементыФормы.ВвестиДокумент;
				
				КнопкаФормы.Заголовок = СокрЛП(Строка(мМассивЗначенийБыстрогоСобытия[0]));
				КнопкаФормы.Подсказка = НСтр("ru='Ввести новое ';uk='Ввести нове '") + мМассивЗначенийБыстрогоСобытия[1] + НСтр("ru=' событие -  ';uk=' подія '") + мМассивЗначенийБыстрогоСобытия[0];
				КнопкаФормы.Картинка  = ?(мМассивЗначенийБыстрогоСобытия[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
				
				КнопкаФормы = ЭлементыФормы.ВвестиДокументНеделя;
				
				КнопкаФормы.Заголовок = СокрЛП(Строка(мМассивЗначенийБыстрогоСобытия[0]));
				КнопкаФормы.Подсказка = НСтр("ru='Ввести новое ';uk='Ввести нове '") + мМассивЗначенийБыстрогоСобытия[1] + НСтр("ru=' событие -  ';uk=' подія '") + мМассивЗначенийБыстрогоСобытия[0];
				КнопкаФормы.Картинка  = ?(мМассивЗначенийБыстрогоСобытия[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
				
			КонецЕсли;
			ПроизвестиНачальноеЗаполнениеКалендаря = Ложь;
			
			ОбновитьЗаказыСобытия(Ложь);
			
			ОпределитьКонтрагентаФормы();
			
			КнопкиВводаДокументов = ЭлементыФормы.ВвестиДокумент.Кнопки;
			КнопкиВводаДокументов.Очистить();
			
			КнопкиВводаДокументовНеделя = ЭлементыФормы.ВвестиДокументНеделя.Кнопки;
			КнопкиВводаДокументовНеделя.Очистить();
			
			КнопкиТулбара = ЭлементыФормы.КонтекстноеМенюМокселя.Кнопки;
			КнопкиТулбара.Очистить();
			
			Для каждого ЭлементСписка Из мСписокДокументовДобавления Цикл
				
				НоваяКнопка = КнопкиВводаДокументов.Добавить(("_" + мСписокДокументовДобавления.Индекс(ЭлементСписка)), ТипКнопкиКоманднойПанели.Действие, ЭлементСписка.Представление, Новый Действие("ВвестиДокументСобытие"));
				НоваяКнопка.Картинка = ЭлементСписка.Картинка;
				
				НоваяКнопка = КнопкиВводаДокументовНеделя.Добавить(("_" + мСписокДокументовДобавления.Индекс(ЭлементСписка)), ТипКнопкиКоманднойПанели.Действие, ЭлементСписка.Представление, Новый Действие("ВвестиДокументСобытиеНеделя"));
				НоваяКнопка.Картинка = ЭлементСписка.Картинка;
				
				НоваяКнопка = КнопкиТулбара.Добавить(("_" + мСписокДокументовДобавления.Индекс(ЭлементСписка)), ТипКнопкиКоманднойПанели.Действие, ЭлементСписка.Представление, Новый Действие("ВвестиДокументСобытиеИзМокселя"));
				НоваяКнопка.Картинка = ЭлементСписка.Картинка;
				
			КонецЦикла;
			
			ИсторияОтборов = ВосстановитьЗначение("ИсторииОтборовКалендаряПользователя");
			Если ТипЗнч(ИсторияОтборов) = Тип("СписокЗначений") Тогда
				мСписокИсторииОтбора = ИсторияОтборов;
			КонецЕсли; 
			
			СформироватьПодменюПоСпискуАктуальныхОтборов();
			СостояниеТулбараФормы();
			
		Иначе
			
			Если ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.Список Тогда
				ОбновитьТаблицуСписка();
			ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.День Тогда
				ОбновитьКалендарьДня();
			ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.Неделя Тогда
				ОбновитьКалендарьНеделя();
			ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.Месяц Тогда
				ОбновитьКалендарьМесяц();
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущаяСтраница.Имя = "Почта" Тогда
		
		Если мДоступныеУчетныеЗаписи.Количество() = 0 Тогда
			
			Если ПравоДоступа("Добавление", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
				
				ОтветНаВопрос = Вопрос(НСтр("ru='У вас нет доступных учентых записей, создать новую?';uk='У вас немає доступних облікових записів, створити новий?'"), РежимДиалогаВопрос.ДаНет);
				Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
					
					Справочники.УчетныеЗаписиЭлектроннойПочты.СоздатьЭлемент().ПолучитьФорму().ОткрытьМодально();
					ОбновитьДоступныеУчетныеЗаписи();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПроизвестиНачальноеЗаполнениеПочты Тогда
			
			ПодключитьОбработчикОжидания("ПриАктивизацииСтрокиСпискаПисемСОжиданием", 1);
			
			Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПолучениеЭлектронныхПисемПриОткрытии") = Истина Тогда
				УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"),,,, Истина);
			КонецЕсли; 
			
			УстановитьотборСкрытыхПредметов();
			
			СобратьСтатистикуРассмотренностиПисем();
			
			ПроизвестиНачальноеЗаполнениеПочты = Ложь;
		КонецЕсли;
		
		ВидимостьСпискаПредметов();
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтекстноеМенюСпискаПисемСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка);
КонецПроцедуры

Процедура КонтекстноеМенюСпискаПисемСоздатьФильтрПоПисьму(Кнопка)
	
	Если ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееПисьмо = ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущиеДанные.Ссылка;
	
	Фильтр = Справочники.ФильтрыДляЭлектронныхПисем.СоздатьЭлемент();
	Фильтр.Владелец = ТекущееПисьмо.УчетнаяЗапись;
	Фильтр.Наименование = "Фильтр по письму";
	
	Если ЗначениеЗаполнено(ТекущееПисьмо.ОтправительПредставление) Тогда
		СтрокаУсловия = Фильтр.УсловияФильтра.Добавить();
		СтрокаУсловия.Условие = Перечисления.УсловияФильтровЭлектронныхПисем.ПолеОтправительСодержит;
		СтрокаУсловия.ЗначениеУсловия = ТекущееПисьмо.ОтправительПредставление;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееПисьмо.КомуПредставление) Тогда
		СтрокаУсловия = Фильтр.УсловияФильтра.Добавить();
		СтрокаУсловия.Условие = Перечисления.УсловияФильтровЭлектронныхПисем.ПолеКомуСодержит;
		СтрокаУсловия.ЗначениеУсловия = ТекущееПисьмо.Кому;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееПисьмо.КопииПредставление) Тогда
		СтрокаУсловия = Фильтр.УсловияФильтра.Добавить();
		СтрокаУсловия.Условие = Перечисления.УсловияФильтровЭлектронныхПисем.ПолеКопииСодержит;
		СтрокаУсловия.ЗначениеУсловия = ТекущееПисьмо.КопииПредставление;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееПисьмо.Тема) Тогда
		СтрокаУсловия = Фильтр.УсловияФильтра.Добавить();
		СтрокаУсловия.Условие = Перечисления.УсловияФильтровЭлектронныхПисем.ТемаПисьмаСодержит;
		СтрокаУсловия.ЗначениеУсловия = ТекущееПисьмо.Тема;
	КонецЕсли;
	
	Фильтр.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура КонтекстноеМенюСпискаПисемСнять(Кнопка)
	
	ИзменитьОформление(ЭлементыФормы.ЭлектронныеПисьмаСписок.ВыделенныеСтроки,Ложь);
	
КонецПроцедуры

Процедура КонтекстноеМенюСпискаПисемУстановить(Кнопка)
	
	ИзменитьОформление(ЭлементыФормы.ЭлектронныеПисьмаСписок.ВыделенныеСтроки,Истина);
	
КонецПроцедуры

Процедура КонтекстноеМенюСпискаПисемНастроить(Кнопка)
	
	ФормаВыбора = Справочники.ОформленияСтрокПисем.ПолучитьФормуСписка();
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ЭлектронныеПисьмаСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Если ВыделитьВидимыеСтроки Тогда
		Для каждого Стр из ОформленияСтрок Цикл
			ЭлементыФормы.ЭлектронныеПисьмаСписок.ВыделенныеСтроки.Добавить(Стр.ДанныеСтроки.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтекстноеМенюСпискаПисемВыделитьВидимыеСтроки(Кнопка)
	ВыделитьВидимыеСтроки = Истина;
	ЭлементыФормы.ЭлектронныеПисьмаСписок.ОбновитьСтроки();
	ВыделитьВидимыеСтроки = Ложь;
КонецПроцедуры

Процедура КоманднаяПанельПочтыРассмотренностиПоТекущемуПользователю(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	мОтображатьРассмотренностиПисемТолькоПоТекущемуПользователю = Кнопка.Пометка;
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

Процедура ЭлектронныеПисьмаСписокПослеУдаления(Элемент)
	
	СобратьСтатистикуРассмотренностиПисем();
	
КонецПроцедуры

// КАЛЕНДАРЬ

ЭтаФорма.РазрешитьСоединятьОкно = Истина;
ЭтаФорма.РазрешитьСостояниеОбычное = Истина;
ЭтаФорма.РазрешитьСостояниеПрикрепленное = Истина;
ЭтаФорма.РазрешитьСостояниеПрячущееся = Истина;
ЭтаФорма.РазрешитьСостояниеСвободное = Истина;

мДокументыОснования = Новый Структура;

мСписокДокументовДобавления = Новый СписокЗначений;

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ТелефонныйЗвонок);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"Телефонный звонок",,);

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ТелефонныйЗвонок);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Исходящий",,БиблиотекаКартинок.ТелефонныйЗвонокИсходящий);

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ТелефонныйЗвонок);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Входящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Входящий",,БиблиотекаКартинок.ТелефонныйЗвонокВходящий);

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ЭлектронноеПисьмо);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"Электронное письмо",,);

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ЭлектронноеПисьмо);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Исходящее",,БиблиотекаКартинок.ЭлектронноеПисьмоИсходящее);

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ЭлектронноеПисьмо);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Входящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Входящее",,БиблиотекаКартинок.ЭлектронноеПисьмоВходящее);

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ЛичнаяВстреча);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"Личная встреча",,);

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ЛичнаяВстреча);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Исходящая",,БиблиотекаКартинок.ЛичнаяВстречаИсходящяя);

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ЛичнаяВстреча);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Входящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Входящая",,БиблиотекаКартинок.ЛичнаяВстречаВходящяя);

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ПочтовоеПисьмо);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"Почтовое письмо",,);

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ПочтовоеПисьмо);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Исходящее",,БиблиотекаКартинок.ПочтовоеПисьмоИсходящее);

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ПочтовоеПисьмо);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Входящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Входящее",,БиблиотекаКартинок.ПочтовоеПисьмоВходящее);

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.Прочее);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"Прочее",,);

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.Прочее);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Исходящее",,БиблиотекаКартинок.ПрочееСобытиеИсходящее);

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.Прочее);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Входящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Входящее",,БиблиотекаКартинок.ПрочееСобытиеВходящее);

мМассивЗначенийБыстрогоСобытия = Неопределено;

мТаблицаЯчеекИДатНедели = Неопределено;

мСписокМесяцевВыбора = Новый СписокЗначений;

ОбновитьСписок = Новый Массив;
ОбновитьСписок.Добавить(Ложь); // Флаг необходимости перезаполнения списка событий
ОбновитьСписок.Добавить(Истина); // Флаг необходимости выполнения запроса для списка событий

ОбновитьДень = Новый Массив;
ОбновитьДень.Добавить(Истина); // Флаг необходимости обновления данных о событиях и заказах в "мокселе" и "гриде"
ОбновитьДень.Добавить('00010101000000'); // Дата последнего заполнения
ОбновитьДень.Добавить(Истина); // Безусловное перевыполение запроса недели календаря

ОбновитьНеделю = Новый Массив;
ОбновитьНеделю.Добавить(Истина); // Флаг необходимости обновления данных о событиях и заказах в "мокселе" и "гриде"
ОбновитьНеделю.Добавить('00010101000000'); // Дата начала недели последнего заполнения
ОбновитьНеделю.Добавить(Истина); // Безусловное перевыполение запроса недели календаря

ОбновитьМесяц = Новый Массив;
ОбновитьМесяц.Добавить(Истина); // Флаг необходимости обновления данных о событиях и заказах в "мокселе"
ОбновитьМесяц.Добавить('00010101000000'); // Дата начала месяца последнего заполнения
ОбновитьМесяц.Добавить(Истина); // Безусловное перевыполение запроса месяца календаря

мБылоПервоеЗаполнениеНедели = Ложь;

мИмяТекущейОбластиДвойногоДня = "R1C1";
мИмяТекущейОбластиДня = "R1C1";

мСписокИсторииОтбора = Новый СписокЗначений;

мБиблиотекаКартинокДокумент = БиблиотекаКартинок.ДокументОбъект;

// ПОЧТА

ВыделитьВидимыеСтроки = Ложь;

Для каждого Реквизит Из Метаданные.Документы.ЭлектронноеПисьмо.Реквизиты Цикл
	ЭлектронныеПисьмаСписок.Колонки.Добавить(Реквизит.Имя, Ложь);
КонецЦикла;

мЖирныйШрифт = Новый Шрифт(,, Истина);

ГруппыПисемДерево.Колонки.Добавить("Владелец"                 , Ложь);
ГруппыПисемДерево.Колонки.Добавить("Порядок"                  , Ложь);
ГруппыПисемДерево.Колонки.Добавить("ИспользоватьПредметыПисем", Ложь);

ПредметыСписок.Колонки.Добавить("ГруппаПисемЭлектроннойПочты", Ложь);
ПредметыСписок.Колонки.Добавить("Скрытый", Ложь);

мИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем");
Если ТипЗнч(мИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем) <> Тип("Булево") Тогда
	мИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем = Ложь;
КонецЕсли; 

// ОБЩЕЕ

// режим рабочего стола
РежимРабочегоСтола = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимРабочегоСтолаДляМенеджераКонтактов");

ЭлектронныеПисьмаСписок.Колонки.Добавить("Оформление");
ЭлектронныеПисьмаСписок.Колонки.Добавить("Ответственный"); 

СоответствиеСокращенныхТекстовЭлектронныхПисем = Новый Соответствие();

мСкрепкиЛистовКалендаряПользователяНеРабочие = БиблиотекаКартинок.СкрепкиЛистовКалендаряПользователяНеРабочие;
мСкрепкиЛистовКалендаряПользователяРабочие   = БиблиотекаКартинок.СкрепкиЛистовКалендаряПользователяРабочие;

мКлассификацияУчетныхЗаписейПоПредметам = Новый Соответствие;
