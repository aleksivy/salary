////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// для синхронизации строк табличных полей
Перем мСинхронизируемыеТабличныеЧасти;

Перем мСведенияОВидахРасчета;

Перем мВалютаУправленческогоУчета;

Перем мСписокНедоступныхРасчетов;


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	ДатаУтверждения = ОбщегоНазначения.ПолучитьРабочуюДату();
	
КонецПроцедуры //ПриОткрытии


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "ДействияФормы"

// Обработчик события Нажатие элемента формы ДействияФормы.Заполнить
//
Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если ЗначениеЗаполнено(ВидСхемыМотивации) Тогда
		ЗаполнениеПоСхемамМотивации("УправленческиеНачисления");
		ЗаполнениеПоСхемамМотивации("УправленческиеУдержания");
	Иначе
		Сообщить(НСтр("ru='Не заполнен вид схемы мотивации';uk='Не заповнений вид схеми мотивації'"));
	КонецЕсли;
		
КонецПроцедуры //ДействияФормыЗаполнить

// Обработчик события Нажатие элемента формы ДействияФормы.Утвердить
//
Процедура ДействияФормыУтвердить(Кнопка)
	
	УтвердитьВидСхемыМотивации();

КонецПроцедуры //ДействияФормыУтвердить

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанельНачисления"

// Обработчик события Нажатие элемента формы КоманднаяПанельНачисления.Заполнить
//
Процедура КоманднаяПанельНачисленияЗаполнитьПоВидуСхемыМотивации()
	
	Если ЗначениеЗаполнено(ВидСхемыМотивации) Тогда
		ЗаполнениеПоСхемамМотивации("УправленческиеНачисления");
	Иначе
		Сообщить(НСтр("ru='Не заполнен вид схемы мотивации';uk='Не заповнений вид схеми мотивації'"));
	КонецЕсли;

КонецПроцедуры //КоманднаяПанельНачисленияЗаполнитьПоВидуСхемыМотивации

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанельУдержания"

// Обработчик события Нажатие элемента формы КоманднаяПанельКадровыйПлан.Заполнить
//
Процедура КоманднаяПанельУдержанияЗаполнитьПоВидуСхемыМотивации()
	
	Если ЗначениеЗаполнено(ВидСхемыМотивации) Тогда
		ЗаполнениеПоСхемамМотивации("УправленческиеУдержания");
	Иначе
		Сообщить(НСтр("ru='Не заполнен вид схемы мотивации';uk='Не заповнений вид схеми мотивації'"));
	КонецЕсли;

КонецПроцедуры //КоманднаяПанельУдержанияЗаполнитьПоВидуСхемыМотивации

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события "ПриИзменении" элемента формы ВидСхемыМотивации
//
Процедура ВидСхемыМотивацииПриИзменении(Элемент)
	
	КоманднаяПанельНачисленияЗаполнитьПоВидуСхемыМотивации();
	КоманднаяПанельУдержанияЗаполнитьПоВидуСхемыМотивации();
	
КонецПроцедуры //ВидСхемыМотивацииПриИзменении

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ

// Процедура - обработчик события "ПриВыводеСтроки" ТЧ
//
Процедура ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если Элемент.Имя = "Удержания" Тогда
		РаботаСДиалогами.ПриВыводеСтрокиПлановыхНачисленийИУдержаний(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчета,Ложь);		
	Иначе
		РаботаСДиалогами.ПриВыводеСтрокиПлановыхНачисленийИУдержаний(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчета);		
	КонецЕсли;
	
		

КонецПроцедуры //ПриВыводеСтроки

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "Начисления"

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
// или формой выбора в.р.
//
Процедура НачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления") Тогда	
		Элемент.ТекущаяСтрока.ВидРасчета = ВыбранноеЗначение;
		ПриИзмененииВидаРасчета("Начисления",ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры //НачисленияОбработкаВыбора


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "Удержания"

// управляет валютой в зависимости от способа расчета                   
//
Процедура ПриИзмененииВидаРасчета(ИмяОбъекта,Значение)

	СведенияОВидеРасчета = РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, Значение);

	Для СчПоказателей = 1 По Мин(СведенияОВидеРасчета["КоличествоПоказателей"],6) Цикл
		Если НЕ ЗначениеЗаполнено(ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей]) И 
			СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей] = мВалютаУправленческогоУчета;
		КонецЕсли;
		Если НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей] = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;
		Если НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Показатель" + СчПоказателей] = 0;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры //ПриИзмененииВидаРасчета

// Процедура - обработчик события "ПриИзменении" поля ввода вида расчета
//
Процедура НачисленияВидРасчетаПриИзменении(Элемент)
	
	ПриИзмененииВидаРасчета("Начисления",Элемент.Значение);
	
КонецПроцедуры //НачисленияВидРасчетаПриИзменении

// Процедура - обработчик события "ПриВыводеСтроки" ТЧ
//
Процедура НачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ФормаВыбораВидаРасчета = ПланыВидовРасчета.УправленческиеНачисления.ПолучитьФормуВыбора("ФормаВыбора", ЭлементыФормы.Начисления, "дляДокументаПриемНаРаботу");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = мСписокНедоступныхРасчетов;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры //НачисленияВидРасчетаНачалоВыбора


мСведенияОВидахРасчета = Новый Соответствие;

мВалютаУправленческогоУчета  = Константы.ВалютаУправленческогоУчета.Получить();

мСписокНедоступныхРасчетов = Новый СписокЗначений;
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерии);
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерииСдельно);
