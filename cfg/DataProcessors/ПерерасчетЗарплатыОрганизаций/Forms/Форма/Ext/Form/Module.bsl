////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события формы ПриОткрытии
Процедура ПриОткрытии()
	
	// прошлый или текущий месяц
	Если НЕ ЗначениеЗаполнено(ТекущийПериод) Тогда
		ТекущаяДата = ОбщегоНазначения.ПолучитьРабочуюДату();
		Если День(ТекущаяДата) < 15 Тогда
			ТекущийПериод = НачалоМесяца(НачалоМесяца(ТекущаяДата) - 1);
		Иначе
			ТекущийПериод = НачалоМесяца(ТекущаяДата);
		КонецЕсли;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ЗаполнитьДанныеПоОрганизации();
	КонецЕсли;
	
	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ТекущийПериод);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Помечает все документы организации для перерасчета
Процедура ПометитьДокументы(Кнопка)
	Для Каждого СтрокаТаблицы Из СписокДокументов Цикл
		СтрокаТаблицы.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

// Снимает пометки со всех документов организации
Процедура СнятьПометкиДокументов(Кнопка)
	Для Каждого СтрокаТаблицы Из СписокДокументов Цикл
		СтрокаТаблицы.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

Процедура ОтметитьПоРаботникам(Кнопка)
    Если СписокДокументов.Количество() > 0 и СписокРаботников.Количество() = 0 Тогда
        ЗаполнитьСписокРаботников();
    КонецЕсли;
    
    Форма = ПолучитьФорму("СписокРаботников");
    Форма.ОткрытьМодально();
    
    Если Форма.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    // список документов которые затрагиваются выбранными подразделениями
    ДокументыСоответствие = Новый Соответствие;
    Для Каждого Строка Из СписокРаботников Цикл
        Если Строка.Пометка Тогда
            ДокументыМассив = мРаботникиДокументы[Строка.Работник];
            Если ДокументыМассив <> НеОпределено Тогда
                Для Каждого Документ Из ДокументыМассив Цикл
                    ДокументыСоответствие[Документ] = 0;
                КонецЦикла;
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    
    Для Каждого Элемент Из ДокументыСоответствие Цикл
        Строка = СписокДокументов.Найти(Элемент.Ключ, "Документ");
        Если Строка <> НеОпределено Тогда
            Строка.Пометка = Истина;
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

Процедура ОтметитьПоПодразделениям(Кнопка)
    
    Если СписокДокументов.Количество() > 0 и СписокПодразделений.Количество() = 0 Тогда
        ЗаполнитьСписокПодразделений();
    КонецЕсли;
    Форма = ПолучитьФорму("СписокПодразделений");
    Форма.ОткрытьМодально();
    
    Если Форма.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    // список документов которые затрагиваются выбранными подразделениями
    ДокументыСоответствие = Новый Соответствие;
    Для Каждого Строка Из СписокПодразделений Цикл
        Если Строка.Пометка Тогда
            ДокументыМассив = мПодразделенияДокументы[Строка.Подразделение];
            Если ДокументыМассив <> НеОпределено Тогда
                Для Каждого Документ Из ДокументыМассив Цикл
                    ДокументыСоответствие[Документ] = 0;
                КонецЦикла;
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    
    Для Каждого Элемент Из ДокументыСоответствие Цикл
        Строка = СписокДокументов.Найти(Элемент.Ключ, "Документ");
        Если Строка <> НеОпределено Тогда
            Строка.Пометка = Истина;
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

// Выполняет перерасчет по отмеченным документам
Процедура ВыполнитьПерерасчетДокументов(Кнопка)
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
    Перерассчитать();
	ОбработкаКомментариев.ПоказатьСообщения();
КонецПроцедуры

// Удаляет записи перерасчета по отмеченным документам
Процедура НеПредлагатьДляПерерасчета(Кнопка)
    УдалитьСведенияОПерерасчете();
КонецПроцедуры

// Создает документы-исправления текущим периодом
// при этом открываются формы созданных документов 
// выполнять ЗаполнитьДанныеПоОрганизации не имеет смысла - данные обновятся только после проведения
// полученных новых документов
Процедура ВыполнитьПерерасчетТекущимПериодом(Кнопка)
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	ЕщеНеСообщалиОбОтпусках = Истина;
	Для Каждого СтрокаТаблицы Из СписокДокументов Цикл
		Если СтрокаТаблицы.Пометка Тогда
			Если ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда
				Если ЕщеНеСообщалиОбОтпусках Тогда
					ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Документы ""Отпуск по уходу за ребенком"" можно только перерассчитать с дальнейшим переначислением сумм пособий!';uk='Документи ""Відпустка по догляду за дитиною"" можна тільки перерозрахувати з подальшим перенарахуванням сум допомоги!'"));
					ЕщеНеСообщалиОбОтпусках = Ложь;
				КонецЕсли;
			Иначе
				РаботаСДиалогами.ВвестиДокументИсправление(СтрокаТаблицы.Документ, Неопределено, "ПоДаннымПерерасчета", ТекущийПериод, глЗначениеПеременной("глТекущийПользователь"));
			КонецЕсли;
		Конецесли;
	КонецЦикла;
	ОбработкаКомментариев.ПоказатьСообщения();
КонецПроцедуры

Процедура ОбновитьСписок(Кнопка)
	ЗаполнитьДанныеПоОрганизации();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ПриИзменении элемента управления Организация
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьДанныеПоОрганизации();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ТекущийПериодПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ТекущийПериод);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ТекущийПериод);
	ЗаполнитьДанныеПоОрганизации();
	
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ТекущийПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ТекущийПериод = ДобавитьМесяц(ТекущийПериод, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ТекущийПериод);
	ЗаполнитьДанныеПоОрганизации();
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ТекущийПериодОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ТекущийПериодНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ТекущийПериод, ЭтаФорма);
	ЗаполнитьДанныеПоОрганизации();
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ТекущийПериодАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ТекущийПериодОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
КонецПроцедуры


