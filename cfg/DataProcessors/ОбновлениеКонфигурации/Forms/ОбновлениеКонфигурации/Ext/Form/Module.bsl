//////////////////////////////////////////////////////////////////////////////// 
// ПЕРЕМЕННЫЕ МОДУЛЯ 
// 

Перем Страницы;
Перем РезультатПолученияФайлов;
Перем ВыполнитьОбновление;
Перем ВосстановлениеРезультатовПредЗапуска;
Перем ИмяФайлаИнформацияОбОбновлении;
Перем ИмяФайлаПорядокОбновления;
Перем ДатаВремяОбновленияУстановлена;

//////////////////////////////////////////////////////////////////////////////// 
// СЕРВИСНЫЕ ФУНКЦИИ 
//                      

// Управление видимостью и доступностью элементов формы. 
//
Процедура ПередОткрытиемСтраницы()
	
	ТекущаяСтраница      = ЭлементыФормы.Панель1.ТекущаяСтраница;
	
	ДоступностьКнопкиНазад = Истина;
	ДоступностьКнопкиДалее = Истина;
	ДоступностьКнопкиЗакрыть = Истина;
	ФункцияКнопкиДалее     = Истина; // Истина = "Далее", Ложь = "Готово"
	
	Если ТекущаяСтраница = Страницы.ДоброПожаловать Тогда			// 1.
		ДоступностьКнопкиНазад = Ложь;
		
		Если НЕ ПовторныйЗапуск Тогда
			ПовторныйЗапуск = Истина;
			ПропускатьПриветствие = Истина;
		КонецЕсли; 
		
		ЭлементыФормы.ПропускатьПриветствие.Доступность = ИсточникОбновления = 0;
		
		Если НЕ ИспользоватьОбновлениеСДискаИТС() Тогда
			ЭлементыФормы.ПереключательИсточникИТС.Доступность = Ложь; 
			ЭлементыФормы.НадписьИсточникИТС.Доступность = Ложь; 
			ЭлементыФормы.ПереключательИсточникИТС.Видимость = Ложь; 
			ЭлементыФормы.НадписьИсточникИТС.Видимость = Ложь; 
			ЭлементыФормы.ПереключательИсточникФайл.Верх = ЭлементыФормы.ПереключательИсточникИТС.Верх; 
			ЭлементыФормы.НадписьИсточникФайл.Верх = ЭлементыФормы.НадписьИсточникИТС.Верх; 
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Страницы.ПодключениеКИнтернет Тогда		// 2.1
		ЭлементыФормы.ПанельДоступЧерезПроксиСервер.Свертка = ? (ПроксиСерверТребуетАутентификации, 
			РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
		
	ИначеЕсли ТекущаяСтраница = Страницы.ПодключениеКСайту Тогда		// Д1
		ЭлементыФормы.ПанельОшибкаПодключения.Свертка = 
			? (ЗначениеЗаполнено(КодПользователяСервераОбновлений) ИЛИ ЗначениеЗаполнено(ПарольСервераОбновлений), 
			РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
			
		Если ЭтоБазоваяВерсияКонфигурации() Тогда
			ЭлементыФормы.ПанельОшибкаПодключения.ТекущаяСтраница = ЭлементыФормы.ПанельОшибкаПодключения.Страницы.Базовая;
		КонецЕсли;
		
		Если ПустаяСтрока(ЭтотОбъект.ТехническаяИнформацияОбОшибке) Тогда
			ТехническаяИнформацияОбОшибке = "";
		Иначе				
			ТехническаяИнформацияОбОшибке = НСтр("ru='Техническая информация об ошибке:';uk='Технічна інформація про помилку:'")+"
			|" + ЭтотОбъект.ТехническаяИнформацияОбОшибке;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Страницы.ДоступноеОбновление Тогда  // 3.1.1
		ЭлементыФормы.НадписьОписаниеКонфигурации.Заголовок = Метаданные.Синоним;
		ЭлементыФормы.НадписьТекущаяКонфигурация.Заголовок = Метаданные.Версия;
		ЭлементыФормы.НадписьДоступноеОбновление.Заголовок = НСтр("ru='Версия ';uk='Версія '") + ДоступноеОбновление.Версия;
		ЭлементыФормы.НадписьРазмерОбновления.Заголовок = СтрокаРазмераФайла(РазмерОбновлений(ДоступныеОбновления));
		ЭлементыФормы.ПанельПорядокОбновления.Видимость = НЕ ПустаяСтрока(ИмяФайлаПорядокОбновления);
		СтраницыПереходаНаСледующийШаг = ЭлементыФормы.ПанельПереходаНаСледующийШаг.Страницы;
		ЭлементыФормы.ПанельПереходаНаСледующийШаг.ТекущаяСтраница = ?(ИсточникОбновления = 0, 
			СтраницыПереходаНаСледующийШаг.Интернет, СтраницыПереходаНаСледующийШаг.ИТС);
			
	ИначеЕсли ТекущаяСтраница = Страницы.ОбновленияНеОбнаружено Тогда  	// 3.1.2
		ФункцияКнопкиДалее = Ложь;
		ЭлементыФормы.НадписьОписаниеТекущейКонфигурации.Заголовок = Метаданные.Синоним;
		ЭлементыФормы.НадписьВерсияТекущейКонфигурации.Заголовок = Метаданные.Версия;
		
		Если ДоступноеОбновление <> Неопределено И СравнитьВерсии(Метаданные.Версия, ДоступноеОбновление.Версия) >= 0 Тогда // это последняя версия.
			ЭлементыФормы.ПанельИнформацияОбОбновлении.ТекущаяСтраница = ЭлементыФормы.ПанельИнформацияОбОбновлении.Страницы.ОбновлениеНеТребуется;
			ЭлементыФормы.ЗаголовокОбновления.Заголовок = НСтр("ru='Обновление не требуется';uk='Оновлення не потрібно'");
		Иначе 
			ЭлементыФормы.ПанельИнформацияОбОбновлении.ТекущаяСтраница = ЭлементыФормы.ПанельИнформацияОбОбновлении.Страницы.ОбновлениеНеОбнаружено;			
			ЭлементыФормы.ЗаголовокОбновления.Заголовок = НСтр("ru='Обновления конфигурации не обнаружено';uk='Оновлення конфігурації не знайдено'");
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Страницы.ДлительнаяОперация Тогда       // Д2
		ДоступностьКнопкиДалее	= Ложь;
		ДоступностьКнопкиНазад	= Ложь;
		ДоступностьКнопкиЗакрыть = Ложь;
		
		СтраницыОжидания = ЭлементыФормы.ПанельОжиданиеДлительнойОперации.Страницы;
		ЭлементыФормы.ПанельОжиданиеДлительнойОперации.ТекущаяСтраница = ?(ИсточникОбновления = 0, 
			СтраницыОжидания.Интернет, СтраницыОжидания.ИТС);
		
	ИначеЕсли ТекущаяСтраница = Страницы.ВыборРежимаОбновленияФайл Тогда // 4.1
		ФункцияКнопкиДалее = РежимОбновления = 0;	// Если НЕ обновляем сейчас, то "готово".
		
		СтраницыПанельВсеГотово = ЭлементыФормы.ПанельВсеГотовоФайл.Страницы;
		ЭлементыФормы.ПанельВсеГотовоФайл.ТекущаяСтраница = ?(ПустаяСтрока(ИмяФайлаПорядокОбновления), 
			СтраницыПанельВсеГотово.ВсеГотово, СтраницыПанельВсеГотово.ВсеГотовоПорядокОбновления);
			
		СтраницыПереходаНаСледующийШаг = ЭлементыФормы.ПанельПереходаНаСледующийШагРежимаОбновленияФайл.Страницы;
		ЭлементыФормы.ПанельПереходаНаСледующийШагРежимаОбновленияФайл.ТекущаяСтраница = ?(ФункцияКнопкиДалее, 
			СтраницыПереходаНаСледующийШаг.Далее, СтраницыПереходаНаСледующийШаг.Готово);
			
		НаличиеСоединений = НаличиеАктивныхСоединений();
		ЭлементыФормы.ПанельАктивныеПользователи.Свертка = ?(НаличиеСоединений, 
			РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
			
		Если НаличиеСоединений Тогда
			ВсеСтраницы = ЭлементыФормы.ПанельАктивныеПользователи.Страницы;
			ДоступностьКнопкиДалее = Истина; 
			Если НаличиеCOMСоединений() Тогда
				ЭлементыФормы.ПанельАктивныеПользователи.ТекущаяСтраница = ВсеСтраницы.АктивныеСоединения;
				ЭлементыФормы.ПанельПереходаНаСледующийШагРежимаОбновленияФайл.ТекущаяСтраница = СтраницыПереходаНаСледующийШаг.АктивныеСоединения;
			ИначеЕсли НаличиеСоединенияКонфигуратором() Тогда
				ЭлементыФормы.ПанельАктивныеПользователи.ТекущаяСтраница = ВсеСтраницы.СоединениеКонфигуратора;
				ЭлементыФормы.ПанельПереходаНаСледующийШагРежимаОбновленияФайл.ТекущаяСтраница = СтраницыПереходаНаСледующийШаг.СоединениеКонфигуратора;
			Иначе
				ЭлементыФормы.ПанельАктивныеПользователи.ТекущаяСтраница = ВсеСтраницы.АктивныеПользователи;
			КонецЕсли; 
		КонецЕсли;
		
		ЭлементыФормы.НадписьРезервнаяКопияФайл.Заголовок = ТекстНадписиРезервнойКопииИБ();
		
	ИначеЕсли ТекущаяСтраница = Страницы.ВыборРежимаОбновленияСервер Тогда	// 4.2

		Если КодЗадачиПланировщика = 0 И НЕ ДатаВремяОбновленияУстановлена Тогда
			ДатаВремяОбновления = ВернутьДату(ДобавитьДни(НачалоДня(ТекущаяДата()), 1), ДатаВремяОбновления);
			ДатаВремяОбновленияУстановлена = Истина;
		КонецЕсли; 
		
		ФункцияКнопкиДалее = РежимОбновления = 0;	// Если НЕ обновляем сейчас, то "готово".
		
		СтраницыПанельВсеГотово = ЭлементыФормы.ПанельВсеГотовоСервер.Страницы;
		ЭлементыФормы.ПанельВсеГотовоСервер.ТекущаяСтраница = ?(ПустаяСтрока(ИмяФайлаПорядокОбновления), 
			СтраницыПанельВсеГотово.ВсеГотово, СтраницыПанельВсеГотово.ВсеГотовоПорядокОбновления);
			
		НаличиеСоединений = НаличиеАктивныхСоединений() И ФункцияКнопкиДалее; 
		ЭлементыФормы.ПанельАктивныеПользователи1.Свертка = ?(НаличиеСоединений, 
			РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
		Если НаличиеСоединений Тогда
			ВсеСтраницы = ЭлементыФормы.ПанельАктивныеПользователи1.Страницы;
			ЭлементыФормы.ПанельАктивныеПользователи1.ТекущаяСтраница = ? (НаличиеCOMСоединений(),
				ВсеСтраницы.АктивныеСоединения, ВсеСтраницы.АктивныеПользователи);
		КонецЕсли;
			
		ЭлементыФормы.ПолеДатаВремяОбновления.Доступность = РежимОбновления = 2;
		
		УчетныеЗаписиЭлектроннойПочты = ОбновлениеКонфигурации.НаличиеЭлектроннойПочты();
		ЭлементыФормы.ПанельПочта.Свертка = ?(УчетныеЗаписиЭлектроннойПочты, 
			РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
		Если УчетныеЗаписиЭлектроннойПочты Тогда	
			ЭлементыФормы.ПолеАдресЭлектроннойПочты.Доступность = ВыслатьОтчетНаПочту;	
		КонецЕсли;
		
		СтраницыПереходаНаСледующийШаг = ЭлементыФормы.ПанельПереходаНаСледующийШагРежимаОбновленияСервер.Страницы;
		СледСтраница = СтраницыПереходаНаСледующийШаг.Сейчас;
		Если РежимОбновления = 1 Тогда
			СледСтраница = СтраницыПереходаНаСледующийШаг.Отмена;
		ИначеЕсли РежимОбновления = 2 Тогда	
			СледСтраница = СтраницыПереходаНаСледующийШаг.Отложить;
		КонецЕсли; 
		ЭлементыФормы.ПанельПереходаНаСледующийШагРежимаОбновленияСервер.ТекущаяСтраница = СледСтраница;
		ЭлементыФормы.НадписьРезервнаяКопияКлиентСервер.Заголовок = ТекстНадписиРезервнойКопииИБ();
		
	ИначеЕсли ТекущаяСтраница = Страницы.УспешноеОбновление Тогда  		// 5.1
		ЭлементыФормы.ПанельПорядокОбновленияПриЗавершении.Видимость = НЕ ПустаяСтрока(ИмяФайлаПорядокОбновления);
		ФункцияКнопкиДалее = Ложь;
		
	ИначеЕсли ТекущаяСтраница = Страницы.НеуспешноеОбновление Тогда  	// 5.2
		ФункцияКнопкиДалее = Ложь;
		
	ИначеЕсли ТекущаяСтраница = Страницы.ФайлОбновления Тогда  			// 2.2
		ЭлементыФормы.ПанельОбновлениеИзОсновнойКонфигурации.Видимость = КонфигурацияИзменена();
		ЭлементыФормы.ПолеФайлОбновления.Доступность = НуженФайлОбновления;
		ЭлементыФормы.ПолеФайлОбновления.АвтоОтметкаНезаполненного = НуженФайлОбновления;
		
	ИначеЕсли ТекущаяСтраница = Страницы.ДополнительныеНастройки Тогда  // 3.2.1
		
		ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
		ЗапрашиватьАвторизациюИБ = ЗапрашиватьПарольАдминистратора();
		ЭлементыФормы.ПанельАвторизацияИБ.Свертка = ?(ЗапрашиватьАвторизациюИБ, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
		Если ЗапрашиватьАвторизациюИБ Тогда
			УстановкаПароля = ВводитьПарольАдминистратора();
			ЭлементыФормы.ПанельПредупреждениеОWindowsАвторизации.Видимость = УстановкаПароля;
			ПоследнийЭлементГруппы = ?(УстановкаПароля, ЭлементыФормы.ПолеПарольАдминистратораИБПроверка,
				ЭлементыФормы.ПолеПарольАдминистратораИБ);
			ЭлементыФормы.РамкаГруппыАдминистраторИБ.Высота = 
				ПоследнийЭлементГруппы.Верх - ЭлементыФормы.РамкаГруппыАдминистраторИБ.Верх + 
				ПоследнийЭлементГруппы.Высота + 8;
			ЭлементыФормы.НадписьПарольАдминистратораИБПроверка.Видимость = УстановкаПароля;
			ЭлементыФормы.ПолеПарольАдминистратораИБПроверка.Видимость = УстановкаПароля;
			
			ЭлементыФормы.ПолеИмяАдминистратораИБ.Значение = ТекущийПользователь.ПолноеИмя;
		КонецЕсли; 
		
		ЭлементыФормы.ПанельАвторизацияКластераСерверов.Видимость = НЕ ОпределитьЭтаИнформационнаяБазаФайловая();
		ЭлементыФормы.ПанельДоступККластеру.Доступность = КластерТребуетАутентификации;
		ЭлементыФормы.ПанельНестандартныеПортыСервера.Доступность = НестандартныеПортыСервера;
	КонецЕсли;
	
	КнопкаДалее = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаДалее;
	КнопкаНазад = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаНазад;
	КнопкаЗакрыть = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаЗакрыть;
	КнопкаНазад.Доступность = ДоступностьКнопкиНазад;
	КнопкаДалее.Доступность = ДоступностьКнопкиДалее;
	КнопкаЗакрыть.Доступность = ДоступностьКнопкиЗакрыть;
	Если ДоступностьКнопкиДалее Тогда
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли ДоступностьКнопкиЗакрыть Тогда
		КнопкаЗакрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	КнопкаДалее.Текст = ? (ФункцияКнопкиДалее, НСтр("ru='&Далее >';uk='&Далі >'"), НСтр("ru='&Готово';uk='&Готово'"));
	
	Если ТекущаяСтраница = Страницы.ДлительнаяОперация Тогда
		ПодключитьОбработчикОжидания("ВыполнитьПолучениеОбновления", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры 

Функция ПроверитьОбновлениеИнтернет(ВыдаватьСообщения = Истина)
	
	ЗаписатьИнформацию(НСтр("ru='Проверка обновления в Интернете...';uk='Перевірка оновлення в Інтернеті...'"));
	ДоступноеОбновление = Неопределено;
	ДоступныеОбновления = Неопределено;
	
	ПараметрыОбновления = ПолучитьПараметрыОбновления(ВыдаватьСообщения);
	Если ТипЗнч(ПараметрыОбновления) = Тип("Строка") Тогда
		ЗаписатьПредупреждение(НСтр("ru='Невозможно подключиться к сети Интернет для проверки обновлений.';uk='Неможливо підключитися до мережі Інтернет для перевірки оновлень.'"));
		Возврат Страницы.ПодключениеКИнтернет;
	КонецЕсли;
	
	ПоследняяВерсияКонфигурации = ПараметрыОбновления.Version;
	Если СравнитьВерсии(Метаданные.Версия, ПоследняяВерсияКонфигурации) >= 0 Тогда  
		ЗаписатьИнформацию(НСтр("ru='Обновление не требуется: последняя версия конфигурации уже установлена.';uk='Оновлення не потрібно: остання версія конфігурації вже встановлена.'"));
		Возврат Страницы.ОбновленияНеОбнаружено;
	КонецЕсли;
	
	ЗаписатьИнформацию(НСтр("ru='Обнаружена более новая версия конфигурации в Интернете: ';uk='Знайдена новіша версія конфігурації в Інтернеті: '") + ПоследняяВерсияКонфигурации + ".");
		
	ТекстОшибки = ПолучитьФайлСпискаШаблонов(ВыдаватьСообщения);
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Страницы.ПодключениеКИнтернет;
	КонецЕсли;
	
	ИмяФайлаИнформацияОбОбновлении = ПолучитьФайлОписанияОбновления();
	ИмяФайлаПорядокОбновления = ПолучитьФайлПорядкаОбновления();
	
	ПолучитьДоступныеОбновления(ПараметрыОбновления, ПоследняяВерсияКонфигурации);
	Если ДоступныеОбновления = Неопределено Тогда
		ЗаписатьИнформацию(НСтр("ru='Невозможно продолжить обновление: нет доступных обновлений.';uk='Неможливо продовжити оновлення: немає доступних оновлень.'"));
		Возврат Страницы.ОбновленияНеОбнаружено;
	КонецЕсли;
	
	Возврат Страницы.ДоступноеОбновление;
КонецФункции

Функция ПроверитьОбновлениеФайл(ВыдаватьСообщения = Истина)
	
	ЗаписатьИнформацию(НСтр("ru='Проверка обновления в Интернете...';uk='Перевірка оновлення в Інтернеті...'"));
	ДоступноеОбновление = Неопределено;
	ДоступныеОбновления = Неопределено;
	
	Если ВосстановлениеРезультатовПредЗапуска <> Истина Тогда
		Возврат Страницы.ФайлОбновления;
	КонецЕсли; 
	
	Если НуженФайлОбновления Тогда
		Файл = Новый Файл(ИмяФайлаОбновления);
		Если НЕ Файл.Существует() ИЛИ НЕ Файл.ЭтоФайл() Тогда
			ЗаписатьИнформацию(НСтр("ru='Невозможно продолжить обновление: файл поставки обновления конфигурации не найден.';uk='Неможливо продовжити оновлення: файл поставки оновлення конфігурації не знайдений.'"));
			Возврат Страницы.ФайлОбновления;
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьДоступноеОбновлениеИзФайла(?(НуженФайлОбновления, ИмяФайлаОбновления, Неопределено));
	Возврат ПерейтиКВыборуРежимаОбновления(Ложь);	
	
КонецФункции

Функция ПроверитьОбновлениеИТС(ВыдаватьСообщения = Истина)
	
	ЗаписатьИнформацию(НСтр("ru='Проверка обновления на диске ИТС...';uk='Перевірка оновлення на диску ІТС...'"));
	ДоступноеОбновление = Неопределено;
	ДоступныеОбновления = Неопределено;
	
	ДискИТС = НайтиДискИТС();
	Если ДискИТС = Неопределено Тогда
		ЗаписатьПредупреждение(НСтр("ru='Диска ИТС не обнаружено.';uk='Диска ІТС не знайдено.'"));
		Возврат Страницы.ОбновленияНеОбнаружено;	
	КонецЕсли;
	ЗаписатьИнформацию(НСтр("ru='Обнаружен диск ИТС: ';uk='Знайдено диск ІТС: '") + ДискИТС);
	
	ПараметрыОбновления = ПолучитьПараметрыОбновленияИТС(ВыдаватьСообщения);
	Если НЕ ЗначениеЗаполнено(ПараметрыОбновления) Тогда
		ЗаписатьПредупреждение(НСтр("ru='На диске ИТС не найдена информация о последнем обновлении.';uk='На диску ІТС не знайдена інформація про останнє оновлення.'"));
		Возврат Страницы.ОбновленияНеОбнаружено; 
	КонецЕсли;
	
	ПоследняяВерсияКонфигурации = ПараметрыОбновления.Version;
	Если СравнитьВерсии(Метаданные.Версия, ПоследняяВерсияКонфигурации) >= 0 Тогда  
		ЗаписатьИнформацию(НСтр("ru='Невозможно продолжить обновление: версия конфигурации больше или равна версии обновления.';uk='Неможливо продовжити оновлення: версія конфігурації більше або дорівнює версії оновлення.'"));
		Возврат Страницы.ОбновленияНеОбнаружено;
	КонецЕсли;
	
	ЗаписатьИнформацию(НСтр("ru='Обнаружена более новая версия конфигурации на диске ИТС: ';uk='Знайдена новіша версія конфігурації на диску ІТС: '") + ПоследняяВерсияКонфигурации + ".");
	
	Если НЕ ПолучитьФайлСпискаШаблоновИТС(ВыдаватьСообщения) Тогда
		ЗаписатьПредупреждение(НСтр("ru='На диске ИТС не найден список доступных обновлений.';uk='На диску ІТС не знайдений список доступних оновлень.'"));
		Возврат Страницы.ОбновленияНеОбнаружено;
	КонецЕсли;
	
	// Получение файла описания обновлений
	ИмяФайлаИнформацияОбОбновлении = ПолучитьФайлОписанияОбновленияИТС();
	ИмяФайлаПорядокОбновления = ПолучитьФайлПорядкаОбновленияИТС();
	
	ПолучитьДоступныеОбновления(ПараметрыОбновления, ПоследняяВерсияКонфигурации);
	Если ДоступныеОбновления = Неопределено Тогда
		ЗаписатьИнформацию(НСтр("ru='Невозможно продолжить обновление: нет доступных обновлений.';uk='Неможливо продовжити оновлення: немає доступних оновлень.'"));
		Возврат Страницы.ОбновленияНеОбнаружено;
	КонецЕсли;
	
	Возврат Страницы.ДоступноеОбновление;
КонецФункции

Функция ПолучитьОбновление(ВыдаватьСообщения = Истина)
	Сообщение = "";
	Если ИсточникОбновления = 0 Тогда
		Сообщение = НСтр("ru='Получение файлов из Интернета...';uk='Одержання файлів з Інтернету...'");
	ИначеЕсли ИсточникОбновления = 1 Тогда
		Сообщение = НСтр("ru='Получение файлов с диска ИТС...';uk='Одержання файлів з диска ІТС...'");
	Иначе
		Сообщение = НСтр("ru='Получение файла обновления из указанного источника...';uk='Одержання файлу оновлення із зазначеного джерела...'");
	КонецЕсли;
	ЗаписатьИнформацию(Сообщение);
	
	ЭтотОбъект.ТехническаяИнформацияОбОшибке = "";
	НомерФайла = 1;
	Для Каждого Файл Из СписокФайловДляПолучения Цикл
		Сообщение = НСтр("ru='Выполняется получение файлов обновления: ';uk='Виконується одержання файлів оновлення: '") + НомерФайла + НСтр("ru=' из ';uk=' з '") + 
			СписокФайловДляПолучения.Количество() + "...";
		ЗаписатьИнформацию(Сообщение);
		ЭлементыФормы.НадписьПрогресс.Заголовок = Сообщение;
		
		Если Файл.Получен <> Истина Тогда	// может быть также Неопределено
			Если ИсточникОбновления = 0 Тогда
				ТекстОшибки = ПолучитьФайлССервера(Файл.Адрес, Файл.ЛокальныйПуть, Ложь);
				Файл.Получен = ПустаяСтрока(ТекстОшибки);
				Если НЕ Файл.Получен И ОбновлениеКонфигурации.ИспользоватьАльтернативныйИсточникПолученияОбновлений() Тогда

					ТекстОшибки = ПолучитьФайлССервера(Файл.АльтернативныйАдрес, Файл.ЛокальныйПуть, 
						Ложь, СоединениеСАльтернативнымСерверомОбновлений());
					Файл.Получен = ПустаяСтрока(ТекстОшибки);
				КонецЕсли;	
				Если НЕ Файл.Получен И Файл.Обязательный Тогда

					Возврат Страницы.ПодключениеКСайту;
				КонецЕсли;	
			Иначе
				Файл.Получен = СкопироватьФайл(Файл.Адрес, Файл.ЛокальныйПуть, 
					Файл.Обязательный И ВыдаватьСообщения);
			КонецЕсли;
		КонецЕсли;	
		НомерФайла = НомерФайла + 1;
	КонецЦикла;
	
	Страница = Неопределено;
	ФайлыПолученыУспешно = ПроверитьФайлыОбновленияПолучены(СписокФайловДляПолучения);
	Если ФайлыПолученыУспешно Тогда
		ЗаписатьИнформацию(НСтр("ru='Файлы обновления успешно получены.';uk='Файли оновлення успішно отримані.'"));
		Страница = ПерейтиКВыборуРежимаОбновления(Ложь);
	Иначе
		Сообщение = НСтр("ru='Не удалось получить обновление конфигурации.';uk='Не вдалося одержати оновлення конфігурації.'");
		ЗаписатьОшибку(Сообщение);
		Если ВыдаватьСообщения Тогда  
			Предупреждение(Сообщение);
		КонецЕсли;
		Страница = Страницы.ДоступноеОбновление;
	КонецЕсли;
	Возврат Страница;
	
КонецФункции

Функция ПерейтиКВыборуРежимаОбновления(ВыдаватьСообщения = Истина)

	Если ПроверитьДоступКИБ(ВыдаватьСообщения) Тогда
		Возврат ?(ОпределитьЭтаИнформационнаяБазаФайловая(), Страницы.ВыборРежимаОбновленияФайл,
		          Страницы.ВыборРежимаОбновленияСервер);
				  
	Иначе
	    Возврат Страницы.ДополнительныеНастройки;
	КонецЕсли; 
	
КонецФункции 

Функция ВосстановитьРезультатыПредыдущегоЗапуска(Отказ = Ложь)
	
	ВосстановлениеРезультатовПредЗапуска = Истина;
	Страница = ОбработатьСтраницуДоброПожаловать(Ложь);
	Обработано = Страница = Страницы.ДоступноеОбновление ИЛИ 
				 Страница = Страницы.ВыборРежимаОбновленияСервер ИЛИ
				 Страница = Страницы.ВыборРежимаОбновленияФайл ИЛИ
				 Страница = Страницы.ДополнительныеНастройки;

	ВосстановлениеРезультатовПредЗапуска = Ложь;
	Если НЕ Обработано Тогда
		Отказ = Истина;
		Возврат Страница;
	КонецЕсли;

	Если Страница = Страницы.ДоступноеОбновление Тогда
		СписокФайлов = СоздатьСписокФайловДляПолучения(ИсточникОбновления = 0);
		Если ПроверитьФайлыОбновленияПолучены(СписокФайлов) Тогда
			ЗаписатьИнформацию(НСтр("ru='Обнаружено, что файлы обновления конфигурации уже были получены и сохранены локально.';uk='Виявлено, що файли оновлення конфігурації вже були отримані та збережені локально.'"));
			Страница = ПерейтиКВыборуРежимаОбновления(Ложь);
		КонецЕсли;
	КонецЕсли;
	Возврат Страница;
	
КонецФункции
	
Функция ОбработатьСтраницуДоброПожаловать(ВыдаватьСообщения = Истина)
	
	Если ИсточникОбновления = 0 Тогда
		Возврат ПроверитьОбновлениеИнтернет(ВыдаватьСообщения);
	ИначеЕсли ИсточникОбновления = 1 Тогда
		Возврат ПроверитьОбновлениеИТС(ВыдаватьСообщения);
	ИначеЕсли ИсточникОбновления = 2 Тогда
		Возврат ПроверитьОбновлениеФайл(ВыдаватьСообщения);
	КонецЕсли;	
	Возврат Неопределено;
	
КонецФункции

Функция ОбработатьСтраницуПодключениеКИнтернет(ВыдаватьСообщения = Истина)
	
	ЭтотОбъект.ТехническаяИнформацияОбОшибке = "";
	Если ПроксиСерверТребуетАутентификации Тогда
		
		Если НЕ ЗначениеЗаполнено(ПользовательПроксиСервера) Тогда
			Если ВыдаватьСообщения Тогда
				Предупреждение(НСтр("ru='Укажите имя пользователя прокси-сервера.';uk=""Укажіть ім'я користувача проксі-сервера."""));
			КонецЕсли;
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПользовательПроксиСервера;
			Возврат Страницы.ПодключениеКИнтернет;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПарольПроксиСервера) Тогда
			Если ВыдаватьСообщения Тогда
				Предупреждение(НСтр("ru='Укажите пароль пользователя прокси-сервера.';uk='Укажіть пароль користувача проксі-сервера.'"));
			КонецЕсли;
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПарольПроксиСервера;
			Возврат Страницы.ПодключениеКИнтернет;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокФайловДляПолучения <> Неопределено Тогда
		Возврат Страницы.ДлительнаяОперация;
	ИначеЕсли ДоступныеОбновления <> Неопределено Тогда
		Возврат Страницы.ДоступноеОбновление;
	КонецЕсли;
		
	Возврат ?(ДоступныеОбновления = Неопределено, ПроверитьОбновлениеИнтернет(ВыдаватьСообщения), 
		Страницы.ПодключениеКСайту);	
		
КонецФункции

Функция ОбработатьСтраницуПодключениеКСайту(ВыдаватьСообщения = Истина)
	
	ЭтотОбъект.ТехническаяИнформацияОбОшибке = "";
	Если НЕ ЗначениеЗаполнено(КодПользователяСервераОбновлений) Тогда
		Если ВыдаватьСообщения Тогда
			Предупреждение(НСтр("ru='Укажите код пользователя сервера обновлений.';uk='Укажіть код користувача сервера оновлень.'"));
		КонецЕсли;	
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.КодПользователяСервераОбновлений;
		Возврат Страницы.ПодключениеКСайту;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПарольСервераОбновлений) Тогда
		Если ВыдаватьСообщения Тогда
			Предупреждение(НСтр("ru='Укажите пароль пользователя сервера обновлений.';uk='Укажіть пароль користувача сервера оновлень.'"));
		КонецЕсли;
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПарольСервераОбновлений;
		Возврат Страницы.ПодключениеКСайту;
	КонецЕсли;
	
	Если СписокФайловДляПолучения <> Неопределено Тогда
		Возврат Страницы.ДлительнаяОперация;
	ИначеЕсли ДоступныеОбновления <> Неопределено Тогда
		Возврат Страницы.ДоступноеОбновление;
	КонецЕсли;
	
	Возврат ПроверитьОбновлениеИнтернет(ВыдаватьСообщения);	
КонецФункции

Функция ОбработатьСтраницуДоступноеОбновление(ВыдаватьСообщения = Истина)
	
	ЭтотОбъект.ТехническаяИнформацияОбОшибке = "";
	СписокФайловДляПолучения = СоздатьСписокФайловДляПолучения(ИсточникОбновления = 0);
	Если ПроверитьФайлыОбновленияПолучены(СписокФайловДляПолучения) Тогда
		ЗаписатьИнформацию(НСтр("ru='Обнаружено, что файлы обновления конфигурации уже были получены и сохранены локально.';uk='Виявлено, що файли оновлення конфігурації вже були отримані та збережені локально.'"));
		Возврат ПерейтиКВыборуРежимаОбновления(Ложь);
	КонецЕсли;	
		
	Если ИсточникОбновления = 0 Тогда
		ВозможноПодключениеКСайту = ЗначениеЗаполнено(КодПользователяСервераОбновлений) И 
			ЗначениеЗаполнено(ПарольСервераОбновлений);
		Если НЕ ВозможноПодключениеКСайту Тогда
			ЗаписатьПредупреждение(НСтр("ru='Невозможно подключиться к пользовательскому сайту, так как не заданы параметры авторизации.';uk='Неможливо підключитися до сайту користувачів, тому що не задані параметри авторизації.'"));
		КонецЕсли;
		Возврат ?(ВозможноПодключениеКСайту, Страницы.ДлительнаяОперация, Страницы.ПодключениеКСайту);
	Иначе
		Возврат Страницы.ДлительнаяОперация;
	КонецЕсли;
	
КонецФункции

Функция ОбработатьСтраницуОбновленияНеОбнаружено(ВыдаватьСообщения = Истина)
	
	ЭтаФорма.Закрыть();
	Возврат Страницы.ОбновленияНеОбнаружено;	
	
КонецФункции

Функция ОбработатьСтраницуДлительнаяОперация(ВыдаватьСообщения = Истина)
	
	Возврат РезультатПолученияФайлов;
	
КонецФункции

Функция ОбработатьСтраницуВыборРежимаОбновления(ВыдаватьСообщения = Истина)
	
	ТекущаяСтраница = ЭлементыФормы.Панель1.ТекущаяСтраница;

	ВыполнитьОбновление = Ложь;
	Если РежимОбновления = 0 Тогда   // Обновить сейчас
		
		Если ОпределитьЭтаИнформационнаяБазаФайловая() Тогда
			НаличиеСоединений = НаличиеАктивныхСоединений();
			Если НаличиеСоединений Тогда
				ОбщегоНазначения.ПредупреждениеОбОшибке(НСтр("ru='Невозможно продолжить обновление конфигурации, так как не завершены все соединения с информационной базой.';uk=""Неможливо продовжити оновлення конфігурації, тому що не завершені всі з'єднання з інформаційною базою."""));	
				Возврат ТекущаяСтраница;
			КонецЕсли; 
		КонецЕсли;
		ВыполнитьОбновление = Истина;
		ОбновлениеКонфигурации.ПередЗавершениемРаботыСистемы();
		ЗавершитьРаботуСистемы();	
		
	ИначеЕсли РежимОбновления = 1 Тогда  // Не обновлять сейчас
		УдалитьЗадачуПланировщика(КодЗадачиПланировщика);
	ИначеЕсли РежимОбновления = 2 Тогда  // Запланировать обновление
		Если НЕ ПроверитьДопустимуюДатуОбновления(ДатаВремяОбновления, ВыдаватьСообщения) Тогда
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПолеДатаВремяОбновления;
			Возврат ТекущаяСтраница;	
		КонецЕсли;	
		
		Если ОбновлениеКонфигурации.НаличиеЭлектроннойПочты() Тогда
			
			Если ВыслатьОтчетНаПочту Тогда
				
				Если Найти(АдресЭлектроннойПочты, "@") <= 0 ИЛИ Найти(АдресЭлектроннойПочты, ".") <= 0 Тогда
					Если ВыдаватьСообщения Тогда
						Предупреждение(НСтр("ru='Укажите допустимый адрес электронной почты.';uk='Укажіть припустиму адресу електронної пошти.'"));
					КонецЕсли;	
					ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПолеАдресЭлектроннойПочты;
					Возврат ТекущаяСтраница;	
				КонецЕсли;	
				
				Если НЕ ОбновлениеКонфигурации.ПроверитьУчетныеЗаписиДляОтправкиПисем(ИмяПользователя()) Тогда
					Возврат ТекущаяСтраница;
				КонецЕсли; 
				
			КонецЕсли;	           
			
		КонецЕсли;
		
		Если НЕ УстановленWMI(ВыдаватьСообщения) Тогда
			Возврат ТекущаяСтраница;	
		КонецЕсли;	
		
		Если НЕ ЗапланироватьОбновлениеКонфигурации() Тогда
			Предупреждение(НСтр("ru='Невозможно запланировать обновление конфигурации. Сведения об ошибке сохранены в журнал регистрации.';uk='Неможливо запланувати оновлення конфігурації. Відомості про помилку збережені в журнал реєстрації.'"));
			Возврат ТекущаяСтраница;	
		КонецЕсли;	
	Иначе
		Возврат ТекущаяСтраница;	
	КонецЕсли;
	
	Сообщение = НСтр("ru='Выбран режим обновления: ';uk='Обраний режим оновлення: '");
	Если РежимОбновления = 0 Тогда   // Обновить сейчас
		Сообщение = Сообщение + НСтр("ru='сейчас.';uk='зараз.'");
	ИначеЕсли РежимОбновления = 1 Тогда  // Не обновлять сейчас
		Сообщение = Сообщение + НСтр("ru='отмена.';uk='скасування.'");
	ИначеЕсли РежимОбновления = 2 Тогда  // Запланировать обновление
		Сообщение = Сообщение + НСтр("ru='запланировать.';uk='запланувати.'");
	КонецЕсли;
	ЗаписатьИнформацию(Сообщение);
	
	ЭтаФорма.Закрыть();
	Возврат ТекущаяСтраница;	
	
КонецФункции

Функция ОбработатьСтраницуУспешноеОбновление(ВыдаватьСообщения = Истина)
	ЭтаФорма.Закрыть();
	Возврат Страницы.УспешноеОбновление;	
КонецФункции

Функция ОбработатьСтраницуНеуспешноеОбновление(ВыдаватьСообщения = Истина)
	ЭтаФорма.Закрыть();
	Возврат Страницы.НеуспешноеОбновление;	
КонецФункции

Функция ОбработатьСтраницуФайлОбновления(ВыдаватьСообщения = Истина)
	
	Если НуженФайлОбновления Тогда
		
		Если НЕ ЗначениеЗаполнено(ИмяФайлаОбновления) Тогда
			Если ВыдаватьСообщения Тогда
				Предупреждение(НСтр("ru='Укажите файл поставки обновления конфигурации.';uk='Укажіть файл поставки оновлення конфігурації.'"));
			КонецЕсли;
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПолеФайлОбновления;
			Возврат Страницы.ФайлОбновления;
		КонецЕсли;
		
		Файл = Новый Файл(ИмяФайлаОбновления);
		Если НЕ Файл.Существует() ИЛИ НЕ Файл.ЭтоФайл() Тогда
			Если ВыдаватьСообщения Тогда
				Предупреждение(НСтр("ru='Файл поставки обновления конфигурации не найден.';uk='Файл поставки оновлення конфігурації не знайдений.'"));
			КонецЕсли;
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПолеФайлОбновления;
			Возврат Страницы.ФайлОбновления;
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьДоступноеОбновлениеИзФайла(?(НуженФайлОбновления, ИмяФайлаОбновления, Неопределено));
	Возврат ПерейтиКВыборуРежимаОбновления(Ложь);	
	
КонецФункции

Функция ОбработатьСтраницуДополнительныеНастройки(ВыдаватьСообщения = Истина)
	
	ЗапрашиватьАвторизациюИБ = ЗапрашиватьПарольАдминистратора();
	УстановкаПароля = ВводитьПарольАдминистратора();
	Если ЗапрашиватьАвторизациюИБ И УстановкаПароля Тогда
	
		Если ПарольАдминистратораИБ <> ПарольАдминистратораИБПроверка Тогда
			Если ВыдаватьСообщения Тогда
				Предупреждение(НСтр("ru='Пароль и подтверждение пароля не совпадают!';uk='Пароль і підтвердження пароля не збігаються!'"));
			КонецЕсли;
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПолеПарольАдминистратораИБ;
			Возврат Страницы.ДополнительныеНастройки;
		КонецЕсли;
		
	КонецЕсли; 
	
	Если КластерТребуетАутентификации Тогда
		
		Если НЕ ЗначениеЗаполнено(ИмяАдминистратораКластера) Тогда
			Если ВыдаватьСообщения Тогда
				Предупреждение(НСтр("ru='Укажите имя администратора кластера серверов.';uk=""Укажіть ім'я адміністратора кластера серверів."""));
			КонецЕсли;
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПолеИмяАдминистратораКластера;
			Возврат Страницы.ДополнительныеНастройки;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПарольАдминистратораКластера) Тогда
			Если ВыдаватьСообщения Тогда
				Предупреждение(НСтр("ru='Укажите пароль администратора кластера серверов.';uk='Укажіть пароль адміністратора кластера серверів.'"));
			КонецЕсли;
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПолеПарольАдминистратораКластера;
			Возврат Страницы.ДополнительныеНастройки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПроверитьИУстановитьПарольАдминистратора(ВыдаватьСообщения) Тогда
		Возврат Страницы.ДополнительныеНастройки;
	КонецЕсли; 
	
	Возврат ПерейтиКВыборуРежимаОбновления(ВыдаватьСообщения);	
	
КонецФункции

Функция ТекстНадписиРезервнойКопииИБ()

	Результат = НСтр("ru='Не создавать резервную копию ИБ и не выполнять откат при нештатной ситуации';uk='Не створювати резервну копію ІБ і не виконувати відкат при позаштатній ситуації'");
	Если СоздаватьРезервнуюКопию = 0 Тогда
		Результат = НСтр("ru='Создавать временную резервную копию ИБ и выполнять откат при нештатной ситуации';uk='Створювати тимчасову резервну копію ІБ і виконувати відкат при позаштатній ситуації'");
	ИначеЕсли СоздаватьРезервнуюКопию = 1 Тогда     
		Результат = НСтр("ru='Создавать резервную копию ИБ и выполнять откат при нештатной ситуации';uk='Створювати резервну копію ІБ і виконувати відкат при позаштатній ситуації'");
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции 
 
Процедура ВыполнитьПолучениеОбновления()

	РезультатПолученияФайлов = ПолучитьОбновление();
	КнопкаДалееНажатие(ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаДалее);

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
// 

// Обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Страницы = ЭлементыФормы.Панель1.Страницы;
	ДатаВремяОбновленияУстановлена = Ложь;
	
	// Проверка прав доступа 
	Сообщение = ПроверкаПрав();
	Если НЕ ПустаяСтрока(Сообщение) Тогда
		Отказ = Истина;
		Предупреждение(Сообщение);
	КонецЕсли; 
	
	Если ПереходСБазовойВерсии И НЕ ЭтоБазоваяВерсияКонфигурации() Тогда
		Отказ = Истина;
		Предупреждение(НСтр("ru='Переход на версию ПРОФ доступен только в базовых версиях конфигурации.';uk='Перехід на версію ПРОФ доступний тільки в базових версіях конфігурації.'"));
	КонецЕсли;
	
	// Инициализировать экспортные переменные.
	ИнициализироватьПеременные();
	// Установка признака выполнения обновления по завершении помощника.
	ВыполнитьОбновление = Ложь;
	// Восстановление сохраненных настроек обновления.
	ВосстановитьНастройкиОбновления();
	
	Страница = Страницы.ДоброПожаловать;
	// Если форма открывается при запуске программы после обновления
	Если РезультатОбновления <> Неопределено Тогда	
		
		ИмяФайлаПорядокОбновления = ПолучитьЛокальныйФайлПорядкаОбновления();
		Если НЕ ФайлСуществует(ИмяФайлаПорядокОбновления) Тогда
			ИмяФайлаПорядокОбновления = "";
		КонецЕсли; 
		Страница = ? (РезультатОбновления, Страницы.УспешноеОбновление, Страницы.НеуспешноеОбновление);
		РезультатОбновления = Неопределено;
		
	// ПроверкаНаличияОбновленияПриЗапуске может быть Неопределено.	
	ИначеЕсли ПроверкаНаличияОбновленияПриЗапуске = Истина Тогда	
		
		ЗаписатьИнформацию(НСтр("ru='Запуск проверки обновления на старте системы...';uk='Запуск перевірки оновлення на старті системи...'"));
		
		Если НЕ ОбновлениеКонфигурации.ГотовностьКОбновлениюКонфигурации(Ложь) Тогда
			ЗаписатьИнформацию(НСтр("ru='Конфигурация не может быть обновлена. Завершение проверки обновления.';uk='Конфігурація не може бути оновлена. Завершення перевірки оновлення.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		
		Если КодЗадачиПланировщика <> 0 Тогда
			ЗаписатьИнформацию(НСтр("ru='Обнаружено запланированное обновление. Завершение проверки обновления.';uk='Знайдено  позаплановане оновлення. Завершення перевірки оновлення.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если КонфигурацияИзменена() Тогда
			ИсточникОбновления = 2;
			НуженФайлОбновления = Ложь;
			Страница = Страницы.ФайлОбновления;
			ЗаписатьИнформацию(НСтр("ru='Обнаружено, что основная конфигурация отличается от конфигурации информационной базы.';uk='Виявлено, що основна конфігурація відрізняється від конфігурації інформаційної бази.'"));
		Иначе 
			ИсточникОбновления = 0;	
			Страница = ВосстановитьРезультатыПредыдущегоЗапуска(Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
			
	Иначе
		ЗаписатьИнформацию(НСтр("ru='Запуск помощника обновления конфигурации...';uk='Запуск помічника оновлення конфігурації...'"));
		
		Если НЕ ОбновлениеКонфигурации.ГотовностьКОбновлениюКонфигурации(Истина) Тогда
			ЗаписатьИнформацию(НСтр("ru='Конфигурация не может быть обновлена. Завершение проверки обновления.';uk='Конфігурація не може бути оновлена. Завершення перевірки оновлення.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		
		Если КодЗадачиПланировщика <> 0 Тогда
			ПараметрОтказа = Ложь; // не используется в этом случае
			Страница = ВосстановитьРезультатыПредыдущегоЗапуска(ПараметрОтказа);
		ИначеЕсли КонфигурацияИзменена() И ИсточникОбновления = 2 Тогда
			НуженФайлОбновления = Ложь;
			Страница = Страницы.ФайлОбновления;
		ИначеЕсли ПропускатьПриветствие = Истина И ИсточникОбновления = 0 Тогда
			Страница = ОбработатьСтраницуДоброПожаловать(Истина);
		КонецЕсли
	КонецЕсли;
	
	ЭлементыФормы.Панель1.ТекущаяСтраница = Страница;
КонецПроцедуры 

// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	ПередОткрытиемСтраницы();
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	// Сохранение настроек обновления.
	СохранитьНастройкиОбновления();
	
	// Выполнение обновления конфигурации.
	Если ВыполнитьОбновление Тогда
		ВыполнитьОбновлениеКонфигурации();
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

//////////////////////////////////////////////////////////////////////////////// 
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
// 

// Обработчик события "Нажатие" надписи "Информация о получении доступа"
//
Процедура НадписьИнформацияОПолученииДоступаНажатие(Элемент)
	
	ОбновлениеКонфигурации.ОткрытьВебСтраницу(
		ОбновлениеКонфигурации.АдресСтраницыИнформацииОПолученииДоступаКПользовательскомуСайту(), 
		НСтр("ru='Информация о получении доступа на пользовательский сайт';uk='Інформація про одержання доступу на сайт користувача'"),
		ЭтаФорма);
	
КонецПроцедуры

// Обработчик события "Нажатие" кнопки "Назад"
//
Процедура КнопкаНазадНажатие(Элемент)
	
	Страницы             = ЭлементыФормы.Панель1.Страницы;
	ТекущаяСтраница      = ЭлементыФормы.Панель1.ТекущаяСтраница;
	НоваяТекущаяСтраница = ТекущаяСтраница;
	
	Если ТекущаяСтраница = Страницы.ДоброПожаловать Тогда			// 1.
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.ПодключениеКИнтернет Тогда		// 2.1
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.ПодключениеКСайту Тогда		// Д1
		НоваяТекущаяСтраница = Страницы.ДоступноеОбновление;
	ИначеЕсли ТекущаяСтраница = Страницы.ДоступноеОбновление Тогда  // 3.1.1
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.ОбновленияНеОбнаружено Тогда  	// 3.1.2
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.ДлительнаяОперация Тогда       // Д2
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.ВыборРежимаОбновленияФайл ИЛИ 
		ТекущаяСтраница = Страницы.ВыборРежимаОбновленияСервер ИЛИ
		ТекущаяСтраница = Страницы.ДополнительныеНастройки Тогда	// 4.2
		Если ИсточникОбновления = 0 Тогда
			НоваяТекущаяСтраница = Страницы.ДоступноеОбновление;
		ИначеЕсли ИсточникОбновления = 1 Тогда
			НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
		Иначе	// ИсточникОбновления = 2
			НоваяТекущаяСтраница = Страницы.ФайлОбновления;
		КонецЕсли;	
	ИначеЕсли ТекущаяСтраница = Страницы.УспешноеОбновление Тогда  		// 5.1
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.НеуспешноеОбновление Тогда  	// 5.2
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.ФайлОбновления Тогда  			// 2.2
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.ДоступноеОбновлениеФайл Тогда  // 3.2.1
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	КонецЕсли;
	
	ЭлементыФормы.Панель1.ТекущаяСтраница = НоваяТекущаяСтраница;
	
	ПередОткрытиемСтраницы();
	
КонецПроцедуры // КнопкаНазадНажатие()

// Обработчик события "Нажатие" кнопки "Далее"
//
Процедура КнопкаДалееНажатие(Элемент)
	
	ТекущаяСтраница      = ЭлементыФормы.Панель1.ТекущаяСтраница;
	НоваяТекущаяСтраница = ТекущаяСтраница;
	КнопкаДалее          = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаДалее;
	КнопкаНазад          = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаНазад;
	КнопкаЗакрыть        = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаЗакрыть;
	
	ТекущаяСтраница.Доступность = Ложь;
	КнопкаДалее.Доступность = Ложь;
	КнопкаНазад.Доступность = Ложь;
	КнопкаЗакрыть.Доступность = Ложь;
	
	Если ТекущаяСтраница = Страницы.ДоброПожаловать Тогда			// 1.
		НоваяТекущаяСтраница = ОбработатьСтраницуДоброПожаловать();
	ИначеЕсли ТекущаяСтраница = Страницы.ПодключениеКИнтернет Тогда		// 2.1
		НоваяТекущаяСтраница = ОбработатьСтраницуПодключениеКИнтернет();
	ИначеЕсли ТекущаяСтраница = Страницы.ПодключениеКСайту Тогда		// Д1
		НоваяТекущаяСтраница = ОбработатьСтраницуПодключениеКСайту();
	ИначеЕсли ТекущаяСтраница = Страницы.ДоступноеОбновление Тогда  // 3.1.1
		НоваяТекущаяСтраница = ОбработатьСтраницуДоступноеОбновление();
	ИначеЕсли ТекущаяСтраница = Страницы.ОбновленияНеОбнаружено Тогда  	// 3.1.2
		НоваяТекущаяСтраница = ОбработатьСтраницуОбновленияНеОбнаружено();
	ИначеЕсли ТекущаяСтраница = Страницы.ДлительнаяОперация Тогда       // Д2
		НоваяТекущаяСтраница = ОбработатьСтраницуДлительнаяОперация();
	ИначеЕсли ТекущаяСтраница = Страницы.ВыборРежимаОбновленияФайл ИЛИ
		ТекущаяСтраница = Страницы.ВыборРежимаОбновленияСервер Тогда // 4.1, 4.2
		НоваяТекущаяСтраница = ОбработатьСтраницуВыборРежимаОбновления();
	ИначеЕсли ТекущаяСтраница = Страницы.УспешноеОбновление Тогда  		// 5.1
		НоваяТекущаяСтраница = ОбработатьСтраницуУспешноеОбновление();
	ИначеЕсли ТекущаяСтраница = Страницы.НеуспешноеОбновление Тогда  	// 5.2
		НоваяТекущаяСтраница = ОбработатьСтраницуНеуспешноеОбновление();
	ИначеЕсли ТекущаяСтраница = Страницы.ФайлОбновления Тогда  			// 2.2
		НоваяТекущаяСтраница = ОбработатьСтраницуФайлОбновления();
	ИначеЕсли ТекущаяСтраница = Страницы.ДополнительныеНастройки Тогда  // 3.2.1
		НоваяТекущаяСтраница = ОбработатьСтраницуДополнительныеНастройки();
	КонецЕсли;
	
	Отказ = Ложь;
	ОбновлениеКонфигурации.ПриПереходеНаСтраницуПомощника(ЭтотОбъект, 
		ЭлементыФормы.Панель1.ТекущаяСтраница.Имя, НоваяТекущаяСтраница.Имя, Отказ);
	ТекущаяСтраница.Доступность = Истина;
	Если НЕ Отказ Тогда	
		ЭлементыФормы.Панель1.ТекущаяСтраница = НоваяТекущаяСтраница;
	КонецЕсли;
	
	ПередОткрытиемСтраницы();
	
КонецПроцедуры 

// Обработчик события "ПриИзменении" флажка "ПроксиСерверТребуетАутентификации"
//
Процедура ПроксиСерверТребуетАутентификацииПриИзменении(Элемент)
	
	ПередОткрытиемСтраницы();
	
КонецПроцедуры // ПроксиСерверТребуетАутентификацииПриИзменении()

// Обработчик события "Нажатие" надписи "Информация об обновлении"
//
Процедура НадписьИнформацияОбОбновленииНажатие(Элемент)
	
	Если ИмяФайлаИнформацияОбОбновлении <> Неопределено Тогда
		ОбновлениеКонфигурации.ОткрытьВебСтраницу(ИмяФайлаИнформацияОбОбновлении, 
			НСтр("ru='Новое в версии ';uk='Нове у версії '") + ?(ДоступноеОбновление = Неопределено, "", ДоступноеОбновление.Версия),
			ЭтаФорма);
	Иначе
		Предупреждение(НСтр("ru='Информация об обновлении отсутствует.';uk='Інформація об оновленні відсутня.'"));
	КонецЕсли;
	
КонецПроцедуры 

// Обработчик события "Нажатие" надписи "Информация об обновлении"
//
Процедура НадписьПорядокОбновленияНажатие(Элемент)
	
	Если ИмяФайлаПорядокОбновления <> Неопределено Тогда
		ОбновлениеКонфигурации.ОткрытьВебСтраницу(ИмяФайлаПорядокОбновления, 
			НСтр("ru='Порядок обновления на версию ';uk='Порядок оновлення на версію '") + ?(ДоступноеОбновление = Неопределено, "", ДоступноеОбновление.Версия),
			ЭтаФорма);
	Иначе
		Предупреждение(НСтр("ru='Описание порядка обновления отсутствует.';uk='Опис порядку оновлення відсутній.'"));
	КонецЕсли;
	
КонецПроцедуры 

// Обработчик события "НачалоВыбора" поля ввода "Файл обновления"
//
Процедура ПолеФайлОбновленияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Каталог = ПолучитьКаталогФайла(ИмяФайлаОбновления);
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.Фильтр = НСтр("ru='Все файлы поставки (*.cf*;*.cfu) |*.cf*;*.cfu|Файл поставки конфигурации (*.cf)|*.cf|Файл поставки обновления конфигурации(*.cfu)|*.cfu';uk='Всі файли поставки (*.cf*;*.cfu) |*.cf*;*.cfu|файл поставки конфігурації (*.cf)|*.cf|файл поставки оновлення конфігурації (*.cfu)|*.cfu'");
	Диалог.Заголовок = НСтр("ru='Выбор поставки обновления конфигурации';uk='Вибір поставки оновлення конфігурації'");
	
	Если Диалог.Выбрать() Тогда
		Элемент.Значение = Диалог.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры 

Процедура НадписьАктивныеСоединенияНажатие(Элемент)
	
	Форма = ОбработкаОбъект.ПолучитьФорму("АктивныеСоединения");
	Форма.ОткрытьМодально();
	ПередОткрытиемСтраницы();
	
КонецПроцедуры 

Процедура ПереключательПровестиОбновлениеПриИзменении(Элемент)
	ПередОткрытиемСтраницы();
КонецПроцедуры

Процедура ФлажокВыслатьОтчетНаПочтуПриИзменении(Элемент)
	ПередОткрытиемСтраницы();
КонецПроцедуры

Процедура ПереключательНуженФайлОбновленияПриИзменении(Элемент)
	ПередОткрытиемСтраницы();
КонецПроцедуры

Процедура ФлажокКластерТребуетАутентификацииПриИзменении(Элемент)
	ПередОткрытиемСтраницы();
КонецПроцедуры

Процедура ФлажокНестандартныеПортыСервераПриИзменении(Элемент)
	ПередОткрытиемСтраницы();
КонецПроцедуры

Процедура НадписьРезервнаяКопияНажатие(Элемент)
	
	Форма = ОбработкаОбъект.ПолучитьФорму("НастройкаРезервнойКопии");
	Форма.ОткрытьМодально();
	ПередОткрытиемСтраницы();
	
КонецПроцедуры

Процедура ПереключательИсточникИнтернетПриИзменении(Элемент)
	ПередОткрытиемСтраницы();
КонецПроцедуры

Процедура ПереключательИсточникИТСПриИзменении(Элемент)
	ПередОткрытиемСтраницы();
КонецПроцедуры

Процедура ПереключательИсточникФайлПриИзменении(Элемент)
	ПередОткрытиемСтраницы();
КонецПроцедуры

Процедура КоманднаяПанельФормыКнопкаЗакрыть(Кнопка)
	
	Если ЭлементыФормы.Панель1.ТекущаяСтраница = Страницы.ВыборРежимаОбновленияСервер Тогда
		Если КодЗадачиПланировщика <> 0 Тогда
			Режим = РежимДиалогаВопрос.ДаНетОтмена;
			Ответ = Вопрос(НСтр("ru='Отменить запланированное обновление?';uk='Скасувати заплановане оновлення?'"), Режим, 0);
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
			    Возврат;
			ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
				УдалитьЗадачуПланировщика(КодЗадачиПланировщика);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	Закрыть();
	
КонецПроцедуры

Процедура НадписьПодробнееОбИТСНажатие(Элемент)
	ОбновлениеКонфигурации.ОткрытьВебСтраницу(
		"http://its.1c.ua/db/aboutitsu#content:2:1", 
		НСтр("ru='Информация об Информационно-технологическом сопровождении';uk='Інформація про Інформаційно-технологічний супровід'"),
		ЭтаФорма);
КонецПроцедуры

Процедура НадписьКакОформитьПодпискуНаИТСНажатие(Элемент)
	ОбновлениеКонфигурации.ОткрытьВебСтраницу(
		"https://its.1c.ua/zakaz",
		НСтр("ru='Выбор обслуживающей компании';uk='Вибір обслуговуючої компанії'"),
		ЭтаФорма);
КонецПроцедуры
