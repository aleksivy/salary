// Строка дерева поиска по текущему типу
Перем мСтрокаДереваПоискаПоТекущемуТипу;
// Выпадающий список строк поиска
Перем мСписокЗначенийСтрокиПоиска;
// структура последнего поиска
Перем мСтруктураПоследненоПоиска;

// храним путь сохранения параметорв обработки
Перем мПутьСохраненияПараметровОбработки;
// Храним последнее время окончания поиска объектов
Перем мВремяОкончанияПоискаОбъектов;


///////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// процедура вызывает форму редактирования настроек построителя
Процедура РедактироватьНастройкиДополнительныхПараметров(Построитель, СписокПолей, ДеревоМакета, НаименованиеОбъектаРедактирования)
	
	КопияНастройкиПостроителя =	Построитель.ПолучитьНастройки(Истина, Истина, Истина, Истина, Истина);
	КопияCпискаПолей = СписокПолей.Скопировать();
	
	ФормаРедактированияНастроек = ЭтотОбъект.ПолучитьФорму("ФормаНастройкиПостроителя", ЭтаФорма);
	ФормаРедактированияНастроек.Построитель = Построитель;
	ФормаРедактированияНастроек.СписокИменПолей = СписокПолей;
	ФормаРедактированияНастроек.ДеревоМакета = ДеревоМакета;
	ФормаРедактированияНастроек.Заголовок = НСтр("ru='Дополнительные ограничения: ';uk='Додаткові обмеження: '") + НаименованиеОбъектаРедактирования; 
	
	ФормаРедактированияНастроек.ОткрытьМодально();
	
	ОтветОтФормы = ФормаРедактированияНастроек.РезультатЗакрытияДиалога;
	
	Если ОтветОтФормы = Ложь Тогда
		Построитель.УстановитьНастройки(КопияНастройкиПостроителя, Истина, Истина, Истина, Истина, Истина);
		СписокПолей = КопияCпискаПолей.Скопировать();
	КонецЕсли;
	
КонецПроцедуры

//Процедура подготавливает объекты для поиска данных определенного типа
Процедура ИнициализироватьВизуальныйПоискОбъектовПоТипу(Тип)
	
	// для данного типа поиска нужно восстановить выпадающий список значений
	ВосстановитьСписокСтрокПоиска();
	
	РезультатИнициализации = ИнициализироватьПоискОбъектовПоТипу(Тип, ДеревоПоискаДляОбъектов, 
		мСтрокаДереваПоискаПоТекущемуТипу, ДеревоПоискаДляОбъектовТекущегоТипа, ,ДополнительныеОтборы, НеИспользуемыеПараметрыОтбора);
		
		
	Если НастройкаПоискаДанных = Неопределено Тогда
			
		// произошло изменени типа объекта поиска
		// надо подгрузить настройку поиска по умолчанию
		ИмяОбъектаНастройки = УниверсальныеМеханизмы.ПолучитьИмяОбъектаНастройки(ТипОбъектовПоиска);
		
		Если ПустаяСтрока(ИмяОбъектаНастройки) Тогда
			Возврат;
		КонецЕсли;
		
		// создаем структуру для сохранения параметров
		СтруктураНастройки = Новый Структура;
		СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
		СтруктураНастройки.Вставить("ИмяОбъекта", ИмяОбъектаНастройки);
		
		НастройкаПолучена = УниверсальныеМеханизмы.ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки);
		НастройкаПоискаДанных = СтруктураНастройки;
		
	Иначе
		
		НастройкаПолучена = Истина;
		
	КонецЕсли;
	
	
	Если НастройкаПолучена = Истина Тогда
		
		Если ТипЗнч(НастройкаПоискаДанных) = Тип("Структура")
			И НастройкаПоискаДанных.Свойство("СохраненнаяНастройка") Тогда
			
			УстановитьПараметрыПоискаПоНастройке(НастройкаПоискаДанных.СохраненнаяНастройка, НастройкаПоискаДанных.НаименованиеНастройки);
			
		Иначе
			
			// это непосредственно сами настройки
			УстановитьПараметрыПоискаПоНастройке(НастройкаПоискаДанных);
			НастройкаПоискаДанных = Неопределено;
			ЭтаФорма.Заголовок = НСтр("ru='Поиск объектов';uk=""Пошук об'єктів""");
		
	    КонецЕсли;
				
	Иначе	
		
		НастройкаПоискаДанных = Неопределено;
		ЭтаФорма.Заголовок = НСтр("ru='Поиск объектов';uk=""Пошук об'єктів""");
					
	КонецЕсли;
				
	Если (мСтрокаДереваПоискаПоТекущемуТипу = Неопределено) 
		И НЕ ВизуальноеОтображениеРезультатовПоиска Тогда
		
		ЭтаФорма.Закрыть(Ложь);
		
	КонецЕсли;
				
КонецПроцедуры

// Функция Возвращает нужно ли искать данные или нет
Функция ОпределитьНеобходимостьПоиска(ТекущаяДата)
	
	Если мВремяОкончанияПоискаОбъектов = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	НеобходимостьПоиска = (ТекущаяДата - мВремяОкончанияПоискаОбъектов) >= 1;
	
	Возврат НеобходимостьПоиска;

КонецФункции

// Функция создает копию параметров поиска
Функция СоздатьКопиюПараметровПоиска(ИсходныеПараметры)
	
	Если ИсходныеПараметры = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КоллекцияКопия = Новый Структура;
	Для Каждого Элемент Из ИсходныеПараметры Цикл
		
		Если Врег(Элемент.Ключ) = Врег("ДеревоПоиска") Тогда
			
			// надо дерево скопировать
			КопияДерева = Элемент.Значение.Скопировать();
			// объекты не скопировались а только ссылки записались
			НомерЭлемента = 0;
			Для Каждого СтрокаДерева Из Элемент.Значение.Строки Цикл
				
				СтрокаКопии = КопияДерева.Строки[НомерЭлемента];
				// теперь все объекты по новому перетаскиваем
				СтрокаКопии.СписокПолей = СтрокаДерева.СписокПолей.Скопировать();
				
				// построитель надо копирнуть
				Если (СтрокаКопии.Построитель <> Неопределено) Тогда
					// по новому создаем
					СтрокаКопии.Построитель = Новый ПостроительОтчета();
					                                                          
					НастройкиПостроителя = СтрокаДерева.Построитель.ПолучитьНастройки(Истина, Ложь, Ложь, Ложь, Ложь);
					Попытка
						СтрокаКопии.Построитель.Текст = СтрокаДерева.Построитель.Текст;
					Исключение
					КонецПопытки;
				  	СтрокаКопии.Построитель.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
                					
				КонецЕсли;
					
				НомерЭлемента = НомерЭлемента + 1;
				
			КонецЦикла;
			
			КоллекцияКопия.Вставить(Элемент.Ключ, КопияДерева);
			
		ИначеЕсли Врег(Элемент.Ключ) = Врег("ДополнительныеОтборы") Тогда
			
			// надо доп отборы скопировать
			
		Иначе
			КоллекцияКопия.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЕсли;
					
	КонецЦикла;

	Возврат КоллекцияКопия;
	
КонецФункции

// процедура производит поиск объектов по парамерам поиска
Функция ПроизвестиПоискОбъектов(СтруктураПараметров)
	
	СформироватьГлобальныеПараметрыДляЗапроса(СтруктураПараметров, Ложь);
	КоличествоЗапросовПоиска = 0;
	ЧислоТаблицПоиска = ОпределитьНаличиеТаблицДляПоиска(СтруктураПараметров, КоличествоЗапросовПоиска);
	
	Если ЧислоТаблицПоиска = 0 Тогда
		Предупреждение(НСтр("ru='Не задано ни одно ограничение для поиска';uk='Не вказано жодне обмеження для пошуку'"), 30, НСтр("ru='Поиск объектов';uk=""Пошук об'єктів"""));
		Возврат Неопределено;
	КонецЕсли;
	
	мФормаПрогрессора.НаименованиеОбработкиДанных = "Поиск объектов по установленным ограничениям ...";
	мФормаПрогрессора.Значение = 0;
	мФормаПрогрессора.КомментарийЗначения = "Поиск информации ...";
	
	// САМ ПОИСК ДАННЫХ
	ИтоговыйСписокНайденныхCсылок = ПолучитьДанныеПоПараметрамПоиска(СтруктураПараметров);
	
	// сохраняем параметры последнего поиска
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.СсылкаПоиска) Тогда
		// сохраняем последнюю структуру поиска
		мСтруктураПоследненоПоиска = СоздатьКопиюПараметровПоиска(СтруктураПараметров);
	КонецЕсли;	
	
	Возврат ИтоговыйСписокНайденныхCсылок;
	
КонецФункции


// процедура производит поиск объектов удовлетворяющих условиям
Процедура НайтиОбъекты(СтрокаПоиска)
	
	// если от момента предыдущего поиска прошло менее 1 секунды то ничего не ищем
	Если НЕ ОпределитьНеобходимостьПоиска(ТекущаяДата()) Тогда
		Возврат;
	КонецЕсли;
	
	СписокСсылок = Неопределено;
	
	// структура поиска
	СтруктураПараметров = СформироватьСтруктуруПараметровПоиска(ДеревоПоискаДляОбъектовТекущегоТипа, СтрокаПоиска, ОтборОбъектовУдовлетворяющихВсемУсловиям,
			УказыватьОбластиНахожденияСсылок);

	ИтоговыйСписокНайденныхCсылок = ПроизвестиПоискОбъектов(СтруктураПараметров);
	Если ИтоговыйСписокНайденныхCсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
    		
	ДобавитьИСохранитьСтрокуПоиска(ЭлементыФормы.ИнформацияДляПоиска);
	
	Если Не ВизуальноеОтображениеРезультатовПоиска Тогда
		
		мВремяОкончанияПоискаОбъектов = ТекущаяДата();
		Если мФормаПрогрессора.Открыта() Тогда
			мФормаПрогрессора.Закрыть();
		КонецЕсли;
		СписокСсылок = СформироватьСписокНайденныхОбъектов(ИтоговыйСписокНайденныхCсылок);
		ЭтаФорма.Закрыть(Истина);
		Возврат;
		
	КонецЕсли;
	
	КоличествоНайденныхОбъектов = ИтоговыйСписокНайденныхCсылок.Строки.Количество();

	// если больше 300 объектов то сортировка может занять достаточное время...
	НадоСортироватьСписок = (КоличествоНайденныхОбъектов < 300);
	Если НЕ НадоСортироватьСписок Тогда
			
		ОтветПользователя = Вопрос("Количество найденных объектов составляет " + Строка(КоличествоНайденныхОбъектов) + НСтр("ru='. Сортировка такого списка может занять значительное время."
" Хотите отсортировать объекты?';uk="". Сортування такого списку може зайняти значний час."
"Хочете відсортувати об'єкти?"""), РежимДиалогаВопрос.ДаНет, 30,	КодВозвратаДиалога.Нет, "Сортировка найденных объектов");
		НадоСортироватьСписок = (ОтветПользователя = КодВозвратаДиалога.Да);
			
	КонецЕсли;
		
	Если (КоличествоНайденныхОбъектов > 0) И НадоСортироватьСписок Тогда
			
		мФормаПрогрессора.НаименованиеОбработкиДанных = "Сортировка найденных объектов";
		мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		мФормаПрогрессора.КомментарийЗначения = "Сортировка найденных объектов ...";
		
		ИтоговыйСписокНайденныхCсылок.Строки.Сортировать("Значение");
			
	КонецЕсли;
	
	Если мФормаПрогрессора.Открыта() Тогда
		мФормаПрогрессора.Закрыть();
	КонецЕсли;
	СписокНайденныхСсылок = ИтоговыйСписокНайденныхCсылок;
		
	// строки надо все в дереве открыть (нет смысла открывать дерево если в нем очень много элементов)
	Если СтруктураПараметров.УказыватьОбластиНахожденияСсылок И (КоличествоНайденныхОбъектов < 500) Тогда
		РаскрытьЗакрытьДеревоПоиска(Истина);
	КонецЕсли;
	
	ЭлементыФормы.РамкаГруппыРезультатовПоиска.Заголовок = "Результаты поиска. (Найдено объектов: " + Строка(КоличествоНайденныхОбъектов) + ")";
	мВремяОкончанияПоискаОбъектов = ТекущаяДата();
	
	// устанавливаем колонки для отображения
	УстановитьКолонкиРезультатовПоиска(СтруктураПараметров.УказыватьОбластиНахожденияСсылок);
	
КонецПроцедуры

// процедура устанавливает колонки результатов поиска для отображения
Процедура УстановитьКолонкиРезультатовПоиска(Знач РасширенныйПоиск)
	
	Для Каждого КолонкаРезультата Из ЭлементыФормы.СписокНайденныхСсылок.Колонки Цикл
		
		Если Врег(КолонкаРезультата.Имя) = "ЗНАЧЕНИЕ" Тогда
			
			Если РасширенныйПоиск Тогда
				КолонкаРезультата.ТекстШапки = НСтр("ru='Объект/Область поиска';uk=""Об'єкт/Область пошуку""");				
			Иначе
				КолонкаРезультата.ТекстШапки = "Объект";
			КонецЕсли;
			
		Иначе	
			КолонкаРезультата.Видимость = РасширенныйПоиск; 	
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// процедура создает колонки у грида с результирующими значениями
Процедура СоздатьКолонкиУТабПоляРезультирующихЗначений()
	
	ТабПоле = ЭлементыФормы.СписокНайденныхСсылок;
	
	КолонкаТабПоля = ТабПоле.Колонки.Добавить("Значение", "Объект/Область поиска");
	КолонкаТабПоля.Данные = "Значение";
	КолонкаТабПоля.Ширина = 7;
	КолонкаТабПоля.ТолькоПросмотр = Истина;
	КолонкаТабПоля.ОтображатьИерархию = Истина;
	
	КолонкаТабПоля = ТабПоле.Колонки.Добавить("КлючОбъекта", "Объект данных");
	КолонкаТабПоля.Данные = "КлючОбъекта";
	КолонкаТабПоля.Ширина = 7;
	КолонкаТабПоля.ТолькоПросмотр = Истина;

	КолонкаТабПоля = ТабПоле.Колонки.Добавить("ОбластьПоиска", "Поле поиска");
	КолонкаТабПоля.Данные = "ОбластьПоиска";
	КолонкаТабПоля.Ширина = 7;
	КолонкаТабПоля.ТолькоПросмотр = Истина;
	
	КолонкаТабПоля = ТабПоле.Колонки.Добавить("Представление", "Представление");
	КолонкаТабПоля.Данные = "Представление";
	КолонкаТабПоля.ТолькоПросмотр = Истина;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СОХРАНЕНИЕ - ЗАГРУЗКА НАСТРОЕК ПОИСКА

//процедура восстанавливает список последних поисков текущего типа поиска
Процедура ВосстановитьСписокСтрокПоиска()
	
	Если ТипОбъектовПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогами.ВосстановитьСписокЗначенийУнивер(мСписокЗначенийСтрокиПоиска, мПутьСохраненияПараметровОбработки + "СтрокаПоиска" + ТипОбъектовПоиска,
		ЭлементыФормы.ИнформацияДляПоиска.СписокВыбора);
	
КонецПроцедуры

// процедура добавляет очередную строку поиска для текущего типа поиска
Процедура ДобавитьИСохранитьСтрокуПоиска(Знач ЭлементПоиска)
	
	РаботаСДиалогами.ДобавитьВСписокЗначенийУнивер(мСписокЗначенийСтрокиПоиска, мПутьСохраненияПараметровОбработки + "СтрокаПоиска" + ТипОбъектовПоиска,
		ЭлементПоиска);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ФОРМЫ

// обработчик события перед открытием формы
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// надо проанализировать в каком режиме форма открывается
	Если ЭтаФорма.ВладелецФормы = Неопределено Тогда
		
		ЭлементыФормы.Найти.Ширина = 80;
		ЭлементыФормы.Найти.Видимость = Истина;
		ЭлементыФормы.КомманднаяПанельНижняя.Высота = 0;
		ЭлементыФормы.ОсновнаяПанель.Высота = ЭтаФорма.Высота - ЭлементыФормы.ОсновнаяПанель.Верх - 39;
		
	Иначе
		
		ЭлементыФормы.Найти.Ширина = 0;
		ЭлементыФормы.Найти.Видимость = Ложь;
		ЭлементыФормы.ИнформацияДляПоиска.Ширина = ЭтаФорма.Ширина - 100 + 4;
		
	КонецЕсли;
	
	// загрузка макета настроек поиска
	РезультатЗагрузки = ЗагрузитьДеревоПоискаИзМакета(ДеревоПоискаДляОбъектов);
	Если НЕ РезультатЗагрузки Тогда
		
		Если ВизуальноеОтображениеРезультатовПоиска Тогда
			ЭтаФорма.Закрыть(Ложь);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;

	// заполняем выпадающий список типов объектов поиска
	ЭлементыФормы.ТипОбъектовПоиска.СписокВыбора.Очистить();
	Для Каждого СторкаДерева Из ДеревоПоискаДляОбъектов.Строки Цикл
		ЭлементыФормы.ТипОбъектовПоиска.СписокВыбора.Добавить(СторкаДерева.ТипОбъектаПоиска, СторкаДерева.ОписаниеТаблицыПоиска);	
	КонецЦикла;
	
	// если задано какой тип ищем
	Если ТипОбъектовПоиска = Неопределено Тогда
		ТипОбъектовПоиска = ДеревоПоискаДляОбъектов.Строки[0].ТипОбъектаПоиска; 
	Иначе
		// нужно что бы отобразить то что мы ищем
		ТипОбъектовПоиска = ТипОбъектовПоиска;
		ЭлементыФормы.ТипОбъектовПоиска.Доступность = Ложь;
	КонецЕсли;
		
	ИнициализироватьВизуальныйПоискОбъектовПоТипу(ТипОбъектовПоиска);
		
	Если НЕ ВизуальноеОтображениеРезультатовПоиска Тогда
		
		ЭлементыФормы.НастройкиПоиска.Высота = ЭтаФорма.Высота - ЭлементыФормы.НастройкиПоиска.Верх - 5; 
		ЭлементыФормы.НастройкиПоиска.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.РазделительНастроекПоискаИРезультатов.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Верх);
		
		ЭлементыФормы.ПанельОтображенияРезультатов.Свертка = РежимСверткиЭлементаУправления.Низ;
		ЭлементыФормы.РазделительНастроекПоискаИРезультатов.Свертка = РежимСверткиЭлементаУправления.Низ;
		
	КонецЕсли;
	 
КонецПроцедуры

// обработчик нажатия на кнопку Ограничения...
Процедура КоманднаяПанельНастройкиПоискаНастройкаПостроителя(Кнопка)
	
	Если ЭлементыФормы.НастройкиПоиска.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Построитель = ЭлементыФормы.НастройкиПоиска.ТекущиеДанные.Построитель;
	Если Построитель = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаДереваМакета = НайтиСтрокуДереваПоТаблицеПоискаИПолюСвязки(мСтрокаДереваПоискаПоТекущемуТипу, 
			ЭлементыФормы.НастройкиПоиска.ТекущиеДанные.ТаблицаПоиска, ЭлементыФормы.НастройкиПоиска.ТекущиеДанные.ПолеСвязки);
		
	РедактироватьНастройкиДополнительныхПараметров(Построитель, ЭлементыФормы.НастройкиПоиска.ТекущиеДанные.СписокПолей, 
				СтрокаДереваМакета, ЭлементыФормы.НастройкиПоиска.ТекущиеДанные.ОписаниеТаблицыПоиска);
				
	ЭлементыФормы.НастройкиПоиска.ТекущиеДанные.ДополнительныеОграничения = Строка(Построитель.Отбор);
	ЭлементыФормы.НастройкиПоиска.ТекущиеДанные.ПоляПоиска = СформироватьИменаПолейПоиска(ЭлементыФормы.НастройкиПоиска.ТекущиеДанные.СписокПолей);
	ЭлементыФормы.НастройкиПоиска.ТекущиеДанные.НастройкиПостроителя = Построитель.ПолучитьНастройки(Истина, Ложь, Ложь, Ложь, Ложь);
	
КонецПроцедуры

// обработчик двойного нажатия мышкой на объекте, который был найден
Процедура СписокНайденныхСсылокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭлементыФормы.СписокНайденныхСсылок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбраннаяСтрока.Уровень() = 0 Тогда
		
		НайденныйЭлемент = ЭлементыФормы.СписокНайденныхСсылок.ТекущиеДанные.Значение;
		Если НЕ ЗначениеЗаполнено(НайденныйЭлемент) Тогда
			Возврат;
		КонецЕсли;
		
		ОткрытьЗначение(НайденныйЭлемент);
	
	Иначе
		НайденныйЭлемент = ЭлементыФормы.СписокНайденныхСсылок.ТекущиеДанные.КлючОбъекта;
		Если НайденныйЭлемент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// первый уровень дерева результатов
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(НайденныйЭлемент)) ИЛИ
			ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(НайденныйЭлемент)) Тогда
			
			ОткрытьЗначение(НайденныйЭлемент);
		Иначе
			// хранится структура
			СтруктураЭлемента = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(НайденныйЭлемент);
			РегистрСведенийМенеджер = РегистрыСведений[СтруктураЭлемента.ИмяРегистраСведений];
			СтруктураЭлемента.Удалить("ИмяРегистраСведений");			
			
			ФормаСписка = РегистрСведенийМенеджер.ПолучитьФормуСписка(, ЭтаФорма);
			ФормаСписка.ПараметрТекущаяСтрока = РегистрСведенийМенеджер.СоздатьКлючЗаписи(СтруктураЭлемента);
			ФормаСписка.Открыть();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик "При выводе строки" у НастройкиПоиска
Процедура НастройкиПоискаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	// серым будем подсвечивать ту таблицу по которой ограничения не накладываются
	// Ограничений нет, если нет доп ограничений и не ограничиваем по строке
	СтруктураПараметров = СформироватьСтруктуруПараметровПоиска(, ИнформацияДляПоиска);
	
	СформироватьГлобальныеПараметрыДляЗапроса(СтруктураПараметров, Истина);
	СтроитьОграничения = СтроитьЗапросПоОбластиПоиска(ДанныеСтроки);
	Если СтроитьОграничения Тогда
		Возврат;
	КонецЕсли;
	
	ОформлениеСтроки.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
	
КонецПроцедуры

// Обработчик "При изменении" у строки поиска
Процедура ИнформацияДляПоискаПриИзменении(Элемент)

	// не будем при вводе пользователем значения строки поиска сразу же форму закрывать и искать
	Если ЭлементыФормы.ТипОбъектовПоиска.Доступность Тогда
		НайтиОбъекты(Элемент.Значение);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик "Обработка выбора" у строки поиска
Процедура ИнформацияДляПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнформацияДляПоиска = ВыбранноеЗначение;
	Если ЭлементыФормы.ТипОбъектовПоиска.Доступность Тогда
		НайтиОбъекты(ИнформацияДляПоиска);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик "Обработка выбора" у типов объектов поиска
Процедура ТипОбъектовПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТипОбъектовПоиска = ВыбранноеЗначение;
	
	ПроизвестиАвтоматическоеСохранениеНастроекПоиска();
	
	НастройкаПоискаДанных = Неопределено;
	ИнициализироватьВизуальныйПоискОбъектовПоТипу(ТипОбъектовПоиска);
	
КонецПроцедуры

// Обработчик "Выбор" у НастройкиПоиска
Процедура НастройкиПоискаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	КоманднаяПанельНастройкиПоискаНастройкаПостроителя(Неопределено);
	
КонецПроцедуры

// Обработчик нажатия у кнопки "ПометитьВсеОбластиПоиска"
Процедура КоманднаяПанельНастройкиПоискаПометитьВсеОбластиПоиска(Кнопка)
	
	Для Каждого СтрокаДерева Из ДеревоПоискаДляОбъектовТекущегоТипа.Строки Цикл
		СтрокаДерева.Пометка = Истина;	
	КонецЦикла;
	
КонецПроцедуры

// Обработчик нажатия у кнопки "ОтменитьПометкуВсехОбластейПоиска"
Процедура КоманднаяПанельНастройкиПоискаОтменитьПометкуВсехОбластейПоиска(Кнопка)
	
	Для Каждого СтрокаДерева Из ДеревоПоискаДляОбъектовТекущегоТипа.Строки Цикл
		СтрокаДерева.Пометка = Ложь;	
	КонецЦикла;
	
КонецПроцедуры

// Обработчик нажатия на кнопку Поиск
Процедура ПоискНажатие(Элемент)
	
	НайтиОбъекты(ИнформацияДляПоиска);
	
	ПроизвестиАвтоматическоеСохранениеНастроекПоиска();
	
КонецПроцедуры

// при выводе строки результатотв поиска
Процедура СписокНайденныхСсылокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ТипЗнч(ДанныеСтроки.КлючОбъекта) = Тип("Структура") Тогда
		ОформлениеСтроки.Ячейки.КлючОбъекта.УстановитьТекст("Регистр");	
	КонецЕсли;
	
КонецПроцедуры

// процедура раскрывает или закрывает дерево поиска
Процедура РаскрытьЗакрытьДеревоПоиска(Знач Раскрыть = Истина)
	
	ВизуальноеДерево = ЭлементыФормы.СписокНайденныхСсылок;

	Если Раскрыть Тогда
		
		Для Каждого СтрокаСпискаНайденных Из СписокНайденныхСсылок.Строки Цикл
			ВизуальноеДерево.Развернуть(СтрокаСпискаНайденных, Истина);
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаСпискаНайденных Из СписокНайденныхСсылок.Строки Цикл
			ВизуальноеДерево.Свернуть(СтрокаСпискаНайденных);
		КонецЦикла;
		
	КонецЕсли;
    	
КонецПроцедуры

// раскрыть дерево поиска
Процедура КоманднаяПанельСписокНайденныхСсылокРаскрытьСписок(Кнопка)
	
	РаскрытьЗакрытьДеревоПоиска(Истина);
	
КонецПроцедуры

// закрыть дерево поиска
Процедура КоманднаяПанельСписокНайденныхСсылокЗакрытьСписок(Кнопка)
	
	РаскрытьЗакрытьДеревоПоиска(Ложь);
	
КонецПроцедуры

// детальный поиск для пойденного объекта
Процедура КоманднаяПанельСписокНайденныхСсылокДетальныйПоиск(Кнопка)
	
	// детально можно показать только для элемента не детализированного
	Если (ЭлементыФормы.СписокНайденныхСсылок.ТекущиеДанные = Неопределено)
		ИЛИ мСтруктураПоследненоПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЭлементыФормы.СписокНайденныхСсылок.ТекущиеДанные.Уровень() <> 0) 
		ИЛИ (ЭлементыФормы.СписокНайденныхСсылок.ТекущиеДанные.Строки.Количество() <> 0) Тогда
		Возврат;
	КонецЕсли;
	
	// делаем локальную копию для поиска
	ЛокальныеПараметрыПоиска = СоздатьКопиюПараметровПоиска(мСтруктураПоследненоПоиска);
	ЛокальныеПараметрыПоиска.УказыватьОбластиНахожденияСсылок = Истина;
	ЛокальныеПараметрыПоиска.СсылкаПоиска = ЭлементыФормы.СписокНайденныхСсылок.ТекущиеДанные.Значение;
	
	ДеревоПоискаПоСтроке = ПроизвестиПоискОбъектов(ЛокальныеПараметрыПоиска);
	
	Если мФормаПрогрессора.Открыта() Тогда
		мФормаПрогрессора.Закрыть();
	КонецЕсли;
	
	// отображаем то что нашли
	Если ДеревоПоискаПоСтроке <> Неопределено
		И ДеревоПоискаПоСтроке.Строки.Количество() <> 0 Тогда
		
		ДобавочныеСтроки = ДеревоПоискаПоСтроке.Строки[0].Строки;
		
		Для Каждого СтрокаДобавления Из ДобавочныеСтроки Цикл
			
			СтрокаОтображения = ЭлементыФормы.СписокНайденныхСсылок.ТекущиеДанные.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОтображения, СтрокаДобавления); 
			
		КонецЦикла;
		
	КонецЕсли;
	
	// разворачиваем то что нашли
	ЭлементыФормы.СписокНайденныхСсылок.Развернуть(ЭлементыФормы.СписокНайденныхСсылок.ТекущиеДанные, Истина);
	
	УстановитьКолонкиРезультатовПоиска(Истина);
	
КонецПроцедуры

// процедура устанавливает параметры поиска для текущей настройки
Процедура УстановитьПараметрыПоискаПоНастройке(ДанныеНастройкиПоиска, Знач ИмяНастройкиПоиска = "")
	
	Если ПустаяСтрока(ИмяНастройкиПоиска) Тогда
		
		ЭтаФорма.Заголовок = НСтр("ru='Поиск объектов';uk=""Пошук об'єктів""");
		
	Иначе
		
		ЭтаФорма.Заголовок = НСтр("ru='Поиск объектов: ';uk=""Пошук об'єктів: """) + ИмяНастройкиПоиска;
		
    КонецЕсли;
	
	УстановитьПараметрыПоискаДанныхПоНастройке(ДеревоПоискаДляОбъектов, ДанныеНастройкиПоиска, ДополнительныеОтборы, НеИспользуемыеПараметрыОтбора);
		
	// для текущего типа делаем отображение
	Если мСтрокаДереваПоискаПоТекущемуТипу <> Неопределено Тогда
		УстановитьНастройкиУПараметровПоиска(ДеревоПоискаДляОбъектовТекущегоТипа, мСтрокаДереваПоискаПоТекущемуТипу, Истина, ДополнительныеОтборы, НеИспользуемыеПараметрыОтбора);
		
		Для Каждого СтрокаДерева Из ДеревоПоискаДляОбъектовТекущегоТипа.Строки Цикл
			Если СтрокаДерева.Построитель <> Неопределено Тогда
				СтрокаДерева.ДополнительныеОграничения = Строка(СтрокаДерева.Построитель.Отбор)
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;	
	
КонецПроцедуры

//функция возвращает дерево текущих настроек поиска
Функция ПолучитьСтруктуруТекущихНастроекПоиска() Экспорт 
	
	ТекНастройкиПоиска = Неопределено;
	
	НаличиеВнешнихОтборов = ОпределитьНаличиеДопОграниченийВОтборе(ДополнительныеОтборы, НеИспользуемыеПараметрыОтбора);
	Если НЕ НаличиеВнешнихОтборов Тогда
		
	    УстановитьНастройкиУПараметровПоиска(мСтрокаДереваПоискаПоТекущемуТипу, ДеревоПоискаДляОбъектовТекущегоТипа, , ДополнительныеОтборы, НеИспользуемыеПараметрыОтбора);
		
		// сохраняем все дерево целиком
		ДеревоНастроекТекущегоПоиска = ДеревоПоискаДляОбъектов.Скопировать();
		
		ТекНастройкиПоиска = Новый Структура();
		ТекНастройкиПоиска.Вставить("ДеревоНастроек", ДеревоНастроекТекущегоПоиска);
		ТекНастройкиПоиска.Вставить("ОтборОбъектовУдовлетворяющихВсемУсловиям", ОтборОбъектовУдовлетворяющихВсемУсловиям);	
		
	КонецЕсли;
	
	Возврат ТекНастройкиПоиска;
		
КонецФункции

//Процедура сохраняет текущий настройки поиска данных
Процедура СохранитьТекущиеНастройкиПоискаДанных(Знач АвтоматическоеСохранение = Ложь)
	
	НастройкиПоиска = ПолучитьСтруктуруТекущихНастроекПоиска();

	Если НастройкиПоиска <> Неопределено Тогда
		 		
		Если НЕ АвтоматическоеСохранение Тогда
		
			ИмяОбъектаНастройки = УниверсальныеМеханизмы.ПолучитьИмяОбъектаНастройки(ТипОбъектовПоиска);
			
			Если ПустаяСтрока(ИмяОбъектаНастройки) Тогда
				Возврат;
			КонецЕсли;
			
			// создаем структуру для сохранения параметров
			СтруктураСохранения = Новый Структура;
			СтруктураСохранения.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
			СтруктураСохранения.Вставить("ИмяОбъекта", ИмяОбъектаНастройки);
			СтруктураСохранения.Вставить("НаименованиеНастройки", ?(НастройкаПоискаДанных = Неопределено, Неопределено, НастройкаПоискаДанных.НаименованиеНастройки));
			СтруктураСохранения.Вставить("СохраненнаяНастройка", НастройкиПоиска);
			СтруктураСохранения.Вставить("ИспользоватьПриОткрытии", ?(НастройкаПоискаДанных = Неопределено, Ложь, НастройкаПоискаДанных.ИспользоватьПриОткрытии));
			СтруктураСохранения.Вставить("СохранятьАвтоматически", ?(НастройкаПоискаДанных = Неопределено, Ложь, НастройкаПоискаДанных.СохранятьАвтоматически));

			Результат = УниверсальныеМеханизмы.СохранениеНастроек(СтруктураСохранения);
			
			Если Результат <> Неопределено Тогда
				
				НастройкаПоискаДанных = Результат;
				
			Иначе
				
				НастройкаПоискаДанных = СтруктураСохранения;
				
			КонецЕсли;
						
			ЭтаФорма.Заголовок = НСтр("ru='Поиск объектов: ';uk=""Пошук об'єктів: """) + НастройкаПоискаДанных.НаименованиеНастройки;
		
		Иначе
			
			Если НастройкаПоискаДанных = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			НастройкаПоискаДанных.СохраненнаяНастройка = НастройкиПоиска;
			
			УниверсальныеМеханизмы.СохранитьНастройку(НастройкаПоискаДанных, Неопределено);
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ АвтоматическоеСохранение Тогда
			
			Сообщить(НСтр("ru='Настройки не могут быть сохранены так как используется внешний дополнительный отбор данных!';uk='Настройки не можуть бути збережені, так як використовується зовнішній додатковий відбір даних!'"));
			
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

// процедура производит автоматическое сохранение настроек поиска
Процедура ПроизвестиАвтоматическоеСохранениеНастроекПоиска()
	
	Если НастройкаПоискаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаПоискаДанных.СохранятьАвтоматически <> Истина Тогда
		Возврат;
	КонецЕсли;
		
	СохранитьТекущиеНастройкиПоискаДанных(Истина);
	
КонецПроцедуры

// сохранение настроек поиска
Процедура ОсновнаяКомманднаяПанельСохранениеНастроекПользователя(Кнопка)
	
	СохранитьТекущиеНастройкиПоискаДанных();
	
КонецПроцедуры

// при закрытии формы
Процедура ПриЗакрытии()
	
	ПроизвестиАвтоматическоеСохранениеНастроекПоиска();
	
	Оповестить("ЗакрытиеФормыПоиска", , ЭтаФорма.ВладелецФормы); 
	
КонецПроцедуры

// загрузка настройки поиска
Процедура ОсновнаяКомманднаяЗагрузитьНастройку(Кнопка)
	
	ИмяОбъектаНастройки = УниверсальныеМеханизмы.ПолучитьИмяОбъектаНастройки(ТипОбъектовПоиска);
	
	Если ПустаяСтрока(ИмяОбъектаНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", ИмяОбъектаНастройки);
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(НастройкаПоискаДанных = Неопределено, Неопределено, НастройкаПоискаДанных.НаименованиеНастройки));
	
	Результат = УниверсальныеМеханизмы.ВосстановлениеНастроек(СтруктураНастройки);
	
	Если Результат <> Неопределено Тогда
		
		НастройкаПоискаДанных = Результат;
	    УстановитьПараметрыПоискаПоНастройке(НастройкаПоискаДанных.СохраненнаяНастройка, НастройкаПоискаДанных.НаименованиеНастройки);
		
	КонецЕсли;	
		
КонецПроцедуры

// нажитие на кнопку ОК
Процедура КоманднаяПанель1ОК(Кнопка)
	
	ПоискНажатие(Неопределено);
	
КонецПроцедуры

// нажатие на кнопку отмена
Процедура КоманднаяПанель1Отмена(Кнопка)
	
	ЭтаФорма.Закрыть(Ложь);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОСНОВНОЙ ТЕКСТ ПРОГРАММЫ

СоздатьКолонкиНастроекДереваПоиска(ДеревоПоискаДляОбъектов, Истина);

СоздатьКолонкиУТаблицыРезультирующихЗначений(СписокНайденныхСсылок);
СоздатьКолонкиУТабПоляРезультирующихЗначений();

Для Каждого КолонкаДерева Из ДеревоПоискаДляОбъектов.Колонки Цикл
	ДеревоПоискаДляОбъектовТекущегоТипа.Колонки.Добавить(КолонкаДерева.Имя, КолонкаДерева.ТипЗначения, КолонкаДерева.Заголовок, КолонкаДерева.Ширина);
КонецЦикла;
ЭлементыФормы.НастройкиПоиска.Данные = "ДеревоПоискаДляОбъектовТекущегоТипа";

ВизуальноеОтображениеРезультатовПоиска = Истина;
ТипОбъектовПоиска = Неопределено;

мСписокЗначенийСтрокиПоиска	= Новый СписокЗначений;

мПутьСохраненияПараметровОбработки = "Обработка.УниверсальныйПоискОбъектов.";
мВремяОкончанияПоискаОбъектов = Неопределено;

Если мФормаПрогрессора = Неопределено Тогда
	мФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных", ЭтаФорма);
КонецЕсли;

ДополнительныеОтборы = Неопределено;
мСтруктураПоследненоПоиска = Неопределено;
НеИспользуемыеПараметрыОтбора = Неопределено;
