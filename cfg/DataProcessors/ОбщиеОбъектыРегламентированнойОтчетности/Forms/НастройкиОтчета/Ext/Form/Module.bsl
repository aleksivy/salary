////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// хранит вариант выбора страниц
Перем мПараметры Экспорт;
Перем мВариантВыбора Экспорт;
Перем мПрограммноеЗакрытие;
Перем мСпрашиватьОСохранении;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает (снимает) метки у всех строк дерева.
//
// Параметры:
//  Пометка - логическое выражение, значение пометки.
//	ТекКолонка - колонка дерева, для которой изменяются флажки.
//
Процедура УстановитьПометкуСтрокДерева(Пометка, ТекКолонка)

	Если ТекКолонка = "ПоказатьСтраницу" Тогда

		Для Каждого СтрокаУровня1 Из Дерево.Строки Цикл

			СтрокаУровня1[ТекКолонка] = Пометка;

			Если Пометка = 1 Тогда
				// Для составляющих страниц титульного листа 
				// запрещаем варирование показом страницы.
				// Флаг показа определяется только по титульному
				// листу в целом.
				Если СтрокаУровня1.Строки.Количество() > 0 Тогда
					НовПометка = 2;

					Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл

						СтрокаУровня2[ТекКолонка] = НовПометка;

						Если СтрокаУровня2.Строки.Количество() = 0 Тогда 
							Продолжить;
						КонецЕсли;

						Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл
							СтрокаУровня3[ТекКолонка] = НовПометка;
						КонецЦикла;

					КонецЦикла;

					Продолжить;

				КонецЕсли; 

			ИначеЕсли Пометка = 0 Тогда
				// Предполагаем, что если пользователь отключил 
				// показ какой-либо страницы, то и необходимость
				// вывода этой страницы на печать отпадает
				СтрокаУровня1.ВыводНаПечать = Пометка;

				Для Каждого Строка Из СтрокаУровня1.Строки Цикл
					Строка.ВыводНаПечать = Пометка;
				КонецЦикла;

			КонецЕсли;

			Если СтрокаУровня1.Строки.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл

				СтрокаУровня2[ТекКолонка] = Пометка;

				Если СтрокаУровня2.Строки.Количество() = 0 Тогда 
					Продолжить;
				КонецЕсли;

				Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл
					СтрокаУровня3[ТекКолонка] = Пометка;
				КонецЦикла;

			КонецЦикла;
		КонецЦикла;

	ИначеЕсли  ТекКолонка = "ВыгрузитьСтраницу" Тогда

		Для Каждого СтрокаУровня1 Из Дерево.Строки Цикл

			Если СтрокаУровня1[ТекКолонка] = 2 Тогда 

				Если СтрокаУровня1.Строки.Количество() = 0 Тогда
					// страница выгружается всегда
					Продолжить;

				Иначе

					Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл

						Если СтрокаУровня2[ТекКолонка] = 2 Тогда

							Если СтрокаУровня2.Строки.Количество() = 0 Тогда 
								// части титульного листа выгружаются всегда
								Продолжить;
							КонецЕсли;

						Иначе

							СтрокаУровня2[ТекКолонка] = Пометка;

							Если СтрокаУровня2.Строки.Количество() = 0 Тогда 
								Продолжить;
							КонецЕсли;

							Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

								Если СтрокаУровня3[ТекКолонка] = 2 Тогда
									Продолжить;
								КонецЕсли;

								СтрокаУровня3[ТекКолонка] = Пометка;

							КонецЦикла;

						КонецЕсли;

					КонецЦикла;

				КонецЕсли; 

				Продолжить;

			КонецЕсли;

			СтрокаУровня1[ТекКолонка] = Пометка;

			Если СтрокаУровня1.Строки.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл

				СтрокаУровня2[ТекКолонка] = Пометка;

				Если СтрокаУровня2.Строки.Количество() = 0 Тогда 
					Продолжить;
				КонецЕсли;

				Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл
					СтрокаУровня3[ТекКолонка] = Пометка;
				КонецЦикла;

			КонецЦикла;
		КонецЦикла;

	ИначеЕсли ТекКолонка = "ВыводНаПечать" Тогда

		Для Каждого СтрокаУровня1 Из Дерево.Строки Цикл

			СтрокаУровня1[ТекКолонка] = Пометка;

			Если СтрокаУровня1.Строки.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл

				СтрокаУровня2[ТекКолонка] = Пометка;

				Если СтрокаУровня2.Строки.Количество() = 0 Тогда 
					Продолжить;
				КонецЕсли;

				Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл
					СтрокаУровня3[ТекКолонка] = Пометка;
				КонецЦикла;

			КонецЦикла;
		КонецЦикла;

	Иначе

		Предупреждение(НСтр("ru='Для установки или снятия меток по требуемой колонке"
"предварительно активизируйте колонку.';uk='Для встановлення або зняття міток по необхідному стовпчику"
"спочатку активізуйте колонку.'"));

	КонецЕсли;

КонецПроцедуры // УстановитьПометкуСтрокДерева()

// Процедура регулирует доступность элементов формы в зависимости от
// значения флажка ФлажокАвтосохранение.
//
// Параметры:
//	Нет.
//
Процедура РегулированиеДоступностиПараметровАвтосохранения()
	
	ЭлементыФормы.ИнтервалАвтосохранения.Доступность = ФлажокАвтосохранение;
	ЭлементыФормы.НадписьМинут.Доступность = ФлажокАвтосохранение;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПередЗакрытием формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если мПрограммноеЗакрытие = Истина Тогда
		Возврат;
	КонецЕсли;
	Если мСпрашиватьОСохранении <> Ложь И Модифицированность Тогда
		Ответ = Вопрос(НСтр("ru='Настройки были изменены. Сохранить изменения?';uk='Настроювання були змінені. Зберегти зміни?'"), РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			мСпрашиватьОСохранении = Неопределено;
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			мСпрашиватьОСохранении = Неопределено;
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	ИначеЕсли мСпрашиватьОСохранении <> Ложь И НЕ Модифицированность Тогда
		мСпрашиватьОСохранении = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если мПараметры.СчетчикСтраниц Тогда
		ВладелецФормы.мСчетчикСтраниц = ОтключитьСчетчикСтраниц;
	КонецЕсли;
	
	Если мПараметры.ЗначенияИзСписка Тогда
		ВладелецФормы.мАвтоВыборКодов = ОтклВыборЗначений;
	КонецЕсли;
	
	Если мПараметры.Автосохранение Тогда
		ИнтервалАвтосохранения = ?(ФлажокАвтосохранение, ИнтервалАвтосохранения, 0);
		СохранитьЗначение("ИнтервалАвтосохраненияРегламентированнойОтчетности", ИнтервалАвтосохранения);
		ВладелецФормы.мИнтервалАвтосохранения = ИнтервалАвтосохранения;
		ВладелецФормы.ОтключитьОбработчикОжидания("ОбработчикСобытияПоТаймеру");
		Если ИнтервалАвтосохранения <> 0 Тогда
			ВладелецФормы.ПодключитьОбработчикОжидания("ОбработчикСобытияПоТаймеру", Цел(ИнтервалАвтосохранения * 60));
		КонецЕсли;
	КонецЕсли;
		
	мПрограммноеЗакрытие = Истина;
	Отказ = Истина;
	Закрыть(Дерево);
		
КонецПроцедуры

// Процедура - обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

    ЭлементыФормы.Дерево.Колонки.ВыгрузитьСтраницу.Видимость = мПараметры.Выгрузка;
	ЭлементыФормы.Дерево.Колонки.ВыгрузитьСтраницу.ИзменятьВидимость = мПараметры.Выгрузка;
	
	Если мПараметры.СчетчикСтраниц Тогда
		ОтключитьСчетчикСтраниц = ВладелецФормы.мСчетчикСтраниц;
		ЭлементыФормы.ПанельПараметра1.Свертка = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ЭлементыФормы.ПанельПараметра1.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
	Если мПараметры.ЗначенияИзСписка Тогда
		ОтклВыборЗначений = ВладелецФормы.мАвтоВыборКодов;
		ЭлементыФормы.ПанельПараметра2.Свертка = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ЭлементыФормы.ПанельПараметра2.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
	Если мПараметры.Автосохранение Тогда
		ИнтервалАвтосохранения = ВладелецФормы.мИнтервалАвтосохранения;
		Если ИнтервалАвтосохранения = 0 Тогда
			ФлажокАвтосохранение = Ложь;
			ЭлементыФормы.ИнтервалАвтосохранения.Доступность = Ложь;
		КонецЕсли;
		ФлажокАвтосохранение = (ИнтервалАвтосохранения <> 0);
		Если ИнтервалАвтосохранения = 0 Тогда
			ИнтервалАвтосохранения = 10;
		КонецЕсли;
		РегулированиеДоступностиПараметровАвтосохранения();
		ЭлементыФормы.ПанельПараметра3.Свертка = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ЭлементыФормы.ПанельПараметра3.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
	
	ДеревоСтраницОтчета = НачальноеЗначениеВыбора.Скопировать();

	// Если список одноуровневый, то показывать иерархию не будем
	ЭлементыФормы.Дерево.Колонки["Представление"].ОтображатьИерархию = Ложь;
	Для Каждого Строка Из ДеревоСтраницОтчета.Строки Цикл
		Если Строка.Строки.Количество() > 0 Тогда
			ЭлементыФормы.Дерево.Колонки["Представление"].ОтображатьИерархию = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ЭлементыФормы.Дерево.ТолькоПросмотр = (ДеревоСтраницОтчета.Строки.Количество() = 1);
	ЭлементыФормы.КоманднаяПанельДерево.Доступность = (ДеревоСтраницОтчета.Строки.Количество() > 1);
	
	Дерево = ДеревоСтраницОтчета;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - действие кнопки ОК командной панели формы.
//
Процедура ОсновныеДействияФормыКнопкаВыбратьНажатие(Кнопка)

	мСпрашиватьОСохранении = Ложь;
	Закрыть();
	
КонецПроцедуры // ОсновныеДействияФормыКнопкаВыбратьНажатие()

// Процедура - действие кнопки Закрыть командной панели формы.
// 
Процедура ОсновныеДействияФормыЗакрыть(Кнопка)
	
	мСпрашиватьОСохранении = Истина;
	Закрыть();
	
КонецПроцедуры

// Процедура - действие кнопки УстановитьВсе командной панели КоманднаяПанельДерево.
//
Процедура КнопкаУстановитьВсеНажатие(Элемент)

	ТекКолонка = ЭлементыФормы.Дерево.ТекущаяКолонка.Имя;

	УстановитьПометкуСтрокДерева(1, ТекКолонка);

КонецПроцедуры // УстановитьВсеНажатие()

// Процедура - действие кнопки СнятьВсе командной панели КоманднаяПанельДерево.
//
Процедура КнопкаСнятьВсеНажатие(Элемент)

	ТекКолонка = ЭлементыФормы.Дерево.ТекущаяКолонка.Имя;

	УстановитьПометкуСтрокДерева(0, ТекКолонка);

КонецПроцедуры // СнятьВсеНажатие()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик события ПриИзмененииФлажка табличного поля Дерево.
// 
Процедура ДеревоПриИзмененииФлажка(Элемент, Колонка)

	НоваяПометка = Элемент.ТекущиеДанные[Колонка.Имя];

	Если Колонка.Имя = "ПоказатьСтраницу" Тогда
		Если НоваяПометка = 1 Тогда

			// Для составляющих страниц титульного листа 
			// запрещаем варирование показом страницы.
			// Флаг показа определяется только по титульному
			// листу в целом.
			НоваяПометка = 2;

		ИначеЕсли НоваяПометка = 0 Тогда
			// Предполагаем, что если пользователь отключил 
			// показ какой-либо страницы, то и необходимость
			// вывода этой страницы на печать отпадает
			Элемент.ТекущаяСтрока.ВыводНаПечать = НоваяПометка;

			Для Каждого Строка Из Элемент.ТекущаяСтрока.Строки Цикл
				Строка.ВыводНаПечать = НоваяПометка;
			КонецЦикла;

		КонецЕсли;

	ИначеЕсли Колонка.Имя = "ВыводНаПечать" Тогда

		ВерхняяГруппировка = Элемент.ТекущаяСтрока.Родитель;
		Если ВерхняяГруппировка <> Неопределено Тогда
			// Проверяем все вложенные строки на предмет
			// того, установлены или сняты ли везде метки.
			// Если нет, то устанавливаем третье состояние
			// метки строки-родителя 
			НеВсеОтмечены = 0;

			Для каждого СтрокаУровня Из ВерхняяГруппировка.Строки Цикл

				Если СтрокаУровня.ВыводНаПечать <> НоваяПометка Тогда

					НеВсеОтмечены = 1;

					Прервать;
				КонецЕсли; 

			КонецЦикла; 

			Если НеВсеОтмечены = 1 Тогда
				ВерхняяГруппировка.ВыводНаПечать = 2;
			Иначе
				ВерхняяГруппировка.ВыводНаПечать = НоваяПометка;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Для Каждого Строка Из Элемент.ТекущаяСтрока.Строки Цикл
		Строка[Колонка.Имя] = НоваяПометка;
	КонецЦикла;

КонецПроцедуры // ДеревоПриИзмененииФлажка()

// Процедура - обработчик события ПередНачаломИзменения табличного поля Дерево.
//
Процедура ДеревоПередНачаломИзменения(Элемент, Отказ)

	ТекКолонка  = Элемент.ТекущаяКолонка.Имя;
	ТекЗначение = Элемент.ТекущиеДанные[ТекКолонка];

	Если ТекКолонка = "ВыгрузитьСтраницу" Тогда

		Если ТекЗначение = 2 Тогда
			// Лист является обязательным для выгрузки,
			// поэтому не меняем состояние флажка
			Отказ = Истина;
		КонецЕсли;

	ИначеЕсли ТекКолонка = "ПоказатьСтраницу" Тогда
		// Лист является составной частью титульного листа,
		// поэтому не меняем состояние флажка

		Если ТекЗначение = 2 Тогда

			Отказ = Истина;

		ИначеЕсли ТекЗначение = 0 Тогда
			Если Элемент.ТекущиеДанные.Родитель <> Неопределено Тогда

				Отказ = Истина;

			КонецЕсли; 
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДеревоПередНачаломИзменения()

// Процедура - обработчик события ПередНачаломДобавления табличного поля Дерево.
//
Процедура ДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)

	Отказ = Истина;

КонецПроцедуры // ДеревоПередНачаломДобавления()

// Процедура - обработчик события ПередУдалением табличного поля Дерево.
//
Процедура ДеревоПередУдалением(Элемент, Отказ)

	Отказ = Истина;

КонецПроцедуры // ДеревоПередУдалением()

// Процедура - обработчик события ПриАктивизации табличного поля Дерево.
//
Процедура ДеревоПриАктивизацииЯчейки(Элемент)
	
	ВыбранаКолонкаСФлажками = (ЭлементыФормы.Дерево.ТекущаяКолонка.Имя = "ПоказатьСтраницу") ИЛИ (ЭлементыФормы.Дерево.ТекущаяКолонка.Имя = "ВыводНаПечать");
	ЭлементыФормы.КоманднаяПанельДерево.Кнопки.СнятьВсе.Доступность = ВыбранаКолонкаСФлажками;
	ЭлементыФормы.КоманднаяПанельДерево.Кнопки.УстановитьВсе.Доступность = ВыбранаКолонкаСФлажками;
	
КонецПроцедуры

// Процедура - обарботчик события ПриИзменении флажка ФлажокАвтосохранение.
//
Процедура ФлажокАвтосохранениеПриИзменении(Элемент)
	
	РегулированиеДоступностиПараметровАвтосохранения();
	
КонецПроцедуры

мПараметры = Новый Структура;
мПараметры.Вставить("СчетчикСтраниц", Истина);
мПараметры.Вставить("ЗначенияИзСписка", Истина);
мПараметры.Вставить("Автосохранение", Истина);
мПараметры.Вставить("ДвухмерныйШтрихКод", Истина);
мПараметры.Вставить("Выгрузка", Истина);

мПрограммноеЗакрытие = Ложь;
