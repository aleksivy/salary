
Перем мДокументОтбор;
Перем мЦветПервогоУровняДерева;
Перем мЦветВторогоУровняДерева;
Перем мНажатаКнопкаЗакрыть;
Перем мИерархическийПросмотр;
Перем мПечататьСДвухмернымШтрихКодом Экспорт;
Перем мОтображатьПустые Экспорт;
Перем мОтбиратьПоДокументуОтбора Экспорт;
Перем мФильтроватьВидыОтчетовПоПериоду Экспорт;
Перем мПолноеДеревоОтчетов Экспорт;
Перем МассивНаименованийПравыхГраницПериода;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует отфильтрованное дерево отчетов, то есть дерево в которое попадут только те виды отчетов,
// которые могут представляться за период, соответствующий выбранному пользователем.
// Процедура вызывается рекурсивно.
//
// Параметры:
//	Узел - текущий узел дерева. Используется только при рекурсивных вызовах.
//
Процедура СформироватьОтфильтрованноеДеревоОтчетов(Узел = Неопределено)
	
	УзелБылУдален = Ложь;
	Если Узел = Неопределено Тогда
		ДеревоОтчетов = мПолноеДеревоОтчетов.Скопировать();
		Узел = ДеревоОтчетов;
	ИначеЕсли Узел.Строки.Количество() = 0 Тогда
		Периоды = Узел.Периоды;
		Если ОтборПериод И мФильтроватьВидыОтчетовПоПериоду И Периодичность <> "Произвольный" И ТипЗнч(Периоды) = Тип("ХранилищеЗначения") Тогда
			ТаблицаПериодов = Периоды.Получить();
			МесяцКон = Месяц(ДатаКонцаПериодаОтчета);
			Если ТаблицаПериодов.НайтиСтроки(Новый Структура("МесяцКон", МесяцКон)).Количество() = 0 Тогда
				Если Узел.Родитель = Неопределено Тогда
					ДеревоОтчетов.Строки.Удалить(Узел);
				Иначе
					Узел.Родитель.Строки.Удалить(Узел);
				КонецЕсли;
				УзелБылУдален = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УзелБылУдален Тогда
		Кол = Узел.Строки.Количество();
		Для Сч = 1 По Кол Цикл
			ТекИнд = Кол - Сч;
			Стр = Узел.Строки.Получить(ТекИнд);
			СформироватьОтфильтрованноеДеревоОтчетов(Стр);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Удаляет пустые группы отчетов в дереве видов отчетов.
// Процедура вызывается рекурсивно.
//
// Параметры:
//	Узел - текущий узел дерева. Используется только при рекурсивных вызовах.
//
Процедура УдалитьПустыеГруппыВОтфильтрованномДереве(Узел = Неопределено)
	
	Если Узел = Неопределено Тогда
		Узел = ДеревоОтчетов.Строки;
	КонецЕсли;
	
	КолСтрок = Узел.Количество();
	Для Сч = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок - Сч;
		Стр = Узел.Получить(ТекИнд);
		УдалитьПустыеГруппыВОтфильтрованномДереве(Стр.Строки);
		Если Стр.ЭтоГруппа = Истина И Стр.Строки.Количество() = 0 Тогда
			Узел.Удалить(Стр);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет дерево отчетов.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьИзСправочникаРегламентированныеОтчеты(ОбновлятьИзИБ = Истина)
	
	Если ОбновлятьИзИБ Тогда
		СписокНеотображаемыхВидовОтчетов = Новый СписокЗначений;
		СписокНеотображаемыхВидовОтчетов.Добавить("СведенияОДоходахФизлиц");
		СписокНеотображаемыхВидовОтчетов.Добавить("РегламентированнаяФормаКарточкаПоЕСН");
		СписокНеотображаемыхВидовОтчетов.Добавить("РегламентированнаяФормаКарточкаПоОПС");
		СписокНеотображаемыхВидовОтчетов.Добавить("ПередачаСЗВ4вПФР");
		СписокНеотображаемыхВидовОтчетов.Добавить("СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК");
		СписокНеотображаемыхВидовОтчетов.Добавить("ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства");
		СписокНеотображаемыхВидовОтчетов.Добавить("АнкетаЗастрахованногоЛица");
		СписокНеотображаемыхВидовОтчетов.Добавить("РегламентированныйОтчетМастерВыгрузкиРегламентированнойОтчетности");
		СписокНеотображаемыхВидовОтчетов.Добавить("РегламентированныйОтчетМенеджерЗвит1С");
		
		Если мИерархическийПросмотр Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
								  |	0 КАК Пометка,
			                      |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
			                      |	РегламентированныеОтчеты.Наименование,
			                      |	РегламентированныеОтчеты.ПометкаУдаления,
			                      |	РегламентированныеОтчеты.ЭтоГруппа,
			                      |	РегламентированныеОтчеты.ИсточникОтчета,
			                      |	РегламентированныеОтчеты.Описание,
			                      |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать КАК Внешний,
								  |	РегламентированныеОтчеты.Периоды КАК Периоды
			                      |ИЗ
			                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
			                      |ГДЕ
			                      |	РегламентированныеОтчеты.НеПоказыватьВСписке = ЛОЖЬ
								  | И ((РегламентированныеОтчеты.ЭтоГруппа = ИСТИНА) ИЛИ НЕ (РегламентированныеОтчеты.ИсточникОтчета В (&СписокНеотображаемыхВидовОтчетов)))
			                      |
			                      |УПОРЯДОЧИТЬ ПО
			                      |	РегламентированныеОтчеты.Код ИЕРАРХИЯ");
			Запрос.УстановитьПараметр("СписокНеотображаемыхВидовОтчетов", СписокНеотображаемыхВидовОтчетов);
			мПолноеДеревоОтчетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ
								  |	0 КАК Пометка,
			                      |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
			                      |	РегламентированныеОтчеты.Наименование,
			                      |	РегламентированныеОтчеты.ПометкаУдаления,
			                      |	РегламентированныеОтчеты.ЭтоГруппа,
			                      |	РегламентированныеОтчеты.ИсточникОтчета,
			                      |	РегламентированныеОтчеты.Описание,
			                      |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать КАК Внешний,
								  |	РегламентированныеОтчеты.Периоды КАК Периоды
			                      |ИЗ
			                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
			                      |ГДЕ
			                      |	РегламентированныеОтчеты.НеПоказыватьВСписке = ЛОЖЬ И РегламентированныеОтчеты.ЭтоГруппа = ЛОЖЬ
								  | И НЕ (РегламентированныеОтчеты.ИсточникОтчета В (&СписокНеотображаемыхВидовОтчетов))
			                      |
			                      |УПОРЯДОЧИТЬ ПО
			                      |	РегламентированныеОтчеты.Наименование ");
			Запрос.УстановитьПараметр("СписокНеотображаемыхВидовОтчетов", СписокНеотображаемыхВидовОтчетов);
			РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
			мПолноеДеревоОтчетов.Строки.Очистить();
			Для Каждого Стр Из РезультатЗапроса Цикл
				НовСтр = мПолноеДеревоОтчетов.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			КонецЦикла;
		КонецЕсли;
		ИзменитьФорматХраненияПериодовВДеревеОтчетов();
	КонецЕсли;
	СформироватьОтфильтрованноеДеревоОтчетов();
	УдалитьПустыеГруппыВОтфильтрованномДереве();
	ЭлементыФормы.ДеревоОтчетов.Колонки.Наименование.ОтображатьИерархию = мИерархическийПросмотр;
	
КонецПроцедуры

// Конвертирует информацию, содержащуюся в колонке Периоды дерева видов отчетов, из структуры в
// таблицу значений, для обеспечения возможности быстрого поиска видов отчетов, которые можно
// представлять за выбранный пользователем период.
// Процедура вызывается рекурсивно.
//
// Параметры:
//	Узел - текущий узел дерева. Используется только при рекурсивных вызовах.
//
Процедура ИзменитьФорматХраненияПериодовВДеревеОтчетов(Узел = Неопределено)
	
	Если Узел = Неопределено Тогда
		Узел = мПолноеДеревоОтчетов;
	Иначе
		Если ТипЗнч(Узел.Периоды) = Тип("ХранилищеЗначения") Тогда
			Периоды = Узел.Периоды.Получить();
			ТаблицаПериодов = Новый ТаблицаЗначений;
			ТаблицаПериодов.Колонки.Добавить("МесяцНач");
			ТаблицаПериодов.Колонки.Добавить("МесяцКон");
			Если ТипЗнч(Периоды) = Тип("Структура") Тогда
				Для Каждого Эл Из Периоды Цикл
					Ключ = Эл.Ключ;
					Значение = Эл.Значение;
					Если Ключ = "Месяц" Тогда
						Для Каждого Пер Из Значение Цикл
							НовСтр = ТаблицаПериодов.Добавить();
							НовСтр.МесяцНач = Пер;
							НовСтр.МесяцКон = Пер;
						КонецЦикла;
					ИначеЕсли Ключ = "МесяцНарастающимИтогом" Тогда
						Для Каждого Пер Из Значение Цикл
							НовСтр = ТаблицаПериодов.Добавить();
							НовСтр.МесяцНач = 1;
							НовСтр.МесяцКон = Пер;
						КонецЦикла;
					ИначеЕсли Ключ = "Квартал" Тогда
						Для Каждого Пер Из Значение Цикл
							НовСтр = ТаблицаПериодов.Добавить();
							НовСтр.МесяцНач = 3*(Пер - 1) + 1;
							НовСтр.МесяцКон = 3*(Пер - 1) + 3;
						КонецЦикла;
					ИначеЕсли Ключ = "КварталНарастающимИтогом" Тогда
						Для Каждого Пер Из Значение Цикл
							НовСтр = ТаблицаПериодов.Добавить();
							НовСтр.МесяцНач = 1;
							НовСтр.МесяцКон = 3*(Пер - 1) + 3;
						КонецЦикла;
					ИначеЕсли Ключ = "Полугодие" Тогда
						Для Каждого Пер Из Значение Цикл
							НовСтр = ТаблицаПериодов.Добавить();
							НовСтр.МесяцНач = 6*(Пер - 1) + 1;
							НовСтр.МесяцКон = 6*(Пер - 1) + 6;
						КонецЦикла;
					ИначеЕсли Ключ = "Год" Тогда
						Для Каждого Пер Из Значение Цикл
							НовСтр = ТаблицаПериодов.Добавить();
							НовСтр.МесяцНач = 1;
							НовСтр.МесяцКон = 12;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Узел.Периоды = Новый ХранилищеЗначения(ТаблицаПериодов);
		КонецЕсли;
	КонецЕсли;
		
	Для Каждого Стр Из Узел.Строки Цикл
		ИзменитьФорматХраненияПериодовВДеревеОтчетов(Стр);	
	КонецЦикла;
	
КонецПроцедуры

// Восстанавливает сохраненные значения ссылок на отчеты, помеченные в дереве отчетов.
//
// Параметры:
//	Нет.
//
Процедура ВосстановитьСписокВыбранныхВидовОтчетов()
	
	СписокВыбранныхВидовОтчетов = ВосстановитьЗначение("ФормаРеглИФинОтчетности_СписокВидовОтчетов");
	ИзменитьПометкуПодчиненных(ДеревоОтчетов, Истина, СписокВыбранныхВидовОтчетов, Истина);
	ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Истина, СписокВыбранныхВидовОтчетов, Истина);
	
КонецПроцедуры

// Присваивает переменной ДокументОтборСтрока значение пользовательского представления документа
// РегламентированныйОтчет, по которому осуществляется отбор в журнале выгрузки.
// Представление ДокументОтборСтрока отображается в поле ввода ДокументОтборСтрока на форме.
//
// Параметры:
//	Нет.
//
Процедура УстановитьПредставлениеДокументаОтбора()
	
	Если НЕ ЗначениеЗаполнено(мДокументОтбор) Тогда
		ДокументОтборСтрока = "";
	Иначе
		ДокументОтборСтрока = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мДокументОтбор);
	КонецЕсли;
	
КонецПроцедуры

// Регулирует доступности элементов управления, связанных со значением документа отбора.
//
// Параметры:
//	Нет.
//
Процедура УстановитьПометкуКнопкиОтбиратьПоОтчету()
	
	ОтборПоОтчету = мОтбиратьПоДокументуОтбора;
	ЭлементыФормы.ДокументОтборСтрока.Доступность = мОтбиратьПоДокументуОтбора;
	ЭлементыФормы.КнопкаОчиститьДокументОтбор.Доступность = мОтбиратьПоДокументуОтбора;
	ЭлементыФормы.КнопкаОткрытьДокументОтбор.Доступность = ЗначениеЗаполнено(мДокументОтбор);
	ЭлементыФормы.ФлажокОтборПоОтчету.Доступность = ЗначениеЗаполнено(мДокументОтбор);
	
КонецПроцедуры

// Восстанавливает значения отбора, сохраненные в момент последнего закрытия формы.
//
// Параметры:
//	Нет.
//
Процедура ВосстановитьПараметрыОтбора()
	
	Организация = ВосстановитьЗначение("ФормаРеглИФинОтчетности_Организация");
	КодИФНС = ВосстановитьЗначение("ФормаРеглИФинОтчетности_КодИФНС");
	ОтборКодИФНС = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ОтборКодИФНС");
	ОтборПериод = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ОтборПериод");
	Периодичность = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ПолеВыбораПериодичность");
	Если Периодичность = Неопределено Тогда
		Периодичность = "По итогам";
	КонецЕсли;
	ДатаНачалаПериодаОтчета = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ДатаНачалаПериодаОтчета");
	ДатаКонцаПериодаОтчета = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ДатаКонцаПериодаОтчета");
	мДокументОтбор = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ДокументОтбор");
	УстановитьПредставлениеДокументаОтбора();
	мОтбиратьПоДокументуОтбора = ВосстановитьЗначение("ФормаРеглИФинОтчетности_мОтбиратьПоДокументуОтбора");
	Если мОтбиратьПоДокументуОтбора = Неопределено Тогда
		мОтбиратьПоДокументуОтбора = Ложь;
	КонецЕсли;
	УстановитьПометкуКнопкиОтбиратьПоОтчету();
	
	мИерархическийПросмотр = ВосстановитьЗначение("ФормаРеглИФинОтчетности_мИерархическийПросмотр");
	Если мИерархическийПросмотр = Неопределено Тогда
		мИерархическийПросмотр = Истина;
	КонецЕсли;
	Элементыформы.КоманднаяПанельДеревоОтчетов.Кнопки.ИерархическийПросмотр.Пометка = мИерархическийПросмотр;
	
	ТекСтраница = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ТекущаяСтраницаОсновнойПанели");
	Если ТекСтраница <> Неопределено И ЭлементыФормы.ОсновнаяПанель.Страницы.Найти(ТекСтраница) <> Неопределено Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекСтраница];
	КонецЕсли;
	
	мОтображатьПустые = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ПоказыватьПустые");
	Если мОтображатьПустые = Неопределено Тогда
		мОтображатьПустые = Ложь;
	КонецЕсли;
	
	мПечататьСДвухмернымШтрихКодом = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ПечататьСДвухмернымШтрихКодом");
	Если мПечататьСДвухмернымШтрихКодом = Неопределено Тогда
		мПечататьСДвухмернымШтрихКодом = Ложь;
	КонецЕсли;
	
	мФильтроватьВидыОтчетовПоПериоду = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ФильтроватьВидыОтчетовПоПериоду");
	Если мФильтроватьВидыОтчетовПоПериоду = Неопределено Тогда
		мФильтроватьВидыОтчетовПоПериоду = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Изменяет свойства элементов формы в зависимости от настроек отбора по периоду.
//
// Параметры:
//	Нет.
//
Процедура УправлениеЭлементамиОтбораПоПериоду()
	
	ЭлементыФормы.ПанельПериодОсновная.Доступность = ОтборПериод;
	ЭлементыФормы.Периодичность.Доступность = ОтборПериод;
	ЭлементыФормы.Периодичность2.Доступность = ОтборПериод;
	
	Если Периодичность = "Произвольный" Тогда
		ЭлементыФормы.ПанельПериод.ТекущаяСтраница = ЭлементыФормы.ПанельПериод.Страницы.ПроизвольныйПериод;
	Иначе
		ЭлементыФормы.ПанельПериод.ТекущаяСтраница = ЭлементыФормы.ПанельПериод.Страницы.СтандартныйПериод;
	КонецЕсли;
	
КонецПроцедуры

//////// Изменяет свойства элементов формы в зависимости от настроек отбора по коду ИФНС.
////////
//////// Параметры:
////////	Нет.
////////
//////Процедура УправлениеЭлементамиОтбораПоКодуИФНС()
//////	
//////	ЭлементыФормы.КодИФНС.Доступность = ОтборКодИФНС;
//////	
//////КонецПроцедуры

// Открывает форму внутреннего или внешнего отчета, табличный или текстовый документ 
// по указанному в реквизите ИсточникОтчета элемента справочника имени внутреннего или 
// файла внешнего отчета, текстового или табличного документа.
//
// Параметры:
//  ИсточникОтчета - строка - имя файла, указанное в реквизите элемента.
//
Процедура ОткрытьФормуОтчета(Отчет)
	
	ИсточникОтчета = Отчет.ИсточникОтчета;
	
	ПравоДоступаКОтчету = РегламентированнаяОтчетность.ПравоДоступаКРегламентированномуОтчету(ИсточникОтчета);
	Если ПравоДоступаКОтчету = Ложь Тогда
		Предупреждение(НСтр("ru='Недостаточно прав!';uk='Недостатньо прав!'"));
		Возврат;
	ИначеЕсли ПравоДоступаКОтчету = Неопределено Тогда
		Предупреждение(НСтр("ru='Отчет не найден!';uk='Звіт не знайдений!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ЭтоВнешнийОтчет(ИсточникОтчета) И Метаданные.Документы.Найти(ИсточникОтчета) <> Неопределено Тогда // это внутренний отчет-документ
			
		ВнутреннийОтчет = Документы[ИсточникОтчета];
		ВыбФормаОтчета  = ВнутреннийОтчет.ПолучитьФорму("ОсновнаяФорма");
		ВыбФормаОтчета.РежимВыбора = Ложь;
		ВыбФормаОтчета.Открыть();
		Возврат;
			
	КонецЕсли;
	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета);
	Если ТекОтчет = Неопределено Тогда
		Сообщить(НСтр("ru='Не удалось открыть отчет!';uk='Не вдалося відкрити звіт!'"), СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ТекФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИсточникОтчета);
	Если ТекФорма = Неопределено Тогда
		Сообщить(НСтр("ru='Не удалось открыть отчет!';uk='Не вдалося відкрити звіт!'"), СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Попытка
			ТекФорма.Организация = Организация.Получить(0).Значение;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ОтборПериод И Периодичность = "По итогам" Тогда
		
		Периоды = Отчет.Ссылка.Периоды.Получить();
		МесяцКонцаПериодаОтчета = Месяц(ДатаКонцаПериодаОтчета);
		КоличествоВозможныхПериодичностей = 0;
		
		Если Периоды <> Неопределено Тогда
			Для Каждого Стр Из Периоды Цикл
				Для Каждого Эл Из Стр.Значение Цикл
					Если Лев(Стр.Ключ, 7) = "Квартал" Тогда
						МесяцКонцаПериода = 3*Эл;
					ИначеЕсли Стр.Ключ = "Полугодие" Тогда
						МесяцКонцаПериода = 6*Эл;
					ИначеЕсли Стр.Ключ = "Год" Тогда
						МесяцКонцаПериода = 12;
					Иначе
						МесяцКонцаПериода = Эл;
					КонецЕсли;
					Если МесяцКонцаПериодаОтчета = МесяцКонцаПериода Тогда
						КоличествоВозможныхПериодичностей = КоличествоВозможныхПериодичностей + 1;
						КлючПериодичности = Стр.Ключ;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если КоличествоВозможныхПериодичностей = 0 Тогда
			
		ИначеЕсли КоличествоВозможныхПериодичностей = 1 Тогда
			
			Если КлючПериодичности = "Месяц" Тогда
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоМесяца(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
			ИначеЕсли КлючПериодичности = "МесяцНарастающимИтогом" Тогда
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
			ИначеЕсли КлючПериодичности = "Квартал" Тогда
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоКвартала(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
			ИначеЕсли КлючПериодичности = "КварталНарастающимИтогом" Тогда	
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
			ИначеЕсли КлючПериодичности = "Полугодие" Тогда
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоКвартала(ДобавитьМесяц(ДатаКонцаПериодаОтчета, -3));
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
			Иначе
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Год;
			КонецЕсли;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	РегламентированныйОтчет.Периодичность
			               |ИЗ
			               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
			               |ГДЕ
			               |	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета";
			Если ЗначениеЗаполнено(Организация) Тогда
				Запрос.Текст = Запрос.Текст + "
				               |	И РегламентированныйОтчет.Организация в (&Организация)";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
						   |УПОРЯДОЧИТЬ ПО
						   |	РегламентированныйОтчет.МоментВремени УБЫВ";
			Запрос.УстановитьПараметр("ИсточникОтчета", Отчет.ИсточникОтчета);
			Запрос.УстановитьПараметр("Организация", Организация);
			ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
			Если ТаблицаРезультат.Количество() = 0 Тогда
				
				Если КлючПериодичности = "Месяц" Тогда
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоМесяца(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
				ИначеЕсли КлючПериодичности = "МесяцНарастающимИтогом" Тогда
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
				ИначеЕсли КлючПериодичности = "Квартал" Тогда
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоКвартала(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
				ИначеЕсли КлючПериодичности = "КварталНарастающимИтогом" Тогда	
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
				ИначеЕсли КлючПериодичности = "Полугодие" Тогда
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоКвартала(ДобавитьМесяц(ДатаКонцаПериодаОтчета, -3));
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
				Иначе
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Год;
				КонецЕсли;
				
			Иначе
				
				ПериодичностьДляПодстановки = ТаблицаРезультат.Получить(0).Получить(0);
				Если ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц Тогда
					ДатаКонцаДляПодстановки = КонецМесяца(ДатаКонцаПериодаОтчета);
					ДатаНачалаДляПодстановки = НачалоМесяца(ДатаКонцаДляПодстановки);
				ИначеЕсли ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал Тогда
					ДатаКонцаДляПодстановки = КонецКвартала(ДатаКонцаПериодаОтчета);
					ДатаНачалаДляПодстановки = НачалоКвартала(ДатаКонцаДляПодстановки);
				ИначеЕсли ПериодичностьДляПодстановки = Перечисления.Периодичность.Год Тогда
					ДатаКонцаДляПодстановки = КонецГода(ДатаКонцаПериодаОтчета);
					ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаДляПодстановки);
				Иначе
					Если КлючПериодичности = "Месяц" Тогда
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоМесяца(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
					ИначеЕсли КлючПериодичности = "МесяцНарастающимИтогом" Тогда
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
					ИначеЕсли КлючПериодичности = "Квартал" Тогда
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоКвартала(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
					ИначеЕсли КлючПериодичности = "КварталНарастающимИтогом" Тогда	
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
					ИначеЕсли КлючПериодичности = "Полугодие" Тогда
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоКвартала(ДобавитьМесяц(ДатаКонцаПериодаОтчета, -3));
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
					Иначе
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Год;
					КонецЕсли;
				КонецЕсли;
					
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоВозможныхПериодичностей <> 0 Тогда
			Попытка
				ТекФорма.мДатаНачалаПериодаОтчета = НачалоДня(ДатаНачалаДляПодстановки);
				ТекФорма.мДатаКонцаПериодаОтчета = КонецДня(ДатаКонцаДляПодстановки);
			Исключение
			КонецПопытки;
			Если Периодичность <> "Произвольный" Тогда
				Попытка
					ТекФорма.мПериодичность = ПериодичностьДляПодстановки;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекФорма.РежимВыбора = Ложь;
	ТекФорма.Открыть();
	
КонецПроцедуры

// Возвращает список полей ИсточникОтчета элементов справочника РегламентированныеОтчеты, 
// соответствующих отмеченным строкам в табличном поле ДеревоОтчетов.
// Функция вызывается рекурсивно.
//
// Параметры:
//	УзелДерева - текущая СтрокаДереваЗначений. При вызове извне функции значение должно быть не заполнено.
//	СписокВидов - служебная переменная, используется только при рекурсивных вызовах.
//
// Возвращаемое значение:
//	СписокЗначений - список полей ИсточникОтчета для элементов, соответствующих отмеченным строкам
//						табличного поля ДеревоОтчетов.
//
Функция СписокВыбранныхВидовОтчетов(УзелДерева = Неопределено, СписокВидов = Неопределено) Экспорт
	
	Если УзелДерева = Неопределено Тогда
		ПервыйЗаход = Истина;
		УзелДерева = ДеревоОтчетов;
		СписокВидов = Новый СписокЗначений;
	Иначе
		ПервыйЗаход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйЗаход И СписокВидов.НайтиПоЗначению(УзелДерева.ИсточникОтчета) = Неопределено И УзелДерева.Пометка = 1 И НЕ УзелДерева.ЭтоГруппа Тогда
		СписокВидов.Добавить(УзелДерева.ИсточникОтчета);
	КонецЕсли;
	
	Для Каждого Стр Из УзелДерева.Строки Цикл
		СписокВыбранныхВидовОтчетов(Стр, СписокВидов);
	КонецЦикла;
	
	Если ПервыйЗаход Тогда
		Возврат СписокВидов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает список ссылок ДокументСсылка.ВыгрузкаРегламентированныхОтчетов, соответствующих
// отмеченным в табличном поле ДеревоОтчетов отчетам. Список необходим для последующей установки
// отбора для элемента формы ЖурналВыгрузки.
//
// Параметры:
//	СписокВидовОтчетов - СписокЗначений, содержащий строковые идентификаторы видов регламентированных отчетов,
//							по которым следует отбирать документы ВыгрузкаРегламентированныхОтчетов.
//
// Возвращаемое значение:
//	СписокЗначений - список ссылок на документы ДокументСсылка.ВыгрузкаРегламентированныхОтчетов.
//
Функция СформироватьСписокВыгрузок(СписокВидовОтчетов)
	
	Если ТипЗнч(СписокВидовОтчетов) = Тип("СписокЗначений") Тогда
	
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
								|	ВыгрузкаРегламентированныхОтчетовОсновная.Ссылка
								|ИЗ
								|	Документ.ВыгрузкаРегламентированныхОтчетов.Основная КАК ВыгрузкаРегламентированныхОтчетовОсновная
								|ГДЕ
								|	ВыгрузкаРегламентированныхОтчетовОсновная.Основание В
								|			(ВЫБРАТЬ
								|				РегламентированныйОтчет.Ссылка
								|			ИЗ
								|				Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
								|			ГДЕ
								|				РегламентированныйОтчет.ИсточникОтчета В (&ИсточникОтчета))");
							  
		Запрос.УстановитьПараметр("ИсточникОтчета", СписокВидовОтчетов.ВыгрузитьЗначения());
		
	Иначе
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		                      |	ВыгрузкаРегламентированныхОтчетов.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Документ.ВыгрузкаРегламентированныхОтчетов КАК ВыгрузкаРегламентированныхОтчетов
		                      |ГДЕ
		                      |	ВыгрузкаРегламентированныхОтчетов.Основная.Основание = &ИсточникОтчета");
							  
		Запрос.УстановитьПараметр("ИсточникОтчета", СписокВидовОтчетов);
		
	КонецЕсли;
	
	Если мОтображатьПустые = Истина Тогда
		Запрос.Текст = Запрос.Текст + "
										|
										|ОБЪЕДИНИТЬ
										|
										|ВЫБРАТЬ
										|	Док.Ссылка КАК Ссылка
										|ИЗ
										|	Документ.ВыгрузкаРегламентированныхОтчетов КАК Док
										|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыгрузкаРегламентированныхОтчетов.Основная КАК ТЧ
										|		ПО ТЧ.Ссылка = Док.Ссылка
										|ГДЕ
										|	ЕСТЬNULL(ТЧ.Ссылка, ИСТИНА) = ИСТИНА";
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	Результат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат Результат;
	
КонецФункции

// Устанавливает отборы в табличных полях ЖурналОтчетов и ЖурналВыгрузки в соответствии
// со значениями, установленными в элементах формы, предназначенных для регулирования параметров отбора.
//
// Параметры:
//	Нет.
//
Процедура УстановитьОтборы() Экспорт
	
	СписокВидовОтчетов = СписокВыбранныхВидовОтчетов();
	
	Если ДатаНачалаПериодаОтчета > КонецДня(ДатаКонцаПериодаОтчета) Тогда
		ДатаКонцаПериодаОтчета = ДатаНачалаПериодаОтчета;
	КонецЕсли;
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ЖурналОтчетов Тогда
		
		ЖурналОтчетов.Отбор.ИсточникОтчета.Использование = Истина;
		ЖурналОтчетов.Отбор.ИсточникОтчета.ВидСравнения = ВидСравнения.ВСписке;
		ЖурналОтчетов.Отбор.ИсточникОтчета.Значение = СписокВидовОтчетов;
		
		Если Организация.Количество() = 0 Тогда
			ЖурналОтчетов.Отбор.Организация.Использование = Ложь;
		Иначе
			ЖурналОтчетов.Отбор.Организация.Использование = Истина;
			ЖурналОтчетов.Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке;
			ЖурналОтчетов.Отбор.Организация.Значение = Организация;
		КонецЕсли;
		
		Если НЕ ОтборПериод Тогда
			ЖурналОтчетов.Отбор.ДатаНачала.Использование = Ложь;
			ЖурналОтчетов.Отбор.ДатаОкончания.Использование = Ложь;
		Иначе                            
			Если Периодичность = "Произвольный" Тогда
				ЖурналОтчетов.Отбор.ДатаНачала.Использование = Истина;
				ЖурналОтчетов.Отбор.ДатаОкончания.Использование = Истина;
				ЖурналОтчетов.Отбор.ДатаНачала.ВидСравнения = ВидСравнения.БольшеИлиРавно;
				ЖурналОтчетов.Отбор.ДатаНачала.Значение = ДатаНачалаПериодаОтчета;
				ЖурналОтчетов.Отбор.ДатаОкончания.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
				ЖурналОтчетов.Отбор.ДатаОкончания.Значение = КонецДня(ДатаКонцаПериодаОтчета);
			Иначе
				ЖурналОтчетов.Отбор.ДатаНачала.Использование = Ложь;
				ЖурналОтчетов.Отбор.ДатаОкончания.Использование = Истина;
				ЖурналОтчетов.Отбор.ДатаОкончания.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
				ЖурналОтчетов.Отбор.ДатаОкончания.ЗначениеС = НачалоМесяца(ДатаКонцаПериодаОтчета);
				ЖурналОтчетов.Отбор.ДатаОкончания.ЗначениеПо = КонецДня(ДатаКонцаПериодаОтчета);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если Организация.Количество() = 0 Тогда
			ЖурналВыгрузки.Отбор.Организация.Использование = Ложь;
		Иначе
			ЖурналВыгрузки.Отбор.Организация.Использование = Истина;
			ЖурналВыгрузки.Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке;
			ЖурналВыгрузки.Отбор.Организация.Значение = Организация;
		КонецЕсли;
		
		ЖурналВыгрузки.Отбор.Ссылка.Использование = Истина;
		Если НЕ (мОтбиратьПоДокументуОтбора И ЗначениеЗаполнено(мДокументОтбор)) Тогда
			ЖурналВыгрузки.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
			ЖурналВыгрузки.Отбор.Ссылка.Значение = СформироватьСписокВыгрузок(СписокВидовОтчетов);
		Иначе
			ЖурналВыгрузки.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
			ЖурналВыгрузки.Отбор.Ссылка.Значение = СформироватьСписокВыгрузок(мДокументОтбор);
		КонецЕсли;
		
		Если НЕ ОтборПериод Тогда
			ЖурналВыгрузки.Отбор.ПериодС.Использование = Ложь;
			ЖурналВыгрузки.Отбор.ПериодПо.Использование = Ложь;
		Иначе                            
			Если Периодичность = "Произвольный" Тогда
				ЖурналВыгрузки.Отбор.ПериодС.Использование = Истина;
				ЖурналВыгрузки.Отбор.ПериодПо.Использование = Истина;
				ЖурналВыгрузки.Отбор.ПериодС.ВидСравнения = ВидСравнения.БольшеИлиРавно;
				ЖурналВыгрузки.Отбор.ПериодС.Значение = ДатаНачалаПериодаОтчета;
				ЖурналВыгрузки.Отбор.ПериодПо.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
				ЖурналВыгрузки.Отбор.ПериодПо.Значение = ДатаКонцаПериодаОтчета;
			Иначе
				ЖурналВыгрузки.Отбор.ПериодС.Использование = Ложь;
				ЖурналВыгрузки.Отбор.ПериодПо.Использование = Истина;
				ЖурналВыгрузки.Отбор.ПериодПо.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
				ЖурналВыгрузки.Отбор.ПериодПо.ЗначениеС = НачалоДня(ДатаКонцаПериодаОтчета);
				ЖурналВыгрузки.Отбор.ПериодПо.ЗначениеПо = КонецДня(ДатаКонцаПериодаОтчета);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает/снимает пометки в строках табличного поля ДеревоОтчетов, подчиненных заданной.
// Процедура вызывается рекурсивно.
// 
// Параметры:
//	Узел - ДеревоЗначений или СтрокаДереваЗначений, начиная с которой следует обрабатывать дерево.
//	Пометка - значение пометки, которое следует установить.
//	СписокВыбранных - СписокЗначений, содержащий ссылки вида СправочникСсылка.РегламентированныеОтчеты.
//						Если параметр задан, то пометка меняется только у тех строк, для которых свойство Ссылка
//						находится в указанном списке.
//
Процедура ИзменитьПометкуПодчиненных(Узел, Пометка = Неопределено, СписокВыбранных = Неопределено, ОбновлятьПометкуРодительских = Ложь, Дерево = Неопределено)
	
	Если Пометка = Неопределено Тогда
		Пометка = Узел.Пометка;
	КонецЕсли;
	
	Если Дерево = Неопределено Тогда
		Дерево = Узел;
	КонецЕсли;
	
	Если СписокВыбранных = Неопределено Тогда
		Для Каждого Стр1 Из Узел.Строки Цикл
			Для Каждого Стр2 Из Стр1.Строки Цикл
				Стр2.Пометка = Пометка;
			КонецЦикла;
			Стр1.Пометка = Пометка;
		КонецЦикла;
	Иначе
		Для Каждого Стр1 Из Дерево.Строки Цикл
			Для Каждого Стр2 Из Стр1.Строки Цикл
				Стр2.Пометка = Число(СписокВыбранных.НайтиПоЗначению(Стр2.Ссылка) <> Неопределено);
			КонецЦикла;
			Если Стр1.ЭтоГруппа <> Истина Тогда
				Стр1.Пометка = Число(СписокВыбранных.НайтиПоЗначению(Стр1.Ссылка) <> Неопределено);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр1 Из Дерево.Строки Цикл
		Если Стр1.ЭтоГруппа <> Истина Тогда
			Продолжить;
		КонецЕсли;
		СуммаПометок = 0;
		Для Каждого Стр2 Из Стр1.Строки Цикл
			 СуммаПометок = СуммаПометок + Число(Стр2.Пометка);
		КонецЦикла;
		Если СуммаПометок = Стр1.Строки.Количество() Тогда
			Стр1.Пометка = 1;
		ИначеЕсли СуммаПометок = 0 Тогда
			Стр1.Пометка = 0;
		Иначе
			Стр1.Пометка = 2;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Сканирует все строки дерева значений, подчиненные заданной, проверяет
// у них свойство Пометка на равенство заданному значению Пометка.
// Функция вызывается рекурсивно.
//
// Параметры:
//	Узел - исходная строка для сканирования.
//	Пометка - Булево, значение пометки.
//	ПервыйПроход - признак первого захода в процедуру (используется только при рекурсивных вызовах).
//
// Возвращаемое значение:
//	Булево - признак того, что у всех строк в дереве значений, подчиненных заданной, пометка = Пометка.
//
Функция УВсехПодчиненныхПометкаРавна(Узел, Пометка, ПервыйПроход = Истина)
	
	Если НЕ ПервыйПроход И Узел.Пометка <> Пометка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ УВсехПодчиненныхПометкаРавна(Стр, Пометка, Ложь) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Выводит строковое представление периода в заголовок надписи НадписьПериодаСоставленияОтчета.
//
// Параметры:
//	Нет.
//
Процедура ПоказатьПериод()

	Год = Год(ДатаКонцаПериодаОтчета);
	МесяцМинус1 = Месяц(ДатаКонцаПериодаОтчета) - 1;

КонецПроцедуры

// Возвращает список ссылок СправочникСсылка.РегламентированныеОтчеты, соответствующих выбранным
// строкам в табличном поле ДеревоОтчетов.
// Функция вызывается рекурсивно.
//
// УзелДерева - текущая строка дерева значений. Используется только при рекурсивных вызовах.
// СписокВидов - текущий список ссылок. Используется только при рекурсивных вызовах.
//
// Возвращаемое значение:
//	СписокЗначений - список ссылок, соответствующих выбранным строкам в табличном поле ДеревоОтчетов.
//
Функция СписокВыбранныхСсылокВДеревеОтчетов(УзелДерева = Неопределено, СписокВидов = Неопределено)
	
	Если УзелДерева = Неопределено Тогда
		ПервыйЗаход = Истина;
		УзелДерева = мПолноеДеревоОтчетов;
		СписокВидов = Новый СписокЗначений;
	Иначе
		ПервыйЗаход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйЗаход И СписокВидов.НайтиПоЗначению(УзелДерева.Ссылка) = Неопределено И УзелДерева.Пометка = 1 Тогда
		СписокВидов.Добавить(УзелДерева.Ссылка);
	КонецЕсли;
	
	Для Каждого Стр Из УзелДерева.Строки Цикл
		СписокВыбранныхСсылокВДеревеОтчетов(Стр, СписокВидов);
	КонецЦикла;
	
	Если ПервыйЗаход Тогда
		Возврат СписокВидов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает признаки раскрытия узлов в табличном поле ДеревоОтчетов.
// Функция вызывается рекурсивно.
//
// Параметры:
//	УзелДерева - начальный узел, с которого следует начать сканирование дерева.
//	СписокУзлов - служебная переменная. Используется только при рекурсивных вызовах.
//
// Возвращаемое значение:
//	ТаблицаЗначений - соответствие узлов и признаков их раскрытия.
//
Функция СписокРаскрытыхВДеревеОтчетов(УзелДерева = Неопределено, СписокУзлов = Неопределено)
	
	Если УзелДерева = Неопределено Тогда
		ПервыйЗаход = Истина;
		УзелДерева = ДеревоОтчетов;
		СписокУзлов = Новый ТаблицаЗначений;
		СписокУзлов.Колонки.Добавить("Узел");
		СписокУзлов.Колонки.Добавить("Раскрыт");
	Иначе
		ПервыйЗаход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйЗаход И СписокУзлов.Найти(УзелДерева.Ссылка, "Узел") = Неопределено И УзелДерева.Строки.Количество() <> 0 Тогда
		НовСтр = СписокУзлов.Добавить();
		НовСтр.Узел = УзелДерева.Ссылка;
		НовСтр.Раскрыт = ЭлементыФормы.ДеревоОтчетов.Развернут(УзелДерева);
	КонецЕсли;
	
	Для Каждого Стр Из УзелДерева.Строки Цикл
		СписокРаскрытыхВДеревеОтчетов(Стр, СписокУзлов);
	КонецЦикла;
	
	Если ПервыйЗаход Тогда
		Возврат СписокУзлов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Раскрывает или сворачивает узлы в строках дерева в табличном поле ДеревоОтчетов
// в соответствии с признаками перечисленными в таблице-параметре.
// Процедура вызывается рекурсивно.
//
// Параметры:
//	Узел - исходный узел дерева.
//	СписокРаскрытых - таблица, задающая соответствие между ссылками (узлами) и признаками их раскрытия.
//
Процедура УстановитьРаскрытияВСпискеОтчетов(Узел, СписокРаскрытых)
	
	Если Узел <> ДеревоОтчетов И Узел.Строки.Количество() <> 0 Тогда
		РезультатПоиска = СписокРаскрытых.Найти(Узел.Ссылка, "Узел");
		Если РезультатПоиска = Неопределено Тогда
			ЭлементыФормы.ДеревоОтчетов.Развернуть(Узел);
		Иначе
			Если РезультатПоиска.Раскрыт Тогда
				ЭлементыФормы.ДеревоОтчетов.Развернуть(Узел);
			Иначе
				ЭлементыФормы.ДеревоОтчетов.Свернуть(Узел);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		УстановитьРаскрытияВСпискеОтчетов(Стр, СписокРаскрытых)
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает активной строку дерева ДеревоОтчетов, соответствующую
// указанной ссылке.
// Процедура вызывается рекурсивно.
//
// Параметры:
//	Ссылка - СправочникСсылка.РегламентированныеОтчеты, строку дерева, соответствующую которой,
//				следует сделать активной.
//	Узел - узел дерева ДеревоОтчетов, начиная с которого следует начать сканирование дерева для поиска
//				указанной ссылки.
//
Процедура УстановитьТекущуюСсылку(Ссылка, Узел = Неопределено)
	
	Если Узел = Неопределено Тогда
		ПервыйПроход = Истина;
		Узел = ДеревоОтчетов;
	Иначе
		ПервыйПроход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйПроход И Узел.Ссылка = Ссылка Тогда
		ЭлементыФормы.ДеревоОтчетов.ТекущаяСтрока = Узел;
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		УстановитьТекущуюСсылку(Ссылка, Стр);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает подсказки у элементов управления периодом в зависимости от значений,
// установленных для этих элементов упрвления.
//
// Параметры:
//	Нет.
//
Процедура ОбновитьПодсказкиЭлементовУправленияПериодом()
	
	Если НЕ ОтборПериод Тогда
		Подсказка = НСтр("ru='Отбор по периоду не установлен';uk='Відбір по періоду не встановлений'");
	Иначе
		Если Периодичность = "По итогам" Тогда
			Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчеты, представляемые по истечении %1 %2 года';uk='Звіти, що подаються після закінчення %1 %2 року'"), МассивНаименованийПравыхГраницПериода[Месяц(ДатаКонцаПериодаОтчета) - 1], Формат(Год, "ЧГ=0"));
		Иначе
			Подсказка = НСтр("ru='Отчеты за период ';uk='Звіти за період '") + ПредставлениеПериода(ДатаНачалаПериодаОтчета, КонецДня(ДатаКонцаПериодаОтчета), "ФП = Истина");
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.ОтборПериод.Подсказка = Подсказка;
	ЭлементыФормы.Периодичность.Подсказка = Подсказка;
	ЭлементыФормы.Периодичность2.Подсказка = Подсказка;
	ЭлементыФормы.ПанельПериод.Подсказка = Подсказка;
	ЭлементыФормы.ПолосаРегулированияПериода.Подсказка = Подсказка;
	ЭлементыФормы.Год.Подсказка = Подсказка;
	ЭлементыФормы.КнопкаНастройкаПериода.Подсказка = Подсказка;
	ЭлементыФормы.ДатаКонцаПериодаОтчета.Подсказка = Подсказка;
	ЭлементыФормы.НадписьПолеВводаС.Подсказка = Подсказка;
	ЭлементыФормы.ДатаНачалаПериодаОтчета.Подсказка = Подсказка;
	ЭлементыФормы.НадписьПолеВводаПо.Подсказка = Подсказка;
	
КонецПроцедуры

// Обновляет дерево отчетов из справочника РегламентированныеОтчеты.
//
// Параметры:
//	Нет.
//
Процедура ОбновитьДеревоОтчетов(ОбновлятьИзИБ = Истина)
	Перем ТекущийОтчет;
	
	Если ОбновлятьИзИБ ИЛИ мФильтроватьВидыОтчетовПоПериоду Тогда 
		Если ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные <> Неопределено Тогда
			ТекущийОтчет = ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные.Ссылка;
		КонецЕсли;
		СписокОтчетов = СписокВыбранныхСсылокВДеревеОтчетов();
		СписокРаскрытых = СписокРаскрытыхВДеревеОтчетов();
		ЗаполнитьИзСправочникаРегламентированныеОтчеты(ОбновлятьИзИБ);
		Если ОбновлятьИзИБ Тогда
			ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Истина, СписокОтчетов, Истина);
		КонецЕсли;
		ИзменитьПометкуПодчиненных(ДеревоОтчетов, Истина, СписокОтчетов, Истина);
		Если ТекущийОтчет <> Неопределено Тогда
			УстановитьТекущуюСсылку(ТекущийОтчет);
		КонецЕсли;
		УстановитьРаскрытияВСпискеОтчетов(ДеревоОтчетов, СписокРаскрытых);
	КонецЕсли;
	УстановитьОтборы();
	ЭлементыФормы.КоманднаяПанельДеревоОтчетов.Кнопки.РазвернутьВсе.Доступность = мИерархическийПросмотр;
	ЭлементыФормы.КоманднаяПанельДеревоОтчетов.Кнопки.СвернутьВсе.Доступность = мИерархическийПросмотр;
	ОбновитьПодсказкиЭлементовУправленияПериодом();
	
КонецПроцедуры

// Открывает форму с табличным полем списка справочника "Регламентированные отчеты" для выбора 
// вида отчета и создает новый отчет указанного пользователей вида.
//
// Параметры:
//	Нет.
//
Процедура ДобавлениеОтчетаВЖурналеОтчетов()
	
	ФормаВыбораОтчета= Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму("ФормаВыбораВидаОтчета", ЭтаФорма);
	ФормаВыбораОтчета.РежимВыбора = Истина;
	ФормаВыбораОтчета.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбораОтчета.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = мИерархическийПросмотр;
	ВыбранныйВидОтчета = ФормаВыбораОтчета.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВыбранныйВидОтчета) Тогда
		ОткрытьФормуОтчета(ВыбранныйВидОтчета);
	КонецЕсли;
	
КонецПроцедуры

// Регулирует цвет текста у надписей - названий месяцев/кварталов.
//
// Параметры:
//	Нет.
//
Процедура УправлениеНадписямиМесяцев()
	
	Месяц = Месяц(ДатаКонцаПериодаОтчета);
	Для Сч = 0 По 11 Цикл
		Если ОтборПериод И Сч = Месяц - 1 Тогда
			ЭлементыФормы["НадписьМесяц" + (Сч + 1)].ЦветТекста = Новый Цвет(0, 0, 255);
		Иначе
			ЭлементыФормы["НадписьМесяц" + (Сч + 1)].ЦветТекста = Новый Цвет();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается при изменении периода нажатием на одну из надписей с указанием периода
// или при изменении положения ползунка у полосы регулирования периода.
//
// Параметры:
//	Нет.
//
Процедура ПриИзмененииМесяца()
	
	Месяц = МесяцМинус1 + 1;
	ДатаКонцаПериодаОтчета = КонецМесяца(Дата(Год, Месяц, 1));
	ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	УправлениеНадписямиМесяцев();
	ОбновитьДеревоОтчетов(Ложь);
	
КонецПроцедуры

// Возвращает ссылку на строку дерева значений по заданному значению колонки Ссылка.
// Функция вызывается рекурсивно.
//
// Параметры:
//	Узел - текущий узел дерева видов отчетов, используется только при рекурсивных вызовах.
//	Ссылка - ДокументСсылка.РегламентированныйОтчет, значение колонки Ссылка искомой строки дерева значений.
//
// Возвращаемое значение - СтрокаДереваЗначений, искомая строка дерева значений.
//	
Функция ПолучитьСтрокуДереваПоСсылке(Узел, Ссылка)
	
	Если ТипЗнч(Узел) = Тип("СтрокаДереваЗначений") И Узел.Ссылка = Ссылка Тогда
		Возврат Узел;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		ИскомаяСтрока = ПолучитьСтрокуДереваПоСсылке(Стр, Ссылка);
		Если ИскомаяСтрока <> Неопределено Тогда
			Возврат ИскомаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает количество документов РегламентированныйОтчет в ИБ с учетом установленных критериев отбора.
//
// Параметры:
//	Нет.
//
// Вовращаемое значение:
//	Число - количество документов в ИБ с учетом установленных пользователем на форме параметров отбора.
//	
Функция ДокументыСУчетомКритериевОтбора()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные.ИсточникОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	//////Запрос.УстановитьПараметр("КодИМНС", КодИФНС);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачалаКон", КонецДня(ДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачала2", НачалоГода(ДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачала2Кон", КонецДня(НачалоГода(ДатаНачалаПериодаОтчета)));
	ДатаОконч = ?(НЕ ЗначениеЗаполнено(ДатаКонцаПериодаОтчета), '20291231', ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(ДатаОконч));
	Запрос.УстановитьПараметр("ДатаОкончанияКон", КонецДня(ДатаОконч));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегламентированныйОтчет.Ссылка
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета";
	Если Организация.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + "
		           |	И РегламентированныйОтчет.Организация В (&Организация)";
	КонецЕсли;				   
	//////Если ОтборКодИФНС Тогда
	//////	Запрос.Текст = Запрос.Текст + "
	//////			   |	И РегламентированныйОтчет.КодИМНС = &КодИМНС";
	//////КонецЕсли;
	Если ОтборПериод Тогда
		Если Периодичность = "Произвольный" Тогда
			Запрос.Текст = Запрос.Текст + "
					   |	И РегламентированныйОтчет.ДатаОкончания >= &ДатаНачала
					   |	И РегламентированныйОтчет.ДатаОкончания <= &ДатаОкончанияКон";
		Иначе
			Запрос.Текст = Запрос.Текст + "
					   |	И (РегламентированныйОтчет.ДатаОкончания МЕЖДУ &ДатаОкончания И &ДатаОкончанияКон)";
		КонецЕсли;
	КонецЕсли;
			   
	ТаблРез = Запрос.Выполнить().Выгрузить();
	КолТаблРез = ТаблРез.Количество();
	Если КолТаблРез = 0 Тогда
		Возврат 0;
	Иначе
		Возврат КолТаблРез;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
		
	ВосстановитьПараметрыОтбора();
	ЗаполнитьИзСправочникаРегламентированныеОтчеты();
	ВосстановитьСписокВыбранныхВидовОтчетов();
	ЭлементыФормы.КоманднаяПанельДеревоОтчетов.Кнопки.РазвернутьВсе.Доступность = мИерархическийПросмотр;
	ЭлементыФормы.КоманднаяПанельДеревоОтчетов.Кнопки.СвернутьВсе.Доступность = мИерархическийПросмотр;
	Для Каждого НастройкаОтбора Из ЭлементыФормы.ЖурналОтчетов.НастройкаОтбора Цикл
		НастройкаОтбора.Доступность = Ложь;
	КонецЦикла;
	Для Каждого НастройкаОтбора Из ЭлементыФормы.ЖурналВыгрузки.НастройкаОтбора Цикл
		НастройкаОтбора.Доступность = Ложь;
	КонецЦикла;
	Попытка // свойство РазрешитьНастройкуПериода появилось только в версии 8.0.13 платформы
		ЭлементыФормы.ЖурналОтчетов.РазрешитьНастройкуПериода = Ложь;
		ЭлементыФормы.ЖурналВыгрузки.РазрешитьНастройкуПериода = Ложь;
	Исключение
	КонецПопытки;
	ЭлементыФормы.ЖурналОтчетов.ВосстанавливатьТекущуюСтроку = Истина;
	ЭлементыФормы.ЖурналВыгрузки.ВосстанавливатьТекущуюСтроку = Истина;
	
	ЭлементыФормы.ЖурналОтчетов.НастройкаПорядка.Дата.Доступность = Ложь;
	ЭлементыФормы.ЖурналОтчетов.НастройкаПорядка.Организация.Доступность = Истина;
	ЭлементыФормы.ЖурналВыгрузки.НастройкаПорядка.Организация.Доступность = Истина;
	
	Если НЕ ЗначениеЗаполнено(Периодичность) Тогда // первое открытие
		Периодичность = "По итогам";
		ДатаКонцаПериодаОтчета = КонецМесяца(ДобавитьМесяц(РабочаяДата, -1));
		ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	ОргПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	Если РегламентированнаяОтчетность.ИДКонфигурации() <> "БП" Тогда
		УчетПоВсемОрганизациям = Истина;
	КонецЕсли;
	ЭлементыФормы.Организация.ТолькоПросмотр = НЕ глЗначениеПеременной("УчетПоВсемОрганизациям");
	Если    (ЗначениеЗаполнено(ОргПоУмолчанию) И НЕ глЗначениеПеременной("УчетПоВсемОрганизациям")) 
		ИЛИ (Организация.Количество() = 0 И глЗначениеПеременной("УчетПоВсемОрганизациям") И (ЗначениеЗаполнено(ОргПоУмолчанию))) Тогда
		Организация.Очистить();
		Организация.Добавить(ОргПоУмолчанию);
	КонецЕсли;
	
	УстановитьОтборы();
	УправлениеЭлементамиОтбораПоПериоду();
	УправлениеНадписямиМесяцев();
	ПоказатьПериод();
	ОбновитьПодсказкиЭлементовУправленияПериодом();
	
КонецПроцедуры

// Процедура - обработчик события ПриЗакрытии формы.
//
Процедура ПриЗакрытии()
	
	СохранитьЗначение("ФормаРеглИФинОтчетности_СписокВидовОтчетов"				, СписокВыбранныхСсылокВДеревеОтчетов());
	СохранитьЗначение("ФормаРеглИФинОтчетности_ТекущаяСтраницаОсновнойПанели"	, ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя);
	СохранитьЗначение("ФормаРеглИФинОтчетности_Организация"						, Организация);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ОтборПериод"						, ОтборПериод);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ПолеВыбораПериодичность"			, Периодичность);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ДатаНачалаПериодаОтчета"			, ДатаНачалаПериодаОтчета);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ДатаКонцаПериодаОтчета"			, ДатаКонцаПериодаОтчета);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ДокументОтбор"					, мДокументОтбор);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ПоказыватьПустые"				, мОтображатьПустые);
	СохранитьЗначение("ФормаРеглИФинОтчетности_мИерархическийПросмотр"			, мИерархическийПросмотр);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ПечататьСДвухмернымШтрихКодом"	, мПечататьСДвухмернымШтрихКодом);
	СохранитьЗначение("ФормаРеглИФинОтчетности_мОтбиратьПоДокументуОтбора"		, мОтбиратьПоДокументуОтбора);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ФильтроватьВидыОтчетовПоПериоду"	, мФильтроватьВидыОтчетовПоПериоду);

КонецПроцедуры

// Процедура - обработчик события ПередЗакрытием формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если мНажатаКнопкаЗакрыть <> Истина Тогда
		Отказ = НЕ (Вопрос(НСтр("ru='Закрыть форму ';uk='Закрити форму '") + """" + Заголовок + """?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Обновить дерево отчетов" И Параметр = "Обновить дерево отчетов" Тогда
		ОбновитьДеревоОтчетов();
	ИначеЕсли ИмяСобытия = "Позиционирование в списке отчетов" И ТипЗнч(Параметр) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока = Параметр;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - действие кнопки СнятьПометкиУВсех командной панели КоманднаяПанельДеревоОтчетов.
//
Процедура КоманднаяПанельДеревоОтчетовСнятьПометкиУВсех(Кнопка)
	
	ИзменитьПометкуПодчиненных(ДеревоОтчетов, Ложь);
	ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Ложь);
	УстановитьОтборы();
	
КонецПроцедуры

// Процедура - действие кнопки ПометитьВсе командной панели КоманднаяПанельДеревоОтчетов.
//
Процедура КоманднаяПанельДеревоОтчетовПометитьВсе(Кнопка)
	
	ИзменитьПометкуПодчиненных(ДеревоОтчетов, Истина);
	ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Истина);
	УстановитьОтборы();
	
КонецПроцедуры

// Процедура - действие кнопки Добавить командной панели КоманднаяПанельДеревоОтчетов.
//
Процедура КоманднаяПанельДеревоОтчетовДобавить(Кнопка)
	
	Если ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные <> Неопределено И Не ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные.ЭтоГруппа Тогда
		ОткрытьФормуОтчета(ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - действие кнопки ИсторияВыгрузки командной панели КоманднаяПанельЖурналОтчетов.
//
Процедура КоманднаяПанельЖурналОтчетовИсторияВыгрузки(Кнопка)
	
	Если ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные <> Неопределено Тогда
		мДокументОтбор = ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные.Ссылка;
		мОтбиратьПоДокументуОтбора = Истина;
		УстановитьПредставлениеДокументаОтбора();
		УстановитьПометкуКнопкиОтбиратьПоОтчету();
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ЖурналВыгрузки;
		УстановитьОтборы();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - действие кнопки Обновить командной панели КоманднаяПанельДеревоОтчетов.
//
Процедура КоманднаяПанельДеревоОтчетовОбновить(Кнопка)
	
	ОбновитьДеревоОтчетов();
	
КонецПроцедуры

// Процедура - действие кнопки ПодробнееОФормах командной панели КоманднаяПанельДеревоОтчетов.
//
Процедура КоманднаяПанельДеревоОтчетовПодробнееОФормах(Кнопка)
	
	Если ЭлементыФормы.ДеревоОтчетов.ТекущаяСтрока = Неопределено Тогда
		Предупреждение(НСтр("ru='Выберите отчет!';uk='Виберіть звіт!'"));
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.ДеревоОтчетов.ТекущаяСтрока.ЭтоГруппа = Истина Тогда
		Предупреждение(НСтр("ru='Функция недоступна для группы отчетов!';uk='Функція недоступна для групи звітів!'"));
		Возврат;
	КонецЕсли;
	
	ФормаПодробнееОФормах = Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму("ПодробнееОбОтчете");
	ФормаПодробнееОФормах.НачальноеЗначениеВыбора = ЭлементыФормы.ДеревоОтчетов.ТекущаяСтрока.Ссылка;
	ФормаПодробнееОФормах.ОткрытьМодально();
	
КонецПроцедуры

// Процедура - действие кнопки ИерархическийПросмотр командной панели КоманднаяПанельДеревоОтчетов.
//
Процедура КоманднаяПанельДеревоОтчетовИерархическийПросмотр(Кнопка)
	
	мИерархическийПросмотр = НЕ мИерархическийПросмотр;
	Элементыформы.КоманднаяПанельДеревоОтчетов.Кнопки.ИерархическийПросмотр.Пометка = мИерархическийПросмотр;
	ОбновитьДеревоОтчетов();
	
КонецПроцедуры

// Процедура - действие кнопки Добавить командной панели КоманднаяПанельЖурналОтчетов.
//
Процедура КоманднаяПанельЖурналОтчетовДобавить(Кнопка)
	
	ДобавлениеОтчетаВЖурналеОтчетов();
	
КонецПроцедуры

// Процедура - действие кнопки Открыть справочник командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыОткрытьСправочник(Кнопка)
	
	Справочники.РегламентированныеОтчеты.ПолучитьФормуСписка().Открыть();

КонецПроцедуры

// Процедура - действие кнопки Настройка справочник командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыНастройка(Кнопка)
	
	Если Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму("УправлениеОтчетностьюФормаНастройки", ЭтаФорма).ОткрытьМодально() = Истина Тогда
		ОбновитьДеревоОтчетов();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - действие кнопки РазвернутьВсе справочник командной панели КоманднаяПанельДеревоОтчетов.
//
Процедура КоманднаяПанельДеревоОтчетовРазвернутьВсе(Кнопка)
	
	Для Каждого Стр Из ДеревоОтчетов.Строки Цикл
		ЭлементыФормы.ДеревоОтчетов.Развернуть(Стр, Истина);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - действие кнопки СвернутьВсе справочник командной панели КоманднаяПанельДеревоОтчетов.
//
Процедура КоманднаяПанельДеревоОтчетовСвернутьВсе(Кнопка)
	
	Для Каждого Стр Из ДеревоОтчетов.Строки Цикл
		ЭлементыФормы.ДеревоОтчетов.Свернуть(Стр);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ


// Процедура - обработчик события Выбор табличного поля ДеревоОтчетов.
//
Процедура ДеревоОтчетовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если НЕ ВыбраннаяСтрока.ЭтоГруппа Тогда
		//ОткрытьФормуОтчета(ВыбраннаяСтрока.ИсточникОтчета);
		Доки = ДокументыСУчетомКритериевОтбора();
		Если Доки <> 0 Тогда
			РезультатВыбора = Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму("ФормаВыбораОтчета", ЭтаФорма).ОткрытьМодально();
			Если РезультатВыбора = Истина Тогда // создаем новый отчет
				ОткрытьФормуОтчета(ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные);
			ИначеЕсли ЗначениеЗаполнено(РезультатВыбора) Тогда
				РезультатВыбора.ПолучитьФорму().Открыть();
			КонецЕсли;
		Иначе
			ОткрытьФормуОтчета(ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные);				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзмененииФлажка табличного поля ДеревоОтчетов.
//
Процедура ДеревоОтчетовПриИзмененииФлажка(Элемент, Колонка)
	
	АналогичнаяСтрокаПолногоДерева = ПолучитьСтрокуДереваПоСсылке(мПолноеДеревоОтчетов, ЭлементыФормы.ДеревоОтчетов.ТекущаяСтрока.Ссылка);
	Если ЭлементыФормы.ДеревоОтчетов.ТекущаяСтрока.Пометка = 2 Тогда
		ЭлементыФормы.ДеревоОтчетов.ТекущаяСтрока.Пометка = 0;
	КонецЕсли;
	АналогичнаяСтрокаПолногоДерева.Пометка = ЭлементыФормы.ДеревоОтчетов.ТекущаяСтрока.Пометка;
	ИзменитьПометкуПодчиненных(ЭлементыФормы.ДеревоОтчетов.ТекущаяСтрока, , , Истина, ДеревоОтчетов);
	ИзменитьПометкуПодчиненных(АналогичнаяСтрокаПолногоДерева, , , Истина, мПолноеДеревоОтчетов);
	УстановитьОтборы();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Организация.
//
Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму("ФормаВыбораОрганизаций", ЭтаФорма).ОткрытьМодально();
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбораИзСписка поля ввода Организация.
//
Процедура ОрганизацияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Организации.Ссылка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Организации.Наименование");
	СписокОрганизаций = Новый СписокЗначений;					  
	СписокОрганизаций.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Ссылка"));
	РезультатВыбора = ВыбратьИзСписка(СписокОрганизаций, Элемент, ?(Элемент.Значение.Количество() = 1, СписокОрганизаций.НайтиПоЗначению(Элемент.Значение.Получить(0).Значение), Неопределено));
	Если РезультатВыбора <> Неопределено Тогда
		Элемент.Значение.Очистить();
		Элемент.Значение.Добавить(РезультатВыбора.Значение);
		УстановитьОтборы();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события Открытие поля ввода Организация.
//
Процедура ОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.Значение.Количество() = 1 Тогда
		Элемент.Значение.Получить(0).Значение.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры
// Процедура - обработчик события ПриИзменении флажка ОтборПериод.
//
Процедура ОтборПериодПриИзменении(Элемент)
	
	ОбновитьДеревоОтчетов(Ложь);
	УправлениеЭлементамиОтбораПоПериоду();
	УправлениеНадписямиМесяцев();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля выбора ПолеВыбораПериодичность.
//
Процедура ПолеВыбораПериодичностьПриИзменении(Элемент)
	
	ОбновитьДеревоОтчетов(Ложь);
	УправлениеЭлементамиОтбораПоПериоду();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ДатаНачалаПериодаОтчета.
//
Процедура ДатаНачалаПериодаОтчетаПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ДатаКонцаПериодаОтчета.
//
Процедура ДатаКонцаПериодаОтчетаПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

// Процедура - обработчик события Нажатие кнопки КнопкаНастройкиПериода.
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	ДиалогНастройкиПериода = Новый НастройкаПериода;
	ДиалогНастройкиПериода.УстановитьПериод(ДатаНачалаПериодаОтчета, КонецДня(ДатаКонцаПериодаОтчета));
	ДиалогНастройкиПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	ДиалогНастройкиПериода.РедактироватьКакПериод = Истина;
	ДиалогНастройкиПериода.РедактироватьКакИнтервал = Истина;
	Если ДиалогНастройкиПериода.Редактировать() Тогда
		ДатаНачалаПериодаОтчета = НачалоДня(ДиалогНастройкиПериода.ПолучитьДатуНачала());
		ДатаКонцаПериодаОтчета = КонецДня(ДиалогНастройкиПериода.ПолучитьДатуОкончания());
		УстановитьОтборы();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ПриАктивизацииСтроки табличного поля ДеревоОтчетов.
//
Процедура ДеревоОтчетовПриАктивизацииСтроки(Элемент)
	
	Если ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные = Неопределено Тогда
		НадписьОписаниеОтчета = "";
	Иначе
		НадписьОписаниеОтчета = ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные.Описание;
	КонецЕсли;
	Если ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные <> Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельДеревоОтчетов.Кнопки.Добавить.Доступность = НЕ ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные.ЭтоГруппа;
	Иначе
		ЭлементыФормы.КоманднаяПанельДеревоОтчетов.Кнопки.Добавить.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриСменеСтраницы панели ОсновнаяПанель.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьОтборы();
	
КонецПроцедуры

// Процедура - обработчик события ПередНачаломДобавления табличного поля ЖурналОтчетов.
//
Процедура ЖурналОтчетовПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ДобавлениеОтчетаВЖурналеОтчетов();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении полосы регулирования ПолосаРегулированияПериода.
//
Процедура ПолосаРегулированияПериодаПриИзменении(Элемент)
	
	ПриИзмененииМесяца();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Год.
//
Процедура ГодПриИзменении(Элемент)
	
	ДатаКонцаПериодаОтчета = Дата(Год, Месяц(ДатаКонцаПериодаОтчета), День(КонецМесяца(Дата(Год, Месяц(ДатаКонцаПериодаОтчета), 1))));
	ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	ОбновитьДеревоОтчетов(Ложь);
	
КонецПроцедуры

// Процедура - обработчик событий Нажатие надписей НадписьМесяц1,  НадписьМесяц2, ... , НадписьМесяц12.
//
Процедура НадписьМесяц1Нажатие(Элемент)
	
	МесяцМинус1 = Число(Сред(Элемент.Имя, 13)) - 1;
	ПриИзмененииМесяца();
	
КонецПроцедуры

// Процедура - обработчик события Нажатие кнопки КнопкаОткрытьДокументОтбор.
//
Процедура КнопкаОткрытьДокументОтборНажатие(Элемент)
	
	Если ЗначениеЗаполнено(мДокументОтбор) Тогда
		мДокументОтбор.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события Нажатие кнопки КнопкаОчиститьДокументОтбор.
//
Процедура КнопкаОчиститьДокументОтборНажатие(Элемент)
	
	мДокументОтбор = Неопределено;
	мОтбиратьПоДокументуОтбора = Ложь;
	УстановитьПометкуКнопкиОтбиратьПоОтчету();
	УстановитьПредставлениеДокументаОтбора();
	УстановитьОтборы();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка ФлажокОтборПоОтчету.
//
Процедура ФлажокОтборПоОтчетуПриИзменении(Элемент)
	
	мОтбиратьПоДокументуОтбора = НЕ мОтбиратьПоДокументуОтбора;
	УстановитьПометкуКнопкиОтбиратьПоОтчету();
	УстановитьОтборы();
	ЭлементыФормы.ЖурналВыгрузки.Колонки.Отчет.Видимость = Не(ОтборПоОтчету);
	
КонецПроцедуры

// Процедура - обработчик события ПриПолученииДанных табличного поля ЖурналОтчетов.
//
Процедура ЖурналОтчетовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Если (ОформлениеСтроки.ДанныеСтроки.Ссылка.ИсточникОтчета = "РегламентированныйОтчет5ПН")
			 ИЛИ (ОформлениеСтроки.ДанныеСтроки.Ссылка.ИсточникОтчета = "РегламентированныйОтчет3ПН")Тогда
			ОформлениеСтроки.Ячейки.Период.УстановитьТекст(ПредставлениеПериода(НачалоМесяца(ОформлениеСтроки.ДанныеСтроки.ДатаНачала), КонецМесяца(ОформлениеСтроки.ДанныеСтроки.ДатаОкончания), "ФП=Истина"));
		Иначе
			ОформлениеСтроки.Ячейки.Период.УстановитьТекст(ПредставлениеПериода(ОформлениеСтроки.ДанныеСтроки.ДатаНачала, КонецДня(ОформлениеСтроки.ДанныеСтроки.ДатаОкончания), "ФП=Истина"));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события ПриПолученииДанных табличного поля ЖурналВыгрузки.
//
Процедура ЖурналВыгрузкиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ОформлениеСтроки.Ячейки.Период.УстановитьТекст(ПредставлениеПериода(ОформлениеСтроки.ДанныеСтроки.ПериодС, КонецДня(ОформлениеСтроки.ДанныеСтроки.ПериодПо), "ФП=Истина"));
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события ПриПолученииДанных табличного поля ДеревоОтчетов.
//
Процедура ДеревоОтчетовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ОформлениеСтроки.Шрифт = Новый Шрифт(, , ОформлениеСтроки.ДанныеСтроки.ЭтоГруппа, , , ОформлениеСтроки.ДанныеСтроки.ПометкаУдаления);
		ОформлениеСтроки.Ячейки.Наименование.УстановитьТекст(ОформлениеСтроки.ДанныеСтроки.Наименование + ?(ОформлениеСтроки.ДанныеСтроки.Внешний = Истина, НСтр("ru=' (внешний)';uk=' (зовнішній)'"), ""));
		Если ОформлениеСтроки.ДанныеСтроки.Родитель = Неопределено И мИерархическийПросмотр Тогда
			ОформлениеСтроки.ЦветФона = мЦветПервогоУровняДерева;
		Иначе
			ОформлениеСтроки.ЦветФона = мЦветВторогоУровняДерева;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ЖурналОтчетов.Колонки.Добавить("ДатаНачала");
ЖурналОтчетов.Колонки.Добавить("ДатаОкончания");

ЖурналВыгрузки.Колонки.Добавить("ПериодС");
ЖурналВыгрузки.Колонки.Добавить("ПериодПо");

мЦветПервогоУровняДерева = Новый Цвет(242, 253, 252);
мЦветВторогоУровняДерева = Новый Цвет(255, 255, 255);

мПолноеДеревоОтчетов = ДеревоОтчетов.Скопировать();

МассивНаименованийПравыхГраницПериода = Новый Массив;
МассивНаименованийПравыхГраницПериода.Добавить(НСтр("ru='января';uk='січня'"));
МассивНаименованийПравыхГраницПериода.Добавить(НСтр("ru='февраля';uk='лютого'"));
МассивНаименованийПравыхГраницПериода.Добавить(НСтр("ru='I-го квартала';uk='I-го кварталу'"));
МассивНаименованийПравыхГраницПериода.Добавить(НСтр("ru='апреля';uk='квітня'"));
МассивНаименованийПравыхГраницПериода.Добавить(НСтр("ru='мая';uk='травня'"));
МассивНаименованийПравыхГраницПериода.Добавить(НСтр("ru='I-го полугодия';uk='I-го півріччя'"));
МассивНаименованийПравыхГраницПериода.Добавить(НСтр("ru='июля';uk='липня'"));
МассивНаименованийПравыхГраницПериода.Добавить(НСтр("ru='августа';uk='серпня'"));
МассивНаименованийПравыхГраницПериода.Добавить(НСтр("ru='III-го квартала';uk='III-го кварталу'"));
МассивНаименованийПравыхГраницПериода.Добавить(НСтр("ru='октября';uk='жовтня'"));
МассивНаименованийПравыхГраницПериода.Добавить(НСтр("ru='ноября';uk='листопада'"));
МассивНаименованийПравыхГраницПериода.Добавить(НСтр("ru='года';uk='року'"));

