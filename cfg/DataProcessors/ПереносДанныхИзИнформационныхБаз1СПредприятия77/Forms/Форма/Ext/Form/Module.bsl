////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мПрефиксСтраниц;
Перем мНомерСтраницы;
Перем мИмяИБ;
Перем мПутьКИБ;
Перем мИмяФайлаПравил;
Перем мИмяФайлаОбработки;
Перем мИмяФайлаДанных;
Перем мПутьВыгрузкиЗагрузки;
Перем мСписокЭтаповВыгрузки;

Перем мЭтапКонвертации;

Перем v7; // сервер 7.7

Перем мОбработкаОбмена;

Перем мБазоваяПоставка;

Перем ДатаНачала, ДатаОкончания;

Перем мФайлОбмена, Организация;

Перем мШрифтОбычный, мШрифтЖирный;

Перем КодФирмы, Фирма;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция сокращает двойные кавычки
//
Функция СократитьДвойныеКавычки(Знач Строка)

	Результат = Строка;
	Пока Найти(Результат, """") = 1 Цикл
		Результат = Сред(Результат, 2); 
	КонецЦикла; 
	Пока Найти(Результат, """") = СтрДлина(Результат) Цикл
		Результат = Сред(Результат, 1, СтрДлина(Результат) - 1); 
	КонецЦикла; 
	Возврат Результат;

КонецФункции 

// Процедура отвечает за перемещение по страницам формы
//
Процедура Шагнуть(КоличествоШагов = 1)
	
	Если ПустаяСтрока(мПрефиксСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	Если мНомерСтраницы = 0 Тогда
		Если мПрефиксСтраниц = "Ф" Тогда
			ВыбФайл = Новый Файл("C:\v77_v8\PrB77_8.xml");
			Если ВыбФайл.Существует() Тогда
				ИмяФайлаВыгруженныхДанных = ВыбФайл.ПолноеИмя;
				ИнициализироватьОбменИзФайла(ВыбФайл.ПолноеИмя, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.Далее.Доступность = НЕ (мНомерСтраницы = 0 И мПрефиксСтраниц = "ИБ" И ТаблицаПути.Количество() = 0);
	
	мНомерСтраницы = мНомерСтраницы + КоличествоШагов;
	
	Если мНомерСтраницы = 1 Тогда
		ТекстСообщения = "";
		ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы.ИБПанельКонецРезультат.Страницы.СтраницаПроцесс;
	КонецЕсли;
	
	Если мНомерСтраницы = 2 И мПрефиксСтраниц = "Ф" Тогда
		Если НЕ ЗначениеЗаполнено(ИмяФайлаВыгруженныхДанных) Тогда
			Предупреждение(НСтр("ru='Укажите путь к файлу данных.';uk='Укажіть шлях до файлу даних.'"));
			мНомерСтраницы = мНомерСтраницы - 1;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяСтраницы = мПрефиксСтраниц + "Страница" + мНомерСтраницы;
	ЭлементыФормы.ПанельКонвертации.ТекущаяСтраница = ЭлементыФормы.ПанельКонвертации.Страницы[ИмяСтраницы];
	
КонецПроцедуры

// Процедура отработки нажатия кнопки дале
//
Процедура ОтработатьНажатиеВперед()
	
	// Для загрузки из ИБ
	Если мПрефиксСтраниц = "ИБ" Тогда
		Если мНомерСтраницы = 1 Тогда
			УстановитьНадписиРасшифровки();
		КонецЕсли;
		
		Если мНомерСтраницы = 2 Тогда
			УстановитьЗначенияПараметровПоУмолчанию();
		КонецЕсли;
				
		Если мНомерСтраницы = 3 Тогда
			
			Перерисовать(1, "ВОчереди");
			
			ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаПроцесс;
			
			ИмяИсточника = НСтр("ru='ИБ: ';uk='ІБ: '") + мИмяИБ + НСтр("ru=', начало переноса: ';uk=', початок перенесення: '") + Формат(ТекущаяДата(), "ДЛФ=T");
			
			КонвертацияИнформационнойБазы();
			
			ОтобразитьТекстСостояния(НСтр("ru='Окончание переноса данных: ';uk='Закінчення перенесення даних: '") + ТекущаяДата(), , 0);
			
			КонвертацияЗавершена();
			
			ЭлементыФормы[мПрефиксСтраниц + "ДалееКон"].Доступность = Истина;

			
		КонецЕсли;
		
	КонецЕсли;
	
	// Для загрузки из файла
	Если мПрефиксСтраниц = "Ф" Тогда
		Если мНомерСтраницы = 2 Тогда
			
			Перерисовать(3, "ВОчереди");
			
			ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаПроцесс;
			
			ИмяИсточника = НСтр("ru='Файл: ';uk='Файл: '") + ИмяФайлаВыгруженныхДанных + НСтр("ru=', начало переноса: ';uk=', початок перенесення: '") + Формат(ТекущаяДата(), "ДЛФ=T");
			
			ЗагрузкаИнформационнойБазы();
			
			ОтобразитьТекстСостояния(НСтр("ru='Окончание переноса данных: ';uk='Закінчення перенесення даних: '") + ТекущаяДата(), , 0);
			
			КонвертацияЗавершена();
			
		КонецЕсли;
		
	
		Если мНомерСтраницы = 2 Тогда
			
			ЭлементыФормы[мПрефиксСтраниц + "ДалееКон"].Доступность = Истина;
			
			// Заврешение процесса
			Если ТаблицаОшибок.Количество() > 0 Тогда
				
				ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы.ИБПанельКонецРезультат.Страницы.СтраницаОшибка;
				
			ИначеЕсли мБазоваяПоставка Тогда
				ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы.ИБПанельКонецРезультат.Страницы.СтраницаУспехБазовая;
			Иначе
				ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы.ИБПанельКонецРезультат.Страницы.СтраницаУспехПроф;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры

// Процедура заносит информацию об ошибках в спецютаблицу
//
Процедура ЗафиксироватьОшибку(Этап, ТекстОшибки, ТекстРекомендации = "", Расшифровка = Неопределено)
	
	ОтобразитьТекстСостояния(ТекстОшибки, Истина);
	
	Если НЕ ЗначениеЗаполнено(Этап) Тогда
		Возврат;
	КонецЕсли;
	
	Если Этап = "Проверка данных" И НЕ ЗначениеЗаполнено(ТекстРекомендации) Тогда
		ТекстРекомендации = НСтр("ru='Проверьте, все ли загруженные документы были проведены.';uk='Перевірте,  чи всі завантажені документи були проведені.'");
	КонецЕсли;
	
	НоваяОшибка = ТаблицаОшибок.Добавить();
	НоваяОшибка.Этап			= Этап;
	НоваяОшибка.Ошибка			= ТекстОшибки;
	НоваяОшибка.Рекомендации	= ТекстРекомендации;
	НоваяОшибка.Расшифровка		= Расшифровка;
	
КонецПроцедуры

// Функция замещает сведения в существующей организации для Базовой поставки
//
Функция ИзменитьСведенияОбОрганизации(ИмяФайлаОбмена)
	
	ОткрытьФайлДанных(ИмяФайлаОбмена);
	
	Попытка
		Организация_ИНН = мФайлОбмена.ПолучитьАтрибут("ИНН");
		Организация_КПП = мФайлОбмена.ПолучитьАтрибут("КПП");
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Организации.ИНН,
		|	Организации.КПП
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() <> 0 Тогда
			ТекОрганизация = Результат.Получить(0);
			Если ТекОрганизация.ИНН <> Организация_ИНН
				ИЛИ ТекОрганизация.КПП <> Организация_КПП Тогда
				Объект = ТекОрганизация.Ссылка.ПолучитьОбъект();
				Объект.ИНН = Организация_ИНН;
				Объект.КПП = Организация_КПП;
				Объект.ОбменДанными.Загрузка = Истина;
				Объект.Записать();
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Если ТипЗнч(мФайлОбмена) = Тип("ЧтениеXML") Тогда
			мФайлОбмена.Закрыть();
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Если ТипЗнч(мФайлОбмена) = Тип("ЧтениеXML") Тогда
		мФайлОбмена.Закрыть();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура открывает файл с данными для чтения атрибутов
//
Процедура ОткрытьФайлДанных(ИмяФайла)
	
	// Архивные файлы будем идентифицировать по расширению ".zip"
	Если Найти(ИмяФайла, ".zip") > 0 Тогда
		ИмяФайлаЗагрузкиДанных = мОбработкаОбмена.РаспаковатьZipФайл(ИмяФайлаВыгруженныхДанных);
	Иначе
		ИмяФайлаЗагрузкиДанных = ИмяФайла;
	КонецЕсли; 
	
	Если ТипЗнч(мФайлОбмена) = Тип("ЧтениеXML") Тогда
		мФайлОбмена.Закрыть();
	КонецЕсли;
	
	мФайлОбмена = Новый ЧтениеXML;
	мФайлОбмена.ОткрытьФайл(ИмяФайлаЗагрузкиДанных);
	мФайлОбмена.Прочитать();
	
КонецПроцедуры

// Прорисовка последней страницы обработки
//
Процедура КонвертацияЗавершена()
	
	Если ТаблицаОшибок.Количество() <> 0 Тогда
		ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаОшибка;
	Иначе
		
		Если мБазоваяПоставка Тогда
			ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаУспехБазовая;
		Иначе
			ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаУспехПроф;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Перерисовает все картинки начиная с указанной
//
Процедура Перерисовать(Этап, Состояние = "Ошибка", ОднаКартинка = Ложь)
	
	Если ОднаКартинка Тогда
		
		ЭлементыФормы[мПрефиксСтраниц + "КартинкаДействий" + Этап].Картинка = ОпределитьКартинку(Этап, Состояние);
		Если Состояние = "Выполняется" Тогда
			ТекущийШрифт = мШрифтЖирный;
			ТекущаяРамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
		Иначе
			ТекущийШрифт = мШрифтОбычный;
			ТекущаяРамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		КонецЕсли;
		ЭлементыФормы[мПрефиксСтраниц + "НадписьДействий" + Этап].Шрифт		= ТекущийШрифт;
		ЭлементыФормы[мПрефиксСтраниц + "КартинкаДействий" + Этап].Рамка	= ТекущаяРамка;
		
	Иначе
		
		ТекущаяРамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		
		Для НомерКартинки = Этап По 4 Цикл
			ЭлементыФормы[мПрефиксСтраниц + "КартинкаДействий" + НомерКартинки].Картинка	= ОпределитьКартинку(НомерКартинки, Состояние);
			ЭлементыФормы[мПрефиксСтраниц + "НадписьДействий" + Этап].Шрифт					= мШрифтОбычный;
			ЭлементыФормы[мПрефиксСтраниц + "КартинкаДействий" + Этап].Рамка				= ТекущаяРамка;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Определение картинки для текущего этапа
//
Функция ОпределитьКартинку(Этап, Состояние)
	
	Попытка
		Если Этап = 1 Тогда
			Картинка = БиблиотекаКартинок["ПереходС77" + Состояние + "_Подключение"];
		ИначеЕсли Этап = 2 Тогда
			Картинка = БиблиотекаКартинок["ПереходС77" + Состояние + "_Выгрузка"];
		ИначеЕсли Этап = 3 Тогда
			Картинка = БиблиотекаКартинок["ПереходС77" + Состояние + "_Загрузка"];
		ИначеЕсли Этап = 4 Тогда
			Картинка = БиблиотекаКартинок["ПереходС77" + Состояние + "_Проверка"];
		КонецЕсли;
		
	Исключение
		Возврат Новый Картинка;
		
	КонецПопытки;
	
	Возврат Картинка;
	
КонецФункции

// Процедура выводит текст в окно состояния
//
Процедура ОтобразитьТекстСостояния(Текст, Ошибка = Ложь, Картинка = Неопределено)
	
	//Состояние(Текст);
	СостояниеПереноса = Текст;
	
КонецПроцедуры

// Процедура изменияет предстваление периода выгрузки
//
Процедура ИзменитьПериод(ШагНазад = Истина, НеИзменять = Ложь)
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = НачалоГода(РабочаяДата);
	КонецЕсли;
	
	Если Не НеИзменять Тогда
		Если ШагНазад Тогда
			ДатаНачала = ДобавитьМесяц(ДатаНачала,-12);
		Иначе
			Если Год(ДатаНачала)< Год(РабочаяДата) Тогда
				ДатаНачала = ДобавитьМесяц(ДатаНачала,12);
			Иначе
				ДатаНачала = НачалоГода(РабочаяДата);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.ПериодВыгрузкиДанных.Значение = Формат(ДатаНачала,"ДФ=гггг") + НСтр("ru=' года';uk=' року'");
КонецПроцедуры
                                                                        
// Обработчик нажатия кнопки ПериодВперед
//
Процедура ПериодВпередНажатие(Элемент)
	
	ИзменитьПериод(Ложь);
	
КонецПроцедуры

// Обработчик нажатия кнопки ПериодНазад
//
Процедура ПериодНазадНажатие(Элемент)
	
	ИзменитьПериод(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуОрганизаций()
	
	ТаблицаОрганизаций.Очистить();
	
	Попытка
		
		Текст = v7.СформироватьСписокОрганизацийДля1СЗУП8();
		
	Исключение
		ЗафиксироватьОшибку(НСтр("ru='Определение организации';uk='Визначення організації'"), НСтр("ru='Производится считываение организаций.';uk='Виконується зчитування організацій.'"), НСтр("ru='Считываение организаций не выполненно.';uk='Зчитування організацій не виконано.'"));
	КонецПопытки;
	
	Для Ном=1 По СтрЧислоСтрок(Текст) Цикл
		СтрБазы=СтрПолучитьСтроку(Текст,Ном);
		Разд=Найти(СтрБазы,"%#%");
		Код=Лев(СтрБазы,Разд-1);
		Наименование=Прав(СтрБазы,СтрДлина(СтрБазы)-Разд-2);
		
		НоваяСтрока = ТаблицаОрганизаций.Добавить();
		НоваяСтрока.Код = Код;
		НоваяСтрока.Наименование = Наименование;
	КонецЦикла;
	
	ТаблицаОрганизаций.Сортировать("Код");
		
КонецПроцедуры

Процедура УстановитьНадписиРасшифровки();
	
	ТекстРасшифровки = "";
	ТекстРасшифровки = ТекстРасшифровки + НСтр("ru='Данные будут переноситься ""порциями""с комментированием процесса переноса, но перенос потребует больше времени. ';uk='Дані будуть переноситися ""порціями""з коментуванням процесу перенесення, але перенесення потребує більше часу. '");
	ТекстРасшифровки = ТекстРасшифровки + НСтр("ru='Возможные ошибки в одном из этапов не повлияют на выполнение других этапов.';uk='Можливі помилки в одному з етапів не вплинуть на виконання інших етапів.'");	
	ЭлементыФормы.НадписьРасшифровкаСКомментированием.Заголовок = ТекстРасшифровки;
	
	ТекстРасшифровки = "";
	ТекстРасшифровки = ТекстРасшифровки + НСтр("ru='При работе в данном режиме скорость переноса максимальна, но подробная информация о ходе переноса отображаться не будет. ';uk='При роботі в даному режимі швидкість перенесення максимальна, але детальна інформація про хід перенесення відображатися не буде. '");
	ТекстРасшифровки = ТекстРасшифровки + НСтр("ru='При наличии ошибок переноса на каком-то участке, дальнейшая выгрузка не произойдет. ';uk='При наявності помилок перенесення на якійсь ділянці, подальше вивантаження не відбудеться. '");
	ЭлементыФормы.НадписьРасшифровкаСМаксимальнойСкоростью.Заголовок = ТекстРасшифровки;
	
	ТекстРасшифровки = "";
	ТекстРасшифровки = ТекстРасшифровки + НСтр("ru='Будут перенесены общие сведения об организации, штатное расписание и полная информация о графиках работы.';uk='Будуть перенесені загальні відомості про організації, штатний розклад і повна інформація про графіки роботи.'");
	ЭлементыФОрмы.НадписьРасшифровкаПереноситьОбщиеДанные.Заголовок = ТекстРасшифровки;
	
	ТекстРасшифровки = "";
	ТекстРасшифровки = ТекстРасшифровки + НСтр("ru='Будут перенесены кадровые документы: прием на работу, кадровые перемещения, увольнения, отпуска, поощрения и взыскания, договора ГПХ. ';uk='Будуть перенесені кадрові документи: прийом на роботу, кадрові переміщення, звільнення, відпустки, заохочення і стягнення, договори ЦПХ. '");
	ЭлементыФормы.НадписьРасшифровкаПереноситьКадровыеДанные.Заголовок = ТекстРасшифровки;			
	
	ТекстРасшифровки = "";
	ТекстРасшифровки = ТекстРасшифровки + НСтр("ru='Будут перенесены результаты расчета заработной платы: информация о начислениях, удержаниях, взносах и НДФЛ, остатки взаиморасчетов и депонентов, информация о непогашенных ссудах.';uk='Будуть перенесені результати розрахунку заробітної плати: інформація про нарахування, утримання, внески та ПДФО, залишки взаєморозрахунків та депонентів, інформація про непогашені позики.'");
	ЭлементыФормы.НадписьРасшифровкаПереноситьРасчетныеДанные.Заголовок = ТекстРасшифровки;
	
	ТекстРасшифровки = "";
	ТекстРасшифровки = ТекстРасшифровки + НСтр("ru='Будет перенесена информация о плановых расчетных данных: оклады, плановые начисления, удержания, взносы и льготы сотрудников, исполнительные листы.';uk='Буде перенесена інформація про планові розрахункові дані: оклади, планові нарахування, утримання, внески та пільги працівників, виконавчі листи.'");
	ЭлементыФормы.НадписьРасшифровкаПереноситьПлановыеДанные.Заголовок = ТекстРасшифровки;
	
	ТекстРасшифровки = "";
	ТекстРасшифровки = ТекстРасшифровки + НСтр("ru='Будет перенесена информация о настройках отражениях начислений и удержаний, основного заработка, плановых начислений и удержаний.';uk='Буде перенесена інформація про настройки відображення нарахувань і утримань, основного заробітку, планових нарахувань і утримань.'");
	ЭлементыФормы.НадписьРасшифровкаПереноситьНастройкиОтражения.Заголовок = ТекстРасшифровки;
	
	ТекстРасшифровки = "";
	ТекстРасшифровки = ТекстРасшифровки + НСтр("ru='Будет перенесена дополнительная расчетная иформация (коэффициенты повышения окладов и базовые периоды индексации).';uk='Буде перенесена додаткова розрахункова інформація (коефіцієнти підвищення окладів і базові періоди індексації).'");
	ЭлементыФормы.НадписьРасшифровкаПереноситьПрочиеДанные.Заголовок = ТекстРасшифровки;
	
КонецПроцедуры                                                                 

Процедура УстановитьЗначенияПараметровПоУмолчанию();
	ПереноситьОбщиеДанные = Истина;
	ПереноситьКадровыеДанные = Истина;
	ПереноситьРасчетныеДанные = Истина;
	ПереноситьНастройкиОтражения = Истина;
	ПереноситьПрочиеДанные = Истина;
	ПереноситьПлановыеДанные = Истина;	
КонецПроцедуры

// ОБМЕН ЧЕРЕЗ COM

// Переход к диалогу загрузки данных из 7.7
//
Процедура ЗагрузитьИзИБ()
	
	мПрефиксСтраниц = "ИБ";
	
	ПолучитьСписокИБ();
	
	ЭлементыФормы.ПанельКонвертации.ТекущаяСтраница = ЭлементыФормы.ПанельКонвертации.Страницы.ИБСтраница0;
	
КонецПроцедуры

// Процедура получает из реестра список зарегистрированных ИБ
//
Процедура ПолучитьСписокИБ()
	
	СписокИБ = ПолучитьСписокИБ77();
	
	Если ТипЗнч(СписокИБ) = Тип("Строка") Тогда
		Предупреждение(СписокИБ);
	КонецЕсли;
	
	ТаблицаПути.Загрузить(СписокИБ);
	
КонецПроцедуры //ПолучитьСписокИБ

// Запуск процесса конвертации из 7.7
//
Процедура КонвертацияИнформационнойБазы()
	
	ОтобразитьТекстСостояния(НСтр("ru='Начало переноса данных: ';uk='Початок перенесення даних: '") + ТекущаяДата(), , 0);
	
	ТаблицаОшибок.Очистить();
	
	мСписокЭтаповВыгрузки = 0;
	
	Индикатор = 0;
	
	ЭлементыФормы[мПрефиксСтраниц + "ДалееКон"].Доступность = Ложь;
		
	// Шаг № 2 выгрузка данных
	ОтобразитьТекстСостояния(НСтр("ru='Загрузка правил переноса данных';uk='Завантаження правил перенесення даних'"));
	мЭтапКонвертации = "Выгрузка данных";
	Перерисовать(2, "Выполняется", Истина);
	Если НЕ ВыгрузитьИБ() Тогда
		Перерисовать(2);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 50;
	
	Перерисовать(2, "Успех", Истина);
	
	// Шаг № 3 инициализация обмена и загрузка данных
	ОтобразитьТекстСостояния(НСтр("ru='Чтение выгруженных данных';uk='Читання вивантажених даних'"));
	мЭтапКонвертации = "Запуск обработки загрузки данных";
	Перерисовать(3, "Выполняется", Истина);
	Если НЕ ИнициализироватьОбменИзИБ() Тогда
		Перерисовать(3);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 51;
	
	ОтобразитьТекстСостояния(НСтр("ru='Загрузка данных';uk='Завантаження даних'"));
	мЭтапКонвертации = "Загрузка данных";
	Если НЕ ЗагрузитьИзФайловВИБ() Тогда
		Перерисовать(3);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 99;
	
	Перерисовать(3, "Успех", Истина);
	
	// Шаг № 4 проверка загруженных данных
	ОтобразитьТекстСостояния(НСтр("ru='Проверка загруженных данных';uk='Перевірка завантажених даних'"));
	мЭтапКонвертации = "Проверка данных";
	Перерисовать(4, "Выполняется", Истина);
	Если ТаблицаОшибок.Количество() <> 0 Тогда
		Перерисовать(4);
		Индикатор = 100;
	Иначе
		Перерисовать(4, "Успех", Истина);
		// файлы удалим только если перенос завершен успешно,
		// так как их можно использовать для расследования возникших ошибок
		УдалитьФайлы(мПутьВыгрузкиЗагрузки, "ConvData*.xml");
	КонецЕсли;
	Индикатор = 100;
	
КонецПроцедуры

// Шаг 1: Подключение к ИБ
//
Функция ПодключитьсяКИБ()
	
	Попытка
		v7 = Новый COMObject("V1CEnterprise.Application"); 
	Исключение
		ТекстОшибкиПриПодключении		= НСтр("ru='Не удалось произвести подключение к информационной базе: ';uk='Не вдалося зробити підключення до інформаційної бази: '") + мИмяИБ;
		ОписаниеОшибкиПриПодключении	= НСтр("ru='Возможно, на Вашем компьютере не установлена платформа 1С:Предприятие 7.7. Воспользуйтесь вариантом загрузки данных из файла, предварительно сформировав его в информационной базе, из которой производится перенос данных.';uk=""Можливо, на Вашому комп'ютері не встановлена платформа 1С:Підприємство 7.7. Скористайтеся варіантом завантаження даних з файлу, попередньо сформувавши його в інформаційній базі, з якої виконується перенесення даних.""");
		ТекстСкопироватьВИБ				= НСтр("ru='Скопировать помощник в папку с информационной базой: ';uk='Скопіювати помічник в папку з інформаційною базою: '") + мИмяИБ;
		ЗафиксироватьОшибку(мЭтапКонвертации,ТекстОшибкиПриПодключении, ОписаниеОшибкиПриПодключении); 
		Возврат Ложь;
	КонецПопытки;
	
	Открыта = v7.Initialize(v7.RMTrade, "/D""" + мПутьКИБ + """ /M ", "NO_SPLASH_SHOW");
	
	Если НЕ Открыта Тогда
		ТекстОшибкиПриПодключении		= НСтр("ru='Не удалось произвести подключение к информационной базе: ';uk='Не вдалося зробити підключення до інформаційної бази: '") + мИмяИБ;
		ОписаниеОшибкиПриПодключении	= НСтр("ru='Возможно, Вы отменили подключение к информационной базе, ввели неправильный пароль, либо была попытка немонопольного подключения.';uk='Можливо, Ви скасували підключення до інформаційної бази, ввели неправильний пароль, або була спроба немонопольного підключення.'");
		ТекстСкопироватьВИБ				= НСтр("ru='Скопировать помощник в папку с информационной базой: ';uk='Скопіювати помічник в папку з інформаційною базою: '") + мИмяИБ;
		ЗафиксироватьОшибку(мЭтапКонвертации,ТекстОшибкиПриПодключении, ОписаниеОшибкиПриПодключении);
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Заголовок = v7.ЗаголовокСистемы(НСтр("ru='Проверка базовой версии';uk='Перевірка базової версії'"));
	Исключение
		ТекстОшибкиПриПодключении		= НСтр("ru='Не удалось произвести подключение к информационной базе: ';uk='Не вдалося зробити підключення до інформаційної бази: '") + мИмяИБ;
		ОписаниеОшибкиПриПодключении	= НСтр("ru='Возможно, на Вашем компьютере установлена БАЗОВАЯ версия.';uk=""Можливо, на Вашому комп'ютері встановлена БАЗОВА версія.""");
		ТекстСкопироватьВИБ				= НСтр("ru='Скопировать помощник в папку с информационной базой: ';uk='Скопіювати помічник в папку з інформаційною базою: '") + мИмяИБ;
		ЗафиксироватьОшибку(мЭтапКонвертации,ТекстОшибкиПриПодключении, ОписаниеОшибкиПриПодключении);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Открыта;
	
КонецФункции

// Шаг 1: Проверка идентификатора и версии ИБ
//
Функция ОпределитьКонфигурациюИБ()
	мЭтапКонвертации = "Определение версии и номера релиза конфигурации 77.";
	
	Попытка
		НомерРелизаКонфигурации		= v7.Константа.НомерРелиза;
		ИдентификаторКонфигурации	= v7.глИдентификаторКонфигурации();
	Исключение
		ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Производится перенос данных из нетиповой конфигурации';uk='Виконується перенесення даних з нетипової конфігурації'"), НСтр("ru='Перенос из выбранной конфигурации не поддерживается.';uk='Перенос із обраної конфігурації не підтримується.'"));
		v7 = "";
		Возврат Ложь;
	КонецПопытки;
	
	ВозрастРелизаКонфигурации = Число(Прав(СокрЛП(НомерРелизаКонфигурации), 3));
	
	Отбор = Новый Структура("ИдентификаторКонфигурации");
	Отбор.Вставить("ИдентификаторКонфигурации", ИдентификаторКонфигурации);
	Выборка = Справочники.КонвертацииИзИнформационныхБаз1СПредприятия77.Выбрать(,,Отбор);
	
	
	Если Выборка.Следующий() Тогда
		ВозрастРелизаПравил = Число(Прав(СокрЛП(Выборка.НомерРелиза), 3));
		
		Если ВозрастРелизаПравил > ВозрастРелизаКонфигурации Тогда
			ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Текущая версия правил предназначена для релиза конфигурации не ниже ';uk='Поточна версія правил призначена для релізу конфігурації не нижче '") + Выборка.НомерРелиза, НСтр("ru='Рекомендуется обновить релиз конфигурации информационной базы, из которой производится перенос данных.';uk='Рекомендується оновити реліз конфігурації інформаційної бази, з якої виконується перенесення даних.'"));
			v7 = "";
			Возврат Ложь;
		КонецЕсли;
		
		Если Метаданные().Макеты.Найти("V77Exp_ert") <> Неопределено Тогда
			ЗаписатьФайлыДляПереносаНаДиск(ЭтотОбъект, мПутьВыгрузкиЗагрузки, Ложь);
			мИмяФайлаОбработки	= мПутьВыгрузкиЗагрузки + "V77Exp.ert";
			мИмяФайлаПравил		= мПутьВыгрузкиЗагрузки + "PrB.xml";
			
		Иначе
			ЗаписатьФайлыДляПереносаНаДиск(Выборка, мПутьВыгрузкиЗагрузки, Ложь);
			мИмяФайлаОбработки	= мПутьВыгрузкиЗагрузки + Выборка.КонвертацияОбработка + ".ert";
			мИмяФайлаПравил		= мПутьВыгрузкиЗагрузки + Выборка.КонвертацияПравила + ".xml";
			
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Для выбранной конфигурации конвертация не поддерживается. Рекомендуется использовать конфигурации указанные в справочнике ""Конвертации их информационных баз 1С:Предприятия 7.7"".';uk='Для обраної конфігурації конвертація не підтримується. Рекомендується використовувати конфігурації зазначені в довіднику ""Конвертації з інформаційних баз 1С:Підприємства 7.7"".'"),,,СтатусСообщения.Важное);
	ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Для выбранной конфигурации конвертация не поддерживается';uk='Для обраної конфігурації конвертація не підтримується'"), "");
	v7 = "";
	Возврат Ложь;
	
КонецФункции

// Шаг 2: Выгрузка данных из конфигурации 7.7
//
Функция ВыгрузитьИБ()
	
	Попытка
		
	//ДатаНачалаСтр		= Формат(НачалоГода(ДатаНачала), "ДФ=dd.MM.yyyy");
	////	//
	//ПараметрыВыгрузки = v7.CreateObject("СписокЗначений");
	//ПараметрыВыгрузки.ДобавитьЗначение(мИмяФайлаПравил,					"ИмяФайлаПравил");
	//ПараметрыВыгрузки.ДобавитьЗначение(ДатаНачалаСтр,					"ДатаНачала");
	//ПараметрыВыгрузки.ДобавитьЗначение("ВыполнитьАлгоритм",				"ИмяКоманды");
	//ПараметрыВыгрузки.ДобавитьЗначение("ПолучитьТаблицуЭтаповВыгрузки",	"ИмяАлгоритма");
	//v7.глОбработчикСообщений = ПараметрыВыгрузки;
	//v7.EvalExpr("ОткрытьФормуМодально(""Отчет"", глОбработчикСообщений, """ + мИмяФайлаОбработки + """)");
	//	
	//ТаблицаЭтаповВыгрузки = v7.глОбработчикСообщений;
	//	
	//ТипВозвращенногоЗначения = v7.EvalExpr("ТипЗначенияСтр(глОбработчикСообщений)");
	////	
	//Если ТипВозвращенногоЗначения <> "ТаблицаЗначений" Тогда
	//	Если (ТипВозвращенногоЗначения = "СписокЗначений") И (v7.глОбработчикСообщений.Получить("ИмяФайлаПравил") = Неопределено) Тогда
	//		Результат = v7.глОбработчикСообщений.ВСтрокуСРазделителями();
	//				
	//			СписокОшибок = СтрЗаменить(Результат, ",", Символы.ПС);
	//			Для НомерСтроки = 1 По СтрЧислоСтрок(СписокОшибок) Цикл
	//				СтрокаОшибки = СократитьДвойныеКавычки(СтрПолучитьСтроку(СписокОшибок, НомерСтроки));
	//				Если НЕ ПустаяСтрока(СтрокаОшибки) Тогда
	//					ЗафиксироватьОшибку(мЭтапКонвертации, "Ошибка подключения к информационной базе: " + мИмяИБ, СтрокаОшибки);
	//				КонецЕсли;
	//			КонецЦикла;
	//			
	//		Иначе
	//			ЗафиксироватьОшибку(мЭтапКонвертации, "Ошибка подключения к информационной базе: " + мИмяИБ, "Не удалось открыть обработку V77exp.ert.");
	//			
	//		КонецЕсли;
	//		
	//		v7 = "";
	//		Возврат Ложь;
	//	КонецЕсли;
	//	
	//	КоличествоЭтаповВыгрузки = ТаблицаЭтаповВыгрузки.КоличествоСтрок();
	//	
	//	ШагИндикатора = 46 / КоличествоЭтаповВыгрузки;
	//	
	//	Индикатор = 3;
	//	
	//	мСписокЭтаповВыгрузки = Новый СписокЗначений;
	//	
	//	БезОшибок = Истина;
	//	
	//	ТаблицаЭтаповВыгрузки.ВыбратьСтроки();
	//	Пока ТаблицаЭтаповВыгрузки.ПолучитьСтроку() = 1 Цикл
	//		ОтобразитьТекстСостояния(ТаблицаЭтаповВыгрузки.Представление);
	//
	//		
	//		ОбработкаПрерыванияПользователя();
	//		
	//		ПараметрыВыгрузки = v7.CreateObject("СписокЗначений");
	//		ПараметрыВыгрузки.ДобавитьЗначение(мИмяФайлаПравил,		"ИмяФайлаПравил");
	//		ПараметрыВыгрузки.ДобавитьЗначение(ТаблицаЭтаповВыгрузки.ИспользуемыеПравила,	"ИспользуемыеПравилаВыгрузки");
	//		
	//		мИмяФайлаДанных = мПутьВыгрузкиЗагрузки + "ConvData" + Прав("0" + ТаблицаЭтаповВыгрузки.НомерСтроки, 2) + ".xml";
	//		ПараметрыВыгрузки.ДобавитьЗначение(мИмяФайлаДанных,		"ИмяФайлаДанных");
	//		
	//		Если ЗначениеЗаполнено(ТаблицаЭтаповВыгрузки.ДатаНачалаВыгрузки) Тогда
	//			ПараметрыВыгрузки.ДобавитьЗначение(ТаблицаЭтаповВыгрузки.ДатаНачалаВыгрузки,	"ДатаНачала");
	//		Иначе
	//			ПараметрыВыгрузки.ДобавитьЗначение(ДатаНачалаСтр,	"ДатаНачала");
	//		КонецЕсли;
	//		
	//		Если ЗначениеЗаполнено(ТаблицаЭтаповВыгрузки.ДатаОкончанияВыгрузки) Тогда
	//			ПараметрыВыгрузки.ДобавитьЗначение(ТаблицаЭтаповВыгрузки.ДатаОкончанияВыгрузки,	"ДатаОкончания");
	//		КонецЕсли;
	//		
	//		ПараметрыВыгрузки.ДобавитьЗначение("Выгрузить",			"ИмяКоманды");
	//		
	//		ТаблицаНастройкиПараметров = v7.CreateObject("СписокЗначений");
	//		
	//		СпрФирмы = v7.CreateObject("Справочник.Фирмы");
	//		Фирма = 0;
	//		Если СпрФирмы.НайтиПоКоду(КодФирмы) = 1 Тогда
	//			Фирма = СпрФирмы.ТекущийЭлемент();
	//		КонецЕсли;
	//	//	
	//	//	ТаблицаНастройкиПараметров.ДобавитьЗначение( Фирма,	"Фирма");
	//	//	ТаблицаНастройкиПараметров.ДобавитьЗначение( ПереноситьОбщиеДанные, "ВыгрузитьОбщиеДанные"); 
	//	//	ТаблицаНастройкиПараметров.ДобавитьЗначение( ПереноситьКадровыеДанные, "ВыгрузитьКадровыеДанные"); 
	//	//	ТаблицаНастройкиПараметров.ДобавитьЗначение( ПереноситьРасчетныеДанные, "ВыгрузитьРасчетныеДанные"); 
	//	//	ТаблицаНастройкиПараметров.ДобавитьЗначение( ПереноситьПлановыеДанные, "ВыгрузитьПлановыеРасчетныеДанные"); 
	//	//	ТаблицаНастройкиПараметров.ДобавитьЗначение( ПереноситьНастройкиОтражения, "ВыгрузитьНастройкиОтражения"); 
	//	//	ТаблицаНастройкиПараметров.ДобавитьЗначение( ПереноситьПрочиеДанные, "ВыгрузитьПрочее"); 
	//	//	ПараметрыВыгрузки.ДобавитьЗначение(ТаблицаНастройкиПараметров, "ТаблицаНастройкиПараметров");

	//	
	//	

	//		ПараметрыВыгрузки.ДобавитьЗначение( Фирма,	"Фирма");
	//		ПараметрыВыгрузки.ДобавитьЗначение( ПереноситьОбщиеДанные, "ВыгрузитьОбщиеДанные"); 
	//		ПараметрыВыгрузки.ДобавитьЗначение( ПереноситьКадровыеДанные, "ВыгрузитьКадровыеДанные"); 
	//		ПараметрыВыгрузки.ДобавитьЗначение( ПереноситьРасчетныеДанные, "ВыгрузитьРасчетныеДанные"); 
	//		ПараметрыВыгрузки.ДобавитьЗначение( ПереноситьПлановыеДанные, "ВыгрузитьПлановыеРасчетныеДанные"); 
	//		ПараметрыВыгрузки.ДобавитьЗначение( ПереноситьНастройкиОтражения, "ВыгрузитьНастройкиОтражения"); 
	//		ПараметрыВыгрузки.ДобавитьЗначение( ПереноситьПрочиеДанные, "ВыгрузитьПрочее"); 


	//		v7.глОбработчикСообщений = ПараметрыВыгрузки;
	//		v7.EvalExpr("ОткрытьФормуМодально(""Отчет"", глОбработчикСообщений, """ + мИмяФайлаОбработки + """)");
	//		
	//		Индикатор = Окр(2 + ШагИндикатора * ТаблицаЭтаповВыгрузки.НомерСтроки);
	//		
	//		Результат = v7.глОбработчикСообщений.ВСтрокуСРазделителями();
	//		
	//		Если ТипЗнч(Результат) = Тип("Число") Тогда
	//			ЗафиксироватьОшибку(мЭтапКонвертации, "Не удалось произвести выгрузку данных: " + ТаблицаЭтаповВыгрузки.Представление, "Проверьте корректность данных в информационной базе, из которой осуществляется перенос информации.");
	//			БезОшибок = Ложь;
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если Результат <> "" Тогда
	//			СписокОшибок = СтрЗаменить(Результат, ",", Символы.ПС);
	//			Для НомерСтроки = 1 По СтрЧислоСтрок(СписокОшибок) Цикл
	//				СтрокаОшибки = СократитьДвойныеКавычки(СтрПолучитьСтроку(СписокОшибок, НомерСтроки));
	//				Если НЕ ПустаяСтрока(СтрокаОшибки) Тогда
	//					ЗафиксироватьОшибку(мЭтапКонвертации, "Ошибка получения данных: " + ТаблицаЭтаповВыгрузки.Представление, СтрокаОшибки);
	//				КонецЕсли;
	//			КонецЦикла;
	//			
	//			БезОшибок = Ложь;
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		мСписокЭтаповВыгрузки.Добавить(Прав("0"+ТаблицаЭтаповВыгрузки.НомерСтроки, 2), ТаблицаЭтаповВыгрузки.Представление);
	//		
	//	КонецЦикла;
	//	
	//	v7 = "";
		
	//	мИмяФайлаДанных = мПутьВыгрузкиЗагрузки + "ConvData" + Прав("0" + ТаблицаЭтаповВыгрузки.НомерСтроки, 2) + ".xml";
	
	
	//	ПараметрыВыгрузки = v7.CreateObject("СписокЗначений");
	//	ПараметрыВыгрузки.ДобавитьЗначение(мИмяФайлаПравил,					"ИмяФайлаПравил");
		//ПараметрыВыгрузки.ДобавитьЗначение(ДатаНачалаСтр,					"ДатаНачала");
	//	ПараметрыВыгрузки.ДобавитьЗначение("ВыполнитьАлгоритм",				"ИмяКоманды");
	//	ПараметрыВыгрузки.ДобавитьЗначение("ПолучитьТаблицуЭтаповВыгрузки",	"ИмяАлгоритма");

	
//		мИмяФайлаДанных = мПутьВыгрузкиЗагрузки + "ConvData" + ".xml";

		ДатаНачалаСтр = Формат(НачалоМесяца(ДатаНачала), "ДФ=dd.MM.yyyy");
		ДатаОкончанияСтр = Дата(1,1,1); //Дату окончания не указываем, переносим по последний закрытый период
		
		
		Если ВыгрузкаСКомментированием Тогда
			
			ТаблицаЭтаповВыгрузки =  ПолучитьТаблицуЭтаповВыгрузки();
			
			КоличествоЭтаповВыгрузки = ТаблицаЭтаповВыгрузки.Количество();
			
			ШагИндикатора = 46 / КоличествоЭтаповВыгрузки;
			
			Индикатор = 3;

			мСписокЭтаповВыгрузки = Новый СписокЗначений;
			индекс = 0;
			Для Каждого ЭтапВыгрузки Из ТаблицаЭтаповВыгрузки Цикл
				
				индекс = 1 + индекс;
				
				ОтобразитьТекстСостояния(ЭтапВыгрузки.Представление);
				ОбработкаПрерыванияПользователя();
				
				Индикатор = Окр(2 + ШагИндикатора * индекс);	
				
				мИмяФайлаДанных = мПутьВыгрузкиЗагрузки + "ConvData" + Прав("0" + индекс, 2) + ".xml";
				Результат = v7.ВыгрузкаВ1СЗУП8(Строка(ДатаНачалаСтр), Строка(ДатаОкончанияСтр), мИмяФайлаОбработки, мИмяФайлаПравил, мИмяФайлаДанных, КодФирмы, 
					ПереноситьОбщиеДанные, ПереноситьКадровыеДанные, ПереноситьРасчетныеДанные, ПереноситьПлановыеДанные,
					ПереноситьНастройкиОтражения, ПереноситьПрочиеДанные, 1, ЭтапВыгрузки.ИспользуемыеПравила);
				
				ТипЧисло = Тип("Число");
				Если ТипЗнч(Результат) = ТипЧисло Тогда
					ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Не удалось произвести выгрузку данных из информационной базы ';uk='Не вдалося зробити вивантаження даних з інформаційної бази '") + мИмяИБ, НСтр("ru='Проверьте корректность данных в информационной базе, из которой осуществляется перенос информации. Возможно, с информационной базой работают пользователи. Перенос данных возможен только при наличии монопольного доступа к информационной базе, из которой выгружаются данные.';uk='Перевірте коректність даних в інформаційній базі, з якої здійснюється перенос інформації. Можливо, з інформаційною базою працюють користувачі. Перенесення даних можливе тільки при наявності монопольного доступу до інформаційної бази, з якого вивантажуються дані.'"));
					Возврат Ложь;
				КонецЕсли;
				
				Если Результат <> "" Тогда
					СписокОшибок = СтрЗаменить(Результат, ",", Символы.ПС);
					Для НомерСтроки = 1 По СтрЧислоСтрок(СписокОшибок) Цикл
						ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Ошибка получения данных из информационной базы 1С:Предприятия 7.7: ';uk='Помилка одержання даних з інформаційної бази 1С:Підприємства 7.7: '") + СтрПолучитьСтроку(СписокОшибок, НомерСтроки), НСтр("ru='Проверьте корректность данных в информационной базе, из которой осуществляется перенос информации.';uk='Перевірте коректність даних в інформаційній базі, з якої здійснюється перенос інформації.'"));
					КонецЦикла;
					
				КонецЕсли;
				
				мСписокЭтаповВыгрузки.Добавить(Прав("0"+индекс, 2), ЭтапВыгрузки.Представление);
		
				
			КонецЦикла;
		Иначе
			
			мИмяФайлаДанных = мПутьВыгрузкиЗагрузки + "ConvData" + ".xml";
			Результат = v7.ВыгрузкаВ1СЗУП8(Строка(ДатаНачалаСтр), Строка(ДатаОкончанияСтр), мИмяФайлаОбработки, мИмяФайлаПравил, мИмяФайлаДанных, КодФирмы, 
				ПереноситьОбщиеДанные, ПереноситьКадровыеДанные, ПереноситьРасчетныеДанные, ПереноситьПлановыеДанные,
				ПереноситьНастройкиОтражения, ПереноситьПрочиеДанные, 0, 0);
			
			ТипЧисло = Тип("Число");
			Если ТипЗнч(Результат) = ТипЧисло Тогда
				ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Не удалось произвести выгрузку данных из информационной базы ';uk='Не вдалося зробити вивантаження даних з інформаційної бази '") + мИмяИБ, НСтр("ru='Проверьте корректность данных в информационной базе, из которой осуществляется перенос информации. Возможно, с информационной базой работают пользователи. Перенос данных возможен только при наличии монопольного доступа к информационной базе, из которой выгружаются данные.';uk='Перевірте коректність даних в інформаційній базі, з якої здійснюється перенос інформації. Можливо, з інформаційною базою працюють користувачі. Перенесення даних можливе тільки при наявності монопольного доступу до інформаційної бази, з якого вивантажуються дані.'"));
				Возврат Ложь;
			КонецЕсли;
			
			Если Результат <> "" Тогда
				СписокОшибок = СтрЗаменить(Результат, ",", Символы.ПС);
				Для НомерСтроки = 1 По СтрЧислоСтрок(СписокОшибок) Цикл
					ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Ошибка получения данных из информационной базы 1С:Предприятия 7.7: ';uk='Помилка одержання даних з інформаційної бази 1С:Підприємства 7.7: '") + СтрПолучитьСтроку(СписокОшибок, НомерСтроки), НСтр("ru='Проверьте корректность данных в информационной базе, из которой осуществляется перенос информации.';uk='Перевірте коректність даних в інформаційній базі, з якої здійснюється перенос інформації.'"));
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Истина;
	Исключение
		ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Не удалось произвести выгрузку данных из информационной базы: ';uk='Не вдалося провести вивантаження даних з інформаційної бази: '") + мИмяИБ, НСтр("ru='Возможно, с информационной базой работают пользователи. Перенос данных возможен только при наличии монопольного доступа к информационной базе, из которой выгружаются данные.';uk='Можливо, з інформаційною базою працюють користувачі. Перенесення даних можливе тільки при наявності монопольного доступу до інформаційної бази, з якого вивантажуються дані.'"));
		v7 = "";
		Возврат Ложь;
		
	КонецПопытки;
	//
КонецФункции

// Шаг 3: Инициализация универсальной обработки загрузки и проверка существования выгруженных файлов
//
Функция ИнициализироватьОбменИзИБ()
	
	//Если ТипЗнч(мСписокЭтаповВыгрузки) <> Тип("СписокЗначений") ИЛИ мСписокЭтаповВыгрузки.Количество() = 0 Тогда
	//	ЗафиксироватьОшибку(мЭтапКонвертации, "Не найдена информация о выгруженных данных", "Структура файла данных, из которого производится загрузка нарушена. Возможно, при выгрузке были использованы некорректные правила выгрузки данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия 7.7"".");
	//	Возврат Ложь;
	//КонецЕсли;
	//
	Попытка
		мОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
		мОбработкаОбмена.РежимОбмена = "Загрузка";
	//	мОбработкаОбмена.НеВыводитьНикакихИнформационныхСообщенийПользователю = Истина;
		ВыбФайл = Новый Файл(мИмяФайлаДанных);
		Если ВыбФайл.Существует() Тогда
			ИмяФайлаОбмена = ВыбФайл.ПолноеИмя;
			мОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаОбмена;
			мОбработкаОбмена.ОткрытьФайлЗагрузки(Истина);
			
			Если НЕ мОбработкаОбмена.мБылиПрочитаныПравилаОбменаПриЗагрузке Тогда
				ЭлементыФормы.ИмяФайлаВыгруженныхДанных.Значение = "";
				Возврат Ложь;
			КонецЕсли;
			
			Если мБазоваяПоставка Тогда //для базовой отдельно обработаем загрузку сведений об организации
				Если НЕ ИзменитьСведенияОбОрганизации(ИмяФайлаОбмена) Тогда
					ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Отсутствуют сведения об ';uk='Відсутні відомості про '") + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации") + НСтр("ru=', Возможно, при выгрузке были использованы некорректные правила выгрузки данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия 7.7"".';uk=', Можливо, при вивантаженні були використані некоректні правила вивантаження даних. Рекомендується використовувати правила вивантаження даних з довідника ""Конвертації з інформаційних баз 1С:Підприємства 7.7"".'"));
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Возврат Истина;
		Иначе
			ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Не найден файл с выгруженными данными: ';uk='Не знайдений файл із вивантаженими даними: '") + мИмяФайлаДанных, НСтр("ru='Во временном каталоге, из которого производится загрузка, отсутствуют файл данных.';uk='У тимчасовому каталозі, з якого виконується завантаження, відсутній файл даних.'"));
			Возврат Ложь;
			
		КонецЕсли;
		
	Исключение
		ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Не удалось инициализировать обработку загрузки данных';uk='Не вдалося ініціалізувати обробку завантаження даних'"), НСтр("ru='Структура файла данных, из которого производится загрузка нарушена. Возможно, при выгрузке были использованы некорректные правила выгрузки данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия 7.7"".';uk='Структура файлу даних, з якого виконується завантаження порушена. Можливо, при вивантаженні були використані некоректні правила вивантаження даних. Рекомендується використовувати правила вивантаження даних з довідника ""Конвертації з інформаційних баз 1С:Підприємства 7.7"".'"));
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

// Шаг 3: Загрузка данных
//
Функция ЗагрузитьИзФайловВИБ()
	Организация = "";
	
	
	Если ВыгрузкаСКомментированием Тогда
		
		КоличествоЭтаповЗагрузки = мСписокЭтаповВыгрузки.Количество();
		ШагИндикатора = 48 / КоличествоЭтаповЗагрузки;
		Индикатор = 51;
		БезОшибок = Истина;
		
		Для Каждого ЭтапЗагрузки Из мСписокЭтаповВыгрузки Цикл
			ОтобразитьТекстСостояния(ЭтапЗагрузки.Представление);
			ОбработкаПрерыванияПользователя();
			мОбработкаОбмена.ИмяФайлаОбмена	= мПутьВыгрузкиЗагрузки + "ConvData" + ЭтапЗагрузки.Значение + ".xml";
			мОбработкаОбмена.ВыполнитьЗагрузку();
			Индикатор = Окр(52 + ШагИндикатора * ЭтапЗагрузки.Значение);
			Если мОбработкаОбмена.ФлагОшибки Тогда
				ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Не удалось произвести загрузку данных: ';uk='Не вдалося провести завантаження даних: '") + ЭтапЗагрузки.Представление, НСтр("ru='Проверьте служебные сообщения в окне сообщений.';uk='Перевірте службові повідомлення у вікні повідомлень.'"));
				БезОшибок = Ложь;
				Продолжить;
			Иначе
				Организация = мОбработкаОбмена.Параметры.Организация;
			КонецЕсли;
		КонецЦикла;
		Возврат БезОшибок;
	Иначе
		мОбработкаОбмена.ИмяФайлаОбмена = мИмяФайлаДанных;
		мОбработкаОбмена.ФлагКомментироватьОбработкуОбъектов = Истина;
		мОбработкаОбмена.ВыполнитьЗагрузку();
		Если мОбработкаОбмена.ФлагОшибки Тогда
			ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Не удалось произвести загрузку данных';uk='Не вдалося зробити завантаження даних'"), НСтр("ru='Возможно, нарушена структура файла данных из-за использования нетиповых правил переноса данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия 7.7"".';uk='Можливо, порушена структура файлу даних через використання нетипових правил перенесення даних. Рекомендується використовувати правила вивантаження даних з довідника ""Конвертації з інформаційних баз 1С:Підприємства 7.7"".'"));
		Иначе
			Организация = Фирма;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;	
КонецФункции

// Шаг 4: Проверка загруженных данных
//
Процедура ПроверитьДанныеИзИБ()
	
	Попытка
		СписокПроверок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(мОбработкаОбмена.Параметры.Проверки);
	Исключение
		ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Не удалось получить правила проверки загруженных данных';uk='Не вдалося одержати правила перевірки завантажених даних'"), НСтр("ru='Возможно, нарушена структура файла данных из-за использования нетиповых правил переноса данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия 7.7"".';uk='Можливо, порушена структура файлу даних через використання нетипових правил перенесення даних. Рекомендується використовувати правила вивантаження даних з довідника ""Конвертації з інформаційних баз 1С:Підприємства 7.7"".'"));
		Возврат;
	КонецПопытки;
	
	Для Каждого Проверка Из СписокПроверок Цикл
		Попытка
			Выполнить(мОбработкаОбмена.Алгоритмы["Проверить" + Проверка]);
		Исключение
			ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Не удалось выполнить алгоритм проверки ""';uk='Не вдалося виконати алгоритм перевірки ""'") + Проверка + """", НСтр("ru='Возможно, нарушена структура файла данных из-за использования нетиповых правил переноса данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия 7.7"".';uk='Можливо, порушена структура файлу даних через використання нетипових правил перенесення даних. Рекомендується використовувати правила вивантаження даних з довідника ""Конвертації з інформаційних баз 1С:Підприємства 7.7"".'"));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// ОБМЕН ЧЕРЕЗ ФАЙЛ

// Переход к диалогу загрузки данных из файла
//
Процедура ЗагрузитьИзФайла()
	
	мИмяФайлаДанных = "";
	
	мПрефиксСтраниц = "Ф";
	
	Шагнуть();
	
КонецПроцедуры

// Процедура выбора файла для загрузки
//
Процедура ВыборФайла(Элемент, ПроверятьСуществование = Ложь)
	
	ДиалогФыбораФайла								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогФыбораФайла.Фильтр						=	НСтр("ru='Файл данных (*.xml)|*.xml|Архивный файл данных (*.aml)|*.aml';uk='Файл даних (*.xml)|*.xml|Архівний файл даних (*.aml)|*.aml'");
	ДиалогФыбораФайла.Расширение					=	"xml";
	
	ДиалогФыбораФайла.Заголовок						=	НСтр("ru='Выберите файл';uk='Виберіть файл'");
	ДиалогФыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогФыбораФайла.ИндексФильтра					=	0;
	ДиалогФыбораФайла.ПолноеИмяФайла				=	Элемент.Значение;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	ПроверятьСуществование;
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогФыбораФайла.ПолноеИмяФайла;
		ИнициализироватьОбменИзФайла(ДиалогФыбораФайла.ПолноеИмяФайла, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Запуск процесса конвертации из выгруженного файла
//
Процедура ЗагрузкаИнформационнойБазы()
	
	ОтобразитьТекстСостояния(НСтр("ru='Начало переноса данных: ';uk='Початок перенесення даних: '") + ТекущаяДата(), , 0);
	
	мСписокЭтаповВыгрузки = 0;
	
	ТаблицаОшибок.Очистить();
	
	ЭлементыФормы[мПрефиксСтраниц + "ДалееКон"].Доступность = Ложь;
	
	мИмяФайлаДанных = ИмяФайлаВыгруженныхДанных;
	
	// Шаг № 1 инициализация обмена и загрузка данных
	ОтобразитьТекстСостояния(НСтр("ru='Чтение выгруженных данных из файла';uk='Читання вивантажених даних з файлу'"));
	мЭтапКонвертации = "Запуск обработки загрузки данных";
	Перерисовать(3, "Выполняется", Истина);
	Если НЕ ИнициализироватьОбменИзФайла(мИмяФайлаДанных) Тогда
		Перерисовать(3);
		Возврат;
	КонецЕсли;
	
	// Шаг № 2 загрузка данных
	ОтобразитьТекстСостояния(НСтр("ru='Загрузка данных из файла';uk='Завантаження даних з файлу'"));
	мЭтапКонвертации = "Загрузка данных";
	Если НЕ ЗагрузитьИзФайлаВИБ() Тогда
		Перерисовать(3);
		Возврат;
	КонецЕсли;
	
	Перерисовать(3, "Успех", Истина);
	
	// Шаг № 3 проверка загруженных данных
	мЭтапКонвертации = "Проверка данных";
	ОтобразитьТекстСостояния(НСтр("ru='Проверка загруженных данных';uk='Перевірка завантажених даних'"));
	Перерисовать(4, "Выполняется", Истина);
	Если ТаблицаОшибок.Количество() <> 0 Тогда
		Перерисовать(4);
	Иначе
		Перерисовать(4, "Успех", Истина);
	КонецЕсли;
	
КонецПроцедуры

// Шаг 1: Инициализация универсальной обработки загрузки и проверка существования файла с выгруженными данными
//
Функция ИнициализироватьОбменИзФайла(ИмяФайла, ФормироватьСведения = Ложь)
	
	Попытка
		мОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
		мОбработкаОбмена.РежимОбмена = "Загрузка";
	//*	мОбработкаОбмена.НеВыводитьНикакихИнформационныхСообщенийПользователю = Истина;
		ВыбФайл = Новый Файл(ИмяФайла);
		Если ВыбФайл.Существует() Тогда
			ИмяФайлаОбмена = ВыбФайл.ПолноеИмя;
			мОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаОбмена;
			мОбработкаОбмена.ОткрытьФайлЗагрузки(Истина);
			
			Если НЕ мОбработкаОбмена.мБылиПрочитаныПравилаОбменаПриЗагрузке Тогда
				ЭлементыФормы.ИмяФайлаВыгруженныхДанных.Значение = "";
				Возврат Ложь;
			КонецЕсли;
			
			Если мБазоваяПоставка И НЕ ФормироватьСведения Тогда //для базовой отдельно обработаем загрузку сведений об организации
				Если НЕ ИзменитьСведенияОбОрганизации(ИмяФайлаОбмена) Тогда
					ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Отсутствуют сведения об ';uk='Відсутні відомості про '") + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации") + НСтр("ru=', Возможно, при выгрузке были использованы некорректные правила выгрузки данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия 7.7"".';uk=', Можливо, при вивантаженні були використані некоректні правила вивантаження даних. Рекомендується використовувати правила вивантаження даних з довідника ""Конвертації з інформаційних баз 1С:Підприємства 7.7"".'"));
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если мПрефиксСтраниц = "Ф" И ФормироватьСведения Тогда
				СформироватьСведенияОФайле();
			КонецЕсли;
			Возврат Истина;
		Иначе
			ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Не найден файл с выгруженными данными: ';uk='Не знайдений файл із вивантаженими даними: '") + ИмяФайла, НСтр("ru='В каталоге, из которого производится загрузка, файл данных отсутствует. Укажите корректный путь к файлу данных.';uk='У каталозі, з якого виконується завантаження, файл даних відсутній. Укажіть коректний шлях до файлу даних.'"));
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Не удалось инициализировать обработку загрузки данных';uk='Не вдалося ініціалізувати обробку завантаження даних'"), НСтр("ru='Структура файла данных, из которого производится загрузка нарушена. Возможно, при выгрузке были использованы некорректные правила выгрузки данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия 7.7"".';uk='Структура файлу даних, з якого виконується завантаження порушена. Можливо, при вивантаженні були використані некоректні правила вивантаження даних. Рекомендується використовувати правила вивантаження даних з довідника ""Конвертації з інформаційних баз 1С:Підприємства 7.7"".'"));
		ЭлементыФормы.ИмяФайлаВыгруженныхДанных.Значение = "";
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Формирует внешнее представление периода, заданного датами начала и окончания периода. 
// Процедура используется в качестве обработчика события для полей ввода
// ДатаНачала и ДатаОкончания. Назначается методом ПодключитьОбработчикИзмененияДанных
// в обработчике "При открытии"
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//
//
// Параметры:
//  
// 
Процедура СформироватьСведенияОФайле()

	ОткрытьФайлДанных(ИмяФайлаВыгруженныхДанных);

	ТипДата                  = Тип("Дата");
	
	// Основные сведения
	Конфигурация			= мФайлОбмена.ПолучитьАтрибут("ИмяКонфигурацииИсточника");
	НомерРелиза				= мФайлОбмена.ПолучитьАтрибут("НомерРелиза");
	НаименованиеОрганизации	= мФайлОбмена.ПолучитьАтрибут("Организация");
	
	// Период выгрузки
	ДатаНачала		= XMLЗначение(ТипДата, СокрП(мФайлОбмена.ПолучитьАтрибут("НачалоПериодаВыгрузки")));
	ДатаОкончания	= XMLЗначение(ТипДата, СокрП(мФайлОбмена.ПолучитьАтрибут("ОкончаниеПериодаВыгрузки")));
	
	ГодНачала	= Формат(Год(ДатаНачала),"ЧЦ=4; ЧГ=");
	
	МесяцОкончания	= Формат(ДатаОкончания, "Л=ru; ДФ=ММММ");
	ГодОкончания	= Формат(Год(ДатаОкончания),"ЧЦ=4; ЧГ=");
	
	СтрПериод = НСтр("ru=' с Января ';uk=' з Січня '") + ГодНачала + НСтр("ru=' года по ';uk=' року по'") + МесяцОкончания + " " + ГодОкончания + НСтр("ru=' года';uk=' року'");
	
	ПредставлениеПериодаВыгрузки = НСтр("ru='Кадровые данные за все время, расчетные данные';uk='Кадрові дані за весь час, розрахункові дані'") + СтрПериод;
	
	//Дата создания файла
	ДатаВыгрузкиДанных = XMLЗначение(ТипДата, СокрП(мФайлОбмена.ПолучитьАтрибут("ДатаВыгрузки")));
	
	// Размещение надписей на форме
	ЭлементыФормы.НадписьКонфигурация.Заголовок	= Конфигурация;
	ЭлементыФормы.НадписьНомерРелиза.Заголовок	= НомерРелиза;
	ЭлементыФормы.НадписьОрганизация.Заголовок	= НаименованиеОрганизации;
	ЭлементыФормы.НадписьПериод.Заголовок		= ПредставлениеПериодаВыгрузки;
	ЭлементыФормы.НадписьДата.Заголовок			= Формат(ДатаВыгрузкиДанных, "Л=ru; ДЛФ=DD; ДП=-");
	
	Если ТипЗнч(мФайлОбмена) = Тип("ЧтениеXML") Тогда
		мФайлОбмена.Закрыть();
	КонецЕсли;
	
КонецПроцедуры // СформироватьПредставлениеПериода() 

// Шаг 2: Загрузка данных
//
Функция ЗагрузитьИзФайлаВИБ()
	
	Организация = "";
	
	ОбработкаПрерыванияПользователя();
	
	мОбработкаОбмена.ИмяФайлаОбмена		= мИмяФайлаДанных;
	мОбработкаОбмена.ВыполнитьЗагрузку();
	
	Если мОбработкаОбмена.ФлагОшибки Тогда
		ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Не удалось произвести загрузку данных';uk='Не вдалося зробити завантаження даних'"), НСтр("ru='Возможно, нарушена структура файла данных из-за использования нетиповых правил переноса данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия 7.7"".';uk='Можливо, порушена структура файлу даних через використання нетипових правил перенесення даних. Рекомендується використовувати правила вивантаження даних з довідника ""Конвертації з інформаційних баз 1С:Підприємства 7.7"".'"));
		Возврат Ложь;
	Иначе
		Организация = мОбработкаОбмена.Параметры.Организация;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Шаг 3: Проверка загруженных данных
//
Процедура ПроверитьДанныеИзФайла()
	
	Попытка
		СписокПроверок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(мОбработкаОбмена.Параметры.Проверки);
	Исключение
		ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Не удалось получить правила проверки загруженных данных';uk='Не вдалося одержати правила перевірки завантажених даних'"), НСтр("ru='Возможно, нарушена структура файла данных из-за использования нетиповых правил переноса данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия 7.7"".';uk='Можливо, порушена структура файлу даних через використання нетипових правил перенесення даних. Рекомендується використовувати правила вивантаження даних з довідника ""Конвертації з інформаційних баз 1С:Підприємства 7.7"".'"));
		Возврат;
	КонецПопытки;
	
	Для Каждого Проверка Из СписокПроверок Цикл
		Попытка
			Выполнить(мОбработкаОбмена.Алгоритмы["Проверить" + Проверка]);
		Исключение
			ЗафиксироватьОшибку(мЭтапКонвертации, НСтр("ru='Не удалось выполнить алгоритм проверки ""';uk='Не вдалося виконати алгоритм перевірки ""'") + Проверка + """", НСтр("ru='Возможно, нарушена структура файла данных из-за использования нетиповых правил переноса данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия 7.7"".';uk='Можливо, порушена структура файлу даних через використання нетипових правил перенесення даних. Рекомендується використовувати правила вивантаження даних з довідника ""Конвертації з інформаційних баз 1С:Підприємства 7.7"".'"));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	ЭлементыФормы.НадписьПояснениеЗагрузитьИзФайла.Заголовок = 
		НСтр("ru='Выберите этот вариант, если Вы уже выгрузили данные из Вашей информационной базы при помощи ""Помощника перехода на ';uk='Виберіть цей варіант, якщо Ви вже вивантажили дані з Вашої інформаційної бази за допомогою ""Помічника переходу на '") + Метаданные.Синоним + """";
		
	ЭлементыФормы.НадписьОрганизацияЗаголовок.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	
	ДатаНачала = НачалоГода(РабочаяДата);
	ИзменитьПериод(,Истина);
	
	мНомерСтраницы = 0;
	
	Если ПереноситьИз77 Тогда
		ЗагрузитьИзИБ();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура инициации процесса конвертации из ИБ
//
Процедура ЗагрузитьИзИБНажатие(Элемент)
	
	ЗагрузитьИзИБ();
	
КонецПроцедуры

// Процедура инициации процесса конвертации из файла
//
Процедура ЗагрузитьИзФайлаНажатие(Элемент)
	
	ЗагрузитьИзФайла();
	
КонецПроцедуры

// Процедура отработки движения вперед
//
Процедура ДалееНажатие(Элемент)
	
	Шагнуть();
	ОтработатьНажатиеВперед();
	
КонецПроцедуры

// Процедура возврата к первой странице
//
Процедура ВНачалоНажатие(Элемент)
	
	ЭлементыФормы.ПанельКонвертации.ТекущаяСтраница = ЭлементыФормы.ПанельКонвертации.Страницы.СтраницаНачало;
	мНомерСтраницы = 0;
	ОстаткиОбороты = 0;
	
КонецПроцедуры

// Процедура записывает путь в соответствующую переменную
//
Процедура ТаблицаПутиПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		мПутьКИБ = "";
		мИмяИБ = "";
	Иначе
		мПутьКИБ = Элемент.ТекущиеДанные.Путь;
		мИмяИБ = Элемент.ТекущиеДанные.Имя;
	КонецЕсли;
	
КонецПроцедуры

// Процедура печати списка ошибок
//
Процедура ПечатьОшибкиНажатие(Элемент)
	
	Макет = ПолучитьМакет("СписокОшибок");
	ОтчетОбОшибках = Новый ТабличныйДокумент;
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Если мПрефиксСтраниц = "ИБ" Тогда
		ОбластьШапка.Параметры.ИмяИБ = мИмяИБ;
		ОбластьШапка.Параметры.ПутьКИБ = мПутьКИБ;
	Иначе
		ОбластьШапка.Параметры.ИмяИБ = "Файл данных";
		ОбластьШапка.Параметры.ПутьКИБ = ИмяФайлаВыгруженныхДанных;
	КонецЕсли;
	
	ОтчетОбОшибках.Вывести(ОбластьШапка);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		ОбластьСтрока.Параметры.Этап			= СтрокаТаблицы.Этап;
		ОбластьСтрока.Параметры.Ошибка			= СтрокаТаблицы.Ошибка;
		ОбластьСтрока.Параметры.Рекомендации	= СтрокаТаблицы.Рекомендации;
		ОбластьСтрока.Параметры.Расшифровка		= СтрокаТаблицы.Расшифровка;

		ОтчетОбОшибках.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ОтчетОбОшибках, , , НСтр("ru='Список ошибок конвертации данных из 1С: 7.7';uk='Список помилок конвертації даних з 1С: 7.7'"), );
	
КонецПроцедуры

// Процедура отработки изменения пути к файлу выгрузки
//
Процедура ПутьКФайлуПриИзменении(Элемент)
	
	// Размещение надписей на форме
	ЭлементыФормы.НадписьКонфигурация.Заголовок	= "";
	ЭлементыФормы.НадписьНомерРелиза.Заголовок	= "";
	ЭлементыФормы.НадписьОрганизация.Заголовок	= "";
	ЭлементыФормы.НадписьПериод.Заголовок		= "";
	ЭлементыФормы.НадписьДата.Заголовок			= "";
	
	ИнициализироватьОбменИзФайла(ИмяФайлаВыгруженныхДанных, Истина);
	
КонецПроцедуры

// Процедура выбора файла выгрузки
//
Процедура ИмяФайлаВыгруженныхДанныхНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыборФайла(Элемент);
	
КонецПроцедуры

// Открывает файл обмена во внешнем приложении
//
Процедура ИмяФайлаВыгруженныхДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложение("explorer " + Элемент.Значение);
	СтандартнаяОбработка = ЛОЖЬ;
	
КонецПроцедуры

// Процедура продолжения работы в том же варианте конвертации
//
Процедура ПродолжитьНажатие(Элемент)
	
	мНомерСтраницы = 0;
	Шагнуть();
	
КонецПроцедуры

Процедура ПерейтиКЗагрузкеФайлаНажатие(Элемент)
	
	мНомерСтраницы	= 0;
	мПрефиксСтраниц	= "Ф";
	
	Шагнуть();
	ОтработатьНажатиеВперед();
	
КонецПроцедуры

Процедура НадписьСкопироватьВИБНажатие(Элемент)
	
	Если Метаданные().Макеты.Найти("PrB_Wiz_ert") <> Неопределено Тогда
		ЗаписатьФайлыДляПереносаНаДиск(ЭтотОбъект, мПутьКИБ + "ExtForms\");
	Иначе
		Выборка = Справочники.КонвертацииИзИнформационныхБаз1СПредприятия77.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаписатьФайлыДляПереносаНаДиск(Выборка, мПутьКИБ + "ExtForms\");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьСкопироватьВПапкуНажатие(Элемент)
	
	ДиалогВыбораФайла				= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок		= НСтр("ru='Укажите каталог для записи файлов конвертации';uk='Укажіть каталог для запису файлів конвертації'");
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Если Метаданные().Макеты.Найти("PrB_Wiz_ert") <> Неопределено Тогда
			ЗаписатьФайлыДляПереносаНаДиск(ЭтотОбъект, ДиалогВыбораФайла.Каталог + "\");
		Иначе
			Выборка = Справочники.КонвертацииИзИнформационныхБаз1СПредприятия77.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаписатьФайлыДляПереносаНаДиск(Выборка, ДиалогВыбораФайла.Каталог + "\");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИБ0ДалееНажатие(Элемент)
	ЕстьПодключениеКИБ = ПодключитьсяКИБ();
	
	Если НЕ ЕстьПодключениеКИБ Тогда
		КонвертацияЗавершена();
		Возврат;
	КонецЕсли;
		
	ОтобразитьТекстСостояния(НСтр("ru='Определение конфигурации и номера релиза информационной базы: ';uk='Визначення конфігурації й номера релізу інформаційної бази: '") + мИмяИБ);
	Если НЕ ОпределитьКонфигурациюИБ() Тогда
	//	Перерисовать(1);
	//	Индикатор = 100;
	КонвертацияЗавершена();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуОрганизаций();
	
	Шагнуть();
	ОтработатьНажатиеВперед();

КонецПроцедуры

Процедура ТаблицаОрганизацийПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		КодФирмы = "";
		Фирма = "";          
	Иначе
		КодФирмы = Элемент.ТекущиеДанные.Код;
		Фирма = Элемент.ТекущиеДанные.Наименование;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьВсеПараметры(Элемент)
	ПереноситьОбщиеДанные = Истина;
	ПереноситьКадровыеДанные = Истина;
	ПереноситьРасчетныеДанные = Истина;
	ПереноситьПлановыеДанные = Истина;
	ПереноситьНастройкиОтражения = Истина;
	ПереноситьПрочиеДанные = Истина;	
КонецПроцедуры

Процедура ОтменитьВсеПараметры(Элемент)
	ПереноситьОбщиеДанные = Ложь;
	ПереноситьКадровыеДанные = Ложь;
	ПереноситьРасчетныеДанные = Ложь;
	ПереноситьПлановыеДанные = Ложь;
	ПереноситьНастройкиОтражения = Ложь;
	ПереноситьПрочиеДанные = Ложь;
КонецПроцедуры

Процедура ПриЗакрытии()
	//чтоб не было проблем при следующей попытки загрузки из 77
	v7 = "";
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	ЭлементыФормы.ПереноситьНастройкиОтражения.Доступность = ПереноситьПлановыеДанные;
	Если НЕ ПереноситьПлановыеДанные И ПереноситьНастройкиОтражения Тогда
		ПереноситьНастройкиОтражения = Ложь; 
	КонецЕсли;	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мЭтапКонвертации = "";

мПутьВыгрузкиЗагрузки = КаталогВременныхФайлов();

ТаблицаОшибок.Колонки.Добавить("Этап");
ТаблицаОшибок.Колонки.Добавить("Ошибка");
ТаблицаОшибок.Колонки.Добавить("Рекомендации");
ТаблицаОшибок.Колонки.Добавить("Расшифровка");

мШрифтОбычный = Новый Шрифт(,,,,,);
мШрифтЖирный = Новый Шрифт(,, Истина,,,);

мБазоваяПоставка = (Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0);
