Перем НомерТекущейСтраницы;
Перем мСписокНедоступныхРасчетов;           //  Для синхронизации строк табличных полей
Перем ТипНачислений; 				        //  Тип ПланВидовРасчетаСсылка.УправленческиеНачисления 
Перем ТипУдержаний;  					    //  Тип ПланВидовРасчетаСсылка.УправленческиеУдержания
Перем ДокИзменениеСхемМотивацииРаботников;  //  Ссылка на документ "Изменение Схземы мотивации"
Перем мТабличнаяЧасть;                                           

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ
// 

// Процедура приведения обработки в исходное состояние.
//
// Параметры
//  НЕТ.
//
Процедура ОчиститьВсе()

	// Очистить подразделение и должность.
	Подразделение = "";
	Должность = "";
	
	ДанныеДокумента = "";
	ДанныеКП = "";
	
	// Очистить ссылку на документ.
    ДокИзменениеСхемМотивацииРаботников = "";
	
	// Переключить страницы.
	НомерТекущейСтраницы = 0;
	СтраницаДляПоказа = ЭлементыФормы.Панель.Страницы.Получить(НомерТекущейСтраницы);
    ЭлементыФормы.Панель.ТекущаяСтраница = СтраницаДляПоказа;
	
	// Кнопки "Назад / Дальше"
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Дальше.Доступность = ложь;
    ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = ложь;


КонецПроцедуры // ОчиститьВсе()

// Отображает движение страниц.
//
// Параметры
//  Направление  – Булево – определяет направление 
//                 смещения страниц. Если Направление 
//				   Истина - следующая страница
//				   иначе предыдущая.
//
Процедура СдвигСтраниц(Направление)

	НомерСтраницы = НомерТекущейСтраницы;
	
	
	// Проверки на страницах.
	
	// Проверка на присутствие видов расчета.
	Если Направление 
	   И НомерСтраницы = 1 
	   И ВидыРасчета.Количество()<1 Тогда
	   Сообщить(НСтр("ru='Должен быть хотя бы один вид расчета в схеме мотивации!';uk='Повинен бути хоча б один вид розрахунку в схемі мотивації!'"));
	   Возврат
    КонецЕсли;
	
	
	// Проверка на незаполненные строки.
	Если Направление 
	   И НомерСтраницы = 1 
	   И ВидыРасчета.Количество()>1 Тогда
	   
	   Для каждого строкаРасчетов из ВидыРасчета Цикл
		   Если НЕ ЗначениеЗаполнено(строкаРасчетов.ВидРасчета) Тогда
				СтрокаСообщения = НСтр("ru='Ошибка. В строке № ';uk='Помилка. У рядку № '")+ строка (строкаРасчетов.НомерСтроки) + НСтр("ru=' не введен вид расчета!';uk=' не введено вид розрахунку!'");
			    Сообщить(СтрокаСообщения);
				Возврат
	   	   КонецЕсли;
				
	   КонецЦикла;
    КонецЕсли;
	
	// Проверка на дублирование видов расчета.
	Если Направление 
	   И НомерСтраницы = 1 
	   И ВидыРасчета.Количество()>1 Тогда
	   
	   Для каждого строкаРасчетов из ВидыРасчета Цикл
		    Для каждого строкаРасчетовПроверка из ВидыРасчета Цикл
				Если строкаРасчетов.ВидРасчета = строкаРасчетовПроверка.ВидРасчета 
				   И строкаРасчетов.НомерСтроки <> строкаРасчетовПроверка.НомерСтроки Тогда
				    СтрокаСообщения = НСтр("ru='Ошибка. В строках №';uk='Помилка. У рядках №'")+ строка (строкаРасчетов.НомерСтроки) + НСтр("ru=' и ';uk=' і '") + строка (строкаРасчетовПроверка.НомерСтроки) + НСтр("ru=' введены одинаковые виды расчета!';uk=' введені однакові види розрахунку!'");
					Сообщить(СтрокаСообщения);
	   				Возврат 
				КонецЕсли;
				
	   		КонецЦикла;
	   КонецЦикла;
    КонецЕсли;
	
	// Сдвиг страницы.
	Если  Направление Тогда
		// Вперед	
		НомерСтраницы = НомерСтраницы + 1;
		Если  НомерСтраницы >= 3 Тогда 
			НомерСтраницы = 3;
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Дальше.Доступность = ложь;
	    КонецЕсли;

	Иначе
		// Назад
		НомерСтраницы = НомерСтраницы - 1;
		Если  НомерСтраницы <= 0 Тогда 
			НомерСтраницы = 0;
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = ложь;
	    КонецЕсли;
	
	КонецЕсли;	
	
	СтраницаДляПоказа = ЭлементыФормы.Панель.Страницы.Получить(НомерСтраницы);
    ЭлементыФормы.Панель.ТекущаяСтраница = СтраницаДляПоказа;

	НомерТекущейСтраницы = НомерСтраницы;
 
КонецПроцедуры // СдвигСтраниц()

// Получает существующие виды расчета, значения показателей
// для данного подразделения и должности.
//
// Параметры
//  Нет  
//
Процедура ПолучитьСМ()

	// Проверка заполнения должности и подразделения.
	Если НЕ ЗначениеЗаполнено(Должность) И НЕ ЗначениеЗаполнено(Подразделение) Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Дальше.Доступность = ложь;
		Возврат;	
	КонецЕсли;
	
    ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Дальше.Доступность = истина;	
	
	// Очистить ссылку на документ.
    ДокИзменениеСхемМотивацииРаботников = "";
	
	// Получение данных их кадрового плана.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	                |	КадровыйПланСрезПоследних.Количество
	                |ИЗ
	                |	РегистрСведений.КадровыйПлан.СрезПоследних(,Подразделение = &Подразделение И Должность = &Должность) КАК КадровыйПланСрезПоследних";
	
	Запрос.УстановитьПараметр("Должность",Должность);
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	Запрос.УстановитьПараметр("Решение",Перечисления.СостоянияОбъектов.Утвержден);

	ВыборкаСуществующихЗаписей = Запрос.Выполнить().Выбрать();
	
	СтрокаСообщенияКадровогоплана = НСтр("ru='В Кадровом плане нет записей для подразделения ""';uk='В Кадровому плані немає записів для підрозділу ""'") + Строка(Подразделение) 
									+ НСтр("ru='"" с должностью ""';uk='"" з посадою ""'") + Строка(Должность) + """.";
	Если ВыборкаСуществующихЗаписей.Количество()>0 Тогда
		ВыборкаСуществующихЗаписей.Следующий();
		СтрокаСообщенияКадровогоплана = НСтр("ru='Для должности ""';uk='Для посади ""'") + Строка(Должность) + НСтр("ru='"" в подразделении ""';uk='"" в підрозділі ""'") + Строка(Подразделение) 
		                                + НСтр("ru='"" запланировано ';uk='"" заплановано '") + Строка(ВыборкаСуществующихЗаписей.Количество);
	Иначе
		СтрокаСообщенияКадровогоплана = НСтр("ru='В Кадровом плане нет записей для подразделения ""';uk='В Кадровому плані немає записів для підрозділу ""'") + Строка(Подразделение) 
										+ НСтр("ru='"" с должностью ""';uk='"" з посадою ""'") + Строка(Должность) + """.";
	КонецЕсли;
	
	ДанныеКП = СтрокаСообщенияКадровогоплана;
	
	// Получение текущих данных схемы мотивации.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СхемыМотивацииРаботников.ВидРасчета,
	|	СхемыМотивацииРаботников.Показатель1,
	|	СхемыМотивацииРаботников.Валюта1,
	|	СхемыМотивацииРаботников.Показатель2,
	|	СхемыМотивацииРаботников.Валюта2,
	|	СхемыМотивацииРаботников.Показатель3,
	|	СхемыМотивацииРаботников.Валюта3,
	|	СхемыМотивацииРаботников.Показатель4,
	|	СхемыМотивацииРаботников.Валюта4,
	|	СхемыМотивацииРаботников.Показатель5,
	|	СхемыМотивацииРаботников.Валюта5,
	|	СхемыМотивацииРаботников.Показатель6,
	|	СхемыМотивацииРаботников.Валюта6,
	|	СхемыМотивацииРаботников.ТарифныйРазряд1,
	|	СхемыМотивацииРаботников.ТарифныйРазряд2,
	|	СхемыМотивацииРаботников.ТарифныйРазряд3,
	|	СхемыМотивацииРаботников.ТарифныйРазряд4,
	|	СхемыМотивацииРаботников.ТарифныйРазряд5,
	|	СхемыМотивацииРаботников.ТарифныйРазряд6
	|ИЗ
	|	РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
	|ГДЕ
	|	СхемыМотивацииРаботников.ВидСхемыМотивации = &ВидСхемыМотивации
	|	И СхемыМотивацииРаботников.Подразделение = &Подразделение
	|	И СхемыМотивацииРаботников.Должность = &Должность
	|	И СхемыМотивацииРаботников.ВидРасчета ЕСТЬ НЕ NULL";
	
	Запрос.УстановитьПараметр("Должность",Должность);
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	Запрос.УстановитьПараметр("ВидСхемыМотивации",ВидСхемыМотивации);
	
	ТаблицаСуществующихВидовРасчета = Запрос.Выполнить().Выгрузить();	
	
	ВидыРасчета.Загрузить(ТаблицаСуществующихВидовРасчета);
	
	Если ТаблицаСуществующихВидовРасчета.Количество() > 0 Тогда
		ДанныеКП = ДанныеКП + Символы.ПС + НСтр("ru='Схема мотивации составлялась.';uk='Схема мотивації складалася.'");	
	Иначе
		ДанныеКП = ДанныеКП + Символы.ПС + НСтр("ru='Схема мотивации не составлялась.';uk='Схема мотивації не складалася.'");	
	КонецЕсли;
	
	ТабличноеПолеЗначенийПараметров.Очистить();
	
КонецПроцедуры // ПолучитьСМ()


// Сохраняет введенную схему мотивации в регистр сведений
//
// Параметры
//  Нет  
//
Процедура СохранитьСхемуНажатие(Элемент)
	
	СхемыМотивации = РегистрыСведений.СхемыМотивацииРаботников.СоздатьМенеджерЗаписи();
	Для Каждого СтрокаВидыРасчетов Из ВидыРасчета Цикл
		СхемыМотивации.ВидСхемыМотивации	= ВидСхемыМотивации;
		СхемыМотивации.Подразделение		= Подразделение;
		СхемыМотивации.Должность			= Должность;
		СхемыМотивации.ВидРасчета		= СтрокаВидыРасчетов.ВидРасчета;
		СхемыМотивации.Валюта1			= СтрокаВидыРасчетов.Валюта1;
		СхемыМотивации.Валюта2			= СтрокаВидыРасчетов.Валюта2;
		СхемыМотивации.Валюта3			= СтрокаВидыРасчетов.Валюта3;
		СхемыМотивации.Валюта4			= СтрокаВидыРасчетов.Валюта4;
		СхемыМотивации.Валюта4			= СтрокаВидыРасчетов.Валюта5;
		СхемыМотивации.Валюта4			= СтрокаВидыРасчетов.Валюта6;
		СхемыМотивации.Показатель1		= СтрокаВидыРасчетов.Показатель1;
		СхемыМотивации.Показатель2		= СтрокаВидыРасчетов.Показатель2;
		СхемыМотивации.Показатель3		= СтрокаВидыРасчетов.Показатель3;
		СхемыМотивации.Показатель4		= СтрокаВидыРасчетов.Показатель4;
		СхемыМотивации.Показатель4		= СтрокаВидыРасчетов.Показатель5;
		СхемыМотивации.Показатель4		= СтрокаВидыРасчетов.Показатель6;
		СхемыМотивации.ТарифныйРазряд1	= СтрокаВидыРасчетов.ТарифныйРазряд1;
		СхемыМотивации.ТарифныйРазряд2	= СтрокаВидыРасчетов.ТарифныйРазряд2;
		СхемыМотивации.ТарифныйРазряд3	= СтрокаВидыРасчетов.ТарифныйРазряд3;		
		СхемыМотивации.ТарифныйРазряд4	= СтрокаВидыРасчетов.ТарифныйРазряд4;		
		СхемыМотивации.ТарифныйРазряд4	= СтрокаВидыРасчетов.ТарифныйРазряд5;		
		СхемыМотивации.ТарифныйРазряд4	= СтрокаВидыРасчетов.ТарифныйРазряд6;		
		СхемыМотивации.Записать();
	КонецЦикла;	
	
КонецПроцедуры //СохранитьСхемуНажатие

// Проверяет присутствие вида расчета и показателя в таблице
// "ТабличноеПолеЗначенийПараметров" и вводит новую с троку 
// с ними в случае отсутствия таковой.
//
// Параметры
//  ВидРасчета   – Ссылка на элемент планов видов расчета
//				   "Управленческие начисления".	
//  Показатель   – Ссылка на элемент справочника 
//				   "Показатели схемы мотивации".
//  Номер показателя - число. Порядковый номер показателя 
//				   в виде расчета.
//
Процедура ПроверкаИВводПоказателяВСписок(ВидРасчета,Показатель,Значение,Валюта)

	
	// Если найдена строка.
	Если  ТабличноеПолеЗначенийПараметров.НайтиСтроки(Новый Структура("ВидРасчета,Показатель",ВидРасчета,Показатель)).Количество() = 0 Тогда
		НоваяСтрока = ТабличноеПолеЗначенийПараметров.Добавить();
		НоваяСтрока.ВидРасчета      = ВидРасчета;
		НоваяСтрока.Показатель      = Показатель;
		НоваяСтрока.Значение 		= Значение;
		НоваяСтрока.Валюта          = Валюта;
		НоваяСтрока.Единицы         = Показатель.ТипПоказателя;
	КонецЕсли;
	
	
КонецПроцедуры // ПроверкаИВводПоказателяВСписок()

// Создает список параметров, для которых необходимо ввести значения.
//
// Параметры
//  Нет  
//
Процедура ПостройкаСпискаВводаЗначений()
	
	// Таблица определения необходимости ввода значения/валюты для показателей вида расчета.
	// 
	//  *---------------------------------------------------------------------------*
	//  | ВИД ПОКАЗАТЕЛЯ |                 ИЗМЕНЕНИЕ ПОКАЗАТЕЛЕЙ                    |
	//  |                | что необходимо ввести                                    |
	//  |----------------|----------------------------------------------------------|
	//  |                | НеИзменяется | ИзменяетсяПриРасчете | ВводитсяПриРасчете |
	//  |Шкала числовая  |    ---       |         ---          |         ---        |
	//  |Шкала процентная|    ---       |         ---          |         ---        |
	//  |Число           |    Число     |        Число         |         ---        |
	//  |Процент         |    Число     |        Число         |         ---        |
	//  |Деньги          |Число и валюту|     Число и валюту   |         ---        |
	//  *---------------------------------------------------------------------------*
	//
	
	ИзменяетсяПриРасчете     = Перечисления.ИзменениеПоказателейСхемМотивации.ИзменяетсяПриРасчете;
	НеИзменяется             = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется;
	ВводитсяПриРасчете       = Перечисления.ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете;
	
	Процентный               = Перечисления.ТипыПоказателейСхемМотивации.Процентный;
	Числовой                 = Перечисления.ТипыПоказателейСхемМотивации.Числовой;
	Денежный                 = Перечисления.ТипыПоказателейСхемМотивации.Денежный;
	ТарифныйРазряд           = Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд;
	
	
	// Копирование текущей таблицы ввода значений
	ТабличноеПолеЗначенийПараметровКопия = ТабличноеПолеЗначенийПараметров.СкопироватьКолонки();
	ТабличноеПолеЗначенийПараметровКопия.Индексы.Добавить("ВидРасчета,Показатель");
	
	// Запись строк для ввода значений
	
	Для каждого СтрокаВидРасчета из ВидыРасчета Цикл
		
		ВидРасчета = СтрокаВидРасчета.ВидРасчета;	
		
		Для СчПоказателей = 1 По ВидРасчета.Показатели.Количество() Цикл
			Если ВидРасчета.Показатели[СчПоказателей-1].Показатель.ВозможностьИзменения = НеИзменяется 
				ИЛИ ВидРасчета.Показатели[СчПоказателей-1].Показатель.ВозможностьИзменения = ИзменяетсяПриРасчете Тогда
				Если ВидРасчета.Показатели[СчПоказателей-1].Показатель.ТипПоказателя = Числовой 
					ИЛИ ВидРасчета.Показатели[СчПоказателей-1].Показатель.ТипПоказателя = Процентный 
					ИЛИ ВидРасчета.Показатели[СчПоказателей-1].Показатель.ТипПоказателя = Денежный Тогда
					ПроверкаИВводПоказателяВСписок(ВидРасчета, ВидРасчета.Показатели[СчПоказателей-1].Показатель,СтрокаВидРасчета["Показатель" + СчПоказателей],СтрокаВидРасчета["Валюта" + СчПоказателей]);	
				ИначеЕсли ВидРасчета.Показатели[СчПоказателей-1].Показатель.ТипПоказателя = ТарифныйРазряд Тогда
					ПроверкаИВводПоказателяВСписок(ВидРасчета, ВидРасчета.Показатели[СчПоказателей-1].Показатель,СтрокаВидРасчета["ТарифныйРазряд" + СчПоказателей],СтрокаВидРасчета["Валюта" + СчПоказателей]);	
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла; 
		
	КонецЦикла;
	
	// Восстановление значений для ввода из копии.
	Для каждого СтрокаТаблицыВвода из ТабличноеПолеЗначенийПараметров Цикл
		
		// Найти значение в копии.
		МассивНайденныхСтрок = ТабличноеПолеЗначенийПараметровКопия.НайтиСтроки(Новый Структура("ВидРасчета,Показатель",СтрокаТаблицыВвода.ВидРасчета, СтрокаТаблицыВвода.Показатель));
		
		Если МассивНайденныхСтрок.Количество() > 0 Тогда;
			СтрокаТаблицыВвода.Значение	= МассивНайденныхСтрок[0].Значение;
			СтрокаТаблицыВвода.Валюта   = МассивНайденныхСтрок[0].Валюта;      	
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры // ПостройкаСпискаВводаЗначений()

// Процедура копирует содержимое ТабличноеПолеЗначенийПараметров 
// в таблицу ВидыРасчета
//
// Параметры
//  Нет
//
Процедура ЗаполнитьВидРасчетаИзТаблицы()
	
	ТарифныйРазряд = Тип("СправочникСсылка.ТарифныеРазряды");
	
	Для каждого СтрокаТаблицы из ТабличноеПолеЗначенийПараметров Цикл
		
		СтрокаВВидахРасчета = ВидыРасчета.Найти(СтрокаТаблицы.ВидРасчета,"ВидРасчета");
		
		Если СтрокаВВидахРасчета <> Неопределено Тогда
			
			Для СчПоказателей = 1 По СтрокаВВидахРасчета.ВидРасчета.Показатели.Количество() Цикл
				Если  СтрокаТаблицы.Показатель = СтрокаВВидахРасчета.ВидРасчета.Показатели[СчПоказателей-1].Показатель Тогда
					Если ТипЗнч(СтрокаТаблицы.Значение) = ТарифныйРазряд Тогда
						СтрокаВВидахРасчета["ТарифныйРазряд" + СчПоказателей] = СтрокаТаблицы.Значение;
					Иначе 	
						СтрокаВВидахРасчета["Показатель" + СчПоказателей] = СтрокаТаблицы.Значение;
					КонецЕсли;
					СтрокаВВидахРасчета["Валюта" + СчПоказателей] = СтрокаТаблицы.Валюта;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВидРасчетаИзТаблицы()

// Печатает Схему мотивации по переданной таблице.
//
// Параметры
//  ТаблицаВидовРасчета  – Таблица значений. Колонки:
//                 ВидРасчета - сотавной тип Упр.Начисления 
//                 и Уп.Удержания плна видов расчета.
//                 Показатель1 - число. Значение показателя.
//                 Показатель2 - число. Значение показателя.
//                 Показатель3 - число. Значение показателя.
//                 Показатель4 - число. Значение показателя.
//  
//  Подразделение – Ссылка на элемент справочника
//                  "Подразделения"
//
//  Должность – Ссылка на элемент справочника
//              "Должности"
//
//
Процедура ПечатьСМ(ТаблицаВидовРасчета,Подразделение,Должность)

	Если ТаблицаВидовРасчета.Количество() = 0 Тогда 
		Возврат
	КонецЕсли;
	
	// Заведение печатной формы
	ПечатныйДокумент = Новый ТабличныйДокумент;
	ТекущийРаздел    = Новый ТабличныйДокумент;
	ПечатныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СхемаМотивации";
	Макет = ПолучитьОбщийМакет("МакетСхемыМотивации");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	// Вывод шапки печатной формы.
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Подразделение = Подразделение;
	Область.Параметры.Должность 	= Должность; 
	
	Если Не ВидСхемыМотивации.Пустая() Тогда
		Область.Параметры.ВидСхемыМотивации	= НСтр("ru='Вид схемы мотивации: ';uk='Вид схеми мотивації: '") + ВидСхемыМотивации;
	КонецЕсли;
	
	ПечатныйДокумент.Вывести(Область);
	
	// Цикл для обеспечения поочередного вывода Начислений и Взысканий.
	Для НомерВида = 1 по 2 Цикл
		
		Если НомерВида = 2 Тогда
			Область = Макет.ПолучитьОбласть("Взыскания");
	        ПечатныйДокумент.Вывести(Область);
		КонецЕсли;
		
		// Распечатка таблицы видов расчета.
		Для каждого СтрокаВидаРасчета из ТаблицаВидовРасчета Цикл
			Если НомерВида = 1 И ТипЗнч(СтрокаВидаРасчета.ВидРасчета) = ТипУдержаний Тогда
				Продолжить;	
			КонецЕсли;
			
			Если НомерВида = 2 И ТипЗнч(СтрокаВидаРасчета.ВидРасчета) = ТипНачислений Тогда
				Продолжить;
			КонецЕсли;

			
			// Вывод на печать Вида расчета.
			Область = Макет.ПолучитьОбласть("ВидРасчета");
			Область.Параметры.ВидРасчета = СтрокаВидаРасчета.ВидРасчета;
			Область.Параметры.Описание = СтрокаВидаРасчета.ВидРасчета.Комментарий;
	        ТекущийРаздел.Вывести(Область);
			
			ВидРасчетаОбъект = СтрокаВидаРасчета.ВидРасчета.ПолучитьОбъект();
			
			// По все показателям данного вида расчета.
			Для позиция = 1 По СтрокаВидаРасчета.ВидРасчета.Показатели.Количество() Цикл
				
				Показатель = "";
				Значение   = 0;
			    Валюта     = "";
	            ТипПоказателя = "";
				ВозможностьИзменения = "";

	            // Выбор показателя и значений.
				Если позиция = 1 Тогда
					Показатель = СтрокаВидаРасчета.ВидРасчета.Показатели[0].Показатель;
				    Значение   = СтрокаВидаРасчета.показатель1;
					Валюта     = СтрокаВидаРасчета.Валюта1;
				КонецЕсли;
				
				Если позиция = 2 Тогда
					Показатель = СтрокаВидаРасчета.ВидРасчета.Показатели[1].Показатель;
				    Значение   = СтрокаВидаРасчета.показатель2;
					Валюта     = СтрокаВидаРасчета.Валюта2;
				КонецЕсли;
				
				Если позиция = 3 Тогда
					Показатель = СтрокаВидаРасчета.ВидРасчета.Показатели[2].Показатель;
				    Значение   = СтрокаВидаРасчета.показатель3;
					Валюта     = СтрокаВидаРасчета.Валюта3;
				КонецЕсли;
				
				Если позиция = 4 Тогда
					Показатель = СтрокаВидаРасчета.ВидРасчета.Показатели[3].Показатель;
				    Значение   = СтрокаВидаРасчета.показатель4;
					Валюта     = СтрокаВидаРасчета.Валюта4;
				КонецЕсли;
				
				Если позиция = 5 Тогда
					Показатель = СтрокаВидаРасчета.ВидРасчета.Показатели[4].Показатель;
				    Значение   = СтрокаВидаРасчета.показатель5;
					Валюта     = СтрокаВидаРасчета.Валюта5;
				КонецЕсли;
				
				Если позиция = 6 Тогда
					Показатель = СтрокаВидаРасчета.ВидРасчета.Показатели[5].Показатель;
				    Значение   = СтрокаВидаРасчета.показатель6;
					Валюта     = СтрокаВидаРасчета.Валюта6;
				КонецЕсли;
				
				   	// Формулировка валюты или едениц измерения.		
			        ТипПоказателя = Показатель.ТипПоказателя;
					
					Если  ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Процентный Тогда
						Валюта = НСтр("ru='% (в процентах)';uk='% (у відсотках)'");
					КонецЕсли;
					
					Если  ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Числовой Тогда
						Валюта = НСтр("ru='как число';uk='як число'");
					КонецЕсли;
									
					ВозможностьИзменения = Показатель.ВозможностьИзменения;
					
									
					// Генерация текстового представления формулы расчета.	
					Формула = "";
					Если НомерВида = 1 Тогда 
	                	Формула = НСтр("ru='Размер начисления = ';uk='Розмір нарахування = '") + ПроведениеРасчетов.ВизуализироватьФормулуРасчета(ВидРасчетаОбъект);	
					КонецЕсли;
					
					Если НомерВида = 2 Тогда 
	                	Формула = НСтр("ru='Размер взыскания = ';uk='Розмір стягнення = '") + ПроведениеРасчетов.ВизуализироватьФормулуРасчета(ВидРасчетаОбъект);	
					КонецЕсли;

					

					
					// Печать показателя уместна, если показатель не пустое значение.
					Если ЗначениеЗаполнено(Показатель) Тогда
						
									
					// Печать показателей.
					
						Если  ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная 
					  	 Или  ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая Тогда
					 
					 		// Печать таблицы.
					        Область = Макет.ПолучитьОбласть("ШапкаТаблицы");
							Область.Параметры.Показатель = Строка (Показатель) ;
							ТекущийРаздел.Вывести(Область);
							
							Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная Тогда
								Размерность = "%";
							Иначе
								Размерность = "";
							КонецЕсли;
							

							// Получить таблицу оценок.
							Запрос = новый Запрос;
							Запрос.Текст = "ВЫБРАТЬ
							               |	СоставШкалОценкиПоказателейРасчета.ЗначениеС,
							               |	СоставШкалОценкиПоказателейРасчета.ЗначениеПо,
							               |	СоставШкалОценкиПоказателейРасчета.Размер
							               |ИЗ
							               |	РегистрСведений.СоставШкалОценкиПоказателейРасчета КАК СоставШкалОценкиПоказателейРасчета
							               |
							               |ГДЕ
							               |	СоставШкалОценкиПоказателейРасчета.ШкалаОценкиПоказателя.Ссылка = &Показатель";
											
							Запрос.УстановитьПараметр("Показатель",Показатель);
							
							ТаблицаОценок = Запрос.Выполнить().Выгрузить();
							
							// Печать таблицы с оценками.
							Область = Макет.ПолучитьОбласть("СтрокаТаблицы");
							
							Для Каждого СтрокаОценки из ТаблицаОценок Цикл
								Область.Параметры.От        = Строка (СтрокаОценки.ЗначениеС);
								Область.Параметры.По        = Строка (СтрокаОценки.ЗначениеПо);
								Область.Параметры.Результат = Строка (СтрокаОценки.Размер) + Размерность;
								ТекущийРаздел.Вывести(Область);
							КонецЦикла;
							
							Область = Макет.ПолучитьОбласть("КонецТаблицы");
					        ТекущийРаздел.Вывести(Область);

				 		Иначе
							// Печать значения.
							Область = Макет.ПолучитьОбласть("Показатель");
							Область.Параметры.Показатель = Строка (Показатель) ;
							
							// Формирование строки значения и вида показателя.
							Если ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется Тогда
								СтрокаЗначения = НСтр("ru='Устанавливается в размере ';uk='Встановлюється в розмірі '") + Строка(Значение) + " " + Строка (Валюта) + ".";	
							КонецЕсли;
							
							Если ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.ИзменяетсяПриРасчете Тогда
								СтрокаЗначения = НСтр("ru='Устанавливается в размере ';uk='Встановлюється в розмірі '") + Строка(Значение) + " " + Строка (Валюта) + НСтр("ru=' и корректируется при начислении.';uk=' і коригується при нарахуванні.'");	
							КонецЕсли;

							Если ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете Тогда
								
								Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный Тогда
									СтрокаЗначения = НСтр("ru='Значение и валюта вводятся при расчете.';uk='Значення і валюта вводяться при розрахунку.'");					
								Иначе	
									СтрокаЗначения = НСтр("ru='Значение вводится при расчете.';uk='Значення вводиться при розрахунку.'");	
								КонецЕсли;
							КонецЕсли;
							
							Если НЕ ЗначениеЗаполнено(ВозможностьИзменения) Тогда
								СтрокаЗначения = НСтр("ru='Значение вводится при расчете.';uk='Значення вводиться при розрахунку.'")
							КонецЕсли;							
							
							Область.Параметры.ТипПоказателя = СтрокаЗначения ;
	        				ТекущийРаздел.Вывести(Область);
						КонецЕсли;
						
				    КонецЕсли;


			КонецЦикла;
			
			
			// Вывод на печать конца вида расчета.
			Область = Макет.ПолучитьОбласть("КонецВидаРасчета");
			Область.Параметры.Формула = Формула; 
	        ТекущийРаздел.Вывести(Область);		
			
			// вывод на печать раздела.
		    ПечатныйДокумент.Вывести(ТекущийРаздел);
			ТекущийРаздел.Очистить();

		КонецЦикла;
		
	КонецЦикла;
	
	// Вывод печатной формы на экран.
	УниверсальныеМеханизмы.НапечататьДокумент(ПечатныйДокумент,,, НСтр("ru='Данные по схеме мотивации.';uk='Дані по схемі мотивації.'"));

КонецПроцедуры // ПечатьСМ()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ ФОРМЫ

// Обработчик события "При открытии" основной Формы. 
// Устанавливает номер текущей страницы.
//
Процедура ПриОткрытии()
	НомерТекущейСтраницы = 0;	
	
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(ЭлементыФормы, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу"));
	
	ТабличноеПолеЗначенийПараметров.Индексы.Добавить("ВидРасчета,Показатель");

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события "ПриСменеСтраницы" интерфейсного объекта "Панель".
// При необходимости вызывает процедуру ПостройкаСпискаВводаЗначений().
//
Процедура ПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = 2 Тогда
		ПостройкаСпискаВводаЗначений();		
	КонецЕсли;
	
КонецПроцедуры // ПанельПриСменеСтраницы 

// Обработчик события "ПриВыводеСтроки" интерфейсного объекта "ТабличноеПолеЗначенийПараметров".
// Устанавливает доступность полей, при необходимости выбирает валюту.
//
Процедура ТабличноеПолеЗначенийПараметровПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ВыделенныйЦвет = ЦветаСтиля.АльтернативныйЦветФонаПоля;
	
	// Доступность поля выбора валюты
	ОформлениеСтроки.Ячейки.Валюта.ТолькоПросмотр = ДанныеСтроки.Единицы <> Перечисления.ТипыПоказателейСхемМотивации.Денежный;
		
	// Ввод валюты, в случае отсутствия.
	Если ДанныеСтроки.Единицы = перечисления.ТипыПоказателейСхемМотивации.Денежный 
	   И НЕ ЗначениеЗаполнено (ДанныеСтроки.Валюта) Тогда
	   ДанныеСтроки.Валюта = Константы.ВалютаУправленческогоУчета.Получить();
    КонецЕсли;
	
	// доступность поля ввода значения.
	ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = (ДанныеСтроки.Показатель.ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете); 
	
	// расскраска полей для ввода
	Если ДанныеСтроки.Единицы = Перечисления.ТипыПоказателейСхемМотивации.Денежный Тогда
	ОформлениеСтроки.Ячейки.Валюта.ЦветФона	= ВыделенныйЦвет;
	КонецЕсли;
	
	Если ДанныеСтроки.Показатель.ВозможностьИзменения <> Перечисления.ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете Тогда
	ОформлениеСтроки.Ячейки.Значение.ЦветФона = ВыделенныйЦвет;	
	КонецЕсли;

КонецПроцедуры // ТабличноеПолеЗначенийПараметровПриВыводеСтроки

// Обработчик события "ПриИзменении" интерфейсного объекта "Подразделение".
// Вызывает процедуру ПолучитьСМ()
//
Процедура ПодразделениеПриИзменении(Элемент)
	
		
	ПолучитьСМ()

		
КонецПроцедуры // ПодразделениеПриИзменении


// Обработчик события "ПриИзменении" интерфейсного объекта "Должность".
// Вызывает процедуру ПолучитьСМ()
//
Процедура ДолжностьПриИзменении(Элемент)
		
	ПолучитьСМ()

КонецПроцедуры // ДолжностьПриИзменении

// Обработчик события "НачалоВыбораИзСписка" интерфейсного объекта "Должность".
//
Процедура ДолжностьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = ПроцедурыУправленияПерсоналом.ВыбратьИзКадровогоПланаПредприятия("Должность", Подразделение);
	
	Элемент.ВысотаСпискаВыбора = Мин(10, СписокВыбора.Количество());
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		ПолучитьСМ();
	КонецЕсли;

КонецПроцедуры

// Обработчик события "НачалоВыбора" поля ввода "ВидРасчета" интерфейсного объекта "ВидыРасчета".
// Устанавливает отбор доступных для выбора видов расчета в формах
// выбора начислений и удержаний.
//
Процедура ВидыРасчетаВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	
	Если ТипЗнч(Элемент.Значение) = ТипНачислений Тогда	
		СтандартнаяОбработка = Ложь;

		ФормаВыбораВидаРасчета = ПланыВидовРасчета.УправленческиеНачисления.ПолучитьФормуВыбора("ФормаВыбора", ЭлементыФормы.ВидыРасчета, "дляДокументаПриемНаРаботу");
	
		ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
		ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
		ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = мСписокНедоступныхРасчетов;
		ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;

		ФормаВыбораВидаРасчета.Открыть();
	КонецЕсли;
	
	Если ТипЗнч(Элемент.Значение) = ТипУдержаний Тогда	
		СтандартнаяОбработка = Ложь;

		ФормаВыбораВидаРасчета = ПланыВидовРасчета.УправленческиеУдержания.ПолучитьФормуВыбора("ФормаВыбора", ЭлементыФормы.ВидыРасчета, "дляДокументаВводСведений");
		
		ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
		
		ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеРавно;
		ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = ПланыВидовРасчета.УправленческиеУдержания.УдержаноПоБухгалтерии;
		ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;

		ФормаВыбораВидаРасчета.Открыть();
    КонецЕсли;

КонецПроцедуры // ВидыРасчетаВидРасчетаНачалоВыбора

// Обработчик события "ОбработкаВыбора" интерфейсного объекта "ВидыРасчета".
// Обеспечивает ввод выбранного значения.
//
Процедура ВидыРасчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = ТипНачислений ИЛИ ТипЗнч(ВыбранноеЗначение) = ТипУдержаний Тогда	
		Элемент.ТекущаяСтрока.ВидРасчета = ВыбранноеЗначение;
	КонецЕсли;

КонецПроцедуры // ВидыРасчетаОбработкаВыбора

// Обработчик события "ПередУдалением" интерфейсного объекта "ВидыРасчета".
// Обеспечивает удаление строк таблицы ТабличноеПолеЗначенийПараметров
// в которых упоминался удаляемый вид расчета.
//
Процедура ВидыРасчетаПередУдалением(Элемент, Отказ)
	
	УдаляемыйВидРасчета = Элемент.ТекущаяСтрока.ВидРасчета;	
	
	СтрокиДляУдаления = ТабличноеПолеЗначенийПараметров.НайтиСтроки(Новый Структура("ВидРасчета",УдаляемыйВидРасчета));
	Для каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		ТабличноеПолеЗначенийПараметров.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события "ПриВыводеСтроки" интерфейсного объекта "ВидыРасчета".
// Формирует иконку в строке.
Процедура ВидыРасчетаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если  НЕ ЗначениеЗаполнено(ДанныеСтроки.ВидРасчета) Тогда
		Возврат
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Колонка1.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.Колонка1.ИндексКартинки = ?(ТипЗнч(ДанныеСтроки.ВидРасчета) = ТипНачислений,0,1)
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если  мТабличнаяЧасть = "ВидыРасчета" Тогда
		
		Если ВидыРасчета.Найти(ЗначениеВыбора,"ВидРасчета") = Неопределено Тогда
			ВидыРасчета.Добавить().ВидРасчета = ЗначениеВыбора;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик события "Действие" кнопки "Дальше". 
// Вызывает процедуру СдвигСтраниц().
//
//
Процедура ОсновныеДействияФормыДальше(Кнопка)	
	
	  СдвигСтраниц(Истина);	
	  ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = истина;
	 
КонецПроцедуры // ОсновныеДействияФормыДальше

// Обработчик события "Действие" кнопки "Назад". 
// Вызывает процедуру СдвигСтраниц().
//
//
Процедура ОсновныеДействияФормыНазад(Кнопка)
	  СдвигСтраниц(Ложь); 
	  ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Дальше.Доступность = истина;
КонецПроцедуры // ОсновныеДействияФормыНазад

// Обработчик события "Нажатие" кнопки "ПечитьСМ". 
// Вызывает процедуры для печати схемы мотивации.
//
//
Процедура ПечатьСМНажатие(Элемент)
		
	ЗаполнитьВидРасчетаИзТаблицы();
    ПечатьСМ(ВидыРасчета,Подразделение,Должность);
	
КонецПроцедуры // ПечатьСМНажатие

// Обработчик события "Действие" элемента панели "СправочникВидовРасчета" командной панели "КоманднаяПанельВидовРасчета". 
// Открывает форму элемента планов вида расчета. 
//
Процедура КоманднаяПанельВидовРасчетаСправочникВидовРасчета(Кнопка)
	
	Если ЭлементыФормы.ВидыРасчета.ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ЭлементыФормы.ВидыРасчета.ТекущаяСтрока.ВидРасчета.ПолучитьФорму("ФормаВидаРасчета").Открыть();

КонецПроцедуры // КоманднаяПанельВидовРасчетаСправочникВидовРасчета

// Обработчик события "Действие" элемента панели "Открыть" командной панели "КоманднаяПанельЗначений". 
// Открывает форму элемента планов вида расчета. 
//
Процедура КоманднаяПанельЗначенийОткрыть(Кнопка)
	
	Если ЭлементыФормы.ТабличноеПолеЗначенийПараметров.ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ЭлементыФормы.ТабличноеПолеЗначенийПараметров.ТекущаяСтрока.ВидРасчета.ПолучитьФорму("ФормаВидаРасчета").Открыть();	
КонецПроцедуры // КоманднаяПанельЗначенийОткрыть

// Обработчик события "Нажатие" кнопки "ОчиститьВсе". 
// Вызывает процедуры для приведения формы в исходное состояние.
//
Процедура ОчиститьВсеНажатие(Элемент)
	ОчиститьВсе()
КонецПроцедуры  // ОчиститьВсеНажатие

Процедура КоманднаяПанельЗначенийОбновить(Кнопка)
	ПостройкаСпискаВводаЗначений()	
КонецПроцедуры

// Обработчик события "Действие" элемента панели "ДобавитьНачисление" командной панели "КоманднаяПанельВидовРасчета". 
// Добовляет новый вид расчета  с типом начисление.
//
Процедура КоманднаяПанельВидовРасчетаДобавитьНачисление(Кнопка)
	
	мТабличнаяЧасть = "ВидыРасчета";

	ФормаПодбора = ПланыВидовРасчета.УправленческиеНачисления.ПолучитьФормуВыбора(, ЭтаФорма);
	ФормаПодбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаПодбора.Отбор.Ссылка.Значение = мСписокНедоступныхРасчетов;
	ФормаПодбора.Отбор.Ссылка.Использование = Истина;

	ФормаПодбора.ЗакрыватьПриВыборе = истина;
	ФормаПодбора.Открыть();

	
КонецПроцедуры

// Обработчик события "Действие" элемента панели "ДобавитьУдержание" командной панели "КоманднаяПанельВидовРасчета". 
// Добовляет новый вид расчета  с типом удержание.
//
Процедура КоманднаяПанельВидовРасчетаДобавитьУдержание(Кнопка)
	
	мТабличнаяЧасть = "ВидыРасчета";

	ФормаПодбора = ПланыВидовРасчета.УправленческиеУдержания.ПолучитьФормуВыбора(, ЭтаФорма);
	ФормаПодбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеРавно;
	ФормаПодбора.Отбор.Ссылка.Значение = ПланыВидовРасчета.УправленческиеУдержания.УдержаноПоБухгалтерии;
	ФормаПодбора.Отбор.Ссылка.Использование = Истина;

	ФормаПодбора.ЗакрыватьПриВыборе = истина;
	ФормаПодбора.Открыть();

КонецПроцедуры


ТипНачислений = Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления"); 
ТипУдержаний  = Тип("ПланВидовРасчетаСсылка.УправленческиеУдержания");

мСведенияОВидахРасчета = Новый Соответствие;

мСписокНедоступныхРасчетов = Новый СписокЗначений;
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерии);
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерииСдельно);












