////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мСтруктураНедоступныхОтборов Экспорт; 

Перем мСписокДоступныхСпособовРасчета;// Список недоступных для начисления способов расчета
Перем мСоответствиеДоходовИВычетов;
Перем мСписокКодовВычетов;

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;

// Диалог настройки периода
Перем мНастройкаПериода;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура УказатьВладельцаПолюПодразделения(Элемент)

	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Элемент.ВыборПоВладельцу = ПостроительОтчета.Отбор.ОбособленноеПодразделение.Значение
	КонецЕсли;

КонецПроцедуры

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//  и для ввода типа отнесения расходов к ЕНВД
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровТайпинга(ИмяЭУ = "")
	
	Если ИмяЭУ = "КодВычета" Тогда
		СтруктураПараметров = Новый Структура("Ссылка", мСписокКодовВычетов);
	ИначеЕсли ИмяЭУ = "ОсновныеНачисления" Тогда
		МассивВидовВремени = Новый СписокЗначений;
	    Если ЭлементыФормы.ПанельСтраницы.Страницы[0].Имя = "РазовыеРасчеты" Тогда
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеСверхНормы);
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
		Иначе
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеНеотработанное);
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
		КонецЕсли;
		СтруктураПараметров = Новый Структура("ВидВремени, СпособРасчета", МассивВидовВремени, мСписокДоступныхСпособовРасчета);
	Иначе
		СтруктураПараметров = Новый Структура();
	КонецЕсли;

	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровТайпинга()()

Процедура ОбновитьСписокПраздничныхДнейМесяца()

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Праздник",Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	Запрос.УстановитьПараметр("ДатаНачала",НачалоМесяца(ДатаАктуальности));
	Запрос.УстановитьПараметр("ДатаОкончания",КонецМесяца(ДатаАктуальности));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ВидДня = &Праздник
	|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	СписокПраздников = Новый СписокЗначений; 			   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокПраздников.Добавить(Выборка.ДатаКалендаря, Формат(Выборка.ДатаКалендаря, "ДФ='d ММММ'"));
	КонецЦикла;    
	ЭлементыФормы.ДатаПраздника.СписокВыбора = СписокПраздников;
	ЭлементыФормы.ДатаПраздника.ВысотаСпискаВыбора = СписокПраздников.Количество();

КонецПроцедуры

// Процедура выполняет отбор при начале выбора статьи затрат 
//  используется в документе "Ввод процента деятельности ЕНВД" и в обработке "Формирование списка работников"
//
// Параметры:
//  Элемент - обрабатываемый элемент формы
//  ОтношениеСтатьиЗатратКЕНВД - значение перечисления ОтнесениеРасходовКДеятельностиЕНВД
//    определяет отношение к ЕНВД данного элемента формы
//
//
Процедура УстановитьОтборПриНачалеВыбора(Элемент, ОтношениеСтатьиЗатратКЕНВД)
	
	ФормаВыбора          = Справочники.СтатьиЗатрат.ПолучитьФормуВыбора(,Элемент,"дляФормыОтбораРаботников");
	
	ФормаВыбора.СправочникСписок.Отбор.ОтнесениеРасходовКДеятельностиЕНВД.Значение      = ОтношениеСтатьиЗатратКЕНВД;
	ФормаВыбора.СправочникСписок.Отбор.ОтнесениеРасходовКДеятельностиЕНВД.Использование = Истина;
	ФормаВыбора.СправочникСписок.Отбор.ОтнесениеРасходовКДеятельностиЕНВД.ВидСравнения  = ВидСравнения.Равно;
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ОтнесениеРасходовКДеятельностиЕНВД.Доступность = Ложь;

	ФормаВыбора.Открыть();

КонецПроцедуры

Функция СформироватьСписокПричинНевыхода(СпособРегистрацииВремени)

	СписокПричинНевыхода = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НулеваяСумма", Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисления.Ссылка КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	(НЕ ОсновныеНачисления.Предопределенный)
	|	И ОсновныеНачисления.СпособРасчета В(&НулеваяСумма)
	|	И ОсновныеНачисления.ВидВремени = &ВидВремени";
	
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены Тогда
		
		Запрос.УстановитьПараметр("ВидВремени", Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
		СписокПричинНевыхода.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"));
		СписокПричинНевыхода.Вставить(0,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет);
		СписокПричинНевыхода.Вставить(1,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчетПоСоглашению);
		СписокПричинНевыхода.Вставить(2,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НевыходРегл);
		СписокПричинНевыхода.Вставить(3,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул);
		СписокПричинНевыхода.Вставить(4,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыУчебный);
		
	Иначе // здесь только почасовые невыходы
		
		Запрос.УстановитьПараметр("ВидВремени", Перечисления.ВидыВремени.ЧасовоеНеотработанное);
		СписокПричинНевыхода.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"));
		
	КонецЕсли;
	
	Возврат СписокПричинНевыхода
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	Если ЭлементыФормы.ПанельСтраницы.Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
		Возврат
	КонецЕсли;
	
	СтраницаДокумента = ЭлементыФормы.ПанельСтраницы.Страницы[0];
	
	// Установить настройку периода по умолчанию
	мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	
	ДатаНачала		= ДатаАктуальности;
	ДатаОкончания	= КонецМесяца(ДатаАктуальности);
	
	Если СтраницаДокумента.Имя = "НевыходыВОрганизацияхДляЦелойСмены" Тогда
		ЭлементыФормы.ВидРасчетаЦелосменныйНевыход.СписокВыбора = СформироватьСписокПричинНевыхода(Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены);
	ИначеЕсли СтраницаДокумента.Имя = "ЗаявлениеНаПрименениеЛьготы" Тогда
		ПостроительОтчета.Отбор.Добавить("ЛьготаНДФЛ","ЛьготаНДФЛ",);
		ДатаИзменения = ДатаАктуальности;
		
	ИначеЕсли СтраницаДокумента.Имя = "Выплаты" Тогда
		ПереключательХарактерВыплаты = 2;
		
	ИначеЕсли СтраницаДокумента.Имя = "НевыходыВОрганизацияхДляЧастиСмены" Тогда
		ЭлементыФормы.ВидРасчетаВнутрисменныйНевыход.СписокВыбора = СформироватьСписокПричинНевыхода(Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены);
	ИначеЕсли (СтраницаДокумента.Имя = "РазовыеРасчеты" Или СтраницаДокумента.Имя = "РазовыеРасчетыДляЧастиСмены") и ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
		
		СписокНеДоступныхСпособовРасчета = ПроведениеРасчетов.ПолучитьСписокНачисленийПоСреднемуЗаработку();
		СписокНеДоступныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ГосударственноеПособие);
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпособыРасчетаОплатыТруда.Ссылка
		|ИЗ
		|	Перечисление.СпособыРасчетаОплатыТруда КАК СпособыРасчетаОплатыТруда
		|ГДЕ
		|	(НЕ СпособыРасчетаОплатыТруда.Ссылка В (&Ссылка))";
		Запрос.УстановитьПараметр("Ссылка", СписокНеДоступныхСпособовРасчета);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			мСписокДоступныхСпособовРасчета.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	ИначеЕсли СтраницаДокумента.Имя = "ОплатаПраздничныхИВыходныхДнейОрганизаций" Тогда
		
		ОбновитьСписокПраздничныхДнейМесяца();
		
		ЭлементыФормы.ПанельСтраницы.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.ОсновныеДействияФормы,ГраницаЭлементаУправления.Низ,ЭлементыФормы.ДатаАктуальности, ГраницаЭлементаУправления.Верх);
		ТекущаяВысотаФормы = ЭтаФорма.Высота;
		Если ТекущаяВысотаФормы < 400 Тогда
			ЭтаФорма.Высота = 400;
		КонецЕсли; 
		
	ИначеЕсли СтраницаДокумента.Имя = "ПереносЗадолженности" Тогда
		// Заполним реквизит формы МесяцСтрока
		МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодВозникновения);
		
	ИначеЕсли СтраницаДокумента.Имя = "ПоложенныеОтпуска" Тогда
		ТаблицаОтпусков = Реквизиты.ТаблицаОтпусков;
		
	ИначеЕсли СтраницаДокумента.Имя = "ПоложенныеОтпуска" Тогда

		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Если Реквизиты <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты,ЭтаФорма);
	КонецЕсли;
	ОповеститьОВыборе(ПолучитьСписокРаботников());
	
	Закрыть();

КонецПроцедуры

// Процедура устанавливает использование всех отборов
//
Процедура КоманднаяПанельОтборУстановитьФлажки(Кнопка)
	Для Каждого Отбор Из ПостроительОтчета.Отбор Цикл
		Если Найти(Отбор.ПутьКДанным,".") <> 0 Или Не мСтруктураНедоступныхОтборов.Свойство(Отбор.ПутьКДанным) Тогда
			Отбор.Использование = Истина
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура КоманднаяПанельОтборСнятьФлажки(Кнопка)
	Для Каждого Отбор Из ПостроительОтчета.Отбор Цикл
		Если Найти(Отбор.ПутьКДанным,".") <> 0 Или Не мСтруктураНедоступныхОтборов.Свойство(Отбор.ПутьКДанным) Тогда
			Отбор.Использование = Ложь
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки настройки периода.
//
Процедура ВыбПериодНажатие(Элемент)
	
	мНастройкаПериода.УстановитьПериод(ДатаНачала, КонецДня(ДатаОкончания));
	
	Если мНастройкаПериода.Редактировать() Тогда
		ДатаНачала		= мНастройкаПериода.ПолучитьДатуНачала();
		ДатаОкончания	= мНастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	
КонецПроцедуры // ВыбПериодНажатие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ДатаАктуальностиПриИзменении(Элемент)
	
	Если ЭлементыФормы.ПанельСтраницы.Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
		Возврат
	КонецЕсли;
	
	СтраницаДокумента = ЭлементыФормы.ПанельСтраницы.Страницы[0];
	
	Если СтраницаДокумента.Имя = "ОплатаПраздничныхИВыходныхДнейОрганизаций" Тогда
		ОбновитьСписокПраздничныхДнейМесяца();
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключатьУволенныхПриИзменении(Элемент)
	ЗаполнитьНачальныеНастройки(Ложь);
КонецПроцедуры

Процедура ТабличноеПолеОтборПередУдалением(Элемент, Отказ)
	ИмяОтбора = Элемент.ТекущиеДанные.ПутьКДанным;
	Отказ = ЗначениеЗаполнено(ИмяОтбора) И Найти(ИмяОтбора,".") = 0 И мСтруктураНедоступныхОтборов.Свойство(ИмяОтбора);
КонецПроцедуры

Процедура ТабличноеПолеОтборПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ИмяОтбора = ДанныеСтроки.ПутьКДанным;
	Если ЗначениеЗаполнено(ИмяОтбора) И Найти(ИмяОтбора,".") = 0 И мСтруктураНедоступныхОтборов.Свойство(ИмяОтбора) Тогда
		ОформлениеСтроки.Ячейки.Использование.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Имя.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.ВидСравнения.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ТабличноеПолеОтборИмяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Или Найти(ВыбранноеЗначение,".") <> 0 Или Не мСтруктураНедоступныхОтборов.Свойство(ВыбранноеЗначение);
	Если Не СтандартнаяОбработка Тогда
		Предупреждение(НСтр("ru='Отбор по ';uk='Відбір по '") + ?(ВыбранноеЗначение = "ОбособленноеПодразделение","организации","подразделению") + НСтр("ru=' уже установлен!';uk=' вже встановлено!'"));
	КонецЕсли;
КонецПроцедуры

Процедура ТабличноеПолеОтборЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отборы по свойствам и категориям должны быть обработаны специальным образом
	// Они определяются по представлению 
	Если Найти(НРег(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление), "категории") Тогда

		// Ограничение списка категорий
		Назначение = мСоответствиеНазначений.Получить(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление);

		УправлениеОтчетами.ОсуществитьВыборКатегории(Элемент, Назначение, ЭтаФорма, СтандартнаяОбработка);

	ИначеЕсли Найти(НРег(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление), "св-во") Тогда

		Свойство = мСоответствиеНазначений.Получить(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление);

		УправлениеОтчетами.ОсуществитьВыборСвойства(Элемент, Свойство, ЭтаФорма, СтандартнаяОбработка);

	ИначеЕсли ВыбиратьСотрудника И ИмяРегистра = "РаботникиОрганизаций" И ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Имя = "Работник" И ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Если ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.ВидСравнения = ВидСравнения.ВИерархии ИЛИ 
		  ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.ВидСравнения = ВидСравнения.НеВИерархии Тогда
			СтандартнаяОбработка = Ложь;		
			ОрганизацияОтбор =  ПостроительОтчета.Отбор.ОбособленноеПодразделение.Значение;

			
			ФормаВыбора = Справочники.СотрудникиОрганизаций.ПолучитьФормуВыбора(,Элемент, ЭтотОбъект);
						
			ФормаВыбора.Отбор.Организация.Значение = ОрганизацияОтбор;
			ФормаВыбора.Отбор.Организация.Использование = ЗначениеЗаполнено(ОрганизацияОтбор);
			ФормаВыбора.Отбор.Организация.ВидСравнения = ВидСравнения.Равно;
			
			ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
			ФормаВыбора.Открыть(); 	
		Иначе
			ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, ЭтотОбъект, Истина, ДатаАктуальности, ПостроительОтчета.Отбор.ОбособленноеПодразделение.Значение, 1, СтандартнаяОбработка, Элемент.Значение);
		КонецЕсли;
		
	КонецЕсли;
	
	УказатьВладельцаПолюПодразделения(Элемент)
	
КонецПроцедуры

Процедура ТабличноеПолеОтборЗначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
		
	Если ВыбиратьСотрудника И ИмяРегистра = "РаботникиОрганизаций" И ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Имя = "Работник" Тогда
		ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, ПостроительОтчета.Отбор.ОбособленноеПодразделение.Значение);
	КонецЕсли;
		
	УказатьВладельцаПолюПодразделения(Элемент)
	
КонецПроцедуры

Процедура ТабличноеПолеОтборЗначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Если ВыбиратьСотрудника И ИмяРегистра = "РаботникиОрганизаций" И ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Имя = "Работник" Тогда
		Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, ПостроительОтчета.Отбор.ОбособленноеПодразделение.Значение);
	КонецЕсли;
	
	УказатьВладельцаПолюПодразделения(Элемент)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// страницы документов

// Процедура - обработчик события "НачалоВыбора" поля ввода вида расчета
Процедура ОсновнойВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.Значение) = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		СпВидовРасчета = Новый СписокЗначений;
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УдержанияОрганизаций.Ссылка
		|ИЗ
		|	ПланВидовРасчета.УдержанияОрганизаций КАК УдержанияОрганизаций
		|ГДЕ
		|	УдержанияОрганизаций.Предопределенный = ИСТИНА
		|	И УдержанияОрганизаций.Ссылка <> ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.УдержаниеПодотчетныхДС)");
		СпВидовРасчета.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));

		ФормаВыбораВидаРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент);
	    ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
		
		ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
		ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = СпВидовРасчета;
		ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;

		ФормаВыбораВидаРасчета.Открыть();

		Возврат
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;

	//Предложим для выбора список расчетов, имеющих способ расчета, соответствующий указанной форме оплаты
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляФормыОтбораРаботников");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	МассивВидовВремени = Новый СписокЗначений;
    Если ЭлементыФормы.ПанельСтраницы.Страницы[0].Имя = "РазовыеРасчеты" Тогда
		МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
		МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
		МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеСверхНормы);
		МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
	Иначе
		МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеНеотработанное);
		МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
	КонецЕсли;
	
	ФормаВыбораВидаРасчета.Отбор.ВидВремени.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.ВидВремени.Значение = МассивВидовВремени;
	ФормаВыбораВидаРасчета.Отбор.ВидВремени.Использование = Истина;
	
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение = мСписокДоступныхСпособовРасчета;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода вида расчета
Процедура ОсновнойВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)

	Если ТипЗнч(Элемент.Значение) = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций") Тогда
		 Возврат
	КонецЕсли;
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга("ОсновныеНачисления"), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаТайпинга, мТекстТайпинга, мПоследнееЗначениеЭлементаТайпинга, Ложь);
КонецПроцедуры

Процедура ОсновнойВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	Если ТипЗнч(Элемент.Значение) = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций") Тогда
		 Возврат
	КонецЕсли;
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга("ОсновныеНачисления"), Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
КонецПроцедуры

Процедура ВидРасчетаНевыходНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь
КонецПроцедуры



// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодВозникновенияПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодВозникновения);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодВозникновения);
	
КонецПроцедуры // ПериодВозникновенияПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодВозникновенияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодВозникновения = ДобавитьМесяц(ПериодВозникновения, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодВозникновения);
	
КонецПроцедуры // ПериодВозникновенияРегулирование()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодВозникновенияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодВозникновенияОчистка()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодВозникновенияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодВозникновения, ЭтаФорма);
	
КонецПроцедуры // ПериодВозникновенияНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодВозникновенияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодВозникновенияАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодВозникновенияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодВозникновенияОкончаниеВводаТекста()

Процедура СпособВыплатыПриИзменении(Элемент)
	
	Если СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
		ЭлементыФормы.НадписьБанк.Видимость = Ложь;
		ЭлементыФормы.Банк.Видимость = Ложь;
	Иначе
		ЭлементыФормы.НадписьБанк.Видимость = Истина;
		ЭлементыФормы.Банк.Видимость = Истина;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОсновнойВидРасчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
			БазовыйПериодНачало = ДобавитьМесяц(НачалоМесяца(ДатаНачала),-ВидРасчета.ЧислоМесяцев);
			БазовыйПериодКонец = КонецМесяца(ДобавитьМесяц(НачалоМесяца(ДатаНачала),-Мин(ВидРасчета.ЧислоМесяцев, 1)));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаНачалаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ДатаНачала)Тогда 
		Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаОкончания = КонецМесяца(ДатаНачала);
		Иначе
			ДатаОкончания = Мин(ДатаОкончания,КонецМесяца(ДатаНачала));
		КонецЕсли;
		БазовыйПериодНачало = ДобавитьМесяц(НачалоМесяца(ДатаНачала),-ВидРасчета.ЧислоМесяцев);
		БазовыйПериодКонец = КонецМесяца(ДобавитьМесяц(НачалоМесяца(ДатаНачала),-Мин(ВидРасчета.ЧислоМесяцев, 1)));
	КонецЕсли;
КонецПроцедуры

Процедура ПереключательХарактерВыплатыПриИзменении(Элемент)
	
	Если ЭлементыФормы.ПереключательХарактерВыплаты.Значение = 1  Тогда
		ЭлементыФормы.РазмерВыплаты.Доступность = Ложь;
	Иначе
		ЭлементыФормы.РазмерВыплаты.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидСтажаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФормаВыбора = Справочники.ВидыСтажа.ПолучитьФормуВыбора(,ЭлементыФормы.ВидСтажа);

	ФормаВыбора.Отбор.ЛьготныйСтаж.ВидСравнения		= ВидСравнения.Равно;
	ФормаВыбора.Отбор.ЛьготныйСтаж.Значение			= Истина;
	ФормаВыбора.Отбор.ЛьготныйСтаж.Использование	= Истина;

	ФормаВыбора.Открыть();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ВидСтажаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение;
	КонецЕсли;

КонецПроцедуры

Процедура ВключатьРаботающихПоДоговорамГПХПриИзменении(Элемент) 
	ЗаполнитьНачальныеНастройки(ЛОЖЬ);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мНастройкаПериода = Новый НастройкаПериода;

мСтруктураНедоступныхОтборов = Новый Структура;
мСписокДоступныхСпособовРасчета = Новый СписокЗначений;

// Устанавливаем соответствие доходов и положенных по ним вычетов для целей исчисления НДФЛ
мСоответствиеДоходовИВычетов = Новый Соответствие;

мОбработкаТайпинга                 = Ложь;
мТекстТайпинга                     = "";
мПоследнееЗначениеЭлементаТайпинга = Неопределено;
