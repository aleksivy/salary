Перем мУниверсальнаяВыгрузкаДанных;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

//
Процедура ВыборФайла(Элемент, ПроверятьСуществование=Ложь)
	
	ДиалогФыбораФайла								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогФыбораФайла.Фильтр						=	НСтр("ru='Файл данных (*.xml)|*.xml';uk='Файл даних (*.xml)|*.xml'");
	ДиалогФыбораФайла.Заголовок						=	НСтр("ru='Выберите файл';uk='Виберіть файл'");
	ДиалогФыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогФыбораФайла.Расширение					=	"xml";
	ДиалогФыбораФайла.ИндексФильтра					=	0;
	ДиалогФыбораФайла.ПолноеИмяФайла				=	Элемент.Значение;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	ПроверятьСуществование;
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогФыбораФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

// Устанавливает состояние пометки у подчиненных строк строки дерева значений
// в зависимости от пометки текущей строки
//
// Параметры:
//  ТекСтрока      - Строка дерева значений
// 
Процедура УстановитьПометкиПодчиненных(ТекСтрока)

	Включить	= ТекСтрока.Включить;
	Подчиненные	= ТекСтрока.Строки;

	Если Подчиненные.Количество() > 0 Тогда
		Для каждого Строка из Подчиненные Цикл
			Строка.Включить = Включить;
			УстановитьПометкиПодчиненных(Строка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкиПодчиненных()

// Устанавливает состояние пометки у родительских строк строки дерева значений
// в зависимости от пометки текущей строки
//
// Параметры:
//  ТекСтрока      - Строка дерева значений
// 
Процедура УстановитьПометкиРодителей(ТекСтрока)

	Родитель = ТекСтрока.Родитель;
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ТекСостояние		= Родитель.Включить;

	НайденыВключенные	= Ложь;
	НайденыВыключенные	= Ложь;

	Для каждого Строка из Родитель.Строки Цикл
		
		Если Строка.Включить = 0 Тогда
			НайденыВыключенные	= Истина;
		ИначеЕсли Строка.Включить = 1 Тогда
			НайденыВключенные	= Истина;
		КонецЕсли; 
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;

	Если Включить = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель.Включить = Включить;
		УстановитьПометкиРодителей(Родитель);
	КонецЕсли; 
	
КонецПроцедуры // УстановитьПометкиРодителей()

Процедура УстановитьДоступностьЭлементов()
	
	ЭлементыФормы.Сводно.Видимость = (Версия >= 20);
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	НП = Новый НастройкаПериода;
	НП.УстановитьПериод(ДатаНачала, ДатаОкончания);

	Если НП.Редактировать() Тогда

		ДатаНачала		= НП.ПолучитьДатуНачала();
		ДатаОкончания	= НП.ПолучитьДатуОкончания();

	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

Процедура ПриОткрытии()
	
	МассивСтрока = Новый Массив; 
	МассивСтрока.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная);
	ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивСтрока, , КвалификаторСтроки);
	Если ТаблицаПравилВыгрузки.Колонки.Найти("Наименование") = Неопределено Тогда
		ТаблицаПравилВыгрузки.Колонки.Добавить("Наименование", ОписаниеТиповСтрока);
	КонецЕсли; 
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	Если ТаблицаПравилВыгрузки.Колонки.Найти("Включить") = Неопределено Тогда
		ТаблицаПравилВыгрузки.Колонки.Добавить("Включить", ОписаниеТиповБулево);
	КонецЕсли; 

	// Формирование дерева только если дерево не заполнено
	Если ТаблицаПравилВыгрузки.Строки.Количество() = 0 Тогда
		
		СтрокаДерева				=	ТаблицаПравилВыгрузки.Строки.Добавить();
		СтрокаДерева.Наименование	=	"Отражение зарплаты в регл учете";
		СтрокаДерева.Включить		=	Истина;
		
		СтрокаДерева				=	ТаблицаПравилВыгрузки.Строки.Добавить();
		СтрокаДерева.Наименование	=	"Платежные ведомости";
		СтрокаДерева.Включить		=	Истина;
		
		СтрокаДерева				=	ТаблицаПравилВыгрузки.Строки.Добавить();
		СтрокаДерева.Наименование	=	"Документы выплаты зарплаты";
		СтрокаДерева.Включить		=	Истина;
		
		СтрокаДерева				=	ТаблицаПравилВыгрузки.Строки.Добавить();
		СтрокаДерева.Наименование	=	"Поступления средств от ФСС";
		СтрокаДерева.Включить		=	Истина;
		
		ДатаНачала		= НачалоМесяца(РабочаяДата);
		ДатаОкончания	= КонецМесяца(РабочаяДата);
		
	КонецЕсли;
	
	Если Версия = 0 Тогда
		Версия = 20;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередСохранениемЗначений(Отказ)
	
	СохраненныеНастройки = Новый Структура;
	СохраненныеНастройки.Вставить("ДатаНачала",				ДатаНачала);
	СохраненныеНастройки.Вставить("ДатаОкончания",			ДатаОкончания);
	СохраненныеНастройки.Вставить("ИмяФайлаДанных",			ИмяФайлаДанных);
	СохраненныеНастройки.Вставить("Организация",			Организация);
	СохраненныеНастройки.Вставить("ТаблицаПравилВыгрузки",	ТаблицаПравилВыгрузки);
	
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	
	Организация				= СохраненныеНастройки.Организация;
	ДатаНачала				= СохраненныеНастройки.ДатаНачала;
	ДатаОкончания			= СохраненныеНастройки.ДатаОкончания;
	ИмяФайлаДанных			= СохраненныеНастройки.ИмяФайлаДанных;
	ТаблицаПравилВыгрузки	= СохраненныеНастройки.ТаблицаПравилВыгрузки;
	
	СтрокаТаблицы = ТаблицаПравилВыгрузки.Строки.Найти("НДФЛ и ЕСН - доходы и налоги");
	Если СтрокаТаблицы <> Неопределено Тогда
		СтрокаТаблицы.Наименование = "Данные учета по НДФЛ и ЕСН"
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаУстановитьФлажкиНажатие(Элемент)

	Для Каждого СтрокаУровня1 Из ТаблицаПравилВыгрузки.Строки Цикл
		
		СтрокаУровня1.Включить = Истина;
		
		Если СтрокаУровня1.Строки.Количество() = 0 Тогда 
			
			Продолжить;
			
		КонецЕсли;
		
		Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
			
			СтрокаУровня2.Включить = Истина;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура КнопкаСнятьФлажкиНажатие(Элемент)
	
	Для Каждого СтрокаУровня1 Из ТаблицаПравилВыгрузки.Строки Цикл

		СтрокаУровня1.Включить = Ложь;
		
		Если СтрокаУровня1.Строки.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
			
			СтрокаУровня2.Включить = Ложь;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ТаблицаПравилВыгрузки

Процедура ТаблицаПравилВыгрузкиПриИзмененииФлажка(Элемент, Колонка)

	ТекСтрока = ЭлементыФормы.ТаблицаПравилВыгрузки.ТекущаяСтрока;
	
	Если ТекСтрока.Включить = 2 Тогда
		ТекСтрока.Включить = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекСтрока);
	УстановитьПометкиРодителей(ТекСтрока);

КонецПроцедуры // ТаблицаПравилВыгрузкиПриИзмененииФлажка()

Процедура КнопкаВыполнитьНажатие(Элемент)
	
	Если ПустаяСтрока(ИмяФайлаДанных) Тогда
		Сообщить(НСтр("ru='Не указан файл выгрузки данных!';uk='Не зазначений файл вивантаження даних!'"));
		Возврат;
	КонецЕсли; 
	
	Если Организация.Пустая()Тогда
		Сообщить(НСтр("ru='Не указана организация!';uk='Не зазначена організація!'"));
		Возврат;
	КонецЕсли;
	
	// Получим Универсальную обработку обмена данными XML
	мУниверсальнаяВыгрузкаДанных	= Обработки.УниверсальныйОбменДаннымиXML.Создать();
	//мУниверсальнаяВыгрузкаДанных	= ВнешниеОбработки.Создать("<Указать путь к обработке>"); // 
		
	// Получим из макета правила обмена данными
	УникальныйИдентификатор			= Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена	= КаталогВременныхФайлов() + УникальныйИдентификатор + ".xml";
	Если Версия = 11 Тогда
		МакетПравилОбмена = ПолучитьМакет("ПравилаОбмена");
	ИначеЕсли Версия = 12 Тогда
		МакетПравилОбмена = ПолучитьМакет("ПравилаОбмена12");
	Иначе
		МакетПравилОбмена = ПолучитьМакет("ПравилаОбмена20");
	КонецЕсли;
	
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	
	// Загрузка в универсальную обработку XML правил обмена
	мУниверсальнаяВыгрузкаДанных.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
	мУниверсальнаяВыгрузкаДанных.ЗагрузитьПравилаОбмена();
	
	// Удаляем временный файл правил и внешней обработки
	Попытка
		УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);
	Исключение
		
	КонецПопытки;
	ВременнаяТаблицаПравил = мУниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки.Скопировать();
	
	//Вначале нужно подготовить таблицу выгрузки
	Для Каждого СтрокаУровня2 Из ВременнаяТаблицаПравил.Строки Цикл
		
		Наименование = СтрокаУровня2.Имя;
		Если Наименование = "ОтражениеЗарплатыВРеглУчете" Тогда
			
			СтрокаТаблицаПравилВыгрузки = ТаблицаПравилВыгрузки.Строки.Найти("Отражение зарплаты в регл учете",,Истина);
			Если СтрокаТаблицаПравилВыгрузки <> Неопределено Тогда
				СтрокаУровня2.Включить = Число(СтрокаТаблицаПравилВыгрузки.Включить)
			КонецЕсли;
			
		ИначеЕсли Наименование = "ЗарплатаКВыплатеОрганизаций" Тогда
			
			СтрокаТаблицаПравилВыгрузки = ТаблицаПравилВыгрузки.Строки.Найти("Платежные ведомости",,Истина);
			Если СтрокаТаблицаПравилВыгрузки <> Неопределено Тогда
				СтрокаУровня2.Включить = Число(СтрокаТаблицаПравилВыгрузки.Включить)
			КонецЕсли;
			
		ИначеЕсли Наименование = "РасходныйКассовыйОрдер" Тогда
			
			СтрокаТаблицаПравилВыгрузки = ТаблицаПравилВыгрузки.Строки.Найти("Документы выплаты зарплаты",,Истина);
			Если СтрокаТаблицаПравилВыгрузки <> Неопределено Тогда
				СтрокаУровня2.Включить = Число(СтрокаТаблицаПравилВыгрузки.Включить)
			КонецЕсли; 
		
		ИначеЕсли Наименование = "ПриходныйКассовыйОрдер" Тогда
			
			СтрокаТаблицаПравилВыгрузки = ТаблицаПравилВыгрузки.Строки.Найти("Документы выплаты зарплаты",,Истина);
			Если СтрокаТаблицаПравилВыгрузки <> Неопределено Тогда
				СтрокаУровня2.Включить = Число(СтрокаТаблицаПравилВыгрузки.Включить)
			КонецЕсли;
			
		ИначеЕсли Наименование = "ПлатежноеПоручениеИсходящее" Тогда
			
			СтрокаТаблицаПравилВыгрузки = ТаблицаПравилВыгрузки.Строки.Найти("Документы выплаты зарплаты",,Истина);
			Если СтрокаТаблицаПравилВыгрузки <> Неопределено Тогда
				СтрокаУровня2.Включить = Число(СтрокаТаблицаПравилВыгрузки.Включить)
			КонецЕсли;
			
		ИначеЕсли Наименование = "ПлатежноеПоручениеВходящее" Тогда
			
			СтрокаТаблицаПравилВыгрузки = ТаблицаПравилВыгрузки.Строки.Найти("Поступления средств от ФСС",,Истина);
			Если СтрокаТаблицаПравилВыгрузки <> Неопределено Тогда
				СтрокаУровня2.Включить = Число(СтрокаТаблицаПравилВыгрузки.Включить)
			КонецЕсли;	

			
		КонецЕсли;
		
	КонецЦикла;
	
	мУниверсальнаяВыгрузкаДанных.ИмяФайлаОбмена			= ИмяФайлаДанных;
	мУниверсальнаяВыгрузкаДанных.ДатаНачала 			= ДатаНачала;
	мУниверсальнаяВыгрузкаДанных.ДатаОкончания			= ДатаОкончания;
	мУниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки	= ВременнаяТаблицаПравил.Скопировать();
	мУниверсальнаяВыгрузкаДанных.Параметры.Вставить("Организация", Организация);
	Если Версия = 20 Тогда
		мУниверсальнаяВыгрузкаДанных.Параметры.Вставить("СводныеПроводки",	Сводно);
		
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить("","КодПоЕДРПОУ");
		КодЕДРПОУ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ОбщегоНазначения.ПолучитьРабочуюДату(), СписокПоказателей).КодПоЕДРПОУ;
		
		НовыйПараметр = мУниверсальнаяВыгрузкаДанных.ТаблицаНастройкиПараметров.Добавить();
		НовыйПараметр.Значение = КодЕДРПОУ;
		НовыйПараметр.Имя = "КодПоЕДРПОУ";
		НовыйПараметр.Наименование = "КодПоЕДРПОУ";
		НовыйПараметр.ПередаватьПараметрПриВыгрузке = Истина;		
		
	КонецЕсли;	
	
	
	мУниверсальнаяВыгрузкаДанных.ВыполнитьВыгрузку();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ

Процедура ИмяФайлаДанныхОткрытие(Элемент, СтандартнаяОбработка)

	ЗапуститьПриложение(Элемент.Значение);
	
КонецПроцедуры

Процедура ИмяФайлаДанныхНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыборФайла(Элемент);
	
КонецПроцедуры


Процедура ВерсияПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

