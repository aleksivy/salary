
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Переменные механизма встроенной справки
Перем ОтображатьСправкуФормы;
Перем ЕстьДоступныеУчетныеЗаписи;

// Переменные механизма Не разобранные письма
Перем ПолеДляУпорядочиванияНеРазобранныхПисем;

// Переменные механизма Заявки кандидатов
Перем ТекстМакетаОписанияЗаявки;
Перем ЕстьПисьмаПоЗаявке;

// Переменная, хранящая ссылку на текущую заявку. Необходима для того, чтобы не выполнять действия при активизации строки заявки каждый раз
Перем ТекущаяЗаявка;

// Письма, на основании которого создаем заявку
Перем ПисьмаДляЗаявки;

Перем РежимНабораПерсонала;

// Храним текущего пользователя
Перем ТекущийПользователь;

// Письмо, для которого надо автоматически установить рассмотрено
Перем ПисьмоКРассмотрению;

// Заявка для сотрудника
Перем ЗаявкаДляСотрудника;

Перем мКоличествоЭлементовВПодменю;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ПодготовитьСправкуФормы()
	
	НетДоступныхУчетныхЗаписей	= ?(ЕстьДоступныеУчетныеЗаписи, "none", "block");
	НетНеРазобранныхПисем		= ?(ЕстьДоступныеУчетныеЗаписи И КоличествоНеРазобранныхПисем > 0, "none", "block");
	
	ЦветФонаСправки		= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветФона());
	ЦветСсылкиСправки	= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки());
	
	ЭлементыФормы.ПанельСправкиФормы.ЦветРамки			= РаботаСДиалогами.ВстроеннаяСправка_ЦветРамки();
	ЭлементыФормы.НадписьЗакрытьСправкуФормы.ЦветФона	= РаботаСДиалогами.ВстроеннаяСправка_ЦветФона();
	ЭлементыФормы.НадписьЗакрытьСправкуФормы.ЦветТекста	= РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки();
	
	ТекстМакетаВстроеннойСправки =
	"<HTML>
	|	<HEAD>
	|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогами.ВстроеннаяСправка_СтилиДокумента() + "
	|	</HEAD>
	|
	|	<BODY aLink="+ЦветСсылкиСправки+" vLink="+ЦветСсылкиСправки+" link="+ЦветСсылкиСправки+" bgColor="+ЦветФонаСправки+" scroll=auto><FONT face=""MS Sans Serif"" size=1>
	|		<IMG src="+РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы, ЭлементыФормы.ВстроеннаяСправка)+">
	|		<DIV>Инструмент предназначен для работы с заявками кандидатов. Заявки можно добавлять в систему как на основе данных внешних источников, так и из пришедших к вам по электронной почте писем.</DIV>
	|		<DIV id=НетДоступныхУчетныхЗаписей style=""DISPLAY:"+НетДоступныхУчетныхЗаписей+""">У вас нет ни одной учетной записи для работы с электронной почтой. Вы можете <A id=Команда href=""1C:СоздатьУчетнуюЗапись"">создать новую учетную запись</A> либо <A id=Команда href=""1C:СкрытьНеРазобранныеПисьма"">скрыть панель с не разобранными письмами</A>, если вы не хотите работать с электронной почтой.</DIV>
	|		<DIV id=НетНеРазобранныхПисем style=""DISPLAY:"+НетНеРазобранныхПисем+""">В вашем почтовом ящике нет не разобранных писем. Вы можете <A id=Команда href=""1C:ПринятьПочту"">принять почту</A>, для проверки на наличие новых писем и их получения.</DIV>
	|		<DIV id=АктивизированоНеРазобранноеПисьмо style=""DISPLAY:none"">Выбранное письмо можно <A id=Команда href=""1C:ПринятьЗаявкуКандидата"">принять как заявку кандидата</A>. Письмо в этом случае пропадет из списка не разобранных, а в списке активных заявок появится новая заявка.</DIV>
	|		<DIV>Вы можете <A id=Команда href=""1C:ДобавитьЗаявку"">добавить новую заявку кандидата</A>. Если у вас есть резюме кандидата в электронном виде (например в виде текста на странице кадрового агентства), удобно его скопировать в буфер обмена, а затем вставить в большое поле для заметок, которое есть в заявке.</DIV>
	|		<DIV>Можно упорядочить заявки несколькими способами. При любом варианте упорядочивания, кроме упорядочивания по наименованию, заявки также будут сгруппированы по этому полю. Сейчас выбран вариант упорядочивания по <B><A id=Команда href=""1C:ИзменитьУпорядочиваниеЗаявок""><P id=ПолеДляУпорядочиванияЗаявок style=""DISPLAY: inline"">"+ПолучитьТекстДляПоляУпорядочивания()+"</P></A></B>.</DIV>
	|		<DIV id=АктивизированаЗаявкаКандидата style=""DISPLAY:none"">Для принятия кандидата на работу, необходимо сначала <A id=Команда href=""1C:СоздатьСотрудникаПоЗаявке"">создать сотрудника</A>.</DIV>
	|	</FONT></BODY>
	|</HTML>";
	
	ЭлементыФормы.ВстроеннаяСправка.УстановитьТекст(ТекстМакетаВстроеннойСправки);
	
КонецПроцедуры

Процедура ОбновитьСправкуФормы(ПолеДанных = Неопределено)
	
	ДокHTML = ЭлементыФормы.ВстроеннаяСправка.Документ;
	
	Если ПолеДанных = Неопределено ИЛИ ПолеДанных = "НетДоступныхУчетныхЗаписей" Тогда
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "НетДоступныхУчетныхЗаписей", НЕ ЕстьДоступныеУчетныеЗаписи, "block");
	КонецЕсли;
	
	Если ПолеДанных = Неопределено ИЛИ ПолеДанных = "НетНеРазобранныхПисем" Тогда
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "НетНеРазобранныхПисем", НЕ (ЕстьДоступныеУчетныеЗаписи И КоличествоНеРазобранныхПисем > 0), "block");
	КонецЕсли;
	
	Если ПолеДанных = Неопределено ИЛИ ПолеДанных = "АктивизированоНеРазобранноеПисьмо" Тогда
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "АктивизированоНеРазобранноеПисьмо", АктивизированоНеРазобранноеПисьмо, "block");
	КонецЕсли;
	
	Если ПолеДанных = Неопределено ИЛИ ПолеДанных = "ПолеДляУпорядочиванияЗаявок" Тогда
		ДокHTML.getElementById("ПолеДляУпорядочиванияЗаявок").innerText	= ПолучитьТекстДляПоляУпорядочивания();
	КонецЕсли;
	
	Если ПолеДанных = Неопределено ИЛИ ПолеДанных = "АктивизированаЗаявкаКандидата" Тогда
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "АктивизированаЗаявкаКандидата", АктивизированаЗаявкаКандидата, "block");
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСправкуФормы()

Процедура УстановитьВидимостьСправкиФормы(ОбновитьСправку = Истина)
	
	РаботаСДиалогами.ИзменитьВидимостьПанелиПоГоризонтали(ЭтаФорма, ОтображатьСправкуФормы, "ОсновнаяПанель", "СправкиФормы");
	
	ЭлементыФормы.КоманднаяПанельСправкиФормы.Кнопки.ПереключениеСправкиФормы.Пометка = ОтображатьСправкуФормы;
	
	Если ОтображатьСправкуФормы Тогда
		ПодключитьОбработчикИзмененияДанных("ПоказыватьНеРазобранныеПисьма",	"ОбновитьСправкуФормы");
		ПодключитьОбработчикИзмененияДанных("КоличествоНеРазобранныхПисем",		"ОбновитьСправкуФормы");
		ПодключитьОбработчикИзмененияДанных("АктивизированоНеРазобранноеПисьмо","ОбновитьСправкуФормы");
		ПодключитьОбработчикИзмененияДанных("ПолеДляУпорядочиванияЗаявок",		"ОбновитьСправкуФормы");
		ПодключитьОбработчикИзмененияДанных("АктивизированаЗаявкаКандидата",	"ОбновитьСправкуФормы");
		Если ОбновитьСправку Тогда
			ОбновитьСправкуФормы();
		КонецЕсли;
		
	Иначе
		ОтключитьОбработчикИзмененияДанных("ПоказыватьНеРазобранныеПисьма");
		ОтключитьОбработчикИзмененияДанных("КоличествоНеРазобранныхПисем");
		ОтключитьОбработчикИзмененияДанных("АктивизированоНеРазобранноеПисьмо");
		ОтключитьОбработчикИзмененияДанных("ПолеДляУпорядочиванияЗаявок");
		ОтключитьОбработчикИзмененияДанных("АктивизированаЗаявкаКандидата");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекстДляПоляУпорядочивания()
	
	Если ПолеДляУпорядочиванияЗаявок = "ДатаСобытия" Тогда
		Возврат "дате события";
		
	ИначеЕсли ПолеДляУпорядочиванияЗаявок = "Состояние" Тогда
		Возврат "состоянию";
		
	ИначеЕсли ПолеДляУпорядочиванияЗаявок = "Наименование" Тогда
		Возврат "наименованию";
		
	ИначеЕсли ПолеДляУпорядочиванияЗаявок = "Вакансия" Тогда
		Возврат "вакансии";
		
	ИначеЕсли ПолеДляУпорядочиванияЗаявок = "Ответственный" Тогда
		Возврат "ответственному";
		
	ИначеЕсли ПолеДляУпорядочиванияЗаявок = "Подразделение" Тогда
		Возврат "подразделению";
		
	ИначеЕсли ПолеДляУпорядочиванияЗаявок = "Должность" Тогда
		Возврат "должности";
		
	ИначеЕсли ПолеДляУпорядочиванияЗаявок = "ГруппаЗаявок" Тогда
		Возврат "группе заявок";
		
	КонецЕсли;
	
КонецФункции


Процедура УстановитьВидимостьНеРазобранныхПисем()
	
	Если ПоказыватьНеРазобранныеПисьма Тогда
		ЭлементыФормы.НадписьУправлениеВидимостьюСпискаПисем.Заголовок = НСтр("ru='Скрыть не разобранные письма';uk='Приховати не розібрані листи'");
	Иначе
		ЭлементыФормы.НадписьУправлениеВидимостьюСпискаПисем.Заголовок = НСтр("ru='Показать не разобранные письма';uk='Показати не розібрані листи'");
	КонецЕсли;
	
	РаботаСДиалогами.ИзменитьВидимостьПанелиПоВертикали(ЭтаФорма, ПоказыватьНеРазобранныеПисьма, "РабочаяОбласть", "НеразобранныеПисьма");
	
КонецПроцедуры

Процедура УстановитьТекстПустогоНеРазобранногоПисьма()
	
	Если КоличествоНеРазобранныхПисем > 0 Тогда
		ТекстСообщения = НСтр("ru='Письмо не выбрано. Текст письма не может быть показан';uk='Лист не вибраний. Текст листа не може бути показаний'");
	Иначе
		ТекстСообщения = НСтр("ru='Нет не разобранных писем';uk='Немає не розібраних листів'");
	КонецЕсли;
	
	ЭлементыФормы.ПолеHTMLДокументаНеРазобранныеПисьма.УстановитьТекст("<BODY scroll=auto rightMargin=0><FONT face=""MS Sans Serif"" size=1><P align=center>"+ТекстСообщения+"</P></FONT></BODY>");
	
КонецПроцедуры

Процедура НеРазобранныеПисьмаПриАктивизацииСтроки()
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеНеРазобранныеПисьма.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		УстановитьТекстПустогоНеРазобранногоПисьма();
		Если АктивизированоНеРазобранноеПисьмо Тогда
			АктивизированоНеРазобранноеПисьмо = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Не АктивизированоНеРазобранноеПисьмо Тогда
		АктивизированоНеРазобранноеПисьмо = Истина;
	КонецЕсли;
	
	ВыбранноеЭлектронноеПисьмо = ДанныеСтроки.Ссылка;
	
	Если ВыбранноеЭлектронноеПисьмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
		НайденноеСоответствие = глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем").Получить(ВыбранноеЭлектронноеПисьмо);
		Если НайденноеСоответствие = Неопределено Тогда
			КопияТекстаПисьма = ВыбранноеЭлектронноеПисьмо.ТекстПисьма;
			УправлениеЭлектроннойПочтой.ПропарситьHTMLИДВ_ТекстКартинки(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), ТекущийПользователь, ВыбранноеЭлектронноеПисьмо, КопияТекстаПисьма);
			КопияТекстаПисьма = СтрЗаменить(КопияТекстаПисьма, "<BODY", "<BODY scroll=auto");
			ЭлементыФормы.ПолеHTMLДокументаНеРазобранныеПисьма.УстановитьТекст(КопияТекстаПисьма);
			
		Иначе
			НайденноеСоответствие = СтрЗаменить(НайденноеСоответствие, "<BODY", "<BODY scroll=auto");
			ЭлементыФормы.ПолеHTMLДокументаНеРазобранныеПисьма.УстановитьТекст(НайденноеСоответствие);
			
		КонецЕсли;
		
	ИначеЕсли ВыбранноеЭлектронноеПисьмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст Тогда
		ЭлементыФормы.ПолеHTMLДокументаНеРазобранныеПисьма.УстановитьТекст(УправлениеЭлектроннойПочтой.ВернутьТекстПисьмаВФорматеHTML(ВыбранноеЭлектронноеПисьмо.ТекстПисьма));
		
	Иначе
		ТекстПисьма = СтрЗаменить(ВыбранноеЭлектронноеПисьмо.ТекстПисьма, "<BODY", "<BODY scroll=auto");
		ЭлементыФормы.ПолеHTMLДокументаНеРазобранныеПисьма.УстановитьТекст(ТекстПисьма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСписокНеРазобранныхПисем()
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеНеРазобранныеПисьма.ТекущиеДанные;
	ЗначениеГруппировки	= 0;
	ЗначениеЭлемента	= 0;
	Если ДанныеСтроки <> Неопределено Тогда
		Если ДанныеСтроки.Ссылка.Пустая() Тогда
			ЗначениеГруппировки = ДанныеСтроки.ЗначениеГруппировки;
		Иначе
			Если ДанныеСтроки.Родитель <> Неопределено Тогда
				ЗначениеГруппировки = ДанныеСтроки.Родитель.ЗначениеГруппировки;
			КонецЕсли;
			ЗначениеЭлемента = ДанныеСтроки.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ОтображатьИерархию = ПолучитьГруппировкуУпорядочивания(ПолеДляУпорядочиванияНеРазобранныхПисем);
	
	СписокСвернутыхГрупп = Новый Соответствие;
	Если ОтображатьИерархию Тогда
		Для Каждого СтрокаДерева Из ДеревоНеРазобранныхПисем.Строки Цикл
			Если ЭлементыФормы.ТабличноеПолеНеРазобранныеПисьма.Развернут(СтрокаДерева) Тогда
				Продолжить;
			КонецЕсли;
			
			СписокСвернутыхГрупп.Вставить(СтрокаДерева.ЗначениеГруппировки, СтрокаДерева.ЗначениеГруппировки);
		КонецЦикла;
	КонецЕсли;
	
	ДеревоНеРазобранныхПисем.Строки.Очистить();
	
	Выборка = ПолучитьСписокНеРазобранныхПисем(ПолеДляУпорядочиванияНеРазобранныхПисем);
	
	ЭлементыФормы.ТабличноеПолеНеРазобранныеПисьма.Колонки.Тема.ОтображатьИерархию = ОтображатьИерархию;
	
	Если Выборка <> Неопределено Тогда
		Если ОтображатьИерархию Тогда
			Пока Выборка.СледующийПоЗначениюПоля(ПолеДляУпорядочиванияНеРазобранныхПисем) Цикл
				ЗначениеГруппировки = Выборка[ПолеДляУпорядочиванияНеРазобранныхПисем];
				Если ТипЗнч(ЗначениеГруппировки) = Тип("Дата") Тогда
					ИмяГруппировки = ФорматДаты(ЗначениеГруппировки, "Дата не установлена");
				Иначе
					ИмяГруппировки = ЗначениеГруппировки;
				КонецЕсли;
				
				Родитель = ДеревоНеРазобранныхПисем.Строки.Найти(ИмяГруппировки, "ЗначениеГруппировки");
				Если Родитель = Неопределено Тогда
					Родитель = ДеревоНеРазобранныхПисем.Строки.Добавить();
					Родитель.ЗначениеГруппировки = ИмяГруппировки;
				КонецЕсли;
				
				Пока Выборка.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(Родитель.Строки.Добавить(), Выборка);
				КонецЦикла;
				
				Родитель.Тема	= "" + ИмяГруппировки + " (" + Родитель.Строки.Количество() + ")";
				Если СписокСвернутыхГрупп.Получить(Родитель.ЗначениеГруппировки) = Неопределено Тогда
					ЭлементыФормы.ТабличноеПолеНеРазобранныеПисьма.Развернуть(Родитель, Истина);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ДеревоНеРазобранныхПисем.Строки.Добавить(), Выборка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	НужнаяСтрока = ДеревоНеРазобранныхПисем.Строки.Найти(ЗначениеГруппировки, "ЗначениеГруппировки");
	Если ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		Если НужнаяСтрока <> Неопределено Тогда
			НужнаяСтрока = НужнаяСтрока.Строки.Найти(ЗначениеЭлемента, "Ссылка");
		КонецЕсли;
		Если НужнаяСтрока = Неопределено Тогда
			НужнаяСтрока = ДеревоЗаявокКандидатов.Строки.Найти(ЗначениеЭлемента, "Ссылка", Истина);
		КонецЕсли;
	КонецЕсли;
	Если НужнаяСтрока <> Неопределено Тогда
		ЭлементыФормы.ТабличноеПолеНеРазобранныеПисьма.ТекущаяСтрока = НужнаяСтрока;
	КонецЕсли;
	
	Если Выборка <> Неопределено Тогда
		КоличествоНеРазобранныхПисем = Выборка.Количество();
	Иначе
		КоличествоНеРазобранныхПисем = 0;
	КонецЕсли;
	
	ЭлементыФормы.НадписьКоличествоНеРазобранныхПисем.Заголовок = НСтр("ru=' Не разобранные письма (';uk=' Не розібрані листи ('")+КоличествоНеРазобранныхПисем+")";
	
	УстановитьТекстПустогоНеРазобранногоПисьма();
	
КонецПроцедуры

Процедура ПолучениеПисем()
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
		Предупреждение(НСтр("ru='У вас нет прав для работы с электронной почтой';uk='У вас немає прав для роботи з електронною поштою'"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.НазначениеУчетнойЗаписи = ЗНАЧЕНИЕ(Перечисление.НазначенияУчетнойЗаписи.ПерепискаСКандидатами)";
	МассивУчетныхЗаписей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"), МассивУчетныхЗаписей, , , Истина);
	
	ОбновитьСписокНеРазобранныхПисем();
	ОбновитьСписокЗаявок();
	
КонецПроцедуры

Процедура УдалитьНеРазобранноеПисьмо(ДанныеСтроки)
	
	Если ДанныеСтроки.Родитель = Неопределено Тогда
		ДеревоНеРазобранныхПисем.Строки.Удалить(ДанныеСтроки);
	Иначе
		Родитель = ДанныеСтроки.Родитель;
		Родитель.Строки.Удалить(ДанныеСтроки);
		Если Родитель.Строки.Количество() = 0 Тогда
			ДеревоНеРазобранныхПисем.Строки.Удалить(Родитель);
		Иначе
			Родитель.Тема = Лев(Родитель.Тема, Найти(Родитель.Тема, "(")) + Родитель.Строки.Количество() + ")";
		КонецЕсли;
	КонецЕсли;
	
	КоличествоНеРазобранныхПисем = КоличествоНеРазобранныхПисем - 1;
	ЭлементыФормы.НадписьКоличествоНеРазобранныхПисем.Заголовок = НСтр("ru=' Не разобранные письма (';uk=' Не розібрані листи ('")+КоличествоНеРазобранныхПисем+")";
	
КонецПроцедуры


Процедура ОбновитьОписаниеЗаявки()
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДокHTML = ЭлементыФормы.ПолеHTMLДокументаОписаниеЗаявки.Документ;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ЗаявкаКандидата",	ДанныеСтроки.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкиКандидатов.Состояние,
	|	ЗаявкиКандидатов.ИсточникИнформации,
	|	ЗаявкиКандидатов.Вакансия,
	|	ЗаявкиКандидатов.Подразделение,
	|	ЗаявкиКандидатов.Должность,
	|	ЗаявкиКандидатов.ГруппаЗаявок,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.Состояние = ЗНАЧЕНИЕ(Справочник.СостоянияЗаявокКандидатов.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СостояниеНеЗаполнено,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.ИсточникИнформации = ЗНАЧЕНИЕ(Справочник.ИсточникиИнформации.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИсточникИнформацииНеЗаполнен,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.Вакансия = ЗНАЧЕНИЕ(Справочник.Вакансии.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВакансияНеЗаполнена,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.Подразделение = НЕОПРЕДЕЛЕНО
	|				ИЛИ ЗаявкиКандидатов.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|				ИЛИ ЗаявкиКандидатов.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПодразделениеНеЗаполнено,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДолжностьНеЗаполнена,
	|	ВЫБОР
	|		КОГДА (ЗаявкиКандидатов.Подразделение = НЕОПРЕДЕЛЕНО
	|				ИЛИ ЗаявкиКандидатов.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|				ИЛИ ЗаявкиКандидатов.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
	|				И ЗаявкиКандидатов.Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РабочееМестоНеЗаполнено,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.ГруппаЗаявок = ЗНАЧЕНИЕ(Справочник.ГруппыЗаявокКандидатов.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ГруппаЗаявокНеЗаполнена,
	|	ЗаявкиКандидатов.ДатаОткрытия,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДатаОткрытияНеУказана,
	|	ЗаявкиКандидатов.Комментарий,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.Комментарий ПОДОБНО """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КомментарийНеЗаполнен
	|ИЗ
	|	Справочник.ЗаявкиКандидатов КАК ЗаявкиКандидатов
	|ГДЕ
	|	ЗаявкиКандидатов.Ссылка = &ЗаявкаКандидата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	СостояниеИд	= "";
	Если Выборка.СостояниеНеЗаполнено Тогда
		Состояние	= "не указано";
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СостояниеЗаявкиУказано", Ложь);
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СостояниеЗаявкиНеУказано", Истина);
	Иначе
		Состояние	= Строка(Выборка.Состояние);
		СостояниеИд	= Строка(Выборка.Состояние.УникальныйИдентификатор());
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СостояниеЗаявкиУказано", Истина);
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СостояниеЗаявкиНеУказано", Ложь);
	КонецЕсли;
	
	ИсточникИнформацииИд	= "";
	Если Выборка.ИсточникИнформацииНеЗаполнен Тогда
		ИсточникИнформации		= "не указан";
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ИсточникИнформацииУказан", Ложь);
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ИсточникИнформацииНеУказан", Истина);
	Иначе
		ИсточникИнформации		= Строка(Выборка.ИсточникИнформации);
		ИсточникИнформацииИд	= Строка(Выборка.ИсточникИнформации.УникальныйИдентификатор());
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ИсточникИнформацииУказан", Истина);
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ИсточникИнформацииНеУказан", Ложь);
	КонецЕсли;
	
	Если Выборка.ВакансияНеЗаполнена Тогда
		Если Выборка.РабочееМестоНеЗаполнено Тогда
			Вакансия	= ". Вакансия, на которую рассматривается кандидат, <A id=Команда href=""1C:ИзменитьВакансию"">не указана</A>";
		Иначе
			Вакансия	= ". Кандидат рассматриваетcя";
			Если Не Выборка.ПодразделениеНеЗаполнено Тогда
				ТипСправочника = ?(ТипЗнч(Выборка.Подразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций"), "ПодразделениеОрганизации", "Подразделение");
				ПодразделениеИд	= Строка(Выборка.Подразделение.УникальныйИдентификатор());
				Вакансия		= Вакансия + " в подразделение: " + "<A id=Команда href=""1C:Открыть"+ТипСправочника+""" target="""+ПодразделениеИд+""">"+Строка(Выборка.Подразделение)+"</A>";
			КонецЕсли;
			Если Не Выборка.ДолжностьНеЗаполнена Тогда
				ДолжностьИд	= Строка(Выборка.Должность.УникальныйИдентификатор());
				Вакансия	= Вакансия + " на должность: " + "<A id=Команда href=""1C:ОткрытьДолжность"" target="""+ДолжностьИд+""">"+Строка(Выборка.Должность)+"</A>";
			КонецЕсли;
		КонецЕсли;
	Иначе
		ВакансияИд	= Строка(Выборка.Вакансия.УникальныйИдентификатор());
		Вакансия	= ". Кандидат рассматриваетcя на вакансию: <A id=Команда href=""1C:ОткрытьВакансию"" target="""+ВакансияИд+""">"+Строка(Выборка.Вакансия)+"</A>";
	КонецЕсли;
	
	ГруппаЗаявокИд	= "";
	Если Выборка.ГруппаЗаявокНеЗаполнена Тогда
		ГруппаЗаявок	= "групп";
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ГруппаЗаявокУказана", Ложь);
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ГруппаЗаявокНеУказана", Истина);
	Иначе
		ГруппаЗаявок	= Строка(Выборка.ГруппаЗаявок);
		ГруппаЗаявокИд	= Строка(Выборка.ГруппаЗаявок.УникальныйИдентификатор());
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ГруппаЗаявокУказана", Истина);
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ГруппаЗаявокНеУказана", Ложь);
	КонецЕсли;
	
	ВыборкаСобытий = ПолучитьСписокСобытийПоЗаявке(ДанныеСтроки.Ссылка);
	Если ВыборкаСобытий.Количество() > 0 Тогда
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ЕстьЗапланированныеВстречи", Истина);
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СписокЗапланированныхВстреч", Истина);
		СписокЗапланированныхВстреч	= "";
		Пока ВыборкаСобытий.Следующий() Цикл
			Если НачалоДня(ВыборкаСобытий.НачалоСобытия) = НачалоДня(ВыборкаСобытий.ОкончаниеСобытия) Тогда
				ПериодСобытия = " " + Формат(ВыборкаСобытий.НачалоСобытия, "ДФ='dd MMMM'") + " с " + Формат(ВыборкаСобытий.НачалоСобытия, "ДФ=HH:mm") + " до " + Формат(ВыборкаСобытий.ОкончаниеСобытия, "ДФ=HH:mm");
			Иначе
				ПериодСобытия = " с " + Формат(ВыборкаСобытий.НачалоСобытия, "ДФ='dd MMMM HH:mm'") + " до " + Формат(ВыборкаСобытий.ОкончаниеСобытия, "ДФ='dd MMMM HH:mm'");
			КонецЕсли;
			НаименованиеСобытия = ВыборкаСобытий.ОписаниеСобытия + ПериодСобытия;
			
			ИдСобытия = Строка(ВыборкаСобытий.Ссылка.УникальныйИдентификатор());
			СписокЗапланированныхВстреч = СписокЗапланированныхВстреч + "<A id=Команда href=""1C:ОткрытьСобытие"" target="""+ИдСобытия+""">" + НаименованиеСобытия + "</A>&#160;&#160;";
		КонецЦикла;
	Иначе
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ЕстьЗапланированныеВстречи", Ложь);
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СписокЗапланированныхВстреч", Ложь);
	КонецЕсли;
	
	ВыборкаФайлов = ПолучитьСписокФайловПоЗаявке(ДанныеСтроки.Ссылка);
	Если ВыборкаФайлов.Количество() > 0 Тогда
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ЕстьФайлы", Истина);
		СписокФайлов	= "";
		Пока ВыборкаФайлов.Следующий() Цикл
			ИдФайла = Строка(ВыборкаФайлов.Ссылка.УникальныйИдентификатор());
			СписокФайлов = СписокФайлов + "<A id=Команда href=""1C:ОткрытьФайл"" target="""+ИдФайла+""">" + ВыборкаФайлов.Наименование + "</A>&#160;&#160;";
		КонецЦикла;
	Иначе
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ЕстьФайлы", Ложь);
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "РазделительЗаявки", Не Выборка.КомментарийНеЗаполнен, "block");
	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ДатаОткрытияЗаявки", Не Выборка.ДатаОткрытияНеУказана);
	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "КомментарийЗаявки", Не Выборка.КомментарийНеЗаполнен, "block");
	
	ДокHTML.getElementById("ДатаОткрытияЗаявки").innerText			= "Заявка рассматривается с "+Формат(Выборка.ДатаОткрытия, "ДФ='dd ММММ'")+". ";
	ДокHTML.getElementById("СостояниеЗаявки").innerHTML				= "<A id=Команда href=""1C:ИзменитьСостояние"" target="""+СостояниеИд+""">"+Состояние+"</A>";
	ДокHTML.getElementById("ИсточникИнформации").innerHTML			= "<A id=Команда href=""1C:ИзменитьИсточникИнформации"" target="""+ИсточникИнформацииИд+""">"+ИсточникИнформации+"</A>";
	ДокHTML.getElementById("Вакансия").innerHTML					= Вакансия;
	ДокHTML.getElementById("ГруппаЗаявок").innerHTML				= "<A id=Команда href=""1C:ИзменитьГруппуЗаявок"" target="""+ГруппаЗаявокИд+""">"+ГруппаЗаявок+"</A>";
	ДокHTML.getElementById("СписокЗапланированныхВстреч").innerHTML	= СписокЗапланированныхВстреч;
	ДокHTML.getElementById("СписокФайлов").innerHTML				= СписокФайлов;
	ДокHTML.getElementById("КомментарийЗаявки").innerText			= Выборка.Комментарий;
	
КонецПроцедуры // ОбновитьОписаниеЗаявки()

Процедура ЗаявкиКандидатовПриАктивизацииСтроки()
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		ЕстьПисьмаПоЗаявке = Ложь;
		Если АктивизированаЗаявкаКандидата Тогда
			АктивизированаЗаявкаКандидата = Ложь;
		КонецЕсли;
		ПерепискаПоЗаявке.Отбор.ЗаявкаКандидата.Значение = Справочники.ЗаявкиКандидатов.ПолучитьСсылку();
		ЭлементыФормы.ПолеHTMLДокументаОписаниеЗаявки.УстановитьТекст("<BODY scroll=auto rightMargin=0></BODY>");
		ТекущаяЗаявка = Неопределено;
		УстановитьТекстПустогоПисьмаПоЗаявке();
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Ссылка = ТекущаяЗаявка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не АктивизированаЗаявкаКандидата Тогда
		АктивизированаЗаявкаКандидата = Истина;
	КонецЕсли;
	
	ТекущаяЗаявка = ДанныеСтроки.Ссылка;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ЗаявкаКандидата",	ДанныеСтроки.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭлектронноеПисьмо.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
	|ГДЕ
	|	ЭлектронноеПисьмо.ЗаявкаКандидата = &ЗаявкаКандидата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмо.ДатаОтправления УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьПисьмаПоЗаявке = Выборка.Следующий();
	
	ПерепискаПоЗаявке.Отбор.ЗаявкаКандидата.Значение = ТекущаяЗаявка;
	
	Если ЕстьПисьмаПоЗаявке Тогда
		ЭлементыФормы.ТабличноеПолеПерепискаПоЗаявке.ТекущаяСтрока = Выборка.Ссылка;
	Иначе
		УстановитьТекстПустогоПисьмаПоЗаявке();
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкиКандидатов.Состояние,
	|	ЗаявкиКандидатов.ИсточникИнформации,
	|	ЗаявкиКандидатов.Вакансия,
	|	ЗаявкиКандидатов.Подразделение,
	|	ЗаявкиКандидатов.Должность,
	|	ЗаявкиКандидатов.ГруппаЗаявок,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.Состояние = ЗНАЧЕНИЕ(Справочник.СостоянияЗаявокКандидатов.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СостояниеНеЗаполнено,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.ИсточникИнформации = ЗНАЧЕНИЕ(Справочник.ИсточникиИнформации.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИсточникИнформацииНеЗаполнен,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.Вакансия = ЗНАЧЕНИЕ(Справочник.Вакансии.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВакансияНеЗаполнена,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.Подразделение = НЕОПРЕДЕЛЕНО
	|				ИЛИ ЗаявкиКандидатов.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|				ИЛИ ЗаявкиКандидатов.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПодразделениеНеЗаполнено,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДолжностьНеЗаполнена,
	|	ВЫБОР
	|		КОГДА (ЗаявкиКандидатов.Подразделение = НЕОПРЕДЕЛЕНО
	|				ИЛИ ЗаявкиКандидатов.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|				ИЛИ ЗаявкиКандидатов.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
	|				И ЗаявкиКандидатов.Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РабочееМестоНеЗаполнено,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.ГруппаЗаявок = ЗНАЧЕНИЕ(Справочник.ГруппыЗаявокКандидатов.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ГруппаЗаявокНеЗаполнена,
	|	ЗаявкиКандидатов.ДатаОткрытия,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДатаОткрытияНеУказана,
	|	ЗаявкиКандидатов.Комментарий,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.Комментарий ПОДОБНО """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КомментарийНеЗаполнен
	|ИЗ
	|	Справочник.ЗаявкиКандидатов КАК ЗаявкиКандидатов
	|ГДЕ
	|	ЗаявкиКандидатов.Ссылка = &ЗаявкаКандидата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Состояние1	= "none";
	Состояние2	= "none";
	СостояниеИд	= "";
	Если Выборка.СостояниеНеЗаполнено Тогда
		Состояние2	= "inline";
		Состояние	= "не указано";
	Иначе
		Состояние1	= "inline";
		Состояние	= Строка(Выборка.Состояние);
		СостояниеИд	= Строка(Выборка.Состояние.УникальныйИдентификатор());
	КонецЕсли;
	
	ИсточникИнформации1		= "none";
	ИсточникИнформации2		= "none";
	ИсточникИнформацииИд	= "";
	Если Выборка.ИсточникИнформацииНеЗаполнен Тогда
		ИсточникИнформации2		= "inline";
		ИсточникИнформации		= "не указан";
	Иначе
		ИсточникИнформации1		= "inline";
		ИсточникИнформации		= Строка(Выборка.ИсточникИнформации);
		ИсточникИнформацииИд	= Строка(Выборка.ИсточникИнформации.УникальныйИдентификатор());
	КонецЕсли;
	
	Если Выборка.ВакансияНеЗаполнена Тогда
		Если Выборка.РабочееМестоНеЗаполнено Тогда
			Вакансия	= ". Вакансия, на которую рассматривается кандидат, <A id=Команда href=""1C:ИзменитьВакансию"">не указана</A>";
		Иначе
			Вакансия	= ". Кандидат рассматриваетcя";
			Если Не Выборка.ПодразделениеНеЗаполнено Тогда
				ТипСправочника = ?(ТипЗнч(Выборка.Подразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций"), "ПодразделениеОрганизации", "Подразделение");
				ПодразделениеИд	= Строка(Выборка.Подразделение.УникальныйИдентификатор());
				Вакансия		= Вакансия + " в подразделение: " + "<A id=Команда href=""1C:Открыть"+ТипСправочника+""" target="""+ПодразделениеИд+""">"+Строка(Выборка.Подразделение)+"</A>";
			КонецЕсли;
			Если Не Выборка.ДолжностьНеЗаполнена Тогда
				ДолжностьИд	= Строка(Выборка.Должность.УникальныйИдентификатор());
				Вакансия	= Вакансия + " на должность: " + "<A id=Команда href=""1C:ОткрытьДолжность"" target="""+ДолжностьИд+""">"+Строка(Выборка.Должность)+"</A>";
			КонецЕсли;
		КонецЕсли;
	Иначе
		ВакансияИд	= Строка(Выборка.Вакансия.УникальныйИдентификатор());
		Вакансия	= ". Кандидат рассматриваетcя на вакансию: <A id=Команда href=""1C:ОткрытьВакансию"" target="""+ВакансияИд+""">"+Строка(Выборка.Вакансия)+"</A>";
	КонецЕсли;
	
	ГруппаЗаявок1	= "none";
	ГруппаЗаявок2	= "none";
	ГруппаЗаявокИд	= "";
	Если Выборка.ГруппаЗаявокНеЗаполнена Тогда
		ГруппаЗаявок2	= "inline";
		ГруппаЗаявок	= "групп";
	Иначе
		ГруппаЗаявок1	= "inline";
		ГруппаЗаявок	= Строка(Выборка.ГруппаЗаявок);
		ГруппаЗаявокИд	= Строка(Выборка.ГруппаЗаявок.УникальныйИдентификатор());
	КонецЕсли;
	
	ВыборкаСобытий = ПолучитьСписокСобытийПоЗаявке(ДанныеСтроки.Ссылка);
	Если ВыборкаСобытий.Количество() > 0 Тогда
		ЕстьЗапланированныеВстречи	= "inline";
		СписокЗапланированныхВстреч	= "";
		Пока ВыборкаСобытий.Следующий() Цикл
			Если НачалоДня(ВыборкаСобытий.НачалоСобытия) = НачалоДня(ВыборкаСобытий.ОкончаниеСобытия) Тогда
				ПериодСобытия = " " + Формат(ВыборкаСобытий.НачалоСобытия, "ДФ='dd MMMM'") + " с " + Формат(ВыборкаСобытий.НачалоСобытия, "ДФ=HH:mm") + " до " + Формат(ВыборкаСобытий.ОкончаниеСобытия, "ДФ=HH:mm");
			Иначе
				ПериодСобытия = " с " + Формат(ВыборкаСобытий.НачалоСобытия, "ДФ='dd MMMM HH:mm'") + " до " + Формат(ВыборкаСобытий.ОкончаниеСобытия, "ДФ='dd MMMM HH:mm'");
			КонецЕсли;
			НаименованиеСобытия = ВыборкаСобытий.ОписаниеСобытия + ПериодСобытия;
			
			ИдСобытия = Строка(ВыборкаСобытий.Ссылка.УникальныйИдентификатор());
			СписокЗапланированныхВстреч = СписокЗапланированныхВстреч + "<A id=Команда href=""1C:ОткрытьСобытие"" target="""+ИдСобытия+""">" + НаименованиеСобытия + "</A>&#160;&#160;";
		КонецЦикла;
	Иначе
		ЕстьЗапланированныеВстречи	= "none";
	КонецЕсли;
	
	ВыборкаФайлов = ПолучитьСписокФайловПоЗаявке(ДанныеСтроки.Ссылка);
	Если ВыборкаФайлов.Количество() > 0 Тогда
		ЕстьФайлы	= "inline";
		СписокФайлов	= "";
		Пока ВыборкаФайлов.Следующий() Цикл
			ИдФайла = Строка(ВыборкаФайлов.Ссылка.УникальныйИдентификатор());
			СписокФайлов = СписокФайлов + "<A id=Команда href=""1C:ОткрытьФайл"" target="""+ИдФайла+""">" + ВыборкаФайлов.Наименование + "</A>&#160;&#160;";
		КонецЦикла;
	Иначе
		ЕстьФайлы	= "none";
	КонецЕсли;
	
	Если Выборка.ДатаОткрытияНеУказана Тогда
		ЕстьДатаОткрытия	= "none";
	Иначе
		ЕстьДатаОткрытия	= "inline";
	КонецЕсли;
	
	Если Выборка.КомментарийНеЗаполнен Тогда
		ЕстьКомментарий	= "none";
	Иначе
		ЕстьКомментарий	= "block";
	КонецЕсли;
	
	ТекстМакетаОписанияЗаявки =
	"<HTML>
	|	<HEAD>
	|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
	|		<STYLE type=text/css>
	|			DIV {
	|				PADDING: 1px 0px 1px 1px;
	|				BORDER-TOP-COLOR: #dadac4;
	|				BORDER-RIGHT-COLOR: #dadac4;
	|				BORDER-BOTTOM-COLOR: #dadac4;
	|				BORDER-LEFT-COLOR: #dadac4;
	|			}
	|			A {
	|				PADDING-TOP: 1px;
	|				PADDING-BOTTOM: 1px;
	|			}
	|			BODY {
	|				SCROLLBAR-FACE-COLOR: #fffbf0;
	|				SCROLLBAR-HIGHLIGHT-COLOR: #dadac4;
	|				SCROLLBAR-3DLIGHT-COLOR: #fff; MARGIN: 5px;
	|				SCROLLBAR-ARROW-COLOR: #708090;
	|				SCROLLBAR-TRACK-COLOR: #fffbf0;
	|				SCROLLBAR-DARKSHADOW-COLOR: #fff;
	|				MARGIN: 5px 0px 5px 5px;
	|			}
	|		</STYLE>
	|	</HEAD>
	|
	|	<BODY aLink=#000 vLink=#000 link=#000 scroll=auto><FONT face=""MS Sans Serif"" size=1>
	|		<DIV>
	|			<P id=ДатаОткрытияЗаявки style=""DISPLAY: "+ЕстьДатаОткрытия+""">Заявка рассматривается с "+Формат(Выборка.ДатаОткрытия, "ДФ='dd ММММ'")+". </P>
	|			<P id=СостояниеЗаявкиУказано style=""DISPLAY:"+Состояние1+""">Текущее состояние заявки: </P>
	|			<P id=СостояниеЗаявкиНеУказано style=""DISPLAY:"+Состояние2+""">Текущее состояние заявки </P>
	|			<P id=СостояниеЗаявки style=""DISPLAY:inline""><A id=Команда href=""1C:ИзменитьСостояние"" target="""+СостояниеИд+""">"+Состояние+"</A></P>
	|
	|			<P id=ИсточникИнформацииУказан style=""DISPLAY:"+ИсточникИнформации1+""">. Источник, из которого кандидат узнал о вакансии: </P>
	|			<P id=ИсточникИнформацииНеУказан style=""DISPLAY:"+ИсточникИнформации2+""">. Источник, из которого кандидат узнал о вакансии, </P>
	|			<P id=ИсточникИнформации style=""DISPLAY:inline""><A id=Команда href=""1C:ИзменитьИсточникИнформации"" target="""+ИсточникИнформацииИд+""">"+ИсточникИнформации+"</A></P>
	|
	|			<P id=Вакансия style=""DISPLAY:inline"">"+Вакансия+"</P></A>
	|
	|			<P id=ГруппаЗаявокУказана style=""DISPLAY:"+ГруппаЗаявок1+""">. Заявка отнесена к группе: </P>
	|			<P id=ГруппаЗаявокНеУказана style=""DISPLAY:"+ГруппаЗаявок2+""">. Заявка не отнесена ни к одной из </P>
	|			<P id=ГруппаЗаявок style=""DISPLAY:inline""><A id=Команда href=""1C:ИзменитьГруппуЗаявки"" target="""+ГруппаЗаявокИд+""">"+ГруппаЗаявок+"</A></P>
	|
	|			<P id=ЕстьЗапланированныеВстречи style=""DISPLAY:"+ЕстьЗапланированныеВстречи+""">. С кандидатом запланированы встречи: </P>
	|			<P id=СписокЗапланированныхВстреч style=""DISPLAY:"+ЕстьЗапланированныеВстречи+""">"+СписокЗапланированныхВстреч+"</P>
	|
	|			<P id=ЕстьФайлы style=""DISPLAY:"+ЕстьФайлы+""">. К заявке приложены файлы: </P>
	|			<P id=СписокФайлов style=""DISPLAY:"+ЕстьФайлы+""">"+СписокФайлов+"</P>
	|		</DIV>
	|		<HR id=РазделительЗаявки style=""DISPLAY:"+ЕстьКомментарий+"""/>
	|		<DIV id=КомментарийЗаявки style=""DISPLAY:"+ЕстьКомментарий+""">"+СтрЗаменить(Выборка.Комментарий, Символ(10), "<BR>")+"</DIV>
	|	</FONT></BODY>
	|</HTML>";
	
	ЭлементыФормы.ПолеHTMLДокументаОписаниеЗаявки.УстановитьТекст(ТекстМакетаОписанияЗаявки);
	
КонецПроцедуры

Процедура ОбновитьСписокЗаявок()
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	ЗначениеГруппировки	= 0;
	ЗначениеЭлемента	= 0;
	Если ДанныеСтроки <> Неопределено Тогда
		Если ДанныеСтроки.Ссылка.Пустая() Тогда
			ЗначениеГруппировки = ДанныеСтроки.ЗначениеГруппировки;
		Иначе
			Если ДанныеСтроки.Родитель <> Неопределено Тогда
				ЗначениеГруппировки = ДанныеСтроки.Родитель.ЗначениеГруппировки;
			КонецЕсли;
			ЗначениеЭлемента = ДанныеСтроки.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ОтображатьИерархию = ПолучитьГруппировкуУпорядочивания(ПолеДляУпорядочиванияЗаявок);
	
	СписокСвернутыхГрупп = Новый Соответствие;
	Если ОтображатьИерархию Тогда
		Для Каждого СтрокаДерева Из ДеревоЗаявокКандидатов.Строки Цикл
			Если ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.Развернут(СтрокаДерева) Тогда
				Продолжить;
			КонецЕсли;
			
			СписокСвернутыхГрупп.Вставить(СтрокаДерева.ЗначениеГруппировки, СтрокаДерева.ЗначениеГруппировки);
		КонецЦикла;
	КонецЕсли;
	
	ДеревоЗаявокКандидатов.Строки.Очистить();
	
	Выборка = ПолучитьСписокЗаявок(ПолеДляУпорядочиванияЗаявок, РежимНабораПерсонала);
	
	ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.Колонки.Наименование.ОтображатьИерархию = ОтображатьИерархию;
	
	Если ОтображатьИерархию Тогда
		Пока Выборка.СледующийПоЗначениюПоля(ПолеДляУпорядочиванияЗаявок) Цикл
			ЗначениеГруппировки = Выборка[ПолеДляУпорядочиванияЗаявок];
			Если ТипЗнч(ЗначениеГруппировки) = Тип("Дата") Тогда
				ИмяГруппировки = ФорматДаты(ЗначениеГруппировки, "Еще не рассматривались");
			Иначе
				ИмяГруппировки = ЗначениеГруппировки;
			КонецЕсли;
			Если ТипЗнч(ИмяГруппировки) = Тип("СправочникСсылка.СостоянияЗаявокКандидатов") И ИмяГруппировки.Пустая() Тогда
				ИмяГруппировки = "Состояние не указано";
			ИначеЕсли ТипЗнч(ИмяГруппировки) = Тип("СправочникСсылка.Вакансии") И ИмяГруппировки.Пустая() Тогда
				ИмяГруппировки = "Вакансия не назначена";
			ИначеЕсли ТипЗнч(ИмяГруппировки) = Тип("СправочникСсылка.Подразделения") И ИмяГруппировки.Пустая() Тогда
				ИмяГруппировки = "Подразделение не назначено";
			ИначеЕсли ТипЗнч(ИмяГруппировки) = Тип("СправочникСсылка.ПодразделенияОрганизаций") И ИмяГруппировки.Пустая() Тогда
				ИмяГруппировки = "Подразделение не назначено";
			ИначеЕсли ТипЗнч(ИмяГруппировки) = Тип("СправочникСсылка.Пользователи") И ИмяГруппировки.Пустая() Тогда
				ИмяГруппировки = "Ответственный не назначен";
			ИначеЕсли ТипЗнч(ИмяГруппировки) = Тип("СправочникСсылка.Должности") И ИмяГруппировки.Пустая() Тогда
				ИмяГруппировки = "Должность не назначена";
			ИначеЕсли ТипЗнч(ИмяГруппировки) = Тип("СправочникСсылка.ГруппыЗаявокКандидатов") И ИмяГруппировки.Пустая() Тогда
				ИмяГруппировки = "Группа не назначена";
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеГруппировки) = Тип("Дата") Тогда
				Родитель = ДеревоЗаявокКандидатов.Строки.Найти(ИмяГруппировки, "ЗначениеГруппировки");
			Иначе
				Родитель = ДеревоЗаявокКандидатов.Строки.Найти(ЗначениеГруппировки, "ЗначениеГруппировки");
			КонецЕсли;
			Если Родитель = Неопределено Тогда
				Родитель = ДеревоЗаявокКандидатов.Строки.Добавить();
				Если ТипЗнч(ЗначениеГруппировки) = Тип("Дата") Тогда
					Родитель.ЗначениеГруппировки = ИмяГруппировки;
				Иначе
					Родитель.ЗначениеГруппировки = ЗначениеГруппировки;
				КонецЕсли;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Родитель.Строки.Добавить(), Выборка);
			КонецЦикла;
			
			Родитель.Наименование	= "" + ИмяГруппировки + " (" + Родитель.Строки.Количество() + ")";
			Если СписокСвернутыхГрупп.Получить(Родитель.ЗначениеГруппировки) = Неопределено Тогда
				ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.Развернуть(Родитель, Истина);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДеревоЗаявокКандидатов.Строки.Добавить(), Выборка);
		КонецЦикла;
	КонецЕсли;
	
	НужнаяСтрока = ДеревоЗаявокКандидатов.Строки.Найти(ЗначениеГруппировки, "ЗначениеГруппировки");
	Если ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		Если НужнаяСтрока <> Неопределено Тогда
			НужнаяСтрока = НужнаяСтрока.Строки.Найти(ЗначениеЭлемента, "Ссылка");
		КонецЕсли;
		Если НужнаяСтрока = Неопределено Тогда
			НужнаяСтрока = ДеревоЗаявокКандидатов.Строки.Найти(ЗначениеЭлемента, "Ссылка", Истина);
		КонецЕсли;
	КонецЕсли;
	Если НужнаяСтрока <> Неопределено Тогда
		ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущаяСтрока = НужнаяСтрока;
	КонецЕсли;
	
	ЭлементыФормы.НадписьКоличествоАктивныхЗаявок.Заголовок = НСтр("ru=' Активные заявки кандидатов (';uk=' Активні заявки кандидатів ('")+Выборка.Количество()+")";
	
	УстановитьТекстПустогоПисьмаПоЗаявке();
	
КонецПроцедуры

Процедура ОбновитьПодменюУказатьИсточникИнформации()
	
	Кнопки = ЭлементыФормы.КоманднаяПанельЗаявкиКандидатов.Кнопки.ПодменюЗаявки.Кнопки.УказатьИсточникИнформации.Кнопки;
	Кнопки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ " + мКоличествоЭлементовВПодменю + "
	|	ИсточникиИнформации.Ссылка,
	|	ИсточникиИнформации.Наименование
	|ИЗ
	|	Справочник.ИсточникиИнформации КАК ИсточникиИнформации
	|ГДЕ
	|	(НЕ ИсточникиИнформации.ПометкаУдаления)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоСостояний = 1;
	Пока Выборка.Следующий() Цикл
		НоваяКнопка = Кнопки.Добавить();
		НоваяКнопка.ТипКнопки	= ТипКнопкиКоманднойПанели.Действие;
		НоваяКнопка.Имя			= "Кнопка"+СтрЗаменить(Выборка.Ссылка.УникальныйИдентификатор(), "-", "_");
		НоваяКнопка.Текст		= Выборка.Наименование;
		НоваяКнопка.Действие	= Новый Действие("УказатьИсточникИнформации");
		
		Если КоличествоСостояний = мКоличествоЭлементовВПодменю-1 Тогда
			Прервать;
		КонецЕсли;
		
		КоличествоСостояний = КоличествоСостояний + 1;
	КонецЦикла;
	
	Если (Выборка.Количество() = 0) ИЛИ (Выборка.Количество() > мКоличествоЭлементовВПодменю - 1) Тогда
		НоваяКнопка = Кнопки.Добавить();
		НоваяКнопка.ТипКнопки	= ТипКнопкиКоманднойПанели.Разделитель;
		
		НоваяКнопка = Кнопки.Добавить();
		НоваяКнопка.ТипКнопки	= ТипКнопкиКоманднойПанели.Действие;
		НоваяКнопка.Имя			= "ВсеИсточники";
		НоваяКнопка.Текст		= "Открыть список всех источников информации";
		НоваяКнопка.Действие	= Новый Действие("ОткрытьСписокВсехИсточников");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПодменюИзменитьСостояние()
	
	Кнопки = ЭлементыФормы.КоманднаяПанельЗаявкиКандидатов.Кнопки.ПодменюЗаявки.Кнопки.ИзменитьСостояние.Кнопки;
	Кнопки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ " + мКоличествоЭлементовВПодменю + "
	|	СостоянияЗаявокКандидатов.Ссылка,
	|	СостоянияЗаявокКандидатов.Наименование
	|ИЗ
	|	Справочник.СостоянияЗаявокКандидатов КАК СостоянияЗаявокКандидатов
	|ГДЕ
	|	(НЕ СостоянияЗаявокКандидатов.ПометкаУдаления)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоСостояний = 1;
	Пока Выборка.Следующий() Цикл
		НоваяКнопка = Кнопки.Добавить();
		НоваяКнопка.ТипКнопки	= ТипКнопкиКоманднойПанели.Действие;
		НоваяКнопка.Имя			= "Кнопка"+СтрЗаменить(Выборка.Ссылка.УникальныйИдентификатор(), "-", "_");
		НоваяКнопка.Текст		= Выборка.Наименование;
		НоваяКнопка.Действие	= Новый Действие("ИзменитьСостояние");
		
		Если КоличествоСостояний = мКоличествоЭлементовВПодменю-1 Тогда
			Прервать;
		КонецЕсли;
		
		КоличествоСостояний = КоличествоСостояний + 1;
	КонецЦикла;
	
	Если (Выборка.Количество() = 0) ИЛИ (Выборка.Количество() > мКоличествоЭлементовВПодменю - 1) Тогда
		НоваяКнопка = Кнопки.Добавить();
		НоваяКнопка.ТипКнопки	= ТипКнопкиКоманднойПанели.Разделитель;
		
		НоваяКнопка = Кнопки.Добавить();
		НоваяКнопка.ТипКнопки	= ТипКнопкиКоманднойПанели.Действие;
		НоваяКнопка.Имя			= "ВсеСостояния";
		НоваяКнопка.Текст		= "Открыть список всех состояний";
		НоваяКнопка.Действие	= Новый Действие("ОткрытьСписокВсехСостояний");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПодменюНазначитьВакансию()
	
	Кнопки = ЭлементыФормы.КоманднаяПанельЗаявкиКандидатов.Кнопки.ПодменюЗаявки.Кнопки.НазначитьВакансию.Кнопки;
	Кнопки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ " + мКоличествоЭлементовВПодменю + "
	|	Вакансии.Ссылка,
	|	Вакансии.Наименование
	|ИЗ
	|	Справочник.Вакансии КАК Вакансии
	|ГДЕ
	|	(НЕ Вакансии.ПометкаУдаления)
	|	И (НЕ Вакансии.Закрыта)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоСостояний = 1;
	Пока Выборка.Следующий() Цикл
		НоваяКнопка = Кнопки.Добавить();
		НоваяКнопка.ТипКнопки	= ТипКнопкиКоманднойПанели.Действие;
		НоваяКнопка.Имя			= "Кнопка"+СтрЗаменить(Выборка.Ссылка.УникальныйИдентификатор(), "-", "_");
		НоваяКнопка.Текст		= Выборка.Наименование;
		НоваяКнопка.Действие	= Новый Действие("НазначитьВакансию");
		
		Если КоличествоСостояний = мКоличествоЭлементовВПодменю-1 Тогда
			Прервать;
		КонецЕсли;
		
		КоличествоСостояний = КоличествоСостояний + 1;
	КонецЦикла;
	
	Если (Выборка.Количество() = 0) ИЛИ (Выборка.Количество() > мКоличествоЭлементовВПодменю - 1) Тогда
		НоваяКнопка = Кнопки.Добавить();
		НоваяКнопка.ТипКнопки	= ТипКнопкиКоманднойПанели.Разделитель;
		
		НоваяКнопка = Кнопки.Добавить();
		НоваяКнопка.ТипКнопки	= ТипКнопкиКоманднойПанели.Действие;
		НоваяКнопка.Имя			= "ВсеВакансии";
		НоваяКнопка.Текст		= "Открыть список всех открытых вакансий";
		НоваяКнопка.Действие	= Новый Действие("ОткрытьСписокВсехВакансий");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПодменюИзменитьГруппуЗаявки()
	
	Кнопки = ЭлементыФормы.КоманднаяПанельЗаявкиКандидатов.Кнопки.ПодменюЗаявки.Кнопки.ИзменитьГруппуЗаявки.Кнопки;
	Кнопки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + мКоличествоЭлементовВПодменю + "
	|	ГруппыЗаявокКандидатов.Ссылка,
	|	ГруппыЗаявокКандидатов.Наименование
	|ИЗ
	|	Справочник.ГруппыЗаявокКандидатов КАК ГруппыЗаявокКандидатов
	|ГДЕ
	|	(НЕ ГруппыЗаявокКандидатов.ПометкаУдаления)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоСостояний = 1;
	Пока Выборка.Следующий() Цикл
		НоваяКнопка = Кнопки.Добавить();
		НоваяКнопка.ТипКнопки	= ТипКнопкиКоманднойПанели.Действие;
		НоваяКнопка.Имя			= "Кнопка"+СтрЗаменить(Выборка.Ссылка.УникальныйИдентификатор(), "-", "_");
		НоваяКнопка.Текст		= Выборка.Наименование;
		НоваяКнопка.Действие	= Новый Действие("ИзменитьГруппуЗаявок");
		
		Если КоличествоСостояний = мКоличествоЭлементовВПодменю-1 Тогда
			Прервать;
		КонецЕсли;
		
		КоличествоСостояний = КоличествоСостояний + 1;
	КонецЦикла;
	
	Если (Выборка.Количество() = 0) ИЛИ (Выборка.Количество() > мКоличествоЭлементовВПодменю - 1) Тогда
		НоваяКнопка = Кнопки.Добавить();
		НоваяКнопка.ТипКнопки	= ТипКнопкиКоманднойПанели.Разделитель;
		
		НоваяКнопка = Кнопки.Добавить();
		НоваяКнопка.ТипКнопки	= ТипКнопкиКоманднойПанели.Действие;
		НоваяКнопка.Имя			= "ВсеГруппыЗаявок";
		НоваяКнопка.Текст		= "Открыть список всех групп заявок";
		НоваяКнопка.Действие	= Новый Действие("ОткрытьСписокВсехГруппЗаявок");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиЗаявкуКандидата(ДанныеСтроки, НовыйРодитель)
	
	СтарыйРодитель	= ДанныеСтроки.Родитель;
	Если НовыйРодитель <> Неопределено Тогда
		НоваяСтрока = НовыйРодитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
		СтарыйРодитель.Строки.Удалить(ДанныеСтроки);
		Если СтарыйРодитель.Строки.Количество() = 0 Тогда
			ДеревоЗаявокКандидатов.Строки.Удалить(СтарыйРодитель);
		Иначе
			СтарыйРодитель.Наименование = Лев(СтарыйРодитель.Наименование, Найти(СтарыйРодитель.Наименование, "(")) + СтарыйРодитель.Строки.Количество() + ")";
		КонецЕсли;
		
		НовыйРодитель.Наименование = Лев(НовыйРодитель.Наименование, Найти(НовыйРодитель.Наименование, "(")) + НовыйРодитель.Строки.Количество() + ")";
		
		ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущаяСтрока = НоваяСтрока;
	КонецЕсли;
	
	ОбновитьОписаниеЗаявки();
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитЗаявкиПоГруппировке(ДанныеСтроки, Объект)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Родитель = Неопределено Тогда
		ЗначениеГруппировки = ДанныеСтроки.ЗначениеГруппировки;
	Иначе
		ЗначениеГруппировки = ДанныеСтроки.Родитель.ЗначениеГруппировки;
	КонецЕсли;
	
	Если		ТипЗнч(ЗначениеГруппировки) = Тип("СправочникСсылка.СостоянияЗаявокКандидатов") Тогда
		Объект.Состояние	= ЗначениеГруппировки;
		
	ИначеЕсли	ТипЗнч(ЗначениеГруппировки) = Тип("СправочникСсылка.Вакансии") Тогда
		Объект.Вакансия		= ЗначениеГруппировки;
		
	ИначеЕсли	ТипЗнч(ЗначениеГруппировки) = Тип("СправочникСсылка.Подразделения") ИЛИ
				ТипЗнч(ЗначениеГруппировки) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Объект.Подразделение	= ЗначениеГруппировки;
		
	ИначеЕсли	ТипЗнч(ЗначениеГруппировки) = Тип("СправочникСсылка.Должности") Тогда
		Объект.Должность		= ЗначениеГруппировки;
		
	ИначеЕсли	ТипЗнч(ЗначениеГруппировки) = Тип("СправочникСсылка.ГруппыЗаявокКандидатов") Тогда
		Объект.ГруппаЗаявок		= ЗначениеГруппировки;
		
	ИначеЕсли	ТипЗнч(ЗначениеГруппировки) = Тип("СправочникСсылка.Пользователи") Тогда
		Объект.Ответственный	= ЗначениеГруппировки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьСотрудника()
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаявкаДляСотрудника = ДанныеСтроки.Ссылка;
	
	Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуНовогоЭлемента(, ЭтаФорма, ЭтотОбъект);
	
	Если Не ДанныеСтроки.Ссылка.Физлицо.Пустая() Тогда
		Форма.Физлицо		= ДанныеСтроки.Ссылка.Физлицо;
	Иначе
		ФИО	= ДанныеСтроки.Наименование;
		Форма.Наименование	= ФИО;
		Форма.Фамилия		= ОбщегоНазначения.ВыделитьСлово(ФИО);
		Форма.Имя			= ОбщегоНазначения.ВыделитьСлово(ФИО);
		Форма.Отчество		= ОбщегоНазначения.ВыделитьСлово(ФИО);
	КонецЕсли;
	
	Форма.Открыть();
	
	Если ДанныеСтроки.Ссылка.Физлицо.Пустая() Тогда
		Форма.ФизлицоОбъект.Наименование	= ДанныеСтроки.Наименование;
		Если ЗначениеЗаполнено(Форма.Отчество) Тогда
			Форма.ФизлицоОбъект.Пол			= ПроцедурыУправленияПерсоналом.ПолучитьПол(Форма.Отчество);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПеретаскиваниеОбъектов(Объект, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	
	Ссылка = Объект.Ссылка;
	
	Если Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка =	НЕ (ПолеДляУпорядочиванияЗаявок = "ДатаСобытия" ИЛИ ПолеДляУпорядочиванияЗаявок = "Наименование" ИЛИ
							((ПолеДляУпорядочиванияЗаявок = "Подразделение" ИЛИ ПолеДляУпорядочиванияЗаявок = "Должность") И Не Ссылка.Вакансия.Пустая()));
	
КонецПроцедуры

Процедура ПроверитьПеретаскиваниеОбъектов(Объект, СтандартнаяОбработка, Строка, Колонка)
	
	СтандартнаяОбработка = Истина;
	
	Если ТипЗнч(Объект) = Тип("СтрокаДереваЗначений") Тогда
		Ссылка = Объект.Ссылка;
		
		Если Ссылка.Пустая() Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
			
		ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЗаявкиКандидатов") Тогда
			
			СтандартнаяОбработка =	Строка = Неопределено ИЛИ 
									ПолеДляУпорядочиванияЗаявок = "ДатаСобытия" ИЛИ ПолеДляУпорядочиванияЗаявок = "Наименование" ИЛИ
									((ПолеДляУпорядочиванияЗаявок = "Подразделение" ИЛИ ПолеДляУпорядочиванияЗаявок = "Должность") И Не Ссылка.Вакансия.Пустая());
			
		КонецЕсли;
		
	Иначе
		СтандартнаяОбработка = ТипЗнч(Объект) <> Тип("ДокументСсылка.ЭлектронноеПисьмо");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеретаскиваниеОбъектов(Элемент, ЗначениеПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ЗначениеПеретаскивания) = Тип("СтрокаДереваЗначений") Тогда
		ОбъектПеретаскивания = ЗначениеПеретаскивания.Ссылка;
		
		Если ТипЗнч(ОбъектПеретаскивания) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
			Если Строка <> Неопределено И Не Строка.Ссылка.Пустая() Тогда
				ЗаявкаКандидата	= Строка.Ссылка;
				
				СтандартнаяОбработка = Ложь;
				
				ОбъектПисьмо = ОбъектПеретаскивания.ПолучитьОбъект();
				ОбъектПисьмо.ЗаявкаКандидата = ЗаявкаКандидата;
				ОбъектПисьмо.Записать();
				
				УдалитьНеРазобранноеПисьмо(ЗначениеПеретаскивания);
				
				ПерепискаПоЗаявке.Обновить();
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОбъектПеретаскивания) = Тип("СправочникСсылка.ЗаявкиКандидатов") Тогда
			Если Строка.ЗначениеГруппировки = Неопределено Тогда
				НужнаяСтрока = Строка.Родитель;
			Иначе
				НужнаяСтрока = Строка;
			КонецЕсли;
			
			СтандартнаяОбработка = Ложь;
			
			ОбъектЗаявка = ОбъектПеретаскивания.ПолучитьОбъект();
			ЗаполнитьРеквизитЗаявкиПоГруппировке(НужнаяСтрока, ОбъектЗаявка);
			ОбъектЗаявка.Записать();
			
			ПеренестиЗаявкуКандидата(ЗначениеПеретаскивания, НужнаяСтрока);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗначениеПеретаскивания) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
		ЗаявкаКандидата = Строка.Ссылка;
		
		Если ЗаявкаКандидата.Пустая() Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ОбъектПисьмо = ЗначениеПеретаскивания.ПолучитьОбъект();
		ОбъектПисьмо.ЗаявкаКандидата = ЗаявкаКандидата;
		ОбъектПисьмо.Записать();
		
		ПерепискаПоЗаявке.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ОткрытьФормуВыбораИсточникаИнформации(Значение)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Форма = Справочники.ИсточникиИнформации.ПолучитьФормуВыбора(, ЭтаФорма, ЭтотОбъект);
	Форма.СправочникСписок.Отбор.ПометкаУдаления.Установить(Ложь);
	
	ТипСправочника = Тип("СправочникСсылка.ИсточникиИнформации");
	Если ТипЗнч(Значение) = ТипСправочника Тогда
		Форма.НачальноеЗначениеВыбора = Значение;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		Попытка
			Форма.НачальноеЗначениеВыбора = XMLЗначение(ТипСправочника, Значение);
		Исключение КонецПопытки;
		
	КонецЕсли;
	
	Форма.ВладелецФормы			= ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов;
	Форма.Открыть();
	
КонецПроцедуры

Процедура ЗаписатьИсточникИнформации(ВыбранноеЗначение)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено или ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ВыделенныеСтроки Цикл
		Если ВыделеннаяСтрока.Ссылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		ЗаявкаОбъект = ВыделеннаяСтрока.Ссылка.ПолучитьОбъект();
		ЗаявкаОбъект.ИсточникИнформации = ВыбранноеЗначение;
		ЗаявкаОбъект.Записать();
	КонецЦикла;
	
	ОбновитьОписаниеЗаявки();
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораСостоянияЗаявки(Значение)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Форма = Справочники.СостоянияЗаявокКандидатов.ПолучитьФормуВыбора(, ЭтаФорма, ЭтотОбъект);
	Форма.СправочникСписок.Отбор.ПометкаУдаления.Установить(Ложь);
	
	ТипСправочника = Тип("СправочникСсылка.СостоянияЗаявокКандидатов");
	Если ТипЗнч(Значение) = ТипСправочника Тогда
		Форма.НачальноеЗначениеВыбора = Значение;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		Попытка
			Форма.НачальноеЗначениеВыбора = XMLЗначение(ТипСправочника, Значение);
		Исключение КонецПопытки;
		
	КонецЕсли;
	
	Форма.ВладелецФормы			= ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов;
	Форма.Открыть();
	
КонецПроцедуры

Процедура ЗаписатьСостояниеЗаявки(ВыбранноеЗначение)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено или ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ВыделенныеСтроки Цикл
		Если ВыделеннаяСтрока.Ссылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		ЗаявкаОбъект = ВыделеннаяСтрока.Ссылка.ПолучитьОбъект();
		ЗаявкаОбъект.Состояние = ВыбранноеЗначение;
		ЗаявкаОбъект.Записать();
	КонецЦикла;
	
	Если ПолеДляУпорядочиванияЗаявок = "Состояние" Тогда
		ОбновитьСписокЗаявок();
	КонецЕсли;
	
	ОбновитьОписаниеЗаявки();
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораВакансии(Значение)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Форма = Справочники.Вакансии.ПолучитьФормуВыбора(, ЭтаФорма, ЭтотОбъект);
	Форма.СправочникСписок.Отбор.Закрыта.Установить(Ложь);
	Форма.СправочникСписок.Отбор.ПометкаУдаления.Установить(Ложь);
	
	ТипСправочника = Тип("СправочникСсылка.Вакансии");
	Если ТипЗнч(Значение) = ТипСправочника Тогда
		Форма.НачальноеЗначениеВыбора = Значение;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		Попытка
			Форма.НачальноеЗначениеВыбора = XMLЗначение(ТипСправочника, Значение);
		Исключение КонецПопытки;
		
	КонецЕсли;
	
	Форма.ВладелецФормы			= ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов;
	Форма.Открыть();
	
КонецПроцедуры

Процедура ЗаписатьВакансию(ВыбранноеЗначение)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено или ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ВыделенныеСтроки Цикл
		Если ВыделеннаяСтрока.Ссылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		ЗаявкаОбъект = ВыделеннаяСтрока.Ссылка.ПолучитьОбъект();
		ЗаявкаОбъект.Вакансия = ВыбранноеЗначение;
		ЗаявкаОбъект.Записать();
	КонецЦикла;
	
	Если ПолеДляУпорядочиванияЗаявок = "Вакансия" Тогда
		ОбновитьСписокЗаявок();
	КонецЕсли;
	
	ОбновитьОписаниеЗаявки();
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораГруппыЗаявок(Значение)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Форма = Справочники.ГруппыЗаявокКандидатов.ПолучитьФормуВыбора(, ЭтаФорма, ЭтотОбъект);
	Форма.СправочникСписок.Отбор.ПометкаУдаления.Установить(Ложь);
	
	ТипСправочника = Тип("СправочникСсылка.ГруппыЗаявокКандидатов");
	Если ТипЗнч(Значение) = ТипСправочника Тогда
		Форма.НачальноеЗначениеВыбора = Значение;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		Попытка
			Форма.НачальноеЗначениеВыбора = XMLЗначение(ТипСправочника, Значение);
		Исключение КонецПопытки;
		
	КонецЕсли;
	
	Форма.ВладелецФормы			= ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов;
	Форма.Открыть();
	
КонецПроцедуры

Процедура ЗаписатьГруппуЗаявки(ВыбранноеЗначение)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено или ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ВыделенныеСтроки Цикл
		Если ВыделеннаяСтрока.Ссылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		ЗаявкаОбъект = ВыделеннаяСтрока.Ссылка.ПолучитьОбъект();
		ЗаявкаОбъект.ГруппаЗаявок = ВыбранноеЗначение;
		ЗаявкаОбъект.Записать();
	КонецЦикла;
	
	Если ПолеДляУпорядочиванияЗаявок = "ГруппаЗаявок" Тогда
		ОбновитьСписокЗаявок();
	КонецЕсли;
	
	ОбновитьОписаниеЗаявки();
	
КонецПроцедуры


Процедура УстановитьТекстПустогоПисьмаПоЗаявке()
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	ЗаявкаНеВыбрана = ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая();
		
	Если ЗаявкаНеВыбрана Тогда
		ТекстСообщения = НСтр("ru='Не выбрана заявка кандидата';uk='Не обрана заявка кандидата'");
	Иначе
		Если ЕстьПисьмаПоЗаявке Тогда
			ТекстСообщения = НСтр("ru='Письмо не выбрано. Текст письма не может быть показан';uk='Лист не вибраний. Текст листа не може бути показаний'");
		Иначе
			ТекстСообщения = НСтр("ru='Нет писем по заявке кандидата';uk='Немає листів по заявці кандидата'");
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.ПолеHTMLДокументаПерепискаПоЗаявке.УстановитьТекст("<BODY scroll=auto rightMargin=0><FONT face=""MS Sans Serif"" size=1><P align=center>"+ТекстСообщения+"</P></FONT></BODY>");
	
КонецПроцедуры

Процедура ПерепискаПоЗаявкеПриАктивизацииСтроки()
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеПерепискаПоЗаявке.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		УстановитьТекстПустогоПисьмаПоЗаявке();
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("УчетнаяЗапись",	ДанныеСтроки.УчетнаяЗапись);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.АвтоматическаяУстановкаПометкиРассмотрено,
	|	УчетныеЗаписиЭлектроннойПочты.ИнтервалАвтоматическойУстановкиОтметкиРассмотрено
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &УчетнаяЗапись";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Ошибка получения реквизитов учетной записи: ';uk='Помилка отримання реквізитів облікового запису: '") + ДанныеСтроки.УчетнаяЗапись);
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
		НайденноеСоответствие = глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем").Получить(ДанныеСтроки.Ссылка);
		Если НайденноеСоответствие = Неопределено Тогда
			КопияТекстаПисьма = ДанныеСтроки.ТекстПисьма;
			УправлениеЭлектроннойПочтой.ПропарситьHTMLИДВ_ТекстКартинки(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), ТекущийПользователь, ДанныеСтроки.Ссылка, КопияТекстаПисьма);
			КопияТекстаПисьма = СтрЗаменить(КопияТекстаПисьма, "<BODY", "<BODY scroll=auto");
			ЭлементыФормы.ПолеHTMLДокументаПерепискаПоЗаявке.УстановитьТекст(КопияТекстаПисьма);
			
		Иначе
			НайденноеСоответствие = СтрЗаменить(НайденноеСоответствие, "<BODY", "<BODY scroll=auto");
			ЭлементыФормы.ПолеHTMLДокументаПерепискаПоЗаявке.УстановитьТекст(НайденноеСоответствие);
			
		КонецЕсли;
		
	ИначеЕсли ДанныеСтроки.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст Тогда
		ЭлементыФормы.ПолеHTMLДокументаПерепискаПоЗаявке.УстановитьТекст(УправлениеЭлектроннойПочтой.ВернутьТекстПисьмаВФорматеHTML(ДанныеСтроки.ТекстПисьма));
		
	Иначе
		ТекстПисьма = СтрЗаменить(ДанныеСтроки.ТекстПисьма, "<BODY", "<BODY scroll=auto");
		ЭлементыФормы.ПолеHTMLДокументаПерепискаПоЗаявке.УстановитьТекст(ТекстПисьма);
		
	КонецЕсли;
	
	Если ДанныеСтроки.НеРассмотрено И Выборка.АвтоматическаяУстановкаПометкиРассмотрено Тогда
		ПисьмоКРассмотрению = ДанныеСтроки.Ссылка;
		ПодключитьОбработчикОжидания("АвтоустановкаРассмотренностиПисьма", Выборка.ИнтервалАвтоматическойУстановкиОтметкиРассмотрено, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчика ожидания, которая контролирует автоматическую установку флага прочитанности
// эл.писем, настройка устанавливается в параметрах учетной записи.
// (подключается через обработчик ожидания)
Процедура АвтоустановкаРассмотренностиПисьма()
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеПерепискаПоЗаявке.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Ссылка = ПисьмоКРассмотрению Тогда		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ Ответственный КАК Ответственный ИЗ Документ.ЭлектронноеПисьмо ГДЕ Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДанныеСтроки.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураРеквизитовКИзменению = Новый Структура("Ответственный, НеРассмотрено");
			СтруктураРеквизитовКИзменению.Ответственный = Выборка.Ответственный;
			Если СтруктураРеквизитовКИзменению.Ответственный.Пустая() Тогда
				СтруктураРеквизитовКИзменению.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнойОтветственный");
			КонецЕсли;
			Если СтруктураРеквизитовКИзменению.Ответственный.Пустая() Тогда
				СтруктураРеквизитовКИзменению.Ответственный	= глЗначениеПеременной("глТекущийПользователь");
			КонецЕсли;
			СтруктураРеквизитовКИзменению.НеРассмотрено = Ложь;
			ПолныеПрава.УстановитьРеквизитЭлектронногоПисьма(ДанныеСтроки.Ссылка, СтруктураРеквизитовКИзменению);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура ВыполнитьКомандуФормы(Команда, Значение) Экспорт
	
	Если Команда = "ИзменитьСостояние" Тогда
		ОткрытьФормуВыбораСостоянияЗаявки(Значение);
	
	ИначеЕсли Команда = "ИзменитьИсточникИнформации" Тогда
		ОткрытьФормуВыбораИсточникаИнформации(Значение);
		
	ИначеЕсли Команда = "ИзменитьВакансию" Тогда
		ОткрытьФормуВыбораВакансии(Значение);
		
	ИначеЕсли Команда = "ИзменитьГруппуЗаявки" Тогда
		ОткрытьФормуВыбораГруппыЗаявок(Значение);
		
	ИначеЕсли Команда = "ОткрытьВакансию" Тогда
		ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
			Возврат;
		КонецЕсли;
	
		Если Не ПустаяСтрока(Значение) Тогда
			ВыбранныйСправочник	= XMLЗначение(Тип("СправочникСсылка.Вакансии"), Значение);
			ВыбранныйСправочник.ПолучитьФорму(, ЭтаФорма, ЭтотОбъект).Открыть();
		КонецЕсли;
		
	ИначеЕсли Команда = "ОткрытьПодразделение" Тогда
		ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
			Возврат;
		КонецЕсли;
	
		Если Не ПустаяСтрока(Значение) Тогда
			ВыбранныйСправочник	= XMLЗначение(Тип("СправочникСсылка.Подразделения"), Значение);
			ВыбранныйСправочник.ПолучитьФорму(, ЭтаФорма, ЭтотОбъект).Открыть();
		КонецЕсли;
		
	ИначеЕсли Команда = "ОткрытьПодразделениеОрганизации" Тогда
		ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
			Возврат;
		КонецЕсли;
	
		Если Не ПустаяСтрока(Значение) Тогда
			ВыбранныйСправочник	= XMLЗначение(Тип("СправочникСсылка.ПодразделенияОрганизаций"), Значение);
			ВыбранныйСправочник.ПолучитьФорму(, ЭтаФорма, ЭтотОбъект).Открыть();
		КонецЕсли;
		
	ИначеЕсли Команда = "ОткрытьДолжность" Тогда
		ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
			Возврат;
		КонецЕсли;
	
		Если Не ПустаяСтрока(Значение) Тогда
			ВыбранныйСправочник	= XMLЗначение(Тип("СправочникСсылка.Должности"), Значение);
			ВыбранныйСправочник.ПолучитьФорму(, ЭтаФорма, ЭтотОбъект).Открыть()
		КонецЕсли;
		
	ИначеЕсли Команда = "ОткрытьСобытие" Тогда
		ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
			Возврат;
		КонецЕсли;
	
		Если Не ПустаяСтрока(Значение) Тогда
			ВыбранныйДокумент	= XMLЗначение(Тип("ДокументСсылка.Событие"), Значение);
			ВыбранныйДокумент.ПолучитьФорму(, ЭтаФорма, ЭтотОбъект).Открыть()
		КонецЕсли;
		
	ИначеЕсли Команда = "ОткрытьФайл" Тогда
		ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
			Возврат;
		КонецЕсли;
	
		Если Не ПустаяСтрока(Значение) Тогда
			ВыбранныйСправочник	= XMLЗначение(Тип("СправочникСсылка.ХранилищеДополнительнойИнформации"), Значение);
			ОткрытьСохранитьВложение(ВыбранныйСправочник);
		КонецЕсли;
		
	ИначеЕсли Команда = "mailto:" Тогда // Адреса электронной почты
		ДанныеСтроки = ЭлементыФормы.ТабличноеПолеПерепискаПоЗаявке.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураНовогоПисьма = Новый Структура;
		СтруктураНовогоПисьма.Вставить("ЗаявкаКандидата",	ДанныеСтроки.ЗаявкаКандидата);
		СтруктураНовогоПисьма.Вставить("Тема",				ДанныеСтроки.Тема);
		
		СписокКому = Новый СписокЗначений;
		СписокКому.Добавить(ВернутьСтрокуСоВсемиСимволами(Значение), "");
		СтруктураНовогоПисьма.Вставить("Кому", СписокКому);
		
		УправлениеЭлектроннойПочтой.НаписатьПисьмо(ТекущийПользователь, СтруктураНовогоПисьма,,,,, ЭтаФорма);
		
	ИначеЕсли Команда = "СоздатьУчетнуюЗапись" Тогда
		Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьФормуНовогоЭлемента().Открыть();
		
	ИначеЕсли Команда = "СкрытьНеРазобранныеПисьма" Тогда
		ПоказыватьНеРазобранныеПисьма = Ложь;
		УстановитьВидимостьНеРазобранныхПисем();
		
	ИначеЕсли Команда = "ПринятьЗаявкуКандидата" Тогда
		ДанныеСтроки = ЭлементыФормы.ТабличноеПолеНеРазобранныеПисьма.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
			Возврат;
		КонецЕсли;
		
		Форма = Справочники.ЗаявкиКандидатов.ПолучитьФормуНовогоЭлемента(, ЭтаФорма, ЭтотОбъект);
		Форма.Наименование	= ДанныеСтроки.Тема;
		Форма.Открыть();
		
		ПисьмаДляЗаявки = ЭлементыФормы.ТабличноеПолеНеРазобранныеПисьма.ВыделенныеСтроки;
		
	ИначеЕсли Команда = "ДобавитьЗаявку" Тогда
		Справочники.ЗаявкиКандидатов.ПолучитьФормуНовогоЭлемента(, ЭтаФорма, ЭтотОбъект).Открыть();
	
	ИначеЕсли Команда = "СоздатьСотрудникаПоЗаявке" Тогда
		СоздатьСотрудника();
		
	ИначеЕсли Команда = "ПринятьПочту" Тогда
		ПолучениеПисем();
	
	ИначеЕсли Команда = "ИзменитьУпорядочиваниеЗаявок" Тогда
		ИзменитьУпорядочиваниеЗаявок();
	
	Иначе
		ДанныеСтроки = ЭлементыФормы.ТабличноеПолеПерепискаПоЗаявке.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		УправлениеЭлектроннойПочтой.ПерейтиПоСсылкеИзХТМЛПоля(Значение, ТекущийПользователь, ЭтаФорма, ДанныеСтроки.УчетнаяЗапись);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьУпорядочиваниеЗаявок() Экспорт
	
	СпособыУпорядочивания = Новый СписокЗначений;
	СпособыУпорядочивания.Добавить("ДатаСобытия",	"По дате события");
	СпособыУпорядочивания.Добавить("Состояние",		"По состоянию");
	СпособыУпорядочивания.Добавить("Наименование",	"По наименованию");
	СпособыУпорядочивания.Добавить("Вакансия",		"По вакансии");
	СпособыУпорядочивания.Добавить("Ответственный",	"По ответственному");
	СпособыУпорядочивания.Добавить("Подразделение",	"По подразделению");
	СпособыУпорядочивания.Добавить("Должность",		"По должности");
	СпособыУпорядочивания.Добавить("ГруппаЗаявок",	"По группе заявок");
	ВыбранныйСпособ = СпособыУпорядочивания.ВыбратьЭлемент(НСтр("ru='Выберите способ упорядочивания';uk='Виберіть спосіб упорядкування'"), СпособыУпорядочивания.НайтиПоЗначению(ПолеДляУпорядочиванияЗаявок));
	Если ВыбранныйСпособ <> Неопределено Тогда
		ПолеДляУпорядочиванияЗаявок = ВыбранныйСпособ.Значение;
		ОбновитьСписокЗаявок();
		УстановитьПометкуПодменюУпорядочить(ЭлементыФормы.КоманднаяПанельЗаявкиКандидатов, ПолеДляУпорядочиванияЗаявок);
		
		ОбновитьОписаниеЗаявки();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПометкуПодменюУпорядочить(КоманднаяПанель, ПолеДляУпорядочивания)
	
	ПодменюУпорядочить = КоманднаяПанель.Кнопки.ПодменюУпорядочить;
	Для Каждого ЭлементПодменю Из ПодменюУпорядочить.Кнопки Цикл
		ЭлементПодменю.Пометка = ЭлементПодменю.Имя = ПолеДляУпорядочивания;
	КонецЦикла;
	
КонецПроцедуры

Функция ФорматДаты(Дата, СообщениеДляПустойДаты)
	
	ДатаСобытия = НачалоДня(Дата);
	
	Сегодня			= НачалоДня(ТекущаяДата());
	Вчера			= ОбщегоНазначения.ДобавитьИнтервал(Сегодня, Перечисления.Периодичность.День, -1);
	Позавчера		= ОбщегоНазначения.ДобавитьИнтервал(Сегодня, Перечисления.Периодичность.День, -2);
	ДнейНазад3		= ОбщегоНазначения.ДобавитьИнтервал(Сегодня, Перечисления.Периодичность.День, -3);
	ДнейНазад4		= ОбщегоНазначения.ДобавитьИнтервал(Сегодня, Перечисления.Периодичность.День, -4);
	ДнейНазад5		= ОбщегоНазначения.ДобавитьИнтервал(Сегодня, Перечисления.Периодичность.День, -5);
	ДнейНазад6		= ОбщегоНазначения.ДобавитьИнтервал(Сегодня, Перечисления.Периодичность.День, -6);
	НедельНазад1	= ОбщегоНазначения.ДобавитьИнтервал(Сегодня, Перечисления.Периодичность.Неделя, -1);
	НедельНазад2	= ОбщегоНазначения.ДобавитьИнтервал(Сегодня, Перечисления.Периодичность.Неделя, -2);
	НедельНазад3	= ОбщегоНазначения.ДобавитьИнтервал(Сегодня, Перечисления.Периодичность.Неделя, -3);
	МесяцНазад1		= ДобавитьМесяц(Сегодня, -1);
	МесяцНазад2		= ДобавитьМесяц(Сегодня, -2);
	
	Если Не ЗначениеЗаполнено(ДатаСобытия) Тогда
		Возврат СообщениеДляПустойДаты;
	ИначеЕсли ДатаСобытия = Сегодня Тогда
		Возврат "Сегодня";
	ИначеЕсли ДатаСобытия = Вчера Тогда
		Возврат "Вчера";
	ИначеЕсли ДатаСобытия = Позавчера Тогда
		Возврат "Позавчера";
	ИначеЕсли ДатаСобытия = ДнейНазад3 Тогда
		Возврат ""+Перечисления.ДниНедели[ДеньНедели(ДатаСобытия)-1];
	ИначеЕсли ДатаСобытия = ДнейНазад4 Тогда
		Возврат ""+Перечисления.ДниНедели[ДеньНедели(ДатаСобытия)-1];
	ИначеЕсли ДатаСобытия = ДнейНазад5 Тогда
		Возврат ""+Перечисления.ДниНедели[ДеньНедели(ДатаСобытия)-1];
	ИначеЕсли ДатаСобытия = ДнейНазад6 Тогда
		Возврат ""+Перечисления.ДниНедели[ДеньНедели(ДатаСобытия)-1];
	ИначеЕсли НедельНазад1 >= ДатаСобытия И ДатаСобытия > НедельНазад2 Тогда
		Возврат "Неделю назад";
	ИначеЕсли НедельНазад2 >= ДатаСобытия И ДатаСобытия > НедельНазад3 Тогда
		Возврат "2 недели назад";
	ИначеЕсли НедельНазад3 >= ДатаСобытия И ДатаСобытия > МесяцНазад1 Тогда
		Возврат "3 недели назад";
	ИначеЕсли МесяцНазад1 >= ДатаСобытия И ДатаСобытия > МесяцНазад2 Тогда
		Возврат "Месяц назад";
	Иначе
		Возврат "Совсем давно";
	КонецЕсли;
	
КонецФункции

Процедура ОткрытьСохранитьВложение(ВыбранныйЭлемент)
	
	ОткликФормы = ПолучитьФорму("ФормаОткрытияВложений").ОткрытьМодально();
	
	Если ОткликФормы = Неопределено ИЛИ ТипЗнч(ОткликФормы) <> Тип("Булево") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОткликФормы Тогда
		РаботаСФайлами.ОткрытьФайлы(ВыбранныйЭлемент, ТекущийПользователь,, Ложь);
	Иначе
		
		СохраненноеИмяКаталога = ВосстановитьЗначение("ИмяКаталогаСохраненияФайлов");
		Если СохраненноеИмяКаталога = Неопределено Тогда
			ИмяКаталога = РаботаСФайлами.ПолучитьИмяКаталога(ТекущийПользователь);
		Иначе
			ИмяКаталога = СохраненноеИмяКаталога;
		КонецЕсли;
		
		ТолькоЧтение = Ложь;
		
		ФормаСохраненияФайлов = Справочники.ХранилищеДополнительнойИнформации.ПолучитьФорму("ФормаСохраненияФайлов");
		ФормаСохраненияФайлов.ИмяКаталога		= ИмяКаталога;
		ФормаСохраненияФайлов.ТолькоЧтение		= ТолькоЧтение;
		ФормаСохраненияФайлов.ОткрытьКаталог	= Ложь;
		СтруктураПараметров = ФормаСохраненияФайлов.ОткрытьМодально();
		
		Если СтруктураПараметров = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Не РаботаСФайлами.ПроверитьСуществованиеКаталога(СтруктураПараметров.ИмяКаталога) Тогда
			Возврат;
		КонецЕсли;
		
		СохранитьЗначение("ИмяКаталогаСохраненияФайлов", СтруктураПараметров.ИмяКаталога);
		
		СпособПерезаписи = "";
		
		ИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(СтруктураПараметров.ИмяКаталога, ВыбранныйЭлемент.ИмяФайла);
		Состояние(НСтр("ru='Сохраняется файл: ';uk='Зберігається файл: '") + ИмяФайла);
		РаботаСФайлами.СохранитьФайлНаДиске(ВыбранныйЭлемент.Хранилище, ИмяФайла, СтруктураПараметров.ТолькоЧтение, СпособПерезаписи);
		
		Если СтруктураПараметров.ОткрытьКаталог Тогда
			ЗапуститьПриложение(СтруктураПараметров.ИмяКаталога);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


Функция ВернутьСтрокуСоВсемиСимволами(Знач Источник)
	
	Пока Найти(Источник, "%") > 0 Цикл
		
		ТекПозиция = Найти(Источник, "%");
		
		КодСимвола = ОбщегоНазначения.ШестнадцатиричноеВДесятичное(Сред(Источник, ТекПозиция+1, 2));
		
		Источник = СтрЗаменить(Источник, Сред(Источник, ТекПозиция, 3), Символ(КодСимвола));
		
	КонецЦикла;
	
	Возврат Источник;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	РежимНабораПерсонала = Константы.РежимНабораПерсонала.Получить();
	
	// Не разобранные письма
	
	ПоказыватьНеРазобранныеПисьма = ВосстановитьЗначение("НаборПерсоналаПоказыватьНеРазобранныеПисьма");
	Если ПоказыватьНеРазобранныеПисьма = Неопределено Тогда
		ПоказыватьНеРазобранныеПисьма = Истина;
	КонецЕсли;
	УстановитьВидимостьНеРазобранныхПисем();
	
	ПолеДляУпорядочиванияНеРазобранныхПисем = ВосстановитьЗначение("НаборПерсоналаПолеДляУпорядочиванияНеРазобранныхПисем");
	Если ПолеДляУпорядочиванияНеРазобранныхПисем = Неопределено Тогда
		ПолеДляУпорядочиванияНеРазобранныхПисем = "ДатаПолучения";
	КонецЕсли;
	УстановитьПометкуПодменюУпорядочить(ЭлементыФормы.КоманднаяПанельНеРазобранныеПисьма, ПолеДляУпорядочиванияНеРазобранныхПисем);
	
   	ОбновитьСписокНеРазобранныхПисем();
	
	// Заявки кандидатов
	
	ПерепискаПоЗаявке.Отбор.ЗаявкаКандидата.Использование = Истина;
	
	ПерепискаПоЗаявке.Колонки.Добавить("ВидТекстаПисьма");
	ПерепискаПоЗаявке.Колонки.Добавить("ТекстПисьма");
	ПерепискаПоЗаявке.Колонки.Добавить("НеРассмотрено");
	ПерепискаПоЗаявке.Колонки.Добавить("УчетнаяЗапись");
	ПерепискаПоЗаявке.Колонки.Добавить("РассмотретьПосле");
	ПерепискаПоЗаявке.Колонки.Добавить("СтатусПисьма");
	ПерепискаПоЗаявке.Колонки.Добавить("ЗаявкаКандидата");
	ПерепискаПоЗаявке.Колонки.Добавить("Тема");
	
	ПерепискаПоЗаявке.Порядок.Установить("ДатаОтправления УБЫВ");
	
	ПолеДляУпорядочиванияЗаявок = ВосстановитьЗначение("НаборПерсоналаПолеДляУпорядочиванияЗаявок");
	Если ПустаяСтрока(ПолеДляУпорядочиванияЗаявок) Тогда
		ПолеДляУпорядочиванияЗаявок = "Состояние";
	КонецЕсли;
	УстановитьПометкуПодменюУпорядочить(ЭлементыФормы.КоманднаяПанельЗаявкиКандидатов, ПолеДляУпорядочиванияЗаявок);
	
	ПерепискаПоЗаявке.Отбор.ЗаявкаКандидата.Значение = Справочники.ЗаявкиКандидатов.ПолучитьСсылку();
	ЭлементыФормы.ПолеHTMLДокументаОписаниеЗаявки.УстановитьТекст("<BODY scroll=auto rightMargin=0></BODY>");
	УстановитьТекстПустогоПисьмаПоЗаявке();
	
	ОбновитьСписокЗаявок();
	
	ОбновитьПодменюУказатьИсточникИнформации();
	ОбновитьПодменюИзменитьСостояние();
	ОбновитьПодменюНазначитьВакансию();
	ОбновитьПодменюИзменитьГруппуЗаявки();
	
	// Справка формы
	ОтображатьСправкуФормы = ВосстановитьЗначение("НаборПерсоналаСправкаФормы");
	Если ОтображатьСправкуФормы = Неопределено Тогда
		ОтображатьСправкуФормы = Истина;
	КонецЕсли;
	
	СтруктураУчетныхЗаписей = УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписи(ТекущийПользователь);
	ЕстьДоступныеУчетныеЗаписи = СтруктураУчетныхЗаписей.Запись.Количество() > 0;
	
	ПодготовитьСправкуФормы();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	УстановитьВидимостьСправкиФормы(Ложь);
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СохранитьЗначение("НаборПерсоналаСправкаФормы",	ОтображатьСправкуФормы);
	
	СохранитьЗначение("НаборПерсоналаПоказыватьНеРазобранныеПисьма",			ПоказыватьНеРазобранныеПисьма);
	СохранитьЗначение("НаборПерсоналаПолеДляУпорядочиванияНеРазобранныхПисем",	ПолеДляУпорядочиванияНеРазобранныхПисем);
	
	СохранитьЗначение("НаборПерсоналаПолеДляУпорядочиванияЗаявок",	ПолеДляУпорядочиванияЗаявок);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписаноЭлектронноеПисьмо" Тогда
		СтрокаТабличнойЧасти = ДеревоНеРазобранныхПисем.Строки.Найти(Параметр, "Ссылка", Истина);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Ссылка",	Параметр);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЭлектронноеПисьмо.НеРассмотрено,
			|	ЭлектронноеПисьмо.РассмотретьПосле,
			|	ЭлектронноеПисьмо.СтатусПисьма,
			|	ЭлектронноеПисьмо.Тема,
			|	ВЫБОР
			|		КОГДА (НЕ ЭлектронноеПисьмо.НеРассмотрено)
			|				ИЛИ (НЕ ЭлектронноеПисьмо.ЗаявкаКандидата = ЗНАЧЕНИЕ(Справочник.ЗаявкиКандидатов.ПустаяСсылка))
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК УдалитьПисьмо
			|ИЗ
			|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
			
				Если Выборка.УдалитьПисьмо Тогда
					УдалитьНеРазобранноеПисьмо(СтрокаТабличнойЧасти);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ОбновитьСписокНеРазобранныхПисем();
		КонецЕсли;
	
	ИначеЕсли ИмяСобытия = "ЗаписанаЗаявкаКандидата" Тогда
		ОбновитьСписокЗаявок();
		ОбновитьОписаниеЗаявки();
		
	ИначеЕсли ИмяСобытия = "ЗаписанаВакансия" Тогда
		ОбновитьПодменюНазначитьВакансию();
		ОбновитьОписаниеЗаявки();
		
	ИначеЕсли ИмяСобытия = "ЗаписанИсточникИнформации" Тогда
		ОбновитьПодменюУказатьИсточникИнформации();
		ОбновитьОписаниеЗаявки();
		
	ИначеЕсли ИмяСобытия = "ЗаписаноСостояниеЗаявки" Тогда
		ОбновитьПодменюИзменитьСостояние();
		ОбновитьОписаниеЗаявки();
		
	ИначеЕсли ИмяСобытия = "ЗаписанаГруппаЗаявок" Тогда
		ОбновитьПодменюИзменитьГруппуЗаявки();
		ОбновитьОписаниеЗаявки();
		
	ИначеЕсли (ИмяСобытия = "ЗаписаноСобытие")
		ИЛИ   (ИмяСобытия = "ОбновитьФорму") Тогда
		ОбновитьОписаниеЗаявки();
	
	ИначеЕсли ИмяСобытия = "ИзмененРежимНабораПерсонала" Тогда
		РежимНабораПерсонала = Константы.РежимНабораПерсонала.Получить();
		ОбновитьСписокЗаявок();
	
	ИначеЕсли ИмяСобытия = "РоботПолученияПисем" Тогда
		ОбновитьСписокНеРазобранныхПисем();
		ОбновитьСписокЗаявок();
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ЗаявкиКандидатов") Тогда
		СписокПисемКУдалению = Новый Массив;
		
		Если ПисьмаДляЗаявки <> Неопределено Тогда
			Для Каждого ТекущееПисьмо Из ПисьмаДляЗаявки Цикл
				ОбъектПисьмо = ТекущееПисьмо.Ссылка.ПолучитьОбъект();
				ОбъектПисьмо.ЗаявкаКандидата		= Объект.Ссылка;
				Если ОбъектПисьмо.Ответственный.Пустая() Тогда
					ОбъектПисьмо.Ответственный		= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнойОтветственный");
				КонецЕсли;
				Если ОбъектПисьмо.Ответственный.Пустая() Тогда
					ОбъектПисьмо.Ответственный	= глЗначениеПеременной("глТекущийПользователь");
				КонецЕсли;
				ОбъектПисьмо.НеРассмотрено			= Ложь;
				ОбъектПисьмо.Записать();
				
				СписокПисемКУдалению.Добавить(ТекущееПисьмо);
			КонецЦикла;
			
			Для Каждого ТекущееПисьмо Из СписокПисемКУдалению Цикл
				УдалитьНеРазобранноеПисьмо(ТекущееПисьмо);
			КонецЦикла;
		КонецЕсли;
		
		ОбновитьСписокЗаявок();
		ОбновитьОписаниеЗаявки();
		
		ПисьмаДляЗаявки = Неопределено;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.Событие") Тогда
		ОбновитьОписаниеЗаявки();
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.СотрудникиОрганизаций") Тогда
		Если ЗаявкаДляСотрудника = Неопределено ИЛИ Источник.ВладелецФормы <> ЭтаФорма Тогда
			Возврат;
		КонецЕсли;
		
		ОбъектЗаявка = ЗаявкаДляСотрудника.Ссылка.ПолучитьОбъект();
		ОбъектЗаявка.Физлицо	= Объект.Физлицо;
		ОбъектЗаявка.Записать();
		
		ЗаявкаДляСотрудника = Неопределено;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Вакансии") Тогда
		ОбновитьПодменюНазначитьВакансию();
		ОбновитьОписаниеЗаявки();
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.СостоянияЗаявокКандидатов") Тогда
		ОбновитьПодменюИзменитьСостояние();
		ОбновитьОписаниеЗаявки();
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ИсточникиИнформации") Тогда
		ОбновитьПодменюУказатьИсточникИнформации();
		ОбновитьОписаниеЗаявки();
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ГруппыЗаявокКандидатов") Тогда
		ОбновитьПодменюИзменитьГруппуЗаявки();
		ОбновитьОписаниеЗаявки();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Верхняя командная панель

Процедура ПерейтиКВакансиям(Кнопка)
	
	Справочники.Вакансии.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура ПерейтиКИсточникам(Кнопка)
	
	Справочники.ИсточникиИнформации.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура ОткрытьКадровоеПланирование(Кнопка)
	
	Обработки.КадровоеПланирование.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура ПереключитьВидимостьСправкиФормы(Кнопка)
	
	ОтображатьСправкуФормы = НЕ ОтображатьСправкуФормы;
	УстановитьВидимостьСправкиФормы();
	
КонецПроцедуры

// Не разобранные письма

Процедура ИзменитьВидимостьСпискаПисем(Элемент)
	
	ПоказыватьНеРазобранныеПисьма = Не ПоказыватьНеРазобранныеПисьма;
	
	УстановитьВидимостьНеРазобранныхПисем();
	
КонецПроцедуры

Процедура ОткрытьПисьмо(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеНеРазобранныеПисьма.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.Ссылка.ПолучитьФорму(, ЭтаФорма, ЭтотОбъект).Открыть();
	
КонецПроцедуры

Процедура ПринятьКакЗаявку(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеНеРазобранныеПисьма.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Справочники.ЗаявкиКандидатов.ПолучитьФормуНовогоЭлемента(, ЭтаФорма, ЭтотОбъект);
	Форма.Наименование	= ДанныеСтроки.Тема;
	Форма.Открыть();
	
	ПисьмаДляЗаявки = ЭлементыФормы.ТабличноеПолеНеРазобранныеПисьма.ВыделенныеСтроки;
	
КонецПроцедуры

Процедура ПометитьКакПрочтенное(Кнопка)
	
	СписокПисемКУдалению = Новый Массив;
	
	Для Каждого ВыбранноеПисьмо Из ЭлементыФормы.ТабличноеПолеНеРазобранныеПисьма.ВыделенныеСтроки Цикл
		Если ВыбранноеПисьмо.Ссылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ Ответственный КАК Ответственный ИЗ Документ.ЭлектронноеПисьмо ГДЕ Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ВыбранноеПисьмо.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураРеквизитовКИзменению = Новый Структура("Ответственный, НеРассмотрено");
			СтруктураРеквизитовКИзменению.Ответственный = Выборка.Ответственный;
			Если СтруктураРеквизитовКИзменению.Ответственный.Пустая() Тогда
				СтруктураРеквизитовКИзменению.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнойОтветственный");
			КонецЕсли;
			Если СтруктураРеквизитовКИзменению.Ответственный.Пустая() Тогда
				СтруктураРеквизитовКИзменению.Ответственный	= глЗначениеПеременной("глТекущийПользователь");
			КонецЕсли;
			СтруктураРеквизитовКИзменению.НеРассмотрено = Ложь;
			ПолныеПрава.УстановитьРеквизитЭлектронногоПисьма(ВыбранноеПисьмо.Ссылка, СтруктураРеквизитовКИзменению);
		КонецЕсли;		
		СписокПисемКУдалению.Добавить(ВыбранноеПисьмо);
		
	КонецЦикла;
	
	Для Каждого ВыбранноеПисьмо Из СписокПисемКУдалению Цикл
		УдалитьНеРазобранноеПисьмо(ВыбранноеПисьмо);
	КонецЦикла;
	
	ЭлементыФормы.ТабличноеПолеНеРазобранныеПисьма.ВыделенныеСтроки.Очистить();
	
КонецПроцедуры

Процедура ПереместитьВНежелательнуюПочту(Кнопка)
	
	СписокПисемКУдалению = Новый Массив;
	
	Для Каждого ВыбранноеПисьмо Из ЭлементыФормы.ТабличноеПолеНеРазобранныеПисьма.ВыделенныеСтроки Цикл
		Если ВыбранноеПисьмо.Ссылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		УчетнаяЗапись = ВыбранноеПисьмо.Ссылка.УчетнаяЗапись;
		Если УчетнаяЗапись.Пустая() Тогда
			Сообщить(НСтр("ru='В письме не указана учетная запись. Перемещение письма в нежелательную почту невозможно!';uk='У листі не вказаний обліковий запис. Переміщення листа в небажану пошту неможливо!'"));
			Продолжить;
		КонецЕсли;
		
		ПапкаНежелательнаяПочта = УчетнаяЗапись.ГруппаНежелательные;
		Если ПапкаНежелательнаяПочта.Пустая() Тогда
			ТекстВопроса =	НСтр("ru='Для учетной записи ';uk='Для облікового запису '") + УчетнаяЗапись + НСтр("ru=' не указана папка, в которую необходимо помещать нежелательную почту."
"Хотите открыть учетную запись для настройки папки нежелательных писем?';uk=' не зазначена папка, в яку необхідно поміщати небажану пошту."
"Хочете відкрити обліковий запис для настройки папки небажаних листів?'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				УчетнаяЗапись.ПолучитьФорму().Открыть();
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ЭлектронноеПисьмоОбъект = ВыбранноеПисьмо.Ссылка.ПолучитьОбъект();
		Если ЭлектронноеПисьмоОбъект.Ответственный.Пустая() Тогда
			ЭлектронноеПисьмоОбъект.Ответственный	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнойОтветственный");
		КонецЕсли;
		Если ЭлектронноеПисьмоОбъект.Ответственный.Пустая() Тогда
			ЭлектронноеПисьмоОбъект.Ответственный	= глЗначениеПеременной("глТекущийПользователь");
		КонецЕсли;
		ЭлектронноеПисьмоОбъект.НеРассмотрено		= Ложь;
		ЭлектронноеПисьмоОбъект.ГруппаУчетнойЗаписи	= ПапкаНежелательнаяПочта;
		ЭлектронноеПисьмоОбъект.Записать();
		
		СписокПисемКУдалению.Добавить(ВыбранноеПисьмо);
	КонецЦикла;
	
	Для Каждого ВыбранноеПисьмо Из СписокПисемКУдалению Цикл
		УдалитьНеРазобранноеПисьмо(ВыбранноеПисьмо);
	КонецЦикла;
	
	ЭлементыФормы.ТабличноеПолеНеРазобранныеПисьма.ВыделенныеСтроки.Очистить();
	
КонецПроцедуры

Процедура ПринятьПочту(Кнопка)
	
	ПолучениеПисем();
	
КонецПроцедуры

Процедура ПоДате(Кнопка)
	
	ПолеДляУпорядочиванияНеРазобранныхПисем = "ДатаПолучения";
	ОбновитьСписокНеРазобранныхПисем();
	УстановитьПометкуПодменюУпорядочить(ЭлементыФормы.КоманднаяПанельНеРазобранныеПисьма, ПолеДляУпорядочиванияНеРазобранныхПисем);
	
КонецПроцедуры

Процедура ПоАдресуОтправителя(Кнопка)
	
	ПолеДляУпорядочиванияНеРазобранныхПисем = "Отправитель";
	ОбновитьСписокНеРазобранныхПисем();
	УстановитьПометкуПодменюУпорядочить(ЭлементыФормы.КоманднаяПанельНеРазобранныеПисьма, ПолеДляУпорядочиванияНеРазобранныхПисем);
	
КонецПроцедуры

Процедура ВсеПисьма(Кнопка)
	
	Если Не ПравоДоступа("Использование", Метаданные.Обработки.МенеджерКонтактов) Тогда
		Предупреждение(НСтр("ru='У вас нет прав для работы с электронной почтой';uk='У вас немає прав для роботи з електронною поштою'"));
		Возврат;
	КонецЕсли;
	
	Форма = Обработки.МенеджерКонтактов.ПолучитьФорму(, ЭтаФорма, ЭтотОбъект);
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеНеРазобранныеПисьма.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено И НЕ ДанныеСтроки.Ссылка.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ДанныеСтроки.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронноеПисьмо.УчетнаяЗапись,
		|	ЭлектронноеПисьмо.ГруппаУчетнойЗаписи
		|ИЗ
		|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		|ГДЕ
		|	ЭлектронноеПисьмо.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Форма.УчетнаяЗапись											= Выборка.УчетнаяЗапись;
			Форма.ЭлементыФормы.ГруппыПисемДерево.ТекущаяСтрока			= Выборка.ГруппаУчетнойЗаписи;
			Форма.ЭлементыФормы.ЭлектронныеПисьмаСписок.ТекущаяСтрока	= ДанныеСтроки.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Открыть();
	
КонецПроцедуры

// Активные заявки кандидатов

Процедура ДобавитьЗаявку(Кнопка)
	
	Форма = Справочники.ЗаявкиКандидатов.ПолучитьФормуНовогоЭлемента(, ЭтаФорма, ЭтотОбъект);
	ЗаполнитьРеквизитЗаявкиПоГруппировке(ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные, Форма);
	Форма.Открыть();
	
КонецПроцедуры

Процедура ОткрытьЗаявку(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.Ссылка.ПолучитьФорму(, ЭтаФорма, ЭтотОбъект).Открыть();
	
КонецПроцедуры

Процедура УказатьИсточникИнформации(Кнопка)
	
	ВыбранноеЗначение = Справочники.ИсточникиИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Сред(Кнопка.Имя, 7), "_", "-")));
	
	ЗаписатьИсточникИнформации(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ОткрытьСписокВсехИсточников(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВыбораИсточникаИнформации(ДанныеСтроки.Ссылка.ИсточникИнформации);
	
КонецПроцедуры

Процедура ИзменитьСостояние(Кнопка)
	
	ВыбранноеЗначение = Справочники.СостоянияЗаявокКандидатов.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Сред(Кнопка.Имя, 7), "_", "-")));
	
	ЗаписатьСостояниеЗаявки(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ОткрытьСписокВсехСостояний(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВыбораСостоянияЗаявки(ДанныеСтроки.Ссылка.Состояние);
	
КонецПроцедуры

Процедура НазначитьВакансию(Кнопка)
	
	ВыбранноеЗначение = Справочники.Вакансии.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Сред(Кнопка.Имя, 7), "_", "-")));
	
	ЗаписатьВакансию(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ОткрытьСписокВсехВакансий(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВыбораВакансии(ДанныеСтроки.Ссылка.Вакансия);
	
КонецПроцедуры

Процедура ИзменитьГруппуЗаявок(Кнопка)
	
	ВыбранноеЗначение = Справочники.ГруппыЗаявокКандидатов.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Сред(Кнопка.Имя, 7), "_", "-")));
	
	ЗаписатьГруппуЗаявки(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ОткрытьСписокВсехГруппЗаявок(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВыбораГруппыЗаявок(ДанныеСтроки.Ссылка.Состояние);
	
КонецПроцедуры

Процедура ДобавитьФайлы(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;

	СтруктураДляСпискаИзображдений = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, ДанныеСтроки.Ссылка, Ложь, Ложь);
	СтруктураДляСпискаДополнительныхФайлов = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, ДанныеСтроки.Ссылка, Ложь, Ложь);
	ОбязательныеОтборы = Новый Структура("Объект", ДанныеСтроки.Ссылка);
	
	РаботаСФайлами.ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображдений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);
	
КонецПроцедуры

Процедура ЗапланироватьВстречу(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Документы.Событие.ПолучитьФормуНовогоДокумента(, ЭтаФорма, ЭтотОбъект);
	
	Форма.ВидОбъекта			= Перечисления.ВидыОбъектовСобытия.Кандидат;
	Форма.ЗаявкаКандидата		= ДанныеСтроки.Ссылка;
	
	Форма.ВидСобытия			= Перечисления.ВидыСобытий.ЛичнаяВстреча;
	Форма.ТипСобытия			= Перечисления.ВходящееИсходящееСобытие.Исходящее;
	Форма.Ответственный			= ТекущийПользователь;
	Форма.Важность				= Перечисления.Важность.Средняя;
	
	Форма.Открыть();
	
КонецПроцедуры

Процедура НазначенныеВстречи(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ФормаСписка = Документы.Событие.ПолучитьФормуСписка(, ЭтаФорма, ЭтотОбъект);
	ФормаСписка.Отбор.ЗаявкаКандидата.Установить(ДанныеСтроки.Ссылка);
	ФормаСписка.Открыть();
	
КонецПроцедуры

Процедура ВсеВстречи(Кнопка)
	
	Форма = Обработки.МенеджерКонтактов.ПолучитьФорму();
	Форма.Открыть();
	Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = Форма.ЭлементыФормы.ОсновнаяПанель.Страницы.Календарь;
	
КонецПроцедуры

Процедура СоздатьФизлицоПоЗаявке(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаявкаДляСотрудника = ДанныеСтроки.Ссылка;
	
	Форма = Справочники.ФизическиеЛица.ПолучитьФормуНовогоЭлемента(, ЭтаФорма, ЭтотОбъект);
	
	ФИО	= ДанныеСтроки.Наименование;
	Форма.Наименование	= ФИО;
	Форма.Фамилия		= ОбщегоНазначения.ВыделитьСлово(ФИО);
	Форма.Имя			= ОбщегоНазначения.ВыделитьСлово(ФИО);
	Форма.Отчество		= ОбщегоНазначения.ВыделитьСлово(ФИО);
	Если ЗначениеЗаполнено(Форма.Отчество) Тогда
		Форма.Пол		= ПроцедурыУправленияПерсоналом.ПолучитьПол(Форма.Отчество);
	КонецЕсли;
	Форма.Открыть();
	
КонецПроцедуры

Процедура СоздатьСотрудникаПоЗаявке(Кнопка)
	
	СоздатьСотрудника();
	
КонецПроцедуры

Процедура КоманднаяПанельЗаявкиКандидатовРаботаПоЗаявкеЗавершена(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗаявок = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ВыделенныеСтроки Цикл
		Если ВыделеннаяСтрока.Ссылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		ЗаявкаОбъект = ВыделеннаяСтрока.Ссылка.ПолучитьОбъект();
		ЗаявкаОбъект.Закрыта	= Истина;
		ЗаявкаОбъект.Записать();
		МассивЗаявок.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	
	Для Каждого ВыделеннаяСтрока Из МассивЗаявок Цикл
		СтарыйРодитель	= ВыделеннаяСтрока.Родитель;
		СтарыйРодитель.Строки.Удалить(ВыделеннаяСтрока);
		Если СтарыйРодитель.Строки.Количество() = 0 Тогда
			ДеревоЗаявокКандидатов.Строки.Удалить(СтарыйРодитель);
		Иначе
			СтарыйРодитель.Наименование = Лев(СтарыйРодитель.Наименование, Найти(СтарыйРодитель.Наименование, "(")) + СтарыйРодитель.Строки.Количество() + ")";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЗаявки(Кнопка)
	
	ОбновитьСписокЗаявок();
	
КонецПроцедуры

Процедура ПоДатеСобытия(Кнопка)
	
	ПолеДляУпорядочиванияЗаявок = "ДатаСобытия";
	ОбновитьСписокЗаявок();
	УстановитьПометкуПодменюУпорядочить(ЭлементыФормы.КоманднаяПанельЗаявкиКандидатов, ПолеДляУпорядочиванияЗаявок);
	
КонецПроцедуры

Процедура ПоСостоянию(Кнопка)
	
	ПолеДляУпорядочиванияЗаявок = "Состояние";
	ОбновитьСписокЗаявок();
	УстановитьПометкуПодменюУпорядочить(ЭлементыФормы.КоманднаяПанельЗаявкиКандидатов, ПолеДляУпорядочиванияЗаявок);
	
КонецПроцедуры

Процедура ПоАлфавиту(Кнопка)
	
	ПолеДляУпорядочиванияЗаявок = "Наименование";
	ОбновитьСписокЗаявок();
	УстановитьПометкуПодменюУпорядочить(ЭлементыФормы.КоманднаяПанельЗаявкиКандидатов, ПолеДляУпорядочиванияЗаявок);
	
КонецПроцедуры

Процедура ПоВакансии(Кнопка)
	
	ПолеДляУпорядочиванияЗаявок = "Вакансия";
	ОбновитьСписокЗаявок();
	УстановитьПометкуПодменюУпорядочить(ЭлементыФормы.КоманднаяПанельЗаявкиКандидатов, ПолеДляУпорядочиванияЗаявок);
	
КонецПроцедуры

Процедура ПоОтветственному(Кнопка)
	
	ПолеДляУпорядочиванияЗаявок = "Ответственный";
	ОбновитьСписокЗаявок();
	УстановитьПометкуПодменюУпорядочить(ЭлементыФормы.КоманднаяПанельЗаявкиКандидатов, ПолеДляУпорядочиванияЗаявок);
	
КонецПроцедуры

Процедура ПоПодразделению(Кнопка)
	
	ПолеДляУпорядочиванияЗаявок = "Подразделение";
	ОбновитьСписокЗаявок();
	УстановитьПометкуПодменюУпорядочить(ЭлементыФормы.КоманднаяПанельЗаявкиКандидатов, ПолеДляУпорядочиванияЗаявок);
	
КонецПроцедуры

Процедура ПоДолжности(Кнопка)
	
	ПолеДляУпорядочиванияЗаявок = "Должность";
	ОбновитьСписокЗаявок();
	УстановитьПометкуПодменюУпорядочить(ЭлементыФормы.КоманднаяПанельЗаявкиКандидатов, ПолеДляУпорядочиванияЗаявок);
	
КонецПроцедуры

Процедура ПоГруппеЗаявок(Кнопка)
	
	ПолеДляУпорядочиванияЗаявок = "ГруппаЗаявок";
	ОбновитьСписокЗаявок();
	УстановитьПометкуПодменюУпорядочить(ЭлементыФормы.КоманднаяПанельЗаявкиКандидатов, ПолеДляУпорядочиванияЗаявок);
	
КонецПроцедуры

Процедура ВсеЗаявки(Кнопка)
	
	Справочники.ЗаявкиКандидатов.ПолучитьФормуСписка(, ЭтаФорма, ЭтотОбъект).Открыть();
	
КонецПроцедуры

// Письма по заявке

Процедура НовоеПисьмо(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНовогоПисьма = Новый Структура;
	СтруктураНовогоПисьма.Вставить("ЗаявкаКандидата",	ДанныеСтроки.Ссылка);
	СтруктураНовогоПисьма.Вставить("Тема",				ДанныеСтроки.Наименование);
	
	СписокКому = Новый СписокЗначений;
	
	АдресПолучателя = "";
	Если Не ДанныеСтроки.Ссылка.Физлицо.Пустая() Тогда
		АдресПолучателя = УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(ДанныеСтроки.Ссылка.Физлицо);
		Если Не ПустаяСтрока(АдресПолучателя) Тогда
			СписокКому.Добавить(АдресПолучателя, АдресПолучателя);
		КонецЕсли;
	КонецЕсли;
		
	Если ПустаяСтрока(АдресПолучателя) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЗаявкаКандидата",	ДанныеСтроки.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЭлектронноеПисьмо.ОтправительИмя КАК Имя,
		|	ЭлектронноеПисьмо.ОтправительАдресЭлектроннойПочты КАК АдресЭлектроннойПочты
		|ИЗ
		|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		|ГДЕ
		|	ЭлектронноеПисьмо.ЗаявкаКандидата = &ЗаявкаКандидата
		|	И ЭлектронноеПисьмо.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Полученное)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭлектронноеПисьмо.ДатаОтправления УБЫВ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СписокКому.Добавить(Выборка.АдресЭлектроннойПочты, Выборка.Имя);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураНовогоПисьма.Вставить("Кому", СписокКому);
	
	УправлениеЭлектроннойПочтой.НаписатьПисьмо(ТекущийПользователь, СтруктураНовогоПисьма,,,,, ЭтаФорма);
	
КонецПроцедуры

Процедура СкопироватьПисьмо(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеПерепискаПоЗаявке.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйОбъект = ДанныеСтроки.Ссылка.Скопировать();
	НовыйОбъект.ПолучитьФорму(, ЭтаФорма, ЭтотОбъект).Открыть();
	
КонецПроцедуры

Процедура ИзменитьПисьмо(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеПерепискаПоЗаявке.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТабличноеПолеПерепискаПоЗаявкеПередНачаломИзменения(ЭлементыФормы.ТабличноеПолеПерепискаПоЗаявке, Ложь);
	
КонецПроцедуры

Процедура УдалитьПисьмо(Кнопка)
	
	Элемент = ЭлементыФормы.ТабличноеПолеПерепискаПоЗаявке;
	
	Если Элемент.ВыделенныеСтроки.Количество() > 0 Тогда
		
		Если Элемент.ВыделенныеСтроки.Количество() = 1 Тогда
			Если Элемент.ТекущиеДанные.ПометкаУдаления Тогда
				СтрокаВопроса = НСтр("ru='Снять с объекта пометку на удаление?';uk=""Зняти з об'єкта позначку на вилучення?""");
			Иначе
				СтрокаВопроса = НСтр("ru='Пометить объект на удаление?';uk=""Позначити об'єкт для вилучення?""");
			КонецЕсли;
		Иначе
			ФлагУдаления = Ложь;
			ФлагНеУдаления = Ложь;
			Для каждого Строка Из Элемент.ВыделенныеСтроки Цикл
				Если Строка.ПометкаУдаления Тогда
					ФлагУдаления = Истина;
				Иначе
					ФлагНеУдаления = Истина;
				КонецЕсли;
				Если ФлагНеУдаления И ФлагУдаления Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			Если ФлагНеУдаления И ФлагУдаления Тогда
				СтрокаВопроса = НСтр("ru='Изменить у объектов пометку на удаление?';uk=""Змінити в об'єктів позначку на вилучення?""");
			ИначеЕсли ФлагУдаления Тогда
				СтрокаВопроса = НСтр("ru='Снять с объекта пометку на удаление?';uk=""Зняти з об'єкта позначку на вилучення?""");
			Иначе
				СтрокаВопроса = НСтр("ru='Пометить объект на удаление?';uk=""Позначити об'єкт для вилучення?""");
			КонецЕсли;
		КонецЕсли; 
		
		ОтветНаВопрос = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		ВсегоПисем = Элемент.ВыделенныеСтроки.Количество();
		ТекСтрока = 0;
		Для каждого ВыбраннаяСтрока Из Элемент.ВыделенныеСтроки Цикл
			ТекСтрока = ТекСтрока + 1;
			Состояние("Обработно " + Строка(ТекСтрока) + " из " + Строка(ВсегоПисем));
			Объект = ВыбраннаяСтрока.ПолучитьОбъект();
			Попытка
				Объект.УстановитьПометкуУдаления(НЕ Объект.ПометкаУдаления);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ПометкаУдаления Тогда
		ЭлементыФормы.КонтекстноеМенюПерепискаПоЗаявке.Кнопки.УдалитьПисьмо.Текст = "Установить пометку удаления";
	Иначе
		ЭлементыФормы.КонтекстноеМенюПерепискаПоЗаявке.Кнопки.УдалитьПисьмо.Текст = "Снять пометку удаления";
	КонецЕсли;
	
КонецПроцедуры

Процедура Ответить(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеПерепискаПоЗаявке.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеЭлектроннойПочтой.ОтветитьНаПисьмо(ТекущийПользователь, ДанныеСтроки.Ссылка, ЭтаФорма);
	
КонецПроцедуры

Процедура ОтветитьВсем(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеПерепискаПоЗаявке.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеЭлектроннойПочтой.ОтветитьВсемНаПисьмо(ТекущийПользователь, ДанныеСтроки.Ссылка, ЭтаФорма);
	
КонецПроцедуры

Процедура Переслать(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеПерепискаПоЗаявке.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеЭлектроннойПочтой.ПереадресоватьПисьмо(ТекущийПользователь, ДанныеСтроки.Ссылка, , ЭтаФорма);
	
КонецПроцедуры

Процедура УстановитьРассмотрено(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеПерепискаПоЗаявке.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронноеПисьмоОбъект = ДанныеСтроки.Ссылка.ПолучитьОбъект();
	Если ЭлектронноеПисьмоОбъект.Ответственный.Пустая() Тогда
		ЭлектронноеПисьмоОбъект.Ответственный	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнойОтветственный");
	КонецЕсли;
	Если ЭлектронноеПисьмоОбъект.Ответственный.Пустая() Тогда
		ЭлектронноеПисьмоОбъект.Ответственный	= глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	ЭлектронноеПисьмоОбъект.НеРассмотрено		= Ложь;
	ЭлектронноеПисьмоОбъект.Записать();
	
КонецПроцедуры

Процедура УстановитьНеРассмотрено(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеПерепискаПоЗаявке.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронноеПисьмоОбъект = ДанныеСтроки.Ссылка.ПолучитьОбъект();
	ЭлектронноеПисьмоОбъект.НеРассмотрено	= Истина;
	ЭлектронноеПисьмоОбъект.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ПолеHTMLДокументаНеРазобранныеПисьмаonclick(Элемент, pEvtObj)
	
	УправлениеЭлектроннойПочтой.ОбработкаСобытияOnClickПоляHTML(глЗначениеПеременной("глТекущийПользователь"), Элемент, pEvtObj, , , ЭтаФорма);
	
КонецПроцедуры

Процедура ПолеHTMLДокументаОписаниеЗаявкиonclick(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnClick(Элемент, pEvtObj, ЭтаФорма);
	
КонецПроцедуры

Процедура ПолеHTMLДокументаОписаниеЗаявкиonmouseover(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnMouseOver(Элемент, pEvtObj);
	
КонецПроцедуры

Процедура ПолеHTMLДокументаОписаниеЗаявкиonmouseout(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnMouseOut(Элемент, pEvtObj);
	
КонецПроцедуры

Процедура ПолеHTMLДокументаПерепискаПоЗаявкеonclick(Элемент, pEvtObj)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеПерепискаПоЗаявке.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		//УправлениеЭлектроннойПочтой.ОбработкаСобытияOnClickПоляHTML(глЗначениеПеременной("глТекущийПользователь"), Элемент, pEvtObj, , , ЭтаФорма);
	Иначе
		УправлениеЭлектроннойПочтой.ОбработкаСобытияOnClickПоляHTML(глЗначениеПеременной("глТекущийПользователь"), Элемент, pEvtObj, ДанныеСтроки.УчетнаяЗапись, ДанныеСтроки.Ссылка.ГруппаУчетнойЗаписи, ЭтаФорма, ДанныеСтроки.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВстроеннаяСправкаonclick(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnClick(Элемент, pEvtObj, ЭтаФорма);
	
КонецПроцедуры

Процедура ВстроеннаяСправкаonmouseout(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnMouseOut(Элемент, pEvtObj);
	
КонецПроцедуры

Процедура ВстроеннаяСправкаonmouseover(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnMouseOver(Элемент, pEvtObj);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ НеРазобранныеПисьма

Процедура ТабличноеПолеНеРазобранныеПисьмаПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("НеРазобранныеПисьмаПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

Процедура ТабличноеПолеНеРазобранныеПисьмаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеНеРазобранныеПисьма.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки.Ссылка.ПолучитьФорму(, Элемент, ЭтотОбъект).Открыть();
	
КонецПроцедуры

Процедура ТабличноеПолеНеРазобранныеПисьмаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.СтатусПисьма = Перечисления.СтатусыПисем.Сохраненное Тогда
		ОформлениеСтроки.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		
	ИначеЕсли ДанныеСтроки.СтатусПисьма = Перечисления.СтатусыПисем.Исходящее Тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.ТусклоРозовый;
		
	КонецЕсли;
	
	Если ДанныеСтроки.Ссылка.Пустая() Тогда
		ОформлениеСтроки.Шрифт		= ШрифтыСтиля.ШрифтГруппыДерева;
		ОформлениеСтроки.ЦветФона	= ЦветаСтиля.ЦветГруппыДерева;
		ОформлениеСтроки.ЦветТекста	= ЦветаСтиля.ЦветШрифтаГруппыДерева;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ЗаявкиКандидатов

Процедура ТабличноеПолеЗаявкиКандидатовПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	КомандыЗаявкиДоступны = ДанныеСтроки <> Неопределено И НЕ ДанныеСтроки.Ссылка.Пустая();
	
	НеДоступнаГрупповаяОбработка = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ВыделенныеСтроки.Количество() < 2;
	
	КнопкиПодменю = ЭлементыФормы.КоманднаяПанельЗаявкиКандидатов.Кнопки.ПодменюЗаявки.Кнопки;
	
	КнопкиПодменю.НаписатьКандидату.Доступность			= КомандыЗаявкиДоступны;
	КнопкиПодменю.ОткрытьЗаявку.Доступность				= КомандыЗаявкиДоступны;
	КнопкиПодменю.ДобавитьФайлы.Доступность				= КомандыЗаявкиДоступны И НеДоступнаГрупповаяОбработка;
	КнопкиПодменю.ЗапланироватьВстречу.Доступность		= КомандыЗаявкиДоступны И НеДоступнаГрупповаяОбработка;
	КнопкиПодменю.НазначенныеВстречи.Доступность		= КомандыЗаявкиДоступны;
	КнопкиПодменю.СоздатьФизлицоПоЗаявке.Доступность	= КомандыЗаявкиДоступны И ДанныеСтроки.Ссылка.Физлицо.Пустая()  И НеДоступнаГрупповаяОбработка;
	КнопкиПодменю.СоздатьСотрудникаПоЗаявке.Доступность	= КомандыЗаявкиДоступны И НеДоступнаГрупповаяОбработка;
	КнопкиПодменю.РаботаПоЗаявкеЗавершена.Доступность	= КомандыЗаявкиДоступны;
	
	Для Каждого Кнопка Из КнопкиПодменю.ИзменитьСостояние.Кнопки Цикл
		Кнопка.Доступность = КомандыЗаявкиДоступны;
	КонецЦикла;
	Для Каждого Кнопка Из КнопкиПодменю.УказатьИсточникИнформации.Кнопки Цикл
		Кнопка.Доступность = КомандыЗаявкиДоступны;
	КонецЦикла;
	Для Каждого Кнопка Из КнопкиПодменю.НазначитьВакансию.Кнопки Цикл
		Кнопка.Доступность = КомандыЗаявкиДоступны;
	КонецЦикла;
	Для Каждого Кнопка Из КнопкиПодменю.ИзменитьГруппуЗаявки.Кнопки Цикл
		Кнопка.Доступность = КомандыЗаявкиДоступны;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("ЗаявкиКандидатовПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

Процедура ТабличноеПолеЗаявкиКандидатовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ИсточникиИнформации") Тогда
		СтандартнаяОбработка = Ложь;
		
		ЗаписатьИсточникИнформации(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СостоянияЗаявокКандидатов") Тогда
		СтандартнаяОбработка = Ложь;
		
		ЗаписатьСостояниеЗаявки(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Вакансии") Тогда
		СтандартнаяОбработка = Ложь;
		
		ЗаписатьВакансию(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыЗаявокКандидатов") Тогда
		СтандартнаяОбработка = Ложь;
		
		ЗаписатьГруппуЗаявки(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеЗаявкиКандидатовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Ссылка.Пустая() Тогда
		ОформлениеСтроки.Шрифт		= ШрифтыСтиля.ШрифтГруппыДерева;
		ОформлениеСтроки.ЦветФона	= ЦветаСтиля.ЦветГруппыДерева;
		ОформлениеСтроки.ЦветТекста	= ЦветаСтиля.ЦветШрифтаГруппыДерева;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеЗаявкиКандидатовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ПараметрыПеретаскивания.Значение Цикл
			НачатьПеретаскиваниеОбъектов(ЭлементМассива, СтандартнаяОбработка);
			Если СтандартнаяОбработка Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		НачатьПеретаскиваниеОбъектов(ПараметрыПеретаскивания.Значение, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеЗаявкиКандидатовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ПараметрыПеретаскивания.Значение Цикл
			ПроверитьПеретаскиваниеОбъектов(ЭлементМассива, СтандартнаяОбработка, Строка, Колонка);
			Если СтандартнаяОбработка Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ПроверитьПеретаскиваниеОбъектов(ПараметрыПеретаскивания.Значение, СтандартнаяОбработка, Строка, Колонка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеЗаявкиКандидатовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если	ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СтрокаДереваЗначений") И
				ТипЗнч(ПараметрыПеретаскивания.Значение[0].Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмо") И
				(Строка = Неопределено ИЛИ Строка.Ссылка.Пустая()) Тогда
					ТекстВопроса = НСтр("ru='Создать новую заявку по письмам?';uk='Створити нову заявку по листам?'");
					Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
					Если Ответ = КодВозвратаДиалога.Нет Тогда
						Возврат;
					КонецЕсли;
			
			СтандартнаяОбработка = Ложь;
			
			Форма = Справочники.ЗаявкиКандидатов.ПолучитьФормуНовогоЭлемента(, ЭтаФорма, ЭтотОбъект);
			Если (Строка <> Неопределено) Тогда
				ЗаполнитьРеквизитЗаявкиПоГруппировке(Строка, Форма);
			КонецЕсли;
			Форма.Наименование	= ПараметрыПеретаскивания.Значение[0].Тема;
			Форма.Открыть();
			
			ПисьмаДляЗаявки = ПараметрыПеретаскивания.Значение;
			
		Иначе
			Для Каждого ЭлементМассива Из ПараметрыПеретаскивания.Значение Цикл
				ПеретаскиваниеОбъектов(Элемент, ЭлементМассива, СтандартнаяОбработка, Строка, Колонка);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		Если	ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СтрокаДереваЗначений") И
				ТипЗнч(ПараметрыПеретаскивания.Значение.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмо") И
				(Строка = Неопределено ИЛИ Строка.Ссылка.Пустая()) Тогда
					ТекстВопроса = НСтр("ru='Создать новую заявку по письму?';uk='Створити нову заявку по листу?'");
					Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
					Если Ответ = КодВозвратаДиалога.Нет Тогда
						Возврат;
					КонецЕсли;
			
			СтандартнаяОбработка = Ложь;
			
			Форма = Справочники.ЗаявкиКандидатов.ПолучитьФормуНовогоЭлемента(, ЭтаФорма, ЭтотОбъект);
			Если (Строка <> Неопределено) Тогда
				ЗаполнитьРеквизитЗаявкиПоГруппировке(Строка, Форма);
			КонецЕсли;
			Форма.Наименование	= ПараметрыПеретаскивания.Значение.Тема;
			Форма.Открыть();
			
			ПисьмаДляЗаявки = ПараметрыПеретаскивания.Значение;
			
		Иначе
			ПеретаскиваниеОбъектов(Элемент, ПараметрыПеретаскивания.Значение, СтандартнаяОбработка, Строка, Колонка);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ПерепискаПоЗаявке

Процедура ТабличноеПолеЗаявкиКандидатовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки.Ссылка.ПолучитьФорму(, ЭтаФорма, ЭтотОбъект).Открыть();
	
КонецПроцедуры

Процедура ТабличноеПолеПерепискаПоЗаявкеПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеПерепискаПоЗаявке.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.ПометкаУдаления Тогда
		ЭлементыФормы.КонтекстноеМенюПерепискаПоЗаявке.Кнопки.УдалитьПисьмо.Текст = "Снять пометку удаления";
	Иначе
		ЭлементыФормы.КонтекстноеМенюПерепискаПоЗаявке.Кнопки.УдалитьПисьмо.Текст = "Установить пометку удаления";
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПерепискаПоЗаявкеПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

Процедура ТабличноеПолеПерепискаПоЗаявкеПриПолученииДанных(Элемент, ОформленияСтрок)
	
	НоваяЕстьПисьмаПоЗаявка = ОформленияСтрок.Количество() > 0;
	
	Если ЕстьПисьмаПоЗаявке = НоваяЕстьПисьмаПоЗаявка Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПисьмаПоЗаявке = НоваяЕстьПисьмаПоЗаявка;
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеПерепискаПоЗаявке.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		УстановитьТекстПустогоПисьмаПоЗаявке();
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеПерепискаПоЗаявкеПередНачаломИзменения(Элемент, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("УчетнаяЗапись",	ДанныеСтроки.УчетнаяЗапись);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.АвтоматическаяУстановкаПометкиРассмотрено
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &УчетнаяЗапись";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Ошибка получения реквизитов учетной записи: ';uk='Помилка отримання реквізитів облікового запису: '") + ДанныеСтроки.УчетнаяЗапись);
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.НеРассмотрено И Выборка.АвтоматическаяУстановкаПометкиРассмотрено Тогда
		Объект = ДанныеСтроки.Ссылка.ПолучитьОбъект();
		Если Объект.Ответственный.Пустая() Тогда
			Объект.Ответственный	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнойОтветственный");
		КонецЕсли;
		Если Объект.Ответственный.Пустая() Тогда
			Объект.Ответственный	= глЗначениеПеременной("глТекущийПользователь");
		КонецЕсли;
		Объект.НеРассмотрено		= Ложь;
		Объект.Записать();
	КонецЕсли;
	
	// Перехватываем для того, чтобы установить владельца формы
	ДанныеСтроки.Ссылка.ПолучитьФорму(, ЭтаФорма, ЭтотОбъект).Открыть();
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ТабличноеПолеПерепискаПоЗаявкеПередУстановкойПометкиУдаления(Элемент, Отказ)
	
	Отказ = Истина;
	
	УдалитьПисьмо(Элемент);
	
КонецПроцедуры

Процедура ТабличноеПолеПерепискаПоЗаявкеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.НеРассмотрено И ДанныеСтроки.РассмотретьПосле < ТекущаяДата() Тогда
		ОформлениеСтроки.Шрифт = ШрифтыСтиля.ШрифтВажнойНадписи;
	КонецЕсли;
	
	Если ДанныеСтроки.СтатусПисьма = Перечисления.СтатусыПисем.Сохраненное Тогда
		ОформлениеСтроки.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		
	ИначеЕсли ДанныеСтроки.СтатусПисьма = Перечисления.СтатусыПисем.Исходящее Тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.ТусклоРозовый;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

КоличествоНеРазобранныхПисем	= 0;
ЕстьПисьмаПоЗаявке				= Ложь;

РежимРабочегоСтола = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "РежимРабочегоСтолаДляНабораПерсонала");

ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");

мКоличествоЭлементовВПодменю = 8;
