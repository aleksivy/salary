#Если Клиент Тогда
	
Функция ЗаписатьОрганизацию(ФормаОбработки) Экспорт

	Попытка
		ФормаОбработки.ОрганизацияОбъект.Записать();
		ФормаОбработки.Организация = ФормаОбработки.ОрганизацияОбъект.Ссылка;
	Исключение
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ФормаОбработки.ЭлементыФормы.ПанельЭтапов.ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.ПанельЭтапов.Страницы.ОсновныеДанные;
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		Если ФормаОбработки.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			ФормаОбработки.ЗаписатьФИО();
		КонецЕсли;	
	Исключение
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ФормаОбработки.ЭлементыФормы.ПанельЭтапов.ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.ПанельЭтапов.Страницы.ОсновныеДанные;
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		ФормаОбработки.ЗаписатьКоды(ФормаОбработки.Организация);
	Исключение
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ФормаОбработки.ЭлементыФормы.ПанельЭтапов.ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.ПанельЭтапов.Страницы.КодыИНомера;
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		Если ФормаОбработки.ОсновнойБанковскийСчет.Модифицированность() Тогда
			ФормаОбработки.ОсновнойБанковскийСчет.Владелец = ФормаОбработки.Организация; 
			ФормаОбработки.ОсновнойБанковскийСчет.Записать();
		Конецесли;
		ФормаОбработки.ОрганизацияОбъект.ОсновнойБанковскийСчет = ФормаОбработки.ОсновнойБанковскийСчет.Ссылка;
		ФормаОбработки.ОрганизацияОбъект.Записать();
		ФормаОбработки.Организация = ФормаОбработки.ОрганизацияОбъект.Ссылка;
	Исключение
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ФормаОбработки.ЭлементыФормы.ПанельЭтапов.ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.ПанельЭтапов.Страницы.КодыИНомера;
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		ФормаОбработки.ЗаписатьОтветственных();
	Исключение
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ФормаОбработки.ЭлементыФормы.ПанельЭтапов.ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.ПанельЭтапов.Страницы.КодыИНомера;
		Возврат Ложь;
	КонецПопытки;


	Возврат Истина;

КонецФункции // ЗаписатьОрганизацию()

Функция СоздатьПользователяИБ(ФормаОбработки) Экспорт
	
	ТранзакцияОткрытаВФункции = Ложь;
	Если НЕ ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ТранзакцияОткрытаВФункции = Истина;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		
		ФормаОбработки.ПользовательОбъект.Записать();
	
		ПользовательИБ = УправлениеПользователями.НайтиПользователяИБ(СокрЛП(ФормаОбработки.ПользовательОбъект.Код));
		Если ПользовательИБ = Неопределено Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
			ПользовательИБ.Имя = СокрЛП(ФормаОбработки.ПользовательОбъект.Код);
		Иначе
			ПользовательИБ.Роли.Очистить();
		КонецЕсли;
		
		ПользовательИБ.ПолноеИмя                 = СокрЛП(ФормаОбработки.ПользовательОбъект.Наименование);
		ПользовательИБ.АутентификацияСтандартная = Истина;
		ПользовательИБ.Пароль                    = ФормаОбработки.ПарольПользователяИБ;
		ПользовательИБ.ПоказыватьВСпискеВыбора   = Истина;
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
		ПользовательИБ.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(НСтр("ru='Не удалось создать пользователя:';uk='Не вдалося створити користувача:'") + ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
		Если ТранзакцияАктивна() Тогда
            ОтменитьТранзакцию();
		КонецЕсли;
		Возврат Ложь;
		
	КонецПопытки;
	
	Если ТранзакцияОткрытаВФункции и ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Процедура СоздатьПрочиеДанные(ФормаОбработки) Экспорт

	СоздатьГрафикПятидневки();
	СоздатьГрафикШестидневки();

КонецПроцедуры

Процедура СоздатьГрафикПятидневки()

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГрафикиРаботы.Ссылка
	|ИЗ
	|	Справочник.ГрафикиРаботы КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Пятидневка)";
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		// уже есть график пятидневка, не создаем новый
		Возврат;
	КонецЕсли;
	
	ОсновнойГрафик = Справочники.ГрафикиРаботы.СоздатьЭлемент();
	ОсновнойГрафик.Наименование = НСтр("ru='Пятидневка';uk=""П'ятиденка""",Локализация.КодЯзыкаИнформационнойБазы());
	ОсновнойГрафик.УчитыватьПраздники = Истина;
	ОсновнойГрафик.ЗаполнитьГрафикПоПятидневка40();
	ОсновнойГрафик.Записать();
	
	ДатаМесяца = НачалоГода(РабочаяДата);
	Для Сч = 1 По 12 Цикл
		ОсновнойГрафик.СоответствиеИнтервалыРедактирования.Вставить(ДатаМесяца, Истина);
		ДатаМесяца = ДобавитьМесяц(ДатаМесяца, 1);
	КонецЦикла; 	
	
	// заполнение собственно календаря
	Попытка
		ОсновнойГрафик.АвтозаполнениеКалендаря(НачалоГода(РабочаяДата), КонецГода(РабочаяДата));
	Исключение
	КонецПопытки;
	
	Попытка
		ОсновнойГрафик.Записать();
	Исключение
	КонецПопытки;

КонецПроцедуры

Процедура СоздатьГрафикШестидневки()

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГрафикиРаботы.Ссылка
	|ИЗ
	|	Справочник.ГрафикиРаботы КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Шестидневка)";
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		// уже есть график Шестидневка, не создаем новый
		Возврат;
	КонецЕсли;
	
	ОсновнойГрафик = Справочники.ГрафикиРаботы.СоздатьЭлемент();
	ОсновнойГрафик.Наименование = НСтр("ru='Шестидневка';uk='Шестиденка'",Локализация.КодЯзыкаИнформационнойБазы());
	ОсновнойГрафик.УчитыватьПраздники = Истина;
	ОсновнойГрафик.ЗаполнитьГрафикПоШестидневка40();
	ОсновнойГрафик.Записать();
	
	ДатаМесяца = НачалоГода(РабочаяДата);
	Для Сч = 1 По 12 Цикл
		ОсновнойГрафик.СоответствиеИнтервалыРедактирования.Вставить(ДатаМесяца, Истина);
		ДатаМесяца = ДобавитьМесяц(ДатаМесяца, 1);
	КонецЦикла; 	
	
	// заполнение собственно календаря
	Попытка
		ОсновнойГрафик.АвтозаполнениеКалендаря(НачалоГода(РабочаяДата), КонецГода(РабочаяДата));
	Исключение
	КонецПопытки;
	
	Попытка
		ОсновнойГрафик.Записать();
	Исключение
	КонецПопытки;

КонецПроцедуры
	
	
// Функция оформляет область табличного поля
// Параметры
//		ТабличноеПоле 	- табличное поле
//		НомерСтроки 	- Номер строки табличного поля, для получения области
//		НомерПервойКолонки - Номер колонки для получения области
//      РазмерШрифта 	- Размер шрифта области
//		Заголовок 		- текст, выводимый в области табличного поля
//
//	Возвращаемое значение
//		Область табличного поля
//
Функция СоздатьОбластьТабличногоПоля(ТабличноеПоле, НомерСтроки, НомерПервойКолонки, РазмерШрифта, Заголовок) Экспорт

	Область = ТабличноеПоле.Область(НомерСтроки,НомерПервойКолонки,НомерСтроки,2);
	Область.Шрифт = Новый Шрифт(, РазмерШрифта, Ложь, Ложь, Ложь, Ложь);
	Область.Объединить();
	Область.Текст = Заголовок;
	
	Возврат Область;

КонецФункции // СоздатьОбластьТабличногоПоля()	

// Процедура устанавливает нужную страницу помощника, оформляет области табличного поля
Процедура УстановитьСтраницуПомощника(ФормаОбработки, НомерСтраницы, ДвижениеВперед = Истина) Экспорт

	Если НомерСтраницы > ФормаОбработки.мКоличествоСтраниц Тогда
		ФормаОбработки.мНомерТекущейСтраницы = ФормаОбработки.мКоличествоСтраниц;
		Возврат;
	КонецЕсли;
	
	// установим страницу формы, соответсвующую номер страницы
	ФормаОбработки.ЭлементыФормы.ПанельЭтапов.ТекущаяСтраница = ФормаОбработки.мСтруктураСтраниц["Страница" + НомерСтраницы];
	
	// в табличном поле изменим начертание шрифта текущего шага
	Если ДвижениеВперед и НомерСтраницы > 1 Тогда
		Область = ФормаОбработки.мСтруктураТабличногоПоля["Страница" + (НомерСтраницы - 1)];
		Область.Шрифт = Новый Шрифт(, Область.Шрифт.Размер, Ложь, Ложь, Ложь, Ложь);
	ИначеЕсли Не ДвижениеВперед Тогда
		Область = ФормаОбработки.мСтруктураТабличногоПоля["Страница" + (НомерСтраницы + 1)];
		Область.Шрифт = Новый Шрифт(, Область.Шрифт.Размер, Ложь, Ложь, Ложь, Ложь);
	КонецЕсли;
	Область = ФормаОбработки.мСтруктураТабличногоПоля["Страница" + НомерСтраницы];
	Область.Шрифт = Новый Шрифт(, Область.Шрифт.Размер, Истина, Ложь, Ложь, Ложь);
	
	// если перешли на последнюю страницу или ушли с нее, уточним заголовок кнопки
	Если НомерСтраницы = ФормаОбработки.мКоличествоСтраниц Тогда
		ФормаОбработки.ЭлементыФормы.НадписьВперед.Заголовок = НСтр("ru='Готово';uk='Готово'");
	ИначеЕсли НомерСтраницы = ФормаОбработки.мКоличествоСтраниц - 1 и Не ДвижениеВперед Тогда
		ФормаОбработки.ЭлементыФормы.НадписьВперед.Заголовок = НСтр("ru='Далее';uk='Далі'");
	КонецЕсли;	
	
КонецПроцедуры
	
Процедура ОбработатьПереходНаНовуюСтраницу(ФормаОбработки) Экспорт

	ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.ПанельЭтапов.ТекущаяСтраница;
	Если ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.ПанельЭтапов.Страницы.СозданиеПользователя Тогда
		
		ФормаОбработки.ЭлементыФормы.ПанельНастройкиПользователя.Видимость = ФормаОбработки.СоздаватьПользователя;
		
	ИначеЕсли ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.ПанельЭтапов.Страницы.НоваяОрганизация
		или ПервыйЗапуск и ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.ПанельЭтапов.Страницы.ОсновныеДанные Тогда 
		
		Если Не ЗначениеЗаполнено(ФормаОбработки.Организация) Тогда
			
			ФормаОбработки.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяОрганизация");
			
			Если Не ЗначениеЗаполнено(ФормаОбработки.Организация) Тогда
		
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Организации.Ссылка КАК Ссылка,
				|	Организации.Код КАК Код
				|ИЗ
				|	Справочник.Организации КАК Организации
				|
				|УПОРЯДОЧИТЬ ПО
				|	Код";
				
				Выборка = Запрос.Выполнить().Выбрать();
				ФормаОбработки.ВводНовойОрганизации = Не Выборка.Следующий();
				Если Не ФормаОбработки.ВводНовойОрганизации Тогда
					ФормаОбработки.мСтруктураПараметрыДоОткрытияФормы.Организация = Выборка.Ссылка;
				КонецЕсли;
			Иначе
				ФормаОбработки.ВводНовойОрганизации = Ложь;
				ФормаОбработки.мСтруктураПараметрыДоОткрытияФормы.Организация = ФормаОбработки.Организация;
			КонецЕсли;
			
			ОбработатьИзменениеОрганизации(ФормаОбработки);
			
		КонецЕсли;	
		
	ИначеЕсли ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.ПанельЭтапов.Страницы.ПроизводственныйКалендарь Тогда
	
		ПроверитьКалендарьИЗаполнитьЗаголовки(ФормаОбработки);
		
	КонецЕсли;	

КонецПроцедуры

Процедура ПроверитьКалендарьИЗаполнитьЗаголовки(ФормаОбработки) Экспорт

	КалендарьЗаполнен = ФормированиеПечатныхФорм.ЗаполненРегламентированныйПроизводственныйКалендарь(НачалоГода(РабочаяДата), КонецГода(РабочаяДата));
	ГодКалендаря = Формат(Год(РабочаяДата), "ЧГ=");
	НадписьОписаниеПроизводственныйКалендарь = НСтр("ru='Производственный календарь на ';uk='Виробничий календар на '") + ГодКалендаря + НСтр("ru=' год';uk=' рік'") + 
	?(КалендарьЗаполнен, НСтр("ru=' заполнен';uk=' заповнений'"), НСтр("ru=' не заполнен';uk=' не заповнено'"));
	
	ТекстСообщения = "";
	Если Не КалендарьЗаполнен Тогда
		ТекстСообщения = Символы.ПС + НСтр("ru='Для продолжения работы рекомендуется заполнить производственный календарь!';uk='Для продовження роботи рекомендується заповнити виробничий календар!'");	
		ФормаОбработки.ЭлементыФормы.НадписьОписаниеПроизводственныйКалендарь.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
	Иначе
		ФормаОбработки.ЭлементыФормы.НадписьОписаниеПроизводственныйКалендарь.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
	КонецЕсли;                                                                                                
	
	НадписьОписаниеПроизводственныйКалендарь = НадписьОписаниеПроизводственныйКалендарь + ТекстСообщения;
	ФормаОбработки.ЭлементыФормы.НадписьОписаниеПроизводственныйКалендарь.Заголовок = НадписьОписаниеПроизводственныйКалендарь;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеПолейДляСозданияПользователя(ФормаОбработки) 

	СтрокаСообщенияОбОшибке = "";
	
	Если ФормаОбработки.СоздаватьПользователя Тогда
		Если Не ЗначениеЗаполнено(ФормаОбработки.ПользовательОбъект.Код) Тогда
			СтрокаСообщенияОбОшибке = НСтр("ru='Не заполнено имя пользователя!';uk=""Не заповнено ім'я користувача!""");
		Иначе
			Запрос = Новый Запрос("
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	1
			|ИЗ
			|	Справочник.Пользователи
			|ГДЕ
			|	Код = &Код
			|");

			Запрос.УстановитьПараметр("Код", СокрЛП(ФормаОбработки.ПользовательОбъект.Код));

			Если Не Запрос.Выполнить().Пустой() Тогда
				СтрокаСообщенияОбОшибке = НСтр("ru='Пользователь с таким именем уже существует!';uk='Користувач з таким іменем вже існує!'");
			КонецЕсли;
		КонецЕсли;

		Если ФормаОбработки.ПарольПользователяИБ <> ФормаОбработки.ПодтверждениеПароляИБ Тогда
			СтрокаСообщенияОбОшибке = СтрокаСообщенияОбОшибке + Символы.ПС + НСтр("ru='Пароль и подтверждение пароля не совпадают!';uk='Пароль і підтвердження пароля не збігаються!'");
		КонецЕсли;

		МинимальнаяДлинаПароля = ПолучитьМинимальнуюДлинуПаролейПользователей();
		Если СтрДлина(ФормаОбработки.ПарольПользователяИБ) < МинимальнаяДлинаПароля Тогда
			СтрокаСообщенияОбОшибке = СтрокаСообщенияОбОшибке + Символы.ПС + НСтр("ru='Пароль короче установленной минимальной длины! Минимальная длина пароля ';uk='Пароль коротше встановленої мінімальної довжини! Мінімальна довжина пароля '") + МинимальнаяДлинаПароля + НСтр("ru=' символов.';uk=' символів.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаСообщенияОбОшибке;

КонецФункции

Функция ПроверитьЗаполнениеДанныхНаСтранице(ФормаОбработки) Экспорт

	СтрокаСообщенияОбОшибке = "";
	ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.ПанельЭтапов.ТекущаяСтраница;
	
	Если ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.ПанельЭтапов.Страницы.НоваяОрганизация Тогда
		
		Если Не ФормаОбработки.ВводНовойОрганизации и Не ЗначениеЗаполнено(ФормаОбработки.Организация) Тогда
			СтрокаСообщенияОбОшибке = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса(НСтр("ru='Не выбрана организация!';uk='Не обрана організація!'"));
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.ПанельЭтапов.Страницы.ОсновныеДанные Тогда
		
		Если ПустаяСтрока(ФормаОбработки.ОрганизацияОбъект.Наименование) Тогда
			СтрокаСообщенияОбОшибке = НСтр("ru='Необходимо задать краткое наименование!';uk='Необхідно задати коротке найменування!'");
		КонецЕсли;	
			
	ИначеЕсли ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.ПанельЭтапов.Страницы.КодыИНомера Тогда
		
		
	ИначеЕсли ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.ПанельЭтапов.Страницы.СозданиеПользователя Тогда	
		
		СтрокаСообщенияОбОшибке = ПроверитьЗаполнениеПолейДляСозданияПользователя(ФормаОбработки);
		
	КонецЕсли;	
	
	Возврат СтрокаСообщенияОбОшибке;

КонецФункции // ПроверитьЗаполнениеДанныхНаСтранице()

Процедура ФормаОбработкиЕдинственныйПользовательПриИзменении(Элемент, ФормаОбработки) Экспорт
	
	Если ФормаОбработки.СоздаватьПользователя Тогда
		МинимальнаяДлинаПароля = ПолучитьМинимальнуюДлинуПаролейПользователей();
		Если МинимальнаяДлинаПароля = 0 Тогда
			ФормаОбработки.ЭлементыФормы.НадписьПарольПользователяИБ.Заголовок = НСтр("ru='Пароль:';uk='Пароль:'");
		Иначе
			ФормаОбработки.ЭлементыФормы.НадписьПарольПользователяИБ.Заголовок = НСтр("ru='Пароль (не менее ';uk='Пароль (не менше '") + МинимальнаяДлинаПароля + НСтр("ru=' символов):';uk=' символів):'");
		КонецЕсли;
		ФормаОбработки.ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
	КонецЕсли;
	
	ФормаОбработки.ЭлементыФормы.ПанельНастройкиПользователя.Видимость = ФормаОбработки.СоздаватьПользователя;

КонецПроцедуры

Процедура ФормаОбработкиИмяПользователяПриИзменении(Элемент, ФормаОбработки) Экспорт

	Если Не ЗначениеЗаполнено(ФормаОбработки.ПользовательОбъект.Наименование) Тогда
		ФормаОбработки.ПользовательОбъект.Наименование = СокрЛП(ФормаОбработки.ПользовательОбъект.Код);
	КонецЕсли;

КонецПроцедуры

Процедура ФормаОбработкиНеВыполнятьЗагрузкуПриИзменении(Элемент, ФормаОбработки) Экспорт

	ФормаОбработки.ЭлементыФормы.НадписьВыполнитьЗагрузкуИз77.Видимость = ФормаОбработки.ВыполнитьЗагрузкуИз77;	

КонецПроцедуры

Процедура ФормаОбработкиНадписьПроизводственныйКалендарьОткрытьНажатие(Элемент, ФормаОбработки) Экспорт

	ФормаКалендаря = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.ПолучитьФормуСписка( , ФормаОбработки,);
	ФормаКалендаря.Открыть();

КонецПроцедуры

Процедура ФормаОбработкиНаименованиеОрганизацииПриИзменении(Элемент, ФормаОбработки) Экспорт

	Если ПустаяСтрока(ФормаОбработки.ОрганизацияОбъект.НаименованиеПолное) Тогда
		ФормаОбработки.ОрганизацияОбъект.НаименованиеПолное = ФормаОбработки.ОрганизацияОбъект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзменениеОрганизации(ФормаОбработки) Экспорт

	ФормаОбработки.ЭлементыФормы.Организация.ТолькоПросмотр = ФормаОбработки.ВводНовойОрганизации;
	ФормаОбработки.ЭлементыФормы.Организация.АвтоОтметкаНезаполненного = Не ФормаОбработки.ВводНовойОрганизации;
	Если ФормаОбработки.ВводНовойОрганизации Тогда
		
		ФормаОбработки.мСтруктураПараметрыДоОткрытияФормы.Организация = ФормаОбработки.Организация;
		ФормаОбработки.Организация = Справочники.Организации.ПустаяСсылка();
		ФормаОбработки.ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
		ФормаОбработки.ЭлементыФормы.Организация.ОтметкаНезаполненного = Ложь;
		
	Иначе
		
		ФормаОбработки.ЭлементыФормы.Организация.ОтметкаНезаполненного = Не ЗначениеЗаполнено(ФормаОбработки.Организация);
		Если ЗначениеЗаполнено(ФормаОбработки.Организация) Тогда
			ФормаОбработки.ОрганизацияОбъект = ФормаОбработки.Организация.ПолучитьОбъект();
		Иначе
			ФормаОбработки.Организация = ФормаОбработки.мСтруктураПараметрыДоОткрытияФормы.Организация;
			Если ЗначениеЗаполнено(ФормаОбработки.Организация) Тогда
				ФормаОбработки.ОрганизацияОбъект = ФормаОбработки.Организация.ПолучитьОбъект();
			Иначе
				ФормаОбработки.ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
			КонецЕсли;	
		КонецЕсли;	
			
	КонецЕсли;	

КонецПроцедуры

	
Процедура ФормаОбработкиПриОткрытии(ФормаОбработки) Экспорт

	// на панеле ПанельПервыйЗапуск отображается информация о первоначальном заполнении ИБ
	ФормаОбработки.ЭлементыФормы.ПанельПервыйЗапуск.Видимость = ПервыйЗапуск;
	ФормаОбработки.ЭлементыФормы.НадписьВыполнитьЗагрузкуИз77.Видимость = Ложь;
	
	ФормаОбработки.Организация = Справочники.Организации.ПустаяСсылка();
	ФормаОбработки.ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
//*	ФормаОбработки.ОрганизацияОбъект.РайонныйКоэффициент = 1;
//*	ФормаОбработки.ОрганизацияОбъект.РайонныйКоэффициентРФ = 1;

КонецПроцедуры
	

#КонецЕсли

