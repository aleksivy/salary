
Процедура ЗаполнитьУчетнуюПолитику()
	// записываем текущее значение учетной политики по учету персоналу
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоПерсоналуОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Записывать = Ложь;
	Для каждого СтрокаНабора Из НаборЗаписей Цикл
		СтрокаНабора.ПоказыватьТабельныеНомераВДокументах = НЕ СтрокаНабора.УдалитьНеВестиУчетПоТабельнымНомерам;
	КонецЦикла; 
	
	НаборЗаписей.Записать();
    глЗначениеПеременнойУстановить("глУчетнаяПолитикаПоПерсоналуОрганизации", ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации(), Истина);
		
КонецПроцедуры // ЗаполнитьРесурсУчетЗадолженностиУчетнойПолитики

Процедура ПеренестиДанныеЗавершенияВРегистреРаботникиОрганизаций()
	
	// перенос данных из УдалитьПричинаИзмененияСостояния 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиОрганизаций.Регистратор КАК Приказ
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПустаяСсылка)";

	ЗапросПоРегистру = Новый Запрос;
	ЗапросПоРегистру.Текст = 
	"ВЫБРАТЬ 	
	|	РаботникиОрганизаций.НомерСтроки,
	|	РаботникиОрганизаций.Период,
	|	РаботникиОрганизаций.Регистратор,
	|	РаботникиОрганизаций.Активность,
	|	РаботникиОрганизаций.Сотрудник,
	|	РаботникиОрганизаций.Организация,
	|	РаботникиОрганизаций.УдалитьФизлицо,
	|	РаботникиОрганизаций.УдалитьПриказ,
	|	РаботникиОрганизаций.ЗанимаемыхСтавок,
	|	РаботникиОрганизаций.ПодразделениеОрганизации,
	|	РаботникиОрганизаций.Должность,
	|	РаботникиОрганизаций.ГрафикРаботы,
	|	РаботникиОрганизаций.УдалитьТабельныйНомер,
	|	РаботникиОрганизаций.Организация КАК ОбособленноеПодразделение,
	|	РаботникиОрганизаций.УдалитьПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.Регистратор = &Приказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	НаборЗаписей = РегистрыСведений.РаботникиОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние(НСтр("ru='Сотрудники организаций. Обрабатывается набор записей ';uk='Співробітники організацій. Обробляється набір записів '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Приказ);
		
		ЗапросПоРегистру.УстановитьПараметр("Приказ", Выборка.Приказ);
		ВыборкаПоРегистру = ЗапросПоРегистру.Выполнить().Выбрать();
		
		Пока ВыборкаПоРегистру.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоРегистру);
		КонецЦикла;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиДанныеПроизошедшееСобытиеВДокументах()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ПриказКадровоеПеремещениеОрганизаций.Ссылка,
	|	ПриказКадровоеПеремещениеОрганизаций.НомерСтроки
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ПриказКадровоеПеремещениеОрганизаций
	|ГДЕ
	|	ПриказКадровоеПеремещениеОрганизаций.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И (НЕ ПриказКадровоеПеремещениеОрганизаций.УдалитьПроизошедшееСобытие)
	|	И (НЕ ПриказКадровоеПеремещениеОрганизаций.НапомнитьПоЗавершении)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПриказКомандировкиОрганизаций.Ссылка,
	|	ПриказКомандировкиОрганизаций.НомерСтроки
	|ИЗ
	|	Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК ПриказКомандировкиОрганизаций
	|ГДЕ
	|	ПриказКомандировкиОрганизаций.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И (НЕ ПриказКомандировкиОрганизаций.УдалитьПроизошедшееСобытие)
	|	И (НЕ ПриказКомандировкиОрганизаций.НапомнитьПоЗавершении)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПриказОтпускаОрганизаций.Ссылка,
	|	ПриказОтпускаОрганизаций.НомерСтроки
	|ИЗ
	|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ПриказОтпускаОрганизаций
	|ГДЕ
	|	ПриказОтпускаОрганизаций.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И (НЕ ПриказОтпускаОрганизаций.УдалитьПроизошедшееСобытие)
	|	И (НЕ ПриказОтпускаОрганизаций.НапомнитьПоЗавершении)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПриказПриемНаРаботуВОрганизацию.Ссылка,
	|	ПриказПриемНаРаботуВОрганизацию.НомерСтроки
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриказПриемНаРаботуВОрганизацию
	|ГДЕ
	|	ПриказПриемНаРаботуВОрганизацию.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И (НЕ ПриказПриемНаРаботуВОрганизацию.УдалитьПроизошедшееСобытие)
	|	И (НЕ ПриказПриемНаРаботуВОрганизацию.НапомнитьПоЗавершении)";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВсегоДоков = Выборка.Количество();
	Номер = 1;
	#Если Клиент Тогда
		Состояние(НСтр("ru='Обработка кадровых документов организаций : обработано 0 из ';uk='Обробка кадрових документів організацій : опрацьовано 0 з '") + ВсегоДоков);
	#КонецЕсли
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект.РаботникиОрганизации.Найти(Выборка.НомерСтроки,"НомерСтроки").НапомнитьПоЗавершении = Истина;
			Если Номер % 100 = 0 Тогда
				#Если Клиент Тогда
					Состояние(НСтр("ru='Обработка кадровых документов организаций : обработано ';uk='Обробка кадрових документів організацій : опрацьовано '") + Номер + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
				#КонецЕсли
			КонецЕсли;
			Номер = Номер + 1;
		КонецЦикла;
		ДокументОбъект.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(НСтр("ru='Обработка кадровых документов организаций : обработано ';uk='Обробка кадрових документів організацій : опрацьовано '") + ВсегоДоков + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
	#КонецЕсли
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ПриказОтсутствиеНаРаботе.Ссылка,
	|	ПриказОтсутствиеНаРаботе.НомерСтроки
	|ИЗ
	|	Документ.ОтсутствиеНаРаботе.Работники КАК ПриказОтсутствиеНаРаботе
	|ГДЕ
	|	ПриказОтсутствиеНаРаботе.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И (НЕ ПриказОтсутствиеНаРаботе.УдалитьПроизошедшееСобытие)
	|	И (НЕ ПриказОтсутствиеНаРаботе.НапомнитьПоЗавершении)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриемНаРаботуРаботники.Ссылка,
	|	ПриемНаРаботуРаботники.НомерСтроки
	|ИЗ
	|	Документ.ПриемНаРаботу.Работники КАК ПриемНаРаботуРаботники
	|ГДЕ
	|	ПриемНаРаботуРаботники.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И (НЕ ПриемНаРаботуРаботники.УдалитьПроизошедшееСобытие)
	|	И (НЕ ПриемНаРаботуРаботники.НапомнитьПоЗавершении)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КадровоеПеремещениеРаботники.Ссылка,
	|	КадровоеПеремещениеРаботники.НомерСтроки
	|ИЗ
	|	Документ.КадровоеПеремещение.Работники КАК КадровоеПеремещениеРаботники
	|ГДЕ
	|	КадровоеПеремещениеРаботники.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И (НЕ КадровоеПеремещениеРаботники.УдалитьПроизошедшееСобытие)
	|	И (НЕ КадровоеПеремещениеРаботники.НапомнитьПоЗавершении)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВсегоДоков = Выборка.Количество();
	Номер = 1;
	#Если Клиент Тогда
		Состояние(НСтр("ru='Обработка кадровых документов компании: обработано 0 из ';uk='Обробка кадрових документів компанії: опрацьовано 0 з '") + ВсегоДоков);
	#КонецЕсли
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект.Работники.Найти(Выборка.НомерСтроки,"НомерСтроки").НапомнитьПоЗавершении = Истина;
			Если Номер % 100 = 0 Тогда
				#Если Клиент Тогда
					Состояние(НСтр("ru='Обработка кадровых документов компании ';uk='Обробка кадрових документів компанії '") + Номер + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
				#КонецЕсли
			КонецЕсли;
			Номер = Номер + 1;
		КонецЦикла;
		ДокументОбъект.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(НСтр("ru='Обработка кадровых документов компании: обработано ';uk='Обробка кадрових документів компанії: опрацьовано '") + ВсегоДоков + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
	#КонецЕсли
	
КонецПроцедуры

Процедура ИсправитьПериодЗавершения()
	
	Запрос = Новый Запрос;
	ДлинаСуток = 86400;
	
	СписокРегистраторовТекст = 
	"ВЫБРАТЬ
	|	СписокРегистраторов.Регистратор КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(СостояниеРаботников.ПериодЗавершения) КАК ПериодЗавершения,
	|		СостояниеРаботников.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	|	ГДЕ
	|		СостояниеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|		И СостояниеРаботников.Регистратор ССЫЛКА Документ.ОтсутствиеНаРаботе
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СостояниеРаботников.Регистратор) КАК СписокРегистраторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ОтсутствиеНаРаботеРаботники.ДатаОкончания) КАК ДатаОкончания,
	|			ОтсутствиеНаРаботеРаботники.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ОтсутствиеНаРаботе.Работники КАК ОтсутствиеНаРаботеРаботники
	|		ГДЕ
	|			ОтсутствиеНаРаботеРаботники.УдалитьПроизошедшееСобытие
	|			И ОтсутствиеНаРаботеРаботники.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОтсутствиеНаРаботеРаботники.Ссылка) КАК ДокументыКОбработке
	|		ПО СписокРегистраторов.Регистратор = ДокументыКОбработке.Ссылка
	|			И СписокРегистраторов.ПериодЗавершения = ДокументыКОбработке.ДатаОкончания";
	
	ТекстСообщения = НСтр("ru='Обработка документов ""Отсутствие на работе""';uk='Обробка документів ""Відсутність на роботі""'");
	#Если Клиент Тогда
		Состояние(ТекстСообщения + НСтр("ru=': подготовка данных ...';uk=': підготовка даних ...'"));
	#КонецЕсли
	
	Запрос.Текст = СписокРегистраторовТекст;
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать(); 
	ВсегоДоков = ВыборкаРегистраторов.Количество();
	Номер = 1;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + НСтр("ru=': обработано 0 из ';uk=': опрацьовано 0 з '") + ВсегоДоков);
	#КонецЕсли
	НаборЗаписей = РегистрыСведений.СостояниеРаботников.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборЗаписей.Прочитать();
		Для каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(ЗаписьНабора.ПериодЗавершения) Тогда
				ЗаписьНабора.ПериодЗавершения = ЗаписьНабора.ПериодЗавершения + ДлинаСуток
			КонецЕсли;
		КонецЦикла;
		Если Номер % 10 = 0 Тогда
			#Если Клиент Тогда
				Состояние(ТекстСообщения + НСтр("ru=': обработано ';uk=': опрацьовано '") + Номер + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
			#КонецЕсли
		КонецЕсли;
		Номер = Номер + 1;
		НаборЗаписей.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + НСтр("ru=': обработано ';uk=': опрацьовано '") + ВсегоДоков + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
	#КонецЕсли
	
	СписокРегистраторовТекст = 
	"ВЫБРАТЬ
	|	СписокРегистраторов.Регистратор КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(СостояниеРаботниковОрганизаций.ПериодЗавершения) КАК ПериодЗавершения,
	|		СостояниеРаботниковОрганизаций.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|	ГДЕ
	|		СостояниеРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СостояниеРаботниковОрганизаций.Регистратор) КАК СписокРегистраторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ОтпускаОрганизацийРаботникиОрганизации.ДатаОкончания) КАК ДатаОкончания,
	|			ОтпускаОрганизацийРаботникиОрганизации.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
	|		ГДЕ
	|			ОтпускаОрганизацийРаботникиОрганизации.УдалитьПроизошедшееСобытие
	|			И ОтпускаОрганизацийРаботникиОрганизации.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОтпускаОрганизацийРаботникиОрганизации.Ссылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			МАКСИМУМ(КомандировкиОрганизацийРаботникиОрганизации.ДатаОкончания),
	|			КомандировкиОрганизацийРаботникиОрганизации.Ссылка
	|		ИЗ
	|			Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК КомандировкиОрганизацийРаботникиОрганизации
	|		ГДЕ
	|			КомандировкиОрганизацийРаботникиОрганизации.УдалитьПроизошедшееСобытие
	|			И КомандировкиОрганизацийРаботникиОрганизации.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			КомандировкиОрганизацийРаботникиОрганизации.Ссылка
	|	) КАК ДокументыКОбработке
	|		ПО СписокРегистраторов.Регистратор = ДокументыКОбработке.Ссылка
	|			И СписокРегистраторов.ПериодЗавершения = ДокументыКОбработке.ДатаОкончания";
	
	ТекстСообщения = НСтр("ru='Обработка кадровых документов регистрации отклонений';uk='Обробка кадрових документів реєстрації відхилень'");
	#Если Клиент Тогда
		Состояние(ТекстСообщения + НСтр("ru=': подготовка данных ...';uk=': підготовка даних ...'"));
	#КонецЕсли
	Запрос.Текст = СписокРегистраторовТекст;
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	ВсегоДоков = ВыборкаРегистраторов.Количество();
	Номер = 1;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + НСтр("ru=': обработано 0 из ';uk=': опрацьовано 0 з '") + ВсегоДоков);
	#КонецЕсли
	НаборЗаписей = РегистрыСведений.СостояниеРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборЗаписей.Прочитать();
		Для каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(ЗаписьНабора.ПериодЗавершения) Тогда
				ЗаписьНабора.ПериодЗавершения = ЗаписьНабора.ПериодЗавершения + ДлинаСуток
			КонецЕсли;
		КонецЦикла;
		Если Номер % 10 = 0 Тогда
			#Если Клиент Тогда
				Состояние(ТекстСообщения + НСтр("ru=': обработано ';uk=': опрацьовано '") + Номер + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
			#КонецЕсли
		КонецЕсли;
		Номер = Номер + 1;
		НаборЗаписей.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + НСтр("ru=': обработано ';uk=': опрацьовано '") + ВсегоДоков + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
	#КонецЕсли
	
	СписокРегистраторовТекст = 
	"ВЫБРАТЬ
	|	СписокРегистраторов.Регистратор КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ПлановыеНачисленияРаботников.ПериодЗавершения) КАК ПериодЗавершения,
	|		ПлановыеНачисленияРаботников.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрСведений.ПлановыеНачисленияРаботников КАК ПлановыеНачисленияРаботников
	|	ГДЕ
	|		ПлановыеНачисленияРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПлановыеНачисленияРаботников.Регистратор) КАК СписокРегистраторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ВводСведенийОПлановыхНачисленияхУдержаниях.ДатаДействияКонец) КАК ДатаОкончания,
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ВводСведенийОПлановыхНачисленияхУдержанияхРаботников.Начисления КАК ВводСведенийОПлановыхНачисленияхУдержаниях
	|		ГДЕ
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.ДатаДействияКонец <> ДАТАВРЕМЯ(1, 1, 1)
	|			И ВводСведенийОПлановыхНачисленияхУдержаниях.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			МАКСИМУМ(ПриемНаРаботуРаботники.ДатаУвольнения),
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		ИЗ
	|			Документ.ПриемНаРаботу.Начисления КАК ВводСведенийОПлановыхНачисленияхУдержаниях
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Работники КАК ПриемНаРаботуРаботники
	|				ПО ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка = ПриемНаРаботуРаботники.Ссылка
	|					И ВводСведенийОПлановыхНачисленияхУдержаниях.Сотрудник = ПриемНаРаботуРаботники.Сотрудник
	|		ГДЕ
	|			ПриемНаРаботуРаботники.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			МАКСИМУМ(КадровоеПеремещениеРаботники.ДатаОкончания),
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		ИЗ
	|			Документ.КадровоеПеремещение.Начисления КАК ВводСведенийОПлановыхНачисленияхУдержаниях
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещение.Работники КАК КадровоеПеремещениеРаботники
	|				ПО ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка = КадровоеПеремещениеРаботники.Ссылка
	|					И ВводСведенийОПлановыхНачисленияхУдержаниях.Сотрудник = КадровоеПеремещениеРаботники.Сотрудник
	|		ГДЕ
	|			КадровоеПеремещениеРаботники.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|			И ВводСведенийОПлановыхНачисленияхУдержаниях.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка) КАК ДокументыКОбработке
	|		ПО СписокРегистраторов.Регистратор = ДокументыКОбработке.Ссылка
	|			И СписокРегистраторов.ПериодЗавершения = ДокументыКОбработке.ДатаОкончания";
	
	ТекстСообщения = НСтр("ru='Обработка документов регистрации плановых начислений - часть 1';uk='Обробка документів реєстрації планових нарахувань - частина 1'");
	#Если Клиент Тогда
		Состояние(ТекстСообщения + НСтр("ru=': подготовка данных ...';uk=': підготовка даних ...'"));
	#КонецЕсли
	Запрос.Текст = СписокРегистраторовТекст;
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	ВсегоДоков = ВыборкаРегистраторов.Количество();
	Номер = 1;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + НСтр("ru=': обработано 0 из ';uk=': опрацьовано 0 з '") + ВсегоДоков);
	#КонецЕсли
	НаборЗаписей = РегистрыСведений.ПлановыеНачисленияРаботников.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборЗаписей.Прочитать();
		Для каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(ЗаписьНабора.ПериодЗавершения) Тогда
				ЗаписьНабора.ПериодЗавершения = ЗаписьНабора.ПериодЗавершения + ДлинаСуток
			КонецЕсли;
		КонецЦикла;
		Если Номер % 10 = 0 Тогда
			#Если Клиент Тогда
				Состояние(ТекстСообщения + НСтр("ru=': обработано ';uk=': опрацьовано '") + Номер + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
			#КонецЕсли
		КонецЕсли;
		Номер = Номер + 1;
		НаборЗаписей.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + НСтр("ru=': обработано ';uk=': опрацьовано '") + ВсегоДоков + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
	#КонецЕсли
	
	СписокРегистраторовТекст = 
	"ВЫБРАТЬ
	|	СписокРегистраторов.Регистратор КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ПлановыеДанныеРаботников.ПериодЗавершения) КАК ПериодЗавершения,
	|		ПлановыеДанныеРаботников.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрСведений.ПлановыеУдержанияРаботников КАК ПлановыеДанныеРаботников
	|	ГДЕ
	|		ПлановыеДанныеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПлановыеДанныеРаботников.Регистратор) КАК СписокРегистраторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ВводСведенийОПлановыхНачисленияхУдержаниях.ДатаДействияКонец) КАК ДатаОкончания,
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ВводСведенийОПлановыхНачисленияхУдержанияхРаботников.Удержания КАК ВводСведенийОПлановыхНачисленияхУдержаниях
	|		ГДЕ
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.ДатаДействияКонец <> ДАТАВРЕМЯ(1, 1, 1)
	|			И ВводСведенийОПлановыхНачисленияхУдержаниях.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			МАКСИМУМ(ПриемНаРаботуРаботники.ДатаУвольнения),
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		ИЗ
	|			Документ.ПриемНаРаботу.Взыскания КАК ВводСведенийОПлановыхНачисленияхУдержаниях
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Работники КАК ПриемНаРаботуРаботники
	|				ПО ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка = ПриемНаРаботуРаботники.Ссылка
	|					И ВводСведенийОПлановыхНачисленияхУдержаниях.Физлицо = ПриемНаРаботуРаботники.Сотрудник.Физлицо
	|		ГДЕ
	|			ПриемНаРаботуРаботники.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			МАКСИМУМ(КадровоеПеремещениеРаботники.ДатаОкончания),
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка
	|		ИЗ
	|			Документ.КадровоеПеремещение.Взыскания КАК ВводСведенийОПлановыхНачисленияхУдержаниях
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещение.Работники КАК КадровоеПеремещениеРаботники
	|				ПО ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка = КадровоеПеремещениеРаботники.Ссылка
	|					И ВводСведенийОПлановыхНачисленияхУдержаниях.Физлицо = КадровоеПеремещениеРаботники.Сотрудник.Физлицо
	|		ГДЕ
	|			КадровоеПеремещениеРаботники.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|			И ВводСведенийОПлановыхНачисленияхУдержаниях.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводСведенийОПлановыхНачисленияхУдержаниях.Ссылка) КАК ДокументыКОбработке
	|		ПО СписокРегистраторов.Регистратор = ДокументыКОбработке.Ссылка
	|			И СписокРегистраторов.ПериодЗавершения = ДокументыКОбработке.ДатаОкончания";
	
	ТекстСообщения = НСтр("ru='Обработка документов регистрации плановых удержаний - часть 1';uk='Обробка документів реєстрації планових утримань - частина 1'");
	#Если Клиент Тогда
		Состояние(ТекстСообщения + НСтр("ru=': подготовка данных ...';uk=': підготовка даних ...'"));
	#КонецЕсли
	Запрос.Текст = СписокРегистраторовТекст;
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	ВсегоДоков = ВыборкаРегистраторов.Количество();
	Номер = 1;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + НСтр("ru=': обработано 0 из ';uk=': опрацьовано 0 з '") + ВсегоДоков);
	#КонецЕсли
	НаборЗаписей = РегистрыСведений.ПлановыеУдержанияРаботников.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборЗаписей.Прочитать();
		Для каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(ЗаписьНабора.ПериодЗавершения) Тогда
				ЗаписьНабора.ПериодЗавершения = ЗаписьНабора.ПериодЗавершения + ДлинаСуток
			КонецЕсли;
		КонецЦикла;
		Если Номер % 10 = 0 Тогда
			#Если Клиент Тогда
				Состояние(ТекстСообщения + НСтр("ru=': обработано ';uk=': опрацьовано '") + Номер + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
			#КонецЕсли
		КонецЕсли;
		Номер = Номер + 1;
		НаборЗаписей.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + НСтр("ru=': обработано ';uk=': опрацьовано '") + ВсегоДоков + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
	#КонецЕсли
	
КонецПроцедуры

Процедура ДобавитьИСохранитьНастройкиОтчета()
	
#Если Клиент Тогда
		
	Пользователи = Новый Массив;
	Пользователи.Добавить(ПараметрыСеанса.ТекущийПользователь);
	Пользователи.Добавить(Справочники.ГруппыПользователей.ВсеПользователи);
	// Отчет СтатистикаКадровОрганизации 
	ОбъектОтчета = Отчеты.СтатистикаКадровОрганизации.Создать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СохраненныеНастройки.Ссылка КАК СохраненнаяНастройка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.Владелец В(&Пользователи)
	|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
	|   И (НЕ СохраненныеНастройки.ПометкаУдаления) ";
	
	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", "ОтчетОбъект." + ОбъектОтчета.Метаданные().Имя);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультата.Количество() = 0 Тогда
 		Состояние(НСтр("ru='Формирование настроек отчета ""Статистика кадров организации"" ';uk='Формування настройок звіту ""Статистика кадрів організації"" '"));
		
		СхемаКомпоновкиДанных = ОбъектОтчета.ПолучитьМакет("РаботающиеЖенщины");

		КомпоновщикНастроекНовый = ОбъектОтчета.КомпоновщикНастроек;
		КомпоновщикНастроекНовый.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
		НаименованиеОтчета = "Работающие женщины имеющие детей в возрасте до 14 лет";
    	ЗаписатьНастройкиДляОтчета(КомпоновщикНастроекНовый,ОбъектОтчета,НаименованиеОтчета);
	
		СхемаКомпоновкиДанных = ОбъектОтчета.ПолучитьМакет("СотрудникиСтарше50Лет");

		КомпоновщикНастроекНовый = ОбъектОтчета.КомпоновщикНастроек;
		КомпоновщикНастроекНовый.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
		НаименованиеОтчета = "Сотрудники (старше 50 лет) по интервалам (возраст сотрудников)";
    	ЗаписатьНастройкиДляОтчета(КомпоновщикНастроекНовый,ОбъектОтчета,НаименованиеОтчета);
	
		СхемаКомпоновкиДанных = ОбъектОтчета.ПолучитьМакет("ДвижениеКадров");

		КомпоновщикНастроекНовый = ОбъектОтчета.КомпоновщикНастроек;
		КомпоновщикНастроекНовый.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
		НаименованиеОтчета = "Движение кадров в разрезе организаций и должностей)";
    	ЗаписатьНастройкиДляОтчета(КомпоновщикНастроекНовый,ОбъектОтчета,НаименованиеОтчета);
	КонецЕсли;
	// Отчет ДвиженияРаботников 
	ОбъектОтчета = Отчеты.ДвижениеРаботников.Создать();
 	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", "ОтчетОбъект." + ОбъектОтчета.Метаданные().Имя);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРезультата.Количество() = 0 Тогда
 		Состояние(НСтр("ru='Формирование настроек отчета ""Движения работников (расширенные настройки)"" ';uk='Формування настройок звіту ""Рухи працівників (розширені настройки)"" '"));
		СхемаКомпоновкиДанных = ОбъектОтчета.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");

		КомпоновщикНастроекНовый = ОбъектОтчета.КомпоновщикНастроек;
		КомпоновщикНастроекНовый.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
		НаименованиеОтчета = "Движения работников (расширенные настройки)";
    	ЗаписатьНастройкиДляОтчета(КомпоновщикНастроекНовый,ОбъектОтчета,НаименованиеОтчета);
		
	КонецЕсли;
		
#КонецЕсли
	
КонецПроцедуры

#Если Клиент Тогда
	
Процедура ОбновитьСотрудниковОрганизаций()
	
	// сначала регистрируем сотрудников
	РегистрацияСотрудниковОрганизацийПоРегистру();
	РегистрацияСотрудниковОрганизацийПоДокументу();
	
	// заполним регистр сведений РаботникиОрганизаций для записей, которым еще не проставлен Сотрудник
	ЗаполнитьНаборЗаписейОрганизаций("Период", РегистрыСведений, "РаботникиОрганизаций", 
	"(НЕ Регистр.Регистратор ССЫЛКА Документ.ПриемНаРаботуВОрганизацию) И ");
	
	// ПриемНаРаботуВОрганизацию
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "РаботникиОрганизации"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаПриема", "ПриемНаРаботуВОрганизацию");

	// НачислениеЗарплатыРаботникамОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("УдалитьФизлицо", МассивТЧ, "ДатаНачала", "НачислениеЗарплатыРаботникамОрганизаций",,Истина);
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "УдалитьДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("УдалитьФизлицо", МассивТЧ, "ДатаНачала", "НачислениеЗарплатыРаботникамОрганизаций",,Истина);
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизацийБЕЗПриказа("Физлицо", МассивТЧ, "Ссылка.ПериодРегистрации", "НачислениеЗарплатыРаботникамОрганизаций",,"УдалитьФизлицо");
    МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Взносы", "Взносы"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизацийБЕЗПриказа("УдалитьФизлицо", МассивТЧ, "ДатаНачала", "НачислениеЗарплатыРаботникамОрганизаций");
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ВзносыФОТ", "ВзносыФОТ"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизацийБЕЗПриказа("УдалитьФизлицо", МассивТЧ, "ДатаНачала", "НачислениеЗарплатыРаботникамОрганизаций");
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Удержания", "Удержания"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизацийБЕЗПриказа("УдалитьФизлицо", МассивТЧ, "ДатаНачала", "НачислениеЗарплатыРаботникамОрганизаций");
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "НДФЛ", "НДФЛ"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизацийБЕЗПриказа("УдалитьФизлицо", МассивТЧ, "НалоговыйПериод", "НачислениеЗарплатыРаботникамОрганизаций");
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ПогашениеЗаймов", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизацийБЕЗПриказа("УдалитьФизлицо", МассивТЧ, "ДатаНачала", "НачислениеЗарплатыРаботникамОрганизаций",,"УдалитьФизлицо");
	
	
	//////////////////////////////////////////////////////////////
	// Регистры
	
	//ВзносыВФондыРаботниковОрганизаций
    ЗаполнитьНаборЗаписейОрганизацийБЕЗПриказа("Период", РегистрыСведений, "ВзносыВФондыРаботниковОрганизаций",,Истина);
	
	// ГрафикОтпусковОрганизаций
	ЗаполнитьНаборЗаписейОрганизаций("Период", РегистрыСведений, "ГрафикОтпусковОрганизаций");
	
	//ИндексированныйДоходСовместителей
	ЗаполнитьНаборЗаписейОрганизацийБЕЗПриказа("Период", РегистрыСведений, "ИндексированныйДоходСовместителей");
	
	// КоэффициентыПовышенияОкладов
	ЗаполнитьНаборЗаписейОрганизаций("Период", РегистрыСведений, "КоэффициентыПовышенияОкладов");	
	
	//ЛьготыРаботниковОрганизаций
    ЗаполнитьНаборЗаписейОрганизацийБЕЗПриказа("Период", РегистрыСведений, "ЛьготыРаботниковОрганизаций");
	
	// НамеченныеСобытияПоПерсоналуОрганизаций
	ЗаполнитьНаборЗаписейОрганизаций("ДатаИзменения", РегистрыСведений, "УдалитьНамеченныеСобытияПоПерсоналуОрганизаций");
	

	// ПлановыеНачисленияРаботниковОрганизаций
	ЗаполнитьНаборЗаписейОрганизаций("Период", РегистрыСведений, "ПлановыеНачисленияРаботниковОрганизаций");
	
	//ПлановыеУдержанияРаботниковОрганизаций
    ЗаполнитьНаборЗаписейОрганизацийБЕЗПриказа("Период", РегистрыСведений, "ПлановыеУдержанияРаботниковОрганизаций");
	
	//УчетПлановыхНачисленийРаботниковОрганизаций
	ЗаполнитьНаборЗаписейОрганизаций("Период", РегистрыСведений, "УчетПлановыхНачисленийРаботниковОрганизаций");
	
	// СостояниеРаботниковОрганизаций
	ЗаполнитьНаборЗаписейОрганизаций("Период", РегистрыСведений, "СостояниеРаботниковОрганизаций");
	
	
	// УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете
	ЗаполнитьНаборЗаписейОрганизаций("Период", РегистрыСведений, "УчетОсновногоЗаработкаРаботниковОрганизаций");
	
	//ВзаиморасчетыПоВзносамВФонды
	ЗаполнитьНаборЗаписейОрганизацийБЕЗПриказа("Период", РегистрыНакопления, "ВзаиморасчетыПоВзносамВФонды");

	//ВзаиморасчетыПоНДФЛ
	ЗаполнитьНаборЗаписейОрганизацийБЕЗПриказа("Период", РегистрыНакопления, "ВзаиморасчетыПоНДФЛ", "Истина ИЛИ ");
	
	//ВзаиморасчетыСДепонентамиОрганизаций
	ЗаполнитьНаборЗаписейОрганизацийБЕЗПриказа("Период", РегистрыНакопления, "ВзаиморасчетыСДепонентамиОрганизаций");
	
	//ВзаиморасчетыСРаботникамиОрганизаций
	ЗаполнитьНаборЗаписейОрганизацийБЕЗПриказа("Период", РегистрыНакопления, "ВзаиморасчетыСРаботникамиОрганизаций");
	
	//ПогашениеЗаймовРаботникамиОрганизаций
    ЗаполнитьНаборЗаписейОрганизацийБЕЗПриказа("Период", РегистрыНакопления, "ПогашениеЗаймовРаботникамиОрганизаций");
	
	// ФактическаяВыработкаРаботниковОрганизаций
	ЗаполнитьНаборЗаписейОрганизаций("Период", РегистрыНакопления, "ФактическаяВыработкаРаботниковОрганизаций");
	
	
	//ДополнительныеНачисленияРаботниковОрганизаций
	ЗаполнитьНаборЗаписейОрганизаций("ПериодРегистрации", РегистрыРасчета, "УдалитьДополнительныеНачисленияРаботниковОрганизаций", ,истина, Истина);
		
	// ОсновныеНачисленияРаботниковОрганизаций
	ЗаполнитьНаборЗаписейОрганизаций("ПериодДействияНачало", РегистрыРасчета, "ОсновныеНачисленияРаботниковОрганизаций",,,Истина);
	
	//ОтражениеЗарплатыОрганизацийВРеглУчете
	ЗаполнитьНаборЗаписейОрганизаций("ПериодРегистрации", РегистрыРасчета, "ОтражениеЗарплатыОрганизацийВРеглУчете",,истина);
	
	//РасчетСреднегоЗаработка
	ЗаполнитьНаборЗаписейОрганизаций("БазовыйПериодНачало", РегистрыРасчета, "РасчетСреднегоЗаработка",,истина);
	
	// УдержанияРаботниковОрганизаций
	ЗаполнитьНаборЗаписейОрганизацийБЕЗПриказа("ПериодРегистрации", РегистрыРасчета, "УдержанияРаботниковОрганизаций",,истина);
	
	//ВзносыВФонды
	ЗаполнитьНаборЗаписейОрганизацийБЕЗПриказа("ПериодРегистрации", РегистрыРасчета, "ВзносыВФонды",,истина);
	
	//////////////////////////////////////////////////////////////
	// Документы
	
	
	//ВводСведенийОбИндексированномДоходе
    МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизацийБЕЗПриказа("Физлицо", МассивТЧ, "ДатаДействия", "ВводСведенийОбИндексированномДоходе");
	
	// ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "ОсновныеНачисления"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "УдалитьДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаДействия", "ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций");
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Взносы", "Взносы"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ВзносыФОТ", "ВзносыФОТ"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизацийБЕЗПриказа("Физлицо", МассивТЧ, "ДатаДействия", "ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций");
	
	//ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Удержания", "Удержания"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизацийБЕЗПриказа("Физлицо", МассивТЧ, "ДатаДействия", "ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций");
	
	// ВводСведенийОбУчетеПлановыхНачисленийРаботниковОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "УдалитьДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "ВводСведенийОбУчетеПлановыхНачисленийРаботниковОрганизаций");
	
	// ВозвратНаРаботуОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаВозврата", "ВозвратНаРаботуОрганизаций");
	
	// ГрафикОтпусковОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "ГрафикОтпусковОрганизаций");
	
	//ДоговорЗаймаСРаботником
    ЗаполнитьДокументОрганизацийБЕЗПриказа("НачалоПогашения", "ДоговорЗаймаСРаботником");
	
	
	//ЗарплатаКВыплатеОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьЗарплата", "УдалитьЗарплата"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизацийБЕЗПриказа("Физлицо", МассивТЧ, "Ссылка.ПериодРегистрации", "ЗарплатаКВыплатеОрганизаций",Истина);
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Взносы", "Взносы"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ВзносыФОТ", "ВзносыФОТ"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "НДФЛ", "НДФЛ"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизацийБЕЗПриказа("УдалитьФизлицо", МассивТЧ, "Ссылка.ПериодРегистрации", "ЗарплатаКВыплатеОрганизаций",Истина);
	
	//ЗаявлениеНаПрименениеЛьготы
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизацийБЕЗПриказа("Физлицо", МассивТЧ, "ДатаИзменения", "ЗаявлениеНаПрименениеЛьготы");
	
    //ИсполнительныйЛист
    ЗаполнитьДокументОрганизацийБЕЗПриказа("ДатаНачала", "ИсполнительныйЛист");
	
	// КадровоеПеремещениеОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "РаботникиОрганизации"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "КадровоеПеремещениеОрганизаций");
	
	// КомандировкиОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "КомандировкиОрганизаций");
	
	//НачислениеДивидендовОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "УдалитьДатаНачала", "НачислениеДивидендовОрганизаций");

	//НачислениеЕдиновременныхПособийЗаСчетФСС
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьНачисления", "УдалитьНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаСобытия", "НачислениеЕдиновременныхПособийЗаСчетФСС");
	
	//НачислениеОтпускаРаботникамОрганизаций
	ЗаполнитьДокументОрганизаций("ПериодРегистрации", "НачислениеОтпускаРаботникамОрганизаций");
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "УдалитьДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("УдалитьФизлицо", МассивТЧ, "ДатаНачала", "НачислениеОтпускаРаботникамОрганизаций",,истина);
	
	// НачислениеПоБольничномуЛисту
	ЗаполнитьДокументОрганизаций("ДатаНачала", "НачислениеПоБольничномуЛисту");
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("УдалитьФизлицо", МассивТЧ, "ДатаНачала", "НачислениеПоБольничномуЛисту",,истина);
	
	
	
	//НевыходыВОрганизациях
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "НевыходыВОрганизациях",,Истина);
	
	//ОплатаПоСреднемуЗаработку
	ЗаполнитьДокументОрганизаций("ДатаНачала", "ОплатаПоСреднемуЗаработку");
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("УдалитьФизлицо", МассивТЧ, "ДатаНачала", "ОплатаПоСреднемуЗаработку",,истина);
	
	//ОплатаПраздничныхИВыходныхДнейОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаВыхода", "ОплатаПраздничныхИВыходныхДнейОрганизаций");
	
	//ОплатаСверхурочныхЧасов
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаВыхода", "ОплатаСверхурочныхЧасов");
	
	// ОтпускаОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "ОтпускаОрганизаций");
	
	//ОтпускПоУходуЗаРебенком
	ЗаполнитьДокументОрганизаций("ДатаНачала", "ОтпускПоУходуЗаРебенком");
	
	//ОтражениеЗарплатыВРеглУчете
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизацийБЕЗПриказа("Физлицо", МассивТЧ, "Ссылка.ПериодРегистрации", "ОтражениеЗарплатыВРеглУчете", Истина);
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("УдалитьФизлицо", МассивТЧ, "ДатаНачала", "ОтражениеЗарплатыВРеглУчете",,Истина);
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "УдалитьДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("УдалитьФизлицо", МассивТЧ, "Ссылка.ПериодРегистрации", "ОтражениеЗарплатыВРеглУчете", Истина,Истина);
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Взносы", "Взносы"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ВзносыФОТ", "ВзносыФОТ"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "НДФЛ", "НДФЛ"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Удержания", "Удержания"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ПогашениеЗаймов", "ПогашениеЗаймов"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизацийБЕЗПриказа("УдалитьФизлицо", МассивТЧ, "Ссылка.ПериодРегистрации", "ОтражениеЗарплатыВРеглУчете", Истина);
	
	// ОтсутствиеНаРаботеОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "ОтсутствиеНаРаботеОрганизаций");
	
	//ПоощрениеВзысканиеОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "Ссылка.Дата", "ПоощрениеВзысканиеОрганизаций");
	
	// ПремииРаботниковОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "УдалитьДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "ПремииРаботниковОрганизаций");
	
	//РасчетПриУвольненииРаботникаОрганизаций
	ЗаполнитьДокументОрганизаций("ДатаУвольнения", "РасчетПриУвольненииРаботникаОрганизаций");
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "УдалитьДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("УдалитьФизлицо", МассивТЧ, "ДатаНачала", "РасчетПриУвольненииРаботникаОрганизаций",, Истина);
	
	//РегистрацияПростоевВОрганизациях
	ЗаполнитьДокументОрганизаций("ДатаНачала", "РегистрацияПростоевВОрганизациях");
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("УдалитьФизлицо", МассивТЧ, "ДатаНачала", "РегистрацияПростоевВОрганизациях",, Истина);
	
	//РегистрацияРазовыхНачисленийРаботниковОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОсновныеНачисления", "ОсновныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "РегистрацияРазовыхНачисленийРаботниковОрганизаций");
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьДополнительныеНачисления", "УдалитьДополнительныеНачисления"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаНачала", "РегистрацияРазовыхНачисленийРаботниковОрганизаций");
	
	//РегистрацияРазовыхУдержанийРаботниковОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Удержания", "Удержания"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизацийБЕЗПриказа("Физлицо", МассивТЧ, "ДатаНачала", "РегистрацияРазовыхУдержанийРаботниковОрганизаций");
	
	//СдельныйНаряд
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Исполнители", "Исполнители"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ссылка.Дата", "СдельныйНаряд");
	
	//СписаниеДепонентовВДоходыОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Работники", "Работники"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизацийБЕЗПриказа("Физлицо", МассивТЧ, "ссылка.Дата", "СписаниеДепонентовВДоходыОрганизаций");
	
	// УвольнениеИзОрганизаций
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаУвольнения", "УвольнениеИзОрганизаций");
	
	// УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокументаОрганизаций("Физлицо", МассивТЧ, "ДатаИзменения", "ВводСведенийОбУчетеОсновногоЗаработкаРаботниковОрганизаций");
	
КонецПроцедуры

Процедура РегистрацияСотрудниковОрганизацийПоРегистру()
	
	// создание сотрудников по приказам о приеме на работу
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиОрганизаций.Регистратор КАК Приказ
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|	И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу.Текст =
	"ВЫБРАТЬ
	|	РаботникиОрганизаций.НомерСтроки КАК НомерСтроки,
	|	РаботникиОрганизаций.УдалитьТабельныйНомер КАК Код,
	|	РаботникиОрганизаций.УдалитьФизлицо.Наименование КАК Наименование,
	|	РаботникиОрганизаций.УдалитьФизлицо КАК Физлицо,
	|	ИСТИНА КАК Актуальность,
	|	РаботникиОрганизаций.Организация КАК Организация,
	|	РаботникиОрганизаций.ОбособленноеПодразделение,
	|	РаботникиОрганизаций.Регистратор.УдалитьВидЗанятости КАК ВидЗанятости,
	|	ТрудовойДоговорДокумент.Номер КАК НомерДоговора,
	|	ТрудовойДоговорДокумент.Дата КАК ДатаДоговора,
	|	РаботникиОрганизаций.ГрафикРаботы,
	|	РаботникиОрганизаций.ПодразделениеОрганизации,
	|	РаботникиОрганизаций.Должность,
	|	РаботникиОрганизаций.ЗанимаемыхСтавок,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема КАК ДатаНачала,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения КАК ДатаОкончания,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ИспытательныйСрок,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.СпособРасчета,
	|	ТрудовойДоговорДокумент.ТарифнаяСтавка КАК ТарифнаяСтавка,
	|	ТрудовойДоговорДокумент.ВалютаТарифнойСтавки КАК ВалютаТарифнойСтавки,
	|	РаботникиОрганизаций.Период,
	|	РаботникиОрганизаций.Регистратор,
	|	РаботникиОрганизаций.Активность,
	|	РаботникиОрганизаций.УдалитьФизлицо,
	|	РаботникиОрганизаций.УдалитьПриказ,
	|	РаботникиОрганизаций.УдалитьТабельныйНомер,
	|	РаботникиОрганизаций.ПричинаИзмененияСостояния
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УдалитьТрудовойДоговор КАК ТрудовойДоговорДокумент
	|			ПО ПриемНаРаботуВОрганизациюРаботникиОрганизации.ТрудовойДоговор = ТрудовойДоговорДокумент.Ссылка
	|		ПО (ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &Приказ)
	|			И РаботникиОрганизаций.УдалитьФизлицо = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
	|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|ГДЕ
	|	РаботникиОрганизаций.Регистратор = &Приказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние(НСтр("ru='Сотрудники организаций. Обрабатывается набор записей ';uk='Співробітники організацій. Обробляється набір записів '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		НаборЗаписей = РегистрыСведений.РаботникиОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Приказ;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ", Выборка.Приказ);
	
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		НачатьТранзакцию();
		Пока ВыборкаПоДокументу.Следующий() Цикл
			Сотрудник = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Сотрудник, ВыборкаПоДокументу);
			Сотрудник.ВидДоговора	= Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;
			
			Если Сотрудник.ВидЗанятости  = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
				Сотрудник.Наименование = Сотрудник.Наименование + " (вн. совм.)";
				Сотрудник.ПостфиксНаименования = "(вн. совм.)"; 
			ИначеЕсли Сотрудник.ВидЗанятости  = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда
				Сотрудник.Наименование = Сотрудник.Наименование + " (осн.)";
				Сотрудник.ПостфиксНаименования = "(осн.)";
			Иначе
				Сотрудник.Наименование = Сотрудник.Наименование + " (совм.)";
				Сотрудник.ПостфиксНаименования = "(совм.)";
			КонецЕсли;
			
			Сотрудник.Записать();
			
			Строка = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ВыборкаПоДокументу);
			Строка.Сотрудник = Сотрудник.Ссылка;
			Если Сотрудник.ВидЗанятости  = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
				ЗаполнитьОсновноеНазначение(Сотрудник, ВыборкаПоДокументу.Период);
			КонецЕсли;	
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры

Процедура РегистрацияСотрудниковОрганизацийПоДокументу()
	
	// создание сотрудников по приказам о приеме на работу
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка КАК Документ
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|ГДЕ
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|	И (НЕ ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Проведен)";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу.Текст =
	"ВЫБРАТЬ
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.НомерСтроки,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.УдалитьТабельныйНомер КАК Код,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо.Наименование КАК Наименование,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо КАК Физлицо,
	|	ИСТИНА КАК Актуальность,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация
	|		ИНАЧЕ ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ОбособленноеПодразделение,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.УдалитьВидЗанятости КАК ВидЗанятости,
	|	ТрудовойДоговорДокумент.Номер КАК НомерДоговора,
	|	ТрудовойДоговорДокумент.Дата КАК ДатаДоговора,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ГрафикРаботы,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ПодразделениеОрганизации,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Должность,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ЗанимаемыхСтавок,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема КАК ДатаНачала,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения КАК ДатаОкончания,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ИспытательныйСрок,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.СпособРасчета,
	|	ТрудовойДоговорДокумент.ТарифнаяСтавка КАК ТарифнаяСтавка,
	|	ТрудовойДоговорДокумент.ВалютаТарифнойСтавки КАК ВалютаТарифнойСтавки
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УдалитьТрудовойДоговор КАК ТрудовойДоговорДокумент
	|		ПО ПриемНаРаботуВОрганизациюРаботникиОрганизации.ТрудовойДоговор = ТрудовойДоговорДокумент.Ссылка
	|ГДЕ
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &Приказ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние(НСтр("ru='Сотрудники организаций. Обрабатывается документ ';uk='Співробітники організацій. Обробляється документ '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ", Выборка.Документ);
	
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		НачатьТранзакцию();
		Пока ВыборкаПоДокументу.Следующий() Цикл
			Сотрудник = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Сотрудник, ВыборкаПоДокументу);
			Сотрудник.ВидДоговора	= Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;
			
			Если Сотрудник.ВидЗанятости  = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
				Сотрудник.Наименование = Сотрудник.Наименование + " (вн. совм.)";
				Сотрудник.ПостфиксНаименования = "(вн. совм.)"; 
			ИначеЕсли Сотрудник.ВидЗанятости  = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда
				Сотрудник.Наименование = Сотрудник.Наименование + " (осн.)";
				Сотрудник.ПостфиксНаименования = "(осн.)";
			Иначе
				Сотрудник.Наименование = Сотрудник.Наименование + " (совм.)";
				Сотрудник.ПостфиксНаименования = "(совм.)";
			КонецЕсли;
			
			Сотрудник.Записать();
			Строка = ДокументОбъект.РаботникиОрганизации.Найти(ВыборкаПоДокументу.НомерСтроки, "НомерСтроки");
			Строка.Сотрудник = Сотрудник.Ссылка;
		КонецЦикла;
		
		ДокументОбъект.Записать();
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры

// Процедура сохранения настроек для отчета СтатистикаКадровОрганизации
//
Процедура ЗаписатьНастройкиДляОтчета(КомпоновщикНастроекДляЗаписи,ОбъектОтчета,НаименованиеОтчета)
	
	ЭлементСправочника = Справочники.СохраненныеНастройки.СоздатьЭлемент();
	ЭлементСправочника.НастраиваемыйОбъект = "ОтчетОбъект." + ОбъектОтчета.Метаданные().Имя;
	ЭлементСправочника.ТипНастройки = Перечисления.ТипыНастроек.НастройкиОтчета;
	ЭлементСправочника.Владелец = Справочники.ГруппыПользователей.ВсеПользователи; 
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ОбъектОтчета);
	ЭлементСправочника.ХранилищеНастроек = Новый ХранилищеЗначения(СтруктураНастроек);
	ЭлементСправочника.Наименование = НаименованиеОтчета;
	ЭлементСправочника.Записать();
	
КонецПроцедуры

#КонецЕсли

// Для внутренних совместителей заполнить основное назначение по организации
//
Процедура ЗаполнитьОсновноеНазначение(Сотрудник, Период)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", Сотрудник.ФизЛицо);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник.Ссылка);
	Запрос.УстановитьПараметр("Организация", Сотрудник.Организация);
	Запрос.УстановитьПараметр("Период", Период);

	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.Сотрудник.ФизЛицо = &ФизЛицо
	|	И РаботникиОрганизаций.Сотрудник <> &Сотрудник
	|	И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И РаботникиОрганизаций.Период <= &Период
	|	И РаботникиОрганизаций.Организация = &Организация
	|	И РаботникиОрганизаций.Регистратор ССЫЛКА Документ.ПриемНаРаботуВОрганизацию";

	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	Если КоличествоЗаписей = 0 Тогда
		#Если Клиент Тогда
		Сообщить(НСтр("ru='Не удалось определить основное назначение для внутреннего совместителя ';uk='Не вдалося визначити основне призначення для внутрішнього сумісника '")+Сотрудник.Наименование+"!
		|Заполните основное назначение самостоятельно и проверьте документы по сотруднику!",СтатусСообщения.ОченьВажное);
		#КонецЕсли
		Возврат;
	КонецЕсли;	
	
	Пока Выборка.Следующий() Цикл
		Сотрудник.ОсновноеНазначение = Выборка.Сотрудник;
		Сотрудник.Записать();	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьНаборЗаписейОрганизаций(ПолеДаты, МенеджерРегистров, ИмяРегистра, ДопУсловие = "", ПериодНаКонецМесяца = Ложь, Назначение = Ложь)
	
	ИмяРеквизитаФизлицо		= "УдалитьФизлицо";
	Если ТипЗнч(МенеджерРегистров) = Тип("РегистрыСведенийМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрСведений";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыНакопленияМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрНакопления";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыБухгалтерииМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрБухгалтерии";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыРасчетаМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрРасчета";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Организация КАК Организация,
	|	Регистр.Регистратор КАК Приказ,
	|	Регистр." + ПолеДаты+"
	|ИЗ
	|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|ГДЕ
	|	" + ДопУсловие + " Регистр.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистр." + ПолеДаты;
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументуТекст1 = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.НомерСтроки КАК НомерСтроки,
	|	Регистр.*
	|ИЗ
	|	(ВЫБРАТЬ
	|	Работники.Сотрудник КАК Сотрудник,
	|	Регистр.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ПО Регистр." + ИмяРеквизитаФизлицо + " = Работники.УдалитьФизлицо
	|			И Регистр.УдалитьПриказ = Работники.Регистратор
	|			И Регистр.Организация = Работники.Организация
	|			И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|			И Регистр.Регистратор = &Приказ
	|			//УСЛОВИЕ_НА_ВИДРАСЧЕТА
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		РаботникиОрганизаций.Сотрудник,
	|		Периоды.НомерСтроки
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МИНИМУМ(ПериодыВсе.Период) КАК Период,
	|				ПериодыВсе.Физлицо КАК Физлицо,
	|				ПериодыВсе.Организация КАК Организация,
	|				ПериодыВсе.НомерСтроки КАК НомерСтроки
	|			ИЗ
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(Работники.Период) КАК Период,
	|					Регистр." + ИмяРеквизитаФизлицо + " КАК Физлицо,
	|					Регистр.Организация КАК Организация,
	|					Регистр.НомерСтроки КАК НомерСтроки
	|				ИЗ
	|					" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|						ПО Регистр." + ИмяРеквизитаФизлицо + " = Работники.УдалитьФизлицо
	|							И Регистр.Организация = Работники.Организация
	|							И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|							И (Регистр.Регистратор = &Приказ)
	|							И (Регистр.УдалитьПриказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка))
	|							И Работники.Период <= "+?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Регистр." + ПолеДаты + ", МЕСЯЦ)", "Регистр." + ПолеДаты)+"
	|							//УСЛОВИЕ_НА_ВИДРАСЧЕТА
	|				
	|				СГРУППИРОВАТЬ ПО
	|					Регистр." + ИмяРеквизитаФизлицо + ",
	|					Регистр.Организация,
	|					Регистр.НомерСтроки
	|				
	|				ОБЪЕДИНИТЬ
	|				
	|				ВЫБРАТЬ
	|					МИНИМУМ(Работники.Период),
	|					Регистр." + ИмяРеквизитаФизлицо + ",
	|					Регистр.Организация,
	|					Регистр.НомерСтроки
	|				ИЗ
	|					" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|						ПО Регистр." + ИмяРеквизитаФизлицо + " = Работники.УдалитьФизлицо
	|							И Регистр.Организация = Работники.Организация
	|							И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|							И Регистр.Регистратор = &Приказ
	|							И Регистр.УдалитьПриказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка)
	|							И Работники.Период > "+?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Регистр." + ПолеДаты + ", МЕСЯЦ)", "Регистр." + ПолеДаты)+"
	|							//УСЛОВИЕ_НА_ВИДРАСЧЕТА
	|				
	|				СГРУППИРОВАТЬ ПО
	|					Регистр." + ИмяРеквизитаФизлицо + ",
	|					Регистр.Организация,
	|					Регистр.НомерСтроки) КАК ПериодыВсе
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПериодыВсе.Физлицо,
	|				ПериодыВсе.Организация,
	|				ПериодыВсе.НомерСтроки) КАК Периоды
	|			ПО РаботникиОрганизаций.Организация = Периоды.Организация
	|				И РаботникиОрганизаций.УдалитьФизлицо = Периоды.Физлицо
	|				И РаботникиОрганизаций.Период = Периоды.Период	
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ПриказыДоДокумента.Сотрудник,
	|		ПриказыДоДокумента.НомерСтроки
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|			Периоды.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ)) КАК Период,
	|				Регистр." + ИмяРеквизитаФизлицо + " КАК Физлицо,
	|				Регистр.Организация КАК Организация,
	|				Регистр.НомерСтроки КАК НомерСтроки
	|			ИЗ
	|				" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|					ПО Регистр." + ИмяРеквизитаФизлицо + " = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
	|						И Регистр.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация
	|						И Регистр.Регистратор = &Приказ
	|						И Регистр.УдалитьПриказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка)
	|						И (НЕ ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Проведен)
	|						И (НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ) <= "+?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Регистр." + ПолеДаты + ", МЕСЯЦ)", "Регистр." + ПолеДаты)+")
	|						//УСЛОВИЕ_НА_ВИДРАСЧЕТА
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Регистр." + ИмяРеквизитаФизлицо + ",
	|				Регистр.Организация,
	|				Регистр.НомерСтроки) КАК Периоды
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|				ПО (Периоды.Период = НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ))
	|					И Периоды.Физлицо = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
	|					И (НЕ ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Проведен)
	|					И Периоды.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация) КАК ПриказыДоДокумента) КАК Сотрудники
	|		ПРАВОЕ СОЕДИНЕНИЕ " + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|		ПО Сотрудники.НомерСтроки = Регистр.НомерСтроки
	|ГДЕ
	|	Регистр.Регистратор = &Приказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ЗапросПоДокументуТекст2 = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.НомерСтроки КАК НомерСтроки,
	|	Регистр.*
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаботникиОрганизаций.Сотрудник,
	|		Периоды.НомерСтроки
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МИНИМУМ(ПериодыВсе.Период) КАК Период,
	|				ПериодыВсе.Физлицо КАК Физлицо,
	|				ПериодыВсе.Организация КАК Организация,
	|				ПериодыВсе.НомерСтроки КАК НомерСтроки
	|			ИЗ
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(Работники.Период) КАК Период,
	|					Регистр." + ИмяРеквизитаФизлицо + " КАК Физлицо,
	|					Регистр.Организация КАК Организация,
	|					Регистр.НомерСтроки КАК НомерСтроки
	|				ИЗ
	|					" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|						ПО Регистр." + ИмяРеквизитаФизлицо + " = Работники.УдалитьФизлицо
	|							И Регистр.Организация = Работники.Организация
	|							И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|							И Регистр.Регистратор = &Приказ
	|							И Работники.Период <= "+?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Регистр." + ПолеДаты + ", МЕСЯЦ)", "Регистр." + ПолеДаты)+"
	|							//УСЛОВИЕ_НА_ВИДРАСЧЕТА
	|				
	|				СГРУППИРОВАТЬ ПО
	|					Регистр." + ИмяРеквизитаФизлицо + ",
	|					Регистр.Организация,
	|					Регистр.НомерСтроки
	|				
	|				ОБЪЕДИНИТЬ
	|				
	|				ВЫБРАТЬ
	|					МИНИМУМ(Работники.Период),
	|					Регистр." + ИмяРеквизитаФизлицо + ",
	|					Регистр.Организация,
	|					Регистр.НомерСтроки
	|				ИЗ
	|					" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|						ПО Регистр." + ИмяРеквизитаФизлицо + " = Работники.УдалитьФизлицо
	|							И Регистр.Организация = Работники.Организация
	|							И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|							И Регистр.Регистратор = &Приказ
	|							И Работники.Период > "+?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Регистр." + ПолеДаты + ", МЕСЯЦ)", "Регистр." + ПолеДаты)+"
	|							//УСЛОВИЕ_НА_ВИДРАСЧЕТА
	|				
	|				СГРУППИРОВАТЬ ПО
	|					Регистр." + ИмяРеквизитаФизлицо + ",
	|					Регистр.Организация,
	|					Регистр.НомерСтроки) КАК ПериодыВсе
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПериодыВсе.Физлицо,
	|				ПериодыВсе.Организация,
	|				ПериодыВсе.НомерСтроки) КАК Периоды
	|			ПО РаботникиОрганизаций.Организация = Периоды.Организация
	|				И РаботникиОрганизаций.УдалитьФизлицо = Периоды.Физлицо
	|				И РаботникиОрганизаций.Период = Периоды.Период	
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ПриказыДоДокумента.Сотрудник,
	|		ПриказыДоДокумента.НомерСтроки
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|			Периоды.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ)) КАК Период,
	|				Регистр." + ИмяРеквизитаФизлицо + " КАК Физлицо,
	|				Регистр.Организация КАК Организация,
	|				Регистр.НомерСтроки КАК НомерСтроки
	|			ИЗ
	|				" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|					ПО Регистр." + ИмяРеквизитаФизлицо + " = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
	|						И Регистр.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация
	|						И Регистр.Регистратор = &Приказ
	|						И (НЕ ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Проведен)
	|						И (НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ) <= "+?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Регистр." + ПолеДаты + ", МЕСЯЦ)", "Регистр." + ПолеДаты)+")
	|						//УСЛОВИЕ_НА_ВИДРАСЧЕТА
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Регистр." + ИмяРеквизитаФизлицо + ",
	|				Регистр.Организация,
	|				Регистр.НомерСтроки) КАК Периоды
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|				ПО (Периоды.Период = НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ))
	|					И Периоды.Физлицо = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
	|					И (НЕ ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Проведен)
	|					И Периоды.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация) КАК ПриказыДоДокумента) КАК Сотрудники
	|		ПРАВОЕ СОЕДИНЕНИЕ " + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|		ПО Сотрудники.НомерСтроки = Регистр.НомерСтроки
	|ГДЕ
	|	Регистр.Регистратор = &Приказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если	(ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций") Тогда
		ЗапросПоДокументуТекст1 = СтрЗаменить(ЗапросПоДокументуТекст1, "//УСЛОВИЕ_НА_ВИДРАСЧЕТА", "И Регистр.ВидРасчета.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой)");
		ЗапросПоДокументуТекст2 = СтрЗаменить(ЗапросПоДокументуТекст2, "//УСЛОВИЕ_НА_ВИДРАСЧЕТА", "И Регистр.ВидРасчета.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой)");
	КонецЕсли;
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		ПоддержкаВнутреннегоСовместительства = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Выборка.Организация].ПоддержкаВнутреннегоСовместительства;
		
	//	Если ПоддержкаВнутреннегоСовместительства Тогда
			ЗапросПоДокументу.Текст = ЗапросПоДокументуТекст1;
	//	Иначе
	//		ЗапросПоДокументу.Текст = ЗапросПоДокументуТекст2;
	//	КонецЕсли;
		
		#Если Клиент Тогда
			Состояние(ПрефиксИмениТаблицы + "." + ИмяРегистра + НСтр("ru='. Обрабатывается набор записей ';uk='. Обробляється набір записів '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ",	Выборка.Приказ);
		
		НаборЗаписей = МенеджерРегистров[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Приказ;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			Строка = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ВыборкаПоДокументу);
			Если Не Назначение Тогда
				Строка.Сотрудник = ВыборкаПоДокументу.Сотрудник;				
			Иначе
				Строка.Назначение = ВыборкаПоДокументу.Сотрудник;
				Если ЗначениеЗаполнено(Строка.Назначение.ОсновноеНазначение) Тогда
					Строка.Сотрудник = Строка.Назначение.ОсновноеНазначение;
				Иначе
					Строка.Сотрудник = Строка.Назначение;
				КонецЕсли;	
			КонецЕсли;						
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("Не удалось записать движения документа "+строка(НаборЗаписей.Отбор.Регистратор.Значение)+НСтр("ru=' по регистру ';uk=' по регістру '")+ИмяРегистра,СтатусСообщения.ОченьВажное);
		КонецПопытки;
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНаборЗаписейОрганизацийБЕЗПриказа(ПолеДаты, МенеджерРегистров, ИмяРегистра, ДопУсловие = "", ПериодНаКонецМесяца = Ложь)
	
	ИмяРеквизитаФизлицо		= "УдалитьФизлицо";
	Если ТипЗнч(МенеджерРегистров) = Тип("РегистрыСведенийМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрСведений";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыНакопленияМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрНакопления";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыБухгалтерииМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрБухгалтерии";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыРасчетаМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрРасчета";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Организация КАК Организация,
	|	Регистр.Регистратор КАК Приказ,
	|	Регистр." + ПолеДаты + "
	|ИЗ
	|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|ГДЕ
	|	" + ДопУсловие + " Регистр.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистр." + ПолеДаты;
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументуТекст2 = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.НомерСтроки КАК НомерСтроки,
	|	Регистр.*
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаботникиОрганизаций.Сотрудник,
	|		Периоды.НомерСтроки
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МИНИМУМ(ПериодыВсе.Период) КАК Период,
	|				ПериодыВсе.Физлицо КАК Физлицо,
	|				ПериодыВсе.Организация КАК Организация,
	|				ПериодыВсе.НомерСтроки КАК НомерСтроки
	|			ИЗ
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(Работники.Период) КАК Период,
	|					Регистр." + ИмяРеквизитаФизлицо + " КАК Физлицо,
	|					Регистр.Организация КАК Организация,
	|					Регистр.НомерСтроки КАК НомерСтроки
	|				ИЗ
	|					" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|						ПО Регистр." + ИмяРеквизитаФизлицо + " = Работники.УдалитьФизлицо
	|							И Регистр.Организация = Работники.Организация
	|							И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|							И Регистр.Регистратор = &Приказ
	|							И Работники.Период <= "+?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Регистр." + ПолеДаты + ", МЕСЯЦ)", "Регистр." + ПолеДаты)+"
	|							//УСЛОВИЕ_НА_ВИДРАСЧЕТА
	|				
	|				СГРУППИРОВАТЬ ПО
	|					Регистр." + ИмяРеквизитаФизлицо + ",
	|					Регистр.Организация,
	|					Регистр.НомерСтроки
	|				
	|				ОБЪЕДИНИТЬ
	|				
	|				ВЫБРАТЬ
	|					МИНИМУМ(Работники.Период),
	|					Регистр." + ИмяРеквизитаФизлицо + ",
	|					Регистр.Организация,
	|					Регистр.НомерСтроки
	|				ИЗ
	|					" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|						ПО Регистр." + ИмяРеквизитаФизлицо + " = Работники.УдалитьФизлицо
	|							И Регистр.Организация = Работники.Организация
	|							И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|							И Регистр.Регистратор = &Приказ
	|							И Работники.Период > "+?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Регистр." + ПолеДаты + ", МЕСЯЦ)", "Регистр." + ПолеДаты)+"
	|							//УСЛОВИЕ_НА_ВИДРАСЧЕТА
	|				
	|				СГРУППИРОВАТЬ ПО
	|					Регистр." + ИмяРеквизитаФизлицо + ",
	|					Регистр.Организация,
	|					Регистр.НомерСтроки) КАК ПериодыВсе
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПериодыВсе.Физлицо,
	|				ПериодыВсе.Организация,
	|				ПериодыВсе.НомерСтроки) КАК Периоды
	|			ПО РаботникиОрганизаций.Организация = Периоды.Организация
	|				И РаботникиОрганизаций.УдалитьФизлицо = Периоды.Физлицо
	|				И РаботникиОрганизаций.Период = Периоды.Период	
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ПриказыДоДокумента.Сотрудник,
	|		ПриказыДоДокумента.НомерСтроки
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|			Периоды.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ)) КАК Период,
	|				Регистр." + ИмяРеквизитаФизлицо + " КАК Физлицо,
	|				Регистр.Организация КАК Организация,
	|				Регистр.НомерСтроки КАК НомерСтроки
	|			ИЗ
	|				" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|					ПО Регистр." + ИмяРеквизитаФизлицо + " = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
	|						И Регистр.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация
	|						И Регистр.Регистратор = &Приказ
	|						И (НЕ ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Проведен)
	|						И (НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ) <= "+?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Регистр." + ПолеДаты + ", МЕСЯЦ)", "Регистр." + ПолеДаты)+")
	|						//УСЛОВИЕ_НА_ВИДРАСЧЕТА
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Регистр." + ИмяРеквизитаФизлицо + ",
	|				Регистр.Организация,
	|				Регистр.НомерСтроки) КАК Периоды
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|				ПО (Периоды.Период = НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ))
	|					И Периоды.Физлицо = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
	|					И (НЕ ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Проведен)
	|					И Периоды.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация) КАК ПриказыДоДокумента) КАК Сотрудники
	|		ПРАВОЕ СОЕДИНЕНИЕ " + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|		ПО Сотрудники.НомерСтроки = Регистр.НомерСтроки
	|ГДЕ
	|	Регистр.Регистратор = &Приказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если	(ИмяРегистра = "ДополнительныеНачисленияРаботниковОрганизаций") Тогда
		ЗапросПоДокументуТекст1 = СтрЗаменить(ЗапросПоДокументуТекст1, "//УСЛОВИЕ_НА_ВИДРАСЧЕТА", "И Регистр.ВидРасчета.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой)");
		ЗапросПоДокументуТекст2 = СтрЗаменить(ЗапросПоДокументуТекст2, "//УСЛОВИЕ_НА_ВИДРАСЧЕТА", "И Регистр.ВидРасчета.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой)");
	КонецЕсли;
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		
		ЗапросПоДокументу.Текст = ЗапросПоДокументуТекст2;
				
		#Если Клиент Тогда
			Состояние(ПрефиксИмениТаблицы + "." + ИмяРегистра + НСтр("ru='. Обрабатывается набор записей ';uk='. Обробляється набір записів '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ",	Выборка.Приказ);
		
		НаборЗаписей = МенеджерРегистров[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Приказ;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаПоДокументу.Сотрудник) Тогда
				Если ВыборкаПоДокументу.Сотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
				
			Строка = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ВыборкаПоДокументу);
			Если ЗначениеЗаполнено(ВыборкаПоДокументу.Сотрудник) Тогда
				Если ЗначениеЗаполнено(ВыборкаПоДокументу.Сотрудник.ОсновноеНазначение) Тогда
					Строка.Сотрудник = ВыборкаПоДокументу.Сотрудник.ОсновноеНазначение;
				Иначе
					Строка.Сотрудник = ВыборкаПоДокументу.Сотрудник;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("Не удалось записать движения документа "+строка(НаборЗаписей.Отбор.Регистратор.Значение)+НСтр("ru=' по регистру ';uk=' по регістру '")+ИмяРегистра,СтатусСообщения.ОченьВажное);
		КонецПопытки;
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументОрганизаций(ПолеДаты, ИмяДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Организация КАК Организация,
	|	Документ.Ссылка КАК Документ,
	|	Документ.Дата
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК Документ
	|ГДЕ
	|	Документ.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ.Дата";
	
	ЗапросыПоДокументу = Новый Массив(1);
	ЗапросыПоДокументуТекст1 = Новый Массив(1);
	ЗапросыПоДокументуТекст2 = Новый Массив(1);
	
	Индекс = 0;
	Пока Индекс < ЗапросыПоДокументу.Количество() Цикл
		ЗапросыПоДокументу[Индекс] = Новый Запрос;
		
		ЗапросыПоДокументуТекст1[Индекс] = 
		"ВЫБРАТЬ
		|	Работники.Сотрудник
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|		ПО Документ.Физлицо = Работники.УдалитьФизлицо
		|			И Документ.УдалитьПриказ = Работники.Регистратор
		|			И Документ.УдалитьПриказ.Организация = Работники.ОбособленноеПодразделение
		|			И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|		ГДЕ 
		|			Документ.Ссылка = &Приказ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Работники.Сотрудник
		|ИЗ
		|		(ВЫБРАТЬ
		|			МАКСИМУМ(Работники.Период) КАК Период,
		|			Документ.Физлицо КАК Физлицо,
		|			Документ.Организация КАК Организация
		|		ИЗ
		|			Документ." + ИмяДокумента + " КАК Документ
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|				ПО Документ.Физлицо = Работники.УдалитьФизлицо
		|					И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
		|					И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|					И Работники.Период <= Документ." + ПолеДаты + "
		|		ГДЕ
		|			Документ.Ссылка = &Приказ
		|			И Документ.УдалитьПриказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка)
		|
		|		СГРУППИРОВАТЬ ПО
		|			Документ.Физлицо,
		|			Документ.Организация) КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|		ПО Периоды.Период = Работники.Период
		|			И Периоды.Физлицо = Работники.УдалитьФизлицо
		|			И Периоды.Организация = Работники.ОбособленноеПодразделение";
		
		ЗапросыПоДокументуТекст2[Индекс] = 
		"ВЫБРАТЬ
		|	Работники.Сотрудник
		|ИЗ
		|		(ВЫБРАТЬ
		|			МАКСИМУМ(Работники.Период) КАК Период,
		|			Документ.Физлицо КАК Физлицо,
		|			Документ.Организация КАК Организация
		|		ИЗ
		|			Документ." + ИмяДокумента + " КАК Документ
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|				ПО Документ.Физлицо = Работники.УдалитьФизлицо
		|					И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
		|					И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|					И Работники.Период <= Документ." + ПолеДаты + "
		|		ГДЕ
		|			Документ.Ссылка = &Приказ
		|
		|		СГРУППИРОВАТЬ ПО
		|			Документ.Физлицо,
		|			Документ.Организация) КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|		ПО Периоды.Период = Работники.Период
		|			И Периоды.Физлицо = Работники.УдалитьФизлицо
		|			И Периоды.Организация = Работники.ОбособленноеПодразделение";
			
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Документ." + ИмяДокумента + НСтр("ru='. Обрабатывается документ ';uk='. Обробляється документ '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Индекс = 0;
		Пока Индекс < ЗапросыПоДокументу.Количество() Цикл
			//Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Выборка.Организация].ПоддержкаВнутреннегоСовместительства Тогда
				ЗапросыПоДокументу[Индекс].Текст = ЗапросыПоДокументуТекст1[Индекс];
			//Иначе
			//	ЗапросыПоДокументу[Индекс].Текст = ЗапросыПоДокументуТекст2[Индекс];
			//КонецЕсли;
			
			ЗапросыПоДокументу[Индекс].УстановитьПараметр("Приказ",	Выборка.Документ);
			
			ВыборкаПоДокументу = ЗапросыПоДокументу[Индекс].Выполнить().Выбрать();
			
			Пока ВыборкаПоДокументу.Следующий() Цикл
				ДокументОбъект.Сотрудник = ВыборкаПоДокументу.Сотрудник;
			КонецЦикла;
			
			Индекс = Индекс + 1;
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументОрганизацийБЕЗПриказа(ПолеДаты, ИмяДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Организация КАК Организация,
	|	Документ.Ссылка КАК Документ,
	|	Документ.Дата
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК Документ
	|ГДЕ
	|	Документ.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ.Дата";
	
	ЗапросыПоДокументу = Новый Массив(1);
	ЗапросыПоДокументуТекст1 = Новый Массив(1);
	ЗапросыПоДокументуТекст2 = Новый Массив(1);
	
	Индекс = 0;
	Пока Индекс < ЗапросыПоДокументу.Количество() Цикл
		ЗапросыПоДокументу[Индекс] = Новый Запрос;
		
		ЗапросыПоДокументуТекст2[Индекс] = 
		"ВЫБРАТЬ
		|	Работники.Сотрудник
		|ИЗ
		|		(ВЫБРАТЬ
		|			МАКСИМУМ(Работники.Период) КАК Период,
		|			Документ.Физлицо КАК Физлицо,
		|			Документ.Организация КАК Организация
		|		ИЗ
		|			Документ." + ИмяДокумента + " КАК Документ
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|				ПО Документ.Физлицо = Работники.УдалитьФизлицо
		|					И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
		|					И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|					И Работники.Период <= Документ." + ПолеДаты + "
		|		ГДЕ
		|			Документ.Ссылка = &Приказ
		|
		|		СГРУППИРОВАТЬ ПО
		|			Документ.Физлицо,
		|			Документ.Организация) КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|		ПО Периоды.Период = Работники.Период
		|			И Периоды.Физлицо = Работники.УдалитьФизлицо
		|			И Периоды.Организация = Работники.ОбособленноеПодразделение";
			
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Документ." + ИмяДокумента + НСтр("ru='. Обрабатывается документ ';uk='. Обробляється документ '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Индекс = 0;
		Пока Индекс < ЗапросыПоДокументу.Количество() Цикл
			ЗапросыПоДокументу[Индекс].Текст = ЗапросыПоДокументуТекст2[Индекс];
			
			ЗапросыПоДокументу[Индекс].УстановитьПараметр("Приказ",	Выборка.Документ);
			
			ВыборкаПоДокументу = ЗапросыПоДокументу[Индекс].Выполнить().Выбрать();
			
			Пока ВыборкаПоДокументу.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаПоДокументу.Сотрудник) Тогда
					Если ЗначениеЗаполнено(ВыборкаПоДокументу.Сотрудник.ОсновноеНазначение) Тогда
						ДокументОбъект.Сотрудник = ВыборкаПоДокументу.Сотрудник.ОсновноеНазначение;
					Иначе
						ДокументОбъект.Сотрудник = ВыборкаПоДокументу.Сотрудник;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			
			Индекс = Индекс + 1;
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьДокументаОрганизаций(ПолеФизлица, ТабличныеЧасти, ПолеДаты, ИмяДокумента, ПериодНаКонецМесяца = Ложь, Назначение = Ложь)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка.Организация КАК Организация,
	|	Документ.Ссылка КАК Документ
	|ИЗ
	|	Документ." + ИмяДокумента + "." + ТабличныеЧасти[0].Имя + " КАК Документ
	|ГДЕ
	|	Документ.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ.Ссылка.Дата";
	
	ЗапросыПоДокументу = Новый Массив(ТабличныеЧасти.Количество());
	ЗапросыПоДокументуТекст1 = Новый Массив(ТабличныеЧасти.Количество());
	ЗапросыПоДокументуТекст2 = Новый Массив(ТабличныеЧасти.Количество());
	
	Индекс = 0;
	Пока Индекс < ЗапросыПоДокументу.Количество() Цикл
		
		ЗапросыПоДокументу[Индекс] = Новый Запрос;
		
		Если ИмяДокумента = "ПриемНаРаботуВОрганизацию" Тогда
			ЗапросыПоДокументуТекст1[Индекс] = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(Работники.Сотрудник, Документ.Сотрудник) КАК Сотрудник,
			|	Документ.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	Документ.ПриемНаРаботуВОрганизацию." + ТабличныеЧасти[Индекс].Имя + " КАК Документ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
			|		ПО Документ.Физлицо = Работники.УдалитьФизлицо
			|			И Документ.Ссылка = Работники.Регистратор
			|			И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
			|			И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|		ГДЕ
			|			Документ.Ссылка = &Приказ
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
			ЗапросыПоДокументуТекст2[Индекс] = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(Работники.Сотрудник, Документ.Сотрудник) КАК Сотрудник,
			|	Документ.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	Документ.ПриемНаРаботуВОрганизацию." + ТабличныеЧасти[Индекс].Имя + " КАК Документ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
			|		ПО Документ.Физлицо = Работники.УдалитьФизлицо
			|			И Документ.Ссылка = Работники.Регистратор
			|			И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
			|			И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|		ГДЕ
			|			Документ.Ссылка = &Приказ
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
		Иначе
			ЗапросыПоДокументуТекст1[Индекс] = 
			"ВЫБРАТЬ
			|	Работники.Сотрудник КАК Сотрудник,
			|	Документ.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
			|		ПО Документ." + ПолеФизлица + " = Работники.УдалитьФизлицо
			|			И Документ.УдалитьПриказ = Работники.Регистратор
			|			И Документ.УдалитьПриказ.Организация = Работники.ОбособленноеПодразделение
			|			И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|ГДЕ
			|	Документ.Ссылка = &Приказ
			|	//УСЛОВИЕ_НА_ВИДРАСЧЕТА
			|	//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	РаботникиОрганизаций.Сотрудник,
			|	Периоды.НомерСтроки
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			МИНИМУМ(ПериодыВсе.Период) КАК Период,
			|			ПериодыВсе.Физлицо КАК Физлицо,
			|			ПериодыВсе.Организация КАК Организация,
			|			ПериодыВсе.НомерСтроки КАК НомерСтроки
			|		ИЗ
			|			(ВЫБРАТЬ
			|				МАКСИМУМ(Работники.Период) КАК Период,
			|				Документ." + ПолеФизлица + " КАК Физлицо,
			|				Документ.Ссылка.Организация КАК Организация,
			|				Документ.НомерСтроки КАК НомерСтроки
			|			ИЗ
			|				Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|					ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
			|					ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизлица + "
			|						И Документ.УдалитьПриказ = Даты.УдалитьПриказ
			|						И Документ.Ссылка = Даты.Ссылка";
			КонецЕсли;
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
			|					ПО Документ." + ПолеФизлица + " = Работники.УдалитьФизлицо
			|						И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
			|						И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|						И Документ.Ссылка = &Приказ
			|						И Документ.УдалитьПриказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка)";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|						И Работники.Период <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
			Иначе
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|						И Работники.Период <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
			КонецЕсли;
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|						//УСЛОВИЕ_НА_ВИДРАСЧЕТА
			|						//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
			|			
			|			СГРУППИРОВАТЬ ПО
			|				Документ." + ПолеФизлица + ",
			|				Документ.Ссылка.Организация,
			|				Документ.НомерСтроки
			|			
			|			ОБЪЕДИНИТЬ
			|			
			|			ВЫБРАТЬ
			|				МАКСИМУМ(Работники.Период),
			|				Документ." + ПолеФизлица + ",
			|				Документ.Ссылка.Организация,
			|				Документ.НомерСтроки
			|			ИЗ
			|				Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|					ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
			|					ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизлица + "
			|						И Документ.УдалитьПриказ = Даты.УдалитьПриказ
			|						И Документ.Ссылка = Даты.Ссылка";
			КонецЕсли;
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
			|					ПО Документ." + ПолеФизлица + " = Работники.УдалитьФизлицо
			|						И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
			|						И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|						И Документ.Ссылка = &Приказ
			|						И Документ.УдалитьПриказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка)";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|						И Работники.Период > " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
			Иначе
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|						И Работники.Период > " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
			КонецЕсли;
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|						//УСЛОВИЕ_НА_ВИДРАСЧЕТА
			|						//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
			|			
			|			СГРУППИРОВАТЬ ПО
			|				Документ." + ПолеФизлица + ",
			|				Документ.Ссылка.Организация,
			|				Документ.НомерСтроки) КАК ПериодыВсе
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ПериодыВсе.Физлицо,
			|			ПериодыВсе.Организация,
			|			ПериодыВсе.НомерСтроки) КАК Периоды
			|		ПО РаботникиОрганизаций.УдалитьФизлицо = Периоды.Физлицо
			|			И РаботникиОрганизаций.ОбособленноеПодразделение = Периоды.Организация
			|			И РаботникиОрганизаций.Период = Периоды.Период
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПриказыДоДокумента.Сотрудник,
			|	ПриказыДоДокумента.НомерСтроки
			|ИЗ
			|	(ВЫБРАТЬ
			|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник КАК Сотрудник,
			|		Периоды.НомерСтроки КАК НомерСтроки
			|	ИЗ
			|		(ВЫБРАТЬ
			|			МАКСИМУМ(НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ)) КАК Период,
			|			Документ." + ПолеФизлица + " КАК Физлицо,
			|			Документ.Ссылка.Организация КАК Организация,
			|			Документ.НомерСтроки КАК НомерСтроки
			|		ИЗ
			|			Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|				ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
			|				ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизлица + "
			|					И Документ.УдалитьПриказ = Даты.УдалитьПриказ
			|					И Документ.Ссылка = Даты.Ссылка";
			КонецЕсли;
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
			|				ПО Документ." + ПолеФизлица + " = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
			|					И Документ.Ссылка.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация
			|					И Документ.Ссылка = &Приказ
			|					И Документ.УдалитьПриказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка)";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|					И НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ) <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
			Иначе
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|					И НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ) <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
			КонецЕсли;
			ЗапросыПоДокументуТекст1[Индекс] = ЗапросыПоДокументуТекст1[Индекс] + "
			|					//УСЛОВИЕ_НА_ВИДРАСЧЕТА
			|					//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
			|		
			|		СГРУППИРОВАТЬ ПО
			|			Документ." + ПолеФизлица + ",
			|			Документ.Ссылка.Организация,
			|			Документ.НомерСтроки) КАК Периоды
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
			|			ПО (Периоды.Период = НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ))
			|				И Периоды.Физлицо = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
			|				И Периоды.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация) КАК ПриказыДоДокумента
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
			ЗапросыПоДокументуТекст2[Индекс] = 
			"ВЫБРАТЬ
			|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
			|	Периоды.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			МИНИМУМ(ПериодыВсе.Период) КАК Период,
			|			ПериодыВсе.Физлицо КАК Физлицо,
			|			ПериодыВсе.Организация КАК Организация,
			|			ПериодыВсе.НомерСтроки КАК НомерСтроки
			|		ИЗ
			|			(ВЫБРАТЬ
			|				МАКСИМУМ(Работники.Период) КАК Период,
			|				Документ." + ПолеФизлица + " КАК Физлицо,
			|				Документ.Ссылка.Организация КАК Организация,
			|				Документ.НомерСтроки КАК НомерСтроки
			|			ИЗ
			|				Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
			|					ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизлица + "
			|						И Документ.УдалитьПриказ = Даты.УдалитьПриказ
			|						И Документ.Ссылка = Даты.Ссылка";
			КонецЕсли;
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
			|					ПО Документ." + ПолеФизлица + " = Работники.УдалитьФизлицо
			|						И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
			|						И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|						И Документ.Ссылка = &Приказ
			|						И Документ.УдалитьПриказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка)";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|						И Работники.Период <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
			Иначе
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|						И Работники.Период <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
			КонецЕсли;
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|						//УСЛОВИЕ_НА_ВИДРАСЧЕТА
			|						//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
			|			
			|			СГРУППИРОВАТЬ ПО
			|				Документ." + ПолеФизлица + ",
			|				Документ.Ссылка.Организация,
			|				Документ.НомерСтроки
			|			
			|			ОБЪЕДИНИТЬ
			|			
			|			ВЫБРАТЬ
			|				МАКСИМУМ(Работники.Период),
			|				Документ." + ПолеФизлица + ",
			|				Документ.Ссылка.Организация,
			|				Документ.НомерСтроки
			|			ИЗ
			|				Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
			|					ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизлица + "
			|						И Документ.УдалитьПриказ = Даты.УдалитьПриказ
			|						И Документ.Ссылка = Даты.Ссылка";
			КонецЕсли;
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
			|					ПО Документ." + ПолеФизлица + " = Работники.УдалитьФизлицо
			|						И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
			|						И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|						И Документ.Ссылка = &Приказ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|						И Работники.Период > " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
			Иначе
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|						И Работники.Период > " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
			КонецЕсли;
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|						//УСЛОВИЕ_НА_ВИДРАСЧЕТА
			|						//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
			|			
			|			СГРУППИРОВАТЬ ПО
			|				Документ." + ПолеФизлица + ",
			|				Документ.Ссылка.Организация,
			|				Документ.НомерСтроки) КАК ПериодыВсе
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ПериодыВсе.Физлицо,
			|			ПериодыВсе.Организация,
			|			ПериодыВсе.НомерСтроки) КАК Периоды
			|		ПО РаботникиОрганизаций.УдалитьФизлицо = Периоды.Физлицо
			|			И РаботникиОрганизаций.ОбособленноеПодразделение = Периоды.Организация
			|			И РаботникиОрганизаций.Период = Периоды.Период
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПриказыДоДокумента.Сотрудник,
			|	ПриказыДоДокумента.НомерСтроки
			|ИЗ
			|	(ВЫБРАТЬ
			|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник КАК Сотрудник,
			|		Периоды.НомерСтроки КАК НомерСтроки
			|	ИЗ
			|		(ВЫБРАТЬ
			|			МАКСИМУМ(НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ)) КАК Период,
			|			Документ." + ПолеФизлица + " КАК Физлицо,
			|			Документ.Ссылка.Организация КАК Организация,
			|			Документ.НомерСтроки КАК НомерСтроки
			|		ИЗ
			|			Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|				ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
			|				ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизлица + "
			|					И Документ.УдалитьПриказ = Даты.УдалитьПриказ
			|					И Документ.Ссылка = Даты.Ссылка";
			КонецЕсли;
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
			|				ПО Документ." + ПолеФизлица + " = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
			|					И Документ.Ссылка.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация
			|					И Документ.Ссылка = &Приказ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					И НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ) <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
			Иначе
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					И НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ) <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
			КонецЕсли;
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					//УСЛОВИЕ_НА_ВИДРАСЧЕТА
			|					//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
			|		
			|		СГРУППИРОВАТЬ ПО
			|			Документ." + ПолеФизлица + ",
			|			Документ.Ссылка.Организация,
			|			Документ.НомерСтроки) КАК Периоды
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
			|			ПО (Периоды.Период = НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ))
			|				И Периоды.Физлицо = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
			|				И Периоды.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация) КАК ПриказыДоДокумента
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
		КонецЕсли;
		
		Если ИмяДокумента = "СдельныйНаряд" Тогда
			ЗапросыПоДокументуТекст1[Индекс] = СтрЗаменить(ЗапросыПоДокументуТекст1[Индекс], "//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД", "И Документ.Ссылка.ОтражатьВБухгалтерскомУчете");
			ЗапросыПоДокументуТекст2[Индекс] = СтрЗаменить(ЗапросыПоДокументуТекст2[Индекс], "//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД", "И Документ.Ссылка.ОтражатьВБухгалтерскомУчете");
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		ПоддержкаВнутреннегоСовместительства = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Выборка.Организация].ПоддержкаВнутреннегоСовместительства;
		
		Для Индекс = 0 По ЗапросыПоДокументу.Количество() - 1 Цикл
			//Если ПоддержкаВнутреннегоСовместительства Тогда
				ЗапросыПоДокументу[Индекс].Текст = ЗапросыПоДокументуТекст1[Индекс];
			//Иначе
			//	ЗапросыПоДокументу[Индекс].Текст = ЗапросыПоДокументуТекст2[Индекс];
			//КонецЕсли;
		КонецЦикла;
		
		#Если Клиент Тогда
			Состояние("Документ." + ИмяДокумента + НСтр("ru='.ТабличныеЧасти. Обрабатывается документ ';uk='.ТабличныеЧасти. Обробляється документ '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Для Индекс = 0 По ЗапросыПоДокументу.Количество() - 1 Цикл
			ЗапросыПоДокументу[Индекс].УстановитьПараметр("Приказ",	Выборка.Документ);
			
			ВыборкаПоДокументу = ЗапросыПоДокументу[Индекс].Выполнить().Выбрать();
			
			Пока ВыборкаПоДокументу.Следующий() Цикл
				Строка = ДокументОбъект[ТабличныеЧасти[Индекс].Имя].Найти(ВыборкаПоДокументу.НомерСтроки, "НомерСтроки");
				Если Не Назначение Тогда
					Строка.Сотрудник = ВыборкаПоДокументу.Сотрудник;				
				Иначе
					Строка.Назначение = ВыборкаПоДокументу.Сотрудник;
					Если ЗначениеЗаполнено(Строка.Назначение.ОсновноеНазначение) Тогда
						Строка.Сотрудник = Строка.Назначение.ОсновноеНазначение;
					Иначе
						Строка.Сотрудник = Строка.Назначение;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьДокументаОрганизацийБЕЗПриказа(ПолеФизлица, ТабличныеЧасти, ПолеДаты, ИмяДокумента, ПериодНаКонецМесяца = Ложь, ПолеФизЛицаДаты="Физлицо")
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка.Организация КАК Организация,
	|	Документ.Ссылка КАК Документ
	|ИЗ
	|	Документ." + ИмяДокумента + "." + ТабличныеЧасти[0].Имя + " КАК Документ
	|ГДЕ
	|	Документ.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ.Ссылка.Дата";
	
	ЗапросыПоДокументу = Новый Массив(ТабличныеЧасти.Количество());
	ЗапросыПоДокументуТекст1 = Новый Массив(ТабличныеЧасти.Количество());
	ЗапросыПоДокументуТекст2 = Новый Массив(ТабличныеЧасти.Количество());
	
	Индекс = 0;
	Пока Индекс < ЗапросыПоДокументу.Количество() Цикл
		
		ЗапросыПоДокументу[Индекс] = Новый Запрос;
		
		ЗапросыПоДокументуТекст2[Индекс] = 
			"ВЫБРАТЬ
			|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
			|	Периоды.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			МИНИМУМ(ПериодыВсе.Период) КАК Период,
			|			ПериодыВсе.Физлицо КАК Физлицо,
			|			ПериодыВсе.Организация КАК Организация,
			|			ПериодыВсе.НомерСтроки КАК НомерСтроки
			|		ИЗ
			|			(ВЫБРАТЬ
			|				МАКСИМУМ(Работники.Период) КАК Период,
			|				Документ." + ПолеФизлица + " КАК Физлицо,
			|				Документ.Ссылка.Организация КАК Организация,
			|				Документ.НомерСтроки КАК НомерСтроки
			|			ИЗ
			|				Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
			|					ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизЛицаДаты + "
			//|						И Документ.УдалитьПриказ = Даты.УдалитьПриказ
			|						И Документ.Ссылка = Даты.Ссылка";
			КонецЕсли;
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
			|					ПО Документ." + ПолеФизлица + " = Работники.УдалитьФизлицо
			|						И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
			|						И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|						И Документ.Ссылка = &Приказ
			//|						И Документ.УдалитьПриказ = ЗНАЧЕНИЕ(Документ.ПриемНаРаботуВОрганизацию.ПустаяСсылка)
			|";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|						И Работники.Период <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
			Иначе
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|						И Работники.Период <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
			КонецЕсли;
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|						//УСЛОВИЕ_НА_ВИДРАСЧЕТА
			|						//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
			|			
			|			СГРУППИРОВАТЬ ПО
			|				Документ." + ПолеФизлица + ",
			|				Документ.Ссылка.Организация,
			|				Документ.НомерСтроки
			|			
			|			ОБЪЕДИНИТЬ
			|			
			|			ВЫБРАТЬ
			|				МАКСИМУМ(Работники.Период),
			|				Документ." + ПолеФизлица + ",
			|				Документ.Ссылка.Организация,
			|				Документ.НомерСтроки
			|			ИЗ
			|				Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
			|					ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизЛицаДаты + "
			//|						И Документ.УдалитьПриказ = Даты.УдалитьПриказ
			|						И Документ.Ссылка = Даты.Ссылка";
			КонецЕсли;
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
			|					ПО Документ." + ПолеФизлица + " = Работники.УдалитьФизлицо
			|						И Документ.Ссылка.Организация = Работники.ОбособленноеПодразделение
			|						И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|						И Документ.Ссылка = &Приказ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|						И Работники.Период > " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
			Иначе
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|						И Работники.Период > " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
			КонецЕсли;
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|						//УСЛОВИЕ_НА_ВИДРАСЧЕТА
			|						//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
			|			
			|			СГРУППИРОВАТЬ ПО
			|				Документ." + ПолеФизлица + ",
			|				Документ.Ссылка.Организация,
			|				Документ.НомерСтроки) КАК ПериодыВсе
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ПериодыВсе.Физлицо,
			|			ПериодыВсе.Организация,
			|			ПериодыВсе.НомерСтроки) КАК Периоды
			|		ПО РаботникиОрганизаций.УдалитьФизлицо = Периоды.Физлицо
			|			И РаботникиОрганизаций.ОбособленноеПодразделение = Периоды.Организация
			|			И РаботникиОрганизаций.Период = Периоды.Период
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПриказыДоДокумента.Сотрудник,
			|	ПриказыДоДокумента.НомерСтроки
			|ИЗ
			|	(ВЫБРАТЬ
			|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник КАК Сотрудник,
			|		Периоды.НомерСтроки КАК НомерСтроки
			|	ИЗ
			|		(ВЫБРАТЬ
			|			МАКСИМУМ(НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ)) КАК Период,
			|			Документ." + ПолеФизлица + " КАК Физлицо,
			|			Документ.Ссылка.Организация КАК Организация,
			|			Документ.НомерСтроки КАК НомерСтроки
			|		ИЗ
			|			Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Документ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|				ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].ТаблицаСПолемДата + " КАК Даты
			|				ПО Документ." + ПолеФизлица + " = Даты." + ПолеФизЛицаДаты + "
			//|					И Документ.УдалитьПриказ = Даты.УдалитьПриказ
			|					И Документ.Ссылка = Даты.Ссылка";
			КонецЕсли;
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
			|				ПО Документ." + ПолеФизлица + " = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
			|					И Документ.Ссылка.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация
			|					И Документ.Ссылка = &Приказ";
			Если ТабличныеЧасти[Индекс].Имя <> ТабличныеЧасти[Индекс].ТаблицаСПолемДата Тогда
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					И НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ) <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Даты." + ПолеДаты + ", МЕСЯЦ)", "Даты." + ПолеДаты);
			Иначе
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					И НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ) <= " + ?(ПериодНаКонецМесяца, "КОНЕЦПЕРИОДА(Документ." + ПолеДаты + ", МЕСЯЦ)", "Документ." + ПолеДаты);
			КонецЕсли;
			ЗапросыПоДокументуТекст2[Индекс] = ЗапросыПоДокументуТекст2[Индекс] + "
			|					//УСЛОВИЕ_НА_ВИДРАСЧЕТА
			|					//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД
			|		
			|		СГРУППИРОВАТЬ ПО
			|			Документ." + ПолеФизлица + ",
			|			Документ.Ссылка.Организация,
			|			Документ.НомерСтроки) КАК Периоды
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
			|			ПО (Периоды.Период = НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата, ДЕНЬ))
			|				И Периоды.Физлицо = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо
			|				И Периоды.Организация = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация) КАК ПриказыДоДокумента
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
		Если ИмяДокумента = "СдельныйНаряд" Тогда
			ЗапросыПоДокументуТекст1[Индекс] = СтрЗаменить(ЗапросыПоДокументуТекст1[Индекс], "//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД", "И Документ.Ссылка.ОтражатьВБухгалтерскомУчете");
			ЗапросыПоДокументуТекст2[Индекс] = СтрЗаменить(ЗапросыПоДокументуТекст2[Индекс], "//УСЛОВИЕ_НА_СДЕЛЬНЫЙНАРЯД", "И Документ.Ссылка.ОтражатьВБухгалтерскомУчете");
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		
		Для Индекс = 0 По ЗапросыПоДокументу.Количество() - 1 Цикл
			ЗапросыПоДокументу[Индекс].Текст = ЗапросыПоДокументуТекст2[Индекс];
		КонецЦикла;
		
		#Если Клиент Тогда
			Состояние("Документ." + ИмяДокумента + НСтр("ru='.ТабличныеЧасти. Обрабатывается документ ';uk='.ТабличныеЧасти. Обробляється документ '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Для Индекс = 0 По ЗапросыПоДокументу.Количество() - 1 Цикл
			ЗапросыПоДокументу[Индекс].УстановитьПараметр("Приказ",	Выборка.Документ);
			
			ВыборкаПоДокументу = ЗапросыПоДокументу[Индекс].Выполнить().Выбрать();
			
			Пока ВыборкаПоДокументу.Следующий() Цикл
				Строка = ДокументОбъект[ТабличныеЧасти[Индекс].Имя].Найти(ВыборкаПоДокументу.НомерСтроки, "НомерСтроки");
	
				Если ЗначениеЗаполнено(ВыборкаПоДокументу.Сотрудник) Тогда
					Если ЗначениеЗаполнено(ВыборкаПоДокументу.Сотрудник.ОсновноеНазначение) Тогда
						Строка.Сотрудник = ВыборкаПоДокументу.Сотрудник.ОсновноеНазначение;
					Иначе
						Строка.Сотрудник = ВыборкаПоДокументу.Сотрудник;
					КонецЕсли;
				КонецЕсли;	
	
			КонецЦикла;
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСотрудников()
	
	// сначала регистрируем сотрудников
	РегистрацияСотрудников();
	
	// создание сотрудников для ошибочных данных
	СозданиеСотрудниковДляОшибочныхДанных();

	//////////////////////////////////////////////////////////////
	// Документы
	
	//АттестацияРаботника
	ЗаполнитьДокумент("Дата", "АттестацияРаботника");
	
	//ВводСведенийОПлановыхНачисленияхУдержанияхРаботников
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "ВводСведенийОПлановыхНачисленияхУдержанияхРаботников");
	
	//ВозвратНаРаботу
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Работники", "Работники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "ВозвратНаРаботу");
	
	//ЗаявкаНаОбучение
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОбучающиесяРаботники", "ОбучающиесяРаботники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "ЗаявкаНаОбучение");
	
	//КадровоеПеремещение
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Работники", "Работники"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Работники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "КадровоеПеремещение");
	
	//НачислениеЗарплатыРаботникам
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Начисления"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "НачислениеЗарплатыРаботникам");
	
	//ОтсутствиеНаРаботе
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Работники", "Работники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "ОтсутствиеНаРаботе");
	
	//ПрохождениеКурсаОбучения
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "ОбучающиесяРаботники", "ОбучающиесяРаботники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "ПрохождениеКурсаОбучения");
	
	//РезультатИспытательногоСрока
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "УдалитьРаботники", "УдалитьРаботники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "РезультатИспытательногоСрока");
	
	//ПланированиеОтпуска
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Работники", "Работники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "ПланированиеОтпуска");
	
	//ПриемНаРаботу
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Работники", "Работники"));
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Начисления", "Работники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "ПриемНаРаботу");
	
	//СдельныйНаряд
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Исполнители", "Исполнители"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "СдельныйНаряд");
	
	//Событие
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "РаботникиОрганизации", "РаботникиОрганизации"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "Событие");
	
	//Увольнение
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Работники", "Работники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "Увольнение");
	
	//УчастиеВМероприятиях
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Работники", "Работники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "УчастиеВМероприятиях");
	
	//УчетЗаработкаРаботников
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, ТаблицаСПолемДата", "Работники", "Работники"));
	ЗаполнитьТабличнуюЧастьДокумента(МассивТЧ, "ВводСведенийОбУчетеЗаработкаРаботников");
	
	
КонецПроцедуры

Процедура РегистрацияСотрудников()
	
	// создание сотрудников по приказам о приеме на работу
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТрудовойДоговор",		Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	Запрос.УстановитьПараметр("ДоговорУправленческий",	Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
	Запрос.УстановитьПараметр("ОсновноеМестоРаботы",	Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	Запрос.УстановитьПараметр("Совместительство",		Перечисления.ВидыЗанятостиВОрганизации.Совместительство);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Работники.Регистратор КАК Приказ,
	|	Работники.УдалитьТабельныйНомер КАК Код,
	|	Работники.ФизЛицо.Наименование КАК Наименование,
	|	Работники.ФизЛицо КАК Физлицо,
	|	ИСТИНА КАК Актуальность
	|ИЗ
	|	РегистрСведений.Работники КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Работники КАК ПриемНаРаботуРаботники
	|		ПО Работники.НомерСтроки = ПриемНаРаботуРаботники.НомерСтроки
	|			И Работники.Регистратор = ПриемНаРаботуРаботники.Ссылка
	|			И (Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА (НЕ РаботникиОсновноеМесто.Сотрудник ЕСТЬ NULL )
	|					ТОГДА РаботникиОсновноеМесто.Сотрудник
	|				КОГДА (НЕ РаботникиСовместительство.Сотрудник ЕСТЬ NULL )
	|					ТОГДА РаботникиСовместительство.Сотрудник
	|				КОГДА (НЕ СотрудникиДУ.Сотрудник ЕСТЬ NULL )
	|					ТОГДА СотрудникиДУ.Сотрудник
	|				ИНАЧЕ NULL
	|			КОНЕЦ КАК Сотрудник,
	|			ВЫБОР
	|				КОГДА (НЕ РаботникиОсновноеМесто.Физлицо ЕСТЬ NULL )
	|					ТОГДА РаботникиОсновноеМесто.Физлицо
	|				КОГДА (НЕ РаботникиСовместительство.Физлицо ЕСТЬ NULL )
	|					ТОГДА РаботникиСовместительство.Физлицо
	|				КОГДА (НЕ СотрудникиДУ.Физлицо ЕСТЬ NULL )
	|					ТОГДА СотрудникиДУ.Физлицо
	|				ИНАЧЕ NULL
	|			КОНЕЦ КАК Физлицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(СотрудникиДУ.Ссылка) КАК Сотрудник,
	|				СотрудникиДУ.Физлицо КАК Физлицо
	|			ИЗ
	|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
	|			ГДЕ
	|				СотрудникиДУ.ВидДоговора = &ДоговорУправленческий
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СотрудникиДУ.Физлицо) КАК СотрудникиДУ
	|				ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
	|					РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо
	|				ИЗ
	|					РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|						,
	|						Сотрудник.ВидДоговора = &ТрудовойДоговор
	|							И Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы) КАК РаботникиОсновноеМесто
	|				ГДЕ
	|					РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					РаботникиОсновноеМесто.Сотрудник.Физлицо) КАК РаботникиОсновноеМесто
	|					ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|						МАКСИМУМ(РаботникиСовместительство.Сотрудник) КАК Сотрудник,
	|						РаботникиСовместительство.Сотрудник.Физлицо КАК Физлицо
	|					ИЗ
	|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|							,
	|							Сотрудник.ВидДоговора = &ТрудовойДоговор
	|								И Сотрудник.ВидЗанятости = &Совместительство) КАК РаботникиСовместительство
	|					ГДЕ
	|						РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					
	|					СГРУППИРОВАТЬ ПО
	|						РаботникиСовместительство.Сотрудник.Физлицо) КАК РаботникиСовместительство
	|					ПО РаботникиОсновноеМесто.Физлицо = РаботникиСовместительство.Физлицо
	|				ПО СотрудникиДУ.Физлицо = РаботникиОсновноеМесто.Физлицо) КАК Сотрудники
	|		ПО Работники.ФизЛицо = Сотрудники.Физлицо
	|ГДЕ
	|	Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|	И ВЫБОР
	|			КОГДА ПриемНаРаботуРаботники.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|				ТОГДА Сотрудники.Сотрудник
	|			ИНАЧЕ ПриемНаРаботуРаботники.Сотрудник
	|		КОНЕЦ ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приказ,
	|	Работники.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Приказ") Цикл
		#Если Клиент Тогда
			Состояние(НСтр("ru='Сотрудники компании: ';uk='Співробітники компанії: '") + Выборка.Приказ);
		#КонецЕсли
		
		Пока Выборка.Следующий() Цикл
			Сотрудник = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Сотрудник, Выборка);
			Сотрудник.ВидДоговора	= Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий;
			Сотрудник.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СозданиеСотрудниковДляОшибочныхДанных()
	
	// создание сотрудников по приказам о приеме на работу
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТрудовойДоговор",		Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	Запрос.УстановитьПараметр("ДоговорУправленческий",	Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
	Запрос.УстановитьПараметр("ОсновноеМестоРаботы",	Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	Запрос.УстановитьПараметр("Совместительство",		Перечисления.ВидыЗанятостиВОрганизации.Совместительство);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СобытиеРаботникиОрганизации.Ссылка КАК Приказ,
	|	СобытиеРаботникиОрганизации.ФизЛицо.Наименование КАК Наименование,
	|	СобытиеРаботникиОрганизации.ФизЛицо КАК Физлицо,
	|	ИСТИНА КАК Актуальность
	|ИЗ
	|	Документ.Событие.РаботникиОрганизации КАК СобытиеРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА (НЕ РаботникиОсновноеМесто.Сотрудник ЕСТЬ NULL )
	|					ТОГДА РаботникиОсновноеМесто.Сотрудник
	|				КОГДА (НЕ РаботникиСовместительство.Сотрудник ЕСТЬ NULL )
	|					ТОГДА РаботникиСовместительство.Сотрудник
	|				КОГДА (НЕ СотрудникиДУ.Сотрудник ЕСТЬ NULL )
	|					ТОГДА СотрудникиДУ.Сотрудник
	|				ИНАЧЕ NULL
	|			КОНЕЦ КАК Сотрудник,
	|			ВЫБОР
	|				КОГДА (НЕ РаботникиОсновноеМесто.Физлицо ЕСТЬ NULL )
	|					ТОГДА РаботникиОсновноеМесто.Физлицо
	|				КОГДА (НЕ РаботникиСовместительство.Физлицо ЕСТЬ NULL )
	|					ТОГДА РаботникиСовместительство.Физлицо
	|				КОГДА (НЕ СотрудникиДУ.Физлицо ЕСТЬ NULL )
	|					ТОГДА СотрудникиДУ.Физлицо
	|				ИНАЧЕ NULL
	|			КОНЕЦ КАК Физлицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(СотрудникиДУ.Ссылка) КАК Сотрудник,
	|				СотрудникиДУ.Физлицо КАК Физлицо
	|			ИЗ
	|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
	|			ГДЕ
	|				СотрудникиДУ.ВидДоговора = &ДоговорУправленческий
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СотрудникиДУ.Физлицо) КАК СотрудникиДУ
	|				ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
	|					РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо
	|				ИЗ
	|					РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|						,
	|						Сотрудник.ВидДоговора = &ТрудовойДоговор
	|							И Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы) КАК РаботникиОсновноеМесто
	|				ГДЕ
	|					РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					РаботникиОсновноеМесто.Сотрудник.Физлицо) КАК РаботникиОсновноеМесто
	|					ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|						МАКСИМУМ(РаботникиСовместительство.Сотрудник) КАК Сотрудник,
	|						РаботникиСовместительство.Сотрудник.Физлицо КАК Физлицо
	|					ИЗ
	|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|							,
	|							Сотрудник.ВидДоговора = &ТрудовойДоговор
	|								И Сотрудник.ВидЗанятости = &Совместительство) КАК РаботникиСовместительство
	|					ГДЕ
	|						РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					
	|					СГРУППИРОВАТЬ ПО
	|						РаботникиСовместительство.Сотрудник.Физлицо) КАК РаботникиСовместительство
	|					ПО РаботникиОсновноеМесто.Физлицо = РаботникиСовместительство.Физлицо
	|				ПО СотрудникиДУ.Физлицо = РаботникиОсновноеМесто.Физлицо) КАК Сотрудники
	|		ПО СобытиеРаботникиОрганизации.ФизЛицо = Сотрудники.Физлицо
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СобытиеРаботникиОрганизации.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|				ТОГДА Сотрудники.Сотрудник
	|			ИНАЧЕ СобытиеРаботникиОрганизации.Сотрудник
	|		КОНЕЦ ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	СобытиеРаботникиОрганизации.Ссылка.Дата,
	|	СобытиеРаботникиОрганизации.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Приказ") Цикл
		#Если Клиент Тогда
			Состояние(НСтр("ru='Сотрудники компании: ';uk='Співробітники компанії: '") + Выборка.Приказ);
		#КонецЕсли
		
		Пока Выборка.Следующий() Цикл
			Сотрудник = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Сотрудник, Выборка);
			Сотрудник.ВидДоговора	= Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий;
			Сотрудник.Код			= "0000000000";
			Сотрудник.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокумент(ПолеДаты, ИмяДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка КАК Документ,
	|	Документ.Дата
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК Документ
	|ГДЕ
	|	Документ.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ.Дата";
	
	ЗапросыПоДокументу = Новый Массив(1);
	ЗапросыПоДокументуТекст1 = Новый Массив(1);
	ЗапросыПоДокументуТекст2 = Новый Массив(1);
	
	Индекс = 0;
	Пока Индекс < ЗапросыПоДокументу.Количество() Цикл
		ЗапросыПоДокументу[Индекс] = Новый Запрос;
		
		ЗапросыПоДокументу[Индекс].Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(Работники.Период) КАК Период,
		|		Документ.Физлицо КАК Физлицо
		|	ИЗ
		|		Документ." + ИмяДокумента + " КАК Документ
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
		|			ПО Документ.Физлицо = Работники.ФизЛицо
		|				И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
		|				И Работники.Период <= Документ." + ПолеДаты + "
		|	ГДЕ
		|		Документ.Ссылка = &Приказ
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Документ.Физлицо) КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
		|		ПО Периоды.Период = Работники.Период
		|			И Периоды.Физлицо = Работники.ФизЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокСотрудников.Сотрудник КАК Сотрудник,
		|			СписокСотрудников.Физлицо КАК Физлицо
		|		ИЗ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
		|				РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
		|				1 КАК Приоритет
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|						,
		|						Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|							И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|							И Сотрудник.Физлицо В
		|								(ВЫБРАТЬ
		|									Док.Физлицо
		|								ИЗ
		|									Документ." + ИмяДокумента + " КАК Док
		|								ГДЕ
		|									Док.Ссылка = &Приказ)) КАК РаботникиОсновноеМесто
		|			ГДЕ
		|				РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиОсновноеМесто.Сотрудник.Физлицо
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				МАКСИМУМ(РаботникиСовместительство.Сотрудник),
		|				РаботникиСовместительство.Сотрудник.Физлицо,
		|				2
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|						,
		|						Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|							И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
		|							И Сотрудник.Физлицо В
		|								(ВЫБРАТЬ
		|									Док.Физлицо
		|								ИЗ
		|									Документ." + ИмяДокумента + " КАК Док
		|								ГДЕ
		|									Док.Ссылка = &Приказ)) КАК РаботникиСовместительство
		|			ГДЕ
		|				РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиСовместительство.Сотрудник.Физлицо
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				МАКСИМУМ(СотрудникиДУ.Ссылка),
		|				СотрудникиДУ.Физлицо,
		|				3
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
		|			ГДЕ
		|				(СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|						ИЛИ СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор))
		|				И СотрудникиДУ.Физлицо В
		|						(ВЫБРАТЬ
		|							Док.Физлицо
		|						ИЗ
		|							Документ." + ИмяДокумента + " КАК Док
		|						ГДЕ
		|							Док.Ссылка = &Приказ)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СотрудникиДУ.Физлицо) КАК СписокСотрудников
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СписокФизическихЛиц.Физлицо КАК Физлицо,
		|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
		|				ИЗ
		|					(ВЫБРАТЬ
		|						РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
		|						1 КАК Приоритет
		|					ИЗ
		|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|								,
		|								Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|									И Сотрудник.Физлицо В
		|										(ВЫБРАТЬ
		|											Док.Физлицо
		|										ИЗ
		|											Документ." + ИмяДокумента + " КАК Док
		|										ГДЕ
		|											Док.Ссылка = &Приказ)) КАК РаботникиОсновноеМесто
		|					ГДЕ
		|						РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						РаботникиСовместительство.Сотрудник.Физлицо,
		|						2
		|					ИЗ
		|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|								,
		|								Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
		|									И Сотрудник.Физлицо В
		|										(ВЫБРАТЬ
		|											Док.Физлицо
		|										ИЗ
		|											Документ." + ИмяДокумента + " КАК Док
		|										ГДЕ
		|											Док.Ссылка = &Приказ)) КАК РаботникиСовместительство
		|					ГДЕ
		|						РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						СотрудникиДУ.Физлицо,
		|						3
		|					ИЗ
		|						Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
		|					ГДЕ
		|						(СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|								ИЛИ СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор))
		|						И СотрудникиДУ.Физлицо В
		|								(ВЫБРАТЬ
		|									Док.Физлицо
		|								ИЗ
		|									Документ." + ИмяДокумента + " КАК Док
		|								ГДЕ
		|									Док.Ссылка = &Приказ)) КАК СписокФизическихЛиц
		|				
		|				СГРУППИРОВАТЬ ПО
		|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
		|				ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
		|					И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет) КАК Сотрудники
		|		ПО Периоды.Физлицо = Сотрудники.Физлицо";
			
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Документ." + ИмяДокумента + НСтр("ru='. Обрабатывается документ ';uk='. Обробляється документ '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Индекс = 0;
		Пока Индекс < ЗапросыПоДокументу.Количество() Цикл
			ЗапросыПоДокументу[Индекс].УстановитьПараметр("Приказ",	Выборка.Документ);
			
			ВыборкаПоДокументу = ЗапросыПоДокументу[Индекс].Выполнить().Выбрать();
			
			Пока ВыборкаПоДокументу.Следующий() Цикл
				ДокументОбъект.Сотрудник = ВыборкаПоДокументу.Сотрудник;
			КонецЦикла;
			
			Индекс = Индекс + 1;
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьДокумента(ТабличныеЧасти, ИмяДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка КАК Документ
	|ИЗ
	|	Документ." + ИмяДокумента + "." + ТабличныеЧасти[0].Имя + " КАК Документ
	|ГДЕ
	|	Документ.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ.Ссылка.Дата";
	
	ЗапросыПоДокументу = Новый Массив(ТабличныеЧасти.Количество());
	ЗапросыПоДокументуТекст = Новый Массив(ТабличныеЧасти.Количество());
	
	Индекс = 0;
	Пока Индекс < ЗапросыПоДокументу.Количество() Цикл
		ЗапросыПоДокументу[Индекс] = Новый Запрос;
		
		ЗапросыПоДокументу[Индекс].УстановитьПараметр("ТрудовойДоговор",		Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
		ЗапросыПоДокументу[Индекс].УстановитьПараметр("ДоговорУправленческий",	Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
		ЗапросыПоДокументу[Индекс].УстановитьПараметр("ОсновноеМестоРаботы",	Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
		ЗапросыПоДокументу[Индекс].УстановитьПараметр("Совместительство",		Перечисления.ВидыЗанятостиВОрганизации.Совместительство);
		
		ЗапросыПоДокументу[Индекс].Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник,
		|	Док.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Док
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВЫБОР
		|				КОГДА (НЕ РаботникиОсновноеМесто.Сотрудник ЕСТЬ NULL )
		|					ТОГДА РаботникиОсновноеМесто.Сотрудник
		|				КОГДА (НЕ РаботникиСовместительство.Сотрудник ЕСТЬ NULL )
		|					ТОГДА РаботникиСовместительство.Сотрудник
		|				КОГДА (НЕ СотрудникиДУ.Сотрудник ЕСТЬ NULL )
		|					ТОГДА СотрудникиДУ.Сотрудник
		|				ИНАЧЕ NULL
		|			КОНЕЦ КАК Сотрудник,
		|			ВЫБОР
		|				КОГДА (НЕ РаботникиОсновноеМесто.Физлицо ЕСТЬ NULL )
		|					ТОГДА РаботникиОсновноеМесто.Физлицо
		|				КОГДА (НЕ РаботникиСовместительство.Физлицо ЕСТЬ NULL )
		|					ТОГДА РаботникиСовместительство.Физлицо
		|				КОГДА (НЕ СотрудникиДУ.Физлицо ЕСТЬ NULL )
		|					ТОГДА СотрудникиДУ.Физлицо
		|				ИНАЧЕ NULL
		|			КОНЕЦ КАК Физлицо
		|		ИЗ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(СотрудникиДУ.Ссылка) КАК Сотрудник,
		|				СотрудникиДУ.Физлицо КАК Физлицо
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
		|			ГДЕ
		|				СотрудникиДУ.ВидДоговора = &ДоговорУправленческий
		|				И СотрудникиДУ.Физлицо В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Док.ФизЛицо
		|						ИЗ
		|							Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Док
		|						ГДЕ
		|							Док.Ссылка = &Приказ)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СотрудникиДУ.Физлицо) КАК СотрудникиДУ
		|				ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
		|					РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо
		|				ИЗ
		|					РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|						,
		|						Сотрудник.ВидДоговора = &ТрудовойДоговор
		|							И Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы
		|							И Сотрудник.Физлицо В
		|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|									Док.ФизЛицо
		|								ИЗ
		|									Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Док
		|								ГДЕ
		|									Док.Ссылка = &Приказ)) КАК РаботникиОсновноеМесто
		|				ГДЕ
		|					РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|				
		|				СГРУППИРОВАТЬ ПО
		|					РаботникиОсновноеМесто.Сотрудник.Физлицо) КАК РаботникиОсновноеМесто
		|					ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|						МАКСИМУМ(РаботникиСовместительство.Сотрудник) КАК Сотрудник,
		|						РаботникиСовместительство.Сотрудник.Физлицо КАК Физлицо
		|					ИЗ
		|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|							,
		|							Сотрудник.ВидДоговора = &ТрудовойДоговор
		|								И Сотрудник.ВидЗанятости = &Совместительство
		|								И Сотрудник.Физлицо В
		|									(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|										Док.ФизЛицо
		|									ИЗ
		|										Документ." + ИмяДокумента + "." + ТабличныеЧасти[Индекс].Имя + " КАК Док
		|									ГДЕ
		|										Док.Ссылка = &Приказ)) КАК РаботникиСовместительство
		|					ГДЕ
		|						РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					
		|					СГРУППИРОВАТЬ ПО
		|						РаботникиСовместительство.Сотрудник.Физлицо) КАК РаботникиСовместительство
		|					ПО РаботникиОсновноеМесто.Физлицо = РаботникиСовместительство.Физлицо
		|				ПО СотрудникиДУ.Физлицо = РаботникиОсновноеМесто.Физлицо) КАК Сотрудники
		|		ПО Док.ФизЛицо = Сотрудники.Физлицо
		|ГДЕ
		|	Док.Ссылка = &Приказ";
		Если ИмяДокумента = "СдельныйНаряд" Тогда
		ЗапросыПоДокументу[Индекс].Текст = ЗапросыПоДокументу[Индекс].Текст + "
		|	И Док.Ссылка.ОтражатьВБухгалтерскомУчете = ЛОЖЬ";
		КонецЕсли;
		ЗапросыПоДокументу[Индекс].Текст = ЗапросыПоДокументу[Индекс].Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Документ." + ИмяДокумента + НСтр("ru='.ТабличныеЧасти. Обрабатывается документ ';uk='.ТабличныеЧасти. Обробляється документ '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Для Индекс = 0 По ЗапросыПоДокументу.Количество() - 1 Цикл
			ЗапросыПоДокументу[Индекс].УстановитьПараметр("Приказ",	Выборка.Документ);
			
			ВыборкаПоДокументу = ЗапросыПоДокументу[Индекс].Выполнить().Выбрать();
			
			Пока ВыборкаПоДокументу.Следующий() Цикл
				Строка = ДокументОбъект[ТабличныеЧасти[Индекс].Имя].Найти(ВыборкаПоДокументу.НомерСтроки, "НомерСтроки");
				Строка.Сотрудник = ВыборкаПоДокументу.Сотрудник;
			КонецЦикла;
			
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДоговорников()
	
	// сначала регистрируем договорников
	РегистрацияДоговорников();
	
	//////////////////////////////////////////////////////////////
	// Регистры
	ЗаполнитьНаборЗаписейДоговорников("ПериодРегистрации", РегистрыРасчета, "УдалитьДополнительныеНачисленияРаботниковОрганизаций");
	ЗаполнитьНаборЗаписейДоговорников("ПериодРегистрации", РегистрыРасчета, "ВзносыВФонды");
	ЗаполнитьНаборЗаписейДоговорников("ПериодРегистрации", РегистрыРасчета, "ОтражениеЗарплатыОрганизацийВРеглУчете");
	ЗаполнитьНаборЗаписейДоговорников("ПериодРегистрации", РегистрыРасчета, "УдержанияРаботниковОрганизаций");
	ЗаполнитьНаборЗаписейДоговорников("Период", РегистрыСведений, "ВзносыВФондыРаботниковОрганизаций");
	ЗаполнитьНаборЗаписейДоговорников("Период", РегистрыСведений, "УчетПлановыхНачисленийРаботниковОрганизаций");
	ЗаполнитьНаборЗаписейДоговорников("Период", РегистрыНакопления, "ВзаиморасчетыПоВзносамВФонды");
	ЗаполнитьНаборЗаписейДоговорников("Период", РегистрыНакопления, "ВзаиморасчетыПоНДФЛ");
	ЗаполнитьНаборЗаписейДоговорников("Период", РегистрыНакопления, "ВзаиморасчетыСРаботникамиОрганизаций");
	
		
	//////////////////////////////////////////////////////////////
	// Документы
	ЗаполнитьТабличнуюЧастьДокументаДоговорников("НачислениеЗарплатыРаботникамОрганизаций", "УдалитьДополнительныеНачисления");
	ЗаполнитьТабличнуюЧастьДокументаДоговорников("ОтражениеЗарплатыВРеглУчете", "УдалитьДополнительныеНачисления");
	ЗаполнитьТабличнуюЧастьДокументаДоговорников("ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций", "Взносы", "ФизЛицо");
	ЗаполнитьТабличнуюЧастьДокументаДоговорников("ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций", "ВзносыФОТ", "ФизЛицо");
	ЗаполнитьТабличнуюЧастьДокументаДоговорников("ЗарплатаКВыплатеОрганизаций", "УдалитьЗарплата", "ФизЛицо");
	ЗаполнитьТабличнуюЧастьДокументаДоговорников("РегистрацияРазовыхНачисленийРаботниковОрганизаций", "ОсновныеНачисления", "ФизЛицо");
	ЗаполнитьТабличнуюЧастьДокументаДоговорников("РегистрацияРазовыхНачисленийРаботниковОрганизаций", "УдалитьДополнительныеНачисления", "ФизЛицо");
	ЗаполнитьТабличнуюЧастьДокументаДоговорников("РегистрацияРазовыхУдержанийРаботниковОрганизаций", "Удержания", "ФизЛицо");
	ЗаполнитьТабличнуюЧастьДокументаДоговорников("ВводСведенийОбУчетеОсновногоЗаработкаРаботниковОрганизаций", "РаботникиОрганизации", "ФизЛицо");
		
КонецПроцедуры

Процедура РегистрацияДоговорников()
	
	ВалютаРегламентированногоУчета	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	// создание сотрудников по приказам о приеме на работу
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Ссылка КАК Документ
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)";
	
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу.Текст =
	"ВЫБРАТЬ
	|	ДоговорНаВыполнениеРаботСФизЛицом.ВидДоговора,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо КАК Физлицо,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо.Наименование КАК Наименование,
	|	ДоговорНаВыполнениеРаботСФизЛицом.Организация КАК Организация,
	|	ДоговорНаВыполнениеРаботСФизЛицом.Организация КАК ОбособленноеПодразделение,
	|	ИСТИНА КАК Актуальность,
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо = СотрудникиОрганизаций.Физлицо
	|			И ДоговорНаВыполнениеРаботСФизЛицом.Организация = СотрудникиОрганизаций.Организация
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Ссылка = &Приказ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние(НСтр("ru='Работающие по договору подряда. Обрабатывается документ ';uk='Працюють за договором підряду. Обробляється документ '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		НачатьТранзакцию();
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		НаборЗаписейПлановыеНачисления = РегистрыСведений.ПлановыеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписейПлановыеНачисления.Отбор.Регистратор.Значение	= Выборка.Документ;
		НаборЗаписейПлановыеНачисления.ОбменДанными.Загрузка		= Истина;
		
		НаборЗаписейРеглУчет = РегистрыСведений.УчетПлановыхНачисленийРаботниковОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписейРеглУчет.Отбор.Регистратор.Значение	= Выборка.Документ;
		НаборЗаписейРеглУчет.ОбменДанными.Загрузка		= Истина;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ", Выборка.Документ);
	
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Следующий() Тогда
			ИспользуютсяНачисленияВВалюте	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоДокументу.Организация, "ИспользуютсяНачисленияВВалюте");
			
			Если ВыборкаПоДокументу.Сотрудник = NULL Тогда
				Сотрудник = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(Сотрудник, ВыборкаПоДокументу);
				Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда;
				Сотрудник.Наименование = Сотрудник.Наименование + " (дог. подр.)";
				Сотрудник.ПостфиксНаименования = "(дог. подр.)"; 
				
				Сотрудник.Код = Сотрудник.ПолучитьОчереднойТабельныйНомер();
				Сотрудник.Записать();
				СотрудникСсылка = Сотрудник.Ссылка;
			Иначе
				СотрудникСсылка = ВыборкаПоДокументу.Сотрудник;
			КонецЕсли;
			
			ДокументОбъект.Сотрудник = СотрудникСсылка;
			
			Движение = НаборЗаписейПлановыеНачисления.Добавить();
			Если ДокументОбъект.ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.Ежемесячно Тогда
				Движение.Период				= ДокументОбъект.ДатаНачала;
			Иначе
				Движение.Период				= НачалоМесяца(ДокументОбъект.ДатаОкончания);
			КонецЕсли;
			
			// Измерения
			Движение.Сотрудник				= ДокументОбъект.Сотрудник;
			Движение.Организация			= ВыборкаПоДокументу.Организация;
			Движение.ДокументОснование		= Выборка.Документ;
			Движение.ВидРасчетаИзмерение	= ДокументОбъект.ВидРасчета;
			
			// Ресурсы
			Движение.ВидРасчета				= ДокументОбъект.ВидРасчета;
			Движение.Актуальность			= Истина;
			Движение.Показатель1			= ДокументОбъект.СуммаЗаРаботу;
			Если Не ИспользуютсяНачисленияВВалюте Тогда
				Движение.Валюта1			= ВалютаРегламентированногоУчета;
			Иначе
				Движение.Валюта1			= ДокументОбъект.ВалютаДокумента;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументОбъект.ДатаОкончания) Тогда
				Движение = НаборЗаписейПлановыеНачисления.Добавить();
				Движение.Период 	= КонецДня(ДокументОбъект.ДатаОкончания);
				
				// Измерения
				Движение.Сотрудник				= ДокументОбъект.Сотрудник;
				Движение.Организация			= ВыборкаПоДокументу.Организация;
				Движение.ДокументОснование		= Выборка.Документ;
				Движение.ВидРасчетаИзмерение	= ДокументОбъект.ВидРасчета;
				
				// Ресурсы
				Движение.ВидРасчета				= ДокументОбъект.ВидРасчета;
				Движение.Актуальность			= Ложь;
			КонецЕсли;
			
			
			НаборЗаписейПлановыеНачисления.Записать();
			НаборЗаписейПлановыеНачисления.Очистить();
			
			Если Не ДокументОбъект.СпособОтраженияВБухучете.Пустая() Тогда
				Движение = НаборЗаписейРеглУчет.Добавить();
				
				Если ДокументОбъект.ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.Ежемесячно Тогда
					Движение.Период							= ДокументОбъект.ДатаНачала;
				Иначе
					Движение.Период							= НачалоМесяца(ДокументОбъект.ДатаОкончания);
				КонецЕсли;
				
				// Измерения
				Движение.Сотрудник							= ДокументОбъект.Сотрудник;
				Движение.Организация						= ВыборкаПоДокументу.Организация;
				Движение.ВидРасчета							= ДокументОбъект.ВидРасчета;
				Движение.ДокументОснование					= Выборка.Документ;
				
				// Ресурсы
				Движение.СпособОтраженияВБухучете			= ДокументОбъект.СпособОтраженияВБухучете;
				
				НаборЗаписейРеглУчет.Записать();
				НаборЗаписейРеглУчет.Очистить();
			КонецЕсли;
			
		КонецЕсли;
		
		ДокументОбъект.Записать();
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНаборЗаписейДоговорников(ПолеДаты, МенеджерРегистров, ИмяРегистра)
	
	Если ТипЗнч(МенеджерРегистров) = Тип("РегистрыСведенийМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрСведений";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыНакопленияМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрНакопления";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыБухгалтерииМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрБухгалтерии";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыРасчетаМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрРасчета";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Приказ,
	|	Регистр." + ПолеДаты + "
	|ИЗ
	|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|ГДЕ
	|	Регистр.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|	ИЛИ Регистр.Сотрудник = Неопределено
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистр." + ПолеДаты;
	
	ЗапросПоДокументу = Новый Запрос;
			
	Если ИмяРегистра = "УдалитьДополнительныеНачисленияРаботниковОрганизаций" Тогда
		ЗапросПоДокументу.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(Договорники.Сотрудник, СотрудникиОрганизаций.Ссылка) КАК Сотрудник1,
		|	ЕСТЬNULL(Договорники.Сотрудник, СотрудникиОрганизаций.Ссылка) КАК Назначение1,
		|	Регистр.НомерСтроки КАК НомерСтроки,
		|	Договорники.Ссылка КАК ДокументОснование,
		|	Регистр.*
		|ИЗ
		|	РегистрРасчета.УдалитьДополнительныеНачисленияРаботниковОрганизаций КАК Регистр
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК Договорники
		|		ПО Регистр.УдалитьФизЛицо = Договорники.ФизЛицо
		|			И Регистр.ВидРасчета = Договорники.ВидРасчета
		|			И Регистр.Размер = Договорники.СуммаЗаРаботу
		|			И (ВЫБОР
		|				КОГДА Договорники.ХарактерОплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыПоДоговору.ОднократноВКонцеСрока)
		|					ТОГДА НАЧАЛОПЕРИОДА(Регистр.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Договорники.ДатаОкончания, МЕСЯЦ)
		|				ИНАЧЕ НАЧАЛОПЕРИОДА(Регистр.ПериодРегистрации, МЕСЯЦ) МЕЖДУ НАЧАЛОПЕРИОДА(Договорники.ДатаНачала, МЕСЯЦ) И КОНЕЦПЕРИОДА(Договорники.ДатаОкончания, МЕСЯЦ)
		|			КОНЕЦ)
		|			И (Регистр.Организация = ВЫБОР
		|				КОГДА Договорники.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Договорники.Организация
		|				ИНАЧЕ Договорники.Организация.ГоловнаяОрганизация
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО Регистр.УдалитьФизЛицо = СотрудникиОрганизаций.Физлицо
		|			И Регистр.Организация = СотрудникиОрганизаций.Организация
		|			И 	СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)
		|ГДЕ
		|	Регистр.Регистратор = &Приказ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	Иначе
		ЗапросПоДокументу.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник1,
		|	Регистр.НомерСтроки КАК НомерСтроки,
		|	Регистр.*
		|ИЗ
		|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО Регистр.УдалитьФизЛицо = СотрудникиОрганизаций.Физлицо
		|			И Регистр.Организация = СотрудникиОрганизаций.Организация
		|			И СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)
		|ГДЕ
		|	Регистр.Регистратор = &Приказ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние(ПрефиксИмениТаблицы + "." + ИмяРегистра + НСтр("ru='. Обрабатывается набор записей ';uk='. Обробляється набір записів '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ",	Выборка.Приказ);
		
		НаборЗаписей = МенеджерРегистров[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Приказ;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаПоДокументу);
			Если НоваяЗапись.Сотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка()
			   ИЛИ НоваяЗапись.Сотрудник = Неопределено Тогда
			   НоваяЗапись.Сотрудник = ВыборкаПоДокументу.Сотрудник1;
			КонецЕсли;   
			Если ИмяРегистра = "УдалитьДополнительныеНачисленияРаботниковОрганизаций" Тогда
				Если НоваяЗапись.Назначение = Справочники.СотрудникиОрганизаций.ПустаяСсылка()
				   ИЛИ НоваяЗапись.Назначение = Неопределено Тогда
				   НоваяЗапись.Назначение = ВыборкаПоДокументу.Назначение1;
			   КонецЕсли;
			 КонецЕсли;  

		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьДокументаДоговорников(ИмяДокумента, ИмяТабличнойЧасти, ИмяФизЛицо = "УдалитьФизЛицо")
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК Документ
	|ИЗ
	|	Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + " КАК Док
	|ГДЕ
	|	Док.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Ссылка.Дата";
	
	ЗапросПоДокументу = Новый Запрос;
					
	Если ИмяДокумента = "НачислениеЗарплатыРаботникамОрганизаций" Тогда
		
		ЗапросПоДокументу.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(Договорники.Сотрудник, СотрудникиОрганизаций.Ссылка) КАК Сотрудник,
		|	ЕСТЬNULL(Договорники.Сотрудник, СотрудникиОрганизаций.Ссылка) КАК Назначение,
		|	Док.НомерСтроки КАК НомерСтроки,
		|	Договорники.Ссылка КАК ДокументОснование
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.УдалитьДополнительныеНачисления КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК Договорники
		|		ПО Док.УдалитьФизЛицо = Договорники.ФизЛицо
		|			И Док.ВидРасчета = Договорники.ВидРасчета
		|			И Док.показатель1 = Договорники.СуммаЗаРаботу
		|			И (ВЫБОР
		|				КОГДА Договорники.ХарактерОплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыПоДоговору.ОднократноВКонцеСрока)
		|					ТОГДА Док.Ссылка.ПериодРегистрации = НАЧАЛОПЕРИОДА(Договорники.ДатаОкончания, МЕСЯЦ)
		|				ИНАЧЕ Док.Ссылка.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(Договорники.ДатаНачала, МЕСЯЦ) И КОНЕЦПЕРИОДА(Договорники.ДатаОкончания, МЕСЯЦ)
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА Док.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Док.Ссылка.Организация
		|				ИНАЧЕ Док.Ссылка.Организация.ГоловнаяОрганизация
		|			КОНЕЦ = ВЫБОР
		|				КОГДА Договорники.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Договорники.Организация
		|				ИНАЧЕ Договорники.Организация.ГоловнаяОрганизация
		|			КОНЕЦ)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО Док.УдалитьФизЛицо = СотрудникиОрганизаций.Физлицо
		|			И  СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)
		|			И (ВЫБОР
		|				КОГДА Док.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Док.Ссылка.Организация
		|				ИНАЧЕ Док.Ссылка.Организация.ГоловнаяОрганизация
		|			КОНЕЦ = СотрудникиОрганизаций.Организация)
		|ГДЕ
		|	Док.Ссылка = &Приказ
		//|	И Док.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки УБЫВ";
		
	Иначе
		ЗапросПоДокументу.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	Док.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + " КАК Док
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО Док."+ИмяФизЛицо+" = СотрудникиОрганизаций.Физлицо
		|			И СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)
		|			И (ВЫБОР
		|				КОГДА Док.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Док.Ссылка.Организация
		|				ИНАЧЕ Док.Ссылка.Организация.ГоловнаяОрганизация
		|			КОНЕЦ = СотрудникиОрганизаций.Организация)
		|ГДЕ
		|	Док.Ссылка = &Приказ
		|   И Док.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
		//|	И Док.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + НСтр("ru='. Обрабатывается документ ';uk='. Обробляється документ '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ",	Выборка.Документ);
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			Если ИмяДокумента = "НачислениеЗарплатыРаботникамОрганизаций" Тогда
				Строка = ДокументОбъект[ИмяТабличнойЧасти].Найти(ВыборкаПоДокументу.НомерСтроки, "НомерСтроки");
				Строка.ДокументОснование	= ВыборкаПоДокументу.ДокументОснование;
				Строка.Назначение	= ВыборкаПоДокументу.Сотрудник;

				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Сотрудник", Справочники.СотрудникиОрганизаций.ПустаяСсылка());
				ПараметрыОтбора.Вставить("Физлицо", ВыборкаПоДокументу.Сотрудник.ФизЛицо);
				НайденныеСтроки = ДокументОбъект["РаботникиОрганизации"].НайтиСтроки(ПараметрыОтбора);
				Для Каждого СтрокаД Из НайденныеСтроки Цикл
					СтрокаД.Сотрудник = ВыборкаПоДокументу.Сотрудник;
				КонецЦикла;
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Сотрудник", Справочники.СотрудникиОрганизаций.ПустаяСсылка());
				ПараметрыОтбора.Вставить("УдалитьФизлицо", ВыборкаПоДокументу.Сотрудник.ФизЛицо);
				НайденныеСтроки = ДокументОбъект["Удержания"].НайтиСтроки(ПараметрыОтбора);
				Для Каждого СтрокаД Из НайденныеСтроки Цикл
					СтрокаД.Сотрудник = ВыборкаПоДокументу.Сотрудник;
				КонецЦикла;
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Сотрудник", Справочники.СотрудникиОрганизаций.ПустаяСсылка());
				ПараметрыОтбора.Вставить("УдалитьФизлицо", ВыборкаПоДокументу.Сотрудник.ФизЛицо);
				НайденныеСтроки = ДокументОбъект["НДФЛ"].НайтиСтроки(ПараметрыОтбора);
				Для Каждого СтрокаД Из НайденныеСтроки Цикл
					СтрокаД.Сотрудник = ВыборкаПоДокументу.Сотрудник;
				КонецЦикла;	
                НайденныеСтроки = ДокументОбъект["Взносы"].НайтиСтроки(ПараметрыОтбора);
				Для Каждого СтрокаД Из НайденныеСтроки Цикл
					СтрокаД.Сотрудник = ВыборкаПоДокументу.Сотрудник;
				КонецЦикла;	
				НайденныеСтроки = ДокументОбъект["ВзносыФОТ"].НайтиСтроки(ПараметрыОтбора);
				Для Каждого СтрокаД Из НайденныеСтроки Цикл
					СтрокаД.Сотрудник = ВыборкаПоДокументу.Сотрудник;
				КонецЦикла;	
			ИначеЕсли ИмяДокумента = "ОтражениеЗарплатыВРеглУчете" Тогда
				Строка = ДокументОбъект[ИмяТабличнойЧасти].Найти(ВыборкаПоДокументу.НомерСтроки, "НомерСтроки");	
				Строка.Назначение	= ВыборкаПоДокументу.Сотрудник;
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Сотрудник", Справочники.СотрудникиОрганизаций.ПустаяСсылка());
				ПараметрыОтбора.Вставить("Физлицо", ВыборкаПоДокументу.Сотрудник.ФизЛицо);
				НайденныеСтроки = ДокументОбъект["РаботникиОрганизации"].НайтиСтроки(ПараметрыОтбора);
				Для Каждого СтрокаД Из НайденныеСтроки Цикл
					СтрокаД.Сотрудник = ВыборкаПоДокументу.Сотрудник;
				КонецЦикла;
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Сотрудник", Справочники.СотрудникиОрганизаций.ПустаяСсылка());
				ПараметрыОтбора.Вставить("УдалитьФизлицо", ВыборкаПоДокументу.Сотрудник.ФизЛицо);
				НайденныеСтроки = ДокументОбъект["НДФЛ"].НайтиСтроки(ПараметрыОтбора);
				Для Каждого СтрокаД Из НайденныеСтроки Цикл
					СтрокаД.Сотрудник = ВыборкаПоДокументу.Сотрудник;
				КонецЦикла;	
                НайденныеСтроки = ДокументОбъект["Взносы"].НайтиСтроки(ПараметрыОтбора);
				Для Каждого СтрокаД Из НайденныеСтроки Цикл
					СтрокаД.Сотрудник = ВыборкаПоДокументу.Сотрудник;
				КонецЦикла;	
				НайденныеСтроки = ДокументОбъект["ВзносыФОТ"].НайтиСтроки(ПараметрыОтбора);
				Для Каждого СтрокаД Из НайденныеСтроки Цикл
					СтрокаД.Сотрудник = ВыборкаПоДокументу.Сотрудник;
				КонецЦикла;	
			Иначе
				Строка = ДокументОбъект[ИмяТабличнойЧасти].Найти(ВыборкаПоДокументу.НомерСтроки, "НомерСтроки");
				
			КонецЕсли;
			
			Строка.Сотрудник	= ВыборкаПоДокументу.Сотрудник;
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьДокументовДолжностей(ИмяДокумента, ИмяТабличнойЧасти, ИмяРеквизитаДолжность)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК Документ
	|ИЗ
	|	Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + " КАК Док
	|ГДЕ
	|	Док."+ИмяРеквизитаДолжность+" = ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)
	|	И Док.Удалить"+ИмяРеквизитаДолжность+" <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Ссылка.Дата";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу.Текст =
	"ВЫБРАТЬ
	|	ДолжностиОрганизаций.Ссылка КАК "+ИмяРеквизитаДолжность+",
	|	Док.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + " КАК Док
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
	|		ПО Док.Удалить"+ИмяРеквизитаДолжность+" = ДолжностиОрганизаций.Должность
	|ГДЕ
	|	Док.Ссылка = &Приказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + НСтр("ru='. Обрабатывается документ ';uk='. Обробляється документ '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ",	Выборка.Документ);
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			Строка = ДокументОбъект[ИмяТабличнойЧасти].Найти(ВыборкаПоДокументу.НомерСтроки, "НомерСтроки");
			ЗаполнитьЗначенияСвойств(Строка, ВыборкаПоДокументу);
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьРегистрыОтФизлицаПриказа()
	
	ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "РаботникиОрганизаций"); 
	
	//ВзносыВФондыРаботниковОрганизаций
    ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "ВзносыВФондыРаботниковОрганизаций",,ложь);
	
	// ГрафикОтпусковОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "ГрафикОтпусковОрганизаций");
	
	//ИндексированныйДоходСовместителей
	ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "ИндексированныйДоходСовместителей",,ложь);
	
	// КоэффициентыПовышенияОкладов
	ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "КоэффициентыПовышенияОкладов");	
	
	//ЛьготыРаботниковОрганизаций
    ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "ЛьготыРаботниковОрганизаций",,ложь);
	
	// НамеченныеСобытияПоПерсоналуОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "УдалитьНамеченныеСобытияПоПерсоналуОрганизаций");
	

	// ПлановыеНачисленияРаботниковОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "ПлановыеНачисленияРаботниковОрганизаций");
	
	//ПлановыеУдержанияРаботниковОрганизаций
    ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "ПлановыеУдержанияРаботниковОрганизаций",,ложь);
	
	//УчетПлановыхНачисленийРаботниковОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "УчетПлановыхНачисленийРаботниковОрганизаций");
	
	// СостояниеРаботниковОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "СостояниеРаботниковОрганизаций");
	
	
	// УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете
	ОчиститьРегистрОтФизлицаПриказа(РегистрыСведений, "УчетОсновногоЗаработкаРаботниковОрганизаций");
	
	//ВзаиморасчетыПоВзносамВФонды
	ОчиститьРегистрОтФизлицаПриказа(РегистрыНакопления, "ВзаиморасчетыПоВзносамВФонды",,ложь);

	//ВзаиморасчетыПоНДФЛ
	ОчиститьРегистрОтФизлицаПриказа(РегистрыНакопления, "ВзаиморасчетыПоНДФЛ", ,ложь);
	
	//ВзаиморасчетыСРаботникамиОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыНакопления, "ВзаиморасчетыСРаботникамиОрганизаций",,ложь);
	
	//ПогашениеЗаймовРаботникамиОрганизаций
    ОчиститьРегистрОтФизлицаПриказа(РегистрыНакопления, "ПогашениеЗаймовРаботникамиОрганизаций",,ложь);
	
	// ФактическаяВыработкаРаботниковОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыНакопления, "ФактическаяВыработкаРаботниковОрганизаций");
		
	//ДополнительныеНачисленияРаботниковОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыРасчета, "УдалитьДополнительныеНачисленияРаботниковОрганизаций");
		
	// ОсновныеНачисленияРаботниковОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыРасчета, "ОсновныеНачисленияРаботниковОрганизаций");
	
	//ОтражениеЗарплатыОрганизацийВРеглУчете
	ОчиститьРегистрОтФизлицаПриказа(РегистрыРасчета, "ОтражениеЗарплатыОрганизацийВРеглУчете");
	
	//РасчетСреднегоЗаработка
	ОчиститьРегистрОтФизлицаПриказа(РегистрыРасчета, "РасчетСреднегоЗаработка");
	
	// УдержанияРаботниковОрганизаций
	ОчиститьРегистрОтФизлицаПриказа(РегистрыРасчета, "УдержанияРаботниковОрганизаций",,ложь);
	
	//ВзносыВФонды
	ОчиститьРегистрОтФизлицаПриказа(РегистрыРасчета, "ВзносыВФонды",,ложь);
	
КонецПроцедуры

Процедура ОчиститьРегистрОтФизлицаПриказа(МенеджерРегистров, ИмяРегистра, ОчищатьФизлицо = Истина, ОчищатьПриказ = Истина)
	
	Если ТипЗнч(МенеджерРегистров) = Тип("РегистрыСведенийМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрСведений";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыНакопленияМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрНакопления";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыБухгалтерииМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрБухгалтерии";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыРасчетаМенеджер") Тогда
		ПрефиксИмениТаблицы	= "РегистрРасчета";
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Очищается регистр: ';uk='Очищається регістр: '") + ПрефиксИмениТаблицы + "." + ИмяРегистра);
	#КонецЕсли
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ФизлицоПустаяСсылка",	Справочники.ФизическиеЛица.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПриказПустаяСсылка",		Документы.ПриемНаРаботуВОрганизацию.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Организация КАК Организация,
	|	Регистр.Регистратор КАК Приказ
	|ИЗ
	|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|ГДЕ
	|	Регистр.Сотрудник <> ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|	И Регистр.УдалитьФизлицо <> &ФизлицоПустаяСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистр.Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = МенеджерРегистров[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Приказ;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		НаборЗаписей.Прочитать();
		
		Для Номер = 0 По НаборЗаписей.Количество() - 1 Цикл
			Строка = НаборЗаписей[Номер];
			Если ЗначениеЗаполнено(Строка.Сотрудник) Тогда
				Если ОчищатьПриказ Тогда
					Строка.УдалитьПриказ		= 0;
				КонецЕсли;	
				Если ОчищатьФизлицо Тогда
					Строка.УдалитьФизлицо	= 0;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры // ОчиститьРегистрОтФизлицаПриказа()

Процедура ЗаполнитьДолжностьВРегистреРаботники()

	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистр.Регистратор КАК Регистратор,
	|	Регистр.НомерСтроки КАК НомерСтроки,
	|	РегистрПрежниеДанные.Должность КАК Должность,
	|	Регистр.Период,
	|	Регистр.Активность,
	|	Регистр.ФизЛицо,
	|	Регистр.Подразделение,
	|	Регистр.ЗанимаемыхСтавок,
	|	Регистр.ГрафикРаботы,
	|	Регистр.УдалитьДолжность,
	|	Регистр.УдалитьТабельныйНомер,
	|	Регистр.ПричинаИзмененияСостояния,
	|	Регистр.ПричинаУвольнения
	|ИЗ
	|	РегистрСведений.Работники КАК Регистр
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Регистр.Регистратор КАК Регистратор,
	|			Регистр.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РегистрПрежниеДанные.Период) КАК ДатаДвижения
	|		ИЗ
	|			РегистрСведений.Работники КАК Регистр
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК РегистрПрежниеДанные
	|				ПО Регистр.ФизЛицо = РегистрПрежниеДанные.ФизЛицо
	|					И Регистр.Период > РегистрПрежниеДанные.Период
	|		ГДЕ
	|			Регистр.Регистратор ССЫЛКА Документ.Увольнение
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Регистр.Регистратор,
	|			Регистр.НомерСтроки) КАК ДатыПоследнихДвижений
	|		ПО Регистр.Регистратор = ДатыПоследнихДвижений.Регистратор
	|			И Регистр.НомерСтроки = ДатыПоследнихДвижений.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК РегистрПрежниеДанные
	|		ПО ДатыПоследнихДвижений.ДатаДвижения = РегистрПрежниеДанные.Период
	|			И Регистр.ФизЛицо = РегистрПрежниеДанные.ФизЛицо
	|ГДЕ
	|	Регистр.Регистратор ССЫЛКА Документ.Увольнение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	ВыборкаПоРегистратору = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.Работники.СоздатьНаборЗаписей();
	
	Пока ВыборкаПоРегистратору.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоРегистратору.Регистратор);
		
		Пока ВыборкаПоРегистратору.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоРегистратору);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДолжностьИТабельныйНомерВРегистреРаботники()

Процедура ЗаполнитьДолжностьВРегистреРаботникиОрганизации()

	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистр.Регистратор КАК Регистратор,
	|	Регистр.НомерСтроки КАК НомерСтроки,
	|	РегистрПрежниеДанные.Должность КАК Должность,
	|	Регистр.Период,
	|	Регистр.Активность,
	|	Регистр.Сотрудник,
	|	Регистр.Организация,
	|	Регистр.УдалитьФизлицо,
	|	Регистр.УдалитьПриказ,
	|	Регистр.ЗанимаемыхСтавок,
	|	Регистр.ПодразделениеОрганизации,
	|	РегистрПрежниеДанные.ГрафикРаботы,
	|	Регистр.УдалитьТабельныйНомер,
	|	Регистр.ПричинаИзмененияСостояния,
	|	Регистр.ОбособленноеПодразделение
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК Регистр
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Регистр.Регистратор КАК Регистратор,
	|			Регистр.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РегистрПрежниеДанные.Период) КАК ДатаДвижения
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций КАК Регистр
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РегистрПрежниеДанные
	|				ПО Регистр.Сотрудник = РегистрПрежниеДанные.Сотрудник
	|					И Регистр.Период > РегистрПрежниеДанные.Период
	|		ГДЕ
	|			Регистр.Регистратор ССЫЛКА Документ.УвольнениеИзОрганизаций
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Регистр.Регистратор,
	|			Регистр.НомерСтроки) КАК ДатыПоследнихДвижений
	|		ПО Регистр.Регистратор = ДатыПоследнихДвижений.Регистратор
	|			И Регистр.НомерСтроки = ДатыПоследнихДвижений.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РегистрПрежниеДанные
	|		ПО ДатыПоследнихДвижений.ДатаДвижения = РегистрПрежниеДанные.Период
	|			И Регистр.Сотрудник = РегистрПрежниеДанные.Сотрудник
	|ГДЕ
	|	Регистр.Регистратор ССЫЛКА Документ.УвольнениеИзОрганизаций
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	
	НаборЗаписей = РегистрыСведений.РаботникиОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	ВыборкаПоРегистратору = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоРегистратору.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоРегистратору.Регистратор);
		
		Пока ВыборкаПоРегистратору.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоРегистратору);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДолжностьИТабельныйНомерВРегистреРаботникиОрганизации()

Процедура ЗаполнитьРеквизитыПоУчетуРабочегоВремени()
	
	СпособРегистрацииВремениРегистрацияДляЧастиСмены = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены;
	СпособРегистрацииВремениРегистрацияДляЦелойСмены = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
	СпособРегистрацииВремениПустой					 = Перечисления.СпособыРегистрацииВремени.ПустаяСсылка();
	
	
	
	// Заполняем реквизит "Вид рабочего времени"  в ПВР "Начисления предприятия"
	#Если Клиент Тогда
		Состояние(НСтр("ru='Заполняется ""Вид рабочего времени "" в плане видов расчета ""Начисления предприятия""';uk='Заповнюється ""Вид робочого часу"" в плані видів розрахунку ""Нарахування підприємства""'"));
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УправленческиеНачисления.Ссылка,
	|	ВЫБОР
	|		КОГДА УправленческиеНачисления.Наименование = ""Больничный""
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Болезнь)
	|		КОГДА УправленческиеНачисления.Наименование = ""Отпуск""
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск)
	|		КОГДА УправленческиеНачисления.Наименование = ""Отсутствие по невыясненной причине""
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам)
	|		КОГДА УправленческиеНачисления.Наименование В (""Сдельная оплата"", ""Почасовая оплата"", ""Оклад"", ""Оклад постоянный"")
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
	|	КОНЕЦ КАК ВидУчетаВремени
	|ИЗ
	|	ПланВидовРасчета.УправленческиеНачисления КАК УправленческиеНачисления
	|ГДЕ
	|	УправленческиеНачисления.Наименование В (""Больничный"", ""Отпуск"", ""Отсутствие по невыясненной причине"", ""Сдельная оплата"", ""Почасовая оплата"", ""Оклад"", ""Оклад постоянный"")
	|	И УправленческиеНачисления.ВидУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеПредприятияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеПредприятияОбъект.ВидУчетаРабочегоВремени = Выборка.ВидУчетаВремени;
		НачислениеПредприятияОбъект.Записать();
	КонецЦикла;
	
	// Заполняем ВидВремени в Плане видов расчета "ОсновныеНачисления".
	#Если Клиент Тогда
		Состояние(НСтр("ru='Заполняется ""Вид времени "" в плане видов расчета ""Основные начисления организации""';uk='Заповнюється ""Вид часу"" в плані видів розрахунку ""Основні нарахування організації""'"));
	#КонецЕсли
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВидВремениПустаяСсылка",	Перечисления.ВидыВремени.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидВремениДополнительное",Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ОсновныеНачисленияОрганизаций.ЗачетОтработанногоВремени,
	|	ОсновныеНачисленияОрганизаций.ЗачетНормыВремени
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.ВидВремени = &ВидВремениПустаяСсылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЗачетОтработанногоВремени = Истина И Выборка.ЗачетНормыВремени=Истина Тогда
			ВидВремениВР = Перечисления.ВидыВремени.ОтработанноеВПределахНормы 
		ИначеЕсли Выборка.ЗачетОтработанногоВремени = Истина И Выборка.ЗачетНормыВремени=Ложь Тогда
			ВидВремениВР = Перечисления.ВидыВремени.ОтработанноеСверхНормы
		ИначеЕсли Выборка.ЗачетОтработанногоВремени = Ложь И Выборка.ЗачетНормыВремени=Истина Тогда
			ВидВремениВР = Перечисления.ВидыВремени.ЦелодневноеНеотработанное 			
		Иначе
			ВидВремениВР =  Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы
		КонецЕсли;
		
		ОсновныеНачисленияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОсновныеНачисленияОбъект.ОбменДанными.Загрузка = Истина;
		ОсновныеНачисленияОбъект.ВидВремени = ВидВремениВР;
		Попытка
			ОсновныеНачисленияОбъект.Записать();
		Исключение
		КонецПопытки;	
	КонецЦикла;
	
	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Заполняются графики работы';uk='Заповнюються графіки роботи'"));
	#КонецЕсли
		
	// Установка значения Реквизита План в Истина в регистре сведений ГрафикиРаботыПоВидамВремени.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы
	|	И (НЕ ГрафикиРаботыПоВидамВремени.План)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГрафикРаботы";
	Выборка = Запрос.Выполнить().Выбрать();
	НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
	ОбщееКоличествоЗаписей = Выборка.Количество();
	ИндексЗаписи = 0;
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Отбор.ГрафикРаботы.Установить(Выборка.ГрафикРаботы);
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.План = Истина;
			Запись.Месяц = НачалоМесяца(Запись.Дата);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		#Если Клиент Тогда
			Состояние("Заполняются графики работы " + Строка(Окр(ИндексЗаписи/ОбщееКоличествоЗаписей*100))+"%");
		#КонецЕсли
	КонецЦикла;
	НаборЗаписей = 0;

	// Заполняем табличную часть ПериодыСмены справочника "ГрафикиРаботы".
	Запрос.УстановитьПараметр("Сменный",			Перечисления.ВидыРабочихГрафиков.Сменный);
	Запрос.УстановитьПараметр("ПустойДеньНедели",	Перечисления.ДниНедели.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрафикиРаботы.Ссылка,
	|	ГрафикиРаботы.ПериодыСмены.(
	|		Ссылка,
	|		НомерСтроки,
	|		ВремяНачала,
	|		ВремяОкончания,
	|		ДеньНедели
	|	),
	|	ГрафикиРаботы.ВидГрафика,
	|	ГрафикиРаботы.ПервыйВыходной,
	|	ГрафикиРаботы.ВторойВыходной
	|ИЗ
	|	Справочник.ГрафикиРаботы КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.ВидГрафика <> &Сменный
	|	И ГрафикиРаботы.ПериодыСмены.ДеньНедели = &ПустойДеньНедели";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТаблицаГрафика = Выборка.ПериодыСмены.Выгрузить();
		
		Если Выборка.ВидГрафика = Перечисления.ВидыРабочихГрафиков.Пятидневка Тогда
			МаксимальноеЗначениеЦикла = 4;
		Иначе
			МаксимальноеЗначениеЦикла = 5;
		КонецЕсли;
		ГрафикиРаботыОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ГрафикиРаботыОбъект.ПериодыСмены.Очистить();
		Для ДеньНедели = 0 По МаксимальноеЗначениеЦикла Цикл
			Если(НЕ Выборка.ПервыйВыходной.Пустая() И (ДеньНедели = Перечисления.ДниНедели.Индекс(Выборка.ПервыйВыходной)))
			ИЛИ (НЕ Выборка.ВторойВыходной.Пустая() И (ДеньНедели = Перечисления.ДниНедели.Индекс(Выборка.ВторойВыходной))) Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого СтрокаТаблицыГрафика Из ТаблицаГрафика Цикл
				СтрокаПериодаСмены = ГрафикиРаботыОбъект.ПериодыСмены.Добавить();
				СтрокаПериодаСмены.ВремяНачала = СтрокаТаблицыГрафика.ВремяНачала;
				СтрокаПериодаСмены.ВремяОкончания = СтрокаТаблицыГрафика.ВремяОкончания;
				СтрокаПериодаСмены.ДеньНедели = Перечисления.ДниНедели[ДеньНедели];
			КонецЦикла;
		КонецЦикла;
		ГрафикиРаботыОбъект.ОбменДанными.Загрузка = Истина;
		ГрафикиРаботыОбъект.Записать();
	КонецЦикла;
	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Устанавливается значение реквизита Способ регистрации времени';uk='Встановлюється значення реквізиту Спосіб реєстрації часу'"));
	#КонецЕсли
	
	// Проставляем СпособРегистрацииВремени в документе РегистрацияРазовыхНачисленийРаботниковОрганизаций.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегистрацияРазовыхНачисленийРаботниковОрганизаций.Ссылка
	               |ИЗ
	               |	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций КАК РегистрацияРазовыхНачисленийРаботниковОрганизаций
	               |ГДЕ
	               |	РегистрацияРазовыхНачисленийРаботниковОрганизаций.СпособРегистрацииВремени = &СпособРегистрацииПустой
				   |
				   |ОБЪЕДИНИТЬ
				   |
				   |ВЫБРАТЬ
	               |	НевыходыВОрганизациях.Ссылка
	               |ИЗ
	               |	Документ.НевыходыВОрганизациях КАК НевыходыВОрганизациях
	               |ГДЕ
	               |	НевыходыВОрганизациях.СпособРегистрацииВремени = &СпособРегистрацииПустой
				   |
				   |ОБЪЕДИНИТЬ
				   |
				   |ВЫБРАТЬ
	               |	ОплатаПоСреднемуЗаработку.Ссылка
	               |ИЗ
	               |	Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднемуЗаработку
	               |ГДЕ
	               |	ОплатаПоСреднемуЗаработку.СпособРегистрацииВремени = &СпособРегистрацииПустой
				   |";
	Запрос.УстановитьПараметр("СпособРегистрацииПустой", СпособРегистрацииВремениПустой);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		Док= ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
		Док.ОбменДанными.Загрузка = Истина;
		Док.СпособРегистрацииВремени = СпособРегистрацииВремениРегистрацияДляЦелойСмены;
		Док.Записать();
	КонецЦикла;
	
	// Устанавливаем новые реквизиты документа СдельныйНаряд
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СдельныйНаряд.Ссылка,
	|	ВЫБОР
	|		КОГДА СдельныйНаряд.ПериодРегистрации = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(СдельныйНаряд.Дата, МЕСЯЦ)
	|		ИНАЧЕ СдельныйНаряд.ПериодРегистрации
	|	КОНЕЦ КАК ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА СдельныйНаряд.ПериодРегистрации = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(СдельныйНаряд.Дата, МЕСЯЦ)
	|		ИНАЧЕ СдельныйНаряд.ДатаНачалаПериода
	|	КОНЕЦ КАК ДатаНачалаПериода
	|ИЗ
	|	Документ.СдельныйНаряд КАК СдельныйНаряд
	|ГДЕ
	|	СдельныйНаряд.СпособВводаДанных = ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПустаяСсылка)";
	
	#Если Клиент Тогда
		ТекстСообщения = НСтр("ru='Обработка документов ""Сдельный наряд на выполненные работы"" (часть 1)';uk='Обробка документів ""Відрядний наряд на виконані роботи"" (частина 1)'");
		Состояние(ТекстСообщения + НСтр("ru=': подготовка данных ...';uk=': підготовка даних ...'"));
	#КонецЕсли
	Выборка = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = Выборка.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + НСтр("ru=': обработано 0 из ';uk=': опрацьовано 0 з '") + ВсегоДоков);
	#КонецЕсли
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
		ДокументОбъект.Записать();
		#Если Клиент Тогда
			Если Номер % 50 = 0 Тогда
				Состояние(ТекстСообщения + НСтр("ru=': обработано ';uk=': опрацьовано '") + Номер + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
			КонецЕсли;
			Номер = Номер + 1;
		#КонецЕсли
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + НСтр("ru=': обработано ';uk=': опрацьовано '") + ВсегоДоков + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
	#КонецЕсли
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФактическаяВыработкаРаботниковОрганизаций.Регистратор КАК Регистратор,
	|	ФактическаяВыработкаРаботниковОрганизаций.Период,
	|	ФактическаяВыработкаРаботниковОрганизаций.Активность,
	|	ФактическаяВыработкаРаботниковОрганизаций.Сотрудник,
	|	ФактическаяВыработкаРаботниковОрганизаций.Организация,
	|	ФактическаяВыработкаРаботниковОрганизаций.УдалитьФизлицо,
	|	ФактическаяВыработкаРаботниковОрганизаций.УдалитьПриказ,
	|	ФактическаяВыработкаРаботниковОрганизаций.Выработка,
	|	ВЫБОР
	|		КОГДА ФактическаяВыработкаРаботниковОрганизаций.СпособВводаДанных = ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ЗаДень)
	|		ИНАЧЕ ФактическаяВыработкаРаботниковОрганизаций.СпособВводаДанных
	|	КОНЕЦ КАК СпособВводаДанных
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ФактическаяВыработкаРаботниковОрганизаций.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработкаРаботниковОрганизаций
	|	ГДЕ
	|		ФактическаяВыработкаРаботниковОрганизаций.СпособВводаДанных = ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПустаяСсылка)) КАК Регистраторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработкаРаботниковОрганизаций
	|		ПО Регистраторы.Регистратор = ФактическаяВыработкаРаботниковОрганизаций.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	ФактическаяВыработкаРаботниковОрганизаций.НомерСтроки";
	
	#Если Клиент Тогда
		ТекстСообщения = НСтр("ru='Обработка документов ""Сдельный наряд на выполненные работы"" (часть 2)';uk='Обробка документів ""Відрядний наряд на виконані роботи"" (частина 2)'");
		Состояние(ТекстСообщения + НСтр("ru=': подготовка данных ...';uk=': підготовка даних ...'"));
	#КонецЕсли
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаРегистраторов.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + НСтр("ru=': обработано 0 из ';uk=': опрацьовано 0 з '") + ВсегоДоков);
	#КонецЕсли
	НаборЗаписей = РегистрыНакопления.ФактическаяВыработкаРаботниковОрганизаций.СоздатьНаборЗаписей();
	Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Пока ВыборкаРегистраторов.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),ВыборкаРегистраторов);
			#Если Клиент Тогда
				Если Номер % 100 = 0 Тогда
					Состояние(ТекстСообщения + НСтр("ru=': обработано ';uk=': опрацьовано '") + Номер + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
				КонецЕсли;
				Номер = Номер + 1;
			#КонецЕсли
		КонецЦикла;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + НСтр("ru=': обработано ';uk=': опрацьовано '") + ВсегоДоков + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
	#КонецЕсли
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФактическаяВыработкаРаботников.Регистратор КАК Регистратор,
	|	ФактическаяВыработкаРаботников.Период,
	|	ФактическаяВыработкаРаботников.Активность,
	|	ФактическаяВыработкаРаботников.Физлицо,
	|	ФактическаяВыработкаРаботников.Выработка,
	|	ВЫБОР
	|		КОГДА ФактическаяВыработкаРаботников.СпособВводаДанных = ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ЗаДень)
	|		ИНАЧЕ ФактическаяВыработкаРаботников.СпособВводаДанных
	|	КОНЕЦ КАК СпособВводаДанных
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ФактическаяВыработкаРаботников.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.ФактическаяВыработкаРаботников КАК ФактическаяВыработкаРаботников
	|	ГДЕ
	|		ФактическаяВыработкаРаботников.СпособВводаДанных = ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПустаяСсылка)) КАК Регистраторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботников КАК ФактическаяВыработкаРаботников
	|		ПО Регистраторы.Регистратор = ФактическаяВыработкаРаботников.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	ФактическаяВыработкаРаботников.НомерСтроки";
	
	#Если Клиент Тогда
		ТекстСообщения = НСтр("ru='Обработка документов ""Сдельный наряд на выполненные работы"" (часть 3)';uk='Обробка документів ""Відрядний наряд на виконані роботи"" (частина 3)'");
		Состояние(ТекстСообщения + НСтр("ru=': подготовка данных ...';uk=': підготовка даних ...'"));
	#КонецЕсли
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаРегистраторов.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + НСтр("ru=': обработано 0 из ';uk=': опрацьовано 0 з '") + ВсегоДоков);
	#КонецЕсли
	НаборЗаписей = РегистрыНакопления.ФактическаяВыработкаРаботников.СоздатьНаборЗаписей();
	Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Пока ВыборкаРегистраторов.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),ВыборкаРегистраторов);
			#Если Клиент Тогда
				Если Номер % 100 = 0 Тогда
					Состояние(ТекстСообщения + НСтр("ru=': обработано ';uk=': опрацьовано '") + Номер + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
				КонецЕсли;
				Номер = Номер + 1;
			#КонецЕсли
		КонецЦикла;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + НСтр("ru=': обработано ';uk=': опрацьовано '") + ВсегоДоков + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
	#КонецЕсли
	
КонецПроцедуры // ЗаполнитьРеквизитыПоУчетуРабочегоВремени()


Функция УстановитьРеквизитыПоказателяСхемМотивации(Показатель = Неопределено,ВидПоказателя,ВозможностьИзменения,Наименование = "")
		
	Если Наименование <> "" Тогда 
		Ссылка = Справочники.ПоказателиСхемМотивации.НайтиПоНаименованию(Наименование);
		Если Ссылка.Пустая() Тогда
			ПоказательОбъект = Справочники.ПоказателиСхемМотивации.СоздатьЭлемент();
			ПоказательОбъект.Наименование = Наименование;	
		Иначе                      
			ПоказательОбъект = Ссылка.ПолучитьОбъект();
		КонецЕсли;
	Иначе
		ПоказательОбъект = Показатель;
	КонецЕсли;
	
	ПоказательОбъект.ВидПоказателя = ВидПоказателя;
	ПоказательОбъект.ВозможностьИзменения = ВозможностьИзменения;
	ПоказательОбъект.Записать();

	Возврат ПоказательОбъект.Ссылка
	
КонецФункции

Процедура КонвертироватьКандидатовВЗадачи()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьКандидатыНаРаботуСрезПоследних.ФизЛицо.Наименование КАК Наименование,
	|	УдалитьКандидатыНаРаботуСрезПоследних.ФизЛицо,
	|	УдалитьКандидатыНаРаботуСрезПоследних.Статус КАК СостояниеСтарое,
	|	ЗНАЧЕНИЕ(Перечисление.Важность.Средняя) КАК Важность,
	|	ВЫБОР
	|		КОГДА УдалитьКандидатыНаРаботуСрезПоследних.Статус В (ЗНАЧЕНИЕ(Перечисление.УдалитьСостоянияКандидатаНаРаботу.Отклонен), ЗНАЧЕНИЕ(Перечисление.УдалитьСостоянияКандидатаНаРаботу.НеПрошелИспытательныйСрок), ЗНАЧЕНИЕ(Перечисление.УдалитьСостоянияКандидатаНаРаботу.ПринятНаРаботу))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Закрыта,
	|	РегистрацииКандидатов.ДатаОткрытия КАК ДатаОткрытия,
	|	РегистрацииКандидатов.ИсточникИнформации КАК ИсточникИнформации,
	|	УдалитьКандидатыНаРаботуСрезПоследних.Подразделение,
	|	УдалитьКандидатыНаРаботуСрезПоследних.Должность,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОрганизационнойСтруктурыПредприятия.ПоЦентрамОтветственности) КАК РежимНабораПерсонала
	|ИЗ
	|	(ВЫБРАТЬ
	|		УдалитьРегистрацияКандидата.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(УдалитьРегистрацияКандидата.ДатаПоступленияРезюме, ДЕНЬ) КАК ДатаОткрытия,
	|		УдалитьРегистрацияКандидата.ИсточникКандидата КАК ИсточникИнформации
	|	ИЗ
	|		Документ.УдалитьРегистрацияКандидата.УдалитьКандидаты КАК УдалитьРегистрацияКандидата) КАК РегистрацииКандидатов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьКандидатыНаРаботу.СрезПоследних(
	|		,
	|		(НЕ ФизЛицо В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ЗаявкиКандидатов.ФизЛицо
	|				ИЗ
	|					Справочник.ЗаявкиКандидатов КАК ЗаявкиКандидатов))) КАК УдалитьКандидатыНаРаботуСрезПоследних
	|		ПО РегистрацииКандидатов.ФизЛицо = УдалитьКандидатыНаРаботуСрезПоследних.ФизЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Справочники.ЗаявкиКандидатов.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СправочникОбъект, Выборка);
		Состояние = Справочники.СостоянияЗаявокКандидатов.НайтиПоНаименованию(Выборка.СостояниеСтарое);
		Если Состояние.Пустая() Тогда
			Объект = Справочники.СостоянияЗаявокКандидатов.СоздатьЭлемент();
			Объект.Наименование = Выборка.СостояниеСтарое;
			Объект.Записать();
			Состояние = Объект.Ссылка;
		КонецЕсли;
		СправочникОбъект.Состояние = Состояние;
		СправочникОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура КонвертироватьДокументРезультатИспытательногоСрока()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РезультатИспытательногоСрокаУдалитьРаботники.Ссылка КАК Ссылка,
	|	РезультатИспытательногоСрокаУдалитьРаботники.ДатаПринятияРешения КАК Дата,
	|	РезультатИспытательногоСрокаУдалитьРаботники.НомерСтроки КАК НомерСтроки,
	|	РезультатИспытательногоСрокаУдалитьРаботники.Сотрудник,
	|	РезультатИспытательногоСрокаУдалитьРаботники.Сотрудник.Физлицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА РезультатИспытательногоСрокаУдалитьРаботники.Решение = ЗНАЧЕНИЕ(Перечисление.УдалитьРешенияПоИспытательномуСроку.ПрошелИспытательныйСрок)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатыИспытательногоСрока.Положительный)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РезультатыИспытательногоСрока.Отрицательный)
	|	КОНЕЦ КАК Результат,
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РезультатИспытательногоСрокаУдалитьРаботники.ДатаПринятияРешения, ДЕНЬ), ДЕНЬ, 1) КАК ДатаИзменения
	|ИЗ
	|	Документ.РезультатИспытательногоСрока.УдалитьРаботники КАК РезультатИспытательногоСрокаУдалитьРаботники
	|ГДЕ
	|	РезультатИспытательногоСрокаУдалитьРаботники.Ссылка.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|	И РезультатИспытательногоСрокаУдалитьРаботники.Решение <> ЗНАЧЕНИЕ(Перечисление.УдалитьРешенияПоИспытательномуСроку.ПродленИспытательныйСрок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		НачатьТранзакцию();
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			Если Выборка.НомерСтроки = 1 Тогда
				ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				Если ДокументОбъект.Проведен И Выборка.Результат = Перечисления.РезультатыИспытательногоСрока.Отрицательный Тогда
					НаборЗаписей = РегистрыСведений.НамеченныеСобытияПоПерсоналу.СоздатьНаборЗаписей();
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
					НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
					Запись = НаборЗаписей.Добавить();
					Запись.ДатаИзменения		= Выборка.ДатаИзменения;
					Запись.Физлицо				= Выборка.Физлицо;
					Запись.ПланируемоеСобытие	= Перечисления.НамеченныеСобытияПоПерсоналу.УвольнениеПослеИспытательногоСрока;
					НаборЗаписей.Записать();
				КонецЕсли;
				
			Иначе
				ДокументНовый = Документы.РезультатИспытательногоСрока.СоздатьДокумент();
				ДокументНовый.Ответственный	= ДокументОбъект.Ответственный;
				ДокументНовый.Комментарий	= ДокументОбъект.Комментарий;
				ЗаполнитьЗначенияСвойств(ДокументНовый, Выборка);
				ОбщегоНазначения.УстановитьНомерДокумента(ДокументНовый);
				ДокументНовый.Проведен		= ДокументОбъект.Проведен;
				
				ДокументНовый.ОбменДанными.Загрузка = Истина;
				ДокументНовый.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДолжности()
	
	// сначала создадим должности организаций и пропишем в них ссылки на должности
	СоздатьДолжностиОрганизаций();
	
	//////////////////////////////////////////////////////////////
	// Регистры
	
	// НамеченныеСобытияПоПерсоналу
	ЗаполнитьНаборЗаписейДолжностей("ДатаИзменения", РегистрыСведений, "НамеченныеСобытияПоПерсоналу");
	
	// Работники
	ЗаполнитьНаборЗаписейДолжностей("Период", РегистрыСведений, "Работники");
	
	// СхемыМотивацииРаботников
	ЗаполнитьНезависимыйНаборЗаписейДолжностей(РегистрыСведений, "СхемыМотивацииРаботников");
	
	// ЗанятыеРабочиеМеста
	ЗаполнитьНаборЗаписейДолжностей("Период", РегистрыНакопления, "ЗанятыеРабочиеМеста");
	
	//////////////////////////////////////////////////////////////
	// Документы
	
	// КадровоеПеремещение
	ЗаполнитьТабличнуюЧастьДокументовДолжностей("КадровоеПеремещение", "Работники", "НоваяДолжность");
	
	// ПриемНаРаботу
	ЗаполнитьТабличнуюЧастьДокументовДолжностей("ПриемНаРаботу", "Работники", "Должность");
	
КонецПроцедуры

Процедура СоздатьДолжностиОрганизаций()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Должности.Ссылка КАК Должность,
	|	Должности.Наименование,
	|	ВЫБОР
	|		КОГДА ДолжностиОрганизаций.Ссылка ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СоздаватьДолжностьОрганизации,
	|	ДолжностиОрганизаций.Ссылка КАК ДолжностьОрганизации
	|ИЗ
	|	Справочник.Должности КАК Должности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
	|		ПО Должности.Наименование = ДолжностиОрганизаций.Наименование
	|			И (ДолжностиОрганизаций.Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка))
	|ГДЕ
	|	(НЕ Должности.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ДолжностиОрганизаций.Должность
	|				ИЗ
	|					Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.СоздаватьДолжностьОрганизации Тогда
			СправочникОбъект = Справочники.ДолжностиОрганизаций.СоздатьЭлемент();
		Иначе
			СправочникОбъект = Выборка.ДолжностьОрганизации.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СправочникОбъект, Выборка);
		СправочникОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНаборЗаписейДолжностей(ПолеДаты, МенеджерРегистров, ИмяРегистра)
	
	Если ТипЗнч(МенеджерРегистров) = Тип("РегистрыСведенийМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрСведений";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыНакопленияМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрНакопления";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыБухгалтерииМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрБухгалтерии";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыРасчетаМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрРасчета";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Приказ,
	|	Регистр." + ПолеДаты + "
	|ИЗ
	|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|ГДЕ
	|	Регистр.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)
	|	И Регистр.УдалитьДолжность <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистр." + ПолеДаты;
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу.Текст =
	"ВЫБРАТЬ
	|	Должности.ДолжностьОрганизации КАК Должность,
	|	Регистр.НомерСтроки КАК НомерСтроки,
	|	Регистр.*
	|ИЗ
	|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ДолжностиОрганизаций.Ссылка) КАК ДолжностьОрганизации,
	|			ДолжностиОрганизаций.Должность КАК Должность
	|		ИЗ
	|			Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДолжностиОрганизаций.Должность) КАК Должности
	|		ПО Регистр.УдалитьДолжность = Должности.Должность
	|ГДЕ
	|	Регистр.Регистратор = &Приказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние(ПрефиксИмениТаблицы + "." + ИмяРегистра + НСтр("ru='. Обрабатывается набор записей ';uk='. Обробляється набір записів '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ",	Выборка.Приказ);
		
		НаборЗаписей = МенеджерРегистров[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Приказ;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоДокументу);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНезависимыйНаборЗаписейДолжностей(МенеджерРегистров, ИмяРегистра)
	
	Если ТипЗнч(МенеджерРегистров) = Тип("РегистрыСведенийМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрСведений";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыНакопленияМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрНакопления";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыБухгалтерииМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрБухгалтерии";
	ИначеЕсли ТипЗнч(МенеджерРегистров) = Тип("РегистрыРасчетаМенеджер") Тогда
		ПрефиксИмениТаблицы = "РегистрРасчета";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.УдалитьДолжность КАК УдалитьДолжность
	|ИЗ
	|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|ГДЕ
	|	Регистр.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)
	|	И Регистр.УдалитьДолжность <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	УдалитьДолжность";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу.Текст =
	"ВЫБРАТЬ
	|	Должности.ДолжностьОрганизации КАК Должность,
	|	Регистр.*
	|ИЗ
	|	" + ПрефиксИмениТаблицы + "." + ИмяРегистра + " КАК Регистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ДолжностиОрганизаций.Ссылка) КАК ДолжностьОрганизации,
	|			ДолжностиОрганизаций.Должность КАК Должность
	|		ИЗ
	|			Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДолжностиОрганизаций.Должность) КАК Должности
	|		ПО Регистр.УдалитьДолжность = Должности.Должность
	|ГДЕ
	|	Регистр.УдалитьДолжность = &УдалитьДолжность";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние(ПрефиксИмениТаблицы + "." + ИмяРегистра + НСтр("ru='. Обрабатывается набор записей ';uk='. Обробляється набір записів '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ЗапросПоДокументу.УстановитьПараметр("УдалитьДолжность",	Выборка.УдалитьДолжность);
		
		НаборЗаписей = МенеджерРегистров[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УдалитьДолжность.Установить(Выборка.УдалитьДолжность);
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоДокументу);
		КонецЦикла;
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура КонвертироватьНамеченныеСобытияПоПерсоналуОрганизаций()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.Регистратор КАК Регистратор,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.НомерСтроки КАК НомерСтроки,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.Сотрудник,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.Организация,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.ДатаИзменения,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.ПланируемоеСобытие,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.ЗанимаемыхСтавок,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.ЗаниматьСтавку,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.Должность,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.ПодразделениеОрганизации,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.ГрафикРаботы,
	|	УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.Активность
	|ИЗ
	|	РегистрСведений.УдалитьНамеченныеСобытияПоПерсоналуОрганизаций КАК УдалитьНамеченныеСобытияПоПерсоналуОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НамеченныеСобытияПоПерсоналу КАК НамеченныеСобытияПоПерсоналу
	|		ПО УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.Регистратор = НамеченныеСобытияПоПерсоналу.Регистратор
	|			И УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.Сотрудник = НамеченныеСобытияПоПерсоналу.Сотрудник
	|			И УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.Организация = НамеченныеСобытияПоПерсоналу.Организация
	|			И УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.ДатаИзменения = НамеченныеСобытияПоПерсоналу.ДатаИзменения
	|			И УдалитьНамеченныеСобытияПоПерсоналуОрганизаций.ПланируемоеСобытие = НамеченныеСобытияПоПерсоналу.ПланируемоеСобытие
	|ГДЕ
	|	НамеченныеСобытияПоПерсоналу.Регистратор ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	НаборЗаписей = РегистрыСведений.НамеченныеСобытияПоПерсоналу.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка		= Истина;
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		#Если Клиент Тогда
			Состояние(НСтр("ru='Регистр сведений. Намеченные события по персоналу организаций. Обрабатывается набор записей ';uk='Регістр відомостей. Намічені події по персоналу організацій. Обробляється набір записів '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		Если ТипЗнч(Выборка.Регистратор) = Тип("Документссылка.ИсполнительныйЛист") тогда
			Продолжить;
		КонецЕсли;	
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Регистратор;
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрыКонтроляПериодов()
	
	ЗаполнитьРегистрПериодыРаботыРаботников();
	ЗаполнитьРегистрПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы();
	ЗаполнитьРегистрПериодыРаботыРаботниковОрганизацийПоСовместительству();
	ЗаполнитьРегистрПериодыСостоянийРаботников();
	ЗаполнитьРегистрПериодыСостоянийРаботниковОрганизаций();
	
КонецПроцедуры

Процедура ЗаполнитьРегистрПериодыРаботыРаботников()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ПриемНаРаботу.Работники КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыРаботыРаботников КАК Периоды
	|		ПО Док.Сотрудник.ФизЛицо = Периоды.Физлицо
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаПриема = Периоды.ДатаНачала
	|			И Док.ДатаУвольнения = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.Увольнение.Работники КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыРаботыРаботников КАК Периоды
	|		ПО Док.Сотрудник.ФизЛицо = Периоды.Физлицо
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаУвольнения = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу1Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник.Физлицо КАК Физлицо,
	|	Док.ДатаПриема КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Док.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИЛИ Док.НапомнитьПоЗавершении
	|			ТОГДА Док.ДатаУвольнения
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаУвольнения, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ПриемНаРаботу.Работники КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	ЗапроспоДокументу2Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник.ФизЛицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА Док.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Док.ДатаУвольнения
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаУвольнения, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.Увольнение.Работники КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.Регистратор.Проведен Тогда
			Продолжить;
		КонецЕсли;
		
		#Если Клиент Тогда
			Состояние(НСтр("ru='Работа в компании. Обрабатывается документ ';uk='Робота в компанії. Обробляється документ'") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
			ЗапросПоДокументу.Текст = ЗапросПоДокументу1Текст;
		Иначе
			ЗапросПоДокументу.Текст = ЗапросПоДокументу2Текст;
		КонецЕсли;
		
		ЗапросПоДокументу.УстановитьПараметр("Ссылка",	Выборка.Регистратор);
		
		НаборЗаписей = РегистрыСведений.ПериодыРаботыРаботников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Регистратор;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоДокументу);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы КАК Периоды
	|		ПО Док.Сотрудник.Физлицо = Периоды.Физлицо
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаПриема = Периоды.ДатаНачала
	|			И Док.ДатаУвольнения = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|	И Док.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы КАК Периоды
	|		ПО Док.Сотрудник.Физлицо = Периоды.Физлицо
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаУвольнения = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|	И Док.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу1Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник.Физлицо КАК Физлицо,
	|	Док.ДатаПриема КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Док.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИЛИ Док.НапомнитьПоЗавершении
	|			ТОГДА Док.ДатаУвольнения
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаУвольнения, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)";
	
	ЗапроспоДокументу2Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник.Физлицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА Док.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Док.ДатаУвольнения
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаУвольнения, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.Регистратор.Проведен Тогда
			Продолжить;
		КонецЕсли;

		#Если Клиент Тогда
			Состояние(НСтр("ru='Работа в организации по основному месту работы. Обрабатывается документ ';uk='Робота в організації за основним місцем роботи. Обробляється документ '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПриемНаРаботуВОрганизацию") Тогда
			ЗапросПоДокументу.Текст = ЗапросПоДокументу1Текст;
		Иначе
			ЗапросПоДокументу.Текст = ЗапросПоДокументу2Текст;
		КонецЕсли;
		
		ЗапросПоДокументу.УстановитьПараметр("Ссылка",	Выборка.Регистратор);
		
		НаборЗаписей = РегистрыСведений.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Регистратор;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоДокументу);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрПериодыРаботыРаботниковОрганизацийПоСовместительству()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыРаботыРаботниковОрганизацийПоСовместительству КАК Периоды
	|		ПО Док.Сотрудник.Физлицо = Периоды.Физлицо
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаПриема = Периоды.ДатаНачала
	|			И Док.ДатаУвольнения = Периоды.ДатаОкончания
	|			И Док.Ссылка.Организация = Периоды.Организация
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|	И Док.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыРаботыРаботниковОрганизацийПоСовместительству КАК Периоды
	|		ПО Док.Сотрудник.Физлицо = Периоды.Физлицо
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаУвольнения = Периоды.ДатаОкончания
	|			И Док.Ссылка.Организация = Периоды.Организация
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|	И Док.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу1Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник.Физлицо КАК Физлицо,
	|	Док.Ссылка.Организация,
	|	Док.ДатаПриема КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Док.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИЛИ Док.НапомнитьПоЗавершении
	|			ТОГДА Док.ДатаУвольнения
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаУвольнения, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)";
	
	ЗапроспоДокументу2Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник.Физлицо КАК Физлицо,
	|	Док.Ссылка.Организация,
	|	ВЫБОР
	|		КОГДА Док.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Док.ДатаУвольнения
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаУвольнения, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.Регистратор.Проведен Тогда
			Продолжить;
		КонецЕсли;
		
		#Если Клиент Тогда
			Состояние(НСтр("ru='Работа в организации по внешнему совместительству. Обрабатывается документ ';uk='Робота в організації по зовнішньому сумісництву. Обробляється документ'") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПриемНаРаботуВОрганизацию") Тогда
			ЗапросПоДокументу.Текст = ЗапросПоДокументу1Текст;
		Иначе
			ЗапросПоДокументу.Текст = ЗапросПоДокументу2Текст;
		КонецЕсли;
		
		ЗапросПоДокументу.УстановитьПараметр("Ссылка",	Выборка.Регистратор);
		
		НаборЗаписей = РегистрыСведений.ПериодыРаботыРаботниковОрганизацийПоСовместительству.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Регистратор;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоДокументу);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрПериодыСостоянийРаботников()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ОтсутствиеНаРаботе.Работники КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыСостоянийРаботников КАК Периоды
	|		ПО Док.Сотрудник.Физлицо = Периоды.Физлицо
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаНачала = Периоды.ДатаНачала
	|			И Док.ДатаОкончания = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.ВозвратНаРаботу.Работники КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыСостоянийРаботников КАК Периоды
	|		ПО Док.Сотрудник.Физлицо = Периоды.Физлицо
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаВозврата = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу1Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник.Физлицо КАК Физлицо,
	|	Док.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Док.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИЛИ Док.НапомнитьПоЗавершении
	|			ТОГДА Док.ДатаОкончания
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаОкончания, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ОтсутствиеНаРаботе.Работники КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	ЗапроспоДокументу2Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник.Физлицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА Док.ДатаВозврата = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Док.ДатаВозврата
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаВозврата, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ВозвратНаРаботу.Работники КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние(НСтр("ru='Отсутствие на работе в управленческом учете. Обрабатывается документ ';uk='Відсутність на роботі в управлінському обліку. Обробляється документ '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОтсутствиеНаРаботе") Тогда
			ЗапросПоДокументу.Текст = ЗапросПоДокументу1Текст;
		Иначе
			ЗапросПоДокументу.Текст = ЗапросПоДокументу2Текст;
		КонецЕсли;
		
		ЗапросПоДокументу.УстановитьПараметр("Ссылка",	Выборка.Регистратор);
		
		НаборЗаписей = РегистрыСведений.ПериодыСостоянийРаботников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Регистратор;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоДокументу);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрПериодыСостоянийРаботниковОрганизаций()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыСостоянийРаботниковОрганизаций КАК Периоды
	|		ПО Док.Сотрудник = Периоды.Сотрудник
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаНачала = Периоды.ДатаНачала
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|	И Док.ПричинаОтсутствия <> ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыСостоянийРаботниковОрганизаций КАК Периоды
	|		ПО Док.Сотрудник = Периоды.Сотрудник
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаНачала = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|	И Док.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыСостоянийРаботниковОрганизаций КАК Периоды
	|		ПО Док.Сотрудник = Периоды.Сотрудник
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаНачала = Периоды.ДатаНачала
	|			И Док.ДатаОкончания = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыСостоянийРаботниковОрганизаций КАК Периоды
	|		ПО Док.Сотрудник = Периоды.Сотрудник
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаНачала = Периоды.ДатаНачала
	|			И Док.ДатаОкончания = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.ВозвратНаРаботуОрганизаций.РаботникиОрганизации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыСостоянийРаботниковОрганизаций КАК Периоды
	|		ПО Док.Сотрудник = Периоды.Сотрудник
	|			И Док.Ссылка = Периоды.Регистратор
	|			И Док.ДатаВозврата = Периоды.ДатаОкончания
	|ГДЕ
	|	Периоды.Регистратор ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	ЗапросПоДокументу = Новый Запрос;
	
	ЗапросПоДокументу1Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА Док.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ Док.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Док.ПричинаОтсутствия <> ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаНачала, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	ЗапроспоДокументу2Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник КАК Сотрудник,
	|	Док.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Док.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИЛИ Док.НапомнитьПоЗавершении
	|			ТОГДА Док.ДатаОкончания
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаОкончания, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	ЗапроспоДокументу3Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник КАК Сотрудник,
	|	Док.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Док.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИЛИ Док.НапомнитьПоЗавершении
	|			ТОГДА Док.ДатаОкончания
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаОкончания, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	ЗапроспоДокументу4Текст =
	"ВЫБРАТЬ
	|	Док.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА Док.ДатаВозврата = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Док.ДатаВозврата
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаВозврата, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ВозвратНаРаботуОрганизаций.РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние(НСтр("ru='Отсутствие на работе в регламентированном учете. Обрабатывается документ ';uk='Відсутність на роботі в регламентованому обліку. Обробляється документ '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОтсутствиеНаРаботеОрганизаций") Тогда
			ЗапросПоДокументу.Текст = ЗапросПоДокументу1Текст;
			
		ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОтпускаОрганизаций") Тогда
			ЗапросПоДокументу.Текст = ЗапросПоДокументу2Текст;
			
		ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.КомандировкиОрганизаций") Тогда
			ЗапросПоДокументу.Текст = ЗапросПоДокументу3Текст;
			
		Иначе
			ЗапросПоДокументу.Текст = ЗапросПоДокументу4Текст;
			
		КонецЕсли;
		
		ЗапросПоДокументу.УстановитьПараметр("Ссылка",	Выборка.Регистратор);
		
		НаборЗаписей = РегистрыСведений.ПериодыСостоянийРаботниковОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Регистратор;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаПоДокументу);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры


Процедура ОбновитьОсновныеНачисления()
	
	#Если Клиент Тогда
	Состояние(НСтр("ru='Заполнение счета учета в основных начислениях';uk='Заповнення рахунку обліку в основних нарахуваннях'"));
	#КонецЕсли
	
	ОсновныеНач = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Выбрать();
	
	Пока ОсновныеНач.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ОсновныеНач.СчетУчета) Тогда
			ОсновнойВР = ОсновныеНач.ПолучитьОбъект();
			ОсновнойВР.ОбменДанными.Загрузка = Истина;
			Если ОсновнойВР.УдалитьВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовСРаботниками.ЗаработнаяПлата Тогда
				ОсновнойВР.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
			ИначеЕсли ОсновнойВР.УдалитьВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовСРаботниками.ЗаработнаяПлатаНеФОТ Тогда
				ОсновнойВР.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДругимВыплатам;
			ИначеЕсли ОсновнойВР.УдалитьВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовСРаботниками.ДепонированнаяЗарплата Тогда
				ОсновнойВР.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДепонентам;
			ИначеЕсли ОсновнойВР.УдалитьВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовСРаботниками.Дивиденды Тогда	
				ОсновнойВР.СчетУчета = ПланыСчетов.Хозрасчетный.ДивидендыПолученные;
			Иначе	
				ОсновнойВР.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
			КонецЕсли;
			ОсновнойВР.Записать();
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПеренестиДопРасчетыВОсновные()
	
	
	#Если Клиент Тогда
	Состояние(НСтр("ru='Перенос дополнительных начислений в основные';uk='Перенесення додаткових нарахувань в основні'"));
	#КонецЕсли
	
	ОсновныеНачисления = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	
	ДопВР = ПланыВидовРасчета.УдалитьДополнительныеНачисленияОрганизаций.Выбрать();

	Пока ДопВР.Следующий() Цикл
		
		ОснНач = ОсновныеНачисления.НайтиПоРеквизиту("УдалитьДопРасчет",ДопВР.Ссылка);
		Если ЗначениеЗаполнено(ОснНач) Тогда
			ОсновнойВР = ОснНач.ПолучитьОбъект();
		Иначе
			ВР = "";
			Если ДопВР.Предопределенный Тогда
				// найти
				ИмяДопВР = ПланыВидовРасчета.УдалитьДополнительныеНачисленияОрганизаций.ПолучитьИмяПредопределенного(ДопВР.Ссылка);
				Если ИмяДопВР <> "ПособиеПриРождении" Тогда
					ВР = ОсновныеНачисления[ИмяДопВР];
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВР) Тогда
				ОсновнойВР = ВР.ПолучитьОбъект();
			Иначе
				ОсновнойВР = ОсновныеНачисления.СоздатьВидРасчета();
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДопВР.Предопределенный Тогда
			ОсновнойВР.СпособОтраженияВБухучете = ДопВР.СпособОтраженияВБухучете;
			ОсновнойВР.УдалитьДопРасчет = ДопВР.Ссылка;                             
			ОсновнойВР.Записать();
			Продолжить;
		КонецЕсли;	
			
		
		ОсновнойВР.УдалитьДопРасчет = ДопВР.Ссылка; 
		ОсновнойВР.Код 			= ДопВР.Код;
		ОсновнойВР.Наименование = ДопВР.Наименование;
		ОсновнойВР.СпособРасчета = ДопВР.СпособРасчета;
		ОсновнойВР.КатегорияРасчета = ДопВР.КатегорияРасчета;
		
		ОсновнойВР.ЗачетОтработанногоВремени = Ложь;
		ОсновнойВР.ЗачетНормыВремени = Ложь;
		ОсновнойВР.ЗачетКалендарных = Ложь;
		
		ОсновнойВР.СпособОтраженияВБухучете = ДопВР.СпособОтраженияВБухучете;
		
		ОсновнойВР.УдалитьВидВзаиморасчетов = ДопВР.ВидВзаиморасчетов;
		Если ДопВР.ВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовСРаботниками.ЗаработнаяПлата Тогда
			ОсновнойВР.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		ИначеЕсли ДопВР.ВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовСРаботниками.ЗаработнаяПлатаНеФОТ Тогда
			ОсновнойВР.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДругимВыплатам;
		ИначеЕсли ДопВР.ВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовСРаботниками.ДепонированнаяЗарплата Тогда
			ОсновнойВР.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДепонентам;
		ИначеЕсли ДопВР.ВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовСРаботниками.Дивиденды Тогда	
			ОсновнойВР.СчетУчета = ПланыСчетов.Хозрасчетный.ДивидендыПолученные;
		Иначе	
			ОсновнойВР.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		КонецЕсли;	
		
		ОсновнойВР.ДоходНДФЛ = ДопВР.ДоходНДФЛ;
		ОсновнойВР.СоциальнаяГруппа = ДопВР.СоциальнаяГруппа;
		ОсновнойВР.ПоказателиВидовОплатыТруда = ДопВР.ПоказателиВидовОплатыТруда;
		ОсновнойВР.ВидСтажа = ДопВР.ВидСтажа;
		ОсновнойВР.ПроцентСтажа = ДопВР.ПроцентСтажа;
        ОсновнойВР.Записать();
		
	КонецЦикла;
	
	#Если Клиент Тогда
	Состояние(НСтр("ru='Настройка основных начислений';uk='Настройка основних нарахувань'"));
	#КонецЕсли

	// почистить базовые переписать для взносов, средних
	// базовые ведущие вытесняющие
	ОсновнойВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Выбрать();
	Пока ОсновнойВР.Следующий() Цикл
		
		ОснВР = ОсновнойВР.ПолучитьОбъект();
		ДопВР = ОсновнойВР.УдалитьДопРасчет;
		Если ЗначениеЗаполнено(ДопВР) Тогда
			
			// базовые
			ОсновнойВРБазовые = ОснВР.БазовыеВидыРасчета;
			Для каждого ДопВРБазовые Из ДопВР.БазовыеВидыРасчета Цикл
				Если Не ЗначениеЗаполнено(ДопВРБазовые.ВидРасчета) Тогда
					// это на всякий случай, если встретим пустой ВР... 
					// вообще такого быть не должно но на всякий случай
				ИначеЕсли ДопВРБазовые.ВидРасчета.Метаданные().Имя = "УдалитьДополнительныеНачисленияОрганизаций" Тогда
					ОснНач = ОсновныеНачисления.НайтиПоРеквизиту("УдалитьДопРасчет",ДопВРБазовые.ВидРасчета.Ссылка);
					Если ЗначениеЗаполнено(ОснНач) И ОсновнойВРБазовые.Найти(ОснНач)= Неопределено Тогда
						НоваяСтрока  = ОсновнойВРБазовые.Добавить();
						НоваяСтрока.ВидРасчета = ОснНач.Ссылка;
					КонецЕсли;
				ИначеЕсли ДопВРБазовые.ВидРасчета.Метаданные().Имя = "ОсновныеНачисленияОрганизаций" Тогда
					Если ОсновнойВРБазовые.Найти(ДопВРБазовые.ВидРасчета)= Неопределено Тогда
						НоваяСтрока  = ОсновнойВРБазовые.Добавить();
						НоваяСтрока.ВидРасчета = ДопВРБазовые.ВидРасчета.Ссылка;
					КонецЕсли;
				ИначеЕсли ДопВРБазовые.ВидРасчета.Метаданные().Имя = "СреднийЗаработок" Тогда
					// не переносим
				КонецЕсли;
			КонецЦикла;
			
			// ведущие
			ОсновнойВРВедущие = ОснВР.ВедущиеВидыРасчета;
			Для каждого ДопВРВедущие Из ДопВР.ВедущиеВидыРасчета Цикл
				Если Не ЗначениеЗаполнено(ДопВРВедущие.ВидРасчета) Тогда
					// это на всякий случай, если встретим пустой ВР... 
					// вообще такого быть не должно но на всякий случай
				ИначеЕсли ДопВРВедущие.ВидРасчета.Метаданные().Имя = "УдалитьДополнительныеНачисленияОрганизаций" Тогда
					ОснНач = ОсновныеНачисления.НайтиПоРеквизиту("УдалитьДопРасчет",ДопВРВедущие.ВидРасчета.Ссылка);
					Если ЗначениеЗаполнено(ОснНач) И ОсновнойВРВедущие.Найти(ОснНач)= Неопределено Тогда
						НоваяСтрока  = ОсновнойВРВедущие.Добавить();
						НоваяСтрока.ВидРасчета = ОснНач.Ссылка;
					КонецЕсли;
				ИначеЕсли ДопВРВедущие.ВидРасчета.Метаданные().Имя = "ОсновныеНачисленияОрганизаций" Тогда
					Если ОсновнойВРВедущие.Найти(ДопВРБазовые.ВидРасчета)= Неопределено Тогда
						НоваяСтрока  = ОсновнойВРВедущие.Добавить();
						НоваяСтрока.ВидРасчета = ДопВРВедущие.ВидРасчета.Ссылка;
					КонецЕсли;
				ИначеЕсли ДопВРВедущие.ВидРасчета.Метаданные().Имя = "СреднийЗаработок" Тогда
					// не переносим
				КонецЕсли;
			КонецЦикла;
			Попытка
				ОснВР.Записать();
			Исключение
			КонецПопытки;	
			
			
		Иначе
			
			// надо почистить средние
			// базовые
			Для каждого ОснВРБазовые Из ОснВР.БазовыеВидыРасчета Цикл
				Если ОснВРБазовые.ВидРасчета.Метаданные().Имя = "СреднийЗаработок" Тогда
					// удаляем
					ОснВР.БазовыеВидыРасчета.Удалить( ОснВРБазовые );
				КонецЕсли;
			КонецЦикла;
			
			// ведущие
			Для каждого ОснВРВедущие Из ОснВР.ВедущиеВидыРасчета Цикл
				Если ОснВРВедущие.ВидРасчета.Метаданные().Имя = "СреднийЗаработок" Тогда
					// удаляем
					ОснВР.ВедущиеВидыРасчета.Удалить( ОснВРВедущие );
				КонецЕсли;
			КонецЦикла;
			
			// вытесняющие
			Для каждого ОснВРВытесняющие Из ОснВР.ВытесняющиеВидыРасчета Цикл
				Если ОснВРВытесняющие.ВидРасчета.Метаданные().Имя = "СреднийЗаработок" Тогда
					// удаляем
					ОснВР.ВытесняющиеВидыРасчета.Удалить( ОснВРВытесняющие );
				КонецЕсли;
			КонецЦикла;
			
			// перепишем календарные
			ОснВР.ЗачетКалендарных = Не ОснВР.УдалитьНеУчитыватьКалендарные;
			Попытка
				ОснВР.Записать();
			Исключение
			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	#Если Клиент Тогда
	Состояние(НСтр("ru='Удаление дополнительных видов расчета из базовых и ведущих';uk='Вилучення додаткових видів розрахунку з базових і провідних'"));
	#КонецЕсли
	
	// является базой поменяем Доп на Осн
	Для Каждого ПВР Из ПланыВидовРасчета Цикл
				
		Выборка = ПВР.Выбрать();
		Пока Выборка.Следующий() Цикл
					
			ВР = Выборка.Ссылка.ПолучитьОбъект();
					
			Для Каждого БазВР из ВР.БазовыеВидыРасчета Цикл
				Если БазВР.ВидРасчета.Метаданные().Имя = "УдалитьДополнительныеНачисленияОрганизаций" Тогда
					НовыйБазВР = ПолучитьОснРасчетПоДопРасчету(БазВР.ВидРасчета);
					Если НЕ НовыйБазВР.Пустая() Тогда
						БазВР.ВидРасчета = НовыйБазВР;
						ВР.Записать();
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ВедВР из ВР.ВедущиеВидыРасчета Цикл
				Если ВедВР.ВидРасчета.Метаданные().Имя = "УдалитьДополнительныеНачисленияОрганизаций" Тогда
					НовыйВедВР = ПолучитьОснРасчетПоДопРасчету(ВедВР.ВидРасчета);
					Если НЕ НовыйВедВР.Пустая() Тогда
						ВедВР.ВидРасчета = НовыйВедВР;
						ВР.Записать();
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			
			
		КонецЦикла;
	КонецЦикла;	

	
КонецПроцедуры

Процедура ПеренестиДопРасчетыВОсновныеДокументы()
	
	
	#Если Клиент Тогда
	Состояние(НСтр("ru='Перенос дополнительных начислений в основные';uk='Перенесення додаткових нарахувань в основні'"));
	#КонецЕсли
	
	//Кадровые
    ВыполнитьПенестиДопРасчетыВОсновныеДокументы("ПриемНаРаботуВОрганизацию", "УдалитьДополнительныеНачисления", "ОсновныеНачисления");
	ВыполнитьПенестиДопРасчетыВОсновныеДокументы("КадровоеПеремещениеОрганизаций", "УдалитьДополнительныеНачисления", "ОсновныеНачисления");
	//Зарплатные
	ВыполнитьПенестиДопРасчетыВОсновныеДокументы("ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций", "УдалитьДополнительныеНачисления", "ОсновныеНачисления");
	ВыполнитьПенестиДопРасчетыВОсновныеДокументы("ВводСведенийОбУчетеПлановыхНачисленийРаботниковОрганизаций", "УдалитьДополнительныеНачисления", "Начисления");
	ВыполнитьПенестиДопРасчетыВОсновныеДокументы("НачислениеЕдиновременныхПособийЗаСчетФСС", "УдалитьНачисления", "Начисления");
	ВыполнитьПенестиДопРасчетыВОсновныеДокументы("НачислениеЗарплатыРаботникамОрганизаций", "УдалитьДополнительныеНачисления", "Начисления");
	ВыполнитьПенестиДопРасчетыВОсновныеДокументы("НачислениеОтпускаРаботникамОрганизаций", "УдалитьДополнительныеНачисления", "Начисления");
	ВыполнитьПенестиДопРасчетыВОсновныеДокументы("ОтпускПоУходуЗаРебенком", "УдалитьДополнительныеНачисления", "ОсновныеНачисления");
	ВыполнитьПенестиДопРасчетыВОсновныеДокументы("ОтражениеЗарплатыВРеглУчете", "УдалитьДополнительныеНачисления", "Начисления");
	ВыполнитьПенестиДопРасчетыВОсновныеДокументы("ПремииРаботниковОрганизаций", "УдалитьДополнительныеНачисления", "Начисления");
	ВыполнитьПенестиДопРасчетыВОсновныеДокументы("РегистрацияРазовыхНачисленийРаботниковОрганизаций", "УдалитьДополнительныеНачисления", "ОсновныеНачисления");
	
	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка КАК Документ
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ.Ссылка.Дата";

    Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Документ.ДоговорНаВыполнениеРаботСФизЛицом Обрабатывается документ " + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
			
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Если ТипЗнч(ДокументОбъект.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.УдалитьДополнительныеНачисленияОрганизаций") Тогда
			ДокументОбъект.ВидРасчета = ПолучитьОснРасчетПоДопРасчету(ДокументОбъект.ВидРасчета);
		КонецЕсли;	
		ДокументОбъект.Записать();
	КонецЦикла;
	
		Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка КАК Документ
	|ИЗ
	|	Документ.ПремииРаботниковОрганизаций КАК Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ.Ссылка.Дата";

    Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Документ.ПремииРаботниковОрганизаций Обрабатывается документ " + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
			
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ДокументОбъект.ВидРасчета = ПолучитьОснРасчетПоДопРасчету(ДокументОбъект.УдалитьВидРасчета);
		
		ДокументОбъект.Записать();
	КонецЦикла;


КонецПроцедуры

Процедура ВыполнитьПенестиДопРасчетыВОсновныеДокументы(Документ, ТЧДоп, ТЧОсн)
	
	
	#Если Клиент Тогда
	Состояние(НСтр("ru='Перенос дополнительных начислений в основные';uk='Перенесення додаткових нарахувань в основні'"));
	#КонецЕсли
	
	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка КАК Документ
	|ИЗ
	|	Документ." + Документ + "." + ТЧДоп + " КАК Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ.Ссылка.Дата";

    Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Документ." + Документ + НСтр("ru='.ТабличныеЧасти. Обрабатывается документ ';uk='.ТабличныеЧасти. Обробляється документ '") + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Для Каждого СтрокаДоп из ДокументОбъект[ТЧДоп] Цикл
			СтрокаОсн = ДокументОбъект[ТЧОсн].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОсн,СтрокаДоп);
			СтрокаОсн.ВидРасчета = ПолучитьОснРасчетПоДопРасчету(СтрокаДоп.ВидРасчета);
		КонецЦикла;	
		ДокументОбъект[ТЧДоп].Очистить();
		ДокументОбъект.Записать();
	КонецЦикла;

	
КонецПроцедуры

Процедура ПеренестиДопРасчетыВОсновныеРегистры()
	
	
	#Если Клиент Тогда
	Состояние(НСтр("ru='Перенос дополнительных начислений в основные';uk='Перенесення додаткових нарахувань в основні'"));
	#КонецЕсли
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Приказ,
	|	Регистр.Период
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Регистр
	|ГДЕ
	|	Регистр.ВидРасчета ССЫЛКА ПланВидовРасчета.УдалитьДополнительныеНачисленияОрганизаций	 
	|	ИЛИ Регистр.ВидРасчетаИзмерение ССЫЛКА ПланВидовРасчета.УдалитьДополнительныеНачисленияОрганизаций	 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистр.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗапросПоДокументу = Новый Запрос;
	ЗапросПоДокументу.Текст =
		"ВЫБРАТЬ
		|	Регистр.НомерСтроки КАК НомерСтроки,
		|	Регистр.*
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Регистр
		|	
		|ГДЕ
		|	Регистр.Регистратор = &Приказ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций. Обрабатывается набор записей " + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ",	Выборка.Приказ);
		
		НаборЗаписей = РегистрыСведений.ПлановыеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Приказ;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаПоДокументу);
			Если ТипЗнч(НоваяЗапись.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.УдалитьДополнительныеНачисленияОрганизаций") Тогда
				НоваяЗапись.ВидРасчета = ПолучитьОснРасчетПоДопРасчету(НоваяЗапись.ВидРасчета);
			КонецЕсли;	
            Если ТипЗнч(НоваяЗапись.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.УдалитьДополнительныеНачисленияОрганизаций") Тогда
				НоваяЗапись.ВидРасчетаИзмерение = ПолучитьОснРасчетПоДопРасчету(НоваяЗапись.ВидРасчетаИзмерение);
			КонецЕсли;	
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Приказ,
	|	Регистр.Период
	|ИЗ
	|	РегистрСведений.УчетПлановыхНачисленийРаботниковОрганизаций КАК Регистр
	|ГДЕ
	|	Регистр.ВидРасчета ССЫЛКА ПланВидовРасчета.УдалитьДополнительныеНачисленияОрганизаций	 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистр.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗапросПоДокументу = Новый Запрос;
	ЗапросПоДокументу.Текст =
		"ВЫБРАТЬ
		|	Регистр.НомерСтроки КАК НомерСтроки,
		|	Регистр.*
		|ИЗ
		|	РегистрСведений.УчетПлановыхНачисленийРаботниковОрганизаций КАК Регистр
		|	
		|ГДЕ
		|	Регистр.Регистратор = &Приказ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("РегистрСведений.УчетПлановыхНачисленийРаботниковОрганизаций. Обрабатывается набор записей " + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ",	Выборка.Приказ);
		
		НаборЗаписей = РегистрыСведений.УчетПлановыхНачисленийРаботниковОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Приказ;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		Если ВыборкаПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаПоДокументу);
			Если ТипЗнч(НоваяЗапись.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.УдалитьДополнительныеНачисленияОрганизаций") Тогда
				НоваяЗапись.ВидРасчета = ПолучитьОснРасчетПоДопРасчету(НоваяЗапись.ВидРасчета);
			КонецЕсли;	
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Приказ,
	|	Регистр.ПериодРегистрации
	|ИЗ
	|	РегистрРасчета.УдалитьДополнительныеНачисленияРаботниковОрганизаций КАК Регистр
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистр.ПериодРегистрации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗапросПоДокументу = Новый Запрос;
	ЗапросПоДокументу.Текст =
		"ВЫБРАТЬ
		|	Регистр.НомерСтроки КАК НомерСтроки,
		|	Регистр.*
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Регистр
		|	
		|ГДЕ
		|	Регистр.Регистратор = &Приказ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	ЗапросПоДокументуДоп = Новый Запрос;
	ЗапросПоДокументуДоп.Текст =
		"ВЫБРАТЬ
		|	Регистр.НомерСтроки КАК НомерСтроки,
		|	Регистр.*
		|ИЗ
		|	РегистрРасчета.УдалитьДополнительныеНачисленияРаботниковОрганизаций КАК Регистр
		|	
		|ГДЕ
		|	Регистр.Регистратор = &Приказ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	КоличествоЗаписей = Выборка.Количество();
	
	ИндексЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("РегистрСведений.ОсновныеНачисленияРаботниковОрганизаций. Обрабатывается набор записей " + ИндексЗаписи + НСтр("ru=' из ';uk=' з '") + КоличествоЗаписей);
		#КонецЕсли
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
		ЗапросПоДокументу.УстановитьПараметр("Приказ",	Выборка.Приказ);
		
		НаборЗаписей = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Приказ;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		
		ВыборкаПоДокументу = ЗапросПоДокументу.Выполнить().Выбрать();
		
		//Сначала перенесем движения самого документа по Основным		
		Пока ВыборкаПоДокументу.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаПоДокументу);
		КонецЦикла;
		
		//Перенесем Дополнительные в Основные
		ЗапросПоДокументуДоп.УстановитьПараметр("Приказ",	Выборка.Приказ);
		ВыборкаПоДокументу = ЗапросПоДокументуДоп.Выполнить().Выбрать();
		Пока ВыборкаПоДокументу.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаПоДокументу);
			НоваяЗапись.Показатель1 = ВыборкаПоДокументу.Размер;
			НоваяЗапись.ВидРасчета = ПолучитьОснРасчетПоДопРасчету(ВыборкаПоДокументу.ВидРасчета);
			НоваяЗапись.ПериодДействияНачало = ВыборкаПоДокументу.ПериодРегистрации;
			НоваяЗапись.ПериодДействияКонец  = КонецМесяца(ВыборкаПоДокументу.ПериодРегистрации);
			НоваяЗапись.БазовыйПериодНачало = НоваяЗапись.ПериодДействияНачало;
			НоваяЗапись.БазовыйПериодКонец = НоваяЗапись.ПериодДействияКонец;
		КонецЦикла;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
		//Теперь почистим дополнительные
		НаборЗаписей = РегистрыРасчета.УдалитьДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Приказ;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;


КонецПроцедуры

Функция ПолучитьОснРасчетПоДопРасчету(ВидДопРасчета)
	
	ОснРасчет = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоРеквизиту("УдалитьДопРасчет",ВидДопРасчета);
		
	Возврат ОснРасчет;
		
КонецФункции

Процедура ОбновитьТЧОсновныеНачисления()
	
	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Заполняется базовый период регистрах расчета';uk='Заповнюється базовий період регістрах розрахунку'"));
	#КонецЕсли
	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Заполняется базовый период в документах основных начислений';uk='Заповнюється базовий період у документах основних нарахувань'"));
	#КонецЕсли

	//Обновить ТЧ Начисления 
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Начисления.Ссылка КАК Ссылка,
	               |	""Начисления"" КАК ИмяТЧ
	               |ИЗ
	               |	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
				   |
				   |ОБЪЕДИНИТЬ
				   |ВЫБРАТЬ
	               |	Начисления.Ссылка,
	               |	""Начисления""
	               |ИЗ
	               |	Документ.НачислениеОтпускаРаботникамОрганизаций.Начисления КАК Начисления
				   |
                   |ОБЪЕДИНИТЬ
				   |ВЫБРАТЬ
	               |	Начисления.Ссылка,
	               |	""Начисления""
	               |ИЗ
	               |	Документ.НачислениеПоБольничномуЛисту.Начисления КАК Начисления
				   |
				   |ОБЪЕДИНИТЬ
				   |ВЫБРАТЬ
	               |	Начисления.Ссылка,
	               |	""Начисления""
	               |ИЗ
	               |	Документ.НевыходыВОрганизациях.Начисления КАК Начисления
				   |
				   |ОБЪЕДИНИТЬ
				   |ВЫБРАТЬ
	               |	Начисления.Ссылка,
	               |	""Начисления""
	               |ИЗ
	               |	Документ.ОплатаПоСреднемуЗаработку.Начисления КАК Начисления
				   |
				   |ОБЪЕДИНИТЬ
				   |ВЫБРАТЬ
	               |	Начисления.Ссылка,
	               |	""Начисления""
	               |ИЗ
	               |	Документ.ПремииРаботниковОрганизаций.Начисления КАК Начисления
				   |
				   |ОБЪЕДИНИТЬ
				   |ВЫБРАТЬ
	               |	Начисления.Ссылка,
	               |	""Начисления""
	               |ИЗ
	               |	Документ.РасчетПриУвольненииРаботникаОрганизаций.Начисления КАК Начисления
				   |
				   |ОБЪЕДИНИТЬ
				   |ВЫБРАТЬ
	               |	Начисления.Ссылка,
	               |	""Начисления""
	               |ИЗ
	               |	Документ.РегистрацияПростоевВОрганизациях.Начисления КАК Начисления
				   |
				   |
				   |ОБЪЕДИНИТЬ
				   |ВЫБРАТЬ
	               |	Начисления.Ссылка,
	               |	""ОсновныеНачисления""
	               |ИЗ
	               |	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК Начисления
				   |
				   |
				   |ОБЪЕДИНИТЬ
				   |ВЫБРАТЬ
	               |	Начисления.Ссылка,
	               |	""ВзносыФОТ""
	               |ИЗ
	               |	Документ.ОтражениеЗарплатыВРеглУчете.ВзносыФОТ КАК Начисления
				   |
				   |
				   |ОБЪЕДИНИТЬ
				   |ВЫБРАТЬ
	               |	Начисления.Ссылка,
	               |	""ПогашениеЗаймов""
	               |ИЗ
	               |	Документ.ОтражениеЗарплатыВРеглУчете.ПогашениеЗаймов КАК Начисления
				   |
				   |УПОРЯДОЧИТЬ ПО Ссылка";
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаДок = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДок.Следующий() Цикл
		
		Док = ВыборкаДок.Ссылка.ПолучитьОбъект();
		Док.ОбменДанными.Загрузка = Истина;
		
		Для Каждого СтрокаНач из Док[ВыборкаДок.ИмяТЧ] Цикл
			Если ВыборкаДок.ИмяТЧ = "ВзносыФОТ" Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаНач.БазовыйПериодНачало) Тогда
					СтрокаНач.БазовыйПериодНачало =ВыборкаДок.Ссылка.ПериодРегистрации;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			Если ВыборкаДок.ИмяТЧ = "ПогашениеЗаймов" Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаНач.НалоговыйПериод) Тогда
					СтрокаНач.НалоговыйПериод =ВыборкаДок.Ссылка.ПериодРегистрации;
				КонецЕсли;
				Продолжить;
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(СтрокаНач.БазовыйПериодНачало) Тогда
				СтрокаНач.БазовыйПериодНачало = СтрокаНач.ДатаНачала;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаНач.БазовыйПериодКонец) Тогда
				СтрокаНач.БазовыйПериодКонец = СтрокаНач.ДатаОкончания;
			КонецЕсли;
		КонецЦикла;	
		
		Док.Записать();
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ИсправитьФактическуюВыроботку()
	
	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Обрабатывается регистр ""ВзаиморасчетыСРаботникамиОрганизаций""';uk='Оброблюється регістр ""ВзаиморасчетыСРаботникамиОрганизаций""'"));
	#КонецЕсли

	Запрос = Новый Запрос;
	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Приказ
	|ИЗ
	|	РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК Регистр
	|ГДЕ Регистр.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|УПОРЯДОЧИТЬ ПО
	|	Регистр.Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.ФактическаяВыработкаРаботниковОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Приказ;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;

		НаборЗаписей.Прочитать();
		
		Для каждого СтрокаНабора Из НаборЗаписей Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаНабора.Организация) Тогда
				 СтрокаНабора.Организация = СтрокаНабора.УдалитьПриказ.Организация;
			КонецЕсли;	 
		КонецЦикла; 
		
		НаборЗаписей.Записать();
	КонецЦикла;	
	
	
КонецПроцедуры	
	
Процедура ОбработатьВзаиморасчетыСРаботникамиОрганизаций()
	
	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Обрабатывается регистр ""ВзаиморасчетыСРаботникамиОрганизаций""';uk='Оброблюється регістр ""ВзаиморасчетыСРаботникамиОрганизаций""'"));
	#КонецЕсли

	Запрос = Новый Запрос;
	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Приказ
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК Регистр
	|УПОРЯДОЧИТЬ ПО
	|	Регистр.Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.ВзаиморасчетыСРаботникамиОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Приказ;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;

		НаборЗаписей.Прочитать();
		
		Для каждого СтрокаНабора Из НаборЗаписей Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаНабора.УдалитьВидВзаиморасчетов) Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаНабора.УдалитьВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовСРаботниками.ЗаработнаяПлата Тогда
				СтрокаНабора.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
			ИначеЕсли СтрокаНабора.УдалитьВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовСРаботниками.ЗаработнаяПлатаНеФОТ Тогда
				СтрокаНабора.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДругимВыплатам;
			ИначеЕсли СтрокаНабора.УдалитьВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовСРаботниками.ДепонированнаяЗарплата Тогда
				СтрокаНабора.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДепонентам;
			ИначеЕсли СтрокаНабора.УдалитьВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовСРаботниками.Дивиденды Тогда	
				СтрокаНабора.СчетУчета = ПланыСчетов.Хозрасчетный.ДивидендыПолученные;
			Иначе	
				СтрокаНабора.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
			КонецЕсли;
			СтрокаНабора.УдалитьВидВзаиморасчетов = 0;
			Если СтрокаНабора.КодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.УдалитьВыплатаАванса
				или СтрокаНабора.КодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.УдалитьВыплатаДепонента
				или СтрокаНабора.КодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.УдалитьВыплатаДивидендов
				или СтрокаНабора.КодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.УдалитьВыплатаМежрасчетная
				Тогда
				 СтрокаНабора.КодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата;
			КонецЕсли;	 
		КонецЦикла; 
		
		НаборЗаписей.Записать();
	КонецЦикла;	
	
	
КонецПроцедуры	
	
Процедура ОбработатьВзаиморасчетыПоВзносамВФонды()
	
	#Если Клиент Тогда
		Состояние("Обрабатывается регистр ""ВзаиморасчетыПоВзносамВФонды""");
	#КонецЕсли
	
	Запрос = Новый Запрос;
	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Приказ
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыПоВзносамВФонды КАК Регистр
	|УПОРЯДОЧИТЬ ПО
	|	Регистр.Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.ВзаиморасчетыПоВзносамВФонды.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Приказ;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;

		НаборЗаписей.Прочитать();
		
		Для каждого СтрокаНабора Из НаборЗаписей Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаНабора.УдалитьНалог) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаНабора.Налог = СтрокаНабора.УдалитьНалог;
			СтрокаНабора.УдалитьНалог = 0;
			СтрокаНабора.УдалитьСтавка = 0;
			СтрокаНабора.УдалитьПредел = 0;
			СтрокаНабора.УдалитьПериодДействия = 0;
		КонецЦикла; 
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры	

Процедура ОбработатьВзаиморасчетыПоНДФЛ()
	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Обрабатывается регистр ""ВзаиморасчетыПоНДФЛ""';uk='Обробляється регістр ""ВзаиморасчетыПоНДФЛ""'"));
	#КонецЕсли
	
	Запрос = Новый Запрос;
	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Приказ
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК Регистр
	|ГДЕ Регистр.Регистратор ССЫЛКА Документ.ОтражениеВзаиморасчетовСКонтрагентамиВ1ДФ
	|УПОРЯДОЧИТЬ ПО
	|	Регистр.Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.ВзаиморасчетыПоНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.Приказ;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;

		НаборЗаписей.Прочитать();
		
		Для каждого СтрокаНабора Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(СтрокаНабора.Сотрудник) Тогда
				Продолжить;
			КонецЕсли;
			//Возможно это Контрагент
			СтрокаНабора.Сотрудник = СтрокаНабора.УдалитьФизЛицо;
		КонецЦикла; 
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
Конецпроцедуры	

Процедура ОбработатьЗарплатаКВыплатеОрганизаций()
	
	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Перезаполняются документы ""ЗарплатаКВыплатеОрганизаций""';uk='Перезаповнюються документи ""ЗарплатаКВыплатеОрганизаций""'"));
	#КонецЕсли

	
	Запрос = Новый Запрос;
	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК Приказ
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.УдалитьЗарплата КАК Док
	|УПОРЯДОЧИТЬ ПО
	|	Док.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Док = Выборка.Приказ.ПолучитьОбъект();
		Док.ОбменДанными.Загрузка = Истина;
		Если Док.УдалитьКодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата Тогда
			Док.ВидВыплаты = Справочники.ВидыВыплат.Очередная;
		ИначеЕсли Док.УдалитьКодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.УдалитьВыплатаАванса Тогда
			Док.ВидВыплаты = Справочники.ВидыВыплат.Аванс;
		ИначеЕсли Док.УдалитьКодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.УдалитьВыплатаДепонента Тогда
			Док.ВидВыплаты = Справочники.ВидыВыплат.Депоненты;
		ИначеЕсли Док.УдалитьКодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.УдалитьВыплатаДивидендов Тогда
			Док.ВидВыплаты = Справочники.ВидыВыплат.Дивиденды;
		ИначеЕсли Док.УдалитьКодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.УдалитьВыплатаМежрасчетная Тогда
			ВидВыплаты = Справочники.ВидыВыплат.НайтиПоРеквизиту("ВидРасчета",Док.ВидРасчета);
			Если ВидВыплаты.Пустая() Тогда
				ВидВыплаты = Справочники.ВидыВыплат.СоздатьЭлемент();
				ВидВыплаты.ВидРасчета = Док.ВидРасчета;
				ВидВыплаты.Наименование = "Межрасчетная ("+Док.ВидРасчета.Наименование+")";
				ВидВыплаты.Записать();
				Док.ВидВыплаты = ВидВыплаты.Ссылка;
			Иначе
				Док.ВидВыплаты = ВидВыплаты;
			КонецЕсли;
		КонецЕсли;

		Для Каждого СтрокаВыпл из Док.УдалитьЗарплата Цикл
			НСПараметры = Док.ПараметрыОплаты.Добавить();
			ЗаполнитьЗначенияСвойств(НСПараметры,СтрокаВыпл);
			НСПараметры.ПериодВзаиморасчетов = Выборка.Приказ.ПериодРегистрации;
			НСПараметры.СуммаОкругления = СтрокаВыпл.Копейки;
		КонецЦикла;
		Док.Записать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Зарплата.Сотрудник,
		|	СУММА(Зарплата.Сумма) КАК Сумма,
		|	СУММА(Зарплата.Копейки) КАК СуммаОкругления,
		|	Зарплата.ВыплаченностьЗарплаты КАК ВыплаченностьЗарплаты,
		|	Зарплата.Ссылка.УдалитьСпособВыплаты КАК СпособВыплаты,
		|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Контрагент КАК Банк
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.УдалитьЗарплата КАК Зарплата
		|   ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ПлатежноеПоручениеИсходящее.ВыплатаЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		|	ПО	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость = Зарплата.Ссылка И
		|		ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Проведен
        |ГДЕ Зарплата.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|Сотрудник, ВыплаченностьЗарплаты, Зарплата.Ссылка.УдалитьСпособВыплаты,ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Контрагент";
		Запрос.УстановитьПараметр("Ссылка",Выборка.Приказ);
		
		ВыборкаРаботники = Запрос.Выполнить();
		Док.РаботникиОрганизации.Загрузить(ВыборкаРаботники.Выгрузить());
		Док.УдалитьЗарплата.Очистить();
	
		Док.Записать();
	КонецЦикла;	
	
	
КонецПроцедуры	

Процедура ОбработатьНачислениеОтпускаРаботникамОрганизаций()
	
	
	#Если Клиент Тогда
		Состояние("Перезаполняются документы ""НачислениеОтпускаРаботникамОрганизаций""");
	#КонецЕсли

	
	Запрос = Новый Запрос;
	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК Приказ
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК Док
	|УПОРЯДОЧИТЬ ПО
	|	Док.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Док = Выборка.Приказ.ПолучитьОбъект();
		Док.ОбменДанными.Загрузка = Истина;
		
		Док.ВидДокументаОтпуск = Перечисления.ВидыДокументаОтпуск.Отпускные;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ВидРасчета,
		|	МИНИМУМ(Начисления.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(Начисления.ДатаОкончания) КАК ДатаОкончания
	    |ИЗ
		|	Документ.НачислениеОтпускаРаботникамОрганизаций.Начисления КАК Начисления
		|ГДЕ Начисления.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|ВидРасчета";
		Запрос.УстановитьПараметр("Ссылка",Выборка.Приказ);
		
		ВыборкаОтпуска = Запрос.Выполнить();
		Док.Отпуска.Загрузить(ВыборкаОтпуска.Выгрузить());
	
		Док.Записать();
	КонецЦикла;	
	
	
КонецПроцедуры	

Процедура ОбработатьНачислениеПоБольничномуЛисту()
	
	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Перезаполняются документы ""НачислениеПоБольничномуЛисту""';uk='Перезаповнюються документи ""НачислениеПоБольничномуЛисту""'"));
	#КонецЕсли

	
	Запрос = Новый Запрос;
	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК Приказ
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту КАК Док
	|УПОРЯДОЧИТЬ ПО
	|	Док.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Док = Выборка.Приказ.ПолучитьОбъект();
		Док.ОбменДанными.Загрузка = Истина;
		
		Если Док.УдалитьПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ЗаболеваниеЧернобыльцев Тогда
			 Док.ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ЗаболеваниеЧернобыльцев;
		ИначеЕсли Док.УдалитьПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание Тогда
			 Док.ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ОбщееЗаболевание;	 
		ИначеЕсли Док.УдалитьПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			 Док.ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ПоБеременностиИРодам;
		ИначеЕсли Док.УдалитьПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеБезЗаболевания Тогда
			 Док.ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ПособиеБезЗаболевания;
		ИначеЕсли Док.УдалитьПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком Тогда
			 Док.ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
		ИначеЕсли Док.УдалитьПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПрофЗаболевание Тогда
			 Док.ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ПрофЗаболевание;
		ИначеЕсли Док.УдалитьПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Прочее Тогда
			 Док.ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.Прочее;
		ИначеЕсли Док.УдалитьПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаВБыту Тогда
			 Док.ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.Прочее;	 	 
		ИначеЕсли Док.УдалитьПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
			 Док.ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ТравмаНаПроизводстве;	 	 	 
		КонецЕсли;
		 
		Док.Записать(); 
		
	КонецЦикла;	
	
	
КонецПроцедуры	

Процедура ОбработатьНачислениеДивидендовОрганизаций()
	
	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Перезаполняются документы ""НачислениеДивидендовОрганизаций""';uk='Перезаповнюються документи ""НачислениеДивидендовОрганизаций""'"));
	#КонецЕсли

	
	Запрос = Новый Запрос;
	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК Приказ
	|ИЗ
	|	Документ.НачислениеДивидендовОрганизаций КАК Док
	|УПОРЯДОЧИТЬ ПО
	|	Док.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Док = Выборка.Приказ.ПолучитьОбъект();
		Док.ОбменДанными.Загрузка = Истина;
		
		Для Каждого НДФЛ из Док.УдалитьНДФЛ Цикл
			ФизЛицо = НДФЛ.ФизЛицо;
			СтрокаНач = Док.Начисления.Найти(ФизЛицо, "ФизЛицо");
			Если СтрокаНач <> Неопределено Тогда
				СтрокаНач.НДФЛ = НДФЛ.Налог;
			КонецЕсли;	
		КонецЦикла;
		Док.Записать();
		
	КонецЦикла;	
	
	
КонецПроцедуры	

Процедура СформироватьПараметрыИндексации()
	
	#Если Клиент Тогда
	Состояние(НСтр("ru='Создаются документы ""ИзменениеПараметровРасчетаИндексациии""';uk='Створюються документи ""ИзменениеПараметровРасчетаИндексациии""'"));
	#КонецЕсли

	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|  Начисления.Организация	КАК Организация
	|ИЗ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Начисления
	|ГДЕ Начисления.ВидРасчетаИзмерение <> Начисления.ВидРасчета
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|  Начисления.Период		КАК ДатаИзменения,
			|  Начисления.Организация	КАК Организация,
			|  Начисления.Видрасчета	КАК ВидРасчета,
			|  Начисления.Сотрудник		КАК Сотрудник,
			|  Начисления.Показатель1	КАК Доход
			|ИЗ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Начисления
			|ГДЕ	Начисления.Организация = &Организация
			|	И	Начисления.ВидРасчетаИзмерение = Неопределено
			|	И	Начисления.Актуальность
			|	И	Начисления.Показатель1 <> 0
			|	И	Начисления.Сотрудник <> ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
			|	И	Начисления.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)";
        Запрос.УстановитьПараметр("Организация",Выборка.Организация);
		
		ВыборкаОрг = Запрос.Выполнить();
		ТЗ = ВыборкаОрг.Выгрузить();
		Если ТЗ.Количество() > 0 Тогда
			Док = Документы.ИзменениеПараметровРасчетаИндексации.СоздатьДокумент();
			Док.ОбменДанными.Загрузка = Истина;
			Док.Организация = Выборка.Организация;
			Док.Дата = РабочаяДата;
			Док.РаботникиОрганизации.Загрузить(ТЗ);
			Док.Записать();
		КонецЕсли;

	КонецЦикла;	

	
	
	
КонецПроцедуры	

Процедура ВыполнитьОбработку(ВыполнитьВСЕ = Истина) Экспорт
	
	Если ОбщиеИзменения или ВыполнитьВСЕ Тогда
		//Общее
		ИсправитьФактическуюВыроботку();
		ЗаполнитьУчетнуюПолитику();
		ПеренестиДанныеЗавершенияВРегистреРаботникиОрганизаций();
		ПеренестиДанныеПроизошедшееСобытиеВДокументах();
		ИсправитьПериодЗавершения();
		ДобавитьИСохранитьНастройкиОтчета();
	КонецЕсли;	
	
	Если ОбновлениеСотрудников или ВыполнитьВСЕ Тогда
		//Сотрудники
		ОбновитьСотрудниковОрганизаций();
	КонецЕсли;	
	
	Если ОбновлениеДоговорников или ВыполнитьВСЕ Тогда
		//Договорники
		ОбновитьДоговорников();
	КонецЕсли;	

	Если НастройкаНачислений или ВыполнитьВСЕ Тогда
		//Заполнение СчетаУчета
		ОбновитьОсновныеНачисления();
		//Перенос дополнительных
		ПеренестиДопРасчетыВОсновные();
		ПеренестиДопРасчетыВОсновныеДокументы();
		ПеренестиДопРасчетыВОсновныеРегистры();
		ОбновитьТЧОсновныеНачисления();
	КонецЕсли;
	
	Если ОбновлениеРегистров или ВыполнитьВСЕ Тогда
		//Реструктуризация регистров
		ОбработатьВзаиморасчетыСРаботникамиОрганизаций();
		ОбработатьВзаиморасчетыПоВзносамВФонды();
		ОбработатьВзаиморасчетыПоНДФЛ();
	КонецЕсли;	
	
	
	//Реструктуризация документов
	Если ОбновлениеДокументов или ВыполнитьВСЕ Тогда
		ОбработатьЗарплатаКВыплатеОрганизаций();
		ОбработатьНачислениеОтпускаРаботникамОрганизаций();
		ОбработатьНачислениеПоБольничномуЛисту();
		ОбработатьНачислениеДивидендовОрганизаций();
		СформироватьПараметрыИндексации();
	КонецЕсли;	
	
	Если ОбновлениеСотрудниковУпр или ВыполнитьВСЕ Тогда
		// Сотрудники упр
		ОбновитьСотрудников();
	КонецЕсли;	

	Если ОчисткаРегистров или ВыполнитьВСЕ Тогда
		//Очистка регистров
		ОчиститьРегистрыОтФизлицаПриказа();
	КонецЕсли;	
	
	Если РеквизитыВремени или ВыполнитьВСЕ Тогда
		//Время
		ЗаполнитьРеквизитыПоУчетуРабочегоВремени();
	КонецЕсли;
	
	Если КонвертацияДолжностей или ВыполнитьВСЕ Тогда
	    //Должности
		// В регистре сведений Работники и РаботникиОрганизаций
		// установить значения реквизита Должность значением, которое было до увольнения
		#Если Клиент Тогда
			Состояние(НСтр("ru='Заполняется реквизит ""Должность"" регистра сведений ""Работники""';uk='Заповнюється реквізит ""Посада"" регістру даних ""Працівники""'"));
		#КонецЕсли
		ЗаполнитьДолжностьВРегистреРаботники();
		#Если Клиент Тогда
			Состояние(НСтр("ru='Заполняется реквизит ""Должность"" регистра сведений ""Работники организаций""';uk='Заповнюється реквізит ""Посада"" регістру відомостей ""Працівники організацій""'"));
		#КонецЕсли
		ЗаполнитьДолжностьВРегистреРаботникиОрганизации();
		// Конвертация должностей
		ОбновитьДолжности();
	КонецЕсли;	

	Если ОбновлениеПоказателейМотивации или ВыполнитьВСЕ Тогда
		//Показатели схем мотивации	
		ВозможностьИзмененияНеУказана = Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка();
		Числовой = Перечисления.ТипыПоказателейСхемМотивации.Числовой;
		УстановитьРеквизитыПоказателяСхемМотивации(Справочники.ПоказателиСхемМотивации.Стаж.ПолучитьОбъект(), Числовой, ВозможностьИзмененияНеУказана);
	КонецЕсли;	
	
	Если ЗаполнениеКонтрольПериодов или ВыполнитьВСЕ Тогда
		// Контроль периодов
		// Дописать движения, необходимые для механизма контроля периодов
		ЗаполнитьРегистрыКонтроляПериодов();
	КонецЕсли;	

	Если ОбновлениеКандидатов или ВыполнитьВСЕ Тогда
		//Кандидаты
		#Если Клиент Тогда
			Состояние(НСтр("ru='Преобразование кандидатов в задачи';uk='Перетворення кандидатів у задачі'"));
		#КонецЕсли
		КонвертироватьКандидатовВЗадачи();
	    #Если Клиент Тогда
			Состояние(НСтр("ru='Обрабатываются документы ""Результат испытательного срока""';uk='Обробляються документи ""Результат випробувального строку""'"));
		#КонецЕсли
		КонвертироватьДокументРезультатИспытательногоСрока();
		#Если Клиент Тогда
			Состояние(НСтр("ru='Обрабатываются документы по работе с кандидатами';uk='Обробляються документи по роботі з кандидатами'"));
		#КонецЕсли
	КонецЕсли;	
		
	Если КонвертацияНамеченныхСобытий или ВыполнитьВСЕ Тогда
		// Объединение намеченных событий по персоналу
		КонвертироватьНамеченныеСобытияПоПерсоналуОрганизаций();
	КонецЕсли;	
	
	#Если Клиент Тогда
	Сообщить(НСтр("ru='	Обновление документов по зарплате и персоналу завершено!';uk=' Оновлення документів по зарплаті і персоналу завершено!'"),СтатусСообщения.Информация);
	#КонецЕсли

	
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	ТекстВопроса = 
	"Выполнение данной обработки может занять продолжительное время
	|и является необратимой операцией. Настоятельно рекомендуется предварительно ознакомиться
	|cо справочной информацией. Продолжить?";
	Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработку(ВыполнитьВсе);	
КонецПроцедуры

