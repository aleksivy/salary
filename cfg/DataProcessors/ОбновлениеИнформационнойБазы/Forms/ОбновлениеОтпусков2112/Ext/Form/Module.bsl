Процедура ПереносИнформацииОтпускаОрганизации()

	//2. Обрабатываем существующие документы отпуска организаций
	Запрос = новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОтпускаОрганизаций.Ссылка КАК ДокументОтпуск
	|ИЗ
	|	Документ.ОтпускаОрганизаций КАК ОтпускаОрганизаций
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОтпуска = Выборка.ДокументОтпуск.ПолучитьОбъект();
		
		ДокументОтпуска.ВидОперации = Перечисления.ВидыОперацийОтпускаОрганизаций.Отпуск;

		//ТЧ "Работники организации"
		ТЗРаботникиОрганизаций = Новый ТаблицаЗначений;
		ТЗРаботникиОрганизаций.Колонки.Добавить("Сотрудник");
		ТЗРаботникиОрганизаций.Колонки.Добавить("ФизЛицо");
		ТЗРаботникиОрганизаций.Колонки.Добавить("ОсвобождатьСтавку");
		ТЗРаботникиОрганизаций.Колонки.Добавить("ДатаНачала");
		ТЗРаботникиОрганизаций.Колонки.Добавить("ДатаОкончания");
		ТЗРаботникиОрганизаций.Колонки.Добавить("Основание");
		ТЗРаботникиОрганизаций.Колонки.Добавить("КвоДней");
		ТЗРаботникиОрганизаций.Колонки.Добавить("НапомнитьПоЗавершении");
		ТЗРаботникиОрганизаций.Колонки.Добавить("РабочийГодС");
		ТЗРаботникиОрганизаций.Колонки.Добавить("РабочийГодПо");
		ТЗРаботникиОрганизаций.Колонки.Добавить("ВидОтпуска");
		
		Для Каждого СтрокаТЧ ИЗ ДокументОтпуска.РаботникиОрганизации Цикл
			СтрокаТЗОсновнойОтпуск = ТЗРаботникиОрганизаций.Добавить();
			//Заполняем строку таблицы значений реквизитами, которые мы можем заполнять до определения вида дополнительного отпуска
			СтрокаТЗОсновнойОтпуск.Сотрудник = СтрокаТЧ.Сотрудник;
			СтрокаТЗОсновнойОтпуск.ФизЛицо = СтрокаТЧ.Сотрудник.ФизЛицо;
			СтрокаТЗОсновнойОтпуск.ОсвобождатьСтавку = СтрокаТЧ.ОсвобождатьСтавку;
			СтрокаТЗОсновнойОтпуск.Основание = СтрокаТЧ.Основание;
			СтрокаТЗОсновнойОтпуск.НапомнитьПоЗавершении = СтрокаТЧ.НапомнитьПоЗавершении;
			СтрокаТЗОсновнойОтпуск.РабочийГодС = СтрокаТЧ.РабочийГодС;
			СтрокаТЗОсновнойОтпуск.РабочийгодПо = СтрокаТЧ.РабочийГодПо;
			СтрокаТЗОсновнойОтпуск.ДатаНачала = СтрокаТЧ.ДатаНачала;
			
			//Определяем вид основного отпуска строки, всего было доступно 4 вида основного отпуска
			Если СтрокаТЧ.УдалитьПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный Тогда
				СтрокаТЗОсновнойОтпуск.ВидОтпуска = Справочники.ВидыОтпусков.ЕжегодныйОсновной;
			ИначеЕсли СтрокаТЧ.УдалитьПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебный Тогда
				СтрокаТЗОсновнойОтпуск.ВидОтпуска = Справочники.ВидыОтпусков.УчебныйОтпуск;
			ИначеЕсли СтрокаТЧ.УдалитьПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебныйНеоплачиваемый Тогда
				СтрокаТЗОсновнойОтпуск.ВидОтпуска = Справочники.ВидыОтпусков.УчебныйОтпускБезОплаты;
			ИначеЕсли СтрокаТЧ.УдалитьПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускБезСохраненияЗарплаты Тогда
				СтрокаТЗОсновнойОтпуск.ВидОтпуска = Справочники.ВидыОтпусков.ОтпускЗаСвойСчет;
			КонецЕсли;
			
			//Определяем, заполнен ли дополнительный отпуск. Дозаполняем реквизиты, которые зависят от дополнительного отпуска.
			//Если заполнен дополнительный отпуск, то создаем дополнительную строку с табличной части
			Если ЗначениеЗаполнено(СтрокаТЧ.УдалитьВидДополнительногоОтпуска) И ЗначениеЗаполнено(СтрокаТЧ.УдалитьДатаНачалаДоп) Тогда
				СтрокаТЗОсновнойОтпуск.ДатаОкончания = НачалоДня(СтрокаТЧ.УдалитьДатаНачалаДоп) - 1;
				СтрокаТЗОсновнойОтпуск.КвоДней = ОпределитьКвоДнейДляОтпуска(СтрокаТЧ.ДатаНачала, НачалоДня(СтрокаТЧ.УдалитьДатаНачалаДоп) - 1);				
	
				//создаем дополнительную строку для дополнительного вида отпуска
				СтрокаТЗДополнительныйОтпуск = ТЗРаботникиОрганизаций.Добавить();
				СтрокаТЗДополнительныйОтпуск.Сотрудник = СтрокаТЧ.Сотрудник;
				СтрокаТЗДополнительныйОтпуск.ФизЛицо = СтрокаТЧ.Сотрудник.ФизЛицо;
				СтрокаТЗДополнительныйОтпуск.ОсвобождатьСтавку = СтрокаТЧ.ОсвобождатьСтавку;
				СтрокаТЗДополнительныйОтпуск.Основание = СтрокаТЧ.Основание;
				СтрокаТЗДополнительныйОтпуск.НапомнитьПоЗавершении = СтрокаТЧ.НапомнитьПоЗавершении;
				СтрокаТЗДополнительныйОтпуск.РабочийГодС = СтрокаТЧ.РабочийГодС;
				СтрокаТЗДополнительныйОтпуск.РабочийГодПо = СтрокаТЧ.РабочийГодПо;
				СтрокаТЗДополнительныйОтпуск.ДатаНачала = СтрокаТЧ.УдалитьДатаНачалаДоп;
				СтрокаТЗДополнительныйОтпуск.ДатаОкончания = СтрокаТЧ.ДатаОкончания;
				СтрокаТЗДополнительныйОтпуск.КвоДней = ОпределитьКвоДнейДляОтпуска(СтрокаТЧ.УдалитьДатаНачалаДоп, СтрокаТЧ.ДатаОкончания);
				//Если вид расчета был предопределенным, то заполняем предопределенным видом отпуска, иначе недавно созданным
				Если СтрокаТЧ.УдалитьВидДополнительногоОтпуска = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет Тогда
					СтрокаТЗДополнительныйОтпуск.ВидОтпуска = Справочники.ВидыОтпусков.ОтпускЗаСвойСчет;
				ИначеЕсли СтрокаТЧ.УдалитьВидДополнительногоОтпуска = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыУчебный Тогда
					СтрокаТЗДополнительныйОтпуск.ВидОтпуска = Справочники.ВидыОтпусков.УчебныйОтпускБезОплаты;
				Иначе
					СтрокаТЗДополнительныйОтпуск.ВидОтпуска = СтрокаТЧ.УдалитьВидДополнительногоОтпуска.ВидОтпуска;
				КонецЕсли;				
			Иначе
				СтрокаТЗОсновнойОтпуск.ДатаОкончания = СтрокаТЧ.ДатаОкончания;
				СтрокаТЗОсновнойОтпуск.КвоДней = ОпределитьКвоДнейДляОтпуска(СтрокаТЧ.ДатаНачала, СтрокаТЧ.ДатаОкончания);				
			КонецЕсли;
		КонецЦикла;
		
		ДокументОтпуска.РаботникиОрганизации.Загрузить(ТЗРаботникиОрганизаций);
		
		//ТЧ "Использование ежегодного отпуска"
		
		ТЗИспользованиеЕжегодногоОтпуска = Новый ТаблицаЗначений;
		ТЗИспользованиеЕжегодногоОтпуска.Колонки.Добавить("РабочийПериодНачало");
		ТЗИспользованиеЕжегодногоОтпуска.Колонки.Добавить("РабочийПериодОкончание");
		ТЗИспользованиеЕжегодногоОтпуска.Колонки.Добавить("ИспользоватьДней");
		ТЗИспользованиеЕжегодногоОтпуска.Колонки.Добавить("ПолагаетсяДней");
		ТЗИспользованиеЕжегодногоОтпуска.Колонки.Добавить("УжеИспользованоДней");
		ТЗИспользованиеЕжегодногоОтпуска.Колонки.Добавить("Сотрудник");
		ТЗИспользованиеЕжегодногоОтпуска.Колонки.Добавить("ВидОтпуска");
		
		Для Каждого СтрокаТЧ ИЗ ДокументОтпуска.ИспользованиеЕжегодногоОтпуска Цикл

			Если (СтрокаТЧ.НомерСтрокиРаботникиОрганизации > 0) И (СтрокаТЧ.НомерСтрокиРаботникиОрганизации < ДокументОтпуска.РаботникиОрганизации.Количество()) ТОГДА;
				СтрокаТЧРаботникиОрганизации = ДокументОтпуска.РаботникиОрганизации.Получить(СтрокаТЧ.НомерСтрокиРаботникиОрганизации);
			Иначе
				Продолжить;
			КонецЕсли;
									
			//в табличной части были распределены только дни основного отпуска, поэтому распределяем только его
			СтрокаТЗИспользованиеОсновногоОтпуска = ТЗИспользованиеЕжегодногоОтпуска.Добавить();
			
			СтрокаТЗИспользованиеОсновногоОтпуска.Сотрудник = СтрокаТЧРаботникиОрганизации.Сотрудник;
			Если СтрокаТЧРаботникиОрганизации.УдалитьПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный Тогда
				СтрокаТЗИспользованиеОсновногоОтпуска.ВидОтпуска = Справочники.ВидыОтпусков.ЕжегодныйОсновной;
			ИначеЕсли СтрокаТЧРаботникиОрганизации.УдалитьПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебный Тогда
				СтрокаТЗИспользованиеОсновногоОтпуска.ВидОтпуска = Справочники.ВидыОтпусков.УчебныйОтпуск;
			ИначеЕсли СтрокаТЧРаботникиОрганизации.УдалитьПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебныйНеоплачиваемый Тогда
				СтрокаТЗОсновнойОтпуск.ВидОтпуска = Справочники.ВидыОтпусков.УчебныйОтпускБезОплаты;
			ИначеЕсли СтрокаТЧРаботникиОрганизации.УдалитьПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускБезСохраненияЗарплаты Тогда
				СтрокаТЗИспользованиеОсновногоОтпуска.ВидОтпуска = Справочники.ВидыОтпусков.ОтпускЗаСвойСчет;
			КонецЕсли;
			
			СтрокаТЗИспользованиеОсновногоОтпуска.РабочийПериодНачало = СтрокаТЧ.РабочийПериодНачало;
			СтрокаТЗИспользованиеОсновногоОтпуска.РабочийПериодОкончание = СтрокаТЧ.РабочийПериодОкончание;
			СтрокаТЗИспользованиеОсновногоОтпуска.ИспользоватьДней = СтрокаТЧ.ИспользоватьДней;
			СтрокаТЗИспользованиеОсновногоОтпуска.ПолагаетсяДней = СтрокаТЧ.ПолагаетсяДней;
			СтрокаТЗИспользованиеОсновногоОтпуска.УжеИспользованоДней = СтрокаТЧ.УжеИспользованоДней;
		КонецЦикла;
		ДокументОтпуска.ИспользованиеЕжегодногоОтпуска.Загрузить(ТЗИспользованиеЕжегодногоОтпуска);
		
		ДокументОтпуска.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КорректировкаДвижений()
	
	
	//Движения регистра накопления "ИспользованиеЕжегодныхОтпусковРаботников"
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК ДокументРегистратор
	|ИЗ
	|	РегистрНакопления.ИспользованиеЕжегодныхОтпусковРаботников КАК Регистр
	|УПОРЯДОЧИТЬ ПО
	|	Регистр.Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.ИспользованиеЕжегодныхОтпусковРаботников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение	= Выборка.ДокументРегистратор;
		НаборЗаписей.ОбменДанными.Загрузка		= Истина;

		НаборЗаписей.Прочитать();
		
		Для Каждого СтрокаНабора Из НаборЗаписей Цикл
			Сотрудник = ПолучитьСотрудникаИзФизЛица(СтрокаНабора.УдалитьФизЛицо);	
			СтрокаНабора.Сотрудник = Сотрудник;
			СтрокаНабора.ВидОтпуска = Справочники.ВидыОтпусков.ЕжегодныйОсновной;
			СтрокаНабора.ВидОперации = Перечисления.ВидыОперацийОтпускаОрганизаций.Отпуск;
			Если Выборка.ДокументРегистратор.Метаданные().Имя <> "КорректировкаЗаписейРегистров" Тогда
				СтрокаНабора.Организация = Выборка.ДокументРегистратор.Организация;
			Иначе
				СтрокаНабора.Организация = Сотрудник.Организация;
			КонецЕсли;
		КонецЦикла; 
		
		НаборЗаписей.Записать();
	КонецЦикла;

	//Движения регистра сведений "Положенные ежегодные отпуска работников"
	НаборЗаписей = РегистрыСведений.ПоложенныеЕжегодныеОтпускаРаботников.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого СтрокаНабора ИЗ НаборЗаписей Цикл
		
		Сотрудник = ПолучитьСотрудникаИзФизЛица(СтрокаНабора.УдалитьФизЛицо);
		СтрокаНабора.Сотрудник = Сотрудник;
		СтрокаНабора.Организация = Сотрудник.Организация;
		СтрокаНабора.ВидОтпуска = Справочники.ВидыОтпусков.ЕжегодныйОсновной;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	
КонецПроцедуры

Функция ПолучитьСотрудникаИзФизлица(ФизЛицо)
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	СписокСотрудников.Сотрудник
		|ИЗ
		|	(ВЫБРАТЬ
		|				МИНИМУМ(СотрудникиДУ.Ссылка) КАК Сотрудник,
		|				СотрудникиДУ.Физлицо
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
		|			ГДЕ
		|				(СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|						ИЛИ СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор))
		|				И СотрудникиДУ.Физлицо  = &ФизЛицо			
		|			СГРУППИРОВАТЬ ПО
		|				СотрудникиДУ.Физлицо) КАК СписокСотрудников
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СписокФизическихЛиц.Физлицо КАК Физлицо,
		|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
		|				ИЗ
		|					(ВЫБРАТЬ
		|						РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
		|						1 КАК Приоритет
		|					ИЗ
		|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|								,
		|								Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|									И Сотрудник.Физлицо =&ФизЛицо ) КАК РаботникиОсновноеМесто
		|					ГДЕ
		|						РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						РаботникиСовместительство.Сотрудник.Физлицо,
		|						2
		|					ИЗ
		|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|								,
		|								Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
		|									И Сотрудник.Физлицо = &ФизЛицо ) КАК РаботникиСовместительство
		|					ГДЕ
		|						РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						СотрудникиДУ.Физлицо,
		|						3
		|					ИЗ
		|						Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
		|					ГДЕ
		|						(СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|								ИЛИ СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор))
		|						И СотрудникиДУ.Физлицо =&ФизЛицо) КАК СписокФизическихЛиц
		|				
		|				СГРУППИРОВАТЬ ПО
		|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
		|				ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
		|";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Сотрудник;
		Иначе
			Возврат Справочники.СотрудникиОрганизаций.ПустаяСсылка();
		КонецЕсли;	
		
		
КонецФункции

Функция ОпределитьКвоДнейДляОтпуска(Дата1, Дата2)
	
	ТекстЗапроса="ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК КоличествоКалендарныеДни
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания		
	|	И РегламентированныйПроизводственныйКалендарь.ВидДня <> ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ВидыДнейПроизводственногоКалендаря.Праздник)
	|";
		
	Запрос=Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаНачала", Дата1);
	Запрос.УстановитьПараметр("ДатаОкончания", Дата2);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	КоличествоКалендарныеДни=?(Выборка.КоличествоКалендарныеДни=Неопределено,0,Выборка.КоличествоКалендарныеДни);
	Возврат КоличествоКалендарныеДни;
	
КонецФункции

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Если ОбновлениеДокументов Тогда
		ПереносИнформацииОтпускаОрганизации();
	КонецЕсли;
	
	Если ОбновлениеРегистров Тогда
		КорректировкаДвижений();
	КонецЕсли;
	
	Сообщить(НСтр("ru='Обработка завершена';uk='Обробка завершена'"));
	
КонецПроцедуры


Процедура ЗаполнитьВидыОтпусковНажатие(Элемент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета,
	|   ОсновныеНачисленияОрганизаций.ВидОтпуска КАК ВидОтпуска
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	НЕ ОсновныеНачисленияОрганизаций.Предопределенный
	|	И ОсновныеНачисленияОрганизаций.ЭтоОтпуск
	|";
	
	ТаблицаВидовОтпусков = Запрос.Выполнить().Выгрузить();

КонецПроцедуры


Процедура ПрименитьНажатие(Элемент)
	
	Для Каждого Отпуск из ТаблицаВидовОтпусков Цикл
		
		Если НЕ ЗначениеЗаполнено(Отпуск.ВидОтпуска) Тогда
			//Создаем новый вид отпуска, которые является одноименным данному виду расчета
			НовыйВидОтпуска = Справочники.ВидыОтпусков.СоздатьЭлемент();
			НовыйВидОтпуска.Наименование = Отпуск.ВидРасчета.Наименование;
			НовыйВидОтпуска.ВедетсяУчетОстатков = Ложь;
			НовыйВидОтпуска.Записать();
			Сообщить(НСтр("ru='Создан новый вид отпуска ""';uk='Створений новий вид відпустки ""'") + НовыйВидОтпуска.Наименование + НСтр("ru='"". Требуется заполнить настройки данного вида отпуска.';uk='"". Потрібно заповнити налаштування даного виду відпустки.'"));
			Отпуск.ВидОтпуска = НовыйВидОтпуска.Ссылка;
		КонецЕсли;
		
		//ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ.ПолучитьОбъект();
		//ВидРасчета.ВидОтпуска = НовыйВидОтпуска.Ссылка;
		//ВидРасчета.Записать();
		
		ВидРасчета = Отпуск.ВидРасчета.ПолучитьОбъект();
		ВидРасчета.ВидОтпуска = Отпуск.ВидОтпуска;
		ВидРасчета.Записать();
	КонецЦикла;
	
КонецПроцедуры

