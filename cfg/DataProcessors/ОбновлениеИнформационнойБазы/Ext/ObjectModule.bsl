
//////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьОбновление() Экспорт

	// Подготовка к выводу формы описания обновлений.
	МакетОписаниеОбновлений = Неопределено;
	ДокументОписаниеОбновлений = Неопределено;
	#Если Клиент Тогда				
	ФормаОписаниеОбновлений    = ПолучитьФорму("ОписаниеОбновлений");
	МакетОписаниеОбновлений    = ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений);
	ДокументОписаниеОбновлений = ФормаОписаниеОбновлений.ЭлементыФормы.ДокументОписаниеОбновлений;
	ДокументОписаниеОбновлений.Очистить();
	#КонецЕсли


	// Перед обновлением требуется снять дату запрета изменения данных
	ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(0));

	// Обновление информационной базы.
	// Последовательно вызываются функции для обновления с соответствующей версии.

	//Вызов функций заполнения данных для пустой информационной базы
	Если Константы.НомерВерсииКонфигурации.Получить() = "" Тогда
		
		СтрСообщения = НСтр("ru='начальное заполнение информационной базы версии ';uk='початкове заповнення інформаційної бази версії '") + Метаданные.Версия;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		НачатьТранзакцию();
		
		ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		Константы.НомерВерсииКонфигурации.Установить(Метаданные.Версия); // после заполнения пустой ИБ установим последний номер версии
		
		ЗафиксироватьТранзакцию();
		
		#Если Клиент Тогда				
		Если ДокументОписаниеОбновлений.ВысотаТаблицы > 0 Тогда
			ФормаОписаниеОбновлений.Открыть(); // для заполнения справочников при первом запуске.
		КонецЕсли;
		#КонецЕсли
		
		Возврат;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.1.16";
	
	Если Найти(ТекущаяВерсияИБ,"8.1.0.") <> 0 
		Или ТекущаяВерсияИБ="1.0.4.2" Тогда 	
        #Если Клиент Тогда
		Предупреждение(НСтр("ru='Обновление ИБ производится при помощи процедуры переноса данных';uk='Оновлення ІБ здійснюється за допомогою процедури перенесення даних'"));
        #КонецЕсли
		Возврат
	КонецЕсли;
		
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.1" И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
	 
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		НачатьТранзакцию();

		// Автоматический поиск и обновление необходимых объектов
		ОбработкаНЗ = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		ОбработкаНЗ.ЗаполнитьВсеОбъекты();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		КонецЕсли;
		
	КонецЕсли;

    ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.2.2";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.1" 
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.2" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
	 
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		НачатьТранзакцию();

		// Автоматический поиск и обновление необходимых объектов
		ОбработкаНЗ = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		ОбработкаНЗ.ЗаполнитьВсеОбъекты();
		
		// изменения по зарплате
		ПерепровестиДокументыПоВзносыВФонды();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("202", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;

	                 
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.3.3";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.2" 
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.3" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
	 
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		НачатьТранзакцию();

		// Автоматический поиск и обновление необходимых объектов
		ОбработкаНЗ = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		ОбработкаНЗ.ЗаполнитьОбъект("ПланВидовРасчета", "ОсновныеНачисленияОрганизаций");
		ОбработкаНЗ.ЗаполнитьОбъект("РегистрСведений", "ШкалаПочтовыхСборов");
		ОбработкаНЗ.ЗаполнитьОбъект("РегистрСведений", "ШкалаСтавокНалогов");
		
		// изминение наименования элемента справочника 
		СсылкаГривна = Справочники.Валюты.НайтиПоКоду("980"); 
		Если НЕ (СсылкаГривна.Пустая()) Тогда
			ОбъектСправочника = СсылкаГривна.ПолучитьОбъект();
			ОбъектСправочника.Наименование = "грн";
			ОбъектСправочника.Записать();
		КонецЕсли;
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("203", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.4.2";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.3" 
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.4" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
	 
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		НачатьТранзакцию();

		// Автоматический поиск и обновление необходимых объектов
		ОбработкаНЗ = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		ОбработкаНЗ.ЗаполнитьОбъект("РегистрСведений", "ИндексИнфляции");
		ОбработкаНЗ.ЗаполнитьОбъект("РегистрСведений", "Праздники");
		ОбработкаНЗ.ЗаполнитьОбъект("РегистрСведений", "ПособиеПриРожденииРебенка");
		ОбработкаНЗ.ЗаполнитьОбъект("РегистрСведений", "ВидыРасчетовВзносовВФонды");
		ОбработкаНЗ.ЗаполнитьОбъект("ПланВидовРасчета","ОсновныеНачисленияОрганизаций");
		ОбработкаНЗ.ЗаполнитьОбъект("ПланВидовРасчета","ДополнительныеНачисленияОрганизаций");
		ОбработкаНЗ.ЗаполнитьОбъект("ПланВидовРасчета","ВзносыВФонды");

		ОбработкаНЗ.ЗаполнитьОбъект("РегистрСведений", "ПрожиточныеМинимумы");
		ОбработкаНЗ.ЗаполнитьОбъект("РегистрСведений", "МинимальнаяОплатаТруда");
		ОбработкаНЗ.ЗаполнитьОбъект("РегистрСведений", "РазмерыЗаконодательноУстановленныхВыплат");
		ОбработкаНЗ.ЗаполнитьОбъект("РегистрСведений", "ШкалаСтавокНалогов");
		ОбработкаНЗ.ЗаполнитьОбъект("РегистрСведений", "СведенияОВзносахВФонды");
		ОбработкаНЗ.ЗаполнитьОбъект("РегистрСведений", "РазмерыЛьготНДФЛ");
		
		ОбработкаНЗ.ЗаполнитьОбъект("Справочник", "Налоги");
		ОбработкаНЗ.ЗаполнитьОбъект("Справочник", "СпособыОтраженияЗарплатыВРеглУчете");
		
		СкопироватьНеПредопределенныеБазовыеПенсионного();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("204", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.5.3";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.4" 
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.5" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
	 
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		НачатьТранзакцию();

		// Автоматический поиск и обновление необходимых объектов
		ОбработкаНЗ = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		ОбработкаНЗ.ЗаполнитьОбъект("Справочник", "СпособыОтраженияЗарплатыВРеглУчете");
	
		ОбработкаНЗ.ЗаполнитьОбъект("ПланВидовРасчета", "СреднийЗаработок");
		
		СкопироватьНеПредопределенныеБазовыеПенсионного();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("205", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;	
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.6.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.5" 
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.6" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
	 
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		НачатьТранзакцию();

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("206", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.7.2";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.6" 
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.7" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
	 
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		НачатьТранзакцию();
		
		ОбработкаНЗ = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		ОбработкаНЗ.ЗаполнитьОбъект("Справочник", "НалоговыеНазначенияАктивовИЗатрат");
        ОбработкаНЗ.ЗаполнитьОбъект("РегистрСведений", "ИндексИнфляции");
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("207", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.8.2";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.7" 
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.8" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
	 
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		НачатьТранзакцию();
		
		ОбработкаНЗ = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		ОбработкаНЗ.ЗаполнитьОбъект("Справочник", "СпособыОтраженияЗарплатыВРеглУчете");
		ОбработкаНЗ.ЗаполнитьОбъект("РегистрСведений", "ВидыРасчетовВзносовВФонды");
		ОбработкаНЗ.ЗаполнитьОбъект("РегистрСведений", "ШкалаСтавокНалогов");
		ОбработкаНЗ.ЗаполнитьОбъект("РегистрСведений", "ИндексИнфляции");
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("208", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;

	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.9.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.8" 
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.9" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
	 
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
		НачатьТранзакцию();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("209", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.10.2";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.0.9"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.10" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();

		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "Праздники");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ВидыРасчетовВзносовВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ШкалаСтавокНалогов");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ПрожиточныеМинимумы");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СведенияОВзносахВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "МинимальнаяОплатаТруда");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "РазмерыЛьготНДФЛ");
		
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2010", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.1.7";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.0.10" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.0.11"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.1" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
        //Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь);
		
		Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.0.10" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.0.11" Тогда
			ОбработкаНЗ = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
			ОбработкаНЗ.ЗаполнитьВсеОбъекты();
		КонецЕсли;	
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("211", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.2.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.1"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.2" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("212", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.3.4";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.2"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.3" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь);
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиНалоговыхДеклараций");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ВидыДоходовНДФЛ");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета","ВзносыВФонды");
		
		ПВРВыслугаЛет = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ВыслугаЛет.ПолучитьОбъект();
		ПВРВыслугаЛет["КатегорияРасчета"] = Перечисления.КатегорииРасчетов.ЗависимоеПервогоУровня;
		ПВРВыслугаЛет.Записать();
		 
		ПВРВыслугаЛетЕжемесячно = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ВыслугаЛетЕжемесячно.ПолучитьОбъект();
		ПВРВыслугаЛетЕжемесячно["КатегорияРасчета"] = Перечисления.КатегорииРасчетов.ЗависимоеПервогоУровня;
		ПВРВыслугаЛетЕжемесячно.Записать();
		 					
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("213", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.4.4";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.3"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.4" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ИндексИнфляции");
		
		ЗаполнениеВидаСтажа();	
		
		ЗаполнениеПараметровРасчетаКоммунальногоНалога();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("214", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.5.7";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.4"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.5" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
			
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "КлассификаторИспользованияРабочегоВремени");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ГруппыВзносовВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ПричиныНетрудоспособности");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ВидыДоходовНДФЛ");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиНалоговыхДеклараций");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ВзносыВФондыПоГруппам");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ОсновныеНачисленияОрганизаций");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ВзносыВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "СреднийЗаработок");
		
		ПерезаполнитьПараметрыНочныхВечерних();
		ПерезаполнитьПростои();
		ИсправитьПланированиеЗатрат();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		//
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь); 
		//
								 
		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("215", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.6.3";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.5"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.6" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
			
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "КлассификаторИспользованияРабочегоВремени");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "МинимальнаяОплатаТруда");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "РазмерыЛьготНДФЛ");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СведенияОВзносахВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ВидыРасчетовВзносовВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ВзносыВФондыПоГруппам");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ШкалаСтавокНалогов");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ОтражениеВзносовВРеглУчете");

		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ОсновныеНачисленияОрганизаций");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ВзносыВФонды");
		
		ОбновитьКлассификаторВремени();
		
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("216", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.7.3";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.6"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.7" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
			
		
		
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("217", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.8.6";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.7"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.8" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ПоказателиСхемМотивации");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ВидыВыплат");
        НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ОсновныеНачисленияОрганизаций");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "УдержанияОрганизаций");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "УправленческиеНачисления");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "УправленческиеУдержания");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		
		ПеревестиНаПроизвольныеФормулыРасчета();
		
		ДобавитьДействиеВПлановыеУдержания();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("218", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;

	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.9.3";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.8"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.9" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ОсновныеНачисленияОрганизаций");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("219", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.10.5";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.9"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.10" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "КлассификаторИспользованияРабочегоВремени");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ВидыЛьготРаботниковОрганизаций");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ВидыДоходовНДФЛ");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СтавкиНДФЛ");
		ЗаполнениеПараметровСтавкаШахтера();
		
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ПрожиточныеМинимумы");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "МинимальнаяОплатаТруда");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "РазмерыЛьготНДФЛ");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СведенияОВзносахВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ШкалаСтавокНалогов");
		УдалитьМинЗП();
		
		ЗаполнениеПараметровВидыВыплат();
		
		ИсправитьНастройкуОтпусков();
				
		// Заполнить предопределенные элементы для перехода с 1С:Предприятие 7.7
		ЗаполнитьПредопределенныеЭлементы77();
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2110", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.11.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.10"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.11" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ШкалаСтавокНалогов");
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2111", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.12.4";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.11"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.12" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		ПредзаполнитьСреднийЗаработок();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ВидыЗадачПользователей");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ВидыОтпусков");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ОсновныеНачисленияОрганизаций");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ОтражениеЗарплатыОрганизаций");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "СреднийЗаработок");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ВзносыВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "УдержанияОрганизаций");
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		ЗаполнениеДополнительныхРеквизитовСотрудников();
		ЗаполнитьНастройкиПользователей();
		ОбновитьКодыСправочникаСмены();
		ЗаполнитьРеквизитыРегистраВзаиморасчетыПоНДФЛ();
		ДополнитьВытеснение2112();
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2112", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
			ФормаРабочийСтол = Обработки.РабочийСтол.ПолучитьФорму();
			Если Не ФормаРабочийСтол.Открыта() Тогда
				ФормаРабочийСтол.Открыть();
			КонецЕсли;

			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.13.4";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.12"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.13" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ОсновныеНачисленияОрганизаций");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "СреднийЗаработок");
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2113", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.14.2";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.13"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.14" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		//Прописи на украинском
		ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
		Если ВалютаРегл.Код = "980" Тогда
			ВалютаОбъект = ВалютаРегл.ПолучитьОбъект();
			ВалютаОбъект.ПараметрыПрописиНаУкраинском = "гривна, гривні, гривень, ж, копійка, копійки, копійок, ж, 2";
			ВалютаОбъект.Записать();
		КонецЕсли;
		ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
		Если ВалютаУпр.Код = "840" Тогда
			ВалютаОбъект = ВалютаУпр.ПолучитьОбъект();
			ВалютаОбъект.ПараметрыПрописиНаУкраинском = "долар, долари, доларів, м, цент, центи, центів, м, 2";
			ВалютаОбъект.Записать();
		КонецЕсли;
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "СреднийЗаработок");
		
		ЗаполнитьСтажВДняхСтажВЧасах();
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2114", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.15.6";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.14"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.15" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		//Очистим наборы взносов
		НаборЗаписей = РегистрыСведений.ВзносыВФондыПоГруппам.СоздатьНаборЗаписей();
	    НаборЗаписей.Очистить();
		НаборЗаписей.Записать();

		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		//Обновление праздников на 2011 год
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "Праздники");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "ВидыВыплат");
		
		//ЕСВ
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "Налоги");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СпособыОтраженияЗарплатыВРеглУчете");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиНалоговыхДеклараций");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ПричиныНетрудоспособности");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "РазмерыЗаконодательноУстановленныхВыплат");

		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ВзносыВФондыПоГруппам");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ВидыРасчетовВзносовВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СведенияОВзносахВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ШкалаСтавокНалогов");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СводОтчисленийВФондыНастройкиОтчета");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ОтражениеВзносовВРеглУчете");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ОсновныеНачисленияОрганизаций");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ВзносыВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ОтражениеЗарплатыОрганизацийВРеглУчете");
		
		//НДФЛ
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ВидыДоходовНДФЛ");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ВидыЛьготРаботниковОрганизаций");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "РазмерыЛьготНДФЛ");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СтавкиНДФЛ");
		
		//Бюджет
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "МинимальнаяОплатаТруда");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ПрожиточныеМинимумы");
		
		ЗаполнитьНачисленияДляПредварительногоРасчета();
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2115", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.16.2";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.15"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.16" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ПричиныНетрудоспособности");
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2116", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.17.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.16"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.17" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		//Заполним варианты алгоритмов для расчета ЗП
		ЗаполнитьВариантыАлгоритмов();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ШкалаСтавокНалогов");
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2117", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.18.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.17"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.18" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ВидыЛьготРаботниковОрганизаций");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ВидыДоходовНДФЛ");
		
		//Обновить вид дохода у пособия на погребение
		ВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НаПогребение.ПолучитьОбъект();
		ВР.ДоходНДФЛ = Справочники.ВидыДоходовНДФЛ.Код146;
		ВР.Записать();
		
		//Обновить не предопределенные виды доходов НДФЛ
		ОбновитьВидыДоходовНДФЛ();
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2118", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.19.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.18"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.19" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		//Обновлена конвертация из ЗиК 7.7
		ЗаполнитьПредопределенныеЭлементы77();
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2119", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.20.3";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.19"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.20" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		УстановитьПараметрыСчетовБУ();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		//Объекты аналитики
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ВидыНалоговойДеятельности");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "НалоговыеНазначенияАктивовИЗатрат");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиНалоговыхДеклараций");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ПричиныНетрудоспособности");
		
		//Обновление регистра ОтражениеВзносовФОТВРеглУчете
		ОбновитьОтражениеВзносовФОТВРеглУчете();
		//Обновление справочника СпособыОтраженияЗарплатыВРеглУчете
		ОбновитьСпособыОтражения(НачальноеЗаполнение);
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2120", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.21.2";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.20"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.21" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		СпособОтраженияУстарело = Справочники.СпособыОтраженияЗарплатыВРеглУчете.УстарелоОтражениеБольничныхЗаСчетФСС.ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(СпособОтраженияУстарело.СчетДт) Тогда
			СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеБольничныхЗаСчетФСС.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(СпособОтраженияУстарело,СпособОтражения,"НалоговоеНазначение,СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,ВзносыОсновногоНачисления");
			СпособОтраженияУстарело.Наименование = "(устарело) Отражение больничных за счет ФСС";
			СпособОтражения.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСГосударственнымиЦелевымиФондами;
			СпособОтражения.СубконтоДт1 = Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_ВремНетрудосп;
			СпособОтражения.СубконтоДт2 = Неопределено;
			СпособОтраженияУстарело.Записать();
			СпособОтражения.Записать();
		КонецЕсли;
		
		//Установка учета ЕСВ для дохода по ГПХ
		ДоходГПХ = Справочники.ВидыДоходовНДФЛ.Код01ГПХ.ПолучитьОбъект();
		Если НЕ ДоходГПХ.ЭтоМесячныйДоход Тогда
			ДоходГПХ.ЭтоМесячныйДоход = Истина;
			ДоходГПХ.Записать();
		КонецЕсли;	
		ДоходГПХ = Справочники.ВидыДоходовНДФЛ.Код42.ПолучитьОбъект();
		Если НЕ ДоходГПХ.ЭтоМесячныйДоход Тогда
			ДоходГПХ.ЭтоМесячныйДоход = Истина;
			ДоходГПХ.Записать();
		КонецЕсли;	
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2121", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.22.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.21"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.22" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СведенияОВзносахВФонды");
		
		ОбновитьПроводкиНастройкиЗПпоОПЗ();
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2122", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.23.2";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.22"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.23" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "Праздники");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ПоказателиСхемМотивации");
		
		//Изменения по ЕСВ
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "Налоги");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиНалоговыхДеклараций");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ВзносыВФондыПоГруппам");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ВидыРасчетовВзносовВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СведенияОВзносахВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ШкалаСтавокНалогов");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СводОтчисленийВФондыНастройкиОтчета");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ОтражениеВзносовВРеглУчете");
		//Бюджет
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "МинимальнаяОплатаТруда");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ПрожиточныеМинимумы");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "РазмерыЛьготНДФЛ");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СтавкиНДФЛ");
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2123", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.24.2";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.23"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.24" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "ВидыКонтактнойИнформации");

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2124", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;	
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.25.3";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.24"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.25" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		//Обновление статей налоговых деклараций
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиНалоговыхДеклараций");
		
		//резерв отпусков
		СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ИспользованиеРезерваОтпусков.ПолучитьОбъект();
		СпособОтражения.СчетДт = ПланыСчетов.Хозрасчетный.ОбеспечениеВыплатОтпусков;
		СпособОтражения.Записать();
		
		//отражение больничных
		СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеБольничныхЗаСчетПредприятия.ПолучитьОбъект();
		СпособОтражения.СчетДт = ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельности;
		СпособОтражения.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоДругимВыплатам;
		СпособОтражения.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
		СтатьяНД = Справочники.СтатьиНалоговыхДеклараций.НПНК_ИВ_Другие_;
		СтатьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоРеквизиту("СтатьяДекларацииПоНалогуНаПрибыль",СтатьяНД);
		Если СтатьяЗатрат.Пустая() Тогда
			НоваяСтатьяЗатрат = Справочники.СтатьиЗатрат.СоздатьЭлемент();
			НоваяСтатьяЗатрат.Наименование = "Другие расходы хозяйственной деятельности";
			НоваяСтатьяЗатрат.ВидЗатрат = Перечисления.ВидыЗатрат.Прочие;
			НоваяСтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы;
			НоваяСтатьяЗатрат.Счет8Класса = Планысчетов.Хозрасчетный.ДругиеОперационныеЗатраты;
			НоваяСтатьяЗатрат.СтатьяДекларацииПоНалогуНаПрибыль = СтатьяНД;
			НоваяСтатьяЗатрат.Записать();
			СтатьяЗатрат = НоваяСтатьяЗатрат.Ссылка;
		КонецЕсли;
		СпособОтражения.СубконтоДт1 = СтатьяЗатрат;
		СпособОтражения.Записать();
		СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеБольничныхЗаСчетФСС.ПолучитьОбъект();
		СпособОтражения.СпособОтраженияЕСВФОТ = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеБольничныхЗаСчетПредприятия;
		СпособОтражения.Записать();
		ВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛОрганизации.ПолучитьОбъект();
		ВР.СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеБольничныхЗаСчетПредприятия;
		ВР.Записать();
				
		//отражение займов
		СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеУдержанийПоЗаймам.ПолучитьОбъект();
		СпособОтражения.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		СпособОтражения.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСРабочимиИСлужащимиПоДругимОперациям;
		СпособОтражения.Записать();
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2125", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;		
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.26.2";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.25"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.26" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета",  "СреднийЗаработок"); 
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2126", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.27.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.26"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.27" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ШкалаПочтовыхСборов"); 
		
		//Бюджет
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "МинимальнаяОплатаТруда");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ПрожиточныеМинимумы");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СведенияОВзносахВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "РазмерыЛьготНДФЛ");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СтавкиНДФЛ");

		//Обновлена конвертация из ЗиК 7.7
		ЗаполнитьПредопределенныеЭлементы77();
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2127", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.28.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.27"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.28" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		//Изменения по ЕСВ - судостроение
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "Налоги");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиНалоговыхДеклараций");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ВзносыВФондыПоГруппам");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ВидыРасчетовВзносовВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СведенияОВзносахВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ШкалаСтавокНалогов");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СводОтчисленийВФондыНастройкиОтчета");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ОтражениеВзносовВРеглУчете");

		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2128", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.29.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.28"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.29" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
	
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2129", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.30.2";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.29"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.30" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		//Изменения по ЕСВ - декретные
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета",  "ВзносыВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "Налоги");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиНалоговыхДеклараций");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ВидыРасчетовВзносовВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СведенияОВзносахВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ШкалаСтавокНалогов");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СводОтчисленийВФондыНастройкиОтчета");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ОтражениеВзносовВРеглУчете");
		СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеДекретныхЗаСчетФСС.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(СпособОтражения, Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеБольничныхЗаСчетФСС,,"Код, Наименование, Владелец");
		СпособОтражения.СубконтоДт1 = Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Берем;
		СпособОтражения.Записать();
		ВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам.ПолучитьОбъект();
		ВР.СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеДекретныхЗаСчетФСС;
		ВР.Записать();

		
	
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2130", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.31.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.30"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.31" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2131", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.32.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.31"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.32" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		//Обновления по НДФЛ с начала года
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "РазмерыЛьготНДФЛ");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СтавкиНДФЛ");

		ЧернобыльскийОтпуск = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ЧернобыльскийОтпуск;
		ВР_ЕСВ = ПланыВидовРасчета.ВзносыВФонды.ЕСВ.ПолучитьОбъект();
		Если ВР_ЕСВ.БазовыеВидыРасчета.Найти(ЧернобыльскийОтпуск) = Неопределено Тогда
			НоваяСтрока = ВР_ЕСВ.БазовыеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = ЧернобыльскийОтпуск;
			ВР_ЕСВ.Записать();
		КонецЕсли;
		
        ВР_ЕСВФОТ = ПланыВидовРасчета.ВзносыВФонды.ЕСВФОТ.ПолучитьОбъект();
		Если ВР_ЕСВФОТ.БазовыеВидыРасчета.Найти(ЧернобыльскийОтпуск) = Неопределено Тогда
			НоваяСтрока = ВР_ЕСВФОТ.БазовыеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = ЧернобыльскийОтпуск;
			ВР_ЕСВФОТ.Записать();
		КонецЕсли;
		
		ПростойПоСредней = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойПоСредней;
		Простой = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Простой;
        ОплатаПоЧасовомуТарифу = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовой.ПолучитьОбъект();
		
		Если ОплатаПоЧасовомуТарифу.ВытесняющиеВидыРасчета.Найти(Простой) = Неопределено Тогда
			НоваяСтрока = ОплатаПоЧасовомуТарифу.ВытесняющиеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Простой;
			ОплатаПоЧасовомуТарифу.Записать();
		КонецЕсли;	
		
		Если ОплатаПоЧасовомуТарифу.ВытесняющиеВидыРасчета.Найти(ПростойПоСредней) = Неопределено Тогда
			НоваяСтрока = ОплатаПоЧасовомуТарифу.ВытесняющиеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = ПростойПоСредней;
			ОплатаПоЧасовомуТарифу.Записать();
		КонецЕсли;	
		
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2132", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.33.3";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.32"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.33" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		Локализация.ОбновитьХешиРегистраСведенийПереводыТекстов();
		Локализация.ОбновитьРегистрСведенийПереводыТекстовИзМакетаНачальногоЗаполнения();
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2133", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.34.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.33"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.34" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		//Военный сбор
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "ВидыДоходовНДФЛ");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "Налоги");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СтавкиНДФЛ");
		
		СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеВоенногоСбора.ПолучитьОбъект();
		СпособОтражения.Наименование = НСтр("ru='Отражение военного сбора';uk='Відображення выйськового збору'",Локализация.КодЯзыкаИнформационнойБазы());
		СпособОтражения.СчетДт = ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельности;
		СпособОтражения.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		СпособОтражения.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
		СпособОтражения.Записать();

		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2134", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;	

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.35.2";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.34"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.35" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "Праздники");
		
		//Реформа ЕСВ
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СведенияОВзносахВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ШкалаСтавокНалогов");
		
		//Реформа НДФЛ
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СтавкиНДФЛ");
		
		//Реформа больничных
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ШкалаВыслугиЛет");
		
		//Бюджет
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "МинимальнаяОплатаТруда");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ПрожиточныеМинимумы");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "ПричиныНетрудоспособности");
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2135", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;		
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.36.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.35"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.36" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СведенияОВзносахВФонды");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "РазмерыЗаконодательноУстановленныхВыплат");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "ПричиныНетрудоспособности");
		
		ОчиститьШкалаВыслугиЛет();
		ЗаполнитьСчетДтВС();
		
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2136", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.37.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.36"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.37" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		// Новый праздник - День защитника Украины
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "ВидыПраздников");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "Праздники");
		
		ИзменитьЗаписиПроизводственногоКалендаря();
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2137", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.38.2";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.37"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.38" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		//Оплата мобилизованным
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ОсновныеНачисленияОрганизаций");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ВзносыВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "Налоги");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиНалоговыхДеклараций");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ВидыРасчетовВзносовВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СведенияОВзносахВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ШкалаСтавокНалогов");
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2138", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.39.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.38"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.39" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеЗарплатыМобилизованных.ПолучитьОбъект();
		СпособОтражения.Наименование = НСтр("ru='Отражение зарплаты мобилизованных';uk='Відображення зарплати мобілізованих'",Локализация.КодЯзыкаИнформационнойБазы());
		СпособОтражения.СчетДт = ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельности;
		СпособОтражения.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоДругимВыплатам;
		СпособОтражения.СубконтоКт1 = "";
		СпособОтражения.Записать();
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2139", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.40.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.39"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.40" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		
		//Оплата по среднему для больничных
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "КлассификаторИспользованияРабочегоВремени");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ПричиныНетрудоспособности");
		ЗаполнитьНепредопределенныеБазовыеПоЗаработкуБЛФСС();
		
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "СреднийЗаработок");

		
		ЗаполнитьСтажВДняхСтажВЧасах();

		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2140", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;	

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.41.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.40"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.41" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		
		//Бюджет
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "МинимальнаяОплатаТруда");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ПрожиточныеМинимумы");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СведенияОВзносахВФонды");

		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2141", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;	

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.42.2";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.41"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.42" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		
		//Реформа ЕСВ
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СведенияОВзносахВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ШкалаСтавокНалогов");
		
		//Реформа НДФЛ
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СтавкиНДФЛ");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "РазмерыЛьготНДФЛ");
		
		//Бюджет
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "МинимальнаяОплатаТруда");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ПрожиточныеМинимумы");

		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "КатегорииДолжностей");
				
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2142", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;	
	
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.43.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.42"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.43" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		
		ДополнитьБазуПоЗаработкуДляОтпуска();
		
		ОбновитьПараметрыПрописиВалюты("980", "гривна, гривни, гривен, ж, копейка, копейки, копеек, ж, 2", "гривня, гривні, гривень, ж, копійка, копійки, копійок, ж, 2");
		
		//новый вариант алгоритмов
		НаборЗаписей = РегистрыСведений.ВариантыАлгоритмовРасчетаЗарплаты.СоздатьНаборЗаписей(); 
	    НаборЗаписей.Прочитать();
		Для Каждого Запись из НаборЗаписей Цикл
			Запись.ПорогИндексации103 = Перечисления.ВариантыАлгоритмовПорогИндексации103.ПрименятьС01012016;
		КонецЦикла;	
		НаборЗаписей.Записать();
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2143", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;	
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.44.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.43"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.44" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		
		//Бюджет
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "МинимальнаяОплатаТруда");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ПрожиточныеМинимумы");
		//
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ШкалаПочтовыхСборов");
		//Отчет по ЕСВ
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "Налоги");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "СтатьиНалоговыхДеклараций");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ВзносыВФондыПоГруппам");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ВидыРасчетовВзносовВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ОтражениеВзносовВРеглУчете");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СведенияОВзносахВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ШкалаСтавокНалогов");
		
		ЗаполнитьОплатаПоСреднемуМобОрганизации();
		ЗаполнитьЕСВФОТМобилизованные();
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2144", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.45.3";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.44"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.45" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
	
		//Бюджет
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "МинимальнаяОплатаТруда");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ПрожиточныеМинимумы");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "РазмерыЛьготНДФЛ");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СведенияОВзносахВФонды");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "ДополнительныеГарантииВСодействииТрудоустройству");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СводОтчисленийВФондыНастройкиОтчета");
		
		НачальноеЗаполнение.ЗаполнитьПланВидовРасчета("ОсновныеНачисленияОрганизаций", Истина, "ДоплатаДоМЗП");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета",  "УдержанияОрганизаций", Истина);
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета",  "СреднийЗаработок", Истина);
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета",  "ВзносыВФонды", Истина);
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "ПоказателиСхемМотивации");
		
		ДобавитьВытесняющийОплатаПоСреднемуМобОрганизации();
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2145", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.46.2";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.45"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.46" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "ВидыОтпусков");

		//Праздники
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "ВидыПраздников");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "Праздники");
		ИзменитьЗаписиПроизводственногоКалендаря2017();
		
		//Бюджет
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "МинимальнаяОплатаТруда");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ПрожиточныеМинимумы");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "РазмерыЛьготНДФЛ");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СведенияОВзносахВФонды");
		
		//Пособие на погребение
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "РазмерыЗаконодательноУстановленныхВыплат");
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2146", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.47.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.46"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.47" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2147", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.48.2";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.47"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.48" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		
		//Отчет по ЕСВ
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ШкалаСтавокНалогов");
		ЗаполнитьСправочникОснованияУвольненияИзОрганизации();
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2148", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.49.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.48"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.49" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2149", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.50.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.49"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.50" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "Праздники");
		
		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2150", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.51.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.50"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.51" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		
		//Бюджет
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "МинимальнаяОплатаТруда");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ПрожиточныеМинимумы");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "РазмерыЛьготНДФЛ");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СведенияОВзносахВФонды");

		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2151", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.52.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.51"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.52" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");

		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2152", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.53.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.52"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.53" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");

		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2153", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.53.2";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.52"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.53" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");

		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2153", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.54.2";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.53"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.54" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");

		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2154", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.1.55.1";
	
	Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) =  "2.1.54"
		ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.1.54" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = НСтр("ru='обновление информационной базы с версии ';uk='оновлення інформаційної бази з версії '") + ТекущаяВерсияИБ + НСтр("ru=' на версию ';uk=' на версію '") + НоваяВерсияИБ;
		Сообщить(НСтр("ru='Выполняется ';uk='Виконується '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");

		//Обновление регламентированной отчетности.
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь,Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
								 НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить(НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			#Если Клиент Тогда
			ВывестиОписаниеИзменений("2155", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	
	// Установка номера версии информационной базы
	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
	
	// Вернуть дату запрета изменения данных
	ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();
	
	#Если Клиент Тогда
	Если ДокументОписаниеОбновлений.ВысотаТаблицы > 0 Тогда
		ФормаОписаниеОбновлений.Открыть();
	КонецЕсли;
	#КонецЕсли



КонецПроцедуры

// Функция получает макет описания обновлений и заполняет его параметры расшифровок.
//
// Параметры:
//  ФормаОписаниеОбновлений - форма обработки "ОписаниеОбновлений", 
//                            назначается владельцем открываемых из нее форм.
//
// Возвращаемое значение:
//  ТабличныйДокумент - макет "ОписаниеОбновлений" с заполненными параметрами расшифровок.
//
Функция ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений) Экспорт

	МакетОписаниеОбновлений = ПолучитьМакет("ОписаниеОбновлений");
	Параметры               = МакетОписаниеОбновлений.Параметры;

	// Заполнение параметров расшифровок макета описания обновлений,

	Параметры.ФормаСпискаПодразделенийКомпании	  = Справочники.Подразделения.ПолучитьФормуСписка();
	Параметры.ФормаДолжности					  = Справочники.Должности.ПолучитьФормуСписка();
	Параметры.ФормаГрафикиРаботы				  = Справочники.ГрафикиРаботы.ПолучитьФормуСписка();
  	Параметры.ФормаСпискаОрганизаций			  = Справочники.Организации.ПолучитьФормуСписка();
	Параметры.ФормаСпискаПодразделенийОрганизаций = Справочники.ПодразделенияОрганизаций.ПолучитьФормуСписка();
	Параметры.ФормаДолжностиОрганизаций			  = Справочники.ДолжностиОрганизаций.ПолучитьФормуСписка();
	Параметры.ФормаСпискаДокументовУдЛичность	  = Справочники.ДокументыУдостоверяющиеЛичность.ПолучитьФормуСписка();
	Параметры.ФормаСпискаСтранМира				  = Справочники.КлассификаторСтранМира.ПолучитьФормуСписка();
	Параметры.ФормаСпискаЯзыкиНародовМира		  = Справочники.ЯзыкиНародовМира.ПолучитьФормуСписка();
	Параметры.ФормаСпискаСтепениЗнанияЯзыка		  = Справочники.СтепениЗнанияЯзыка.ПолучитьФормуСписка();
	Параметры.ФормаСпискаСемейноеПоложение		  = Справочники.СемейноеПоложениеФизЛиц.ПолучитьФормуСписка();
	Параметры.ФормаСпискаСтепениРодства			  = Справочники.СтепениРодстваФизЛиц.ПолучитьФормуСписка();
	Параметры.ФормаСпискаВидыОбразования		  = Справочники.ВидыОбразованияФизЛиц.ПолучитьФормуСписка();
	Параметры.ФормаСпискаПользователей			  = Справочники.Пользователи.ПолучитьФормуСписка();
	Параметры.ФормаПользователя					  = глЗначениеПеременной("глТекущийПользователь");

	Параметры.ОбновлениеЗарплатаИКадры 			  = ПолучитьФорму("ОбновлениеЗарплатаИКадры21");
	Параметры.ВзносыВФондыПоГруппам 			  = РегистрыСведений.ВзносыВФондыПоГруппам.ПолучитьФорму("ФормаСписка");
	Параметры.ФормаСпискаСредняяЗППоВсемВидамЭкономическойДеятельности = РегистрыСведений.СредняяЗППоВсемВидамЭкономическойДеятельности.ПолучитьФорму("ФормаСписка");
	Параметры.ФормаСпискаДолжностиОрганизаций 	  = Справочники.ДолжностиОрганизаций.ПолучитьФормуСписка();
	Параметры.ОбновлениеОтпусков2112 			  = ПолучитьФорму("ОбновлениеОтпусков2112");
	Параметры.ПомощникКП			 			  = Справочники.ДолжностиОрганизаций.ПолучитьФорму("ФормаПомощникЗаполненияКодаКП");
	Параметры.ПомощникКПРеквизиты                 = Справочники.ДолжностиОрганизаций.ПолучитьФорму("ФормаПомощникЗаполненияРеквизитовКП");
	Параметры.ПомощникЕСВ			 			  = Обработки.ПомощникНачалаУчетаЕСВ.ПолучитьФорму();
	Параметры.ВариантыАлгоритмов	 			  = РегистрыСведений.ВариантыАлгоритмовРасчетаЗарплаты.ПолучитьФорму("ФормаСписка");
	
	Если НастройкаПравДоступа.ДоступнаРольРасчетчикаРегл() Тогда
		Параметры.ЗначенияПоказателейСхемМотивации	  = Обработки.ЗначенияПоказателейСхемМотивации.ПолучитьФорму();
		Параметры.ПомощникНКУ			 			  = Обработки.ПомощникНалогНаПрибыльНКУ.ПолучитьФорму();
	Иначе
		Параметры.ЗначенияПоказателейСхемМотивации	  = "";
		Параметры.ПомощникНКУ			 			  = "";
	КонецЕсли;	
	
	Параметры.ПерерасчетЕСВ2123 			  = ПолучитьФорму("ПерерасчетЕСВ2123");
	
	Параметры.ЗаполнениеСинонимовОбъектов = Обработки.ЗаполнениеСинонимовОбъектов.ПолучитьФорму();
	
	Параметры.ФормаПереходЕСВ2016 			  = ПолучитьФорму("ФормаПереходЕСВ2016");
	
	Возврат МакетОписаниеОбновлений;

КонецФункции

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		СтрСообщения1 = "Создан";
	Иначе
		СтрСообщения1 = "Обработан";
	КонецЕсли;

	Если СправочникОбъект.ЭтоГруппа Тогда
		СтрСообщения2 = НСтр("ru='а группа';uk='а група'");
	Иначе
		СтрСообщения2 = НСтр("ru=' элемент';uk=' елемент'");
	КонецЕсли;

	СтрСообщения2 = СтрСообщения2 + НСтр("ru=' справочника ""';uk=' довідника ""'") + СправочникОбъект.Метаданные().Синоним + """: ";
	СтрСообщения3 = НСтр("ru='наименование ""';uk='найменування ""'") + СправочникОбъект.Наименование + """";

	Попытка
		СправочникОбъект.Записать();
		Сообщить(СтрСообщения1 + СтрСообщения2 + НСтр("ru='код ""';uk='код ""'") + СправочникОбъект.ПолныйКод() + """, " + СтрСообщения3, СтатусСообщения.Обычное);
	Исключение
		Сообщить(НСтр("ru='Не записан';uk='Не записаний'")  + СтрСообщения2 + СтрСообщения3 +
		         Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;

КонецПроцедуры

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаУкраинском, ПараметрыПрописиНаРусском) Экспорт

	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописиНаУкраинском = ПараметрыПрописиНаУкраинском;
		СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;

		// установим курс и кратность = 1 на 1 января 1980
		МодульВалютногоУчета.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);

	КонецЕсли;

	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

Процедура ОбновитьПараметрыПрописиВалюты(Код, ПараметрыПрописиНаРусском, ПараметрыПрописиНаУкраинском) Экспорт

	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);

	Если НЕ Ссылка.Пустая() Тогда

		СправочникОбъект = Ссылка.ПолучитьОбъект();

		ОбъектИзменен = Ложь;
		Если СправочникОбъект.ПараметрыПрописиНаРусском <> ПараметрыПрописиНаРусском Тогда
			СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;
			ОбъектИзменен = Истина;
		КонецЕсли; 
		Если СправочникОбъект.ПараметрыПрописиНаУкраинском <> ПараметрыПрописиНаУкраинском Тогда
			СправочникОбъект.ПараметрыПрописиНаУкраинском = ПараметрыПрописиНаУкраинском;
			ОбъектИзменен = Истина;
		КонецЕсли; 

		Если ОбъектИзменен Тогда
			ЗаписатьСправочникОбъект(СправочникОбъект);	
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыПрописиВалюты()

// Процедура устанавливает указанное значение указанной константы и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  ИмяКонстанты      - имя константы, которую требуется установить.
//  ЗначениеКонстанты - значение константы.
//
Процедура УстановитьКонстанту(ИмяКонстанты, ЗначениеКонстанты) Экспорт  //да//

	Если Константы[ИмяКонстанты].Получить() = ЗначениеКонстанты Тогда
		Возврат;
	КонецЕсли;

	Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);

	СтрСообщения = НСтр("ru='Константе ""';uk='Константі ""'") + Метаданные.Константы[ИмяКонстанты].Синоним + """ "
	             + НСтр("ru='назначено значение ""';uk='призначено значення ""'") + ЗначениеКонстанты + """";

	Сообщить(СтрСообщения, СтатусСообщения.Обычное);

КонецПроцедуры

// Процедура заполняет предопределенную смену
//
Процедура ЗаполнитьПредопределенныеСмены()
	
	Смена = Справочники.Смены.Смена24Часа.ПолучитьОбъект();
	Смена.ПериодыСмены.Очистить();
	ПериодСмены = Смена.ПериодыСмены.Добавить();
	ПериодСмены.ВремяНачала = Дата(1,1,1, 0, 0, 1);
	ПериодСмены.ВремяОкончания = Дата(1,1,1, 23, 59, 59);
	Смена.Записать();
	
КонецПроцедуры // ЗаполнитьПредопределенныеСмены()

// Процедура изменяет ставшие неуникальными коды предопределенных элементов
//
Процедура УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов)
	
	МассивЭлементов = Новый Массив;
	
	Пока СписокПредопределенныхЭлементов.Количество()>0 Цикл
		
		МассивЭлементов.Очистить();
		КолвоЭлементовВСписке = СписокПредопределенныхЭлементов.Количество();
		ТекушийТипЗначения = ТипЗнч(СписокПредопределенныхЭлементов [КолвоЭлементовВСписке-1].Значение);
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекушийТипЗначения);		
		Если Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = Справочники[МетаданныеТипа.Имя];
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = ПланыВидовХарактеристик[МетаданныеТипа.Имя];
		ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = ПланыСчетов[МетаданныеТипа.Имя];	
		ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = ПланыВидовРасчета[МетаданныеТипа.Имя];
		Иначе
			МенеджерТекущегоТипа = Неопределено;
		КонецЕсли;
		
		Для ОбратныйИндекс = 1 По КолвоЭлементовВСписке Цикл
			ЭлементСписка = СписокПредопределенныхЭлементов [КолвоЭлементовВСписке - ОбратныйИндекс];
			
			Если ТипЗнч(ЭлементСписка.Значение) = ТекушийТипЗначения Тогда				
				ЕСли МетаданныеТипа.ДлинаКода <> 0 И МенеджерТекущегоТипа <> Неопределено Тогда
					МассивЭлементов.Добавить(ЭлементСписка.Значение);
				КонецЕсли;				
				СписокПредопределенныхЭлементов.Удалить(ЭлементСписка);				
			КонецЕсли;			
		КонецЦикла;
		
		Если МассивЭлементов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Предопределенные.Ссылка
		|ИЗ
		|	" + МетаданныеТипа.ПолноеИмя() + " КАК Предопределенные
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + МетаданныеТипа.ПолноеИмя() + " КАК Пользовательские
		|		ПО Предопределенные.Код = Пользовательские.Код
		|
		|ГДЕ
		|	Предопределенные.Ссылка В(&СписокЭлементов)
		|    И Пользовательские.Ссылка НЕ В(&СписокЭлементов)";
		
		Запрос.УстановитьПараметр("СписокЭлементов", МассивЭлементов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();			
			Объект.УстановитьНовыйКод();			
			Если МенеджерТекущегоТипа.НайтиПоКоду(Объект.Код).Пустая() Тогда
				
				// Поскольку меняем только код элемента, проверку корректности заполнения
				// дополнительных реквизитов объекта не выполняем.
				Объект.ОбменДанными.Загрузка = Истина;
				
				Объект.Записать();
			КонецЕсли;			
		КонецЦикла;	
		
	КонецЦикла;


КонецПроцедуры

// Переписывает реквизиты исправляемых объектов.
//
// Параметры: 
//  Запрос - исполняемый запрос, в котором обязательно присутствует поле Ссылка
//			 остальные поля должны содержать исправленные данные, имена полей 
//           должны соответствовать именам исправляемых реквизитов
//  ТекстСообщения - строка, начало сообщения, выводимого в строке состояния
//
// Возвращаемое значение:
//  Нет
//
Процедура ОбновитьОбъектыПоЗапросу(Запрос = Неопределено,ТекстСообщения = "")

	Если Запрос = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние(ТекстСообщения + НСтр("ru=': подготовка данных ...';uk=': підготовка даних ...'"));
	#КонецЕсли
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаОбъектов.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + НСтр("ru=': обработано 0 из ';uk=': опрацьовано 0 з '") + ВсегоДоков);
	#КонецЕсли
	Пока ВыборкаОбъектов.Следующий() Цикл
		Объект = ВыборкаОбъектов.Ссылка.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = Истина;
		ЗаполнитьЗначенияСвойств(Объект,ВыборкаОбъектов);
		#Если Клиент Тогда
			Если Номер % 30 = 0 Тогда
				Состояние(ТекстСообщения + НСтр("ru=': обработано ';uk=': опрацьовано '") + Номер + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
			КонецЕсли;
			Номер = Номер + 1;
		#КонецЕсли
		Объект.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + НСтр("ru=': обработано ';uk=': опрацьовано '") + ВсегоДоков + НСтр("ru=' из ';uk=' з '") + ВсегоДоков);
	#КонецЕсли
	
КонецПроцедуры

// Устанавливает флаг "Запретить использовать в проводках"
// хозрасчетным счетам 
//
Процедура УстановитьПараметрыСчетовБУ()

	#Если Клиент Тогда
		Состояние(НСтр("ru='Установка запрета использования в проводках групп счетов...';uk='Встановлення заборони використання в проводках груп рахунків...'"));
	#КонецЕсли
	
	ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель) Тогда
			Продолжить;
		КонецЕсли;

		Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();
		Если Объект.ЗапретитьИспользоватьВПроводках Тогда
			Продолжить;
		КонецЕсли;

		Объект.ЗапретитьИспользоватьВПроводках = Истина;
		Объект.Записать();

	КонецЦикла;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

Процедура	ПерепровестиДокументыПоВзносыВФонды()

	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|Основной.Ссылка              	Как Док 
	| 
	|	ИЗ Документ.НачислениеЗарплатыРаботникамОрганизаций КАК Основной
	|ГДЕ Основной.Проведен 
    |
    |ОБЪЕДИНИТЬ
	|ВЫБРАТЬ 
	|Основной.Ссылка              	Как Док 
	| 
	|	ИЗ Документ.РасчетПриУвольненииРаботникаОрганизаций КАК Основной
	|ГДЕ Основной.Проведен 
    |
	|";
	
	Запрос.Текст = ТекстЗапроса;
	ВыборкаДокументов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,,"Док");
	
	Пока ВыборкаДокументов.Следующий()Цикл
		Док = выборкаДокументов.Док.ПолучитьОбъект();
		Док.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
		
КонецПроцедуры

Процедура	СкопироватьНеПредопределенныеБазовыеПенсионного()
	
 	НовыйПенсионный = ПланыВидовРасчета.ВзносыВФонды.Пенсионный20070101.ПолучитьОбъект();
	СтарыйПенсионный = ПланыВидовРасчета.ВзносыВФонды.Пенсионный20050101;
	Для каждого ВидРасч Из СтарыйПенсионный.БазовыеВидыРасчета  Цикл
		
		Если  НовыйПенсионный.БазовыеВидыРасчета.Найти(ВидРасч.ВидРасчета) = Неопределено Тогда
			НоваяСтрока            = НовыйПенсионный.БазовыеВидыРасчета.Добавить();     
			НоваяСтрока.ВидРасчета = ВидРасч.ВидРасчета;
		КонецЕсли;
		
	КонецЦикла;
	НовыйПенсионный.Записать();
		
КонецПроцедуры

Процедура ЗаполнениеПараметровРасчетаКоммунальногоНалога();
	СтавкаКоммунальногоНалога = 0;
	НеоблагаемыйМинимум = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НачислениеКоммунальногоНалога.Ссылка	КАК Документ
	|ИЗ
	|	Документ.НачислениеКоммунальногоНалога	КАК НачислениеКоммунальногоНалога";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Документ = Выборка.Документ;
		ДокументОбъект = Документ.ПолучитьОбъект();
		
		Если Не ЗначениеЗаполнено(Документ.СтавкаКоммунальногоНалога) Тогда
			ПроведениеРасчетов.ОпределитьРегламентированныеПараметрыДляРасчетаКоммунальногоНалога(СтавкаКоммунальногоНалога, 0, Документ.ПериодРегистрации, Документ.Организация );
			ДокументОбъект.СтавкаКоммунальногоНалога = СтавкаКоммунальногоНалога;
			ДокументОбъект.Записать();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Документ.НеоблагаемыйМинимум) Тогда
			ПроведениеРасчетов.ОпределитьРегламентированныеПараметрыДляРасчетаКоммунальногоНалога(0, НеоблагаемыйМинимум, Документ.ПериодРегистрации, Документ.Организация );
			ДокументОбъект.НеоблагаемыйМинимум = НеоблагаемыйМинимум;
			ДокументОбъект.Записать();
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнениеВидаСтажа()
		// делаем переход от спр. "Способы учета стажа" к спр. "Виды стажа",
		//1. Рассматриваем все элементы справочника "Способы учета стажа", и если нет вида стажа с таким способом учета стажа, создаем элемент, с таким же названием
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	СпособУчетаСтажа
		|ИЗ
		|(
		|	ВЫБРАТЬ
		|		СпособыУчетаСтажа.Ссылка	КАК СпособУчетаСтажа,
		|		ЕстьNULL(ВидыСтажа.Ссылка,ЗНАЧЕНИЕ(Справочник.ВидыСтажа.ПустаяСсылка))	КАК ВидСтажа
		
		|	ИЗ
		|		Справочник.УдалитьСпособыУчетаСтажа	КАК СпособыУчетаСтажа
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.ВидыСтажа	КАК ВидыСтажа
		|	ПО СпособыУчетаСтажа.Ссылка = ВидыСтажа.УдалитьСпособУчетаСтажа
		|)КАК ВсеВидыСтажа
		
		|ГДЕ
		|	ВидСтажа = ЗНАЧЕНИЕ(Справочник.ВидыСтажа.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НовыйВидСтажа = Справочники.ВидыСтажа.СоздатьЭлемент();
			НовыйВидСтажа.Наименование = Выборка.СпособУчетаСтажа.Наименование;
			НовыйВидСтажа.УдалитьСпособУчетаСтажа = Выборка.СпособУчетаСтажа;
			НовыйВидСтажа.Записать();
		КонецЦикла;
		
		//2.находим, у какого спр. "Виды стажа" реквизитом был данный способ учета стажа,
		//если были такие справочники - подставляем их вместо способа учета стажа
		//в противном случае, создаем элемент справочника "Виды стажа", с именем как у способа учета стажа 
		//Запрос = Новый Запрос;
		//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УдалитьСпособУчетаСтажа 	КАК СпособУчетаСтажа
		|ПОМЕСТИТЬ
		|	ВТСпособыУчетаСтажа	
		|ИЗ
		|	РегистрСведений.ШкалаВыслугиЛет ";
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|ВЫБРАТь
		|	СпособыУчетаСтажа.СпособУчетаСтажа КАК СпособУчетаСтажа,
		|	ЕстьNULL(ВидыСтажа.Ссылка,ЗНАЧЕНИЕ(Справочник.ВидыСтажа.ПустаяСсылка)) КАК ВидСтажа
		|ПОМЕСТИТЬ ВТВидыСтажа
		|ИЗ
		|	ВТСпособыУчетаСтажа КАК СпособыУчетаСтажа
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	Справочник.ВидыСтажа КАК ВидыСтажа
		|ПО СпособыУчетаСтажа.СпосоБУчетаСтажа = ВидыСтажа.УдалитьСпособУчетаСтажа";
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ШкалаВыслугиЛет.УдалитьСпособУчетаСтажа			КАК СпособУчетаСтажаШкала,
		|	ШкалаВыслугиЛет.Период							КАК Период,
		|	ШкалаВыслугиЛет.НомерПорога						КАК НомерПорога,
		|	ШкалаВыслугиЛет.Ставка							КАК Ставка,
		|	ШкалаВыслугиЛет.Порог							КАК Порог,
		|	ВТВидыСтажа.СпособУчетаСтажа					КАК УдалитьСпособУчетаСтажа,
		|	ВТВидыСтажа.ВидСтажа							КАК ВидСтажа
		|ИЗ
		|	РегистрСведений.ШкалаВыслугиЛет	КАК ШкалаВыслугиЛет
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТВидыСтажа	КАК ВТВидыСтажа
		|		ПО
		|	ШкалаВыслугиЛет.УдалитьСпособУчетаСтажа = ВТВидыСтажа.СпособУчетаСтажа
		|ГДЕ
		|	 ШкалаВыслугиЛет.УдалитьСпособУчетаСтажа <> ЗНАЧЕНИЕ(Справочник.УдалитьСпособыУчетаСтажа.ПустаяСсылка)
		|";         
	
		ТЗШкалаВыслугиЛет = Запрос.Выполнить().Выгрузить();
				
		//Вначале записываем пустой набор записей, а затем загружаем полученную таблицу значений
		НаборЗаписей = РегистрыСведений.ШкалаВыслугиЛет.СоздатьНаборЗаписей();
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ШкалаВыслугиЛет.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(ТЗШкалаВыслугиЛет);
		НаборЗаписей.Записать();
		
		//3. Если в ПВР "Основные  начисления организаций" были виды расчета с каким-либо способом учета стажа, устанавливаем для него вид стажа
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПВРОсновныеНачисления.Ссылка						КАК ПВР,
		|	ПВРОсновныеНачисления.УдалитьСпособУчетаСтажа       КАК СпособУчетаСтажа,
		|	ВидыСтажа.Ссылка									КАК ВидСтажа
		|	
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ПВРОсновныеНачисления
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.ВидыСтажа	КАК ВидыСтажа
		|ПО
		|	ВидыСтажа.УдалитьСпособУчетаСтажа = ПВРОсновныеНачисления.УдалитьСпособУчетаСтажа
		|	
		|ГДЕ
		|	ЕстьNULL(ПВРОсновныеНачисления.УдалитьСпособУчетаСтажа,ЗНАЧЕНИЕ(Справочник.УдалитьСпособыУчетаСтажа.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УдалитьСпособыУчетаСтажа.ПустаяСсылка)
		|	И ЕстьNULL(ПВРОсновныеНачисления.ВидСтажа, ЗНАЧЕНИЕ(Справочник.ВидыСтажа.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыСтажа.ПустаяСсылка)		//Если уже указан вид стажа перезаписываеть его не будем
		|";			
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПВР = ВЫборка.ПВР.ПолучитьОбъект();
			ПВР.ВидСтажа = Выборка.ВидСтажа;
			ПВР.Записать();
		КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьПараметрыНочныхВечерних()Экспорт
	
	// Для кадровых документов
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	 Начисления.Организация,
	|	 Начисления.Регистратор,
	|	 Начисления.НомерСтроки
	|
	|ИЗ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Начисления
	|ГДЕ Начисления.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы)
	|								,ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы))
	|
	|ИТОГИ
	|ПО Организация, Регистратор
	|";
	Запрос.Текст = ТекстЗапроса;
	СтруктураПоиска = Новый Структура("НомерСтроки");
	
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
	Пока ВыборкаОрганизация.Следующий() Цикл
		СтавкаВечерних = 100*РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", ВыборкаОрганизация.Организация)).КоэффициентВечерних;
		СтавкаНочных = 100*РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", ВыборкаОрганизация.Организация)).КоэффициентНочных;
		
		ВыборкаРегистратор = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор");
		Пока ВыборкаРегистратор.Следующий() Цикл
			
			Регистратор = ВыборкаРегистратор.Регистратор.ПолучитьОбъект();
			
			НаборНачисления = РегистрыСведений.ПлановыеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей(); 
			НаборНачисления.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
			НаборНачисления.Прочитать(); 
			
			Выборка = ВыборкаРегистратор.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если НаборНачисления[Выборка.НомерСтроки-1].ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Тогда
					НаборНачисления[Выборка.НомерСтроки-1].Показатель2 = СтавкаВечерних;
				ИначеЕсли  НаборНачисления[Выборка.НомерСтроки-1].ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
					НаборНачисления[Выборка.НомерСтроки-1].Показатель2 = СтавкаНочных;
				КонецЕсли;
			КонецЦикла;
			
			Начисления = Регистратор.Метаданные().ТабличныеЧасти.Найти("ОсновныеНачисления");
			Если Начисления = Неопределено Тогда
				Начисления = Регистратор.Метаданные().ТабличныеЧасти.Найти("Начисления");
			КонецЕсли;
			Если Начисления <> Неопределено Тогда
				Для каждого СтрокаНачислений Из Регистратор[Начисления.Имя] Цикл
					Если СтрокаНачислений.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Тогда
						СтрокаНачислений.Показатель2 = СтавкаВечерних;
					ИначеЕсли  СтрокаНачислений.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
						СтрокаНачислений.Показатель2 = СтавкаНочных;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
			
			Регистратор.Записать();
			НаборНачисления.Записать();
			
		КонецЦикла;
		
	КонецЦикла;
	
	// для расчетных документов
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТЧНачисления.Ссылка.Организация КАК Организация,
	|	ТЧНачисления.Ссылка КАК Ссылка,
	|	Начисления.Регистратор КАК Регистратор,
	|	ТЧНачисления.НомерСтроки,
	|	ВЫБОР	КОГДА ЕСТЬNULL(ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц, 0)<> 0 
	|				ТОГДА ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц 
	|			КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику, 0)<> 0 
	|				ТОГДА  СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику
	|			ИНАЧЕ  ДанныеКалендаря.НормаЧасовЗаМесяц
	|	КОНЕЦ	КАК НормаЧасовЗаМесяц,
	|	Оклады.ОкладТариф КАК Оклад,
	|	ВЫБОР	КОГДА 		(Оклады.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням)
	|					ИЛИ Оклады.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам))
	|					И	(ВЫБОР	КОГДА ЕСТЬNULL(ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц, 0)<> 0 
	|								ТОГДА ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц 
	|							КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику, 0)<> 0 
	|								ТОГДА  СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику
	|							ИНАЧЕ  ДанныеКалендаря.НормаЧасовЗаМесяц
	|					КОНЕЦ
	|					) > 0
	|				ТОГДА Оклады.ОкладТариф/
	|					ВЫБОР	КОГДА ЕСТЬNULL(ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц, 0)<> 0 
	|								ТОГДА ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц 
	|							КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику, 0)<> 0 
	|								ТОГДА  СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику
	|							ИНАЧЕ  ДанныеКалендаря.НормаЧасовЗаМесяц
	|					КОНЕЦ
	|			КОГДА 	ТЧНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|				ТОГДА Оклады.ОкладТариф/8
	|			ИНАЧЕ Оклады.ОкладТариф
	|			КОНЕЦ
	|	  КАК ЧасовойТариф
	|
	|ИЗ Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК ТЧНачисления
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|ПО		ТЧНачисления.Ссылка = Начисления.Регистратор
	|	И	ТЧНачисления.НомерСтроки = Начисления.НомерСтроки
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ( 
	|	ВЫБРАТЬ
	|		ВсеНачисления.Регистратор КАК Регистратор,
	|		ВсеНачисления.НомерСтроки,
	|		ВсеНачисления.ВидРасчета,
	|		ВЫБОР	КОГДА Плановые.ТарифныйРазряд1 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка) 
	|					ТОГДА РазмерТарифныхСтавок.Размер
	|				ИНАЧЕ Плановые.Показатель1
	|		КОНЕЦ	КАК ОкладТариф,
	|		ВЫБОР	КОГДА Плановые.ТарифныйРазряд1 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка) 
	|					ТОГДА РазмерТарифныхСтавок.Валюта
	|				ИНАЧЕ Плановые.Валюта1
	|		КОНЕЦ	КАК Валюта
	|	ИЗ (
	|		ВЫБРАТЬ
	|			Начисления.Регистратор КАК Регистратор,
	|			Начисления.НомерСтроки,
	|			Начисления.Назначение,
	|			Начисления.Период КАК Период,
	|			Плановые.ВидРасчета КАК ВидРасчета,
	|			МАКСИМУМ(РазмерТарифныхСтавок.Период) КАК ПериодТарифныхСтавок
	|		ИЗ (
	|			ВЫБРАТЬ
	|				Начисления.Ссылка КАК Регистратор,
	|				Начисления.НомерСтроки,
	|				Начисления.Назначение,
	|				МАКСИМУМ(Плановые.Период)	КАК Период
	|			ИЗ Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
	|       
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Плановые
	|   		ПО		Начисления.Назначение = Плановые.Сотрудник
	|   			И	Плановые.ВидРасчетаИзмерение <> Плановые.ВидРасчета
	|       
	|			ГДЕ Начисления.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы)
	|								,ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы))
	|			СГРУППИРОВАТЬ ПО
	|				Начисления.Ссылка,
	|				Начисления.НомерСтроки,
	|				Начисления.Назначение
	|   	) КАК Начисления
	|
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Плановые
	|	    ПО		Начисления.Назначение = Плановые.Сотрудник
	|	  		И	Плановые.ВидРасчетаИзмерение <> Плановые.ВидРасчета
	|	  		И	Начисления.Период = Плановые.Период
	|	 	  
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
	|  		ПО		Плановые.ТарифныйРазряд1 = РазмерТарифныхСтавок.ТарифныйРазряд
	|  			И	Плановые.Период <= РазмерТарифныхСтавок.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Начисления.Регистратор,
	|			Начисления.НомерСтроки,
	|			Начисления.Назначение,
	|			Начисления.Период,
	|			Плановые.ВидРасчета
	|
	|	) КАК ВсеНачисления
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Плановые
	|	ПО		ВсеНачисления.Назначение = Плановые.Сотрудник
	|  		И	Плановые.ВидРасчетаИзмерение <> Плановые.ВидРасчета
	|  		И	ВсеНачисления.Период = Плановые.Период
	|       
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
	|	ПО		Плановые.ТарифныйРазряд1 = РазмерТарифныхСтавок.ТарифныйРазряд
	|		И	ВсеНачисления.ПериодТарифныхСтавок = РазмерТарифныхСтавок.Период
	|) КАК Оклады
	|ПО 	Оклады.Регистратор = ТЧНачисления.Ссылка 
	|	И	Оклады.НомерСтроки = ТЧНачисления.НомерСтроки 
	|
	|
	|//-----------------------
	|// данные нормы календаря по индивидуальным графикам
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )	КАК Период,
	|		ГрафикиРаботы.ГрафикРаботы	КАК ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник		КАК Сотрудник,
	|		ГрафикиРаботы.Документ		КАК Документ,
	|		СУММА( ГрафикиРаботы.ОсновноеЗначение  )		КАК НормаДнейЗаМесяц,
	|		СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
	|	ИЗ	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ГДЕ		ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
	|		И	ГрафикиРаботы.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации 
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ ),
	|		ГрафикиРаботы.ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник,
	|		ГрафикиРаботы.Документ
	|) КАК ДанныеИндивидуальногоКалендаря
	|ПО		ДанныеИндивидуальногоКалендаря.Период = НАЧАЛОПЕРИОДА(ТЧНачисления.ДатаНачала, МЕСЯЦ) 
	|	И	ДанныеИндивидуальногоКалендаря.ГрафикРаботы = ТЧНачисления.Сотрудник 
	|	И	ДанныеИндивидуальногоКалендаря.Сотрудник = ТЧНачисления.Назначение
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		СводныеИндивидуальныеГрафики.Сотрудник КАК Сотрудник,
	|		СводныеИндивидуальныеГрафики.Назначение КАК Назначение,
	|		СводныеИндивидуальныеГрафики.Месяц КАК Месяц,
	|		СводныеИндивидуальныеГрафики.Дней КАК НормаДнейПоГрафику,
	|		СводныеИндивидуальныеГрафики.Часов КАК НормаЧасовПоГрафику
	|	ИЗ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|) КАК СводныеИндивидуальныеГрафики
	|ПО		ТЧНачисления.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|	И	ТЧНачисления.Назначение = СводныеИндивидуальныеГрафики.Назначение
	|	И	НАЧАЛОПЕРИОДА(ТЧНачисления.ДатаНачала, МЕСЯЦ) = СводныеИндивидуальныеГрафики.Месяц
	|
	|//-----------------------
	|// данные нормы календаря
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )	КАК Период,
	|		ГрафикиРаботы.ГрафикРаботы	КАК ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник		КАК Сотрудник,
	|		ГрафикиРаботы.Документ		КАК Документ,
	|		СУММА( ГрафикиРаботы.ОсновноеЗначение  )		КАК НормаДнейЗаМесяц,
	|		СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
	|	ИЗ	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ГДЕ		ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
	|		И НЕ ГрафикиРаботы.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации 
	|		И НЕ ГрафикиРаботы.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации 
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ ),
	|		ГрафикиРаботы.ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник,
	|		ГрафикиРаботы.Документ
	|) КАК ДанныеКалендаря
	|ПО		ДанныеКалендаря.Период = НАЧАЛОПЕРИОДА(ТЧНачисления.ДатаНачала, МЕСЯЦ) 
	|	И	ВЫБОР	КОГДА ТЧНачисления.ГрафикРаботы.СокращенноеРабочееВремя	
	|		     		ТОГДА ДанныеКалендаря.ГрафикРаботы = ТЧНачисления.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|				ИНАЧЕ ДанныеКалендаря.ГрафикРаботы = ТЧНачисления.ГрафикРаботы
	|		КОНЕЦ 
	|
	|ГДЕ ТЧНачисления.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы)
	|								,ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы))
	|ИТОГИ
	|ПО Организация, Ссылка
	|";
	Запрос.Текст = ТекстЗапроса;
	СтруктураПоиска = Новый Структура("НомерСтроки");
	
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
	Пока ВыборкаОрганизация.Следующий() Цикл
		СтавкаВечерних = 100*РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", ВыборкаОрганизация.Организация)).КоэффициентВечерних;
		СтавкаНочных = 100*РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", ВыборкаОрганизация.Организация)).КоэффициентНочных;
		
		ВыборкаРегистратор = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		Пока ВыборкаРегистратор.Следующий() Цикл
			
			Регистратор = ВыборкаРегистратор.Ссылка.ПолучитьОбъект();
			РегистраторПроведен = Регистратор.Проведен;
			
			Если РегистраторПроведен Тогда
				НаборНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей(); 
				НаборНачисления.Отбор.Регистратор.Установить(ВыборкаРегистратор.Ссылка);
				НаборНачисления.Прочитать();
			КонецЕсли;
			
			Начисления = Регистратор.Метаданные().ТабличныеЧасти.Найти("Начисления");
			Если Начисления = Неопределено Тогда
				Начисления = Регистратор.Метаданные().ТабличныеЧасти.Найти("ОсновныеНачисления");
			КонецЕсли;
			Если Начисления <> Неопределено Тогда
				Начисления = Регистратор[Начисления.Имя];
					
				Выборка = ВыборкаРегистратор.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если Начисления[Выборка.НомерСтроки-1].ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Тогда
						Начисления[Выборка.НомерСтроки-1].Показатель1 = Выборка.ЧасовойТариф;
						Начисления[Выборка.НомерСтроки-1].Показатель2 = СтавкаВечерних;
						Если РегистраторПроведен Тогда
							НаборНачисления[Выборка.НомерСтроки-1].Показатель1 = Выборка.ЧасовойТариф;
							НаборНачисления[Выборка.НомерСтроки-1].Показатель2 = СтавкаВечерних;
						КонецЕсли;
					ИначеЕсли  Начисления[Выборка.НомерСтроки-1].ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
						Начисления[Выборка.НомерСтроки-1].Показатель1 = Выборка.ЧасовойТариф;
						Начисления[Выборка.НомерСтроки-1].Показатель2 = СтавкаНочных;
						Если РегистраторПроведен Тогда
							НаборНачисления[Выборка.НомерСтроки-1].Показатель1 = Выборка.ЧасовойТариф;
							НаборНачисления[Выборка.НомерСтроки-1].Показатель2 = СтавкаНочных;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
			
			Регистратор.Записать();
			НаборНачисления.Записать();
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	 Надбавки.ПодразделениеОрганизации.Владелец КАК Организация,
	|	 Надбавки.Регистратор
	|
	|ИЗ РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций КАК Надбавки
	|ГДЕ Надбавки.ВидНадбавки.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы)
	|								,ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы))
	|";
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтавкаВечерних = 100*РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Выборка.Организация)).КоэффициентВечерних;
		СтавкаНочных = 100*РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Выборка.Организация)).КоэффициентНочных;
		
		НаборНадбавки = РегистрыСведений.НадбавкиПоШтатномуРасписаниюОрганизаций.СоздатьНаборЗаписей(); 
		НаборНадбавки.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборНадбавки.Прочитать(); 
		
		Регистратор = Выборка.Регистратор.ПолучитьОбъект();
		
		Для Каждого Надбавка из НаборНадбавки Цикл
			Если Надбавка.Показатель1 = 0 И Надбавка.Показатель2 = 0 Тогда
				Если Надбавка.ВидНадбавки.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Тогда
					Надбавка.Показатель2 = СтавкаВечерних;
				ИначеЕсли  Надбавка.ВидНадбавки.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
					Надбавка.Показатель2 = СтавкаНочных;
				КонецЕсли;
			ИначеЕсли Надбавка.Показатель2 = 0 Тогда
				Если Надбавка.ВидНадбавки.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы ИЛИ  Надбавка.ВидНадбавки.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
					Надбавка.Показатель2 = Надбавка.Показатель1*100;
				КонецЕсли;
			КонецЕсли;
			Надбавка.Показатель1 = 0;
		КонецЦикла;
			
		Для каждого Надбавка Из Регистратор.Надбавки Цикл
			Если Надбавка.Показатель1 = 0 И Надбавка.Показатель2 = 0 Тогда
				Если Надбавка.ВидНадбавки.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Тогда
					Надбавка.Показатель2 = СтавкаВечерних;
				ИначеЕсли  Надбавка.ВидНадбавки.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
					Надбавка.Показатель2 = СтавкаНочных;
				КонецЕсли;
			ИначеЕсли Надбавка.Показатель2 = 0 Тогда
				Если Надбавка.ВидНадбавки.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы ИЛИ  Надбавка.ВидНадбавки.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
					Надбавка.Показатель2 = Надбавка.Показатель1*100;
				КонецЕсли;
			КонецЕсли;
			Надбавка.Показатель1 = 0;
		КонецЦикла;
			
		Регистратор.Записать();
		НаборНадбавки.Записать();
			
	КонецЦикла;


	
КонецПроцедуры

Процедура ПерезаполнитьПростои()Экспорт
	
	// для расчетных документов
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	//	ВТНачисления
	Если Истина Тогда 
		//	Описание:
		// 		Все сотрудники из табличной части, их внутренние совместительства и все сотрудники которых замещали
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ 
		|	ТЧНачисления.Ссылка КАК Ссылка,
		|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
		|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
		|	ТЧНачисления.Сотрудник КАК Сотрудник,
		|	ТЧНачисления.Назначение КАК Назначение,
		|	ТЧНачисления.ДатаНачала КАК ДатаНачала,
		|	ТЧНачисления.ГрафикРаботы КАК ГрафикРаботы
		|ПОМЕСТИТЬ ВТНачисления	
		|
		|ИЗ Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК ТЧНачисления
		|ГДЕ ТЧНачисления.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.УдалитьПростойОкладПоДням)
		|								,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.УдалитьПростойОкладПоЧасам)
		|								,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.УдалитьПростойТарифДневной)
		|								,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Простой))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ 
		|	ТЧНачисления.Ссылка КАК Ссылка,
		|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
		|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
		|	ТЧНачисления.Сотрудник КАК Сотрудник,
		|	ТЧНачисления.Назначение КАК Назначение,
		|	ТЧНачисления.ДатаНачала КАК ДатаНачала,
		|	ТЧНачисления.ГрафикРаботы КАК ГрафикРаботы
		|
		|ИЗ Документ.РегистрацияПростоевВОрганизациях.Начисления КАК ТЧНачисления
		|ГДЕ ТЧНачисления.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.УдалитьПростойОкладПоДням)
		|								,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.УдалитьПростойОкладПоЧасам)
		|								,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.УдалитьПростойТарифДневной)
		|								,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Простой))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ 
		|	ТЧНачисления.Ссылка КАК Ссылка,
		|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
		|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
		|	ТЧНачисления.Сотрудник КАК Сотрудник,
		|	ТЧНачисления.Назначение КАК Назначение,
		|	ТЧНачисления.ДатаНачала КАК ДатаНачала,
		|	ТЧНачисления.ГрафикРаботы КАК ГрафикРаботы
		|
		|ИЗ Документ.НевыходыВОрганизациях.Начисления КАК ТЧНачисления
		|ГДЕ ТЧНачисления.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.УдалитьПростойОкладПоДням)
		|								,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.УдалитьПростойОкладПоЧасам)
		|								,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.УдалитьПростойТарифДневной)
		|								,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Простой))
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТНачисления";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТЧНачисления.Ссылка.Организация КАК Организация,
	|	ТЧНачисления.Ссылка КАК Ссылка,
	|	Начисления.Регистратор КАК Регистратор,
	|	ТЧНачисления.НомерСтроки,
	|	ВЫБОР	КОГДА ЕСТЬNULL(ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц, 0)<> 0 
	|				ТОГДА ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц 
	|			КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику, 0)<> 0 
	|				ТОГДА  СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику
	|			ИНАЧЕ  ДанныеКалендаря.НормаЧасовЗаМесяц
	|	КОНЕЦ	КАК НормаЧасовЗаМесяц,
	|	Оклады.ОкладТариф КАК Оклад,
	|	ВЫБОР	КОГДА 		(Оклады.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням)
	|					ИЛИ Оклады.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам))
	|					И	(ВЫБОР	КОГДА ЕСТЬNULL(ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц, 0)<> 0 
	|								ТОГДА ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц 
	|							КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику, 0)<> 0 
	|								ТОГДА  СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику
	|							ИНАЧЕ  ДанныеКалендаря.НормаЧасовЗаМесяц
	|					КОНЕЦ
	|					) > 0
	|				ТОГДА Оклады.ОкладТариф/
	|					ВЫБОР	КОГДА ЕСТЬNULL(ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц, 0)<> 0 
	|								ТОГДА ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц 
	|							КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику, 0)<> 0 
	|								ТОГДА  СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику
	|							ИНАЧЕ  ДанныеКалендаря.НормаЧасовЗаМесяц
	|					КОНЕЦ
	|			КОГДА 	ТЧНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|				ТОГДА Оклады.ОкладТариф/8
	|			ИНАЧЕ Оклады.ОкладТариф
	|			КОНЕЦ
	|	  КАК ЧасовойТариф
	|
	|ИЗ ВТНачисления КАК ТЧНачисления
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|ПО		ТЧНачисления.Ссылка = Начисления.Регистратор
	|	И	ТЧНачисления.НомерСтроки = Начисления.НомерСтроки
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ( 
	|	ВЫБРАТЬ
	|		ВсеНачисления.Регистратор КАК Регистратор,
	|		ВсеНачисления.НомерСтроки,
	|		ВсеНачисления.ВидРасчета,
	|		ВЫБОР	КОГДА Плановые.ТарифныйРазряд1 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка) 
	|					ТОГДА РазмерТарифныхСтавок.Размер
	|				ИНАЧЕ Плановые.Показатель1
	|		КОНЕЦ	КАК ОкладТариф,
	|		ВЫБОР	КОГДА Плановые.ТарифныйРазряд1 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка) 
	|					ТОГДА РазмерТарифныхСтавок.Валюта
	|				ИНАЧЕ Плановые.Валюта1
	|		КОНЕЦ	КАК Валюта
	|	ИЗ (
	|		ВЫБРАТЬ
	|			Начисления.Регистратор КАК Регистратор,
	|			Начисления.НомерСтроки,
	|			Начисления.Назначение,
	|			Начисления.Период КАК Период,
	|			Плановые.ВидРасчета КАК ВидРасчета,
	|			МАКСИМУМ(РазмерТарифныхСтавок.Период) КАК ПериодТарифныхСтавок
	|		ИЗ (
	|			ВЫБРАТЬ
	|				Начисления.Ссылка КАК Регистратор,
	|				Начисления.НомерСтроки,
	|				Начисления.Назначение,
	|				МАКСИМУМ(Плановые.Период)	КАК Период
	|			ИЗ ВТНачисления КАК Начисления
	|       
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Плановые
	|   		ПО		Начисления.Назначение = Плановые.Сотрудник
	|   			И	Плановые.ВидРасчетаИзмерение <> Плановые.ВидРасчета
	|       
	|			СГРУППИРОВАТЬ ПО
	|				Начисления.Ссылка,
	|				Начисления.НомерСтроки,
	|				Начисления.Назначение
	|   	) КАК Начисления
	|
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Плановые
	|	    ПО		Начисления.Назначение = Плановые.Сотрудник
	|	  		И	Плановые.ВидРасчетаИзмерение <> Плановые.ВидРасчета
	|	  		И	Начисления.Период = Плановые.Период
	|	 	  
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
	|  		ПО		Плановые.ТарифныйРазряд1 = РазмерТарифныхСтавок.ТарифныйРазряд
	|  			И	Плановые.Период <= РазмерТарифныхСтавок.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Начисления.Регистратор,
	|			Начисления.НомерСтроки,
	|			Начисления.Назначение,
	|			Начисления.Период,
	|			Плановые.ВидРасчета
	|
	|	) КАК ВсеНачисления
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Плановые
	|	ПО		ВсеНачисления.Назначение = Плановые.Сотрудник
	|  		И	Плановые.ВидРасчетаИзмерение <> Плановые.ВидРасчета
	|  		И	ВсеНачисления.Период = Плановые.Период
	|       
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
	|	ПО		Плановые.ТарифныйРазряд1 = РазмерТарифныхСтавок.ТарифныйРазряд
	|		И	ВсеНачисления.ПериодТарифныхСтавок = РазмерТарифныхСтавок.Период
	|) КАК Оклады
	|ПО 	Оклады.Регистратор = ТЧНачисления.Ссылка 
	|	И	Оклады.НомерСтроки = ТЧНачисления.НомерСтроки 
	|
	|
	|//-----------------------
	|// данные нормы календаря по индивидуальным графикам
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )	КАК Период,
	|		ГрафикиРаботы.ГрафикРаботы	КАК ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник		КАК Сотрудник,
	|		ГрафикиРаботы.Документ		КАК Документ,
	|		СУММА( ГрафикиРаботы.ОсновноеЗначение  )		КАК НормаДнейЗаМесяц,
	|		СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
	|	ИЗ	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ГДЕ		ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
	|		И	ГрафикиРаботы.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации 
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ ),
	|		ГрафикиРаботы.ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник,
	|		ГрафикиРаботы.Документ
	|) КАК ДанныеИндивидуальногоКалендаря
	|ПО		ДанныеИндивидуальногоКалендаря.Период = НАЧАЛОПЕРИОДА(ТЧНачисления.ДатаНачала, МЕСЯЦ) 
	|	И	ДанныеИндивидуальногоКалендаря.ГрафикРаботы = ТЧНачисления.Сотрудник 
	|	И	ДанныеИндивидуальногоКалендаря.Сотрудник = ТЧНачисления.Назначение
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		СводныеИндивидуальныеГрафики.Сотрудник КАК Сотрудник,
	|		СводныеИндивидуальныеГрафики.Назначение КАК Назначение,
	|		СводныеИндивидуальныеГрафики.Месяц КАК Месяц,
	|		СводныеИндивидуальныеГрафики.Дней КАК НормаДнейПоГрафику,
	|		СводныеИндивидуальныеГрафики.Часов КАК НормаЧасовПоГрафику
	|	ИЗ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|) КАК СводныеИндивидуальныеГрафики
	|ПО		ТЧНачисления.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|	И	ТЧНачисления.Назначение = СводныеИндивидуальныеГрафики.Назначение
	|	И	НАЧАЛОПЕРИОДА(ТЧНачисления.ДатаНачала, МЕСЯЦ) = СводныеИндивидуальныеГрафики.Месяц
	|
	|//-----------------------
	|// данные нормы календаря
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )	КАК Период,
	|		ГрафикиРаботы.ГрафикРаботы	КАК ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник		КАК Сотрудник,
	|		ГрафикиРаботы.Документ		КАК Документ,
	|		СУММА( ГрафикиРаботы.ОсновноеЗначение  )		КАК НормаДнейЗаМесяц,
	|		СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
	|	ИЗ	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ГДЕ		ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
	|		И НЕ ГрафикиРаботы.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации 
	|		И НЕ ГрафикиРаботы.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации 
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ ),
	|		ГрафикиРаботы.ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник,
	|		ГрафикиРаботы.Документ
	|) КАК ДанныеКалендаря
	|ПО		ДанныеКалендаря.Период = НАЧАЛОПЕРИОДА(ТЧНачисления.ДатаНачала, МЕСЯЦ) 
	|	И	ВЫБОР	КОГДА ТЧНачисления.ГрафикРаботы.СокращенноеРабочееВремя	
	|		     		ТОГДА ДанныеКалендаря.ГрафикРаботы = ТЧНачисления.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|				ИНАЧЕ ДанныеКалендаря.ГрафикРаботы = ТЧНачисления.ГрафикРаботы
	|		КОНЕЦ 
	|
	|ИТОГИ
	|ПО Организация, Ссылка
	|";
	Запрос.Текст = ТекстЗапроса;
	СтруктураПоиска = Новый Структура("НомерСтроки");
	
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		ВыборкаРегистратор = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		Пока ВыборкаРегистратор.Следующий() Цикл
			
			Регистратор = ВыборкаРегистратор.Ссылка.ПолучитьОбъект();
			РегистраторПроведен = Регистратор.Проведен;
			
			Если РегистраторПроведен Тогда
				НаборНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей(); 
				НаборНачисления.Отбор.Регистратор.Установить(ВыборкаРегистратор.Ссылка);
				НаборНачисления.Прочитать();
			КонецЕсли;
			
			Начисления = Регистратор.Начисления;
			
			Если РегистраторПроведен Тогда
				НаборНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей(); 
				НаборНачисления.Отбор.Регистратор.Установить(ВыборкаРегистратор.Ссылка);
				НаборНачисления.Прочитать();
			КонецЕсли;
			
			Выборка = ВыборкаРегистратор.Выбрать();
			Пока Выборка.Следующий() Цикл
				Начисления[Выборка.НомерСтроки-1].ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Простой;
				Начисления[Выборка.НомерСтроки-1].Показатель1 = Выборка.ЧасовойТариф;
				Если РегистраторПроведен Тогда
					НаборНачисления[Выборка.НомерСтроки-1].ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Простой;
					НаборНачисления[Выборка.НомерСтроки-1].Показатель1 = Выборка.ЧасовойТариф;
				КонецЕсли;
			КонецЦикла;
			
			Регистратор.Записать();
			Если РегистраторПроведен Тогда
				НаборНачисления.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;


	
КонецПроцедуры
Процедура	ИсправитьПланированиеЗатрат()

	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|Основной.Ссылка              	Как Док 
	| 
	|	ИЗ Документ.ПланируемыеЗатратыНаПерсонал КАК Основной
	|ГДЕ Основной.Проведен 
	|";
	
	Запрос.Текст = ТекстЗапроса;
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий()Цикл
		Док = ВыборкаДокументов.Док.ПолучитьОбъект();
		Док.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьНовыйВидвремени(ВидВремени)
	
	Если ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.СверхурочныеСдельщиков 
		Тогда
		Возврат Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные;
	ИначеЕсли ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ПочасовкаСдельщиков 
		или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ПочасовкаСдельщиковВнутреннесменная
		или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.СдельнаяРаботаПочасовыхРаботников
		Тогда
		Возврат Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
	ИначеЕсли ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.КомандировкаСельхозРаботы 
		или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.КомандировкаСельхозРаботы75
		Тогда
		Возврат Справочники.КлассификаторИспользованияРабочегоВремени.Командировка;
	ИначеЕсли ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификации 
		Тогда
		Возврат Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение;	
	ИначеЕсли ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ГосударственныеОбязанности 
		или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ДопризывнаяПодготовка
		или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ВоенныеСборы
		или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ДетиДо18
		или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ЖенщинамНаКормлениеДетей
		или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Карантин
		Тогда
		Возврат Справочники.КлассификаторИспользованияРабочегоВремени.НеотработанноеВремяПоЗаконодательству;
	ИначеЕсли ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботника 
		или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ПростоиПоВинеРаботниковВнутрисменные
		или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботодателяВнутрисменный
		Тогда
		Возврат Справочники.КлассификаторИспользованияРабочегоВремени.Простой;
	ИначеЕсли ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Опоздания 
		или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ПреждевременноеОкончаниеРаботы
		Тогда
		Возврат Справочники.КлассификаторИспользованияРабочегоВремени.Прогул;	
	ИначеЕсли ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.УчебаБезСохраненияЗП 
		Тогда
		Возврат Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый;
	Иначе
		Возврат ВидВремени;
	КонецЕсли;	
		
КонецФункции	

Процедура ОбновитьКлассификаторВремени()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОсновныеНачисленияОрганизаций.Ссылка,
	               |	ОсновныеНачисленияОрганизаций.Предопределенный,
	               |	ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени
	               |ИЗ
	               |	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
				   |ГДЕ
				   |	НЕ ОсновныеНачисленияОрганизаций.Предопределенный
				   |	И ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени.Предопределенный
				   |";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ОбозначениеВТабелеУчетаРабочегоВремени.ЦифровойКод) Тогда
			Продолжить;
		КонецЕсли;
		ВР = Выборка.Ссылка.ПолучитьОбъект();
		ВР.ОбозначениеВТабелеУчетаРабочегоВремени = ПолучитьНовыйВидвремени(Выборка.ОбозначениеВТабелеУчетаРабочегоВремени);
		
		Попытка
			ВР.Записать();
		Исключение
			Сообщить(НСтр("ru='Не удалось обновить вид времени у вида расчета ';uk='Не вдалося оновити вид часу у виді розрахунку '")+Выборка.Ссылка.Наименование);
		КонецПопытки;
		
	КонецЦикла;	
	
	Возврат;
	
КонецПроцедуры	


// Процедура заменяет перечисления типа П1*П2 на формулы расчета и заполняет таблицу показателей 
Процедура ПеревестиНаПроизвольныеФормулыРасчета()
	
	
	// заполним идентификаторы у показателей СМ
	
	МассивРазделителей = Новый Массив;
	
	МассивРазделителей.Добавить(" ");
	МассивРазделителей.Добавить(Символы.ВК);
	МассивРазделителей.Добавить(Символы.ВТаб);
	МассивРазделителей.Добавить(Символы.НПП);
	МассивРазделителей.Добавить(Символы.ПС);
	МассивРазделителей.Добавить(Символы.ПФ);
	МассивРазделителей.Добавить(Символы.Таб);
	
	ОператорыИФункцииОднойСтрокой	=  ".,+,-,/,*,?,=,<,>,(,)"""",@,!,#,$,%,^,&";
	
	СпрПоказатели = Справочники.ПоказателиСхемМотивации.Выбрать();
	Пока СпрПоказатели.Следующий() Цикл
		Показатель = СпрПоказатели.ПолучитьОбъект();
		Идентификатор = "";
		БылПробел = Ложь;
		Наименование = Показатель.Наименование;
		Для НомСимвола = 1 По СтрДлина(Наименование) Цикл
			Символ = Сред(Наименование,НомСимвола,1);		

			Если МассивРазделителей.Найти(Символ) <> Неопределено  Тогда
				БылПробел = Истина;
			ИначеЕсли БылПробел И (Найти(ОператорыИФункцииОднойСтрокой, Символ) = 0) Тогда
				БылПробел = Ложь;
				Идентификатор = Идентификатор + ВРег(Символ);
			ИначеЕсли Найти(ОператорыИФункцииОднойСтрокой, Символ) = 0 Тогда
				БылПробел = Ложь;
				Идентификатор = Идентификатор + Символ;		
			КонецЕсли;
		КонецЦикла;
		Показатель.Идентификатор = Идентификатор;
		Показатель.Записать();
	КонецЦикла;

	МассивФормульныхСпособовРасчета = Новый Массив;
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ДП2ОП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ДП2УП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2ДП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2УП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2ДП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2ОП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2УП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП3ДП1ОП2);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2УП3ДП4);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМинП1_П2УП3);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3ОП4);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМинП1_П2УП3ОП4);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2_П5ДП3УП4);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2ДП3ВП4_0);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1ВП2_0);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3УП4ДП5);
	МассивФормульныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2_П3УП4ДП5);
	
	
	ФормульныеСпособыРасчета = Новый Соответствие;
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1,						"ИсходныеДанные.Показатель1");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ДП2УП3,				"ИсходныеДанные.Показатель1 / (ИсходныеДанные.Показатель2 * ИсходныеДанные.Показатель3)");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2,					"ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2ДП3,				"ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2 / ИсходныеДанные.Показатель3");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2УП3,				"ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2 * ИсходныеДанные.Показатель3");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2УП3ДП4,			"ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2 * ИсходныеДанные.Показатель3 / ИсходныеДанные.Показатель4");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3,			"Макс(ИсходныеДанные.Показатель1,  ИсходныеДанные.Показатель2 * ИсходныеДанные.Показатель3)");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМинП1_П2УП3,			"Мин(ИсходныеДанные.Показатель1,  ИсходныеДанные.Показатель2 * ИсходныеДанные.Показатель3)");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2_П5ДП3УП4,		"Макс(ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2, ИсходныеДанные.Показатель5 / ИсходныеДанные.Показатель3 * ИсходныеДанные.Показатель4)");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2ДП3ВП4_0,		"Макс(ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2 / ИсходныеДанные.Показатель3 - ИсходныеДанные.Показатель4, 0)");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1ВП2_0,			"Макс(ИсходныеДанные.Показатель1 - ИсходныеДанные.Показатель2, 0)");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3УП4ДП5,		"Макс(ИсходныеДанные.Показатель1, ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель3) * ИсходныеДанные.Показатель4 / ИсходныеДанные.Показатель5");
	ФормульныеСпособыРасчета.Вставить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1УП2_П3УП4ДП5,		"Макс(ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель2, ИсходныеДанные.Показатель3 *  ИсходныеДанные.Показатель4 / ИсходныеДанные.Показатель5)");
	
	МассивФормульныеСпособыРасчетаСоШкалой = Новый Массив;
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ДП2ОП3);
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2);
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2ДП3);
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2УП3);
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2ОП3);	
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьП3ДП1ОП2);	
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3ОП4);
	МассивФормульныеСпособыРасчетаСоШкалой.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдалитьМинП1_П2УП3ОП4);	
	
	
	ПроверитьПравильностьшкальныхПоказателей(МассивФормульныхСпособовРасчета, МассивФормульныеСпособыРасчетаСоШкалой);
	


	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель1,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель2,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель3,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель4,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель5,
	|	ОсновныеНачисленияОрганизаций.СпособРасчета,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияОрганизаций.СпособРасчета В (&ШкальныеСпособыРасчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоШкала,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель1.ТипПоказателя КАК ТипПоказателя1,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель2.ТипПоказателя КАК ТипПоказателя2,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель3.ТипПоказателя КАК ТипПоказателя3,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель4.ТипПоказателя КАК ТипПоказателя4,
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель5.ТипПоказателя КАК ТипПоказателя5
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.СпособРасчета В(&СпособРасчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправленческиеНачисления.Ссылка,
	|	УправленческиеНачисления.УдалитьПоказатель1,
	|	УправленческиеНачисления.УдалитьПоказатель2,
	|	УправленческиеНачисления.УдалитьПоказатель3,
	|	УправленческиеНачисления.УдалитьПоказатель4,
	|	УправленческиеНачисления.УдалитьПоказатель5,
	|	УправленческиеНачисления.СпособРасчета,
	|	ВЫБОР
	|		КОГДА УправленческиеНачисления.СпособРасчета В (&ШкальныеСпособыРасчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	УправленческиеНачисления.УдалитьПоказатель1.ТипПоказателя,
	|	УправленческиеНачисления.УдалитьПоказатель2.ТипПоказателя,
	|	УправленческиеНачисления.УдалитьПоказатель3.ТипПоказателя,
	|	УправленческиеНачисления.УдалитьПоказатель4.ТипПоказателя,
	|	УправленческиеНачисления.УдалитьПоказатель5.ТипПоказателя
	|ИЗ
	|	ПланВидовРасчета.УправленческиеНачисления КАК УправленческиеНачисления
	|ГДЕ
	|	УправленческиеНачисления.СпособРасчета В(&СпособРасчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправленческиеУдержания.Ссылка,
	|	УправленческиеУдержания.УдалитьПоказатель1,
	|	УправленческиеУдержания.УдалитьПоказатель2,
	|	УправленческиеУдержания.УдалитьПоказатель3,
	|	УправленческиеУдержания.УдалитьПоказатель4,
	|	УправленческиеУдержания.УдалитьПоказатель5,
	|	УправленческиеУдержания.СпособРасчета,
	|	ВЫБОР
	|		КОГДА УправленческиеУдержания.СпособРасчета В (&ШкальныеСпособыРасчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	УправленческиеУдержания.УдалитьПоказатель1.ТипПоказателя,
	|	УправленческиеУдержания.УдалитьПоказатель2.ТипПоказателя,
	|	УправленческиеУдержания.УдалитьПоказатель3.ТипПоказателя,
	|	УправленческиеУдержания.УдалитьПоказатель4.ТипПоказателя,
	|	УправленческиеУдержания.УдалитьПоказатель5.ТипПоказателя
	|ИЗ
	|	ПланВидовРасчета.УправленческиеУдержания КАК УправленческиеУдержания
	|ГДЕ
	|	УправленческиеУдержания.СпособРасчета В(&СпособРасчета)";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СпособРасчета",МассивФормульныхСпособовРасчета);
	Запрос.УстановитьПараметр("ШкальныеСпособыРасчета",МассивФормульныеСпособыРасчетаСоШкалой);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВР = Выборка.Ссылка.ПолучитьОбъект();
		
		ВР.ПроизвольнаяФормулаРасчета	= Истина;
		ВР.СпособРасчета 				= Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула;
				
		// заполним формулу расчета
		Если Выборка.ЭтоШкала Тогда
			Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ДП2ОП3 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("", "", "ИсходныеДанные.Показатель1 / ИсходныеДанные.Показатель2", Выборка.УдалитьПоказатель3);
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("", "", "ИсходныеДанные.Показатель1", Выборка.УдалитьПоказатель2);
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2ДП3 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("", " / ИсходныеДанные.Показатель2", "ИсходныеДанные.Показатель1", Выборка.УдалитьПоказатель2);
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2УП3 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("", " * ИсходныеДанные.Показатель2", "ИсходныеДанные.Показатель1", Выборка.УдалитьПоказатель2);
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2ОП3 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("","", "ИсходныеДанные.Показатель1 * ИсходныеДанные.Показатель1", Выборка.УдалитьПоказатель3);
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП3ДП1ОП2 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("ИсходныеДанные.Показатель2","", "ИсходныеДанные.Показатель1", Выборка.УдалитьПоказатель2);
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3ОП4 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("Макс(ИсходныеДанные.Показатель1, ИсходныеДанные.Показатель2 * (","))", "ИсходныеДанные.Показатель3", Выборка.УдалитьПоказатель4);
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьМинП1_П2УП3ОП4 Тогда
				ВР.ФормулаРасчета = ЗаменитьШкалуНаУсловие("Мин(ИсходныеДанные.Показатель1, ИсходныеДанные.Показатель2 * (","))", "ИсходныеДанные.Показатель3", Выборка.УдалитьПоказатель4);
			КонецЕсли;
		Иначе
			ВР.ФормулаРасчета = ФормульныеСпособыРасчета[Выборка.СпособРасчета];
		КонецЕсли;
				
		// Заполним таблицу показателей и нулевые показатели заменем 0
		Для НомПоказателя = 1 По 5 Цикл
			
			Если Выборка["ТипПоказателя" + НомПоказателя] = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная 
			Или Выборка["ТипПоказателя" + НомПоказателя] = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка["УдалитьПоказатель" + НомПоказателя]) Тогда
			//	Если Выборка["УдалитьПоказатель" + НомПоказателя] = Справочники.ПоказателиСхемМотивации.УдалитьНуль Тогда
			//		ЗаменитьНулевойПоказатель(Выборка, ВР, НомПоказателя);
			//	Иначе
					ДобавитьПоказатель(ВР, Выборка, НомПоказателя);
			//	КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ВР.Записать();
	КонецЦикла;
	
КонецПроцедуры //ПеревестиНаПроизвольныеФормулыРасчета

// Процедура проверяет правильность указания способа расчета в видах расчета
Процедура ПроверитьПравильностьШкальныхПоказателей (ФормульныеСпособыРасчета, ШкальныеСпособыРасчета ) 
	
	Запрос = Новый Запрос;
	Шкалы = Новый Массив;
	Шкалы.Добавить(Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая);
	Шкалы.Добавить(Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная);
	Запрос.УстановитьПараметр("Шкалы", Шкалы);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка КАК Показатель
	|ИЗ
	|	Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
	|ГДЕ
	|	ПоказателиСхемМотивации.ТипПоказателя В (&Шкалы)
	|";
	СписокШкальныхпоказателей = Новый СписокЗначений;
	СписокШкальныхПоказателей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Показатель");
	Если СписокШкальныхПоказателей.Количество() = 0 Тогда
		Возврат ;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ЕстьNULL(ОсновныеНачисленияОрганизаций.УдалитьПоказатель1,0) КАК УдалитьПоказатель1,
	|	ЕстьNULL(ОсновныеНачисленияОрганизаций.УдалитьПоказатель2,0) КАК УдалитьПоказатель2,
	|	ЕстьNULL(ОсновныеНачисленияОрганизаций.УдалитьПоказатель3,0) КАК УдалитьПоказатель3,
	|	ЕстьNULL(ОсновныеНачисленияОрганизаций.УдалитьПоказатель4,0) КАК УдалитьПоказатель4,
	|	ЕстьNULL(ОсновныеНачисленияОрганизаций.УдалитьПоказатель5,0) КАК УдалитьПоказатель5,
	|	ОсновныеНачисленияОрганизаций.СпособРасчета КАК СпособРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.УдалитьПоказатель1.ТипПоказателя В (&Шкалы)
	|	ИЛИ ОсновныеНачисленияОрганизаций.УдалитьПоказатель2.ТипПоказателя В (&Шкалы)
	|	ИЛИ ОсновныеНачисленияОрганизаций.УдалитьПоказатель3.ТипПоказателя В (&Шкалы)
	|	ИЛИ ОсновныеНачисленияОрганизаций.УдалитьПоказатель4.ТипПоказателя В (&Шкалы)
	|	ИЛИ ОсновныеНачисленияОрганизаций.УдалитьПоказатель5.ТипПоказателя В (&Шкалы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправленческиеНачисления.Ссылка,
	|	ЕстьNULL(УправленческиеНачисления.УдалитьПоказатель1,0),
	|	ЕстьNULL(УправленческиеНачисления.УдалитьПоказатель2,0),
	|	ЕстьNULL(УправленческиеНачисления.УдалитьПоказатель3,0),
	|	ЕстьNULL(УправленческиеНачисления.УдалитьПоказатель4,0),
	|	ЕстьNULL(УправленческиеНачисления.УдалитьПоказатель5,0),
	|	УправленческиеНачисления.СпособРасчета
	|ИЗ
	|	ПланВидовРасчета.УправленческиеНачисления КАК УправленческиеНачисления
	|ГДЕ
	|	УправленческиеНачисления.УдалитьПоказатель1.ТипПоказателя В (&Шкалы)
	|	ИЛИ УправленческиеНачисления.УдалитьПоказатель2.ТипПоказателя В (&Шкалы)
	|	ИЛИ УправленческиеНачисления.УдалитьПоказатель3.ТипПоказателя В (&Шкалы)	
	|	ИЛИ УправленческиеНачисления.УдалитьПоказатель4.ТипПоказателя В (&Шкалы)
	|	ИЛИ УправленческиеНачисления.УдалитьПоказатель5.ТипПоказателя В (&Шкалы)

	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправленческиеУдержания.Ссылка,
	|	ЕстьNULL(УправленческиеУдержания.УдалитьПоказатель1,0),
	|	ЕстьNULL(УправленческиеУдержания.УдалитьПоказатель2,0),
	|	ЕстьNULL(УправленческиеУдержания.УдалитьПоказатель3,0),
	|	ЕстьNULL(УправленческиеУдержания.УдалитьПоказатель4,0),
	|	ЕстьNULL(УправленческиеУдержания.УдалитьПоказатель5,0),
	|	УправленческиеУдержания.СпособРасчета
	|ИЗ
	|	ПланВидовРасчета.УправленческиеУдержания КАК УправленческиеУдержания
	|Где
	|	УправленческиеУдержания.УдалитьПоказатель1.ТипПоказателя В (&Шкалы)
	|	ИЛИ УправленческиеУдержания.УдалитьПоказатель2.ТипПоказателя В (&Шкалы)
	|	ИЛИ УправленческиеУдержания.УдалитьПоказатель3.ТипПоказателя В (&Шкалы)
	|	ИЛИ УправленческиеУдержания.УдалитьПоказатель4.ТипПоказателя В (&Шкалы)
	|	ИЛИ УправленческиеУдержания.УдалитьПоказатель5.ТипПоказателя В (&Шкалы)
	|";

	Запрос.Текст = ТекстЗапроса;	                            	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ДП2ОП3 ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1УП2ОП3 Тогда;
			Если Выборка.УдалитьПоказатель1 <> 0 ИЛИ Выборка.УдалитьПоказатель2 <> 0
				ИЛИ Выборка.УдалитьПоказатель4 <> 0 ИЛИ Выборка.УдалитьПоказатель5 <> 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Неправильно указан способ расчета для вида расчета "" ';uk='Неправильно вказаний спосіб розрахунку для виду розрахунку"" '") + Выборка.Ссылка + НСтр("ru=' "". Возможна некорректная работа вида расчета. ';uk=' "". Можлива некоректна робота виду розрахунку. '"));
					
			КонецЕсли;
		ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2 ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2ДП3 
			ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП1ОП2УП3 ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьП3ДП1ОП2 Тогда 
				Если Выборка.УдалитьПоказатель1 <> 0 ИЛИ Выборка.УдалитьПоказатель3 <> 0
					ИЛИ Выборка.УдалитьПоказатель4 <> 0 ИЛИ Выборка.УдалитьПоказатель5 <> 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Неправильно указан способ расчета для вида расчета "" ';uk='Неправильно вказаний спосіб розрахунку для виду розрахунку"" '") + Выборка.Ссылка + НСтр("ru=' "" Возможна некорректная работа вида расчета.';uk=' "" Можлива некоректна робота виду розрахунку.'"));
				КонецЕсли;
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьМаксП1_П2УП3ОП4 ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдалитьМинП1_П2УП3ОП4 Тогда
				Если Выборка.УдалитьПоказатель1 <> 0 ИЛИ Выборка.УдалитьПоказатель2 <> 0
					ИЛИ Выборка.УдалитьПоказатель3 <> 0 ИЛИ Выборка.УдалитьПоказатель5 <> 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Неправильно указан способ расчета для вида расчета: "" ';uk='Неправильно вказаний спосіб розрахунку для виду розрахунку:"" '") + Выборка.Ссылка + НСтр("ru=' "" Возможна некорректная работа вида расчета.';uk=' "" Можлива некоректна робота виду розрахунку.'"));
				КонецЕсли;
		//Если не один из верхних способов расчета, то данный способ расчета вообще не является способом расчета со шкалой
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Неправильно указан способ расчета для вида расчета: "" ';uk='Неправильно вказаний спосіб розрахунку для виду розрахунку:"" '") + Выборка.Ссылка + НСтр("ru=' "" Возможна некорректная работа вида расчета.';uk=' "" Можлива некоректна робота виду розрахунку.'"));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Переносит реквизит в табличную часть
Процедура ДобавитьПоказатель(ВР, Выборка, НомерПоказателя)
	
	НоваяСтрокаПоказателей = ВР.Показатели.Добавить();
	
	НоваяСтрокаПоказателей.Показатель							= Выборка["УдалитьПоказатель" + НомерПоказателя];
	Если Выборка["УдалитьПоказатель" + НомерПоказателя].ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная И
		 Выборка["УдалитьПоказатель" + НомерПоказателя].ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая И
		Выборка["УдалитьПоказатель" + НомерПоказателя].ВозможностьИзменения <> Перечисления.ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете И
		Выборка["УдалитьПоказатель" + НомерПоказателя].ВозможностьИзменения <> Перечисления.ИзменениеПоказателейСхемМотивации.ВиденНоНеРедактируетсяПриРасчете Тогда
			НоваяСтрокаПоказателей.ЗапрашиватьПриКадровыхПеремещениях	= Истина;
	КонецЕсли;
	ВР["УдалитьПоказатель" + НомерПоказателя]					= Справочники.ПоказателиСхемМотивации.ПустаяСсылка();
	
КонецПроцедуры				

// Заменяет шкалу оценки на конструкцию условия ?(,,)
Функция ЗаменитьШкалуНаУсловие(НачальныйТекст, КонечныйТекст, ОцениваемоеВыражение, Показатель)
	
	ФормулаРасчета = НачальныйТекст;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Показатель",Показатель);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоставШкалОценкиПоказателейРасчета.НомерСтрокиШкалы КАК НомерСтрокиШкалы,
	|	ЕСТЬNULL(СоставШкалОценкиПоказателейРасчета.ЗначениеС,0) КАК ЗначениеС,
	|	ЕСТЬNULL(СоставШкалОценкиПоказателейРасчета.ЗначениеПо,0) КАК ЗначениеПо,
	|	ЕСТЬNULL(СоставШкалОценкиПоказателейРасчета.Размер,0) КАК Размер
	|ИЗ
	|	РегистрСведений.СоставШкалОценкиПоказателейРасчета КАК СоставШкалОценкиПоказателейРасчета
	|ГДЕ
	|	СоставШкалОценкиПоказателейРасчета.ШкалаОценкиПоказателя = &Показатель
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиШкалы";
	Выборка = Запрос.Выполнить().Выбрать();
	ВсегоСтрокШкалы = Выборка.Количество();
	
	Если ВсегоСтрокШкалы > 0 Тогда
		Пока Выборка.Следующий() Цикл
			
			ЗначениеС	= СтрЗаменить(Формат(Выборка.ЗначениеС,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")," ","");
			ЗначениеС	= ?(ЗначениеЗаполнено(ЗначениеС),ЗначениеС,"0");
			ЗначениеПо	= СтрЗаменить(Формат(Выборка.ЗначениеПо,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")," ","");
			ЗначениеПо	= ?(ЗначениеЗаполнено(ЗначениеПо), ЗначениеПо, "0");
			Размер		= СтрЗаменить(Формат(Выборка.Размер,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")," ","");
			Размер		= ?(ЗначениеЗаполнено(Размер),Размер,"0");
			
			ФормулаРасчета = ФормулаРасчета + "?(" + ОцениваемоеВыражение +">=" + ЗначениеС + " И " + ОцениваемоеВыражение + "<= " + ЗначениеПо + "," + Размер + ",";
			
		КонецЦикла;
		ФормулаРасчета = ФормулаРасчета + "0";
		Для Сч = 1 По ВсегоСтрокШкалы Цикл
			ФормулаРасчета = ФормулаРасчета + ")";
		КонецЦикла;
	КонецЕсли;
	
	ФормулаРасчета = ФормулаРасчета + КонечныйТекст;
	
	Возврат ФормулаРасчета;
	
КонецФункции //ЗаменитьШкалуНаУсловие

Процедура ДобавитьДействиеВПлановыеУдержания()
	
	
	// Для кадровых документов
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	 Начисления.Регистратор,
	|	 Начисления.НомерСтроки
	|
	|ИЗ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК Начисления
	|
	|ИТОГИ
	|ПО Регистратор
	|";
	Запрос.Текст = ТекстЗапроса;
	СтруктураПоиска = Новый Структура("НомерСтроки");
	
	
	ВыборкаРегистратор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор");
	Пока ВыборкаРегистратор.Следующий() Цикл
			
		Регистратор = ВыборкаРегистратор.Регистратор.ПолучитьОбъект();
		
		НаборУдержания= РегистрыСведений.ПлановыеУдержанияРаботниковОрганизаций.СоздатьНаборЗаписей(); 
		НаборУдержания.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
		НаборУдержания.Прочитать(); 
		
		Выборка = ВыборкаРегистратор.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НаборУдержания[Выборка.НомерСтроки-1].ВидРасчета <> ПланыВидовРасчета.УдержанияОрганизаций.ПочтовыйСбор Тогда
				Если НаборУдержания[Выборка.НомерСтроки-1].Показатель1= 0 Тогда
					НаборУдержания[Выборка.НомерСтроки-1].Действие = Перечисления.ВидыДействияСНачислением.Прекратить
				Иначе
					НаборУдержания[Выборка.НомерСтроки-1].Действие = Перечисления.ВидыДействияСНачислением.Начать
				КонецЕсли;
			Иначе
				Если НаборУдержания[Выборка.НомерСтроки-1].Период = НаборУдержания[Выборка.НомерСтроки-1].ДокументОснование.ДатаДействия Тогда
					НаборУдержания[Выборка.НомерСтроки-1].Действие = Перечисления.ВидыДействияСНачислением.Начать;
				Иначе
					НаборУдержания[Выборка.НомерСтроки-1].Действие = Перечисления.ВидыДействияСНачислением.Прекратить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
			
		НаборУдержания.Записать();
			
	КонецЦикла;
КонецПроцедуры



// Во всех элементах спр. "ВидыВыплат",
// вид расчета переносим в табличную часть
Процедура ЗаполнениеПараметровВидыВыплат()Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|		ВидыВыплат.Ссылка		КАК ВидВыплаты,
	|		ВидыВыплат.УдалитьВидРасчета	КАК ВидРасчета
	|	ИЗ Справочник.ВидыВыплат КАК ВидыВыплат
	|	ГДЕ ВидыВыплат.УдалитьВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидВыплаты = Выборка.ВидВыплаты.ПолучитьОбъект();
		СтрокаРасчета = ВидВыплаты.ВидыРасчета.Добавить();
		СтрокаРасчета.ВидРасчета = Выборка.ВидРасчета;
		ВидВыплаты.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеПараметровСтавкаШахтера()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|		ВидыДоходовНДФЛ.Ссылка		КАК ВидДохода
	|	ИЗ Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	|	ГДЕ НЕ ВидыДоходовНДФЛ.Предопределенный
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидДохода = Выборка.ВидДохода.ПолучитьОбъект();
		ВидДохода.ВидСтавкиШахтера = Перечисления.ВидыСтавокНДФЛ.Основная;
		ВидДохода.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Удаляет запись за декабрь 2009 - изменения в законодательстве
Процедура УдалитьМинЗП() Экспорт
	
	МенеджерЗаписи = РегистрыСведений.МинимальнаяОплатаТруда.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = '20091201';
	МенеджерЗаписи.Прочитать();
		
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры // УдалитьМинЗП()

Процедура ИсправитьНастройкуОтпусков()
	
	ВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты.ПолучитьОбъект();
	ВР.ЭтоОтпуск = Ложь;
	ВР.ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам;
	ВР.Записать();
	
	ВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам.ПолучитьОбъект();
	ВР.ЭтоОтпуск = Ложь;
	ВР.Записать();
	
КонецПроцедуры	



// Заполним новые настройки пользователей
Процедура ЗаполнитьНастройкиПользователей()

	// необходимо установить использование Помощника приема на работу и Рабочего стола
	// в зависимости от доступных ролей пользователя
	// ПолныеПрава
	
	МассивПользователейПомощник = Новый Массив;
	МассивПользователейРабочийСтол = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка,
	|	Пользователи.Код
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи";
	ВыборкаПользователей = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПользователей.Следующий() Цикл
		ИмяПользователяИБ	= СокрЛП(ВыборкаПользователей.Код);
		ПользовательИБ		= УправлениеПользователями.НайтиПользователяИБ(ИмяПользователяИБ);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.РолиИИсполнители.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Исполнитель.Установить(ВыборкаПользователей.Ссылка);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			Запись = НаборЗаписей.Добавить();
			Запись.Исполнитель	= ВыборкаПользователей.Ссылка;
	        НаборЗаписей.Записать();
		КонецЕсли;	
		
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			МассивПользователейПомощник.Добавить(ВыборкаПользователей.Ссылка);
			МассивПользователейРабочийСтол.Добавить(ВыборкаПользователей.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.КадровикРегламентированныхДанных)
			или ПользовательИБ.Роли.Содержит(Метаданные.Роли.РасчетчикРегламентированнойЗарплаты) Тогда
			
			МассивПользователейПомощник.Добавить(ВыборкаПользователей.Ссылка);
			МассивПользователейРабочийСтол.Добавить(ВыборкаПользователей.Ссылка);
			
		КонецЕсли;
		
		
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.МенеджерПоНаборуПерсонала) Тогда
			
			МассивПользователейПомощник.Добавить(ВыборкаПользователей.Ссылка);
			
		КонецЕсли;
		
		
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|		ПО Пользователи.Ссылка = НастройкиПользователей.Пользователь
	|			И (НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ИспользоватьПомощникаПриемаНаРаботу))
	|			И (НастройкиПользователей.Значение = ИСТИНА)
	|ГДЕ
	|	Пользователи.Ссылка В(&МассивПользователейПомощник)
	|	И НастройкиПользователей.Значение ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("МассивПользователейПомощник", МассивПользователейПомощник);
	ВыборкаПользователей = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПользователей.Следующий() Цикл

		НаборЗаписей.Отбор.Пользователь.Установить(ВыборкаПользователей.Ссылка);
		НаборЗаписей.Отбор.Настройка.Установить(ПланыВидовХарактеристик.НастройкиПользователей.ИспользоватьПомощникаПриемаНаРаботу);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Пользователь = ВыборкаПользователей.Ссылка;
		НоваяЗапись.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ИспользоватьПомощникаПриемаНаРаботу;
		НоваяЗапись.Значение = Истина;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|		ПО Пользователи.Ссылка = НастройкиПользователей.Пользователь
	|			И (НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОткрыватьПриЗапускеРабочийСтол))
	|			И (НастройкиПользователей.Значение = ИСТИНА)
	|ГДЕ
	|	Пользователи.Ссылка В(&МассивПользователейРабочийСтол)
	|	И НастройкиПользователей.Значение ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("МассивПользователейРабочийСтол", МассивПользователейРабочийСтол);
	ВыборкаПользователей = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПользователей.Следующий() Цикл

		НаборЗаписей.Отбор.Пользователь.Установить(ВыборкаПользователей.Ссылка);
		НаборЗаписей.Отбор.Настройка.Установить(ПланыВидовХарактеристик.НастройкиПользователей.ОткрыватьПриЗапускеРабочийСтол);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Пользователь = ВыборкаПользователей.Ссылка;
		НоваяЗапись.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОткрыватьПриЗапускеРабочийСтол;
		НоваяЗапись.Значение = Истина;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

//Обновляет коды элементов справочника "Смены" в случае, если код предопределенного и 
//пользовательского элемента совпадают
Процедура ОбновитьКодыСправочникаСмены()
	
	СписокСмен = Новый СписокЗначений;
	Выборка = Справочники.Смены.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка.Предопределенный Тогда
			СписокСмен.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;	
	УстановитьЗначениеКодаПредопределенныхЭлементов(СписокСмен);
	ЗаполнитьПредопределенныеСмены();
	
КонецПроцедуры

Процедура ЗаполнениеДополнительныхРеквизитовСотрудников()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка КАК Ссылка,
	|	СотрудникиОрганизаций.Физлицо КАК Физлицо
	|ПОМЕСТИТЬ Сотрудники
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	(НЕ СотрудникиОрганизаций.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Авторский), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)))
	|	И (СотрудникиОрганизаций.ТекущееПодразделениеОрганизации = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ИЛИ СотрудникиОрганизаций.ТекущаяДолжностьОрганизации = ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)
	|			ИЛИ СотрудникиОрганизаций.ТекущееПодразделениеКомпании = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			ИЛИ СотрудникиОрганизаций.ТекущаяДолжностьКомпании = ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДОБАВИТЬКДАТЕ(Работники.Период, ДЕНЬ, -1)) КАК ДатаУвольненияИзКомпании,
	|	Сотрудники.Ссылка КАК Сотрудник
	|ПОМЕСТИТЬ УвольнениеУпр
	|ИЗ
	|	Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
	|		ПО (Работники.ФизЛицо = Сотрудники.Физлицо)
	|			И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Работники.Период) КАК ДатаПриемаНаРаботуВКомпанию,
	|	Сотрудники.Ссылка КАК Сотрудник
	|ПОМЕСТИТЬ ПриемНаРаботуУпр
	|ИЗ
	|	Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
	|		ПО (Работники.ФизЛицо = Сотрудники.Физлицо)
	|			И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Период, ДЕНЬ, -1)) КАК ДатаУвольнения,
	|	Сотрудники.Ссылка КАК Сотрудник
	|ПОМЕСТИТЬ УвольнениеРегл
	|ИЗ
	|	Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО (РаботникиОрганизаций.Сотрудник = Сотрудники.Ссылка)
	|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаПриемаНаРаботу
	|ПОМЕСТИТЬ ПриемНаРаботуРегл
	|ИЗ
	|	Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО (РаботникиОрганизаций.Сотрудник = Сотрудники.Ссылка)
	|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка,
	|	ТекущееРабочееМестоРегл.ПодразделениеОрганизации КАК ТекущееПодразделениеОрганизации,
	|	ТекущееРабочееМестоРегл.Должность КАК ТекущаяДолжностьОрганизации,
	|	ТекущееРабочееМестоУпр.Подразделение КАК ТекущееПодразделениеКомпании,
	|	ТекущееРабочееМестоУпр.Должность КАК ТекущаяДолжностьКомпании,
	|	ПриемНаРаботуРегл.ДатаПриемаНаРаботу,
	|	УвольнениеРегл.ДатаУвольнения,
	|	ПриемНаРаботуУпр.ДатаПриемаНаРаботуВКомпанию,
	|	УвольнениеУпр.ДатаУвольненияИзКомпании
	|ПОМЕСТИТЬ ЗначенияДополнительныхРеквизитов
	|ИЗ
	|	Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПриемНаРаботуРегл КАК ПриемНаРаботуРегл
	|		ПО Сотрудники.Ссылка = ПриемНаРаботуРегл.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ УвольнениеРегл КАК УвольнениеРегл
	|		ПО Сотрудники.Ссылка = УвольнениеРегл.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПриемНаРаботуУпр КАК ПриемНаРаботуУпр
	|		ПО Сотрудники.Ссылка = ПриемНаРаботуУпр.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ УвольнениеУпр КАК УвольнениеУпр
	|		ПО Сотрудники.Ссылка = УвольнениеУпр.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники.СрезПоследних(
	|				,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						Сотрудники.Физлицо
	|					ИЗ
	|						Сотрудники КАК Сотрудники)) КАК ТекущееРабочееМестоУпр
	|		ПО Сотрудники.Физлицо = ТекущееРабочееМестоУпр.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				,
	|				Сотрудник В
	|					(ВЫБРАТЬ
	|						Сотрудники.Ссылка
	|					ИЗ
	|						Сотрудники КАК Сотрудники)) КАК ТекущееРабочееМестоРегл
	|		ПО (ТекущееРабочееМестоРегл.Сотрудник = Сотрудники.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияДополнительныхРеквизитов.Ссылка,
	|	ЗначенияДополнительныхРеквизитов.ТекущееПодразделениеОрганизации,
	|	ЗначенияДополнительныхРеквизитов.ТекущаяДолжностьОрганизации,
	|	ЗначенияДополнительныхРеквизитов.ТекущееПодразделениеКомпании,
	|	ЗначенияДополнительныхРеквизитов.ТекущаяДолжностьКомпании,
	|	ЗначенияДополнительныхРеквизитов.ДатаПриемаНаРаботу,
	|	ЗначенияДополнительныхРеквизитов.ДатаУвольнения,
	|	ЗначенияДополнительныхРеквизитов.ДатаПриемаНаРаботуВКомпанию,
	|	ЗначенияДополнительныхРеквизитов.ДатаУвольненияИзКомпании
	|ИЗ
	|	ЗначенияДополнительныхРеквизитов КАК ЗначенияДополнительныхРеквизитов
	|ГДЕ
	|	(ЗначенияДополнительныхРеквизитов.ТекущееПодразделениеОрганизации ЕСТЬ НЕ NULL 
	|			ИЛИ ЗначенияДополнительныхРеквизитов.ТекущаяДолжностьОрганизации ЕСТЬ НЕ NULL 
	|			ИЛИ ЗначенияДополнительныхРеквизитов.ТекущееПодразделениеКомпании ЕСТЬ НЕ NULL 
	|			ИЛИ ЗначенияДополнительныхРеквизитов.ТекущаяДолжностьКомпании ЕСТЬ НЕ NULL )";
	
	ОбновитьОбъектыПоЗапросу(Запрос, "Обработка списка сотрудников")
	
КонецПроцедуры

Процедура ДополнитьВытеснение2112()
	
	 ВРДобавить1 = Новый Массив();
	 ВРДобавить1.Добавить(ПланыВидоврасчета.ОсновныеНачисленияОрганизаций.ДополнительныйЕжегодныйОтпуск);
	 ВРДобавить1.Добавить(ПланыВидоврасчета.ОсновныеНачисленияОрганизаций.ДополнительныйОтпускНаДетей);
	 ВРДобавить1.Добавить(ПланыВидоврасчета.ОсновныеНачисленияОрганизаций.ЧернобыльскийОтпуск);
	 ВРДобавить1.Добавить(ПланыВидоврасчета.ОсновныеНачисленияОрганизаций.УчебныйОтпуск);
	 
	 ВРДобавить2 = Новый Массив();
	 ВРДобавить2.Добавить(ПланыВидоврасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчетПоСоглашению);
	 
	Запрос = Новый Запрос();
	Запрос.Текст ="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОсновныеНачисленияОрганизаций.Ссылка
	|	ИЗ
	|		ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК ОсновныеНачисленияОрганизаций
	|		
	|	ГДЕ
	|	 	ОсновныеНачисленияОрганизаций.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтп)
	|	ИЛИ	ОсновныеНачисленияОрганизаций.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВР = Выборка.Ссылка.ПолучитьОбъект();
		ФИзменений = Ложь;
		Если ВР.ВытесняющиеВидыРасчета.Найти(ПланыВидоврасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтп,"ВидРасчета") <> Неопределено Тогда
			Для Каждого ВРДоб из ВРДобавить1 Цикл 
				Если ВР.ВытесняющиеВидыРасчета.Найти(ВРДоб,"ВидРасчета") = Неопределено Тогда
					НоваяСтрока            = ВР.ВытесняющиеВидыРасчета.Добавить();	
					НоваяСтрока.ВидРасчета = ВРДоб;
					ФИзменений = Истина;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		Если ВР.ВытесняющиеВидыРасчета.Найти(ПланыВидоврасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет,"ВидРасчета") <> Неопределено Тогда
			Для Каждого ВРДоб из ВРДобавить2 Цикл 
				Если ВР.ВытесняющиеВидыРасчета.Найти(ВРДоб,"ВидРасчета") = Неопределено Тогда
					НоваяСтрока            = ВР.ВытесняющиеВидыРасчета.Добавить();	
					НоваяСтрока.ВидРасчета = ВРДоб;
					ФИзменений = Истина;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		Если ФИзменений Тогда
			ВР.Записать();
		КонецЕсли;	
	КонецЦикла	
	 
КонецПроцедуры

Процедура ПредзаполнитьСреднийЗаработок()
	
	ВР = ПланыВидоврасчета.СреднийЗаработок.ПоЗаработкуБЛБерИРоды.ПолучитьОбъект();
	
	БазовыеВидыРасчета = ПланыВидоврасчета.СреднийЗаработок.ПоЗаработкуБЛ.БазовыеВидыРасчета.Выгрузить();
	ВедущиеВидыРасчета = ПланыВидоврасчета.СреднийЗаработок.ПоЗаработкуБЛ.ВедущиеВидыРасчета.Выгрузить();
	
	ВР.БазовыеВидыРасчета.Загрузить(БазовыеВидыРасчета);
	ВР.ВедущиеВидыРасчета.Загрузить(ВедущиеВидыРасчета);
	ВР.Записать();
	
КонецПроцедуры



Процедура ЗаполнитьРеквизитыРегистраВзаиморасчетыПоНДФЛ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВзаиморасчетыПоНДФЛ.Регистратор КАК Регистратор
	|ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Взаиморасчеты = РегистрыНакопления.ВзаиморасчетыПоНДФЛ;
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = Взаиморасчеты.СоздатьНаборЗаписей();
		Док = НаборЗаписей.Отбор.Регистратор;
		Док.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		Для каждого ТекущаяЗапись Из НаборЗаписей Цикл
			Если ТекущаяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход Тогда 
				Если ЗначениеЗаполнено(ТекущаяЗапись.УдалитьЛьгота) Тогда
					ТекущаяЗапись.Льгота = ТекущаяЗапись.УдалитьЛьгота;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекущаяЗапись.УдалитьВидСтавки) Тогда
					ТекущаяЗапись.ВидСтавки = ТекущаяЗапись.УдалитьВидСтавки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры


Процедура ЗаполнитьСтажВДняхСтажВЧасах()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета,
	               |	ОсновныеНачисленияОрганизаций.ЗачетОтработанногоВремени
	               |ИЗ
	               |	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
				   |ГДЕ ОсновныеНачисленияОрганизаций.ЗачетОтработанногоВремени";
				   
	ТаблицаРабочеговремени = Запрос.Выполнить().Выгрузить();			   
	
	
	ВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СтажВДнях.ПолучитьОбъект();
	
	ВР.КатегорияРасчета = Перечисления.КатегорииРасчетов.Первичное;
	ВР.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула;
	ВР.ФормулаРасчета = "ИсходныеДанные.Показатель1";
	ВР.БазаПоНазначению = Истина;
	
	Показатель = ВР.Показатели.Добавить();
	Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБазаВремяВДнях;
	
	ВР.БазовыеВидыРасчета.Очистить();
	ВР.БазовыеВидыРасчета.Загрузить(ТаблицаРабочеговремени);
	
	ВР.Записать();
	
	ВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СтажВЧасах.ПолучитьОбъект();
	
	ВР.КатегорияРасчета = Перечисления.КатегорииРасчетов.Первичное;
	ВР.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула;
	ВР.ФормулаРасчета = "ИсходныеДанные.Показатель1";
	ВР.БазаПоНазначению = Истина;
	
	Показатель = ВР.Показатели.Добавить();
	Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБазаВремяВЧасах;
	
	ВР.БазовыеВидыРасчета.Очистить();
	ВР.БазовыеВидыРасчета.Загрузить(ТаблицаРабочеговремени);
	
	ВР.Записать();

	
КонецПроцедуры


Процедура ЗаполнитьНачисленияДляПредварительногоРасчета()
	
	НаборЗаписей = РегистрыСведений.НачисленияДляПредварительногоРасчета.СоздатьНаборЗаписей(); 

	НоваяЗапись = НаборЗаписей.Добавить(); 
	НоваяЗапись.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы; 

	НоваяЗапись = НаборЗаписей.Добавить(); 
	НоваяЗапись.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы; 
	
	НоваяЗапись = НаборЗаписей.Добавить(); 
	НоваяЗапись.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаСверхурочных;
	НоваяЗапись.ИспользоватьИзРегистров = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить(); 
	НоваяЗапись.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПраздничныхИВыходных;
	НоваяЗапись.ИспользоватьИзРегистров = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить(); 
	НоваяЗапись.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Замещение;
	
	НоваяЗапись = НаборЗаписей.Добавить(); 
	НоваяЗапись.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Совмещение; 
	
	НаборЗаписей.Записать();

	
КонецПроцедуры


Процедура ЗаполнитьВариантыАлгоритмов()
	
	НаборЗаписей = РегистрыСведений.ВариантыАлгоритмовРасчетаЗарплаты.СоздатьНаборЗаписей(); 
	Запись = НаборЗаписей.Добавить();
	Запись.РасчетНДФЛ17 = Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ДоначислениеНаСуммуПревышения;
	Запись.РасчетИндексацииПропорционально = Перечисления.ВариантыАлгоритмовРасчетИндексацииПропорционально.НеПрименять;
	Запись.ПорогИндексации103 = Перечисления.ВариантыАлгоритмовПорогИндексации103.ПрименятьС01012016;
	НаборЗаписей.Записать();
	
КонецПроцедуры


Процедура ОбновитьВидыДоходовНДФЛ()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыДоходовНДФЛ.Ссылка
	               |ИЗ
	               |	Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	               |ГДЕ
	               |	НЕ ВидыДоходовНДФЛ.Предопределенный
	               |	И НЕ ВидыДоходовНДФЛ.ПометкаУдаления";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.КодДо2011 = СпрОбъект.Код;
        СпрОбъект.Записать();
	КонецЦикла;	
				   
				   
КонецПроцедуры


Процедура ОбновитьОтражениеВзносовФОТВРеглУчете()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаСреза", ПроведениеРасчетов.ДатаВводаНПНК());
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОтражениеВзносовФОТВРеглУчетеСрезПоследних.Налог,
				   |	ОтражениеВзносовФОТВРеглУчетеСрезПоследних.ХарактерЗатрат,
	               |	ОтражениеВзносовФОТВРеглУчетеСрезПоследних.СтатьяЗатрат
	               |ИЗ
	               |	РегистрСведений.ОтражениеВзносовФОТВРеглУчете.СрезПоследних(&ДатаСреза, Налог.Актуальность и СчетЗатрат = ЗНАЧЕНИЕ(Плансчетов.Хозрасчетный.ПустаяСсылка)) КАК ОтражениеВзносовФОТВРеглУчетеСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ОтражениеВзносовФОТВРеглУчете.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Период.Установить(ПроведениеРасчетов.ДатаВводаНПНК()); 
    НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.НеУчитываемыеВУправленческомУчете
			ИЛИ Выборка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = ПроведениеРасчетов.ДатаВводаНПНК();
		НоваяЗапись.Налог = Выборка.Налог;
		Если Выборка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
			НоваяЗапись.СчетЗатрат = Планысчетов.Хозрасчетный.БракВПроизводстве; //24
		ИначеЕсли Выборка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
			НоваяЗапись.СчетЗатрат = Планысчетов.Хозрасчетный.ИзготовлениеОсновныхСредств; //1522
		ИначеЕсли Выборка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт Тогда
			НоваяЗапись.СчетЗатрат = Планысчетов.Хозрасчетный.РасходыНаСбыт; //93
		ИначеЕсли Выборка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
			НоваяЗапись.СчетЗатрат = Планысчетов.Хозрасчетный.ОбщепроизводственныеРасходы; //91
		ИначеЕсли Выборка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда
			НоваяЗапись.СчетЗатрат = Планысчетов.Хозрасчетный.АдминистративныеРасходы; //92
		ИначеЕсли Выборка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
			НоваяЗапись.СчетЗатрат = Планысчетов.Хозрасчетный.ОсновноеПроизводство; //231
		ИначеЕсли Выборка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы Тогда
			НоваяЗапись.СчетЗатрат = Планысчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельности; //949
		ИначеЕсли Выборка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы Тогда
			НоваяЗапись.СчетЗатрат = Планысчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыМатериалы; //200	
		Иначе
			//На всякий случай
			НоваяЗапись.СчетЗатрат = Планысчетов.Хозрасчетный.ОбщепроизводственныеРасходы; //91
		КонецЕсли;	
			
		НоваяЗапись.СтатьяЗатрат = Выборка.СтатьяЗатрат;
		
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры	

Процедура ОбновитьСпособыОтражения(ОбработкаЗаполнения)
	
	Выборка = Справочники.СпособыОтраженияЗарплатыВРеглУчете.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Выборка.НалоговоеНазначение) Тогда
			Продолжить;
		КонецЕсли;
		СпрОбъект = Выборка.ПолучитьОбъект();
		СпрОбъект.НалоговоеНазначениеДоНКУ = Выборка.НалоговоеНазначение;
		СпрОбъект.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		СпрОбъект.Записать();
	КонецЦикла;	
	
	НачисленияПоУмолчаниюКопия = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию.Скопировать();
	УдержанияПоУмолчаниюКопия = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеУдержанийПоУмолчанию.Скопировать();
	ОбработкаЗаполнения.ЗаполнитьОбъект("Справочник", "СпособыОтраженияЗарплатыВРеглУчете");
	
	НачисленияПоУмолчанию = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(НачисленияПоУмолчанию,НачисленияПоУмолчаниюКопия,"Наименование,НалоговоеНазначение,НалоговоеНазначениеДоНКУ,СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,ВзносыОсновногоНачисления");
	НачисленияПоУмолчанию.Записать();
	УдержанияПоУмолчанию = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеУдержанийПоУмолчанию.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(УдержанияПоУмолчанию,УдержанияПоУмолчаниюКопия,"Наименование,НалоговоеНазначение,НалоговоеНазначениеДоНКУ,СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,ВзносыОсновногоНачисления");
	УдержанияПоУмолчанию.Записать();
	
КонецПроцедуры


Процедура ОбновитьПроводкиНастройкиЗПпоОПЗ()

	// установим во всех настройках и документах после 01.08 для 91-го счета пропорциональный НДС
	// документы нужно будет перепровести пользователям самостоятельно
	
	СчетОПЗ 	  = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы;
	НН_ПропорцНДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально;
	
	// 1. Спр. способы отражения ЗП в регл. учете.
	Выборка = Справочники.СпособыОтраженияЗарплатыВРеглУчете.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаписыватьОбъект = Ложь;
		Объект = Выборка.ПолучитьОбъект();
		
		
		Если ЗначениеЗаполнено(Объект.СчетДт) И (Объект.СчетДт = СчетОПЗ ИЛИ Объект.СчетДт.ПринадлежитЭлементу(СчетОПЗ)) Тогда		
			ЗаписыватьОбъект = Истина;		
		 	Объект.НалоговоеНазначениеНДС = НН_ПропорцНДС;
		КонецЕсли;
		
		Если ЗаписыватьОбъект Тогда
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	// 2. Док. НачислениеЗП
	Выборка = Документы.ОтражениеЗарплатыВРеглУчете.Выбрать(ПроведениеРасчетов.ДатаНачалаРаспределенияОПЗвНУ());
	Пока Выборка.Следующий() Цикл
		
		ЗаписыватьОбъект = Ложь;
		Объект = Выборка.ПолучитьОбъект();
		
		Для каждого Строка Из Объект.Начисления Цикл
		
			Если ЗначениеЗаполнено(Строка.СчетДт) И (Строка.СчетДт = СчетОПЗ ИЛИ Строка.СчетДт.ПринадлежитЭлементу(СчетОПЗ)) Тогда		
				ЗаписыватьОбъект = Истина;		
				Строка.НалоговоеНазначение    = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
				Строка.НалоговоеНазначениеНДС = НН_ПропорцНДС;
			КонецЕсли;
		
		КонецЦикла;
		
		Для каждого Строка Из Объект.ВзносыФОТ Цикл
		
			Если ЗначениеЗаполнено(Строка.СчетДт) И (Строка.СчетДт = СчетОПЗ ИЛИ Строка.СчетДт.ПринадлежитЭлементу(СчетОПЗ)) Тогда		
				ЗаписыватьОбъект = Истина;		
				Строка.НалоговоеНазначение    = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
				Строка.НалоговоеНазначениеНДС = НН_ПропорцНДС;
			КонецЕсли;
		
		КонецЦикла;
		
		Для каждого Строка Из Объект.ОтражениеВУчете Цикл
		
			Если ЗначениеЗаполнено(Строка.СчетДт) И (Строка.СчетДт = СчетОПЗ ИЛИ Строка.СчетДт.ПринадлежитЭлементу(СчетОПЗ)) Тогда		
				ЗаписыватьОбъект = Истина;		
				Строка.НалоговоеНазначение    = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
				Строка.НалоговоеНазначениеНДС = НН_ПропорцНДС;
			КонецЕсли;
		
		КонецЦикла;
		
		Если ЗаписыватьОбъект Тогда
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ОчиститьШкалаВыслугиЛет()

	НаборЗаписей = РегистрыСведений.ШкалаВыслугиЛет.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();

	Для Каждого Запись Из НаборЗаписей Цикл
		Если ЗначениеЗаполнено(Запись.УдалитьСпособУчетаСтажа) Тогда
			Запись.УдалитьСпособУчетаСтажа = Неопределено;
		КонецЕсли;	
	КонецЦикла;    
	    
	НаборЗаписей.Записать();
	
	
КонецПроцедуры

Процедура ЗаполнитьСчетДтВС()

	ОтражениеВС = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеВоенногоСбора.ПолучитьОбъект();
	ОтражениеВС.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
	ОтражениеВС.Записать();
	
	
КонецПроцедуры

Процедура ИзменитьЗаписиПроизводственногоКалендаря()
	
	НаборЗаписей = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДатаКалендаря.Установить(Дата(2015,10,13));
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		Запись = НаборЗаписей[0];
   		Запись.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный;
		НаборЗаписей.Записать();	
	КонецЕсли;	
	
	НаборЗаписей.Отбор.ДатаКалендаря.Установить(Дата(2015,10,14));
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		Запись = НаборЗаписей[0];
		Запись.Пятидневка = 0;
		Запись.Шестидневка = 0;
		Запись.КалендарныеДни = 0;
   		Запись.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник;
		НаборЗаписей.Записать();	
	КонецЕсли	
	

КонецПроцедуры	
Процедура ЗаполнитьНепредопределенныеБазовыеПоЗаработкуБЛФСС()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СреднийЗаработокБазовыеВидыРасчета.ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
	|ГДЕ
	|	СреднийЗаработокБазовыеВидыРасчета.ВидРасчета.Предопределенный = ЛОЖЬ
	|	И СреднийЗаработокБазовыеВидыРасчета.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛБерИРоды), 
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ), 
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛПропорционально))";
	
	ТаблицаБазовыхВидовРасчета = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаБазовыхВидовРасчета.Количество() > 0 Тогда
		НовыйПоЗаработкуБЛФСС = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛФСС.ПолучитьОбъект();
		НовыйПоЗаработкуБЛФСС.БазовыеВидыРасчета.Загрузить(ТаблицаБазовыхВидовРасчета);
		НовыйПоЗаработкуБЛФСС.Записать()
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьБазуПоЗаработкуДляОтпуска()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СреднийЗаработокБазовыеВидыРасчета.ВидРасчета КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
	|ГДЕ
	|	СреднийЗаработокБазовыеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуДляОтпуска)";
	
	ТаблицаБазовыхВидовРасчета = Запрос.Выполнить().Выгрузить();
	НайденнаяСтрока = ТаблицаБазовыхВидовРасчета.Найти(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю,"ВидРасчета");
	Если НайденнаяСтрока = Неопределено Тогда
		ПоЗаработкуДляОтпуска = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуДляОтпуска.ПолучитьОбъект();
		НовыйБазовыйВидРасчета = ПоЗаработкуДляОтпуска.БазовыеВидыРасчета.Добавить();
		НовыйБазовыйВидРасчета.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю;
		Попытка
			ПоЗаработкуДляОтпуска.Записать();
		Исключение
			Сообщить(НСтр("ru='Не удалось обновить базовые виды расчета для ';uk='Не вдалося оновити базові види розрахунку для '")+ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуДляОтпуска);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры// Процедура выполняет начальное заполнение констант

Процедура ЗаполнитьОплатаПоСреднемуМобОрганизации()
	
	ОплатаПосреднемуМобОрганизации = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПосреднемуМобОрганизации.ПолучитьОбъект();
	
	ОплатаПосреднемуМобОрганизации.КатегорияРасчета 						= Перечисления.КатегорииРасчетов.Первичное;
	ОплатаПосреднемуМобОрганизации.СпособРасчета							= Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку;
	ОплатаПосреднемуМобОрганизации.ОбозначениеВТабелеУчетаРабочегоВремени	= Справочники.КлассификаторИспользованияРабочегоВремени.НеотработанноеВремяПоЗаконодательству;
	ОплатаПосреднемуМобОрганизации.ВидВремени								= Перечисления.ВидыВремени.ЦелодневноеНеотработанное;
	ОплатаПосреднемуМобОрганизации.ЗачетОтработанногоВремени				= Ложь;
	ОплатаПосреднемуМобОрганизации.ЗачетНормыВремени						= Истина;
	ОплатаПосреднемуМобОрганизации.ЗачетКалендарных							= Истина;
	ОплатаПосреднемуМобОрганизации.ДоходНДФЛ								= Справочники.ВидыДоходовНДФЛ.Код01;
	ОплатаПосреднемуМобОрганизации.СчетУчета								= ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
	ОплатаПосреднемуМобОрганизации.ЭтоЗарплатаМобилизованным				= Истина;
	ОплатаПосреднемуМобОрганизации.ПоказателиВидовОплатыТруда				= Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_ФОТ;
	ОплатаПосреднемуМобОрганизации.Записать();
	
	ЕСВМобилизованные = ПланыВидовРасчета.ВзносыВФонды.ЕСВМобилизованные.ПолучитьОбъект();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВзносыВФондыБазовыеВидыРасчета.ВидРасчета КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ВзносыВФонды.БазовыеВидыРасчета КАК ВзносыВФондыБазовыеВидыРасчета
	|ГДЕ
	|	ВзносыВФондыБазовыеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ВзносыВФонды.ЕСВМобилизованные)";
	
	ТаблицаБазовыхВидовРасчета = Запрос.Выполнить().Выгрузить();
	
	НайденнаяСтрока = ТаблицаБазовыхВидовРасчета.Найти(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПосреднемуМобОрганизации,"ВидРасчета");
	Если НайденнаяСтрока = Неопределено Тогда
		
		НовыйБазовыйВидРасчета = ЕСВМобилизованные.БазовыеВидыРасчета.Добавить();
		НовыйБазовыйВидРасчета.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПосреднемуМобОрганизации;
		Попытка
			ЕСВМобилизованные.Записать();
		Исключение
			Сообщить(НСтр("ru='Не удалось обновить базовые виды расчета для ';uk='Не вдалося оновити базові види розрахунку для '")+ПланыВидовРасчета.ВзносыВФонды.ЕСВМобилизованные);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры
Процедура ЗаполнитьЕСВФОТМобилизованные()
	
	ЕСВФОТМобилизованные = ПланыВидовРасчета.ВзносыВФонды.ЕСВФОТМобилизованные.ПолучитьОбъект();
	ЕСВФОТМобилизованные.Наименование = НСтр("ru='ЕСВ ФОТ (мобилизованные)';uk='ЄСВ ФОП (мобілізовані)'",Локализация.КодЯзыкаИнформационнойБазы());	
	ЕСВФОТМобилизованные.СпособРасчета				= Перечисления.СпособыРасчетаОплатыТруда.ВзносыФОТ;
	ЕСВФОТМобилизованные.ЕСВ						= Истина;
	ЕСВФОТМобилизованные.КатегорияРасчета   		= Перечисления.КатегорииРасчетов.Первичное;
	ЕСВФОТМобилизованные.СпособРасчетаПоШкале   	= Перечисления.СпособыРасчетаПоШкале.ПоШкале;
	ЕСВФОТМобилизованные.СтавкаПоПериодуРегистрации	= Истина;
	ЕСВФОТМобилизованные.Актуальность				= Истина;
	
	БазаЕСВМобилизованные = ПланыВидовРасчета.ВзносыВФонды.ЕСВМобилизованные.БазовыеВидыРасчета.Выгрузить();
	ЕСВФОТМобилизованные.БазовыеВидыРасчета.Загрузить(БазаЕСВМобилизованные);
	
	ВедущиеЕСВМобилизованные = ПланыВидовРасчета.ВзносыВФонды.ЕСВМобилизованные.ВедущиеВидыРасчета.Выгрузить();
	ЕСВФОТМобилизованные.ВедущиеВидыРасчета.Загрузить(ВедущиеЕСВМобилизованные);
	
	Попытка
		ЕСВФОТМобилизованные.Записать();
	Исключение
		Сообщить(НСтр("ru='Не удалось обновить базовые виды расчета для ';uk='Не вдалося оновити базові види розрахунку для '")+ПланыВидовРасчета.ВзносыВФонды.ЕСВФОТМобилизованные);
	КонецПопытки;

	
КонецПроцедуры

Процедура ДобавитьВытесняющийОплатаПоСреднемуМобОрганизации()
	
	Запрос = Новый Запрос;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТУжеДобавленныеВВытесняющие
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета
	|ГДЕ
	|	ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуМобОрганизации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета
	|ГДЕ
	|	ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуМоб)
	|	И НЕ ОсновныеНачисленияОрганизацийВытесняющиеВидыРасчета.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТУжеДобавленныеВВытесняющие.Ссылка
	|				ИЗ
	|					ВТУжеДобавленныеВВытесняющие КАК ВТУжеДобавленныеВВытесняющие)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВидРасчета = Выборка.Ссылка.ПолучитьОбъект();
		НовыйВытесняющийВидРасчета = ВидРасчета.ВытесняющиеВидыРасчета.Добавить();
		НовыйВытесняющийВидРасчета.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПосреднемуМобОрганизации;
		Попытка
			ВидРасчета.Записать();
		Исключение
			Сообщить(НСтр("ru='Не удалось обновить вытесняющие виды расчета для ';uk='Не вдалося оновити види розрахунку, що витісняють, для '") + Выборка.Ссылка);
		КонецПопытки;

	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьЗаписиПроизводственногоКалендаря2017()
	
	НаборЗаписей = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДатаКалендаря.Установить(Дата(2017,12,25));
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		Запись = НаборЗаписей[0];
		Запись.Пятидневка = 0;
		Запись.Шестидневка = 0;
		Запись.КалендарныеДни = 0;
   		Запись.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник;
		НаборЗаписей.Записать();	
	КонецЕсли	

КонецПроцедуры
Процедура ЗаполнитьСправочникОснованияУвольненияИзОрганизации()
	
	Макет = Справочники.ОснованияУвольненияИзОрганизации.ПолучитьМакет("СписокОснованийУвольнения");
	МассивСтатей = Новый Массив;
	ТекущаяСтрока = 5;
	ТЗ = Макет.ТекущаяОбласть;
	Пока ТекущаяСтрока < Макет.ВысотаТаблицы Цикл
		СтрокаСтатьяЗакона = "R" +  Формат(ТекущаяСтрока,"ЧГ=0")+"C3";
		Если СокрЛП(Макет.Область(СтрокаСтатьяЗакона).Текст) <> "" Тогда
			МассивСтатей.Добавить(Макет.Область(СтрокаСтатьяЗакона).Текст);
		КонецЕсли;	
		ТекущаяСтрока = ТекущаяСтрока + 1;
	КонецЦикла;
	
	Выборка = Справочники.ОснованияУвольненияИзОрганизации.Выбрать();
	Пока Выборка.Следующий() Цикл
		НаименованиеСтатьи = ВРЕГ(Выборка.Наименование);
		Если Найти(НаименованиеСтатьи,"КЗОТ") <> 0 Тогда
			НаименованиеСтатьи = СтрЗаменить(НаименованиеСтатьи, "КЗОТ", "КЗПП")
		КонецЕсли;	
		Для Каждого Статья Из МассивСтатей Цикл
			Если Найти(НаименованиеСтатьи, ВРЕГ(Статья)) <> 0 Тогда 
				СправочникОбъект = Выборка.ПолучитьОбъект();
				СправочникОбъект.СтатьяЗакона = Статья;
				СправочникОбъект.Записать();
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
Конецпроцедуры	
	
Процедура УстановитьКонстанты() Экспорт
	
	КодЯзыкаИБ = Локализация.КодЯзыкаИнформационнойБазы();
	
	// Заполнение справочника Валюты.
	ВалютаРегламентированногоУчета = 
	НайтиСоздатьВалюту("980", "грн", НСтр("ru='Гривна';uk='Гривня'", КодЯзыкаИБ), 		"гривня, гривні, гривень, ж, копійка, копійки, копійок, ж, 2",	"гривна, гривны, гривен, ж, копейка, копейки, копеек, ж, 2");
	ВалютаУправленческогоУчета = 
	НайтиСоздатьВалюту("840", "USD", НСтр("ru='Доллар США';uk='Долар США'", КодЯзыкаИБ), 	"долар, долари, доларів, м, цент, центи, центів, м, 2",			"доллар, доллара, долларов, м, цент, цента, центов, м, 2");
	
	УстановитьКонстанту("ВалютаРегламентированногоУчета"          , ВалютаРегламентированногоУчета);
	УстановитьКонстанту("ВалютаУправленческогоУчета"              , ВалютаУправленческогоУчета);
	УстановитьКонстанту("ИспользованиеВстроенногоПочтовогоКлиента", Истина);
	УстановитьКонстанту("ОсновноеПредставлениеФизЛиц"             , Перечисления.ПредставленияФизЛиц.ФамилияИО);
			
	ТаблицаСоответствий = Новый Соответствие;
	ТаблицаСоответствий.Вставить(7,"999-99-99");
	ТаблицаСоответствий.Вставить(6,"99-99-99");
	ТаблицаСоответствий.Вставить(5,"9-99-99");
	ТаблицаСоответствий.Вставить(4,"99-99");
	ХранилищеШаблоновТелефонов = Новый ХранилищеЗначения(ТаблицаСоответствий);
    УстановитьКонстанту("ШаблоныТелефонныхНомеров", ХранилищеШаблоновТелефонов);
		
	ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки();
	
	Константы.ИнтервалПроверкиНапоминанийВСекундах.Установить(60);
	Константы.РежимЗавершенияРаботыПользователей.Установить(Перечисления.РежимыЗавершенияРаботыПользователей.РазрешитьРаботу);
	
КонецПроцедуры	

// Процедура заполняет предопределенные элементы для перехода с 1С:Предприятие 7.7
//
Процедура ЗаполнитьПредопределенныеЭлементы77()
	
	ЗиК = Справочники.КонвертацииИзИнформационныхБаз1СПредприятия77.ЗарплатаКадры.ПолучитьОбъект();
	Зик.Конфигурация				= НСтр("ru='Зарплата+Кадры для Украины';uk='Зарплата+Кадри для України'", Локализация.КодЯзыкаИнформационнойБазы());
	Зик.ИдентификаторКонфигурации	= "URCLKTK";
	Зик.НомерРелиза					= "7.70.030";
	Зик.КонвертацияПомощник			= "PrB_Wiz";
	Зик.КонвертацияОбработка		= "V77Exp";
	Зик.КонвертацияПравила			= "PrB";
	Зик.Записать();
	
КонецПроцедуры

// Процедура проверяет, установлено ли 1С:Предприятие 7.7 на компьютере
// Если установлено, процедура запускает обработку переноса данных
//
Процедура ВыполнитьПереносДанных()
	
	#Если Клиент Тогда
	ОбработкаПереноса = Обработки.ПереносДанныхИзИнформационныхБаз1СПредприятия77.Создать();
	
	СписокИБ = ОбработкаПереноса.ПолучитьСписокИБ77();
	
	Если ТипЗнч(СписокИБ) = Тип("Строка") Тогда
		Сообщить(СписокИБ);
		
	Иначе
		Если СписокИБ.Количество() > 0 Тогда
			Форма = ОбработкаПереноса.ПолучитьФорму();
			Форма.Открыть();
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры


// Функция выполняет начальное заполнение информационной базы.
//
// Параметры:
//  ДокументОписаниеОбновлений - табличный документ, в который выводится описание обновлений.
//  МакетОписаниеОбновлений    - макет "ОписаниеОбновлений" с заполненными параметрами.
//
// Возвращаемое значение:
//  Функция возвращает номер первой коммерческой версии конфигурации.
//
Функция ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт  //зачистить//

	КодЯзыкаИБ = Локализация.КодЯзыкаИнформационнойБазы();
	
	// Обязательное начальное заполнение информационной базы.
	
	#Если Клиент Тогда
		СтартовыйПомощник = Обработки.СтартовыйПомощник.ПолучитьФорму(); 
		СтартовыйПомощник.ПервыйЗапуск = Истина;
		СтартовыйПомощник.ЗаголовокКомментарийОбработкиДанных = "Выполняется начальное заполнение информационной базы";
		СтартовыйПомощник.КомментарийОбработкиДанных = "Начальное заполнение объектов...";
		СтартовыйПомощник.Открыть();
	#КонецЕсли

	// Автоматический поиск и заполнение необходимых объектов
	ОбработкаНЗ =Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	ОбработкаНЗ.ЗаполнитьВсеОбъекты();
		
   	#Если Клиент Тогда
		СтартовыйПомощник.ЗаголовокКомментарийОбработкиДанных = "Выполняется начальное заполнение информационной базы";
		СтартовыйПомощник.КомментарийОбработкиДанных = "Дополнительные настройки ...";
	#КонецЕсли
	
	УстановитьКонстанты();
	
    ЗаполнитьСписокРегламентированныхОтчетов(); 
	
	//Заполнить реквизиты предопределенных смен
	ЗаполнитьПредопределенныеСмены();
	
	ЗаполнитьСтажВДняхСтажВЧасах();
	
	ЗаполнитьНачисленияДляПредварительногоРасчета();
	
	ЗаполнитьВариантыАлгоритмов();
	
	// Заполнить предопределенные элементы для перехода с 1С:Предприятие 7.7
	ЗаполнитьПредопределенныеЭлементы77();
	
	УстановитьПараметрыСчетовБУ();
	
	СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеБольничныхЗаСчетПредприятия.ПолучитьОбъект();
	СтатьяНД = Справочники.СтатьиНалоговыхДеклараций.НПНК_ИВ_Другие_;
	СтатьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоРеквизиту("СтатьяДекларацииПоНалогуНаПрибыль",СтатьяНД);
	Если СтатьяЗатрат.Пустая() Тогда
		НоваяСтатьяЗатрат = Справочники.СтатьиЗатрат.СоздатьЭлемент();
		НоваяСтатьяЗатрат.Наименование = НСтр("ru='Другие расходы хозяйственной деятельности';uk='Інші витрати господарської діяльності'",КодЯзыкаИБ);
		НоваяСтатьяЗатрат.ВидЗатрат = Перечисления.ВидыЗатрат.Прочие;
		НоваяСтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы;
		НоваяСтатьяЗатрат.Счет8Класса = Планысчетов.Хозрасчетный.ДругиеОперационныеЗатраты;
		НоваяСтатьяЗатрат.СтатьяДекларацииПоНалогуНаПрибыль = СтатьяНД;
		НоваяСтатьяЗатрат.Записать();
		СтатьяЗатрат = НоваяСтатьяЗатрат.Ссылка;
	КонецЕсли;
	СпособОтражения.СубконтоДт1 = СтатьяЗатрат;
	СпособОтражения.Записать();


	#Если Клиент Тогда
		СтартовыйПомощник.ЗаголовокКомментарийОбработкиДанных = "Начальное заполнение информационной базы выполнено" + 
		Символы.ПС +"Вы можете продолжить работу со стартовым помощником";
		СтартовыйПомощник.КомментарийОбработкиДанных = "";
	#КонецЕсли
	
КонецФункции // ЗаполнитьПустуюИБ()

// Процедура выводит описания изменений в указанном релизе
//
// Параметры
//  НомерРелиза  – Строка - номер релиза, для которого выводится описание
//
Процедура ВывестиОписаниеИзменений(НомерРелиза, ДокументОписаниеОбновлений, МакетОписаниеОбновлений)
	
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Шапка" + НомерРелиза));
	ДокументОписаниеОбновлений.НачатьГруппуСтрок("Версия" + НомерРелиза);
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + НомерРелиза));
	ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
	
КонецПроцедуры // ВывестиОписаниеИзменений()

// РЕГЛАМЕНТИРОВАННАЯ ОТЧЕТНОСТЬ

// Выполняет первоначальное заполнение справочника РегламентированныеОтчеты
// списком регламентированных отчетов. 
//  Процедура должна вызываться при первоначальном заполнении пустой 
// информационной базы. Предполагается, что перед запуском процедуры справочник
// РегламентированныеОтчеты - пустой.
//
Процедура ЗаполнитьСписокРегламентированныхОтчетов(ПервоеЗаполнение = Истина, ИзменятьПризнакИспользованияВнешнегоОтчета = Истина)

	Перем ДеревоОтчетов;
	Перем ОбработкаОбновлениеОтчетов;

	Если ИзменятьПризнакИспользованияВнешнегоОтчета И НЕ ПервоеЗаполнение Тогда
	
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
							  |	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета
		                      |ИЗ
		                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		                      |ГДЕ
		                      |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать = &ПризнакИспользованияВнешнегоОтчета");
		Запрос.УстановитьПараметр("ПризнакИспользованияВнешнегоОтчета", Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Метаданные.Документы.Найти(Выборка.ИсточникОтчета) <> Неопределено ИЛИ	Метаданные.Отчеты.Найти(Выборка.ИсточникОтчета) <> Неопределено Тогда
				ОбъектРеглОтчет = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектРеглОтчет.ВнешнийОтчетИспользовать = Ложь;
				ОбъектРеглОтчет.Записать();
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	// Заполнением списка отчетов выполняется путем вызова экспортных процедур
	// основной формы обработки ОбновлениеРегламентированнойОтчетности.
	ОбработкаОбновлениеОтчетов = Обработки.ОбновлениеРегламентированнойОтчетности.Создать();
	
	// Получаем список регламентированных отчетов в виде дерева.
	ДеревоОтчетов = ОбработкаОбновлениеОтчетов.ПолучитьСписокОтчетов();

	Если ДеревоОтчетов.Строки.Количество() = 0 Тогда
		// нет обновлений
		Возврат;
	КонецЕсли;
	
	// Заполняем списко отчетов.
	ОбработкаОбновлениеОтчетов.ЗаполнитьСписокОтчетов(ДеревоОтчетов, ПервоеЗаполнение);

КонецПроцедуры // ЗаполнитьСписокРегламентированныхОтчетов()



//ПРОЧЕЕ

// Процедура заполняет по умолчанию необходимые данные
// для отправки сообщений в службу технической поддержки.
//
Процедура ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки()

	Перем СтруктураЗначения;

	Если ТипЗнч(Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить()) <> Тип("Структура") Тогда

		ОбщегоНазначения.ЗаполнитьСтруктуруДанныхНастройкиОбращенияВОтделТехподдержкиПоУмолчанию(СтруктураЗначения);

		СтрокаПараметровОтправки = СтруктураЗначения.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");

		Если СтрокаПараметровОтправки <> Неопределено Тогда

			СтрокаПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1] = "hline@1c.ua";

			Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Установить(Новый ХранилищеЗначения(СтруктураЗначения, Новый СжатиеДанных));

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры
