// флажки сформированности данных по разделам
Перем мДанныеРасчетыЗарплатаСформированы;
Перем мДанныеПлановыеДанныеСформированы;
Перем мДанныеНалоговаяКарточкаСформированы;
Перем мДанныеКадровыеДанныеСформированы;
Перем мДанныеОсновноеСформированы;
Перем мДанныеНалогиСформированы;
Перем мДанныеКарточкаПоЕСНСформированы;
Перем мДанныеКарточкаПоОПССформированы;

// нужны для заполнения документа начисления зарплаты
Перем МестаРаботыФизлица;
Перем ДанныеПоНачислениям;
Перем ДанныеПоПлановымРасчетам;
Перем МестаРаботыИСостоянияФизлица;
Перем КадровыеДанные;
Перем КадровыеДанныеПриемНаРаботу;

// нужны для заполнения данных о налогах
Перем ДанныеПоНалогам;

// отчеты раздела РасчетыЗарплата
Перем РегламентированнаяФорма1НДФЛОтчет;
Перем АнализНачисленийРаботникамОрганизацийОтчет;
Перем РасчетныеЛисткиОрганизацийОтчет;
Перем УнифицированнаяФормаТ13Отчет;

// отчеты раздела КадровыеДанные
Перем Т2ОрганизацийОтчет;

// отчеты раздела Налоги
Перем РегламентированнаяФормаКарточкаПоЕСНОтчет;
Перем РегламентированнаяФормаКарточкаПоОПСОтчет;

// для управления группировками отчетов раздела РасчетыЗарплата
Перем ОбластьАнализНачисленийРаботникамОрганизаций;
Перем ОбластьРегламентированнаяФорма1НДФЛ;
Перем ОбластьРасчетныеЛисткиОрганизаций;
Перем ОбластьУнифицированнаяФормаТ13;


// для управления группировками отчетов раздела КадровыеДанные
Перем ОбластьТ2Организаций;

// для управления группировками отчетов раздела Налоги
Перем ОбластьРегламентированнаяФормаКарточкаПоЕСН;
Перем ОбластьРегламентированнаяФормаКарточкаПоОПС;

// отчеты раздела ПлановыеДанные
Перем УнифицированнаяФормаТ3Отчет;

// для управления группировками отчетов раздела ПлановыеДанные
Перем ОбластьУнифицированнаяФормаТ3;

Перем ПрежнийМесяц; // для контроля смены месяца

Перем мФизлицоОбъект;
Перем мФизлицоФорма;

// Потребуется для вывода отчетов в отдельных окнах
Перем ДанныеТабличныхДокументов1НДФЛ;
Перем ДанныеТабличныхДокументовАнализНачислений;
Перем ДанныеТабличныхДокументовРасчетныеЛистки;
Перем ДанныеТабличныхДокументовТ13;
Перем ДанныеТабличныхДокументовТ3;
Перем ДанныеТабличныхДокументовТ2;
Перем ДанныеТабличныхДокументовЕСН;
Перем ДанныеТабличныхДокументовОПС;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	УстановкиПриОткрытии();
КонецПроцедуры

Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	УстановкиПриОткрытии();
КонецПроцедуры

Процедура ПриЗакрытии()
	// запомним последнее использованное физлицо
	СохранитьЗначение("УправлениеДаннымиРаботника.Физлицо", Физлицо);
	СохранитьЗначение("УправлениеДаннымиРаботника.ИмяРаздела", ИмяРаздела);
	СохранитьЗначение("УправлениеДаннымиРаботника.Месяц", Месяц);
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	ОбластьАнализНачисленийРаботникамОрганизаций = НеОпределено;
	ОбластьРегламентированнаяФорма1НДФЛ = НеОпределено;
	ОбластьРасчетныеЛисткиОрганизаций = НеОпределено;
	ОбластьУнифицированнаяФормаТ13 = НеОпределено;
	ОбластьУнифицированнаяФормаТ3 = НеОпределено;
	ОбластьТ2Организаций = НеОпределено;
	ОбластьРегламентированнаяФормаКарточкаПоЕСН = НеОпределено;
	ОбластьРегламентированнаяФормаКарточкаПоОПС = НеОпределено;
КонецПроцедуры

Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Физлицо = Объект.Ссылка;
		мДанныеРасчетыЗарплатаСформированы = Ложь;
		мДанныеПлановыеДанныеСформированы = Ложь;
		мДанныеНалоговаяКарточкаСформированы = Ложь;
		мДанныеКадровыеДанныеСформированы = Ложь;
		мДанныеОсновноеСформированы = Ложь;
		мДанныеНалогиСформированы = Ложь;
		мДанныеКарточкаПоЕСНСформированы = Ложь;
		мДанныеКарточкаПоОПССформированы = Ложь;
		ОбновитьДанные();
		
		// записали документ начисления    
	ИначеЕсли 
		ТипЗнч(Объект) = Тип("ДокументОбъект.ПремииРаботниковОрганизаций") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.ОплатаПраздничныхИВыходныхДнейОрганизаций") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.ОплатаСверхурочныхЧасов") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.НачислениеДивидендовОрганизаций") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.РегистрацияРазовыхНачисленийРаботниковОрганизаций") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.РегистрацияРазовыхУдержанийРаботниковОрганизаций") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.СдельныйНаряд") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.РегистрацияПростоевВОрганизациях") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.РасчетПриУвольненииРаботникаОрганизаций") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.НачислениеОтпускаРаботникамОрганизаций") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.НачислениеПоБольничномуЛисту") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.НачислениеЗарплатыРаботникамОрганизаций") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.НевыходыВОрганизациях") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.ОплатаПоСреднемуЗаработку") 
		Тогда
		мДанныеРасчетыЗарплатаСформированы = Ложь;
		ОбновитьДанные();
		
		// записали документ плановых данных
	ИначеЕсли 
		ТипЗнч(Объект) = Тип("ДокументОбъект.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.ИсполнительныйЛист") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.КадровоеПеремещениеОрганизаций") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.ОтпускПоУходуЗаРебенком") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.ПриемНаРаботуВОрганизацию") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.УвольнениеИзОрганизаций") 
		Тогда
		мДанныеПлановыеДанныеСформированы = Ложь;
		ОбновитьДанные();
		
		// записали регламентный документ 
	ИначеЕсли 
		ТипЗнч(Объект) = Тип("ДокументОбъект.ОтражениеЗарплатыВРеглУчете") 
		или ТипЗнч(Объект) = Тип("ДокументОбъект.ВводСведенийОбУчетеПлановыхНачисленийРаботниковОрганизаций") 
		Тогда
		мДанныеНалогиСформированы = Ложь;
		ОбновитьДанные();
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура УстановкиПриОткрытии()
	
	// если не установлено физлицо
	Если Физлицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
		// ...выберем последнего использованного
		Физлицо = ВосстановитьЗначение("УправлениеДаннымиРаботника.Физлицо");
		// ...или получим первого
		Если Физлицо = Справочники.ФизическиеЛица.ПустаяСсылка() ИЛИ НЕ ЗначениеЗаполнено(Физлицо.Наименование) Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ФизическиеЛица.Ссылка Как Физлицо
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	(НЕ ФизическиеЛица.ЭтоГруппа)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФизическиеЛица.Наименование");
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Физлицо = Выборка.Физлицо;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// если не задано имя раздела
	Если ПустаяСтрока(ИмяРаздела) Тогда
		// ...восстановим последний использованный раздел данных
		ИмяРаздела = ВосстановитьЗначение("УправлениеДаннымиРаботника.ИмяРаздела");
		//... или назначим по умолчанию Основное
		Если ПустаяСтрока(ИмяРаздела) Тогда
			ИмяРаздела = "Основное";
		КонецЕсли;
	КонецЕсли;
	
	// если не задан месяц
	Если Месяц = '00010101' Тогда
		// ...восстановим последний использованный месяц
		Месяц = ВосстановитьЗначение("УправлениеДаннымиРаботника.Месяц");
		//... или назначим по умолчанию Основное
		Если Месяц = '00010101' Тогда
			Месяц = НачалоМесяца(РабочаяДата);
		КонецЕсли;
	КонецЕсли;
	ПриИзмененииФизлица();
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(Месяц);
	
	// используем отбор по физлицам
	ПервичныеДокументыОрганизаций.Отбор.ДокументыПоРаботникуОрганизации.Использование = Истина;
	ПервичныеДокументыОрганизаций.Отбор.ДокументыПоРаботникуОрганизации.Значение = Физлицо;
	УчетКадровОрганизаций.Отбор.ДокументыПоРаботникуОрганизации.Использование = Истина;
	УчетКадровОрганизаций.Отбор.ДокументыПоРаботникуОрганизации.Значение = Физлицо;
	ПлановыеДанныеДляРасчета.Отбор.ДокументыПоРаботникуОрганизации.Использование = Истина;
	ПлановыеДанныеДляРасчета.Отбор.ДокументыПоРаботникуОрганизации.Значение = Физлицо;
	
	// ... и по месяцу
	ПервичныеДокументыОрганизаций.Отбор.Месяц.Использование = Истина;
	ПервичныеДокументыОрганизаций.Отбор.Месяц.Значение = Месяц;
	
	// Управление доступностью для пользователей с разными ролями
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		
		Если РольДоступна("КадровикРегламентированныхДанных") Тогда
			
			Если НЕ РольДоступна("РасчетчикРегламентированнойЗарплаты") Тогда
				
				// Пользователь может пользоваться только кадровыми данными
				ЭлементыФормы.КоманднаяПанельОсновная.Кнопки.Налоги.Доступность				= Ложь;
				ЭлементыФормы.КоманднаяПанельОсновная.Кнопки.ПлановыеДанные.Доступность		= Ложь;
				ЭлементыФормы.КоманднаяПанельОсновная.Кнопки.РасчетыЗарплата.Доступность	= Ложь;
				Если ИмяРаздела = "Налоги" ИЛИ ИмяРаздела = "ПлановыеДанные" ИЛИ ИмяРаздела = "РасчетыЗарплата" Тогда
					ИмяРаздела = "Основное"
				КонецЕсли; 
				
			КонецЕсли; 
			
		ИначеЕсли РольДоступна("РасчетчикРегламентированнойЗарплаты") Тогда
			
			// Пользователь может пользоваться только расчетными данными
			ЭлементыФормы.КоманднаяПанельОсновная.Кнопки.Основное.Доступность		= Ложь;
			ЭлементыФормы.КоманднаяПанельОсновная.Кнопки.КадровыеДанные.Доступность	= Ложь;
			Если ИмяРаздела = "Основное" ИЛИ ИмяРаздела = "КадровыеДанные" Тогда
				ИмяРаздела = "ПлановыеДанные"
			КонецЕсли; 
			
		Иначе  // не может быть
			
		КонецЕсли; 
		
	КонецЕсли;
	
	ОбновитьДанные();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура СформироватьДанные(ИмяРаздела)
	
	Если ИмяРаздела = "Основное" Тогда
		СформироватьДанныеОсновное();
	ИначеЕсли ИмяРаздела = "КадровыеДанные" Тогда
		СформироватьДанныеКадровыеДанные();
	ИначеЕсли ИмяРаздела = "ПлановыеДанные" Тогда
		СформироватьДанныеПлановыеДанные();
	ИначеЕсли ИмяРаздела = "РасчетыЗарплата" Тогда
		СформироватьДанныеРасчетыЗарплата();
	ИначеЕсли ИмяРаздела = "Налоги" Тогда
		СформироватьДанныеНалоги();
	КонецЕсли;
	
КонецПроцедуры

// установка переменных модуля и значений отбора при смене месяца
// после этого вызова должна быть вызвана процедура ОбновитьДанные()
// для того, чтобы установленные значения были отработаны
//
Процедура ПриИзмененииМесяца()
	
	мДанныеРасчетыЗарплатаСформированы = Ложь;
	мДанныеПлановыеДанныеСформированы = Ложь;
	мДанныеКадровыеДанныеСформированы = Ложь;
	мДанныеНалогиСформированы = Ложь;
	мДанныеОсновноеСформированы = Ложь;
	Если Год(Месяц) <> Год(ПрежнийМесяц) Тогда
		мДанныеНалоговаяКарточкаСформированы = Ложь;
		мДанныеКарточкаПоЕСНСформированы = Ложь;
		мДанныеКарточкаПоОПССформированы = Ложь;
	КонецЕсли;
	
	// установим отбор
	ПервичныеДокументыОрганизаций.Отбор.Месяц.Значение = Месяц;
	
КонецПроцедуры

Процедура ОбновитьДанные()
	
	Заголовок = Физлицо;
	ПрежнийМесяц = Месяц;
	ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы[ИмяРаздела];
	Для Каждого Кнопка Из ЭлементыФормы.КоманднаяПанельОсновная.Кнопки Цикл
		Если Кнопка.Имя = ИмяРаздела Тогда
			Кнопка.Пометка = Истина;
			Кнопка.КнопкаПоУмолчанию = Истина;
		Иначе
			Кнопка.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	ТекущаяОбласть = ЭлементыФормы[ИмяРаздела].ТекущаяОбласть;
	СформироватьДанные(ИмяРаздела);
	ЭлементыФормы[ИмяРаздела].ТекущаяОбласть = ТекущаяОбласть;
	
КонецПроцедуры

// процедура предназначена для установки значения реквизитов обработки с проверкой
// текущего значения и, если нужно, изменением переменных модуля формы и 
// обновлением данных
// Параметры:
//  ПарамФизлицо - ссылка на физлицо
//  ПарамИмяРаздела - строка "Основное", "КадровыеДанные", "РасчетыЗарплата" или "Налоги"
//  ПарамМесяц - дата
//
Процедура УстановитьРеквизиты(ПарамФизлицо, ПарамИмяРаздела, ПарамМесяц) Экспорт 
	Если Физлицо <> ПарамФизлицо Тогда
		Физлицо = ПарамФизлицо;
		ПриИзмененииФизлица();
	КонецЕсли;
	ИмяРаздела = ПарамИмяРаздела;
	Если Месяц <> ПарамМесяц Тогда
		Месяц = ПарамМесяц;
		ПриИзмененииМесяца();
	КонецЕсли;
	ОбновитьДанные();    
КонецПроцедуры

// процедура выполняется при изменении физлица
// выполнеятся установка переменных модуля и значения отборов
//
Процедура ПриИзмененииФизлица()
	
	ПервичныеДокументыОрганизаций.Отбор.ДокументыПоРаботникуОрганизации.Значение = Физлицо;
	УчетКадровОрганизаций.Отбор.ДокументыПоРаботникуОрганизации.Значение = Физлицо;
	ПлановыеДанныеДляРасчета.Отбор.ДокументыПоРаботникуОрганизации.Значение = Физлицо;
	
	мДанныеРасчетыЗарплатаСформированы = Ложь;
	мДанныеПлановыеДанныеСформированы = Ложь;
	мДанныеНалоговаяКарточкаСформированы = Ложь;
	мДанныеКадровыеДанныеСформированы = Ложь;
	мДанныеОсновноеСформированы = Ложь;
	мДанныеНалогиСформированы = Ложь;    
	мДанныеКарточкаПоЕСНСформированы = Ложь;
	мДанныеКарточкаПоОПССформированы = Ложь;
	Если Не Физлицо.Пустая() Тогда
		мФизлицоОбъект = Физлицо.ПолучитьОбъект();
		мФизлицоФорма = мФизлицоОбъект.ПолучитьФорму(, ЭтаФорма);
	Иначе
		мФизлицоОбъект = НеОпределено;
		мФизлицоФорма = НеОпределено;
	КонецЕсли;
	
КонецПроцедуры

// получает сведения о местах работы
// заполняет массив МестаРаботыФизлица
Процедура ПолучитьСведенияОМестахРаботы()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Работники.Организация КАК Организация,
	|	Работники.Период КАК Период,
	|	Работники.Сотрудник,
	|	Работники.ПодразделениеОрганизации КАК Подразделение,
	|	Работники.Должность КАК Должность,
	|	Работники.ГрафикРаботы КАК ГрафикРаботы,
	|	Работники.Организация.Наименование КАК ОрганизацияНаименование,
	|	Работники.ПодразделениеОрганизации.Наименование КАК ПодразделениеНаименование,
	|	Работники.Должность.Наименование КАК ДолжностьНаименование,
	|	Работники.ГрафикРаботы.Наименование КАК ГрафикРаботыНаименование,
	|	Работники.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	Работники.Сотрудник.Код КАК ТабельныйНомер
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Месяц, Сотрудник.Физлицо = &Физлицо) КАК Работники
	|ГДЕ
	|	Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Организация,
	|	Работники.Период,
	|	Работники.Сотрудник,
	|	Работники.ПодразделениеОрганизации,
	|	Работники.Должность,
	|	Работники.ГрафикРаботы,
	|	Работники.Организация.Наименование,
	|	Работники.ПодразделениеОрганизации.Наименование,
	|	Работники.Должность.Наименование,
	|	Работники.ГрафикРаботы.Наименование,
	|	Работники.ОбособленноеПодразделение,
	|	Работники.Сотрудник.Код
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК Работники
	|ГДЕ
	|	Работники.Сотрудник.Физлицо = &Физлицо
	|	И Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И Работники.Период > &Начало
	|	И Работники.Период < &Конец
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Период УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("Месяц", Месяц);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Запрос.УстановитьПараметр("Уволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("Начало", НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("Конец", КонецМесяца(Месяц));
	
	Выборка = Запрос.Выполнить().Выбрать();
	МестаРаботыФизлица.Очистить();
	
	Пока Выборка.Следующий() Цикл
		// заполняем рабочие места
		ПредставлениеРабочегоМеста = Выборка.ОрганизацияНаименование + "; " + Выборка.ПодразделениеНаименование;
		МестаРаботыФизлица.Добавить(
		Новый Структура(
		"Организация,
		|ОбособленноеПодразделение,
		|Период,
		|Сотрудник,
		|Подразделение,
		|Должность,
		|ТабельныйНомер,
		|ГрафикРаботы,
		|ОрганизацияНаименование,
		|ПодразделениеНаименование,
		|ДолжностьНаименование,
		|ГрафикРаботыНаименование,
		|Представление", 
		Выборка.Организация, 
		Выборка.ОбособленноеПодразделение, 
		Выборка.Период,
		Выборка.Сотрудник,
		Выборка.Подразделение,
		Выборка.Должность,
		Выборка.ТабельныйНомер,
		Выборка.ГрафикРаботы,
		Выборка.ОрганизацияНаименование, 
		Выборка.ПодразделениеНаименование,
		Выборка.ДолжностьНаименование,
		Выборка.ГрафикРаботыНаименование,
		ПредставлениеРабочегоМеста));
	КонецЦикла;
КонецПроцедуры

// получает сведения о местах работы и состояния
// заполняет массив МестаРаботыИСостоянияФизлица
Процедура ПолучитьМестаРаботыИСостоянияРаботника()
	
	Запрос = Новый запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""РаботникиОрганизаций"" КАК ВидРегистра,
	|	РаботникиОрганизацийСрезПоследних.Организация КАК Организация,
	|	РаботникиОрганизацийСрезПоследних.Организация.Наименование,
	|	РаботникиОрганизацийСрезПоследних.Период КАК Период,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
	|	РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
	|	РаботникиОрганизацийСрезПоследних.Должность.Наименование КАК ДолжностьНаименование,
	|	РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	ВЫБОР
	|		КОГДА  РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ""Уволен""
	|		ИНАЧЕ ""Перемещен""
	|	КОНЕЦ КАК Состояние,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Код КАК ТабельныйНомер
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Месяц, Сотрудник.Физлицо = &Физлицо) КАК РаботникиОрганизацийСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""СостояниеРаботников"",
	|	NULL,
	|	NULL,
	|	СостояниеРаботниковОрганизаций.Период,
	|	СостояниеРаботниковОрганизаций.Сотрудник.Физлицо,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СостояниеРаботниковОрганизаций.Состояние,
	|	СостояниеРаботниковОрганизаций.Сотрудник,
	|	NULL
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|ГДЕ
	|	СостояниеРаботниковОрганизаций.Сотрудник.Физлицо = &Физлицо
	|	И СостояниеРаботниковОрганизаций.Период МЕЖДУ &Начало И &Конец
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Период УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Месяц",		КонецМесяца(Месяц));
	Запрос.УстановитьПараметр("Физлицо",	Физлицо);
	Запрос.УстановитьПараметр("Начало",		НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("Конец",		КонецМесяца(Месяц));
	Запрос.УстановитьПараметр("Прием",		Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	
	Выборка = Запрос.Выполнить().Выбрать();
	МестаРаботыИСостоянияФизлица.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		МестаРаботыИСостоянияФизлица.Добавить(
		Новый Структура(
		"Организация,
		|ВидРегистра,
		|Период,
		|Подразделение,
		|Должность,
		|ТабельныйНомер,
		|Состояние,
		|Сотрудник,
		|ОрганизацияНаименование,
		|ПодразделениеНаименование,
		|ДолжностьНаименование",
		Выборка.Организация, 
		Выборка.ВидРегистра, 
		Выборка.Период,
		Выборка.ПодразделениеОрганизации,
		Выборка.Должность,
		Выборка.ТабельныйНомер,
		Выборка.Состояние,
		Выборка.Сотрудник,
		Выборка.ОрганизацияНаименование, 
		Выборка.ПодразделениеОрганизацииНаименование,
		Выборка.ДолжностьНаименование));
		
	КонецЦикла;
	
КонецПроцедуры

// установить физлицо в качетсве текущего
Процедура УстановитьФизлицо(ВыбранноеФизлицо)
	Физлицо = ВыбранноеФизлицо;
	ПриИзмененииФизлица();
	ОбновитьДанные();
КонецПроцедуры

// вывод в отдельных окнах отчетов
Процедура ТабличныйДокументОтдельно(ТабличныйДокумент, Заголовок)
	ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	ТабличныйДокумент.Показать(Заголовок);
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
//  КОМАНДЫ ФОРМЫ

Процедура КоманднаяПанельОсновнаяДействие(Кнопка)
	ИмяРаздела = Кнопка.Имя;
	ОбновитьДанные();
КонецПроцедуры

Процедура ОбновитьОтчет(Кнопка)
	мДанныеРасчетыЗарплатаСформированы = Ложь;
	мДанныеПлановыеДанныеСформированы = Ложь;
	мДанныеНалоговаяКарточкаСформированы = Ложь;
	мДанныеКадровыеДанныеСформированы = Ложь;
	мДанныеОсновноеСформированы = Ложь;
	мДанныеНалогиСформированы = Ложь;
	мДанныеКарточкаПоЕСНСформированы = Ложь;
	мДанныеКарточкаПоОПССформированы = Ложь;
	ОбновитьДанные();
	
КонецПроцедуры

Процедура ФизлицоПриИзменении(Элемент)
	ПриИзмененииФизлица();
	ОбновитьДанные();
КонецПроцедуры

Процедура КоманднаяПанельФизлицаДействиеВыбрать(Кнопка)
	
	ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуВыбора();
	ФормаВыбора.НачальноеЗначениеВыбора = Физлицо;
	ФормаВыбора.ВладелецФормы = ЭлементыФормы.Физлицо;
	ФормаВыбора.ОткрытьМодально();
	
КонецПроцедуры

Процедура КоманднаяПанельФизлицаДействиеНовый(Кнопка)
	Форма = Справочники.ФизическиеЛица.ПолучитьФормуНовогоЭлемента(, ЭтаФорма);
	Форма.Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельФизлицаДействиеОткрыть(Кнопка)
	Если мФизлицоФорма <> НеОпределено Тогда 
		мФизлицоФорма.Открыть();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ОСНОВНОЕ

// формирует раздел
Процедура СформироватьДанныеОсновное()
	
	Если мДанныеОсновноеСформированы Тогда
		Возврат;
	КонецЕсли;
	мДанныеОсновноеСформированы = Истина;
	
	// обновить динамические списки
	СписокФизлиц.Обновить();
	
	// для заполнения табличного документа с отчетами
	ВыходнойДокумент = ЭлементыФормы.Основное;
	
	ВыходнойДокумент.Очистить();
	
	Если мФизлицоОбъект <> НеОпределено Тогда
		мФизлицоОбъект.Печать(ВыходнойДокумент, КонецМесяца(Месяц));
	КонецЕсли;
	
	ВыходнойДокумент.ТолькоПросмотр = Истина;
	ВыходнойДокумент.Защита = Истина;
	
КонецПроцедуры

Процедура НадписьОсновнаяФормаНажатие(Элемент)
	Если мФизлицоФорма <> НеОпределено Тогда
		мФизлицоФорма.Открыть();
	КонецЕсли;    
КонецПроцедуры

Процедура НадписьТрудоваяДеятельностьНажатие(Элемент)
	Если мФизлицоОбъект <> НеОпределено Тогда
		Форма = мФизлицоОбъект.ПолучитьФорму("ФормаВводаДанныхТруд", ЭтаФорма);
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьВоинскийУчетНажатие(Элемент)
	Если мФизлицоОбъект <> НеОпределено и мФизлицоФорма <> НеОпределено Тогда
		Форма = мФизлицоОбъект.ПолучитьФорму("ФормаЗаписиВоинскийУчет", ЭтаФорма);
		Форма.НаборЗаписей = мФизлицоФорма.мНаборЗаписейВоинскийУчет;
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьНДФЛНажатие(Элемент)
	
	ПолучитьМестаРаботыИСостоянияРаботника();
	СписокСотрудников = Новый СписокЗначений;
	Для Каждого Сотр из	МестаРаботыИСостоянияФизлица Цикл
		СписокСотрудников.Добавить(Сотр.Сотрудник);
	КонецЦикла;	
	Если МестаРаботыИСостоянияФизлица.Количество() <> 0 Тогда
		Форма = РегистрыСведений.ЛьготыРаботниковОрганизаций.ПолучитьФормуСписка();
		Форма.РегистрСведенийСписок.Отбор.Сотрудник.Видсравнения = ВидСравнения.ВСписке;
		Форма.РегистрСведенийСписок.Отбор.Сотрудник.Значение = СписокСотрудников;
		Форма.РегистрСведенийСписок.Отбор.Сотрудник.Использование = Истина;
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура СписокФизлицВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	УстановитьФизлицо(ВыбраннаяСтрока);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура КоманднаяПанельСписокФизлицВыбратьФизлицо(Кнопка)
	Если ЭлементыФормы.СписокФизлиц.ТекущаяСтрока  <> НеОпределено Тогда
		УстановитьФизлицо(ЭлементыФормы.СписокФизлиц.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ПЛАНОВЫЕ ДАННЫЕ

// формирует раздел
Процедура СформироватьДанныеПлановыеДанные()
	
	Если мДанныеПлановыеДанныеСформированы Тогда
		Возврат;
	КонецЕсли;
	мДанныеПлановыеДанныеСформированы = Истина;
	
	ПолучитьСведенияОПлановыхНачислениях();
	
	// настройка надписей раздела Действия и документы
	ЭлементыФормы.НадписьПлановыеНачисления.Заголовок = НСтр("ru='Изменить плановые начисления';uk='Змінити планові нарахування'");
	ЭлементыФормы.НадписьПлановыеУдержания.Заголовок = НСтр("ru='Изменить плановые удержания';uk='Змінити планові утримання'");
	ЭлементыФормы.НадписьИсполнительныйЛист.Заголовок = НСтр("ru='Ввести исполнительный лист';uk='Ввести виконавчий лист'");
	Для Каждого ИнфоПоОрганизации Из ДанныеПоПлановымРасчетам Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.ИсполнительныйЛист Цикл
			ЭлементыФормы.НадписьИсполнительныйЛист.Заголовок = НСтр("ru='Исполнительный лист';uk='Виконавчий лист'");
			Прервать;
		КонецЦикла;
	КонецЦикла;
	
	// для заполнения табличного документа с отчетами
	ВыходнойДокумент = ЭлементыФормы.ПлановыеДанные;
	
	// восстановление раскрытых группировок отчета
	ГруппировкаУнифицированнаяФормаТ3 = Ложь;
	Если ОбластьУнифицированнаяФормаТ3 <> НеОпределено и ОбластьУнифицированнаяФормаТ3.Видимость Тогда
		ГруппировкаУнифицированнаяФормаТ3 = Истина;
	КонецЕсли;
	
	ВыходнойДокумент.Очистить();
	
	Макет = ПолучитьМакет("ПлановыеДанные");
	Макет.КодЯзыкаМакета = Локализация.КодЯзыкаИнтерфейса();
	
	ПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	ОбластьФизлицо = Макет.ПолучитьОбласть("Физлицо");
	ОбластьФизлицо.Параметры.Физлицо = Физлицо;
	ОбластьФизлицо.Параметры.Месяц = Формат(Месяц, "ДФ='ММММ гггг ''г.'''");
	ВыходнойДокумент.Вывести(ОбластьФизлицо);
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамНачало",		Месяц);
	Запрос.УстановитьПараметр("парамКонец",			КонецМесяца(Месяц));
	
	Подразделения = Новый Массив();
	Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
		Подразделения.Добавить(МестоРаботы.Подразделение);
	КонецЦикла;
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос.УстановитьПараметр("Физлицо" , Физлицо);
	Запрос.УстановитьПараметр("Подразделения" , Подразделения);
	Запрос.УстановитьПараметр("парамДатаВалютногоУчета" , НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("парамПустаяВалюта" , Справочники.Валюты.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамВалютаРегламентУчета" , ВалютаРеглУчета);
	Запрос.УстановитьПараметр("парамМассивСпособовРасчетовБезВалюты" , ПроведениеРасчетов.ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты());
	Запрос.УстановитьПараметр("Ежемесячно", Перечисления.ХарактерВыплатыПоДоговору.Ежемесячно);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Работники.Организация КАК Организация,
	|	Работники.Организация.Наименование КАК ОрганизацияНаименование,
	|	Работники.Физлицо КАК Физлицо,
	|	ЛОЖЬ КАК ПоШтатномуРасписанию,
	|	НачисленияРаботниковОрганизации.Период КАК Период,
	|	ЕСТЬNULL(НачисленияРаботниковОрганизации.ОсновноеНачисление, ЛОЖЬ) КАК ОсновноеНачисление,
	|	НачисленияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
	|	НачисленияРаботниковОрганизации.ВидРасчета.Код КАК ВидРасчетаКод,
	|	НачисленияРаботниковОрганизации.ВидРасчета.Наименование КАК ВидРасчетаНаименование,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ТребуетВводаТарифногоРазряда
	|				ТОГДА ТарифныеСтавки.Размер
	|			ИНАЧЕ НачисленияРаботниковОрганизации.Размер
	|		КОНЕЦ, 0) КАК Размер,
	|	НачисленияРаботниковОрганизации.Валюта КАК Валюта,
	|	НачисленияРаботниковОрганизации.Валюта.Наименование КАК ВалютаНаименование,
	|	ВЫБОР
	|		КОГДА НачисленияРаботниковОрганизации.Валюта = &парамВалютаРегламентУчета
	|				ИЛИ НачисленияРаботниковОрганизации.Валюта = &парамПустаяВалюта
	|			ТОГДА 1
	|		ИНАЧЕ Валюты.Курс / Валюты.Кратность
	|	КОНЕЦ КАК КурсВалюты,
	|	НачисленияРаботниковОрганизации.Актуальность КАК Действует,
	|	Работники.ПодразделениеОрганизации КАК Подразделение,
	|	Работники.ПодразделениеОрганизации.Наименование КАК ПодразделениеНаименование
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаботникиОрганизации.Организация КАК Организация,
	|		РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|		РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|		РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамНачало, Сотрудник.Физлицо = &Физлицо) КАК РаботникиОрганизации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РаботникиОрганизации.Организация,
	|		РаботникиОрганизации.Сотрудник.Физлицо,
	|		РаботникиОрганизации.Сотрудник,
	|		РаботникиОрганизации.ПодразделениеОрганизации
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|	ГДЕ
	|		РаботникиОрганизации.Период > &парамНачало
	|		И РаботникиОрганизации.Период <= &парамКонец
	|		И РаботникиОрганизации.Сотрудник.Физлицо = &Физлицо
	|	
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДоговорникиОрганизаций.Организация,
	|		ДоговорникиОрганизаций.Физлицо,
	|		ДоговорникиОрганизаций.Ссылка,
	|		ДоговорникиОрганизаций.ПодразделениеОрганизации
	|	ИЗ
	|		Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
	|	ГДЕ
	|		ДоговорникиОрганизаций.Физлицо = &Физлицо
	|		И ДоговорникиОрганизаций.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|		И ДоговорникиОрганизаций.Актуальность) КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НачисленияРаботниковОрганизации.Период КАК Период,
	|			ВЫБОР
	|				КОГДА НачисленияРаботниковОрганизации.ВидРасчетаИзмерение.Код ЕСТЬ NULL 
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ОсновноеНачисление,
	|			НачисленияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
	|			НачисленияРаботниковОрганизации.Показатель1 КАК Размер,
	|			НачисленияРаботниковОрганизации.Валюта1 КАК Валюта,
	|			НачисленияРаботниковОрганизации.Актуальность КАК Актуальность,
	|			НачисленияРаботниковОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|			НачисленияРаботниковОрганизации.ТарифныйРазряд1 КАК ТарифныйРазряд,
	|			НачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник
	|		ИЗ
	|			РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&парамНачало, Сотрудник.Физлицо = &Физлицо) КАК НачисленияРаботниковОрганизации
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			НачисленияРаботниковОрганизации.Период,
	|			ВЫБОР
	|				КОГДА НачисленияРаботниковОрганизации.ВидРасчетаИзмерение.Код ЕСТЬ NULL 
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ,
	|			НачисленияРаботниковОрганизации.ВидРасчета,
	|			НачисленияРаботниковОрганизации.Показатель1,
	|			НачисленияРаботниковОрганизации.Валюта1,
	|			НачисленияРаботниковОрганизации.Актуальность,
	|			НачисленияРаботниковОрганизации.Сотрудник.Физлицо,
	|			НачисленияРаботниковОрганизации.ТарифныйРазряд1,
	|			НачисленияРаботниковОрганизации.Сотрудник
	|		ИЗ
	|			РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
	|		ГДЕ
	|			НачисленияРаботниковОрганизации.Период > &парамНачало
	|			И НачисленияРаботниковОрганизации.Период <= &парамКонец
	|			И НачисленияРаботниковОрганизации.Актуальность
	|			И НачисленияРаботниковОрганизации.Сотрудник.Физлицо = &Физлицо
	|		
	| ) КАК НачисленияРаботниковОрганизации
	|		ПО НачисленияРаботниковОрганизации.Сотрудник = Работники.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки
	|		ПО НачисленияРаботниковОрганизации.ТарифныйРазряд = ТарифныеСтавки.ТарифныйРазряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|		ПО (Валюты.Период = &парамДатаВалютногоУчета)
	|			И Валюты.Валюта = НачисленияРаботниковОрганизации.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Организация,
	|	Работники.Организация.Наименование,
	|	Работники.Физлицо,
	|	ИСТИНА,
	|	Работники.Период,
	|	ЛОЖЬ,
	|	ШтатноеРасписание.ВидНадбавки,
	|	ШтатноеРасписание.ВидНадбавки.Код,
	|	ШтатноеРасписание.ВидНадбавки.Наименование,
	|	ШтатноеРасписание.РазмерНадбавки,
	|	ШтатноеРасписание.Валюта,
	|	ШтатноеРасписание.Валюта.Наименование,
	|	ВЫБОР
	|		КОГДА ШтатноеРасписание.Валюта = &парамВалютаРегламентУчета
	|				ИЛИ ШтатноеРасписание.Валюта = &парамПустаяВалюта
	|			ТОГДА 1
	|		ИНАЧЕ Валюты.Курс / Валюты.Кратность
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Работники.Уволен
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	Работники.ПодразделениеОрганизации,
	|	Работники.ПодразделениеОрганизации.Наименование
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаботникиОрганизации.Период КАК Период,
	|		РаботникиОрганизации.Организация КАК Организация,
	|		РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|		РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|		РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		ВЫБОР
	|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК Уволен,
	|		РаботникиОрганизации.Должность КАК Должность
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамНачало, Сотрудник.Физлицо = &Физлицо) КАК РаботникиОрганизации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РаботникиОрганизации.Период,
	|		РаботникиОрганизации.Организация,
	|		РаботникиОрганизации.Сотрудник.Физлицо,
	|		РаботникиОрганизации.Сотрудник,
	|		РаботникиОрганизации.ПодразделениеОрганизации,
	|		ЛОЖЬ,
	|		РаботникиОрганизации.Должность
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|	ГДЕ
	|		РаботникиОрганизации.Период > &парамНачало
	|		И РаботникиОрганизации.Период <= &парамКонец
	|		И РаботникиОрганизации.Сотрудник.Физлицо = &Физлицо
	|	
	|) КАК Работники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Период КАК Период,
	|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.ВидНадбавки КАК ВидНадбавки,
	|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель1 КАК РазмерНадбавки,
	|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта1 КАК Валюта,
	|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Должность КАК Должность,
	|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|		ИЗ
	|			РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(&парамНачало, ПодразделениеОрганизации В (&Подразделения)) КАК НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних
	|		ГДЕ
	|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель1 > 0
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			НадбавкиПоШтатномуРасписаниюОрганизаций.Период,
	|			НадбавкиПоШтатномуРасписаниюОрганизаций.ВидНадбавки,
	|			НадбавкиПоШтатномуРасписаниюОрганизаций.Показатель1,
	|			НадбавкиПоШтатномуРасписаниюОрганизаций.Валюта1,
	|			НадбавкиПоШтатномуРасписаниюОрганизаций.Должность,
	|			НадбавкиПоШтатномуРасписаниюОрганизаций.ПодразделениеОрганизации
	|		ИЗ
	|			РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций КАК НадбавкиПоШтатномуРасписаниюОрганизаций
	|		ГДЕ
	|			НадбавкиПоШтатномуРасписаниюОрганизаций.Период > &парамНачало
	|			И НадбавкиПоШтатномуРасписаниюОрганизаций.Период <= &парамКонец
	|			И НадбавкиПоШтатномуРасписаниюОрганизаций.ПодразделениеОрганизации В(&Подразделения)) КАК ШтатноеРасписание
	|		ПО ШтатноеРасписание.ПодразделениеОрганизации = Работники.ПодразделениеОрганизации
	|			И ШтатноеРасписание.Должность = Работники.Должность
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|		ПО (Валюты.Период = &парамДатаВалютногоУчета)
	|			И Валюты.Валюта = ШтатноеРасписание.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеНачисление УБЫВ,
	|	ВидРасчетаКод,
	|	Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// выводим сведения о плановых даных
	Область = Макет.ПолучитьОбласть("ПлановыеДанныеЗаголовок");
	ВыходнойДокумент.Вывести(Область);
	Область = Макет.ПолучитьОбласть("ПлановыеДанныеСтрока");
	Пока Выборка.Следующий() Цикл
		Если Выборка.Действует = null Тогда
			Продолжить;
		КонецЕсли;	
		Область.Параметры.Заполнить(Выборка);
		Если Выборка.Валюта = NULL или Выборка.Валюта = ВалютаРеглУчета или Выборка.Валюта.Пустая() Тогда
			Область.Области.Валюта.Текст = "";
		КонецЕсли;
		ВыходнойДокумент.Вывести(Область);
		
		ОбластьЯчеек = ВыходнойДокумент.Область(ВыходнойДокумент.ВысотаТаблицы, ,ВыходнойДокумент.ВысотаТаблицы, );
		Если Выборка.ОсновноеНачисление Тогда
			// основные начисления выделяем жирным шрифтом
			Шрифт = ОбластьЯчеек.Шрифт;
			ОбластьЯчеек.Шрифт = Новый Шрифт(Шрифт,,, Истина);
		ИначеЕсли Выборка.ПоШтатномуРасписанию Тогда
			// начисления по штатному расписанию - курсивом
			Шрифт = ОбластьЯчеек.Шрифт;
			ОбластьЯчеек.Шрифт = Новый Шрифт(Шрифт,,,, Истина);
		КонецЕсли;
		Если не Выборка.Действует Тогда
			// недействующие плановые данные выделяем цветом
			ОбластьЯчеек.ЦветТекста = WebЦвета.ТемноСерый;
		КонецЕсли;
		
	КонецЦикла;
	
	// плановые удержания
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УдержанияРаботниковОрганизации.Период КАК Период,
	|	УдержанияРаботниковОрганизации.Организация КАК Организация,
	|	УдержанияРаботниковОрганизации.Организация.Наименование КАК ОрганизацияНаименование,
	|	УдержанияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
	|	УдержанияРаботниковОрганизации.ВидРасчета.Наименование КАК ВидРасчетаНаименование,
	|	УдержанияРаботниковОрганизации.ДокументОснование КАК ДокументОснование,
	|	УдержанияРаботниковОрганизации.Валюта1 КАК Валюта,
	|	ВЫБОР
	|		КОГДА УдержанияРаботниковОрганизации.Валюта1 = &парамВалютаРегламентУчета
	|				ИЛИ УдержанияРаботниковОрганизации.Валюта1 = &парамПустаяВалюта
	|			ТОГДА 1
	|		ИНАЧЕ Валюты.Курс
	|	КОНЕЦ КАК КурсВалюты,
	|	УдержанияРаботниковОрганизации.Показатель1 КАК Размер,
	|	УдержанияРаботниковОрганизации.Действует КАК Действует
	|ИЗ
	|	(ВЫБРАТЬ
	|		УдержанияРаботниковОрганизации.Период КАК Период,
	|		УдержанияРаботниковОрганизации.Организация КАК Организация,
	|		УдержанияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
	|		УдержанияРаботниковОрганизации.ДокументОснование КАК ДокументОснование,
	|		УдержанияРаботниковОрганизации.Показатель1 КАК Показатель1,
	|		УдержанияРаботниковОрганизации.Валюта1 КАК Валюта1,
	|		ВЫБОР
	|			КОГДА УдержанияРаботниковОрганизации.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ КАК Действует
	|	ИЗ
	|		РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций.СрезПоследних(&парамНачало, Сотрудник.Физлицо = &Физлицо) КАК УдержанияРаботниковОрганизации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		УдержанияРаботниковОрганизации.Период,
	|		УдержанияРаботниковОрганизации.Организация,
	|		УдержанияРаботниковОрганизации.ВидРасчета,
	|		УдержанияРаботниковОрганизации.ДокументОснование,
	|		УдержанияРаботниковОрганизации.Показатель1,
	|		УдержанияРаботниковОрганизации.Валюта1,
	|		ИСТИНА
	|	ИЗ
	|		РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизации
	|	ГДЕ
	|		УдержанияРаботниковОрганизации.Период > &парамНачало
	|		И УдержанияРаботниковОрганизации.Период <= &парамКонец
	|		И УдержанияРаботниковОрганизации.Сотрудник.ФизЛицо = &Физлицо
	|) КАК УдержанияРаботниковОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|		ПО (Валюты.Период = &парамДатаВалютногоУчета)
	|			И Валюты.Валюта = УдержанияРаботниковОрганизации.Валюта1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Действует УБЫВ");
	
	Запрос.УстановитьПараметр("парамНачало" , Месяц);
	Запрос.УстановитьПараметр("парамКонец" , КонецМесяца(Месяц));
	Запрос.УстановитьПараметр("Физлицо" , Физлицо);
	Запрос.УстановитьПараметр("парамДатаВалютногоУчета" , НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("парамПустаяВалюта" , Справочники.Валюты.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамВалютаРегламентУчета" , Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Уволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыходнойДокумент.Вывести(ПустаяСтрока);
	Область = Макет.ПолучитьОбласть("ПлановыеДанныеСтрока");
	Пока Выборка.Следующий() Цикл
		Область.Параметры.Заполнить(Выборка);
		Если Выборка.Валюта = ВалютаРеглУчета или Выборка.Валюта.Пустая() Тогда
			Область.Области.Валюта.Текст = "";
		КонецЕсли;
		ВыходнойДокумент.Вывести(Область);
		ОбластьЯчеек = ВыходнойДокумент.Область(ВыходнойДокумент.ВысотаТаблицы, ,ВыходнойДокумент.ВысотаТаблицы, );
		Если Выборка.Действует Тогда
			// удержания выделяем цветом
			ОбластьЯчеек.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
		Иначе
			// недействующие плановые данные выделяем цветом
			ОбластьЯчеек.ЦветТекста = WebЦвета.ТемноСерый;
		КонецЕсли;
		
	КонецЦикла;
	
	// взносы
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Взносы.Период КАК Период,
	|	Взносы.Организация КАК Организация,
	|	Взносы.Организация.Наименование КАК ОрганизацияНаименование,
	|	Взносы.Налог КАК ВидРасчета,
	|	Взносы.Налог.Наименование КАК ВидРасчетаНаименование
	|ИЗ
	|	РегистрСведений.ВзносыВФондыРаботниковОрганизаций.СрезПоследних(&парамНачало) КАК Взносы
	|	ГДЕ
	|		Взносы.Сотрудник.ФизЛицо = &Физлицо
	|		И Взносы.Актуальность
	|       И Взносы.Налог.Родитель = ЗНАЧЕНИЕ(Справочник.Налоги.Взносы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ВидРасчетаНаименование");
	
	Запрос.УстановитьПараметр("парамНачало" , Месяц);
	Запрос.УстановитьПараметр("Физлицо" , Физлицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыходнойДокумент.Вывести(ПустаяСтрока);
	Область = Макет.ПолучитьОбласть("ПлановыеДанныеСтрока");
	Пока Выборка.Следующий() Цикл
		Область.Параметры.Заполнить(Выборка);
		Область.Области.Валюта.Текст = "";
		ВыходнойДокумент.Вывести(Область);
		ОбластьЯчеек = ВыходнойДокумент.Область(ВыходнойДокумент.ВысотаТаблицы, ,ВыходнойДокумент.ВысотаТаблицы, );
		ОбластьЯчеек.ЦветТекста = WebЦвета.ТемноСиний;
		
	КонецЦикла;
	
	// плановые авансы
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	АвансыРаботникамОрганизаций.Организация,
	|	АвансыРаботникамОрганизаций.Организация.Наименование КАК ОрганизацияНаименование,
	|	АвансыРаботникамОрганизаций.СуммаАванса КАК Размер
	|ИЗ
	|	РегистрСведений.АвансыРаботникамОрганизаций КАК АвансыРаботникамОрганизаций
	|ГДЕ
	|	АвансыРаботникамОрганизаций.Сотрудник.Физлицо = &Физлицо");
	
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыходнойДокумент.Вывести(ПустаяСтрока);
	Область = Макет.ПолучитьОбласть("ПлановыйАвансСтрока");
	Пока Выборка.Следующий() Цикл
		Область.Параметры.Заполнить(Выборка);
		ВыходнойДокумент.Вывести(Область);
		Если МестаРаботыФизлица.Количество() = 0 Тогда
			// недействующие плановые данные выделяем цветом
			ОбластьЯчеек = ВыходнойДокумент.Область(ВыходнойДокумент.ВысотаТаблицы, ,ВыходнойДокумент.ВысотаТаблицы, );
			ОбластьЯчеек.ЦветТекста = WebЦвета.ТемноСерый;
		КонецЕсли;
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("ПлановыеДанныеПодвал");
	ВыходнойДокумент.Вывести(Область);
	
	// отчеты
	ОтчетУнифицированнаяФормаТ3 = Отчеты.УтвержденноеШтатноеРасписаниеОрганизаций.Создать();
	
	ОбработанныеОрганизации = Новый Соответствие;
	Сч = 1;
	Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
		Если ОбработанныеОрганизации[МестоРаботы.Организация] = НеОпределено Тогда
			
			ОбработанныеОрганизации[МестоРаботы.Организация] = Истина;
			
			Область = Макет.ПолучитьОбласть("Организация");
			Область.Параметры.ОрганизацияНаименование = МестоРаботы.ОрганизацияНаименование;
			Область.Параметры.Организация = МестоРаботы.Организация;
			ВыходнойДокумент.Вывести(Область);
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			
			// УнифицированнаяФормаТ3
			// заголовок
			Область = Макет.ПолучитьОбласть("УнифицированнаяФормаТ3");
			ИмяЯчейкиОтчета = Область.Области.ГиперссылкаУнифицированнаяФормаТ3.Имя;
			Область.Области.ГиперссылкаУнифицированнаяФормаТ3.Имя = Формат(Сч,"ЧЦ=3; ЧВН=") + ИмяЯчейкиОтчета;
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			ВыходнойДокумент.Вывести(Область);
			
			// начнем группировку
			ВыходнойДокумент.НачатьГруппуСтрок(, ГруппировкаУнифицированнаяФормаТ3);
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			ОбластьУнифицированнаяФормаТ3 = ВыходнойДокумент.Область(ВыходнойДокумент.ВысотаТаблицы, , ВыходнойДокумент.ВысотаТаблицы, );
			
			УнифицированнаяФормаТ3Отчет = Новый ТабличныйДокумент;
			
			ВыведенныеПодразделения = Новый Соответствие;
			
			// сформируем штатное распиание по всем местам работы
			Для Каждого ВнМестоРаботы Из МестаРаботыФизлица Цикл
				Если ВнМестоРаботы.Организация <> МестоРаботы.Организация Тогда
					// перебираем только места работы обрабатываемой организации
					Продолжить;
				КонецЕсли;
				
				Если ВыведенныеПодразделения.Получить(МестоРаботы.Подразделение) <> НеОпределено Тогда
					// штатное расписание по подразделению уже вывели
					Продолжить;
				КонецЕсли;
				
				ОтчетУнифицированнаяФормаТ3.Организация = МестоРаботы.ОбособленноеПодразделение;
				ОтчетУнифицированнаяФормаТ3.Подразделение = МестоРаботы.Подразделение;
				ВыведенныеПодразделения[МестоРаботы.Подразделение] = МестоРаботы.Подразделение;
				
				ОтчетУнифицированнаяФормаТ3.СформироватьОтчет(УнифицированнаяФормаТ3Отчет, Истина);
				// таким способом размещаются отчеты без форматов строк
				ОбластьПрямоугольная = УнифицированнаяФормаТ3Отчет.Область(1, 1, УнифицированнаяФормаТ3Отчет.ВысотаТаблицы, УнифицированнаяФормаТ3Отчет.ШиринаТаблицы);
				НачалоНовогоФорматаСтрок = ВыходнойДокумент.ВысотаТаблицы + 1;
				ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, , НачалоНовогоФорматаСтрок + УнифицированнаяФормаТ3Отчет.ВысотаТаблицы - 1, ).СоздатьФорматСтрок();
				// назначим ширину колонок у новой области формата строк
				Для Счетчик = 1 По УнифицированнаяФормаТ3Отчет.ШиринаТаблицы Цикл
					ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, Счетчик).ШиринаКолонки = УнифицированнаяФормаТ3Отчет.Область(1, Счетчик).ШиринаКолонки;
				КонецЦикла;
				ВыходнойДокумент.ВставитьОбласть(ОбластьПрямоугольная, ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, 1));
			КонецЦикла;
			
			// Для вывода отчетов в отдельных окнах
			ДанныеТабличныхДокументовТ3.Вставить(Формат(Сч,"ЧЦ=3; ЧВН="),УнифицированнаяФормаТ3Отчет);
			
			ВыходнойДокумент.ЗакончитьГруппуСтрок();
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	ВыходнойДокумент.ТолькоПросмотр = Истина;
	ВыходнойДокумент.Защита = Истина;
	
КонецПроцедуры

Процедура ПолучитьСведенияОПлановыхНачислениях()
	Перем СвойствоИнфоПоОрганизации;
	
	// получим сведения о местах работы
	ПолучитьСведенияОМестахРаботы();
	
	ДанныеПоПлановымРасчетам.Очистить();
	Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
		// просто наполняем соответствие организациями работника
		ИнфоПоОрганизации = Новый Структура(
		"Наименование,
		|ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций,
		|ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций,
		|ИсполнительныйЛист", 
		МестоРаботы.ОрганизацияНаименование,
		Новый Массив,
		Новый Массив,
		Новый Массив);
		ДанныеПоПлановымРасчетам[МестоРаботы.Организация] = ИнфоПоОрганизации;
		
	КонецЦикла;
	
	Запрос = Новый Запрос();
	
	// нужно проверить наличие документов изменения плановых данных
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций"" КАК ВидДокумента,
	|	Начисления.Ссылка.Организация КАК Организация,
	|	Начисления.Ссылка КАК Документ,
	|	Начисления.Ссылка.Представление КАК Представление
	|ИЗ
	|	Документ.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.ОсновныеНачисления КАК Начисления
	|ГДЕ
	|	Начисления.Сотрудник.Физлицо = &Физлицо
	|	И Начисления.ДатаДействия >= &Месяц
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций"",
	|	Удержания.Ссылка.Организация,
	|	Удержания.Ссылка,
	|	Удержания.Ссылка.Представление
	|ИЗ
	|	Документ.ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.ФизЛицо = &Физлицо
	|	И Удержания.ДатаДействия >= &Месяц
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ИсполнительныйЛист"",
	|	Удержания.Ссылка.Организация,
	|	Удержания.Ссылка,
	|	Удержания.Ссылка.Представление
	|ИЗ
	|	Документ.ИсполнительныйЛист КАК Удержания
	|ГДЕ
	|	Удержания.Физлицо = &Физлицо";
	
	Запрос.УстановитьПараметр("Месяц", Месяц);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ДанныеПоПлановымРасчетам[Выборка.Организация] = НеОпределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеПоПлановымРасчетам[Выборка.Организация].Свойство(Выборка.ВидДокумента, СвойствоИнфоПоОрганизации);
		СвойствоИнфоПоОрганизации.Добавить(Новый Структура("Документ, Представление", Выборка.Документ, Выборка.Представление));
	КонецЦикла;
	
КонецПроцедуры

Процедура НадписьПлановыеНачисленияНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из ДанныеПоПлановымРасчетам Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Изменить плановые начисления по организации " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		СтрокаМеню = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьПлановыеНачисления);
		Если СтрокаМеню = НеОпределено Тогда
			Возврат;
		КонецЕсли;
		Значение = СтрокаМеню.Значение;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		НовыйДокумент = Документы.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.СоздатьДокумент();
		НовыйДокумент.Организация = Значение;
		НовыйДокумент.Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
		НовыйДокумент.УстановитьНовыйНомер();
		Сотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
		// для заполнения сотрудника перебираем рабочие места
		Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
			Если МестоРаботы.Организация = Значение Тогда
				Сотрудник = МестоРаботы.Сотрудник;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НовыйДокумент.ДобавитьСтрокиНачисленийПоРаботнику(Сотрудник);
		НовыйДокумент.ДобавитьСтрокиВзносовПоРаботнику(Сотрудник);
		Если НовыйДокумент.ОсновныеНачисления.Количество() = 0 Тогда
			Строка = НовыйДокумент.ОсновныеНачисления.Добавить();
			Строка.Физлицо = Физлицо;
			// для заполнения сотрудника перебираем рабочие места
			Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
				Если МестоРаботы.Организация = Значение Тогда
					Строка.Сотрудник = МестоРаботы.Сотрудник;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	Иначе
		// это открытие существующего начисления
		Форма = Значение.ПолучитьФорму();
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьПлановыеУдержанияНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из ДанныеПоПлановымРасчетам Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Изменить плановые удержания по организации " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		СтрокаМеню = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьПлановыеУдержания);
		Если СтрокаМеню = НеОпределено Тогда
			Возврат;
		КонецЕсли;
		Значение = СтрокаМеню.Значение;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		НовыйДокумент = Документы.ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций.СоздатьДокумент();
		НовыйДокумент.Организация = Значение;
		НовыйДокумент.Дата = ТекущаяДата();
		Строка = НовыйДокумент.Удержания.Добавить();
		Сотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
		// для заполнения сотрудника перебираем рабочие места
		Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
			Если МестоРаботы.Организация = Значение Тогда
				Сотрудник = МестоРаботы.Сотрудник;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Строка.Сотрудник = Сотрудник;
		Строка.Физлицо = Физлицо;
		
		Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	Иначе
		// это открытие существующего начисления
		Форма = Значение.ПолучитьФорму();
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьИсполнительныйЛистНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из ДанныеПоПлановымРасчетам Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.ИсполнительныйЛист Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.ИсполнительныйЛист.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Исполнительный лист по организации " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		СтрокаМеню = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьИсполнительныйЛист);
		Если СтрокаМеню = НеОпределено Тогда
			Возврат;
		КонецЕсли;
		Значение = СтрокаМеню.Значение;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		НовыйДокумент = Документы.ИсполнительныйЛист.СоздатьДокумент();
		НовыйДокумент.Организация = Значение;
		НовыйДокумент.Дата = ТекущаяДата();
		// для заполнения сотрудника перебираем рабочие места
		Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
			Если МестоРаботы.Организация = Значение Тогда
				Сотрудник = МестоРаботы.Сотрудник;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НовыйДокумент.Сотрудник = Сотрудник;
		НовыйДокумент.Физлицо = Физлицо;
		Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	Иначе
		// это открытие существующего начисления
		Форма = Значение.ПолучитьФорму();
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьШтаноеРасписаниеНажатие(Элемент)
	Форма = РегистрыСведений.ШтатноеРасписаниеОрганизаций.ПолучитьФормуСписка();
	Форма.Открыть();
КонецПроцедуры

Процедура НадписьПлановыйАвансНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	ИспользованныеОрганизации = Новый Соответствие;
	
	Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
		Если ИспользованныеОрганизации[МестоРаботы.ОрганизацияНаименование] = НеОпределено Тогда
			СтрокаМеню = СписокМеню.Добавить(МестоРаботы, "По организации " + МестоРаботы.ОрганизацияНаименование);
			ИспользованныеОрганизации[МестоРаботы.ОрганизацияНаименование] = МестоРаботы.ОрганизацияНаименование;
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Организация = СписокМеню[0].Значение.Организация;
	Иначе
		СтрокаМеню = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьПлановыйАванс);
		Если СтрокаМеню = НеОпределено Тогда
			Возврат;
		КонецЕсли;
		Значение = СтрокаМеню.Значение;
		Организация = Значение.Организация;
	КонецЕсли;
	Форма = РегистрыСведений.АвансыРаботникамОрганизаций.ПолучитьФормуСписка();
	Форма.УстановитьСтроку(Организация, Физлицо);
	Форма.Открыть();
КонецПроцедуры

// обработка гиперссылок - действия по открытию форм в отдельных окнах
//
Процедура ПлановыеДанныеВыбор(Элемент, Область, СтандартнаяОбработка)
	Если Сред(Область.Имя, 4) = "ГиперссылкаУнифицированнаяФормаТ3" Тогда
		ВыводимыйТабличныйДокумент = ДанныеТабличныхДокументовТ3.Получить(Лев(Область.Имя,3));
		ТабличныйДокументОтдельно(ВыводимыйТабличныйДокумент, НСтр("ru='Штатное расписание';uk='Штатний розклад'"));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ РАСЧЕТЫ, ЗАРПЛАТА

// формирует раздел
Процедура СформироватьДанныеРасчетыЗарплата()
	Если мДанныеРасчетыЗарплатаСформированы Тогда
		Возврат;
	КонецЕсли;
	мДанныеРасчетыЗарплатаСформированы = Истина;
	// обновить динамические списки
	ПервичныеДокументыОрганизаций.Обновить();
	
	ПолучитьСведенияОНачислениях();
	
	// настройка надписей раздела Действия и документы
	ЭлементыФормы.НадписьНачислениеЗарплаты.Заголовок = НСтр("ru='Начислить зарплату';uk='Нарахувати зарплату'");
	ЭлементыФормы.НадписьПремии.Заголовок = НСтр("ru='Начислить премию';uk='Нарахувати премію'");
	ЭлементыФормы.НадписьВыплата.Заголовок = НСтр("ru='Выплатить зарплату';uk='Виплатити зарплату'");
	Для Каждого ИнфоПоОрганизации Из ДанныеПоНачислениям Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.НачислениеЗарплатыРаботникамОрганизаций Цикл
			ЭлементыФормы.НадписьНачислениеЗарплаты.Заголовок = НСтр("ru='Начисление зарплаты';uk='Нарахування зарплати'");
			Прервать;
		КонецЦикла;
		Для Каждого Документ из ИнфоПоОрганизации.Значение.ПремииРаботниковОрганизаций Цикл
			ЭлементыФормы.НадписьПремии.Заголовок = НСтр("ru='Начисление премии';uk='Нарахування премії'");
			Прервать;
		КонецЦикла;
		Для Каждого Документ из ИнфоПоОрганизации.Значение.ЗарплатаКВыплатеОрганизаций Цикл
			ЭлементыФормы.НадписьВыплата.Заголовок = НСтр("ru='Платежная ведомость';uk='Платіжна відомість'");
			Прервать;
		КонецЦикла;
	КонецЦикла;
	
	// заполнения табличного документа с отчетами
	ВыходнойДокумент = ЭлементыФормы.РасчетыЗарплата;
	
	// восстановление раскрытых группировок отчета
	ГруппировкаАнализНачисленийРаботникамОрганизацийРаскрыта = Ложь;
	Если ОбластьАнализНачисленийРаботникамОрганизаций <> НеОпределено и ОбластьАнализНачисленийРаботникамОрганизаций.Видимость Тогда
		ГруппировкаАнализНачисленийРаботникамОрганизацийРаскрыта = Истина;
	КонецЕсли;
	ГруппировкаРасчетныеЛисткиОрганизацийРаскрыта = Ложь;
	Если ОбластьРасчетныеЛисткиОрганизаций <> НеОпределено и ОбластьРасчетныеЛисткиОрганизаций.Видимость Тогда
		ГруппировкаРасчетныеЛисткиОрганизацийРаскрыта = Истина;
	КонецЕсли;
	ГруппировкаРегламентированнаяФорма1НДФЛРаскрыта = Ложь;
	Если ОбластьРегламентированнаяФорма1НДФЛ <> НеОпределено и ОбластьРегламентированнаяФорма1НДФЛ.Видимость Тогда
		ГруппировкаРегламентированнаяФорма1НДФЛРаскрыта = Истина;
	КонецЕсли;
	ГруппировкаУнифицированнаяФормаТ13Раскрыта = Ложь;
	Если ОбластьУнифицированнаяФормаТ13 <> НеОпределено и ОбластьУнифицированнаяФормаТ13.Видимость Тогда
		ГруппировкаУнифицированнаяФормаТ13Раскрыта = Истина;
	КонецЕсли;
	
	ВыходнойДокумент.Очистить();
	
	Макет = ПолучитьМакет("РасчетыЗарплата");
	Макет.КодЯзыкаМакета = Локализация.КодЯзыкаИнтерфейса();
	ПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	ОбластьФизлицо = Макет.ПолучитьОбласть("Физлицо");
	ОбластьФизлицо.Параметры.Физлицо = Физлицо;
	ОбластьФизлицо.Параметры.Месяц = Формат(Месяц, "ДФ='ММММ гггг ''г.'''");
	ВыходнойДокумент.Вывести(ОбластьФизлицо);
	
	ГрафикиРаботника = Новый Массив;
	
	// выводим сведения о местах работы
	Если МестаРаботыФизлица.Количество() <> 0 Тогда
		Область = Макет.ПолучитьОбласть("МестаРаботыЗаголовок");
		ВыходнойДокумент.Вывести(Область);
		Область = Макет.ПолучитьОбласть("МестаРаботыСтрока");
		Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
			Область.Параметры.Заполнить(МестоРаботы);
			ВыходнойДокумент.Вывести(Область);
			ГрафикиРаботника.Добавить(МестоРаботы.ГрафикРаботы);
		КонецЦикла;
	КонецЕсли;
	
	// получим сведения о графике работы
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы.Наименование КАК ГрафикРаботыНаименование
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы В(&ГрафикиРаботника)
	|	И ГрафикиРаботыПоВидамВремени.Дата >= &Начало
	|	И ГрафикиРаботыПоВидамВремени.Дата <= &Конец
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы.Наименование
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) = 0
	|		ИЛИ СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) = 0)");
	
	Запрос.УстановитьПараметр("Начало", НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("Конец", КонецМесяца(Месяц));
	Запрос.УстановитьПараметр("ГрафикиРаботника", ГрафикиРаботника);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() <> 0 Тогда
		Графики = Макет.ПолучитьОбласть("ГрафикиНеЗаполнены");
		Графики.Параметры.ТекстГрафикиНеЗаполнены = НСтр("ru='ВНИМАНИЕ! Не заполнены один или несколько графиков работы по которым оплачиваются повременные начисления работника! Повременные начисления не могут быть выполнены.';uk='УВАГА! Не заповнені один або кілька графіків роботи за якими оплачуються почасові нарахування працівника! Почасові нарахування не можуть бути виконані.'");
		НеЗаполненныеГрафики = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			НеЗаполненныеГрафики[Выборка.ГрафикРаботы] = Выборка.ГрафикРаботыНаименование;
		КонецЦикла;
		Графики.Параметры.НеЗаполненныеГрафики = НеЗаполненныеГрафики;
		ВыходнойДокумент.Вывести(Графики);
		
	КонецЕсли;
	
	// получим сведения о состоянии начислений
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Запрос.УстановитьПараметр("Месяц", Месяц);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Месяц));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Организация КАК Организация,
	|	ИСТИНА КАК ФлагПлановыеНачисления
	|ПОМЕСТИТЬ ВТПлановыеНачисления
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&Месяц, Сотрудник.Физлицо = &Физлицо) КАК ПлановыеНачисленияРаботниковОрганизацийСрезПоследних
	|ГДЕ
	|	ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Актуальность
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлановыеНачисленияРаботниковОрганизаций.Организация,
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|ГДЕ
	|	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник.Физлицо = &Физлицо
	|	И ПлановыеНачисленияРаботниковОрганизаций.Период > &ДатаНачала
	|	И ПлановыеНачисленияРаботниковОрганизаций.Период < &ДатаОкончания
	|	И ПлановыеНачисленияРаботниковОрганизаций.Актуальность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	Запрос.Выполнить();
	ПлановыеНачисленияТекст = "ВТПлановыеНачисления";
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация КАК СсылкаОрганизация,
	|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка КАК НепроведенныйДокумент,
	|	ИСТИНА КАК ФлагНепроведенныеНачисления
	|ПОМЕСТИТЬ ВТНепроведенныеНачисления
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
	|ГДЕ
	|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник.Физлицо = &Физлицо
	|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации = &Месяц
	|	И (НЕ НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Проведен)
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Ссылка.Организация,
	|	Начисления.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Документ.ПремииРаботниковОрганизаций.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Сотрудник.Физлицо = &Физлицо
	|	И Начисления.Ссылка.ПериодРегистрации = &Месяц
	|	И (НЕ Начисления.Ссылка.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Ссылка.Организация,
	|	Начисления.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Документ.НевыходыВОрганизациях.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Сотрудник.Физлицо = &Физлицо
	|	И Начисления.Ссылка.ПериодРегистрации = &Месяц
	|	И (НЕ Начисления.Ссылка.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Ссылка.Организация,
	|	Начисления.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Документ.ОплатаПраздничныхИВыходныхДнейОрганизаций.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Сотрудник.Физлицо = &Физлицо
	|	И Начисления.Ссылка.ПериодРегистрации = &Месяц
	|	И (НЕ Начисления.Ссылка.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Ссылка.Организация,
	|	Начисления.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Документ.ОплатаСверхурочныхЧасов.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Сотрудник.Физлицо = &Физлицо
	|	И Начисления.Ссылка.ПериодРегистрации = &Месяц
	|	И (НЕ Начисления.Ссылка.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Ссылка.Организация,
	|	Начисления.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК Начисления
	|ГДЕ
	|	Начисления.Сотрудник.Физлицо = &Физлицо
	|	И Начисления.Ссылка.ПериодРегистрации = &Месяц
	|	И (НЕ Начисления.Ссылка.Проведен)
	|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	Регистрация.Ссылка.Организация,
	//|	Регистрация.Ссылка,
	//|	ИСТИНА
	//|ИЗ
	//|	Документ.РегистрацияПростоевРаботниковОрганизаций КАК Регистрация
	//|ГДЕ
	//|	Регистрация.Сотрудник.Физлицо = &Физлицо
	//|	И Регистрация.ПериодРегистрации = &Месяц
	//|	И (НЕ Регистрация.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Отпуск.Ссылка.Организация,
	|	Отпуск.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК Отпуск
	|ГДЕ
	|	Отпуск.Сотрудник.Физлицо = &Физлицо
	|	И Отпуск.ПериодРегистрации = &Месяц
	|	И (НЕ Отпуск.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчет.Ссылка.Организация,
	|	Расчет.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Документ.РасчетПриУвольненииРаботникаОрганизаций КАК Расчет
	|ГДЕ
	|	Расчет.Сотрудник.Физлицо = &Физлицо
	|	И Расчет.ПериодРегистрации = &Месяц
	|	И (НЕ Расчет.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Больничный.Ссылка.Организация,
	|	Больничный.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту КАК Больничный
	|ГДЕ
	|	Больничный.Сотрудник.Физлицо = &Физлицо
	|	И Больничный.ПериодРегистрации = &Месяц
	|	И (НЕ Больничный.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СреднийЗаработок.Ссылка.Организация,
	|	СреднийЗаработок.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку КАК СреднийЗаработок
	|ГДЕ
	|	СреднийЗаработок.Сотрудник.Физлицо = &Физлицо
	|	И СреднийЗаработок.ПериодРегистрации = &Месяц
	|	И (НЕ СреднийЗаработок.Проведен)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СсылкаОрганизация";
	
	Запрос.Выполнить();
	НепроведенныеНачисленияТекст = "ВТНепроведенныеНачисления";
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.Организация КАК Организация,
	|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК ПроведенныйДокумент,
	|	ИСТИНА КАК ФлагПроведенныеНачисления
	|ПОМЕСТИТЬ ВТПроведенныеНачисления
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник.ФизЛицо = &Физлицо
	|	И ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации = &Месяц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	
	Запрос.Выполнить();
	ПроведенныеНачисленияТекст = "ВТПроведенныеНачисления";
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ПлановыеНачисления.Организация,Начисления.Организация) КАК Организация,
	|	ЕСТЬNULL(ПлановыеНачисления.Организация.Наименование,Начисления.Организация.Наименование) КАК ОрганизацияНаименование,
	|	Начисления.ПроведенныйДокумент КАК ПроведенныйДокумент,
	|	ПРЕДСТАВЛЕНИЕ(Начисления.ПроведенныйДокумент) КАК ПроведенныйДокументПредставление,
	|	Начисления.НепроведенныйДокумент КАК НепроведенныйДокумент,
	|	ПРЕДСТАВЛЕНИЕ(Начисления.НепроведенныйДокумент) КАК НепроведенныйДокументПредставление,
	|	ЕСТЬNULL(ПлановыеНачисления.ФлагПлановыеНачисления, ЛОЖЬ) КАК ФлагПлановыеНачисления,
	|	ЕСТЬNULL(Начисления.ФлагПроведенныеНачисления, ЛОЖЬ) КАК ФлагПроведенныеНачисления,
	|	ЕСТЬNULL(Начисления.ФлагНепроведенныеНачисления, ЛОЖЬ) КАК ФлагНепроведенныеНачисления
	|ИЗ
	|	" + ПлановыеНачисленияТекст + " КАК ПлановыеНачисления
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЕСТЬNULL(ПроведенныеНачисления.Организация, НепроведенныеНачисления.СсылкаОрганизация) КАК Организация,
	|			ПроведенныеНачисления.ФлагПроведенныеНачисления КАК ФлагПроведенныеНачисления,
	|			ПроведенныеНачисления.ПроведенныйДокумент КАК ПроведенныйДокумент,
	|			НепроведенныеНачисления.ФлагНепроведенныеНачисления КАК ФлагНепроведенныеНачисления,
	|			НепроведенныеНачисления.НепроведенныйДокумент КАК НепроведенныйДокумент
	|		ИЗ
	|			" + ПроведенныеНачисленияТекст + " КАК ПроведенныеНачисления
	|				ПОЛНОЕ СОЕДИНЕНИЕ " + НепроведенныеНачисленияТекст + " КАК НепроведенныеНачисления
	|				ПО НепроведенныеНачисления.СсылкаОрганизация = ПроведенныеНачисления.Организация) КАК Начисления
	|		ПО Начисления.Организация = ПлановыеНачисления.Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПлановыеНачисления = Новый Соответствие;
	ПлановыеНачисленияНеВыполнены = Новый Соответствие;
	ЛишниеНачисления = Новый Соответствие;
	НепроведенныеНачисления = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ФлагПлановыеНачисления Тогда
			ПлановыеНачисления[Выборка.Организация] = Выборка.ОрганизацияНаименование;
			Если не Выборка.ФлагПроведенныеНачисления Тогда
				ПлановыеНачисленияНеВыполнены[Выборка.Организация] = Выборка.ОрганизацияНаименование;
			КонецЕсли;
		КонецЕсли;
		Если Выборка.ФлагПроведенныеНачисления и не Выборка.ФлагПлановыеНачисления и Выборка.ПроведенныйДокумент <> null Тогда
			ЛишниеНачисления[Выборка.ПроведенныйДокумент] = Выборка.ПроведенныйДокументПредставление;
		КонецЕсли;
		Если Выборка.ФлагНепроведенныеНачисления и Выборка.НепроведенныйДокумент <> null Тогда
			НепроведенныеНачисления[Выборка.НепроведенныйДокумент] = Выборка.НепроведенныйДокументПредставление;
		КонецЕсли;
		
	КонецЦикла;        
	
	Если ПлановыеНачисления.Количество() = 0 Тогда
		ТекстПлановыеНачисления = НСтр("ru='По работнику не предусмотрены плановые начисления. ';uk='По працівнику не передбачені планові нарахування. '");
	Иначе
		Если ПлановыеНачисленияНеВыполнены.Количество() <> 0 Тогда
			ТекстПлановыеНачисления = НСтр("ru='ВНИМАНИЕ! По работнику предусмотрены плановые начисления по ';uk='УВАГА! По працівнику передбачені планові нарахування по '") + 
			?(ПлановыеНачисления.Количество() = 1, НСтр("ru='организации ';uk='організації '"), НСтр("ru='организациям: ';uk='організаціям: '"));
			Первый = Истина;
			Для Каждого ОргЭлемент Из ПлановыеНачисления Цикл
				Если не Первый Тогда
					ТекстПлановыеНачисления = ТекстПлановыеНачисления + ", ";
				КонецЕсли;
				Первый = Ложь;
				ТекстПлановыеНачисления = ТекстПлановыеНачисления + ОргЭлемент.Значение;
			КонецЦикла;
			ТекстПлановыеНачисления = ТекстПлановыеНачисления + 
			НСтр("ru='. При этом начисления не выполнены или не проведены для ';uk='. При цьому нарахування не виконані або не проведені для '") + 
			?(ПлановыеНачисленияНеВыполнены.Количество() = 1, НСтр("ru='организации ';uk='організації '"), НСтр("ru='организациям: ';uk='організаціям: '"));
			Первый = Истина;
			Для Каждого ОргЭлемент Из ПлановыеНачисленияНеВыполнены Цикл
				Если не Первый Тогда
					ТекстПлановыеНачисления = ТекстПлановыеНачисления + ", ";
				КонецЕсли;
				Первый = Ложь;
				ТекстПлановыеНачисления = ТекстПлановыеНачисления + ОргЭлемент.Значение;
			КонецЦикла;
			ТекстПлановыеНачисления = ТекстПлановыеНачисления + ".";
		Иначе
			ТекстПлановыеНачисления = 
			НСтр("ru='По работнику на данный месяц предусмотрены и выполнены начисления по ';uk='По працівнику на цей місяць передбачені і виконані нарахування по '") + 
			?(ПлановыеНачисления.Количество() = 1, НСтр("ru='организации ';uk='організації '"), НСтр("ru='организациям: ';uk='організаціям: '"));
			Первый = Истина;
			Для Каждого ОргЭлемент Из ПлановыеНачисления Цикл
				Если не Первый Тогда
					ТекстПлановыеНачисления = ТекстПлановыеНачисления + ", ";
				КонецЕсли;
				Первый = Ложь;
				ТекстПлановыеНачисления = ТекстПлановыеНачисления + ОргЭлемент.Значение;
			КонецЦикла;
			ТекстПлановыеНачисления = ТекстПлановыеНачисления + 
			НСтр("ru='. Для анализа полноты выполненных начислений можно воспользоваться разделом ""Анализ начислений"".';uk='. Для аналізу повноти виконаних нарахувань можна скористатися розділом ""Аналіз нарахувань"".'");
		КонецЕсли;
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ПлановыеНачисления");
	Область.Параметры.ТекстПлановыеНачисления = ТекстПлановыеНачисления;
	ВыходнойДокумент.Вывести(Область);
	
	Если ЛишниеНачисления.Количество() > 0 Тогда
		ТекстЛишниеНачисления = НСтр("ru='Обратите внимание! По работнику не предусмотрены, но при этом выполнены начисления по ';uk='Зверніть увагу! По працівнику не передбачені, але при цьому виконані нарахування по '") + 
		?(ЛишниеНачисления.Количество() = 1, НСтр("ru='организации ';uk='організації '"), НСтр("ru='организациям: ';uk='організаціям: '"));
		Первый = Истина;
		Для Каждого ОргЭлемент Из ЛишниеНачисления Цикл
			Если не Первый Тогда
				ТекстЛишниеНачисления = ТекстЛишниеНачисления + ", ";
			КонецЕсли;
			Первый = Ложь;
			ТекстЛишниеНачисления = ТекстЛишниеНачисления + ОргЭлемент.Значение;
		КонецЦикла;
		ТекстЛишниеНачисления = ТекстЛишниеНачисления + ".";
		Область = Макет.ПолучитьОбласть("ЛишниеНачисления");
		Область.Параметры.ТекстЛишниеНачисления = ТекстЛишниеНачисления;
		Область.Параметры.ЛишниеНачисленияСписок = ЛишниеНачисления;
		ВыходнойДокумент.Вывести(Область);
	КонецЕсли;
	
	Если НепроведенныеНачисления.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ПроведенностьНачислений");
		Область.Параметры.ТекстПроведенностьНачислений = НСтр("ru='ВНИМАНИЕ! По работнику существуют непроведенные документы начислений. Эти документы не отражены в учете!';uk='УВАГА! По працівнику існують непроведені документи нарахувань. Ці документи не відображені в обліку!'");
		Область.Параметры.НепроведенныеДокументыНачислений = НепроведенныеНачисления;
		ВыходнойДокумент.Вывести(Область);
	КонецЕсли;
	
	// отчеты
	ОтчетРасчетныеЛисткиОрганизаций = Отчеты.РасчетныеЛисткиОрганизаций.Создать();
	ОтчетАнализНачисленийРаботникамОрганизаций = Отчеты.АнализНачисленийРаботникамОрганизаций.Создать();
	ОтчетУнифицированнаяФормаТ13 = Отчеты.ТиповаяФормаП5.Создать();
	
	ОбработанныеОрганизации = Новый Соответствие;
	ФормироватьНалоговуюКарточку = НЕ мДанныеНалоговаяКарточкаСформированы;
	Сч = 1;
	Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
		Если ОбработанныеОрганизации[МестоРаботы.Организация] = НеОпределено Тогда
			
			ОбработанныеОрганизации[МестоРаботы.Организация] = Истина;
			
			Область = Макет.ПолучитьОбласть("Организация");
			Область.Параметры.ОрганизацияНаименование = МестоРаботы.ОрганизацияНаименование;
			Область.Параметры.Организация = МестоРаботы.Организация;
			ВыходнойДокумент.Вывести(Область);
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			
			// АнализНачисленийРаботникамОрганизаций
			// заголовок
			Область = Макет.ПолучитьОбласть("АнализНачислений");
			ИмяЯчейкиОтчета = Область.Области.ГиперссылкаАнализНачисленийРаботникамОрганизаций.Имя;
			Область.Области.ГиперссылкаАнализНачисленийРаботникамОрганизаций.Имя = Формат(Сч,"ЧЦ=3; ЧВН=") + ИмяЯчейкиОтчета;
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			ВыходнойДокумент.Вывести(Область);
			
			// начнем группировку
			ВыходнойДокумент.НачатьГруппуСтрок(, ГруппировкаАнализНачисленийРаботникамОрганизацийРаскрыта);
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			ОбластьАнализНачисленийРаботникамОрганизаций = ВыходнойДокумент.Область(ВыходнойДокумент.ВысотаТаблицы, , ВыходнойДокумент.ВысотаТаблицы, );
			
			ТиповыеОтчеты.УстановитьПараметр(ОтчетАнализНачисленийРаботникамОрганизаций.КомпоновщикНастроек, "НачалоПериода", НачалоМесяца(Месяц));
			ТиповыеОтчеты.УстановитьПараметр(ОтчетАнализНачисленийРаботникамОрганизаций.КомпоновщикНастроек, "КонецПериода", КонецМесяца(Месяц));
     		ТиповыеОтчеты.ДобавитьОтбор(ОтчетАнализНачисленийРаботникамОрганизаций.КомпоновщикНастроек, "Сотрудник", МестоРаботы.Сотрудник);
			
			АнализНачисленийРаботникамОрганизацийОтчет = Новый ТабличныйДокумент;
			ОтчетАнализНачисленийРаботникамОрганизаций.СформироватьОтчет(АнализНачисленийРаботникамОрганизацийОтчет,, Ложь);
			
			//
			// Для вывода отчетов в отдельных окнах
			ДанныеТабличныхДокументовАнализНачислений.Вставить(Формат(Сч,"ЧЦ=3; ЧВН="),АнализНачисленийРаботникамОрганизацийОтчет);
			//
			// таким способом размещаются отчеты без форматов строк
			ОбластьПрямоугольная = АнализНачисленийРаботникамОрганизацийОтчет.Область(1, 1, АнализНачисленийРаботникамОрганизацийОтчет.ВысотаТаблицы, АнализНачисленийРаботникамОрганизацийОтчет.ШиринаТаблицы);
			НачалоНовогоФорматаСтрок = ВыходнойДокумент.ВысотаТаблицы + 1;
			ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, , НачалоНовогоФорматаСтрок + АнализНачисленийРаботникамОрганизацийОтчет.ВысотаТаблицы - 1, ).СоздатьФорматСтрок();
			// назначим ширину колонок у новой области формата строк
			Для Счетчик = 1 По АнализНачисленийРаботникамОрганизацийОтчет.ШиринаТаблицы Цикл
				ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, Счетчик).ШиринаКолонки = АнализНачисленийРаботникамОрганизацийОтчет.Область(, Счетчик, , Счетчик).ШиринаКолонки; 
			КонецЦикла;
			ВыходнойДокумент.ВставитьОбласть(ОбластьПрямоугольная, ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, 1));
			
			ВыходнойДокумент.ЗакончитьГруппуСтрок();
			
			// РасчетныеЛисткиОрганизаций
			// заголовок
			Область = Макет.ПолучитьОбласть("РасчетныеЛистки");
			ИмяЯчейкиОтчета = Область.Области.ГиперссылкаРасчетныеЛисткиОрганизаций.Имя;
			Область.Области.ГиперссылкаРасчетныеЛисткиОрганизаций.Имя = Формат(Сч,"ЧЦ=3; ЧВН=") + ИмяЯчейкиОтчета;
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			ВыходнойДокумент.Вывести(Область);
			
			// начнем группировку
			ВыходнойДокумент.НачатьГруппуСтрок(, ГруппировкаРасчетныеЛисткиОрганизацийРаскрыта);
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			ОбластьРасчетныеЛисткиОрганизаций = ВыходнойДокумент.Область(ВыходнойДокумент.ВысотаТаблицы, , ВыходнойДокумент.ВысотаТаблицы, );
			
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасчетныеЛисткиОрганизаций.КомпоновщикНастроек,  "НачалоПериода", НачалоМесяца(Месяц));
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасчетныеЛисткиОрганизаций.КомпоновщикНастроек,  "КонецПериода", КонецМесяца(Месяц));
			ТиповыеОтчеты.УстановитьПараметр(ОтчетРасчетныеЛисткиОрганизаций.КомпоновщикНастроек,  "Группировать", ложь);
			//ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасчетныеЛисткиОрганизаций.КомпоновщикНастроек, "Организация", МестоРаботы.ОбособленноеПодразделение);
			ТиповыеОтчеты.ДобавитьОтбор(ОтчетРасчетныеЛисткиОрганизаций.КомпоновщикНастроек, "Сотрудник", МестоРаботы.Сотрудник);
			
			РасчетныеЛисткиОрганизацийОтчет = Новый ТабличныйДокумент;
			ОтчетРасчетныеЛисткиОрганизаций.СформироватьОтчет(РасчетныеЛисткиОрганизацийОтчет);
			
			// Для вывода отчетов в отдельных окнах
			ДанныеТабличныхДокументовРасчетныеЛистки.Вставить(Формат(Сч,"ЧЦ=3; ЧВН="),РасчетныеЛисткиОрганизацийОтчет);
			
			// таким способом размещаются отчеты без форматов строк
			ОбластьПрямоугольная = РасчетныеЛисткиОрганизацийОтчет.Область(1, 1, РасчетныеЛисткиОрганизацийОтчет.ВысотаТаблицы, РасчетныеЛисткиОрганизацийОтчет.ШиринаТаблицы);
			НачалоНовогоФорматаСтрок = ВыходнойДокумент.ВысотаТаблицы + 1;
			ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, , НачалоНовогоФорматаСтрок + РасчетныеЛисткиОрганизацийОтчет.ВысотаТаблицы - 1, ).СоздатьФорматСтрок();
			// назначим ширину колонок у новой области формата строк
			Для Счетчик = 1 По РасчетныеЛисткиОрганизацийОтчет.ШиринаТаблицы Цикл
				ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, Счетчик).ШиринаКолонки = РасчетныеЛисткиОрганизацийОтчет.Область(1, Счетчик).ШиринаКолонки;
			КонецЦикла;
			ВыходнойДокумент.ВставитьОбласть(ОбластьПрямоугольная, ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, 1));
			
			ВыходнойДокумент.ЗакончитьГруппуСтрок();
			
			// УнифицированнаяФормаТ13
			// заголовок
			Область = Макет.ПолучитьОбласть("УнифицированнаяФормаТ13");
			ИмяЯчейкиОтчета = Область.Области.ГиперссылкаУнифицированнаяФормаТ13.Имя;
			Область.Области.ГиперссылкаУнифицированнаяФормаТ13.Имя = Формат(Сч,"ЧЦ=3; ЧВН=") + ИмяЯчейкиОтчета;
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			ВыходнойДокумент.Вывести(Область);
			
			// начнем группировку
			ВыходнойДокумент.НачатьГруппуСтрок(, ГруппировкаУнифицированнаяФормаТ13Раскрыта);
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			ОбластьУнифицированнаяФормаТ13 = ВыходнойДокумент.Область(ВыходнойДокумент.ВысотаТаблицы, , ВыходнойДокумент.ВысотаТаблицы, );
			
			ОтчетУнифицированнаяФормаТ13.ДатаНач = НачалоМесяца(Месяц);
			
			ОтчетУнифицированнаяФормаТ13.Организация = МестоРаботы.ОбособленноеПодразделение;
			ОтчетУнифицированнаяФормаТ13.ОтборОрганизации = Истина;
			ОтчетУнифицированнаяФормаТ13.ВидСравненияОрганизации = ВидСравнения.Равно;
			
			ОтчетУнифицированнаяФормаТ13.Работник = МестоРаботы.Сотрудник;
			ОтчетУнифицированнаяФормаТ13.ОтборРаботника = Истина;
			ОтчетУнифицированнаяФормаТ13.ВидСравненияРаботника = ВидСравнения.Равно;
			
			УнифицированнаяФормаТ13Отчет = Новый ТабличныйДокумент;
			ОтчетУнифицированнаяФормаТ13.СформироватьОтчет(УнифицированнаяФормаТ13Отчет, "Табель");
			// Для вывода отчетов в отдельных окнах
			ДанныеТабличныхДокументовТ13.Вставить(Формат(Сч,"ЧЦ=3; ЧВН="),УнифицированнаяФормаТ13Отчет);
			
			// таким способом размещаются отчеты без форматов строк
			ОбластьПрямоугольная = УнифицированнаяФормаТ13Отчет.Область(1, 1, УнифицированнаяФормаТ13Отчет.ВысотаТаблицы, УнифицированнаяФормаТ13Отчет.ШиринаТаблицы);
			НачалоНовогоФорматаСтрок = ВыходнойДокумент.ВысотаТаблицы + 1;
			ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, , НачалоНовогоФорматаСтрок + УнифицированнаяФормаТ13Отчет.ВысотаТаблицы - 1, ).СоздатьФорматСтрок();
			// назначим ширину колонок у новой области формата строк
			Для Счетчик = 1 По УнифицированнаяФормаТ13Отчет.ШиринаТаблицы Цикл
				ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, Счетчик).ШиринаКолонки = УнифицированнаяФормаТ13Отчет.Область(1, Счетчик).ШиринаКолонки;
			КонецЦикла;
			ВыходнойДокумент.ВставитьОбласть(ОбластьПрямоугольная, ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, 1));
			
			ВыходнойДокумент.ЗакончитьГруппуСтрок();
			
			Сч = Сч + 1;
			
		КонецЕсли;
	КонецЦикла;
	ВыходнойДокумент.ТолькоПросмотр = Истина;
	ВыходнойДокумент.Защита = Истина;
	
КонецПроцедуры

// получает сведения, которые требуются для отработки действий
// 
Процедура ПолучитьСведенияОНачислениях()
	Перем СвойствоИнфоПоОрганизации;
	
	// получим сведения о местах работы
	ПолучитьСведенияОМестахРаботы();
	
	ДанныеПоНачислениям.Очистить();
	Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
		// просто наполняем соответствие организациями работника
		ИнфоПоОрганизации = Новый Структура(
		"Наименование,
		|НачислениеЗарплатыРаботникамОрганизаций,
		|НачислениеПоБольничномуЛисту,
		|НачислениеОтпускаРаботникамОрганизаций,
		|ЗарплатаКВыплатеОрганизаций,
		|ПремииРаботниковОрганизаций,
		|РегистрацияРазовыхНачисленийРаботниковОрганизаций", 
		МестоРаботы.ОрганизацияНаименование,
		Новый Массив,
		Новый Массив,
		Новый Массив,
		Новый Массив,
		Новый Массив,
		Новый Массив);
		ДанныеПоНачислениям[МестоРаботы.Организация] = ИнфоПоОрганизации;
		
	КонецЦикла;
	
	Запрос = Новый Запрос();
	
	// нужно проверить наличие документов начисления, больничных, отпусков, изменения плановых начислений, 
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	""НачислениеЗарплатыРаботникамОрганизаций"" КАК ВидДокумента,
	|	Начисления.Ссылка.Организация КАК Организация,
	|	Начисления.Ссылка КАК Документ,
	|	Начисления.Ссылка.Представление КАК Представление
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Сотрудник.Физлицо = &Физлицо
	|	И Начисления.Ссылка.ПериодРегистрации = &Месяц
	|	И Начисления.Ссылка.ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеЗарплатыРаботникамОрганизаций.ПустаяСсылка)
	|
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""НачислениеПоБольничномуЛисту"",
	|	Больничный.Организация,
	|	Больничный.Ссылка,
	|	Больничный.Представление
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту КАК Больничный
	|ГДЕ
	|	Больничный.Сотрудник.Физлицо = &Физлицо
	|	И Больничный.ПериодРегистрации = &Месяц
	|	И Больничный.ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""НачислениеОтпускаРаботникамОрганизаций"",
	|	Отпуск.Организация,
	|	Отпуск.Ссылка,
	|	Отпуск.Представление
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК Отпуск
	|ГДЕ
	|	Отпуск.Сотрудник.Физлицо = &Физлицо
	|	И Отпуск.ПериодРегистрации = &Месяц
	|	И Отпуск.ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеОтпускаРаботникамОрганизаций.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ЗарплатаКВыплатеОрганизаций"",
	|	Зарплата.Ссылка.Организация,
	|	Зарплата.Ссылка,
	|	Зарплата.Ссылка.Представление
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Зарплата
	|ГДЕ
	|	Зарплата.Сотрудник.Физлицо = &Физлицо
	|	И Зарплата.Ссылка.ПериодРегистрации = &Месяц
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ПремииРаботниковОрганизаций"",
	|	Начисления.Ссылка.Организация,
	|	Начисления.Ссылка,
	|	Начисления.Ссылка.Представление
	|ИЗ
	|	Документ.ПремииРаботниковОрганизаций.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Сотрудник.Физлицо = &Физлицо
	|	И Начисления.Ссылка.ПериодРегистрации = &Месяц
	|	И Начисления.Ссылка.ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.ПремииРаботниковОрганизаций.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""РегистрацияРазовыхНачисленийРаботниковОрганизаций"",
	|	Начисления.Ссылка.Организация,
	|	Начисления.Ссылка,
	|	Начисления.Ссылка.Представление
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК Начисления
	|ГДЕ
	|	Начисления.Сотрудник.Физлицо = &Физлицо
	|	И Начисления.Ссылка.ПериодРегистрации = &Месяц
	|	И Начисления.Ссылка.ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ПустаяСсылка)
	|";
	
	Запрос.УстановитьПараметр("Месяц", Месяц);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ДанныеПоНачислениям[Выборка.Организация] = НеОпределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеПоНачислениям[Выборка.Организация].Свойство(Выборка.ВидДокумента, СвойствоИнфоПоОрганизации);
		СвойствоИнфоПоОрганизации.Добавить(Новый Структура("Документ, Представление", Выборка.Документ, Выборка.Представление));
	КонецЦикла;
	
КонецПроцедуры

// обработка основных действий раздела РАСЧЕТЫ, ЗАРПЛАТА
Процедура НадписьНачислениеЗарплатыНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из ДанныеПоНачислениям Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.НачислениеЗарплатыРаботникамОрганизаций Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.НачислениеЗарплатыРаботникамОрганизаций.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Начислить по организации " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		СтрокаМеню = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьНачислениеЗарплаты);
		Если СтрокаМеню = НеОпределено Тогда
			Возврат;
		КонецЕсли;
		Значение = СтрокаМеню.Значение;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		// это создание начислений для организации
		Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
			// регистируем для каких подразделений уже создали начисления зарплаты
			ОбработанныеПодразделения = Новый Соответствие;
			Если МестоРаботы.Организация = Значение Тогда
				Если ОбработанныеПодразделения[МестоРаботы.Подразделение] = НеОпределено Тогда
					НовыйДокумент = Документы.НачислениеЗарплатыРаботникамОрганизаций.СоздатьДокумент();
					НовыйДокумент.Организация = МестоРаботы.Организация;
					НовыйДокумент.ПериодРегистрации = Месяц;
					НовыйДокумент.ПодразделениеОрганизации = МестоРаботы.Подразделение;
					ОбработанныеПодразделения[МестоРаботы.Подразделение] = МестоРаботы.Подразделение;
					НовыйДокумент.Дата = ТекущаяДата();
					НовыйДокумент.Записать();
					НовыйДокумент.ЗаполнитьРаботникиОрганизации();
					Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
					Форма.Открыть();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// это открытие существующего начисления
		Форма = Значение.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьПремииНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из ДанныеПоНачислениям Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.ПремииРаботниковОрганизаций Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.ПремииРаботниковОрганизаций.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Начислить премию по организации " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		СтрокаМеню = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьПремии);
		Если СтрокаМеню = НеОпределено Тогда
			Возврат;
		КонецЕсли;
		Значение = СтрокаМеню.Значение;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		НовыйДокумент = Документы.ПремииРаботниковОрганизаций.СоздатьДокумент();
		НовыйДокумент.Организация = Значение;
		НовыйДокумент.ПериодРегистрации = Месяц;
		НовыйДокумент.Дата = ТекущаяДата();
		Строка = НовыйДокумент.Начисления.Добавить();
		//Строка.Физлицо = Физлицо;
		// для заполнения сотрудника перебираем рабочие места
		Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
			Если МестоРаботы.Организация = Значение Тогда
				Строка.Сотрудник = МестоРаботы.Сотрудник;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Строка.Авторасчет = Истина;
		
		Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	Иначе
		// это открытие существующего начисления
		Форма = Значение.ПолучитьФорму();
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьРазовоеНачислениеНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из ДанныеПоНачислениям Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.РегистрацияРазовыхНачисленийРаботниковОрганизаций Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.РегистрацияРазовыхНачисленийРаботниковОрганизаций.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Ввести разовое начисление по организации " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		СтрокаМеню = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьРазовоеНачисление);
		Если СтрокаМеню = НеОпределено Тогда
			Возврат;
		КонецЕсли;
		Значение = СтрокаМеню.Значение;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		НовыйДокумент = Документы.РегистрацияРазовыхНачисленийРаботниковОрганизаций.СоздатьДокумент();
		НовыйДокумент.Организация = Значение;
		НовыйДокумент.ПериодРегистрации = Месяц;
		НовыйДокумент.Дата = ТекущаяДата();
		Строка = НовыйДокумент.ОсновныеНачисления.Добавить();
		Строка.Физлицо = Физлицо;
		// для заполнения сотрудника перебираем рабочие места
		Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
			Если МестоРаботы.Организация = Значение Тогда
				Строка.Сотрудник = МестоРаботы.Сотрудник;
				Строка.ПодразделениеОрганизации = МестоРаботы.Подразделение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Строка.Авторасчет = Истина;
		
		Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	Иначе
		// это открытие существующего начисления
		Форма = Значение.ПолучитьФорму();
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьВыплатаНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из ДанныеПоНачислениям Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.ЗарплатаКВыплатеОрганизаций Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.ЗарплатаКВыплатеОрганизаций.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Выплатить зарплату по организации " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		СтрокаМеню = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьВыплата);
		Если СтрокаМеню = НеОпределено Тогда
			Возврат;
		КонецЕсли;
		Значение = СтрокаМеню.Значение;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		НовыйДокумент = Документы.ЗарплатаКВыплатеОрганизаций.СоздатьДокумент();
		НовыйДокумент.Организация = Значение;
		НовыйДокумент.ПериодРегистрации = Месяц;
		НовыйДокумент.Дата = ТекущаяДата();
		//Строка = НовыйДокумент.Зарплата.Добавить();
		//Строка.Физлицо = Физлицо;
		//Строка.Авторасчет = Истина;
		
		Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	Иначе
		// это открытие существующего начисления
		Форма = Значение.ПолучитьФорму();
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьБольничныйНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из ДанныеПоНачислениям Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.НачислениеПоБольничномуЛисту Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.НачислениеПоБольничномуЛисту.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Ввести больничный лист по организации " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		СтрокаМеню = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьБольничный);
		Если СтрокаМеню = НеОпределено Тогда
			Возврат;
		КонецЕсли;
		Значение = СтрокаМеню.Значение;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		НовыйДокумент = Документы.НачислениеПоБольничномуЛисту.СоздатьДокумент();
		НовыйДокумент.Организация = Значение;
		НовыйДокумент.ПериодРегистрации = Месяц;
		НовыйДокумент.Дата = ТекущаяДата();
		НовыйДокумент.Физлицо = Физлицо;
		// для заполнения сотрудника перебираем рабочие места
		Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
			Если МестоРаботы.Организация = Значение Тогда
				НовыйДокумент.Сотрудник = МестоРаботы.Сотрудник;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	Иначе
		// это открытие существующего начисления
		Форма = Значение.ПолучитьФорму();
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьОтпускНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из ДанныеПоНачислениям Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.НачислениеОтпускаРаботникамОрганизаций Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.НачислениеОтпускаРаботникамОрганизаций.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Отправить в отпуск по организации " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		СтрокаМеню = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьОтпуск);
		Если СтрокаМеню = НеОпределено Тогда
			Возврат;
		КонецЕсли;
		Значение = СтрокаМеню.Значение;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		НовыйДокумент = Документы.НачислениеОтпускаРаботникамОрганизаций.СоздатьДокумент();
		НовыйДокумент.Организация = Значение;
		НовыйДокумент.ПериодРегистрации = Месяц;
		НовыйДокумент.Дата = ТекущаяДата();
		НовыйДокумент.Физлицо = Физлицо;
		// для заполнения сотрудника перебираем рабочие места
		Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
			Если МестоРаботы.Организация = Значение Тогда
				НовыйДокумент.Сотрудник = МестоРаботы.Сотрудник;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	Иначе
		// это открытие существующего начисления
		Форма = Значение.ПолучитьФорму();
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

// обработка гиперссылок - действия по открытию форм в отдельных окнах
//
Процедура РасчетыЗарплатаВыбор(Элемент, Область, СтандартнаяОбработка)
	Если Сред(Область.Имя, 4) = "ГиперссылкаРасчетныеЛисткиОрганизаций" Тогда
		ВыводимыйТабличныйДокумент = ДанныеТабличныхДокументовРасчетныеЛистки.Получить(Лев(Область.Имя,3));
		ТабличныйДокументОтдельно(ВыводимыйТабличныйДокумент, НСтр("ru='Расчетный листок (';uk='Розрахунковий листок ('") + Физлицо + ")");
	ИначеЕсли Сред(Область.Имя, 4) = "ГиперссылкаАнализНачисленийРаботникамОрганизаций" Тогда
		ВыводимыйТабличныйДокумент = ДанныеТабличныхДокументовАнализНачислений.Получить(Лев(Область.Имя,3));
		ТабличныйДокументОтдельно(ВыводимыйТабличныйДокумент, НСтр("ru='Анализ начислений (';uk='Аналіз нарахувань ('") + Физлицо + ")");
	ИначеЕсли Сред(Область.Имя, 4) = "ГиперссылкаРегламентированнаяФорма1НДФЛ" Тогда
		ВыводимыйТабличныйДокумент = ДанныеТабличныхДокументов1НДФЛ.Получить(Лев(Область.Имя,3));
		ТабличныйДокументОтдельно(ВыводимыйТабличныйДокумент, НСтр("ru='Налоговая карточка (';uk='Податкова картка ('") + Физлицо + ")");
	ИначеЕсли Сред(Область.Имя, 4) = "ГиперссылкаУнифицированнаяФормаТ13" Тогда
		ВыводимыйТабличныйДокумент = ДанныеТабличныхДокументовТ13.Получить(Лев(Область.Имя,3));
		ТабличныйДокументОтдельно(ВыводимыйТабличныйДокумент, НСтр("ru='Табель П-5 (';uk='Табель П-5 ('") + Физлицо + ")");
	КонецЕсли;
КонецПроцедуры

Процедура РасчетыЗарплатаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Соответствие") Тогда
		
		Если Расшифровка.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		Если Расшифровка.Количество() = 1 Тогда
			Для Каждого ЭлементСоответствия Из Расшифровка Цикл
				ОткрытьЗначение(ЭлементСоответствия.Ключ);
				Возврат;
			КонецЦикла;
		КонецЕсли;
		СписокМеню = Новый СписокЗначений;
		Для Каждого ЭлементСоответствия Из Расшифровка Цикл
			СписокМеню.Добавить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла;
		Результат = ВыбратьИзМеню(СписокМеню);
		Если Результат = НеОпределено Тогда
			Возврат;
		КонецЕсли;
		ОткрытьЗначение(Результат.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ДействиеНовыйДокумент(Кнопка)
	Форма = Документы[Кнопка.Имя].ПолучитьФормуНовогоДокумента(, ЭтаФорма);
	Форма.Открыть();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ  КАДРОВЫЕ ДАННЫЕ

// формирует раздел
Процедура СформироватьДанныеКадровыеДанные()
	
	Если мДанныеКадровыеДанныеСформированы Тогда
		Возврат;
	КонецЕсли;
	мДанныеКадровыеДанныеСформированы = Истина;
	
	// обновить динамические списки
	УчетКадровОрганизаций.Обновить();
	
	// Сбор данных о состоянии работника в организациях.
	ПолучитьМестаРаботыИСостоянияРаботника();
	
	ПолучитьКадровыеДанные();
	
	// настройка надписей раздела Действия и документы
	ЭлементыФормы.НадписьПриемНаРаботу.Заголовок = НСтр("ru='Принять на работу';uk='Прийняти на роботу'");
	ЭлементыФормы.НадписьКадровоеПеремещение.Заголовок = НСтр("ru='Переместить';uk='Перемістити'");
	ЭлементыФормы.НадписьУвольнение.Заголовок = НСтр("ru='Уволить';uk='Звільнити'");
	Для Каждого ИнфоПоОрганизации Из КадровыеДанные Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.ПриемНаРаботуВОрганизацию Цикл
			ЭлементыФормы.НадписьПриемНаРаботу.Заголовок = НСтр("ru='Прием на работу';uk='Прийом на роботу'");
			Прервать;
		КонецЦикла;
		Для Каждого Документ из ИнфоПоОрганизации.Значение.КадровоеПеремещениеОрганизаций Цикл
			ЭлементыФормы.НадписьКадровоеПеремещение.Заголовок = НСтр("ru='Кадровое перемещение';uk='Кадрове переміщення'");
			Прервать;
		КонецЦикла;
		Для Каждого Документ из ИнфоПоОрганизации.Значение.УвольнениеИзОрганизаций Цикл
			ЭлементыФормы.НадписьУвольнение.Заголовок = НСтр("ru='Увольнение';uk='Звільнення'");
			Прервать;
		КонецЦикла;
	КонецЦикла;
	
	// Вывод данных в табличный документ
	ВыходнойДокумент = ЭлементыФормы.КадровыеДанные;
	
	// восстановление раскрытых группировок отчета
	ГруппировкаТ2Раскрыта = Ложь;
	Если ОбластьТ2Организаций <> НеОпределено и ОбластьТ2Организаций.Видимость Тогда
		ГруппировкаТ2Раскрыта = Истина;
	КонецЕсли;
	ВыходнойДокумент.Очистить();
	Макет = ПолучитьМакет("КадровыеДанные");
	Макет.КодЯзыкаМакета = Локализация.КодЯзыкаИнтерфейса();
	ПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	ОбластьФизлицо = Макет.ПолучитьОбласть("Физлицо");
	ОбластьФизлицо.Параметры.Физлицо = Физлицо;
	ВыходнойДокумент.Вывести(ОбластьФизлицо);
	
	Если МестаРаботыИСостоянияФизлица.Количество() <> 0 Тогда
		
		Область = Макет.ПолучитьОбласть("МестаРаботыЗаголовок");
		ВыходнойДокумент.Вывести(Область);
		Область = Макет.ПолучитьОбласть("МестаРаботыСтрока");
		Для Каждого МестоРаботы Из МестаРаботыИСостоянияФизлица Цикл
			
			Область.Параметры.Заполнить(МестоРаботы);
			ВыходнойДокумент.Вывести(Область);
			
		КонецЦикла;
		
		// Поиск не проведенных документов
		РезультатВыборки = НеПроведенныеКадровыеДокументы();
		
		Если НЕ РезультатВыборки.Пустой() Тогда
			
			Область = Макет.ПолучитьОбласть("ДокументыНеПроведены");
			Область.Параметры.ТекстДокументыНеПроведены = НСтр("ru='ВНИМАНИЕ! Обнаружены не проведенные кадровые документы!';uk='УВАГА! Виявлені не проведені кадрові документи!'");
			ВыходнойДокумент.Вывести(Область);
			
		КонецЕсли; 
		
		// Отчеты
		ОтчетТ2Организаций = Отчеты.ЛичнаяКарточка.Создать();
		ОбработанныеОрганизации = Новый Соответствие;
		Сч = 1; 
		Для Каждого МестоРаботы Из МестаРаботыИСостоянияФизлица Цикл
			// Отчеты выводятся только по регистру РаботникиОрганизаций.
			Если МестоРаботы.ВидРегистра = "РаботникиОрганизаций" Тогда
				
				Если ОбработанныеОрганизации[МестоРаботы.Организация] = НеОпределено Тогда
					
					ОбработанныеОрганизации[МестоРаботы.Организация] = Истина;
					Область = Макет.ПолучитьОбласть("Организация");
					Область.Параметры.ОрганизацияНаименование = МестоРаботы.ОрганизацияНаименование;
					Область.Параметры.Организация = МестоРаботы.Организация;
					ВыходнойДокумент.Вывести(Область);
					ВыходнойДокумент.Вывести(ПустаяСтрока);
					
					Область = Макет.ПолучитьОбласть("ОтчетТ2");
					ИмяЯчейкиОтчета = Область.Области.ГиперссылкаТ2.Имя;
					Область.Области.ГиперссылкаТ2.Имя = Формат(Сч,"ЧЦ=3; ЧВН=") + ИмяЯчейкиОтчета;
					ВыходнойДокумент.Вывести(ПустаяСтрока);
					ВыходнойДокумент.Вывести(Область);
					
					// начнем группировку
					ВыходнойДокумент.НачатьГруппуСтрок(, ГруппировкаТ2Раскрыта);
					ВыходнойДокумент.Вывести(ПустаяСтрока);
					ОбластьТ2Организаций = ВыходнойДокумент.Область(ВыходнойДокумент.ВысотаТаблицы, , ВыходнойДокумент.ВысотаТаблицы, );
					
					ОтчетТ2Организаций.ДатаАктуальности = НачалоМесяца(Месяц);
					ОтчетТ2Организаций.Работник = МестоРаботы.Сотрудник;
					
					Т2ОрганизацийОтчет = Новый ТабличныйДокумент;
					ОтчетТ2Организаций.ПечатьФорма2009(Т2ОрганизацийОтчет, НачалоМесяца(Месяц),МестоРаботы.Сотрудник, МестоРаботы.Сотрудник.Организация, МестоРаботы.Сотрудник);
					
					
					// Для вывода отчетов в отдельных окнах
					ДанныеТабличныхДокументовТ2.Вставить(Формат(Сч,"ЧЦ=3; ЧВН="),Т2ОрганизацийОтчет);
					
					// таким способом размещаются отчеты без форматов строк
					ОбластьПрямоугольная = Т2ОрганизацийОтчет.Область(1, 1, Т2ОрганизацийОтчет.ВысотаТаблицы, Т2ОрганизацийОтчет.ШиринаТаблицы);
					НачалоНовогоФорматаСтрок = ВыходнойДокумент.ВысотаТаблицы + 1;
					ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, , НачалоНовогоФорматаСтрок + Т2ОрганизацийОтчет.ВысотаТаблицы - 1, ).СоздатьФорматСтрок();
					// назначим ширину колонок у новой области формата строк
					Для Счетчик = 1 По Т2ОрганизацийОтчет.ШиринаТаблицы Цикл
						ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, Счетчик).ШиринаКолонки = Т2ОрганизацийОтчет.Область(1, Счетчик).ШиринаКолонки;
					КонецЦикла;
					ВыходнойДокумент.ВставитьОбласть(ОбластьПрямоугольная, ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, 1));
					
					ВыходнойДокумент.ЗакончитьГруппуСтрок();
					
					Сч = Сч + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	ВыходнойДокумент.ТолькоПросмотр = Истина;
	ВыходнойДокумент.Защита = Истина;
	
КонецПроцедуры

// получает сведения, которые требуются для отработки действий
// 
Процедура ПолучитьКадровыеДанные()
	
	Перем СвойствоИнфоПоОрганизации;
	
	КадровыеДанные.Очистить();
	КадровыеДанныеПриемНаРаботу.Очистить();
	// Формирование КадровыДанных по местам работы работника
	Для Каждого МестоРаботы Из МестаРаботыИСостоянияФизлица Цикл
		
		Если МестоРаботы.ВидРегистра = "РаботникиОрганизаций" Тогда
			
			ИнфоПоКадрамОрганизации = Новый Структура(
			"Наименование,
			|ПриемНаРаботуВОрганизацию,
			|КадровоеПеремещениеОрганизаций,
			|ОтпускаОрганизаций,
			|КомандировкиОрганизаций,
			|УвольнениеИзОрганизаций", 
			МестоРаботы.ОрганизацияНаименование,
			Новый Массив,
			Новый Массив,
			Новый Массив,
			Новый Массив,
			Новый Массив);
			КадровыеДанные[МестоРаботы.Организация] = ИнфоПоКадрамОрганизации;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Формирование КадровыДанных по всем организациям (для формирования списка документов "Прием на работу в организиацию").
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИнфоПоКадрамОрганизации = Новый Структура(
		"Наименование,
		|ПриемНаРаботуВОрганизацию,
		|КадровоеПеремещениеОрганизаций,
		|ОтпускаОрганизаций,
		|КомандировкиОрганизаций,
		|УвольнениеИзОрганизаций", 
		Выборка.Наименование,
		Новый Массив,
		Новый Массив,
		Новый Массив,
		Новый Массив,
		Новый Массив);
		КадровыеДанныеПриемНаРаботу[Выборка.Ссылка] = ИнфоПоКадрамОрганизации;
	КонецЦикла;
	
	Если МестаРаботыИСостоянияФизлица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сведения.ВидДокумента,
	|	Сведения.Организация,
	|	Сведения.Представление,
	|	Сведения.Документ
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		""КадровоеПеремещениеОрганизаций"" КАК ВидДокумента,
	|		КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Организация КАК Организация,
	|		КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Ссылка КАК Документ,
	|		КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Представление КАК Представление
	|	ИЗ
	|		Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацийРаботникиОрганизации
	|	ГДЕ
	|		КадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник.ФизЛицо = &ФизЛицо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ 
	|		""ПриемНаРаботуВОрганизацию"",
	|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация,
	|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка,
	|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Представление
	|	ИЗ
	|		Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|	ГДЕ
	|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник.ФизЛицо = &ФизЛицо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ 
	|		""УвольнениеИзОрганизаций"",
	|		УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Организация,
	|		УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка,
	|		УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Представление
	|	ИЗ
	|		Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацийРаботникиОрганизации
	|	ГДЕ
	|		УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.Физлицо = &Физлицо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		""КомандировкиОрганизаций"",
	|		КомандировкиОрганизацийРаботникиОрганизации.Ссылка.Организация,
	|		КомандировкиОрганизацийРаботникиОрганизации.Ссылка,
	|		КомандировкиОрганизацийРаботникиОрганизации.Ссылка.Представление
	|	ИЗ
	|		Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК КомандировкиОрганизацийРаботникиОрганизации
	|	ГДЕ
	|		КомандировкиОрганизацийРаботникиОрганизации.Сотрудник.ФизЛицо = &ФизЛицо
	|		И КомандировкиОрганизацийРаботникиОрганизации.ДатаНачала МЕЖДУ &Начало И &Конец
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		""ОтпускаОрганизаций"",
	|		ОтпускаОрганизацийРаботникиОрганизации.Ссылка.Организация,
	|		ОтпускаОрганизацийРаботникиОрганизации.Ссылка,
	|		ОтпускаОрганизацийРаботникиОрганизации.Ссылка.Представление
	|	ИЗ
	|		Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
	|	ГДЕ
	|		ОтпускаОрганизацийРаботникиОрганизации.Сотрудник.ФизЛицо = &ФизЛицо
	|		И ОтпускаОрганизацийРаботникиОрганизации.ДатаНачала МЕЖДУ &Начало И &Конец
	|) КАК Сведения";
	
	Запрос.УстановитьПараметр("ФизЛицо", Физлицо);
	Запрос.УстановитьПараметр("Начало", НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("Конец", КонецМесяца(Месяц));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если КадровыеДанные[Выборка.Организация] = НеОпределено Тогда
			Продолжить;
		КонецЕсли;
		КадровыеДанные[Выборка.Организация].Свойство(Выборка.ВидДокумента, СвойствоИнфоПоОрганизации);
		СвойствоИнфоПоОрганизации.Добавить(Новый Структура("Документ, Представление", Выборка.Документ, Выборка.Представление));
		Если КадровыеДанныеПриемНаРаботу[Выборка.Организация] = НеОпределено Тогда
			Продолжить;
		КонецЕсли;
		КадровыеДанныеПриемНаРаботу[Выборка.Организация].Свойство(Выборка.ВидДокумента, СвойствоИнфоПоОрганизации);
		СвойствоИнфоПоОрганизации.Добавить(Новый Структура("Документ, Представление", Выборка.Документ, Выборка.Представление));
	КонецЦикла;
	
КонецПроцедуры

// Формирует список непроведенных кадровых документов
Функция НеПроведенныеКадровыеДокументы()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратНаРаботуОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВозвратНаРаботуОрганизаций КАК ВозвратНаРаботуОрганизаций
	|ГДЕ
	|	ВозвратНаРаботуОрганизаций.РаботникиОрганизации.Сотрудник.Физлицо = &ФизЛицо
	|	И ВозвратНаРаботуОрганизаций.РаботникиОрганизации.ДатаВозврата МЕЖДУ &Начало И &Конец
	|	И (НЕ ВозвратНаРаботуОрганизаций.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КомандировкиОрганизаций.Ссылка
	|ИЗ
	|	Документ.КомандировкиОрганизаций КАК КомандировкиОрганизаций
	|ГДЕ
	|	КомандировкиОрганизаций.РаботникиОрганизации.Сотрудник.Физлицо = &ФизЛицо
	|	И КомандировкиОрганизаций.РаботникиОрганизации.ДатаНачала МЕЖДУ &Начало И &Конец
	|	И (НЕ КомандировкиОрганизаций.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускаОрганизаций.Ссылка
	|ИЗ
	|	Документ.ОтпускаОрганизаций КАК ОтпускаОрганизаций
	|ГДЕ
	|	ОтпускаОрганизаций.РаботникиОрганизации.Сотрудник.Физлицо = &ФизЛицо
	|	И ОтпускаОрганизаций.РаботникиОрганизации.ДатаНачала МЕЖДУ &Начало И &Конец
	|	И (НЕ ОтпускаОрганизаций.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтсутствиеНаРаботеОрганизаций.Ссылка
	|ИЗ
	|	Документ.ОтсутствиеНаРаботеОрганизаций КАК ОтсутствиеНаРаботеОрганизаций
	|ГДЕ
	|	ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации.Сотрудник.Физлицо = &ФизЛицо
	|	И ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации.ДатаНачала МЕЖДУ &Начало И &Конец
	|	И (НЕ ОтсутствиеНаРаботеОрганизаций.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриемНаРаботуВОрганизацию.Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
	|ГДЕ
	|	ПриемНаРаботуВОрганизацию.РаботникиОрганизации.Сотрудник.Физлицо = &ФизЛицо
	|	И ПриемНаРаботуВОрганизацию.РаботникиОрганизации.ДатаПриема МЕЖДУ &Начало И &Конец
	|	И (НЕ ПриемНаРаботуВОрганизацию.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КадровоеПеремещениеОрганизаций.Ссылка
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
	|ГДЕ
	|	КадровоеПеремещениеОрганизаций.РаботникиОрганизации.Сотрудник.Физлицо = &ФизЛицо
	|	И КадровоеПеремещениеОрганизаций.РаботникиОрганизации.ДатаНачала МЕЖДУ &Начало И &Конец
	|	И (НЕ КадровоеПеремещениеОрганизаций.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УвольнениеИзОрганизаций.Ссылка
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций КАК УвольнениеИзОрганизаций
	|ГДЕ
	|	УвольнениеИзОрганизаций.РаботникиОрганизации.Сотрудник.Физлицо = &Физлицо
	|	И УвольнениеИзОрганизаций.РаботникиОрганизации.ДатаУвольнения МЕЖДУ &Начало И &Конец
	|	И (НЕ УвольнениеИзОрганизаций.Проведен)";
	
	Запрос.УстановитьПараметр("ФизЛицо",	Физлицо);
	Запрос.УстановитьПараметр("Начало",		НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("Конец",		КонецМесяца(Месяц));
	Запрос.УстановитьПараметр("Проведен",	Ложь);
	
	Возврат Запрос.Выполнить()
	
КонецФункции

Процедура НадписьПриемНаРаботуНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из КадровыеДанныеПриемНаРаботу Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.ПриемНаРаботуВОрганизацию Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.ПриемНаРаботуВОрганизацию.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Принять в организацию " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		ЗначениеВыбора = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьПриемНаРаботу);
		Если ЗначениеВыбора <> Неопределено Тогда
			Значение = ЗначениеВыбора.Значение;
		Иначе
			Возврат
		КонецЕсли; 
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		НовыйДокумент = Документы.ПриемНаРаботуВОрганизацию.СоздатьДокумент();
		НовыйДокумент.Организация = Значение;
		НовыйДокумент.Дата = ТекущаяДата();
		Строка = НовыйДокумент.РаботникиОрганизации.Добавить();
		Строка.ФизЛицо			= Физлицо;
		Строка.ЗанимаемыхСтавок	= 1;
		Строка.ДатаПриема		= ТекущаяДата();
		Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	Иначе
		// это открытие существующего документа
		Форма = Значение.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьУвольнениеНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из КадровыеДанные Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.УвольнениеИзОрганизаций Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.УвольнениеИзОрганизаций.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Уволить из организации " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		ЗначениеВыбора = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьУвольнение);
		Если ЗначениеВыбора <> Неопределено Тогда
			Значение = ЗначениеВыбора.Значение;
		Иначе
			Возврат
		КонецЕсли; 
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		// это создание приема на работу для организации
		Для Каждого МестоРаботы Из МестаРаботыИСостоянияФизлица Цикл
			// регистируем для каких подразделений уже создали документ
			ОбработанныеПодразделения = Новый Соответствие;
			Если МестоРаботы.Организация = Значение Тогда
				Если ОбработанныеПодразделения[МестоРаботы.Подразделение] = НеОпределено Тогда
					НовыйДокумент = Документы.УвольнениеИзОрганизаций.СоздатьДокумент();
					НовыйДокумент.Организация = МестоРаботы.Организация;
					ОбработанныеПодразделения[МестоРаботы.Подразделение] = МестоРаботы.Подразделение;
					НовыйДокумент.Дата = ТекущаяДата();
					Строка = НовыйДокумент.РаботникиОрганизации.Добавить();
					Строка.ФизЛицо = Физлицо;
					// для заполнения сотрудника перебираем рабочие места
					Для Каждого МестоРаботы Из МестаРаботыИСостоянияФизлица Цикл
						Если МестоРаботы.ВидРегистра = "РаботникиОрганизаций" Тогда
							Если МестоРаботы.Организация = Значение Тогда
								Строка.Сотрудник = МестоРаботы.Сотрудник;
							КонецЕсли; 
						КонецЕсли;
					КонецЦикла;
					Строка.ДатаУвольнения = ТекущаяДата();
					Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
					Форма.Открыть();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// это открытие существующего документа
		Форма = Значение.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьКадровоеПеремещениеНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из КадровыеДанные Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.КадровоеПеремещениеОрганизаций Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.КадровоеПеремещениеОрганизаций.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Перемещение по организации " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		ЗначениеВыбора = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьКадровоеПеремещение);
		Если ЗначениеВыбора <> Неопределено Тогда
			Значение = ЗначениеВыбора.Значение;
		Иначе
			Возврат
		КонецЕсли; 
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		НовыйДокумент = Документы.КадровоеПеремещениеОрганизаций.СоздатьДокумент();
		НовыйДокумент.Организация = Значение;
		НовыйДокумент.Дата = ТекущаяДата();
		Строка = НовыйДокумент.РаботникиОрганизации.Добавить();
		Строка.ФизЛицо = Физлицо;
		Строка.ДатаНачала = ТекущаяДата();
		Для Каждого МестоРаботы Из МестаРаботыИСостоянияФизлица Цикл
			Если МестоРаботы.ВидРегистра = "РаботникиОрганизаций" Тогда
				Если МестоРаботы.Организация = Значение Тогда
					Строка.Сотрудник = МестоРаботы.Сотрудник;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	Иначе
		// это открытие существующего документа
		Форма = Значение.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьВОтпускНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из КадровыеДанные Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.ОтпускаОрганизаций Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.ОтпускаОрганизаций.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Отпуск по организации " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		ЗначениеВыбора = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьВОтпуск);
		Если ЗначениеВыбора <> Неопределено Тогда
			Значение = ЗначениеВыбора.Значение;
		Иначе
			Возврат
		КонецЕсли; 
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		НовыйДокумент = Документы.ОтпускаОрганизаций.СоздатьДокумент();
		НовыйДокумент.Организация = Значение;
		НовыйДокумент.Дата = ТекущаяДата();
		Строка = НовыйДокумент.РаботникиОрганизации.Добавить();
		Строка.ФизЛицо = Физлицо;
		Строка.ДатаНачала = ТекущаяДата();
		Для Каждого МестоРаботы Из МестаРаботыИСостоянияФизлица Цикл
			Если МестоРаботы.ВидРегистра = "РаботникиОрганизаций" Тогда
				Если МестоРаботы.Организация = Значение Тогда
					Строка.Сотрудник = МестоРаботы.Сотрудник;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	Иначе
		// это открытие существующего документа
		Форма = Значение.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьКомандировкаНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из КадровыеДанные Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.КомандировкиОрганизаций Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.КомандировкиОрганизаций.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Командировка по организации " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		ЗначениеВыбора = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьКомандировка);
		Если ЗначениеВыбора <> Неопределено Тогда
			Значение = ЗначениеВыбора.Значение;
		Иначе
			Возврат
		КонецЕсли; 
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		НовыйДокумент = Документы.КомандировкиОрганизаций.СоздатьДокумент();
		НовыйДокумент.Организация = Значение;
		НовыйДокумент.Дата = ТекущаяДата();
		Строка = НовыйДокумент.РаботникиОрганизации.Добавить();
		Строка.ФизЛицо = Физлицо;
		Строка.ДатаНачала = ТекущаяДата();
		Для Каждого МестоРаботы Из МестаРаботыИСостоянияФизлица Цикл
			Если МестоРаботы.ВидРегистра = "РаботникиОрганизаций" Тогда
				Если МестоРаботы.Организация = Значение Тогда
					Строка.Сотрудник = МестоРаботы.Сотрудник;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	Иначе
		// это открытие существующего документа
		Форма = Значение.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

// обработка гиперссылок - действия по открытию форм в отдельных окнах
//
Процедура КадровыеДанныеВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Сред(Область.Имя,4) = "ГиперссылкаТ2" Тогда
		ВыводимыйТабличныйДокумент = ДанныеТабличныхДокументовТ2.Получить(Лев(Область.Имя,3));
		ТабличныйДокументОтдельно(ВыводимыйТабличныйДокумент, НСтр("ru='Личная карточка П2 (';uk='Особова картка П2 ('") + Физлицо + ")");
	КонецЕсли;
	
КонецПроцедуры

Процедура КадровыеДанныеОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("Соответствие") Тогда
		СтандартнаяОбработка = Ложь;
		Если Расшифровка.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		Если Расшифровка.Количество() = 1 Тогда
			Для Каждого ЭлементСоответствия Из Расшифровка Цикл
				ОткрытьЗначение(ЭлементСоответствия.Ключ);
				Возврат;
			КонецЦикла;
		КонецЕсли;
		СписокМеню = Новый СписокЗначений;
		Для Каждого ЭлементСоответствия Из Расшифровка Цикл
			СписокМеню.Добавить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла;
		Результат = ВыбратьИзМеню(СписокМеню);
		Если Результат = НеОпределено Тогда
			Возврат;
		КонецЕсли;
		ОткрытьЗначение(Результат.Значение);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ НАЛОГИ

// формирует раздел
Процедура СформироватьДанныеНалоги()
	
	Если мДанныеНалогиСформированы Тогда
		Возврат;
	КонецЕсли;
	мДанныеНалогиСформированы = Истина;
	
	// обновить динамические списки
	НалогиОрганизаций.Обновить();
	
	ПолучитьСведенияОНалогах();
	
	// настройка надписей раздела Действия и документы
	
	// заполнения табличного документа с отчетами
	ВыходнойДокумент = ЭлементыФормы.Налоги;
	
	// восстановление раскрытых группировок отчета
	ГруппировкаРегламентированнаяФормаКарточкаПоЕСН = Ложь;
	Если ОбластьРегламентированнаяФормаКарточкаПоЕСН <> НеОпределено и ОбластьРегламентированнаяФормаКарточкаПоЕСН.Видимость Тогда
		ГруппировкаРегламентированнаяФормаКарточкаПоЕСН = Истина;
	КонецЕсли;
	
	ГруппировкаРегламентированнаяФормаКарточкаПоОПС = Ложь;
	Если ОбластьРегламентированнаяФормаКарточкаПоОПС <> НеОпределено и ОбластьРегламентированнаяФормаКарточкаПоОПС.Видимость Тогда
		ГруппировкаРегламентированнаяФормаКарточкаПоОПС = Истина;
	КонецЕсли;
	
	ВыходнойДокумент.Очистить();
	
	Макет = ПолучитьМакет("Налоги");
	Макет.КодЯзыкаМакета = Локализация.КодЯзыкаИнтерфейса();
	ПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	ОбластьФизлицо = Макет.ПолучитьОбласть("Физлицо");
	ОбластьФизлицо.Параметры.Физлицо = Физлицо;
	ОбластьФизлицо.Параметры.Месяц = Формат(Месяц, "ДФ='ММММ гггг ''г.'''");
	ВыходнойДокумент.Вывести(ОбластьФизлицо);
	
	// выводим сведения о местах работы
	Если МестаРаботыФизлица.Количество() <> 0 Тогда
		Область = Макет.ПолучитьОбласть("МестаРаботыЗаголовок");
		ВыходнойДокумент.Вывести(Область);
		Область = Макет.ПолучитьОбласть("МестаРаботыСтрока");
		Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
			Область.Параметры.Заполнить(МестоРаботы);
			ВыходнойДокумент.Вывести(Область);
		КонецЦикла;
	КонецЕсли;
	
	// Поиск не проведенных документов
	РезультатВыборки = НеПроведенныеДокументыПоНалогам();
	
	Если НЕ РезультатВыборки.Пустой() Тогда
		
		Область = Макет.ПолучитьОбласть("ДокументыНеПроведены");
		Область.Параметры.ТекстДокументыНеПроведены = НСтр("ru='ВНИМАНИЕ! Обнаружены не проведенные документы по расчету налогов!';uk='УВАГА! Виявлені не проведені документи за розрахунками податків!'");
		ВыходнойДокумент.Вывести(Область);
		
	КонецЕсли; 
	
	ВыходнойДокумент.ТолькоПросмотр = Истина;
	ВыходнойДокумент.Защита = Истина;
	
КонецПроцедуры

// получает сведения, которые требуются для отработки действий
// 
Процедура ПолучитьСведенияОНалогах()
	
	Перем СвойствоИнфоПоОрганизации;
	
	// получим сведения о местах работы
	ПолучитьСведенияОМестахРаботы();
	
	ДанныеПоНалогам.Очистить();
	Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
		// просто наполняем соответствие организациями работника
		ИнфоПоОрганизации = Новый Структура(
		"Наименование,
		|РасчетЕСН,
		|ОтражениеЗарплатыВРеглУчете", 
		МестоРаботы.ОрганизацияНаименование,
		Новый Массив,
		Новый Массив);
		ДанныеПоНалогам[МестоРаботы.Организация] = ИнфоПоОрганизации;
		
	КонецЦикла;
	
	Запрос = новый запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сведения.ВидДокумента,
	|	Сведения.Организация,
	|	Сведения.Документ,
	|	Сведения.Представление
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Ссылка КАК Документ,
	|		ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Ссылка.Организация КАК Организация,
	|		ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Ссылка.Представление КАК Представление,
	|		""ОтражениеЗарплатыВРеглУчете"" КАК ВидДокумента
	|	ИЗ
	|		Документ.ОтражениеЗарплатыВРеглУчете.Начисления КАК ОтражениеЗарплатыВРеглУчетеОсновныеНачисления
	|	ГДЕ
	|		ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Сотрудник.ФизЛицо = &ФизЛицо
	|		И ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Ссылка.ПериодРегистрации = &Месяц) КАК Сведения";
	
	Запрос.УстановитьПараметр("Месяц", Месяц);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ДанныеПоНалогам[Выборка.Организация] = НеОпределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеПоНалогам[Выборка.Организация].Свойство(Выборка.ВидДокумента, СвойствоИнфоПоОрганизации);
		СвойствоИнфоПоОрганизации.Добавить(Новый Структура("Документ, Представление", Выборка.Документ, Выборка.Представление));
	КонецЦикла;
	
КонецПроцедуры

// Формирует список непроведенных кадровых документов
Функция НеПроведенныеДокументыПоНалогам()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Ссылка
	|ИЗ
	|	Документ.ОтражениеЗарплатыВРеглУчете.Начисления КАК ОтражениеЗарплатыВРеглУчетеОсновныеНачисления
	|ГДЕ
	|	ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Ссылка.Проведен = &Проведен
	|	И ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Ссылка.ПериодРегистрации = &ПериодРегистрации
	|	И ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Сотрудник.ФизЛицо = &ФизЛицо
	|";
	
	Запрос.УстановитьПараметр("ФизЛицо", Физлицо);
	Запрос.УстановитьПараметр("ПериодРегистрации",Месяц);
	Запрос.УстановитьПараметр("Проведен", Ложь);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // НеПроведенныеДокументыПоНалогам()

Процедура НадписьОтражениеЗПвРеглУчетеНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из ДанныеПоНалогам Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.ОтражениеЗарплатыВРеглУчете Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.ОтражениеЗарплатыВРеглУчете.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Отражение зарплаты в регл. учете " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		ЗначениеВыбора = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьОтражениеЗПвРеглУчете);
		Если ЗначениеВыбора <> Неопределено Тогда
			Значение = ЗначениеВыбора.Значение;
		Иначе
			Возврат
		КонецЕсли; 
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		// это создание "отражения в реглучете"
		НовыйДокумент = Документы.ОтражениеЗарплатыВРеглУчете.СоздатьДокумент();
		НовыйДокумент.Организация = Значение;
		НовыйДокумент.Дата = ТекущаяДата();
		НовыйДокумент.ПериодРегистрации = Месяц;
		Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	Иначе
		// это открытие существующего документа
		Форма = Значение.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

// обработка гиперссылок - действия по открытию форм в отдельных окнах
//
Процедура НалогиВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Сред(Область.Имя,4) = "ГиперссылкаЕСН" Тогда
		ВыводимыйТабличныйДокумент = ДанныеТабличныхДокументовЕСН.Получить(Лев(Область.Имя,3));
		ТабличныйДокументОтдельно(ВыводимыйТабличныйДокумент, "Карточка по ЕСН (" + Физлицо + ")");
	ИначеЕсли Сред(Область.Имя,4) = "ГиперссылкаОПС" Тогда
		ВыводимыйТабличныйДокумент = ДанныеТабличныхДокументовОПС.Получить(Лев(Область.Имя,3));
		ТабличныйДокументОтдельно(ВыводимыйТабличныйДокумент, "Карточка по ОПС (" + Физлицо + ")");
	КонецЕсли;
	
КонецПроцедуры

Процедура НалогиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("Соответствие") Тогда
		СтандартнаяОбработка = Ложь;
		Если Расшифровка.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		Если Расшифровка.Количество() = 1 Тогда
			Для Каждого ЭлементСоответствия Из Расшифровка Цикл
				ОткрытьЗначение(ЭлементСоответствия.Ключ);
				Возврат;
			КонецЦикла;
		КонецЕсли;
		СписокМеню = Новый СписокЗначений;
		Для Каждого ЭлементСоответствия Из Расшифровка Цикл
			СписокМеню.Добавить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла;
		Результат = ВыбратьИзМеню(СписокМеню);
		Если Результат = НеОпределено Тогда
			Возврат;
		КонецЕсли;
		ОткрытьЗначение(Результат.Значение);
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// МЕСЯЦ СТРОКОЙ

Процедура МесяцСтрокаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
КонецПроцедуры

Процедура МесяцСтрокаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
КонецПроцедуры

Процедура МесяцСтрокаПриИзменении(Элемент)
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, Месяц);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(Месяц);
	ПриИзмененииМесяца();
	ОбновитьДанные();    
КонецПроцедуры

Процедура МесяцСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Месяц = ДобавитьМесяц(Месяц, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(Месяц);
	ПриИзмененииМесяца();
	ОбновитьДанные();    
КонецПроцедуры

Процедура МесяцСтрокаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура МесяцСтрокаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, Месяц, ЭтаФорма);
	ПриИзмененииМесяца();
	ОбновитьДанные();    
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ

мДанныеРасчетыЗарплатаСформированы = Ложь;
мДанныеПлановыеДанныеСформированы = Ложь;
мДанныеНалоговаяКарточкаСформированы = Ложь;
мДанныеКадровыеДанныеСформированы = Ложь;
мДанныеОсновноеСформированы = Ложь;
мДанныеНалогиСформированы = Ложь;
мДанныеКарточкаПоЕСНСформированы = Ложь;
мДанныеКарточкаПоОПССформированы = Ложь;

ПрежнийМесяц = '00010101';

МестаРаботыФизлица = Новый Массив;
МестаРаботыИСостоянияФизлица = Новый Массив;
ДанныеПоНачислениям = Новый Соответствие;
ДанныеПоПлановымРасчетам = Новый Соответствие;
КадровыеДанные = Новый Соответствие;
КадровыеДанныеПриемНаРаботу = Новый Соответствие;
ДанныеПоНалогам = Новый Соответствие;

// соответствия табличных документов
ДанныеТабличныхДокументов1НДФЛ = Новый Соответствие;
ДанныеТабличныхДокументовАнализНачислений = Новый Соответствие;
ДанныеТабличныхДокументовРасчетныеЛистки = Новый Соответствие;
ДанныеТабличныхДокументовТ13 = Новый Соответствие;
ДанныеТабличныхДокументовТ3 = Новый Соответствие;
ДанныеТабличныхДокументовТ2 = Новый Соответствие;
ДанныеТабличныхДокументовЕСН = Новый Соответствие;
ДанныеТабличныхДокументовОПС = Новый Соответствие;
