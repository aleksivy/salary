////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ Печати
//

#Если Клиент Тогда

// Формирует запрос по документу и связанным регистрам сведений
//
// Параметры: 
//  Режим - строка, может принимать значения:
//			"ПоРеквизитамДокумента"
//			"ПоТабличнойЧастиДокумента"
//
// Возвращаемое значение:
//  Результат запроса с данными об организации или о работниках из табличной части
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	 Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",	 Дата);
	Запрос.УстановитьПараметр("Организация",	 Организация);
	Запрос.УстановитьПараметр("СпособРасчетаПроцентом",	 Перечисления.СпособыРасчетаОплатыТруда.Процентом);

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПремииРаботниковОрганизаций.Дата КАК ДатаДок,
		|	ПремииРаботниковОрганизаций.Номер КАК НомерДок,
		|	ПремииРаботниковОрганизаций.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ОтветственныеЛицаОрганизацииСрезПоследних.Должность.Представление КАК ДолжностьРуководителя,
		|	ВЫБОР	КОГДА (ФИОФизЛицСрезПоследних.ФизЛицо) ЕСТЬ NULL  
		|				ТОГДА ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо.Наименование 
		|			ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия 
		|			+ ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """" 
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" 
		|					ИНАЧЕ """" КОНЕЦ 
		|			+ ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """" 
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" 
		|					ИНАЧЕ """" КОНЕЦ КОНЕЦ 
		|	КАК ФИОРуководителя,
		|	ОтветственныеЛицаОрганизацииСрезПоследних.ОтветственноеЛицо,
		|	ПремииРаботниковОрганизаций.ВидРасчета.Наименование КАК РасчетСтрокой,
		|	ВЫБОР	КОГДА ПремииРаботниковОрганизаций.ВидРасчета.СпособРасчета = &СпособРасчетаПроцентом 
		|			ТОГДА ""Процент"" 
		|			ИНАЧЕ ""Сумма"" КОНЕЦ 
		|	КАК ПредставлениеВеличины,
		|	КодыОрганизацииСрезПоследних.КодПоЕДРПОУ КАК КодПоЕДРПОУ
		|
		|ИЗ	Документ.ПремииРаботниковОрганизаций КАК ПремииРаботниковОрганизаций
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацииСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО ПремииРаботниковОрганизаций.Организация = ОтветственныеЛицаОрганизацииСрезПоследних.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних(&ДатаДокумента, ) КАК КодыОрганизацииСрезПоследних
		|		ПО ПремииРаботниковОрганизаций.Организация.Ссылка = КодыОрганизацииСрезПоследних.Организация.Ссылка
		|
		|ГДЕ
		|	ПремииРаботниковОрганизаций.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР КОГДА (ФИОФизЛиц.Фамилия) ЕСТЬ NULL  ТОГДА ПремииРаботниковОрганизацийНачисления.Сотрудник.Наименование ИНАЧЕ ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество КОНЕЦ КАК Работник,
		|	РаботникиОрганизацииСрезПоследних.Сотрудник.Код КАК ТабельныйНомер,
		|	РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо.КодПоДРФО КАК КодПоДРФО,
		|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.Представление КАК ПодразделениеРаботника,
		|	РаботникиОрганизацииСрезПоследних.Должность.Представление КАК Должность,
		|	ПремииРаботниковОрганизацийНачисления.Результат КАК Величина
		|ИЗ
		|	Документ.ПремииРаботниковОрганизаций.Начисления КАК ПремииРаботниковОрганизацийНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛиц
		|		ПО ПремииРаботниковОрганизацийНачисления.Сотрудник.Физлицо = ФИОФизЛиц.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК РаботникиОрганизацииСрезПоследних
		|		ПО ПремииРаботниковОрганизацийНачисления.Сотрудник = РаботникиОрганизацииСрезПоследних.Сотрудник
		|
		|ГДЕ
		|	ПремииРаботниковОрганизацийНачисления.Ссылка = &ДокументСсылка";

	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

// Функция формирует табличный документ с печатной формой ПечатьПремий,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПечатьПремий()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПремииРаботниковОрганизаций_ПечатьПремий";
// Серна - Начало
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет; 
// Серна - Конец
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;

	// получаем данные для печати
	ВыборкаДляШапкиИПодвала = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	// запоминаем области макета
	Макет = ПолучитьМакет("ПечатьПремий");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Строка"); // строка работника
	//ОбластьИтогов = Макет.ПолучитьОбласть("Итого"); // строка работника

	ВыводитьИтоги = Ложь;
	
	// массив с двумя строками - для разбиения на страницы
  ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	//ВыводимыеОбласти.Добавить(ОбластьИтогов);
	
    // выводим данные о руководителях организации
	Если ВыборкаДляШапкиИПодвала.Следующий() Тогда 
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Шапка документа.
		ПовторятьПриПечатиСтроки.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // "Колонтитул" страницы
// Серна - Начало
		//ВыводитьИтоги = ВыборкаДляШапкиИПодвала.ПредставлениеВеличины <> "Процент";
// Серна - Конец
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Для подвала
	КонецЕсли;
// Серна - Начало
	ОбластьМакетаШапка.Параметры.Приказ="У відповідності до Положення про оплату праці ПІІ «СЄРНА», затверджене наказом"+" №"+Номер+"-К від "+
 	Формат(Дата, "ДФ='дд ММММ гггг';Л=uk_UA")+",  за високі індивідуальні результати роботи у "+Сред(Формат(ПериодРегистрации,"ДФ='дд ММММ гггг';Л=uk_UA"),3,15)+" року";
// Серна - Конец

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.

	ВыведеноСтрок = 0;
	ПодИтогСтраницы = 0;
	ИтогДокумента = 0;
// Серна - Начало
	лНом = 0;
// Серна - Конец
	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл
// Серна - Начало
		лНом = лНом + 1;
		ОбластьМакета.Параметры.НомерПП = лНом;
// Серна - Конец

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакета.Параметры.Работник = ВыборкаРаботники.Работник + ?(СокрЛП(ВыборкаРаботники.КодПоДРФО)="",""," (" +  ВыборкаРаботники.КодПоДРФО + ")");
		ТабДокумент.Вывести(ОбластьМакета);
		ПодИтогСтраницы = ПодИтогСтраницы + ВыборкаРаботники.Величина;
		ИтогДокумента = ИтогДокумента + ВыборкаРаботники.Величина;

		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент,ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент,ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			//Если ВыводитьИтоги Тогда
			//	ОбластьИтогов.Параметры.Итого = ПодИтогСтраницы;
			//	ТабДокумент.Вывести(ОбластьИтогов);
			//КонецЕсли;
			ПодИтогСтраницы = 0;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		

	КонецЦикла;

	// если не было ни одного сотра - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = ОбластьМакетаШапка.ВысотаТаблицы Тогда
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	//Если ВыводитьИтоги Тогда
	//	ОбластьИтогов.Параметры.Итого = ИтогДокумента;
	//	ТабДокумент.Вывести(ОбластьИтогов);
	//КонецЕсли;
	
// Серна - Начало
	ОбластьМакетаПодвал.Параметры.НадписьПодвал = "2.Бухгалтерії здійснити нарахування та виплату премії разом з заробітною платою за "+Сред(Формат(Дата, "ДФ='дд ММММ гггг';Л=uk_UA"),3,15)+" року ";
	ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, Дата);
	ОбластьМакетаПодвал.Параметры.ГлБухгалтер = ОтветственныеЛица.ГлавныйБухгалтер;
	ОбластьМакетаПодвал.Параметры.ФИОРуководителя = ОтветственныеЛица.Руководитель;
// Серна - Конец
	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьПечатьПремий()	

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(НазваниеМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если Модифицированность() Тогда
		Предупреждение(НСтр("ru='Документ можно распечатать только после его записи';uk='Документ можна роздрукувати тільки після його запису'"));
		Возврат Неопределено;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru='Недостаточно полномочий для печати непроведенного документа!';uk='Недостатньо повноважень для друку непроведенного документа!'"));
		Возврат Неопределено;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если      НазваниеМакета = "ПечатьПремий" Тогда
		ТабДокумент = ПечатьПечатьПремий();
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,НСтр("ru='Премии ';uk='Премії '")));

КонецФункции // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПечатьПремий",НСтр("ru='Премии работников организации';uk='Премії працівників організації'"));

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАСЧЕТА ТБЛИЧНЫХ ЧАСТЕЙ ДОКУМЕНТА

Процедура РассчитатьПремию(Сотрудник = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления( Сотрудник).Выбрать();
	ЗафиксироватьТранзакцию();

	//массивы для хранения индексов строк табличных частей,
	//используются для расчета по одному сотруднику
	Если Сотрудник = Неопределено Тогда
		МассивИндексыСтрокНачисления = Неопределено;
		
	Иначе
		МассивИндексыСтрокНачисления = Новый Массив();
		
	КонецЕсли;
	
	Отказ = Ложь;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	
	// создадим наборы записей для выполнения движений
	НаборНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНачисления( ВыборкаПоНачислениям, Отказ,Заголовок);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборНачисления);
			
			Если НЕ (Сотрудник = Неопределено) Тогда
				МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	НаборНачисления.Записать();
	
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", 
														НаборНачисления, 
														Начисления, 
														МассивИндексыСтрокНачисления, 
														Сотрудник,
														КомментироватьРасчет);

	// Удаляем движения
	НаборНачисления.Очистить();
	НаборНачисления.Записать();
	
КонецПроцедуры // РассчитатьПремию()

Функция ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Знач Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных
	

	Если Сотрудники = "ПоДаннымПерерасчета" Тогда
		// получим список Сотрудников для перерасчета
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент
		|";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		СотрудникиПерерасчета = Результат.ВыгрузитьКолонку("Сотрудник");
		
	ИначеЕсли Сотрудники <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка В(&Сотрудники)";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		СотрудникиПерерасчета = Результат.ВыгрузитьКолонку("Сотрудник");
		
	Иначе
		// получим список Сотрудников для перерасчета
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ Документ.ПремииРаботниковОрганизаций.Начисления КАК Перерасчет
		|ГДЕ Перерасчет.Ссылка = &ПерерассчитываемыйДокумент
		|";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		СотрудникиПерерасчета = Результат.ВыгрузитьКолонку("Сотрудник");
		
	КонецЕсли;	
	
	Если СотрудникиПерерасчета.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	Запрос.УстановитьПараметр("СотрудникиПерерасчета", СотрудникиПерерасчета);
	// ТЧ Начисления
	Если Истина Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец,
		|	Начисления.Показатель1,
		|	Начисления.Показатель2,
		|	Начисления.Показатель3,
		|	Начисления.Показатель4,
		|	Начисления.Показатель5,
		|	Начисления.Показатель6,
		|	Начисления.ПодразделениеОрганизации,
		|	-Начисления.Результат КАК Результат,
		|	ИСТИНА КАК Сторно,
		|	Начисления.Авторасчет КАК Авторасчет,
		|	Начисления.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.ПремииРаботниковОрганизаций.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ Начисления.Сторно)
		|	И Начисления.Сотрудник В(&СотрудникиПерерасчета)
		|	И Начисления.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец,
		|	Начисления.Показатель1,
		|	Начисления.Показатель2,
		|	Начисления.Показатель3,
		|	Начисления.Показатель4,
		|	Начисления.Показатель5,
		|	Начисления.Показатель6,
		|	Начисления.ПодразделениеОрганизации,
		|	0,
		|	ЛОЖЬ,
		|	Истина,
		|	Начисления.НомерСтроки
		|ИЗ
		|	Документ.ПремииРаботниковОрганизаций.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ Начисления.Сторно)
		|	И Начисления.Сотрудник В(&СотрудникиПерерасчета)
		|	И Начисления.Ссылка.Проведен
        |УПОРЯДОЧИТЬ ПО
		|	Сторно УБЫВ,
		|	НомерСтроки";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// сторно-строка
			ЗаполнитьЗначенияСвойств(Начисления.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Записать();
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьПоПерерассчитываемомуДокументу()

Процедура Перерассчитать( Сотрудники = Неопределено) Экспорт
	
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	Если Не ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// получим список перерассчитываемых сорудников
	СотрудникиСписок = Новый СписокЗначений;
	Если Сотрудники = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Перерасчет.Сотрудник
		|ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектПерерасчета = &парамРегистратор
		|";
		
		Запрос.Текст = ТекстЗапроса;
		СотрудникиСписок.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник"));
		
	Иначе
		
		СотрудникиСписок = Сотрудники;
		
	КонецЕсли;
	
	// если не перерассчитываем никого - возврат
	Если СотрудникиСписок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	// читаем все данные 
	НачатьТранзакцию();
	Прочитать();
	
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Прочитать();
	ЗафиксироватьТранзакцию();
	
	////////////////////////////////////////////////////////////////////////
	// Основные начисления
	Если Истина Тогда
		// перерассчитываем записи начислений
		ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", 
											Движения.ОсновныеНачисленияРаботниковОрганизаций, 
											Начисления, 
											, 
											СотрудникиСписок);
		Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	КонецЕсли;
	
	// записываем документ перед вызовом СформироватьВзаиморасчетыСРаботниками
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Взаиморасчеты с работниками
	Если Истина Тогда
		// сначала удалим сведения о взаиморасчетах с работниками
		ВзаиморасчетыСРаботникамиОрганизаций = Движения.ВзаиморасчетыСРаботникамиОрганизаций;
		ПоследнееДвижение = ВзаиморасчетыСРаботникамиОрганизаций.Количество()-1;
		// удалим записи по всем сотрудника полученного списка
		// обходим в обратном порядке
		Для Сч = 0 По ПоследнееДвижение Цикл
			Если СотрудникиСписок.НайтиПоЗначению(ВзаиморасчетыСРаботникамиОрганизаций[ПоследнееДвижение - Сч].Сотрудник) <> Неопределено Тогда
				ВзаиморасчетыСРаботникамиОрганизаций.Удалить(ПоследнееДвижение - Сч);
			КонецЕсли;
		КонецЦикла;
		
		// теперь сформируем начисления к выплате по начислениям документа для перерассчитываемых работников
		//*СформироватьВзаиморасчетыСРаботниками( СотрудникиСписок );
		ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(СотрудникиСписок).Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			ДобавитьСтрокуВзаиморасчетыСРаботниками(ВыборкаПоНачислениям);
		КонецЦикла;
	КонецЕсли;

	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Удалим записи перерасчета по которым выполнен перерасчет
	НаборЗаписей = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	ПроведениеРасчетов.УдалитьЗаписиПерерасчетаПоКоторымВыполненПерерасчет(Ссылка, НаборЗаписей, СотрудникиСписок);
	НаборЗаписей.Записать();
	
КонецПроцедуры // Перерассчитать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПремииРаботниковОрганизации.Дата,
	|	ПремииРаботниковОрганизации.ПериодРегистрации,
	|	ПремииРаботниковОрганизации.Организация,
	|	ПремииРаботниковОрганизации.Организация КАК ГоловнаяОрганизация,
	|	ПремииРаботниковОрганизации.Организация КАК ОбособленноеПодразделение,
	|	ПремииРаботниковОрганизации.ВидРасчета,
	|	ПремииРаботниковОрганизации.ЧислоМесяцев,
	|	ПремииРаботниковОрганизации.ДатаНачалаБП КАК БазовыйПериодНачало,
	|	ПремииРаботниковОрганизации.ДатаОкончанияБП КАК БазовыйПериодКонец,
	|	ПремииРаботниковОрганизации.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	ПремииРаботниковОрганизации.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	ПремииРаботниковОрганизации.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ПремииРаботниковОрганизации.Ссылка,
	|	ПремииРаботниковОрганизации.ВидРасчета.СпособРасчета КАК СпособРасчета
	|ИЗ
	|	Документ.ПремииРаботниковОрганизаций КАК ПремииРаботниковОрганизации
	|ГДЕ
	|	ПремииРаботниковОрганизации.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоНачисления( Сотрудники = Неопределено )

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);

	Если НЕ (Сотрудники = Неопределено) Тогда
		Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
	Иначе
		Запрос.УстановитьПараметр("парамСотрудники", Начисления.ВыгрузитьКолонку("Сотрудник"));
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	// Свойства
	|	СтрокиНачисления.Ссылка.ПериодРегистрации	КАК ПериодРегистрации,
	|	СтрокиНачисления.ДатаНачала					КАК ПериодДействияНачало,
	|	СтрокиНачисления.ДатаОкончания				КАК ПериодДействияКонец,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации	КАК Период,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации	КАК ПериодВзаиморасчетов,
	|	СтрокиНачисления.БазовыйПериодНачало,
	|	СтрокиНачисления.БазовыйПериодКонец,
	|	СтрокиНачисления.Ссылка.ВидРасчета КАК ВидРасчета,
	|	СтрокиНачисления.Сторно,
	|
	// Измерения
	|	СтрокиНачисления.Ссылка.Организация КАК организация,
	|	ВЫБОР КОГДА СтрокиНачисления.Сотрудник.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка) ТОГДА СтрокиНачисления.Сотрудник ИНАЧЕ СтрокиНачисления.Сотрудник.ОсновноеНазначение КОНЕЦ  КАК Сотрудник,
	|	СтрокиНачисления.Сотрудник КАК Назначение,
	|
	// Ресурсы  
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.Результат КАК СуммаВзаиморасчетов,
	|
	// Реквизиты
	|	ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления) КАК КодОперации,
	|	СтрокиНачисления.Авторасчет,
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|
	// Специализированные параметры для регистра Взаиморасчеты с работников организации и др.
	|	СтрокиНачисления.ВидРасчета.СпособРасчета	КАК СпособРасчета,
	|	СтрокиНачисления.ВидРасчета.СчетУчета		КАК СчетУчета,
	|	СтрокиНачисления.ВидРасчета.ВидВремени		КАК ВидВремени,
	|	Работники.ГрафикРаботы		КАК ГрафикРаботы,
	|	ЛОЖЬ КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени	КАК ВидИспользованияРабочегоВремени,
	|	ЛОЖЬ	КАК ЯвляетсяПочасовымОтклонением,
	|
	// Проверки
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".Начисления КАК СтрокиНачисления
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ПериодРегистрации, Сотрудник В (&парамСотрудники)) КАК Работники
	|ПО СтрокиНачисления.Сотрудник = Работники.Сотрудник 
	|
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка
	|	И СтрокиНачисления.Сотрудник В (&парамСотрудники)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиНачисления.НомерСтроки
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()


Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указана организация, по которой выполняются начисления!';uk='Не вказана організація, по якій виконуються нарахування!'"), Отказ);
	КонецЕсли;

	//  ВидРасчета
	ЕстьВидРасчета = ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидРасчета);
	Если Не ЕстьВидРасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указан вид премии!';uk='Не зазначений вид премії!'"), Отказ);
	КонецЕсли;

	//  Число месяцев
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ЧислоМесяцев) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указано число месяцев за которые начисляется премия!';uk='Не зазначена кількість місяців за які нараховується премія!'"), Отказ);
	КонецЕсли;

	Если ЕстьВидРасчета Тогда
		
		ЕстьДатаНачалаБП = ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.БазовыйПериодНачало);
		ЕстьДатаОкончанияБП = ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.БазовыйПериодКонец);
		
		Если ВыборкаПоШапкеДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
			
			Если Не ЕстьДатаНачалаБП Тогда
				ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указана дата начала базового периода!';uk='Не вказана дата початку базового періоду!'"), Отказ);
			КонецЕсли;
			
			Если Не ЕстьДатаОкончанияБП Тогда
				ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указана дата окончания базового периода!';uk='Не вказана дата закінчення базового періоду!'"), Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыборкаПоШапкеДокумента.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Годовая Тогда
			
			Если ВыборкаПоШапкеДокумента.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
				
				Если Не ЕстьДатаНачалаБП Тогда
					ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указана дата начала базового периода!';uk='Не вказана дата початку базового періоду!'"), Отказ);
				КонецЕсли;
				
				Если Не ЕстьДатаОкончанияБП Тогда
					ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указана дата окончания базового периода!';uk='Не вказана дата закінчення базового періоду!'"), Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
			
			Если ЕстьДатаНачалаБП И ЕстьДатаОкончанияБП Тогда
				
				Если Год(ВыборкаПоШапкеДокумента.БазовыйПериодНачало) <> Год(ВыборкаПоШапкеДокумента.БазовыйПериодКонец) Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Для годовой премии дата начала и окончания базового периода должны быть в пределах одного года!';uk='Для річної премії дата початку і закінчення базового періоду повинні бути в межах одного року!'"), Отказ)
					
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = НСтр("ru='В строке номер ""';uk='У рядку номер ""'")+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									НСтр("ru='"" табл. части ""Начисления"": ';uk='"" табл. частини ""Нарахування"": '");
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не выбран сотрудник!';uk='не обраний співробітник!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан вид расчета!';uk='не зазначений вид розрахунку!'"), Отказ, Заголовок);
	КонецЕсли;

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата начала начисления!';uk='не зазначена дата початку нарахування!'"), Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата окончания начисления!';uk='не зазначена дата закінчення нарахування!'"), Отказ, Заголовок);
	КонецЕсли;
	

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Базовыйпериодначало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата начала базового периода начисления!';uk='не зазначена дата початку базового періоду нарахування!'"), Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата окончания базового периода начисления!';uk='не зазначена дата закінчення базового періоду нарахування!'"), Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()


Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
	// Реквизиты
	Движение.ВидУчетаВремени				= ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.СпособРасчета, ВыборкаПоСтрокамДокумента.ВидВремени);

КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

Процедура ДобавитьСтрокуВзаиморасчетыСРаботниками(ВыборкаПоСтрокамДокумента)
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Проверим непрерывночть следования записей начислений
    //ПроверитьНепрерывностьЗаписейНачислений(Отказ);
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда
		
		////////////////////////////////////////////////////////////////////////
		// основные Начисления
		
		ВыборкаПоНачислениям = СформироватьЗапросПоНачисления().Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ );   //,Заголовок
			Если НЕ Отказ Тогда
				ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, Движения.ОсновныеНачисленияРаботниковОрганизаций);
				ДобавитьСтрокуВзаиморасчетыСРаботниками(ВыборкаПоНачислениям);
			КонецЕсли;
		КонецЦикла;
		
		
	КонецЕсли; 

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Начисления);
	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(Начисления);
	
	Если ПерерассчитываемыйДокумент = Ссылка И НЕ Ссылка.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Документ не может быть исправлением самого себя!';uk='Документ не може бути виправленням самого себе!'"),Отказ);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	ТипОснования = ТипЗнч(Основание);
	
	Если ТипОснования = Тип("ДокументСсылка.ПоощрениеВзысканиеОрганизаций") Тогда
		ДокументОснование = Основание;
		ЗаполнитьДокументНаОснованииПоощренияВзыскания(Основание);		
	КонецЕсли
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ

Процедура ЗаполнитьДокументНаОснованииПоощренияВзыскания(Основание)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник						КАК Сотрудник,
	|	РаботникиОрганизации.Размер							КАК Размер
	|ИЗ
	|	Документ.ПоощрениеВзысканиеОрганизаций.РаботникиОрганизации 	КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Ссылка = &Ссылка               
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ЗначениеЗаполнено(Основание.Организация) Тогда
		Организация = Основание.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание.ВидПоощренияВзыскания.ВидРасчета) Тогда
		ВидРасчета = Основание.ВидПоощренияВзыскания.ВидРасчета; 
	Иначе
		ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	ПериодРегистрации = НачалоМесяца(Основание.Дата);
	ДатаНачалаБП = НачалоМесяца(Основание.Дата);
	ДатаОкончанияБП = КонецМесяца(Основание.Дата);
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Начисления.Добавить();
		
		НоваяСтрока.Авторасчет = Истина;
		НоваяСтрока.Сотрудник = Выборка.Сотрудник;
		НоваяСтрока.ВидРасчета = ВидРасчета;
		НоваяСтрока.Показатель1 = Выборка.Размер;	
		НоваяСтрока.ДатаНачала = НачалоМесяца(Основание.Дата);
		НоваяСтрока.ДатаОкончания = КонецМесяца(Основание.Дата);
		НоваяСтрока.БазовыйПериодНачало = НачалоМесяца(Основание.Дата);
		НоваяСтрока.БазовыйПериодКонец = КонецМесяца(Основание.Дата);
	КонецЦикла;
	
КонецПроцедуры
Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	
КонецПроцедуры

