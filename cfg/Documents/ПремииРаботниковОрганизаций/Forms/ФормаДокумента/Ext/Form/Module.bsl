////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента;   // Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мФормаВыбораВидаРасчета;

Перем мСтарыйРезультат;
Перем мСтарыйСотрудник;

//для формирования имен кнопок
Перем мКнопкаРассчитатьРаботника;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мСведенияОВидахРасчета;
Перем мСпособРасчетаПремии;

// Механизм исправлений
Перем мДокументыИсправление;
Перем мДокументСторнирование;
Перем мСотрудникиИсправление;
Перем мМенюИсправление;
Перем мКнопкаИсправлениеТекущийСотрудник;
Перем мКнопкаИсправлениеВесьДокумент;
Перем мКнопкаИсправлениеСписокСотрудников;
Перем мКнопкаОтменаИсправление;
Перем мТекущийСотрудник;

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельНачисления);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выставляет автоотметку незаполненного базового периода, если это требуется и
//  переписывает название колонки в т.п.
//
// Параметры
//  ВидРасчета - ссылка на в.р. из ПВР ОсновныеНачисленияОрганизаций
//
Процедура УправлениеВнешнимВидомФормы(ВидРасчета)
	
	НеобходимБазовыйПериод = ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом или ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Годовая;
	ЭлементыФормы.ДатаНачалаБП.АвтоОтметкаНезаполненного = НеобходимБазовыйПериод;
	ЭлементыФормы.ДатаОкончанияБП.АвтоОтметкаНезаполненного = НеобходимБазовыйПериод;
	Если Не НеобходимБазовыйПериод Тогда
		
		Если ЭлементыФормы.ДатаНачалаБП.ОтметкаНезаполненного  Тогда
			ЭлементыФормы.ДатаНачалаБП.ОтметкаНезаполненного = Ложь
		КонецЕсли;
		
		Если ЭлементыФормы.ДатаОкончанияБП.ОтметкаНезаполненного  Тогда
			ЭлементыФормы.ДатаОкончанияБП.ОтметкаНезаполненного = Ложь
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеВнешнимВидомФормы()

Процедура ОбновитьОписаниеСостоянияДокумента()

	// связанные документы
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	Сторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	НеЗаполнен = Не ЗначениеЗаполнено(Организация) Или (Начисления.Количество() = 0);
	
	ЗаполненСОшибками = Начисления.НайтиСтроки(Новый Структура("Сотрудник",Справочники.СотрудникиОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или Начисления.НайтиСтроки(Новый Структура("ВидРасчета",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка())).Количество() > 0;
	
	СтруктураРезультата = Новый Структура("Результат, Сторно",0,Ложь);
	СтруктураНовыхЗаписей = Новый Структура("Сторно",Ложь);
	НеРассчитан = Начисления.НайтиСтроки(СтруктураРезультата).Количество() = Начисления.НайтиСтроки(СтруктураНовыхЗаписей).Количество() И Начисления.НайтиСтроки(СтруктураНовыхЗаписей).Количество() > 0;
	
	ОписаниеСостоянияДокумента = РаботаСДиалогами.ПолучитьОписаниеРасчетногоДокумента(Не НеЗаполнен,ЗаполненСОшибками,Не НеРассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Сторнирован, ТолькоПросмотр,Ложь,Ложь); // поля структуры описания - ТекстСообщения и ВажностьСообщения
	РаботаСДиалогами.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

Процедура ОбновитьТекущегоСотрудника()

	ТекущиеДанные	= ЭлементыФормы.Начисления.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ТекущийСотрудник = ТекущиеДанные.Сотрудник;
	Иначе
		ТекущийСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	ПолучитьСотрудниковСИсправлениями();
	
	// Установим имя и доступность кнопки ТекущийСотрудник механизма исправлений
	Если ЭлементыФормы.ДополнительныеДействия.Кнопки.Найти("Исправить") <> Неопределено И мТекущийСотрудник <> ТекущийСотрудник Тогда
		РаботаСДиалогами.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(ТекущийСотрудник),ТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник)
	КонецЕсли;
	
	мТекущийСотрудник = ТекущийСотрудник;

КонецПроцедуры

Процедура ПолучитьСотрудниковСИсправлениями()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазовыеНачисления.Сотрудник
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК РазовыеНачисления
	|ГДЕ
	|	РазовыеНачисления.Ссылка В(&Исправления)
	|	И РазовыеНачисления.Сторно
	|	И РазовыеНачисления.СторнируемыйДокумент = РазовыеНачисления.Ссылка.ПерерассчитываемыйДокумент
	|";

	мСотрудникиИсправление = ПроведениеРасчетов.СформироватьСоответствиеСотрудниковСИсправлениями(ТекстЗапроса, мДокументыИсправление);
	

	
КонецПроцедуры

Процедура УстановитьКнопкиИсправленияДокумента(ДокументИсправлен = Неопределено, ИсправленВесьДокумент = Неопределено, ДокументСторнирован = Неопределено)
	
	Если ДокументИсправлен = Неопределено Тогда
		ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	КонецЕсли;
	Если ДокументСторнирован = Неопределено Тогда
		ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	КонецЕсли;
	
	Если ИсправленВесьДокумент = Неопределено Тогда
		ИсправленВесьДокумент = ДокументИсправлен;
		Если ИсправленВесьДокумент Тогда
			Для каждого СтрокаТЧ Из Начисления Цикл
				ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
				Если Не ИсправленВесьДокумент Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументСторнирован Или ПериодРегистрации >= НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
		ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	Иначе 
		
		Кнопки = ЭлементыФормы.ДополнительныеДействия.Кнопки;
		Если Кнопки.Количество() = 0 Тогда
			МенюИсправить = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Подменю);
			ЗаполнитьЗначенияСвойств(МенюИсправить, мМенюИсправление);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеТекущийСотрудник.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеТекущийСотрудник);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеВесьДокумент.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеВесьДокумент);
			МенюИсправить.Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеСписокСотрудников.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеСписокСотрудников);
		КонецЕсли;
		Кнопки.Исправить.Кнопки.ТекущийСотрудник.Доступность = Не ИсправленВесьДокумент;
		Кнопки.Исправить.Кнопки.ВесьДокумент.Доступность = Не ДокументИсправлен;
		Кнопки.Исправить.Кнопки.СписокСотрудников.Доступность = Не ИсправленВесьДокумент;
			
		Если Кнопки.Количество() = 1 И ДокументИсправлен Тогда
			Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаОтменаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаОтменаИсправление);
		ИначеЕсли Кнопки.Количество() > 1 И Не ДокументИсправлен Тогда
			Кнопки.Удалить(Кнопки.ОтменитьИсправление);
			Кнопки.Удалить(Кнопки.Разделитель);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДоступностьЭлементовФормы()
	
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	ИсправленВесьДокумент = ДокументИсправлен;
	Если ИсправленВесьДокумент Тогда
		Для каждого СтрокаТЧ Из Начисления Цикл
			ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
			Если Не ИсправленВесьДокумент Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если ДокументИсправлен Или ДокументСторнирован Тогда
		ТолькоПросмотр = Истина
	Иначе 	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	ЭлементыФормы.Организация.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
	
	УстановитьКнопкиИсправленияДокумента(ДокументИсправлен, ИсправленВесьДокумент, ДокументСторнирован);
	
	ЭлементыФормы.ПанельОткрытьИсправление.Свертка = ?(ДокументИсправлен Или ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.ПанельОткрытьИсходный.Свертка = ?(ЭтоИсправление И Не ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.НадписьОткрытьИсправление.Заголовок = ?(ДокументСторнирован,НСтр("ru='Открыть сторно-документ';uk='Відкрити сторно-документ'"),НСтр("ru='Открыть исправления';uk='Відкрити виправлення'"));
	
	Если Не ТолькоПросмотр Тогда
		МожноЗаполнять = Не ЭтоИсправление;
		СоставМенюЗаполнить = ЭлементыФормы.ДействияФормы.Кнопки.ПодменюЗаполнить.Кнопки;
		Для каждого Кнопка Из СоставМенюЗаполнить Цикл
			Если Кнопка.ТипКнопки <> ТипКнопкиКоманднойПанели.Разделитель Тогда
				Кнопка.Доступность = МожноЗаполнять
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если Не ЭтоНовый() Тогда
		мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
		мДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
		ОбновитьОписаниеСостоянияДокумента();
		Если ЗначениеЗаполнено(мДокументыИсправление) Тогда
			ПолучитьСотрудниковСИсправлениями();
		КонецЕсли;
	Иначе
		РаботаСДиалогами.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, НСтр("ru='Документ не заполнен';uk='Документ не заповнений'"), "СообщениеОПроблемах");
	КонецЕсли;

	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		ЧислоМесяцев = 1;
		ДатаНачалаБП = ДобавитьМесяц(ПериодРегистрации, -1);
		ДатаОкончанияБП = КонецМесяца(ДатаНачалаБП);
	КонецЕсли;

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	УправлениеВнешнимВидомФормы(ВидРасчета);
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
 	СтруктураКолонок.Вставить("Показатель1");
	
	// Установить ограничение - изменять видимоть колонок для таличной части Начисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);

	// Активизируем табличную часть
	ТекущийЭлемент = ЭлементыФормы.Начисления;

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);


	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Установим видимость реквизита "Приказ"
	РаботаСДиалогами.УстановитьВидимостьПриказа(ЭтаФорма,Организация,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"));
	
	ПредставлениеПериодаРегистрации = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
	
	// Исправление документов
	мМенюИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить;
	мКнопкаИсправлениеТекущийСотрудник = мМенюИсправление.Кнопки.ТекущийСотрудник;
	мКнопкаИсправлениеВесьДокумент = мМенюИсправление.Кнопки.ВесьДокумент;
	мКнопкаИсправлениеСписокСотрудников = мМенюИсправление.Кнопки.СписокСотрудников;
	мКнопкаОтменаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление;
	ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	
	// Установим видимость в зависимости от наличия перерассчитываемого документа
	ОбновитьДоступностьЭлементовФормы();
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	// оповестим исходный, исправляемый документ
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		Оповестить("ОбновитьФорму", Новый Структура("Команда, Объект","ДоступностьИсправленногоДокумента", ПерерассчитываемыйДокумент), Ссылка);
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Реквизиты = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			ВременнаяТаблица = ЗначениеВыбора.Данные.Выгрузить();
			Если ЗначениеВыбора.Свойство("Реквизиты",Реквизиты) Тогда
				Если ВидРасчета.СпособРасчета <>  Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
					ВременнаяТаблица.Колонки.Добавить("Показатель1");
					ВременнаяТаблица.ЗаполнитьЗначения(Реквизиты.Размер,"Показатель1");
					Если ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Тогда
						ВременнаяТаблица.Колонки.Добавить("Результат");
						ВременнаяТаблица.ЗаполнитьЗначения(Реквизиты.Размер,"Результат");
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			ВременнаяТаблица.Колонки.Добавить("Авторасчет");
			ВременнаяТаблица.ЗаполнитьЗначения(Истина,"Авторасчет");
			
			ВременнаяТаблица.Колонки.Добавить("ВидРасчета");
			ВременнаяТаблица.ЗаполнитьЗначения(ВидРасчета,"ВидРасчета");
			
			ВременнаяТаблица.Колонки.Добавить("ДатаНачала");
			ВременнаяТаблица.ЗаполнитьЗначения(ПериодРегистрации,"ДатаНачала");
			ВременнаяТаблица.Колонки.Добавить("ДатаОкончания");
			ВременнаяТаблица.ЗаполнитьЗначения(КонецМесяца(ПериодРегистрации),"ДатаОкончания");
			
			ВременнаяТаблица.Колонки.Добавить("БазовыйПериодНачало");
			ВременнаяТаблица.ЗаполнитьЗначения(ДатаНачалаБП,"БазовыйПериодНачало");
			ВременнаяТаблица.Колонки.Добавить("БазовыйПериодКонец");
			ВременнаяТаблица.ЗаполнитьЗначения(ДатаОкончанияБП,"БазовыйПериодКонец");
			
			Для Каждого СтрокаВременнойТаблицы Из ВременнаяТаблица Цикл
				СтрокаВременнойТаблицы.ДатаНачала = Макс(СтрокаВременнойТаблицы.ДатаНачала,СтрокаВременнойТаблицы.ДатаПриема);
				СтрокаВременнойТаблицы.ДатаОкончания = Макс(СтрокаВременнойТаблицы.ДатаОкончания,СтрокаВременнойТаблицы.ДатаПриема);
				
				СтрокаВременнойТаблицы.БазовыйПериодНачало = Макс(СтрокаВременнойТаблицы.БазовыйПериодНачало,СтрокаВременнойТаблицы.ДатаПриема);
				СтрокаВременнойТаблицы.БазовыйПериодКонец = Макс(СтрокаВременнойТаблицы.БазовыйПериодКонец,СтрокаВременнойТаблицы.ДатаПриема);
			КонецЦикла;
			
			Начисления.Загрузить(ВременнаяТаблица);
			
			Если ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
				Для Каждого ТекСтрока из Начисления Цикл
					ОснНазначение = ?(ЗначениеЗаполнено(ТекСтрока.Сотрудник.ОсновноеНазначение), ТекСтрока.Сотрудник.ОсновноеНазначение, ТекСтрока.Сотрудник);
					ПроведениеРасчетов.ПроставитьДанныеСтроки(ОснНазначение, ТекСтрока.Сотрудник, Дата, ПериодРегистрации, ТекСтрока.ВидРасчета, ТекСтрока);
				КонецЦикла;	
			КонецЕсли;
		ИначеЕсли ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ЗаполнитьДокументИсправление" Тогда
			РаботаСДиалогами.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, ЗначениеВыбора.ВыбранныеСотрудники);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму" И Не ЭтоНовый() Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Команда = "ДоступностьИсправленногоДокумента" Тогда
					Если Параметр.Объект = Ссылка И мДокументыИсправление.Найти(Источник) = Неопределено Тогда 
						мДокументыИсправление.Добавить(Источник);
						ПолучитьСотрудниковСИсправлениями();
						ОбновитьДоступностьЭлементовФормы();
					КонецЕсли;
				ИначеЕсли Команда = "ДоступностьОтмененногоДокумента" Тогда
					Если Параметр.Объект = Ссылка Тогда
						Если мДокументСторнирование <> Источник Тогда
							мДокументСторнирование = Источник;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
						НовыйДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
						Если мДокументСторнирование <> НовыйДокументСторнирование Тогда
							мДокументСторнирование = НовыйДокументСторнирование;
							Если Не ЗначениеЗаполнено(мДокументСторнирование) Тогда
								РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
							КонецЕсли;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					КонецЕсли;
				Иначе
				КонецЕсли;
			Иначе
			КонецЕсли;
			
		Иначе
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ОбработкаОповещения

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Активизирует строки табличных частей документа после заполнения
//
Процедура УстановитьТекущуюСтрокуТабличнойЧасти()

	мСтарыйСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	
	//активизируем во всех табличных частях 1-ю строку
	Если Начисления.Количество() > 0 Тогда
		СтрокаТЧ = Начисления.Получить(0);
		ЭлементыФормы.Начисления.ТекущаяСтрока = СтрокаТЧ;
	КонецЕсли;

КонецПроцедуры //УстановитьТекущуюСтрокуТабличнойЧасти()

Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если Начисления.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Заполнить?';uk='Перед заповненням табличні частини будуть очищені. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Начисления.Очистить();
	КонецЕсли;
	
	Если Кнопка.Имя = "СписокРаботников" Тогда
		ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, ПериодРегистрации, , Организация, , , ,"ПремииРаботниковОрганизаций", Новый Структура("Размер", Размер));
		
	ИначеЕсли Кнопка.Имя = "ПоПерерассчитываемомуДокументу" Тогда
		Если Не ЗаполнитьПоПерерассчитываемомуДокументу(ПерерассчитываемыйДокумент) Тогда
			Сообщить(НСтр("ru='Нет необходимости перерассчитывать заданный документ. Для получения списка документов, подлежащих перерасчету, необходимо использовать: пункт Перерасчет зарплаты меню Расчет зарплаты';uk='Немає необхідності перерозраховувати заданий документ. Для отримання списку документів, що підлягають перерахунку, необхідно використовувати: пункт Перерахунок зарплати меню Розрахунок зарплати'"));
		КонецЕсли;
		
	КонецЕсли;

	УстановитьТекущуюСтрокуТабличнойЧасти();
	
КонецПроцедуры // ДействияФормыЗаполнить()

Процедура ДействияФормыДействиеРассчитать(Кнопка)
	
	Если ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом 
		или ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула 
		Тогда
		
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
			Возврат;
		КонецЕсли;
		
		КомментироватьРасчет = Ложь;
		Если Найти(Кнопка.Имя,"РассчитатьПоРаботнику")=1 И ЭлементыФормы.Начисления.ТекущиеДанные <> Неопределено Тогда
			
			мСотрудники = Новый СписокЗначений;
			Для каждого СтрокаСотрудник Из ЭлементыФормы.Начисления.ВыделенныеСтроки Цикл
				мСотрудники.Добавить(СтрокаСотрудник.Сотрудник) ;
			КонецЦикла; 
			
			Если Кнопка.Имя = "РассчитатьПоРаботникуСКомментарием" Тогда
				КомментироватьРасчет = Истина;
			КонецЕсли;
			
		Иначе 
			мСотрудники = Начисления.ВыгрузитьКолонку("Сотрудник");
		КонецЕсли;
		
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		РассчитатьПремию(мСотрудники, КомментироватьРасчет);
		ОбработкаКомментариев.ПоказатьСообщения();
		
		ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			мСтарыйРезультат = ТекущаяСтрока.Результат;
		КонецЕсли;
		
	Иначе
		
		Сообщить(НСтр("ru='Для премий, установленных в фиксированных суммах, расчет не производится!';uk='Для премій, встановлених у фіксованих сумах, розрахунок не виконується!'"))
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ДополнительныеДействияВесьДокумент(Кнопка)
	РаботаСДиалогами.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры

Процедура ДополнительныеДействияТекущийСотрудник(Кнопка)
	
	Если Не ЗначениеЗаполнено(мТекущийСотрудник) Тогда
		Предупреждение(НСтр("ru='Не выбран сотрудник для исправления расчетов!';uk='Не обраний співробітник для виправлення розрахунків!'"));
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогами.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, мТекущийСотрудник);

КонецПроцедуры

Процедура ДополнительныеДействияСписокСотрудников(Кнопка)
	
	Если Проведен Тогда
		
		ПолучитьСотрудниковСИсправлениями();
		
		ТекстВопроса = НСтр("ru='Для исправления необходимо записать документ. Продолжить?';uk='Для виправлення необхідно записати документ. Продовжити?'");
		Если Не РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ЭтотОбъект, ЭтаФорма, ТекстВопроса) Тогда
			Возврат;
		КонецЕсли;
		
		СписокСотрудников = Новый СписокЗначений;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПремииРаботниковОрганизаций.Сотрудник,
		|	ПремииРаботниковОрганизаций.Сотрудник.Наименование КАК Наименование
		|ИЗ
		|	Документ.ПремииРаботниковОрганизаций.Начисления КАК ПремииРаботниковОрганизаций
		|ГДЕ
		|	ПремииРаботниковОрганизаций.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		Запрос.УстановитьПараметр("Ссылка",Ссылка); 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если мСотрудникиИсправление[Выборка.Сотрудник] = Неопределено Тогда
				СписокСотрудников.Добавить(Выборка.Сотрудник,Выборка.Наименование)
			КонецЕсли;
		КонецЦикла;
		
		Форма = ПолучитьОбщуюФорму("ФормаВыбораСотрудников", ЭтаФорма, Ссылка);
		Форма.СписокСотрудников = СписокСотрудников;
		Форма.Заголовок = НСтр("ru='Сотрудники документа Премии работников организаций №';uk='Співробітники документа Премії працівників організацій №'") + Номер + НСтр("ru=' от ';uk=' від '") + Формат(Дата,"ДФ=dd.MM.yyyy");
		Форма.Открыть();
		
	Иначе
		Предупреждение(НСтр("ru='Исправить можно только проведенный документ!';uk='Виправити можна лише проведений документ!'"))
	КонецЕсли;
	
КонецПроцедуры

// Процедура отмены документов-исправлений
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогами.ОтменитьИсправлениеДокумента(Ссылка);
	мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
	ПолучитьСотрудниковСИсправлениями();
	ОбновитьДоступностьЭлементовФормы();
	РаботаСДиалогами.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(мТекущийСотрудник),мТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник);
	Обновить();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "Регулирование" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РаботаСДиалогами.РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации);
	ОбновитьДоступностьЭлементовФормы();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры


Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ВидРасчетаПриИзменении(Элемент)
	
	мСпособРасчетаПремии = ВидРасчета.СпособРасчета;
	ЧислоМесяцев = ВидРасчета.ЧислоМесяцев;
	Если ЧислоМесяцев = 0 Тогда
		ЧислоМесяцев = 1;
	КонецЕсли;
	ДатаНачалаБП = ДобавитьМесяц(ПериодРегистрации, -ЧислоМесяцев+1);
	ДатаОкончанияБП = КонецМесяца(ДобавитьМесяц(ДатаНачалаБП, ЧислоМесяцев-1));
	
	УправлениеВнешнимВидомФормы(ВидРасчета);
	
	СведенияОВидеРасчета = РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, Элемент.Значение, "ПриРасчете");
	
	Для СчПоказателей = 1 По 6 Цикл
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			
			Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы.Начисления.Колонки["Показатель" + СчПоказателей].ЭлементУправления.Формат = "ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]
			Иначе			
				ЭлементыФормы.Начисления.Колонки["Показатель" + СчПоказателей] = 0;
			КонецЕсли;
		Иначе
			ЭлементыФормы.Начисления.Колонки["Показатель" + СчПоказателей] = 0;
		КонецЕсли;
		
	КонецЦикла;	
КонецПроцедуры

Процедура ЧислоМесяцевПриИзменении(Элемент)
	
	Если ЧислоМесяцев = 0 Тогда
		ЧислоМесяцев = 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачалаБП) Тогда
		ДатаОкончанияБП = КонецМесяца(ДобавитьМесяц(ДатаНачалаБП, ЧислоМесяцев-1))
	КонецЕсли;

КонецПроцедуры

Процедура ДатаНачалаБППриИзменении(Элемент)
	
	Если ЧислоМесяцев = 0 Тогда
		ЧислоМесяцев = 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачалаБП) Тогда
		ДатаОкончанияБП = КонецМесяца(ДобавитьМесяц(ДатаНачалаБП, ЧислоМесяцев-1))
	КонецЕсли;

КонецПроцедуры

Процедура ДатаОкончанияБППриИзменении(Элемент)
	
	Если ЧислоМесяцев = 0 Тогда
		ЧислоМесяцев = 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончанияБП) Тогда
		ДатаНачалаБП = НачалоМесяца(ДобавитьМесяц(ДатаОкончанияБП, -ЧислоМесяцев+1))
	КонецЕсли;

КонецПроцедуры

Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	Если ЗначениеЗаполнено(мДокументыИсправление) Тогда
		Форма = КритерииОтбора.ДокументыИсправления.ПолучитьФорму(, ЭтаФорма);
		Форма.ИсходныйДокумент = Ссылка;
		Форма.Открыть();
	ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
		мДокументСторнирование.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ПерерассчитываемыйДокумент.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Начисления

Процедура КоманднаяПанельНачисленияПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.Начисления, Ссылка, Ложь, Дата, Организация, 1);
	
КонецПроцедуры // КоманднаяПанельНачисленияПодбор()


Процедура НачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Начисления.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Начисления.Добавить();
		СтрокаТабличнойЧасти.Сотрудник = ВыбранноеЗначение;
		Если ВидРасчета.СпособРасчета <>  Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
			СтрокаТабличнойЧасти.Показатель1 = Размер;
		КонецЕсли;	
		СтрокаТабличнойЧасти.Авторасчет = Истина;
		СтрокаТабличнойЧасти.ВидРасчета = ВидРасчета;
		Если СтрокаТабличнойЧасти.Сотрудник.ДатаПриемаНаРаботу <> Дата('00010101') и СтрокаТабличнойЧасти.Сотрудник.ДатаПриемаНаРаботу > ПериодРегистрации Тогда
			СтрокаТабличнойЧасти.ДатаНачала = СтрокаТабличнойЧасти.Сотрудник.ДатаПриемаНаРаботу;
		Иначе	
			СтрокаТабличнойЧасти.ДатаНачала = ПериодРегистрации;
		КонецЕсли;
		СтрокаТабличнойЧасти.ДатаОкончания = КонецМесяца(ПериодРегистрации);
		СтрокаТабличнойЧасти.БазовыйПериодНачало = ДатаНачалаБП;
		СтрокаТабличнойЧасти.БазовыйПериодКонец = ДатаОкончанияБП;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Сотрудник", ВыбранноеЗначение);
		Запрос.УстановитьПараметр("парамДатаСобытия", ПериодРегистрации);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамДатаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизации";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтрокаТабличнойЧасти.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // НачисленияОбработкаВыбора()

Процедура НачисленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки.Сторно Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);

	ИначеЕсли ДанныеСтроки.Сотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(51, 51, 153);
	
	ИначеЕсли ДанныеСтроки.Сотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(0, 128, 128);
		
	КонецЕсли;
	
    РаботаСДиалогами.ПриВыводеСтрокиНачисленийИУдержаний(ДанныеСтроки, ОформлениеСтроки, мСведенияОВидахРасчета, Ложь);
	
	ЯчейкаСКартинкой = ОформлениеСтроки.Ячейки.Картинка;
	ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
	ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);
	
	// управление видимостью ячеек, которые группируют некоторые элементы шапки
	ОформлениеСтроки.Ячейки.Период.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.БазовыйПериод.Видимость = Ложь;
	
КонецПроцедуры // НачисленияПриВыводеСтроки()

Процедура НачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Начисления, ОформленияСтрок);
	
КонецПроцедуры // НачисленияПриПолученииДанных()

Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина;
		Если ВидРасчета.СпособРасчета <>  Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
			Элемент.ТекущиеДанные.Показатель1 = Размер;
		КонецЕсли;	
		Элемент.ТекущиеДанные.ВидРасчета = ВидРасчета;
		Элемент.ТекущиеДанные.ДатаНачала = ПериодРегистрации;
		Элемент.ТекущиеДанные.ДатаОкончания = КонецМесяца(ПериодРегистрации);
		Элемент.ТекущиеДанные.БазовыйПериодНачало = ДатаНачалаБП;
		Элемент.ТекущиеДанные.БазовыйПериодКонец = ДатаОкончанияБП;
	КонецЕсли;
	
КонецПроцедуры // НачисленияПриНачалеРедактирования()

Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;

	//запомним текущее физлицо
	Если ДанныеСтроки = Неопределено Тогда
		мСтарыйСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
		
	Иначе
		мСтарыйСотрудник = ДанныеСтроки.Сотрудник;
		
	КонецЕсли;
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат = Элемент.ТекущаяСтрока.Результат;
		ОбновитьТекущегоСотрудника();
	КонецЕсли;
	
КонецПроцедуры // НачисленияПриАктивизацииСтроки()

Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		мСтарыйСотрудник = Элемент.ТекущиеДанные.Сотрудник;
		ОбновитьТекущегоСотрудника();
	КонецЕсли;
	
КонецПроцедуры // НачисленияПриОкончанииРедактирования()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ Начисления

Процедура НачисленияСотрудникПриИзменении(Элемент)
	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущиеДанные; 
	ДанныеСтроки.Авторасчет = Истина;
	ОснНазначение = ?(ЗначениеЗаполнено(Элемент.Значение.ОсновноеНазначение), Элемент.Значение.ОсновноеНазначение, Элемент.Значение);
	ПроведениеРасчетов.ПроставитьДанныеСтроки( ОснНазначение, Элемент.Значение, ПериодРегистрации, ПериодРегистрации, ДанныеСтроки.ВидРасчета, ЭлементыФормы.Начисления.ТекущаяСтрока);
	Если ЗначениеЗаполнено(ДанныеСтроки.Сотрудник) Тогда
		ДанныеСтроки.ДатаНачала = Макс(ДанныеСтроки.ДатаНачала,ДанныеСтроки.Сотрудник.ДатаПриемаНаРаботу);	
	КонецЕсли;	
	Если ВидРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Показатель1 = Размер;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры // НачисленияСотрудникАвтоПодборТекста()

Процедура НачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры // НачисленияСотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура НачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникНачалоВыбора()

Процедура НачисленияРезультатПриИзменении(Элемент)
	
	Если Элемент.Значение <> мСтарыйРезультат Тогда
		ЭлементыФормы.Начисления.ТекущиеДанные.Авторасчет = Ложь;
		мСтарыйРезультат = Элемент.Значение;
	КонецЕсли;

КонецПроцедуры // НачисленияРезультатПриИзменении()

Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	
	тСтрока = ЭлементыФормы.Начисления.ТекущиеДанные;
	тСтрока.ДатаОкончания = Макс(тСтрока.ДатаНачала,Мин(тСтрока.ДатаОкончания,КонецМесяца(тСтрока.ДатаНачала)));
	
КонецПроцедуры

Процедура НачисленияДатаОкончанияПриИзменении(Элемент)
	
	тСтрока = ЭлементыФормы.Начисления.ТекущиеДанные;
	тСтрока.ДатаНачала = Мин(тСтрока.ДатаОкончания,Макс(тСтрока.ДатаНачала,НачалоМесяца(тСтрока.ДатаОкончания)));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСведенияОВидахРасчета = Новый Соответствие;

мДокументыИсправление = Новый Массив;
мСотрудникиИсправление = Новый Соответствие;
