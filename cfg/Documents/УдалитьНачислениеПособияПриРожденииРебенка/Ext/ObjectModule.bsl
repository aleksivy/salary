////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Выполняет распределение общей суммы дивидендов между акционерами пропорционально количеству акций
Процедура Рассчитать() Экспорт
	
	РезультатПолный = 0;
	Результат = 0;
	
    Запрос = Новый Запрос("ВЫБРАТЬ
                          |	ДатыПособий.Физлицо							КАК Физлицо,
                          |	ДатыПособий.ДатаРождения					КАК ДатаРождения,
                          |	ПрожиточныеМинимумы.Размер					КАК ПрожиточныйМинимум,
                          |	12 											КАК КоличествоМесяцев,
                          |	ПособиеПриРождении.КоэфПособия				КАК КоэфПособия,
                          |	ПособиеПриРождении.КоэфПервогоМесяца		КАК КоэфПервогоМесяца,
                          |	ПособиеПриРождении.СуммаПособия				КАК СуммаПособия,
                          |	ПособиеПриРождении.СуммаПервогоМесяца		КАК СуммаПервогоМесяца,
                          |	ПособиеПриРождении.КоэфЕжемесячногоПособия	КАК КоэфЕжемесячногоПособия
                          |	
                          |ИЗ
                          |	(ВЫБРАТЬ
                          |			МАКСИМУМ(ПрожиточныеМинимумы.Период)		КАК Период,
                          |			МАКСИМУМ(ПособиеПриРождении.Период)			КАК ПериодпособияПриРождении,
                          |			НачислениеПособий.Физлицо					КАК Физлицо,
                          |			НачислениеПособий.ДатаРождения				КАК ДатаРождения
                          |	
                          |		ИЗ	Документ.НачислениеПособияПриРожденииРебенка КАК НачислениеПособий
                          |	
                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожиточныеМинимумы
						  |		ПО		ПрожиточныеМинимумы.Период <= НачислениеПособий.ДатаРождения 
                          |			И	ПрожиточныеМинимумы.СоциальнаяГруппа = &парамСоциальнаяГруппа
						  |	
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПособиеПриРожденииРебенка КАК ПособиеПриРождении
						  |		ПО	НачислениеПособий.ДатаРождения >= ПособиеприРождении.Период
						  |	
                          |		ГДЕ	НачислениеПособий.Ссылка = &ДокументСсылка
                          |	
                          |		СГРУППИРОВАТЬ ПО
                          |			НачислениеПособий.Физлицо,
						  |			НачислениеПособий.ДатаРождения
						  |		) КАК ДатыПособий
						  |	
						  |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожиточныеМинимумы
                          |	ПО		ДатыПособий.Период = ПрожиточныеМинимумы.Период 
                          |		И	ПрожиточныеМинимумы.СоциальнаяГруппа = &парамСоциальнаяГруппа
						  |	
						  |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПособиеПриРожденииРебенка КАК ПособиеПриРождении
                          |	ПО		ДатыПособий.ПериодпособияПриРождении = ПособиеПриРождении.Период 
						  |	
						  |");	
						  
	СоциальныеГруппыНаселения = Перечисления.СоциальныеГруппыНаселения.ДетиДо6;						  
	
	Запрос.УстановитьПараметр("ДокументСсылка",Ссылка);
	Запрос.УстановитьПараметр("парамСоциальнаяГруппа", СоциальныеГруппыНаселения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	   
	   Рез = 0;
	   ПрожиточныйМинимум		= ?(Выборка.ПрожиточныйМинимум = NULL, 0, Выборка.ПрожиточныйМинимум);
	   КоэфПособия				= ?(Выборка.КоэфПособия = NULL, 0, Выборка.КоэфПособия);
	   КоэфПервогоМесяца		= ?(Выборка.КоэфПервогоМесяца = NULL, 0, Выборка.КоэфПервогоМесяца);
	   КоэфЕжемесячногоПособия	= ?(Выборка.КоэфЕжемесячногоПособия = NULL, 0, Выборка.КоэфЕжемесячногоПособия);
	   СуммаПособия = ?( Выборка.СуммаПособия = NULL, 0, Выборка.СуммаПособия);
	   СуммаПервогоМесяца = ?( Выборка.СуммаПервогоМесяца = NULL, 0, Выборка.СуммаПервогоМесяца);
	   
	   Если СуммаПособия = 0 Тогда 
		   РезультатПолный = КоэфПособия * ПрожиточныйМинимум;
	   Иначе
		   РезультатПолный = СуммаПособия;
	   КонецЕсли;
	   
	   МесяцРождения = НачалоМесяца(Выборка.ДатаРождения);
	   ПоследнийМесяцРасчета = ДобавитьМесяц( МесяцРождения,12 );
	   РабочийПериод = НачалоМесяца(Дата);
		   
	   Если РабочийПериод < ПоследнийМесяцРасчета Тогда
		   
		   Если СуммаПособия = 0 Тогда 
			   
			   // 1 месяц
			   Рез = Окр( ПрожиточныйМинимум * КоэфПервогоМесяца, 0);
			   // 2-11
			   Если ( РабочийПериод <> МесяцРождения ) И ( РабочийПериод <= ДобавитьМесяц( МесяцРождения,12 ) ) Тогда 
				   ТекДата = ДобавитьМесяц(МесяцРождения,1 );
				   Коэф = 1;
				   Пока  ТекДата <= РабочийПериод Цикл
					   Рез		= Рез + Окр(Коэф * ПрожиточныйМинимум, 0);
					   Коэф		= Коэф * ( 1 + КоэфЕжемесячногоПособия );
					   ТекДата	= ДобавитьМесяц( ТекДата, 1 );  
				   КонецЦикла; 
			   КонецЕсли;
			   
		   Иначе
			   
			   СуммаЕжемесячно =  (СуммаПособия - СуммаПервогоМесяца)/12;
			   // 1 месяц
			   Рез = СуммаПервогоМесяца;
			   // 2-11
			   Если ( РабочийПериод <> МесяцРождения ) И ( РабочийПериод <= ДобавитьМесяц( МесяцРождения,12 ) ) Тогда 
				   ТекДата = ДобавитьМесяц(МесяцРождения,1 );
				   Пока  ТекДата <= РабочийПериод Цикл
					   Рез		= Рез + СуммаЕжемесячно;
					   ТекДата	= ДобавитьМесяц( ТекДата, 1 );  
				   КонецЦикла; 
			   КонецЕсли;
			   
		   КонецЕсли;
		   
	   ИначеЕсли РабочийПериод >= ПоследнийМесяцРасчета Тогда 
		   
		   Рез = ?(СуммаПособия = 0, КоэфПособия * ПрожиточныйМинимум, СуммаПособия);
		   
	   КонецЕсли;
	   
	   Результат = Мин(Рез, РезультатПолный);
	   
   КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
// Нет.
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДатаНачисления"		, Дата);
	Запрос.УстановитьПараметр("парамОрганизация"	, Организация);
	Запрос.УстановитьПараметр("парамФизЛицо"		, ФизЛицо);
	Запрос.УстановитьПараметр("ДокументСсылка"		, Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);

	ТекстЗапроса = "
	|Выбрать 
	|	Пособие.Дата, 
	|	Пособие.Организация,
	|	ВЫБОР КОГДА Пособие.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация ТОГДА Пособие.Организация ИНАЧЕ Пособие.Организация.ГоловнаяОрганизация КОНЕЦ Как ГоловнаяОрганизация, 
    |	Пособие.Организация								КАК ОбособленноеПодразделение,
	|	Пособие.Ответственный							КАК Ответственный, 
	|	Пособие.Физлицо									КАК ФизЛицо,
	|	Пособие.ДатаРождения							КАК ДатаРождения,
	|	Пособие.Результат								КАК Результат,   
	|	Пособие.РезультатПолный							КАК РезультатПолный,   
	|	12												КАК КоличествоМесяцев,   
	|	РаботникиОрганизаций.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|	РаботникиОрганизаций.Приказ						КАК Приказ,
	| 	Пособие.Ссылка
	| 
	|Из	Документ." + Метаданные().Имя + " КАК Пособие
	| 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачисления, Организация = &парамОрганизация И ((Приказ.ВидЗанятости ЕСТЬ NULL) ИЛИ Приказ.ВидЗанятости <> &ВнутреннееСовместительство ) И ФизЛицо В (&парамФизЛицо) ) КАК РаботникиОрганизаций
	|		ПО РаботникиОрганизаций.Физлицо = Пособие.Физлицо
	| 
	|Где	Ссылка = &ДокументСсылка
	|";
          
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указана организация!';uk='Не зазначена організація!'"), Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Ответственный) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указано ответственное лицо!';uk='Не вказана відповідальна особа!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указан работник!';uk='Не зазначений працівник!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаРождения
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаРождения) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указана дата рождения!';uk='Не вказана дата народження!'"), Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуДополнительныхНачислений(ВыборкаПоШапкеДокумента)
	
	ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПриРождении;
	
	Движение = Движения.ОсновныеНачисленияРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.ПериодРегистрации = НачалоМесяца(ВыборкаПоШапкеДокумента.Дата);
	
	Движение.БазовыйПериодНачало 	= ДатаРождения;
	Движение.БазовыйПериодКонец 	= ДатаРождения;
	Движение.ВидРасчета		   = ВидРасчета;
	
	// Измерения
	Движение.ФизЛицо           = ВыборкаПоШапкеДокумента.ФизЛицо;
	Движение.Организация       = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.Приказ	           = ВыборкаПоШапкеДокумента.Приказ;
	
	// Реквизиты
	Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
	
	// Ресурсы
	Движение.Результат 		   = ВыборкаПоШапкеДокумента.Результат;
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента)
	
	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "ПлановыеНачисленияРаботниковОрганизаций";
	
	ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПриРождении;
	ДатаНачало = ДобавитьМесяц(НачалоМесяца(Дата), 1);
	ДатаКонец  = ДобавитьМесяц(НачалоМесяца(ДатаРождения), ВыборкаПоШапкеДокумента.КоличествоМесяцев+1);
	
	// 1-е движение по регистру - начало выплаты пособия при рождении ребенка
	//
	Движение = Движения[ИмяРегистра].Добавить();
	
	// Свойства
	Движение.Период					= ДатаНачало;
	
	// Измерения
	Движение.ФизЛицо				= ВыборкаПоШапкеДокумента.ФизЛицо;
	Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
	Движение.ВидРасчетаИзмерение	= ВидРасчета;
	Движение.ДокументОснование		= ВыборкаПоШапкеДокумента.Ссылка;
	Движение.Приказ	           = ВыборкаПоШапкеДокумента.Приказ;
	
	// Ресурсы
	Движение.ВидРасчета				= ВидРасчета;
	Движение.Размер					= ВыборкаПоШапкеДокумента.РезультатПолный;
	Движение.ДатаНачалаСобытия		= ВыборкаПоШапкеДокумента.ДатаРождения;
	Движение.Актуальность			= Истина;
	
	
	// 2-е движение по регистру - окончание выплаты пособия при рождении ребенка
	//
	Движение = Движения[ИмяРегистра].Добавить();
	
	// Свойства
	Движение.Период					= ДатаКонец;
	
	// Измерения
	Движение.ФизЛицо				= ВыборкаПоШапкеДокумента.ФизЛицо;
	Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
	Движение.Приказ					= ВыборкаПоШапкеДокумента.Приказ;
	Движение.ВидРасчетаИзмерение	= ВидРасчета;
	Движение.ДокументОснование		= ВыборкаПоШапкеДокумента.Ссылка;
	
	// Ресурсы
	Движение.ВидРасчета				= ВидРасчета;
	Движение.Размер					= 0;
	Движение.ДатаНачалаСобытия		= ВыборкаПоШапкеДокумента.ДатаРождения;
	Движение.Актуальность			= Ложь;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента)
	
	ИмяРегистра = "ВзаиморасчетыСРаботникамиОрганизаций";
	Движение = Движения[ИмяРегистра].Добавить();
	
	// Свойства
	Движение.Период                 = НачалоМесяца(ВыборкаПоШапкеДокумента.Дата);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	// Измерения
	Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
	Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
	Движение.ПериодВзаиморасчетов   = НачалоМесяца(ВыборкаПоШапкеДокумента.Дата);
	Движение.ВидВзаиморасчетов   	= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПриРождении.ВидВзаиморасчетов;
	
	// Ресурсы
	Движение.СуммаВзаиморасчетов	= ВыборкаПоШапкеДокумента.Результат; 
	Движение.СуммаНачислений 		= ВыборкаПоШапкеДокумента.Результат;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

//  Формирует движения для отчета по труду
//
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//
// Возвращаемое значение:
//  Нет.
//		
Процедура СформироватьФОТДляОтчетаПоТруду(ВыборкаПоШапкеДокумента)
	
		
		Движение = Движения.ФОТДляОтчетаПоТруду.Добавить();
		
		// свойства                              
		Движение.Период 				= НачалоМесяца( Дата );
		
		// измерения 
		Движение.Организация 			=	ВыборкаПоШапкеДокумента.Организация; 
		ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПриРождении;
		Движение.ПоказателиВидовОплатыТруда  = ВидРасчета.ПоказателиВидовОплатыТруда;
		
		// ресурсы
		Движение.Сумма = Результат;
		
		// реквизиты
	
КонецПроцедуры   // СформироватьФОТДляОтчетаПоТруду

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	Отказ = Истина;
	Возврат;
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			ДобавитьСтрокуДополнительныхНачислений(ВыборкаПоШапкеДокумента);
			ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента);
			ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента);
			
			СформироватьФОТДляОтчетаПоТруду(ВыборкаПоШапкеДокумента);
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Начисления);
	
КонецПроцедуры

