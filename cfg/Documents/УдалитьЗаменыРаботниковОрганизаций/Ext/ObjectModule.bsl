Перем мДлинаСуток;
Перем СоответствиеНеСуммовыхСпособовРасчета;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаменыРаботниковОрганизаций.Дата,
	|	ЗаменыРаботниковОрганизаций.Организация,
	|	ВЫБОР КОГДА ЗаменыРаботниковОрганизаций.Организация.ГоловнаяОрганизация = &ПустаяОрганизация ТОГДА ЗаменыРаботниковОрганизаций.Организация ИНАЧЕ ЗаменыРаботниковОрганизаций.Организация.ГоловнаяОрганизация КОНЕЦ КАК ГоловнаяОрганизация,
	|	ЗаменыРаботниковОрганизаций.Ссылка
	|ИЗ
	|	Документ.ЗаменыРаботниковОрганизаций КАК ЗаменыРаботниковОрганизаций
	|
	|ГДЕ
	|	ЗаменыРаботниковОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(Режим)

	Запрос = Новый Запрос;

    СписокСтруктурныхПодразделений = ПроцедурыУправленияПерсоналом.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	СписокСтруктурныхПодразделений.Добавить(Организация);
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений", СписокСтруктурныхПодразделений);
   	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));   

    // Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвиженийКадров": 
    // 1. Выборка "ТЧРаботникиОрганизации": 
	//		Выбираются строки документа.  
	// 2. Выборка "ПриказыОПриеме"
	//		Присоединяем данные о приказах-приемах на работу с целью проверки соответствия выбранных приказов физлицам и организации.
	// 3. Выборка "ДанныеПоРаботникиДоНазначения": 
	//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по регистру РаботникиОрганизации на дату ДатаНачала
	//		для выполнения движений и проверки "Работает ли работник на дату перемещения"
	//		(Использует данные выборки "ДатыПоследнихДвиженийРаботников")
	// 4. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки, имеющие пересекающийся период действия
	//
	// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	// 1. Выборка "ТЧРаботникиОрганизации":
	//		Выбираются строки документа 
	// 2. Выборка "РаботникиОрганизации":
	//		Для каждой строки ТЧРаботникиОрганизации ищем движения по регистру РаботникиОрганизации за период [ДатаНачала, ДатаОкончания]
	
	ТекстЗапроса = "ВЫБРАТЬ                                                          
	               |	""ДанныеДляДвиженийКадров""         КАК ВидСтрокиЗапроса,   
	               |	ТЧЗамены.ЗанимаемыхСтавок          	КАК ЗанимаемыхСтавок,
	               |	ТЧЗамены.ВидРасчета               	КАК ВидРасчета,
	               |	ТЧЗамены.НомерСтроки               	КАК НомерСтроки,
				   |	ТЧЗамены.ДатаНачала                	КАК ДатаНачала,
	               |	ТЧЗамены.ДатаОкончания             	КАК ДатаОкончания,
				   |
	               |	ТЧЗамены.ФизЛицо                   	КАК ФизЛицо,
	               |	ТЧЗамены.Приказ                    	КАК Приказ,
				   |
				   |	ВЫБОР КОГДА ПриказыОПриеме.ФизЛицо ЕСТЬ NULL  
				   |          ТОГДА ИСТИНА 
				   |          ИНАЧЕ ЛОЖЬ КОНЕЦ 
				   |                                                                	КАК ОшибкаВПриказеОПриемеНетФизЛица,
				   |
				   |	ВЫБОР КОГДА НЕ( ПриказыОПриеме.Ссылка.Организация В (&СписокСтруктурныхПодразделений) ) 
				   |          ТОГДА ИСТИНА 
				   |          ИНАЧЕ ЛОЖЬ КОНЕЦ 
				   |                                                                	КАК ОшибкаНеСоответствиеОрганизацииПриказаОПриеме,
				   |
				   |	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок                  КАК ПрежняяСтавка,
				   |
				   |
				   |
				   |    // кого замещал, все тоже самое для работников которые замещали
				   |	ТЧЗамены.ЗаменаФизЛицо  	                 		КАК ЗаменаФизЛицо,
				   |	ТЧЗамены.ЗаменаПриказ	                    		КАК ЗаменаПриказ,
				   |	ТЧЗамены.ЗаменаПодразделениеОрганизации        		КАК ПодразделениеОрганизации,
				   |	ТЧЗамены.ЗаменаДолжность        					КАК Должность,
				   |	ТЧЗамены.ЗаменаГрафикРаботы        					КАК ГрафикРаботы,
				   |
				   |	ВЫБОР КОГДА ЗаменаПриказыОПриеме.ФизЛицо ЕСТЬ NULL  
				   |          ТОГДА ИСТИНА 
				   |          ИНАЧЕ ЛОЖЬ КОНЕЦ 
				   |                                                                	КАК ЗаменаОшибкаВПриказеОПриемеНетФизЛица,
				   |
				   |	ВЫБОР КОГДА НЕ( ЗаменаПриказыОПриеме.Ссылка.Организация В (&СписокСтруктурныхПодразделений) ) 
				   |          ТОГДА ИСТИНА 
				   |          ИНАЧЕ ЛОЖЬ КОНЕЦ 
				   |                                                                	КАК ЗаменаОшибкаНеСоответствиеОрганизацииПриказаОПриеме,
				   |
				   |	ЗаменаДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок       КАК ЗаменаПрежняяСтавка,
				   |	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер                     КАК КонфликтнаяСтрокаНомер,
				   |	NULL                                                            КАК КонфликтныйДокумент
	               |
	               |ИЗ Документ.ЗаменыРаботниковОрганизаций.Замены КАК ТЧЗамены
				   |
				   |
				   |// --- ПриказыОПриеме ---
				   |ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриказыОПриеме
				   |ПО    ПриказыОПриеме.Ссылка = ТЧЗамены.Приказ 
				   |	И ПриказыОПриеме.ФизЛицо = ТЧЗамены.ФизЛицо 
				   |	И ПриказыОПриеме.Ссылка.Проведен
				   |
				   |
				   |ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ЗаменаПриказыОПриеме
				   |ПО    ЗаменаПриказыОПриеме.Ссылка = ТЧЗамены.ЗаменаПриказ 
				   |	И ЗаменаПриказыОПриеме.ФизЛицо = ТЧЗамены.ЗаменаФизЛицо
				   |	И ЗаменаПриказыОПриеме.Ссылка.Проведен
				   |
				   |
				   |// --- ДанныеПоРаботникуДоНазначения ---
				   |ЛЕВОЕ СОЕДИНЕНИЕ (
				   |			ВЫБРАТЬ
				   |				ТЧЗамены.НомерСтроки КАК НомерСтроки,
				   |				МАКСИМУМ(Работники.Период)         КАК Период
				   |		
				   |				ИЗ Документ.ЗаменыРаботниковОрганизаций.Замены КАК ТЧЗамены
				   |		
				   |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
				   |				ПО 	  ТЧЗамены.ФизЛицо  = Работники.Физлицо 
				   |					И ТЧЗамены.Приказ   = Работники.Приказ 
				   |					И Работники.Период               <= ТЧЗамены.ДатаНачала
				   |		
				   |			ГДЕ ТЧЗамены.Ссылка = &ДокументСсылка
				   |		
				   |			СГРУППИРОВАТЬ ПО
				   |				ТЧЗамены.НомерСтроки
				   |) КАК ДатыПоследнихДвиженийРаботников
				   |ПО ТЧЗамены.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
				   |		
				   |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
				   |ПО    ДанныеПоРаботникуДоНазначения.Физлицо = ТЧЗамены.ФизЛицо 
				   |И ДанныеПоРаботникуДоНазначения.Приказ  = ТЧЗамены.Приказ 
				   |И ДанныеПоРаботникуДоНазначения.Период  = ДатыПоследнихДвиженийРаботников.Период
				   |		
				   |
				   |// --- ЗаменаДанныеПоРаботникуДоНазначения ---
				   |ЛЕВОЕ СОЕДИНЕНИЕ (
				   |	ВЫБРАТЬ
				   |		ТЧЗамены.НомерСтроки КАК НомерСтроки,
				   |		МАКСИМУМ(Работники.Период)         КАК Период
				   |		
				   |	ИЗ Документ.ЗаменыРаботниковОрганизаций.Замены КАК ТЧЗамены
				   |		
				   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
				   |	ПО 	  ТЧЗамены.ФизЛицо  = Работники.Физлицо 
				   |		И ТЧЗамены.Приказ   = Работники.Приказ 
				   |		И Работники.Период  <= ТЧЗамены.ДатаНачала
				   |		
				   |	ГДЕ ТЧЗамены.Ссылка = &ДокументСсылка
				   |		
				   |	СГРУППИРОВАТЬ ПО
				   |		ТЧЗамены.НомерСтроки
				   |) КАК ЗаменаДатыПоследнихДвиженийРаботников
				   |ПО ТЧЗамены.НомерСтроки = ЗаменаДатыПоследнихДвиженийРаботников.НомерСтроки
				   |		
				   |		
				   |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ЗаменаДанныеПоРаботникуДоНазначения
				   |ПО    ЗаменаДанныеПоРаботникуДоНазначения.Физлицо = ТЧЗамены.ФизЛицо 
				   |	И ЗаменаДанныеПоРаботникуДоНазначения.Приказ  = ТЧЗамены.Приказ 
				   |	И ЗаменаДанныеПоРаботникуДоНазначения.Период  = ЗаменаДатыПоследнихДвиженийРаботников.Период
				   |		
				   |// --- конфликтная строка ---
				   |ЛЕВОЕ СОЕДИНЕНИЕ (
				   |    ВЫБРАТЬ
				   |		ТЧЗамены1.НомерСтроки           КАК НомерСтроки,
				   |		ТЧЗамены1.ФизЛицо               КАК ФизЛицо,
				   |		ТЧЗамены1.Приказ                КАК Приказ,
				   |		ТЧЗамены1.ЗаменаФизЛицо         КАК ЗаменаФизЛицо,
				   |		ТЧЗамены1.ЗаменаПриказ          КАК ЗаменаПриказ,
				   |		ТЧЗамены1.ДатаНачала            КАК ДатаНачала,
				   |		ТЧЗамены1.ДатаОкончания         КАК ДатаОкончания,
				   |		МИНИМУМ(ТЧЗамены2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
				   |			
				   |		ИЗ Документ.ЗаменыРаботниковОрганизаций.Замены КАК ТЧЗамены1
				   |			
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаменыРаботниковОрганизаций.Замены КАК ТЧЗамены2
				   |		ПО (ТЧЗамены2.Ссылка = &ДокументСсылка) 
				   |		   И ТЧЗамены1.ФизЛицо = ТЧЗамены2.ФизЛицо 
				   |		   И ТЧЗамены1.Приказ = ТЧЗамены2.Приказ 
				   |		   И ТЧЗамены1.ЗаменаФизЛицо = ТЧЗамены2.ЗаменаФизЛицо 
				   |		   И ТЧЗамены1.ЗаменаПриказ = ТЧЗамены2.ЗаменаПриказ 
				   |		   И ТЧЗамены1.НомерСтроки <> ТЧЗамены2.НомерСтроки 
				   |		   И ТЧЗамены1.ДатаНачала <= ТЧЗамены2.ДатаОкончания 
				   |		   И ТЧЗамены2.ДатаНачала <= ТЧЗамены1.ДатаОкончания 
				   |		
				   |	ГДЕ ТЧЗамены1.Ссылка = &ДокументСсылка
				   |		
				   |	СГРУППИРОВАТЬ ПО
				   |		ТЧЗамены1.НомерСтроки,
				   |		ТЧЗамены1.ФизЛицо,
				   |		ТЧЗамены1.Приказ,
				   |		ТЧЗамены1.ЗаменаФизЛицо,
				   |		ТЧЗамены1.ЗаменаПриказ,
				   |		ТЧЗамены1.ДатаНачала,
				   |		ТЧЗамены1.ДатаОкончания
				   |) КАК ПересекающиесяСтроки
				   |ПО ТЧЗамены.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	               |
	               |ГДЕ	ТЧЗамены.Ссылка = &ДокументСсылка
	               |
	               |
	               |
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерСтроки
				   |";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указана организация!';uk='Не зазначена організація!'"), Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоСтрокамДокумента, Отказ)
	
	СтрокаНачалаСообщенияОбОшибке = НСтр("ru='В строке номер ""';uk='У рядку номер ""'")+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	НСтр("ru='"" табл. части ""Работники"": ';uk='"" табл. частини ""Працівники"": '");

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда

		// --- общие параметры
		// ДатаНачала
		НетДатыНачала = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
		Если НетДатыНачала Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указазана дата начала замещения!';uk='не указазана дата початку заміщення!'"), Отказ);
		КонецЕсли;
		
		// ДатаОкончания
		НетДатыОкончания = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания);
		Если НетДатыОкончания Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указазана дата окнчания замещения!';uk='не указазана дата завершення заміщення!'"), Отказ);
		КонецЕсли;

		// ДатаОкончания
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) и ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='дата начала перемещения не может превышать дату окончания!';uk='дата початку переміщення не може перевищувати дату закінчення!'"), Отказ);
		КонецЕсли;

		// Количество ставок
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указано количество занимаемых работником ставок!';uk='не зазначена кількість ставок, що займаються працівником!'"), Отказ);
		КонецЕсли;

		// Вид замены
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан вид замены (замещение / совмещение)!';uk='не зазначений вид заміни (заміщення / суміщення)!'"), Отказ);
		КонецЕсли;
		               
		
		// --- КТО заменял
		// ФизЛицо
		НетФизЛица = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо);
		Если НетФизЛица Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не выбран работник!';uk='не обраний працівник!'"), Отказ);
		КонецЕсли;


		// Приказ
		НетПриказа = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Приказ);
		Если НетПриказа Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не задан приказ о приеме на работу!';uk='не заданий наказ про прийом на роботу!'"), Отказ);
		КонецЕсли;

		Если НетФизЛица ИЛИ НетДатыНачала ИЛИ НетПриказа Тогда
			Возврат; // Дальше не проверяем
		КонецЕсли;	
		
		// Приказ о приеме должен принадлежать организации
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеОрганизацииПриказаОПриеме Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' указанный приказ о приеме оформлен на другую организацию!';uk=' вказаний наказ про прийом оформлений на іншу організацію!'"), Отказ);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаВПриказеОПриемеНетФизЛица Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' работник и приказ о приеме не соответствуют друг другу!';uk=' працівник і наказ про прийом не відповідають один одному!'"), Отказ);
		КонецЕсли;

		// Проверка: ранее работник должен быть принят на работу
		Если ВыборкаПоСтрокамДокумента.ПрежняяСтавка = NULL Тогда
			СтрокаПродолжениеСообщенияОбОшибке = НСтр("ru='на ';uk='на '") + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + НСтр("ru=' работник ';uk=' працівник '") + ВыборкаПоСтрокамДокумента.ФизЛицо.Наименование + НСтр("ru=' еще не принят на работу!';uk=' ще не прийнятий на роботу!'");
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ПрежняяСтавка = 0 Тогда	
			СтрокаПродолжениеСообщенияОбОшибке = НСтр("ru='на ';uk='на '") + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + НСтр("ru=' работник ';uk=' працівник '") + ВыборкаПоСтрокамДокумента.ФизЛицо.Наименование + НСтр("ru=' уже уволен (с ';uk=' вже звільнений (з '") + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		КонецЕсли; 

		// --- КОГО заменяли
		// ФизЛицо
		НетФизЛица = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЗаменаФизЛицо);
		Если НетФизЛица Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не выбран работник!';uk='не обраний працівник!'"), Отказ);
		КонецЕсли;

		// Приказ
		НетПриказа = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЗаменаПриказ);
		Если НетПриказа Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не задан приказ о приеме на работу!';uk='не заданий наказ про прийом на роботу!'"), Отказ);
		КонецЕсли;

		Если НетФизЛица ИЛИ НетДатыНачала ИЛИ НетПриказа Тогда
			Возврат; // Дальше не проверяем
		КонецЕсли;	
		
		// Приказ о приеме должен принадлежать организации
		Если ВыборкаПоСтрокамДокумента.ЗаменаОшибкаНеСоответствиеОрганизацииПриказаОПриеме Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' указанный приказ о приеме оформлен на другую организацию!';uk=' вказаний наказ про прийом оформлений на іншу організацію!'"), Отказ);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаВПриказеОПриемеНетФизЛица Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' работник и приказ о приеме не соответствуют друг другу!';uk=' працівник і наказ про прийом не відповідають один одному!'"), Отказ);
		КонецЕсли;

		// Проверка: ранее работник должен быть принят на работу
		Если ВыборкаПоСтрокамДокумента.ЗаменаПрежняяСтавка = NULL Тогда
			СтрокаПродолжениеСообщенияОбОшибке = НСтр("ru='на ';uk='на '") + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + НСтр("ru=' работник ';uk=' працівник '") + ВыборкаПоСтрокамДокумента.ЗаменаФизЛицо.Наименование + НСтр("ru=' еще не принят на работу!';uk=' ще не прийнятий на роботу!'");
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ЗаменаПрежняяСтавка = 0 Тогда	
			СтрокаПродолжениеСообщенияОбОшибке = НСтр("ru='на ';uk='на '") + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + НСтр("ru=' работник ';uk=' працівник '") + ВыборкаПоСтрокамДокумента.ЗаменаФизЛицо.Наименование + НСтр("ru=' уже уволен (с ';uk=' вже звільнений (з '") + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		КонецЕсли; 
		
		// --- общие параметры
		// Проверка: противоречие другой строке документа
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			СтрокаСообщениеОбОшибке = НСтр("ru='период действия назначения пересекается с периодом действия строки ';uk='період дії призначення перетинається з періодом дії рядка '") + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!"; 
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ);
		КонецЕсли;	

	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	

		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = НСтр("ru='период действия приказа противоречит кадровому приказу ';uk='період дії наказу суперечить кадровому наказу '") + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ);
	КонецЕсли; 

КонецПроцедуры

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	
	СтруктураПроведенияПоРегистрамСведений.Вставить("СведенияОЗаменахВОрганизации");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента,    ВыборкаПоСтрокамДокумента,  
	СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		// Если документ нужно проводить по регистру, то для него есть ключ в структуре
		ИмяРегистра = "СведенияОЗаменахВОрганизации";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			// отразим новое место работы (движение 1)
			// ---
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период                     = ВыборкаПоСтрокамДокумента.ДатаНачала;
			
			// Измерения
			Движение.Организация                = ВыборкаПоШапкеДокумента.Организация;
			Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
			Движение.Приказ                    	= ВыборкаПоСтрокамДокумента.Приказ;
			Движение.ЗаменаФизЛицо		        = ВыборкаПоСтрокамДокумента.ЗаменаФизЛицо;
			Движение.ЗаменаПриказ				= ВыборкаПоСтрокамДокумента.ЗаменаПриказ;
			Движение.ВидРасчета                 = ВыборкаПоСтрокамДокумента.ВидРасчета;
			
			// Ресурсы
			Движение.КоличествоСтавок	            = ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок;
			Движение.ЗаменаПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
			Движение.ЗаменаДолжность	            = ВыборкаПоСтрокамДокумента.Должность;
			Движение.ЗаменаГрафикРаботы	            = ВыборкаПоСтрокамДокумента.ГрафикРаботы;
			
			
			// отразим новое место работы (движение 2)
			// --- ---
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период             = КонецДня(ВыборкаПоСтрокамДокумента.ДатаОкончания) + 1;
			
			// Измерения
			Движение.Организация        = ВыборкаПоШапкеДокумента.Организация;
			Движение.ФизЛицо            = ВыборкаПоСтрокамДокумента.ФизЛицо;
			Движение.Приказ            	= ВыборкаПоСтрокамДокумента.Приказ;
			Движение.ЗаменаФизЛицо      = ВыборкаПоСтрокамДокумента.ЗаменаФизЛицо;
			Движение.ЗаменаПриказ       = ВыборкаПоСтрокамДокумента.ЗаменаПриказ;
			Движение.ВидРасчета         = ВыборкаПоСтрокамДокумента.ВидРасчета;
			
			// Ресурсы
			Движение.КоличествоСтавок	        = 0;
			
			
			// добавим доплату до среднего
			// отразим новое место работы (движение 1)
			// ---
			Движение = Движения["ПлановыеНачисленияРаботниковОрганизаций"].Добавить();
			
			// Свойства
			Движение.Период                     = ВыборкаПоСтрокамДокумента.ДатаНачала;
			
			// Измерения
			Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
			Движение.Приказ						= ВыборкаПоСтрокамДокумента.Приказ;
			Движение.ВидРасчетаИзмерение        = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаДоСреднего;
			
			// Ресурсы
			Движение.ВидРасчета			        = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаДоСреднего;
			Движение.Размер						= 1;
			Движение.ДатаНачалаСобытия			= ВыборкаПоСтрокамДокумента.ДатаНачала;
			// Движение.Валюта					= "";
				
			// Реквизиты
			Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
			
			// отразим новое место работы (движение 2)
			// --- ---
			Движение = Движения["ПлановыеНачисленияРаботниковОрганизаций"].Добавить();
			
			// Свойства
			Движение.Период                     = КонецДня(ВыборкаПоСтрокамДокумента.ДатаОкончания) + 1;
			
			// Измерения
			Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
			Движение.Приказ						= ВыборкаПоСтрокамДокумента.Приказ;
			Движение.ВидРасчетаИзмерение        = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаДоСреднего;
			
			// Ресурсы
			Движение.ВидРасчета			        = "";
			// Движение.Размер					= 0;
			// Движение.Валюта					= "";
				
			// Реквизиты
			Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
			
		КонецЕсли;
		
		
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;

	Отказ = Истина;
	Возврат;

	
	СоответствиеНеСуммовыхСпособовРасчета = ПроведениеРасчетов.ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты();
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(СтруктураПроведенияПоРегистрамСведений);

			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники	= 	СформироватьЗапросПоРаботникиОрганизации(Режим);
			ВыборкаПоСтрокамДокумента 			= 	РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоСтрокамДокумента, Отказ);

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, СтруктураПроведенияПоРегистрамСведений);

				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	Возврат;
	
КонецПроцедуры

мДлинаСуток = 86400;

