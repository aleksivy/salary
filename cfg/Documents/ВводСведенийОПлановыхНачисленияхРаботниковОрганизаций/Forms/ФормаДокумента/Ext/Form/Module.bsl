////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;

// Ссылка на текущего работника формы
Перем мТекущийСотрудник;

// для синхронизации строк табличных полей
Перем мСинхронизируемыеТабличныеЧасти;

Перем мСведенияОВидахРасчетаОснНачислений;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мВалютаРегламентированногоУчета;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
	
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеНачисления,ЭлементыФормы.КоманднаяПанель1);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

// Обновляет значение отбора строк т.п. начислений
//
// Параметры
//	Сотрудник	- СправочникСсылка.СотрудникиОрганизаций - текущий сотрудник
//
Процедура УстановитьОтборРаботника(Сотрудник)

	ЭлементыФормы.ОсновныеНачисления.ОтборСтрок.Сотрудник.Значение = Сотрудник;
	ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Значение = Сотрудник;
	ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Значение = Сотрудник;
	
КонецПроцедуры // УстановитьОтборРаботника()

// Процедура формирует таблицу работников на основе данных табличных частей документа
//
// Параметры
//
Процедура ЗаполнитьТаблицуРаботниковОрганизации()
	
	РаботникиОрганизации.Очистить();
	
	ТЗ = ОсновныеНачисления.Выгрузить();
	ТЗ.Свернуть("Сотрудник");
	ТЗВзносы = Взносы.Выгрузить();
	ТЗВзносы.Свернуть("Сотрудник");
	Для Каждого Сотр из ТЗВзносы Цикл
		ТЗ.Добавить().Сотрудник = Сотр.Сотрудник;
	КонецЦикла;
	ТЗВзносы = ВзносыФОТ.Выгрузить();
	ТЗВзносы.Свернуть("Сотрудник");
	Для Каждого Сотр из ТЗВзносы Цикл
		ТЗ.Добавить().Сотрудник = Сотр.Сотрудник;
	КонецЦикла;
	ТЗ.Свернуть("Сотрудник");
			
	Для Каждого СтрокаТабличнойЧасти Из ТЗ Цикл
		НоваяСтрока=РаботникиОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьТаблицуРаботниковОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	Иначе 
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("Действие");
	СтруктураКолонок.Вставить("ДатаДействия");

	// Установить ограничение - изменять видимость колонок для табличной части ОсновныеНачисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ОсновныеНачисления.Колонки, СтруктураКолонок);

	// Активизируем табличное поле
	ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Заполним таблицу работников
	ЗаполнитьТаблицуРаботниковОрганизации();
    РаботникиОрганизации.Индексы.Добавить("Сотрудник");
    
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.ТабельныйНомерСтрока); 
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта1);
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта2);
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта3);
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта4);
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта5);
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта6);
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	// Установить активный реквизит.
	//Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
	//	ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;
	//КонецЕсли;
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		
		
		
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			
			Для Каждого СтрокаТЗ Из ЗначениеВыбора.Данные.Выгрузить() Цикл
				
				СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЗ);
				
				мТекущийСотрудник	= СтрокаТабличнойЧасти.Сотрудник;
				
				// Добавим в таблицы начислений записи из регистра сведений "ПлановыеНачисленияРаботниковОрганизаций"
				ДобавитьСтрокиНачисленийПоРаботнику(СтрокаТабличнойЧасти.Сотрудник);
				
				ДобавитьСтрокиВзносовПоРаботнику(СтрокаТабличнойЧасти.Сотрудник,Дата);
				
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ГруппыВзносовВФонды") Тогда
		
		ГрупповаяОбработкаВзносов(ЗначениеВыбора, РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник"), Дата);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		РаботникиОрганизации.Очистить();
		ОсновныеНачисления.Очистить();
		Взносы.Очистить();
		ВзносыФОТ.Очистить();
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, , Организация, )

КонецПроцедуры // ДействияФормыЗаполнить()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


// Процедура - обработчик события нажатия кнопки "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, Организация, 1);
	
КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииПодбор()

Процедура КоманднаяПанельРаботникиОрганизацииПереключитьОтборСписка(Кнопка)
	Если ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПереключитьОтборСписка.Пометка Тогда
		// отключим отбор
		ЭлементыФормы.ОсновныеНачисления.ОтборСтрок.Сотрудник.Использование				= Ложь;
		ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Использование                			= Ложь;
		ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Использование                     	= Ложь;
		
		ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПереключитьОтборСписка.Пометка = Ложь;
	Иначе
		
		Если ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока <> Неопределено Тогда
			ТекущееФизЛицо = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока.Сотрудник;
			
			// установим отбор
			ЭлементыФормы.ОсновныеНачисления.ОтборСтрок.Сотрудник.Использование     = Истина;
			ЭлементыФормы.ОсновныеНачисления.ОтборСтрок.Сотрудник.Значение          = ТекущееФизЛицо;
			
			ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Использование                   = Истина;
			ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Значение                        = ТекущееФизЛицо;
			
			ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Использование                = Истина;
			ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Значение                     = ТекущееФизЛицо;
			
			ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПереключитьОтборСписка.Пометка = Истина;
			
		Иначе
			Сообщить(НСтр("ru='В таблице работников не выбрана строка!';uk='У таблиці працівників не обраний рядок!'")) 
		КонецЕсли; 
		
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);

	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура - обработчик события "ОбработкаВыбора" табличного поля
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		РаботникиОрганизации.Добавить().Сотрудник = ВыбранноеЗначение;
		ДобавитьСтрокиНачисленийПоРаботнику(ВыбранноеЗначение);
		ДобавитьСтрокиВзносовПоРаботнику(ВыбранноеЗначение,Дата);
				
	КонецЕсли;
	
КонецПроцедуры // ТабличнаяЧастьОбработкаВыбора()

// Процедура - обработчик события "Перед удалением" строки табличного поля
//
Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	УдалитьСтрокиНачисленийПоРаботнику(Элемент.ТекущиеДанные.Сотрудник);
	УдалитьСтрокиВзносовПоРаботнику(Элемент.ТекущиеДанные.Сотрудник);
	
КонецПроцедуры // РаботникиОрганизацииПередУдалением()

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля
//
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)    
    
	Элемент = ЭлементыФормы.РаботникиОрганизации;
    
    ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		мТекущийСотрудник = Неопределено;
		Возврат;
	КонецЕсли;
	
	// запомним текущего работника
	мТекущийСотрудник	= ДанныеСтроки.Сотрудник;
	
	УстановитьОтборРаботника(ДанныеСтроки.Сотрудник);
    
КонецПроцедуры // РаботникиОрганизацииПриАктивизацииСтроки()

// Процедура - обработчик события "ПередОкончаниемРедактирования" табличного поля
//
Процедура РаботникиОрганизацииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	// если работник изменился, то по предыдущему работнику удалим строки, а по новому добавим
	Если ДанныеСтроки.Сотрудник <> мТекущийСотрудник Тогда
		УдалитьСтрокиНачисленийПоРаботнику(мТекущийСотрудник);
		// запомним текущего работника
		мТекущийСотрудник = ДанныеСтроки.Сотрудник;
		// добавим строки начислений
		ДобавитьСтрокиНачисленийПоРаботнику(ДанныеСтроки.Сотрудник);
		ДобавитьСтрокиВзносовПоРаботнику(ДанныеСтроки.Сотрудник,Дата);
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииПередОкончаниемРедактирования()

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);
	
КонецПроцедуры // РаботникиОрганизацииПриПолученииДанных()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица
//
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	УстановитьОтборРаботника(ДанныеСтроки.Сотрудник);

КонецПроцедуры // РаботникиОрганизацииСотрудникПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода физического лица
//
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникНачалоВыбора()

Процедура РаботникиОрганизацииСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокиРаботников = РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение));
	Если СтрокиРаботников.Количество() > 0 И Элемент.Значение <> ВыбранноеЗначение Тогда
		Предупреждение(НСтр("ru='В данном документе по одному работнику можно вводить только одну строку!';uk='В даному документі по одному працівнику можна вводити тільки один рядок!'"));
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = ВыбранноеЗначение;
	ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
	УстановитьОтборРаботника(ВыбранноеЗначение);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникОкончаниеВводаТекста()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

// Процедура - обработчик события "ПриАктивизацииСтроки" строки ТЧ
//
Процедура ОсновныеНачисленияПриАктивизацииСтроки(Элемент)
    
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.ОсновныеНачисления, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
    
КонецПроцедуры // ОсновныеНачисленияПриАктивизацииСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" строки ТЧ
//
Процедура ОсновныеНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ДанныеСтроки.ДатаДействия = Дата;
		
		Если ЭлементыФормы.ОсновныеНачисления.ОтборСтрок.Сотрудник.Использование И ЗначениеЗаполнено(ЭлементыФормы.ОсновныеНачисления.ОтборСтрок.Сотрудник.Значение) Тогда
			ДанныеСтроки.Сотрудник = ЭлементыФормы.ОсновныеНачисления.ОтборСтрок.Сотрудник.Значение;
			
		Иначе
			ДанныеСтрокиТЧРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
			Если ДанныеСтрокиТЧРаботники <> Неопределено Тогда
				ДанныеСтроки.Сотрудник = ДанныеСтрокиТЧРаботники.Сотрудник;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияПриНачалеРедактирования()

// Процедура - обработчик события "ПослеУдаления" строки ТЧ
//
Процедура ОсновныеНачисленияПослеУдаления(Элемент)
	
	ЗаполнитьТаблицуРаботниковОрганизации();
	
КонецПроцедуры // ОсновныеНачисленияПослеУдаления()

// Процедура - обработчик события "ПриВыводеСтроки" ТЧ
//
Процедура ОсновныеНачисленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПриВыводеСтрокиПлановыхНачисленийИУдержаний(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчетаОснНачислений, );
    	
	ОформлениеСтроки.Ячейки.Период.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.ДатаДействияКонец.ТолькоПросмотр = ДанныеСтроки.Действие <> Перечисления.ВидыДействияСНачислением.Начать;
	
КонецПроцедуры // ОсновныеНачисленияПриВыводеСтроки()

// Процедура - обработчик события "ПриОкончанииРедактирования" ТЧ
//
Процедура ОсновныеНачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущаяСтрока.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		Элемент.ТекущаяСтрока.Показатель1 = 0;
		Элемент.ТекущаяСтрока.Показатель2 = 0;
		Элемент.ТекущаяСтрока.Показатель3 = 0;
		Элемент.ТекущаяСтрока.Показатель4 = 0;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияПриОкончанииРедактирования()

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура ОсновныеНачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.ОсновныеНачисления, ОформленияСтрок);
	
КонецПроцедуры // ОсновныеНачисленияПриПолученииДанных()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

Процедура ОсновныеНачисленияСотрудникПриИзменении(Элемент)
	ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Сотрудник = Элемент.Значение;
	ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Физлицо = Элемент.Значение.Физлицо;
	Если РаботникиОрганизации.Найти(Элемент.Значение,"Сотрудник") = Неопределено Тогда
		ЗаполнитьТаблицуРаботниковОрганизации();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода начисления  
//
Процедура ОсновныеНачисленияВидРасчетаПриИзменении(Элемент)
	
	//СведенияОВидеРасчета = РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчетаОснНачислений, Элемент.Значение);
	//ДанныеСтроки = ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные;
	//
	//Если Не СведенияОВидеРасчета.РазмерТребуется Тогда
	//	ДанныеСтроки.Показатель1			= 0;
	//	ДанныеСтроки.ТарифныйРазряд1	= Справочники.ТарифныеРазряды.ПустаяСсылка();
	//КонецЕсли;
	//
	//// для ночных и вчерних определим "процент отплаты"
	//Если Элемент.Значение = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы Тогда
	//	ДанныеСтроки.Показатель2 = 100*РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).КоэффициентВечерних;
	//ИначеЕсли Элемент.Значение = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы Тогда
	//	ДанныеСтроки.Показатель2 = 100*РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).КоэффициентНочных;
	//Иначе
	//	ДанныеСтроки.Показатель2 = 0;
	//КонецЕсли;
	//
	//Если СведенияОВидеРасчета.НеТребуетВалюты Тогда
	//	ДанныеСтроки.Валюта1			= Справочники.Валюты.ПустаяСсылка();
	//	
	//Иначе
	//	ИспользуютсяНачисленияВВалюте = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте");
	//		
	//	Если Не ИспользуютсяНачисленияВВалюте И ДанныеСтроки.Валюта1.Пустая() Тогда
	//		ДанныеСтроки.Валюта1 = мВалютаРегламентированногоУчета;
	//	КонецЕсли;
	//		
	//КонецЕсли;
	//
	//Для СчПоказателей = 1 По 4 Цикл
	//	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Валюта" + СчПоказателей]) И 
	//		СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
	//		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Валюта" + СчПоказателей] = мВалютаРегламентированногоУчета;
	//	КонецЕсли;
	//	Если НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
	//		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Валюта" + СчПоказателей] = Справочники.Валюты.ПустаяСсылка();
	//	КонецЕсли;
	//	Если НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
	//		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Показатель" + СчПоказателей] = 0;
	//	КонецЕсли;
	//КонецЦикла;		
	ПриИзмененииВидаРасчета(Элемент.Значение,"ОсновныеНачисления");	
КонецПроцедуры // ОсновныеНачисленияВидРасчетаПриИзменении()

Процедура ОсновныеНачисленияДействиеПриИзменении(Элемент)
	Если Элемент.Значение <> Перечисления.ВидыДействияСНачислением.Начать Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.ДатаДействияКонец = ""
	КонецЕсли;
КонецПроцедуры

Процедура ПриИзмененииВидаРасчета(Значение, ИмяОбъекта)
	
	СведенияОВидеРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчетаОснНачислений, Значение);
	
	Для СчПоказателей = 1 По Мин(СведенияОВидеРасчета["КоличествоПоказателей"],6) Цикл
		Если НЕ ЗначениеЗаполнено(ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей]) И 
			СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей] = мВалютаРегламентированногоУчета;
		КонецЕсли;
		Если НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей] = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;
		Если НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Показатель" + СчПоказателей] = 0;
		КонецЕсли;
	КонецЦикла;
	
	
	
	// для ночных и вчерних определим "процент отплаты"
	Если Значение = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы Тогда
		ЭлементыФормы[ИмяОбъекта].ТекущиеДанные.Показатель2 = 100*РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).КоэффициентВечерних;
	ИначеЕсли Значение = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы Тогда
		ЭлементыФормы[ИмяОбъекта].ТекущиеДанные.Показатель2 = 100*РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).КоэффициентНочных;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Взносы

// Процедура - обработчик события "ПриАктивизацииСтроки" строки ТЧ
//
Процедура ВзносыПриАктивизацииСтроки(Элемент)
    
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.Взносы, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
    
КонецПроцедуры // ВзносыНачисленияПриАктивизацииСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" строки ТЧ
//
Процедура ВзносыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ДанныеСтроки.ДатаДействия = Дата;
		
		Если ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Использование И ЗначениеЗаполнено(ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Значение) Тогда
			ДанныеСтроки.Сотрудник = ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Значение;
			
		Иначе
			ДанныеСтрокиТЧРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
			Если ДанныеСтрокиТЧРаботники <> Неопределено Тогда
				ДанныеСтроки.Сотрудник = ДанныеСтрокиТЧРаботники.Сотрудник;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВзносыПриНачалеРедактирования()

// Процедура - обработчик события "ПослеУдаления" строки ТЧ
//
Процедура ВзносыПослеУдаления(Элемент)
	
	ЗаполнитьТаблицуРаботниковОрганизации();
	
КонецПроцедуры // ВзносыПослеУдаления()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ Взносы

Процедура ВзносыСотрудникПриИзменении(Элемент)
	ЭлементыФормы.Взносы.ТекущиеДанные.Сотрудник = Элемент.Значение;
	ЭлементыФормы.Взносы.ТекущиеДанные.Физлицо = Элемент.Значение.Физлицо;
	Если РаботникиОрганизации.Найти(Элемент.Значение,"Сотрудник") = Неопределено Тогда
		ЗаполнитьТаблицуРаботниковОрганизации();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ВзносыСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ВзносыСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ВзносыСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры // ВзносыСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ВзносыСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры // ВзносыСотрудникОкончаниеВводаТекста()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ВзносыФОТ

// Процедура - обработчик события "ПриАктивизацииСтроки" строки ТЧ
//
Процедура ВзносыФОТПриАктивизацииСтроки(Элемент)
    
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.ВзносыФОТ, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
    
КонецПроцедуры // ВзносыФОТНачисленияПриАктивизацииСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" строки ТЧ
//
Процедура ВзносыФОТПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ДанныеСтроки.ДатаДействия = Дата;
		
		Если ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Использование И ЗначениеЗаполнено(ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Значение) Тогда
			ДанныеСтроки.Сотрудник = ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Значение;
			
		Иначе
			ДанныеСтрокиТЧРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
			Если ДанныеСтрокиТЧРаботники <> Неопределено Тогда
				ДанныеСтроки.Сотрудник = ДанныеСтрокиТЧРаботники.Сотрудник;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВзносыФОТПриНачалеРедактирования()

// Процедура - обработчик события "ПослеУдаления" строки ТЧ
//
Процедура ВзносыФОТПослеУдаления(Элемент)
	
	ЗаполнитьТаблицуРаботниковОрганизации();
	
КонецПроцедуры // ВзносыФОТПослеУдаления()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ВзносыФОТ

Процедура ВзносыФОТСотрудникПриИзменении(Элемент)
	ЭлементыФормы.ВзносыФОТ.ТекущиеДанные.Сотрудник = Элемент.Значение;
	ЭлементыФормы.ВзносыФОТ.ТекущиеДанные.Физлицо = Элемент.Значение.Физлицо;
	Если РаботникиОрганизации.Найти(Элемент.Значение,"Сотрудник") = Неопределено Тогда
		ЗаполнитьТаблицуРаботниковОрганизации();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ВзносыФОТСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ВзносыФОТСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ВзносыФОТСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры // ВзносыФОТСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ВзносыФОТСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры // ВзносыФОТСотрудникОкончаниеВводаТекста()

Процедура ДействияФормыНачислений(Кнопка)
	
	Форма = ПолучитьФорму("ФормаГрупповаяОбработка", Кнопка);
	Форма.Документ = ДокументОбъект;
	Форма.Работники = РаботникиОрганизации;
	Форма.ОткрытьМодально();
	
КонецПроцедуры

Процедура ДействияФормыВзносов(Кнопка)
	
	ФормаВыбора = Справочники.ГруппыВзносовВФонды.ПолучитьФормуВыбора("ФормаВыбораДляГрупповогоИзменения", ЭтаФорма);
	ФормаВыбора.Открыть();
	
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
мСинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]		= Ложь;
мСинхронизируемыеТабличныеЧасти["ОсновныеНачисления"]		= Ложь;
мСинхронизируемыеТабличныеЧасти["Взносы"]					= Ложь;
мСинхронизируемыеТабличныеЧасти["ВзносыФОТ"]				= Ложь;

мСведенияОВидахРасчетаОснНачислений = Новый Соответствие;

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

