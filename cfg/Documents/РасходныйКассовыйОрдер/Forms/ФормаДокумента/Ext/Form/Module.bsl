
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

//Хранит текущую строку списка ведомостей на выплату ЗП
Перем СтрокаВыплата;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

Перем мСчетБУ;

Перем ИнвертироватьСуммы;

Перем мПечатнаяФормаПоУмолчанию;

Перем мВедомость;


// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит текущую Организацию - для установки номера ордера
Перем мТекущаяОрганизация;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


// Процедура рассчитывает сумму платежа по сумме взаиморасчетов.
//
Процедура РассчитатьСуммуПлатежа()
	
	ПроверкаКурсовВалют(СтрокаПлатеж);
	
	СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;	
	
КонецПроцедуры // РассчитатьСуммуПлатежа()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВыплатаЗаработнойПлаты,ЭлементыФормы.КоманднаяПанель1);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = Истина;
	
	Если (ОтражатьВБухгалтерскомУчете)Тогда
		ЭлементыФормы.ОтражатьВУправленческомУчете.Доступность = Ложь;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ВыплатаЗП",ЭлементыФормы.ОсновнаяПанель);
		ЭлементыФормы.ВыплатаЗаработнойПлаты.Колонки.СчетУчета.Видимость     = ОтражатьВБухгалтерскомУчете;
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику) И (ОтражатьВБухгалтерскомУчете) Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ВыплатаЗПРаботнику",ЭлементыФормы.ОсновнаяПанель);
		ЭлементыФормы.ВыплатаЗаработнойПлаты.Колонки.СчетУчета.Видимость     = ОтражатьВБухгалтерскомУчете;
		
	КонецЕсли;

	УстановитьДанныеДляРеквизитов();
	
КонецПроцедуры // УстановитьВидимость()

// Процедура переопределяет источники данных для реквизитов "СуммаДокумента" и "СуммаВзаиморасчетов".
// В режиме расчетов с контрагентами без разбиения они меняются местами.
//
Процедура УстановитьДанныеДляРеквизитов()
			
		ЭлементыФормы.СуммаДокумента.Данные="СуммаДокумента";
		ЭлементыФормы.НадписьВалютаДокумент.Данные="НадписьВалютаДокумент";

		ЭлементыФормы.НадписьСуммаДокумент.Данные="";
		ЭлементыФормы.НадписьСуммаДокумент.Заголовок=НСтр("ru='Сумма: ';uk='Сума: '");
		
		ИнвертироватьСуммы=Ложь;
					
КонецПроцедуры // УстановитьДанныеДляРеквизитов()

// Устанавливает тип поля "Контрагент" в зависимости от вида операции.
//
// Параметры:
//  Нет.
//
Процедура УстановитьТипКонтрагент()

	ИмяСправочника         = "Контрагенты";
	ИмяРасчетногоДокумента ="АвансовыйОтчет";
	
	ЕстьКонтрагент=Истина;
	ЕстьРасчетныйДокумент=Ложь;

	Если      ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		ИмяСправочника = "КассыККМ";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику  Тогда
		ИмяСправочника = "ФизическиеЛица";
		ЕстьРасчетныйДокумент=Истина;
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		ИмяСправочника = "ФизическиеЛица";
		ИмяРасчетногоДокумента="ДоговорЗаймаСРаботником";
		ЕстьРасчетныйДокумент=Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		ЕстьКонтрагент=Ложь;
		
	КонецЕсли;
	
	Если ЕстьКонтрагент Тогда
		
		Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка." + ИмяСправочника) Тогда
			Контрагент = Справочники[ИмяСправочника].ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		Если НЕ Контрагент=Неопределено Тогда
			Контрагент=Неопределено;
		КонецЕсли;
		
	КонецЕсли;

	Если ЕстьРасчетныйДокумент Тогда
		
		Если ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка." + ИмяРасчетногоДокумента) Тогда
			ДокументОснование = Документы[ИмяРасчетногоДокумента].ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		Если Не ДокументОснование=Неопределено Тогда
			ДокументОснование=Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьТипКонтрагент()
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА НУМЕРАЦИИ КАССОВЫХ ОРДЕРОВ

Процедура УстановитьДоступностьПоляВводаНомераОрдера()

	ЭлементыФормы.НомерОрдера.ТолькоПросмотр = НЕ ЗначениеЗаполнено(НомерОрдера);
	Если ЭлементыФормы.НомерОрдера.ТолькоПросмотр Тогда
		ЭлементыФормы.НомерОрдера.Подсказка =  НСтр("ru='Номер ордера будет присвоен при записи объекта.';uk=""Номер ордеру буде привласнений при записі об'єкта.""");
	Иначе
		ЭлементыФормы.НомерОрдера.Подсказка =  НСтр("ru='Номер ордера';uk='Номер ордеру'");
	КонецЕсли;

КонецПроцедуры

Процедура СброситьУстановленныйНомерОрдера()
	
	НомерОрдера = "";
	УстановитьДоступностьПоляВводаНомераОрдера();
	
КонецПроцедуры	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если НЕ ЭтоНовый() Тогда
		//ОтраженоВОперУчете = Истина;
		ЗаполнитьСчетаЗП();
		
		//Оплачено        = Истина;
	КонецЕсли;
	
	УстановитьКнопкиПечати();

	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	// Закладки в конфигураторе показываются только для удобства редактирования.
	ЭлементыФормы.ОсновнаяПанель.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать; 
		
	Если ЭтоНовый()  Тогда // проверить объект на то, что он еще не внесен в ИБ
		// Заполнить реквизиты значениями по умолчанию.
		Если Не ЗначениеЗаполнено(ПараметрОснование) Тогда
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;
		ЗаполнитьСчетаЗП();

		
		Если ОтражатьВБухгалтерскомУчете = Неопределено 
			И ОтражатьВУправленческомУчете = Неопределено
			Тогда
			ОтражатьВБухгалтерскомУчете = Истина;
			ОтражатьВУправленческомУчете = Истина;
		КонецЕсли;

			
		ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;	
						
		
	Иначе 
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	КонецЕсли;
	
	ИзменитьКурсДокумента();
		
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	Массив = Новый Массив;
	Массив.Добавить(ВидОперации.Метаданные().ЗначенияПеречисления.ВыплатаЗаработнойПлатыПоВедомостям);
	Массив.Добавить(ВидОперации.Метаданные().ЗначенияПеречисления.ВыплатаЗаработнойПлатыРаботнику);
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
										  //ВидОперации.Метаданные().ЗначенияПеречисления,
										  Массив,
										  Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	//Доступность поля ввода номера
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	 
	УстановитьДоступностьПоляВводаНомераОрдера(); 
    	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	 
	мТекущаяОрганизация = Организация; 
		
	УстановитьВидимость();
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()
																			 
	НадписьВалютаДокумент=СокрЛП(ВалютаДокумента);
							
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	УстановитьДоступностьПоляВводаНомераОрдера(); 


КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
//Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

//	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мПечатнаяФормаПоУмолчанию);

//КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Список = Ложь;

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийРКО[Кнопка.Имя];
	КонецЕсли;
	

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям 
		И ВыплатаЗаработнойПлаты.Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru='Табличная часть ведомостей на выплату заработной платы"
"будет очищена. Продолжить?';uk='Таблична частина відомостей на виплату заробітної плати"
"буде очищена. Продовжити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

		ВыплатаЗаработнойПлаты.Очистить();

	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда

		Если ОтражатьВБухгалтерскомУчете Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаДокумента = Константы.ВалютаУправленческогоУчета.Получить();
		КонецЕсли;

		СтавкаНДС = "";
		
		СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда

		Если ОтражатьВБухгалтерскомУчете Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаДокумента = Константы.ВалютаУправленческогоУчета.Получить();
		КонецЕсли;

		СтавкаНДС = "";

		СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		
	КонецЕсли;

	УстановитьТипКонтрагент(); //Надо определить тип поля "Контрагент"

	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	// Номер меняем, если документ не проведен и "перемещается" в другой день
	Если (НЕ Проведен) И (НачалоДня(Дата)<> НачалоДня(мТекущаяДатаДокумента)) Тогда
		СброситьУстановленныйНомерОрдера();
	КонецЕсли;
	ИзменитьКурсДокумента();
	УстановитьВидимость(); 
	
КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура ИзменитьКурсДокумента()
	
	//СтруктураКурсаВалютаДокумента = ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	
	СтруктураКурсаВалютаДокумента = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВалютаДокумента));
	
	Если СтруктураКурсаВалютаДокумента.Курс = 0 Тогда
		
		СтруктураКурсаВалютаДокумента.Вставить("Курс", 1);
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='По валюте ""';uk='По валюті ""'") + ВалютаДокумента + НСтр("ru='"" на дату ""';uk='"" на дату ""'") + Дата + НСтр("ru='"" обнаружен нулевой курс.';uk='"" виявлений нульовий курс.'")
		                 + Символы.ПС + Символы.Таб + НСтр("ru='Временно, для расчетов, присвоено значение 1.';uk='Тимчасово, для розрахунків, присвоєно значення 1.'"));
	
	КонецЕсли;
	
	Если СтруктураКурсаВалютаДокумента.Кратность = 0 Тогда
		
		СтруктураКурсаВалютаДокумента.Вставить("Кратность", 1);
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='По валюте ""';uk='По валюті ""'") + ВалютаДокумента + НСтр("ru='"" на дату ""';uk='"" на дату ""'") + Дата + НСтр("ru='"" обнаружена нулевая кратность.';uk='"" виявлена нульова кратність.'")
		                 + Символы.ПС + Символы.Таб + НСтр("ru='Временно, для расчетов, присвоено значение 1.';uk='Тимчасово, для розрахунків, присвоєно значення 1.'"));
	
	КонецЕсли;
	
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // ИзменитьКурсДокумента()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	Если (ВыплатаЗаработнойПлаты.Количество() > 0 ) Тогда
		ТекстВопроса = НСтр("ru='Табличные части будут очищены. Продолжить?';uk='Табличні частини будуть очищені. Продовжити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Элемент.Значение = НЕ Элемент.Значение;
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	ВыплатаЗаработнойПлаты.Очистить();
	СуммаДокумента = 0;
		
	Если(ОтражатьВБухгалтерскомУчете) Тогда
		ОтражатьВУправленческомУчете = Истина;
		ЭлементыФормы.ОтражатьВУправленческомУчете.Доступность = Ложь;
	Иначе
		ЭлементыФормы.ОтражатьВУправленческомУчете.Доступность = Истина;
	КонецЕсли;
	
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда

		Если ОтражатьВБухгалтерскомУчете Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаДокумента = Константы.ВалютаУправленческогоУчета.Получить();
		КонецЕсли;

	КонецЕсли;
	
	УстановитьВидимость();
	
	Если (ОтражатьВУправленческомУчете) И (НЕ ОтражатьВБухгалтерскомУчете) Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ВыплатаЗП",ЭлементыФормы.ОсновнаяПанель);
		
		ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
		// Отобразить в заголовке формы вид операции.
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
		
		Массив = Новый Массив;
		Массив.Добавить(ВидОперации.Метаданные().ЗначенияПеречисления.ВыплатаЗаработнойПлатыПоВедомостям);
		ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Кнопки.Очистить();
		РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
											  //ВидОперации.Метаданные().ЗначенияПеречисления,
											  Массив,
		                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
	ИначеЕсли (ОтражатьВБухгалтерскомУчете) Тогда
		Массив = Новый Массив;
		Массив.Добавить(ВидОперации.Метаданные().ЗначенияПеречисления.ВыплатаЗаработнойПлатыПоВедомостям);
		Массив.Добавить(ВидОперации.Метаданные().ЗначенияПеречисления.ВыплатаЗаработнойПлатыРаботнику);
		ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Кнопки.Очистить();
		РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
											  //ВидОперации.Метаданные().ЗначенияПеречисления,
											  Массив,
		                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));								  
				
	КонецЕсли;

		

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
		
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям  И ОтражатьВБухгалтерскомУчете Тогда
		ВыплатаЗаработнойПлаты.Очистить();
	КонецЕсли;
	
	Если Организация <> мТекущаяОрганизация Тогда
		СброситьУстановленныйНомерОрдера();
	КонецЕсли;
	мТекущаяОрганизация = Организация;
	УстановитьВидимость();

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаДокумента".
//
Процедура СуммаДокументаПриИзменении()

	Если ИнвертироватьСуммы Тогда
		
		РассчитатьСуммуПлатежа();
				
	КонецЕсли;

КонецПроцедуры // СуммаДокументаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ФизЛицо".
//Экспортная потому, что используется в обработке "Выплата зарплаты расходными кассовыми ордерами"
Процедура ФизЛицоПриИзменении(Элемент) Экспорт 

	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
		             |	ФИОФизЛицСрезПоследних.Имя КАК Имя,
		             |	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
		             |ИЗ
		             |	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
		Запрос.УстановитьПараметр("Дата",Дата);
		Запрос.УстановитьПараметр("ФизЛицо",Контрагент.Физлицо);
		
		Результат=Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Выдать = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
			Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), ""),"");
		КонецЕсли;

		ДокФизЛица = ФормированиеПечатныхФорм.ПаспортныеДанные(Контрагент.Физлицо, Дата);

		Если ЗначениеЗаполнено(ДокФизЛица) Тогда
			ПоДокументу = Строка(ДокФизЛица.Вид) + НСтр("ru=' серия ';uk=' серія '") +
						  ДокФизЛица.Серия       + НСтр("ru=', номер ';uk=', номер '") +
						  ДокФизЛица.Номер       + НСтр("ru=', выданый ';uk=', виданий '") +
						  Формат(ДокФизЛица.ДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
						  ДокФизЛица.Выдан;
		КонецЕсли;

	КонецЕсли;
	ДокументОснованиеПриИзменении(ЭлементыФормы.ДокументОснование);
КонецПроцедуры

Процедура СотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
		ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина,  Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыВедомостьПриИзменении(Элемент)
	Запрос = Новый Запрос;

	// По регистру управленческих расчетов с работниками
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Запрос.Текст="ВЫБРАТЬ
		|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма) КАК Сумма
		|ИЗ
		|	Документ.ЗарплатаКВыплате.Зарплата КАК ЗарплатаКВыплатеЗарплата
		|
		|ГДЕ
		|	ЗарплатаКВыплатеЗарплата.Ссылка = &Ссылка";

		Запрос.УстановитьПараметр("Ссылка",Элемент.Значение);
		
		РезультатЗапроса=Запрос.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			ЭлементыФормы.ВыплатаЗаработнойПлаты.ТекущиеДанные.СуммаПлатежа = РезультатЗапроса.Сумма;
		КонецЕсли;

	Иначе
		
		Отбор = Новый Структура ("Ведомость");
		Отбор.Ведомость = мВедомость;
		СтрокиВыплатаЗаработнойПлаты = ВыплатаЗаработнойПлаты.НайтиСтроки(Отбор);
		Для каждого СтрокаВыплаты Из СтрокиВыплатаЗаработнойПлаты Цикл
			ВыплатаЗаработнойПлаты.Удалить(СтрокаВыплаты);	
		КонецЦикла;
		
		мВедомость = Элемент.Значение;
		Отбор.Ведомость = мВедомость;
		СтрокиВыплатаЗаработнойПлаты = ВыплатаЗаработнойПлаты.НайтиСтроки(Отбор);
		Для каждого СтрокаВыплаты Из СтрокиВыплатаЗаработнойПлаты Цикл
			ВыплатаЗаработнойПлаты.Удалить(СтрокаВыплаты);	
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Ссылка",мВедомость);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	СУММА(Основной.Сумма) КАК Сумма,
		|	Основной.Ссылка КАК Ведомость,
		|	Основной.СчетУчета
		|ИЗ Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК Основной
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Работники
		|ПО Работники.Ссылка = Основной.Ссылка
		|	И	Работники.Сотрудник = Основной.Сотрудник
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|ПО		Основной.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|	И	Основной.Сотрудник = РанееВыплаченныеСуммы.Сотрудник
		|	И	(РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
		|
		|ГДЕ	Основной.Ссылка = &Ссылка
		|	И	РанееВыплаченныеСуммы.Сотрудник ЕСТЬ NULL 
		|	И	Работники.Банк = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	И	Работники.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|	И   Работники.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
		|
		|СГРУППИРОВАТЬ ПО
		|	Основной.Ссылка,
		|	Основной.СчетУчета
		|";

		Выборка = Запрос.Выполнить().Выбрать();
	
		Пока Выборка.Следующий() Цикл

			СтрокаВыплаты = ВыплатаЗаработнойПлаты.Добавить();
			СтрокаВыплаты.Ведомость = Выборка.Ведомость;
			СтрокаВыплаты.СчетУчета = Выборка.СчетУчета;
			СтрокаВыплаты.СуммаПлатежа = Выборка.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;
	СуммаДокумента=ВыплатаЗаработнойПлаты.Итог("СуммаПлатежа");
	ЗаполнитьРеквизитыПечати("Ведомость");
		//РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыВедомостьНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка=Ложь;
	мВедомость = Элемент.Значение;

	Если ОтражатьВБухгалтерскомУчете Тогда

		ФормаВыбора = Документы.ЗарплатаКВыплатеОрганизаций.ПолучитьФормуВыбора("ФормаВыбораДляПлатежек",Элемент,);

		//Выбираем ведомости, относящиеся к выбранной в документе организации, со способом выплаты
		//"Через кассу" и не имеющие в ТЧ строки с реквизитом "Не выплачено"

		Запрос=Новый Запрос;
		Запрос.Текст="
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Основной.Ссылка.Номер КАК НомерВедомости
		|ИЗ	Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Основной
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Работники
		|ПО Работники.Ссылка = Основной.Ссылка
		|	И	Работники.Сотрудник = Основной.Сотрудник
		|
		|ГДЕ	Основной.Ссылка.Организация = &Организация 		
		|	И	Работники.Банк = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	И	Работники.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|";

		Запрос.УстановитьПараметр("Организация",Организация);

		СписокОтбора=Новый СписокЗначений;
		СписокОтбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НомерВедомости"));
		Если СписокОтбора.Количество() = 0 Тогда
			Сообщить(НСтр("ru='По данному Сотруднику не оформлено ни одной Ведомости на выплату зарплаты';uk='По даному Співробітнику не оформлено жодної Відомості на виплату зарплати'"));
		КонецЕсли;
		
		ФормаВыбора.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
		ФормаВыбора.Сотрудник = Контрагент;
	
		ФормаВыбора.Отбор.Номер.ВидСравнения=ВидСравнения.ВСписке;
		ФормаВыбора.Отбор.Номер.Значение      = СписокОтбора;
		ФормаВыбора.Отбор.Номер.Использование = Истина;
	
		ФормаВыбора.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
		ФормаВыбора.Отбор.Организация.Значение      = Организация;
		ФормаВыбора.Отбор.Организация.Использование = Истина;
		
		ФормаВыбора.Открыть();

	Иначе

		ФормаВыбора = Документы["ЗарплатаКВыплате"].ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.Открыть();

	КонецЕсли;

КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	СуммаДокумента = ВыплатаЗаработнойПлаты.Итог("СуммаПлатежа");
	Если (НЕ ОтменаРедактирования) И ОтражатьВБухгалтерскомУчете И Не ЗначениеЗаполнено(Организация) И НЕ Элемент.ТекущиеДанные.Ведомость=Неопределено Тогда
		Организация=Элемент.ТекущиеДанные.Ведомость.Организация;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если Ответственный.Пустая() Тогда
		Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	КонецЕсли;

КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если (НЕ ОтменаРедактирования) И (Элемент.ТекущиеДанные.Ведомость=Неопределено ИЛИ Элемент.ТекущиеДанные.Ведомость.Пустая())Тогда
		Сообщить(НСтр("ru='Не указана платежная ведомость.';uk='Не зазначена платіжна відомість.'"));
		Отказ=Истина;
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыПриАктивизацииСтроки(Элемент)
	
	СтрокаВыплата=ЭлементыФормы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа

Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыПослеУдаления(Элемент)
	СуммаДокумента = ВыплатаЗаработнойПлаты.Итог("СуммаПлатежа");
КонецПроцедуры

Процедура ДокументОснованиеПриИзменении(Элемент)
	//Если ВыплатаЗаработнойПлаты.Количество() = 0 Тогда
	//	ВыплатаЗаработнойПлаты.Добавить();
	//	ВыплатаЗаработнойПлаты[0].Ведомость = ДокументОснование;
	//Иначе
	//	ВыплатаЗаработнойПлаты[0].Ведомость = ДокументОснование;
	//КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
	    Источник = "ЗарплатаКВыплатеОрганизаций";
		ВалютаДокумента = мВалютаРегламентированногоУчета;
	Иначе
		Возврат
	КонецЕсли;

	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|Выбрать
	|	СУММА(ПараметрыОплаты.Сумма)						КАК Результат	
	|
	|Из
	|	Документ." + Источник + ".РаботникиОрганизации	КАК Выплата
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ." + Источник + ".ПараметрыОплаты КАК ПараметрыОплаты
	|ПО
	|	Выплата.Сотрудник = ПараметрыОплаты.Сотрудник
	|	И Выплата.Ссылка = ПараметрыОплаты.Ссылка
	|
	|ГДЕ
	|	Выплата.Сотрудник = &Контрагент
	|" + ?(ЗначениеЗаполнено(СчетУчета), "И ПараметрыОплаты.СчетУчета = &СчетУчета", "") +"
	|   И  Выплата.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Ссылка", ДОкументОснование);
	Запрос.УстановитьПараметр("СчетУчета", СчетУчета);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество() = 0 Тогда
		СуммаДокумента = 0 ;
	КонецЕсли;
	
	Если РезультатЗапроса.Следующий() Тогда
		СуммаДокумента = РезультатЗапроса.Результат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПечати("Ведомость");

КонецПроцедуры

Процедура ПолеВвода2ПриИзменении(Элемент)
	Если ВыплатаЗаработнойПлаты.Количество() = 0 Тогда
		ВыплатаЗаработнойПлаты.Добавить();
		ВыплатаЗаработнойПлаты[0].СчетУчета = Элемент.Значение;
	Иначе
		ВыплатаЗаработнойПлаты[0].СчетУчета = Элемент.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура ДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	мВедомость = Элемент.Значение;

	Если ОтражатьВБухгалтерскомУчете Тогда

		ФормаВыбора = Документы.ЗарплатаКВыплатеОрганизаций.ПолучитьФормуВыбора("ФормаВыбораДляПлатежек",Элемент,);

		//Выбираем ведомости, относящиеся к выбранной в документе организации, со способом выплаты
		//"Через кассу" и не имеющие в ТЧ строки с реквизитом "Не выплачено"

		Запрос=Новый Запрос;
		Запрос.Текст="
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Основной.Ссылка.Номер КАК НомерВедомости
		|ИЗ	Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Основной
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Работники
		|ПО Работники.Ссылка = Основной.Ссылка
		|	И	Работники.Сотрудник = Основной.Сотрудник
		|
		|ГДЕ	Основной.Ссылка.Организация = &Организация 		
		|	И	Работники.Банк = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	И	Работники.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|";

		Запрос.УстановитьПараметр("Организация",Организация);

		СписокОтбора=Новый СписокЗначений;
		СписокОтбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НомерВедомости"));
		Если СписокОтбора.Количество() = 0 Тогда
			Сообщить(НСтр("ru='По данному Сотруднику не оформлено ни одной Ведомости на выплату зарплаты';uk='По даному Співробітнику не оформлено жодної Відомості на виплату зарплати'"));
		КонецЕсли;
		
		ФормаВыбора.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
		ФормаВыбора.Сотрудник = Контрагент;
	
		ФормаВыбора.Отбор.Номер.ВидСравнения=ВидСравнения.ВСписке;
		ФормаВыбора.Отбор.Номер.Значение      = СписокОтбора;
		ФормаВыбора.Отбор.Номер.Использование = Истина;
	
		ФормаВыбора.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
		ФормаВыбора.Отбор.Организация.Значение      = Организация;
		ФормаВыбора.Отбор.Организация.Использование = Истина;
		
		ФормаВыбора.Открыть();

	Иначе

		ФормаВыбора = Документы["ЗарплатаКВыплате"].ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.Открыть();

	КонецЕсли;

	
КонецПроцедуры

Процедура ЗаполнитьСчетаЗП()
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоОплатеТруда);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетовОтбора", МассивОтбора);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.Код КАК Код,
	|	Хозрасчетный.Наименование КАК Наименование
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетовОтбора)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	
	СписокСчетовЗП = Новый СписокЗначений;

	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		СписокСчетовЗП.Добавить(Результат.Счет, Результат.Код + " (" + Результат.Наименование + ")");
	КонецЦикла;
	 ЭлементыФормы.СчетУчета.СписокВыбора = СписокСчетовЗП;
	ЭлементыФормы.ВыплатаЗаработнойПлаты.Колонки.СчетУчета.ЭлементУправления.СписокВыбора = СписокСчетовЗП;

КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

