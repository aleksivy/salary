// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;


//Хранит таблицу, использующуюся при проведении документа
Перем ТаблицаПлатежейУпр;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Формирует номер расходного оредера в пределах организации
//
Процедура УстановитьНомерОрдера() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаГода", НачалоГода(Дата));
	Запрос.УстановитьПараметр("ДатаКонцаГода", КонецГода(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка); 

	

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерОрдера КАК НомерОрдера
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка <> &Ссылка
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|	И РасходныйКассовыйОрдер.Дата >= &ДатаНачалаГода
	|	И РасходныйКассовыйОрдер.Дата <= &ДатаКонцаГода";

	СписокОрдеров = Запрос.Выполнить().Выбрать();
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	 
	ТаблицаЗначений.Колонки.Добавить("Номер"); 
	ТаблицаЗначений.Колонки.Добавить("Длина"); 

	Пока СписокОрдеров.Следующий() Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить(); 
		НоваяСтрока.Номер = СписокОрдеров.НомерОрдера; 
		НоваяСтрока.Длина = СтрДлина(СписокОрдеров.НомерОрдера); 
	КонецЦикла;
	
	ТаблицаЗначений.Сортировать("Длина Убыв, Номер Убыв");
	
	Попытка
		НомерОрдера = Число(ТаблицаЗначений[0].Номер) + 1;
	Исключение
		НомерОрдера = 1;
	КонецПопытки;
	
КонецПроцедуры	


// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;
	
	СписокМакетов.Добавить("РКО", НСтр("ru='Расходный кассовый ордер';uk='Видатковий касовий ордер'"));
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьРКО()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата                          КАК ДатаДокумента,
	|	Организация,
	|	СуммаДокумента                КАК Сумма,
	|	Контрагент.Представление      КАК ФИОПолучателя,
	|	ВалютаДокумента               КАК Валюта,
	|	ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	Выдать,
	|	Приложение,
	|	ПоДокументу,
	|	Основание,
	|	НомерОрдера
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент   = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйКассовыйОрдер_КО2";
		Вариант2018 = Ложь;
	Если Дата >= Дата('20180105') Тогда
		Макет = ПолучитьОбщийМакет("КО2_2018");
		Вариант2018 = Истина;
	ИначеЕсли Дата >= Дата('20090616') Тогда
		Макет = ПолучитьОбщийМакет("КО2_2009");
	Иначе
		Макет = ПолучитьОбщийМакет("КО2");
	КонецЕсли;
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	
	// Выводим шапку накладной
	ОбластьМакета.Параметры.Заполнить(Шапка);
	Если Вариант2018 Тогда
		ПредставлениеДаты = Формат(Шапка.ДатаДокумента, "Л=uk_UA; ДЛФ=DD");
		ПредставлениеДаты = Сред(ПредставлениеДаты, 1, СтрДлина(ПредставлениеДаты) - 2) + "року";
		ОбластьМакета.Параметры.ДатаДокументаШапка = ПредставлениеДаты;
	КонецЕсли;
	ОбластьМакета.Параметры.ПолноеНаименование = СведенияОбОрганизации.ПолноеНаименование;
	ОбластьМакета.Параметры.Сумма             = ОбщегоНазначения.ФорматСумм(Шапка.Сумма, Шапка.Валюта);
	Если Вариант2018 
         И (ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		    ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям)   
         Тогда
		ОбластьМакета.Параметры.СуммаПрописью = ?(Шапка.Валюта = мВалютаРегламентированногоУчета, "грн      коп.", "");
		ОбластьМакета.Область("R15C2:R15C8").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	Иначе
		ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.Сумма, Шапка.Валюта, "uk");
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		КодПоДРФО = Контрагент.Физлицо.КодПоДРФО;
		ОбластьМакета.Параметры.Выдать = Шапка.Выдать + ?(КодПоДРФО="",""," ("+КодПоДРФО+")");
	КонецЕсли;
	Если Шапка.Валюта = мВалютаРегламентированногоУчета Тогда
		ОбластьМакета.Параметры.СуммаПрописьюПолучил = ?(Вариант2018, "грн      коп.", "грн.      коп.");
	Иначе
		ОбластьМакета.Параметры.СуммаПрописьюПолучил = "";
	КонецЕсли;
	
	Если Шапка.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ОбластьМакета.Параметры.КодПоЕДРПОУ = СведенияОбОрганизации.КодПоДРФО
	Иначе	
		ОбластьМакета.Параметры.КодПоЕДРПОУ = СведенияОбОрганизации.КодПоЕДРПОУ
	КонецЕсли;	
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		тСчетУчета = СчетУчета;
	Иначе
		тСчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка(); 
	КонецЕсли;
	ТекстСчет = Строка(тСчетУчета.Код);
	
	ОбластьМакета.Параметры.Счет = ТекстСчет;

	Руководители = ФормированиеПечатныхФорм.ОтветственныеЛица(Шапка.Организация, Шапка.ДатаДокумента);


	Если ЗначениеЗаполнено(Руководители.Руководитель) Тогда
		ОбластьМакета.Параметры.ФИОРуководителя = Руководители.РуководительФИО.Фамилия	    + " " + Лев(Руководители.РуководительФИО.Имя, 1)	 + "." + Лев(Руководители.РуководительФИО.Отчество, 1) + ".";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер) Тогда
		ОбластьМакета.Параметры.ФИОБухгалтера   = Руководители.ГлавныйБухгалтерФИО.Фамилия 	+ " " + Лев(Руководители.ГлавныйБухгалтерФИО.Имя, 1) + "." + Лев(Руководители.ГлавныйБухгалтерФИО.Отчество, 1) + ".";
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		ОбластьМакета.Параметры.ФИОКассира  = Шапка.Выдать;
	ИначеЕсли ЗначениеЗаполнено(Руководители.Кассир) Тогда
		ОбластьМакета.Параметры.ФИОКассира      = Руководители.КассирФИО.Фамилия			+ " " + Лев(Руководители.КассирФИО.Имя, 1)			 + "." + Лев(Руководители.КассирФИО.Отчество, 1) + ".";
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьРКО()










// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru='Документ можно распечатать только после его записи';uk='Документ можна роздрукувати тільки після його запису'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru='Недостаточно полномочий для печати непроведенного документа!';uk='Недостатньо повноважень для друку непроведенного документа!'"));
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	Если ИмяМакета = "РКО" Тогда

		ТабДокумент = ПечатьРКО();
		
		
 		
		
		
	КонецЕсли;


	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт


	СтруктураМакетов = 
	Новый Структура("РКО",
			НСтр("ru='Расходный кассовый ордер';uk='Видатковий касовий ордер'"));
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет реквизиты, используемые для формирования печатной формы (Выдать, 
// Основание и ПоДокументу). 
// Параметры:
//  ЧтоИзменилось - имя реквизита документа
//
Процедура ЗаполнитьРеквизитыПечати(ЧтоИзменилось = Неопределено) Экспорт
 		// Основание
		Если    ЧтоИзменилось = "ВидОперации" 
			ИЛИ ЧтоИзменилось = "Ведомость"  Тогда
			
			Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
				Основание = "";
			
				Если ВыплатаЗаработнойПлаты.Количество() = 1 Тогда
					Основание = НСтр("ru='Платежная ведомость ';uk='Платіжна відомість '");
				ИначеЕсли ВыплатаЗаработнойПлаты.Количество() > 1 Тогда
					Основание = НСтр("ru='Платежные ведомости ';uk='Платіжні відомості '");
				КонецЕсли;
			
				Для каждого СтрВедомости Из ВыплатаЗаработнойПлаты Цикл
					
					Основание = Основание + "№ "+ ОбщегоНазначения.ПолучитьНомерНаПечать(СтрВедомости.Ведомость) + НСтр("ru=' от ';uk=' від '") + Формат(СтрВедомости.Ведомость.Дата, "ДФ=dd.MM.yyyy") + ", ";	
				
				КонецЦикла;
				
				// обрежем последнюю запятую
				Если Прав(Основание, 2) = ", " Тогда
					Основание = Сред(Основание, 1, СтрДлина(Основание) - 2);
				КонецЕсли;
				Руководители = ФормированиеПечатныхФорм.ОтветственныеЛица(Организация, Дата);
	
				Если ЗначениеЗаполнено(Руководители.Кассир) Тогда
					Выдать = Руководители.КассирФИО.Фамилия + " " + Лев(Руководители.КассирФИО.Имя, 1)+ "." + Лев(Руководители.КассирФИО.Отчество, 1) + ".";
				КонецЕсли;
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
				Основание = НСтр("ru='Платежная ведомость ';uk='Платіжна відомість '");
				Основание = Основание + ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументОснование) + НСтр("ru=' от ';uk=' від '") + Формат(ДокументОснование.Дата, "ДФ=dd.MM.yyyy") ;
			КонецЕсли;		
		КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Возвращает таблицу, аналогичную таблице "Расшифровка платежа" с добавленной колонкой "СуммаУпр"
//
Процедура ПолучитьТаблицуПлатежейРКОУпр()
	
	Запрос=Новый Запрос;
			
	Запрос.Текст="ВЫБРАТЬ
	|	&ПустойДоговор КАК ДоговорКонтрагента,
	|	ЛОЖЬ КАК ЗаТару,
	|	НЕОПРЕДЕЛЕНО КАК Сделка,
	|	ВыплатаЗаработнойПлатыДок.СуммаПлатежа КАК СуммаПлатежа,
	|	ВыплатаЗаработнойПлатыДок.СуммаПлатежа КАК СуммаВзаиморасчетов,
	|	ВыплатаЗаработнойПлатыДок.СуммаПлатежа КАК СуммаПлатежаПлан,
	|	ВЫРАЗИТЬ 
	|	(ВЫБОР 
	|		КОГДА &ВалютаДокумента=&ВалютаУпрУчета ТОГДА ВыплатаЗаработнойПлатыДок.СуммаПлатежа
	|		КОГДА &ВалютаДокумента<>&ВалютаУпрУчета И КурсыДокумента.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
	|			ВыплатаЗаработнойПлатыДок.СуммаПлатежа*КурсыДокумента.Курс * КурсыУпрУчета.Кратность 
	|			/ (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ 
	|	(ВЫБОР 
	|		КОГДА &ВалютаДокумента=&ВалютаРеглУчета ТОГДА ВыплатаЗаработнойПлатыДок.СуммаПлатежа
	|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
	|		КОГДА &ВалютаДокумента<>&ВалютаРеглУчета И КурсыДокумента.Курс <>0 ТОГДА
	|			ВыплатаЗаработнойПлатыДок.СуммаПлатежа*КурсыДокумента.Курс
	|			/ КурсыДокумента.Кратность
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаРегл,
	//|	ВыплатаЗаработнойПлатыДок.СтатьяДвиженияДенежныхСредств,
	//|	ВыплатаЗаработнойПлатыДок.ДокументПланированияПлатежа,
	//|	ВыплатаЗаработнойПлатыДок.ДокументПланированияПлатежа.ВключатьВПлатежныйКалендарь КАК ВключатьВПлатежныйКалендарь,
	//|	ВыплатаЗаработнойПлатыДок.Проект,
	|	ВЫБОР
	|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыДокумента.Курс КОНЕЦ Как КурсДокумента,
	|	ВЫБОР
	|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыДокумента.Кратность КОНЕЦ Как КратностьДокумента,
	|	ВЫБОР
	|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыУпрУчета.Курс КОНЕЦ Как КурсУпрУчета,
	|	ВЫБОР
	|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыУпрУчета.Кратность КОНЕЦ Как КратностьУпрУчета
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК ВыплатаЗаработнойПлатыДок
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаУпрУчета) КАК КурсыУпрУчета
	|	ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаДокумента) КАК КурсыДокумента
	|	ПО ИСТИНА
	|ГДЕ
	|	ВыплатаЗаработнойПлатыДок.Ссылка = &Ссылка";
		
	
	
	Запрос.УстановитьПараметр("ПустойДоговор",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		
	
	Запрос.УстановитьПараметр("ДатаДокумента",Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента",ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУпрУчета",Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРеглУчета",Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	ТаблицаПлатежейУпр=Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры // ПолучитьТаблицуПлатежей()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // ПроверкаКурсовВалют()


Процедура ЗаполнитьПоЗарплатеКВыплатеОрганизацииРегл(Основание)
	
	
	ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
	ВалютаДокумента=мВалютаРегламентированногоУчета;
	КурсДокумента=1;
	КратностьДокумента=1;

	//Проверим есть ли в ведомосте работники со способом выплаты "Через кассу"
	ЧерезКассу = Ложь;
	Для Каждого Работник ИЗ Основание.РаботникиОрганизации Цикл
		Если Работник.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
			ЧерезКассу = Истина;
		КонецЕсли;
	КонецЦикла;
	Если Не ЧерезКассу Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='В ведомости нет работников со способом выплаты - ""через кассу""';uk='У відомості немає працівників зі способом виплати - ""через касу""'"),,,СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;

	// Определим сумму выплаченной заработной платы
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Основание);
	
	Запрос.Текст="ВЫБРАТЬ
	|	ПараметрыОплаты.СчетУчета 			КАК СчетУчета,
	|	СУММА(ПараметрыОплаты.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК ПараметрыОплаты
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
	|		ПО		РаботникиОрганизации.Сотрудник = ПараметрыОплаты.Сотрудник
	|			И	(РаботникиОрганизации.Ссылка = &Ссылка)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО		ПараметрыОплаты.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|			И	ПараметрыОплаты.Сотрудник = РанееВыплаченныеСуммы.Сотрудник
	|			И	(РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
	|ГДЕ	ПараметрыОплаты.Ссылка = &Ссылка
	|	И	РанееВыплаченныеСуммы.Сотрудник ЕСТЬ NULL 
	|	И	РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	|	И	РаботникиОрганизации.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ПараметрыОплаты.СчетУчета
	|";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		
		СтрокаВедомость = ВыплатаЗаработнойПлаты.Добавить();
		СтрокаВедомость.Ведомость			= Основание;
		СтрокаВедомость.СчетУчета			= РезультатЗапроса.СчетУчета;
		СтрокаВедомость.СуммаПлатежа		= РезультатЗапроса.Сумма;
		
	КонецЦикла;
	
	СуммаДокумента = ВыплатаЗаработнойПлаты.Итог("СуммаПлатежа");
	ЗаполнитьРеквизитыПечати("Ведомость");

	Организация = Основание.Организация;

//	КассаПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКасса");

	//Если КассаПоУмолчанию.ВалютаДенежныхСредств=ВалютаДокумента Тогда
	//	Касса=КассаПоУмолчанию;
	//КонецЕсли;

	ОтражатьВБухгалтерскомУчете=Истина;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗарплатеКВыплатеУпр(Основание)
	
	ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
	ВалютаДокумента=Константы.ВалютаУправленческогоУчета.Получить();

	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

	СтрокаВедомость=ВыплатаЗаработнойПлаты.Добавить();
	СтрокаВедомость.Ведомость=Основание;

	// Определим сумму выплаченной заработной платы
	Запрос=Новый Запрос;
	Запрос.Текст="
	|ВЫБРАТЬ
	|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплате.Зарплата КАК ЗарплатаКВыплатеЗарплата
	|
	|ГДЕ
	|	ЗарплатаКВыплатеЗарплата.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка",Основание);

	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		СтрокаВедомость.СуммаПлатежа=РезультатЗапроса.Сумма;
		СуммаДокумента=РезультатЗапроса.Сумма;
	КонецЕсли;
		
	Организация=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");


	ОтражатьВУправленческомУчете = Истина;
	ОтражатьВБухгалтерскомУчете  = Ложь;
	
	ВалютаДокумента = Константы.ВалютаУправленческогоУчета.Получить();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплатаУпр()

	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("СуммаДокумента");
	СтруктураПолей.Вставить("Ответственный");
	
	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплатаУпр()


// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда //ИЛИ ОтражатьВНалоговомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;


КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

Процедура ДвиженияПоЗарплатеУпр()

	ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
		
	// По регистру управленческих расчетов с работниками
	Если (ОтражатьВУправленческомУчете И ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям) Тогда

		ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();

		// По регистру ВзаиморасчетыСРаботниками
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст="ВЫБРАТЬ
		|	ЗарплатаКВыплатеЗарплата.Физлицо КАК ФизЛицо,
		|	ЗарплатаКВыплатеЗарплата.Сумма КАК Сумма
		|ИЗ
		|	Документ.ЗарплатаКВыплате.Зарплата КАК ЗарплатаКВыплатеЗарплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
		|		ПО ЗарплатаКВыплатеЗарплата.Ссылка = РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость
		|
		|ГДЕ
		|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
		Результат = Запрос.Выполнить().Выбрать();

		Пока Результат.Следующий() Цикл

			Строка = Движения.ВзаиморасчетыСРаботниками.Добавить();

			Строка.Период      		= Дата;
			Строка.ВидДвижения 		= ВидДвиженияНакопления.Расход;
			Строка.Физлицо    		= Результат.ФизЛицо;
			Строка.СуммаУпр   	 	= Результат.Сумма;
			Строка.ХарактерВыплаты 	= Перечисления.ХарактерВыплатыЗарплаты.Зарплата;

		КонецЦикла;

	ИначеЕсли (ОтражатьВУправленческомУчете И ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику) Тогда	
		ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();

		// По регистру ВзаиморасчетыСРаботниками
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст="ВЫБРАТЬ
		|	ЗарплатаКВыплатеЗарплата.Физлицо КАК ФизЛицо,
		|	ЗарплатаКВыплатеЗарплата.Сумма КАК Сумма
		|ИЗ
		|	Документ.ЗарплатаКВыплате.Зарплата КАК ЗарплатаКВыплатеЗарплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
		|		ПО ЗарплатаКВыплатеЗарплата.Ссылка = РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.ДокументОснование
		|         И
		|          ЗарплатаКВыплатеЗарплата.Физлицо = &Физлицо
		|
		|ГДЕ
		|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка
		|  
		|
		|";
		
		Запрос.УстановитьПараметр("Физлицо", Контрагент);
		
		Результат = Запрос.Выполнить().Выбрать();

		Пока Результат.Следующий() Цикл

			Строка = Движения.ВзаиморасчетыСРаботниками.Добавить();

			Строка.Период      = Дата;
			Строка.ВидДвижения = ВидДвиженияНакопления.Расход;
			Строка.Физлицо     = Результат.ФизЛицо;
			Строка.СуммаУпр    = Результат.Сумма;
            Строка.ХарактерВыплаты 	= Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		СпособОплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
	//	СчетКасса = ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте;
		ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
		ПроведениеРасчетов.ВыполнитьДвиженияПоЗарплате( Ссылка, Движения, СпособОплаты, ВыплаченностьЗарплаты, ,,, );
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		// по конкретному ФизЛицу
		СпособОплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
	//	СчетКасса = ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте;
		ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
		ПроведениеРасчетов.ВыполнитьДвиженияПоЗарплате( Ссылка, Движения, СпособОплаты, ВыплаченностьЗарплаты, , Контрагент, , );
	КонецЕсли;
	
КонецПроцедуры


// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если ОтражатьВУправленческомУчете И (ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику) Тогда

		ДвиженияПоЗарплатеУпр();
		////ДвиженияПоЗарплатеРегл();

	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете И (ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику) Тогда
		
		ДвиженияПоРегистрамРегл(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок)
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплатаУпр(), Отказ, Заголовок);		
		
	Если ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками И
		ЗначениеЗаполнено(ДокументОснование) И НЕ ДокументОснование.Организация=Организация Тогда
		Сообщить(НСтр("ru='Организация, выбранная в документе, не совпадает с организацией, выбранной в договоре займа.';uk='Організація, обрана в документі, не збігається з організацією, обраною у договорі позики.'"));
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок)

    
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям И ОтражатьВБухгалтерскомУчете Тогда

		// Проверка на то, чтобы в закрываемых ведомостях не было невыплаченных значений.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НеВыплачено", Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		СписокВидовВыплатыАванс = Новый СписокЗначений;
		СписокВидовВыплатыАванс.Добавить(Справочники.ВидыВыплат.Аванс);
		СписокВидовВыплатыАванс.Добавить(Справочники.ВидыВыплат.АвансПредварительныйРасчет);
		Запрос.УстановитьПараметр("СписокВидовВыплатыАванс", СписокВидовВыплатыАванс);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОрганизаций.Ссылка.Представление КАК Ведомость
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК ЗарплатаКВыплатеОрганизаций
		|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизаций.Ссылка
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизаций.ВыплаченностьЗарплаты = &НеВыплачено
		|	И НЕ ЗарплатаКВыплатеОрганизаций.Ссылка.ВидВыплаты В (&СписокВидовВыплатыАванс)
		|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
		РезультатЗапроса = Запрос.Выполнить().Выбрать();

		Пока РезультатЗапроса.Следующий() Цикл
			ОбщегоНазначения.СообщитьОбОшибке(РезультатЗапроса.Ведомость + НСтр("ru=': есть строки с невыплаченной зарплатой!';uk=': є рядки з невиплаченою зарплатою!'"), Отказ, Заголовок);
		КонецЦикла;
		
		//Проверка на соответствие суммы по ведомостям сумме документа
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	СУММА(ПараметрыОплаты.Сумма) КАК СуммаВыплачено
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК ПараметрыОплаты
		|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ПараметрыОплаты.Ссылка
		|       И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.СчетУчета = ПараметрыОплаты.СчетУчета
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
		|		ПО ПараметрыОплаты.Ссылка = РаботникиОрганизации.Ссылка
		|		И ПараметрыОплаты.Сотрудник = РаботникиОрганизации.Сотрудник
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
		|			И ПараметрыОплаты.Сотрудник = РанееВыплаченныеСуммы.Сотрудник
		|			И РанееВыплаченныеСуммы.Регистратор <> &Ссылка
		|ГДЕ
		|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка
		|	И РаботникиОрганизации.ВыплаченностьЗарплаты = &Выплачено
		|	И РаботникиОрганизации.СпособВыплаты = &ЧерезКассу
		|	И РанееВыплаченныеСуммы.Сотрудник ЕСТЬ NULL
		|";
		
		Запрос.УстановитьПараметр("Выплачено",Перечисления.ВыплаченностьЗарплаты.Выплачено);
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("ЧерезКассу",Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если НЕ (Результат.Следующий() И Результат.СуммаВыплачено=СуммаДокумента) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не совпадает сумма документа и суммы по ведомостям на выплату заработной платы.';uk='Не збігається сума документа й сума по відомостях на виплату заробітної плати.'"),Отказ,Заголовок);
		КонецЕсли;

	КонецЕсли;


КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций")	Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ВалютаДокумента         = мВалютаРегламентированногоУчета;
		
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		
		КурсДокумента      = СтруктураКурсаДокумента.Курс;	
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
		ДокументОснование  = Основание.Ссылка;

		СпособЗаполнения = НСтр("ru='Не заполнять';uk='Не заповнювати'");
		ВалютаДокумента  = мВалютаРегламентированногоУчета;

		ЗаполнитьПоЗарплатеКВыплатеОрганизацииРегл(Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплате")	Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ВалютаДокумента         = мВалютаРегламентированногоУчета;
		
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		
		КурсДокумента      = СтруктураКурсаДокумента.Курс;	
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
		ДокументОснование  = Основание.Ссылка;

		СпособЗаполнения = НСтр("ru='Не заполнять';uk='Не заповнювати'");
		ВалютаДокумента  = мВалютаРегламентированногоУчета;
		
		ЗаполнитьПоЗарплатеКВыплатеУпр(Основание);
		
	КонецЕсли;

	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
 	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	
	
 	КурсДокумента      = СтруктураКурсаДокумента.Курс;
 	КратностьДокумента = СтруктураКурсаДокумента.Кратность;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();

	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПолучитьТаблицуПлатежейРКОУпр();
	
	Если НЕ Отказ Тогда
		ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок);
	КонецЕсли;
	
	ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ЗначениеЗаполнено(НомерОрдера) ИЛИ ЭтоНовый() Тогда
		УстановитьНомерОрдера();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
		НаборЗаписейРегистрацииВПоследовательности.Записать();
	КонецЦикла;
	
КонецПроцедуры
Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	
КонецПроцедуры
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

