////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мНачалоСобытия;
Перем мОбновлятьВладельца;
Перем мЧас;
Перем мМинута;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.СторонниеЛица,ЭлементыФормы.КоманднаяПанельСторонниеЛица);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

// Процедура изменяет окончание контакта при изменении начала
//
// Параметры
//  Элемент - Элемент управления, начало контакта
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ИзменениеНачалаСобытия(Элемент)

	ОкончаниеСобытия = Элемент.Значение + (ОкончаниеСобытия - мНачалоСобытия);
	мНачалоСобытия = Элемент.Значение;

КонецПроцедуры

// Функция определяет получателей электронного письма, при использовании встроенного почтового клиента.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   ТаблицаЗначений, получатели электронного письма
//
Функция ОпределитьПолучателейВстроенногоКлиента()

	ТаблицаПолучателей = Новый ТаблицаЗначений;
	ТаблицаПолучателей.Колонки.Добавить("Объект");
	ТаблицаПолучателей.Колонки.Добавить("Адрес");
	
	// Контактное лицо
	Если ТипЗнч(КонтактноеЛицо) = Тип("Строка") Тогда
		
		Если НЕ ПустаяСтрока(АдресЭлектроннойПочтыКонтактногоЛица) Тогда
		
			ЗаписиКонтактногоЛица = Новый ТаблицаЗначений;
			ЗаписиКонтактногоЛица.Колонки.Добавить("Объект");
			ЗаписиКонтактногоЛица.Колонки.Добавить("Представление");
			ЗаписиКонтактногоЛица.Колонки.Добавить("ЗначениеПоУмолчанию");
			ЗаписиКонтактногоЛица.Индексы.Добавить("ЗначениеПоУмолчанию");
			
			НоваяСтрока = ЗаписиКонтактногоЛица.Добавить();
			НоваяСтрока.Объект              = КонтактноеЛицо;
			НоваяСтрока.Представление       = АдресЭлектроннойПочтыКонтактногоЛица;
			НоваяСтрока.ЗначениеПоУмолчанию = Истина;
		
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Объект", КонтактноеЛицо);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Объект              КАК Объект,
		|	КонтактнаяИнформация.Представление       КАК Представление,
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &Тип
		|	И
		|	КонтактнаяИнформация.Объект = &Объект
		|";
		
		ЗаписиКонтактногоЛица = Запрос.Выполнить().Выгрузить();
		ЗаписиКонтактногоЛица.Индексы.Добавить("ЗначениеПоУмолчанию");
		Если ЗаписиКонтактногоЛица.Количество() = 0 Тогда
			ЗаписиКонтактногоЛица = Неопределено;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
		
		Запрос = Новый Запрос;
		
		СписокОбъектов = Новый СписокЗначений;
		
		Для каждого Работник Из РаботникиОрганизации Цикл
			СписокОбъектов.Добавить(Работник.Сотрудник);
		КонецЦикла; 
		Для каждого Лицо Из СторонниеЛица Цикл
			Если Не ЗначениеЗаполнено(Лицо.Лицо) Тогда
				СписокОбъектов.Добавить(Лицо.Лицо);
			КонецЕсли; 
		КонецЦикла; 
		
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("СписокОбъектов", СписокОбъектов);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Объект              КАК Объект,
		|	КонтактнаяИнформация.Представление       КАК Представление,
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &Тип
		|	И
		|	КонтактнаяИнформация.Объект В(&СписокОбъектов)
		|
		|ИТОГИ ПО
		|	Объект
		|";
		
		ЗаписиПрочихУчастников = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ЗаписиПрочихУчастников.Строки.Количество() = 0 Тогда
			ЗаписиПрочихУчастников = Неопределено;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ЗаписиКонтактногоЛица <> Неопределено Тогда
		СтрокаТаблицыПолучателей = ТаблицаПолучателей.Добавить();
		СтрокаПоУмолчанию = ЗаписиКонтактногоЛица.Найти(Истина, "ЗначениеПоУмолчанию");
		Если СтрокаПоУмолчанию <> Неопределено Тогда
			СтрокаТаблицыПолучателей.Объект = СтрокаПоУмолчанию.Объект;
			СтрокаТаблицыПолучателей.Адрес  = СтрокаПоУмолчанию.Представление;
		Иначе
			СтрокаТаблицыПолучателей.Объект = ЗаписиКонтактногоЛица[0].Объект;
			СтрокаТаблицыПолучателей.Адрес  = ЗаписиКонтактногоЛица[0].Представление;
		КонецЕсли; 
	КонецЕсли; 
		
	Если ЗаписиПрочихУчастников <> Неопределено Тогда
		Для каждого СтрокаОбъекта Из ЗаписиПрочихУчастников.Строки Цикл
			Если СтрокаОбъекта.Строки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТаблицыПолучателей = ТаблицаПолучателей.Добавить();
			СтрокаПоУмолчанию = СтрокаОбъекта.Строки.Найти(Истина, "ЗначениеПоУмолчанию");
			Если СтрокаПоУмолчанию <> Неопределено Тогда
				СтрокаТаблицыПолучателей.Объект = СтрокаПоУмолчанию.Объект;
				СтрокаТаблицыПолучателей.Адрес  = СтрокаПоУмолчанию.Представление;
			Иначе
				СтрокаТаблицыПолучателей.Объект = СтрокаОбъекта.Строки[0].Объект;
				СтрокаТаблицыПолучателей.Адрес  = СтрокаОбъекта.Строки[0].Представление;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат ТаблицаПолучателей;

КонецФункции // ОпределитьПолучателейВстроенногоКлиента()

// Функция возвращает имя типа контактной информации по его значению
//
// Параметры
//  Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьПредставлениеТипа(Тип)

	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат "Адрес";
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Возврат "E-mail";
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат "Телефон";
	Иначе
		Возврат "";
	КонецЕсли; 

КонецФункции // ПолучитьПредставлениеТипа()

// Функция в зависимости от вида и типа контакта, определяет типы контаткной информации
//  которые необходимо отображать
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура
//
Функция ОпределитьТипКонтактнойИнформации()

	СписокТиповКонтрагента = Новый СписокЗначений;
	СписокТиповКонтактногоЛица = Новый СписокЗначений;
	
	Если ВидСобытия = Перечисления.ВидыСобытий.ПочтовоеПисьмо Тогда
		СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
		Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
			СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
			СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		ИначеЕсли ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
			СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
			СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		КонецЕсли;
	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ТелефонныйЗвонок
		  ИЛИ ВидСобытия = Перечисления.ВидыСобытий.Прочее Тогда
		СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо Тогда
		Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
			СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
			СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		ИначеЕсли ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
			СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Контрагент, КонтактноеЛицо", СписокТиповКонтрагента, СписокТиповКонтактногоЛица);
	
КонецФункции

// Процедура отображает контактную информацию объектов на форме
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ОбновитьКонтактнуюИнформацию()

	Если ТипЗнч(КонтактноеЛицо) = Тип("Строка") Тогда
		
		Если НЕ ПустаяСтрока(НомерТелефонаКонтактногоЛица) Тогда
			ТелефонКонтактногоЛица = ?(НЕ ПустаяСтрока(КодГородаТелефонаКонтактногоЛица), ("(" + КодГородаТелефонаКонтактногоЛица + ") "), "") + СокрЛП(НомерТелефонаКонтактногоЛица) + ?(НЕ ПустаяСтрока(ДобавочныйНомерТелефонаКонтактногоЛица), (НСтр("ru=', доб. ';uk=', дод. '") + СокрЛП(ДобавочныйНомерТелефонаКонтактногоЛица)), "");
		Иначе
			ТелефонКонтактногоЛица = "";
		КонецЕсли;
		ЭлементыФормы.КонтактнаяИнформацияКонтактногоЛица.Значение = НСтр("ru='Телефон: ';uk='Телефон: '") + ?(ПустаяСтрока(ТелефонКонтактногоЛица), НСтр("ru='нет информации';uk='немає інформації'"), ТелефонКонтактногоЛица);
		
	Иначе
		
		ТипыКонтактнойИнформации = ОпределитьТипКонтактнойИнформации();
		
		СписокТиповКонтактногоЛица = ТипыКонтактнойИнформации.КонтактноеЛицо;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Объект        КАК Объект,
		|	КонтактнаяИнформация.Тип           КАК Тип,
		|	КонтактнаяИнформация.Представление КАК Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &КонтактноеЛицо
		|	И
		|	КонтактнаяИнформация.Тип В(&СписокТиповКонтактногоЛица)
		|";
		
		Запрос.УстановитьПараметр("ТекущаяДата"               , ТекущаяДата());
		Запрос.УстановитьПараметр("КонтактноеЛицо"            , КонтактноеЛицо);
		Запрос.УстановитьПараметр("СписокТиповКонтактногоЛица", СписокТиповКонтактногоЛица);
		
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		
		СтрокаДанныхКонтактногоЛица = "";
		
		Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		
			ИзмененноеПредставление = СтрЗаменить(СтрокаТаблицы.Представление, Символы.ВК, " ");
			ИзмененноеПредставление = СтрЗаменить(ИзмененноеПредставление, Символы.ПС, " ");
			ИзмененноеПредставление = СтрЗаменить(ИзмененноеПредставление, Символы.НПП, " ");
			
			Если НЕ ПустаяСтрока(СтрокаДанныхКонтактногоЛица) Тогда
				СтрокаДанныхКонтактногоЛица = СтрокаДанныхКонтактногоЛица + "; ";
			КонецЕсли; 
			СтрокаДанныхКонтактногоЛица = СтрокаДанныхКонтактногоЛица + ИзмененноеПредставление;
			
		КонецЦикла;
		
		КонтактнаяИнформацияКонтактногоЛица = ПолучитьПредставлениеТипа(СписокТиповКонтактногоЛица[0].Значение) + ": " + ?(ПустаяСтрока(СтрокаДанныхКонтактногоЛица), НСтр("ru='нет информации';uk='немає інформації'"), СтрокаДанныхКонтактногоЛица);
		
	КонецЕсли; 

КонецПроцедуры

// Процедура формирует представление комбинации реквиитов ТипСобытия и ВидСобытия.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура СформироватьСтрокуТипаВида()

	Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		СтрокаТипа = НСтр("ru=' (входящ';uk=' (вхідн'");
	Иначе
		СтрокаТипа = НСтр("ru=' (исходящ';uk=' (вихідн'");
	КонецЕсли;

	Если ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
		СтрокаТипа = СтрокаТипа + "ая)";

	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ТелефонныйЗвонок Тогда
		СтрокаТипа = СтрокаТипа + "ий)";

	Иначе
		СтрокаТипа = СтрокаТипа + "ее)";

	КонецЕсли;

	// Отобразить в заголовке формы тип и вид конаткта.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидСобытия) + СтрокаТипа, ЭтотОбъект, ЭтаФорма);
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидовСобытия.Текст = Строка(ВидСобытия);
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюТиповСобытия.Текст = СтрокаТипа;

КонецПроцедуры

// Функция возвращает адрес эл.почты выбранного контрагента или контактного лица.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  Строка – электронный адрес
//
Функция ОпределитьПолучателей()

	Адрес = Новый Массив;
	
	Если Не ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		Предупреждение(НСтр("ru='Выберите кандидата!';uk='Виберіть кандидата!'"));
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТипМейл"     , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Объект"      , КонтактноеЛицо);
	Запрос.УстановитьПараметр("ТекущаяДата" , Дата);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Объект              КАК Получатель,
	|	КонтактнаяИнформация.Вид                 КАК Вид,
	|	КонтактнаяИнформация.Представление       КАК Адрес,
	|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
	|	КонтактнаяИнформация.Объект.Наименование КАК Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &ТипМейл
	|	И
	|	КонтактнаяИнформация.Объект = &Объект
	|
	|";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Индексы.Добавить("ЗначениеПоУмолчанию");
	ТаблицаЗапроса.Колонки.Получатель.Ширина = 25;
	ТаблицаЗапроса.Колонки.Вид.Ширина = 25;
	ТаблицаЗапроса.Колонки.Адрес.Ширина = 25;
	
	Если ТаблицаЗапроса.Количество() = 0 Тогда
		Адрес.Добавить("");
		Адрес.Добавить("");
		Возврат Адрес;
	ИначеЕсли ТаблицаЗапроса.Количество() = 1 Тогда
		СтрокаТаблицыЗапроса = ТаблицаЗапроса[0];
		Адрес.Добавить(СокрЛП(СтрокаТаблицыЗапроса.Адрес));
		Адрес.Добавить(СокрЛП(СтрокаТаблицыЗапроса.Представление));
		Возврат Адрес;
	Иначе
		СтрокиПоУмолчанию = ТаблицаЗапроса.НайтиСтроки(Новый Структура("ЗначениеПоУмолчанию", Истина));
		Если СтрокиПоУмолчанию.Количество() = 1 Тогда
			Адрес.Добавить(СокрЛП(СтрокиПоУмолчанию[0].Адрес));
			Адрес.Добавить(СокрЛП(СтрокиПоУмолчанию[0].Представление));
			Возврат Адрес;
		КонецЕсли;
		ТаблицаЗапроса.Колонки.Удалить(ТаблицаЗапроса.Колонки.ЗначениеПоУмолчанию);
		ТаблицаЗапроса.Колонки.Удалить(ТаблицаЗапроса.Колонки.Представление);
		СтрокаТаблицыАдресов = ТаблицаЗапроса.ВыбратьСтроку(НСтр("ru='Выберите адрес получателя';uk='Виберіть адресу одержувача'"));
		Если СтрокаТаблицыАдресов <> Неопределено Тогда
			Адрес.Добавить(СокрЛП(СтрокаТаблицыАдресов.Адрес));
			Адрес.Добавить(СокрЛП(СтрокаТаблицыАдресов.Получатель));
			Возврат Адрес;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	
КонецФункции // ОпределитьПолучателей()

// Процедура устанавливает доступность элемента формы ВремяНапоминания.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ДоступностьНапоминаний()

	ЭлементыФормы.ВремяНапоминания.Доступность = НапомнитьОСобытии;
	
КонецПроцедуры

// Процедура устанавливает доступность элемента верхней командной панели
// формы НаписатьПисьмо.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ДоступностьКнопокПочты() Экспорт

	Если ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо Тогда
		Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
			ЭлементыФормы.ДействияФормы.Кнопки.НаписатьПисьмо.Доступность = Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить();
			ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.НаписатьПисьмо.Доступность = Ложь;
		Иначе
			ЭлементыФормы.ДействияФормы.Кнопки.НаписатьПисьмо.Доступность = Истина;
			ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.НаписатьПисьмо.Доступность = Истина;
		КонецЕсли; 
	Иначе
		ЭлементыФормы.ДействияФормы.Кнопки.НаписатьПисьмо.Доступность = Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить();
		ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.НаписатьПисьмо.Доступность = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура управляет видимостью элементов управления формы в зависимости от
// вида объекта события
//
Процедура ВидимостьЭлементовФормы()
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Кандидат Тогда
		ЭлементыФормы.ПанельОбъект.ТекущаяСтраница = ЭлементыФормы.ПанельОбъект.Страницы.ЗаявкаКандидата;
		
	Иначе
		ЭлементыФормы.ПанельОбъект.ТекущаяСтраница = ЭлементыФормы.ПанельОбъект.Страницы.Кандидат;
		
		Если ТипЗнч(КонтактноеЛицо) <> Тип("СправочникСсылка.ФизическиеЛица") И Не ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			КонтактноеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		
		ЭлементыФормы.НадписьКонтактноеЛицо.Заголовок       = "Кандидат:";
		ЭлементыФормы.СторонниеЛица.Колонки.Лицо.ТекстШапки = "Кандидат";
		ЭлементыФормы.РамкаГруппыСторонниеЛица.Заголовок    = НСтр("ru='Другие кандидаты';uk='Інші кандидати'");
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет составом закладок панели ПанельФормы.
// 
Процедура СоставЗакладокГлавнойПанелиФормы()
	
	ЭлементыФормы.ПанельФормы.Страницы.Участники.Видимость = (ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча);
	
КонецПроцедуры

Процедура ПроверитьНаличияФайлов()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект",Ссылка);
	
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХранилищеДополнительнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Объект";
	
	ЕстьВложения = Запрос.Выполнить().Выбрать().Следующий();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		
		Если НЕ ЗначениеЗаполнено(ВидОбъекта) Тогда
			ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Кандидат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			КонтактноеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		
		Если ВидСобытия.Пустая() Тогда
			ВидСобытия = Перечисления.ВидыСобытий.ТелефонныйЗвонок;
		КонецЕсли;
		
		Если ТипСобытия.Пустая() Тогда
			ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее;
		КонецЕсли;
		
		Если Ответственный.Пустая() Тогда
			Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
		КонецЕсли;
		
		СтруктураРабочегоВремени = РаботаСДиалогами.ОпределитьНачалоИОкончаниеРабочегоДняПользователя(глЗначениеПеременной("глТекущийПользователь"), Дата);
		
		НачалоРабочегоДня		= СтруктураРабочегоВремени.ДатаНачала;
		ОкончаниеРабочегоДня	= СтруктураРабочегоВремени.ДатаОкончания;
	
		Если НачалоСобытия = Дата("00010101000000") Тогда
			НачалоСобытия		= НачалоДня(Дата) + Час(НачалоРабочегоДня)*60*60 + Минута(НачалоРабочегоДня)*60;
		КонецЕсли;
		Если ОкончаниеСобытия = Дата("00010101000000") Тогда
			ОкончаниеСобытия	= НачалоДня(Дата) + Час(ОкончаниеРабочегоДня)*60*60 + Минута(ОкончаниеРабочегоДня)*60;
		КонецЕсли;
		
		Если СостояниеСобытия.Пустая() Тогда
			СостояниеСобытия	= Перечисления.СостоянияСобытий.Запланировано;
		КонецЕсли;
	Иначе 
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидовСобытия,
	                                      ВидСобытия.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьВидСобытия"));

	Для каждого Пункт Из ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидовСобытия.Кнопки Цикл
		Пункт.Картинка = РаботаСДиалогами.ПолучитьКартинкуНапоминания(Перечисления.ВидыСобытий[Пункт.Имя],ТипСобытия);
	КонецЦикла;

	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидовСобытия.Картинка = РаботаСДиалогами.ПолучитьКартинкуНапоминания(ВидСобытия,ТипСобытия);

	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюТиповСобытия,
	                                      ТипСобытия.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьТипСобытия"));

	ДоступностьНапоминаний();
	ДоступностьКнопокПочты();
	СформироватьСтрокуТипаВида();

	СписокКнопокФайлов = Новый СписокЗначений;
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
	РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);

	ОбновитьКонтактнуюИнформацию();
	
	ВидимостьЭлементовФормы();

	мНачалоСобытия = НачалоСобытия;
	
	СоставЗакладокГлавнойПанелиФормы();
	
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.Общие;
		
КонецПроцедуры

// Обработчик события ПередЗаписью формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если НачалоСобытия > ОкончаниеСобытия Тогда
	
		Предупреждение(НСтр("ru='Дата начала события должна быть меньше окончания.';uk='Дата початку події повинна бути менше закінчення.'"));
		Отказ = Истина;
		Возврат;
		
	КонецЕсли; 
	
	Если НапомнитьОСобытии Тогда
		
		Если Ответственный.Пустая() Тогда
			
			Предупреждение(НСтр("ru='Выберите ответственное лицо, для напоминания.';uk='Виберіть відповідальну особу, для нагадування.'"));
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		Если НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Ответственный,"ИспользоватьНапоминания") Тогда
			
			Предупреждение(НСтр("ru='Для ответственного лица, которое вы выбрали, недоступна система напоминаний."
"Для пользователя ';uk='Для відповідальної особи, яку ви вибрали, недоступна система нагадувань."
"Для користувача '") + СокрЛП(Ответственный) + НСтр("ru=' необходимо установить флажок использования напоминаний.';uk=' необхідно встановити прапор використання нагадувань.'"));
			Отказ = Истина;
			Возврат;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если Модифицированность И ВладелецФормы <> Неопределено И НЕ ЭтоНовый() Тогда
		мОбновлятьВладельца = Истина;
	КонецЕсли;
	
	ПроверитьНаличияФайлов();
	
КонецПроцедуры

// Обработчик события ПослеЗаписи формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();

	СформироватьСтрокуТипаВида();
	
	// если открыт инструмент по работе с задачами - оповестим о необходимости обновить список задач
	Оповестить("ЗаписаноСобытие");

КонецПроцедуры

// Обработчик события ПриЗакрытии формы.
//
Процедура ПриЗакрытии()
	
	Если мОбновлятьВладельца Тогда
		ОповеститьОЗаписиНовогоОбъекта(Ссылка);
	КонецЕсли;

КонецПроцедуры

// Обработчик события ОбработкаВыбора формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Команда = "";
	Если ТипЗнч(ЗначениеВыбора) = Тип("Строка") И ЗначениеВыбора = "ИзмененСписокСправочникаХранилищеДопИнформации" Тогда
		
		СписокКнопокФайлов = Новый СписокЗначений;
		СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
		СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
		РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("Структура") И ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
		ТаблицаРаботников = ЗначениеВыбора.Данные.Выгрузить();
		Для Каждого СтрокаТаблицыРаботников Из ТаблицаРаботников Цикл
			РаботникиОрганизации.Добавить().Сотрудник = СтрокаТаблицыРаботников.Сотрудник;
		КонецЦикла;
	КонецЕсли; 

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаСобытия" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьВидСобытия(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидСобытия = Перечисления.ВидыСобытий[Кнопка.Имя];
		ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидовСобытия.Картинка = РаботаСДиалогами.ПолучитьКартинкуНапоминания(ВидСобытия,ТипСобытия);
	КонецЕсли;

	Если ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
		Если Не ЗначениеЗаполнено(ОписаниеСобытия) Тогда
			ОписаниеСобытия = "Собеседование";
		КонецЕсли;
	КонецЕсли;
	
	// Отобразить в заголовке формы вид операции.
	СформироватьСтрокуТипаВида();
	ДоступностьКнопокПочты();
	СоставЗакладокГлавнойПанелиФормы();
	ОбновитьКонтактнуюИнформацию();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "ПодменюТипаСобытия" командной панели
// формы. Процедура устанавливает значение реквизита ТипСобытия.
//
Процедура ДействияФормыДействиеУстановитьТипСобытия(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ТипСобытия = Перечисления.ВходящееИсходящееСобытие[Кнопка.Имя];
	КонецЕсли;
	
	Для каждого Пункт Из ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидовСобытия.Кнопки Цикл
		Пункт.Картинка = РаботаСДиалогами.ПолучитьКартинкуНапоминания(Перечисления.ВидыСобытий[Пункт.Имя],ТипСобытия);
	КонецЦикла;
	
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидовСобытия.Картинка = РаботаСДиалогами.ПолучитьКартинкуНапоминания(ВидСобытия,ТипСобытия);
	
	// Отобразить в заголовке формы вид операции.
	СформироватьСтрокуТипаВида();
	ДоступностьКнопокПочты();
	ОбновитьКонтактнуюИнформацию();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Обработчик события элемента 
// ДействияФормы.Файлы.
Процедура ДействияФормыФайлы(Кнопка)

	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаФайлов = Справочники.ХранилищеДополнительнойИнформации.ПолучитьФорму("ФормаСпискаФайловИИзображений", ЭтаФорма);
	
	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Использование                       = Истина;
	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Значение                            = Ссылка;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.НастройкаОтбора.Объект.Доступность = Ложь;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.Колонки.Объект.Видимость           = Ложь;
	
	ОбязательныеОтборы = Новый Структура;

	Если ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо И ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
	
		ФормаФайлов.ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = ФормаФайлов.ЭлементыФормы.ПанельЗакладок.Страницы.Файлы;
		ФормаФайлов.ЭлементыФормы.ПанельЗакладок.Страницы.Изображения.Видимость = Ложь;
		ОбязательныеОтборы.Вставить("ВидДанных",Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл);
	
	Иначе

		ФормаФайлов.Изображения.Отбор.Объект.Использование                       = Истина;
		ФормаФайлов.Изображения.Отбор.Объект.Значение                            = Ссылка;
		ФормаФайлов.ЭлементыФормы.Изображения.НастройкаОтбора.Объект.Доступность = Ложь;
		ФормаФайлов.ЭлементыФормы.Изображения.Колонки.Объект.Видимость           = Ложь;
				
	КонецЕсли; 

	ОбязательныеОтборы.Вставить("Объект",Ссылка);

	ФормаФайлов.ОбязательныеОтборы = ОбязательныеОтборы;
	
	ФормаФайлов.Открыть();
	
КонецПроцедуры

// Обработчик события элемента 
// ДействияФормы.НаписатьПисьмо.
Процедура ДействияФормыНаписатьПисьмо(Кнопка) Экспорт

	Перем ЗаписиКонтрагента;
	Перем ЗаписиКонтактногоЛица;
	Перем ЗаписиПрочихУчастников;
	
	Если НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
		
		Адрес = ОпределитьПолучателей();

		Если Адрес = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Адрес",			Адрес[0]);
		СтруктураПараметров.Вставить("Представление",	Адрес[1]);
		СтруктураПараметров.Вставить("Тема",			ОписаниеСобытия);
		СтруктураПараметров.Вставить("Текст",			СодержаниеСобытия);
		
		УправлениеЭлектроннойПочтой.ОткрытьПисьмоПочтовогоКлиентаОперационнойСистемы(СтруктураПараметров);

	Иначе
		
		Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаПолучателей = ОпределитьПолучателейВстроенногоКлиента();
		
		СтруктураНовогоПисьма = Новый Структура("Основание",	Ссылка);
		Если НЕ ПустаяСтрока(ОписаниеСобытия) Тогда
			СтруктураНовогоПисьма.Вставить("Тема",				ОписаниеСобытия);
		КонецЕсли;
		
		Если ТаблицаПолучателей.Количество() = 1 Тогда
			СписокКому = Новый СписокЗначений;
			СписокКому.Добавить(ТаблицаПолучателей[0].Адрес, ?(ТипЗнч(ТаблицаПолучателей[0].Объект) = Тип("Строка"), ТаблицаПолучателей[0].Объект, ТаблицаПолучателей[0].Объект.Наименование));
			СтруктураНовогоПисьма.Вставить("Кому", СписокКому);
			АдрКнига = Неопределено;
			
		ИначеЕсли ТаблицаПолучателей.Количество() > 1 Тогда
			АдрКнига = Обработки.АдреснаяКнига.Создать();
			Для каждого СтрокаТаблицы Из ТаблицаПолучателей Цикл
				НоваяСтрока							= АдрКнига.Кому.Добавить();
				НоваяСтрока.АдресЭлектроннойПочты	= СтрокаТаблицы.Адрес;
				НоваяСтрока.Объект					= СтрокаТаблицы.Объект;
				НоваяСтрока.ПредставлениеОбъекта	= СтрокаТаблицы.Объект.Наименование;
			КонецЦикла;
			
		КонецЕсли;
		
		// вложения
		СписокФайловВложений = Новый СписокЗначений;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект",Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХранилищеДополнительнойИнформации.Ссылка,
		|	ХранилищеДополнительнойИнформации.ИмяФайла,
		|	ХранилищеДополнительнойИнформации.Наименование
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.Объект = &Объект";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Вложение  = Новый Структура;
			Хранилище = Выборка.Ссылка.Хранилище.Получить();
			Вложение.Вставить("Хранилище",		Хранилище);
			Вложение.Вставить("ИмяФайла",		Выборка.ИмяФайла);
			Вложение.Вставить("Наименование",	Выборка.Наименование);
			СписокФайловВложений.Добавить(Вложение);
		КонецЦикла;
		СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
		
		СтруктураПисьма = УправлениеЭлектроннойПочтой.НаписатьПисьмо(глЗначениеПеременной("глТекущийПользователь"), СтруктураНовогоПисьма,,, (ТаблицаПолучателей.Количество() > 0),,, Истина);
		Если ТипЗнч(СтруктураПисьма) = Тип("Структура") Тогда
			ФормаПисьма = СтруктураПисьма.Форма;
			Если АдрКнига <> Неопределено Тогда
				ФормаПисьма.ОткрытьАдреснуюКнигу("Кому", АдрКнига);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура КоманднаяПанельРаботникиОрганизацииЗаполнить(Кнопка)
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Заполнить?';uk='Перед заповненням табличні частини будуть очищені. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		РаботникиОрганизации.Очистить();
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, "Работники", );

КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ПриИзменении элемента формы ВидОбъекта.
//
Процедура ВидОбъектаПриИзменении(Элемент)
	
	Если ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча И СторонниеЛица.Количество() <> 0 Тогда
		
		НадоСпрашивать = Ложь;
		
		Если (ТипЗнч(СторонниеЛица[0].Лицо) = Тип("СправочникСсылка.ФизическиеЛица") И ВидОбъекта <> Перечисления.ВидыОбъектовСобытия.Кандидат) Тогда
			НадоСпрашивать = Истина;
		КонецЕсли;
		
		Если НадоСпрашивать Тогда
			
			ТекстВопроса = НСтр("ru='При изменении вида объекта будет очищена таблица ';uk=""При зміні виду об'єкта буде очищена таблиця """) + """" + ЭлементыФормы.РамкаГруппыСторонниеЛица.Заголовок + """" + НСтр("ru='. Продолжить?';uk='. Продовжити?'");
			
			ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
				Если ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
					ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Кандидат;
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		СторонниеЛица.Очистить();
		
	КонецЕсли;
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Кандидат Тогда
		ЗаявкаКандидата	= Справочники.ЗаявкиКандидатов.ПустаяСсылка();
		КонтактноеЛицо	= Справочники.ФизическиеЛица.ПустаяСсылка();
		
	ИначеЕсли ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Кандидат И ТипЗнч(КонтактноеЛицо) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ЗаявкаКандидата	= Справочники.ЗаявкиКандидатов.ПустаяСсылка();
		КонтактноеЛицо	= Справочники.ФизическиеЛица.ПустаяСсылка();
		
	КонецЕсли;
	
	ВидимостьЭлементовФормы();
	ОбновитьКонтактнуюИнформацию();

КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы Основание.
//
Процедура ОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если Элемент.Значение = Неопределено Тогда
		
		СписокТиповДокументов = Новый СписокЗначений;

		Для каждого ТипДокумента Из Элемент.ТипЗначения.Типы() Цикл
			ДокументСсылка = Новый(ТипДокумента);
			СписокТиповДокументов.Добавить(ДокументСсылка.Метаданные().Имя, ДокументСсылка.Метаданные().Синоним);
		КонецЦикла;

		Если Элемент.Значение <> Неопределено Тогда
			НачальноеЗначениеСписка = СписокТиповДокументов.НайтиПоЗначению(Элемент.Значение.Метаданные().Имя);
		КонецЕсли; 

		ВыбранноеЗначение = ЭтаФорма.ВыбратьИзСписка(СписокТиповДокументов, Элемент, НачальноеЗначениеСписка);
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ФормаВыбора = Документы[ВыбранноеЗначение.Значение].ПолучитьФормуВыбора(, Элемент);

	Иначе

		ФормаВыбора = Документы[Элемент.Значение.Метаданные().Имя].ПолучитьФормуВыбора(, Элемент);
		
	КонецЕсли; 
	
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы Помещение.
//
Процедура ПомещениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если Территория.Пустая() Тогда
		ВвестиЗначение(Территория, НСтр("ru='Выберите территорию';uk='Виберіть територію'"));
	КонецЕсли;
	
	Если НЕ Территория.Пустая() Тогда
		
		ФормаВыбораПомещения = Справочники.Помещения.ПолучитьФормуСписка("ФормаВыбора", ЭтаФорма);
		
		ФормаВыбораПомещения.РежимВыбора                                                         = Истина;
		ФормаВыбораПомещения.СправочникСписок.Отбор.Владелец.Значение                            = Территория;
		ФормаВыбораПомещения.СправочникСписок.Отбор.Владелец.Использование                       = Истина;
		ФормаВыбораПомещения.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
		
		ПолученноеЗначение = ФормаВыбораПомещения.ОткрытьМодально();

		Если ТипЗнч(ПолученноеЗначение) = Тип("СправочникСсылка.Помещения") И НЕ ПолученноеЗначение.Пустая() Тогда
			Помещение = ПолученноеЗначение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Помещение.
//
Процедура ПомещениеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
		Территория = Справочники.Территории.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	РаботникиОрганизации.Добавить().Сотрудник = ВыбранноеЗначение;
	
КонецПроцедуры

Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	ДанныеСтроки.ФизЛицо = Элемент.Значение.ФизЛицо;
	
КонецПроцедуры

Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "Работники", Текст);
	
КонецПроцедуры

Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ ОБСЛУЖИВАНИЯ ВРЕМЁН СОБЫТИЯ

// Обработчик события ПриИзменении элемента формы НачалоСобытия.
//
Процедура НачалоСобытияПриИзменении(Элемент)
	
	ИзменениеНачалаСобытия(Элемент);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы НачалоСобытия.
//
Процедура НачалоСобытияНачалоВыбора(Элемент, СтандартнаяОбработка)

	мЧас = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы ОкончаниеСобытия.
//
Процедура ОкончаниеСобытияНачалоВыбора(Элемент, СтандартнаяОбработка)

	мЧас = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора элемента формы НачалоСобытия.
//
Процедура НачалоСобытияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас = 0;
	мМинута = 0;
	
	ИзменениеНачалаСобытия(Элемент);
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора элемента формы ОкончаниеСобытия.
//
Процедура ОкончаниеСобытияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас = 0;
	мМинута = 0;
	
КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка элемента формы НачалоСобытия.
//
Процедура НачалоСобытияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
		Элемент.Значение = РабочаяДата
	КонецЕсли;
	РаботаСДиалогами.ВыбратьВремяДня(ЭтаФорма,Элемент.Значение, Элемент, Ответственный);
	
	ИзменениеНачалаСобытия(Элемент);
	
КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка элемента формы ОкончаниеСобытия.
//
Процедура ОкончаниеСобытияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
		Элемент.Значение = РабочаяДата
	КонецЕсли;
	РаботаСДиалогами.ВыбратьВремяДня(ЭтаФорма,Элемент.Значение, Элемент, Ответственный);
	
КонецПроцедуры

Процедура ВремяНапоминанияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
		Элемент.Значение = РабочаяДата
	КонецЕсли;
	РаботаСДиалогами.ВыбратьВремяДня(ЭтаФорма,Элемент.Значение, Элемент, Ответственный);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ ОБСЛУЖИВАНИЯ КОНТАКТНОЕ ЛИЦО СОБЫТИЯ

// Обработчик события ПриИзменении элемента формы КонтактноеЛицоКонтрагента.
//
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	ОбновитьКонтактнуюИнформацию();
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.ИмяЭлемента = "ИзмененСписокСправочникаХранилищеДопИнформации" Тогда
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Основание) Тогда
		Если Не ЗначениеЗаполнено(ЗаявкаКандидата) Тогда
			Если Основание.Метаданные().Реквизиты.Найти("ЗаявкаКандидата") <> Неопределено Тогда
				ЗаявкаКандидата = Основание.ЗаявкаКандидата;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура КонтактноеЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Если Текст <> "" Тогда
		Если ТипЗнч(Элемент.Значение) <> Тип("Строка")  Тогда
			
			РезультатЗапроса = ПроцедурыПоискаПоСтроке.ПолучитьРезультатЗапросаАвтоподбора(Текст, Новый Структура, Тип("СправочникСсылка.ФизическиеЛица"), 1);
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура, ЭтаФорма, Тип("СправочникСсылка.ФизическиеЛица"));
				Возврат;
			КонецЕсли; 
			
			ТекстВопроса = НСтр("ru='Физическое лицо не найдено. Зарегистрировать данные нового физического лица?';uk='Фізична особа не знайдена. Зареєструвати дані нової фізичної особи?'");
			
			ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
			
			Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
				Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
					Значение = Текст
				КонецЕсли; 
				Возврат;
			КонецЕсли;
			
			НовоеФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
			НовоеФизЛицо.Наименование = Текст;
			Форма = НовоеФизлицо.ПолучитьФорму();
			Форма.ОткрытьМодально();
			
			Если ЗначениеЗаполнено(НовоеФизЛицо.Ссылка) Тогда
				Значение = НовоеФизЛицо.Ссылка;
			КонецЕсли;
			
		Иначе
			
			Значение = Текст;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура КонтактноеЛицоОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстВопроса = НСтр("ru='Физическое лицо не найдено. Зарегистрировать данные нового физического лица?';uk='Фізична особа не знайдена. Зареєструвати дані нової фізичної особи?'");
		
		ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
		
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		НовоеФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
		НовоеФизЛицо.Наименование = Элемент.Значение;
		Форма = НовоеФизлицо.ПолучитьФорму();
		Форма.ОткрытьМодально();
		
		Если ЗначениеЗаполнено(НовоеФизЛицо.Ссылка) Тогда
			Элемент.Значение = НовоеФизЛицо.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы НапомнитьОСобытии.
//
Процедура НапомнитьОСобытииПриИзменении(Элемент)
	
	Если НапомнитьОСобытии Тогда
		Если ВремяНапоминания = Дата("00010101000000") Тогда
			ВремяНапоминания = Дата(НачалоСобытия - УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ИнтервалНапоминанияДоНачалаСобытия")*60);
		КонецЕсли; 
	Иначе
		ВремяНапоминания = Дата("00010101000000");
	КонецЕсли; 
	
	ДоступностьНапоминаний();
	
КонецПроцедуры

// Обработчик события "ВыборИзСписка" элемента формы "ОписаниеСобытия"
//
Процедура ОписаниеСобытияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокТем = УправлениеКонтактами.ПолучитьСписокОсновныхТем();
	
	Выбрали = ВыбратьИзСписка(СписокТем,Элемент);
	
	Если Выбрали <> Неопределено Тогда
		ОписаниеСобытия = Выбрали.Значение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


мЧас = 0;
мМинута = 0;

мОбновлятьВладельца = Ложь;

мНачалоСобытия = Неопределено;

