Перем мсзСтатьиЗатратЗарплата;
Перем мКиевскийОфис;
Перем мНоменклатурнаяГруппа;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой бухгалтерской справки.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма бухгалтерской справки.
//
Функция ПечатьБухгалтерскойСправки()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОперацияБух.Организация,
	|	ОперацияБух.Номер,
	|	ОперацияБух.Дата,
	|	ВЫРАЗИТЬ(ОперацияБух.Комментарий КАК СТРОКА(1000)) КАК Содержание
	|ИЗ
	|	Документ.БухгалтерскаяСправка КАК ОперацияБух
	|ГДЕ
	|	ОперацияБух.Ссылка = &Ссылка";
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.СчетДт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ХозрасчетныйДвиженияССубконто.ВалютаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютаКт,
	|	ХозрасчетныйДвиженияССубконто.Сумма,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоДт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоКт,
	|	ХозрасчетныйДвиженияССубконто.Содержание
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &Регистратор) КАК ХозрасчетныйДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаДвижений = Запрос.Выполнить().Выбрать();
	
	Макет = ПолучитьМакет("БухгалтерскаяСправка");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Получаем области макета для вывода в табличный документ.
	ШапкаДокумента   = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ПодвалТаблицы    = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ПодвалДокумента  = Макет.ПолучитьОбласть("Подвал");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию.
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя.
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОперацияБух_БухгалтерскаяСправка";

	// Выведем шапку документа.
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Док.Организация, Док.Дата);
	
	ШапкаДокумента.Параметры.Организация    = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации,,,КодЯзыкаПечать);
	ШапкаДокумента.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Док);
	ШапкаДокумента.Параметры.ДатаДокумента  = Формат(Док.Дата, "ДЛФ=D;Л =" + Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
	ШапкаДокумента.Параметры.Содержание     = СокрЛП(Док.Содержание);
	
	ТабДокумент.Вывести(ШапкаДокумента);
	
	// Выведем заголовок таблицы.
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	// Выведем строки документа.
	Пока ВыборкаДвижений.Следующий() Цикл
		
		СтрокаТаблицы.Параметры.Заполнить(ВыборкаДвижений);
		
		АналитикаДт = Локализация.ПолучитьЛокализованноеПредставление(ВыборкаДвижений.СубконтоДт1, КодЯзыкаПечать) + Символы.ПС
		            + Локализация.ПолучитьЛокализованноеПредставление(ВыборкаДвижений.СубконтоДт2, КодЯзыкаПечать) + Символы.ПС
                    + Локализация.ПолучитьЛокализованноеПредставление(ВыборкаДвижений.СубконтоДт3, КодЯзыкаПечать);
					
		АналитикаКт = Локализация.ПолучитьЛокализованноеПредставление(ВыборкаДвижений.СубконтоКт1, КодЯзыкаПечать) + Символы.ПС
		            + Локализация.ПолучитьЛокализованноеПредставление(ВыборкаДвижений.СубконтоКт2, КодЯзыкаПечать) + Символы.ПС
                    + Локализация.ПолучитьЛокализованноеПредставление(ВыборкаДвижений.СубконтоКт3, КодЯзыкаПечать);
					
		СтрокаТаблицы.Параметры.АналитикаДт = АналитикаДт;
		СтрокаТаблицы.Параметры.АналитикаКт = АналитикаКт;
									 
		// Проверим, помещается ли строка с подвалом.
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(СтрокаТаблицы);
		СтрокаСПодвалом.Добавить(ПодвалТаблицы);
		СтрокаСПодвалом.Добавить(ПодвалДокумента);
		
		Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
			
			// Выведем подвал таблицы.
			ТабДокумент.Вывести(ПодвалТаблицы);
				
			// Выведем разрыв страницы.
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

			// Выведем заголовок таблицы.
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;
		
		ТабДокумент.Вывести(СтрокаТаблицы);
		
	КонецЦикла;
	
	// Выведем подвал таблицы.
	ТабДокумент.Вывести(ПодвалТаблицы);
	
	// Выведем подвал документа.
	ПодвалДокумента.Параметры.РасшифровкаПодписиИсполнителя = ?(НЕ ЗначениеЗаполнено(Ответственный), "", ПроцедурыУправленияПерсоналом.ФамилияИнициалыФизЛица(Ответственный.ФизЛицо));
	ТабДокумент.Вывести(ПодвалДокумента);
	
	Возврат ТабДокумент;
		
КонецФункции // ПечатьБухгалтерскойСправки()
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт

	// Получить экземпляр документа на печать
	Если ИмяМакета = "БухгалтерскаяСправка" Тогда

		ТабДокумент = ПечатьБухгалтерскойСправки();
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("БухгалтерскаяСправка", НСтр("ru='Бухгалтерская справка';uk='Бухгалтерська довідка'"));

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда Возврат; КонецЕсли;

	Если ЭтоНовый() Тогда
		Ответственный = глЗначениеПеременной("глТекущийПользователь");
		// Установим дату-время документа
		// Серна.УстановитьВремяДокумента( ЭтотОбъект );
	КонецЕсли;
	Редактировавший = глЗначениеПеременной("глТекущийПользователь");
	
	Если Не ЗначениеЗаполнено(Организация) Тогда Организация = глЗначениеПеременной("ОсновнаяОрганизация"); КонецЕсли;
	Если Не ЗначениеЗаполнено(Ответственный) Тогда Ответственный = глЗначениеПеременной("глТекущийПользователь"); КонецЕсли;

	// Если есть строки в ТЧ Проводки, то надо проверить, что все правильно установлено
	Если Проводки.Количество() > 0 Тогда
		Для каждого лТекущаяСтрока Из Проводки Цикл
			Если лТекущаяСтрока.СчетДт.Валютный И Не ЗначениеЗаполнено(лТекущаяСтрока.ВалютаДт) Тогда лТекущаяСтрока.ВалютаДт = глЗначениеПеременной("ВалютаРегламентированногоУчета"); КонецЕсли;
			Если лТекущаяСтрока.СчетКт.Валютный И Не ЗначениеЗаполнено(лТекущаяСтрока.ВалютаКт) Тогда лТекущаяСтрока.ВалютаКт = глЗначениеПеременной("ВалютаРегламентированногоУчета"); КонецЕсли;
			Если лТекущаяСтрока.СчетДт.НалоговыйУчет И Не ЗначениеЗаполнено(лТекущаяСтрока.НалоговоеНазначениеДт) Тогда
				ХарактерЗатрат = УправлениеПроизводством.ПолучитьХарактерЗатратПоСчетуЗатрат(лТекущаяСтрока.СчетДт, Неопределено, Дата);
				Если (ХарактерЗатрат = "Прочие") Тогда
					лТекущаяСтрока.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность; // Хоз. д-сть
				Иначе
					лТекущаяСтрока.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая; // ПДВ - Оподатковувані операції
				КонецЕсли;
			КонецЕсли;
			Если лТекущаяСтрока.СчетКт.НалоговыйУчет И Не ЗначениеЗаполнено(лТекущаяСтрока.НалоговоеНазначениеКт) Тогда
				ХарактерЗатрат = УправлениеПроизводством.ПолучитьХарактерЗатратПоСчетуЗатрат(лТекущаяСтрока.СчетКт, Неопределено, Дата);
				Если (ХарактерЗатрат = "Прочие") Тогда
					лТекущаяСтрока.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность; // Хоз. д-сть
				Иначе
					лТекущаяСтрока.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая; // ПДВ - Оподатковувані операції
				КонецЕсли;
			КонецЕсли;
			Если Не лТекущаяСтрока.СчетДт.Валютный и Не лТекущаяСтрока.ВалютаДт = Null Тогда лТекущаяСтрока.ВалютаДт = Null; КонецЕсли;
			Если Не лТекущаяСтрока.СчетКт.Валютный и Не лТекущаяСтрока.ВалютаКт = Null Тогда лТекущаяСтрока.ВалютаКт = Null; КонецЕсли;
			Если Не лТекущаяСтрока.СчетДт.Валютный и Не лТекущаяСтрока.ВалютнаяСуммаДт = Null Тогда лТекущаяСтрока.ВалютнаяСуммаДт = Null; КонецЕсли;
			Если Не лТекущаяСтрока.СчетКт.Валютный и Не лТекущаяСтрока.ВалютнаяСуммаКт = Null Тогда лТекущаяСтрока.ВалютнаяСуммаКт = Null; КонецЕсли;
			// Проверим субконто Дт
			лДтКт = "Дт";
			лВидыСубконто = лТекущаяСтрока[ "Счет"+лДтКт ].ВидыСубконто;
			лКолвоСубконто = лВидыСубконто.Количество();
			Для ном=1 По 3 Цикл
				Если (ном > лКолвоСубконто) и ЗначениеЗаполнено(лТекущаяСтрока[ "Субконто"+лДтКт+ном ]) Тогда лТекущаяСтрока[ "Субконто"+лДтКт+ном ] = Null; КонецЕсли;
				лНом2 = ном-1;
				Если (лНом2 < лКолвоСубконто) Тогда
					Если Не лВидыСубконто[ лНом2 ].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(лТекущаяСтрока[ "Субконто"+лДтКт+ном ])) Тогда 
						лТекущаяСтрока[ "Субконто"+лДтКт+ном ] = лВидыСубконто[ лНом2 ].ВидСубконто.ТипЗначения.ПривестиЗначение( Null ); 
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			// Проверим субконто Кт
			лДтКт = "Кт";
			лВидыСубконто = лТекущаяСтрока[ "Счет"+лДтКт ].ВидыСубконто;
			лКолвоСубконто = лВидыСубконто.Количество();
			Для ном=1 По 3 Цикл
				Если (ном > лКолвоСубконто) и ЗначениеЗаполнено(лТекущаяСтрока[ "Субконто"+лДтКт+ном ]) Тогда лТекущаяСтрока[ "Субконто"+лДтКт+ном ] = Null; КонецЕсли;
				лНом2 = ном-1;
				Если (лНом2 < лКолвоСубконто) Тогда
					Если Не лВидыСубконто[ лНом2 ].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(лТекущаяСтрока[ "Субконто"+лДтКт+ном ])) Тогда 
						лТекущаяСтрока[ "Субконто"+лДтКт+ном ] = лВидыСубконто[ лНом2 ].ВидСубконто.ТипЗначения.ПривестиЗначение( Null ); 
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Заполним ТЧ ПроводкиДляБухгалтерии
	мсзСтатьиЗатратЗарплата = Новый СписокЗначений;
	мсзСтатьиЗатратЗарплата.Добавить( Справочники.СтатьиЗатрат.НайтиПоНаименованию("оплата праці (1.заробітна плата)") );
	мсзСтатьиЗатратЗарплата.Добавить( Справочники.СтатьиЗатрат.НайтиПоНаименованию("оплата праці (2.торг.бонус місячний)") );
	мсзСтатьиЗатратЗарплата.Добавить( Справочники.СтатьиЗатрат.НайтиПоНаименованию("оплата праці (3.премія в зарплату)") );
	мсзСтатьиЗатратЗарплата.Добавить( Справочники.СтатьиЗатрат.НайтиПоНаименованию("оплата праці (4.торг.бонус річний)") );
	мсзСтатьиЗатратЗарплата.Добавить( Справочники.СтатьиЗатрат.НайтиПоНаименованию("оплата праці (5.адмін.бонус річний)") );
	мсзСтатьиЗатратЗарплата.Добавить( Справочники.СтатьиЗатрат.НайтиПоНаименованию("резерви відпусток") );
	мКиевскийОфис = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Центральный офіс, м.Київ");
	мНоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Для распределения по культурам");
	
	ПроводкиДляБухгалтерии.Очистить();
	Если ЭкспортироватьВБухгалтерию Тогда
		лтзПроводки = Проводки.Выгрузить();
		ОчиститьСубконтоПроводкиДляБухгалтерии( лтзПроводки, "Дт" );
		ОчиститьСубконтоПроводкиДляБухгалтерии( лтзПроводки, "Кт" );
		лтзПроводки.Свернуть("СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,ВалютаДт,НалоговоеНазначениеДт,СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,ВалютаКт,НалоговоеНазначениеКт,НомерЖурнала", "ВалютнаяСуммаДт,ВалютнаяСуммаКт,Сумма,СуммаНУ");
		ПроводкиДляБухгалтерии.Загрузить( лтзПроводки );
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт 
	Дата = ТекущаяДата();
	Если (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.БухгалтерскаяСправка")) или
		 (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументОбъект.БухгалтерскаяСправка")) Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		Дата = ТекущаяДата();
		УстановитьНовыйНомер();
		// Копируем табличные части
		Проводки.Загрузить( ДанныеЗаполнения.Проводки.Выгрузить() );
	Иначе
		Организация = глЗначениеПеременной("ОсновнаяОрганизация");
		УстановитьНовыйНомер();
	КонецЕсли;
	Дата = ТекущаяДата();
	Ответственный = ОбщегоНазначения.ПолучитьЗначениеПеременной("глТекущийПользователь");
	Редактировавший = ОбщегоНазначения.ПолучитьЗначениеПеременной("глТекущийПользователь");
КонецПроцедуры

// ОбработкаПроведения
//
Процедура ОбработкаПроведения(Отказ,РежимПроведения)
	// 1. Формируем локальные проводки из табличной части
	лЗапрос = Новый Запрос;
	лЗапрос.УстановитьПараметр("Ссылка", Ссылка);
	лЗапрос.УстановитьПараметр("Коэффициент", ?(СторнироватьАвтоматически, -1, 0) );
	лЗапрос.УстановитьПараметр("ДатаСторнирования", ДатаСторнирования);
	лЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ДокТЧ.Ссылка КАК Регистратор,
	|	ДокТЧ.Ссылка.Дата КАК Период,
	|	ДокТЧ.НомерСтроки КАК НомерСтроки,
	|	ДокТЧ.Ссылка.Организация КАК Организация,
	|	ДокТЧ.ВалютаДт КАК ВалютаДт,
	|	ДокТЧ.ВалютаКт КАК ВалютаКт,
	|	ДокТЧ.НалоговоеНазначениеДт КАК НалоговоеНазначениеДт,
	|	ДокТЧ.НалоговоеНазначениеКт КАК НалоговоеНазначениеКт,
	|	ДокТЧ.СчетДт КАК СчетДт,
	|	ДокТЧ.СубконтоДт1 КАК СубконтоДт1,
	|	ДокТЧ.СубконтоДт2 КАК СубконтоДт2,
	|	ДокТЧ.СубконтоДт3 КАК СубконтоДт3,
	|	ДокТЧ.СчетКт КАК СчетКт,
	|	ДокТЧ.СубконтоКт1 КАК СубконтоКт1,
	|	ДокТЧ.СубконтоКт2 КАК СубконтоКт2,
	|	ДокТЧ.СубконтоКт3 КАК СубконтоКт3,
	|	ДокТЧ.Сумма КАК Сумма,
	|	ДокТЧ.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	ДокТЧ.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	ДокТЧ.СуммаНУ КАК СуммаНУ,
	|	ДокТЧ.НомерЖурнала
	|ПОМЕСТИТЬ ДокТЧ
	|ИЗ
	|	Документ.БухгалтерскаяСправка.Проводки КАК ДокТЧ
	|ГДЕ
	|	ДокТЧ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерПоПорядку,
	|	ДокТЧ.Регистратор КАК Регистратор,
	|	ДокТЧ.Период КАК Период,
	|	ДокТЧ.НомерСтроки КАК НомерСтроки,
	|	ДокТЧ.Организация КАК Организация,
	|	ДокТЧ.ВалютаДт КАК ВалютаДт,
	|	ДокТЧ.ВалютаКт КАК ВалютаКт,
	|	ДокТЧ.НалоговоеНазначениеДт КАК НалоговоеНазначениеДт,
	|	ДокТЧ.НалоговоеНазначениеКт КАК НалоговоеНазначениеКт,
	|	ДокТЧ.СчетДт КАК СчетДт,
	|	ДокТЧ.СубконтоДт1 КАК СубконтоДт1,
	|	ДокТЧ.СубконтоДт2 КАК СубконтоДт2,
	|	ДокТЧ.СубконтоДт3 КАК СубконтоДт3,
	|	ДокТЧ.СчетКт КАК СчетКт,
	|	ДокТЧ.СубконтоКт1 КАК СубконтоКт1,
	|	ДокТЧ.СубконтоКт2 КАК СубконтоКт2,
	|	ДокТЧ.СубконтоКт3 КАК СубконтоКт3,
	|	ДокТЧ.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	ДокТЧ.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	ДокТЧ.НомерЖурнала,
	|	ДокТЧ.Сумма КАК Сумма,
	|	ДокТЧ.СуммаНУ КАК СуммаНУ
	|ПОМЕСТИТЬ СводДокТЧ
	|ИЗ
	|	ДокТЧ КАК ДокТЧ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ДокТЧ.Регистратор,
	|	&ДатаСторнирования,
	|	ДокТЧ.НомерСтроки,
	|	ДокТЧ.Организация,
	|	ДокТЧ.ВалютаДт,
	|	ДокТЧ.ВалютаКт,
	|	ДокТЧ.НалоговоеНазначениеДт,
	|	ДокТЧ.НалоговоеНазначениеКт,
	|	ДокТЧ.СчетДт,
	|	ДокТЧ.СубконтоДт1,
	|	ДокТЧ.СубконтоДт2,
	|	ДокТЧ.СубконтоДт3,
	|	ДокТЧ.СчетКт,
	|	ДокТЧ.СубконтоКт1,
	|	ДокТЧ.СубконтоКт2,
	|	ДокТЧ.СубконтоКт3,
	|	&Коэффициент * ДокТЧ.ВалютнаяСуммаДт,
	|	&Коэффициент * ДокТЧ.ВалютнаяСуммаКт,
	|	ДокТЧ.НомерЖурнала,
	|	&Коэффициент * ДокТЧ.Сумма,
	|	&Коэффициент * ДокТЧ.СуммаНУ
	|ИЗ
	|	ДокТЧ КАК ДокТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокТЧ.НомерПоПорядку КАК НомерПоПорядку,
	|	ДокТЧ.Регистратор КАК Регистратор,
	|	ДокТЧ.Период КАК Период,
	|	ДокТЧ.НомерСтроки КАК НомерСтроки,
	|	ДокТЧ.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДокТЧ.СчетДт.Валютный
	|			ТОГДА ДокТЧ.ВалютаДт
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ДокТЧ.СчетКт.Валютный
	|			ТОГДА ДокТЧ.ВалютаКт
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ДокТЧ.СчетДт.НалоговыйУчет
	|			ТОГДА ДокТЧ.НалоговоеНазначениеДт
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК НалоговоеНазначениеДт,
	|	ВЫБОР
	|		КОГДА ДокТЧ.СчетКт.НалоговыйУчет
	|			ТОГДА ДокТЧ.НалоговоеНазначениеКт
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК НалоговоеНазначениеКт,
	|	ДокТЧ.СчетДт КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ВидСубконтоДт1.ВидСубконто ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|		ИНАЧЕ ВидСубконтоДт1.ВидСубконто
	|	КОНЕЦ КАК ВидСубконтоДт1,
	|	ВЫБОР
	|		КОГДА ВидСубконтоДт2.ВидСубконто ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|		ИНАЧЕ ВидСубконтоДт2.ВидСубконто
	|	КОНЕЦ КАК ВидСубконтоДт2,
	|	ВЫБОР
	|		КОГДА ВидСубконтоДт3.ВидСубконто ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|		ИНАЧЕ ВидСубконтоДт3.ВидСубконто
	|	КОНЕЦ КАК ВидСубконтоДт3,
	|	ДокТЧ.СубконтоДт1 КАК СубконтоДт1,
	|	ДокТЧ.СубконтоДт2 КАК СубконтоДт2,
	|	ДокТЧ.СубконтоДт3 КАК СубконтоДт3,
	|	ДокТЧ.СчетКт КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ВидСубконтоКт1.ВидСубконто ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|		ИНАЧЕ ВидСубконтоКт1.ВидСубконто
	|	КОНЕЦ КАК ВидСубконтоКт1,
	|	ВЫБОР
	|		КОГДА ВидСубконтоКт2.ВидСубконто ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|		ИНАЧЕ ВидСубконтоКт2.ВидСубконто
	|	КОНЕЦ КАК ВидСубконтоКт2,
	|	ВЫБОР
	|		КОГДА ВидСубконтоКт3.ВидСубконто ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|		ИНАЧЕ ВидСубконтоКт3.ВидСубконто
	|	КОНЕЦ КАК ВидСубконтоКт3,
	|	ДокТЧ.СубконтоКт1 КАК СубконтоКт1,
	|	ДокТЧ.СубконтоКт2 КАК СубконтоКт2,
	|	ДокТЧ.СубконтоКт3 КАК СубконтоКт3,
	|	ДокТЧ.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДокТЧ.СчетДт.Валютный
	|			ТОГДА ДокТЧ.ВалютнаяСуммаДт
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВалютнаяСуммаДт,
	|	ВЫБОР
	|		КОГДА ДокТЧ.СчетКт.Валютный
	|			ТОГДА ДокТЧ.ВалютнаяСуммаКт
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВалютнаяСуммаКт,
	|	ВЫБОР
	|		КОГДА ДокТЧ.СчетДт.НалоговыйУчет
	|			ТОГДА ДокТЧ.СуммаНУ
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК СуммаНУДт,
	|	ВЫБОР
	|		КОГДА ДокТЧ.СчетКт.НалоговыйУчет
	|			ТОГДА ДокТЧ.СуммаНУ
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК СуммаНУКт,
	|	ДокТЧ.НомерЖурнала
	|ИЗ
	|	СводДокТЧ КАК ДокТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт1
	|		ПО ДокТЧ.СчетДт = ВидСубконтоДт1.Ссылка
	|			И (ВидСубконтоДт1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт2
	|		ПО ДокТЧ.СчетДт = ВидСубконтоДт2.Ссылка
	|			И (ВидСубконтоДт2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт3
	|		ПО ДокТЧ.СчетДт = ВидСубконтоДт3.Ссылка
	|			И (ВидСубконтоДт3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоКт1
	|		ПО ДокТЧ.СчетКт = ВидСубконтоКт1.Ссылка
	|			И (ВидСубконтоКт1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоКт2
	|		ПО ДокТЧ.СчетКт = ВидСубконтоКт2.Ссылка
	|			И (ВидСубконтоКт2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоКт3
	|		ПО ДокТЧ.СчетКт = ВидСубконтоКт3.Ссылка
	|			И (ВидСубконтоКт3.НомерСтроки = 3)
	|ГДЕ
	|	НЕ(ДокТЧ.Сумма = 0 И ДокТЧ.СуммаНУ = 0 И ДокТЧ.ВалютнаяСуммаДт = 0 И ДокТЧ.ВалютнаяСуммаКт = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПоПорядку,
	|	НомерСтроки
	|";
	
	лтзРез = лЗапрос.Выполнить().Выгрузить();
	лПроводки = Движения.Хозрасчетный;
	лПроводки.Очистить();
	лПроводки.Загрузить( лтзРез );
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	Префикс = "ЗП";
КонецПроцедуры

Процедура ОчиститьСубконтоПроводкиДляБухгалтерии( птзПроводки, пСуффикс )
	Для каждого лСтрока Из птзПроводки Цикл
		Если 		лСтрока[ "Счет"+пСуффикс ] = ПланыСчетов.Хозрасчетный.ОбеспечениеВыплатОтпусков Тогда			// 471
			лСтрока[ "Субконто"+пСуффикс+"2" ] = Неопределено;
			лСтрока[ "Субконто"+пСуффикс+"3" ] = Неопределено;
		ИначеЕсли 	лСтрока[ "Счет"+пСуффикс ] = ПланыСчетов.Хозрасчетный.ОбеспечениеМатериальногоПоощерения Тогда	// 477
			лСтрока[ "Субконто"+пСуффикс+"2" ] = Неопределено;
			лСтрока[ "Субконто"+пСуффикс+"3" ] = Неопределено;
		ИначеЕсли 	лСтрока[ "Счет"+пСуффикс ] = ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению Тогда		// 651
			лСтрока[ "Субконто"+пСуффикс+"3" ] = Неопределено;
		ИначеЕсли 	лСтрока[ "Счет"+пСуффикс ] = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате Тогда			// 661
			лСтрока[ "Субконто"+пСуффикс+"1" ] = Неопределено;
		ИначеЕсли 	лСтрока[ "Счет"+пСуффикс ] = ПланыСчетов.Хозрасчетный.АдминистративныеРасходы Тогда				// 92
			лСтрока[ "Субконто"+пСуффикс+"3" ] = мНоменклатурнаяГруппа;
			// Возможно нужно подменить Подразделение
			Если ЗначениеЗаполнено(лСтрока[ "Субконто"+пСуффикс+"1" ]) и лСтрока[ "Субконто"+пСуффикс+"1" ].ПринадлежитЭлементу( мКиевскийОфис ) Тогда
				Если ЗначениеЗаполнено(лСтрока[ "Субконто"+пСуффикс+"2" ]) и (Не мсзСтатьиЗатратЗарплата.НайтиПоЗначению(лСтрока[ "Субконто"+пСуффикс+"2" ]) = Неопределено) Тогда
					лСтрока[ "Субконто"+пСуффикс+"1" ] = мКиевскийОфис;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
