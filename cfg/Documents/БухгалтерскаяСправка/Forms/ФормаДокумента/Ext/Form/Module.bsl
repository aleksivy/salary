////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Пересчет валютной суммы в основную по курсу на указанную дату
//
Функция ПересчетСуммыПоКурсу(ВалютнаяСумма, Валюта, Дата, ВалютаПриведения = Неопределено) Экспорт

	Если ВалютаПриведения = Неопределено Тогда ВалютаПриведения = глЗначениеПеременной("глГривна"); КонецЕсли;
	лстрКурс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта, ВалютаПриведения", Валюта, ВалютаПриведения));
	Сумма  = ВалютнаяСумма * лстрКурс.Курс;
	Если лстрКурс.Кратность <> 0 Тогда Сумма = Сумма / лстрКурс.Кратность; КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции // ПересчетСуммыПоКурсу()

Процедура УстановитьВидимость()
	ЭлементыФормы.ДатаСторнирования.Видимость = СторнироватьАвтоматически;
КонецПроцедуры

Функция СчетМожноИспользоватьВПроводках(Счет, Сообщать = Истина) Экспорт
	// Пустая ссылка не может использоваться
	Если Счет.Пустая() Тогда Возврат Ложь; КонецЕсли;

	Если Счет.ЗапретитьИспользоватьВПроводках Тогда
		Если Сообщать Тогда
			Предупреждение(Локализация.СтрШаблон(НСтр("ru='Счет ¤1¤ ""¤2¤"" нельзя использовать в проводках.';uk='Рахунок ¤1¤ ""¤2¤"" не можна використовувати в проводках.'"), СокрЛП(Счет), Счет.Наименование));
		КонецЕсли;
		Возврат Ложь; // Счет использовать в проводках нельзя
	КонецЕсли;
	Возврат Истина; // Счет можно использовать в проводках 
КонецФункции // СчетМожноИспользоватьВПроводках()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	НомерСтроки = 0;
	Для Каждого лСтрока Из Проводки Цикл
		Если НЕ ЗначениеЗаполнено(лСтрока.СчетДт) Тогда
			Сообщить("В строке № " + лСтрока.НомерСтроки + " не заполнен счет дебета.", СтатусСообщения.ОченьВажное);
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(лСтрока.СчетКт) Тогда
			Сообщить("В строке № " + лСтрока.НомерСтроки + " не заполнен счет кредита.", СтатусСообщения.ОченьВажное);
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ
//
// Процедура выполняет открытие формы работы с категориями документа
//

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ПересчитатьВалютнуюСумму( лПроводка )
	Если Не ЗначениеЗаполнено(лПроводка.Валюта) Тогда
		лПроводка.Валюта 		= глЗначениеПеременной("ВалютаРегламентированногоУчета");
        лКурс = ?(Курс=0, РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ЭтотОбъект.Дата, Новый Структура("Валюта", глЗначениеПеременной("ВалютаУправленческогоУчета"))).Курс, Курс); 
	КонецЕсли;
	лПроводка.ВалютнаяСумма = ?(лКурс=0, 0, Окр(лПроводка.Сумма/лКурс,2));
КонецПроцедуры

Процедура ПриОткрытии()
	Если ЭтоНовый() Тогда
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ОбработкаЗаполнения(,);
		КонецЕсли;
	КонецЕсли;
	
	// Если комментарий начинается с Автозаполнение, то это бух.справка по резервам, заполняющаяся автоматически. Не редактируется вручную !!!
	Если Не ЭтоНовый() и (НеПереформировывать или (Лев(Комментарий, 14) = "Автозаполнение")) Тогда ЭлементыФормы.Проводки.ТолькоПросмотр = Истина; КонецЕсли;
	
	УстановитьВидимость();
КонецПроцедуры

// ПроводкиСчетДтПриИзменении
//
Процедура ПроводкиСчетДтПриИзменении(Элемент)
	лДтКт1 = "Дт";
	лДтКт2 = "Кт";
	лСчет  = Элемент.Значение;
	Если (Не ЗначениеЗаполнено(лСчет)) или (Не СчетМожноИспользоватьВПроводках(лСчет)) Тогда лСчет = ПланыСчетов.Хозрасчетный.Вспомогательный; КонецЕсли;
	лСчет2 = ЭлементыФормы.Проводки.ТекущиеДанные[ "Счет"+лДтКт2 ];
	Если (Не ЗначениеЗаполнено(лСчет2)) или (Не СчетМожноИспользоватьВПроводках(лСчет2)) Тогда лСчет2 = ПланыСчетов.Хозрасчетный.Вспомогательный; КонецЕсли;
	
	Элемент.Значение = лСчет;
	ЭлементыФормы.Проводки.ТекущиеДанные[ "Счет"+лДтКт2 ] = лСчет2;
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		ЭлементыФормы.Проводки.ТекущиеДанные[ "Субконто"+лДтКт1+"1" ], ЭлементыФормы.Проводки.Колонки[ "Субконто"+лДтКт1+"1" ],
		ЭлементыФормы.Проводки.ТекущиеДанные[ "Субконто"+лДтКт1+"2" ], ЭлементыФормы.Проводки.Колонки[ "Субконто"+лДтКт1+"2" ],
		ЭлементыФормы.Проводки.ТекущиеДанные[ "Субконто"+лДтКт1+"3" ], ЭлементыФормы.Проводки.Колонки[ "Субконто"+лДтКт1+"3" ]);
	
	//Если НеБалансоваяОперация Тогда
	//	ЭлементыФормы.Проводки.Колонки[ "Количество"+лДтКт1 ].ТолькоПросмотр = (Не лСчет.Количественный);
	//	ЭлементыФормы.Проводки.Колонки[ "Валюта"+лДтКт1 ].ТолькоПросмотр = (Не лСчет.Валютный);
	//	ЭлементыФормы.Проводки.Колонки[ "ВалютнаяСумма"+лДтКт1 ].ТолькоПросмотр = (Не лСчет.Валютный);
	//Иначе
	//	ЭлементыФормы.Проводки.Колонки[ "Количество"+лДтКт1 ].ТолькоПросмотр = ((Не лСчет.Количественный) и (Не лСчет2.Количественный));
	//	ЭлементыФормы.Проводки.Колонки[ "Валюта"+лДтКт1 ].ТолькоПросмотр = ((Не лСчет.Валютный) и (Не лСчет2.Валютный));
	//	ЭлементыФормы.Проводки.Колонки[ "ВалютнаяСумма"+лДтКт1 ].ТолькоПросмотр = ((Не лСчет.Валютный) и (Не лСчет2.Валютный));
	//КонецЕсли;
	//ЭлементыФормы.Проводки.Колонки.НалоговоеНазначениеДт.ТолькоПросмотр = (Не лСчет.НалоговыйУчет);
	//ЭлементыФормы.Проводки.Колонки.НалоговоеНазначениеКт.ТолькоПросмотр = (Не лСчет2.НалоговыйУчет);
	ЭлементыФормы.Проводки.Колонки.СуммаНУ.ТолькоПросмотр = ((Не лСчет.НалоговыйУчет) и (Не лСчет2.НалоговыйУчет));
КонецПроцедуры

Процедура ПроводкиСчетКтПриИзменении(Элемент)
	лДтКт1 = "Кт";
	лДтКт2 = "Дт";
	лСчет  = Элемент.Значение;
	Если (Не ЗначениеЗаполнено(лСчет)) или (Не СчетМожноИспользоватьВПроводках(лСчет)) Тогда лСчет = ПланыСчетов.Хозрасчетный.Вспомогательный; КонецЕсли;
	лСчет2 = ЭлементыФормы.Проводки.ТекущиеДанные[ "Счет"+лДтКт2 ];
	Если (Не ЗначениеЗаполнено(лСчет2)) или (Не СчетМожноИспользоватьВПроводках(лСчет2)) Тогда лСчет2 = ПланыСчетов.Хозрасчетный.Вспомогательный; КонецЕсли;
	
	Элемент.Значение = лСчет;
	ЭлементыФормы.Проводки.ТекущиеДанные[ "Счет"+лДтКт2 ] = лСчет2;
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		ЭлементыФормы.Проводки.ТекущиеДанные[ "Субконто"+лДтКт1+"1" ], ЭлементыФормы.Проводки.Колонки[ "Субконто"+лДтКт1+"1" ],
		ЭлементыФормы.Проводки.ТекущиеДанные[ "Субконто"+лДтКт1+"2" ], ЭлементыФормы.Проводки.Колонки[ "Субконто"+лДтКт1+"2" ],
		ЭлементыФормы.Проводки.ТекущиеДанные[ "Субконто"+лДтКт1+"3" ], ЭлементыФормы.Проводки.Колонки[ "Субконто"+лДтКт1+"3" ]);
	
	ЭлементыФормы.Проводки.Колонки.СуммаНУ.ТолькоПросмотр = ((Не лСчет.НалоговыйУчет) и (Не лСчет2.НалоговыйУчет));
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" полей СубконтоДт
//
Процедура ПроводкиСубконтоДтНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекущаяСтрока = ЭлементыФормы.Проводки.ТекущиеДанные;

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Организация",  ЭлементыФормы.Организация.Значение);
	СписокПараметров.Вставить("Дата",         ЭлементыФормы.Дата.Значение);
	СписокПараметров.Вставить("СчетУчета",    ТекущаяСтрока.СчетДт);
	СписокПараметров.Вставить("СторонаПроводки", "Дт");
	лСубконто = Новый Структура("Номенклатура, Склады, Контрагенты, Договоры"); 
	Для ном=1 По 3 Цикл
		Если 		ТипЗнч( ТекущаяСтрока[ "СубконтоДт"+ном ] )=Тип("СправочникСсылка.Контрагенты") Тогда			лСубконто.Контрагенты = ТекущаяСтрока[ "СубконтоДт"+ном ];
		ИначеЕсли 	ТипЗнч( ТекущаяСтрока[ "СубконтоДт"+ном ] )=Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 	лСубконто.Договоры = ТекущаяСтрока[ "СубконтоДт"+ном ];
		ИначеЕсли 	ТипЗнч( ТекущаяСтрока[ "СубконтоДт"+ном ] )=Тип("СправочникСсылка.Номенклатура") Тогда 			лСубконто.Номенклатура = ТекущаяСтрока[ "СубконтоДт"+ном ];
		ИначеЕсли 	ТипЗнч( ТекущаяСтрока[ "СубконтоДт"+ном ] )=Тип("СправочникСсылка.Склады") Тогда 				лСубконто.Склады = ТекущаяСтрока[ "СубконтоДт"+ном ];
		КонецЕсли;
	КонецЦикла;
	
	СписокПараметров.Вставить("Номенклатура", лСубконто.Номенклатура);
	СписокПараметров.Вставить("Склад",        лСубконто.Склады);
	СписокПараметров.Вставить("Контрагент",   лСубконто.Контрагенты);
	СписокПараметров.Вставить("ДоговорКонтрагента", лСубконто.Договоры);

	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля СубконтоКт1
//

Процедура ПроводкиСубконтоДтПриИзменении(Элемент)

	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда

		ТекущаяСтрока = ЭлементыФормы.Проводки.ТекущиеДанные;
		Договор       = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Для ном=1 По 3 Цикл
			Если ТипЗнч( ТекущаяСтрока[ "СубконтоДт"+ном ] )=Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда Договор = ТекущаяСтрока[ "СубконтоДт"+ном ]; КонецЕсли;
		КонецЦикла;

		Если ЗначениеЗаполнено(Договор) Тогда
			Если НЕ (Договор.Владелец = Элемент.Значение) Тогда
				Для ном=1 По 3 Цикл
					Если ТипЗнч( ТекущаяСтрока[ "СубконтоДт"+ном ] )=Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда ТекущаяСтрока[ "СубконтоДт"+ном ] = Справочники.ДоговорыКонтрагентов.ПустаяСсылка(); КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПроводкиСубконтоКтПриИзменении(Элемент)

	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда

		ТекущаяСтрока = ЭлементыФормы.Проводки.ТекущиеДанные;
		Договор       = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Для ном=1 По 3 Цикл
			Если ТипЗнч( ТекущаяСтрока[ "СубконтоКт"+ном ] )=Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда Договор = ТекущаяСтрока[ "СубконтоКт"+ном ]; КонецЕсли;
		КонецЦикла;

		Если ЗначениеЗаполнено(Договор) Тогда
			Если НЕ (Договор.Владелец = Элемент.Значение) Тогда
				Для ном=1 По 3 Цикл
					Если ТипЗнч( ТекущаяСтрока[ "СубконтоКт"+ном ] )=Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда ТекущаяСтрока[ "СубконтоКт"+ном ] = Справочники.ДоговорыКонтрагентов.ПустаяСсылка(); КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПроводкиСубконтоКтНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.Проводки.ТекущиеДанные;

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Организация",  ЭлементыФормы.Организация.Значение);
	СписокПараметров.Вставить("Дата",         ЭлементыФормы.Дата.Значение);
	СписокПараметров.Вставить("СчетУчета",    ТекущаяСтрока.СчетДт);
	СписокПараметров.Вставить("СторонаПроводки", "Кт");
	
	лСубконто = Новый Структура("Номенклатура, Склады, Контрагенты, Договоры"); 
	Для ном=1 По 3 Цикл
		Если 		ТипЗнч( ТекущаяСтрока[ "СубконтоКт"+ном ] )=Тип("СправочникСсылка.Контрагенты") Тогда			лСубконто.Контрагенты 	= ТекущаяСтрока[ "СубконтоКт"+ном ];
		ИначеЕсли 	ТипЗнч( ТекущаяСтрока[ "СубконтоКт"+ном ] )=Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 	лСубконто.Договоры 		= ТекущаяСтрока[ "СубконтоКт"+ном ];
		ИначеЕсли 	ТипЗнч( ТекущаяСтрока[ "СубконтоКт"+ном ] )=Тип("СправочникСсылка.Номенклатура") Тогда 			лСубконто.Номенклатура 	= ТекущаяСтрока[ "СубконтоКт"+ном ];
		ИначеЕсли 	ТипЗнч( ТекущаяСтрока[ "СубконтоКт"+ном ] )=Тип("СправочникСсылка.Склады") Тогда 				лСубконто.Склады 		= ТекущаяСтрока[ "СубконтоКт"+ном ];
		КонецЕсли;
	КонецЦикла;
	
	СписокПараметров.Вставить("Номенклатура", лСубконто.Номенклатура);
	СписокПараметров.Вставить("Склад",        лСубконто.Склады);
	СписокПараметров.Вставить("Контрагент",   лСубконто.Контрагенты);
	СписокПараметров.Вставить("ДоговорКонтрагента", лСубконто.Договоры);

	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

Процедура НеПереформировыватьПриИзменении(Элемент)
	// Флаг НеПереформировывать имеет смысл только для БухсправкиГААП, введенной на основании локальной БухСправки
	УстановитьВидимость();
КонецПроцедуры

Процедура НеБалансоваяОперацияПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

Процедура ПроводкиСчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
КонецПроцедуры

Процедура ПроводкиСчетКтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
КонецПроцедуры

Процедура ПроводкиВалютаДтПриИзменении(Элемент)
	ТД = ЭлементыФормы.Проводки.ТекущиеДанные;
	ТД.Сумма = ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаДт, ТД.ВалютаДт, Дата);
КонецПроцедуры

Процедура ПроводкиВалютаКтПриИзменении(Элемент)
	ТД = ЭлементыФормы.Проводки.ТекущиеДанные;
	Если НЕ ТД.СчетДт.Валютный Тогда 
		ТД.Сумма = ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаКт, ТД.ВалютаКт, Дата);
	КонецЕсли;
КонецПроцедуры

Процедура ПроводкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда Возврат; КонецЕсли;
	
	лТекущаяСтрока = Элемент.ТекущиеДанные;
	Если лТекущаяСтрока.СчетДт.Валютный и Не ЗначениеЗаполнено(лТекущаяСтрока.ВалютаДт) Тогда лТекущаяСтрока.ВалютаДт = глЗначениеПеременной("ВалютаРегламентированногоУчета"); КонецЕсли;
	Если лТекущаяСтрока.СчетКт.Валютный и Не ЗначениеЗаполнено(лТекущаяСтрока.ВалютаКт) Тогда лТекущаяСтрока.ВалютаКт = глЗначениеПеременной("ВалютаРегламентированногоУчета"); КонецЕсли;
	
	//Если Не НеБалансоваяОперация Тогда
	//	лТекущаяСтрока.КоличествоКт = лТекущаяСтрока.КоличествоДт;
	//	лТекущаяСтрока.ВалютаКт = лТекущаяСтрока.ВалютаДт;
	//	лТекущаяСтрока.ВалютнаяСуммаКт = лТекущаяСтрока.ВалютнаяСуммаДт;
	//КонецЕсли;
КонецПроцедуры

Процедура ПроводкиМСФОПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда Возврат; КонецЕсли;
	
	лТекущаяСтрока = Элемент.ТекущиеДанные;
	Если лТекущаяСтрока.СчетДт.Валютный и Не ЗначениеЗаполнено(лТекущаяСтрока.ВалютаДт) Тогда лТекущаяСтрока.ВалютаДт = глЗначениеПеременной("ВалютаРегламентированногоУчета"); КонецЕсли;
	Если лТекущаяСтрока.СчетКт.Валютный и Не ЗначениеЗаполнено(лТекущаяСтрока.ВалютаКт) Тогда лТекущаяСтрока.ВалютаКт = глЗначениеПеременной("ВалютаРегламентированногоУчета"); КонецЕсли;
	
КонецПроцедуры

Процедура ПроводкиМСФОСубконтоДтПриИзменении(Элемент)
	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда

		ТекущаяСтрока = ЭлементыФормы.ПроводкиМСФО.ТекущиеДанные;
		Договор       = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Для ном=1 По 3 Цикл
			Если ТипЗнч( ТекущаяСтрока[ "СубконтоДт"+ном ] )=Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда Договор = ТекущаяСтрока[ "СубконтоДт"+ном ]; КонецЕсли;
		КонецЦикла;

		Если ЗначениеЗаполнено(Договор) Тогда
			Если НЕ (Договор.Владелец = Элемент.Значение) Тогда
				Для ном=1 По 3 Цикл
					Если ТипЗнч( ТекущаяСтрока[ "СубконтоДт"+ном ] )=Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда ТекущаяСтрока[ "СубконтоДт"+ном ] = Справочники.ДоговорыКонтрагентов.ПустаяСсылка(); КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

Процедура ПроводкиМСФОСубконтоДтНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекущаяСтрока = ЭлементыФормы.ПроводкиМСФО.ТекущиеДанные;

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Организация",  ЭлементыФормы.Организация.Значение);
	СписокПараметров.Вставить("Дата",         ЭлементыФормы.Дата.Значение);
	СписокПараметров.Вставить("СчетУчета",    ТекущаяСтрока.СчетДт);
	СписокПараметров.Вставить("СторонаПроводки", "Дт");
	лСубконто = Новый Структура("Номенклатура, Склады, Контрагенты, Договоры"); 
	Для ном=1 По 3 Цикл
		Если 		ТипЗнч( ТекущаяСтрока[ "СубконтоДт"+ном ] )=Тип("СправочникСсылка.Контрагенты") Тогда			лСубконто.Контрагенты = ТекущаяСтрока[ "СубконтоДт"+ном ];
		ИначеЕсли 	ТипЗнч( ТекущаяСтрока[ "СубконтоДт"+ном ] )=Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 	лСубконто.Договоры = ТекущаяСтрока[ "СубконтоДт"+ном ];
		ИначеЕсли 	ТипЗнч( ТекущаяСтрока[ "СубконтоДт"+ном ] )=Тип("СправочникСсылка.Номенклатура") Тогда 			лСубконто.Номенклатура = ТекущаяСтрока[ "СубконтоДт"+ном ];
		ИначеЕсли 	ТипЗнч( ТекущаяСтрока[ "СубконтоДт"+ном ] )=Тип("СправочникСсылка.Склады") Тогда 				лСубконто.Склады = ТекущаяСтрока[ "СубконтоДт"+ном ];
		КонецЕсли;
	КонецЦикла;
	
	СписокПараметров.Вставить("Номенклатура", лСубконто.Номенклатура);
	СписокПараметров.Вставить("Склад",        лСубконто.Склады);
	СписокПараметров.Вставить("Контрагент",   лСубконто.Контрагенты);
	СписокПараметров.Вставить("ДоговорКонтрагента", лСубконто.Договоры);

	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

Процедура ПроводкиМСФОСубконтоКтПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПроводкиМСФОСубконтоКтНачалоВыбора(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	// Установка кнопок печати
	УстановитьКнопкиПечати();
КонецПроцедуры

Процедура ПослеЗаписи()
	// Установка кнопок печати
	УстановитьКнопкиПечати();
КонецПроцедуры

Процедура ПроводкиВалютнаяСуммаПриИзменении(Элемент)
	лСтрокаДанных = ЭлементыФормы.Проводки.ТекущиеДанные;
	Если ЗначениеЗаполнено(лСтрокаДанных.ВалютаДт) Тогда		лВалюта = лСтрокаДанных.ВалютаДт;
	ИначеЕсли ЗначениеЗаполнено(лСтрокаДанных.ВалютаКт) Тогда	лВалюта = лСтрокаДанных.ВалютаКт;
	Иначе Возврат;
	КонецЕсли;
	лКурс = МодульВалютногоУчета.ПолучитьКурсВалюты(лВалюта, Дата, глЗначениеПеременной("ВалютаРегламентированногоУчета") );
	лСтрокаДанных.Сумма = Элемент.Значение * лКурс.Курс / лКурс.Кратность;
КонецПроцедуры

// СторнироватьСуммы
//
Процедура СторнироватьСуммы(Кнопка)
	Для каждого лСтрока Из Проводки Цикл
		лСтрока.КоличествоДт = - лСтрока.КоличествоДт;
		лСтрока.ВалютнаяСуммаДт = - лСтрока.ВалютнаяСуммаДт;
		лСтрока.КоличествоКт = - лСтрока.КоличествоКт;
		лСтрока.ВалютнаяСуммаКт = - лСтрока.ВалютнаяСуммаКт;
		лСтрока.Сумма = - лСтрока.Сумма;
		лСтрока.СуммаНУ = - лСтрока.СуммаНУ;
	КонецЦикла;
КонецПроцедуры // СторнироватьСуммы

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)
	Серна.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(), Ссылка, ЭтотОбъект); 
КонецПроцедуры // ОсновныеДействияФормыНастройка()

Процедура СторнироватьАвтоматическиПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры
