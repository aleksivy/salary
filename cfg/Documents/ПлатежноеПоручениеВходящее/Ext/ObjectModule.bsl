/// Формирует номер платежного поручения в пределах расчетного счета
//
Процедура УстановитьНомерПоручения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаГода", НачалоГода(Дата));
	Запрос.УстановитьПараметр("ДатаКонцаГода", КонецГода(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетОрганизации", СчетОрганизации);
	

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НомерВходящегоДокумента КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручение
	|
	|ГДЕ
	|	ПлатежноеПоручение.Организация = &Организация
	|	И ПлатежноеПоручение.СчетОрганизации = &СчетОрганизации
	|	И ПлатежноеПоручение.Дата >= &ДатаНачалаГода
	|	И ПлатежноеПоручение.Дата <= &ДатаКонцаГода";

	СписокПлатежек = Запрос.Выполнить().Выбрать();
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	 
	ТаблицаЗначений.Колонки.Добавить("Номер"); 
	ТаблицаЗначений.Колонки.Добавить("Длина"); 

	Пока СписокПлатежек.Следующий() Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить(); 
		НоваяСтрока.Номер = СписокПлатежек.НомерВходящегоДокумента; 
		НоваяСтрока.Длина = СтрДлина(СписокПлатежек.НомерВходящегоДокумента); 
	КонецЦикла;
	
	ТаблицаЗначений.Сортировать("Длина Убыв, Номер Убыв");
	
	Попытка
		НомерНомерВходящегоДокументаЧисло = Число(ТаблицаЗначений[0].Номер) + 1;
		НомерНомерВходящегоДокумента = Формат(НомерНомерВходящегоДокументаЧисло, "ЧГ=0");
	Исключение
		НомерВходящегоДокумента = 1;
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьЗапросДляРасчетаСумм()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	ЕстьNULL(ПлатежноеПоручениеВходящееЗаявки.ЗаявлениеРасчет.ВсегоПоДокументу,0) КАК Сумма 
	                |ИЗ
	                |	Документ.ПлатежноеПоручениеВходящее.Заявки КАК ПлатежноеПоручениеВходящееЗаявки
	                |ГДЕ
	                |	ПлатежноеПоручениеВходящееЗаявки.Ссылка = &Ссылка";
	Возврат Запрос.Выполнить();				
					
Конецфункции

Процедура РассчитатьСумму() Экспорт
	Сумма = 0;
	
	РезультатЗапросаПоДокументам = ПолучитьЗапросДляРасчетаСумм();
	ВыборкаПоДокументам = РезультатЗапросаПоДокументам.Выбрать();
		
		Пока ВыборкаПоДокументам.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаПоДокументам.Сумма) Тогда
	    		Сумма = Сумма + ВыборкаПоДокументам.Сумма;
			КонецЕсли;	
		КонецЦикла;
		
		СуммаДокумента = Сумма;
	
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст = "
	|Выбрать РАЗРЕШЕННЫЕ
	|	Дата,
	|	Организация,
	|	Ответственный,
	|	Контрагент,
	|	СчетОрганизации,
	|	СчетКонтрагента,
	| 	Ссылка
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросДляПроведения()
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр( "ССылка" , Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПлатежноеПоручениеВходящееЗаявки.ЗаявлениеРасчет.Ссылка,
	               |	ВзаиморасчетыПоНачислениямЗаСчетФСС.Организация,
	               |	ВзаиморасчетыПоНачислениямЗаСчетФСС.ПериодВзаиморасчетов,
	               |	ВзаиморасчетыПоНачислениямЗаСчетФСС.СтатьяРасчетовСФСС,
	               |	ВзаиморасчетыПоНачислениямЗаСчетФСС.Сотрудник,
	               |	ВзаиморасчетыПоНачислениямЗаСчетФСС.СчетУчета,
	               |	ВзаиморасчетыПоНачислениямЗаСчетФСС.Сумма,
	               |	ВзаиморасчетыПоНачислениямЗаСчетФСС.Документ
	               |ИЗ
	               |	Документ.ПлатежноеПоручениеВходящее.Заявки КАК ПлатежноеПоручениеВходящееЗаявки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыПоНачислениямЗаСчетФСС КАК ВзаиморасчетыПоНачислениямЗаСчетФСС
	               |		ПО ПлатежноеПоручениеВходящееЗаявки.ЗаявлениеРасчет.Ссылка = ВзаиморасчетыПоНачислениямЗаСчетФСС.Регистратор
	               |ГДЕ
	               |	ПлатежноеПоручениеВходящееЗаявки.Ссылка = &Ссылка";
		   
	Возврат Запрос.Выполнить();		
КонецФункции

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указана организация!';uk='Не зазначена організація!'"), Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Ответственный) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указано ответственное лицо!';uk='Не вказана відповідальна особа!'"), Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Контрагент) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указан контрагент!';uk='Не зазначений контрагент!'"), Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, Отказ, Заголовок)
	РезультатЗапросаПоДокументам = СформироватьЗапросДляПроведения();
	ВыборкаПоДокументам = РезультатЗапросаПоДокументам.Выбрать();
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		//движения по РН ВзаиморасчетыПоНачислениямЗаСчетФСС
		Движение = Движения.ВзаиморасчетыПоНачислениямЗаСчетФСС.Добавить();
	
		// Свойства
		Движение.Период                 = ВыборкаПоШапкеДокумента.Дата;
		Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
	
		// Измерения
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.ПериодВзаиморасчетов	= ВыборкаПоДокументам.ПериодВзаиморасчетов;
		Движение.СтатьяРасчетовСФСС     = ВыборкаПоДокументам.СтатьяРасчетовСФСС;
		Движение.Сотрудник              = ВыборкаПоДокументам.Сотрудник;
		Движение.СчетУчета			    = ВыборкаПоДокументам.СчетУчета;
		
		// Ресурсы
		Движение.Сумма					= ВыборкаПоДокументам.Сумма; 
	
		//Реквизиты
		Движение.Документ 				= ВыборкаПоДокументам.Документ;
		Движение.КодОперации			= Перечисления.КодыОперацийРасчетыСФСС.Получено;

		//движения по РН ВзаиморасчетыСРаботникамиОрганизаций
        Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
		
		// Свойства
		Движение.Период					= ВыборкаПоШапкеДокумента.Дата;
		Движение.ВидДвижения   			= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.ПериодВзаиморасчетов	= ВыборкаПоДокументам.ПериодВзаиморасчетов;
		Движение.Сотрудник				= ВыборкаПоДокументам.Сотрудник;
		Движение.СчетУчета			    = ВыборкаПоДокументам.СчетУчета;
		
		// Ресурсы
		Движение.СуммаВзаиморасчетов	= ВыборкаПоДокументам.Сумма;
		
		//Реквизиты
		Движение.КодОперации			= Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления;
	КонецЦикла
	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		
		// Движения по документу
		Если Не Отказ Тогда
			ДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента,Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если	ТипЗнч(Основание)	=	Тип("ДокументСсылка.ЗаявлениеРасчетВФСС")	Тогда
		
		Организация = Основание.Организация;
		Если ЗначениеЗаполнено(Организация) Тогда
			СчетОрганизации = Организация.БанковскийСчетДляРасчетовСФСС;
		Иначе
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		НоваяСтрока = Заявки.Добавить();
		НоваяСтрока.ЗаявлениеРасчет = Основание;
        СуммаДокумента = Основание.ВсегоПоДокументу;

	КонецЕсли;
	
	
КонецПроцедуры

