////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;

// Диалог настройки периода
Перем мНастройкаПериода;

//Хранит информацию по отбору в табличных частях
Перем мОтборПоСотруднику;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

// для синхронизации строк табличных полей
Перем мСинхронизируемыеТабличныеЧасти;
Перем мТекущийСотрудник;
Перем мТекущийВидОтпуска;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//	НЕТ
//
// Возвращаемое значение:
//	Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровТайпинга()

	СтруктураПараметров = Новый Структура("ОбозначениеВТабелеУчетаРабочегоВремени", Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск);

	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровТайпинга()()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ИспользованиеЕжегодногоОтпуска,ЭлементыФормы.КоманднаяПанельИспользованиеЕжегодногоОтпуска);
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

Процедура УстановитьОтборСписка()
	
	КнопкаПереключитьОтборСписка = ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПереключитьОтборСписка;
	КнопкаПереключитьОтборСписка.Картинка = ?(мОтборПоСотруднику, БиблиотекаКартинок.ФизическоеЛицо, БиблиотекаКартинок.ФизическиеЛица);
	
	Если НЕ мОтборПоСотруднику Тогда
		
		// отключим отбор
		ЭлементыФормы.ИспользованиеЕжегодногоОтпуска.ОтборСтрок.Сотрудник.Использование = Ложь;
		ЭлементыФормы.ИспользованиеЕжегодногоОтпуска.ОтборСтрок.ВидОтпуска.Использование = Ложь;
	Иначе
		
		Если ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока = Неопределено Тогда
			Если РаботникиОрганизации.Количество()>0 Тогда
				ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока = РаботникиОрганизации[0];	
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		мТекущийСотрудник = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока.Сотрудник;
		мТекущийВидОтпуска = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока.ВидОтпуска;
		
		// установим отбор
		
		ЭлементыФормы.ИспользованиеЕжегодногоОтпуска.ОтборСтрок.Сотрудник.Использование = Истина;
		ЭлементыФормы.ИспользованиеЕжегодногоОтпуска.ОтборСтрок.Сотрудник.Значение = мТекущийСотрудник;
		
		ЭлементыФормы.ИспользованиеЕжегодногоОтпуска.ОтборСтрок.ВидОтпуска.Использование = Истина;
		ЭлементыФормы.ИспользованиеЕжегодногоОтпуска.ОтборСтрок.ВидОтпуска.Значение = мТекущийВидОтпуска;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ
// Процедура устанавливает видимость для тех элементов видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	МодифицированностьДоНачалаУстановкиВидимости = Модифицированность(); 
	
	ОтборОрганизация = Новый Структура("Организация", Организация);
	ВестиУчетОстатковОтпусков = РегистрыСведений.УчетнаяПолитикаПоПерсоналуОрганизаций.Получить(ОтборОрганизация).ВестиУчетОстатковОтпусков;
	
	Если ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Кнопки.Найти("Отпуск") <> Неопределено Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Кнопки.Отпуск);
	КонецЕсли;	
	
	Если ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Кнопки.Найти("КорректировкаОтпуска") <> Неопределено Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Кнопки.КорректировкаОтпуска);
	КонецЕсли;	
	
	Если ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Кнопки.Найти("КомпенсацияОтпуска") <> Неопределено Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Кнопки.КомпенсацияОтпуска);
	КонецЕсли;
                                                                                                                                                              	
	Массив = Новый Массив;
	Если Не ВестиУчетОстатковОтпусков Тогда
		Массив.Добавить(ВидОперации.Метаданные().ЗначенияПеречисления.Отпуск);
		ВидОперации = Перечисления.ВидыОперацийОтпускаОрганизаций.Отпуск;
	Иначе
		Массив.Добавить(ВидОперации.Метаданные().ЗначенияПеречисления.Отпуск);
		Массив.Добавить(ВидОперации.Метаданные().ЗначенияПеречисления.КомпенсацияОтпуска);
		Массив.Добавить(ВидОперации.Метаданные().ЗначенияПеречисления.КорректировкаОтпуска);
	КонецЕсли;	
	
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
											  Массив,
										  Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
										  
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	Если ВидОперации = Перечисления.ВидыОперацийОтпускаОрганизаций.Отпуск Тогда
		Если ВестиУчетОстатковОтпусков Тогда
			РазвернутьОбеПанели();
			ЭлементыФормы.РаботникиОрганизации.Колонки.РабочийГодС.Видимость = Ложь;
			ЭлементыФормы.РаботникиОрганизации.Колонки.РабочийГодПо.Видимость = Ложь;
			ЭлементыФормы.РаботникиОрганизации.Видимость = Истина;
			ЭлементыФормы.РасчитыватьОстаткиЗаВсеГода.Видимость = Истина;  
			Если РасчитыватьОстаткиЗаВсеГода Тогда 
				ЭлементыФормы.КоличествоЛет.Видимость = Истина;
				ЭлементыФормы.НадписьКоличествоЛет.Видимость = Истина;
			Иначе
				ЭлементыФормы.КоличествоЛет.Видимость = Ложь;
				ЭлементыФормы.НадписьКоличествоЛет.Видимость = Ложь;
			КонецЕсли	
		Иначе
			РазвернутьОбеПанели();
			СвернутьПанельИспользованияОтпусков();	
			ЭлементыФормы.РаботникиОрганизации.Колонки.РабочийГодС.Видимость = Истина;
			ЭлементыФормы.РаботникиОрганизации.Колонки.РабочийГодПо.Видимость = Истина;
			ЭлементыФормы.РасчитыватьОстаткиЗаВсеГода.Видимость = Ложь;
			ЭлементыФормы.КоличествоЛет.Видимость = Ложь;
			ЭлементыФормы.НадписьКоличествоЛет.Видимость = Ложь;
		КонецЕсли;
		
		Если ЭлементыФормы.КоманднаяПанельИспользованиеЕжегодногоОтпуска.Кнопки.Найти("Заполнить") = Неопределено Тогда
			ЭлементыФормы.КоманднаяПанельИспользованиеЕжегодногоОтпуска.Кнопки.Добавить("Заполнить", ТипКнопкиКоманднойПанели.Действие,"Заполнить",Новый Действие("КоманднаяПанельИспользованиеЕжегодногоОтпускаЗаполнить"));
		КонецЕсли;
	Иначе
		ЭлементыФормы.РасчитыватьОстаткиЗаВсеГода.Видимость = Ложь;
		РазвернутьОбеПанели();	
		СвернутьПанельРаботникиОрганизации();
		ЭлементыФормы.КоличествоЛет.Видимость = Ложь;
		ЭлементыФормы.НадписьКоличествоЛет.Видимость = Ложь;
		Если ЭлементыФормы.КоманднаяПанельИспользованиеЕжегодногоОтпуска.Кнопки.Найти("Заполнить") <> Неопределено Тогда
			ЭлементыФормы.КоманднаяПанельИспользованиеЕжегодногоОтпуска.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельИспользованиеЕжегодногоОтпуска.Кнопки.Заполнить);
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = МодифицированностьДоНачалаУстановкиВидимости;
	
КонецПроцедуры

Процедура СвернутьПанельИспользованияОтпусков()
	ЭлементыФормы.ПанельИспользованиеОтпусков.УстановитьПривязку(ГраницаЭлементаУправления.Верх);
	ЭлементыФормы.Разделитель1.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ПанельИспользованиеОтпусков, ГраницаЭлементаУправления.Верх);
	ЭлементыФормы.Разделитель1.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.Разделитель1, ГраницаЭлементаУправления.Низ);
	ЭлементыФормы.ПанельИспользованиеОтпусков.Свертка = РежимСверткиЭлементаУправления.Низ;
	ЭлементыФормы.ПанельРаботникиОрганизации.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.Разделитель1, ГраницаЭлементаУправления.Верх);
	ЭлементыФормы.Разделитель1.Свертка = РежимСверткиЭлементаУправления.Низ;	
КонецПроцедуры

Процедура СвернутьПанельРаботникиОрганизации()
	ЭлементыФормы.ПанельРаботникиОрганизации.УстановитьПривязку(ГраницаЭлементаУправления.Низ);
	ЭлементыФормы.Разделитель1.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.ПанельРаботникиОрганизации, ГраницаЭлементаУправления.Низ);
	ЭлементыФормы.ПанельРаботникиОрганизации.Свертка = РежимСверткиЭлементаУправления.Верх;
	ЭлементыФормы.Разделитель1.Свертка = РежимСверткиЭлементаУправления.Верх;
	ЭлементыФормы.ПанельИспользованиеОтпусков.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.Разделитель1, ГраницаЭлементаУправления.Низ);           
КонецПроцедуры

Процедура РазвернутьОбеПанели()
	Если ЭлементыФормы.ПанельИспользованиеОтпусков.Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
		ЭлементыФормы.ПанельРаботникиОрганизации.УстановитьПривязку(ГраницаЭлементаУправления.Низ,ЭлементыФормы.Разделитель1,ГраницаЭлементаУправления.Верх);
		ЭлементыФормы.ПанельИспользованиеОтпусков.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.Разделитель1.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.Разделитель1.УстановитьПривязку(ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ПанельИспользованиеОтпусков.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.Разделитель1, ГраницаЭлементаУправления.Низ);
	КонецЕсли;
	
	Если ЭлементыФормы.ПанельРаботникиОрганизации.Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
		ЭлементыФормы.ПанельИспользованиеОтпусков.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.Разделитель1, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ПанельРаботникиОрганизации.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.Разделитель1.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.Разделитель1.УстановитьПривязку(ГраницаЭлементаУправления.Верх);
		ЭлементыФормы.ПанельРаботникиОрганизации.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.Разделитель1, ГраницаЭлементаУправления.Верх);
	КонецЕсли;	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
		Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
			ВидОперации = Перечисления.ВидыОперацийОтпускаОрганизаций.Отпуск;		
		КонецЕсли;
		РасчитыватьОстаткиЗаВсеГода = ВосстановитьЗначение("РасчитыватьОстаткиЗаВсеГода");
		КоличествоЛет = ВосстановитьЗначение("КоличествоЛет");
	Иначе 
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить(ВидОперации.Метаданные().ЗначенияПеречисления.Отпуск);
	Массив.Добавить(ВидОперации.Метаданные().ЗначенияПеречисления.КомпенсацияОтпуска);
	Массив.Добавить(ВидОперации.Метаданные().ЗначенияПеречисления.КорректировкаОтпуска);

	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
											  Массив,
										  Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ДатаОкончания");
	СтруктураКолонок.Вставить("ВидОтпуска");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаботникиОрганизации.Колонки, СтруктураКолонок);
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен). И вид операции документа.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.РаботникиОрганизации.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	// Установить настройку периода по умолчанию
	мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	мНастройкаПериода.УстановитьПериод(НачалоМесяца(Дата), КонецМесяца(Дата));
	
	// Установить активный реквизит.
	ЭлементыФормы.РаботникиОрганизации.АктивизироватьПоУмолчанию = Истина;
	УстановитьОтборСписка();
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			РаботникиОрганизации.Загрузить(ЗначениеВыбора.Данные.Выгрузить())
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыДокументыНачисления(Кнопка)
	
	Если НЕ Проведен Тогда
		Предупреждение(НСтр("ru='Ввести документы-начисления можно только после проведения документа!';uk='Ввести документи-нарахування можна тільки після проведення документа!'"));
		Возврат;
	КонецЕсли;
		
	Если Модифицированность() Тогда
		
		Ответ = Вопрос(НСтр("ru='Документ изменен. Для ввода документов-начислений его необходимо записать и провести."
"Записать и провести?';uk='Документ змінений. Для введення документів-нарахувань його необхідно записати i провести."
"Записати і провести?'"),
						РежимДиалогаВопрос.ОКОтмена, , 
						КодВозвратаДиалога.Отмена,
						НСтр("ru='Документ изменен';uk='Документ змінений'"));
		
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			
			Попытка
				ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
			Исключение
				Предупреждение(НСтр("ru='Операция не выполнена!';uk='Операція не виконана!'"));
				Возврат 
			КонецПопытки;
			
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	Обработка = Обработки.АнализНеявок.Создать();
	Обработка.Организация = Организация;
	Обработка.ОтбиратьСобытияПоДокументу = Истина;
	Обработка.ТипДокумента = НСтр("ru='Отпуска организации';uk='Відпустки організації'");
	Обработка.КадровыйДокумент = Ссылка;
	Обработка.ПолучитьФорму(, ЭтаФорма).Открыть();

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Список = Ложь;

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийОтпускаОрганизаций[Кнопка.Имя];
	КонецЕсли;
	
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	Если ВидОперации = Перечисления.ВидыОперацийОтпускаОрганизаций.Отпуск Тогда
	КонецЕсли;
		
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Заполняет табличную часть запланированными в графике отпусков отпусками
// 
// Параметры:
//	Кнопка	- Элемент управления
//
Процедура КоманднаяПанельРаботникиОрганизацииЗаполнить(Кнопка)
	
	Если Организация.Пустая() Тогда
		Предупреждение(НСтр("ru='Укажите организацию!';uk='Укажіть організацію!'"));
		Возврат
	КонецЕсли;
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если мНастройкаПериода.Редактировать() Тогда
		ДатаНачала		= мНастройкаПериода.ПолучитьДатуНачала();
		ДатаОкончания	= мНастройкаПериода.ПолучитьДатуОкончания();
		
		Если НЕ ЗначениеЗаполнено(ДатаНачала) или НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
			Предупреждение(НСтр("ru='Укажите границы периода просмотра графика отпусков!';uk='Вкажіть межі періоду перегляду графіка відпусток!'"));
			Возврат;
		КонецЕсли;
		
		РаботникиОрганизации.Очистить();
		Автозаполнение(ДатаНачала, ДатаОкончания);
		
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииЗаполнить()

// Процедура - вызывается при нажатии на кнопку "Список работников"
//
Процедура КоманднаяПанельРаботникиОрганизацииСписокРаботников(Кнопка)
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Заполнить?';uk='Перед заповненням табличні частини будуть очищені. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		РаботникиОрганизации.Очистить();
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, , Организация);

КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииСписокРаботников()

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, Организация, 1);
	
КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа
//
Процедура ДатаПриИзменении(Элемент = Неопределено)

	РаботаСДиалогами.ПроверитьНомерДокумента(ДокументОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	УстановитьВидимость();

КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура обеспечивает начальное значение реквизита "ПричинаОтсутствия"
// 
// Параметры:
//  Элемент - табличное поле, которое отображает т.ч.
//  НоваяСтрока - булево, признак редактирования новой строки
//  
Процедура РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		ВведеннаяСтрока = Элемент.ТекущаяСтрока;
//		Если НЕ ЗначениеЗаполнено(ВведеннаяСтрока.ПричинаОтсутствия) Тогда
//			ВведеннаяСтрока.ПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный
//		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииПриНачалеРедактирования()

// Процедура обеспечивает управление доступностью и видимостью реквизитов
//
// Параметры:
//	Элемент		- табличное поле, которое отображает т.ч.
//
Процедура РаботникиОрганизацииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	//// вид дополнительного отпуска доступен только для дополнительного отпуска
	//Если Элемент.Колонки.ВидДополнительногоОтпуска.Видимость Тогда
	//	ОформлениеСтроки.Ячейки.ВидДополнительногоОтпуска.ТолькоПросмотр = ДанныеСтроки.ПричинаОтсутствия <> Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный;
	//КонецЕсли;
	//Если Элемент.Колонки.ДатаНачалаДоп.Видимость Тогда
	//	ОформлениеСтроки.Ячейки.ДатаНачалаДоп.ТолькоПросмотр = ДанныеСтроки.ПричинаОтсутствия <> Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный;
	//КонецЕсли;

	//// рабочий год, за который предоставляется отпуск, покажем для ежегодного и дополнительного отпусков
	//Если Элемент.Колонки.РабочийГодС.Видимость Тогда
	//	ОформлениеСтроки.Ячейки.РабочийГодС.Видимость = (ДанныеСтроки.ПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный);
	//КонецЕсли;
	//Если Элемент.Колонки.РабочийГодС.Видимость Тогда
	//	ОформлениеСтроки.Ячейки.РабочийГодПо.ТолькоПросмотр = Не (ДанныеСтроки.ПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный);
	//КонецЕсли;

	Возврат;
	
КонецПроцедуры // РаботникиОрганизацииПриВыводеСтроки()

// Процедура - обработчик события "ОбработкаВыбора" табличного поля РаботникиОрганизации
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
			
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		НоваяСтрока = РаботникиОрганизации.Добавить();
		НоваяСтрока.Сотрудник = ВыбранноеЗначение;
		НоваяСтрока.ФизЛицо = ВыбранноеЗначение.ФизЛицо;
	КонецЕсли;
	
КонецПроцедуры // ТабличнаяЧастьОбработкаВыбора()

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);
	
КонецПроцедуры // РаботникиОрганизацииПриПолученииДанных()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физического лица -  
// переопеределим выбор физлица на выбор из списка регистра сведений
//
// Параметры:
//	Элемент - элемент формы, который отображает физическое лицо
//
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода вида отпуска
//
// Параметры:
//	Элемент		- элемент формы, который отображает физическое лицо
//
Процедура РаботникиОрганизацииПричинаОтсутствияПриИзменении(Элемент)

	//Если Элемент.Значение <> Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный Тогда
	//	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	//	
	//	ДанныеСтроки.ВидДополнительногоОтпуска	= "";
	//	ДанныеСтроки.ДатаНачалаДоп				= "";
	//	ДанныеСтроки.РабочийГодС				= "";
	//	ДанныеСтроки.РабочийГодПо				= "";
	//КонецЕсли;
	
	Возврат;
	
КонецПроцедуры // РаботникиОрганизацииПричинаОтсутствияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода дополнительного отпуска
//
// Параметры:
//	Элемент		- элемент формы, который отображает физическое лицо
//
Процедура РаботникиОрганизацииВидДополнительногоОтпускаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//Предложим для выбора список расчетов, имеющих способ расчета, соответствующий указанной форме оплаты
	ФормаВыбора = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаОтпускаОрганизаций");
	
	//Выбираем подходящие виды расчета
	Запрос=Новый Запрос;
	Запрос.Текст="
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисления.Ссылка
	|ИЗ	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
	|ГДЕ	ОсновныеНачисления.ЭтоОтпуск 		
	|	И	ОсновныеНачисления.Ссылка <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтп)
	|";
	СписокОтбора=Новый СписокЗначений;
	СписокОтбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	ФормаВыбора.Отбор.Ссылка.ВидСравнения=ВидСравнения.ВСписке;
	ФормаВыбора.Отбор.Ссылка.Значение      = СписокОтбора;
	ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();
	
КонецПроцедуры // РаботникиОрганизацииВидДополнительногоОтпускаНачалоВыбора()

Процедура РаботникиОрганизацииВидДополнительногоОтпускаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
КонецПроцедуры // РаботникиОрганизацииВидДополнительногоОтпускаАвтоПодборТекста()

Процедура РаботникиОрганизацииВидДополнительногоОтпускаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаТайпинга, мТекстТайпинга, мПоследнееЗначениеЭлементаТайпинга, Ложь);
	
КонецПроцедуры // РаботникиОрганизацииВидДополнительногоОтпускаОкончаниеВводаТекста()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ИспользованиеЕжегодногоОтпускаПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	//Если ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные = Неопределено Тогда
	//	Номерстроки = Неопределено;
	//Иначе	
	//	НомерСтроки=ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.НомерСтроки;
	//КонецЕсли;
	//
	//Если НомерСтроки<>Неопределено Тогда
	//	Если ЭлементыФормы.ИспользованиеЕжегодногоОтпуска.ТекущиеДанные <> Неопределено Тогда
	//		ЭлементыФормы.ИспользованиеЕжегодногоОтпуска.ТекущиеДанные.НомерСтрокиРаботникиОрганизации=НомерСтроки;
	//	КонецЕсли;	
	//Иначе
	//	Отказ=Истина;
	//	Сообщить("Сначало выберите строку в табличной части ""Работники""",СтатусСообщения.Внимание);
	//КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

Функция ЗаписатьДокументОтменивПроведение(Действие = "рассчитать")

	Если Проведен Тогда
		
		Если Вопрос(НСтр("ru='Автоматически ';uk='Автоматично '") + Действие +НСтр("ru=' документ можно только после отмены его проведения. Выполнить отмену проведения документа?';uk=' документ можна тільки після скасування його проведення. Виконати скасування проведення документа?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаписатьВФорме( РежимЗаписиДокумента.ОтменаПроведения );
		
	ИначеЕсли Модифицированность ИЛИ ЭтоНовый() Тогда
		
		Если Вопрос(НСтр("ru='Автоматически ';uk='Автоматично '") + Действие +НСтр("ru=' документ можно только после его записи. Записать?';uk=' документ можна тільки після його запису. Записати?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаписатьВФорме( РежимЗаписиДокумента.Запись );
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции  


Процедура РаботникиОрганизацииДатаСПриИзменении(Элемент)
	СтрокаТЧ=ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
//	Если СтрокаТЧ.ПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный Тогда
		РассчитатьКвоДнейОсновного();
//	КонецЕсли; 	
	
КонецПроцедуры

Процедура РаботникиОрганизацииДатаПоПриИзменении(Элемент)
	СтрокаТЧ=ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
//Если СтрокаТЧ.ПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный Тогда
		РассчитатьКвоДнейОсновного();
//	КонецЕсли; 	
	
КонецПроцедуры

Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "ВидОтпуска");
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		мТекущийСотрудник = Неопределено;
		мТекущийВидОтпуска = Неопределено;
		Возврат;
	КонецЕсли;
	
	
	
	// запомним текущего сотрудника
	мТекущийСотрудник = ТекущаяСтрока.Сотрудник;
	мТекущийВидОтпуска = ТекущаяСтрока.ВидОтпуска;

	ЭлементыФормы.ИспользованиеЕжегодногоОтпуска.ОтборСтрок.Сотрудник.Значение = мТекущийСотрудник;
	ЭлементыФормы.ИспользованиеЕжегодногоОтпуска.ОтборСтрок.ВидОтпуска.Значение = мТекущийВидОтпуска;
	
	
КонецПроцедуры

Процедура РассчитатьКвоДнейОсновного()
	СтрокаТЧ=ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаОкончания) Тогда
		СтрокаТЧ.КвоДней=0;
		Возврат;
	КонецЕсли;
	СтрокаТЧ.КвоДней=ОпределитьКвоДнейДляОтпуска(СтрокаТЧ.ДатаНачала,СтрокаТЧ.ДатаОкончания, СтрокаТЧ.ВидОтпуска);
КонецПроцедуры

Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	Сотрудник = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
	ВидОтпуска = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.ВидОтпуска;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Сотрудник", Сотрудник);
	СтруктураПоиска.Вставить("ВидОтпуска", ВидОтпуска);
	МассивСтрок = РаботникиОрганизации.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество()=1 Тогда
		МассивСтрокИспользованиеЕжегодногоОтпуска = ИспользованиеЕжегодногоОтпуска.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТабличнойЧасти Из МассивСтрокИспользованиеЕжегодногоОтпуска Цикл
			ИспользованиеЕжегодногоОтпуска.Удалить(СтрокаТабличнойЧасти);
		КонецЦикла;
	КонецЕсли
КонецПроцедуры

//Заполняем документ, данными с документа основания
Процедура ДокументОснованиеПриИзменении(Элемент)
	ЗаполнитьНаОснованииКадровогоДокумента();	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииПереключитьОтборСписка(Кнопка)
	
	мОтборПоСотруднику = Не мОтборПоСотруднику;
	СохранитьЗначение("ОтборСпискаНачислениеЗП",мОтборПоСотруднику);
	УстановитьОтборСписка();
	
КонецПроцедуры

//ПРОЦЕДУРЫ РАСЧЕТА
Процедура КоманднаяПанельИспользованиеЕжегодногоОтпускаЗаполнить(Кнопка)
	
	ЗаписатьДокументОтменивПроведение();
	
	Если ИспользованиеЕжегодногоОтпуска.Количество() > 0 Тогда
		Если Вопрос(НСтр("ru='Необходимо очистить табличную часть ""Использование ежегодных отпусков"", Продожить?';uk='Необхідно очистити табличну частину ""Використання щорічних відпусток"", Продовжити?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		ИспользованиеЕжегодногоОтпуска.Очистить();
	КонецЕсли;
	
	РасчитатьОстаткиЗаВсеПериоды(РасчитыватьОстаткиЗаВсеГода);
	
КонецПроцедуры

Процедура ИспользованиеЕжегодногоОтпускаВидОтпускаНачалоВыбора(Элемент, СтандартнаяОбработка)
		Если ВидОперации = Перечисления.ВидыОперацийОтпускаОрганизаций.Отпуск Тогда
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = Справочники.ВидыОтпусков.ПолучитьФормуВыбора(,Элемент);
		ФормаВыбора.Отбор.ВедетсяУчетОстатков.Использование = Истина;	
		ФормаВыбора.Отбор.ВедетсяУчетОстатков.Значение = Истина;
		ФормаВыбора.Отбор.ВедетсяУчетОстатков.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.Открыть();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОтпускаОрганизаций.КомпенсацияОтпуска Тогда
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = Справочники.ВидыОтпусков.ПолучитьФормуВыбора(,Элемент);
		ФормаВыбора.Отбор.ОтпускНеКомпенсируется.Использование = Истина;
		ФормаВыбора.Отбор.ОтпускНеКомпенсируется.ВидСравнения = ВидСравнения.НеРавно;
		ФормаВыбора.Отбор.ОтпускНеКомпенсируется.Значение = Истина;
		ФормаВыбора.Открыть();
		
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ИспользованиеЕжегодногоОтпускаВидОтпускаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элемент.Значение = ВыбранноеЗначение;	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	СохранитьЗначение("РасчитыватьОстаткиЗаВсеГода",РасчитыватьОстаткиЗаВсеГода);
	СохранитьЗначение("КоличествоЛет",КоличествоЛет);
КонецПроцедуры

Процедура РасчитыватьОстаткиЗаВсеГодаПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мНастройкаПериода = Новый НастройкаПериода;

мОтборПоСотруднику = ВосстановитьЗначение("ОтборСпискаНачислениеЗП");
Если мОтборПоСотруднику = Неопределено Тогда
	 мОтборПоСотруднику = Ложь;
 КонецЕсли;	
 
мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
мСинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]							= Ложь;
мСинхронизируемыеТабличныеЧасти["ИспользованиеЕжегодногоОтпуска"]				= Ложь;
