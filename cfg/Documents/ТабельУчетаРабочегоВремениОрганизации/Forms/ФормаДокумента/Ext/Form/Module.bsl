////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем СоответствиеРасчетаИтоговДней;
Перем СоответствиеРасчетаИтоговЧасов;

Перем КлассификаторРабота;
Перем КлассификаторРаботаВечерниеЧасы;
Перем КлассификаторРаботаНочныеЧасы;

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

//  Соответствие символа обозначения времени и ссылки на классификатор
//  использования рабочего времени
Перем мБуквенныеОбозначения;

// Массив строк "Первый", "Второй", "Третий" - приставки элементов табличной части документа
Перем МассивПриставок;

// Перечисление.СпособВводаДанных.ПоДням необходима для сравнения и присвоения значений переменных
Перем СпособВводаДанныхПоДням;

// Пустая ссылка на справочник Классификатор использования рабочего времени
Перем мПустаяСсылкаКлассификатора;

// Ссылка на пустое значение справочника "СотрудникиОрганизации" соответственно
Перем  ПустойСотрудникОрганизации;

// количество секунд в 14 днях, используется для получения 15 числа месяца
Перем ЧетырнадцатьДней;

// Количество секунд в 15 днях, используется для получения 16 числа месяца
Перем ПятнадцатьДней;

// Соответствие используется для заполнения табличной части в целом за период
Перем СоответствиеДляПоискаСотрудника;


// Список ячеек, при активачии которых можно определить строку таблицы ОтработанноеВремяВЦеломЗаПериод
Перем СписокИменЯчеекДляОпределенияСтроки;

// Список соответствий 1 - пн, 2 - вт,.... 7 - вс
Перем ДниНедели;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

Перем СоответствиеСотрудникГрафик;
Перем СоответствиеГрафикНорма;

Перем ПредыдущаяДатаНачалаПериода;

Перем ПредыдущаяДатаОкончанияПериода;


Перем ТекстМакета;
Перем ОтображатьСправкуФормы;
Перем ОтображатьКлассификатор;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДИНАМИЧЕСКОЙ СПРАВКОЙ

Процедура ПереключитьВидимостьСправкиФормы()
	
	ОтображатьСправкуФормы = Не ОтображатьСправкуФормы;
	УстановитьВидимостьСправкиФормы();
	
КонецПроцедуры

Процедура ПодготовитьСправкуФормы()
	
	ЗаполнятьОтработанноеВремя = ?(ОтработанноеВремя.Количество() = 0, "block", "none");
	
	ЦветФонаСправки		= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветФона());
	ЦветСсылкиСправки	= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки());
	
	ЭлементыФормы.ПанельСправкиФормы.ЦветРамки			= РаботаСДиалогами.ВстроеннаяСправка_ЦветРамки();
	ЭлементыФормы.НадписьЗакрытьСправкуФормы.ЦветФона	= РаботаСДиалогами.ВстроеннаяСправка_ЦветФона();
	ЭлементыФормы.НадписьЗакрытьСправкуФормы.ЦветТекста	= РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки();
	
	Если НЕ ОтображатьКлассификатор Тогда
	
		ТекстМакетаВстроеннойСправки =
		"<HTML>
		|	<HEAD>
		|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогами.ВстроеннаяСправка_СтилиДокумента() + "
		|	</HEAD>
		|
		|	<BODY aLink="+ЦветСсылкиСправки+" vLink="+ЦветСсылкиСправки+" link="+ЦветСсылкиСправки+" bgColor="+ЦветФонаСправки+" scroll=auto><FONT face=""MS Sans Serif"" size=1>
		|		<IMG src="+РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы, ЭлементыФормы.ВстроеннаяСправка)+">
		|		<DIV><A id=Команда href=""1C:ОткрытьКлассификатор"">Показать классификатор видов времени</A></DIV>
		|		<DIV>В Табель учета рабочего времени можно вводить данные подробно - по дням, или сводно - за весь месяц. В этом документе данные вводятся <P id=СпособВводаДанных style=""DISPLAY:inline"">"+ПолучитьПредставлениеСпособаВводаДанных()+"</P>. Вы можете <A id=Команда href=""1C:СменитьСпособВводаДанных"">изменить способ ввода данных</A>.</DIV>
		|		<DIV>Рабочее время вводится за определенный месяц (в этом документе - <A id=АктивизироватьЭУ href=""1C:ПериодРегистрации""><P id=ПериодРегистрации style=""DISPLAY:inline"">"+ПолучитьПредставлениеПериодаРегистрации()+"</P></A>), при этом вы можете ввести данные как за все дни месяца, так и за первую или вторую его половину или за произвольный период.</DIV>
		|		<DIV id=ОтработанноеВремя style=""DISPLAY:"+ЗаполнятьОтработанноеВремя+""">Этот документ еще не заполнен. Пользуйтесь командой ""Заполнить"" для заполнения документа списком сотрудников. Для того, чтобы ограничиться сотрудниками определенного подразделения, <A id=АктивизироватьЭУ href=""1C:ПодразделениеОрганизации"">выберите подразделение</A>, после чего <A id=Команда href=""1C:ЗаполнитьСписокСотрудников"">заполните список сотрудников.</A></DIV>
		|		<DIV>При редактировании данных вы можете просто вводить число отработанных часов, вводить буквенное обозначение использования рабочего времени (Р - работа, ТН - больничный и т.д., <A id=Команда href=""1C:ОткрытьКлассификатор"">показать полный классификатор</A>). Если в один день необходимо ввести несколько видов использования рабочего времени, вы можете ввести несколько буквенных обозначений с отработанными часамии, например: ""Р-6, РН-2"" и т.п.</DIV>
		|	</FONT></BODY>
		|</HTML>";
	Иначе
		ТекстМакетаВстроеннойСправки =
		"<HTML>
		|	<HEAD>
		|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогами.ВстроеннаяСправка_СтилиДокумента() + "
		|	</HEAD>
		|
		|	<BODY aLink="+ЦветСсылкиСправки+" vLink="+ЦветСсылкиСправки+" link="+ЦветСсылкиСправки+" bgColor="+ЦветФонаСправки+" scroll=auto><FONT face=""MS Sans Serif"" size=1>
		|		<IMG src="+РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы, ЭлементыФормы.ВстроеннаяСправка)+">
		|		<DIV><A id=Команда href=""1C:ЗакрытьКлассификатор"">Показать справку формы</A></DIV>
		|		<DIV>Условные обозначения видов времени в табеле:</DIV>
		|		<DIV>
		|";
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КлассификаторИспользованияРабочегоВремени.Предопределенный,
		               |	КлассификаторИспользованияРабочегоВремени.БуквенныйКод,
		               |	КлассификаторИспользованияРабочегоВремени.ЦифровойКод,
		               |	КлассификаторИспользованияРабочегоВремени.ПолноеНаименование
		               |ИЗ
		               |	Справочник.КлассификаторИспользованияРабочегоВремени КАК КлассификаторИспользованияРабочегоВремени
					   |ГДЕ
		               |	КлассификаторИспользованияРабочегоВремени.ЦифровойКод <> &ПустаяСтрока
					   |УПОРЯДОЧИТЬ ПО
		               |	КлассификаторИспользованияРабочегоВремени.ЦифровойКод";
		Запрос.УстановитьПараметр("ПустаяСтрока","");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстМакетаВстроеннойСправки = ТекстМакетаВстроеннойСправки +"
			|<BR> <B>"+Выборка.БуквенныйКод+"</B>"+Символы.Таб+Выборка.ПолноеНаименование;
		КонецЦикла;	
		
		ТекстМакетаВстроеннойСправки = ТекстМакетаВстроеннойСправки +"
		|	</FONT></BODY>
		|</HTML>";
	КонецЕсли;	
	
	ЭлементыФормы.ВстроеннаяСправка.УстановитьТекст(ТекстМакетаВстроеннойСправки);
	
КонецПроцедуры

Процедура ОбновитьСправкуФормы(ПолеДанных = Неопределено)
	
	ДокHTML = ЭлементыФормы.ВстроеннаяСправка.Документ;
	
	Если НЕ ОтображатьКлассификатор Тогда
		Если ПолеДанных = Неопределено ИЛИ ПолеДанных = "ДокументОбъект.СпособВводаДанных" Тогда
			ДокHTML.getElementById("СпособВводаДанных").innerText	= ПолучитьПредставлениеСпособаВводаДанных();
		КонецЕсли;
		
		Если ПолеДанных = Неопределено ИЛИ ПолеДанных = "ДокументОбъект.ПериодРегистрации" Тогда
			ДокHTML.getElementById("ПериодРегистрации").innerText	= ПолучитьПредставлениеПериодаРегистрации();
		КонецЕсли;
		
		Если ПолеДанных = Неопределено ИЛИ ПолеДанных = "ОтработанноеВремя" Тогда
			РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ОтработанноеВремя", ОтработанноеВремя.Количество() = 0, "block");
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры // ПоказатьСправкуФормы()

Процедура УстановитьВидимостьСправкиФормы(ОбновитьСправку = Истина)
	
	РаботаСДиалогами.ИзменитьВидимостьПанелиПоГоризонтали(ЭтаФорма, ОтображатьСправкуФормы, "ОсновнаяПанельДокумента", "СправкиФормы");
	
	ЭлементыФормы.КоманднаяПанельСправкиФормы.Кнопки.ПереключениеСправкиФормы.Пометка = ОтображатьСправкуФормы;
	
	Если ОтображатьСправкуФормы Тогда
		ПодключитьОбработчикИзмененияДанных("Организация",						"ОбновитьСправкуФормы");
		ПодключитьОбработчикИзмененияДанных("СпособВводаДанных",				"ОбновитьСправкуФормы");
		ПодключитьОбработчикИзмененияДанных("ПериодРегистрации",				"ОбновитьСправкуФормы");
		Если ОбновитьСправку Тогда
			ОбновитьСправкуФормы();
		КонецЕсли;
		
	Иначе
		ОтключитьОбработчикИзмененияДанных("Организация");
		ОтключитьОбработчикИзмененияДанных("СпособВводаДанных");
		ОтключитьОбработчикИзмененияДанных("ПериодРегистрации");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредставлениеСпособаВводаДанных()
	
	Если  СпособВводаДанных = СпособВводаДанныхПоДням Тогда
		Возврат НСтр("ru='по дням';uk='по днях'");
	Иначе
		Возврат "сводно";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПредставлениеПериодаРегистрации()
	
	МесяцСтрокой = Формат(ПериодРегистрации, "ДФ=ММММ");
	Если ПустаяСтрока(МесяцСтрокой) Тогда
		Возврат НСтр("ru='месяц не выбран';uk='місяць не вибраний'");
	Иначе
		Возврат НСтр("ru='за ';uk='по'")+МесяцСтрокой;
	КонецЕсли;
	
КонецФункции

Процедура ВыполнитьКомандуФормы(Команда, ТекущееЗначение = "") Экспорт
	
	Если Команда = "СменитьСпособВводаДанных" Тогда
		Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
			СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод;
		Иначе
			СпособВводаДанных = СпособВводаДанныхПоДням;
		КонецЕсли;
		ВводДанныхПоДнямПриИзменении(ЭлементыФормы.СпособВводаДанных);
	ИначеЕсли Команда = "ЗаполнитьСписокСотрудников" Тогда
		Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
			КоманднаяПанельОтработанноеВремяДействиеЗаполнить(ЭлементыФормы.КоманднаяПанельОтработанноеВремя.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнить);
		Иначе
			КоманднаяПанельОтработанноеВремяВЦеломЗаПериодДействиеЗаполнить(ЭлементыФормы.КоманднаяПанельОтработанноеВремяВЦеломЗаПериод.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнить);
		КонецЕсли;
	ИначеЕсли Команда = "ОткрытьКлассификатор" Тогда
		ОтображатьКлассификатор = Истина;
		ПодготовитьСправкуФормы();
	ИначеЕсли Команда = "ЗакрытьКлассификатор" Тогда
		ОтображатьКлассификатор = Ложь;
		ПодготовитьСправкуФормы();	
	КонецЕсли;
	
КонецПроцедуры

Процедура ВстроеннаяСправкаonclick(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnClick(Элемент, pEvtObj, ЭтаФорма);
	
КонецПроцедуры

Процедура ВстроеннаяСправкаonmouseout(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnMouseOut(Элемент, pEvtObj);
	
КонецПроцедуры

Процедура ВстроеннаяСправкаonmouseover(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnMouseOver(Элемент, pEvtObj);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОтработанноеВремя,ЭлементыФормы.КоманднаяПанельОтработанноеВремя.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод,ЭлементыФормы.КоманднаяПанельОтработанноеВремяВЦеломЗаПериод.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

// Функция возвращает норму времени в часах на указанный день по указанному сотруднику
Функция ПолучитьНормуВремениПоДню(Сотрудник, НомерДня)
	
	ГрафикСотрудника = СоответствиеСотрудникГрафик.Получить(Сотрудник);
	Если ГрафикСотрудника = Неопределено Тогда
		// Графика по этому сотруднику еще нет, нужно получить
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
		
		ТекстЗапроса = "ВЫБРАТЬ
			|	ДатаТабеля
			|	
			|ПОМЕСТИТЬ ВТДатыТабеля 
			|	ИЗ (
			|	ВЫБРАТЬ
			|	ДАТАВРЕМЯ(" + Формат(Год(ПериодРегистрации), "ЧГ=4") + ", " + Месяц(ПериодРегистрации) + " , 1) КАК ДатаТабеля
			|	";           
			Для ИндексДня = 2 По День(КонецМесяца(ПериодРегистрации)) Цикл
				ТекстЗапроса = ТекстЗапроса + 
				"ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ
				|  ДАТАВРЕМЯ(" + Формат(Год(ПериодРегистрации), "ЧГ=4")+ ", " + Месяц(ПериодРегистрации) + " ," + ИндексДня + ")
				|	";
			КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + ") КАК ДатыТабеля";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизаций.Период,
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.ГрафикРаботы
		|ПОМЕСТИТЬ ВТРаботникиОрганизаций
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ	РаботникиОрганизаций.Сотрудник = &Сотрудник
		|	И РаботникиОрганизаций.Период > &ПериодРегистрации
		|	И РаботникиОрганизаций.Период <= КонецПериода(&ПериодРегистрации, МЕСЯЦ)
		|	И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизацийСрезПоследних.Период,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник,
		|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ПериодРегистрации, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних
		|ГДЕ
		|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)";
        Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ 
		|   ВТДатыТабеля.ДатаТабеля,
		|   ВТРаботникиОрганизаций.Сотрудник,
		|   МАКСИМУМ(ВТРаботникиОрганизаций.Период) КАК Период,
		|   ВТРаботникиОрганизаций.ГрафикРаботы
		|ПОМЕСТИТЬ ВТДатыСотрудникГрафик   
		|ИЗ 
		|	ВТДатыТабеля
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТРаботникиОрганизаций 
		|ПО 
		|	ВТРаботникиОрганизаций.Период < ВТДатыТабеля.ДатаТабеля
		|СГРУППИРОВАТЬ ПО
		|	ДатаТабеля, Сотрудник, ГрафикРаботы";
		Запрос.Выполнить();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ 
		|	ГрафикиРаботы.ГрафикРаботы,
		|	ГрафикиРаботы.Дата,
		|	ГрафикиРаботы.ОсновноеЗначение
		|ПОМЕСТИТЬ ВТГрафикиРаботы
		|ИЗ
		|	ВТРаботникиОрганизаций КАК РаботникиОрганизаций
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|ПО
		|	(ГрафикиРаботы.ГрафикРаботы = РаботникиОрганизаций.ГрафикРаботы
		|	ИЛИ ГрафикиРаботы.ГрафикРаботы = РаботникиОрганизаций.Сотрудник)
		|	И ГрафикиРаботы.Месяц = &ПериодРегистрации
		|	И ГрафикиРаботы.План
		|	И ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)";
		Запрос.Выполнить();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|   ЕСТЬNULL(ИндивидуальныйГрафик.ГрафикРаботы, ОбщийГрафик.ГрафикРаботы) КАК ГрафикРаботы,
		|   ДЕНЬ(ДатыТабеля.ДатаТабеля) КАК НомерДня,
		|   ЕСТЬNULL(ИндивидуальныйГрафик.ОсновноеЗначение, ОбщийГрафик.ОсновноеЗначение) КАК НормаЧасов
		|   
		|ИЗ 
		|	ВТДатыСотрудникГрафик КАК ДатыТабеля
		| 
		| ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ИндивидуальныйГрафик
		|ПО
		|	ИндивидуальныйГрафик.ГрафикРаботы = ДатыТабеля.Сотрудник
		|	И ИндивидуальныйГрафик.Дата = ДатыТабеля.ДатаТабеля
		|	И ИндивидуальныйГрафик.Месяц = &ПериодРегистрации
		|	И ИндивидуальныйГрафик.ВидУчетаВремени = Значение(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|	И ИндивидуальныйГрафик.План
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ОбщийГрафик
		|ПО 
		|	ОбщийГрафик.ГрафикРаботы = ДатыТабеля.ГрафикРаботы
		|	И ОбщийГрафик.Дата = ДатыТабеля.ДатаТабеля
		|	И ОбщийГрафик.Месяц = &ПериодРегистрации
		|	И ОбщийГрафик.ВидУчетаВремени = Значение(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|	И ОбщийГрафик.План
		|	УПОРЯДОЧИТЬ ПО ГрафикРаботы, НомерДня, НормаЧасов";
		РезультатЗапроса = Запрос.Выполнить();
		
		МассивНормыДней = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("НормаЧасов");
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ГрафикРаботы = Выборка.ГрафикРаботы;
		
		СоответствиеСотрудникГрафик.Вставить(Сотрудник, ГрафикРаботы);
		СоответствиеГрафикНорма.Вставить(ГрафикРаботы, МассивНормыДней);
		
		Возврат МассивНормыДней[НомерДня-1];
	Иначе
		МассивДней = СоответствиеГрафикНорма.Получить(ГрафикСотрудника);
		Возврат МассивДней[НомерДня-1];
	КонецЕсли;
		
	
КонецФункции // ПолучитьНормуВремениПоДню()


// Процедура проверяет введенное в ячейку значение на присутствие в
// Справочнике КлассификаторИспользованияРабочегоВремени, и нормирует значение
Функция ОбработкаВводаДанныхВЯчейку(Элемент, Текст, Значение, СтандартнаяОбработка, НомерДня)
	Результат = ""; 
	НормаЧасов = ПолучитьНормуВремениПоДню(ЭлементыФормы.ОтработанноеВремя.ТекущаяСтрока.Сотрудник, Число(НомерДня));
	Если НормироватьТекст(Текст, Результат, ,НормаЧасов) Тогда
		Элемент.Значение = Результат;
	Иначе
		Значение = Новый СписокЗначений;
		СтандартнаяОбработка = Ложь;
		Возврат Ложь;
	КонецЕсли;
	
	Для ИндексМассиваПриставок = 0 По 2 Цикл
		ЭлементыФормы.ОтработанноеВремя.ТекущаяСтрока[МассивПриставок[ИндексМассиваПриставок]+"ВидВремени"+НомерДня] = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();
		ЭлементыФормы.ОтработанноеВремя.ТекущаяСтрока[МассивПриставок[ИндексМассиваПриставок]+"Часов"+НомерДня] = 0;
	КонецЦикла;
	
	СписокВремени = "";
	ИндексМассиваПриставок = 0;
	ПередаваемоеЗначениеЯчейки = Элемент.Значение;
	ПередаваемоеЗначениеЯчейки = Лев(ПередаваемоеЗначениеЯчейки, СтрДлина(ПередаваемоеЗначениеЯчейки)-1);
	ПолучитьВидВремениИКоличествоЧасов(ПередаваемоеЗначениеЯчейки, СписокВремени);
	Для Каждого ЭлементСписка Из СписокВремени Цикл
		Если ИндексМассиваПриставок > 2 Тогда
			Предупреждение(НСтр("ru='В ячейку можно записать не больше чем 3 вида времени';uk='У комірку можна записати не більше ніж 3 види часу'"));
			Прервать;
		Иначе
			ЭлементыФормы.ОтработанноеВремя.ТекущаяСтрока[МассивПриставок[ИндексМассиваПриставок]+"ВидВремени"+НомерДня] = ЭлементСписка.Ключ;
			ЭлементыФормы.ОтработанноеВремя.ТекущаяСтрока[МассивПриставок[ИндексМассиваПриставок]+"Часов"+НомерДня] = Число(ЭлементСписка.Значение);
			ИндексМассиваПриставок = ИндексМассиваПриставок + 1;
			
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции // ОбработкаВводаДанныхВЯчейку()

// По тексту из ячейки (текст) возвращает соответствие: ВидВремени (классификатор) - Количество часов
//
Функция ПолучитьВидВремениИКоличествоЧасов(Текст , Результат) Экспорт
	Результат = Новый Соответствие;
	Если ПустаяСтрока(Текст) Тогда
		Возврат Истина;
	КонецЕсли;
	
	РазделительВГруппе = " ";
	РазделительГрупп = Символы.ПС;
	
	ПодСтроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, РазделительГрупп);
	Для ИндексМассива = 0 По ПодСтроки.Количество() - 1 Цикл
		ВидВремениИКоличество = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПодСтроки[ИндексМассива], РазделительВГруппе);
		Если ВидВремениИКоличество.Количество() = 2 Тогда
			Код = мБуквенныеОбозначения[ВидВремениИКоличество[0]];
			Количество = Число(ВидВремениИКоличество[1]);
			Результат.Вставить(Код, Количество);
		КонецЕсли;
		
	КонецЦикла;
КонецФункции // ПолучитьВидВремениИКоличествоЧасов()

// Функция проверяет введенные в таблице данные на правильность, а также приводит их к нормальному виду
Функция НормироватьТекст(Текст, Результат, НеполныйФормат = Истина, НормаЧасов = 8) Экспорт
	Результат = "";
	Если ПустаяСтрока(Текст) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Разделители = Новый Массив;
	Разделители.Добавить(Символы.ПС);
	Разделители.Добавить(" ");
	//Разделители.Добавить(Символы.ПС+Символы.ВК);
	//Разделители.Добавить(Символы.ВК+Символы.ПС);
	//Разделители.Добавить(Символы.ВК);
	Разделители.Добавить("-");
	Разделители.Добавить(";");
	Разделители.Добавить("/");
	Разделители.Добавить(",");
	Разделители.Добавить(":");
	
	//РазделительГрупп = "  ";
	РазделительВГруппе = " ";
	РазделительГрупп = Символы.ПС;
	
	Для Каждого Разделитель из Разделители Цикл
		ПодСтроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, Разделитель);
		Если ПодСтроки.Количество() > 1 Тогда
			БылКод = Ложь;
			Для Каждого ПодСтрока Из Подстроки Цикл
				Код = мБуквенныеОбозначения[СокрЛП(ВРег(ПодСтрока))];
				АнализируемаяСтрока = СпецСокрЛП(ПодСтрока, Разделители);
				Если Код <> НеОпределено Тогда
					Если БылКод Тогда
						Возврат Ложь;
					КонецЕсли;
					Результат = Результат + ВРег(ПодСтрока);
					БылКод = Истина;
				ИначеЕсли ЭтоЧисло(АнализируемаяСтрока) и БылКод Тогда
					
					Результат = Результат + РазделительВГруппе + ?(АнализируемаяСтрока = "0", Строка(НормаЧасов), АнализируемаяСтрока) + РазделительГрупп;
					БылКод = Ложь;
				Иначе
					ПодРезультат = "";
					Если НормироватьТекст(ПодСтрока, ПодРезультат, Ложь) Тогда
						Результат = Результат + ПодРезультат;
					Иначе
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПустаяСтрока(Результат) Тогда
		Если НеполныйФормат Тогда
			Код = мБуквенныеОбозначения[СокрЛП(ВРег(Текст))];
			Если Код <> НеОпределено Тогда
				Результат = СокрЛП(ВРег(Текст)) + РазделительВГруппе + Строка(НормаЧасов) + РазделительГрупп;
				
				Возврат Истина;
			ИначеЕсли ЭтоЧисло(СпецСокрЛП(Текст, Разделители)) Тогда
				Результат = "Р" + РазделительВГруппе + СпецСокрЛП(Текст, Разделители) + РазделительГрупп;
				
				Возврат Истина;
			ИначеЕсли СокрЛП(Текст) = "0" Тогда
				
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		
		Возврат Истина;
	КонецЕсли;
КонецФункции

// Функция, удаляет символы до разделителя слева и справа после разделителя
Функция СпецСокрЛП(Строка, Разделители)
	НоваяСтрока = Строка;
	// удалим лишние символы слева
	Пока Истина Цикл
		Символ = Лев(НоваяСтрока, 1);
		ЭтоРазделитель = Ложь;
		Для Каждого Разделитель Из Разделители Цикл
			Если Символ = Разделитель Тогда
				ЭтоРазделитель = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭтоРазделитель Тогда
			НоваяСтрока = Сред(НоваяСтрока, 2);
			Если ПустаяСтрока(НоваяСтрока) Тогда
				Прервать;
			КонецЕсли;    
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;        
	// удалим лишние символы справа
	Пока Истина Цикл
		Символ = Прав(НоваяСтрока, 1);
		ЭтоРазделитель = Ложь;
		Для Каждого Разделитель Из Разделители Цикл
			Если Символ = Разделитель Тогда
				ЭтоРазделитель = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭтоРазделитель Тогда
			НоваяСтрока = Лев(НоваяСтрока, СтрДлина(НоваяСтрока) - 1);
			Если ПустаяСтрока(НоваяСтрока) Тогда
				Прервать;
			КонецЕсли;    
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НоваяСтрока;
КонецФункции

// Функция определяет, возможно ли переданную строку перевести в число
// Возвращает Истина, если Возможно, иначе Ложь
Функция ЭтоЧисло(Строка)
	Попытка
		Число = Число(Строка);
		Если Число = 0 Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Процедура заполняет таблицу Отработанное время в целом за период
// по данным отаблицы отработанное время
//
Процедура ЗаполнитьТаблицуОтработанноеВремяВЦеломЗаПериод()
	ОтработанноеВремяВЦеломЗаПериод.Очистить();
	МаксимальныйНомерЯчейки = 0;
	СоответствиеВидаВремениИЯчейки = Новый Соответствие;
	Для Каждого СтрокаОтработанногоВремени Из ОтработанноеВремя Цикл
		СтрокаТаблицы = ОтработанноеВремяВЦеломЗаПериод.Добавить();
		СтрокаТаблицы.Сотрудник = СтрокаОтработанногоВремени.Сотрудник;
		СтрокаТаблицы.Назначение = СтрокаОтработанногоВремени.Назначение;
		СоответствиеВидаВремениИЯчейки.Очистить();
		МаксимальныйНомерЯчейки = 0;
		Для ИндексЯчейки = 1 По 31 Цикл
			Для Каждого ТекущаяПриставка Из МассивПриставок Цикл
				Часов = СтрокаОтработанногоВремени[ТекущаяПриставка+"Часов"+ИндексЯчейки];
				Если Часов > 0 Тогда
					ВидВремени = СтрокаОтработанногоВремени[ТекущаяПриставка+"ВидВремени"+ИндексЯчейки];
					НомерЯчейки = СоответствиеВидаВремениИЯчейки.Получить(ВидВремени);
					Если НомерЯчейки = Неопределено Тогда
						МаксимальныйНомерЯчейки = МаксимальныйНомерЯчейки + 1;
						Если МаксимальныйНомерЯчейки > 6 Тогда
							Продолжить;
						КонецЕсли;
						СоответствиеВидаВремениИЯчейки.Вставить(ВидВремени, Строка(МаксимальныйНомерЯчейки));
						НомерЯчейки = МаксимальныйНомерЯчейки;
						СтрокаТаблицы["ВидВремени" + НомерЯчейки] = ВидВремени;
					КонецЕсли;
					
					СтрокаТаблицы["Часов" + НомерЯчейки] = СтрокаТаблицы["Часов" + НомерЯчейки] + Часов;
					СтрокаТаблицы["Дней" + НомерЯчейки] = СтрокаТаблицы["Дней" + НомерЯчейки] + 1;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура надписывает колонки т.п. ОтработанноеВремя в зависимости от способа ввода данных
// и количества дней в месяце
Процедура ОформитьЗаголовкиДнейМесяца()
	
	// Устанавливаем заголовки дней месяца
	БледноКрасныйЦвет = Новый Цвет(255, 176, 176);
	СерыйЦвет = Новый Цвет(234, 229, 216);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецМесяца",КонецМесяца(ПериодРегистрации));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ВидДня,
	|	ДЕНЬНЕДЕЛИ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК ДеньНедели
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоМесяца И &КонецМесяца
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ДеньНеделиМесяца = ДеньНедели(НачалоМесяца(ПериодРегистрации));
		Для ДеньМесяца = 1 по День(КонецМесяца(ПериодРегистрации)) Цикл
			
			Колонка = ЭлементыФормы.ОтработанноеВремя.Колонки["День"+Строка(ДеньМесяца)];
			
			Колонка.ТекстШапки = Строка(ДеньМесяца) + Символы.ПС + ДниНедели[ДеньНеделиМесяца];
			Если ДеньНеделиМесяца = 6 Или ДеньНеделиМесяца = 7 Тогда
				Колонка.ЦветТекстаШапки = ЦветаСтиля.ЦветОсобогоТекста;
				Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
			Иначе
				Колонка.ЦветТекстаШапки = Новый Цвет();	
				Колонка.ШрифтШапки = Новый Шрифт();
			КонецЕсли;
			
			ДеньНеделиМесяца = (ДеньНеделиМесяца%7)+1;
		КонецЦикла;
	Иначе
		Данные = Результат.Выгрузить();
		ЦветВыходного 		   = Новый Цвет(153, 51,   0); // Темно-красный
		ЦветПредпразничногоДня = Новый Цвет(  0,  0, 186); // Темно-синий
		Для ДеньМесяца = 1 по День(КонецМесяца(ПериодРегистрации)) Цикл
			
			Колонка = ЭлементыФормы.ОтработанноеВремя.Колонки["День"+Строка(ДеньМесяца)];
			
			Колонка.ТекстШапки = Строка(ДеньМесяца) + Символы.ПС + ДниНедели[Данные[ДеньМесяца - 1].ДеньНедели];
			
			ВидДня = Данные[ДеньМесяца - 1].ВидДня;
			Если ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда
				Колонка.ЦветТекстаШапки = ЦветВыходного;
				Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
			ИначеЕсли ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье Тогда
				Колонка.ЦветТекстаШапки = ЦветВыходного;
				Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
			ИначеЕсли ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота Тогда
				Колонка.ЦветТекстаШапки = ЦветВыходного;
				Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
			ИначеЕсли ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
				Колонка.ЦветТекстаШапки = ЦветПредпразничногоДня;
				Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
			Иначе
				Колонка.ЦветТекстаШапки = Новый Цвет();	
				Колонка.ШрифтШапки = Новый Шрифт();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОформитьЗаголовкиДнейМесяца()

// процедура устанавливает видимсоть колонок табличной части "ОтработанноеВремя"
//
Процедура УстановитьВидимостьКолонокТаблицыОтработанноеВремя()
	
	ДеньНачалаПериода = День(ДатаНачалаПериода);
	ДеньОкончанияПериода = День(ДатаОкончанияПериода);
	ИндексНачалаВидимыхКолонок = ДеньНачалаПериода+2;
	ИндексКонцаВидимыхКолонок = ДеньОкончанияПериода+2;
	Для ИндексКолонки = 1 По 31 Цикл
		ЭлементыФормы.ОтработанноеВремя.Колонки["День" + Строка(ИндексКолонки)].Видимость = 
		((ИндексКолонки <= ДеньОкончанияПериода) И (ИндексКолонки >= ДеньНачалаПериода));
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает видимость табельного номера и количество фиксируемых колонок
//
Процедура УстановитьВидимостьТабельногоНомера()
	
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	// Установим фиксацию сотрудника с табельным номером если он выводится
	ВидимостьТабельногоНомера = ЭлементыФормы.ОтработанноеВремя.Колонки.ТабельныйНомерСтрока.Видимость;
	
	Если ВидимостьТабельногоНомера Тогда
		ЭлементыФормы.ОтработанноеВремя.ФиксацияСлева = 3;
	Иначе
		ЭлементыФормы.ОтработанноеВремя.ФиксацияСлева = 2;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает текст заголовков переключателей, в зависимости
// от месяца за который формируется табель
//
Процедура УстановитьЗаголовкиПереключателейПериодовЗаполнения()
	
	ЭлементыФормы.ПериодЗаполнения.Заголовок = НСтр("ru='Все время (';uk='Весь час ('") + Формат(ПериодРегистрации, "ДФ=ММММ")+
	" "+Формат(ПериодРегистрации, "ДФ=гггг")+ НСтр("ru=' г)';uk=' р)'");
	
	ЭлементыФормы.ПереключательПерваяПоловинаМесяца.Заголовок = НСтр("ru='Первая половина месяца (1-';uk='Перша половина місяця (1-'")
	+Формат(ПериодРегистрации+ЧетырнадцатьДней, "ДФ=""дд ММММ""")+")";
	
	ЭлементыФормы.ПереключательВтораяПоловинаМесяца.Заголовок = НСтр("ru='Вторая половина месяца (16-';uk='Друга половина місяця (16-'")
	+Формат(КонецМесяца(ПериодРегистрации), "ДФ=""дд ММММ""")+")";
	
КонецПроцедуры // УстановитьЗаголовкиПереключателейПериодовЗаполнения()

// Процедура устанавливает значения дат начала и окончания периода
//
Процедура УстановитьДатыНачалаИОкончанияПериодов()
	
	Если СпособУказанияПериода = Перечисления.ПериодНачисленияЗарплаты.ТекущийМесяц Тогда
		ДатаНачалаПериода = ПериодРегистрации;
		ДатаОкончанияПериода = КонецМесяца(ПериодРегистрации);
	ИначеЕсли СпособУказанияПериода = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца Тогда
		ДатаНачалаПериода = ПериодРегистрации;
		ДатаОкончанияПериода = ДатаНачалаПериода + ЧетырнадцатьДней
	ИначеЕсли СпособУказанияПериода = Перечисления.ПериодНачисленияЗарплаты.ВтораяПоловинаТекущегоМесяца Тогда
		ДатаНачалаПериода = ПериодРегистрации + ПятнадцатьДней;
		ДатаОкончанияПериода = КонецМесяца(ПериодРегистрации);
	ИначеЕсли СпособУказанияПериода = Перечисления.ПериодНачисленияЗарплаты.УказанныйПериод Тогда
		ДатаНачалаПериода = ПредыдущаяДатаНачалаПериода;
		ДатаОкончанияПериода = ПредыдущаяДатаОкончанияПериода;
	КонецЕсли;
	ПредыдущаяДатаНачалаПериода = ДатаНачалаПериода;
	ПредыдущаяДатаОкончанияПериода = ДатаОкончанияПериода;
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	// Справка формы
	ОтображатьСправкуФормы = ВосстановитьЗначение("ТабельУчетаРабочегоВремениОрганизацииСправкаФормы");
	Если ОтображатьСправкуФормы = Неопределено Тогда
		ОтображатьСправкуФормы = Истина;
	КонецЕсли;
	ОтображатьКлассификатор = ВосстановитьЗначение("ТабельУчетаРабочегоВремениОрганизацииОтображатьКлассификатор");
	Если ОтображатьКлассификатор = Неопределено Тогда
		ОтображатьКлассификатор = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		
		// Первоначальное заполнение документа.
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
		Если СпособВводаДанных.Пустая() Тогда
			СпособВводаДанных = ВосстановитьЗначение("СпособВводаДанныхТабеля");
			Если СпособВводаДанных.Пустая() Тогда
				СпособВводаДанных = СпособВводаДанныхПоДням;
			КонецЕсли;
		КонецЕсли;
		
		Если СпособУказанияПериода.Пустая() Тогда
			СпособУказанияПериода = Перечисления.ПериодНачисленияЗарплаты.ТекущийМесяц;
		КонецЕсли;
			
		УстановитьДатыНачалаИОкончанияПериодов();
	Иначе 
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	ПодготовитьСправкуФормы();
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Номер);
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	УстановитьЗаголовкиПереключателейПериодовЗаполнения();
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.ОтработанноеВремя.Колонки.ТабельныйНомерСтрока);
	мМассивЭУ.Добавить(ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод.Колонки.ТабельныйНомерСтрока);
	УстановитьВидимостьТабельногоНомера();
	
	// Установим доступность даты начала и окончания периода
	ЭлементыФормы.ДатаНачалаПериода.ТолькоПросмотр = СпособУказанияПериода <> Перечисления.ПериодНачисленияЗарплаты.УказанныйПериод;
	ЭлементыФормы.ДатаОкончанияПериода.ТолькоПросмотр = СпособУказанияПериода <> Перечисления.ПериодНачисленияЗарплаты.УказанныйПериод;
	
	ПредыдущаяДатаНачалаПериода = ДатаНачалаПериода;
	ПредыдущаяДатаОкончанияПериода = ДатаОкончанияПериода;
	
	УстановитьВидимостьСправкиФормы(Ложь);
	
	// Установить активный реквизит и активную страницу.
	Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
		
		УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
		ОформитьЗаголовкиДнейМесяца();
		ЭлементыФормы.ПанельОтработанноеВремя.ТекущаяСтраница = ЭлементыФормы.ПанельОтработанноеВремя.Страницы.ПоДням;
		Если Не РаботаСДиалогами.АктивизироватьРеквизитВФормеЗУП(ЭтотОбъект, ЭтаФорма) Тогда
			ТекущийЭлемент = ЭлементыФормы.ОтработанноеВремя;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ПанельОтработанноеВремя.ТекущаяСтраница = ЭлементыФормы.ПанельОтработанноеВремя.Страницы.ВЦеломЗаПериод;
		Если Не РаботаСДиалогами.АктивизироватьРеквизитВФормеЗУП(ЭтотОбъект, ЭтаФорма) Тогда
			ТекущийЭлемент = ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ЗаполнитьПостроительЗапроса" Тогда
			РезультатЗапроса = Автозаполнение(ЗначениеВыбора.ПостроительЗапроса);
			
			ОбновитьСправкуФормы("ОтработанноеВремя");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи" формы.
Процедура ПриЗаписи(Отказ)
	СохранитьЗначение("СпособВводаДанныхТабеля", СпособВводаДанных);
КонецПроцедуры

Процедура ПослеЗаписи()
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

Процедура ПриЗакрытии()
	
	СохранитьЗначение("ТабельУчетаРабочегоВремениОрганизацииСправкаФормы", ОтображатьСправкуФормы);
	СохранитьЗначение("ТабельУчетаРабочегоВремениОрганизацииОтображатьКлассификатор", ОтображатьКлассификатор);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)
	
	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)
	
	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)
	
	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура выполняет  открытие формы регистра ГрафикиРаботыПоВидамВремени
// с отбором по данному документу
Процедура ДействияФормыГрафикиРаботыПоВидамВремени(Кнопка)
	ФормаСписка = РегистрыСведений.ГрафикиРаботыПоВидамВремени.ПолучитьФормуСписка();	
	ФормаСписка.Отбор.Документ.Установить(Ссылка);
	ФормаСписка.Открыть();
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура - вызывается при нажатии на кнопку "Подбор" командной панели 1
//
Процедура КоманднаяПанельОтработанноеВремяВЦеломЗаПериодПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод, Ссылка, Ложь, Дата, Организация, 1);
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку "Заполнить по всем сотрудникам" командной панели 
// КоманднаяПанельОтработанноеВремяВЦеломЗаПериод
Процедура КоманднаяПанельОтработанноеВремяВЦеломЗаПериодДействиеЗаполнить(Кнопка)
	Если ОтработанноеВремяВЦеломЗаПериод.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличнaя часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		ОтработанноеВремяВЦеломЗаПериод.Очистить();
		
	КонецЕсли;
	
	Автозаполнение();
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Заполнить" командной панели 
// КоманднаяПанельОтработанноеВремяВЦеломЗаПериод
Процедура КоманднаяПанельОтработанноеВремяВЦеломЗаПериодПоСпискуСотрудников(Кнопка)
	Если ОтработанноеВремяВЦеломЗаПериод.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		ОтработанноеВремяВЦеломЗаПериод.Очистить();
		ОтработанноеВремя.Очистить();
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, ДатаНачалаПериода, "РаботникиОрганизаций", Организация, ПодразделениеОрганизации, Ложь,,,,ДатаНачалаПериода, Истина);
КонецПроцедуры

Процедура КоманднаяПанельОтработанноеВремяДействиеЗаполнить(Кнопка)
	
	Если Организация.Пустая() Тогда
		Предупреждение(НСтр("ru='Не указана организация, заполнить список работников невозможно!';uk='Не вказана організація, заповнити список працівників неможливо!'"));
		Возврат;
	КонецЕсли;
	
	Если ОтработанноеВремя.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличнaя часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		ОтработанноеВремя.Очистить();
		
	КонецЕсли;
	
	Автозаполнение();
	
	ОбновитьСправкуФормы("ОтработанноеВремя");
	
	Если ОтработанноеВремя.Количество() > 0 Тогда
		УстановитьВидимостьколонокТаблицыОтработанноеВремя();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Подбор" командной панели 2
//
Процедура КоманднаяПанельОтработанноеВремяПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.ОтработанноеВремя, Ссылка, Ложь, Дата, Организация, 1);
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Заполнить" командной панели 2
Процедура КоманднаяПанельОтработанноеВремяПоСпискуСотрудников(Кнопка)
	
	Если ОтработанноеВремя.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		ОтработанноеВремя.Очистить();
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, ДатаНачалаПериода, "РаботникиОрганизаций", Организация, ПодразделениеОрганизации, Ложь,,,,ДатаНачалаПериода, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура выполняет алгоритм действий при изменении реквизита СпособВводаДанных
//
// Параметры:
//  Элемент      - элемент формы, который отображает Способ ввода данных.
//
Процедура ВводДанныхПоДнямПриИзменении(Элемент)
	Если Элемент.Значение = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда 
		// Активируем вторую страницу
		ЭлементыФормы.ПанельОтработанноеВремя.ТекущаяСтраница = ЭлементыФормы.ПанельОтработанноеВремя.Страницы.ВЦеломЗаПериод;
		ЗаполнитьТаблицуОтработанноеВремяВЦеломЗаПериод();
		СпособУказанияПериода = Перечисления.ПериодНачисленияЗарплаты.ТекущийМесяц;
		ЭлементыФормы.ПереключательПерваяПоловинаМесяца.Доступность = Ложь;
		ЭлементыФормы.ПереключательВтораяПоловинаМесяца.Доступность = Ложь;
		ЭлементыФормы.ПереключательУказанныйПериод.Доступность = Ложь;
		ПериодЗаполненияПриИзменении(ЭлементыФормы.ПериодЗаполнения);
	Иначе
		// Активируем первую страницу
		ЭлементыФормы.ПанельОтработанноеВремя.ТекущаяСтраница = ЭлементыФормы.ПанельОтработанноеВремя.Страницы.ПоДням;
		ОтработанноеВремя.Загрузить(ОтработанноеВремяВЦеломЗаПериод.Выгрузить(, "Сотрудник, Назначение, ФизЛицо"));
		УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
		ОформитьЗаголовкиДнейМесяца();
		ЭлементыФормы.ПереключательПерваяПоловинаМесяца.Доступность = Истина;
		ЭлементыФормы.ПереключательВтораяПоловинаМесяца.Доступность = Истина;
		ЭлементыФормы.ПереключательУказанныйПериод.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры       

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Номер);
	
	мТекущаяДатаДокумента = Дата;
	
КонецПроцедуры // ДатаПриИзменении()

Процедура ДатаНачалаПериодаПриИзменении(Элемент)
	
	Если НачалоМесяца(ДатаНачалаПериода) = ПериодРегистрации Тогда
		ПредыдущаяДатаНачалаПериода = ДатаНачалаПериода;
		УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
	Иначе
		Предупреждение(НСтр("ru='Указанная дата (';uk='Зазначена дата ('")+Формат(ДатаНачалаПериода, "ДЛФ=Д")+НСтр("ru=') не из периода ';uk=') не з періоду '") + ЭлементыФормы.ПериодРегистрации.Значение, 10);
		ДатаНачалаПериода = ПредыдущаяДатаНачалаПериода;
		ТекущийЭлемент = Элемент;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаОкончанияПериодаПриИзменении(Элемент)
	
	Если НачалоМесяца(ДатаОкончанияПериода) = ПериодРегистрации Тогда
		ПредыдущаяДатаОкончанияПериода = ДатаОкончанияПериода;
		УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
	Иначе
		Предупреждение(НСтр("ru='Указанная дата (';uk='Зазначена дата ('")+Формат(ДатаОкончанияПериода, "ДЛФ=Д")+НСтр("ru=') не из периода ';uk=') не з періоду '") + ЭлементыФормы.ПериодРегистрации.Значение, 10);
		ДатаОкончанияПериода = ПредыдущаяДатаОкончанияПериода;
		ТекущийЭлемент = Элемент;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Номер);
	КонецЕсли;
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов
	УстановитьВидимостьТабельногоНомера();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" переключателя ПериодЗаполения
//
Процедура ПериодЗаполненияПриИзменении(Элемент)
	
	УстановитьДатыНачалаИОкончанияПериодов();
	УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
	
	// Установим доступность даты начала и окончания периода
	ЭлементыФормы.ДатаНачалаПериода.ТолькоПросмотр = СпособУказанияПериода <> Перечисления.ПериодНачисленияЗарплаты.УказанныйПериод;
	ЭлементыФормы.ДатаОкончанияПериода.ТолькоПросмотр = СпособУказанияПериода <> Перечисления.ПериодНачисленияЗарплаты.УказанныйПериод;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТА ШАПКИ ПериодРегистрации

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	УстановитьЗаголовкиПереключателейПериодовЗаполнения();
	УстановитьДатыНачалаИОкончанияПериодов();
	
	Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
		УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
		ОформитьЗаголовкиДнейМесяца();
	КонецЕсли;
	
	Если ОтработанноеВремя.Количество() > 0 ИЛИ  ОтработанноеВремяВЦеломЗаПериод.Количество() > 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос(НСтр("ru='Очистить табличные части?';uk='Очистити табличні частини?'"), Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
		    ОтработанноеВремя.Очистить();
			ОтработанноеВремяВЦеломЗаПериод.Очистить();
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
	УстановитьЗаголовкиПереключателейПериодовЗаполнения();
	УстановитьДатыНачалаИОкончанияПериодов();
	
	Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
		УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
		ОформитьЗаголовкиДнейМесяца();
	КонецЕсли;
	
	Если ОтработанноеВремя.Количество() > 0 ИЛИ  ОтработанноеВремяВЦеломЗаПериод.Количество() > 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос(НСтр("ru='Очистить табличные части?';uk='Очистити табличні частини?'"), Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
		    ОтработанноеВремя.Очистить();
			ОтработанноеВремяВЦеломЗаПериод.Очистить();
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	УстановитьЗаголовкиПереключателейПериодовЗаполнения();
	УстановитьДатыНачалаИОкончанияПериодов();
	
	Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
		УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
		ОформитьЗаголовкиДнейМесяца();
	КонецЕсли;
	
	Если ОтработанноеВремя.Количество() > 0 ИЛИ  ОтработанноеВремяВЦеломЗаПериод.Количество() > 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос(НСтр("ru='Очистить табличные части?';uk='Очистити табличні частини?'"), Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
		    ОтработанноеВремя.Очистить();
			ОтработанноеВремяВЦеломЗаПериод.Очистить();
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
	УстановитьЗаголовкиПереключателейПериодовЗаполнения();
	УстановитьДатыНачалаИОкончанияПериодов();
	
	Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
		УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
		ОформитьЗаголовкиДнейМесяца();
	КонецЕсли;
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ 
//   ОтработанноеВремяВЦеломЗаПериод


// Процедура - обработчик события ПриПолученииДанных
Процедура ОтработанноеВремяВЦеломЗаПериодПриПолученииДанных(Элемент, ОформленияСтрок)
	Элемент.ФиксацияСлева = 0 + Элемент.Колонки.НомерСтроки.Видимость
	+ Элемент.Колонки.ТабельныйНомерСтрока.Видимость
	+ Элемент.Колонки.Сотрудник.Видимость
	+ Элемент.Колонки.Назначение.Видимость;
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод, ОформленияСтрок);
	
КонецПроцедуры



// Процедура - обработчик события ОбработкаВыбора
Процедура ОтработанноеВремяВЦеломЗаПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ОтработанноеВремяВЦеломЗаПериод.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		Автозаполнение(,ВыбранноеЗначение);
	Иначе
		Предупреждение(НСтр("ru='Данный сотрудник уже введен в табличную часть.';uk='Цей співробітник вже введений в табличну частину.'"));	
	КонецЕсли;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОГО ПОЛЯ 
//   ОтработанноеВремяВЦеломЗаПериод

Процедура ОтработанноеВремяВЦеломЗаПериодСотрудникПриИзменении(Элемент)
	
	мСтрока = ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод.ТекущиеДанные;
	Если ЗначениеЗаполнено(Элемент.Значение.ОсновноеНазначение) Тогда
		мСтрока.Назначение = Элемент.Значение;
		мСтрока.Сотрудник = Элемент.Значение.ОсновноеНазначение;
	Иначе
		мСтрока.Назначение = Элемент.Значение;
	КонецЕсли;
	Автозаполнение(,Элемент.Значение, ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод.ТекущаяСтрока);
	
КонецПроцедуры

Процедура ОтработанноеВремяВЦеломЗаПериодСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура ОтработанноеВремяВЦеломЗаПериодСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры

Процедура ОтработанноеВремяВЦеломЗаПериодСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры


Процедура ОтработанноеВремяВЦеломЗаПериодНазначениеПриИзменении(Элемент)
	
	мСтрока = ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(мСтрока.Сотрудник) Тогда
		мСтрока.Сотрудник = ?(ЗначениеЗаполнено(Элемент.Значение.ОсновноеНазначение), Элемент.Значение.ОсновноеНазначение, Элемент.Значение);
	КонецЕсли;
	Автозаполнение(,Элемент.Значение, ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод.ТекущаяСтрока);
КонецПроцедуры

Процедура ОтработанноеВремяВЦеломЗаПериодНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура ОтработанноеВремяВЦеломЗаПериодНазначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры

Процедура ОтработанноеВремяВЦеломЗаПериодНазначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры


Процедура ОтработанноеВремяВЦеломЗаПериодВидВремениПриИзменении(Элемент)
	ТекущаяСтркоа = ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод.ТекущаяСтрока;
	КолонкиТаблицы = ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод.Колонки;
	ИскомоеЗначение = Элемент.Значение;
	Если НЕ ИскомоеЗначение.Пустая() 
		И ((ТекущаяСтркоа.ВидВремени1 = ИскомоеЗначение
		И КолонкиТаблицы.ВидВремени1.ЭлементУправления <> Элемент)
		ИЛИ (ТекущаяСтркоа.ВидВремени2 = ИскомоеЗначение
		И КолонкиТаблицы.ВидВремени2.ЭлементУправления <> Элемент)	
		ИЛИ (ТекущаяСтркоа.ВидВремени3 = ИскомоеЗначение
		И КолонкиТаблицы.ВидВремени3.ЭлементУправления <> Элемент)
		ИЛИ (ТекущаяСтркоа.ВидВремени4 = ИскомоеЗначение
		И КолонкиТаблицы.ВидВремени4.ЭлементУправления <> Элемент)
		ИЛИ (ТекущаяСтркоа.ВидВремени5 = ИскомоеЗначение
		И КолонкиТаблицы.ВидВремени5.ЭлементУправления <> Элемент)
		ИЛИ (ТекущаяСтркоа.ВидВремени6 = ИскомоеЗначение
		И КолонкиТаблицы.ВидВремени6.ЭлементУправления <> Элемент)) Тогда
		Предупреждение(НСтр("ru='Данный вид времени уже введен';uk='Даний вид часу вже введений'"));
		Элемент.Значение = мПустаяСсылкаКлассификатора;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОтработанноеВремя

// Процедура - обработчик события "ОбработкаВыбора" табличной части ОтработанноеВремя
Процедура ОтработанноеВремяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ОтработанноеВремя.НайтиСтроки(Новый Структура("Назначение", ВыбранноеЗначение)).Количество() = 0 Тогда
		Автозаполнение(,ВыбранноеЗначение);
		ОбновитьСправкуФормы("ОтработанноеВремя");
	Иначе
		Предупреждение(НСтр("ru='Данный сотрудник уже введен в табличную часть.';uk='Цей співробітник вже введений в табличну частину.'"));
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриПолученииДанных" табличной части ОтработанноеВремя
Процедура ОтработанноеВремяПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Элемент.ФиксацияСлева = 0 + Элемент.Колонки.НомерСтроки.Видимость
		+ Элемент.Колонки.ТабельныйНомерСтрока.Видимость
		+ Элемент.Колонки.Сотрудник.Видимость
		+ Элемент.Колонки.Назначение.Видимость
		+ Элемент.Колонки.Итого.Видимость;
	
	СтрокаИндексДня = "";
	НазваниеЯчейкиВидВремени = "";
	НазваниеЯчейкиДней = "";
	ТекстЯчейки = "";
	//////Цикл по строкам документа
	////Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	////	
	////	//Цикл по дням
	////	Для ИндексДня  = 1 По 31 Цикл
	////		ТекстЯчейки = "";
	////		СтрокаИндексДня = Строка(ИндексДня);
	////		// цикл по значениям внутри дня
	////		Для ИндексМассиваПриставок = 0 По 2 Цикл
	////			НазваниеЯчейкиВидВремени = МассивПриставок[ИндексМассиваПриставок] + "ВидВремени"+СтрокаИндексДня;
	////			НазваниеЯчейкиДней = МассивПриставок[ИндексМассиваПриставок] + "Часов"+СтрокаИндексДня;
	////			КоличествоЧасов = Строка(ОформлениеСтроки.Данныестроки[НазваниеЯчейкиДней]);
	////			Если КоличествоЧасов = "0" Тогда
	////				КоличествоЧасов = "";
	////			КонецЕсли;
	////			ВидВремени = ОформлениеСтроки.Данныестроки[НазваниеЯчейкиВидВремени];
	////			Если НЕ ВидВремени.Пустая() Тогда
	////				Если ВидВремени.БуквенныйКод = "Р" Тогда
	////					ТекстЯчейки = "Р " + КоличествоЧасов + Символы.ПС + ТекстЯчейки;
	////				Иначе
	////					ТекстЯчейки = ТекстЯчейки + ВидВремени.БуквенныйКод + " " + КоличествоЧасов + Символы.ПС;
	////				КонецЕсли;
	////			КонецЕсли;
	////		КонецЦикла;	
	////		ТекстЯчейки = Лев(ТекстЯчейки, СтрДлина(ТекстЯчейки)-1);
	////		ТекущаяЯчейка = ОформлениеСтроки.Ячейки["День"+СтрокаИндексДня];
	////		Если ТекущаяЯчейка.Значение <> ТекстЯчейки Тогда
	////			ТекущаяЯчейка.Значение = ТекстЯчейки;
	////		КонецЕсли;
	////	КонецЦикла;
	////	
	////КонецЦикла;
	
	
	//Цикл по строкам документа
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		СоответствиеРасчетаИтоговЧасов.Очистить();
		СоответствиеРасчетаИтоговДней.Очистить();
		//Цикл по дням
		Для ИндексДня  = День(ДатаНачалаПериода) По День(ДатаОкончанияПериода) Цикл
			ТекстЯчейки = "";
			СтрокаИндексДня = Строка(ИндексДня);
			// цикл по значениям внутри дня
			Для ИндексМассиваПриставок = 0 По 2 Цикл
				НазваниеЯчейкиВидВремени = МассивПриставок[ИндексМассиваПриставок] + "ВидВремени"+СтрокаИндексДня;
				НазваниеЯчейкиДней = МассивПриставок[ИндексМассиваПриставок] + "Часов"+СтрокаИндексДня;
				КоличествоЧасов = ОформлениеСтроки.Данныестроки[НазваниеЯчейкиДней];
				ВидВремени = ОформлениеСтроки.Данныестроки[НазваниеЯчейкиВидВремени];
				
				Если КоличествоЧасов = 0 Тогда
					КоличествоЧасов = "";
				Иначе
					// Подсчет для итоговой колонки
					НакопленоДней = СоответствиеРасчетаИтоговДней[ВидВремени];
					НакопленоЧасов = СоответствиеРасчетаИтоговЧасов[ВидВремени];
					Если НакопленоДней = Неопределено ИЛИ НакопленоЧасов = Неопределено Тогда
						НакопленоДней = 0;
						НакопленоЧасов = 0;
					КонецЕсли;
					СоответствиеРасчетаИтоговДней.Вставить(ВидВремени, НакопленоДней + 1);
					СоответствиеРасчетаИтоговЧасов.Вставить(ВидВремени, НакопленоЧасов + КоличествоЧасов);
				КонецЕсли;
				
				Если НЕ ВидВремени.Пустая() Тогда
					Если ВидВремени.БуквенныйКод = "Я" Тогда
						ТекстЯчейки = "Я " + КоличествоЧасов + Символы.ПС + ТекстЯчейки;
					Иначе
						ТекстЯчейки = ТекстЯчейки + ВидВремени.БуквенныйКод + " " + КоличествоЧасов + Символы.ПС;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
			ТекстЯчейки = Лев(ТекстЯчейки, СтрДлина(ТекстЯчейки)-1);
			ТекущаяЯчейка = ОформлениеСтроки.Ячейки["День"+СтрокаИндексДня];
			Если ТекущаяЯчейка.Значение <> ТекстЯчейки Тогда
				ТекущаяЯчейка.Значение = ТекстЯчейки;
			КонецЕсли;
		КонецЦикла;
		
		СтрИтогоРабота = "";
		СтрИтогоРаботаВечерниеЧасы = "";
		СтрИтогоРаботаНочныеЧасы = "";
		СтрИтогоРабочееВремя = "";
		СтрИтогоНеРабочееВремя = "";
		Для Каждого ЭлементСоответствия Из СоответствиеРасчетаИтоговДней Цикл
			КлючЭлементаСоответствия = ЭлементСоответствия.Ключ;
			Если КлючЭлементаСоответствия = КлассификаторРабота Тогда
				СтрИтогоРабота = СтрИтогоРабота + КлючЭлементаСоответствия.БуквенныйКод + " " + ЭлементСоответствия.Значение + НСтр("ru=' дн.';uk=' дн.'")
					+ СоответствиеРасчетаИтоговЧасов[КлючЭлементаСоответствия] + НСтр("ru=' ч.';uk=' г.'") + Символы.ВК;
			ИначеЕсли КлючЭлементаСоответствия = КлассификаторРаботаВечерниеЧасы Тогда
				СтрИтогоРаботаВечерниеЧасы = СтрИтогоРаботаВечерниеЧасы + КлючЭлементаСоответствия.БуквенныйКод + " " + ЭлементСоответствия.Значение + НСтр("ru=' дн.';uk=' дн.'")
					+ СоответствиеРасчетаИтоговЧасов[КлючЭлементаСоответствия] + НСтр("ru=' ч.';uk=' г.'") + Символы.ВК;
			ИначеЕсли КлючЭлементаСоответствия = КлассификаторРаботаНочныеЧасы Тогда
				СтрИтогоРаботаНочныеЧасы = СтрИтогоРаботаНочныеЧасы + КлючЭлементаСоответствия.БуквенныйКод + " " + ЭлементСоответствия.Значение + НСтр("ru=' дн.';uk=' дн.'")
					+ СоответствиеРасчетаИтоговЧасов[КлючЭлементаСоответствия] + НСтр("ru=' ч.';uk=' г.'") + Символы.ВК;
			ИначеЕсли КлючЭлементаСоответствия.РабочееВремя Тогда
				СтрИтогоРабочееВремя = СтрИтогоРабочееВремя + КлючЭлементаСоответствия.БуквенныйКод + " " + ЭлементСоответствия.Значение + НСтр("ru=' дн. ';uk=' дн. '")
					+ СоответствиеРасчетаИтоговЧасов[КлючЭлементаСоответствия] + НСтр("ru=' ч.';uk=' г.'") + Символы.ВК;
			Иначе
				СтрИтогоНеРабочееВремя = СтрИтогоНеРабочееВремя + КлючЭлементаСоответствия.БуквенныйКод + " " + ЭлементСоответствия.Значение + НСтр("ru=' дн. ';uk=' дн. '")
					+ СоответствиеРасчетаИтоговЧасов[КлючЭлементаСоответствия] + НСтр("ru=' ч.';uk=' г.'") + Символы.ВК;
			КонецЕсли;
		КонецЦикла;
		ОформлениеСтроки.Ячейки.Итого.Значение = СтрИтогоРабота + СтрИтогоРаботаВечерниеЧасы + СтрИтогоРаботаНочныеЧасы + СтрИтогоРабочееВремя + СтрИтогоНеРабочееВремя;
		ОформлениеСтроки.Ячейки.Итого.ОтображатьТекст = Истина;
	КонецЦикла;
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.ОтработанноеВремя, ОформленияСтрок);
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" табличнойчасти ОтработанноеВремя
Процедура ОтработанноеВремяПередНачаломИзменения(Элемент, Отказ)
	ИмяЯчейки = Элемент.ТекущаяКолонка.Имя;
	Если (Лев(ИмяЯчейки, 4) = "День") И (ОтработанноеВремя.Количество() > 0) И (Элемент.ТекущаяСтрока <> Неопределено) Тогда
		ТекстЯчейки = "";
		СтрокаИндексДня = Сред(ИмяЯчейки, 5);
		Для ИндексМассиваПриставок = 0 По 2 Цикл
			НазваниеЯчейкиВидВремени = МассивПриставок[ИндексМассиваПриставок] + "ВидВремени"+СтрокаИндексДня;
			НазваниеЯчейкиДней = МассивПриставок[ИндексМассиваПриставок] + "Часов"+СтрокаИндексДня;
			КоличествоЧасов = Строка(Элемент.ТекущаяСтрока[НазваниеЯчейкиДней]);
			Если КоличествоЧасов = "0" Тогда
				КоличествоЧасов = "";
			КонецЕсли;
			ВидВремени = Элемент.ТекущаяСтрока[НазваниеЯчейкиВидВремени];
			Если НЕ ВидВремени.Пустая() Тогда
				Если ВидВремени.БуквенныйКод = "Р" Тогда
					ТекстЯчейки = "Р " + КоличествоЧасов + Символы.ПС + ТекстЯчейки;
				Иначе
					ТекстЯчейки = ТекстЯчейки + ВидВремени.БуквенныйКод + " " + КоличествоЧасов + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		ТекстЯчейки = Лев(ТекстЯчейки, СтрДлина(ТекстЯчейки)-1);
		ТекущаяЯчейка = Элемент.ТекущаяКолонка.ЭлементУправления;
		Если ТекущаяЯчейка.Значение <> ТекстЯчейки Тогда
			ТекущаяЯчейка.Значение = ТекстЯчейки;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ОтработанноеВремяПередНачаломИзменения()

Процедура ОтработанноеВремяПриАктивизацииЯчейки(Элемент)
	ИмяЯчейки = Элемент.ТекущаяКолонка.Имя;
	Если (Лев(ИмяЯчейки, 4) = "День") И (ОтработанноеВремя.Количество() > 0) И (Элемент.ТекущаяСтрока <> Неопределено) Тогда
		ТекстЯчейки = "";
		СтрокаИндексДня = Сред(ИмяЯчейки, 5);
		Для ИндексМассиваПриставок = 0 По 2 Цикл
			НазваниеЯчейкиВидВремени = МассивПриставок[ИндексМассиваПриставок] + "ВидВремени"+СтрокаИндексДня;
			НазваниеЯчейкиДней = МассивПриставок[ИндексМассиваПриставок] + "Часов"+СтрокаИндексДня;
			КоличествоЧасов = Строка(Элемент.ТекущаяСтрока[НазваниеЯчейкиДней]);
			Если КоличествоЧасов = "0" Тогда
				КоличествоЧасов = "";
			КонецЕсли;
			ВидВремени = Элемент.ТекущаяСтрока[НазваниеЯчейкиВидВремени];
			Если НЕ ВидВремени.Пустая() Тогда
				ТекстЯчейки = ТекстЯчейки + Символы.ПС + ВидВремени.БуквенныйКод + " " + КоличествоЧасов;
			КонецЕсли;
		КонецЦикла;	
		ТекстЯчейки = Сред(ТекстЯчейки, 2);
		ТекущаяЯчейка = Элемент.ТекущаяКолонка.ЭлементУправления;
		Если ТекущаяЯчейка.Значение <> ТекстЯчейки Тогда
			ТекущаяЯчейка.Значение = ТекстЯчейки;
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Процедура ОтработанноеВремяПослеУдаления(Элемент)
	
	ОбновитьСправкуФормы("ОтработанноеВремя");
	
КонецПроцедуры

Процедура ОтработанноеВремяПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьСправкуФормы("ОтработанноеВремя");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОГО ПОЛЯ ОтработанноеВрем

Процедура ОтработанноеВремяСотрудникПриИзменении(Элемент)
	
	мСтрока = ЭлементыФормы.ОтработанноеВремя.ТекущиеДанные;
	Если ЗначениеЗаполнено(Элемент.Значение.ОсновноеНазначение) Тогда
		мСтрока.Назначение = Элемент.Значение;
		мСтрока.Сотрудник = Элемент.Значение.ОсновноеНазначение;
	Иначе
		мСтрока.Назначение = Элемент.Значение;
	КонецЕсли;
	Автозаполнение(,мСтрока.Назначение, ЭлементыФормы.ОтработанноеВремя.ТекущаяСтрока);
	
КонецПроцедуры

Процедура ОтработанноеВремяСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура ОтработанноеВремяСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры

Процедура ОтработанноеВремяСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры


Процедура ОтработанноеВремяНазначениеПриИзменении(Элемент)
	мСтрока = ЭлементыФормы.ОтработанноеВремя.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(мСтрока.Сотрудник) Тогда
		мСтрока.Сотрудник = ?(ЗначениеЗаполнено(Элемент.Значение.ОсновноеНазначение), Элемент.Значение.ОсновноеНазначение, Элемент.Значение);
	КонецЕсли;
	Автозаполнение(,Элемент.Значение, ЭлементыФормы.ОтработанноеВремя.ТекущаяСтрока);
КонецПроцедуры

Процедура ОтработанноеВремяНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура ОтработанноеВремяНазначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры

Процедура ОтработанноеВремяНазначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры

Процедура ОтработанноеВремяДеньОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ОбработкаВводаДанныхВЯчейку(Элемент, Текст, Значение, СтандартнаяОбработка, Сред(ЭлементыФормы.ОтработанноеВремя.ТекущаяКолонка.Имя, 5));
КонецПроцедуры


// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Номер);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

МассивПриставок = Новый Массив(3);
МассивПриставок[0] = "Первый";
МассивПриставок[1] = "Второй";
МассивПриставок[2] = "Третий";

мБуквенныеОбозначения = Новый Соответствие;
Запрос = Новый Запрос("Выбрать Ссылка, БуквенныйКод Из Справочник.КлассификаторИспользованияРабочегоВремени");
Выборка = Запрос.Выполнить().Выбрать();
Пока Выборка.Следующий() Цикл
	мБуквенныеОбозначения[ВРег(Выборка.БуквенныйКод)] = Выборка.Ссылка;
КонецЦикла;

СоответствиеРасчетаИтоговДней = Новый Соответствие;
СоответствиеРасчетаИтоговЧасов = Новый Соответствие;
СпособВводаДанныхПоДням = Перечисления.СпособыВводаДанныхОВремени.ПоДням;

мПустаяСсылкаКлассификатора = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();

СоответствиеДляПоискаСотрудника = Новый Структура;
ПустойСотрудникОрганизации =Справочники.СотрудникиОрганизаций.ПустаяСсылка();

СписокИменЯчеекДляОпределенияСтроки = Новый СписокЗначений;
СписокИменЯчеекДляОпределенияСтроки.Добавить("ВидВремени1");
СписокИменЯчеекДляОпределенияСтроки.Добавить("ВидВремени2");
СписокИменЯчеекДляОпределенияСтроки.Добавить("ВидВремени3");
СписокИменЯчеекДляОпределенияСтроки.Добавить("ВидВремени4");
СписокИменЯчеекДляОпределенияСтроки.Добавить("ВидВремени5");
СписокИменЯчеекДляОпределенияСтроки.Добавить("ВидВремени6");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Дней1");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Дней2");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Дней3");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Дней4");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Дней5");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Дней6");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Часов1");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Часов2");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Часов3");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Часов4");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Часов5");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Часов6");

// Заполнение соответвия номер дня недели и названия дня недели.
ДлинаСуток = 86400;
ПерваяДата = НачалоДня(ОбщегоНазначения.ПолучитьРабочуюДату());
ПерваяДата = ПерваяДата - ДеньНедели(ПерваяДата) * ДлинаСуток;
ДниНедели = Новый Соответствие;
Для ДеньНедели = 1 По 7 Цикл
	ДниНедели.Вставить(ДеньНедели, НРег(Формат(ПерваяДата + ДеньНедели * ДлинаСуток,"ДФ=ддд")));
КонецЦикла;

ЧетырнадцатьДней = 1209600;
ПятнадцатьДней = 1296000;

СоответствиеСотрудникГрафик = Новый Соответствие;
СоответствиеГрафикНорма = Новый Соответствие;

КлассификаторРабота = Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
КлассификаторРаботаВечерниеЧасы = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы;
КлассификаторРаботаНочныеЧасы = Справочники.КлассификаторИспользованияРабочегоВремени.Ночные;
