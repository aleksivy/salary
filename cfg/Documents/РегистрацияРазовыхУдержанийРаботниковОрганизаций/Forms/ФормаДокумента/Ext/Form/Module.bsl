////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента;   // Хранит текущую дату документа - для проверки перехода документа в другой период установки номера

// Списки доступных удержаний
Перем СпВидовРасчета;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит "Результат" текущей строки
Перем мСтарыйРезультат;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

Перем мСведенияОВидахРасчета;

// Механизм исправлений
Перем мДокументыИсправление;
Перем мДокументСторнирование;
Перем мСотрудникиИсправление;
Перем мМенюИсправление;
Перем мКнопкаИсправлениеТекущийСотрудник;
Перем мКнопкаИсправлениеВесьДокумент;
Перем мКнопкаИсправлениеСписокСотрудников;
Перем мКнопкаОтменаИсправление;
Перем мТекущийСотрудник;


////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Удержания,ЭлементыФормы.КоманднаяПанельУдержания);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

Процедура ПолучитьСотрудниковСИсправлениями()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазовыеУдержания.Сотрудник КАК Сотрудник
	|ИЗ
	|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК РазовыеУдержания
	|ГДЕ
	|	РазовыеУдержания.Ссылка В(&Исправления)
	|	И РазовыеУдержания.Сторно";
	
	мСотрудникиИсправление = ПроведениеРасчетов.СформироватьСоответствиеСотрудниковСИсправлениями(ТекстЗапроса, мДокументыИсправление);
	
КонецПроцедуры

Процедура ОбновитьТекущегоСотрудника()

 	ТекущиеДанные	= ЭлементыФормы.Удержания.ТекущиеДанные;
 	Если ТекущиеДанные = Неопределено Тогда 
		ТекущийСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	Иначе
		ТекущийСотрудник = ТекущиеДанные.Сотрудник;
	КонецЕсли;

	// Установим имя и доступность кнопки ТекущийСотрудник механизма исправлений
	Если ЭлементыФормы.ДополнительныеДействия.Кнопки.Найти("Исправить") <> Неопределено И мТекущийСотрудник <> ТекущийСотрудник Тогда
		РаботаСДиалогами.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(ТекущийСотрудник),ТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник)
	КонецЕсли;
	
	мТекущийСотрудник = ТекущийСотрудник;

КонецПроцедуры

Процедура ОбновитьОписаниеСостоянияДокумента()

	// связанные документы
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	Сторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	НеЗаполнен = Не ЗначениеЗаполнено(Организация) Или Удержания.Количество() = 0;
	
	ЗаполненСОшибками = Удержания.НайтиСтроки(Новый Структура("ВидРасчета",ПланыВидовРасчета.УдержанияОрганизаций.ПустаяСсылка())).Количество() > 0;
				
	НеРассчитан = Удержания.НайтиСтроки(Новый Структура("Результат, Сторно",0,Ложь)).Количество() = Удержания.НайтиСтроки(Новый Структура("Сторно",Ложь)).Количество() И Удержания.НайтиСтроки(Новый Структура("Сторно",Ложь)).Количество() > 0;
	
	ОписаниеСостоянияДокумента = РаботаСДиалогами.ПолучитьОписаниеРасчетногоДокумента(Не НеЗаполнен,ЗаполненСОшибками,Не НеРассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Сторнирован, ТолькоПросмотр,Ложь,Ложь); // поля структуры описания - ТекстСообщения и ВажностьСообщения
	РаботаСДиалогами.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

Процедура УстановитьКнопкиИсправленияДокумента(ДокументИсправлен = Неопределено, ИсправленВесьДокумент = Неопределено, ДокументСторнирован = Неопределено)
	
	Если ДокументИсправлен = Неопределено Тогда
		ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	КонецЕсли;
	Если ДокументСторнирован = Неопределено Тогда
		ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	КонецЕсли;
	
	Если ИсправленВесьДокумент = Неопределено Тогда
		ИсправленВесьДокумент = ДокументИсправлен;
		Если ИсправленВесьДокумент Тогда
			Для каждого СтрокаТЧ Из Удержания Цикл
				ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
				Если Не ИсправленВесьДокумент Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументСторнирован Или ПериодРегистрации >= НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
		ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	Иначе 
		
		Кнопки = ЭлементыФормы.ДополнительныеДействия.Кнопки;
		Если Кнопки.Количество() = 0 Тогда
			МенюИсправить = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Подменю);
			ЗаполнитьЗначенияСвойств(МенюИсправить, мМенюИсправление);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеТекущийСотрудник.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеТекущийСотрудник);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеВесьДокумент.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеВесьДокумент);
			МенюИсправить.Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеСписокСотрудников.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеСписокСотрудников);
		КонецЕсли;
		Кнопки.Исправить.Кнопки.ТекущийСотрудник.Доступность = Не ИсправленВесьДокумент;
		Кнопки.Исправить.Кнопки.ВесьДокумент.Доступность = Не ДокументИсправлен;
		Кнопки.Исправить.Кнопки.СписокСотрудников.Доступность = Не ИсправленВесьДокумент;
			
		Если Кнопки.Количество() = 1 И ДокументИсправлен Тогда
			Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаОтменаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаОтменаИсправление);
		ИначеЕсли Кнопки.Количество() > 1 И Не ДокументИсправлен Тогда
			Кнопки.Удалить(Кнопки.ОтменитьИсправление);
			Кнопки.Удалить(Кнопки.Разделитель);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Управляет видимостью элементов формы, зависящих от наличия перерассчитываемого документа
Процедура ОбновитьДоступностьЭлементовФормы()
	
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	ИсправленВесьДокумент = ДокументИсправлен;
	Если ИсправленВесьДокумент Тогда
		Для каждого СтрокаТЧ Из Удержания Цикл
			ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
			Если Не ИсправленВесьДокумент Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если ДокументИсправлен Или ДокументСторнирован Тогда
		ТолькоПросмотр = Истина
	Иначе 	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	ЭлементыФормы.Организация.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
	
	УстановитьКнопкиИсправленияДокумента(ДокументИсправлен, ИсправленВесьДокумент, ДокументСторнирован);
	
	ЭлементыФормы.ПанельОткрытьИсправление.Свертка = ?(ДокументИсправлен Или ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.ПанельОткрытьИсходный.Свертка = ?(ЭтоИсправление И Не ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.НадписьОткрытьИсправление.Заголовок = ?(ДокументСторнирован,НСтр("ru='Открыть сторно-документ';uk='Відкрити сторно-документ'"),НСтр("ru='Открыть исправления';uk='Відкрити виправлення'"));
	
	Если Не ТолькоПросмотр Тогда
		МожноЗаполнять = Не ЭтоИсправление;
		СоставМенюЗаполнить = ЭлементыФормы.ДействияФормы.Кнопки.ПодменюЗаполнить.Кнопки;
		Для каждого Кнопка Из СоставМенюЗаполнить Цикл
			Если Кнопка.ТипКнопки <> ТипКнопкиКоманднойПанели.Разделитель Тогда
				Кнопка.Доступность = МожноЗаполнять
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если Не ЭтоНовый() Тогда
		мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
		мДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
		ОбновитьОписаниеСостоянияДокумента();
		Если ЗначениеЗаполнено(мДокументыИсправление) Тогда
			ПолучитьСотрудниковСИсправлениями();
		КонецЕсли;
	Иначе
		РаботаСДиалогами.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, НСтр("ru='Документ не заполнен';uk='Документ не заповнений'"), "СообщениеОПроблемах");
	КонецЕсли;

	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	Иначе 
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ДатаОкончания");
	СтруктураКолонок.Вставить("Размер");

	// Установить ограничение - изменять видимость колонок для табличной части ОсновныеНачисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Удержания.Колонки, СтруктураКолонок);
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.Удержания.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	// Активизируем табличную часть
	ТекущийЭлемент = ЭлементыФормы.Удержания;

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
		
	// Установить активный реквизит.
	//Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
	//	ТекущийЭлемент = ЭлементыФормы.Удержания;
	//КонецЕсли;
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	// Исправление документов
	мМенюИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить;
	мКнопкаИсправлениеТекущийСотрудник = мМенюИсправление.Кнопки.ТекущийСотрудник;
	мКнопкаИсправлениеВесьДокумент = мМенюИсправление.Кнопки.ВесьДокумент;
	мКнопкаИсправлениеСписокСотрудников = мМенюИсправление.Кнопки.СписокСотрудников;
	мКнопкаОтменаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление;
	ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	
	// Установим видимость в зависимости от наличия перерассчитываемого документа
	ОбновитьДоступностьЭлементовФормы();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = ""; Реквизиты = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			ВременнаяТаблица = ЗначениеВыбора.Данные.Выгрузить();
			Если ЗначениеВыбора.Свойство("Реквизиты",Реквизиты) Тогда
				РеквизитыТЧ = ЭтотОбъект.Метаданные().ТабличныеЧасти.Удержания.Реквизиты;
				Для каждого Значение Из Реквизиты Цикл
					Если РеквизитыТЧ.Найти(Значение.Ключ) <> Неопределено Тогда
						ВременнаяТаблица.Колонки.Добавить(Значение.Ключ); 
						ВременнаяТаблица.ЗаполнитьЗначения(Значение.Значение,Значение.Ключ);
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
			ВременнаяТаблица.Колонки.Добавить("Авторасчет");
			ВременнаяТаблица.ЗаполнитьЗначения(Истина,"Авторасчет");
			Удержания.Загрузить(ВременнаяТаблица);
		ИначеЕсли ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ЗаполнитьДокументИсправление" Тогда
			РаботаСДиалогами.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, ЗначениеВыбора.ВыбранныеСотрудники);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура-обработчик события нажатия кнопки "Рассчитать"
Процедура ДействияФормыРассчитать(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьУдержания();
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.Удержания.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат = ТекущаяСтрока.Результат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если Удержания.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Заполнить?';uk='Перед заповненням табличні частини будуть очищені. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		Удержания.Очистить();
	КонецЕсли;
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, ПериодРегистрации, "РаботникиОрганизаций", Организация, Неопределено, Истина, Истина,"РазовыеУдержания", Новый Структура("ВидРасчета,Показатель1,ДатаНачала,ДатаОкончания",ПланыВидовРасчета.УдержанияОрганизаций.ПустаяСсылка(),0,Дата(1,1,1),Дата(1,1,1)));
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельУдержанияПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.Удержания, Ссылка, Ложь, Дата, Организация);
	
КонецПроцедуры

Процедура ДополнительныеДействияВесьДокумент(Кнопка)
	РаботаСДиалогами.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры

Процедура ДополнительныеДействияТекущийСотрудник(Кнопка)
	
	Если Не ЗначениеЗаполнено(мТекущийСотрудник) Тогда
		Предупреждение(НСтр("ru='Не выбран сотрудник для исправления расчетов!';uk='Не обраний співробітник для виправлення розрахунків!'"));
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогами.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, мТекущийСотрудник);

КонецПроцедуры

Процедура ДополнительныеДействияСписокСотрудников(Кнопка)
	
	Если Проведен Тогда
		
		ПолучитьСотрудниковСИсправлениями();
		
		ТекстВопроса = НСтр("ru='Для исправления необходимо записать документ. Продолжить?';uk='Для виправлення необхідно записати документ. Продовжити?'");
		Если Не РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ЭтотОбъект, ЭтаФорма, ТекстВопроса) Тогда
			Возврат;
		КонецЕсли;
		
		СписокСотрудников = Новый СписокЗначений;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрацияРазовыхУдержанийРаботниковОрганизаций.Сотрудник,
		|	РегистрацияРазовыхУдержанийРаботниковОрганизаций.Сотрудник.Наименование КАК Наименование
		|ИЗ
		|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК РегистрацияРазовыхУдержанийРаботниковОрганизаций
		|ГДЕ
		|	РегистрацияРазовыхУдержанийРаботниковОрганизаций.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		Запрос.УстановитьПараметр("Ссылка",Ссылка); 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если мСотрудникиИсправление[Выборка.Сотрудник] = Неопределено Тогда
				СписокСотрудников.Добавить(Выборка.Сотрудник,Выборка.Наименование)
			КонецЕсли;
		КонецЦикла;
		
		Форма = ПолучитьОбщуюФорму("ФормаВыбораСотрудников", ЭтаФорма, Ссылка);
		Форма.СписокСотрудников = СписокСотрудников;
		Форма.Заголовок = НСтр("ru='Сотрудники документа Регистрация разовых удержаний №';uk='Співробітники документа Реєстрація разових утримань №'") + Номер + НСтр("ru=' от ';uk=' від '") + Формат(Дата,"ДФ=dd.MM.yyyy");
		Форма.Открыть();
		
	Иначе
		Предупреждение(НСтр("ru='Исправить можно только проведенный документ!';uk='Виправити можна лише проведений документ!'"))
	КонецЕсли;
	
КонецПроцедуры

// Процедура отмены документов-исправлений
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогами.ОтменитьИсправлениеДокумента(Ссылка);
	мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
	ПолучитьСотрудниковСИсправлениями();
	ОбновитьДоступностьЭлементовФормы();
	РаботаСДиалогами.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(мТекущийСотрудник),мТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник);
	Обновить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	ОбновитьДоступностьЭлементовФормы();
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	ОбновитьДоступностьЭлементовФормы();
КонецПроцедуры

Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	Если ЗначениеЗаполнено(мДокументыИсправление) Тогда
		Форма = КритерииОтбора.ДокументыИсправления.ПолучитьФорму(, ЭтаФорма);
		Форма.ИсходныйДокумент = Ссылка;
		Форма.Открыть();
	ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
		мДокументСторнирование.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ПерерассчитываемыйДокумент.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Удержания
 
// Процедура - обработчик оповещения о выборе
//
Процедура УдержанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если Удержания.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Удержания.Добавить();
			СтрокаТабличнойЧасти.Сотрудник	= ВыбранноеЗначение;
			СтрокаТабличнойЧасти.Физлицо	= ВыбранноеЗначение.Физлицо;
			СтрокаТабличнойЧасти.Авторасчет	= Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций") Тогда
		Элемент.ТекущаяСтрока.ВидРасчета = ВыбранноеЗначение;
		Элемент.ТекущаяСтрока.Авторасчет = Истина;
		СтрокаТабличнойЧасти = ЭлементыФормы.Удержания.ТекущаяСтрока;	
		ОснНазначение = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сотрудник.ОсновноеНазначение), СтрокаТабличнойЧасти.Сотрудник.ОсновноеНазначение, СтрокаТабличнойЧасти.Сотрудник);
		ПроведениеРасчетов.ПроставитьДанныеСтроки(ОснНазначение, СтрокаТабличнойЧасти.Сотрудник, Дата, ПериодРегистрации, СтрокаТабличнойЧасти.ВидРасчета, СтрокаТабличнойЧасти,Ложь);

	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" ТЧ
//
Процедура УдержанияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки.Сторно Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);

	ИначеЕсли ДанныеСтроки.Сотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(51, 51, 153);
	
	ИначеЕсли ДанныеСтроки.Сотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(0, 128, 128);
	КонецЕсли;
	
	РаботаСДиалогами.ПриВыводеСтрокиНачисленийИУдержаний(ДанныеСтроки, ОформлениеСтроки, мСведенияОВидахРасчета, Ложь);
	
	ЯчейкаСКартинкой = ОформлениеСтроки.Ячейки.Картинка;
	ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
	ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);	

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ
//
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина
	КонецЕсли;
	
КонецПроцедуры

Процедура УдержанияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ОбновитьТекущегоСотрудника();
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки"
//
Процедура УдержанияПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат = Элемент.ТекущаяСтрока.Результат;
		ОбновитьТекущегоСотрудника();
	КонецЕсли;
	
КонецПроцедуры

Процедура УдержанияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Удержания, ОформленияСтрок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ Удержания

Процедура УдержанияСотрудникПриИзменении(Элемент)
	ЭлементыФормы.Удержания.ТекущиеДанные.Сотрудник = Элемент.Значение;
	ЭлементыФормы.Удержания.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
	
	ДанныеСтроки = ЭлементыФормы.Удержания.ТекущиеДанные;
	ОснНазначение = ?(ЗначениеЗаполнено(Элемент.Значение.ОсновноеНазначение), Элемент.Значение.ОсновноеНазначение, Элемент.Значение);
	ПроведениеРасчетов.ПроставитьДанныеСтроки(ОснНазначение, Элемент.Значение, Дата, ПериодРегистрации, ДанныеСтроки.ВидРасчета, ЭлементыФормы.Удержания.ТекущаяСтрока,Ложь);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура УдержанияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура УдержанияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура УдержанияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникОкончаниеВводаТекста()

Процедура УдержанияВидРасчетаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Удержания.ТекущаяСтрока;	
	ОснНазначение = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сотрудник.ОсновноеНазначение), СтрокаТабличнойЧасти.Сотрудник.ОсновноеНазначение, СтрокаТабличнойЧасти.Сотрудник);
	ПроведениеРасчетов.ПроставитьДанныеСтроки(ОснНазначение, СтрокаТабличнойЧасти.Сотрудник, Дата, ПериодРегистрации, СтрокаТабличнойЧасти.ВидРасчета, СтрокаТабличнойЧасти,Ложь);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода вида расчета
Процедура УдержанияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	//Предложим для выбора список расчетов
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", ЭлементыФормы.Удержания, "дляДокументаРегистрацияРазовыхУдержаний");
	
	ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = СпВидовРасчета;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = ИСТИНА;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода вида расчета
Процедура УдержанияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыПоискаПоСтроке.ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(Текст, "УдержанияОрганизаций", "Ссылка НЕ В(&СпВидовРасчета)", Новый Структура("СпВидовРасчета", СпВидовРасчета));
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "Результат"
//
Процедура УдержанияРезультатПриИзменении(Элемент)
	
	Если Элемент.Значение <> мСтарыйРезультат Тогда
		
		ЭлементыФормы.Удержания.ТекущаяСтрока.Авторасчет = Ложь;
		мСтарыйРезультат = Элемент.Значение;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 
//

// Заполним список доступных видов удержаний
СпВидовРасчета = Новый СписокЗначений;

Запрос = Новый Запрос(
"ВЫБРАТЬ
|	УдержанияОрганизаций.Ссылка
|ИЗ
|	ПланВидовРасчета.УдержанияОрганизаций КАК УдержанияОрганизаций
|ГДЕ
|	УдержанияОрганизаций.Предопределенный = ИСТИНА
|	И УдержанияОрганизаций.Ссылка <> ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.УдержаниеПодотчетныхДС)");

СпВидовРасчета.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));

мСведенияОВидахРасчета = Новый Соответствие;

мДокументыИсправление = Новый Массив;
мСотрудникиИсправление = Новый Соответствие;
