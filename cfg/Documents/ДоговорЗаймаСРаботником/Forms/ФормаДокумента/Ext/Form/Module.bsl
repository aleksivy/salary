////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мИмяВалютыДокумента;
Перем мСчетБУ;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

Процедура ОбновитьНадписьКурса()

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мИмяВалютыДокумента, КурсДокумента, КратностьДокумента, мИмяВалютыРегламентированногоУчета, Истина);
																					 
КонецПроцедуры

// Устанавливает видимость реквизитов субконто и подписей к ним.
//
Процедура УстановитьВидимостьСубконто(КоличествоСубконто)

	Если ЗначениеЗаполнено(СчетУчетаПроцентовПоЗайму) Тогда
		Для Ном = 1 по 3 Цикл
			ПоказыватьСубконто = Ном <= КоличествоСубконто;
			Если ПоказыватьСубконто Тогда
				ЭлементыФормы["НадписьСубконто"+Ном].Заголовок = СчетУчетаПроцентовПоЗайму.ВидыСубконто[Ном-1].ВидСубконто.Наименование;
			КонецЕсли;
			ЭлементыФормы["НадписьСубконто"+Ном].Видимость = ПоказыватьСубконто;
			ЭлементыФормы["Субконто"+Ном].Видимость        = ПоказыватьСубконто;
		КонецЦикла;
	Иначе
		Для Ном = 1 по 3 Цикл
			ЭлементыФормы["НадписьСубконто"+Ном].Видимость = Ложь;
			ЭлементыФормы["Субконто"+Ном].Видимость        = Ложь;
		КонецЦикла;
	КонецЕсли;
	

КонецПроцедуры // УстановитьВидимостьСубконо()

// Управляет элементами формы
//
// Параметры
//  нет
//
Процедура ПриИзмененииВидаУчета()

	ЭлементыФормы.Организация.АвтоОтметкаНезаполненного = ОтражатьВБухгалтерскомУчете;
	Если ОтражатьВБухгалтерскомУчете Тогда
		ЭлементыФормы.Организация.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(Организация);
	Иначе
		ЭлементыФормы.Организация.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.Сотрудник.Видимость = Истина;
	ЭлементыФормы.ФизЛицо.Видимость = Ложь;
	
	ЭлементыФормы.СчетУчетаПроцентовПоЗайму.АвтоОтметкаНезаполненного = ОтражатьВБухгалтерскомУчете и ПроцентЗаПользованиеЗаймом > 0;
	Если ОтражатьВБухгалтерскомУчете и ПроцентЗаПользованиеЗаймом > 0 Тогда
		ЭлементыФормы.СчетУчетаПроцентовПоЗайму.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(СчетУчетаПроцентовПоЗайму);
	Иначе
		ЭлементыФормы.СчетУчетаПроцентовПоЗайму.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииВидаУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		Если НЕ ЗначениеЗаполнено(ПорядокПогашенияЗайма) Тогда
			ПорядокПогашенияЗайма = Перечисления.ПорядокПогашенияЗаймаПроцентов.Ежемесячно;
			НачалоПогашения = НачалоМесяца(Дата);
		КонецЕсли;
		ОтражатьВБухгалтерскомУчетеПриИзменении(ЭлементыФормы.ОтражатьВУправленческомУчете);
	Иначе 
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;	
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(НачалоПогашения);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
    мИмяВалютыДокумента = ВалютаДокумента.Наименование;
	мСчетБУ = СчетУчетаПроцентовПоЗайму;
	
	ОбновитьНадписьКурса();
	Если НЕ ЗначениеЗаполнено(СчетУчетаПроцентовПоЗайму) Тогда
		УстановитьВидимостьСубконто(0)
	Иначе
		УстановитьВидимостьСубконто(СчетУчетаПроцентовПоЗайму.ВидыСубконто.Количество());
	КонецЕсли;
	ПриИзмененииВидаУчета();
	

	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа
//
Процедура ДатаПриИзменении(Элемент = Неопределено)

	РаботаСДиалогами.ПроверитьНомерДокумента(ДокументОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;
	
КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" переключателя учета.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	ОтражатьВУправленческомУчете = НЕ ОтражатьВБухгалтерскомУчете;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		СчетУчетаПроцентовПоЗайму = ПланыСчетов.Хозрасчетный.ПроцентыПолученные;
		Субконто1 = ОбщегоНазначения.ПустоеЗначениеТипа(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов.ТипЗначения.Типы()[0]);
		УстановитьВидимостьСубконто(1);
	Иначе
		СчетУчетаПроцентовПоЗайму = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Субконто1 = "";
		Субконто2 = "";
		Субконто3 = "";
		УстановитьВидимостьСубконто(0);
	КонецЕсли;
	
	мСчетБУ = СчетУчетаПроцентовПоЗайму;
	//УстановитьНовыйНомер();
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	ПриИзмененииВидаУчета();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица   
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура ФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ОтражатьВУправленческомУчете Тогда
		ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	Иначе
		ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 0, СтандартнаяОбработка, Элемент.Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, ?(ОтражатьВУправленческомУчете,"Работники","РаботникиИДоговорники"), Текст, Организация);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, ?(ОтражатьВУправленческомУчете,"Работники","РаботникиИДоговорники"), Текст, Элемент.Значение, Организация, Истина);
КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" поля ввода процентов
//
Процедура ПроцентЗаПользованиеЗаймомПриИзменении(Элемент)
	ЭлементыФормы.СчетУчетаПроцентовПоЗайму.АвтоОтметкаНезаполненного = ОтражатьВБухгалтерскомУчете и Элемент.Значение > 0;
	Если ОтражатьВБухгалтерскомУчете и Элемент.Значение > 0 Тогда
		ЭлементыФормы.СчетУчетаПроцентовПоЗайму.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(СчетУчетаПроцентовПоЗайму);
	Иначе
		ЭлементыФормы.СчетУчетаПроцентовПоЗайму.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода валюты
//
Процедура ВалютаДокументаПриИзменении(Элемент)
    мИмяВалютыДокумента = ВалютаДокумента.Наименование;
	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента = СтруктураКурсаДокумента.Курс;
	КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	ОбновитьНадписьКурса();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода курса валюты
//
Процедура КурсДокументаПриИзменении(Элемент)
	ОбновитьНадписьКурса();
КонецПроцедуры

Процедура КурсДокументаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	// Выберем курс на дату документа
	РаботаСДиалогами.ВыбратьКурсВалюты(КурсДокумента,КратностьДокумента,ВалютаДокумента, Дата); 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, НачалоПогашения);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(НачалоПогашения);
	
КонецПроцедуры // ПериодРегистрацииПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	НачалоПогашения = ДобавитьМесяц(НачалоПогашения, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(НачалоПогашения);
	
КонецПроцедуры // ПериодРегистрацииРегулирование()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодРегистрацииОчистка()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, НачалоПогашения, ЭтаФорма);
	
КонецПроцедуры // ПериодРегистрацииНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

КонецПроцедуры // ОрганизацияПриИзменении()

Процедура СчетУчетаПроцентовПоЗаймуПриИзменении(Элемент)

	Если Элемент.Значение = мСчетБУ тогда
		Возврат;
	КонецЕсли;

	КоличествоСубконто = СчетУчетаПроцентовПоЗайму.ВидыСубконто.Количество();
	УстановитьВидимостьСубконто(КоличествоСубконто);

	Если КоличествоСубконто > 0 Тогда
		Субконто1 = ОбщегоНазначения.ПустоеЗначениеТипа(СчетУчетаПроцентовПоЗайму.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
	КонецЕсли;

	Если КоличествоСубконто > 1 Тогда
		Субконто2 = ОбщегоНазначения.ПустоеЗначениеТипа(СчетУчетаПроцентовПоЗайму.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]);
	КонецЕсли;

	Если КоличествоСубконто > 2 Тогда
		Субконто3 = ОбщегоНазначения.ПустоеЗначениеТипа(СчетУчетаПроцентовПоЗайму.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]);
	КонецЕсли;

	мСчетБУ = Элемент.Значение;

КонецПроцедуры // СчетУчетаПриИзменении()

Процедура СчетУчетаПроцентовПоЗаймуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
КонецПроцедуры

Процедура Субконто1Очистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Субконто1 = ОбщегоНазначения.ПустоеЗначениеТипа(СчетУчетаПроцентовПоЗайму.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
КонецПроцедуры

Процедура Субконто2Очистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Субконто2 = ОбщегоНазначения.ПустоеЗначениеТипа(СчетУчетаПроцентовПоЗайму.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]);
КонецПроцедуры

Процедура Субконто3Очистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Субконто3 = ОбщегоНазначения.ПустоеЗначениеТипа(СчетУчетаПроцентовПоЗайму.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура СотрудникПриИзменении(Элемент)
	ФизЛицо = Сотрудник.Физлицо;
КонецПроцедуры

Процедура СотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ОтражатьВБухгалтерскомУчете Тогда 
		ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1,СтандартнаяОбработка, Элемент.Значение);
	КонецЕсли;	
КонецПроцедуры







