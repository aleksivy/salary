////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период

Перем мСведенияОВидахРасчета;

Перем мРезультат;
Перем мОплаченоДнейЧасов;
Перем мОтработаноДней;
Перем мОтработаноЧасов;
Перем мНормаДней;
Перем мНормаЧасов;
Перем мКалендарныеДни;
                         
Перем мРасчетСреднегоРезультат; 
Перем мРасчетСреднегоРезультатПолный;
Перем мРасчетСреднегоРезультатУпр;
Перем мРасчетСреднегоСуммаПредела;
Перем мРасчетСреднегоОтработаноДней;
Перем мРасчетСреднегоОтработаноЧасов;
Перем мРасчетСреднегоКалендарныеДни;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Механизм исправлений
Перем мДокументИсправление;
Перем мДокументСторнирование;
Перем мКнопкаИсправление;
Перем мКнопкаОтменаИсправление;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбновитьВидимостьЭлементовФормы()
	
	РасчетСреднегоНеобходим =  (ВидПростоя = Перечисления.ВидыПростояРаботника.ПоНезависящимПричинам);
	ЭлементыФормы.ПроцентОплаты.Видимость = НЕ РасчетСреднегоНеобходим;
	ЭлементыФормы.НадписьПроцентОплаты.Видимость = НЕ РасчетСреднегоНеобходим;
	ЭлементыФормы.НадписьПроцент.Видимость = НЕ РасчетСреднегоНеобходим;
	
	ЭлементыФормы.Панель.Страницы.РасчетСреднего.Видимость = РасчетСреднегоНеобходим;
	
	мЕстьПремии = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ЕстьПремии;
	мЕстьГодоваяПремия = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ЕстьГодоваяПремия;
	
	Если мЕстьГодоваяПремия Тогда
		ЭлементыФормы.РамкаЕстьГодоваяПремия.Видимость= Истина;
		ЭлементыФормы.НадписьГод.Видимость= Истина;
		ЭлементыФормы.ГодоваяПремияБазовыйПериодНачало.Видимость= Истина;
		ЭлементыФормы.ГодоваяПремия.Видимость= Истина;
		ЭлементыФормы.РассчитатьПремияЗаГод.Видимость= Истина;
		
	Иначе
		ЭлементыФормы.РамкаЕстьГодоваяПремия.Видимость= Ложь;
		ЭлементыФормы.НадписьГод.Видимость= Ложь;
		ЭлементыФормы.ГодоваяПремияБазовыйПериодНачало.Видимость= Ложь;
		ЭлементыФормы.ГодоваяПремия.Видимость= Ложь;
		ЭлементыФормы.РассчитатьПремияЗаГод.Видимость= Ложь;
		
	КонецЕсли;
	
	Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
		ЭлементыФормы.РасчетСреднего.Колонки.ОтработаноДней.Видимость = Истина;
		ЭлементыФормы.РасчетСреднего.Колонки.ОтработаноЧасов.Видимость = Ложь;
		ЭлементыФормы.РасчетСреднего.Колонки.КалендарныеДни.Видимость = Ложь;
	ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
		ЭлементыФормы.РасчетСреднего.Колонки.ОтработаноДней.Видимость = Ложь;
		ЭлементыФормы.РасчетСреднего.Колонки.ОтработаноЧасов.Видимость = Истина;
		ЭлементыФормы.РасчетСреднего.Колонки.КалендарныеДни.Видимость = Ложь;
	Иначе
		ЭлементыФормы.РасчетСреднего.Колонки.ОтработаноДней.Видимость = Ложь;
		ЭлементыФормы.РасчетСреднего.Колонки.ОтработаноЧасов.Видимость = Ложь;
		ЭлементыФормы.РасчетСреднего.Колонки.КалендарныеДни.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьВидимостьЭлементовФормы()

// Управляет доступностью элементов формы, зависящих от целодневности простоя
//
Процедура ОбновитьДоступностьЭлементовФормы()
	
		
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументИсправление);
	ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	Если ДокументИсправлен Или ДокументСторнирован Тогда
		ТолькоПросмотр = Истина
	Иначе
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);		
	КонецЕсли;
	
	ЭлементыФормы.Сотрудник.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
	ЭлементыФормы.Организация.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
		
	ЭлементыФормы.ПанельОткрытьИсправление.Свертка = ?(ДокументИсправлен Или ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.ПанельОткрытьИсходный.Свертка = ?(ЭтоИсправление И Не ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	
	ЭлементыФормы.НадписьОткрытьИсправление.Заголовок = ?(ДокументСторнирован,НСтр("ru='Открыть сторно-документ';uk='Відкрити сторно-документ'"),НСтр("ru='Открыть исправление';uk='Відкрити виправлення'"));
	
	РаботаСДиалогами.УстановитьКнопкиИсправленияДокументаОдногоСотрудника(ПериодРегистрации, ДокументИсправлен, ДокументСторнирован, ЭлементыФормы.ДополнительныеДействия.Кнопки, мКнопкаИсправление, мКнопкаОтменаИсправление);
	
	// параметры в шапке
	ЭтоЦелосменныйПростой = СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
	ЭлементыФормы.ПанельПериодаОплаты.ТекущаяСтраница = ?(ЭтоЦелосменныйПростой,
			ЭлементыФормы.ПанельПериодаОплаты.Страницы.ЦелодневныйПериод,
			ЭлементыФормы.ПанельПериодаОплаты.Страницы.ВнутрисменныйПериод);
	
	ЭлементыФормы.Начисления.Колонки.ДатаОкончания.Видимость = ЭтоЦелосменныйПростой;
	ЭлементыФормы.Начисления.Колонки.ДатаОкончания.ИзменятьВидимость = ЭтоЦелосменныйПростой;
	ЭлементыФормы.Начисления.Колонки.Период.Видимость = ЭтоЦелосменныйПростой;
	ЭлементыФормы.Начисления.Колонки.Период.ИзменятьВидимость = ЭтоЦелосменныйПростой;
	
	ЭлементыФормы.Начисления.Колонки.ОплачиватьЧасов.Видимость = Не ЭтоЦелосменныйПростой;
	ЭлементыФормы.Начисления.Колонки.ОплачиватьЧасов.ИзменятьВидимость = Ложь;
	
	ЭлементыФормы.Начисления.Колонки.ДатаНачала.Положение = ?(ЭтоЦелосменныйПростой, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.НоваяКолонка);
	ЭлементыФормы.Начисления.Колонки.ДатаНачала.ТекстШапки = ?(ЭтоЦелосменныйПростой, "Начало", "Дата");

КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()

Процедура ВыполнитьАвторасчетРеквизитовСтрокиНачислений(РедактируемаяСтрока)
	
	РеквизитыНачисления = ПолучитьРеквизитыНачисления();
	// Пока
	Если НЕ ЗначениеЗаполнено(РедактируемаяСтрока.Показатель1) Тогда
		РедактируемаяСтрока.Показатель1 = РеквизитыНачисления.ОкладТариф;
	КонецЕсли; 
	
	//Подразделение организации
	Если НЕ ЗначениеЗаполнено(РедактируемаяСтрока.ПодразделениеОрганизации) Тогда
		РедактируемаяСтрока.ПодразделениеОрганизации = РеквизитыНачисления.ПодразделениеОрганизации;
	КонецЕсли;

	
КонецПроцедуры

// Записывает документ в режиме отмены проведения, спросив об этом у пользователя
Функция ЗаписатьДокументОтменивПроведение(Действие = "рассчитать")

	Если Проведен Тогда
		
		Если Вопрос(НСтр("ru='Автоматически ';uk='Автоматично '") + Действие +НСтр("ru=' документ можно только после отмены его проведения. Выполнить отмену проведения документа?';uk=' документ можна тільки після скасування його проведення. Виконати скасування проведення документа?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
		
	ИначеЕсли Модифицированность ИЛИ ЭтоНовый() Тогда
		
		Если Вопрос(НСтр("ru='Автоматически ';uk='Автоматично '") + Действие +НСтр("ru=' документ можно только после его записи. Записать?';uk=' документ можна тільки після його запису. Записати?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции  

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельНачисления);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетСреднего,ЭлементыФормы.КоманднаяПанельРасчетСреднего);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

// Определяет флажки-описатели состояния документа, формирует и показывает строку-описание
//
Процедура ОбновитьОписаниеСостоянияДокумента()

	// связанные документы
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументИсправление);
	Сторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	НеЗаполнен = Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Сотрудник);
	НеЗаполнен = НеЗаполнен Или Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ВидПростоя);
	
	ЭтоЦелосменныйПростой = СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
	ЗаполненСОшибками = ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) И ДатаНачала > ДатаОкончания;
	ЗаполненСОшибками = ЗаполненСОшибками Или (ЭтоЦелосменныйПростой И Не ЗначениеЗаполнено(ДатаОкончания));
	ЗаполненСОшибками = ЗаполненСОшибками Или (Не ЭтоЦелосменныйПростой И ОплачиватьЧасов = 0);
	
	Рассчитан = (Начисления.Количество() > 0);
	
	ОписаниеСостоянияДокумента = РаботаСДиалогами.ПолучитьОписаниеРасчетногоДокумента(Не НеЗаполнен,ЗаполненСОшибками,Рассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Сторнирован, ТолькоПросмотр); // поля структуры описания - ТекстСообщения и ВажностьСообщения
	РаботаСДиалогами.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если Не ЭтоНовый() Тогда
		мДокументИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"ТаблицаДокумента");
		мДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
		ОбновитьОписаниеСостоянияДокумента();
	Иначе	
		РаботаСДиалогами.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, НСтр("ru='Документ не заполнен';uk='Документ не заповнений'"), "СообщениеОПроблемах");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
		Если ВидПростоя.Пустая() Тогда
			ВидПростоя = Перечисления.ВидыПростояРаботника.ПоНезависящимПричинам;
			ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойПоСредней;
		КонецЕсли;
		
		Если СпособРегистрацииВремени.Пустая() Тогда
			СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
		КонецЕсли;
	Иначе 
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;	

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();

	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("ДатаНачала");
 	СтруктураКолонок.Вставить("ДатаОкончания");
 	//СтруктураКолонок.Вставить("Размер");
 	СтруктураКолонок.Вставить("Результат");
	СтруктураКолонок.Вставить("ФизЛицо");
	СтруктураКолонок.Вставить("Приказ");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();

	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("БазовыйПериодНачало");
 	СтруктураКолонок.Вставить("БазовыйПериодКонец");
 	СтруктураКолонок.Вставить("КоэффициентИндексации");
 	СтруктураКолонок.Вставить("Результат");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РасчетСреднего.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	
	// Список видов записей расчета среднего
	ЭлементыФормы.РасчетСреднего.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку);
	ЭлементыФормы.РасчетСреднего.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям);
	ЭлементыФормы.РасчетСреднего.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям);
	ЭлементыФормы.РасчетСреднего.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии);
	
	ПредставлениеПериодаРегистрации = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
	
	// Исправление документов
	мКнопкаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить;
	мКнопкаОтменаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление;
	ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	
	ОбновитьВидимостьЭлементовФормы();
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	ОбновитьДоступностьЭлементовФормы();
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	// оповестим исходный, исправляемый документ
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		Оповестить("ОбновитьФорму", Новый Структура("Команда, Объект","ДоступностьИсправленногоДокумента", ПерерассчитываемыйДокумент), Ссылка);
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьФорму" И Не ЭтоНовый() Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Команда = "ДоступностьИсправленногоДокумента" Тогда
					Если Параметр.Объект = Ссылка И мДокументИсправление <> Источник Тогда
						мДокументИсправление = Источник;
						ОбновитьДоступностьЭлементовФормы();
					КонецЕсли;
				ИначеЕсли Команда = "ДоступностьОтмененногоДокумента" Тогда
					Если Параметр.Объект = Ссылка Тогда
						Если мДокументСторнирование <> Источник Тогда
							мДокументСторнирование = Источник;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
						НовыйДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
						Если мДокументСторнирование <> НовыйДокументСторнирование Тогда
							мДокументСторнирование = НовыйДокументСторнирование;
							Если Не ЗначениеЗаполнено(мДокументСторнирование) Тогда
								РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
							КонецЕсли;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					КонецЕсли;
				Иначе
				КонецЕсли;
			Иначе
			КонецЕсли;
			
		Иначе
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРассчитатьВсе(Кнопка)
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Предупреждение(НСтр("ru='Перед заполнением документа необходимо выбрать организацию';uk='Перед заповненням документа необхідно вибрати організацію'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Предупреждение(НСтр("ru='Перед заполнением документа необходимо выбрать работника';uk='Перед заповненням документа необхідно вибрати працівника'"));
		Возврат;
	КонецЕсли;
    Если РасчетСреднего.Количество()>0 ИЛИ Начисления.Количество()>0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будет очищены. Продолжить?';uk='Перед заповненням табличні частини буде очищено. Продовжити?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Начисления.Очистить(); 
		РасчетСреднего.Очистить(); 
		Записать();
		
	ИначеЕсли Модифицированность() Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением документ будет записан. Продолжить?';uk='Перед заповненням документ буде записаний. Продовжити?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Записать();
		
	КонецЕсли;
	
	РасчитатьПараметрыСредней();
	Записать();
	
	Если ВидПростоя = Перечисления.ВидыПростояРаботника.ПоНезависящимПричинам Тогда
		АвтозаполнениеРасчетСреднего();
		РассчитатьРасчетСреднего();
	КонецЕсли;
	
	АвтозаполнениеНачисления();
	Записать();
	РассчитатьНачисления(Сотрудник, Ложь);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура ввода документа-исправления
Процедура ДополнительныеДействияИсправить(Кнопка)

	РаботаСДиалогами.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура отмены исправлений
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогами.ОтменитьИсправлениеДокумента(Ссылка);
	мДокументИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"ТаблицаДокумента");
	ОбновитьДоступностьЭлементовФормы();
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "Регулирование" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РаботаСДиалогами.РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры


Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	ОбновитьВидимостьЭлементовФормы();

КонецПроцедуры // ОрганизацияПриИзменении()

Процедура СотрудникПриИзменении(Элемент)

	Начисления.Очистить();
	РасчетСреднего.Очистить();

	Если ДатаОкончания <> Дата("00010101") Тогда
		РасчитатьПараметрыСредней();
	КонецЕсли;
	
КонецПроцедуры

Процедура СотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры


Процедура СотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры

Процедура СотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры

Процедура СпособРегистрацииВремениПриИзменении(Элемент)
	
	ПолучитьРеквизитыНачисления();
	ОбновитьДоступностьЭлементовФормы();
	
КонецПроцедуры


Процедура ВидПростояПриИзменении(Элемент)
	
	Если Начисления.Количество() > 0 Тогда 
		Если Вопрос(НСтр("ru='Очистить табличную часть ""Начисления"" и перезаполнить параметры для расчета средней';uk='Очистити табличну частину ""Нарахування"" і перезаповнити параметри для розрахунку середньої'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		Начисления.Очистить();
	КонецЕсли;
	
	ПолучитьРеквизитыНачисления();
	ОбновитьВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если ПериодРасчетаСреднегоНачало <> Дата('00010101') Тогда 
		Если Вопрос(НСтр("ru='Перезаполнить дополнительные параметры для расчета средней?';uk='Перезаповнити додаткові параметри для розрахунку середньої?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РасчитатьПараметрыСредней();

КонецПроцедуры

Процедура ВидУчетаВремениДляСреднейПриИзменении(Элемент)
	
	ОбновитьВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура РасчитатьПараметрыСредней()
	
	ЧислоМесяцев = 2;
	
	Если ДатаНачала = Дата('00010101') Тогда
		ПериодРасчетаСреднегоНачало	= Дата('00010101');
		ПериодРасчетаСреднегоКонец	= Дата('00010101');
		ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням;
		
	Иначе
		ПолучитьПериодПоРаботнику();
		
		ГодоваяПремияБазовыйПериодНачало = НачалоГода(НачалоГода(ПериодРасчетаСреднегоНачало)-1);
		ГодоваяПремия = ПроведениеРасчетов.РассчитатьПремияЗаГод(ГодоваяПремияБазовыйПериодНачало, Сотрудник);
		
	КонецЕсли;
	
КонецПроцедуры


Процедура РассчитатьСреднююНажатие(Элемент)
	
	РасчитатьСреднюю();
	
КонецПроцедуры

Процедура РассчитатьПремияЗаГодНажатие(Элемент)
	
	ГодоваяПремия = ПроведениеРасчетов.РассчитатьПремияЗаГод(ГодоваяПремияБазовыйПериодНачало, Сотрудник);
	
КонецПроцедуры

Процедура ГодоваяПремияБазовыйПериодНачалоПриИзменении(Элемент)
	ГодоваяПремияБазовыйПериодНачало = НачалоГода(ГодоваяПремияБазовыйПериодНачало);
КонецПроцедуры

Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	Если ЗначениеЗаполнено(мДокументИсправление) Тогда
		мДокументИсправление.ПолучитьФорму(, ЭтаФорма).Открыть();
	ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
		мДокументСторнирование.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ПерерассчитываемыйДокумент.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ Начисления

Процедура НачисленияПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мРезультат			= ТекущаяСтрока.Результат;
		мОплаченоДнейЧасов	= ТекущаяСтрока.ОплаченоДнейЧасов;
		мОтработаноДней		= ТекущаяСтрока.ОтработаноДней;
		мОтработаноЧасов	= ТекущаяСтрока.ОтработаноЧасов;
		мНормаДней			= ТекущаяСтрока.НормаДней;
		мНормаЧасов			= ТекущаяСтрока.НормаЧасов;
		мКалендарныеДни		= ТекущаяСтрока.КалендарныеДни;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
            	
	// сторно запись - красным
	Если ДанныеСтроки.Сторно Тогда
		
		ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);
		ОформлениеСтроки.Ячейки.ДатаНачала.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.ДатаОкончания.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	РаботаСДиалогами.ПриВыводеСтрокиНачисленийИУдержаний(ДанныеСтроки, ОформлениеСтроки, мСведенияОВидахРасчета);
	
КонецПроцедуры

Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	мДлинаСуток = 86400; // в секундах
	
	Если НоваяСтрока Тогда
		
		ТекущаяСтрока = Элемент.ТекущаяСтрока;
		ТекущаяСтрока.Сторно = Ложь;
		ТекущаяСтрока.ВидРасчета = ВидРасчета;
		
		ИндексСтроки = Начисления.Индекс(ТекущаяСтрока);
		Если ИндексСтроки > 0  Тогда
			ТекущаяСтрока.ДатаНачала = Начисления[ИндексСтроки-1].ДатаОкончания + мДлинаСуток;
		КонецЕсли; 
		ТекущаяСтрока.ДатаОкончания = ТекущаяСтрока.ДатаНачала;
 		ТекущаяСтрока.БазовыйПериодНачало = ТекущаяСтрока.ДатаНачала;
		ТекущаяСтрока.БазовыйПериодКонец = ТекущаяСтрока.ДатаОкончания;

		ПроведениеРасчетов.ПроставитьДанныеСтроки(Сотрудник, Сотрудник, ТекущаяСтрока.ДатаНачала, ПериодРегистрации, ВидРасчета, ЭлементыФормы.Начисления.ТекущаяСтрока);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	Если ТекущаяСтрока.Сторно Тогда
		Возврат;
	КонецЕсли; 
	
	// Авторасчет незаполненных реквизитов строки
	ВыполнитьАвторасчетРеквизитовСтрокиНачислений(ТекущаяСтрока);
	
	// Разбивка строк на помесячные
	РазницаВМесяцах = (Год(ТекущаяСтрока.ДатаОкончания)*12 + Месяц(ТекущаяСтрока.ДатаОкончания)) - (Год(ТекущаяСтрока.ДатаНачала)*12 + Месяц(ТекущаяСтрока.ДатаНачала));
	Если РазницаВМесяцах > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Разбить строку начислений на помесячные записи?';uk='Розбити рядок нарахувань на помісячні записи?'");
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПроведениеРасчетов.РазбитьСтрокуНачисленийНаПомесячныеЗаписи(ТекущаяСтрока, Начисления);
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура НачисленияНазначениеПриИзменении(Элемент)

	ДатаСобытия = ?(ЗначениеЗаполнено(ЭлементыФормы.Начисления.ТекущиеДанные.ДатаОкончания), ЭлементыФормы.Начисления.ТекущиеДанные.ДатаОкончания, Дата);
	мТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	ПроведениеРасчетов.ПроставитьДанныеСтроки(мТекущаяСтрока.Сотрудник, Элемент.Значение, ДатаСобытия, ПериодРегистрации, мТекущаяСтрока.ВидРасчета, мТекущаяСтрока);
	Если Не ЗначениеЗаполнено(ЭлементыФормы.Начисления.ТекущиеДанные.Сотрудник) Тогда
		ЭлементыФормы.Начисления.ТекущиеДанные.Сотрудник = ?(Элемент.Значение.ОсновноеНазначение=Справочники.СотрудникиОрганизаций.ПустаяСсылка(), Элемент.Значение, Элемент.Значение.ОсновноеНазначение);
	КонецЕсли;
	
КонецПроцедуры // НачисленияНазначениеПриИзменении()


Процедура НачисленияРезультатПриИзменении(Элемент)
		
	Если Элемент.Значение <> мРезультат Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мРезультат = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияОплаченоДнейЧасовПриИзменении(Элемент)
		
	Если Элемент.Значение <> мОтработаноДней Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мОплаченоДнейЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияОтработаноДнейПриИзменении(Элемент)
		
	Если Элемент.Значение <> мОтработаноДней Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мОтработаноДней = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияОтработаноЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мОтработаноЧасов Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мОтработаноЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияКалендарныеДниПриИзменении(Элемент)
		
	Если Элемент.Значение <> мКалендарныеДни Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мКалендарныеДни = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияНормаДнейПриИзменении(Элемент)
		
	Если Элемент.Значение <> мНормаДней Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мНормаДней = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияНормаЧасовПриИзменении(Элемент)
		
	Если Элемент.Значение <> мНормаЧасов Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мНормаЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ Начисления

Процедура КоманднаяПанельНачисленийЗаполнить(Кнопка)
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Предупреждение(НСтр("ru='Перед началом заполнения табличной части необходимо выбрать работника';uk='Перед початком заповнення табличної частини необхідно вибрати працівника'"));
		Возврат;
	КонецЕсли;
	ТекстВопроса = НСтр("ru='Перед заполнением из табличная часть ""Начисления"" будет очищена. Продолжить?';uk='Перед заповненням таблична частина ""Нарахування"" буде очищена. Продовжити?'");
	Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Начисления.Очистить(); 
	
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены Тогда
		ДатаОкончания = ДатаНачала;
	КонецЕсли;
	
	Записать();
	
	АвтозаполнениеНачисления();
	
КонецПроцедуры

Процедура КоманднаяПанельНачисленийРассчитать(Кнопка)

	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	КомментироватьРасчет = Ложь;
	Если Найти(Кнопка.Имя,"СКомментарием") > 0  Тогда
		КомментироватьРасчет = Истина;
	КонецЕсли;

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьНачисления(Сотрудник, КомментироватьРасчет);
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат				= ТекущаяСтрока.Результат;
		мБылоОтработаноДней				= ТекущаяСтрока.ОтработаноДней;
		мБылоОтработаноЧасов			= ТекущаяСтрока.ОтработаноЧасов;
		мБылоНормаДней					= ТекущаяСтрока.НормаДней;
		мБылоНормаЧасов					= ТекущаяСтрока.НормаЧасов;
		мБылоКалендарныеДни				= ТекущаяСтрока.КалендарныеДни;
		мБылоОплаченоДнейЧасов			= ТекущаяСтрока.ОплаченоДнейЧасов;
	КонецЕсли;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ РасчетСреднего

Процедура РасчетСреднегоПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.РасчетСреднего.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мРасчетСреднегоРезультат		= ТекущаяСтрока.Результат;
		мРасчетСреднегоРезультатПолный	= ТекущаяСтрока.РезультатПолный;
		мРасчетСреднегоСуммаПредела		= ТекущаяСтрока.СуммаПредела;
		мРасчетСреднегоОтработаноДней	= ТекущаяСтрока.ОтработаноДней;
		мРасчетСреднегоОтработаноЧасов	= ТекущаяСтрока.ОтработаноЧасов;
		мРасчетСреднегоКалендарныеДни	= ТекущаяСтрока.КалендарныеДни;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетСреднегоПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		Предупреждение(НСтр("ru='Перед началом заполнения табличной части необходимо выбрать работника';uk='Перед початком заповнення табличної частини необхідно вибрати працівника'"));
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

Процедура РасчетСреднегоПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		
		Элемент.ТекущаяСтрока.КоэффициентПовышенияОкладов = 1;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетСреднегоПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
		
	ЯчейкаСКартинкой = ОформлениеСтроки.Ячейки.Картинка;
	ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
	ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);
	
	ОформлениеСтроки.Ячейки.ПериодСредней.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.Норма.Видимость = Ложь;
	
КонецПроцедуры


Процедура РасчетСреднегоРезультатПриИзменении(Элемент)
		
	Если Элемент.Значение <> мРасчетСреднегоРезультат Тогда
		ЭлементыФормы.РасчетСреднего.ТекущаяСтрока.Авторасчет = Ложь;
		мРасчетСреднегоРезультат = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетСреднегоРезультатПолныйПриИзменении(Элемент)
		
	Если Элемент.Значение <> мРасчетСреднегоРезультатПолный Тогда
		ЭлементыФормы.РасчетСреднего.ТекущаяСтрока.Авторасчет = Ложь;
		мРасчетСреднегоРезультатПолный = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетСреднегоОтработаноДнейПриИзменении(Элемент)
		
	Если Элемент.Значение <> мРасчетСреднегоОтработаноДней Тогда
		ЭлементыФормы.РасчетСреднего.ТекущаяСтрока.Авторасчет = Ложь;
		мРасчетСреднегоОтработаноДней = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетСреднегоОтработаноЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мРасчетСреднегоОтработаноЧасов Тогда
		ЭлементыФормы.РасчетСреднего.ТекущаяСтрока.Авторасчет = Ложь;
		мРасчетСреднегоОтработаноЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетСреднегоКалендарныеДниПриИзменении(Элемент)
		
	Если Элемент.Значение <> мРасчетСреднегоКалендарныеДни Тогда
		ЭлементыФормы.РасчетСреднего.ТекущаяСтрока.Авторасчет = Ложь;
		мРасчетСреднегоКалендарныеДни = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ РасчетСреднего

Процедура КоманднаяПанельРасчетСреднегоЗаполнить(Кнопка)
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Предупреждение(НСтр("ru='Перед началом заполнения табличной части необходимо выбрать работника';uk='Перед початком заповнення табличної частини необхідно вибрати працівника'"));
		Возврат;
	КонецЕсли;
	Если РасчетСреднего.Количество()>0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть ""Расчет среднего"" будет очищена. Продолжить?';uk='Перед заповненням таблична частина ""Розрахунок середнього"" буде очищена. Продовжити?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		РасчетСреднего.Очистить(); 
		Записать();
		
	ИначеЕсли Модифицированность() Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением документ будет записан. Продолжить?';uk='Перед заповненням документ буде записаний. Продовжити?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Записать();
		
	КонецЕсли;

	АвтозаполнениеРасчетСреднего();
	
КонецПроцедуры

Процедура КоманднаяПанельРасчетСреднегоРассчитать(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	КомментироватьРасчет = Ложь;
	Если Найти(Кнопка.Имя,"СКомментарием") > 0  Тогда
		КомментироватьРасчет = Истина;
	КонецЕсли;

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьРасчетСреднего( КомментироватьРасчет );
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.РасчетСреднего.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мРасчетСреднегоРезультат		= ТекущаяСтрока.Результат;
		мРасчетСреднегоРезультатПолный	= ТекущаяСтрока.РезультатПолный;
		мРасчетСреднегоСуммаПредела		= ТекущаяСтрока.СуммаПредела;
		мРасчетСреднегоОтработаноДней	= ТекущаяСтрока.ОтработаноДней;
		мРасчетСреднегоОтработаноЧасов	= ТекущаяСтрока.ОтработаноЧасов;
		мРасчетСреднегоКалендарныеДни	= ТекущаяСтрока.КалендарныеДни;
	КонецЕсли;
	
	//РассчитатьТЧРасчетСреднего();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ФОРМЫ

мСведенияОВидахРасчета = Новый Соответствие;
