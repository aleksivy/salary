Перем мНачДата;			// дата начала месяца
Перем мКонДата;			// дата окончания месяца
Перем мНачГраница;		// граница начала периода
Перем мКонГраница;		// граница окончания периода
Перем мПроводки;	// указатель на движения документа по регистру бухгалтерии Международный

// Процедура устанавливает в качестве вида субконто, вид соответствующего субконто в счете.
//
// Параметры:
//  Счет 			- счет из плана счетов МСФО 
//  Субконто		- субконто, вид которого необходимо установить
//  Имя субконто	- число или строка, соответствующее наименованию вида субконто для счета в плане счетов
//  ЗначениеСубконто- значение, возможно установленное ранее, приводимое к соответствующему типу
//  Сообщать 		- флаг вывода сообщений об ошибках
//  Заголовок		- заголовок окна, содержащего сообщение об ошибках
//  ВидыСубконто	- совокупность видов субконто счета
// 
Процедура УстановитьСубконтоМСФО(Счет, Субконто, ИмяСубконто, ЗначениеСубконто, Сообщать = Ложь, Заголовок = "", ВидыСубконтоСчета = Неопределено) Экспорт

	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Если ВидыСубконтоСчета = Неопределено Тогда
	     ВидыСубконтоСчета = Счет.ВидыСубконто;
	КонецЕсли; 
	
	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда

		Если ИмяСубконто > ВидыСубконтоСчета.Количество() Тогда
			Возврат;
		КонецЕсли;

		ВидСубк = ВидыСубконтоСчета[ИмяСубконто - 1].ВидСубконто;

	Иначе
		Попытка
			ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяСубконто];
		Исключение
			Возврат;
		КонецПопытки;
		
		Если ВидыСубконтоСчета.Найти(ВидСубк) = Неопределено Тогда
			Если Сообщать тогда
				Сообщить("Вид субконто <" + ВидСубк + "> для счета """+Счет.Код +" ("+Счет.Наименование+")"" не определен.");
			КонецЕсли;
			Возврат;
		КонецЕсли;

	КонецЕсли;

	Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		Субконто.Вставить(ВидСубк, ЗначениеСубконто);

	ИначеЕсли Сообщать тогда
		Сообщить("Неверное значение """ + ЗначениеСубконто + """ для вида субконто <" + ВидСубк + ">");

	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// процедура обработчик проведения документа
Процедура ОбработкаПроведения(Отказ)
	
	ЗакрытиеСчетовЗатрат(Отказ);
	
КонецПроцедуры

// Выполняет закрытие счетов затрат
//
Процедура ЗакрытиеСчетовЗатрат( Отказ )
	
	мПроводки = Движения.Хозрасчетный;
	лСчетДляЗакрытия = ПланыСчетов.Хозрасчетный.АдминистративныеРасходы;
	лНаСчет = ПланыСчетов.Хозрасчетный.РезультатОперационнойДеятельности;
	
	ОтборПоСубконто = Новый Структура("Организация,Счет", Организация, лСчетДляЗакрытия);
	
	лИзмерения = "Организация,Валюта,НалоговоеНазначение,Счет,Субконто1,Субконто2,Субконто3";
	ДанныеРегистраБухгалтерии = РегистрыБухгалтерии.Хозрасчетный.Обороты(НачалоМесяца(Дата), Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая),,, ОтборПоСубконто, лИзмерения);
	
	Для Каждого ДанныеРегистра Из ДанныеРегистраБухгалтерии Цикл
		
		СуммаКСписаниюГрн = 0;
		СуммаКСписаниюДол = 0;
		
		Если ДанныеРегистра.Счет.Вид = ВидСчета.Активный Тогда
			СуммаКСписаниюГрн	= ДанныеРегистра.СуммаОборотДт-ДанныеРегистра.СуммаОборотКт;
			СуммаКСписаниюДол	= ДанныеРегистра.ВалютнаяСуммаОборотДт-ДанныеРегистра.ВалютнаяСуммаОборотКт;
		ИначеЕсли ДанныеРегистра.Счет.Вид = ВидСчета.Пассивный Тогда
			СуммаКСписаниюГрн	= ДанныеРегистра.СуммаОборотКт-ДанныеРегистра.СуммаОборотДт;
			СуммаКСписаниюДол	= ДанныеРегистра.ВалютнаяСуммаОборотКт-ДанныеРегистра.ВалютнаяСуммаОборотДт;
		Иначе
			лСуммаОборотаГрн = ДанныеРегистра.СуммаОборотДт-ДанныеРегистра.СуммаОборотКт;
			СуммаКСписаниюГрн = ?(лСуммаОборотаГрн >= 0, лСуммаОборотаГрн, -лСуммаОборотаГрн);
			лСуммаОборотаДол = ДанныеРегистра.ВалютнаяСуммаОборотДт - ДанныеРегистра.ВалютнаяСуммаОборотКт;
			СуммаКСписаниюДол = ?(лСуммаОборотаДол >= 0, лСуммаОборотаДол, -лСуммаОборотаДол);
		КонецЕсли;
		
		Если (СуммаКСписаниюГрн = 0) и (СуммаКСписаниюДол = 0) Тогда Продолжить; КонецЕсли;
		
		// если не указана база распределения, то пытаемся списывать на аналогичные субконто
		Проводка = мПроводки.Добавить();
		
		Проводка.Период      		= Дата;
		Проводка.Организация 		= Организация;
		Проводка.Содержание 		= "Closing acc. 92";
		Проводка.НалоговоеНазначениеДт = ДанныеРегистра.НалоговоеНазначение;
		Проводка.НалоговоеНазначениеКт = ДанныеРегистра.НалоговоеНазначение;
		Проводка.ВалютаДт			= ДанныеРегистра.Валюта;
		Проводка.ВалютаКт			= ДанныеРегистра.Валюта;
		
		Проводка.Сумма				= СуммаКСписаниюГрн;
		Проводка.ВалютнаяСуммаДт	= СуммаКСписаниюДол;
		Проводка.ВалютнаяСуммаКт	= СуммаКСписаниюДол;
		
		Если ДанныеРегистра.Счет.Вид = ВидСчета.Активный Тогда
			Проводка.СчетДт 			= лНаСчет;
			Проводка.СчетКт 			= лСчетДляЗакрытия;
			
			Для Сч = 1 По Проводка.СчетКт.ВидыСубконто.Количество() Цикл
				УстановитьСубконтоМСФО(Проводка.СчетКт,Проводка.СубконтоКт, Сч, ДанныеРегистра["Субконто" + сч]);
				
				Для счСубконтоНа = 1 По Проводка.СчетДт.ВидыСубконто.Количество() Цикл
					Если Проводка.СчетКт.ВидыСубконто[Сч - 1].ВидСубконто = Проводка.СчетДт.ВидыСубконто[счСубконтоНа - 1].ВидСубконто Тогда
						УстановитьСубконтоМСФО(Проводка.СчетДт,Проводка.СубконтоДт, счСубконтоНа, ДанныеРегистра["Субконто" + сч]);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли ДанныеРегистра.Счет.Вид = ВидСчета.Пассивный Тогда
			Проводка.СчетДт 			= лСчетДляЗакрытия;
			Проводка.СчетКт 			= лНаСчет;
			
			Для Сч = 1 По Проводка.СчетДт.ВидыСубконто.Количество() Цикл							
				УстановитьСубконтоМСФО(Проводка.СчетДт,Проводка.СубконтоДт, сч, ДанныеРегистра["Субконто" + сч]);
				
				Для счСубконтоНа = 1 По Проводка.СчетКт.ВидыСубконто.Количество()  Цикл
					Если Проводка.СчетДт.ВидыСубконто[Сч - 1].ВидСубконто = Проводка.СчетКт.ВидыСубконто[счСубконтоНа - 1].ВидСубконто Тогда
						УстановитьСубконтоМСФО(Проводка.СчетКт,Проводка.СубконтоКт, счСубконтоНа, ДанныеРегистра["Субконто" + сч]);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		Иначе
			Если ДанныеРегистра.СуммаОборотДт > 0 Тогда
				Проводка.СчетДт 			= лНаСчет;
				Проводка.СчетКт 			= лСчетДляЗакрытия;
				
				Для Сч = 1 По Проводка.СчетКт.ВидыСубконто.Количество() Цикл
					УстановитьСубконтоМСФО(Проводка.СчетКт,Проводка.СубконтоКт, Сч, ДанныеРегистра["Субконто" + сч]);
					
					Для счСубконтоНа = 1 По Проводка.СчетДт.ВидыСубконто.Количество()  Цикл
						Если Проводка.СчетКт.ВидыСубконто[Сч - 1].ВидСубконто = Проводка.СчетДт.ВидыСубконто[счСубконтоНа - 1].ВидСубконто Тогда
							УстановитьСубконтоМСФО(Проводка.СчетДт,Проводка.СубконтоДт, счСубконтоНа, ДанныеРегистра["Субконто" + сч]);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			ИначеЕсли ДанныеРегистра.СуммаОборотКт > 0 Тогда
				Проводка.СчетДт 			= лСчетДляЗакрытия;
				Проводка.СчетКт 			= лНаСчет;
				
				Для Сч = 1 По Проводка.СчетДт.ВидыСубконто.Количество() Цикл
					УстановитьСубконтоМСФО(Проводка.СчетДт,Проводка.СубконтоДт, сч, ДанныеРегистра["Субконто" + сч]);
					
					Для счСубконтоНа = 1 По Проводка.СчетКт.ВидыСубконто.Количество()  Цикл
						Если Проводка.СчетДт.ВидыСубконто[Сч - 1].ВидСубконто = Проводка.СчетКт.ВидыСубконто[счСубконтоНа - 1].ВидСубконто Тогда
							УстановитьСубконтоМСФО(Проводка.СчетКт,Проводка.СубконтоКт, счСубконтоНа, ДанныеРегистра["Субконто" + сч]);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	мПроводки.Записать();
КонецПроцедуры // Закрытие счетов МСФО()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда Организация = глЗначениеПеременной("ОсновнаяОрганизация"); КонецЕсли;
	Если Не ЗначениеЗаполнено(Ответственный) Тогда Ответственный = глЗначениеПеременной("глТекущийПользователь"); КонецЕсли;
	
КонецПроцедуры
