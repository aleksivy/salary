////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мФормаВыбораПервичногоБольничногоЛиста;
Перем мФормаВыбораПерерасчитываемогоБольничногоЛиста;

Перем мРезультат;
Перем мОплаченоДнейЧасов;
Перем мОтработаноДней;
Перем мОтработаноЧасов;
Перем мНормаДней;
Перем мНормаЧасов;
Перем мКалендарныеДни;
                         
Перем мРасчетСреднегоРезультат; 
Перем мРасчетСреднегоРезультатПолный;
Перем мРасчетСреднегоРезультатУпр;
Перем мРасчетСреднегоСуммаПредела;
Перем мРасчетСреднегоОтработаноДней;
Перем мРасчетСреднегоОтработаноЧасов;
Перем мРасчетСреднегоКалендарныеДни;

Перем мСведенияОВидахРасчета;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Механизм исправлений
Перем мДокументИсправление;
Перем мДокументСторнирование;
Перем мКнопкаИсправление;
Перем мКнопкаОтменаИсправление;

Перем мДокументПродолжение;
Перем мБылПервичныйБольничныйЛист;

Перем мПричинаНетрудоспособности;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбновитьВидимостьЭлементовФормы()
	
	ДокументЕстьПродолжениемБЛ = ЗначениеЗаполнено(ПервичныйБольничныйЛист);
	
	ЭлементыФормы.НадписьПроцентОплаты.Доступность = НЕ ДокументЕстьПродолжениемБЛ;
	ЭлементыФормы.ПроцентОплаты.Доступность = НЕ ДокументЕстьПродолжениемБЛ;
	
	ЭлементыФормы.РасчетСреднего.ТолькоПросмотр = ДокументЕстьПродолжениемБЛ;
	
	Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
		ЭлементыФормы.РасчетСреднего.Колонки.Отработано.Видимость = Истина;
		ЭлементыФормы.РасчетСреднего.Колонки.ОтработаноДней.Видимость = Истина;
		ЭлементыФормы.РасчетСреднего.Колонки.ОтработаноДней.Положение = ПоложениеКолонки.НаСледующейСтроке;
		ЭлементыФормы.РасчетСреднего.Колонки.ОтработаноЧасов.Видимость = Ложь;
		ЭлементыФормы.РасчетСреднего.Колонки.КалендарныеДни.Видимость = Ложь;
	ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
		ЭлементыФормы.РасчетСреднего.Колонки.Отработано.Видимость = Истина;
		ЭлементыФормы.РасчетСреднего.Колонки.ОтработаноДней.Видимость = Ложь;
		ЭлементыФормы.РасчетСреднего.Колонки.ОтработаноЧасов.Видимость = Истина;
		ЭлементыФормы.РасчетСреднего.Колонки.ОтработаноЧасов.Положение = ПоложениеКолонки.НаСледующейСтроке;
		ЭлементыФормы.РасчетСреднего.Колонки.КалендарныеДни.Видимость = Ложь;
	Иначе 
		ЭлементыФормы.РасчетСреднего.Колонки.Отработано.Видимость = Ложь;
		ЭлементыФормы.РасчетСреднего.Колонки.ОтработаноДней.Видимость = Ложь;
		ЭлементыФормы.РасчетСреднего.Колонки.ОтработаноЧасов.Видимость = Ложь;
		ЭлементыФормы.РасчетСреднего.Колонки.КалендарныеДни.Видимость = Истина;
		ЭлементыФормы.РасчетСреднего.Колонки.КалендарныеДни.Положение = ПоложениеКолонки.НаСледующейСтроке;
	КонецЕсли;
	
	Если Дата >= '20091215000000' И ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		ЭлементыФормы.НадписьСуммаНижнейГраницыСредней.Видимость = Истина;
		ЭлементыФормы.СуммаНижнейГраницыСредней.Видимость = Истина;
	Иначе
		ЭлементыФормы.ОплачивалВзносыМеньше6Месяцев.Видимость = Истина;
		ЭлементыФормы.НадписьСуммаНижнейГраницыСредней.Видимость = Ложь;
		ЭлементыФормы.СуммаНижнейГраницыСредней.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры
Процедура ИзменитьЗаголовокОграничения()
	Если  НЕ ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда 
		
		ОграниченияПоМинимальнойЗарплате = РегистрыСведений.МинимальнаяОплатаТруда.СрезПоследних(ДатаНачала);
		Если ОграниченияПоМинимальнойЗарплате.Количество() > 0 Тогда 
			ОграничениеПоМинимальнойЗарплате = ОграниченияПоМинимальнойЗарплате[0].Размер;
		Иначе	
			ОграничениеПоМинимальнойЗарплате = 0;
		КонецЕсли;	
		Если ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			ЭлементыФормы.ОплачивалВзносыМеньше6Месяцев.Заголовок = НСтр("ru='Применять ограничение размером мин. зарплаты (';uk='Застосовувати обмеження розміром мін. зарплати ('") + ОграничениеПоМинимальнойЗарплате*2 + НСтр("ru=' грн.)';uk=' грн.)'");
		Иначе
			ЭлементыФормы.ОплачивалВзносыМеньше6Месяцев.Заголовок = НСтр("ru='Применять ограничение размером мин. зарплаты (';uk='Застосовувати обмеження розміром мін. зарплати ('") + ОграничениеПоМинимальнойЗарплате + НСтр("ru=' грн.)';uk=' грн.)'");
		КонецЕсли;
	Иначе  
		ОграничениеПоМинимальнойЗарплате = ПервичныйБольничныйЛист.ОграничениеПоМинимальнойЗарплате;
		ОплачивалВзносыМеньше6Месяцев = ПервичныйБольничныйЛист.ОплачивалВзносыМеньше6Месяцев;
		Если ПервичныйБольничныйЛист.ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			ЭлементыФормы.ОплачивалВзносыМеньше6Месяцев.Заголовок = НСтр("ru='Применять ограничение размером мин. зарплаты (';uk='Застосовувати обмеження розміром мін. зарплати ('") + ОграничениеПоМинимальнойЗарплате*2 + НСтр("ru=' грн.)';uk=' грн.)'");
		Иначе
			ЭлементыФормы.ОплачивалВзносыМеньше6Месяцев.Заголовок = НСтр("ru='Применять ограничение размером мин. зарплаты (';uk='Застосовувати обмеження розміром мін. зарплати ('") + ОграничениеПоМинимальнойЗарплате + НСтр("ru=' грн.)';uk=' грн.)'");
		КонецЕсли
	КонецЕсли
КонецПроцедуры	

// Устанавливает значение колонки табличной части начислений для всех строк с признаком Сторно=Ложь
Процедура ОбновитьЗначенияКолонкиТаблицыНачислений()
	
	НайдСтроки = Начисления.НайтиСтроки(Новый Структура("Сторно", Ложь));
	Для каждого Строка Из НайдСтроки Цикл
			Показатели = ОграничениеСУчетомСтажаМеньше6Мес(Строка.Назначение);
			ЗаполнитьЗначенияСвойств(Строка, Показатели)
	КонецЦикла; 		
	
КонецПроцедуры
 
Процедура ВыполнитьАвторасчетРеквизитовСтрокиНачислений(ТекущаяСтрока)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудник",ТекущаяСтрока.Назначение);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаНачала);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|
	|";
	
	// подразделние, график и вид учета времени
	ПрежниеДанные = Запрос.Выполнить().Выбрать();
	Если ПрежниеДанные.Следующий() тогда
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ПодразделениеОрганизации) Тогда
			ТекущаяСтрока.ПодразделениеОрганизации =  ПрежниеДанные.ПодразделениеОрганизации; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Выполняет заполнение необходимых данных при изменении первичного БЛ
Процедура ПриИзмененииПервичногоБольничногоЛиста()
	Перем ВидРасчетаЗаСчетОрганизации, КвоДнейЗаСчетОрганизации;
	
	// Скопируем данные из первичного-листа 
	Если ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда
		
		СуммаСредней	= ПервичныйБольничныйЛист.СуммаСредней;		   		
		
		ПериодРасчетаСреднегоНачало	= ПервичныйБольничныйЛист.ПериодРасчетаСреднегоНачало;
		ПериодРасчетаСреднегоКонец	= ПервичныйБольничныйЛист.ПериодРасчетаСреднегоКонец;
	    ВидУчетаВремениДляСредней	= ПервичныйБольничныйЛист.ВидУчетаВремениДляСредней;
		ПроцентОплаты				= ПервичныйБольничныйЛист.ПроцентОплаты;
		СуммаПределаСредней			= ПервичныйБольничныйЛист.СуммаПределаСредней;
		ЧислоМесяцев				= ПервичныйБольничныйЛист.ЧислоМесяцев;
        ДатаНачала					= КонецДня(ПервичныйБольничныйЛист.ДатаОкончания) + 1; 
		
	КонецЕсли; 
	ИзменитьЗаголовокОграничения();
	ОбновитьВидимостьЭлементовФормы();
	
КонецПроцедуры 

Процедура ПриИзмененииПерерассчитываемогоДокумента()
	Перем ВидРасчетаЗаСчетОрганизации, КвоДнейЗаСчетОрганизации;
	
	// Скопируем данные из первичного-листа 
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		
		Начисления.Очистить(); 
		
	КонецЕсли; 
	
	ОбновитьВидимостьЭлементовФормы();
	
КонецПроцедуры // ПриИзмененииПерерассчитываемогоДокумента()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельНачислений);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетСреднего,ЭлементыФормы.КоманднаяПанельРасчетСреднего);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

// Управляет видимостью и доступностью элементов формы
//
Процедура ОбновитьДоступностьЭлементовФормы()
	
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументИсправление);
	ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	ДокументЕстьПродолжениеБЛ = ЗначениеЗаполнено(ПервичныйБольничныйЛист);
	
	Если ДокументИсправлен Или ДокументСторнирован Тогда
		ТолькоПросмотр = Истина
	Иначе
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);		
	КонецЕсли;
	
	ЭлементыФормы.Сотрудник.ТолькоПросмотр		= ТолькоПросмотр Или ЭтоИсправление;
	ЭлементыФормы.Организация.ТолькоПросмотр	= ТолькоПросмотр Или ЭтоИсправление;
		
	ЭлементыФормы.ПанельОткрытьИсправление.Свертка = ?(ДокументИсправлен Или ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.ПанельОткрытьИсходный.Свертка = ?(ЭтоИсправление И Не ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	
	ЭлементыФормы.НадписьОткрытьИсправление.Заголовок = ?(ДокументСторнирован,НСтр("ru='Открыть сторно-документ';uk='Відкрити сторно-документ'"),НСтр("ru='Открыть исправление';uk='Відкрити виправлення'"));
	
	РаботаСДиалогами.УстановитьКнопкиИсправленияДокументаОдногоСотрудника(ПериодРегистрации, ДокументИсправлен, ДокументСторнирован, ЭлементыФормы.ДополнительныеДействия.Кнопки, мКнопкаИсправление, мКнопкаОтменаИсправление);
	
	ЭлементыФормы.ПричинаНетрудоспособности.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ;
	ЭлементыФормы.ПроцентОплаты.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ;
	
	ЭлементыФормы.РасчетСреднего.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ;

КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()

// Определяет флажки-описатели состояния документа, формирует и показывает строку-описание
//
Процедура ОбновитьОписаниеСостоянияДокумента()

	// связанные документы
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументИсправление);
	Сторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	ЯвляетсяПродолжением = ЗначениеЗаполнено(ПервичныйБольничныйЛист);
	ИмеетПродолжение = ЗначениеЗаполнено(мДокументПродолжение);
	
	НеЗаполнен = Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Сотрудник) Или Не ЗначениеЗаполнено(ПричинаНетрудоспособности);
	НеЗаполнен = НеЗаполнен Или (Не ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончания));
	
	ЗаполненСОшибками = ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) И ДатаНачала > ДатаОкончания;
	
	Рассчитан = (Начисления.Количество() > 0);
	
	ОписаниеСостоянияДокумента = РаботаСДиалогами.ПолучитьОписаниеРасчетногоДокумента(Не НеЗаполнен, ЗаполненСОшибками, Рассчитан, Проведен, ЭтоИсправление, ДокументИсправлен, Сторнирован, ТолькоПросмотр, ИмеетПродолжение, ЯвляетсяПродолжением); // поля структуры описания - ТекстСообщения и ВажностьСообщения
	РаботаСДиалогами.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

Функция ПолучитьПродолжение(ДокументСсылка = Неопределено)  
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено	
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Продолжения.Ссылка
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту КАК Продолжения
	|ГДЕ
	|	Продолжения.ПервичныйБольничныйЛист = &ИсходныйДокумент";
	
	Запрос.УстановитьПараметр("ИсходныйДокумент",ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка
	Иначе
		Возврат Документы.НачислениеПоБольничномуЛисту.ПустаяСсылка()
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если Не ЭтоНовый() Тогда
		мДокументИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"ТаблицаДокумента");
		мДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
		мДокументПродолжение = ПолучитьПродолжение(Ссылка);
		ОбновитьОписаниеСостоянияДокумента();
	Иначе	
		РаботаСДиалогами.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, НСтр("ru='Документ не заполнен';uk='Документ не заповнений'"), "СообщениеОПроблемах");
	КонецЕсли;

КонецПроцедуры

Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
		Если Не ЗначениеЗаполнено(ВидУчетаВремениДляСредней) Тогда
			ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПричинаНетрудоспособности) Тогда
			ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ОбщееЗаболевание;
		КонецЕсли;
				
	КонецЕсли;	
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();
	
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ДатаОкончания");
	СтруктураКолонок.Вставить("Результат");
	// колонки-шапки

	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();
	
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("БазовыйПериодНачало");
	СтруктураКолонок.Вставить("БазовыйПериодКонец");
	СтруктураКолонок.Вставить("КоэффициентПовышенияОкладов");
	СтруктураКолонок.Вставить("Результат");
	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РасчетСреднего.Колонки, СтруктураКолонок);
	
	// Не отображать в подвале некоторые колонки из шапки                                   
	ЭлементыФормы.Начисления.Колонки.Период.ОтображатьВПодвале = Ложь;
	ЭлементыФормы.Начисления.Колонки.БазовыйПериод.ОтображатьВПодвале = Ложь;
	ЭлементыФормы.Начисления.Колонки.Отработано.ОтображатьВПодвале = Ложь;
	ЭлементыФормы.Начисления.Колонки.Норма.ОтображатьВПодвале = Ложь;
	ЭлементыФормы.Начисления.Колонки.НормаЗаМесяц.ОтображатьВПодвале = Ложь;
	ЭлементыФормы.Начисления.Колонки.Показатели.ОтображатьВПодвале = Ложь;
	
	ЭлементыФормы.РасчетСреднего.Колонки.ПериодСредней.ОтображатьВПодвале = Ложь;
	ЭлементыФормы.РасчетСреднего.Колонки.Отработано.ОтображатьВПодвале = Ложь;
	ЭлементыФормы.РасчетСреднего.Колонки.Норма.ОтображатьВПодвале = Ложь;
	ЭлементыФормы.РасчетСреднего.Колонки.Взносы.ОтображатьВПодвале = Ложь;
	
	СтруктураКолонок = Новый Структура();
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	// Список видов записей расчета среднего
	ЭлементыФормы.РасчетСреднего.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
	ЭлементыФормы.РасчетСреднего.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛБерИРоды);
	ЭлементыФормы.РасчетСреднего.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоОкладу);
	ЭлементыФормы.РасчетСреднего.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛПропорционально);
	ЭлементыФормы.РасчетСреднего.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛФСС);
	
	ПредставлениеПериодаРегистрации = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
	
	ОбновитьВидимостьЭлементовФормы();
	
	// Исправление документов
	мКнопкаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить;
	мКнопкаОтменаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление;
	ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	Если НЕ ЭтоНовый() Тогда
		Если ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			ЭлементыФормы.ОплачивалВзносыМеньше6Месяцев.Заголовок = НСтр("ru='Применять ограничение размером мин. зарплаты (';uk='Застосовувати обмеження розміром мін. зарплати ('") + ОграничениеПоМинимальнойЗарплате*2 + НСтр("ru=' грн.)';uk=' грн.)'");
		Иначе
			ЭлементыФормы.ОплачивалВзносыМеньше6Месяцев.Заголовок = НСтр("ru='Применять ограничение размером мин. зарплаты (';uk='Застосовувати обмеження розміром мін. зарплати ('") + ОграничениеПоМинимальнойЗарплате + НСтр("ru=' грн.)';uk=' грн.)'");
		КонецЕсли;
	Иначе
		Если ДатаНачала <> Дата("00010101") Тогда
			ИзменитьЗаголовокОграничения();
		КонецЕсли;	
	КонецЕсли;
	
 	ОбновитьДоступностьЭлементовФормы();

КонецПроцедуры

Процедура ПослеЗаписи()
	
	// оповестим исходный, исправляемый документ
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		Оповестить("ОбновитьФорму", Новый Структура("Команда, Объект","ДоступностьИсправленногоДокумента", ПерерассчитываемыйДокумент), Ссылка);
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// проверим допустимо ли перепроведение документа
	Если Не ЭтоНовый() И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ЗапросПоЗаявкам = Новый Запрос;
		ЗапросПоЗаявкам.УстановитьПараметр("Больничный", Ссылка);
	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СУММА(ВложенныйЗапрос.Документ) КАК КоличествоДокументов
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаявлениеРасчетВФСС.Документ) КАК Документ
		|	ИЗ Документ.ЗаявлениеРасчетВФСС.ДокументыПоНачислениям КАК ЗаявлениеРасчетВФСС
		|	ГДЕ		ЗаявлениеРасчетВФСС.Документ = &Больничный 	
		|		И ЗаявлениеРасчетВФСС.Ссылка.Проведен
		|	
		|) КАК ВложенныйЗапрос
		|";
	
		ЗапросПоЗаявкам.Текст = ТекстЗапроса;
		
		РезультатЗапроса = ЗапросПоЗаявкам.Выполнить().Выбрать();
	
		Если РезультатЗапроса.Следующий() Тогда
			
			Если РезультатЗапроса.КоличествоДокументов > 0 Тогда
				
				ТекстВопроса = НСтр("ru='По документу оформлено заявление-расчет в ФСС.  Продолжить?';uk='По документу оформлена заява-розрахунок у ФСС. Продовжити?'");
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
				
				Если Ответ <> КодВозвратаДиалога.Да Тогда
					Отказ = Истина;
				КонецЕсли;
			
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если Источник = мФормаВыбораПервичногоБольничногоЛиста Тогда	
		ПервичныйБольничныйЛист  = ЗначениеВыбора;
		ПриИзмененииПервичногоБольничногоЛиста();
		
	ИначеЕсли Источник = мФормаВыбораПерерасчитываемогоБольничногоЛиста Тогда
		
		Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
			Если ПерерассчитываемыйДокумент <> ЗначениеВыбора Тогда
				ПриИзмененииПерерассчитываемогоДокумента();
			КонецЕсли;
		КонецЕсли;
		ПерерассчитываемыйДокумент  = ЗначениеВыбора;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьФорму" И Не ЭтоНовый() Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Команда = "ДоступностьИсправленногоДокумента" Тогда
					Если Параметр.Объект = Ссылка И мДокументИсправление <> Источник Тогда
						мДокументИсправление = Источник;
						ОбновитьДоступностьЭлементовФормы();
					КонецЕсли;
				ИначеЕсли Команда = "ДоступностьОтмененногоДокумента" Тогда
					Если Параметр.Объект = Ссылка Тогда
						Если мДокументСторнирование <> Источник Тогда
							мДокументСторнирование = Источник;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
						НовыйДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
						Если мДокументСторнирование <> НовыйДокументСторнирование Тогда
							мДокументСторнирование = НовыйДокументСторнирование;
							Если Не ЗначениеЗаполнено(мДокументСторнирование) Тогда
								РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
							КонецЕсли;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					КонецЕсли;
				Иначе
				КонецЕсли;
			Иначе
			КонецЕсли;
			
		Иначе
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)
	
	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)
	
	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРассчитатьВсе(Кнопка)
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ(ЗначениеЗаполнено(Организация)) Тогда
		Предупреждение(НСтр("ru='Перед заполнением документа необходимо выбрать организацию';uk='Перед заповненням документа необхідно вибрати організацію'"));
		Возврат
	КонецЕсли;	
	
	Если НЕ(ЗначениеЗаполнено(Сотрудник)) Тогда
		Предупреждение(НСтр("ru='Перед заполнением документа необходимо выбрать работника';uk='Перед заповненням документа необхідно вибрати працівника'"));
		Возврат
	КонецЕсли;
	
	Если НЕ(ЗначениеЗаполнено(ДатаНачала)) Тогда
		Предупреждение(НСтр("ru='Перед заполнением документа необходимо выбрать период больничного';uk='Перед заповненням документа необхідно вибрати період лікарняного'"));
		Возврат
	КонецЕсли;
	
	Если Начисления.Количество()>0 ИЛИ  РасчетСреднего.Количество()>0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Продолжить?';uk='Перед заповненням табличні частини будуть очищені. Продовжити?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Начисления.Очистить(); 
		РасчетСреднего.Очистить(); 
		Записать();
		
	ИначеЕсли Модифицированность() Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением документ будет записан. Продолжить?';uk='Перед заповненням документ буде записаний. Продовжити?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Записать();
		
	КонецЕсли;
	
	РасчитатьПараметрыСредней();
	Записать();
	
	АвтозаполнениеРасчетСреднего();
	РассчитатьРасчетСреднего();
	
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		// заполненте по перерасчитываему документу
		Если Не ЗаполнитьПоПерерассчитываемомуДокументу(ПерерассчитываемыйДокумент) Тогда
			ОбщегоНазначения.ОшибкаРасчета(НСтр("ru='Нет необходимости перерассчитывать заданный документ. Для получения списка документов, подлежащих перерасчету, необходимо использовать: пункт Перерасчет зарплаты меню Расчет зарплаты';uk='Немає необхідності перерозраховувати заданий документ. Для отримання списку документів, що підлягають перерахунку, необхідно використовувати: пункт Перерахунок зарплати меню Розрахунок зарплати'"));
		КонецЕсли;
	Иначе
		// обычное заполнение
		АвтозаполнениеНачисления();
	КонецЕсли;
	РассчитатьНачисления(Сотрудник);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)
	
	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура ДействияФормыСтажСотрудника(Кнопка)
	
	Форма = РегистрыСведений.НачальныеСведенияОСтажеРаботниковОрганизации.ПолучитьФормуСписка();
	
	Форма.Отбор.Организация.Значение = Организация;
	Форма.Отбор.Организация.Использование = Истина;
	
	Форма.Отбор.ФизЛицо.Значение = Сотрудник.ФизЛицо;
	Форма.Отбор.ФизЛицо.Использование = Истина;
	
	Форма.ЭлементыФормы.Сотрудники.ИерархическийПросмотр = Ложь;
	Форма.Сотрудники.Отбор.Ссылка.Значение = Сотрудник.ФизЛицо;
	Форма.Сотрудники.Отбор.Ссылка.Использование = Истина;
	
	Форма.Отбор.ВидСтажа.Значение = Справочники.ВидыСтажа.СтраховойСтажДляБольничного;
	Форма.Отбор.ВидСтажа.Использование = Истина;
	
	Форма.Открыть();

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура ввода документа-исправления
Процедура ДополнительныеДействияИсправить(Кнопка)

	РаботаСДиалогами.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура отмены исправлений
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогами.ОтменитьИсправлениеДокумента(Ссылка);
	мДокументИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"ТаблицаДокумента");
	ОбновитьДоступностьЭлементовФормы();
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "Регулирование" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РаботаСДиалогами.РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	мТекущаяДатаДокумента = Дата;
	ПериодРегистрации = НачалоМесяца(Дата);
	
КонецПроцедуры // ДатаПриИзменении

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Установим видимость реквизита "Приказ" ДЛЯ ШАПКИ
	РаботаСДиалогами.УстановитьВидимостьПриказа(ЭтаФорма,Организация,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"));
	
КонецПроцедуры // ОрганизацияПриИзменении()

Процедура СотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура СотрудникПриИзменении(Элемент)
	
	Начисления.Очистить();
	РасчетСреднего.Очистить();
	ПервичныйБольничныйЛист = "";
	Стаж = ""; 
	ОбновитьДоступностьЭлементовФормы();
	ОплачивалВзносыМеньше6Месяцев = Ложь;
	Если ДатаОкончания <> Дата("00010101") Тогда
		РасчитатьПараметрыСредней();
	КонецЕсли;
	Если ДатаНачала <> Дата("00010101") Тогда
		ИзменитьЗаголовокОграничения();
	КонецЕсли;	
	
КонецПроцедуры

Процедура СотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры

Процедура СотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры


Процедура ДатаНачалаПриИзменении(Элемент)
	ИзменитьЗаголовокОграничения();
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	Стаж = "";
	Если ДатаОкончания <> Дата("00010101") Тогда
		
		ДатаОкончания = Макс(ДатаОкончания,ДатаНачала);
		Если Вопрос(НСтр("ru='Перезаполнить дополнительные параметры для расчета средней?';uk='Перезаповнити додаткові параметри для розрахунку середньої?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			РасчитатьПараметрыСредней();
		КонецЕсли;
		
	Иначе
		
		ДатаОкончания = ДатаНачала;
		РасчитатьПараметрыСредней();
		
	КонецЕсли;
	ОбновитьВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Предупреждение(НСтр("ru='Необходимо выбрать работника';uk='Необхідно вибрати працівника'"));
		ДатаНачала = Дата("00010101");
		ДатаОкончания = Дата("00010101");
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		Предупреждение(НСтр("ru='Необходимо выбрать дату начала';uk='Необхідно вибрати дату початку'"));
		Возврат;
	КонецЕсли;
	
	Если ДатаОкончания <> Дата("00010101") Тогда
		ДатаНачала = Мин(ДатаОкончания,ДатаНачала);
		Если Вопрос(НСтр("ru='Перезаполнить дополнительные параметры для расчета средней?';uk='Перезаповнити додаткові параметри для розрахунку середньої?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			РасчитатьПараметрыСредней();
		КонецЕсли;
	Иначе
		ДатаНачала = ДатаОкончания;
		РасчитатьПараметрыСредней();
	КонецЕсли;
	ОбновитьВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура ПричинаНетрудоспособностиПриИзменении(Элемент)
	////Перем ВидРасчетаЗаСчетОрганизации, КвоДнейЗаСчетОрганизации;
	
	Если мПричинаНетрудоспособности <> ПричинаНетрудоспособности
		И (мПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ПоБеременностиИРодам
		ИЛИ  ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ПоБеременностиИРодам
		ИЛИ  мПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ТравмаНаПроизводстве
		ИЛИ  ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ТравмаНаПроизводстве
		) Тогда
		Если Вопрос(НСтр("ru='Дополнительные параметры для расчета средней будут пересчитаны!"
"Принять изменения?';uk='Додаткові параметри для розрахунку середньої будуть перераховані!"
"Прийняти зміни?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ИзменитьЗаголовокОграничения();
			Стаж = "";
            РасчитатьПараметрыСредней();
			ОбновитьВидимостьЭлементовФормы();
		Иначе
			ПричинаНетрудоспособности = мПричинаНетрудоспособности;
		КонецЕсли;
	Иначе
		Начисления.Очистить(); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ПервичныйБольничныйЛистПриИзменении(Элемент)
	ПриИзмененииПервичногоБольничногоЛиста();	
КонецПроцедуры

Процедура ПервичныйБольничныйЛистНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	мФормаВыбораПервичногоБольничногоЛиста = Документы.НачислениеПоБольничномуЛисту.ПолучитьФормуВыбора("ФормаВыбора", ЭтаФорма, "ВыборПервичногоБЛДляНачисленияПоБЛ № " + Номер);
	мФормаВыбораПервичногоБольничногоЛиста.Отбор.Сотрудник.Значение = Сотрудник;
	мФормаВыбораПервичногоБольничногоЛиста.Отбор.Сотрудник.Использование = Истина;
	мФормаВыбораПервичногоБольничногоЛиста.Отбор.Номер.Значение = Номер;
	мФормаВыбораПервичногоБольничногоЛиста.Отбор.Номер.ВидСравнения = ВидСравнения.НеРавно;
	мФормаВыбораПервичногоБольничногоЛиста.Отбор.Номер.Использование = Истина;
	мФормаВыбораПервичногоБольничногоЛиста.НачальноеЗначениеВыбора = ПервичныйБольничныйЛист;
	мФормаВыбораПервичногоБольничногоЛиста.Порядок.Установить("Дата Убыв");
	мФормаВыбораПервичногоБольничногоЛиста.Открыть();
	
КонецПроцедуры

Процедура ПерерассчитываемыйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	мФормаВыбораПерерасчитываемогоБольничногоЛиста = Документы.НачислениеПоБольничномуЛисту.ПолучитьФормуВыбора("ФормаВыбора", ЭтаФорма, "ВыборПерерасчитываемогоБЛДляНачисленияПоБЛ № " + Номер);
	мФормаВыбораПерерасчитываемогоБольничногоЛиста.Отбор.Сотрудник.Значение = Сотрудник;
	мФормаВыбораПерерасчитываемогоБольничногоЛиста.Отбор.Сотрудник.Использование = Истина;

	мФормаВыбораПерерасчитываемогоБольничногоЛиста.Отбор.Номер.Значение = Номер;
	мФормаВыбораПерерасчитываемогоБольничногоЛиста.Отбор.Номер.ВидСравнения = ВидСравнения.НеРавно;
	мФормаВыбораПерерасчитываемогоБольничногоЛиста.Отбор.Номер.Использование = Истина;

	мФормаВыбораПерерасчитываемогоБольничногоЛиста.НачальноеЗначениеВыбора = ПерерассчитываемыйДокумент;
	мФормаВыбораПерерасчитываемогоБольничногоЛиста.Порядок.Установить("Дата Убыв");
	мФормаВыбораПерерасчитываемогоБольничногоЛиста.Открыть();

КонецПроцедуры


Процедура СуммаСреднейПриИзменении(Элемент)
	
	ОбновитьЗначенияКолонкиТаблицыНачислений();
	
КонецПроцедуры

Процедура ВидУчетаВремениДляСреднейПриИзменении(Элемент)
	
	ВыборкаОграниченя	= ПолучитьОграниченияНаСреднюю();
	Если ВыборкаОграниченя.Следующий() Тогда

		Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками Тогда
			СуммаПределаСредней = ВыборкаОграниченя.СуммаПределаСреднейПоКалендарным;
		ИначеЕсли ВидУчетаВремениДляСредней	= Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
			СуммаПределаСредней = ВыборкаОграниченя.СуммаПределаСреднейПоЧасам;
		Иначе
			СуммаПределаСредней = ВыборкаОграниченя.СуммаПределаСредней;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура ПроцентОплатыПриИзменении(Элемент)
	
	ОбновитьЗначенияКолонкиТаблицыНачислений();
	
КонецПроцедуры

Процедура РассчитатьСреднююНажатие(Элемент)
	
	РасчитатьСреднюю();
	
КонецПроцедуры

Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	Если ЗначениеЗаполнено(мДокументИсправление) Тогда
		мДокументИсправление.ПолучитьФорму(, ЭтаФорма).Открыть();
	ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
		мДокументСторнирование.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ПерерассчитываемыйДокумент.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ Начисления

Процедура НачисленияПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мРезультат			= ТекущаяСтрока.Результат;
		мОплаченоДнейЧасов	= ТекущаяСтрока.ОплаченоДнейЧасов;
		мОтработаноДней		= ТекущаяСтрока.ОтработаноДней;
		мОтработаноЧасов	= ТекущаяСтрока.ОтработаноЧасов;
		мНормаДней			= ТекущаяСтрока.НормаДней;
		мНормаЧасов			= ТекущаяСтрока.НормаЧасов;
		мКалендарныеДни		= ТекущаяСтрока.КалендарныеДни;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	// сторно запись - красным
	Если ДанныеСтроки.Сторно Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);

	ИначеЕсли ДанныеСтроки.Назначение.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(51, 51, 153);
	
	ИначеЕсли ДанныеСтроки.Назначение.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(0, 128, 128);
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.Назначение.ОсновноеНазначение)
		И ДанныеСтроки.Назначение.ОсновноеНазначение <> ДанныеСтроки.Сотрудник
		ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки.Назначение.ОсновноеНазначение)
		И ДанныеСтроки.Назначение <> ДанныеСтроки.Сотрудник
		 Тогда
	     // это замены
		ОформлениеСтроки.ЦветТекста = Новый Цвет(80, 128, 128);
		
	КонецЕсли;
	
	РаботаСДиалогами.ПриВыводеСтрокиНачисленийИУдержаний(ДанныеСтроки, ОформлениеСтроки, мСведенияОВидахРасчета);
	
КонецПроцедуры

Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	мДлинаСуток = 86400; // в секундах
	
	Если НоваяСтрока Тогда
		
		ТекущаяСтрока = Элемент.ТекущаяСтрока;
		ТекущаяСтрока.Авторасчет = Истина;
		ТекущаяСтрока.Сотрудник = Сотрудник;
		ТекущаяСтрока.Назначение = Сотрудник;
		ТекущаяСтрока.Сторно = Ложь;  
		ТекущаяСтрока.ВидРасчета = ПричинаНетрудоспособности.ВидРасчета;
		
		ИндексСтроки = Начисления.Индекс(ТекущаяСтрока);
		Если ИндексСтроки > 0  Тогда
			тДатаНачала = Начисления[ИндексСтроки-1].ДатаОкончания + мДлинаСуток;
		ИначеЕсли ЗначениеЗаполнено(ДатаНачала) Тогда
			тДатаНачала	= ДатаНачала;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			тДатаОкончания	= Мин(Макс(тДатаНачала,ПериодРегистрации), ДатаОкончания);
		Иначе
			тДатаОкончания = тДатаНачала;
		КонецЕсли;
 		
		ТекущаяСтрока.ДатаНачала			= тДатаОкончания;
		ТекущаяСтрока.ДатаОкончания			= тДатаОкончания;
		ТекущаяСтрока.БазовыйПериодНачало	= тДатаОкончания;
		ТекущаяСтрока.БазовыйПериодКонец	= тДатаОкончания;

		ПроведениеРасчетов.ПроставитьДанныеСтроки(Сотрудник, Сотрудник, ТекущаяСтрока.ДатаНачала, ПериодРегистрации, ЭлементыФормы.Начисления.ТекущаяСтрока.ВидРасчета, ЭлементыФормы.Начисления.ТекущаяСтрока);
		ТекущаяСтрока.Показатель1 = СуммаСредней;
		ТекущаяСтрока.Показатель2 = ПроцентОплаты;
		ТекущаяСтрока.ВидУчетаВремениДляСредней	= ВидУчетаВремениДляСредней;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	Если ТекущаяСтрока.Сторно Тогда
		Возврат;
	КонецЕсли; 
	
	// Авторасчет незаполненных реквизитов строки
	ВыполнитьАвторасчетРеквизитовСтрокиНачислений(ТекущаяСтрока);
	
	// Разбивка строк на помесячные
	РазницаВМесяцах = (Год(ТекущаяСтрока.ДатаОкончания)*12 + Месяц(ТекущаяСтрока.ДатаОкончания)) - (Год(ТекущаяСтрока.ДатаНачала)*12 + Месяц(ТекущаяСтрока.ДатаНачала));
	Если РазницаВМесяцах > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Разбить строку начислений на помесячные записи?';uk='Розбити рядок нарахувань на помісячні записи?'");
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПроведениеРасчетов.РазбитьСтрокуНачисленийНаПомесячныеЗаписи(ТекущаяСтрока, Начисления);
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура НачисленияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Предупреждение(НСтр("ru='Перед началом заполнения табличной части необходимо выбрать работника';uk='Перед початком заповнення табличної частини необхідно вибрати працівника'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура НачисленияНазначениеПриИзменении(Элемент)

	ТекСтрока = ЭлементыФормы.Начисления.ТекущиеДанные;
	ДатаСобытия = ?(ЗначениеЗаполнено(ТекСтрока.ДатаОкончания), ТекСтрока.ДатаОкончания, Дата);
	Если Не ЗначениеЗаполнено(ТекСтрока.Сотрудник) Тогда
		ТекСтрока.Сотрудник = ?(Элемент.Значение.ОсновноеНазначение=Справочники.СотрудникиОрганизаций.ПустаяСсылка(), Элемент.Значение, Элемент.Значение.ОсновноеНазначение);
	КонецЕсли;
	ПроведениеРасчетов.ПроставитьДанныеСтроки(ТекСтрока.Сотрудник,Элемент.Значение, ДатаСобытия, ПериодРегистрации, ЭлементыФормы.Начисления.ТекущаяСтрока.ВидРасчета, ЭлементыФормы.Начисления.ТекущаяСтрока);
	
	//ТекСтрока.ВидУчетаВремениДляСредней = ?(ВыборкаНорм.СуммированныйУчетРабочегоВремени,Перечисления.ВидыУчетаВремени.ПоЧасам, Перечисления.ВидыУчетаВремени.ПоДням);
	
КонецПроцедуры // НачисленияНазначениеПриИзменении()


Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	ТекущаяСтрока.ДатаОкончания			= Макс(ТекущаяСтрока.ДатаНачала, ТекущаяСтрока.ДатаОкончания);
	ТекущаяСтрока.БазовыйПериодНачало	= ТекущаяСтрока.ДатаНачала;
	ТекущаяСтрока.БазовыйПериодКонец	= ТекущаяСтрока.ДатаОкончания;
	ПроведениеРасчетов.ПроставитьДанныеСтроки(ТекущаяСтрока.Сотрудник,ТекущаяСтрока.Назначение, ТекущаяСтрока.ДатаНачала, ПериодРегистрации, ЭлементыФормы.Начисления.ТекущаяСтрока.ВидРасчета, ЭлементыФормы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры

Процедура НачисленияДатаОкончанияПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	ТекущаяСтрока.ДатаНачала			= Мин(ТекущаяСтрока.ДатаНачала, ТекущаяСтрока.ДатаОкончания);
	ТекущаяСтрока.БазовыйПериодНачало	= ТекущаяСтрока.ДатаНачала;
	ТекущаяСтрока.БазовыйПериодКонец	= ТекущаяСтрока.ДатаОкончания;
	ПроведениеРасчетов.ПроставитьДанныеСтроки(ТекущаяСтрока.Сотрудник,ТекущаяСтрока.Назначение, ТекущаяСтрока.ДатаНачала, ПериодРегистрации, ЭлементыФормы.Начисления.ТекущаяСтрока.ВидРасчета, ЭлементыФормы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры

Процедура НачисленияБазовыйПериодНачалоПриИзменении(Элемент)
		
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	ТекущаяСтрока.БазовыйПериодКонец	= Макс(ТекущаяСтрока.БазовыйПериодНачало, ТекущаяСтрока.БазовыйПериодКонец);
	
КонецПроцедуры

Процедура НачисленияБазовыйПериодКонецПриИзменении(Элемент)
		
		ТекущаяСтрока = Элемент.ТекущаяСтрока;
		ТекущаяСтрока.БазовыйПериодНачало	= Мин(ТекущаяСтрока.БазовыйПериодНачало, ТекущаяСтрока.БазовыйПериодКонец);
	
КонецПроцедуры

Процедура НачисленияРезультатПриИзменении(Элемент)
		
	Если Элемент.Значение <> мРезультат Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мРезультат = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияОплаченоДнейЧасовПриИзменении(Элемент)
		
	Если Элемент.Значение <> мОтработаноДней Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мОплаченоДнейЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияОтработаноДнейПриИзменении(Элемент)
		
	Если Элемент.Значение <> мОтработаноДней Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мОтработаноДней = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияОтработаноЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мОтработаноЧасов Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мОтработаноЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияКалендарныеДниПриИзменении(Элемент)
		
	Если Элемент.Значение <> мКалендарныеДни Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мКалендарныеДни = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияНормаДнейПриИзменении(Элемент)
		
	Если Элемент.Значение <> мНормаДней Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мНормаДней = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияНормаЧасовПриИзменении(Элемент)
		
	Если Элемент.Значение <> мНормаЧасов Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мНормаЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ Начисления

Процедура КоманднаяПанельНачисленийЗаполнить(Кнопка)
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Предупреждение(НСтр("ru='Перед началом заполнения табличной части необходимо выбрать работника';uk='Перед початком заповнення табличної частини необхідно вибрати працівника'"));
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Перед заполнением из табличная часть ""Начисления"" будет очищена. Продолжить?';uk='Перед заповненням таблична частина ""Нарахування"" буде очищена. Продовжити?'");
	Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Начисления.Очистить(); 
	Записать();

	АвтозаполнениеНачисления();
	
КонецПроцедуры

Процедура КоманднаяПанельНачисленийПоПерерассчитываемомуДокументу(Кнопка)
	
	ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Продолжить?';uk='Перед заповненням табличні частини будуть очищені. Продовжити?'");
	Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Начисления.Очистить(); 
	РасчетСреднего.Очистить(); 
	Записать();

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если Не ЗаполнитьПоПерерассчитываемомуДокументу(ПерерассчитываемыйДокумент) Тогда
		ОбщегоНазначения.ОшибкаРасчета(НСтр("ru='Нет необходимости перерассчитывать заданный документ. Для получения списка документов, подлежащих перерасчету, необходимо использовать: пункт Перерасчет зарплаты меню Расчет зарплаты';uk='Немає необхідності перерозраховувати заданий документ. Для отримання списку документів, що підлягають перерахунку, необхідно використовувати: пункт Перерахунок зарплати меню Розрахунок зарплати'"));
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры // ДействияФормыПоПерерассчитываемомуДокументу()

Процедура КоманднаяПанельНачисленийРассчитать(Кнопка)

	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	КомментироватьРасчет = Ложь;
	Если Найти(Кнопка.Имя,"СКомментарием") > 0  Тогда
		КомментироватьРасчет = Истина;
	КонецЕсли;
	мСотрудники = Новый СписокЗначений;
	мСотрудники.Добавить(Сотрудник);	
 	ПроведениеРасчетов.УдалитьСтрокиСторноПоУсловию( Начисления, мСотрудники, Истина); 
	Записать();

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьНачисления(Сотрудник, КомментироватьРасчет);
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат				= ТекущаяСтрока.Результат;
		мБылоОтработаноДней				= ТекущаяСтрока.ОтработаноДней;
		мБылоОтработаноЧасов			= ТекущаяСтрока.ОтработаноЧасов;
		мБылоНормаДней					= ТекущаяСтрока.НормаДней;
		мБылоНормаЧасов					= ТекущаяСтрока.НормаЧасов;
		мБылоКалендарныеДни				= ТекущаяСтрока.КалендарныеДни;
		мБылоОплаченоДнейЧасов			= ТекущаяСтрока.ОплаченоДнейЧасов;
	КонецЕсли;
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ РасчетСреднего

Процедура РасчетСреднегоПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.РасчетСреднего.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мРасчетСреднегоРезультат		= ТекущаяСтрока.Результат;
		мРасчетСреднегоРезультатПолный	= ТекущаяСтрока.РезультатПолный;
		мРасчетСреднегоСуммаПредела		= ТекущаяСтрока.СуммаПредела;
		мРасчетСреднегоОтработаноДней	= ТекущаяСтрока.ОтработаноДней;
		мРасчетСреднегоОтработаноЧасов	= ТекущаяСтрока.ОтработаноЧасов;
		мРасчетСреднегоКалендарныеДни	= ТекущаяСтрока.КалендарныеДни;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетСреднегоПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		Предупреждение(НСтр("ru='Перед началом заполнения табличной части необходимо выбрать работника';uk='Перед початком заповнення табличної частини необхідно вибрати працівника'"));
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

Процедура РасчетСреднегоПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		
		Элемент.ТекущаяСтрока.КоэффициентПовышенияОкладов = 1;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетСреднегоПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
		
	ЯчейкаСКартинкой = ОформлениеСтроки.Ячейки.Картинка;
	ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
	ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);
	
	ОформлениеСтроки.Ячейки.Отработано.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.ПериодСредней.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.Норма.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.Взносы.Видимость = Ложь;
	
КонецПроцедуры


Процедура РасчетСреднегоРезультатПриИзменении(Элемент)
		
	Если Элемент.Значение <> мРасчетСреднегоРезультат Тогда
		ЭлементыФормы.РасчетСреднего.ТекущаяСтрока.Авторасчет = Ложь;
		мРасчетСреднегоРезультат = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетСреднегоРезультатПолныйПриИзменении(Элемент)
		
	Если Элемент.Значение <> мРасчетСреднегоРезультатПолный Тогда
		ЭлементыФормы.РасчетСреднего.ТекущаяСтрока.Авторасчет = Ложь;
		мРасчетСреднегоРезультатПолный = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетСреднегоОтработаноДнейПриИзменении(Элемент)
		
	Если Элемент.Значение <> мРасчетСреднегоОтработаноДней Тогда
		ЭлементыФормы.РасчетСреднего.ТекущаяСтрока.Авторасчет = Ложь;
		мРасчетСреднегоОтработаноДней = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетСреднегоОтработаноЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мРасчетСреднегоОтработаноЧасов Тогда
		ЭлементыФормы.РасчетСреднего.ТекущаяСтрока.Авторасчет = Ложь;
		мРасчетСреднегоОтработаноЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетСреднегоКалендарныеДниПриИзменении(Элемент)
		
	Если Элемент.Значение <> мРасчетСреднегоКалендарныеДни Тогда
		ЭлементыФормы.РасчетСреднего.ТекущаяСтрока.Авторасчет = Ложь;
		мРасчетСреднегоКалендарныеДни = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетСреднегоСуммаПределаПриИзменении(Элемент)
		
	Если Элемент.Значение <> мРасчетСреднегоСуммаПредела Тогда
		ЭлементыФормы.РасчетСреднего.ТекущаяСтрока.Авторасчет = Ложь;
		мРасчетСреднегоСуммаПредела = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ РасчетСреднего

Процедура КоманднаяПанельРасчетСреднегоЗаполнить(Кнопка)
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Предупреждение(НСтр("ru='Перед началом заполнения табличной части необходимо выбрать работника';uk='Перед початком заповнення табличної частини необхідно вибрати працівника'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		Предупреждение(НСтр("ru='Перед началом заполнения табличной части необходимо выбрать период больничного';uk='Перед початком заповнення табличної частини необхідно вибрати період лікарняного'"));
		Возврат;
	КонецЕсли;

	Если РасчетСреднего.Количество()>0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть ""Расчет среднего"" будет очищена. Продолжить?';uk='Перед заповненням таблична частина ""Розрахунок середнього"" буде очищена. Продовжити?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		РасчетСреднего.Очистить(); 
		Записать();
		
	ИначеЕсли Модифицированность() Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением документ будет записан. Продолжить?';uk='Перед заповненням документ буде записаний. Продовжити?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Записать();
		
	КонецЕсли;
	
	РасчитатьПараметрыСредней();
	Записать();
	
	АвтозаполнениеРасчетСреднего();
	
КонецПроцедуры

Процедура КоманднаяПанельРасчетСреднегоРассчитать(Кнопка)
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	КомментироватьРасчет = Ложь;
	Если Найти(Кнопка.Имя,"СКомментарием") > 0  Тогда
		КомментироватьРасчет = Истина;
	КонецЕсли;

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьРасчетСреднего( КомментироватьРасчет );
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.РасчетСреднего.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мРасчетСреднегоРезультат		= ТекущаяСтрока.Результат;
		мРасчетСреднегоРезультатПолный	= ТекущаяСтрока.РезультатПолный;
		мРасчетСреднегоСуммаПредела		= ТекущаяСтрока.СуммаПредела;
		мРасчетСреднегоОтработаноДней	= ТекущаяСтрока.ОтработаноДней;
		мРасчетСреднегоОтработаноЧасов	= ТекущаяСтрока.ОтработаноЧасов;
		мРасчетСреднегоКалендарныеДни	= ТекущаяСтрока.КалендарныеДни;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПричинаНетрудоспособностиНачалоВыбора(Элемент, СтандартнаяОбработка)
	мПричинаНетрудоспособности = ПричинаНетрудоспособности;
КонецПроцедуры

Процедура НадписьТекстСредняяЗПпоВсемВидамЭДНажатие(Элемент)
	
	ФормаСпискаСредняяЗП = РегистрыСведений.СредняяЗППоВсемВидамЭкономическойДеятельности.ПолучитьФорму("ФормаСписка");
	ФормаСпискаСредняяЗП.Открыть();
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ФОРМЫ

мСведенияОВидахРасчета = Новый Соответствие;

мДокументИсправление = Документы.НачислениеПоБольничномуЛисту.ПустаяСсылка();
