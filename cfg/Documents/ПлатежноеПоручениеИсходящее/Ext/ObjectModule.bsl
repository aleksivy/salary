// Текущие курс и кратность валюты документа для расчетов
Перем мВалютаРегламентированногоУчета Экспорт;

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Форматирует сумму прописью документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо представить прописью 
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСуммуПрописи(СуммаДок,СуммаБезКопеек)
	
	Результат     = СуммаДок;
	ЦелаяЧасть    = Цел(СуммаДок);
	ФорматСтрока  = "Л=uk_UA; ДП=Ложь";
	ПарамПредмета = мВалютаРегламентированногоУчета.ПараметрыПрописиНаУкраинском;
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
			Результат = Лев(Результат,Найти(Результат,"0")-1)+"=";
		Иначе
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописи()

// Форматирует сумму  документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо отформатировать
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСумму(СуммаДок,СуммаБезКопеек)
	
	Результат  = СуммаДок;
	ЦелаяЧасть = Цел(СуммаДок);
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат,Найти(Результат,"="));
		Иначе
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД=','; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат,"ЧДЦ=2; ЧРД=','; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСумму()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Формирует печатную форму 
// платежного поручения
//
// Параметры:
//  ТабДок - табличный документ
//
Функция ПечатьПлатежногоПоручения(Вариант2009) Экспорт

	Если Организация.Пустая() Тогда
		Сообщить(НСтр("ru='Не указана организация.';uk='Не зазначена організація.'"), СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	Если Контрагент.Пустая() И Не ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Сообщить(НСтр("ru='Не указан контрагент.';uk='Не зазначений контрагент.'"), СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	Если СчетОрганизации.Пустая() Тогда
		Сообщить(НСтр("ru='Не указан расчетный счет.';uk='Не зазначений розрахунковий рахунок.'"), СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
    Если СчетОрганизации.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета Тогда
		Сообщить(НСтр("ru='Для документа в валюте предусмотрена другая печатная форма.';uk='Для документа у валюті передбачена інша друкована форма.'"), СтатусСообщения.Важное);
		Возврат Неопределено;	
	КонецЕсли;

	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение";
	
	Если Вариант2009 Тогда
		Макет = ПолучитьОбщийМакет("ПлатежноеПоручение_2009");
	Иначе
		Макет = ПолучитьОбщийМакет("ПлатежноеПоручение");
	КонецЕсли;
	КодЯзыкаПечать = "uk";
	
	Обл   = Макет.ПолучитьОбласть("Шапка");
	
	СуммаБезКопеек  = СчетОрганизации.СуммаБезКопеек;
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата,, СчетОрганизации);
	СведенияОПолучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(?(ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет, Организация, Контрагент), Дата,, СчетКонтрагента);
	Обл.Параметры.НомерПП					= НомерПоручения;
	
	ЧислоДокумента                          = Формат(Дата,"ДФ='дд';Л=uk_UA");
	ДатаДокумента                           = Формат(Дата,"ДФ='дд ММММ ггггр.';Л=uk_UA");
	ДатаДокументаБезЧисла                   = Прав(ДатаДокумента, СтрДлина(ДатаДокумента) - 2);
	Обл.Параметры.ДатаДокумента          	= """" + ЧислоДокумента + """" + ДатаДокументаБезЧисла;
	
	Обл.Параметры.СуммаПлатежа             	= ФорматироватьСумму(СуммаДокумента,СуммаБезКопеек);
	Обл.Параметры.СуммаПрописью          	= ФорматироватьСуммуПрописи(СуммаДокумента,СуммаБезКопеек);

	Обл.Параметры.Плательщик              = ?(ПустаяСтрока(ТекстПлательщика),Организация.НаименованиеПолное,СокрЛП(ТекстПлательщика));
	Обл.Параметры.КодПоЕДРПОУ 			  = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
	Обл.Параметры.БанкПлательщика         = СведенияОбОрганизации.Банк;
  	Обл.Параметры.НомерСчетаПлательщика   = СведенияОбОрганизации.НомерСчетаСПереносом;
    Обл.Параметры.КодБанкаПлательщика     = СведенияОбОрганизации.МФО_Платеж;
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Обл.Параметры.Получатель              = ?(ПустаяСтрока(ТекстПолучателя),Контрагент.НаименованиеПолное,СокрЛП(ТекстПолучателя));
		Обл.Параметры.ПолучательЕДРПОУ        = Контрагент.КодПоЕДРПОУ;
	Иначе
		Обл.Параметры.Получатель              = ?(ПустаяСтрока(ТекстПолучателя),Организация.НаименованиеПолное,СокрЛП(ТекстПолучателя));
		Обл.Параметры.ПолучательЕДРПОУ        = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
	КонецЕсли;
    Обл.Параметры.БанкПолучателя          = СведенияОПолучателе.Банк;
	Обл.Параметры.КодБанкаПолучателя      = СведенияОПолучателе.МФО_Платеж;
	Обл.Параметры.НомерСчетаПолучателя    = СведенияОПолучателе.НомерСчетаСПереносом;
	Обл.Параметры.НазначениеПлатежа       = СокрЛП(НазначениеПлатежа);
	
	КолВо = 2;
	Если Не ВвестиЧисло(КолВо, НСтр("ru='Введите число экземпляров';uk='Введіть число екземплярів'"), 2) Тогда
		Возврат Неопределено;	
	КонецЕсли;	
	
	Для НомерЭкземпляра = 1 по КолВо Цикл
		Обл.Параметры.НомерЭкземпляра = НомерЭкземпляра;
	    ТабДокумент.Вывести(Обл);
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент,Обл)  Тогда	
		    ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	КонецЦикла;	

	Возврат ТабДокумент;

КонецФункции // ПечатьПлатежногоПоручения()

//Формирует отчет по зарплате
Функция ПечатьОтчетаПоЗарплате() Экспорт
	
	Если Организация.Пустая() Тогда
		Сообщить(НСтр("ru='Не указана организация.';uk='Не зазначена організація.'"), СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	Если Контрагент.Пустая() И Не ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Сообщить(НСтр("ru='Не указан контрагент.';uk='Не зазначений контрагент.'"), СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	Если СчетОрганизации.Пустая() Тогда
		Сообщить(НСтр("ru='Не указан расчетный счет.';uk='Не зазначений розрахунковий рахунок.'"), СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = СформироватьЗапросДляПечати();
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручениеИсходящее_ПечатьОтчетаПоЗарплате";
	
	Макет = Документы.ПлатежноеПоручениеИсходящее.ПолучитьМакет("ОтчетПоЗарплате");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Заголовок
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Организация = Организация.ПолноеНаименование();
	Область.Параметры.СчетОрганизации = СчетОрганизации.ПолноеНаименование();
	
	
	Область.Параметры.НомерППИ =" № " +  НомерПоручения;
	Область.Параметры.Дата = Формат(Дата, "ДЛФ=Д");
	
	ТекстПлатежнаяВедомость = "";
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ведомость
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ВыплатаЗаработнойПлаты
	|ГДЕ
	|	Ссылка = &Ссылка
	|";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ПлатежныеВедомости = Запрос.Выполнить().Выгрузить();
	
	Количество =ПлатежныеВедомости.Количество();
	Если Количество= 1 Тогда
		ТекстПлатежнаяВедомость = НСтр("ru='Согласно платежной ведомости ';uk='Згідно розрахункової відомості '", КодЯзыкаПечать);
	Иначе
		ТекстПлатежнаяВедомость = НСтр("ru='Согласно платежным ведомостям ';uk='Згідно розрахунковим відомостям '", КодЯзыкаПечать);
	КонецЕсли;
	
	индекс = 1;
	Для Каждого Ведомость ИЗ ПлатежныеВедомости Цикл
		
		ТекстПлатежнаяВедомость = ТекстПлатежнаяВедомость + " № "+ ОбщегоНазначения.ПолучитьНомерНаПечать(Ведомость.Ведомость) + НСтр("ru=' от ';uk=' від '", КодЯзыкаПечать) + Формат(Ведомость.Ведомость.Дата, "ДФ=dd.MM.yyyy");
		Если Индекс < Количество Тогда
			ТекстПлатежнаяВедомость = ТекстПлатежнаяВедомость + ", ";
		Иначе
			ТекстПлатежнаяВедомость = ТекстПлатежнаяВедомость + ". ";
		КонецЕсли;
		
		индекс = индекс + 1;
	КонецЦикла;
	
	Область.Параметры.ТекстПлатежнаяВедомость = ТекстПлатежнаяВедомость;

	
	ТабДок.Вывести(Область);
	//// Шапка
	ШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
	ШапкаДокумента.Параметры.Контрагент = Контрагент.ПолноеНаименование();
	ТабДок.Вывести(ШапкаДокумента);
	
	// ВыплатаЗаработнойПлаты
	Область = Макет.ПолучитьОбласть("Шапка");
	ТабДок.Вывести(Область);
	ОбластьВыплатаЗаработнойПлаты = Макет.ПолучитьОбласть("ВыплатаЗаработнойПлаты");

	НомерСтроки = 0;
	Пока Выборка.Следующий() Цикл	
	
		НомерСтроки = НомерСтроки+1;
		ОбластьВыплатаЗаработнойПлаты.Параметры.Заполнить(Выборка);
		ОбластьВыплатаЗаработнойПлаты.Параметры.Сумма = Формат(Выборка.Сумма,"ЧДЦ=2; ЧРД=.");
		ОбластьВыплатаЗаработнойПлаты.Параметры.НомерСтроки = НомерСтроки;
	
		ТабДок.Вывести(ОбластьВыплатаЗаработнойПлаты);
	КонецЦикла;

	// Подвал
	Подвал = Макет.ПолучитьОбласть("Подвал");
	Подвал.Параметры.СуммаИтого = Строка(СуммаДокумента) + " грн.";
	ТабДок.Вывести(Подвал);
	
	//ОтветсвенныеЛица
	ОбластьОтветственныеЛица = Макет.ПолучитьОбласть("ОтветственныеЛица");
	ОтветственныеЛица = ФормированиеПечатныхФорм.ОтветственныеЛица(Организация, Дата);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("ГлавныйБухгалтер", ОтветственныеЛица.ГлавныйБухгалтер);
	Запрос.УстановитьПараметр("Руководитель", ОтветственныеЛица.Руководитель);

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ФИООтветственногоЛица.ФизЛицо	КАК ФизЛицо, 
	|	ФИООтветственногоЛица.Фамилия	КАК Фамилия,
	|	ФИООтветственногоЛица.Имя		КАК Имя,
	|	ФИООтветственногоЛица.Отчество КАК Отчество
	|
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&МоментВремени, ФизЛицо = &ОтветсвенноеЛицо) КАК ФИООтветственногоЛица
	|";
	
	ТекстГлавныйБухгалтер = СтрЗаменить(ТекстЗапроса, "&ОтветсвенноеЛицо", "&ГлавныйБухгалтер");
	Запрос.Текст = ТекстГлавныйБухгалтер;
	Выборка = Запрос.Выполнить().Выбрать();	
	Если Выборка.Следующий() Тогда
		ФИОБухгалтера = Выборка;
	КонецЕсли;
	
	ТекстРуководитель = СтрЗаменить(ТекстЗапроса, "&ОтветсвенноеЛицо", "&Руководитель");
	Запрос.Текст = ТекстРуководитель;
	Выборка = Запрос.Выполнить().Выбрать();	
	Если Выборка.Следующий() Тогда
		ФИОРуководителя = Выборка;
	КонецЕсли;

  	Если ЗначениеЗаполнено(ФИОБухгалтера) Тогда
		ОбластьОтветственныеЛица.Параметры.ФИОБухгалтера = ФИОБухгалтера.Фамилия + " " + ФИОБухгалтера.Имя + " " + ФИОБухгалтера.Отчество;
	ИначеЕсли ЗначениеЗаполнено(ОтветственныеЛица.ГлавныйБухгалтер) Тогда
		ОбластьОтветственныеЛица.Параметры.ФИОБухгалтера  = ОтветственныеЛица.ГлавныйБухгалтер.Наименование;
	КонецЕсли;		

	Если ЗначениеЗаполнено(ФИОРуководителя) Тогда
		ОбластьОтветственныеЛица.Параметры.ФИОРуководителя = ФИОРуководителя.Фамилия + " " + ФИОРуководителя.Имя + " " + ФИОРуководителя.Отчество;
	ИначеЕсли ЗначениеЗаполнено(ОтветственныеЛица.Руководитель) Тогда
		ОбластьОтветственныеЛица.Параметры.ФИОРуководителя = ОтветственныеЛица.Руководитель.Наименование;
	КонецЕсли;
			
	ТабДок.Вывести(ОбластьОтветственныеЛица);
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	Возврат ТабДок;
КонецФункции

Функция СформироватьЗапросДляПечати() Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА (ФИОФизЛиц.Фамилия ЕСТЬ NULL)
	|		ТОГДА Ведомость.Сотрудник.ФизЛицо.Наименование
	|	ИНАЧЕ
	|		 ФИОФизЛиц.Фамилия+ "" "" + ФИОФизЛиц.Имя +"" "" +  ФИОФизЛиц.Отчество				
	|	КОНЕЦ КАК ФИО,
	|	Ведомость.Сотрудник.ФизЛицо.КодПоДРФО			КАК КодПоДРФО,
	|	Ведомость.НомерКарточки						КАК НомерКарточки,
	|	ВЫРАЗИТЬ(Ведомость.Сумма КАК ЧИСЛО(10,2))	КАК Сумма
	|
	|	ИЗ
	|		Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Ведомость
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата) КАК ФИОФизЛиц
	|			ПО ФИОФизЛиц.ФизЛицо = Ведомость.Сотрудник.ФизЛицо
	|	ГДЕ
	|		Ведомость.Ссылка В 
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ППИ.Ведомость КАК Ведомость
	|						ИЗ
	|							Документ.ПлатежноеПоручениеИсходящее.ВыплатаЗаработнойПлаты КАК ППИ
	|						ГДЕ	ППИ.Ссылка В (&Ссылка)
	|						)
	|		И Ведомость.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	|		И Ведомость.Банк = &Контрагент
	|		И Ведомость.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)	
	|	УПОРЯДОЧИТЬ ПО
	|		Сумма
	|";
	
	Возврат Запрос;
КонецФункции

Процедура НапечататьОтчетПоЗарплате(ПечДокумент)
	
	Если ПечДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаПечати = ПолучитьОбщуюФорму("ПечатьДокументов",,Новый УникальныйИдентификатор);
	ФормаПечати.ОбъектПечати = Ссылка;
	ФормаПечати.ПечатныйДокумент = ПечДокумент;

	ФормаПечати.Заголовок = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление());
	
	ФормаПечати.Открыть();
	
КонецПроцедуры


// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПлатежноеПоручение" ИЛИ ИмяМакета = "ПлатежноеПоручениеДо2009" Тогда	
			Если ИмяМакета = "ПлатежноеПоручение" тогда
				ТабДокумент = ПечатьПлатежногоПоручения(Истина);
			Иначе
				ТабДокумент = ПечатьПлатежногоПоручения(Ложь);
			КонецЕсли;
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	ИначеЕсли ИмяМакета = "ПеречислениеЗП" Тогда
		ТабДокумент = ПечатьОтчетаПоЗарплате();		
		НапечататьОтчетПоЗарплате(ТабДокумент);
	КонецЕсли;
	
	
	
КонецПроцедуры // Печать


#КонецЕсли

// Формирует номер платежного поручения в пределах расчетного счета
//
Процедура УстановитьНомерПоручения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаГода", НачалоГода(Дата));
	Запрос.УстановитьПараметр("ДатаКонцаГода", КонецГода(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетОрганизации", СчетОрганизации);
	Запрос.УстановитьПараметр("Ссылка", Ссылка); 

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерПоручения КАК НомерПоручения
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручение
	|
	|ГДЕ
	|	ПлатежноеПоручение.Организация = &Организация
	|	//самого себя не учитываем
	|	И ПлатежноеПоручение.Ссылка <> &Ссылка
	|	И ПлатежноеПоручение.СчетОрганизации = &СчетОрганизации
	|	И ПлатежноеПоручение.Дата >= &ДатаНачалаГода
	|	И ПлатежноеПоручение.Дата <= &ДатаКонцаГода";

	СписокПлатежек = Запрос.Выполнить().Выбрать();
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	 
	ТаблицаЗначений.Колонки.Добавить("Номер"); 
	ТаблицаЗначений.Колонки.Добавить("Длина"); 

	Пока СписокПлатежек.Следующий() Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить(); 
		НоваяСтрока.Номер = СписокПлатежек.НомерПоручения; 
		НоваяСтрока.Длина = СтрДлина(СписокПлатежек.НомерПоручения); 
	КонецЦикла;
	
	ТаблицаЗначений.Сортировать("Длина Убыв, Номер Убыв");
	
	Попытка
		НомерПорученияЧисло = Число(ТаблицаЗначений[0].Номер) + 1;
		НомерПоручения = Формат(НомерПорученияЧисло, "ЧГ=0");
	Исключение
		НомерПоручения = 1;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
		Возврат Новый Структура("ПлатежноеПоручение, ПлатежноеПоручениеДо2009, ПеречислениеЗП",НСтр("ru='Платежное поручение';uk='Платіжне доручення'"),НСтр("ru='Платежное поручение, старая версия ';uk='Платіжне доручення, стара версія'"), НСтр("ru='Ведомость перечисления зарплаты';uk='Відомість перерахування зарплати'"));
	Иначе
		Возврат Новый Структура("ПлатежноеПоручение, ПлатежноеПоручениеДо2009",НСтр("ru='Платежное поручение';uk='Платіжне доручення'"), НСтр("ru='Платежное поручение, старая версия';uk='Платіжне доручення, стара версія'"));
	КонецЕсли;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчеты()

	СтруктураПолей= Новый Структура("Организация");
	СтруктураПолей.Вставить("СчетОрганизации",НСтр("ru='Не указан банковский счет организации!';uk='Не зазначений банківський рахунок організації!'"));
	СтруктураПолей.Вставить("СуммаДокумента");

	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
    	СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом",НСтр("ru='Не указан счет учета.';uk='Не зазначений рахунок.'"));
	КонецЕсли;
		
	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок)
	
    ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок)
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
		
				СпособОплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк;
				ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
				ПроведениеРасчетов.ВыполнитьДвиженияПоЗарплате( Ссылка, Движения, СпособОплаты, ВыплаченностьЗарплаты, СчетОрганизации,,Контрагент );

		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		
		//движения по НДФЛ расчеты с бюджетом
		Если СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоНДФЛ Тогда
			ДвиженияПоВзаиморасчетыПоНДФЛ();	
		КонецЕсли;
		
		Для каждого ТекущаяСтрока Из ПеречислениеНалогов Цикл
					
			// только для расчета ЗП			
			// движения по регистру накопления Взносы в Фонды 

			Если СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению 
				ИЛИ СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию
				ИЛИ СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюНаСлучайБезработицы
				ИЛИ СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев
				Тогда
					
				мСтатьяНалоговойДекларации = "";
				Если ТекущаяСтрока.СубконтоДт1.Метаданные().Имя ="СтатьиНалоговыхДеклараций" Тогда
					мСтатьяНалоговойДекларации = ТекущаяСтрока.СубконтоДт1; 
				ИначеЕсли ТекущаяСтрока.СубконтоДт2.Метаданные().Имя ="СтатьиНалоговыхДеклараций" Тогда
					мСтатьяНалоговойДекларации = ТекущаяСтрока.СубконтоДт2; 
				ИначеЕсли ТекущаяСтрока.СубконтоДт3.Метаданные().Имя ="СтатьиНалоговыхДеклараций" Тогда
					мСтатьяНалоговойДекларации = ТекущаяСтрока.СубконтоДт3; 
				КонецЕсли;
				мНалог = "";
				Если ТекущаяСтрока.СубконтоДт1.Метаданные().Имя ="Налоги" Тогда
					мНалог = ТекущаяСтрока.СубконтоДт1; 
				ИначеЕсли ТекущаяСтрока.СубконтоДт2.Метаданные().Имя ="Налоги" Тогда
					мНалог = ТекущаяСтрока.СубконтоДт2; 
				ИначеЕсли ТекущаяСтрока.СубконтоДт3.Метаданные().Имя ="Налоги" Тогда
					мНалог = ТекущаяСтрока.СубконтоДт3; 
				КонецЕсли;
				ДвиженияПоВзаиморасчетыПоВзносамВФонды(ТекущаяСтрока.Ведомость, мСтатьяНалоговойДекларации, мНалог, ТекущаяСтрока.ПериодВзаиморасчетов, ТекущаяСтрока.Сумма)
				
			КонецЕсли; 	
			
			
			//ВОЕННЫЙ СБОР
			Если ТекущаяСтрока.СубконтоДт1 = Справочники.Налоги.ВоенныйСбор
				ИЛИ ТекущаяСтрока.СубконтоДт2 = Справочники.Налоги.ВоенныйСбор
				ИЛИ ТекущаяСтрока.СубконтоДт3 = Справочники.Налоги.ВоенныйСбор
				Тогда
				ДвиженияПоВзаиморасчетыПоНДФЛ(Истина);
				Прервать;
			КонецЕсли;

			
		КонецЦикла;
	КонецЕсли;
			
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОснованиюРегл(Основание, СтрокаБанки = Неопределено)
	
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций")	Тогда
		
		Если Основание.ВидВыплаты = Справочники.ВидыВыплат.Очередная
			ИЛИ Основание.ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолгов
			ИЛИ Основание.ВидВыплаты = Справочники.ВидыВыплат.ПогашениеДолгов
			ИЛИ Основание.ВидВыплаты = Справочники.ВидыВыплат.Аванс
			ИЛИ Основание.ВидВыплаты = Справочники.ВидыВыплат.АвансПредварительныйРасчет
			ИЛИ Основание.ВидВыплаты = Справочники.ВидыВыплат.Депоненты
			ИЛИ Основание.ВидВыплаты = Справочники.ВидыВыплат.Дивиденды
			ИЛИ Основание.ВидВыплаты = Справочники.ВидыВыплат.Отпуск
			ИЛИ Основание.ВидВыплаты = Справочники.ВидыВыплат.Больничные
			ИЛИ НЕ Основание.ВидВыплаты.Предопределенный
			Тогда
			ВидЗаполнения = "ПеречислениеЗарплаты";
			
		ИначеЕсли Основание.ВидВыплаты = Справочники.ВидыВыплат.НДФЛКонтрагентам
			Тогда
			ВидЗаполнения = "ПеречислениеНДФЛ";
			
		ИначеЕсли Основание.ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяВзносы
			ИЛИ Основание.ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолговВзносы
			Тогда
			ВидЗаполнения = "ПеречислениеВзносов";
			
		КонецЕсли;
		
		Если ВидЗаполнения = "ПеречислениеЗарплаты" Тогда
			// Зарплата
			ВидОперации        = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП;
			ВалютаДокумента    = мВалютаРегламентированногоУчета;
			КурсДокумента      = 1;
			КратностьДокумента = 1;
			Организация        = Основание.Организация;
			ДокументОснование  = Основание;
			
			Если Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ВалютаДокумента Тогда
				СчетОрганизации = Организация.ОсновнойБанковскийСчет;
			КонецЕсли;
			
			
			// Определим сумму выплаченной заработной платы
			Запрос=Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", Основание);
			
			ТекстЗапроса = "
			|ВЫБРАТЬ Различные                         
			|	РаботникиОрганизации.Банк
			|ИЗ	Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
			|
			|ГДЕ 	РаботникиОрганизации.Ссылка = &Ссылка
			|	И	РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
			|	И	РаботникиОрганизации.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
			|";
			Запрос.Текст = ТекстЗапроса;
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='По текущей ведомости нет сумм к выплате со способом выплаты ""через банк""!';uk='По поточній відомості немає сум до виплати  зі способом виплати ""через банк""!'"))
				
			Иначе	
				Если СтрокаБанки = Неопределено Тогда
					тбБанки = РезультатЗапроса.Выгрузить();
					тбБанки.Свернуть("Банк");
					СтрокаБанки = тбБанки.ВыбратьСтроку(НСтр("ru='Выберите банк.';uk='Виберіть банк.'"));
				КонецЕсли;	
				Если СтрокаБанки <> Неопределено Тогда
					Контрагент = СтрокаБанки.Банк;
					СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
					
					ВыборкаБанк = РезультатЗапроса.Выбрать(); 
					Если ВыборкаБанк.НайтиСледующий(СтрокаБанки.Банк,"Банк") Тогда
						
						Запрос=Новый Запрос;
						Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
						Запрос.УстановитьПараметр("Ссылка", Основание);
						Запрос.УстановитьПараметр("Регистратор", Ссылка);
						Запрос.УстановитьПараметр("Банк", СтрокаБанки.Банк);
						
						ТекстЗапроса = "                    
						|ВЫБРАТЬ                          
						|	ПараметрыОплаты.СчетУчета		КАК СчетУчета,
						|	СУММА(ПараметрыОплаты.Сумма)	КАК Сумма
						|ИЗ	Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты	КАК ПараметрыОплаты
						|                          
						|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
						|ПО	ПараметрыОплаты.Ссылка = РанееВыплаченныеСуммы.Ведомость
						|И	ПараметрыОплаты.Сотрудник = РанееВыплаченныеСуммы.Сотрудник
						|И	(РанееВыплаченныеСуммы.Регистратор <> &Регистратор)
						|
						|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
						|ПО	ПараметрыОплаты.Ссылка = РаботникиОрганизации.Ссылка
						|И	ПараметрыОплаты.Сотрудник = РаботникиОрганизации.Сотрудник
						|
						|ГДЕ ПараметрыОплаты.Ссылка = &Ссылка
						|	И РанееВыплаченныеСуммы.Сотрудник ЕСТЬ NULL 
						|	И РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
						|	И РаботникиОрганизации.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
						|	И РаботникиОрганизации.Банк = &Банк
						|
						|СГРУППИРОВАТЬ ПО
						|	ПараметрыОплаты.СчетУчета
						|";
						
						Запрос.Текст = ТекстЗапроса;
						Выборка = Запрос.Выполнить().Выбрать(); 
						Пока Выборка.Следующий() Цикл
							
							СтрокаВедомость = ВыплатаЗаработнойПлаты.Добавить();
							СтрокаВедомость.Ведомость		= Основание;
							СтрокаВедомость.СчетУчета		= Выборка.СчетУчета;
							СтрокаВедомость.СуммаКВыплате	= Выборка.Сумма;
							
							СуммаДокумента = СуммаДокумента + Выборка.Сумма;
							
						КонецЦикла;
						
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ВидЗаполнения = "ПеречислениеНДФЛ" Тогда
			
			// НДФЛ
			ВидОперации        = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;
			ВалютаДокумента    = мВалютаРегламентированногоУчета;
			КурсДокумента      = 1;
			КратностьДокумента = 1;
			Организация        = Основание.Организация;
			ДокументОснование  = Основание;
			
			Если Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ВалютаДокумента Тогда
				СчетОрганизации = Организация.ОсновнойБанковскийСчет;
			КонецЕсли;
			
			Запрос = Новый Запрос;    
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("парамВедомости", Основание);
			//	ВТНалоги
			Если Истина Тогда
				//	Описание:
				//      осноная часть запроса, тут получим даные для проведения
				// 
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ 
				|		Основной.Ссылка						КАК Ссылка,
				|		Основной.Ссылка.Организация			КАК Организация,
				|		СУММА( Основной.Налог )			КАК Результат
				|ПОМЕСТИТЬ ВТНалоги	
				|   ИЗ	Документ.ЗарплатаКВыплатеОрганизаций.НДФЛ КАК Основной
				|	ГДЕ Основной.Ссылка в (&парамВедомости)
				|	СГРУППИРОВАТЬ ПО
				|		Основной.Ссылка
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТНалоги = "ВТНалоги";
			КонецЕсли;
			
			// определим парметры платежки
			ТекстЗапроса = "	       
			|ВЫБРАТЬ 
			|	ВЫБОР	КОГДА ПараметрыСтрогие.СчетУчета ЕСТЬ NULL
			|			ТОГДА Параметры.СчетУчета	
			|			ИНАЧЕ ПараметрыСтрогие.СчетУчета	
			|	КОНЕЦ	                                КАК СчетУчета,
			|	Начисления.Результат					КАК Сумма,
			|	ВЫБОР	КОГДА ПараметрыСтрогие.СчетУчета ЕСТЬ NULL
			|			ТОГДА Параметры.Контрагент	
			|			ИНАЧЕ ПараметрыСтрогие.Контрагент	
			|	КОНЕЦ	                                КАК Контрагент,
			|	ВЫБОР	КОГДА ПараметрыСтрогие.СчетУчета ЕСТЬ NULL
			|			ТОГДА Параметры.СчетКонтрагента	
			|			ИНАЧЕ ПараметрыСтрогие.СчетКонтрагента	
			|	КОНЕЦ	                                КАК СчетКонтрагента
			|ИЗ ВТНалоги КАК Начисления
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ  (" + ПроведениеРасчетов.ПолучитьПараметрыПлатежекПоВзносамВФонды(Организация) + ") КАК ПараметрыСтрогие
			|ПО		ПараметрыСтрогие.Организация = Начисления.Организация
			|	И	ПараметрыСтрогие.СтатьяНалоговойдекларации = ЗНАЧЕНИЕ(Справочник.СтатьиНалоговыхдеклараций.ПустаяСсылка)
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ (" + ПроведениеРасчетов.ПолучитьПараметрыПлатежекПоВзносамВФонды(Организация) + ") КАК Параметры
			|ПО		Параметры.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|	И	Параметры.СтатьяНалоговойдекларации = ЗНАЧЕНИЕ(Справочник.СтатьиНалоговыхдеклараций.ПустаяСсылка)
			|
			|";
			Запрос.Текст = ТекстЗапроса;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Контрагент		= Выборка.Контрагент;
				СчетКонтрагента = Выборка.СчетКонтрагента;
				СуммаДокумента	= Выборка.Сумма;
				СчетУчетаРасчетовСКонтрагентом	= Выборка.СчетУчета;
				
				СтрокаВедомость = ПеречислениеНалогов.Добавить();
				СтрокаВедомость.Ведомость	= Основание;
				СтрокаВедомость.Сумма		= Выборка.Сумма;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;			
	
КонецПроцедуры

Процедура	ДвиженияПоВзаиморасчетыПоНДФЛ(ВоенныйСбор = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	НаименованиеДокумента = Ссылка.Метаданные().Имя;
	
	Запрос.Текст = "
	|ВЫБРАТЬ                                          
	|	ВЫБОР КОГДА Основной.Ссылка ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЭтоНеподтвержденнаяСумма,
	|	Основной.Сотрудник				КАК Сотрудник,
	|	Основной.ДоходНДФЛ				КАК ДоходНДФЛ,
	|	ВЫБОР КОГДА Основной.Ссылка ЕСТЬ NULL ТОГДА НалогиПлатежки.ПериодВзаиморасчетов ИНАЧЕ Основной.ПериодВзаиморасчетов КОНЕЦ КАК ПериодВзаиморасчетов,
	|	НалогиПлатежки.Сумма	КАК НеподтвержденнаяСумма,
	|	Основной.НалоговыйПериод	КАК НалоговыйПериод,
	|	Основной.Налог				КАК Налог,
	|	Основной.Доход				КАК Доход
	|ИЗ Документ." + НаименованиеДокумента + ".ПеречислениеНалогов  КАК НалогиПлатежки
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.НДФЛ КАК Основной
	|ПО НалогиПлатежки.Ведомость = Основной.Ссылка
	|
	|ГДЕ	(ВЫБОР КОГДА Основной.Ссылка ЕСТЬ NULL ТОГДА НалогиПлатежки.Сумма ИНАЧЕ Основной.Налог КОНЕЦ <> 0)
	|	И НалогиПлатежки.Ссылка = &Ссылка
	//ВОЕННЫЙ СБОР
	|	И (Основной.ДоходНДФЛ.ВидСтавкиРезидента " +?(ВоенныйСбор,"=","<>") + " ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор)
	|	ИЛИ Основной.Ссылка ЕСТЬ NULL)
	|";
	
	КодОперацииВыплата = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ВзаиморасчетыПоНДФЛ.Добавить();
		
		Движение.Период      	= Дата;
		Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;;
		
		Движение.Организация 		= Организация;
		Движение.Сотрудник 			= Выборка.Сотрудник;
		Движение.ДоходНДФЛ 			= Выборка.ДоходНДФЛ;
		Движение.ПериодВзаиморасчетов 	= Выборка.ПериодВзаиморасчетов;
		Если Выборка.ЭтоНеподтвержденнаяСумма Тогда
			Движение.НеподтвержденнаяСумма	= Выборка.НеподтвержденнаяСумма;
		Иначе
			Движение.Налог	= Выборка.Налог;	
			Движение.Доход	= Выборка.Доход;
		КонецЕсли;
		Движение.НалоговыйПериод	= Выборка.НалоговыйПериод;
		
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоВзаиморасчетыПоНДФЛ()

Процедура	ДвиженияПоВзаиморасчетыПоВзносамВФонды(Ведомость, СтатьяНалоговойДекларации, Налог, ПериодВзаиморасчетов, Сумма)
	
	// все проверки уже сделаны, осталось только провести
	НаименованиеДокумента = Ссылка.Метаданные().Имя;
	Если  ЗначениеЗаполнено(Ведомость) Тогда 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Ведомость", Ведомость);
		Запрос.УстановитьПараметр("СтатьяНалоговойДекларации", СтатьяНалоговойДекларации);
		Запрос.УстановитьПараметр("Налог", Налог);
		
		Запрос.Текст =
		"ВЫБРАТЬ                                          
		|	Основной.ПериодВзаиморасчетов	КАК ПериодВзаиморасчетов,
		|	СУММА(Основной.База)			КАК База,
		|	СУММА(Основной.БазаВзноса)		КАК БазаВзноса,
		|	СУММА(Основной.Результат)		КАК Результат
		|ИЗ	Документ.ЗарплатаКВыплатеОрганизаций.Взносы КАК Основной
		|
		|ГДЕ
		|	Основной.Ссылка = &Ведомость
		|	И	Основной.Налог =  &Налог
		|	И	Основной.СтатьяНалоговойДекларации =  &СтатьяНалоговойДекларации
		|	И	(Основной.База <> 0 ИЛИ	Основной.БазаВзноса <> 0 ИЛИ	Основной.Результат <> 0)
		|СГРУППИРОВАТЬ ПО                                          
		|	Основной.ПериодВзаиморасчетов
		|
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ                                          
		|	Основной.ПериодВзаиморасчетов	КАК ПериодВзаиморасчетов,
		|	Сумма(Основной.База)			КАК База,
		|	Сумма(Основной.БазаВзноса)		КАК БазаВзноса,
		|	Сумма(Основной.Результат)		КАК Результат
		|ИЗ	Документ.ЗарплатаКВыплатеОрганизаций.ВзносыФОТ КАК Основной   
		|
		|ГДЕ Основной.Ссылка = &Ведомость
		|	И	Основной.Налог =  &Налог
		|	И	Основной.СтатьяНалоговойДекларации =  &СтатьяНалоговойДекларации
		|	И	(Основной.База <> 0 ИЛИ	Основной.БазаВзноса <> 0 ИЛИ	Основной.Результат <> 0)
		|СГРУППИРОВАТЬ ПО                                          
		|	Основной.ПериодВзаиморасчетов
		|";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Движение = Движения.ВзаиморасчетыПоВзносамВФонды.Добавить();
			
			Движение.Период      			= Дата;
			Движение.ВидДвижения 			= ВидДвиженияНакопления.Расход;
			
			Движение.Организация 				= Организация;
			Движение.СтатьяНалоговойДекларации	= СтатьяНалоговойДекларации;
			Движение.Налог						= Налог;
			Движение.ПериодВзаиморасчетов		= Выборка.ПериодВзаиморасчетов;
			
			Движение.База 			= Выборка.База;
			Движение.БазаВзноса 	= Выборка.БазаВзноса;	
			Движение.Результат 		= Выборка.Результат;	
			
		КонецЦикла;
	Иначе
		Движение = Движения.ВзаиморасчетыПоВзносамВФонды.Добавить();
		
		Движение.Период      			= Дата;
		Движение.ВидДвижения 			= ВидДвиженияНакопления.Расход;
		
		Движение.Организация 				= Организация;
		Движение.СтатьяНалоговойДекларации	= СтатьяНалоговойДекларации;
		Движение.Налог						= Налог;
		Движение.ПериодВзаиморасчетов		= ПериодВзаиморасчетов;
		
		Движение.НеподтвержденнаяСумма 		= Сумма;	
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоВзаиморасчетыПоВзносамВФонды()
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПроверитьЗаполнениеДокумента(Отказ, Заголовок)
		
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога И Ссылка.ПолучитьФорму().Список Тогда 
		
		Если ПеречислениеНалогов.Итог("Сумма") <> СуммаДокумента Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не совпадает сумма документа и суммы по налогам.';uk='Не збігається сума документа й сума по податками.'"),Отказ,Заголовок);	
		КонецЕсли;
		
		//если Ведомость не заполнена, то должен быть заполнене период взаиморасчетов
		Если Истина Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("Неопределено", Неопределено);
			Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
			НаименованиеДокумента = Ссылка.Метаданные().Имя;
			
			Запрос.Текст = "
			|ВЫБРАТЬ                                          
			|	НалогиПлатежки.НомерСтроки,
			|	НалогиПлатежки.ПериодВзаиморасчетов	КАК ПериодВзаиморасчетов
			|ИЗ Документ." + НаименованиеДокумента + ".ПеречислениеНалогов  КАК НалогиПлатежки
			|
			|ГДЕ	НалогиПлатежки.Ссылка = &Ссылка
			|	И	НалогиПлатежки.Ведомость = &Неопределено
			|	И	НалогиПлатежки.ПериодВзаиморасчетов = &ПустаяДата
			|";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='В строке " + Выборка.НомерСтроки + "не указан Приод взаиморасчетов.'"),Отказ,Заголовок);	
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("Выплачено",Перечисления.ВыплаченностьЗарплаты.Выплачено);
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("парамВыплатаЧерезБанк", Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк);
		Запрос.УстановитьПараметр("парамБанк", Контрагент);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
 	    |	Работники.Сотрудник КАК Сотрудник,
		|	Работники.Ссылка   КАК Ведомость
		|ПОМЕСТИТЬ
		|	ВТРаботникиОрганизации
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Работники
		|ГДЕ
		|	Работники.ВыплаченностьЗарплаты = &Выплачено
		|	И Работники.СпособВыплаты = &парамВыплатаЧерезБанк
		|	И Работники.Банк = &парамБанк
		|	И Работники.Ссылка В (ВЫБРАТЬ Выпл.Ведомость ИЗ Документ.ПлатежноеПоручениеИсходящее.ВыплатаЗаработнойПлаты КАК ВЫПЛ ГДЕ Выпл.Ссылка = &Ссылка)
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник ";
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	СУММА(ЗарплатаКВыплате.Сумма) КАК СуммаВыплачено
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ВыплатаЗаработнойПлаты КАК ПлатежноеПоручениеВыплатаЗаработнойПлаты
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|	    (ВЫБРАТЬ
		|			ЗарплатаКВыплате.Ссылка КАК Ссылка,
		|           ЗарплатаКВыплате.СчетУчета КАК СчетУчета,
		|           ЗарплатаКВыплате.Сумма КАК Сумма,
		|           ЗарплатаКВыплате.Сотрудник КАК Сотрудник
		|
		|        ИЗ ВТРаботникиОрганизации КАК Работники
		|		 ЛЕВОЕ СОЕДИНЕНИЕ
		|		 Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК ЗарплатаКВыплате
		|        ПО ЗарплатаКВыплате.Сотрудник = Работники.Сотрудник
		|         И ЗарплатаКВыплате.Ссылка = Работники.Ведомость
		|       ) КАК ЗарплатаКВыплате
		|		ПО ПлатежноеПоручениеВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплате.Ссылка
		|		И ПлатежноеПоручениеВыплатаЗаработнойПлаты.СчетУчета = ЗарплатаКВыплате.СчетУчета
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ПлатежноеПоручениеВыплатаЗаработнойПлаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
		|			И ЗарплатаКВыплате.Сотрудник = РанееВыплаченныеСуммы.Сотрудник
		|			И ЗарплатаКВыплате.СчетУчета = РанееВыплаченныеСуммы.СчетУчета
		|			И РанееВыплаченныеСуммы.Регистратор <> &Ссылка
		|ГДЕ
		|	ПлатежноеПоручениеВыплатаЗаработнойПлаты.Ссылка = &Ссылка
		|	И РанееВыплаченныеСуммы.Сотрудник ЕСТЬ NULL
		|";
		
		Запрос.УстановитьПараметр("Выплачено",Перечисления.ВыплаченностьЗарплаты.Выплачено);
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если НЕ (Результат.Следующий() И Результат.СуммаВыплачено=СуммаДокумента) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не совпадает сумма документа и суммы по ведомостям на выплату заработной платы.';uk='Не збігається сума документа й сума по відомостях на виплату заробітної плати.'"),Отказ,Заголовок);
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	//// Заполним реквизиты из стандартного набора по документу основанию.
	//ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	//Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций")	Тогда
	//	Если Основание.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
	//		Сообщить("Платежная ведомость оформлена на выплату через кассу.");
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	ЗаполнитьДокументПоОснованиюРегл(Основание);
		
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)
		
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчеты(), Отказ, Заголовок);

	ПроверитьЗаполнениеДокумента(Отказ, Заголовок);
	
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ЗначениеЗаполнено(НомерПоручения) ИЛИ ЭтоНовый() Тогда
		УстановитьНомерПоручения()
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	// для нового документа стоит очистить номер поручения
	НомерПоручения = "";
	ДокументОснование = Неопределено;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
