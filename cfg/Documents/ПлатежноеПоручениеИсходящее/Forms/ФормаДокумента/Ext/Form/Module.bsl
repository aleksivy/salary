////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мМассивПлатежныхВедомостей;

Перем мВедомость;

// Хранит текущую Организацию - для установки номера ордера
Перем мТекущаяОрганизация;
Перем СтарыйСчетОрганизации; 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура УстановитьВидимостьСубконто()
	
	ЕстьСтатьяДекларацииИлиНалог = Ложь;
				
	Для Ном = 1 по 3 Цикл

		Если (Ном <= СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество()) 
			И (ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом)) Тогда
			
			ЭлементыФормы.ПеречислениеНалогов.Колонки["СубконтоДт"+Ном].ТекстШапки = СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном-1].ВидСубконто.Наименование;
			ЭлементыФормы.ПеречислениеНалогов.Колонки["СубконтоДт"+Ном].Видимость = Истина;
				
			ЭлементыФормы["НадписьСубконтоДт"+Ном].Заголовок = СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном-1].ВидСубконто.Наименование;
			ЭлементыФормы["НадписьСубконтоДт"+Ном].Видимость = Истина;
			ЭлементыФормы["СубконтоДт"+Ном].Видимость        = Истина;
			
		Иначе
			
			ЭлементыФормы.ПеречислениеНалогов.Колонки["СубконтоДт"+Ном].Видимость = Ложь;
			
			ЭлементыФормы["НадписьСубконтоДт"+Ном].Видимость = Ложь;
			ЭлементыФормы["СубконтоДт"+Ном].Видимость        = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает видимость закладок. 
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
	
		ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоНесколькимНалогам"].Видимость 	= Ложь;
	
		Если Список Тогда
			РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоНесколькимНалогам", ЭлементыФормы.ПанельПлатежи);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
			РаботаСДиалогами.УстановитьТекущуюСтраницу("Платеж", ЭлементыФормы.ПанельПлатежи);
		КонецЕсли;
		
		ЭлементыФормы.Панель.Страницы["ПлатежныеВедомости"].Видимость = Ложь;
		ЭлементыФормы.Панель.Страницы["СтраницаОсновная"].Видимость = Истина;
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы["СтраницаОсновная"];
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда 
		ЭлементыФормы.Панель.Страницы["ПлатежныеВедомости"].Видимость = Истина;
		ЭлементыФормы.Панель.Страницы["СтраницаОсновная"].Видимость = Ложь;
	КонецЕсли;
		
	
КонецПроцедуры // УстановитьВидимость()

// Процедура выполняет необходимые действия формирования текста назначения платежа
//
Процедура СформироватьНазначениеПлатежа()

	АдресСуммы=Найти(НазначениеПлатежа,"Сумма");
	
	Если АдресСуммы>0 Тогда
		ТекстНазначение=Лев(НазначениеПлатежа,АдресСуммы-2);
	Иначе
		ТекстНазначение=НазначениеПлатежа;
	КонецЕсли;
	
	Если ТекстНазначение="" И НЕ СчетКонтрагента.Пустая() Тогда
		ТекстНазначение = СчетКонтрагента.ТекстНазначения;
	КонецЕсли;	

	ТекстСумма = НСтр("ru='Сумма ';uk='Сума '") + Формат(СуммаДокумента,"Чц = 15; ЧДЦ =2; ЧРД=,; ЧН = '0,00'" ) + " " + СчетОрганизации.ВалютаДенежныхСредств+ Символы.ПС;
	
	НазначениеПлатежа=ТекстНазначение+Символы.ПС+ТекстСумма;

КонецПроцедуры // СформироватьНазначениеПлатежа()

// Процедура выполняет действия, необходимые при выборе счета организации
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаОрганизации()
	Если СчетОрганизации = СтарыйСчетОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	СтарыйСчетОрганизации = СчетОрганизации;
	
	СброситьУстановленныйНомерПоручения();  
	Если СчетОрганизации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		Организация=СчетОрганизации.Владелец;
	КонецЕсли;
	
	Если НЕ СчетКонтрагента.Пустая() И НЕ СчетОрганизации.ВалютаДенежныхСредств=СчетКонтрагента.ВалютаДенежныхСредств Тогда
		Сообщить(НСтр("ru='Валюта счета контрагента не соответствует валюте счета организации!';uk='Валюта рахунку контрагента не відповідає валюті рахунку організації!'"));
		СчетКонтрагента="";
	КонецЕсли;	
	
	Если НЕ СчетОрганизации.Пустая() Тогда
		ТекстПлательщика  = СчетОрганизации.ТекстКорреспондента;
	Иначе	
		ТекстПлательщика  = "";
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();

	
КонецПроцедуры // ПриИзмененииСчетаОрганизации()

// Процедура выполняет действия, необходимые при выборе счета контрагента
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаКонтрагента()

	Если СчетКонтрагента.Пустая() Тогда
		Возврат;
	КонецЕсли;
		
	Если Контрагент.Пустая() Тогда
		Контрагент=СчетКонтрагента.Владелец;
	КонецЕсли;
	
	Если НЕ СчетКонтрагента.Пустая() И НЕ СчетОрганизации.ВалютаДенежныхСредств=СчетКонтрагента.ВалютаДенежныхСредств Тогда
		Сообщить(НСтр("ru='Валюта счета контрагента не соответствует валюте счета организации!';uk='Валюта рахунку контрагента не відповідає валюті рахунку організації!'"));
		СчетКонтрагента="";
		Возврат;
	КонецЕсли;	
	
	Если НЕ СчетКонтрагента.Пустая() Тогда
		ТекстПолучателя   = СчетКонтрагента.ТекстКорреспондента;
	Иначе	
		ТекстПолучателя   = "";
	КонецЕсли;	

	СформироватьНазначениеПлатежа();
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		//Автоматизация заполнения документа на основании данных их РС ПараметрыПлатежныхДокументовПоВзносамВФонды
		Если СчетУчетаРасчетовСКонтрагентом.Пустая() Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Организация", Организация);
			ОтборПоКонтрагенту = Ложь;
			ОтборПоСчетуКонтрагента = Ложь;
			Если ЗначениеЗаполнено(Контрагент) Тогда
				ОтборПоКонтрагенту = Истина;
				Запрос.УстановитьПараметр("Контрагент", Контрагент);
			КонецЕсли;
		
			Если ЗначениеЗаполнено(СчетКонтрагента)Тогда
				ОтборПоСчетуКонтрагента = Истина;
				Запрос.УстановитьПараметр("СчетКонтрагента", СчетКонтрагента);
			КонецЕсли;

			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Сведения.СчетУчета.Ссылка КАК СчетУчета
			|ИЗ
			|	(" + ПроведениеРасчетов.ПолучитьПараметрыПлатежекПоВзносамВФонды(Организация,Ложь,Истина,ОтборПоКонтрагенту,ОтборПоСчетуКонтрагента) + ") КАК Сведения
			|ГДЕ
			|	Сведения.Организация = &Организация
			|	" + ?(ОтборПоКонтрагенту,"И Сведения.Контрагент = &Контрагент","") + "
			|	" + ?(ОтборПоСчетуКонтрагента,"И Сведения.СчетКонтрагента = &СчетКонтрагента","") + "
			|";

			тзСчета = Запрос.Выполнить().Выгрузить();
			Если тзСчета.Количество() = 1 Тогда 
				СчетУчетаРасчетовСКонтрагентом = тзСчета[0].СчетУчета
			ИначеЕсли тзСчета.Количество() > 1 Тогда
				СтрокаСчета =  тзСчета.ВыбратьСтроку(НСтр("ru='Выберите счет учета';uk='Виберіть рахунок обліку'"));
				Если СтрокаСчета = Неопределено Тогда 
					Возврат;
				Иначе
					СчетУчетаРасчетовСКонтрагентом = СтрокаСчета.СчетУчета;	
				КонецЕсли;
			КонецЕсли;
			УстановитьВидимостьСубконто();
			Если ПеречислениеНалогов.Количество() <> 0 Тогда
				Если СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество() > 0 Тогда
				СубконтоДт1 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
				ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт1 = СубконтоДт1;
			КонецЕсли;
			Если СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество() > 1 Тогда
				СубконтоДт2 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]);
				ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт2 = СубконтоДт2;
			КонецЕсли;
			Если СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество() > 2 Тогда
				СубконтоДт3 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]);
				ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт3 = СубконтоДт3;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;    	
		
КонецЕсли;
	
   	

КонецПроцедуры // ПриИзмененииСчетаКонтрагента()

// Процедура выполняет действия, необходимые при выборе организации
//
// Параметры:
//  Нет.
//
Процедура НачальноеЗаполнениеПриВыбореОрганизации()

	Если НЕ Организация.Пустая() Тогда
		
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);

		ИННПлательщика  = СведенияОбОрганизации.ИНН; 
		
	Иначе	
		
		СчетОрганизации = "";
		
	КонецЕсли;	

КонецПроцедуры	// НачальноеЗаполнениеПриВыбореОрганизации()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПеречислениеЗаработнойПлаты,ЭлементыФормы.КоманднаяПанельПеречисление);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА НУМЕРАЦИИ ПЛАТЕЖНЫХ ПОРУЧЕНИЙ

Процедура УстановитьДоступностьПоляВводаНомерПоручения()

	ЭлементыФормы.НомерПоручения.ТолькоПросмотр = НЕ ЗначениеЗаполнено(НомерПоручения);
	Если ЭлементыФормы.НомерПоручения.ТолькоПросмотр Тогда
		ЭлементыФормы.НомерПоручения.Подсказка =  НСтр("ru='Номер поручения будет присвоен при записи объекта.';uk=""Номер доручення буде привласнений при записі об'єкта.""");
	Иначе
		ЭлементыФормы.НомерПоручения.Подсказка =  НСтр("ru='Номер поручения';uk='Номер доручення'");
	КонецЕсли;
	ЭлементыФормы.НомерПоручения1.ТолькоПросмотр = НЕ ЗначениеЗаполнено(НомерПоручения);
	Если ЭлементыФормы.НомерПоручения1.ТолькоПросмотр Тогда
		ЭлементыФормы.НомерПоручения1.Подсказка =  НСтр("ru='Номер поручения будет присвоен при записи объекта.';uk=""Номер доручення буде привласнений при записі об'єкта.""");
	Иначе
		ЭлементыФормы.НомерПоручения1.Подсказка =  НСтр("ru='Номер поручения';uk='Номер доручення'");
	КонецЕсли;
КонецПроцедуры

Процедура СброситьУстановленныйНомерПоручения()
	
	НомерПоручения = "";
	УстановитьДоступностьПоляВводаНомерПоручения();
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//Процедура - обработчик события "ПередОткрытием" формы
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
		Если ПараметрОснование.ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяВзносы ИЛИ ПараметрОснование.ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолговВзносы Тогда
			Предупреждение(НСтр("ru='Воспользуйтесь обработкой ""Формирование платежных документов по взносам в фонды""';uk='Скористайтеся обробкою ""Формування платіжних документів по внескам у фонди""'"));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
		
	// Установка подменю "Советы".

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если ПеречислениеНалогов.Количество()=0 Тогда
		НоваяСтрока = ПеречислениеНалогов.Добавить();
	КонецЕсли;

	ЭлементыФормы.ПеречислениеНалогов.ТекущаяСтрока = ПеречислениеНалогов[0];
	СтрокаНалогов = ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные;

	Если ЭтоНовый() Тогда
		
		Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП;
		КонецЕсли;

		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
		Если НЕ СчетОрганизации.Пустая() Тогда
			ТекстПлательщика  = СчетОрганизации.ТекстКорреспондента;
		Иначе	
			ТекстПлательщика  = "";
		КонецЕсли;
		
		Если НЕ СчетКонтрагента.Пустая() Тогда
			ТекстПолучателя   = СчетКонтрагента.ТекстКорреспондента;
		Иначе	
			ТекстПолучателя   = "";
		КонецЕсли;	
		
		// Заполнить реквизиты значениями по умолчанию.
		СформироватьНазначениеПлатежа();
	Иначе 
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	СтарыйСчетОрганизации = СчетОрганизации; 

	Если ПеречислениеНалогов.Количество()>0 Тогда
		УстановитьВидимостьСубконто();
	КонецЕсли;
	
	
	Список = Истина;
	УстановитьВидимость();
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	Массив = Новый Массив;
	Массив.Добавить(ВидОперации.Метаданные().ЗначенияПеречисления.ПеречислениеЗП);
	Массив.Добавить(ВидОперации.Метаданные().ЗначенияПеречисления.ПеречислениеНалога);

	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
										Массив, 
										//ВидОперации.Метаданные().ЗначенияПеречисления, 
										Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
										
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
		//Доступность поля ввода номера
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	УстановитьДоступностьПоляВводаНомерПоручения();  

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Ответственный.Пустая() Тогда
		Ответственный = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
	мМассивПлатежныхВедомостей = Новый Соответствие;
	Если Проведен Тогда
		Для каждого СтрокаТЧ Из Ссылка.ВыплатаЗаработнойПлаты Цикл
			мМассивПлатежныхВедомостей.Вставить(СтрокаТЧ.Ведомость,СтрокаТЧ.Ведомость)
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

		// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Оповестим оплачиваемые документы выплаты зарплаты
	Если Проведен Тогда
		Для каждого СтрокаТЧ Из ВыплатаЗаработнойПлаты Цикл
			Если мМассивПлатежныхВедомостей[СтрокаТЧ.Ведомость] <> Неопределено Тогда
				мМассивПлатежныхВедомостей.Удалить(СтрокаТЧ.Ведомость);
			КонецЕсли;
			Оповестить("ОбновитьФорму", ,СтрокаТЧ.Ведомость);
		КонецЦикла;
	КонецЕсли;
	Для каждого Значение Из мМассивПлатежныхВедомостей Цикл
		Оповестить("ОбновитьФорму", ,Значение);
	КонецЦикла;
	
	УстановитьДоступностьПоляВводаНомерПоручения(); 

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
						
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		//СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, Кнопка.Текст);
		Печать(Кнопка.Текст);
		
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции

		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее[Кнопка.Имя] Тогда
			Возврат;
		КонецЕсли; 
		
		ВидОперации = Перечисления.ВидыОперацийППИсходящее[Кнопка.Имя];
		
		Список = Истина;
		             
		СформироватьНазначениеПлатежа();
		
		УстановитьВидимость();
		
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры
// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	
	// Номер меняем, если документ не проведен и "перемещается" в другой день
	Если (НЕ Проведен) И (НачалоДня(Дата)<> НачалоДня(мТекущаяДатаДокумента)) Тогда
		СброситьУстановленныйНомерПоручения();
	КонецЕсли;
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	УстановитьВидимость(); 

КонецПроцедуры // ДатаПриИзменении()

// Обработчик события "ПриИзменении" реквизита "Организация"
//
Процедура ОрганизацияПриИзменении(Элемент)
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	НачальноеЗаполнениеПриВыбореОрганизации();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СчетОрганизации=Организация.ОсновнойБанковскийСчет;
	Иначе
		СчетОрганизации=Неопределено;
	КонецЕсли;
	
	ПриИзмененииСчетаОрганизации();
	УстановитьВидимость();	


КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент".
//
Процедура КонтрагентПриИзменении(Элемент)

	// проставим основной договор контрагента

	Если ЗначениеЗаполнено(Контрагент) Тогда
		СчетКонтрагента=Контрагент.ОсновнойБанковскийСчет;
	Иначе
		СчетКонтрагента=Неопределено;
	КонецЕсли;

	ПриИзмененииСчетаКонтрагента();

КонецПроцедуры

// Обработчик события "ПриИзменении" реквизита "СчетОрганизации"
//
Процедура СчетОрганизацииПриИзменении(Элемент)

	ПриИзмененииСчетаОрганизации();
	
КонецПроцедуры // СчетОрганизацииПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СчетКонтрагента"
//
Процедура СчетКонтрагентаПриИзменении(Элемент)

	ПриИзмененииСчетаКонтрагента();
	
КонецПроцедуры // СчетКонтрагентаПриИзменении()

Процедура ВыплатаЗаработнойПлатыВедомостьПриИзменении(Элемент)
	
	Если Элемент.Значение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура ("Ведомость");
	Отбор.Ведомость = мВедомость;
	СтрокаПеречисленийЗаработнойПлаты = ВыплатаЗаработнойПлаты.НайтиСтроки(Отбор);
	Для каждого СтрокаВыплаты Из СтрокаПеречисленийЗаработнойПлаты Цикл
		ВыплатаЗаработнойПлаты.Удалить(СтрокаВыплаты);	
	КонецЦикла;
	
	мВедомость = Элемент.Значение;
	Отбор.Ведомость = мВедомость;
	СтрокаПеречисленийЗаработнойПлаты = ВыплатаЗаработнойПлаты.НайтиСтроки(Отбор);
	Для каждого СтрокаПеречислений Из СтрокаПеречисленийЗаработнойПлаты Цикл
		ВыплатаЗаработнойПлаты.Удалить(СтрокаПеречислений);	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Элемент.Значение);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Банк", Контрагент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(Основной.Сумма) КАК Сумма,
	|	Основной.Ссылка КАК Ведомость,
	|	Основной.СчетУчета
	|ИЗ Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК Основной
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Работники
	|ПО Работники.Ссылка = Основной.Ссылка
	|	И	Работники.Сотрудник = Основной.Сотрудник
	|
	|ГДЕ	Основной.Ссылка = &Ссылка
	|	И	Работники.Банк = &Банк
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.Ссылка,
	|	Основной.СчетУчета
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаПеречислений = ВыплатаЗаработнойПлаты.Добавить();
		СтрокаПеречислений.Ведомость = Выборка.Ведомость;
		СтрокаПеречислений.СчетУчета = Выборка.СчетУчета;
		СтрокаПеречислений.СуммаКВыплате = Выборка.Сумма;
		
	КонецЦикла;
	
	СуммаДокумента=ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыВедомостьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	мВедомость = Элемент.Значение;

	ФормаВыбора = Документы["ЗарплатаКВыплатеОрганизаций"].ПолучитьФормуВыбора(,Элемент,);
	
	//Выбираем ведомости, относящиеся к выбранной в документе организации, со способом выплаты
	//"Через банк" и не имеющие в ТЧ строки с реквизитом "Не выплачено"
	
	Запрос=Новый Запрос;
	Запрос.Текст="
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплатеОрганизаций.Ссылка.Номер КАК НомерВедомости
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК ЗарплатаКВыплатеОрганизаций
	|
	|ГДЕ	ЗарплатаКВыплатеОрганизаций.Ссылка.Организация = &Организация 		
	|	И	ЗарплатаКВыплатеОрганизаций.Банк = &Банк
	|";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Банк", Контрагент);
	СписокОтбора=Новый СписокЗначений;
	СписокОтбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НомерВедомости"));
	
	ФормаВыбора.Отбор.Номер.ВидСравнения=ВидСравнения.ВСписке;
	ФормаВыбора.Отбор.Номер.Значение      = СписокОтбора;
	ФормаВыбора.Отбор.Номер.Использование = Истина;
	
	ФормаВыбора.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
	ФормаВыбора.Отбор.Организация.Значение      = Организация;
	ФормаВыбора.Отбор.Организация.Использование = Истина;
	
	ФормаВыбора.Открыть();

	
КонецПроцедуры

 Процедура ВыплатаЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СуммаДокумента = ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = Элемент.ТекущиеДанные.Ведомость.Организация;
	КонецЕсли;
	
	
КонецПроцедуры

// Заполняет ИНН плательщика при нажатии на кнопку
//
Процедура ЗаполнитьИННПлательщикаНажатие(Элемент)

	Если НЕ Организация.Пустая() Тогда
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
        ИННПлательщика  = СведенияОбОрганизации.ИНН;
	КонецЕсли;

КонецПроцедуры

// Заполняет ИНН получателя при нажатии на кнопку
//
Процедура ЗаполнитьИННПолучателяНажатие(Элемент)

	Если НЕ Контрагент.Пустая() Тогда
		ИННПолучателя = Контрагент.ИНН;
	КонецЕсли;

КонецПроцедуры
                    
// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

 // Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)
	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), Кнопка.Текст);
КонецПроцедуры

// =======================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ТАБЛИЧНОЙ ЧАСТИ ПеречислениеНалогов

Процедура СчетУчетаПриИзменении(Элемент)
	
	УстановитьВидимостьСубконто();

	Если ПеречислениеНалогов.Количество() <> 0 Тогда
		
		Если СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество() > 0 Тогда
			СубконтоДт1 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
			ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт1 = СубконтоДт1;
		КонецЕсли;

		Если СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество() > 1 Тогда
			СубконтоДт2 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]);
			ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт2 = СубконтоДт2;
		КонецЕсли;

		Если СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество() > 2 Тогда
			СубконтоДт3 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]);
			ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт3 = СубконтоДт3;
		КонецЕсли;
	КонецЕсли;
	
	//Автоматизация заполнения документа на основании данных их РС ПараметрыПлатежныхДокументовПоВзносамВФонды
	Если Не ЗначениеЗаполнено(Контрагент) ИЛИ Не ЗначениеЗаполнено(СчетКонтрагента) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СчетУчета", СчетУчетаРасчетовСКонтрагентом);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Сведения.Контрагент 		КАК Контрагент,
		|	Сведения.СчетКонтрагента	КАК СчетКонтрагента
		|ИЗ
		|	(" + ПроведениеРасчетов.ПолучитьПараметрыПлатежекПоВзносамВФонды(Организация,Ложь) + ") КАК Сведения
		|ГДЕ
		|	Сведения.СчетУчета = &СчетУчета";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			мКонтрагент = Выборка.Контрагент;
			мСчетУчета = Выборка.СчетКонтрагента;
		КонецЦикла;
		
		Контрагент = мКонтрагент;
		СчетКонтрагента = мСчетУчета;
		ПриИзмененииСчетаКонтрагента();		
	КонецЕсли;
КонецПроцедуры // СчетУчетаПриИзменении()

// Процедура - обработчик события "Очистка" поля ввода "СубконтоДт1".
//
Процедура СубконтоДт1Очистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	СубконтоДт1          = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);

КонецПроцедуры // СубконтоДт1Очистка

// Процедура - обработчик события "ПриИзменении" поля ввода "АвансовыйОтчет".
//
Процедура СубконтоДт2Очистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	СубконтоДт2          = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]);

КонецПроцедуры // СубконтоДт2Очистка

// Процедура - обработчик события "ПриИзменении" поля ввода "АвансовыйОтчет".
//
Процедура СубконтоДт3Очистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	СубконтоДт3          = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]);

КонецПроцедуры // СубконтоДт3Очистка

Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СуммаДокументаПриИзменении()	
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();	
	
КонецПроцедуры
                                      
Процедура ПеречислениеНалоговПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СуммаДокумента = ПеречислениеНалогов.Итог("Сумма");
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

Процедура ПеречислениеНалоговПослеУдаления(Элемент)
	
	СуммаДокумента = ПеречислениеНалогов.Итог("Сумма");
	
КонецПроцедуры

Процедура ПеречислениеНалоговПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока Тогда
		
		Если СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество() > 0 Тогда
			Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт1) Тогда
				ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт1 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
			КонецЕсли;
		КонецЕсли;
		
		Если СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество() > 1 Тогда
			Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт2) Тогда
				ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт2 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]);
			КонецЕсли;
		КонецЕсли;
		
		Если СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество() > 2 Тогда
			Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт3) Тогда
				ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт3 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьВедомость = ЗначениеЗаполнено(ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.Ведомость);
	ЭлементыФормы.ПеречислениеНалогов.Колонки.ПериодВзаиморасчетов.Доступность = НЕ ЕстьВедомость;
	ЭлементыФормы.ПеречислениеНалогов.Колонки.Сумма.Доступность = НЕ ЕстьВедомость;
	
КонецПроцедуры

Процедура ПеречислениеНалоговСубконтоДт1Очистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт1 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
	
КонецПроцедуры

Процедура ПеречислениеНалоговСубконтоДт2Очистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт2 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]);
	
КонецПроцедуры

Процедура ПеречислениеНалоговСубконтоДт3Очистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт3 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]);
	
КонецПроцедуры

Процедура ПеречислениеНалоговСуммаПриИзменении(Элемент)
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

Процедура СписокПриИзменении(Элемент)
	
	СформироватьНазначениеПлатежа();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыПослеУдаления(Элемент)
	СуммаДокумента=ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
	СформироватьНазначениеПлатежа();
КонецПроцедуры

Процедура ПеречислениеНалоговВедомостьПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт1) И ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.НачислениеКоммунальногоНалога") Тогда
		ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт1 = Справочники.Налоги.КоммунальныйНалог;
	КонецЕсли;

	ИндСтроки = ЭлементыФормы.ПеречислениеНалогов.ТекущаяСтрока.НомерСтроки-1;	
	РасчитатьВедомость(Элемент.Значение,ПеречислениеНалогов[ИндСтроки]);
	
	ЕстьВедомость = ЗначениеЗаполнено(ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.Ведомость);
	ЭлементыФормы.ПеречислениеНалогов.Колонки.ПериодВзаиморасчетов.Доступность = НЕ ЕстьВедомость;
	ЭлементыФормы.ПеречислениеНалогов.Колонки.Сумма.Доступность = НЕ ЕстьВедомость;

КонецПроцедуры

Процедура РасчитатьВедомость(Ведомость,СтрокаНалогов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ведомость",СтрокаНалогов.Ведомость);
	
	Если СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоНДФЛ Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|  СУММА(Основной.Налог) КАК Сумма
		|ИЗ Документ.ЗарплатаКВыплатеОрганизаций.НДФЛ КАК Основной
		|ГДЕ Основной.Ссылка = &Ведомость
		//ВОЕННЫЙ СБОР
		|	И Основной.ДоходНДФЛ.ВидСтавкиВоенныйСбор <> Основной.ДоходНДФЛ.ВидСтавкиРезидента
		|";
		СтрокаПредупреждений = НСтр("ru='В ведомости нет сведений о начисленном НДФЛ!';uk='У відомості немає відомостей про нарахований ПДФО!'");
		
	ИначеЕсли СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению
		ИЛИ СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию
		ИЛИ СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюНаСлучайБезработицы
		ИЛИ СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев
		Тогда
		
		Запрос.УстановитьПараметр("Налог",						СтрокаНалогов.СубконтоДт1);
		Запрос.УстановитьПараметр("СтатьяНалоговойДекларации",	СтрокаНалогов.СубконтоДт2);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|  СУММА(Основной.Результат) КАК Сумма
		|ИЗ (
		|	ВЫБРАТЬ
		|		Взносы.Результат
		|	ИЗ Документ.ЗарплатаКВыплатеОрганизаций.Взносы КАК Взносы
		|	ГДЕ		Взносы.Ссылка = &Ведомость
		|		И	Взносы.Налог = &Налог
		|		И	Взносы.СтатьяНалоговойДекларации = &СтатьяНалоговойДекларации
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ
		|		Взносы.Результат
		|	ИЗ Документ.ЗарплатаКВыплатеОрганизаций.ВзносыФОТ КАК Взносы
		|	ГДЕ		Взносы.Ссылка = &Ведомость
		|		И	Взносы.Налог = &Налог
		|		И	Взносы.СтатьяНалоговойДекларации = &СтатьяНалоговойДекларации
		|    ) КАК Основной
		|
		|";
		СтрокаПредупреждений = "В ведомости нет сведений о налоге"""+Строка(СтрокаНалогов.СубконтоДт1) +""" по статье """+ Строка(СтрокаНалогов.СубконтоДт2)+"""!";
	//ВОЕННЫЙ СБОР
	ИначеЕсли СтрокаНалогов.СубконтоДт1 = Справочники.Налоги.ВоенныйСбор Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|  СУММА(Основной.Налог) КАК Сумма
		|ИЗ Документ.ЗарплатаКВыплатеОрганизаций.НДФЛ КАК Основной
		|ГДЕ Основной.Ссылка = &Ведомость
		//ВОЕННЫЙ СБОР
		|	И Основной.ДоходНДФЛ.ВидСтавкиВоенныйСбор = Основной.ДоходНДФЛ.ВидСтавкиРезидента
		|   
		|";
		СтрокаПредупреждений = НСтр("ru='В ведомости нет сведений о начисленном военном сборе!';uk='У відомості немає відомостей про нарахований військовий збір!'");
		

	Иначе
		Возврат;		
	КонецЕсли;
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаНалогов.Сумма = Выборка.Сумма;
		СуммаДокумента = ПеречислениеНалогов.Итог("Сумма");
	Иначе
		Предупреждение(СтрокаПредупреждений);
	КонецЕсли;        
	
	
КонецПроцедуры

Процедура ПеречислениеНалоговВедомостьНачалоВыбора(Элемент, СтандартнаяОбработка)
		Если ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
		Если СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.РасчетыПоДругимНалогам Тогда
			Элемент.Значение = Документы.ЗарплатаКВыплатеОрганизаций.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		Если ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
			СтандартнаяОбработка=Ложь;

			ФормаВыбора = Документы["ЗарплатаКВыплатеОрганизаций"].ПолучитьФормуВыбора(,Элемент,);			
			ФормаВыбора.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
			ФормаВыбора.Отбор.Организация.Значение      = Организация;
			ФормаВыбора.Отбор.Организация.Использование = Истина;
			
			ФормаВыбора.Открыть();
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.НачислениеКоммунальногоНалога") Тогда
			СтандартнаяОбработка = Ложь;
			
			ФормаВыбора = Документы["НачислениеКоммунальногоНалога"].ПолучитьФормуВыбора(,Элемент,);
			
			ФормаВыбора.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
			ФормаВыбора.Отбор.Организация.Значение      = Организация;
			ФормаВыбора.Отбор.Организация.Использование = Истина;
			
			ФормаВыбора.Открыть();
		Иначе
			Возврат;
   		КонецЕсли;			
	КонецЕсли;

КонецПроцедуры

Процедура ПеречислениеНалоговВедомостьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
			Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
		Если ВыбранноеЗначение = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
			СтандартнаяОбработка=Ложь;
			ФормаВыбора = Документы["ЗарплатаКВыплатеОрганизаций"].ПолучитьФормуВыбора(,Элемент,);
						
			ФормаВыбора.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
			ФормаВыбора.Отбор.Организация.Значение      = Организация;
			ФормаВыбора.Отбор.Организация.Использование = Истина;
			
			ФормаВыбора.Открыть();
			
		ИначеЕсли ВыбранноеЗначение = Тип("ДокументСсылка.НачислениеКоммунальногоНалога") Тогда
			СтандартнаяОбрабока = Ложь;
			
			ФормаВыбора = Документы["НачислениеКоммунальногоНалога"].ПолучитьФормуВыбора(,Элемент,);
			
			ФормаВыбора.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
			ФормаВыбора.Отбор.Организация.Значение      = Организация;
			ФормаВыбора.Отбор.Организация.Использование = Истина;
			
			ФормаВыбора.Открыть();
		Иначе
			Возврат;
   		КонецЕсли;			
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ

