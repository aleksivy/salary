////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит текущую дату документа - для проверки перехода документа в другой период установки номера

Перем мСведенияОВидахРасчета;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит "Результат" текущей строки
Перем мСтарыйРезультат;
// Хранит "ОтработаноДней" текущей строки
Перем мБылоОтработаноДней;
// Хранит "ОтработаноЧасов" текущей строки
Перем мБылоОтработаноЧасов;
// Хранит "Результат" текущей строки ТЧ "Удержания
Перем мСтарыйРезультатУдержаний;

// Хранит текущее Физлицо для вывода в расчетный листок
Перем мТекущееФизЛицо;


////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура заполняет табличное поле "Расчетный листок"
Процедура ЗаполнитьРасчетныйЛисток(Редактирование = Ложь)
	
	Если ЭлементыФормы.КоманднаяПанельНачисления.Кнопки.РасчетныйЛисток.Пометка Тогда
		
		Если ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Начисления Тогда
			ТекущиеДанные = ЭлементыФормы.Начисления.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				ФизЛицо = ТекущиеДанные.Сотрудник.ФизЛицо;
				Сотрудник = ТекущиеДанные.Сотрудник;
			ИначеЕсли Начисления.Количество() > 0 Тогда
				ФизЛицо = Начисления[0].Сотрудник.ФизЛицо;
				Сотрудник = Начисления[0].Сотрудник;
			Иначе
				ФизЛицо = Неопределено;
				Сотрудник = Неопределено;
			КонецЕсли;			
			
		ИначеЕсли ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Удержания Тогда
			ТекущиеДанные = ЭлементыФормы.Удержания.ТекущиеДанные;			
			
			Если ТекущиеДанные <> Неопределено Тогда
				ФизЛицо = ТекущиеДанные.ФизЛицо;
			ИначеЕсли Начисления.Количество() > 0 Тогда
				ФизЛицо = Начисления[0].Сотрудник.ФизЛицо;
			Иначе
				ФизЛицо = Неопределено;
			КонецЕсли;
			Сотрудник = Неопределено;
			
		ИначеЕсли ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.ПогашениеЗаймов Тогда
			ТекущиеДанные = ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные;
			
			Если ТекущиеДанные <> Неопределено Тогда
				ФизЛицо = ТекущиеДанные.ФизЛицо;
			ИначеЕсли Начисления.Количество() > 0 Тогда
				ФизЛицо = Начисления[0].Сотрудник.ФизЛицо;
			Иначе
				ФизЛицо = Неопределено;
			КонецЕсли;
			Сотрудник = Неопределено;
		КонецЕсли;
		
		ТабличноеПолеРасчетногоЛистка = ЭлементыФормы.ТабличноеПолеРасчетногоЛистка;
		
		Если ТекущиеДанные = Неопределено Тогда
			мТекущееФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
			
			ТабличноеПолеРасчетногоЛистка.Очистить();
			Возврат;
		КонецЕсли;
		
		Если ФизЛицо <> мТекущееФизЛицо или Редактирование Тогда
			
			мТекущееФизЛицо = ФизЛицо;
			
			ВременныйТабличныйДокумент = ЗаполнитьТаблицуРасчетногоЛистка(ФизЛицо, Сотрудник);
			
			ТабличноеПолеРасчетногоЛистка.Очистить();
			Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабличноеПолеРасчетногоЛистка,ВременныйТабличныйДокумент) Тогда
				ТабличноеПолеРасчетногоЛистка.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли; 
			
			ТабличноеПолеРасчетногоЛистка.Вывести(ВременныйТабличныйДокумент);
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьРасчетныйЛисток

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельНачисления);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Удержания,ЭлементыФормы.КоманднаяПанельУдержания);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПогашениеЗаймов,ЭлементыФормы.КоманднаяПанель1);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

Процедура УстановитьЗначениеПогашеноПроцентов()
	
	ТекущиеДанные = ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные;
	ТекущиеДанные.ПогашеноПроцентов = Мин(ТекущиеДанные.ПогашеноЗайма, ТекущиеДанные.НачисленоПроцентов);
	
КонецПроцедуры

// управляет показателем в зависимости от способа расчета
//
Процедура ПриИзмененииВидаРасчета(ИмяОбъекта,Значение)

	СведенияОВидеРасчета = РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, Значение, "ПриРасчете");

	Для СчПоказателей = 1 По Мин(СведенияОВидеРасчета["КоличествоПоказателей"],6) Цикл
		Если НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Показатель" + СчПоказателей] = 0;
		КонецЕсли;
	КонецЦикла;
	

	
	
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" ТЧ
//
Процедура ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ДанныеСтрокиВидРасчета = ДанныеСтроки.ВидРасчета;
	
	СведенияОВидеРасчета = РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ДанныеСтрокиВидРасчета, "ПриРасчете");
	
	Для СчПоказателей = 1 По 6 Цикл
		
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			
			ВидимостьПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
			ВидимостьНаименованияПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"];
			
			// настроим видимость ячеек
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = ВидимостьНаименованияПоказателя;
			
			// размеры показателя будут доступны только для видимых и изменяемых показателей
			Если ВидимостьПоказателя Тогда
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется
				Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.ВиденНоНеРедактируетсяПриРасчете
				Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически;
			КонецЕсли;
			
			// если отображается наименование - пропишем текст
			Если ВидимостьНаименованияПоказателя Тогда		
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
			ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
				ВидимостьПоказателя = СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"];
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = Не ВидимостьПоказателя;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"];			
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);			
			КонецЕсли;
			
		Иначе
			// настроим видимость ячеек
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;			
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;

КонецПроцедуры //ПриВыводеСтроки

// Процедура - устанавливает видимость для реквизита "ВидСхемыМотивации"
//
Процедура УстановитьВидимостьВидаСхемыМотивации()
	
	ЭлементыФормы.ВидСхемыМотивации.Доступность			= ПоВременнойСхемеМотивации;
	ЭлементыФормы.НадписьВидСхемыМотивации.Доступность	= ПоВременнойСхемеМотивации;

КонецПроцедуры //

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
		
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	Иначе 
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ДатаОкончания");

	// Установить ограничение - изменять видимость колонок для табличной части Начисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ДатаОкончания");

	// Установить ограничение - изменять видимость колонок для табличной части Удержания
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Удержания.Колонки, СтруктураКолонок);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ФизЛицо");
	СтруктураКолонок.Вставить("НачисленоПроцентов");
	СтруктураКолонок.Вставить("ПогашеноПроцентов");
	СтруктураКолонок.Вставить("ПогашеноЗайма");

	// Установить ограничение - изменять видимость колонок для табличной части Удержания
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ПогашениеЗаймов.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(ЭлементыФормы,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу"));	
	
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.Начисления.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу"));

	// при открытии формы расчетный листок не показываем
	ЭлементыФормы.Разделитель.Свертка				= РежимСверткиЭлементаУправления.Низ;
	ЭлементыФормы.ПанельРасчетногоЛистка.Свертка	= РежимСверткиЭлементаУправления.Низ;
	
	УстановитьВидимостьВидаСхемыМотивации();
	
	// Установить активный реквизит.
	//Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
	//	ТекущийЭлемент = ЭлементыФормы.Начисления;
	//КонецЕсли;
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
		
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ЗаполнитьПостроительЗапроса" Тогда
			Автозаполнение(ЗначениеВыбора.ПостроительЗапроса);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при смене закладки
//
Процедура Панель1ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЗаполнитьРасчетныйЛисток()

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

Процедура ДействияФормыОчистить(Кнопка)
	
	Если Начисления.Количество() > 0 ИЛИ Удержания.Количество() > 0 ИЛИ ПогашениеЗаймов.Количество()>0 Тогда
		
		ТекстВопроса = НСтр("ru='Табличные части будут очищены. Продолжить?';uk='Табличні частини будуть очищені. Продовжити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Начисления.Очистить();
		Удержания.Очистить();
		ПогашениеЗаймов.Очистить();
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ДействияФормыЗаполнить(Кнопка)

	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='заполнить';uk='заповнити'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если Начисления.Количество() > 0 ИЛИ Удержания.Количество() > 0 ИЛИ ПогашениеЗаймов.Количество()>0 Тогда
	
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Заполнить?';uk='Перед заповненням табличні частини будуть очищені. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Автозаполнение() Тогда
		// если автозаполнение выполнено проверим результат - если ничего не заполнилось - сообщим
		Если Начисления.Количество() = 0 И Удержания.Количество() = 0 И ПогашениеЗаймов.Количество() = 0 Тогда
			Сообщить(НСтр("ru='Не обнаружены данные для записи в табличные части документа.';uk='Не виявлені дані для запису в табличні частини документа.'"), СтатусСообщения.Важное )
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыРассчитать(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьВсе();
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат	= ТекущаяСтрока.Результат;
		мБылоОтработаноДней	= ТекущаяСтрока.ОтработаноДней;
		мБылоОтработаноЧасов= ТекущаяСтрока.ОтработаноЧасов;
	КонецЕсли;
	
	ТекущаяСтрока = ЭлементыФормы.Удержания.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультатУдержаний	= ТекущаяСтрока.Результат;
	КонецЕсли;
	
	ЗаполнитьРасчетныйЛисток(Истина);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельНачисленияПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(ЭлементыФормы.Начисления, Ссылка, Ложь, Дата);
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельУдержанияПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(ЭлементыФормы.Удержания, Ссылка, Ложь, Дата);
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанель1Подбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(ЭлементыФормы.ПогашениеЗаймов, Ссылка, Ложь, Дата);
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура ДействияФормыРасчетныйЛисток 
//
// Параметры:
//	Элемент - Кнопка - "Расчетный листок"
// 
Процедура ДействияФормыРасчетныйЛисток(Кнопка)	
	
	ПометкаКнопки = Не ЭлементыФормы.КоманднаяПанельНачисления.Кнопки.РасчетныйЛисток.Пометка;
	
	ЭлементыФормы.КоманднаяПанельНачисления.Кнопки.РасчетныйЛисток.Пометка	= ПометкаКнопки;
	ЭлементыФормы.КоманднаяПанельУдержания.Кнопки.РасчетныйЛисток.Пометка	= ПометкаКнопки;
	ЭлементыФормы.КоманднаяПанель1.Кнопки.РасчетныйЛисток.Пометка			= ПометкаКнопки;
	
	Если ПометкаКнопки Тогда
		ЗаполнитьРасчетныйЛисток();
	КонецЕсли;
	
	НоваяСверткаРасчетногоЛистка = ?(ПометкаКнопки, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Низ);	
	ЭлементыФормы.Разделитель.Свертка = НоваяСверткаРасчетногоЛистка;
	ЭлементыФормы.ПанельРасчетногоЛистка.Свертка = НоваяСверткаРасчетногоЛистка;

КонецПроцедуры //ДействияФормыРасчетныйЛисток()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" признака "ПоВременнойСхеме"
//
Процедура ПоВременнойСхемеМотивацииПриИзменении(Элемент)
	
	УстановитьВидимостьВидаСхемыМотивации();
	
КонецПроцедуры //ПоВременнойСхемеМотивацииПриИзменении

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ

Процедура ТабличнаяЧастьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Начисления.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		
		СтрокаТабличнойЧасти = Начисления.Добавить();
		СтрокаТабличнойЧасти.Сотрудник		= ВыбранноеЗначение;
		СтрокаТабличнойЧасти.Авторасчет		= Истина;
		
		СведенияПоСотруднику = ПроцедурыУправленияПерсоналом.СведенияПоВыбранномуРаботнику(ВыбранноеЗначение, "Работники, УчетЗаработкаРаботников");
		Если СведенияПоСотруднику <> Неопределено Тогда
			СтрокаТабличнойЧасти.Подразделение	= СведенияПоСотруднику.Подразделение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  // ТабличнаяЧастьОбработкаВыбора

Процедура СотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "Работники", Текст);
	
КонецПроцедуры

Процедура СотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение);
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования"
//
Процедура ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ЗаполнитьРасчетныйЛисток(Истина);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Начисления и ее РЕКВИЗИТОВ

// Процедура обеспечивает синхронизацию строк табличных полей 
//
// Параметры:
//  Элемент - табличное поле, которое отображает т.ч.
//  
Процедура НачисленияПриАктивизацииСтроки(Элемент)

    ПодключитьОбработчикОжидания("ОбработчикОжиданияНачисленияПриАктивизацииСтроки", 0.1, Истина);	 
	
КонецПроцедуры

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля Начисления
//
Процедура ОбработчикОжиданияНачисленияПриАктивизацииСтроки()
    ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
    Если ТекущаяСтрока <> Неопределено Тогда
        мСтарыйРезультат = ТекущаяСтрока.Результат;
        мБылоОтработаноДней = ТекущаяСтрока.ОтработаноДней;
        мБылоОтработаноЧасов = ТекущаяСтрока.ОтработаноЧасов;
    КонецЕсли;
    
    ЗаполнитьРасчетныйЛисток();
КонецПроцедуры // ОбработчикОжиданияНачисленияПриАктивизацииСтроки

 
// Процедура - обработчик события "ПриВыводеСтроки" ТЧ
//
Процедура НачисленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
	ЯчейкаСКартинкой = ОформлениеСтроки.Ячейки.Картинка;
	ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
	ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);	

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ
//
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина
	КонецЕсли;

КонецПроцедуры

Процедура НачисленияСотрудникПриИзменении(Элемент)
	
	
	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущиеДанные;
	ДанныеСтроки.ФизЛицо = Элемент.Значение.ФизЛицо;
	
	ВыбранноеЗначение = ПроцедурыУправленияПерсоналом.СведенияПоВыбранномуРаботнику(Элемент.Значение, "Работники");
	Если ВыбранноеЗначение <> Неопределено Тогда
		ДанныеСтроки.Подразделение = ВыбранноеЗначение.Подразделение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура НачисленияСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СведенияПоСотруднику = ПроцедурыУправленияПерсоналом.СведенияПоВыбранномуРаботнику(ВыбранноеЗначение, "Работники, УчетЗаработкаРаботников");
	Если СведенияПоСотруднику <> Неопределено Тогда
		ЭлементыФормы.Начисления.ТекущиеДанные.Подразделение = СведенияПоСотруднику.Подразделение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода вида расчета
//
Процедура НачисленияВидРасчетаПриИзменении(Элемент)
	
	ПриИзмененииВидаРасчета("Начисления",Элемент.Значение);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "Результат"
//
Процедура НачисленияРезультатПриИзменении(Элемент)
	
	Если Элемент.Значение <> мСтарыйРезультат Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мСтарыйРезультат = Элемент.Значение;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ОтработаноЧасов"
//
Процедура НачисленияОтработаноЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоОтработаноЧасов Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мБылоОтработаноЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриПолученииДанных"
Процедура НачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Начисления, ОформленияСтрок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Удержания и ее РЕКВИЗИТОВ

// Процедура обеспечивает синхронизацию строк табличных полей 
//
// Параметры:
//  Элемент - табличное поле, которое отображает т.ч.
//  
Процедура УдержанияПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбработчикОжиданияУдержанияПриАктивизацииСтроки", 0.1, Истина);	 	
    
КонецПроцедуры

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля Удержания
//
Процедура ОбработчикОжиданияУдержанияПриАктивизацииСтроки()
    
    ТекущаяСтрока = ЭлементыФормы.Удержания.ТекущаяСтрока;
    Если ТекущаяСтрока <> Неопределено Тогда
        мСтарыйРезультатУдержаний = ТекущаяСтрока.Результат;
    КонецЕсли;
    
    ЗаполнитьРасчетныйЛисток();

КонецПроцедуры // ОбработчикОжиданияУдержанияПриАктивизацииСтроки

Процедура УдержанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Удержания.НайтиСтроки(Новый Структура("Физлицо", ВыбранноеЗначение.Физлицо)).Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Удержания.Добавить();
		СтрокаТабличнойЧасти.Физлицо		= ВыбранноеЗначение.Физлицо;
		СтрокаТабличнойЧасти.Авторасчет		= Истина;
		
		СведенияПоСотруднику = ПроцедурыУправленияПерсоналом.СведенияПоВыбранномуРаботнику(ВыбранноеЗначение, "Работники, УчетЗаработкаРаботников");
		Если СведенияПоСотруднику <> Неопределено Тогда
			СтрокаТабличнойЧасти.Подразделение	= СведенияПоСотруднику.Подразделение;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // УдержанияОбработкаВыбора

// Процедура - обработчик события "ПриВыводеСтроки" ТЧ
//
Процедура УдержанияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
	ЯчейкаСКартинкой = ОформлениеСтроки.Ячейки.Картинка;
	ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
	ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ
//
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина
	КонецЕсли;
	
КонецПроцедуры

Процедура УдержанияФизлицоПриИзменении(Элемент)
	
	ВыбранноеЗначение = ПроцедурыУправленияПерсоналом.СведенияПоВыбранномуРаботнику(Элемент.Значение, "Работники");
	Если ВыбранноеЗначение <> Неопределено Тогда
		ЭлементыФормы.Удержания.ТекущиеДанные.Подразделение = ВыбранноеЗначение.Подразделение;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдержанияФизлицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура УдержанияФизлицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
		СведенияПоСотруднику = ПроцедурыУправленияПерсоналом.СведенияПоВыбранномуРаботнику(ВыбранноеЗначение, "Работники, УчетЗаработкаРаботников");
		Если СведенияПоСотруднику <> Неопределено Тогда
			ЭлементыФормы.Удержания.ТекущиеДанные.Подразделение = СведенияПоСотруднику.Подразделение;
		КонецЕсли;	
	Иначе
		Элемент.Значение = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода вида расчета
//
Процедура УдержанияВидРасчетаПриИзменении(Элемент)
	
	ПриИзмененииВидаРасчета("Удержания",Элемент.Значение);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "Результат"
//
Процедура УдержанияРезультатПриИзменении(Элемент)
	
	Если Элемент.Значение <> мСтарыйРезультатУдержаний Тогда
		ЭлементыФормы.Удержания.ТекущаяСтрока.Авторасчет = Ложь;
		мСтарыйРезультатУдержаний = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ПогашениеЗаймов и ее РЕКВИЗИТОВ

// Процедура обеспечивает синхронизацию строк табличных полей 
//
// Параметры:
//  Элемент - табличное поле, которое отображает т.ч.
//  
Процедура ПогашениеЗаймовПриАктивизацииСтроки(Элемент)

    ПодключитьОбработчикОжидания("ОбработчикОжиданияПогашениеЗаймовПриАктивизацииСтроки", 0.1, Истина);	 
	
КонецПроцедуры

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля ПогашениеЗаймов
//
Процедура ОбработчикОжиданияПогашениеЗаймовПриАктивизацииСтроки()
    
    ЗаполнитьРасчетныйЛисток();
    
КонецПроцедуры // ОбработчикОжиданияПогашениеЗаймовПриАктивизацииСтроки

Процедура ПогашениеЗаймовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ДоговорЗаймаСРаботником") Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;	
		ТекущиеДанные.ДоговорЗайма = ВыбранноеЗначение;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Физлицо) Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные,ВыбранноеЗначение,"Физлицо");
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ПогашениеЗаймов.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение.ФизЛицо)).Количество() = 0 Тогда
			СтрокаТабличнойЧасти = ПогашениеЗаймов.Добавить();
			СтрокаТабличнойЧасти.Физлицо = ВыбранноеЗначение.Физлицо;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПогашениеЗаймовОбработкаВыбора

Процедура ПогашениеЗаймовФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура ПогашениеЗаймовФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элемент.Значение = ВыбранноеЗначение.Физлицо;
	
КонецПроцедуры

Процедура ПогашениеЗаймовДоговорЗаймаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка  = Ложь;
	
	ФормаВыбора = Документы.ДоговорЗаймаСРаботником.ПолучитьФормуВыбора(, ЭлементыФормы.ПогашениеЗаймов);
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбора.Отбор.ОтражатьВУправленческомУчете.ВидСравнения	 = ВидСравнения.Равно;
	ФормаВыбора.Отбор.ОтражатьВУправленческомУчете.Значение		 = Истина;
	ФормаВыбора.Отбор.ОтражатьВУправленческомУчете.Использование = Истина;
	
	Если ЗначениеЗаполнено(ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные.ФизЛицо) Тогда
		ФормаВыбора.Отбор.ФизЛицо.ВидСравнения	 = ВидСравнения.Равно;
		ФормаВыбора.Отбор.ФизЛицо.Значение		 = ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные.ФизЛицо;
		ФормаВыбора.Отбор.ФизЛицо.Использование	 = Истина;
	КонецЕсли;
		
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ПогашениеЗаймовДоговорЗаймаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ФизЛицо) Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные,Элемент.Значение,"Физлицо");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПогашениеЗаймовНачисленоПроцентовПриИзменении(Элемент)
	
	УстановитьЗначениеПогашеноПроцентов();
	
КонецПроцедуры

Процедура ПогашениеЗаймовПогашениеОсновногоДолгаПриИзменении(Элемент)
	
	УстановитьЗначениеПогашеноПроцентов();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСведенияОВидахРасчета = Новый Соответствие;
