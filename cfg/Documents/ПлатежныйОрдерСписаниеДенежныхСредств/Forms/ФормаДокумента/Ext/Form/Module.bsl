////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;
//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

Перем мСчетБУ;

// Хранит схему налогообложения текущей организации 
Перем мТекущаяСхемаНалогообложения; 

Перем мВедомость;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
 

// Процедура устанавливает видимость закладок. 
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ЭлементыФормы.ПанельПлатежи.Видимость=Истина;	
		
	Если ВидОперации=Перечисления.ВидыОперацийПлатежныйОрдерСписание.ПеречислениеНалога Тогда
		
		Список = ПеречислениеНалогов.Количество()>1;
		Если Список Тогда
			РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоНесколькимНалогам", ЭлементыФормы.ПанельПлатежи);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПлатежныйОрдерСписание.ПеречислениеНалога Тогда
			РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		КонецЕсли;
		
		ЭлементыФормы.НадписьРедактировать.Видимость = Истина;
		ЭлементыФормы.Список.Видимость = Истина;
		ЭлементыФормы.Список1.Видимость = Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПлатежныйОрдерСписание.ПеречислениеЗаработнойПлаты Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПеречислениеЗП", ЭлементыФормы.ПанельПлатежи);
		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;


	КонецЕсли;
	
	ЭлементыФормы.Организация.Доступность=Истина;
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Доступность=Истина;
	
КонецПроцедуры // УстановитьВидимость()

Процедура УстановитьВидимостьСубконто()

	Для Ном = 1 по 3 Цикл

		Если (Ном <= СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество()) 
			И (ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом)) Тогда
			
			ЭлементыФормы.ПеречислениеНалогов.Колонки["СубконтоДт"+Ном].ТекстШапки = СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном-1].ВидСубконто.Наименование;
			ЭлементыФормы.ПеречислениеНалогов.Колонки["СубконтоДт"+Ном].Видимость = Истина;
				
			ЭлементыФормы["НадписьСубконтоДт"+Ном].Заголовок = СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном-1].ВидСубконто.Наименование;
			ЭлементыФормы["НадписьСубконтоДт"+Ном].Видимость = Истина;
			ЭлементыФормы["СубконтоДт"+Ном].Видимость        = Истина;
			
		Иначе
			
			ЭлементыФормы.ПеречислениеНалогов.Колонки["СубконтоДт"+Ном].Видимость = Ложь;
			
			ЭлементыФормы["НадписьСубконтоДт"+Ном].Видимость = Ложь;
			ЭлементыФормы["СубконтоДт"+Ном].Видимость        = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Процедура выполняет действия, необходимые при выборе организации
//
// Параметры:
//  Нет.
//
Процедура НачальноеЗаполнениеПриВыбореОрганизации()

	//////Если Организация.Пустая() Тогда
	//////	
	//////	СчетОрганизации = "";
	//////	
	//////КонецЕсли;	

КонецПроцедуры	// НачальноеЗаполнениеПриВыбореОрганизации()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		
        ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
		
		Если ЗначениеЗаполнено(СтрокаПлатеж) Тогда
			УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
		КонецЕсли;
				
		ВидОперации = Перечисления.ВидыОперацийПлатежныйОрдерСписание.ПеречислениеЗаработнойПлаты;
		ПериодРегистрации = Дата;
		ПеречислениеНалогов.Добавить();
		ЭлементыФормы.ПеречислениеНалогов.ТекущаяСтрока = ПеречислениеНалогов[0];

		
		// Запомнить текущие значения реквизитов формы.
		мТекущаяДатаДокумента        = Дата;
	    		
		Если ВалютаДокумента.Пустая() Тогда
			ВалютаДокумента=мВалютаРегламентированногоУчета;
			ИзменитьКурсДокумента();
		КонецЕсли;
				
	Иначе
		
		ИзменитьКурсДокумента();
		
		мТекущаяДатаДокумента        = Дата;
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;	

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	//Доступность поля ввода номера
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);


	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	
	ИсключаемыеОперации=Новый Структура;
	ИсключаемыеОперации.Вставить("ПеречислениеЗП");
	
	
	Массив = Новый Массив;
	Массив.Добавить(ВидОперации.Метаданные().ЗначенияПеречисления.ПеречислениеНалога);
	Массив.Добавить(ВидОперации.Метаданные().ЗначенияПеречисления.ПеречислениеЗаработнойПлаты);	
	УправлениеДенежнымиСредствами.УстановитьПодменюВыбораВидаОперацииОтбор(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
											Массив,
//	                                      	ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      	Новый Действие("ДействияФормыДействиеУстановитьОперацию"), 
											ИсключаемыеОперации);
										  	
	УстановитьВидимость();
	УстановитьВидимостьСубконто();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		
		ВидОперации = Перечисления.ВидыОперацийПлатежныйОрдерСписание[Кнопка.Имя];
				
		Список = Ложь;
		
		Если ЗначениеЗаполнено(СтрокаПлатеж) Тогда
			УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
		КонецЕсли;
		
		
		
		УстановитьВидимость();
				
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	ИзменитьКурсДокумента();
	//РассчитатьСуммуПлатежа();
	
КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура ИзменитьКурсДокумента()
	
	СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // ИзменитьКурсДокумента()

// Обработчик события "ПриИзменении" реквизита "Организация"
//
Процедура ОрганизацияПриИзменении(Элемент)
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	

	
	НачальноеЗаполнениеПриВыбореОрганизации();
		
	Если ЗначениеЗаполнено(Организация) Тогда
		СчетОрганизации=Организация.ОсновнойБанковскийСчет;
	Иначе
		СчетОрганизации=Неопределено;
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
	Если Ответственный.Пустая() Тогда
		Ответственный     = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПлатежныйОрдерСписание.ПеречислениеНалога Тогда
		Если ПеречислениеНалогов.Количество()=1 Тогда
			ПеречислениеНалогов[0].СубконтоДт1 = СубконтоДт1;
			ПеречислениеНалогов[0].СубконтоДт2 = СубконтоДт2;
			ПеречислениеНалогов[0].СубконтоДт3 = СубконтоДт3;
			ПеречислениеНалогов[0].Ответственный = Ответственный;
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СчетУчетаПриИзменении(Элемент)

	Если Элемент.Значение = мСчетБУ тогда
		Возврат;
	КонецЕсли;

	УстановитьВидимостьСубконто();

	Если СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество() > 0 Тогда
		СубконтоДт1 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
	КонецЕсли;

	Если СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество() > 1 Тогда
		СубконтоДт2 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]);
	КонецЕсли;

	Если СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество() > 2 Тогда
		СубконтоДт3 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]);
	КонецЕсли;

	мСчетБУ = Элемент.Значение;

КонецПроцедуры // СчетУчетаПриИзменении()

// Процедура - обработчик события "Очистка" поля ввода "СубконтоДт1".
//
Процедура СубконтоДт1Очистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	СубконтоДт1          = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);

КонецПроцедуры // СубконтоДт1Очистка

// Процедура - обработчик события "ПриИзменении" поля ввода "АвансовыйОтчет".
//
Процедура СубконтоДт2Очистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	СубконтоДт2          = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]);

КонецПроцедуры // СубконтоДт2Очистка

// Процедура - обработчик события "ПриИзменении" поля ввода "АвансовыйОтчет".
//
Процедура СубконтоДт3Очистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	СубконтоДт3          = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]);

КонецПроцедуры // СубконтоДт3Очистка

Процедура СуммаДокументаПриИзменении()
	
	Если (ВидОперации = Перечисления.ВидыОперацийПлатежныйОрдерСписание.ПеречислениеНалога) И (НЕ Список) Тогда
		ПеречислениеНалогов[0].Сумма = СуммаДокумента;
	КонецЕсли;
				
КонецПроцедуры

Процедура СписокПриИзменении(Элемент)
			
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

//Процедура вызывается при смене страницы панели "Платежи"
Процедура ПанельПлатежиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элемент.ТекущаяСтраница.Имя = "ПлатежПрочие"
	ИЛИ Элемент.ТекущаяСтраница.Имя = "ПокупкаПродажаВалюты" Тогда
	
		УстановитьВидимостьСубконто();
	
	КонецЕсли;
	
КонецПроцедуры

// =======================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ТАБЛИЧНОЙ ЧАСТИ ПеречислениеНалогов

Процедура ПеречислениеНалоговПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если ПеречислениеНалогов.Количество() <> 0 Тогда
		
		Если СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество() > 0 Тогда
			Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт1) Тогда
				ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт1 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
			КонецЕсли;
		КонецЕсли;
		
		Если СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество() > 1 Тогда
			Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт2) Тогда
				ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт2 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]);
			КонецЕсли;
		КонецЕсли;
		
		Если СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество() > 2 Тогда
			Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт3) Тогда
				ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт3 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СубконтоДт1ПриИзменении(Элемент)
	
	Если ПеречислениеНалогов.Количество()=0 Тогда
		ПеречислениеНалогов.Добавить();
	КонецЕсли;
	
	Если ПеречислениеНалогов.Количество()=1 Тогда
		
		ПеречислениеНалогов[0].СубконтоДт1 = СубконтоДт1;
		
	КонецЕсли;
			

КонецПроцедуры

Процедура СубконтоДт2ПриИзменении(Элемент)
	
	Если ПеречислениеНалогов.Количество()=0 Тогда
		ПеречислениеНалогов.Добавить();
	КонецЕсли;
	
	Если ПеречислениеНалогов.Количество()=1 Тогда
		
		ПеречислениеНалогов[0].СубконтоДт2 = СубконтоДт2;
		
	КонецЕсли;
			

КонецПроцедуры

Процедура СубконтоДт3ПриИзменении(Элемент)
			
	Если ПеречислениеНалогов.Количество()=1 Тогда
		
		ПеречислениеНалогов[0].СубконтоДт3 = СубконтоДт3;
		
	КонецЕсли;
			

КонецПроцедуры

Процедура ПеречислениеНалоговСубконтоДт1ПриИзменении(Элемент)
	
	Если ПеречислениеНалогов.Количество()=1 Тогда
		
		СубконтоДт1  = ПеречислениеНалогов[0].СубконтоДт1;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПеречислениеНалоговСубконтоДт2ПриИзменении(Элемент)
	
	Если ПеречислениеНалогов.Количество()=1 Тогда
		
		СубконтоДт2  = ПеречислениеНалогов[0].СубконтоДт2;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПеречислениеНалоговСубконтоДт3ПриИзменении(Элемент)
	
	Если ПеречислениеНалогов.Количество()=1 Тогда
		
		СубконтоДт3  = ПеречислениеНалогов[0].СубконтоДт3;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПеречислениеНалоговПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СуммаДокумента = ПеречислениеНалогов.Итог("Сумма");
	
КонецПроцедуры

Процедура ПеречислениеНалоговПослеУдаления(Элемент)
	
	СуммаДокумента = ПеречислениеНалогов.Итог("Сумма");
	
КонецПроцедуры

Процедура ПеречислениеЗаработнойПлатыВедомостьНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	мВедомость = Элемент.Значение;
	
	
	ФормаВыбора = Документы["ЗарплатаКВыплатеОрганизаций"].ПолучитьФормуВыбора(,Элемент,);
	
	//Выбираем ведомости, относящиеся к выбранной в документе организации, со способом выплаты
	//"Через банк" и не имеющие в ТЧ строки с реквизитом "Не выплачено"
	
	Запрос=Новый Запрос;
	Запрос.Текст="
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплатеОрганизаций.Ссылка.Номер КАК НомерВедомости
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК ЗарплатаКВыплатеОрганизаций
	|
	|ГДЕ	ЗарплатаКВыплатеОрганизаций.Ссылка.Организация = &Организация 		
	|	И	ЗарплатаКВыплатеОрганизаций.Банк = &Банк
	|";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Банк", Контрагент);
	СписокОтбора=Новый СписокЗначений;
	СписокОтбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НомерВедомости"));
	
	ФормаВыбора.Отбор.Номер.ВидСравнения=ВидСравнения.ВСписке;
	ФормаВыбора.Отбор.Номер.Значение      = СписокОтбора;
	ФормаВыбора.Отбор.Номер.Использование = Истина;
	
	ФормаВыбора.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
	ФормаВыбора.Отбор.Организация.Значение      = Организация;
	ФормаВыбора.Отбор.Организация.Использование = Истина;
	
	ФормаВыбора.Открыть();
КонецПроцедуры

Процедура ПеречислениеЗаработнойПлатыВедомостьПриИзменении(Элемент)
Если Элемент.Значение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура ("Ведомость");
	Отбор.Ведомость = мВедомость;
	СтрокаПеречисленийЗаработнойПлаты = ВыплатаЗаработнойПлаты.НайтиСтроки(Отбор);
	Для каждого СтрокаВыплаты Из СтрокаПеречисленийЗаработнойПлаты Цикл
		ВыплатаЗаработнойПлаты.Удалить(СтрокаВыплаты);	
	КонецЦикла;
	
	мВедомость = Элемент.Значение;
	Отбор.Ведомость = мВедомость;
	СтрокаПеречисленийЗаработнойПлаты = ВыплатаЗаработнойПлаты.НайтиСтроки(Отбор);
	Для каждого СтрокаПеречислений Из СтрокаПеречисленийЗаработнойПлаты Цикл
		ВыплатаЗаработнойПлаты.Удалить(СтрокаПеречислений);	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Элемент.Значение);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Банк", Контрагент);
	Запрос.УстановитьПараметр("ЧерезБанк", Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(Основной.Сумма) КАК Сумма,
	|	Основной.Ссылка КАК Ведомость,
	|	Основной.СчетУчета
	|ИЗ Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК Основной
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Работники
	|ПО Работники.Ссылка = Основной.Ссылка
	|	И	Работники.Сотрудник = Основной.Сотрудник
	|
	|ГДЕ	Основной.Ссылка = &Ссылка
	|	И  	Работники.СпособВыплаты = &ЧерезБанк
	|	И	Работники.Банк = &Банк
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.Ссылка,
	|	Основной.СчетУчета
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаПеречислений = ВыплатаЗаработнойПлаты.Добавить();
		СтрокаПеречислений.Ведомость = Выборка.Ведомость;
		СтрокаПеречислений.СчетУчета = Выборка.СчетУчета;
		СтрокаПеречислений.СуммаКВыплате = Выборка.Сумма;
		
	КонецЦикла;
	
	СуммаДокумента=ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
	
КонецПроцедуры

Процедура ПеречислениеЗаработнойПлатыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	СуммаДокумента = ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
		// проставим основной договор контрагента

	Если ЗначениеЗаполнено(Контрагент) Тогда
		СчетКонтрагента=Контрагент.ОсновнойБанковскийСчет;
	Иначе
		СчетКонтрагента=Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПеречислениеНалоговСубконтоДт1Очистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт1 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
	
КонецПроцедуры

Процедура ПеречислениеНалоговСубконтоДт2Очистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт2 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]);
	
КонецПроцедуры

Процедура ПеречислениеНалоговСубконтоДт3Очистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлементыФормы.ПеречислениеНалогов.ТекущиеДанные.СубконтоДт3 = Новый(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ
