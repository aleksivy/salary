// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем ТаблицаПлатежейУпр;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплата()

	СтруктураПолей=Новый Структура;
	//////СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	СтруктураПолей.Вставить("СуммаДокумента");

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	//////Если ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	//////КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	//////ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента);
    ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента);

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента)
	
	РасчетыВВалюте = Ложь;	
	// Бухгалтерские проводки документа

	ВалютаРег   = мВалютаРегламентированногоУчета;
		
	Если ВидОперации = Перечисления.ВидыОперацийПлатежныйОрдерСписание.ПеречислениеНалога Тогда
		
		Для каждого ТекущаяСтрока Из ПеречислениеНалогов Цикл
						
			// только для расчета ЗП
			Если СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоНДФЛ Тогда
				
				// движения по НДФЛ расчеты с бюджетом
				// + по регистру накопления Взносы в Фонды
				Движение = Движения.ВзаиморасчетыПоНДФЛ.Добавить();
				// свойства                              
				Движение.Период				= ПериодРегистрации;
				Движение.ВидДвижения		= ВидДвиженияНакопления.Расход;
				// измерения 
				Движение.ПериодВзаиморасчетов	= ТекущаяСтрока.ПериодВзаиморасчетов;
				Движение.Организация			= Организация; 
				// ресурсы
				Движение.НеподтвержденнаяСумма	= СуммаДокумента;
				// реквизиты
				Движение.Ответственный	= ПеречислениеНалогов[0].Ответственный;            
				
			ИначеЕсли СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению 
				ИЛИ СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию
				ИЛИ СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюНаСлучайБезработицы
				ИЛИ СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев
				Тогда
				
				// + по регистру накопления Взносы в Фонды
				Движение = Движения.ВзаиморасчетыПоВзносамВФонды.Добавить();
				// свойства                              
				Движение.Период			= ПериодРегистрации;
				Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
				// измерения 
				Движение.ПериодВзаиморасчетов		= ТекущаяСтрока.ПериодВзаиморасчетов;
				Движение.Организация				= Организация; 
				Движение.Налог						= ТекущаяСтрока.СубконтоДт1;
				Движение.СтатьяНалоговойДекларации	= ТекущаяСтрока.СубконтоДт2;

				// ресурсы
				Движение.НеподтвержденнаяСумма = ТекущаяСтрока.Сумма;
				// реквизиты
				
			КонецЕсли; 	
			
		КонецЦикла;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПлатежныйОрдерСписание.ПеречислениеЗаработнойПлаты Тогда	
		
		СпособОплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк;
		ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
		ПроведениеРасчетов.ВыполнитьДвиженияПоЗарплате( Ссылка, Движения, СпособОплаты, ВыплаченностьЗарплаты, СчетОрганизации,,Контрагент );
		
			
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок)
	
				
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаРегл(Отказ, Режим, Заголовок)
			
		Если ВидОперации=Перечисления.ВидыОперацийПлатежныйОрдерСписание.ПеречислениеНалога
			ИЛИ ВидОперации=Перечисления.ВидыОперацийПлатежныйОрдерСписание.ПрочееСписаниеБезналичныхДенежныхСредств Тогда

			СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом");
			ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
			
			// должен быть заполнене период взаиморасчетов в ТЧ Перечисление налогов
			Если Истина Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Ссылка", Ссылка);
				Запрос.УстановитьПараметр("Неопределено", Неопределено);
				Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
				НаименованиеДокумента = Ссылка.Метаданные().Имя;
				
				Запрос.Текст = "
				|ВЫБРАТЬ                                          
				|	НалогиПлатежки.НомерСтроки,
				|	НалогиПлатежки.ПериодВзаиморасчетов	КАК ПериодВзаиморасчетов
				|ИЗ Документ." + НаименованиеДокумента + ".ПеречислениеНалогов  КАК НалогиПлатежки
				|
				|ГДЕ	НалогиПлатежки.Ссылка = &Ссылка
				|	И	НалогиПлатежки.ПериодВзаиморасчетов = &ПустаяДата
				|";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='В строке " + Выборка.НомерСтроки + "не указан Приод взаиморасчетов.'"),Отказ,Заголовок);	
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе

			Если ВидОперации=Перечисления.ВидыОперацийПлатежныйОрдерСписание.ОплатаПоставщику
			ИЛИ ВидОперации=Перечисления.ВидыОперацийПлатежныйОрдерСписание.ВозвратДенежныхСредствПокупателю Тогда
				СтруктураПолей.Вставить("СчетУчетаРасчетовПоАвансам");			
			КонецЕсли;
			
		КонецЕсли;

	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете",Истина); // Банковские документы всегда отражаются в упр. учете
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплата(), Отказ, Заголовок);
		
	Если Не Отказ Тогда
		
		ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок);
		ПроверитьЗаполнениеДокументаРегл(Отказ, Режим, Заголовок);
		
	КонецЕсли;
		
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;
			
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
		НаборЗаписейРегистрацииВПоследовательности.Записать();
	КонецЦикла;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

#КонецЕсли
