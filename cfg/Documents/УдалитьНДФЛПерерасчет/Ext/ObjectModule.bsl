////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


// Заполняет табличную часть РаботникиОрганизации, всеми физ лицами, которые числятся на конец периода по указанным координатам, 
// их дыижения и внутреннее совместительство 
// Всех не уволенных на конец ПериодаРасчета документа
//
Функция АвтозаполнениеРаботникиОрганизации() экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамНачало" , НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамКонец" , НалоговыйПериодКонец);
	Запрос.УстановитьПараметр("парамОрганизация" , Организация);
	Запрос.УстановитьПараметр("парамПользователь" , Ответственный);
	Запрос.УстановитьПараметр("парамПодразделение" , ПодразделениеОрганизации);
	
 	// Проверим ответсвенного - является ли он расчетчиком вообще и для заданного 
 	// подразделения (если оно задано)
 
 	ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
 	ПустойОтветственный = Справочники.Пользователи.ПустаяСсылка();
	Если Ответственный <> ПустойОтветственный Тогда
		Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].РасчетЗарплатыОрганизацииПоОтветственным Тогда
			Если ПодразделениеОрганизации = ПустоеПодразделение Тогда
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Расчетчики.ПодразделениеОрганизации
				|ИЗ
				|	РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало) КАК Расчетчики
				|
				|ГДЕ
				|	Расчетчики.Пользователь = &парамПользователь";
				Если Запрос.Выполнить().Пустой() Тогда
					Сообщить(НСтр("ru='Ответственный за этот документ не является расчетчиком ни одного из подразделений организации';uk='Відповідальний за цей документ не є розраховувачем жодного з підрозділів організації'"));
					Возврат  Ложь;
				КонецЕсли;
			Иначе
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Подразделения.Ссылка
				|ИЗ
				|	Справочник.ПодразделенияОрганизаций КАК Подразделения
				|
				|ГДЕ
				|	Подразделения.Ссылка В ИЕРАРХИИ(&парамПодразделение) И
				|	(Подразделения.Ссылка В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ 	Расчетчики.ПодразделениеОрганизации ИЗ РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало) КАК Расчетчики ГДЕ 	Расчетчики.Пользователь = &парамПользователь ))";
				Если Запрос.Выполнить().Пустой() Тогда
					Сообщить(НСтр("ru='Ответственный за этот документ не является расчетчиком для выбранного подразделения';uk='Відповідальний за цей документ не є розраховувачем для обраного підрозділу'"));
					Возврат  Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
 	КонецЕсли;

    // Описание условий	
	Если ПодразделениеОрганизации = ПустоеПодразделение И Ответственный = ПустойОтветственный Тогда
		
		ПоВсемПодразделениямОрганизации = Истина;
		УсловиеНаПодразделение = "ПодразделениеОрганизации.Владелец = &парамОрганизация";
		
	ИначеЕсли ПодразделениеОрганизации = ПустоеПодразделение Тогда
		
		Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].РасчетЗарплатыОрганизацииПоОтветственным Тогда
			ПоВсемПодразделениямОрганизации = Ложь;
			УсловиеНаПодразделение = "ПодразделениеОрганизации В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.ПодразделениеОрганизации ИЗ РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало) Расчетчики ГДЕ Расчетчики.Пользователь = &парамПользователь)";
		Иначе
			ПоВсемПодразделениямОрганизации = Истина;
			УсловиеНаПодразделение = "ПодразделениеОрганизации.Владелец = &парамОрганизация";
		КонецЕсли;
		
	Иначе
		
		ПоВсемПодразделениямОрганизации = Ложь;
		УсловиеНаПодразделение = "ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделение)";
		
	КонецЕсли;
	
	// Текст запроса: срез работников на конец года за котрый выполняется перерасчет
	// уволенные не попадают
	// их надо было перерасчитать при увольнении
	ТекстЗапросаАвтозаполнениеРаботники = "
	|ВЫБРАТЬ
	|	Работники.Физлицо КАК Физлицо
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамКонец, Организация = &парамОрганизация) КАК Работники
	|		
	|ГДЕ 
	|	Работники.ЗанимаемыхСтавок > 0 
	|	"+?(ПоВсемПодразделениямОрганизации, "", "И Работники."+УсловиеНаПодразделение)+"
	|
	|";
	
	Запрос.Текст = ТекстЗапросаАвтозаполнениеРаботники;
	
    РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());

КонецФункции // АвтозаполнениеРаботникиОрганизации()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = "ВЫБРАТЬ
	               |	НДФЛПерерасчет.Дата,
	               |	НДФЛПерерасчет.Ссылка,
	               |	НДФЛПерерасчет.НалоговыйПериодНачало,
	               |	НДФЛПерерасчет.НалоговыйПериодКонец,
	               |	НДФЛПерерасчет.ПериодРегистрации,
	               |	НДФЛПерерасчет.Организация,
	               |	НДФЛПерерасчет.Ответственный,
	               |	ВЫБОР КОГДА НДФЛПерерасчет.Организация.ГоловнаяОрганизация = &ПустаяОрганизация ТОГДА НДФЛПерерасчет.Организация ИНАЧЕ НДФЛПерерасчет.Организация.ГоловнаяОрганизация КОНЕЦ КАК ГоловнаяОрганизация
	               |ИЗ
	               |	Документ.НДФЛПерерасчет КАК НДФЛПерерасчет
	               |
	               |ГДЕ
	               |	НДФЛПерерасчет.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части документам
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЧРаботникиОрганизации.НомерСтроки,
	               |	ТЧРаботникиОрганизации.ФизЛицо,
	               |	ТЧРаботникиОрганизации.ВидСтавки,
	               |	ТЧРаботникиОрганизации.ДоходНДФЛ,
	               |	ТЧРаботникиОрганизации.НалоговыйПериод,
	               |	ТЧРаботникиОрганизации.Доход,
	               |	ТЧРаботникиОрганизации.Налог,
	               |	ТЧРаботникиОрганизации.Льгота,
	               |	ТЧРаботникиОрганизации.КоличествоЛьгот
	               |
	               |ИЗ	Документ.НДФЛПерерасчет.НДФЛ КАК ТЧРаботникиОрганизации
	               |
	               |ГДЕ	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	               |";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 		 - флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указана организация!';uk='Не зазначена організація!'"), Отказ);
	КонецЕсли;
	//Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Ответственный) Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Не указано ответственное лицо!", Отказ);
	//КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НалоговыйПериодНачало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указано начало налогового периода, за который выполняется перерасчет налога!';uk='Не вказаний початок податкового періоду, за який виконується перерахунок податку!'"), Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НалоговыйПериодКонец) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указано окончание налогового периода, за который выполняется перерасчет налога!';uk='Не вказано закінчення податкового періоду, за який виконується перерахунок податку!'"), Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указан месяц, в котором следует отразить расчеты с работниками!';uk='Не вказаний місяць, в якому слід відобразити розрахунки з працівниками!'"), Отказ);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строки документа.
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоРаботникиОрганизации, Отказ)

		НачалоСообщения = НСтр("ru='В строке № ""';uk='У рядку № ""'")+ СокрЛП(ВыборкаПоРаботникиОрганизации.НомерСтроки) +
									НСтр("ru='"" табл. части ""РаботникиОрганизации"": ';uk='"" табл. частини ""РаботникиОрганизации"": '");
									
		Если НЕ ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ФизЛицо) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + НСтр("ru='не указано физическое лицо!';uk='не вказана фізична особа!'"), Отказ);
		КонецЕсли;
		
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи.
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                 накопления по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(СтруктураПроведенияПоРегистрамНакопления)

	СтруктураПроведенияПоРегистрамНакопления = Новый Структура();
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ВзаиморасчетыПоНДФЛ");
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ВзаиморасчетыСРаботникамиОрганизаций");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, 
	СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров = "")
	
	ИмяРегистра = "ВзаиморасчетыПоНДФЛ";
	Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда
		
		// Перерасчет - начисление налога
		
		//Если Год(ВыборкаПоШапкеДокумента.Дата) > Дата(ВыборкаПоШапкеДокумента.НалоговыйГод, 12, 31 ) Тогда
		//	НалоговыйПериод = Дата(ВыборкаПоШапкеДокумента.НалоговыйГод, 12, 1);
		//Иначе	
		//	НалоговыйПериод = НачалоМесяца(ВыборкаПоШапкеДокумента.Дата);
		//КонецЕсли; 
		
		Если ВыборкаПоТЧ.Налог <> 0 Тогда
			Движение = Движения[ИмяРегистра].Добавить();
			// Свойства                                  
			Движение.Период						= ВыборкаПоШапкеДокумента.Дата;
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
			// Измерения
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ФизЛицо					= ВыборкаПоТЧ.ФизЛицо;
			Движение.ВидСтавки					= ВыборкаПоТЧ.ВидСтавки;
			Движение.ДоходНДФЛ					= ВыборкаПоТЧ.ДоходНДФЛ;
			Движение.Льгота						= ВыборкаПоТЧ.Льгота; 
			Движение.НалоговыйПериод			= ВыборкаПоТЧ.НалоговыйПериод;
			// Ресурсы
			Движение.Доход						= ВыборкаПоТЧ.Доход; 
			Движение.Налог						= ВыборкаПоТЧ.Налог; 
			// Реквизиты 
			Движение.КоличествоЛьгот			= ВыборкаПоТЧ.КоличествоЛьгот; 
			Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		
	КонецЕсли; 

	ИмяРегистра = "ВзаиморасчетыСРаботникамиОрганизаций";
	Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда
		
		Если ВыборкаПоТЧ.Налог <> 0 Тогда
			Движение = Движения[ИмяРегистра].Добавить();
			// Свойства
			Движение.Период           				= ВыборкаПоШапкеДокумента.Дата;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
			// Измерения
			Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
			Движение.Организация					= ВыборкаПоШапкеДокумента.Организация;
			Движение.ПериодВзаиморасчетов           = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Движение.ВидВзаиморасчетов           	= ВыборкаПоТЧ.ДоходНДФЛ.ВидВзаиморасчетов;
			
			// Ресурсы
			Движение.СуммаВзаиморасчетов			= ВыборкаПоТЧ.Налог; 
			
			Движение.КодОперации  = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Налоги;
		КонецЕсли;
		
		
	КонецЕсли; 
	
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
 	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	Отказ = Истина;
	Возврат;
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(СтруктураПроведенияПоРегистрамНакопления);

			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(Режим);
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоРаботникиОрганизации, Отказ);
				
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамНакопления);

			КонецЦикла;
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	Возврат;
	
КонецПроцедуры
