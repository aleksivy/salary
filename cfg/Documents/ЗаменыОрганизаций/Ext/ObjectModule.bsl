////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

Функция ПолучитьГрафикПоРаботнику(мСотрудник, мДатаНачала) Экспорт
	
	СтруктураДанныхОРаботнике = Новый Структура("ПодразделениеОрганизации,ГрафикРаботы,Должность");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	мДатаНачала );
	Запрос.УстановитьПараметр("парамСотрудник",		мСотрудник );
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	АктуальныйГрафик.ПодразделениеОрганизации,   
	|	АктуальныйГрафик.ГрафикРаботы,   
	|	АктуальныйГрафик.Должность   
	|ИЗ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &парамСотрудник) КАК АктуальныйГрафик
	|
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураДанныхОРаботнике.ПодразделениеОрганизации	= Выборка.ПодразделениеОрганизации;
		СтруктураДанныхОРаботнике.ГрафикРаботы				= Выборка.ГрафикРаботы;
		СтруктураДанныхОРаботнике.Должность					= Выборка.Должность;
	КонецЕсли;
	
	Возврат	СтруктураДанныхОРаботнике;

КонецФункции // ПолучитьГрафикПоРаботнику()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Основной.Дата					КАК Дата,
	|	Основной.Организация,
	|	Основной.Ссылка,
	|
	|	Основной.Сотрудник,
	|	Основной.ЗаменаСотрудник,
	|	Основной.ЗаменаПодразделениеОрганизации,
	|	Основной.ЗаменаГрафикРаботы,
	|	Основной.ЗаменаДолжность,
	|	Основной.ВидРасчета,
	|	Основной.ДатаНачала,
	|	Основной.ДатаОкончания
	|
	|   ИЗ Документ."+Ссылка.Метаданные().Имя+" КАК Основной
	|  ГДЕ  Основной.ссылка = &ДокументСсылка
	|";
	
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()


Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ) Экспорт

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указана организация, по которой выполняется замена!';uk='Не вказана організація, по якій виконується заміна!'"), Отказ);
	КонецЕсли;

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не выбран сотрудник, который должен заменять!';uk='Не обраний співробітник, який повинен заміняти!'"), Отказ);
	КонецЕсли;
 
	// ЗаменаСотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ЗаменаСотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не выбран сотрудник, которого должны заменять!';uk='Не обраний співробітник, якого повинні замінювати!'"), Отказ);
	КонецЕсли;

	// ДатаНачала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указана дата начала замены!';uk='Не вказана дата початку заміни!'"), Отказ);
	КонецЕсли;
	
	// ДатаОкончания
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указана дата окончания замены!';uk='Не вказана дата закінчення заміни!'"), Отказ);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указан вид замены!';uk='Не зазначений вид заміни!'"), Отказ);
	КонецЕсли;
	
	// ЗаменаГрафикРаботы
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ЗаменаГрафикРаботы) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указан график работы, по которому будет производится замена!';uk='Не зазначений графік роботи, за яким буде проводитися заміна!'"), Отказ);
	КонецЕсли;
	
	// ЗаменаПодразделениеОрганизации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ЗаменаПодразделениеОрганизации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указано подразделение, где будет работать сотрудник!';uk='Не вказаний підрозділ, де буде працювати співробітник!'"), Отказ);
	КонецЕсли;
	
	// ЗаменаДолжность
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ЗаменаДолжность) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указана должность на которой будет работать сотрудник!';uk='Не зазначена посада на якій буде працювати співробітник!'"), Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицо(ЭтотОбъект);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ОБЪЕКТА

