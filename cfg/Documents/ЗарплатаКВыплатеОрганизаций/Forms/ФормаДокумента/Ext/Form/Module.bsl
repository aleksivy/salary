////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
Перем мОтбрасыватьКопейки;
Перем мСотрудник;

Перем мОтборПоСотруднику;

// для синхронизации строк табличных полей
Перем мСинхронизируемыеТабличныеЧасти;

// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

Перем мСтараяСумма;
Перем мСтараяСуммаПараметры;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

Процедура АктивизироватьСтрокуФормы()
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока = РаботникиОрганизации[0];
	ИначеЕсли ПараметрыОплаты.Количество() > 0 Тогда
		ЭлементыФормы.ПараметрыОплаты.ТекущаяСтрока = ПараметрыОплаты[0];
	ИначеЕсли Взносы.Количество() > 0 Тогда
		ЭлементыФормы.Взносы.ТекущаяСтрока = Взносы[0];
	ИначеЕсли Взносы.Количество() > 0 Тогда
		ЭлементыФормы.Взносы.ТекущаяСтрока = Взносы[0];
	ИначеЕсли НДФЛ.Количество() > 0 Тогда
		ЭлементыФормы.НДФЛ.ТекущаяСтрока = НДФЛ[0];
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ДействияФормыСписокРаботников(Кнопка)
	
	Если РаботникиОрганизации.Количество() > 0 
		ИЛИ ПараметрыОплаты.Количество() > 0
		ИЛИ Взносы.Количество() > 0
		ИЛИ ВзносыФОТ.Количество() > 0
		ИЛИ НДФЛ.Количество() > 0
		Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Заполнить?';uk='Перед заповненням табличні частини будуть очищені. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		РаботникиОрганизации.Очистить();
		ПараметрыОплаты.Очистить();
		
		Взносы.Очистить();
		ВзносыФОТ.Очистить();
		НДФЛ.Очистить();
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, , Организация, ПодразделениеОрганизации, , , "Выплаты", Новый Структура("Размер,ПереключательХарактерВыплаты", 0, 1), Дата, Истина);

	АктивизироватьСтрокуФормы();
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Записывает документ в режиме отмены проведения, спросив об этом у пользователя
Функция ЗаписатьДокументОтменивПроведение(Действие = "рассчитать")

	Если Проведен Тогда
		
		Если Вопрос(НСтр("ru='Автоматически ';uk='Автоматично '") + Действие +НСтр("ru=' документ можно только после отмены его проведения. Выполнить отмену проведения документа?';uk=' документ можна тільки після скасування його проведення. Виконати скасування проведення документа?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
		
	ИначеЕсли Модифицированность ИЛИ ЭтоНовый() Тогда
		
		Если Вопрос(НСтр("ru='Автоматически ';uk='Автоматично '") + Действие +НСтр("ru=' документ можно только после его записи. Записать?';uk=' документ можна тільки після його запису. Записати?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции  

// Процедура управляет видимостью элементов формы диалога.
//
Процедура УправлениеДоступностьюЭлементовФормы()
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	ИспользуетсяНК = ПроведениеРасчетов.ИспользуетсяНК(ПериодРегистрации);
	
	Если	Не	ВидВыплаты.Предопределенный
			ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.Отпуск
			ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.Больничные
			ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.Аванс
			ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.АвансПредварительныйРасчет
		Тогда
		ЭлементыФормы.ПанельРаботники.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.Разделитель1.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельНалогов.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		ЭлементыФормы.ПанельНалогов.Страницы.ПараметрыОплаты.Видимость = Истина;
		ЭлементыФормы.ПанельНалогов.Страницы.Взносы.Видимость = Истина;
		ЭлементыФормы.ПанельНалогов.Страницы.ВзносыФОТ.Видимость = Истина;
		ЭлементыФормы.ПанельНалогов.Страницы.НДФЛ.Видимость = Истина;
		
		// Спец-колонки
		ЭлементыФормы.ПараметрыОплаты.Колонки.ПериодВзаиморасчетов.Видимость = Истина;
		ЭлементыФормы.ПараметрыОплаты.Колонки.СчетУчета.Видимость = Истина;
		ЭлементыФормы.ПараметрыОплаты.Колонки.Ведомость.Видимость = Ложь;
		
		ЭлементыФормы.НДФЛ.Колонки.ПериодВзаиморасчетов.Доступность = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.ПериодВзаиморасчетов.Видимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.НалоговыйПериод.Видимость = Истина;
		ЭлементыФормы.НДФЛ.Колонки.КоличествоЛьгот.Видимость = Истина;
		ЭлементыФормы.НДФЛ.Колонки.Льгота.Видимость = Истина;
		ЭлементыФормы.НДФЛ.Колонки.ВидСтавки.Видимость = Истина;
		ЭлементыФормы.НДФЛ.Колонки.УвеличеннаяСтавка.Видимость = ИспользуетсяНК;
		ЭлементыФормы.НДФЛ.Колонки.ДоходПолный.Видимость = ИспользуетсяНК;
		ЭлементыФормы.НДФЛ.Колонки.Сторно.Видимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.НалоговыйПериод.ИзменятьВидимость = Истина;
		ЭлементыФормы.НДФЛ.Колонки.КоличествоЛьгот.ИзменятьВидимость = Истина;
		ЭлементыФормы.НДФЛ.Колонки.Льгота.ИзменятьВидимость = Истина;
		ЭлементыФормы.НДФЛ.Колонки.ВидСтавки.ИзменятьВидимость = Истина;
		ЭлементыФормы.НДФЛ.Колонки.УвеличеннаяСтавка.ИзменятьВидимость = ИспользуетсяНК;
		ЭлементыФормы.НДФЛ.Колонки.ДоходПолный.ИзменятьВидимость = ИспользуетсяНК;
		ЭлементыФормы.НДФЛ.Колонки.Сторно.ИзменятьВидимость = Ложь;
		
		ЭлементыФормыВидимостьКолонокВзносы(ЭлементыФормы.Взносы.Колонки, Истина);
		ЭлементыФормыВидимостьКолонокВзносы(ЭлементыФормы.ВзносыФОТ.Колонки, Истина);
		
		ЭлементыФормы.НДФЛ.Колонки.НеподтвержденнаяСумма.Видимость = Ложь;
		ЭлементыФормы.Взносы.Колонки.НеподтвержденнаяСумма.Видимость = Ложь;
		ЭлементыФормы.ВзносыФОТ.Колонки.НеподтвержденнаяСумма.Видимость = Ложь;
		
		
	ИначеЕсли	ВидВыплаты = Справочники.ВидыВыплат.Очередная 
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолгов
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.ПогашениеДолгов
		ИЛИ ВидВыплаты = Справочники.ВидыВыплат.Дивиденды
		Тогда
		ЭлементыФормы.ПанельРаботники.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.Разделитель1.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельНалогов.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		ЭлементыФормы.ПанельНалогов.Страницы.ПараметрыОплаты.Видимость = Истина;
		ЭлементыФормы.ПанельНалогов.Страницы.Взносы.Видимость = Ложь;
		ЭлементыФормы.ПанельНалогов.Страницы.ВзносыФОТ.Видимость = Ложь;
		ЭлементыФормы.ПанельНалогов.Страницы.НДФЛ.Видимость = Истина;
		
		// Спец-колонки
		ЭлементыФормы.ПараметрыОплаты.Колонки.ПериодВзаиморасчетов.Видимость = Истина;
		ЭлементыФормы.ПараметрыОплаты.Колонки.СчетУчета.Видимость = Истина;
		ЭлементыФормы.ПараметрыОплаты.Колонки.Ведомость.Видимость = Ложь;
		
		ЭлементыФормы.НДФЛ.Колонки.ПериодВзаиморасчетов.Видимость = Истина;
		ЭлементыФормы.НДФЛ.Колонки.НалоговыйПериод.Видимость = Истина;
		ЭлементыФормы.НДФЛ.Колонки.КоличествоЛьгот.Видимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.Льгота.Видимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.ВидСтавки.Видимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.УвеличеннаяСтавка.Видимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.ДоходПолный.Видимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.Сторно.Видимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.НалоговыйПериод.ИзменятьВидимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.КоличествоЛьгот.ИзменятьВидимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.Льгота.ИзменятьВидимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.ВидСтавки.ИзменятьВидимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.УвеличеннаяСтавка.ИзменятьВидимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.ДоходПолный.ИзменятьВидимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.Сторно.ИзменятьВидимость = Ложь;
		
		ЭлементыФормы.НДФЛ.Колонки.НеподтвержденнаяСумма.Видимость = Ложь;
		
		
	ИначеЕсли	ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяВзносы 
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолговВзносы
		Тогда
		ЭлементыФормы.ПанельРаботники.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.Разделитель1.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ПанельНалогов.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		ЭлементыФормы.ПанельНалогов.Страницы.ПараметрыОплаты.Видимость = Ложь;
		ЭлементыФормы.ПанельНалогов.Страницы.Взносы.Видимость = Истина;
		ЭлементыФормы.ПанельНалогов.Страницы.ВзносыФОТ.Видимость = Истина;
		ЭлементыФормы.ПанельНалогов.Страницы.НДФЛ.Видимость = Ложь;
		
		// Спец-колонки
		ЭлементыФормыВидимостьКолонокВзносы(ЭлементыФормы.Взносы.Колонки, Ложь);
		ЭлементыФормыВидимостьКолонокВзносы(ЭлементыФормы.ВзносыФОТ.Колонки, Ложь);
		
		ЭлементыФормы.НДФЛ.Колонки.НеподтвержденнаяСумма.Видимость = Ложь;
		ЭлементыФормы.Взносы.Колонки.НеподтвержденнаяСумма.Видимость = Ложь;
		ЭлементыФормы.ВзносыФОТ.Колонки.НеподтвержденнаяСумма.Видимость = Ложь;
		
		
	ИначеЕсли	ВидВыплаты = Справочники.ВидыВыплат.НДФЛКонтрагентам 
		Тогда
		ЭлементыФормы.ПанельРаботники.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.Разделитель1.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ПанельНалогов.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		ЭлементыФормы.ПанельНалогов.Страницы.ПараметрыОплаты.Видимость = Ложь;
		ЭлементыФормы.ПанельНалогов.Страницы.Взносы.Видимость = Ложь;
		ЭлементыФормы.ПанельНалогов.Страницы.ВзносыФОТ.Видимость = Ложь;
		ЭлементыФормы.ПанельНалогов.Страницы.НДФЛ.Видимость = Истина;
		
		// Спец-колонки
		ЭлементыФормы.НДФЛ.Колонки.ПериодВзаиморасчетов.Видимость = Истина;
		ЭлементыФормы.НДФЛ.Колонки.НалоговыйПериод.Видимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.КоличествоЛьгот.Видимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.Льгота.Видимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.НалоговыйПериод.ИзменятьВидимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.КоличествоЛьгот.ИзменятьВидимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.Льгота.ИзменятьВидимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.УвеличеннаяСтавка.ИзменятьВидимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.ДоходПолный.ИзменятьВидимость = Ложь;

		
		ЭлементыФормы.НДФЛ.Колонки.НеподтвержденнаяСумма.Видимость = Ложь;
		ЭлементыФормы.Взносы.Колонки.НеподтвержденнаяСумма.Видимость = Ложь;
		ЭлементыФормы.ВзносыФОТ.Колонки.НеподтвержденнаяСумма.Видимость = Ложь;
		
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Депоненты Тогда
		ЭлементыФормы.ПанельРаботники.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.Разделитель1.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельНалогов.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		ЭлементыФормы.ПанельНалогов.Страницы.ПараметрыОплаты.Видимость = Истина;
		ЭлементыФормы.ПанельНалогов.Страницы.Взносы.Видимость = Ложь;
		ЭлементыФормы.ПанельНалогов.Страницы.ВзносыФОТ.Видимость = Ложь;
		ЭлементыФормы.ПанельНалогов.Страницы.НДФЛ.Видимость = Ложь;
		
		// Спец-колонки
		ЭлементыФормы.ПараметрыОплаты.Колонки.ПериодВзаиморасчетов.Видимость = Истина;
		ЭлементыФормы.ПараметрыОплаты.Колонки.СчетУчета.Видимость = Ложь;
		ЭлементыФормы.ПараметрыОплаты.Колонки.Ведомость.Видимость = Истина;
		
		ЭлементыФормы.НДФЛ.Колонки.НеподтвержденнаяСумма.Видимость = Ложь;
		ЭлементыФормы.Взносы.Колонки.НеподтвержденнаяСумма.Видимость = Ложь;
		ЭлементыФормы.ВзносыФОТ.Колонки.НеподтвержденнаяСумма.Видимость = Ложь;
		
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.ЗакрытиеПериода Тогда
		ЭлементыФормы.ПанельРаботники.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.Разделитель1.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ПанельНалогов.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		ЭлементыФормы.ПанельНалогов.Страницы.ПараметрыОплаты.Видимость = Истина;
		ЭлементыФормы.ПанельНалогов.Страницы.Взносы.Видимость = Истина;
		ЭлементыФормы.ПанельНалогов.Страницы.ВзносыФОТ.Видимость = Истина;
		ЭлементыФормы.ПанельНалогов.Страницы.НДФЛ.Видимость = Истина;
		
		// тут видны только колонки которые отвечают за измерения и ресурсы
		// Спец-колонки
		ЭлементыФормы.НДФЛ.Колонки.ПериодВзаиморасчетов.Видимость = Истина;
		ЭлементыФормы.НДФЛ.Колонки.НалоговыйПериод.Видимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.КоличествоЛьгот.Видимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.Льгота.Видимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.НалоговыйПериод.ИзменятьВидимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.КоличествоЛьгот.ИзменятьВидимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.Льгота.ИзменятьВидимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.УвеличеннаяСтавка.ИзменятьВидимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.ДоходПолный.ИзменятьВидимость = Ложь;

		
		ЭлементыФормы.ПараметрыОплаты.Колонки.ПериодВзаиморасчетов.Видимость = Истина;
		ЭлементыФормы.ПараметрыОплаты.Колонки.СчетУчета.Видимость = Истина;
		ЭлементыФормы.ПараметрыОплаты.Колонки.Ведомость.Видимость = Ложь;
		
		ЭлементыФормыВидимостьКолонокВзносы(ЭлементыФормы.Взносы.Колонки, Ложь);
		ЭлементыФормыВидимостьКолонокВзносы(ЭлементыФормы.ВзносыФОТ.Колонки, Ложь);
		
		ЭлементыФормы.НДФЛ.Колонки.НеподтвержденнаяСумма.Видимость = Истина;
		ЭлементыФормы.Взносы.Колонки.НеподтвержденнаяСумма.Видимость = Истина;
		ЭлементыФормы.ВзносыФОТ.Колонки.НеподтвержденнаяСумма.Видимость = Истина;
		
	ИначеЕсли	ВидВыплаты = Справочники.ВидыВыплат.НДФЛБезВыплатыЗарплаты
		Тогда
		ЭлементыФормы.ПанельРаботники.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.Разделитель1.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ПанельНалогов.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		ЭлементыФормы.ПанельНалогов.Страницы.ПараметрыОплаты.Видимость = Ложь;
		ЭлементыФормы.ПанельНалогов.Страницы.Взносы.Видимость = Ложь;
		ЭлементыФормы.ПанельНалогов.Страницы.ВзносыФОТ.Видимость = Ложь;
		ЭлементыФормы.ПанельНалогов.Страницы.НДФЛ.Видимость = Истина;
		
		ЭлементыФормы.НДФЛ.Колонки.ПериодВзаиморасчетов.Видимость = Истина;
		ЭлементыФормы.НДФЛ.Колонки.НалоговыйПериод.Видимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.КоличествоЛьгот.Видимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.УвеличеннаяСтавка.ИзменятьВидимость = Ложь;
		ЭлементыФормы.НДФЛ.Колонки.ДоходПолный.ИзменятьВидимость = Ложь;
		
	КонецЕсли;
	
	Если ВидВыплаты = Справочники.ВидыВыплат.Отпуск
		 ИЛИ ВидВыплаты = Справочники.ВидыВыплат.Больничные
		 ИЛИ (НЕ Видвыплаты.Предопределенный И Видвыплаты.РасчитыватьВзносы И НЕ Видвыплаты.РасчетОтОбратного) Тогда
		 
		ЭлементыФормы.ПараметрыОплаты.Колонки.ВидРасчета.Видимость = Истина;
		ЭлементыФормы.ПараметрыОплаты.Колонки.ДатаНачала.Видимость = Истина;
		ЭлементыФормы.ПараметрыОплаты.Колонки.СуммаГрязными.Видимость = Истина;
		
	Иначе
		
		ЭлементыФормы.ПараметрыОплаты.Колонки.ВидРасчета.Видимость = Ложь;
		ЭлементыФормы.ПараметрыОплаты.Колонки.ДатаНачала.Видимость = Ложь;
	    ЭлементыФормы.ПараметрыОплаты.Колонки.СуммаГрязными.Видимость = Ложь;
	КонецЕсли;	
	Если ВидВыплаты = Справочники.ВидыВыплат.ЗакрытиеПериода Тогда
		ЭлементыФормы.ПараметрыОплаты.Колонки.Сотрудник.Доступность = Истина;
		ЭлементыФормы.ПараметрыОплаты.Колонки.Сотрудник.ТолькоПросмотр = Истина;
	Иначе
		ЭлементыФормы.ПараметрыОплаты.Колонки.Сотрудник.Доступность = Ложь;
		ЭлементыФормы.ПараметрыОплаты.Колонки.Сотрудник.ТолькоПросмотр = Ложь;
	КонецЕсли;	

	
КонецПроцедуры // УправлениеДоступностьюЭлементовФормы()

Процедура СоздатьКнопкуМеню( ИмяКоманднойПенели, ИмяКнопки, НаименованиеКнопки )
	
	Меню = ЭлементыФормы[ ИмяКоманднойПенели ].Кнопки;
	НоваяКнопка = Меню.Добавить( ИмяКнопки, ТипКнопкиКоманднойПанели.Подменю, НаименованиеКнопки);
	Подменю = НоваяКнопка.Кнопки;
	
	НоваяКнопка = Подменю.Добавить( ИмяКнопки +"ПоВсемРаботникам", ТипКнопкиКоманднойПанели.Действие, НСтр("ru='По всем работникам';uk='По всіх працівниках'"), Новый Действие( ИмяКоманднойПенели + ИмяКнопки ));
	НоваяКнопка.ИзменяетДанные = Истина;
	
	НоваяКнопка = Подменю.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
	
	НоваяКнопка = Подменю.Добавить( ИмяКнопки +"ПоРаботнику", ТипКнопкиКоманднойПанели.Действие, НСтр("ru='По работнику';uk='По працівнику'"), Новый Действие( ИмяКоманднойПенели + ИмяКнопки ));
	НоваяКнопка.ИзменяетДанные = Истина;
	
КонецПроцедуры // СоздатьКнопкуМеню()

Процедура УдалитьКнопкуПодменю( ИмяКоманднойПенели, ИмяКнопки )
	
	Меню = ЭлементыФормы[ ИмяКоманднойПенели ].Кнопки;
	Подменю = Меню.Найти(ИмяКнопки);
	Если Подменю <> Неопределено Тогда
		Меню.Удалить(Подменю);
	КонецЕсли;
		
КонецПроцедуры // УдалитьКнопкуПодменю()

Процедура СоздатьКнопкуМенюЗакрытиеПериода( ИмяКоманднойПенели, ИмяКнопки, НаименованиеКнопки )
	
	Меню = ЭлементыФормы[ ИмяКоманднойПенели ].Кнопки;
	НоваяКнопка = Меню.Добавить( ИмяКнопки, ТипКнопкиКоманднойПанели.Действие, НаименованиеКнопки, Новый Действие( ИмяКоманднойПенели + ИмяКнопки ));
	НоваяКнопка.ИзменяетДанные = Истина;
	
КонецПроцедуры // СоздатьКнопкуМенюЗакрытиеПериода()

Процедура ЗаполнитьКнопкиПодменю()
	
	// Сначала очистим "мобильные кнопки"
	УдалитьКнопкуПодменю( "ДействияФормы", "Рассчитать" );
	
	УдалитьКнопкуПодменю( "КоманднаяПанельВзносы", "ЗаполнитьЗакрытиеПериода" );
	УдалитьКнопкуПодменю( "КоманднаяПанельВзносы", "Заполнить" );
	УдалитьКнопкуПодменю( "КоманднаяПанельВзносы", "Рассчитать" );
	
	УдалитьКнопкуПодменю( "КоманднаяПанельВзносыФОТ", "ЗаполнитьЗакрытиеПериода" );
	УдалитьКнопкуПодменю( "КоманднаяПанельВзносыФОТ", "Заполнить" );
	УдалитьКнопкуПодменю( "КоманднаяПанельВзносыФОТ", "Рассчитать" );
	
	УдалитьКнопкуПодменю( "КоманднаяПанельНДФЛ", "ЗаполнитьЗакрытиеПериода" );
	УдалитьКнопкуПодменю( "КоманднаяПанельНДФЛ", "Заполнить" );
	УдалитьКнопкуПодменю( "КоманднаяПанельНДФЛ", "Рассчитать" );
	
	
	// теперь создаем в случае надобночти
	Если	Не	ВидВыплаты.Предопределенный
			ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.Отпуск
			ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.Больничные
			ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.Аванс
			ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.АвансПредварительныйРасчет
		Тогда
		
		СоздатьКнопкуМеню( "ДействияФормы", "Рассчитать", НСтр("ru='Рассчитать налоги';uk='Розрахувати податки'") );
		
		СоздатьКнопкуМеню( "КоманднаяПанельВзносы", "Заполнить", НСтр("ru='Заполнить';uk='Заповнити'") );
		СоздатьКнопкуМеню( "КоманднаяПанельВзносы", "Рассчитать", НСтр("ru='Рассчитать';uk='Розрахувати'") );
		
		СоздатьКнопкуМеню( "КоманднаяПанельВзносыФОТ", "Заполнить", НСтр("ru='Заполнить';uk='Заповнити'") );
		СоздатьКнопкуМеню( "КоманднаяПанельВзносыФОТ", "Рассчитать", НСтр("ru='Рассчитать';uk='Розрахувати'") );
		
		СоздатьКнопкуМеню( "КоманднаяПанельНДФЛ", "Заполнить", НСтр("ru='Заполнить';uk='Заповнити'") );
		СоздатьКнопкуМеню( "КоманднаяПанельНДФЛ", "Рассчитать", НСтр("ru='Рассчитать';uk='Розрахувати'") );
		
		
	ИначеЕсли	ВидВыплаты = Справочники.ВидыВыплат.Очередная 
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолгов
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.ПогашениеДолгов
		ИЛИ ВидВыплаты = Справочники.ВидыВыплат.Дивиденды
		Тогда
		

	ИначеЕсли	ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяВзносы 
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолговВзносы
		Тогда
		
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Депоненты Тогда
		
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.ЗакрытиеПериода Тогда
		
		СоздатьКнопкуМенюЗакрытиеПериода( "КоманднаяПанельВзносы", "ЗаполнитьЗакрытиеПериода", НСтр("ru='Заполнить по характеру выплаты';uk='Заповнити за характером виплати'") );
		
		СоздатьКнопкуМенюЗакрытиеПериода( "КоманднаяПанельВзносыФОТ", "ЗаполнитьЗакрытиеПериода", НСтр("ru='Заполнить по характеру выплаты';uk='Заповнити за характером виплати'") );
		
		СоздатьКнопкуМенюЗакрытиеПериода( "КоманднаяПанельНДФЛ", "ЗаполнитьЗакрытиеПериода", НСтр("ru='Заполнить по характеру выплаты';uk='Заповнити за характером виплати'") );
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()

	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Взносы,ЭлементыФормы.КоманднаяПанельВзносы);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВзносыФОТ,ЭлементыФормы.КоманднаяПанельВзносыФОТ);
	СоответствиеТЧ.Вставить(ЭлементыФормы.НДФЛ,ЭлементыФормы.КоманднаяПанельНДФЛ);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПараметрыОплаты,ЭлементыФормы.КоманднаяПанельПараметрыОплаты);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()


Процедура ЭлементыФормыВидимостьКолонокВзносы(КолонкиТЧ, ЭтоРасчета = Истина) Экспорт
	
	// Реквизиты остатков по регистру
	КолонкиТЧ.ПериодВзаиморасчетов.Видимость = Истина;
	КолонкиТЧ.ПериодВзаиморасчетов.Доступность = НЕ ЭтоРасчета;
	
	// Реквизиты, которые используются при расчете
	КолонкиТЧ.Сотрудник.Видимость = ЭтоРасчета;
	КолонкиТЧ.НомерПорога.Видимость = ЭтоРасчета;
	
	КолонкиТЧ.НалоговыйПериод.Видимость = ЭтоРасчета;
	КолонкиТЧ.БазовыйПериодНачало.Видимость = ЭтоРасчета;
	КолонкиТЧ.БазовыйПериодКонец.Видимость = ЭтоРасчета;
	
	КолонкиТЧ.Период.Видимость = ЭтоРасчета;
	КолонкиТЧ.ДатаНачала.Видимость = ЭтоРасчета;
	КолонкиТЧ.ДатаокОнчания.Видимость = ЭтоРасчета;
		
	КолонкиТЧ.Предел.Видимость = ЭтоРасчета;
	КолонкиТЧ.Ставка.Видимость = ЭтоРасчета;
	КолонкиТЧ.Сторно.Видимость = ЭтоРасчета;
	
	Если КолонкиТЧ.Найти("КоэффициентСтавки") <> Неопределено Тогда
		КолонкиТЧ.КоэффициентСтавки.Видимость = ЭтоРасчета;
	КонецЕсли;	
		
КонецПроцедуры // ЭлементыФормыВидимостьКолонокВзносы()


// Производит замену значений "не выплачено" в колонке "Выплаченность" на 
// 	значение "выплачено" или "задепонировано" взависимости от нажатой кнопки.
//
Процедура ЗаменаЗначенийКолонкиВыплаченности(ВыбранноеЗначение) Экспорт
	
	Если ВыбранноеЗначение = "НеВыплачено" Тогда
		ТЧ = РаботникиОрганизации.Выгрузить();
		ТЧ.ЗаполнитьЗначения(Перечисления.ВыплаченностьЗарплаты.НеВыплачено,"ВыплаченностьЗарплаты");
		РаботникиОрганизации.Загрузить(ТЧ);
	Иначе 	
		Если ВыбранноеЗначение = "Выплачено" Тогда
			ЗначениеНаЗамену = Перечисления.ВыплаченностьЗарплаты.Выплачено
		ИначеЕсли ВыбранноеЗначение = "Задепонировано" Тогда
			ЗначениеНаЗамену = Перечисления.ВыплаченностьЗарплаты.Задепонировано
		КонецЕсли; 
		Для каждого СтрокаТЧ Из РаботникиОрганизации Цикл
			Если СтрокаТЧ.ВыплаченностьЗарплаты <> ЗначениеНаЗамену Тогда
				СтрокаТЧ.ВыплаченностьЗарплаты = ЗначениеНаЗамену
			КонецЕсли;  
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры // ЗаменаЗначенийВТабличнойЧасти()

Процедура ПроверитьДокументыВведенныеНаОсновании()
	
	ЗапросПоПлатежнымДокументам = Новый Запрос;
	ЗапросПоПлатежнымДокументам.УстановитьПараметр("Ведомость", Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(ВложенныйЗапрос.Ведомость) КАК КоличествоДокументов
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость) КАК Ведомость
	|	ИЗ Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	|	ГДЕ		РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = &Ведомость 	
	|		И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Проведен
	|		И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям)
	|	
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РКОРаботнику.ДокументОснование)
	|	ИЗ Документ.РасходныйКассовыйОрдер КАК РКОРаботнику
	|	ГДЕ 	РКОРаботнику.ДокументОснование = &Ведомость
	|		И	РКОРаботнику.Проведен
	|		И	РКОРаботнику.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику)
	|
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПлатежноеПоручениеИсходящее.Ведомость)
	|	ИЗ Документ.ПлатежноеПоручениеИсходящее.ВыплатаЗаработнойПлаты КАК ПлатежноеПоручениеИсходящее
	|	ГДЕ		ПлатежноеПоручениеИсходящее.Ведомость = &Ведомость 
	|		И	ПлатежноеПоручениеИсходящее.Ссылка.Проведен
	|		И	ПлатежноеПоручениеИсходящее.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеЗП)
	|	
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПлатежноеПоручениеИсходящее.Ведомость)
	|	ИЗ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеНалогов КАК ПлатежноеПоручениеИсходящее
	|	ГДЕ 	ПлатежноеПоручениеИсходящее.Ведомость = &Ведомость 
	|		И 	ПлатежноеПоручениеИсходящее.Ссылка.Проведен
	|		И	ПлатежноеПоручениеИсходящее.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеНалога)
	|	
	|) КАК ВложенныйЗапрос
	|";
	
	ЗапросПоПлатежнымДокументам.Текст = ТекстЗапроса;
	
	РезультатЗапроса = ЗапросПоПлатежнымДокументам.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		
		Если РезультатЗапроса.КоличествоДокументов > 0 Тогда
			
			ЭтаФорма.ТолькоПросмотр = Истина;
		
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьОтборСписка()
	
	КнопкаПереключитьОтборСписка = ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПереключитьОтборСписка;
	КнопкаПереключитьОтборСписка.Картинка = ?(мОтборПоСотруднику, БиблиотекаКартинок.ФизическоеЛицо, БиблиотекаКартинок.ФизическиеЛица);
		
	Если НЕ мОтборПоСотруднику Тогда
		
		// отключим отбор
		ЭлементыФормы.ПараметрыОплаты.ОтборСтрок.Сотрудник.Использование	= Ложь;
		ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Использование				= Ложь;
		ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Использование			= Ложь;
		ЭлементыФормы.НДФЛ.ОтборСтрок.Сотрудник.Использование				= Ложь;
		
	Иначе
		
		Если ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока = Неопределено Тогда
			Если РаботникиОрганизации.Количество()>0 Тогда
				ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока = РаботникиОрганизации[0];	
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		мТекущийСотрудник = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока.Сотрудник;
		
		// установим отбор
		ЭлементыФормы.ПараметрыОплаты.ОтборСтрок.Сотрудник.Использование= Истина;
		ЭлементыФормы.ПараметрыОплаты.ОтборСтрок.Сотрудник.Значение		= мТекущийСотрудник;
		
		ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Использование			= Истина;
		ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Значение				= мТекущийСотрудник;
		
		ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Использование		= Истина;
		ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Значение			= мТекущийСотрудник;
		
		ЭлементыФормы.НДФЛ.ОтборСтрок.Сотрудник.Использование			= Истина;
		ЭлементыФормы.НДФЛ.ОтборСтрок.Сотрудник.Значение				= мТекущийСотрудник;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокСотрудниковДляАвтозаполнения( Кнопка, ИмяТабличнойЧасти, ТабличнаяЧасть, мСотрудники )
	
	Если Найти(Кнопка.Имя,"ПоРаботнику")>0 Тогда
		
		мСотрудники = Новый СписокЗначений;
		мСотрудникиТекст = "";
		РазделительТекст = "";
		Для каждого СтрокаСотрудник Из ЭлементыФормы.РаботникиОрганизации.ВыделенныеСтроки Цикл
			мСотрудники.Добавить(СтрокаСотрудник.Сотрудник) ;
			мСотрудникиТекст = мСотрудникиТекст + РазделительТекст + СтрокаСотрудник.Сотрудник;
			РазделительТекст = "; ";
		КонецЦикла; 
	
		ТекстВопроса = НСтр("ru='Перед заполнением из табличной части ""';uk='Перед заповненням з табличної частини ""'")+ИмяТабличнойЧасти+НСтр("ru='"" будут удалены данные по сотрудникам: ';uk='"" будуть вилучені дані по співробітниках: '") + мСотрудникиТекст + НСтр("ru='. Продолжить?';uk='. Продовжити?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПроведениеРасчетов.УдалитьСтрокиПоУсловию( ТабличнаяЧасть, мСотрудники ); 
		Записать();
		
	Иначе
		
		// по всем сотрудникам ТЧ Работникиорганизации
		мСотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
		Если ТабличнаяЧасть.Количество() > 0 Тогда
			
			ТекстВопроса = НСтр("ru='Перед заполнением табличная часть ""';uk='Перед заповненням таблична частина ""'")+ИмяТабличнойЧасти+НСтр("ru='"" будет очищена. Продолжить?';uk='"" буде очищена. Продовжити?'");
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ТабличнаяЧасть.Очистить();
			Записать();
		ИначеЕсли Модифицированность() Тогда
			ТекстВопроса = НСтр("ru='Перед заполнением докумет необходимо записать. Продолжить?';uk='Перед заповненням документ необхідно записати. Продовжити?'");
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			КонецЕсли;
			Записать();
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции		

Функция ПолучитьСписокСотрудниковДляРасчета( Кнопка, мСотрудники, КомментироватьРасчет )
	
	КомментироватьРасчет = Ложь;
	мСотрудники = Новый СписокЗначений;
	
	Если Найти(Кнопка.Имя,"ПоРаботнику") > 0 Тогда
		
		Для каждого СтрокаСотрудник Из ЭлементыФормы.РаботникиОрганизации.ВыделенныеСтроки Цикл
			мСотрудники.Добавить(СтрокаСотрудник.Сотрудник);
		КонецЦикла; 
		
		Если Найти(Кнопка.Имя,"СКомментарием") > 0  Тогда
			КомментироватьРасчет = Истина;
		КонецЕсли;
		
	Иначе 
		
		мСотрудники.ЗагрузитьЗначения( РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник") );
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции		

Процедура УдалитьСотрудникаИзТабличнойЧасти(текТабличнаяЧасть)
	
	ТекСтрока = текТабличнаяЧасть.Найти(мСотрудник,"Сотрудник");
	Пока ТекСтрока <> Неопределено Цикл
		текТабличнаяЧасть.Удалить(ТекСтрока);
	    ТекСтрока = текТабличнаяЧасть.Найти(мСотрудник,"Сотрудник");
	КонецЦикла; 
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()


Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
		Если НЕ ЗначениеЗаполнено(ВидВыплаты) Тогда
        	ВидВыплаты	= Справочники.ВидыВыплат.Очередная;
		КонецЕсли;
		
	Иначе
		
		ПроверитьДокументыВведенныеНаОсновании();
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("Сумма");

	// Установить ограничение - изменять видимоть колонок для таличной части РаботникиОрганизации
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаботникиОрганизации.Колонки, СтруктураКолонок);

	// Активизируем табличную часть
	ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	ЗаполнитьКнопкиПодменю();
	
	УправлениеДоступностьюЭлементовФормы();
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.РаботникиОрганизации.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	// Активизируем табличную часть
	ЭлементыФормы.РаботникиОрганизации.АктивизироватьПоУмолчанию = Истина;
	УстановитьОтборСписка();
	
	ПредставлениеПериодаРегистрации = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
	Если (Не ЭтоНовый())  И (ВидВыплаты = Справочники.ВидыВыплат.Аванс ИЛИ ВидВыплаты = Справочники.ВидыВыплат.АвансПредварительныйРасчет ИЛИ ВидВыплаты = Справочники.ВидыВыплат.Отпуск ИЛИ ВидВыплаты = Справочники.ВидыВыплат.Больничные ИЛИ НЕ ВидВыплаты.Предопределенный) Тогда
		Для Каждого СтрокаНДФЛ ИЗ НДФЛ Цикл
			Если Не ЗначениеЗаполнено(СтрокаНДФЛ.ПериодВзаиморасчетов) Тогда
				СтрокаНДФЛ.ПериодВзаиморасчетов = ПериодРегистрации;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаВзносы ИЗ Взносы Цикл
			Если Не ЗначениеЗаполнено(СтрокаВзносы.ПериодВзаиморасчетов) Тогда
				СтрокаВзносы.ПериодВзаиморасчетов = ПериодРегистрации;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаВзносыФОт ИЗ ВзносыФОТ Цикл
			Если Не ЗначениеЗаполнено(СтрокаВзносыФОТ.ПериодВзаиморасчетов) Тогда
				СтрокаВзносыФот.ПериодВзаиморасчетов = ПериодРегистрации;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
			
		
		
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		
		Команда = "";
		Реквизиты = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			
			ВременнаяТаблица = ЗначениеВыбора.Данные.Выгрузить();
			Если ЗначениеВыбора.Свойство("Реквизиты",Реквизиты) Тогда
				Если Реквизиты.ПереключательХарактерВыплаты = 1 Тогда
					
					спСотрудников = ВременнаяТаблица.ВыгрузитьКолонку("Сотрудник");
					мОкруглятьДо = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ОкруглятьДо;
					мПроцентВыплаты = 100;
					мПериодС = 0;
					мПериодПо = 0;

					Автозаполнение();
					
				Иначе
					ВременнаяТаблица.Колонки.Добавить("Сумма");
					ВременнаяТаблица.ЗаполнитьЗначения(Реквизиты.Размер,"Сумма");
					РаботникиОрганизации.Загрузить(ВременнаяТаблица);
					
					ВременнаяТаблица.Колонки.Добавить("СчетУчета");
					ВременнаяТаблица.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате, "СчетУчета");
					ВременнаяТаблица.Колонки.Добавить("ПериодВзаиморасчетов");
					ВременнаяТаблица.ЗаполнитьЗначения(ПериодРегистрации, "ПериодВзаиморасчетов");
					
					ПараметрыОплаты.Загрузить(ВременнаяТаблица);
					
				КонецЕсли;
			КонецЕсли;
			
			
			//мОтборПоСотруднику = Ложь;
			//СохранитьЗначение("ОтборСпискаЗПКВыплате",мОтборПоСотруднику);
			УстановитьОтборСписка();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)
	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);
КонецПроцедуры

Процедура ДействияФормыФормированиеПлатежныхДокументовПоВзносамВФонды(Кнопка)
		
	Если Модифицированность() Тогда
		ТекстВопроса = НСтр("ru='Действие может быть выполнено только после записи документа. Записать?';uk='Дія може бути виконана тільки після запису документа. Записати?'");
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Или Не ЗаписатьВФорме() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;		

	ФормированиеПлатежек = Обработки.ФормированиеПлатежныхДокументовПоВзносамВФонды.Создать();
	ФормированиеПлатежек.Организация = Организация;
	ФормированиеПлатежек.ПериодРегистрации = ПериодРегистрации;
	ФормированиеПлатежек.ДатаПлатежки = РабочаяДата;
	СтрокаВедомость = ФормированиеПлатежек.ДокументыНачисления.Добавить();
	СтрокаВедомость.Ведомость = Ссылка;
	ФормированиеПлатежек.Автозаполнение();
	ФормированиеПлатежек.ПолучитьФорму().Открыть();		
	
КонецПроцедуры

Процедура ДействияФормыВыплатаЗарплатыРасходнымиОрдерами(Кнопка)
		Если Модифицированность() Тогда
		ТекстВопроса = НСтр("ru='Действие может быть выполнено только после записи документа. Записать?';uk='Дія може бути виконана тільки після запису документа. Записати?'");
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Или Не ЗаписатьВФорме() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;		
	
	ВыплатаОрдерами = Обработки.ВыплатаЗарплатыРасходнымиОрдерами.Создать();
	ВыплатаОрдерами.Организация = Организация;
	ВыплатаОрдерами.ПлатежнаяВедомость = Ссылка;
	ВыплатаОрдерами.Автозаполнение();
	ВыплатаОрдерами.ПолучитьФорму().Открыть();
	
КонецПроцедуры


Процедура ДействияФормыОчистить(Кнопка)
	
	ТекстВопроса = НСтр("ru='Все табличные части будет очищены. Продолжить?';uk='Усі табличні частини будуть очищені. Продовжити?'");
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	РаботникиОрганизации.Очистить();
	ПараметрыОплаты.Очистить();
	
	Взносы.Очистить();
	ВзносыФОТ.Очистить();
	НДФЛ.Очистить();
	
КонецПроцедуры

Процедура ДействияФормыПоХарактеруВыплаты(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(ВидВыплаты) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указан вид выплаты для заполнения документа!';uk='Не зазначений вид виплати для заповнення документа!'"));
		Возврат;
	КонецЕсли;
	
	Если РаботникиОрганизации.Количество() > 0 
		ИЛИ ПараметрыОплаты.Количество() > 0
		ИЛИ Взносы.Количество() > 0
		ИЛИ ВзносыФОТ.Количество() > 0
		ИЛИ НДФЛ.Количество() > 0
		Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Заполнить?';uk='Перед заповненням табличні частини будуть очищені. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		РаботникиОрганизации.Очистить();
		ПараметрыОплаты.Очистить();
		
		Взносы.Очистить();
		ВзносыФОТ.Очистить();
		НДФЛ.Очистить();
	ИначеЕсли Модифицированность() Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением докумет необходимо записать. Продолжить?';uk='Перед заповненням документ необхідно записати. Продовжити?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	 Если Не ЭтоНовый() тогда
          Записать(РежимЗаписиДокумента.ОтменаПроведения);
     Иначе
          Записать();
     КонецЕсли;     
	 
	спСотрудников = ""; 
	Автозаполнение();

	Если РаботникиОрганизации.Количество() = 0 
		И ПараметрыОплаты.Количество() = 0
		И Взносы.Количество() = 0
		И ВзносыФОТ.Количество() = 0
		И НДФЛ.Количество() = 0
		Тогда
		
		Сообщить(НСтр("ru='Не обнаружены данные для записи в табличную часть документа.';uk='Не виявлені дані для запису в табличну частину документа.'"), СтатусСообщения.Важное )
		
	КонецЕсли;

	АктивизироватьСтрокуФормы();
	
КонецПроцедуры

// Не является ошибкой проверки конфигурации
// 
// Заполнить и рассчитать налоги для авансов и подобных выплат
//
Процедура ДействияФормыРассчитать(Кнопка)
	Перем мСотрудники, КомментироватьРасчет;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьСписокСотрудниковДляРасчета( Кнопка, мСотрудники, КомментироватьРасчет ) Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеРасчетов.УдалитьСтрокиПоУсловию( Взносы, мСотрудники ); 
	ПроведениеРасчетов.УдалитьСтрокиПоУсловию( НДФЛ, мСотрудники ); 
	ПроведениеРасчетов.УдалитьСтрокиПоУсловию( ВзносыФОТ, мСотрудники ); 
	Записать();
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьНалоги(мСотрудники, КомментироватьРасчет);
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "Регулирование" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РаботаСДиалогами.РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры


Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	Если ПодразделениеОрганизации.Владелец <> Организация Тогда
		ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	мОкруглятьДо = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ОкруглятьДо;
	
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);

КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ЭлементыФормы.Организация.Значение = Справочники.Организации.ПустаяСсылка() Тогда
		
		СтандартнаяОбработка = Истина;
		Возврат;
		
	Иначе
		
		ТекстВопроса = НСтр("ru='При изменении организации табличная часть будет очищена. Изменить?';uk='При зміні організації таблична частина буде очищена. Змінити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			СтандартнаяОбработка = Ложь;
			Элемент.РедактированиеТекста = Ложь;
			
		Иначе
			
			Элемент.РедактированиеТекста = Истина;	
			
			РаботникиОрганизации.Очистить();
			ПараметрыОплаты.Очистить();
			
			Взносы.Очистить();
			ВзносыФОТ.Очистить();
			НДФЛ.Очистить();
			
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)

	Если ЭлементыФормы.Организация.Значение = Справочники.Организации.ПустаяСсылка() Тогда
		
		СтандартнаяОбработка = Истина;
		Возврат;
		
	Иначе 
		
		ТекстВопроса = НСтр("ru='После очистки табличная часть будет очищена. Очистить?';uk='Після очищення таблична частина буде очищена. Очистити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			
			СтандартнаяОбработка = Ложь;
			Элемент.РедактированиеТекста = Ложь;
			
		Иначе
			
			Элемент.РедактированиеТекста = Истина;
			
			РаботникиОрганизации.Очистить();
			ПараметрыОплаты.Очистить();
			
			Взносы.Очистить();
			ВзносыФОТ.Очистить();
			НДФЛ.Очистить();
			
		КонецЕсли

	КонецЕсли;

КонецПроцедуры

Процедура ВидВыплатыПриИзменении(Элемент)
	
	ЗаполнитьКнопкиПодменю();
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

Процедура ВидВыплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если РаботникиОрганизации.Количество() > 0 ИЛИ ПараметрыОплаты.Количество()>0 ИЛИ Взносы.Количество()>0 ИЛИ ВзносыФОТ.Количество()>0 ИЛИ НДФЛ.Количество() > 0 Тогда
		
		
		ТекстВопроса = НСтр("ru='Табличные части будут очищены. Продолжить?';uk='Табличні частини будуть очищені. Продовжити?'");
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;

		РаботникиОрганизации.Очистить();
		ПараметрыОплаты.Очистить();
		Взносы.Очистить();
		ВзносыФОТ.Очистить();
		НДФЛ.Очистить();
		СтандартнаяОбработка = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ВидВыплатыОчистка(Элемент, СтандартнаяОбработка)
		Если РаботникиОрганизации.Количество() > 0 ИЛИ ПараметрыОплаты.Количество()>0 ИЛИ Взносы.Количество()>0 ИЛИ ВзносыФОТ.Количество()>0 ИЛИ НДФЛ.Количество() > 0 Тогда
		
		
		ТекстВопроса = НСтр("ru='Табличные части будут очищены. Продолжить?';uk='Табличні частини будуть очищені. Продовжити?'");
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;

		РаботникиОрганизации.Очистить();
		ПараметрыОплаты.Очистить();
		Взносы.Очистить();
		ВзносыФОТ.Очистить();
		НДФЛ.Очистить();
		
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;

	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ РаботникиОрганизации и ее РЕКВИЗИТОВ 

Процедура КоманднаяПанельРаботникиОрганизацииОбновитьСпособВыплаты(Кнопка)
	
	Для каждого СтрокаТЧ Из РаботникиОрганизации Цикл
		
		СтрокаТЧ.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
		
		Параметры = ПараметрыВыплатыСотруднику(СтрокаТЧ.Сотрудник);
		Если Параметры <> Неопределено Тогда
			СтрокаТЧ.Банк = Параметры.Банк;
			СтрокаТЧ.НомерКарточки = Параметры.НомерКарточки;
			Если ЗначениеЗаполнено(Параметры.СпособВыплаты) тогда
				СтрокаТЧ.СпособВыплаты = Параметры.СпособВыплаты;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииПереключитьОтборСписка(Кнопка)
		
	мОтборПоСотруднику = Не мОтборПоСотруднику;
	СохранитьЗначение("ОтборСпискаЗПКВыплате",мОтборПоСотруднику);
	УстановитьОтборСписка();

КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, Организация, 1);
	
КонецПроцедуры // КоманднаяПанельНачисленияПодбор()

Процедура КоманднаяПанельРаботникиОрганизацииЗамена(Кнопка)
	
	ЗаменаЗначенийКолонкиВыплаченности(Кнопка.Имя)
	
КонецПроцедуры

Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
		СтрокаТабличнойЧасти.Сотрудник = ВыбранноеЗначение;
		
		СтрокаТабличнойЧасти = ПараметрыОплаты.Добавить();
		СтрокаТабличнойЧасти.Сотрудник = ВыбранноеЗначение;
		СтрокаТабличнойЧасти.ПериодВзаиморасчетов = ПериодРегистрации;
		СтрокаТабличнойЧасти.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		
	КонецЕсли;
	
КонецПроцедуры // НачисленияОбработкаВыбора()

Процедура РаботникиОрганизацииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу И ЗначениеЗаполнено(ДанныеСтроки.Банк) Тогда	
		ДанныеСтроки.Банк = Справочники.Банки.ПустаяСсылка();
		ДанныеСтроки.НомерКарточки = "";
	КонецЕсли;	
	
	ОформлениеСтроки.Ячейки.Банк.ТолькоПросмотр = ?(ДанныеСтроки.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу,Истина,Ложь);
	ОформлениеСтроки.Ячейки.НомерКарточки.ТолькоПросмотр = ?(ДанныеСтроки.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу,Истина,Ложь);

КонецПроцедуры // НачисленияПриВыводеСтроки()

Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);
	
КонецПроцедуры // НачисленияПриПолученииДанных()


Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");

	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		мТекущийСотрудник = Неопределено;
		Возврат;
	КонецЕсли;
	
	// запомним текущего сотрудника
	мТекущийСотрудник = ТекущаяСтрока.Сотрудник;
	мСтараяСумма = Элемент.ТекущаяСтрока.Сумма;
	
	ЭлементыФормы.РаботникиОрганизации.ОтборСтрок.Сотрудник.Значение		= мТекущийСотрудник;
	ЭлементыФормы.ПараметрыОплаты.ОтборСтрок.Сотрудник.Значение	= мТекущийСотрудник;
	
	ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Значение			= мТекущийСотрудник;
	ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Значение		= мТекущийСотрудник;
	ЭлементыФормы.НДФЛ.ОтборСтрок.Сотрудник.Значение			= мТекущийСотрудник;
	
КонецПроцедуры // НачисленияПриАктивизацииСтроки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	
	Если мСотрудник <> Элемент.Значение Тогда
		
		УдалитьСотрудникаИзТабличнойЧасти(ПараметрыОплаты); 
		УдалитьСотрудникаИзТабличнойЧасти(Взносы); 
		УдалитьСотрудникаИзТабличнойЧасти(ВзносыФОТ); 
		УдалитьСотрудникаИзТабличнойЧасти(НДФЛ); 
		
		мСотрудник = Элемент.Значение;
		НоваяСтрока = ПараметрыОплаты.Добавить();
		НоваяСтрока.Сотрудник = мСотрудник;
		НоваяСтрока.ПериодВзаиморасчетов = ПериодРегистрации;
		НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		
		ЭлементыФормы.ПараметрыОплаты.ОтборСтрок.Сотрудник.Значение	= мСотрудник;
		ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Значение			= мСотрудник;
		ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Значение		= мСотрудник;
		ЭлементыФормы.НДФЛ.ОтборСтрок.Сотрудник.Значение			= мСотрудник;
		
		СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("парамДата",		Дата);
		Запрос.УстановитьПараметр("парамСотрудники", СтрокаРаботники.Сотрудник);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	СпособыВыплаты.СпособВыплаты				КАК СпособВыплаты,
		|	СпособыВыплаты.Банк							КАК Банк,
		|	СпособыВыплаты.НомерКарточки				КАК НомерКарточки
		|ИЗ РегистрСведений.ПараметрыВыплатыЗПРаботников.СрезПоследних(&парамДата,
		|		Сотрудник в (&парамСотрудники)
		|	) КАК СпособыВыплаты
		|";
		
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств( СтрокаРаботники, Выборка );
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры // НачисленияСотрудникАвтоПодборТекста()

Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры // НачисленияСотрудникОкончаниеВводаТекста()

Процедура РаботникиОрганизацииСуммаПриИзменении(Элемент)
	
	Если Элемент.Значение <> мСтараяСумма Тогда
		мСтараяСумма = Элемент.Значение;
		СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
		РасчитатьСуммыСотрудника( мСтараяСумма, СтрокаРаботники );
	КонецЕсли;

КонецПроцедуры // НачисленияРезультатПриИзменении()

Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	мСотрудник = Элемент.ТекущаяСтрока.Сотрудник;

КонецПроцедуры

Процедура РаботникиОрганизацииПослеУдаления(Элемент)
	
	УдалитьСотрудникаИзТабличнойЧасти(ПараметрыОплаты); 
	УдалитьСотрудникаИзТабличнойЧасти(Взносы); 
	УдалитьСотрудникаИзТабличнойЧасти(ВзносыФОТ); 
	УдалитьСотрудникаИзТабличнойЧасти(НДФЛ); 
	
КонецПроцедуры

Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мСотрудник = Элемент.Значение;
    ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина,  Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура РаботникиОрганизацииСпособВыплатыПриИзменении(Элемент)
	Если Элемент.Значение = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
		ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Банк = Справочники.Контрагенты.ПустаяСсылка(); 
		ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.НомерКарточки = "";
		
	ИначеЕсли Элемент.Значение = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
		ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
		Если ЗначениеЗаполнено(ТекущаяСтрока.Сотрудник)Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамДата",		Дата);
			Запрос.УстановитьПараметр("парамСотрудник", ТекущаяСтрока.Сотрудник);
			Запрос.УстановитьПараметр("черезБанк", Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк);
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	СпособыВыплаты.Банк							КАК Банк,
			|	СпособыВыплаты.НомерКарточки				КАК НомерКарточки
			|ИЗ РегистрСведений.ПараметрыВыплатыЗПРаботников.СрезПоследних(&парамДата,
			|		Сотрудник в (&парамСотрудник) И СпособВыплаты = &ЧерезБанк
			|	) КАК СпособыВыплаты
			|";
			Запрос.Текст = ТекстЗапроса;
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекущаяСтрока.Банк = Выборка.Банк;
				ТекущаяСтрока.НомерКарточки = Выборка.НомерКарточки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ПараметрыОплаты и ее РЕКВИЗИТОВ

Процедура ПараметрыОплатыСуммаПриИзменении(Элемент)
	
	НоваяСумма = Элемент.Значение;
	
	Если НоваяСумма <> мСтараяСуммаПараметры Тогда
		
		СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
		СтрокаПараметры = ЭлементыФормы.ПараметрыОплаты.ТекущаяСтрока;
		
		Если мОкруглятьДо > 0.01 Тогда
			СтрокаПараметры.Сумма = Цел(НоваяСумма/мОкруглятьДо)*мОкруглятьДо;
			СтрокаПараметры.СуммаОкругления = НоваяСумма - Цел(НоваяСумма/мОкруглятьДо)*мОкруглятьДо;
		КонецЕсли;
		
		Если СтрокаРаботники <> Неопределено Тогда
			Сумма = 0;
			СуммаОкругления = 0;
			Отбор = Новый Структура ("Сотрудник", СтрокаРаботники.Сотрудник);
			СтрокиПараметры = ПараметрыОплаты.НайтиСтроки(Отбор);
			Для Каждого СтрокаП Из СтрокиПараметры Цикл
				Сумма = Сумма + СтрокаП.Сумма;
				СуммаОкругления = СуммаОкругления + СтрокаП.СуммаОкругления;
			КонецЦикла;
			
			СтрокаРаботники.Сумма = Сумма;
			СтрокаРаботники.СуммаОкругления = СуммаОкругления;
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыОплатыПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	мСтараяСуммаПараметры = Элемент.ТекущаяСтрока.Сумма + Элемент.ТекущаяСтрока.СуммаОкругления;

КонецПроцедуры

Процедура ПараметрыОплатыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	Если ВидВыплаты <> Справочники.ВидыВыплат.ЗакрытиеПериода
		И ВидВыплаты <> Справочники.ВидыВыплат.НДФЛКонтрагентам
		И ВидВыплаты <> Справочники.ВидыВыплат.НДФЛБезВыплатыЗарплаты
		И ВидВыплаты <> Справочники.ВидыВыплат.ОчереднаяВзносы
		И ВидВыплаты <> Справочники.ВидыВыплат.ОчереднаяПогашениеДолговВзносы
		Тогда
		
		Если СтрокаРаботники = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРаботники.Сотрудник) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыОплатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
		
		Если СтрокаРаботники = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		Элемент.ТекущаяСтрока.Сотрудник = СтрокаРаботники.Сотрудник;
		Элемент.ТекущаяСтрока.ПериодВзаиморасчетов = ПериодРегистрации;
		Элемент.ТекущаяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		
		Сумма = 0;
		СуммаОкругления = 0;
		СтрокиПараметры = ПараметрыОплаты.НайтиСтроки(Новый Структура ("Сотрудник", СтрокаРаботники.Сотрудник));
		Для Каждого СтрокаП Из СтрокиПараметры Цикл
			Сумма = Сумма + СтрокаП.Сумма;
			СуммаОкругления = СуммаОкругления + СтрокаП.СуммаОкругления;
		КонецЦикла;
		Элемент.ТекущаяСтрока.Сумма = СтрокаРаботники.Сумма - Сумма;
		Элемент.ТекущаяСтрока.СуммаОкругления = СтрокаРаботники.СуммаОкругления - СуммаОкругления;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПараметрыОплатыПослеУдаления(Элемент)
	
	СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
		
	Если СтрокаРаботники <> Неопределено Тогда
		Сумма = 0;
		СуммаОкругления = 0;
		Отбор = Новый Структура ("Сотрудник", СтрокаРаботники.Сотрудник);
		СтрокиПараметры = ПараметрыОплаты.НайтиСтроки(Отбор);
		Для Каждого СтрокаП Из СтрокиПараметры Цикл
			Сумма = Сумма + СтрокаП.Сумма;
			СуммаОкругления = СуммаОкругления + СтрокаП.СуммаОкругления;
		КонецЦикла;
			
		СтрокаРаботники.Сумма = Сумма;
		СтрокаРаботники.СуммаОкругления = СуммаОкругления;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ Взносы и ее РЕКВИЗИТОВ

Процедура ВзносыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Сторно Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);
	
	КонецЕсли;
		
	ОформлениеСтроки.Ячейки.Период.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.НалоговыйПериод.Видимость = Ложь;
	
КонецПроцедуры

Процедура ВзносыПриАктивизацииСтроки(Элемент)
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
КонецПроцедуры

Процедура ВзносыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
		
		Если СтрокаРаботники = Неопределено Тогда
			Возврат;
		КонецЕсли;	

		Элемент.ТекущаяСтрока.Сотрудник = СтрокаРаботники.Сотрудник;
		Элемент.ТекущаяСтрока.ПериодВзаиморасчетов = ПериодРегистрации;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ Взносы

// Не является ошибкой проверки конфигурации
// 
Процедура КоманднаяПанельВзносыЗаполнить(Кнопка)
	Перем мСотрудники;
	
	Если НЕ ПолучитьСписокСотрудниковДляАвтозаполнения( Кнопка, "Взносы", Взносы, мСотрудники ) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьВзносы( мСотрудники );
	
	ТекущаяСтрока = ЭлементыФормы.Взносы.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат				= ТекущаяСтрока.Результат;
	КонецЕсли;
	
	
КонецПроцедуры

// Не является ошибкой проверки конфигурации
//
Процедура КоманднаяПанельВзносыЗаполнитьЗакрытиеПериода(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если Взносы.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть ""Взносы"" будет очищена. Продолжить?';uk='Перед заповненням таблична частина ""Внески"" буде очищена. Продовжити?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Взносы.Очистить();
		Записать();
		
	КонецЕсли;
	
	АвтозаполнениеЗакрытиеПериодаВзносы("Взносы");
	
КонецПроцедуры

// Не является ошибкой проверки конфигурации
//
Процедура КоманднаяПанельВзносыРассчитать(Кнопка)
	Перем мСотрудники, КомментироватьРасчет;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьСписокСотрудниковДляРасчета( Кнопка, мСотрудники, КомментироватьРасчет ) Тогда
		Возврат;
	КонецЕсли;
	
	Записать();

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьВзносы( Взносы, "Взносы", мСотрудники, КомментироватьРасчет );
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.Взносы.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат = ТекущаяСтрока.Результат;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ВзносыФОТ и ее РЕКВИЗИТОВ

Процедура ВзносыФОТПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Сторно Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);
	
	КонецЕсли;
		
	ОформлениеСтроки.Ячейки.Период.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.НалоговыйПериод.Видимость = Ложь;
	
КонецПроцедуры

Процедура ВзносыФОТПриАктивизацииСтроки(Элемент)
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ Взносы

// Не является ошибкой проверки конфигурации
//
Процедура КоманднаяПанельВзносыФОТЗаполнить(Кнопка)
	Перем мСотрудники;
	
	Если НЕ ПолучитьСписокСотрудниковДляАвтозаполнения( Кнопка, "ВзносыФОТ", ВзносыФОТ, мСотрудники ) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьВзносыФОТ( мСотрудники );
	
	ТекущаяСтрока = ЭлементыФормы.ВзносыФОТ.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат	= ТекущаяСтрока.Результат;
	КонецЕсли;
	
	
КонецПроцедуры

// Не является ошибкой проверки конфигурации
//
Процедура КоманднаяПанельВзносыФОТЗаполнитьЗакрытиеПериода(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВзносыФОТ.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть ""Взносы ФОТ"" будет очищена. Продолжить?';uk='Перед заповненням таблична частина ""Внески ФОП"" буде очищена. Продовжити?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		ВзносыФОТ.Очистить();
		Записать();
		
	КонецЕсли;
	
	АвтозаполнениеЗакрытиеПериодаВзносы("ВзносыФОТ");
	
КонецПроцедуры

// Не является ошибкой проверки конфигурации
//
Процедура КоманднаяПанельВзносыФОТРассчитать(Кнопка)
	Перем мСотрудники, КомментироватьРасчет;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьСписокСотрудниковДляРасчета( Кнопка, мСотрудники, КомментироватьРасчет ) Тогда
		Возврат;
	КонецЕсли;
 	
	Записать();

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьВзносы( ВзносыФОТ, "ВзносыФОТ", мСотрудники, КомментироватьРасчет);
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.ВзносыФОТ.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат = ТекущаяСтрока.Результат;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ НДФЛ и ее РЕКВИЗИТОВ

// Процедура обеспечивает синхронизацию строк табличных полей 
//
// Параметры:
//  Элемент - табличное поле, которое отображает т.ч.
//  
Процедура НДФЛПриАктивизацииСтроки(Элемент)
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
КонецПроцедуры

Процедура НДФЛПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки.Сторно Тогда	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ НДФЛ

// Не является ошибкой проверки конфигурации
//
Процедура КоманднаяПанельНДФЛЗаполнить(Кнопка)
	Перем мСотрудники;
	
	Если НЕ ПолучитьСписокСотрудниковДляАвтозаполнения( Кнопка, "НДФЛ", НДФЛ, мСотрудники ) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьНДФЛ(мСотрудники);
	
	//
	//ТекущаяСтрока = ЭлементыФормы.Взносы.ТекущаяСтрока;
	//Если ТекущаяСтрока <> Неопределено Тогда
	//	мСтарыйРезультат				= ТекущаяСтрока.Результат;
	//КонецЕсли;
	
 	
КонецПроцедуры

// Не является ошибкой проверки конфигурации
//
Процедура КоманднаяПанельНДФЛЗаполнитьЗакрытиеПериода(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если НДФЛ.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть ""НДФЛ"" будет очищена. Продолжить?';uk='Перед заповненням таблична частина ""ПДФО"" буде очищена. Продовжити?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		НДФЛ.Очистить();
		Записать();
		
	КонецЕсли;
	
	АвтозаполнениеЗакрытиеПериодаНДФЛ();
 	
КонецПроцедуры

// Не является ошибкой проверки конфигурации
//
Процедура КоманднаяПанельНДФЛРассчитать(Кнопка)
	Перем мСотрудники, КомментироватьРасчет;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьСписокСотрудниковДляРасчета( Кнопка, мСотрудники, КомментироватьРасчет ) Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьНДФЛ(мСотрудники, КомментироватьРасчет);
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.НДФЛ.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мНалог	= ТекущаяСтрока.Налог;
		мДоход	= ТекущаяСтрока.Доход;
	КонецЕсли;
	
КонецПроцедуры

Процедура НДФЛПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Если ВидВыплаты = Справочники.ВидыВыплат.НДФЛБезВыплатыЗарплаты Тогда
			Элемент.ТекущаяСтрока.Сотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
			Элемент.ТекущаяСтрока.ПериодВзаиморасчетов = ПериодРегистрации;
			Элемент.ТекущаяСтрока.НалоговыйПериод = ПериодРегистрации;
			Элемент.ТекущаяСтрока.ДоходНДФЛ = Справочники.ВидыДоходовНДФЛ.Код01;
            Возврат;
		КонецЕсли;
		
		СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
		
		Если СтрокаРаботники = Неопределено 
			И ВидВыплаты <> Справочники.ВидыВыплат.ЗакрытиеПериода
			И ВидВыплаты <> Справочники.ВидыВыплат.НДФЛКонтрагентам
			Тогда
			Возврат;
		КонецЕсли;	
		
		
		Если ВидВыплаты <> Справочники.ВидыВыплат.ЗакрытиеПериода
			И ВидВыплаты <> Справочники.ВидыВыплат.НДФЛКонтрагентам
			Тогда
			Элемент.ТекущаяСтрока.Сотрудник = СтрокаРаботники.Сотрудник;
			Элемент.ТекущаяСтрока.ПериодВзаиморасчетов = ПериодРегистрации;
			Элемент.ТекущаяСтрока.НалоговыйПериод = ПериодРегистрации;
			Элемент.ТекущаяСтрока.ДоходНДФЛ = Справочники.ВидыДоходовНДФЛ.Код01;
		КонецЕсли;	

	КонецЕсли;

КонецПроцедуры

Процедура НДФЛСотрудникПриИзменении(Элемент)
		
	СтрокаРаботники = ЭлементыФормы.НДФЛ.ТекущиеДанные;
	Если СтрокаРаботники = Неопределено тогда
		Возврат;
	КонецЕсли;	
	
	Если ВидВыплаты = Справочники.ВидыВыплат.НДФЛБезВыплатыЗарплаты Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("парамДата",	Дата);
		Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
		Запрос.УстановитьПараметр("парамСотрудники", Элемент.Значение);
			
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Взаиморасчеты.Сотрудник						КАК Сотрудник,
		|	Взаиморасчеты.ДоходНДФЛ						КАК ДоходНДФЛ,
		|	Взаиморасчеты.ПериодВзаиморасчетов			КАК ПериодВзаиморасчетов,
		|	Взаиморасчеты.НалогОстаток					КАК Налог,
		|	Взаиморасчеты.ДоходОстаток					КАК Доход
		|
		|ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ.Остатки( &парамДата,
		|		Сотрудник в (&парамСотрудники)
		|		И ПериодВзаиморасчетов = &ПериодРегистрации
		|    ) КАК Взаиморасчеты
		|
		|";
			
		Запрос.Текст = ТекстЗапроса;
		
		СтрокаРаботники.Налог		= 0;
		СтрокаРаботники.Доход		= 0;
		СтрокаРаботники.Льгота		= 0;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
							
			СтрокаРаботники.Сотрудник	= Выборка.Сотрудник;
			СтрокаРаботники.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
			СтрокаРаботники.ДоходНДФЛ	= Выборка.ДоходНДФЛ;
					
			СтрокаРаботники.Налог		= Выборка.Налог;
			СтрокаРаботники.Доход		= 0;
				
		КонецЦикла;
			
		Возврат;
			
	КонецЕсли;
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ Удержания и ее РЕКВИЗИТОВ
мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
мСинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]		= Ложь;
мСинхронизируемыеТабличныеЧасти["ПараметрыОплаты"]			= Ложь;
мСинхронизируемыеТабличныеЧасти["Взносы"]					= Ложь;
мСинхронизируемыеТабличныеЧасти["ВзносыФОТ"]				= Ложь;
мСинхронизируемыеТабличныеЧасти["НДФЛ"]					    = Ложь;

мОтборПоСотруднику = ВосстановитьЗначение("ОтборСпискаЗПКВыплате");
Если мОтборПоСотруднику = Неопределено Тогда
	 мОтборПоСотруднику = Ложь;
КонецЕсли;	 
мОкруглятьДо = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ОкруглятьДо;

