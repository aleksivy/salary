
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА


// получение данных по частным предпринимателям за квартал
//
Процедура ЗаполнитьАлименты() Экспорт

	ИспользуетсяНК = ПроведениеРасчетов.ИспользуетсяНК(ПериодРегистрации);
	
	Запрос = Новый Запрос;
	
	//Декларация НДФЛ отменена, возвращаем все как было
	//Если ИспользуетсяНК Тогда
	//	ТекстПериод = "МЕСЯЦ";
	//	Запрос.УстановитьПараметр("ПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	//Иначе
		ТекстПериод = "КВАРТАЛ";
		Запрос.УстановитьПараметр("ПериодРегистрации", НачалоКвартала(ПериодРегистрации));
	//КонецЕсли;	

	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Удержания.ДокументОснование.Получатель	КАК Контрагент,
	|	Удержания.ПериодРегистрации				КАК Период,
	|	
	|	СУММА( Удержания.Результат ) КАК НачисленоДохода,
	|	СУММА( Удержания.Результат ) КАК ВыплачДохода
	|	
	|	 
	|ИЗ РегистрРасчета.УдержанияРаботниковОрганизаций КАК Удержания
	|
	|ГДЕ НАЧАЛОПЕРИОДА( Удержания.ПериодРегистрации, "+ТекстПериод+") = &ПериодРегистрации
	|И Удержания.Организация = &парамОрганизация
	|И Удержания.ВидРасчета в (&СписокАлименты)
	|
	|СГРУППИРОВАТЬ ПО
	|	Удержания.ДокументОснование.Получатель,
	|	Удержания.ПериодРегистрации
	|
	|ИТОГИ ПО
	|	Контрагент
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	СписокАлименты = Новый СписокЗначений;
	СписокАлименты.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.АлиментыПроцентом);
	СписокАлименты.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.АлиментыПроцентомДоПредела);
	СписокАлименты.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.АлиментыФиксированнойСуммой);
	СписокАлименты.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.АлиментыФиксированнойСуммойДоПредела);
	СписокАлименты.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИндексацияАлиментов);
	Запрос.УстановитьПараметр("СписокАлименты", СписокАлименты);
	
	ВыборкаКонтрагенты = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКонтрагенты.Следующий() Цикл
		
		ИНН = ВыборкаКонтрагенты.Контрагент.КодПоЕДРПОУ;
		Если ИНН = Неопределено Тогда
			
			Сообщить (НСтр("ru='Внимание! Для контрагента - получателя алиментов  ';uk='Увага! Для контрагента - отримувача аліментів '") + ВыборкаКонтрагенты.Контрагент + НСтр("ru=' не заполнен идентификационный номер (реквизит ЕДРПОУ в справочнике Контрагенты). Информация о нем не включается в ведомость!';uk=' не заповнений ідентифікаційний номер (реквізит ЄДРПОУ в довіднику Контрагенти). Інформація про нього не включається у відомість!'"));
			
		КонецЕсли;
		
		ВыборкаПериоды = ВыборкаКонтрагенты.Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		Пока ВыборкаПериоды.Следующий() Цикл
			
			ТекСтрока = НДФЛ.Добавить();
			
			ТекСтрока.Контрагент = ВыборкаПериоды.Контрагент;
			ТекСтрока.ДатаПеречисления = ВыборкаПериоды.Период;
			ТекСтрока.ВидДохода = Справочники.ВидыДоходовНДФЛ.Код29;
			
			ТекСтрока.Доход = ВыборкаПериоды.НачисленоДохода;
			ТекСтрока.Налог = 0;
			
		КонецЦикла; 
		
		
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьАлименты()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	|	Организация,   
	|	ПериодРегистрации,
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНДФЛ(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	// Описание текста запроса:
	// 1. Выборка "ТЧНДФЛ": 
	//		Выбираются строки документа.  
    //
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТЧНДФЛ.НомерСтроки КАК НомерСтроки,
	               |	ТЧНДФЛ.Контрагент,
	               |	ТЧНДФЛ.ВидДохода,
	               |	ТЧНДФЛ.Доход,
	               |	ТЧНДФЛ.Налог
				   |ИЗ
	               |	Документ." + Метаданные().Имя + ".НДФЛ КАК ТЧНДФЛ
	               |
	               |ГДЕ
	               |	ТЧНДФЛ.Ссылка = &ДокументСсылка";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указана организация, для которой ведется учет!';uk='Не зазначена організація, для якої ведеться облік!'"), Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не заполнен период регистрации!';uk='Не заповнений період реєстрації!'"), Отказ);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = НСтр("ru='В строке номер ""';uk='У рядку номер ""'")+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									НСтр("ru='"" табл. части ""Работники организации"": ';uk='"" табл. частини ""Працівники організації"": '");

	// Контрагент
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Контрагент) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не выбран контрагент!';uk='не обраний контрагент!'"), Отказ);
	КонецЕсли;
	
	// ВидДохода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидДохода) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан вид дохода!';uk='не зазначений вид доходу!'"), Отказ);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ТекСтрокаНДФЛ, ВидДвижения)
	
	//Движения по регистру "ВзаиморасчетыПоНДФЛ"
	Движение = Движения.ВзаиморасчетыПоНДФЛ.Добавить();
	
	// Свойства
	Движение.ВидДвижения		= ВидДвижения;
	Движение.Период				= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	
	// Измерения
	Движение.ПериодВзаиморасчетов	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ВидСтавки	= ?(ТекСтрокаНДФЛ.Контрагент.НеЯвляетсяРезидентом, Перечисления.ВидыСтавокНДФЛ.Двойная, Перечисления.ВидыСтавокНДФЛ.Основная);
	Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
	Движение.Сотрудник			= ТекСтрокаНДФЛ.Контрагент;
	Движение.ДоходНДФЛ			= ТекСтрокаНДФЛ.ВидДохода;
	
	// Ресурсы
	Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
		         
		Движение.Доход = ТекСтрокаНДФЛ.Доход;
		Движение.Налог = ТекСтрокаНДФЛ.Налог;
		
	Иначе	
		          
		Движение.Доход = ТекСтрокаНДФЛ.Доход;
		Движение.Налог = ТекСтрокаНДФЛ.Налог;
		
	КонецЕсли; 
	
	Движение.НалоговыйПериод	= ВыборкаПоШапкеДокумента.ПериодРегистрации;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке(Режим).Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
		
		Если НЕ Отказ Тогда
			
				// выполним выборку по табличной части документа
				РезультатЗапросаПоНДФЛ = СформироватьЗапросПоНДФЛ(Режим);
				ВыборкаСтрокЗапроса = РезультатЗапросаПоНДФЛ.Выбрать(ОбходРезультатаЗапроса.Прямой);
				
				// обходим строки запроса, проверяем данные и формируем движения
				Пока ВыборкаСтрокЗапроса.Следующий() Цикл
					
					ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ);
					Если НЕ Отказ Тогда
						
						// регистр ВзаиморасчетыПоНДФЛ Приход
						ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, ВидДвиженияНакопления.Приход);
						
						Если ВыборкаСтрокЗапроса.Налог = 0 Тогда
							
							// регистр ВзаиморасчетыПоНДФЛ Расход
							ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, ВидДвиженияНакопления.Расход);
							
						КонецЕсли;
						
					КонецЕсли; 
					
				КонецЦикла;					
			
			
			// записываем движения регистров
			Движения.ВзаиморасчетыПоНДФЛ.Записать();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры
