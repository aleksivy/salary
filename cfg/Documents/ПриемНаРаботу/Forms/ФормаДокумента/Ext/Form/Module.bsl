////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;
Перем мТекущийРаботник;

Перем мСведенияОВидахРасчета;
Перем мСписокНедоступныхРасчетов;
Перем мВалютаУправленческогоУчета;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Диалог настройки периода
Перем мНастройкаПериода;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Работники,ЭлементыФормы.КоманднаяПанельРаботники.Кнопки.Заполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельНачисления.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Взыскания,ЭлементыФормы.КоманднаяПанельВзыскания.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

// удаляет начисления и взыскания по работнику, все или автоматически заполняемые
// Параметры:
//	Сотрудник	- СправочникСсылка.СотрудникиОрганизаций
//	УдалятьВсе	- булево, если Истина - удаляются все начисления по физлицу,
//				  например, при его удалении из сиска.
//				  Если Ложь - удалаются только те, которые вводятся "автоматически",
//				  например, при редактировании данных по строке табличной части 
//				  со списком работников
Процедура УдалитьРасчетыПоРаботнику(Сотрудник, УдалятьВсе)
	
	СтруктураПоиска = Новый Структура("Сотрудник", Сотрудник);
	
	// удалять начисления и взыскания будем в том случае, когда в т.ч. Работники эта строка с сотрудником - последняя
	Если Работники.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		Возврат
	КонецЕсли;
	
	Строки = Начисления.НайтиСтроки(СтруктураПоиска);
	
	Если УдалятьВсе Тогда
		
		Для Каждого Строка из Строки Цикл
			Начисления.Удалить(Строка);
		КонецЦикла;
		
	Иначе
		
		Для Каждого Строка из Строки Цикл
			
			// удалим "основное" начисление
			Если НЕ ЗначениеЗаполнено(Строка.ВидРасчета) или Строка.ВидРасчета.ЗачетОтработанногоВремени Тогда
				Начисления.Удалить(Строка);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Строки = Взыскания.НайтиСтроки(Новый Структура("Физлицо", Сотрудник.Физлицо));
				
	Для Каждого Строка из Строки Цикл
		Взыскания.Удалить(Строка);
	КонецЦикла;

КонецПроцедуры  // УдалитьРасчетыПоРаботнику

Процедура ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПриВыводеСтрокиПлановыхНачисленийИУдержаний(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчета, Элемент.Данные = "Начисления");
	
КонецПроцедуры

Процедура ВнестиСхемуМотивацииФизлица(ТекущиеДанные)

	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) или НЕ ЗначениеЗаполнено(ТекущиеДанные.Подразделение) или НЕ ЗначениеЗаполнено(ТекущиеДанные.Должность) Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СхемыМотивацииРаботников.ВидРасчета,
	|	СхемыМотивацииРаботников.Показатель1,
	|	СхемыМотивацииРаботников.Валюта1,
	|	СхемыМотивацииРаботников.Показатель2,
	|	СхемыМотивацииРаботников.Валюта2,
	|	СхемыМотивацииРаботников.Показатель3,
	|	СхемыМотивацииРаботников.Валюта3,
	|	СхемыМотивацииРаботников.Показатель4,
	|	СхемыМотивацииРаботников.Валюта4,	
	|	СхемыМотивацииРаботников.Показатель5,
	|	СхемыМотивацииРаботников.Валюта5,	
	|	СхемыМотивацииРаботников.Показатель6,
	|	СхемыМотивацииРаботников.Валюта6,
	|	СхемыМотивацииРаботников.ТарифныйРазряд1,
	|	СхемыМотивацииРаботников.ТарифныйРазряд2,
	|	СхемыМотивацииРаботников.ТарифныйРазряд3,
	|	СхемыМотивацииРаботников.ТарифныйРазряд4,
	|	СхемыМотивацииРаботников.ТарифныйРазряд5,
	|	СхемыМотивацииРаботников.ТарифныйРазряд6,
	|	ВЫБОР
	|		КОГДА СхемыМотивацииРаботников.ВидРасчета ССЫЛКА ПланВидовРасчета.УправленческиеНачисления
	|			ТОГДА ""Начисление""
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА СхемыМотивацииРаботников.ВидРасчета ССЫЛКА ПланВидовРасчета.УправленческиеУдержания
	|					ТОГДА ""Удержание""
	|				ИНАЧЕ
	|					""Прожолжить""
	|			КОНЕЦ 
	|	КОНЕЦ КАК Характеристика
	|ИЗ
	|	РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
	|ГДЕ
	|	ВидСхемыМотивации = ЗНАЧЕНИЕ(Справочник.ВариантыCхемМотивации.ПустаяСсылка)
	|	И СхемыМотивацииРаботников.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И (ВЫБОР
	|			КОГДА СхемыМотивацииРаботников.Должность <> ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)
	|				И СхемыМотивацииРаботников.Подразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			ТОГДА &Должность = СхемыМотивацииРаботников.Должность
	|				И &Подразделение = СхемыМотивацииРаботников.Подразделение
	|			ИНАЧЕ
	|				&Должность = СхемыМотивацииРаботников.Должность
	|		КОНЕЦ)");
	
	Запрос.УстановитьПараметр("Подразделение",ТекущиеДанные.Подразделение);
	Запрос.УстановитьПараметр("Должность",ТекущиеДанные.Должность);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ВидРасчета) Тогда
			Если Выборка.Характеристика = "Начисление" Тогда
				СтрокаТЧ = Начисления.Добавить();
				СтрокаТЧ.Сотрудник	= ТекущиеДанные.Сотрудник;
			ИначеЕсли Выборка.Характеристика = "Удержание" Тогда
				СтрокаТЧ = Взыскания.Добавить();
				СтрокаТЧ.Физлицо	= ТекущиеДанные.Сотрудник.Физлицо;
			Иначе
				Продолжить;
			КонецЕсли;		
			СтрокаТЧ.ВидРасчета	= Выборка.ВидРасчета;
			СтрокаТЧ.Показатель1= Выборка.Показатель1;
			СтрокаТЧ.Валюта1	= Выборка.Валюта1;
			СтрокаТЧ.Показатель2= Выборка.Показатель2;
			СтрокаТЧ.Валюта2	= Выборка.Валюта2;
			СтрокаТЧ.Показатель3= Выборка.Показатель3;
			СтрокаТЧ.Валюта3	= Выборка.Валюта3;
			СтрокаТЧ.Показатель4= Выборка.Показатель4;
			СтрокаТЧ.Валюта4	= Выборка.Валюта4;
			СтрокаТЧ.Показатель5= Выборка.Показатель5;
			СтрокаТЧ.Валюта5	= Выборка.Валюта5;
			СтрокаТЧ.Показатель6= Выборка.Показатель6;
			СтрокаТЧ.Валюта6	= Выборка.Валюта6;
			СтрокаТЧ.ТарифныйРазряд1	= Выборка.ТарифныйРазряд1;
			СтрокаТЧ.ТарифныйРазряд2	= Выборка.ТарифныйРазряд2;
			СтрокаТЧ.ТарифныйРазряд3	= Выборка.ТарифныйРазряд3;
			СтрокаТЧ.ТарифныйРазряд4	= Выборка.ТарифныйРазряд4;
			СтрокаТЧ.ТарифныйРазряд5	= Выборка.ТарифныйРазряд5;
			СтрокаТЧ.ТарифныйРазряд6	= Выборка.ТарифныйРазряд6;
					
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ВнестиСхемуМотивацииФизлица

// Процедура удаляет все начисления и удержания по данному сотруднику
// и вводит новые по схемам мотивации.
// Процедура вызывается из обработчиков события "ПриИзменении" 
// реквизитов ТЧ "Работники":  "Сотрудник", "Подразделение", "Должность"
// 
Процедура ОчиститьИЗаполнитьСМ()
	
	ТекущаяСтрока = ЭлементыФормы.Работники.ТекущиеДанные;
	
	УдалитьРасчетыПоРаботнику(мТекущийРаботник, Истина);

	мТекущийРаботник = ТекущаяСтрока.Сотрудник;
	
	СтруктураПоиска = Новый Структура("Сотрудник", мТекущийРаботник);
	
	// дописывать начисления и взыскания будем в том случае, когда в т.ч. Работники эта строка с сотрудником - единственная
	Если Работники.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		Возврат
	КонецЕсли;
	
	ВнестиСхемуМотивацииФизлица(ТекущаяСтрока);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ДатаПриема");

	// Установить ограничение - изменять видимость колонок для табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Работники.Колонки, СтруктураКолонок);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("Размер");

	// Установить ограничение - изменять видимость колонок для табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен)
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы
	мТекущаяДатаДокумента = Дата;
	мТекущийРаботник	  = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.СотрудникиОрганизаций");
	мВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.Работники.Колонки.ТабельныйНомерСтрока);
	мМассивЭУ.Добавить(ЭлементыФормы.Начисления.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу"));
	
	// Установить настройку периода по умолчанию
	мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	мНастройкаПериода.УстановитьПериод(НачалоМесяца(Дата), КонецМесяца(Дата));
	
	// Установить активный реквизит
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма)	

КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	// если открыть Менеджер контактов - оповестим о необходимости обновить список кандидатов
	Оповестить("ОбновитьСписокКандидатов");

КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ТипЗнч(Параметр) <> Тип("СправочникСсылка.СотрудникиОрганизаций") ИЛИ Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ПодборОтменаВыбора" Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Сотрудник", Параметр);
		НайденныеСтроки = Источник.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			Источник.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПриемНаРаботуВОрганизацию" меню "ВводНаОсновании"
//
Процедура ДействияФормыПриемНаРаботуВОрганизациюВводНаОсновании(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ВводРегламентированногоКадровогоДокументаНаОсновании(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия кнопки "ЗаполнитьПринятымиВОрганизации" список физлиц
Процедура КоманднаяПанельРаботникиЗаполнитьРаботникамиОрганизаций(Кнопка)
	
	Если Работники.Количество() > 0 Тогда
		Вопрос = НСтр("ru='Имеющийся список работников будет очищен. Продолжить?';uk='Наявний список працівників буде очищений. Продовжити?'");
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если мНастройкаПериода.Редактировать() Тогда
		ЗаполнитьТабличнуюЧастьРаботникиРаботникамиОрганизаций(мНастройкаПериода.ДатаНачала, мНастройкаПериода.ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиЗаполнитьКандидатами(Кнопка)
	
	Если Работники.Количество() > 0 Тогда
		Вопрос = НСтр("ru='Имеющийся список работников будет очищен. Продолжить?';uk='Наявний список працівників буде очищений. Продовжити?'");
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьРаботникиКандидатами();
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельРаботникиПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(ЭлементыФормы.Работники, Ссылка, Ложь, Дата);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Заполнить по схемам мотивации" список физлиц
Процедура КоманднаяПанельНачисленияСхемыМотиваций(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='заполнить';uk='заповнити'")) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеПоСхемамМотивации("Начисления");

КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Заполнить по схемам мотивации" список физлиц
Процедура КоманднаяПанельВзысканияСхемыМотиваций(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='заполнить';uk='заповнити'")) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеПоСхемамМотивации("Взыскания");
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "Работники"

// заполняем списки выбора должностей и подразделений связанными значениями
Процедура РаботникиПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ТекущаяКолонка = Элемент.ТекущаяКолонка;
	Если ТекущаяКолонка.Имя = "Подразделение" Или ТекущаяКолонка.Имя = "Должность" Тогда
		
		ИмяПервойКолонки = ТекущаяКолонка.Имя;
		ИмяВторойКолонки = ?(ТекущаяКолонка.Имя = "Подразделение","Должность","Подразделение");
		
		СписокЗначений = ПроцедурыУправленияПерсоналом.ВыбратьИзКадровогоПланаПредприятия(ИмяПервойКолонки, Элемент.ТекущиеДанные[ИмяВторойКолонки]);
		КоличествоЗначений = СписокЗначений.Количество();
		
		ПолеВвода = ТекущаяКолонка.ЭлементУправления;
		ПолеВвода.СписокВыбора = СписокЗначений;
		ПолеВвода.КнопкаСпискаВыбора = КоличествоЗначений > 0;
		ПолеВвода.ВысотаСпискаВыбора = Мин(10, КоличествоЗначений);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура РаботникиПередНачаломДобавления(Элемент, Отказ, Копирование)

	Если Копирование Тогда
		
		// сотрудника не копируем 
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		
		НоваяСтрока	= Работники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока, , "Сотрудник,ФизЛицо");
		
		Элемент.ТекущаяСтрока = НоваяСтрока;
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура удаляут строку с работником из табличной части "Начисления".
Процедура РаботникиПередУдалением(Элемент, Отказ)
	
	УдалитьРасчетыПоРаботнику(Элемент.ТекущиеДанные.Сотрудник, Истина);
	
	Если Не Отказ Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Оповестить("ПодборОтменаВыбора", ДанныеСтроки.Сотрудник);
	КонецЕсли;	
	
КонецПроцедуры

Процедура РаботникиПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ДанныеСтроки = Элемент.ТекущаяСтрока;
	
	мТекущийРаботник = ДанныеСтроки.Сотрудник;
	
	Если НоваяСтрока Тогда
		Если ДанныеСтроки.ЗанимаемыхСтавок = 0 Тогда
			ДанныеСтроки.ЗанимаемыхСтавок = 1;
		КонецЕсли;
		ДанныеСтроки.НапомнитьПоЗавершении = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура РаботникиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ПодборВыбор", ДанныеСтроки.Сотрудник);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода приказа  о приёме работника организации
Процедура РаботникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Работники.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Работники.Добавить();
		СтрокаТабличнойЧасти.Сотрудник			= ВыбранноеЗначение;
		СтрокаТабличнойЧасти.ФизЛицо			= ВыбранноеЗначение.Физлицо;
		СтрокаТабличнойЧасти.ЗанимаемыхСтавок	= 1;
		СтрокаТабличнойЧасти.ИспытательныйСрок	= Перечисления.ИспытательныйСрок.БезИспытательногоСрока;
		СтрокаТабличнойЧасти.ГрафикРаботы		= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Ответственный, "ГрафикРаботы");
		
		ЭлементыФормы.Работники.ТекущаяСтрока	= СтрокаТабличнойЧасти;
		
		ОчиститьИЗаполнитьСМ();
	КонецЕсли;
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "Работники"

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица.
// Добавляет строку по начислению в ТЧ "Начисления" по физическому лицу.
Процедура РаботникиСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.Работники.ТекущиеДанные;
	ДанныеСтроки.ФизЛицо = Элемент.Значение.ФизЛицо;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ЗанимаемыхСтавок) Тогда
		ДанныеСтроки.ЗанимаемыхСтавок  = 1;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ИспытательныйСрок) Тогда
		ДанныеСтроки.ИспытательныйСрок = Перечисления.ИспытательныйСрок.БезИспытательногоСрока;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ГрафикРаботы) Тогда
		ДанныеСтроки.ГрафикРаботы = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Ответственный, "ГрафикРаботы");
	КонецЕсли;
	
	ОчиститьИЗаполнитьСМ();
	
КонецПроцедуры

// Процедура обеспечивает нестандартный шаг регулирования 
//
// Параметры:
//  Элемент - поле ввода т.ч., которое отображает занимаемые ставки
//  Направление - число, определяет, какая из кнопок регулирования была нажата
//  СтандартнаяОбработка - булево, признак выполнения системной обработки события
//  
Процедура РаботникиЗанимаемыхСтавокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Если Направление = 1 Тогда // увеличиваем значение
		ЭлементыФормы.Работники.ТекущиеДанные.ЗанимаемыхСтавок = ЭлементыФормы.Работники.ТекущиеДанные.ЗанимаемыхСтавок + 0.5
	Иначе // = -1 - уменьшаем значение
		ЭлементыФормы.Работники.ТекущиеДанные.ЗанимаемыхСтавок = ЭлементыФормы.Работники.ТекущиеДанные.ЗанимаемыхСтавок - 0.5
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода даты приема
Процедура РаботникиДатаПриемаПриИзменении(Элемент)
	Если Элемент.Значение > РабочаяДата Тогда
		Ответ = Вопрос(НСтр("ru='Вы действительно хотите принять работника на будущую дату?';uk='Ви дійсно хочете прийняти працівника на майбутню дату?'"), РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Элемент.Значение = РабочаяДата
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура РаботникиСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);

КонецПроцедуры

Процедура РаботникиИспытательныйСрокПриИзменении(Элемент)
	Если Элемент.Значение = Перечисления.ИспытательныйСрок.СИспытательнымСроком И Не ЭлементыФормы.Работники.Колонки.ДатаПо.Видимость Тогда
		Вопрос = НСтр("ru='При приеме с испытательным сроком необходимо указывать дату его окончания. Показать колонку с датами окончания?';uk='При прийомі з випробувальним строком необхідно вказувати дату його закінчення. Показати колонку з датами закінчення?'");
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЭлементыФормы.Работники.Колонки.ДатаПо.Видимость = Истина
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура РаботникиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Работники, ОформленияСтрок);
	
	ТолькоПросмотрНапоминания = Работники.Итог("НапомнитьПоЗавершении") = Работники.Количество();
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ОформлениеСтроки.Ячейки.НапомнитьПоЗавершении.ТолькоПросмотр = ТолькоПросмотрНапоминания;
	КонецЦикла;
	
КонецПроцедуры

Процедура РаботникиСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "Сотрудники", Текст);
	
КонецПроцедуры

Процедура РаботникиСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "Сотрудники", Текст, Элемент.Значение);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ПОЛЯ "Начисления"

Процедура НачисленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "Начисления"

Процедура НачисленияСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущиеДанные;
	ДанныеСтроки.ФизЛицо = Элемент.Значение.ФизЛицо;
	
КонецПроцедуры

Процедура НачисленияВидРасчетаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриИзмененииВидаРасчета("Начисления",Элемент.Значение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);
	
КонецПроцедуры

Процедура НачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ФормаВыбораВидаРасчета = ПланыВидовРасчета.УправленческиеНачисления.ПолучитьФормуВыбора("ФормаВыбора", ЭлементыФормы.Начисления, "дляДокументаПриемНаРаботу");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = мСписокНедоступныхРасчетов;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

Процедура НачисленияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыПоискаПоСтроке.ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(Текст, "УправленческиеНачисления", "Не (Ссылка В(&СпВидовРасчета))", Новый Структура("СпВидовРасчета", мСписокНедоступныхРасчетов));
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура НачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления") Тогда
		Элемент.ТекущаяСтрока.ВидРасчета = ВыбранноеЗначение;
		РаботаСДиалогами.ПриИзмененииВидаРасчета("Начисления",ВыбранноеЗначение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);		
	КонецЕсли
КонецПроцедуры

Процедура НачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Начисления, ОформленияСтрок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ПОЛЯ "Взыскания"


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "Взыскания"

Процедура ВзысканияФизлицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура ВзысканияФизлицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВзысканияФизлицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "Работники", Текст, Истина);

КонецПроцедуры

Процедура ВзысканияФизлицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение, , Истина);
	
КонецПроцедуры

Процедура ВзысканияВидРасчетаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриИзмененииВидаРасчета("Взыскания",Элемент.Значение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);		
	
КонецПроцедуры

Процедура ВзысканияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыПоискаПоСтроке.ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(Текст, "УправленческиеУдержания", "Не (Ссылка В(&СпВидовРасчета))", Новый Структура("СпВидовРасчета", мСписокНедоступныхРасчетов));
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ВзысканияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Взыскания, ОформленияСтрок);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСведенияОВидахРасчета = Новый Соответствие;

мСписокНедоступныхРасчетов = Новый СписокЗначений;
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерии);
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерииСдельно);

мНастройкаПериода = Новый НастройкаПериода;

