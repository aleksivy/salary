////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
Перем мТекущийРаботник; 
Перем мВалютаУправленческогоУчета Экспорт;

// для синхронизации строк табличных полей
Перем мСтрокаРаботникиУстановлена;
Перем мСтрокаНачисленияУстановлена;
Перем мСинхронизируемыеТабличныеЧасти;
Перем мСведенияОВидахРасчета;
Перем мСписокНедоступныхРасчетов;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Работники,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанель1.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Взыскания,ЭлементыФормы.КоманднаяПанель2.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

// Удаляет строку ТЧ документа при удалении работника из ТЗ.
//
// Параметры
//
Процедура УдалитьСтрокиИзТЧДокумента(Сотрудник)

	СтруктураПоиска = Новый Структура("Сотрудник");
	СтруктураПоиска.Сотрудник = Сотрудник;
	
	МассивСотрудников = Начисления.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Элемент Из МассивСотрудников Цикл
		Начисления.Удалить(Элемент.НомерСтроки-1);
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Физлицо");
	СтруктураПоиска.Физлицо = Сотрудник.Физлицо;
	
	МассивФизЛиц = Взыскания.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Элемент Из МассивФизЛиц Цикл
		Взыскания.Удалить(Элемент.НомерСтроки-1);
	КонецЦикла;

КонецПроцедуры


// Процедура - обработчик события "ПриВыводеСтроки" ТЧ
//
Процедура ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПриВыводеСтрокиПлановыхНачисленийИУдержаний(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчета, Элемент.Данные = "Начисления");
	
КонецПроцедуры

Процедура ВнестиСхемуМотивацииФизлица(ТекущиеДанные)

	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) или НЕ ЗначениеЗаполнено(ТекущиеДанные.НовоеПодразделение) или НЕ ЗначениеЗаполнено(ТекущиеДанные.НоваяДолжность) Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос(
	
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Сотрудник КАК Сотрудник,
		|	NULL КАК Физлицо,
		|	ВложенныйЗапрос.ВидРасчета КАК ВидРасчета,
		|	МАКСИМУМ(ВложенныйЗапрос.ПНВидРасчета) КАК ПНВидРасчета,
		|	МАКСИМУМ(ВложенныйЗапрос.СМВидРасчета) КАК СМВидРасчета,
		|	МАКСИМУМ(ВложенныйЗапрос.Показатель1) КАК Показатель1,
		|	МАКСИМУМ(ВложенныйЗапрос.Валюта1) КАК Валюта1,
		|	МАКСИМУМ(ВложенныйЗапрос.Показатель2) КАК Показатель2,
		|	МАКСИМУМ(ВложенныйЗапрос.Валюта2) КАК Валюта2,
		|	МАКСИМУМ(ВложенныйЗапрос.Показатель3) КАК Показатель3,
		|	МАКСИМУМ(ВложенныйЗапрос.Валюта3) КАК Валюта3,
		|	МАКСИМУМ(ВложенныйЗапрос.Показатель4) КАК Показатель4,
		|	МАКСИМУМ(ВложенныйЗапрос.Валюта4) КАК Валюта4,
		|	МАКСИМУМ(ВложенныйЗапрос.Показатель5) КАК Показатель5,
		|	МАКСИМУМ(ВложенныйЗапрос.Валюта5) КАК Валюта5,
		|	МАКСИМУМ(ВложенныйЗапрос.Показатель6) КАК Показатель6,
		|	МАКСИМУМ(ВложенныйЗапрос.Валюта6) КАК Валюта6,
		|	МАКСИМУМ(ВложенныйЗапрос.ТарифныйРазряд1) КАК ТарифныйРазряд1,
		|	МАКСИМУМ(ВложенныйЗапрос.ТарифныйРазряд2) КАК ТарифныйРазряд2,
		|	МАКСИМУМ(ВложенныйЗапрос.ТарифныйРазряд3) КАК ТарифныйРазряд3,
		|	МАКСИМУМ(ВложенныйЗапрос.ТарифныйРазряд4) КАК ТарифныйРазряд4,
		|	МАКСИМУМ(ВложенныйЗапрос.ТарифныйРазряд5) КАК ТарифныйРазряд5,
		|	МАКСИМУМ(ВложенныйЗапрос.ТарифныйРазряд6) КАК ТарифныйРазряд6,
		|	""Начисление"" КАК Характеристика
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ПлановыеНачисленияРаботников.ВидРасчета КАК ВидРасчета,
		|		ПлановыеНачисленияРаботников.ВидРасчета КАК ПНВидРасчета,
		|		NULL КАК СМВидРасчета,
		|		ПлановыеНачисленияРаботников.Показатель1 КАК Показатель1,
		|		ПлановыеНачисленияРаботников.Валюта1 КАК Валюта1,
		|		ПлановыеНачисленияРаботников.Показатель2 КАК Показатель2,
		|		ПлановыеНачисленияРаботников.Валюта2 КАК Валюта2,
		|		ПлановыеНачисленияРаботников.Показатель3 КАК Показатель3,
		|		ПлановыеНачисленияРаботников.Валюта3 КАК Валюта3,
		|		ПлановыеНачисленияРаботников.Показатель4 КАК Показатель4,
		|		ПлановыеНачисленияРаботников.Валюта4 КАК Валюта4,
		|		ПлановыеНачисленияРаботников.Показатель5 КАК Показатель5,
		|		ПлановыеНачисленияРаботников.Валюта5 КАК Валюта5,
		|		ПлановыеНачисленияРаботников.Показатель6 КАК Показатель6,
		|		ПлановыеНачисленияРаботников.Валюта6 КАК Валюта6,
		|		ПлановыеНачисленияРаботников.ТарифныйРазряд1 КАК ТарифныйРазряд1,
		|		ПлановыеНачисленияРаботников.ТарифныйРазряд2 КАК ТарифныйРазряд2,
		|		ПлановыеНачисленияРаботников.ТарифныйРазряд3 КАК ТарифныйРазряд3,
		|		ПлановыеНачисленияРаботников.ТарифныйРазряд4 КАК ТарифныйРазряд4,
		|		ПлановыеНачисленияРаботников.ТарифныйРазряд5 КАК ТарифныйРазряд5,
		|		ПлановыеНачисленияРаботников.ТарифныйРазряд6 КАК ТарифныйРазряд6
		|	ИЗ
		|		РегистрСведений.ПлановыеНачисленияРаботников.СрезПоследних(
		|				&Период,
		|				Физлицо = &Физлицо
		|					И Действует) КАК ПлановыеНачисленияРаботников
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		СхемыМотивацииРаботников.ВидРасчета,
		|		NULL,
		|		СхемыМотивацииРаботников.ВидРасчета,
		|		СхемыМотивацииРаботников.Показатель1,
		|		СхемыМотивацииРаботников.Валюта1,
		|		СхемыМотивацииРаботников.Показатель2,
		|		СхемыМотивацииРаботников.Валюта2,
		|		СхемыМотивацииРаботников.Показатель3,
		|		СхемыМотивацииРаботников.Валюта3,
		|		СхемыМотивацииРаботников.Показатель4,
		|		СхемыМотивацииРаботников.Валюта4,
		|		СхемыМотивацииРаботников.Показатель5,
		|		СхемыМотивацииРаботников.Валюта5,
		|		СхемыМотивацииРаботников.Показатель6,
		|		СхемыМотивацииРаботников.Валюта6,
		|		СхемыМотивацииРаботников.ТарифныйРазряд1,
		|		СхемыМотивацииРаботников.ТарифныйРазряд2,
		|		СхемыМотивацииРаботников.ТарифныйРазряд3,
		|		СхемыМотивацииРаботников.ТарифныйРазряд4,
		|		СхемыМотивацииРаботников.ТарифныйРазряд5,
		|		СхемыМотивацииРаботников.ТарифныйРазряд6
		|	ИЗ
		|		РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
		|	ГДЕ
		|		СхемыМотивацииРаботников.ВидСхемыМотивации = &ВариантCхемМотивации
		|		И СхемыМотивацииРаботников.Организация = &Организация
		|		И СхемыМотивацииРаботников.ВидРасчета ССЫЛКА ПланВидовРасчета.УправленческиеНачисления
		|		И ВЫБОР
		|				КОГДА СхемыМотивацииРаботников.Должность <> &ДолжностиПустаяСсылка
		|						И СхемыМотивацииРаботников.Подразделение <> &Неопределено
		|					ТОГДА &Должность = СхемыМотивацииРаботников.Должность
		|							И &Подразделение = СхемыМотивацииРаботников.Подразделение
		|				ИНАЧЕ &Должность = СхемыМотивацииРаботников.Должность
		|			КОНЕЦ) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ВидРасчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	NULL,
		|	&Физлицо,
		|	ВложенныйЗапрос.ВидРасчета,
		|	МАКСИМУМ(ВложенныйЗапрос.ПНВидРасчета),
		|	МАКСИМУМ(ВложенныйЗапрос.СМВидРасчета),
		|	МАКСИМУМ(ВложенныйЗапрос.Показатель1),
		|	МАКСИМУМ(ВложенныйЗапрос.Валюта1),
		|	МАКСИМУМ(ВложенныйЗапрос.Показатель2),
		|	МАКСИМУМ(ВложенныйЗапрос.Валюта2),
		|	МАКСИМУМ(ВложенныйЗапрос.Показатель3),
		|	МАКСИМУМ(ВложенныйЗапрос.Валюта3),
		|	МАКСИМУМ(ВложенныйЗапрос.Показатель4),
		|	МАКСИМУМ(ВложенныйЗапрос.Валюта4),
		|	МАКСИМУМ(ВложенныйЗапрос.Показатель5),
		|	МАКСИМУМ(ВложенныйЗапрос.Валюта5),
		|	МАКСИМУМ(ВложенныйЗапрос.Показатель6),
		|	МАКСИМУМ(ВложенныйЗапрос.Валюта6),
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	""Взыскание""
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ПлановыеУдержанияРаботниковСрезПоследних.ВидРасчета КАК ВидРасчета,
		|		ПлановыеУдержанияРаботниковСрезПоследних.ВидРасчета КАК ПНВидРасчета,
		|		NULL КАК СМВидРасчета,
		|		ПлановыеУдержанияРаботниковСрезПоследних.Показатель1 КАК Показатель1,
		|		ПлановыеУдержанияРаботниковСрезПоследних.Валюта1 КАК Валюта1,
		|		ПлановыеУдержанияРаботниковСрезПоследних.Показатель2 КАК Показатель2,
		|		ПлановыеУдержанияРаботниковСрезПоследних.Валюта2 КАК Валюта2,
		|		ПлановыеУдержанияРаботниковСрезПоследних.Показатель3 КАК Показатель3,
		|		ПлановыеУдержанияРаботниковСрезПоследних.Валюта3 КАК Валюта3,
		|		ПлановыеУдержанияРаботниковСрезПоследних.Показатель4 КАК Показатель4,
		|		ПлановыеУдержанияРаботниковСрезПоследних.Валюта4 КАК Валюта4,
		|		ПлановыеУдержанияРаботниковСрезПоследних.Показатель5 КАК Показатель5,
		|		ПлановыеУдержанияРаботниковСрезПоследних.Валюта5 КАК Валюта5,
		|		ПлановыеУдержанияРаботниковСрезПоследних.Показатель6 КАК Показатель6,
		|		ПлановыеУдержанияРаботниковСрезПоследних.Валюта6 КАК Валюта6
		|	ИЗ
		|		РегистрСведений.ПлановыеУдержанияРаботников.СрезПоследних(
		|				&Период,
		|				Физлицо = &Физлицо
		|					И Действует) КАК ПлановыеУдержанияРаботниковСрезПоследних
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		СхемыМотивацииРаботников.ВидРасчета,
		|		NULL,
		|		СхемыМотивацииРаботников.ВидРасчета,
		|		СхемыМотивацииРаботников.Показатель1,
		|		СхемыМотивацииРаботников.Валюта1,
		|		СхемыМотивацииРаботников.Показатель2,
		|		СхемыМотивацииРаботников.Валюта2,
		|		СхемыМотивацииРаботников.Показатель3,
		|		СхемыМотивацииРаботников.Валюта3,
		|		СхемыМотивацииРаботников.Показатель4,
		|		СхемыМотивацииРаботников.Валюта4,
		|		СхемыМотивацииРаботников.Показатель5,
		|		СхемыМотивацииРаботников.Валюта5,
		|		СхемыМотивацииРаботников.Показатель6,
		|		СхемыМотивацииРаботников.Валюта6
		|	ИЗ
		|		РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
		|	ГДЕ
		|		СхемыМотивацииРаботников.ВидСхемыМотивации = &ВариантCхемМотивации
		|		И СхемыМотивацииРаботников.Организация = &Организация
		|		И СхемыМотивацииРаботников.ВидРасчета ССЫЛКА ПланВидовРасчета.УправленческиеУдержания
		|		И ВЫБОР
		|				КОГДА СхемыМотивацииРаботников.Должность <> &ДолжностиПустаяСсылка
		|						И СхемыМотивацииРаботников.Подразделение <> &Неопределено
		|					ТОГДА &Должность = СхемыМотивацииРаботников.Должность
		|							И &Подразделение = СхемыМотивацииРаботников.Подразделение
		|				ИНАЧЕ &Должность = СхемыМотивацииРаботников.Должность
		|			КОНЕЦ) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ВидРасчета");
	
	Запрос.УстановитьПараметр("Период",			ТекущиеДанные.ДатаНачала);
	Запрос.УстановитьПараметр("Сотрудник",		ТекущиеДанные.Сотрудник);
	Запрос.УстановитьПараметр("Физлицо",		ТекущиеДанные.Сотрудник.Физлицо);
	Запрос.УстановитьПараметр("Подразделение",	ТекущиеДанные.НовоеПодразделение);
	Запрос.УстановитьПараметр("Должность",		ТекущиеДанные.НоваяДолжность);
	Запрос.УстановитьПараметр("Начать",			Перечисления.ВидыДействияСНачислением.Начать);
	Запрос.УстановитьПараметр("Изменить",		Перечисления.ВидыДействияСНачислением.Изменить);
	Запрос.УстановитьПараметр("Прекратить",		Перечисления.ВидыДействияСНачислением.Прекратить);
	Запрос.УстановитьПараметр("ВариантCхемМотивации", Справочники.ВариантыCхемМотивации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДолжностиПустаяСсылка", Справочники.ДолжностиОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПодразделенияПустаяСсылка", Справочники.Подразделения.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация",Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Неопределено",Неопределено);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Характеристика = "Начисление" Тогда
			СтрокаТЧ = Начисления.Добавить();
			СтрокаТЧ.Сотрудник	= Выборка.Сотрудник;
			СтрокаТЧ.Физлицо	= Выборка.Сотрудник.Физлицо;
			СтрокаТЧ.ВидРасчета = Выборка.ВидРасчета;
			Если Выборка.СМВидРасчета = NULL Тогда
				СтрокаТЧ.Действие = Перечисления.ВидыДействияСНачислением.Прекратить;
			ИначеЕсли Выборка.ПНВидРасчета = NULL Тогда
 				СтрокаТЧ.Действие = Перечисления.ВидыДействияСНачислением.Начать;
			Иначе
				СтрокаТЧ.Действие = Перечисления.ВидыДействияСНачислением.Изменить;
			КонецЕсли;
			Для Сч = 1 По 6 Цикл
				СтрокаТЧ["Валюта"+Сч]		= Выборка["Валюта"+Сч];
				СтрокаТЧ["Показатель"+Сч]	= Выборка["Показатель"+Сч];
				СтрокаТЧ["ТарифныйРазряд"+Сч]	= Выборка["ТарифныйРазряд"+Сч];
			КонецЦикла
			
		Иначе
			СтрокаТЧ = Взыскания.Добавить();			
			СтрокаТЧ.Физлицо	= Выборка.Физлицо;
			СтрокаТЧ.ВидРасчета = Выборка.ВидРасчета;
			Если Выборка.СМВидРасчета = NULL Тогда
				СтрокаТЧ.Действие = Перечисления.ВидыДействияСНачислением.Прекратить;
			ИначеЕсли Выборка.ПНВидРасчета = NULL Тогда
 				СтрокаТЧ.Действие = Перечисления.ВидыДействияСНачислением.Начать;
			Иначе
				СтрокаТЧ.Действие = Перечисления.ВидыДействияСНачислением.Изменить;
			КонецЕсли;
			Для Сч = 1 По 6 Цикл
				СтрокаТЧ["Валюта"+Сч]		= Выборка["Валюта"+Сч];
				СтрокаТЧ["Показатель"+Сч]	= Выборка["Показатель"+Сч];
			КонецЦикла
			
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);
	КонецЦикла;

КонецПроцедуры

Процедура ПроставитьДанныеПриИзмененииФизлица(ТекущаяСтрока, ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	//ТекущаяСтрока.Сотрудник						= ВыбранноеЗначение.Сотрудник;
	ТекущаяСтрока.НовоеПодразделение			= ВыбранноеЗначение.Подразделение;
	ТекущаяСтрока.НоваяДолжность				= ВыбранноеЗначение.Должность;
	ТекущаяСтрока.ГрафикРаботы					= ВыбранноеЗначение.ГрафикРаботы;
	Если ЗначениеЗаполнено(ВыбранноеЗначение.ЗанимаемыхСтавок) Тогда
		ТекущаяСтрока.ЗанимаемыхСтавок			= ВыбранноеЗначение.ЗанимаемыхСтавок;
	КонецЕсли;
	ТекущаяСтрока.СпособОтраженияВУпрУчете		= ВыбранноеЗначение.СпособОтраженияВУпрУчете;
	ТекущаяСтрока.УчетНачисленийПоОрганизации	= ВыбранноеЗначение.УчетНачисленийПоОрганизации;
	
	УдалитьСтрокиИзТЧДокумента(мТекущийРаботник);
	ВнестиСхемуМотивацииФизлица(ТекущаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	Иначе		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ДатаНачала");

	// Установить ограничение - изменять видимость колонок для табличной части 
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Работники.Колонки, СтруктураКолонок);

	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("Показатель1");
		
	// Установить ограничение - изменять видимость колонок для табличной части 
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы Состояние документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мТекущийРаботник = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.СотрудникиОрганизаций");
	
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.Работники.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу"));
	
	// Активизируем табличную часть
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма)	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			Работники.Загрузить(ЗначениеВыбора.Данные.Выгрузить());
			Начисления.Очистить();
			Взыскания.Очистить();
			
			Для Каждого СтрокаТабличнойЧасти Из Работники Цикл
				
				ТекущаяСтрока = СтрокаТабличнойЧасти;
				
				ВыбранноеЗначение = ПроцедурыУправленияПерсоналом.СведенияПоВыбранномуРаботнику(СтрокаТабличнойЧасти.Сотрудник, "Работники, УчетЗаработкаРаботников");
				ПроставитьДанныеПриИзмененииФизлица(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				
			КонецЦикла;
		
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Вывести в заголовке формы Состояние документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "КадровоеПеремещениеОрганизаций" меню "ВводНаОсновании"
//
Процедура ДействияФормыКадровоеПеремещениеОрганизацийВводНаОсновании(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ВводРегламентированногоКадровогоДокументаНаОсновании(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе меню "Заполнить по схемам мотивации".
// командной панели формы, закладки "Начисления".
//
Процедура КоманднаяПанель1СхемыМотиваций(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='заполнить';uk='заповнити'")) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеПоСхемамМотивации("Начисления");
	
КонецПроцедуры

// Процедура вызывается при выборе меню "Заполнить по схемам мотивации".
// командной панели формы, закладки "Взыскания".
//
Процедура КоманднаяПанель2СхемыМотиваций(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='заполнить';uk='заповнити'")) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнениеПоСхемамМотивации("Взыскания");
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если Работники.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

	КонецЕсли;
		
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, "Работники", , )
	
КонецПроцедуры

// Процедура - обработчик события нажатия кнопки "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(ЭлементыФормы.Работники, Ссылка, Ложь, Дата);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа
//
// Параметры:
//  Элемент      - элемент формы, который отображает дату документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "Работники"

// Процедура - обработчик события "АктивизацииЯчейки" строки ТЧ
Процедура РаботникиПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ТекущаяКолонка = Элемент.ТекущаяКолонка;
	Если ТекущаяКолонка.Имя = "НовоеПодразделение" Или ТекущаяКолонка.Имя = "НоваяДолжность" Тогда
		
		ИмяПервойКолонки = ?(ТекущаяКолонка.Имя = "НовоеПодразделение","Подразделение","Должность");
		ИмяВторойКолонки = ?(ТекущаяКолонка.Имя = "НовоеПодразделение","НоваяДолжность","НовоеПодразделение");
		
		СписокЗначений = ПроцедурыУправленияПерсоналом.ВыбратьИзКадровогоПланаПредприятия(ИмяПервойКолонки, Элемент.ТекущиеДанные[ИмяВторойКолонки]);
		КоличествоЗначений = СписокЗначений.Количество();
		
		ПолеВвода = ТекущаяКолонка.ЭлементУправления;
		ПолеВвода.СписокВыбора = СписокЗначений;
		ПолеВвода.КнопкаСпискаВыбора = КоличествоЗначений > 0;
		ПолеВвода.ВысотаСпискаВыбора = Мин(10, КоличествоЗначений);
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" строки ТЧ
Процедура РаботникиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда		
		
		// чтобы исключить возможность ввода одного и того же работника несколько раз
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		
		НоваяСтрока								= Работники.Добавить();
		НоваяСтрока.ДатаНачала					= ТекущаяСтрока.ДатаНачала;
		НоваяСтрока.ДатаОкончания				= ТекущаяСтрока.ДатаОкончания;
		НоваяСтрока.НапомнитьПоЗавершении		= ТекущаяСтрока.НапомнитьПоЗавершении;
		НоваяСтрока.НовоеПодразделение			= ТекущаяСтрока.НовоеПодразделение;
		НоваяСтрока.НоваяДолжность				= ТекущаяСтрока.НоваяДолжность;
		НоваяСтрока.ЗанимаемыхСтавок			= ТекущаяСтрока.ЗанимаемыхСтавок;		
		НоваяСтрока.ГрафикРаботы				= ТекущаяСтрока.ГрафикРаботы;
		НоваяСтрока.СпособОтраженияВУпрУчете	= ТекущаяСтрока.СпособОтраженияВУпрУчете;
		НоваяСтрока.УчетНачисленийПоОрганизации	= ТекущаяСтрока.УчетНачисленийПоОрганизации;
		
		Элемент.ТекущаяСтрока = НоваяСтрока;
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" строки ТЧ, удаляет строки из ТЧ "Начисления"
Процедура РаботникиПередУдалением(Элемент, Отказ)
	
	УдалитьСтрокиИзТЧДокумента(Элемент.ТекущиеДанные.Сотрудник);
	
КонецПроцедуры

// Процедура обеспечивает начальное значение реквизита "ЗанимаемыхСтавок" и 
//  "ГрафикРаботы".
//
// Параметры:
//  Элемент      - табличное поле, которое отображает т.ч.
//  НоваяСтрока  - булево, признак редактирования новой строки
//  
Процедура РаботникиПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ЗанимаемыхСтавок) Тогда
			Элемент.ТекущаяСтрока.ЗанимаемыхСтавок = 1;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ГрафикРаботы) Тогда
			Элемент.ТекущаяСтрока.ГрафикРаботы = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Ответственный, "ГрафикРаботы");
		КонецЕсли;
	КонецЕсли;
	
	мТекущийРаботник = Элемент.ТекущаяСтрока.Сотрудник;
	
КонецПроцедуры

// Процедура обеспечивает заполнение колонок данных "до" перемещения 
//
// Параметры:
//	Элемент			- табличное поле, которое отображает т.ч.
//	НоваяСтрока		- булево, признак редактирования новой строки
//
Процедура РаботникиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		ДанныеСтроки = СтрокаТабличнойЧасти.ДанныеСтроки;
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаСотрудников.Добавить();
		НоваяСтрока.Сотрудник = ДанныеСтроки.Сотрудник;
		НоваяСтрока.ДатаНачала = ДанныеСтроки.ДатаНачала;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.ДатаНачала
	|ПОМЕСТИТЬ ВТ_ТаблицаСотрудников
	|ИЗ
	|	&ТаблицаСотрудников КАК Сотрудники";
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников",	ТаблицаСотрудников);
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДатыПоследнихДвиженийРаботников.Сотрудник КАК Сотрудник,
	|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	ДанныеПоРаботникуДоНазначения.Подразделение КАК Подразделение,
	|	ДанныеПоРаботникуДоНазначения.Должность КАК Должность
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(Работники.Период) КАК Период,
	|		ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|		ТаблицаСотрудников.Сотрудник.ФизЛицо КАК ФизЛицо
	|	ИЗ
	|		ВТ_ТаблицаСотрудников КАК ТаблицаСотрудников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
	|			ПО (Работники.Период <= ТаблицаСотрудников.ДатаНачала)
	|				И ТаблицаСотрудников.Сотрудник.ФизЛицо = Работники.ФизЛицо
	|				И (Работники.Регистратор <> &Ссылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаСотрудников.Сотрудник,
	|		ТаблицаСотрудников.Сотрудник.ФизЛицо) КАК ДатыПоследнихДвиженийРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК ДанныеПоРаботникуДоНазначения
	|		ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
	|			И ДатыПоследнихДвиженийРаботников.ФизЛицо = ДанныеПоРаботникуДоНазначения.ФизЛицо
	|			И (ДанныеПоРаботникуДоНазначения.Регистратор <> &Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		
		ДанныеСтроки = СтрокаТабличнойЧасти.ДанныеСтроки;
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(ДанныеСтроки.Сотрудник, "Сотрудник") Тогда
			СтрокаТабличнойЧасти.Ячейки.СтароеПодразделение.УстановитьТекст(Выборка.Подразделение);
			СтрокаТабличнойЧасти.Ячейки.СтараяДолжность.УстановитьТекст(Выборка.Должность);
			СтрокаТабличнойЧасти.Ячейки.СтараяСтавка.УстановитьТекст(Формат(Выборка.ЗанимаемыхСтавок,"ЧЦ=4;ЧДЦ=2"));
		КонецЕсли;
		
	КонецЦикла;
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Работники, ОформленияСтрок);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода приказа  о приёме работника организации
Процедура РаботникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
		
	Если Работники.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Работники.Добавить();
		СтрокаТабличнойЧасти.Сотрудник = ВыбранноеЗначение;
			
		СведенияПоСотруднику = ПроцедурыУправленияПерсоналом.СведенияПоВыбранномуРаботнику(ВыбранноеЗначение, "Работники, УчетЗаработкаРаботников");
		ПроставитьДанныеПриИзмененииФизлица(СтрокаТабличнойЧасти, СведенияПоСотруднику);
	КонецЕсли;
	
КонецПроцедуры  // ТабличнаяЧастьОбработкаВыбора

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "Работники"

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица.
// Добавляет строку по начислению в ТЧ "Начисления" по физическому лицу.
Процедура РаботникиСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.Работники.ТекущиеДанные;
	ДанныеСтроки.ФизЛицо = Элемент.Значение.ФизЛицо;
	
	ВыбранноеЗначение = ПроцедурыУправленияПерсоналом.СведенияПоВыбранномуРаботнику(Элемент.Значение, "Работники, УчетЗаработкаРаботников");
	ПроставитьДанныеПриИзмененииФизлица(ДанныеСтроки, ВыбранноеЗначение);
	мТекущийРаботник = Элемент.Значение;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица -  
// подбирает подходящие должность и подразделение
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура РаботникиСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура РаботникиСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокиРаботников = Работники.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение));
	Если СтрокиРаботников.Количество() > 0 Тогда
		Предупреждение(НСтр("ru='В данном документе по одному работнику можно вводить только одну строку!';uk='В даному документі по одному працівнику можна вводити тільки один рядок!'"));
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = ВыбранноеЗначение;
	
	СведенияПоСотруднику = ПроцедурыУправленияПерсоналом.СведенияПоВыбранномуРаботнику(ВыбранноеЗначение, "Работники, УчетЗаработкаРаботников");
	ПроставитьДанныеПриИзмененииФизлица(ЭлементыФормы.Работники.ТекущиеДанные, СведенияПоСотруднику);
		
	мТекущийРаботник = ВыбранноеЗначение;
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "Работники", Текст);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение);
КонецПроцедуры

// Процедура обеспечивает нестандартный шаг регулирования 
//
// Параметры:
//  Элемент      - элемент формы, который отображает занимаемые ставки.
//  Направление  - число, определяет, какая из кнопок регулирования была нажата.
//  СтандартнаяОбработка - булево, признак выполнения системной обработки события.
//  
Процедура РаботникиЗанимаемыхСтавокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если Направление = 1 Тогда // увеличиваем значение
		ЭлементыФормы.Работники.ТекущиеДанные.ЗанимаемыхСтавок = ЭлементыФормы.Работники.ТекущиеДанные.ЗанимаемыхСтавок + 0.5
	Иначе // = -1 - уменьшаем значение
		ЭлементыФормы.Работники.ТекущиеДанные.ЗанимаемыхСтавок = ЭлементыФормы.Работники.ТекущиеДанные.ЗанимаемыхСтавок - 0.5
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "НовоеПодразделение" -  
// подбирает схему мотивации
//
// Параметры:
//  Элемент - элемент формы, который отображает "Подразделение"
//
Процедура РаботникиНовоеПодразделениеПриИзменении(Элемент)
	
	УдалитьСтрокиИзТЧДокумента(мТекущийРаботник);
	ВнестиСхемуМотивацииФизлица(ЭлементыФормы.Работники.ТекущиеДанные);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "НоваяДолжность" -  
// подбирает схему мотивации
//
// Параметры:
//  Элемент - элемент формы, который отображает "НоваяДолжность"
//
Процедура РаботникиНоваяДолжностьПриИзменении(Элемент)
	
	УдалитьСтрокиИзТЧДокумента(мТекущийРаботник);
	ВнестиСхемуМотивацииФизлица(ЭлементыФормы.Работники.ТекущиеДанные);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ПОЛЯ "Начисления"

// Процедура - обработчик события "ПриВыводеСтроки" строки ТЧ
Процедура НачисленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);	
	
КонецПроцедуры

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
// или формой выбора в.р.
//
Процедура НачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления") Тогда
		Элемент.ТекущиеДанные.ВидРасчета = ВыбранноеЗначение;
		РаботаСДиалогами.ПриИзмененииВидаРасчета("Начисления",ВыбранноеЗначение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);
	КонецЕсли;
	
КонецПроцедуры // ТабличнаяЧастьОбработкаВыбора

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "Начисления"

Процедура НачисленияСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущиеДанные;
	ДанныеСтроки.ФизЛицо = Элемент.Значение.ФизЛицо;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физического лица -  
// подбирает подходящие должность и подразделение
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура НачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура НачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "Работники", Текст);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура НачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода вида расчета
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура НачисленияВидРасчетаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриИзмененииВидаРасчета("Начисления",Элемент.Значение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);	
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода вида расчета
//
Процедура НачисленияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыПоискаПоСтроке.ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(Текст, "УправленческиеНачисления", "Не (Ссылка В(&СпВидовРасчета))", Новый Структура("СпВидовРасчета", мСписокНедоступныхРасчетов));
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ПОЛЯ "Взыскания"

// Процедура - обработчик события "НачалоВыбора" поля ввода физического лица -  
// подбирает подходящие должность и подразделение
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура ВзысканияФизлицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура ВзысканияФизлицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элемент.Значение = ВыбранноеЗначение.Физлицо;
	
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" строки ТЧ
Процедура ВзысканияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
// или формой выбора в.р.
//
Процедура ВзысканияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления") Тогда
		Элемент.ТекущиеДанные.ВидРасчета = ВыбранноеЗначение;		
		РаботаСДиалогами.ПриИзмененииВидаРасчета("Взыскания",ВыбранноеЗначение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "Взыскания"

// Процедура - обработчик события "ПриИзменении" поля ввода вида расчета
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура ВзысканияВидРасчетаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриИзмененииВидаРасчета("Взыскания",Элемент.Значение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);

КонецПроцедуры


// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ВзысканияФизлицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "Работники", Текст);

КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ВзысканияФизлицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение);

КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода вида расчета
//
Процедура ВзысканияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыПоискаПоСтроке.ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(Текст, "УправленческиеУдержания", "Не (Ссылка В(&СпВидовРасчета))", Новый Структура("СпВидовРасчета", мСписокНедоступныхРасчетов));
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСтрокаРаботникиУстановлена  = Ложь;
мСтрокаНачисленияУстановлена = Ложь;

мВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();

мСведенияОВидахРасчета = Новый Соответствие;

мСписокНедоступныхРасчетов = Новый СписокЗначений;
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерии);
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерииСдельно);

мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
мСинхронизируемыеТабличныеЧасти["Работники"]  = Ложь;
мСинхронизируемыеТабличныеЧасти["Начисления"] = Ложь;
мСинхронизируемыеТабличныеЧасти["Взыскания"] = Ложь;


