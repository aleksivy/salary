////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		Отказ = Истина;
		Предупреждение(НСтр("ru='Документ не используется в работе. Для изменения решения по кандидату используется справочник ""Заявки кандидатов""';uk='Документ не використовується в роботі. Для зміни рішення по кандидату використовується довідник ""Заявки кандидатів""'"),10);
		Возврат;
	КонецЕсли;
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Обработчик события "При открытии" Формы. 
// Устанавливает доступность интерфейсного объекта "ПолеВыбораРезультата".
// Заполняет список значений СписокДоступныхСостоянийВызывает. 
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		ОбщегоНазначения.УстановитьНомерДокумента(ЭтотОбъект);
		
	КонецЕсли;

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	СписокДоступныхСостояний = Новый СписокЗначений();
	СписокДоступныхСостояний.Добавить (Перечисления.СостоянияКандидатаНаРаботу.Отклонен);
	СписокДоступныхСостояний.Добавить (Перечисления.СостоянияКандидатаНаРаботу.ПринятКРассмотрению);
	СписокДоступныхСостояний.Добавить (Перечисления.СостоянияКандидатаНаРаботу.ВОбработке);
	СписокДоступныхСостояний.Добавить (Перечисления.СостоянияКандидатаНаРаботу.ПредложилиРаботу);
	СписокДоступныхСостояний.Добавить (Перечисления.СостоянияКандидатаНаРаботу.ВКороткомСпискеНаВакансию);
	СписокДоступныхСостояний.Добавить (Перечисления.СостоянияКандидатаНаРаботу.Отложен);	
	
	
	ЭлементыФормы.ПолеВыбораРезультата.СписокВыбора = СписокДоступныхСостояний;
	
	ЭлементыФормы.ПолеВыбораРезультата.Значение = РезультатСобеседования;
	
	СписокВыбора = ПроцедурыУправленияПерсоналом.ВыбратьИзКадровогоПланаПредприятия("Должность", Подразделение);
	ЭлементыФормы.Должность.КнопкаСпискаВыбора = СписокВыбора.Количество() > 0;
	
КонецПроцедуры  // ПриОткрытии()

// Обработчик события "ПриЗакрытии" Формы.
Процедура ПриЗакрытии()
	
Оповестить("ОбновитьФорму",ФизЛицо );

КонецПроцедуры

// Обработчик события "ПослеЗаписи" Формы.
Процедура ПослеЗаписи()

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// если открыть Менеджер контактов - оповестим о необходимости обновить список кандидатов
	Оповестить("ОбновитьСписокКандидатов");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ 

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Обработчик события "ПриИзменении" интерфейсного объекта "ФизЛицо".
//
Процедура ФизЛицоПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(ОсновнойМенеджер) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизЛицо",ФизЛицо);
		Запрос.УстановитьПараметр("Дата",Дата);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КандидатыНаРаботуСрезПоследних.ОсновнойМенеджер
		|ИЗ
		|	РегистрСведений.КандидатыНаРаботу.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК КандидатыНаРаботуСрезПоследних";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОсновнойМенеджер = Выборка.ОсновнойМенеджер;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Обработчик события "ПриИзменении" интерфейсного объекта "ПолеВыбораРезультата".
// Устанавливает результат собеседования.
//
Процедура ПолеВыбораРезультатаПриИзменении(Элемент)
	
	РезультатСобеседования = ЭлементыФормы.ПолеВыбораРезультата.Значение;
	
КонецПроцедуры // ПолеВыбораРезультатаПриИзменении(Элемент)

// Обработчик события "ПриИзменении" интерфейсного объекта "Подразделение"
//
Процедура ПодразделениеПриИзменении(Элемент)
	
	СписокВыбора = ПроцедурыУправленияПерсоналом.ВыбратьИзКадровогоПланаПредприятия("Должность", Подразделение);
	ЭлементыФормы.Должность.КнопкаСпискаВыбора = СписокВыбора.Количество() > 0;
	
КонецПроцедуры

// Обработчик события "НачалоВыбораИзСписка" интерфейсного объекта "Должность"
//
Процедура ДолжностьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = ПроцедурыУправленияПерсоналом.ВыбратьИзКадровогоПланаПредприятия("Должность", Подразделение);
	
	Элемент.ВысотаСпискаВыбора = Мин(10, СписокВыбора.Количество());
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

