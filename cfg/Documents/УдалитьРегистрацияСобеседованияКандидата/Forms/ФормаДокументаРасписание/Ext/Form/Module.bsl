////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;
Перем мДлинаСуток;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ
 
// Процедура построения графика собеседований.
//
// Параметры: 
//  Нет.	            
//
//
Процедура ПостроитьГрафикСобеседований()
	
	НазначенноеВремя = ВремяСобеседования;
	
	ПолеСобеседований.Очистить(); 	
     
	КоличествоИнтервалов = Перечисления.ИнтервалыВремени.Количество();
	
	Для индекс = 0 по КоличествоИнтервалов-1  цикл
		ПолеСобеседований.Добавить().Время = Перечисления.ИнтервалыВремени.Получить(индекс);
	КонецЦикла;
	
	Запрос = новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР КОГДА (НазначенныеСобеседования.ИнтервалВремени) ЕСТЬ NULL  ТОГДА &ВремяПоУмолчанию ИНАЧЕ НазначенныеСобеседования.ИнтервалВремени КОНЕЦ КАК ИнтервалВремени,
		|	НазначенныеСобеседования.ФизЛицо.Наименование КАК ФизЛицо
		|ИЗ
		|	РегистрСведений.НазначенныеСобеседования КАК НазначенныеСобеседования
		|
		|ГДЕ
		|	НазначенныеСобеседования.Дата = &ДатаСобеседования");
	
	Запрос.УстановитьПараметр("ДатаСобеседования",ДатаСобеседования);
	Запрос.УстановитьПараметр("ВремяПоУмолчанию",Перечисления.ИнтервалыВремени.Интервал1);
	
	ТабличноеПоле1 = запрос.Выполнить().Выгрузить();
		
	Для каждого СтрокаЗапроса Из ТабличноеПоле1 Цикл
		
		Структура = новый Структура;
		Структура.Вставить("Время",СтрокаЗапроса.ИнтервалВремени);
		СтрокаВТаблице = ПолеСобеседований.НайтиСтроки(структура); 
		Если СтрокаВТаблице.Количество()=0 тогда 
			стр = ПолеСобеседований[0]
		Иначе
			стр = СтрокаВТаблице[0];
		КонецЕсли;
		
		стр.Количество = стр.Количество + 1;
		
		Если НЕ ЗначениеЗаполнено(Стр.ФизЛица) Тогда 
			стр.ФизЛица = СтрокаЗапроса.ФизЛицо 
		Иначе
			стр.ФизЛица = Стр.ФизЛица + "; " + СтрокаЗапроса.ФизЛицо; 
		КонецЕсли;
						
	КонецЦикла;
	
    // Установить значение времени
	
	Для каждого	СтрокаВТаблице из ПолеСобеседований Цикл	
		Если  СтрокаВТаблице.Время = НазначенноеВремя тогда
			ЭлементыФормы.ПолеСобеседований.ТекущаяСтрока = СтрокаВТаблице;
		КонецЕсли;
	КонецЦикла;

 КонецПроцедуры // ПостроитьГрафиксобеседований()
  
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМ

// Обработчик события "При открытии" формы 
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		ОбщегоНазначения.УстановитьНомерДокумента(ЭтотОбъект);
		ДатаСобеседования = РабочаяДата;	
		
		// Преобразовать текущее время в интервал.
		Индекс = 0;
		Индекс = Число(Сред(ТекущаяДата(),12,2)) * 2;
  		Минут = Число(Сред(ТекущаяДата(),15,2));
		
		Если Минут > 15 Тогда 
			Индекс = Индекс + 1;
		КонецЕсли;
		
		Если Минут > 40 Тогда
			Индекс = Индекс + 1;
		КонецЕсли;

		Если Индекс > 47 тогда 
			Индекс = 0;
			ДатаСобеседования = ДатаСобеседования + мДлинаСуток;
		КонецЕсли;
		
		ВремяСобеседования = Перечисления.ИнтервалыВремени[Индекс];

	КонецЕсли;

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Построить график собеседований
	ПостроитьГрафикСобеседований();
		
КонецПроцедуры

// Обработчик события "ПослеЗаписи" формы 
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события "ПриЗакрытии" формы 
Процедура ПриЗакрытии()
	
Оповестить("ОбновитьФорму",ФизЛицо );
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Обработчик события Нажатие элемента формы "НазначитьВстречу".
// Открывает форму нового события.
//
Процедура ОсновныеДействияФормыНазначитьВстречу(Кнопка)
	
	Отказ = Ложь;

	Если Модифицированность() Тогда
		Если Вопрос(НСтр("ru='Для назначения события необходимо записать документ. Записать?';uk='Для призначення події необхідно записати документ. Записати?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да,) = КодВозвратаДиалога.Да Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;

	Если Отказ Тогда
		Возврат
	КонецЕсли;

	// откроем форму нового события
	ПолучитьДокументСобытие(Перечисления.ВидыСобытий.ЛичнаяВстреча).ПолучитьФорму("ФормаДокумента").Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы "НазначитьЗвонок".
// Открывает форму нового события.
//
Процедура ОсновныеДействияФормыНазначитьЗвонок(Кнопка)
	
	Отказ = Ложь;

	Если Модифицированность() Тогда
		Если Вопрос(НСтр("ru='Для назначения события необходимо записать документ. Записать?';uk='Для призначення події необхідно записати документ. Записати?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да,) = КодВозвратаДиалога.Да Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;

	Если Отказ Тогда
		Возврат
	КонецЕсли;

	// откроем форму нового события
	ПолучитьДокументСобытие(Перечисления.ВидыСобытий.ТелефонныйЗвонок).ПолучитьФорму("ФормаДокумента").Открыть();
	
КонецПроцедуры  // ОсновныеДействияФормыНазначитьЗвонок

// Обработчик события Нажатие элемента формы "НазначитьПисьмо".
// Открывает форму нового события.
//
Процедура ОсновныеДействияФормыНазначитьПисьмо(Кнопка)
	
	Отказ = Ложь;

	Если Модифицированность() Тогда
		Если Вопрос(НСтр("ru='Для назначения события необходимо записать документ. Записать?';uk='Для призначення події необхідно записати документ. Записати?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да,) = КодВозвратаДиалога.Да Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;

	Если Отказ Тогда
		Возврат
	КонецЕсли;

	// откроем форму нового события
	ПолучитьДокументСобытие(Перечисления.ВидыСобытий.ЭлектронноеПисьмо).ПолучитьФорму("ФормаДокумента").Открыть();
	
КонецПроцедуры  // ОсновныеДействияФормыНазначитьПисьмо

///////////////////////////////////////////////////////////////////////////////
// Панель графика собеседований

// Обработчик события Нажатие элемента формы "ДеньНазад".
// Уменьшает значение переменной "ДатаСобеседования" на один день
// и вызывает функцию "ПостроитьГрафиксобеседований()".
//
Процедура ДеньНазадНажатие(Элемент)
	
	 ДатаСобеседования = ДатаСобеседования - мДлинаСуток;
	 ПостроитьГрафиксобеседований()
	 	
КонецПроцедуры // ДеньНазадНажатие(Элемент)

// Обработчик события Нажатие элемента формы "ДеньВперед".
// Увеличивает значение переменной "ДатаСобеседования" на один день
// и вызывает функцию "ПостроитьГрафиксобеседований()".
//
Процедура ДеньВпередНажатие(Элемент)
	
	 ДатаСобеседования = ДатаСобеседования + мДлинаСуток;
	 ПостроитьГрафиксобеседований()
	
КонецПроцедуры // ДеньВпередНажатие(Элемент)

// Обработчик события Нажатие элемента формы "Сегодня".
// Устанавливает значение переменной "ДатаСобеседования" на текущую дату
// и вызывает функцию "ПостроитьГрафиксобеседований()".
//
Процедура СегодняНажатие(Элемент)
	
	 ДатаСобеседования = ТекущаяДата();
	 ПостроитьГрафиксобеседований()

КонецПроцедуры // СегодняНажатие(Элемент)

// Обработчик события Нажатие элемента формы "Завтра".
// Устанавливает значение переменной "ДатаСобеседования" на текущую дату 
// плюс один день и вызывает функцию "ПостроитьГрафиксобеседований()".
//
Процедура ЗавтраНажатие(Элемент)
	
	 ДатаСобеседования = ТекущаяДата() + мДлинаСуток;
	 ПостроитьГрафиксобеседований()
	
КонецПроцедуры // ЗавтраНажатие(Элемент)

// Обработчик события Нажатие элемента формы "МесяцНазад".
// Устанавливает значение переменной "ДатаСобеседования" на один месяц вперед
// и вызывает функцию "ПостроитьГрафиксобеседований()".
//
Процедура КоманднаяПанельМесяцНазад(Кнопка)
	
	 ДатаСобеседования = ДатаСобеседования - мДлинаСуток*30;
	 ПостроитьГрафиксобеседований()

	
КонецПроцедуры // КоманднаяПанельМесяцНазад(Кнопка)

// Обработчик события Нажатие элемента формы "МесяцНазад".
// Устанавливает значение переменной "ДатаСобеседования" на один месяц назад
// и вызывает функцию "ПостроитьГрафиксобеседований()".
//
Процедура КоманднаяПанельМесяцВперед(Кнопка)
	
	 ДатаСобеседования = ДатаСобеседования + мДлинаСуток*30;
	 ПостроитьГрафиксобеседований()
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ 

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события "ПриАктивизацииСтроки" интерфейсного объекта "ПолеСобеседований".
// Устанавливает переменную "ВремяСобеседования". 
// 
//
Процедура ПолеСобеседованийПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущаяСтрока = неопределено Тогда 
		Возврат 
	КонецЕсли;
	ВремяСобеседования = Элемент.ТекущаяСтрока.Время;

КонецПроцедуры // ПолеСобеседованийПриАктивизацииЯчейки(Элемент)

// Обработчик события "ПриИзменении" интерфейсного объекта "ДатаСобеседования".
// Вызывает процедуру "ПостроитьГрафиксобеседований()". 
// 
//
Процедура ДатаСобеседованияПриИзменении(Элемент)
	
	 ПостроитьГрафиксобеседований()
	 
 КонецПроцедуры // ДатаСобеседованияПриИзменении(Элемент)

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры
               
// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры





мДлинаСуток = 86400;

