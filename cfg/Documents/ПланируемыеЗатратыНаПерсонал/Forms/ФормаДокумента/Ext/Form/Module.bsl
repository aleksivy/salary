////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит текущий режим планирования затрат - для очистки табличного поля при изменении режима
Перем мТекущийРежимПланированияЗатрат;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПланируемыеЗатраты,ЭлементыФормы.КоманднаяПанельПланируемыеЗатраты);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

		РежимПланированияЗатрат = ВосстановитьЗначение("РежимПланированияЗатрат");
		Если РежимПланированияЗатрат.Пустая() Тогда
			РежимПланированияЗатрат = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоЦентрамОтветственности;
		КонецЕсли;
		
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		
		Если Не ЗначениеЗаполнено(ДатаПланирования) Тогда
			ДатаПланирования = ОбщегоНазначения.ПолучитьРабочуюДату();
		КонецЕсли;
		
		Если ВалютаДокумента.Пустая() Тогда
			ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
			
			ТекущийКурс = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДатаПланирования);
			КурсДокумента		= ТекущийКурс.Курс;
			КратностьДокумента	= ТекущийКурс.Кратность;
		КонецЕсли;
	Иначе 
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	// Заполним реквизит формы ПериодСтрока.
	Если Не Сценарий.Пустая() Тогда
		ПериодСтрока = ОбщегоНазначения.ПолучитьПериодСтрокой(ДатаПланирования, ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Сценарий.Периодичность));
	КонецЕсли;
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтатьяЗатрат");
	СтруктураКолонок.Вставить("Сумма");

	// Установить ограничение - изменять видимость колонок для табличной части ПланируемыеЗатраты
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ПланируемыеЗатраты.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента			= Дата;
	мТекущийРежимПланированияЗатрат	= РежимПланированияЗатрат;
	
	// Установить активный реквизит.
	//Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
	//	ТекущийЭлемент = ЭлементыФормы.ПланируемыеЗатраты;
	//КонецЕсли;
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначение("РежимПланированияЗатрат", РежимПланированияЗатрат);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если ПланируемыеЗатраты.Количество() > 0 Тогда
	
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будут очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Автозаполнение();
	
	Если ПланируемыеЗатраты.Количество() = 0 Тогда
		
		Сообщить(НСтр("ru='Не обнаружены данные для записи в табличную часть документа.';uk='Не виявлені дані для запису в табличну частину документа.'"), СтатусСообщения.Важное )
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыОчистить(Кнопка)
	
	Если ПланируемыеЗатраты.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?';uk='Таблична частина буде очищена. Продовжити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ПланируемыеЗатраты.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры


// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

Процедура РежимПоЦентрамОтветственностиПриИзменении(Элемент)
	
	Если мТекущийРежимПланированияЗатрат <> РежимПланированияЗатрат И ПланируемыеЗатраты.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Вы изменили режим планирования затрат. Очистить табличную часть?';uk='Ви змінили режим планування витрат. Очистити табличну частину?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПланируемыеЗатраты.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	мТекущийРежимПланированияЗатрат = РежимПланированияЗатрат;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода сценария планирования.
//
Процедура СценарийПриИзменении(Элемент)
	
	Если Не Элемент.Значение.Пустая() Тогда
		ДатаПланирования = ОбщегоНазначения.ДатаНачалаПериода(ОбщегоНазначения.ДобавитьИнтервал(ДатаПланирования, Сценарий.Периодичность, 0), Сценарий.Периодичность);
		ПериодСтрока = ОбщегоНазначения.ПолучитьПериодСтрокой(ДатаПланирования, ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Сценарий.Периодичность));
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ДатаПланированияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если Сценарий.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПланирования = ОбщегоНазначения.ДатаНачалаПериода(ОбщегоНазначения.ДобавитьИнтервал(ДатаПланирования, Сценарий.Периодичность, Направление), Сценарий.Периодичность);
	Элемент.Значение = Общегоназначения.ПолучитьПериодСтрокой(ДатаПланирования, ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Сценарий.Периодичность));
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ДатаПланированияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ДатаПланированияПриИзменении(Элемент)
	
	РаботаСДиалогами.ПериодПодобратьПоТексту(Элемент.Значение, Сценарий.Периодичность, ДатаПланирования);
	Элемент.Значение = ОбщегоНазначения.ПолучитьПериодСтрокой(ДатаПланирования, ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Сценарий.Периодичность));
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ДатаПланированияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Бюджетирование.ПериодНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка, ЭтаФорма, ДатаПланирования, Сценарий.Периодичность);
	
КонецПроцедуры

Процедура ДатаПланированияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ПериодАвтоПодборТекста(Текст, ТекстАвтоПодбора, Сценарий.Периодичность, СтандартнаяОбработка);

КонецПроцедуры

Процедура ДатаПланированияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ПериодОкончаниеВводаТекста(Текст, Значение, Сценарий.Периодичность, СтандартнаяОбработка, ДатаПланирования);
	
КонецПроцедуры

Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ТекущийКурс = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДатаПланирования);
	
	КурсДокумента		= ТекущийКурс.Курс;
	КратностьДокумента	= ТекущийКурс.Кратность;
	
	Если НЕ ЗначениеЗаполнено(КурсДокумента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='В документе нет данных о курсе валюты. Проверьте, что на период планирования у валюты установлен курс и перевыберите валюту!';uk='У документі немає даних про курс валюти. Перевірте, що на період планування у валюти встановлений курс і перевиберіть валюту!'"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КратностьДокумента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='В документе нет данных о кратности валюты. Проверьте, что на период планирования у валюты установлена кратность и перевыберите валюту!';uk='У документі немає даних про кратність валюти. Перевірте, що на період планування у валюти встановлена кратність та перевыберіть валюту!'"));
	КонецЕсли;
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
КонецПроцедуры

Процедура ПланируемыеЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Если РежимПланированияЗатрат = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
			Элемент.ТекущиеДанные.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Иначе
			Элемент.ТекущиеДанные.Подразделение = Справочники.Подразделения.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПланируемыеЗатратыПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если РежимПланированияЗатрат = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
		ФормаВыбора = Справочники.ПодразделенияОрганизаций.ПолучитьФормуВыбора(, Элемент, ЭтотОбъект);
		ФормаВыбора.Организация				= Организация;
		ФормаВыбора.НачальноеЗначениеВыбора	= Элемент.Значение;
		ФормаВыбора.Открыть();
		
	Иначе
		ФормаВыбора = Справочники.Подразделения.ПолучитьФормуВыбора(, Элемент, ЭтотОбъект);
		ФормаВыбора.НачальноеЗначениеВыбора	= Элемент.Значение;
		ФормаВыбора.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПланируемыеЗатратыПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если РежимПланированияЗатрат = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
		Элемент.Значение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	Иначе
		Элемент.Значение = Справочники.Подразделения.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ



