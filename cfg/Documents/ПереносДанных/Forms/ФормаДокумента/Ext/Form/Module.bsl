////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит доступлный список действий документа
Перем мСписокДействий;

// Механизм исправлений
Перем мДокументыИсправление;
Перем мДокументСторнирование;
Перем мСотрудникиИсправление;
Перем мМенюИсправление;
Перем мКнопкаИсправлениеТекущийСотрудник;
Перем мКнопкаИсправлениеВесьДокумент;
Перем мКнопкаИсправлениеСписокСотрудников;
Перем мКнопкаОтменаИсправление;
Перем мТекущийСотрудник;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура СортироватьНаборЗаписей(ТабличноеПолеНаборЗаписей, ИмяКолонки, Порядок = "Возр");
	
	Если ПустаяСтрока(ИмяКолонки) Тогда
		Возврат;
	КонецЕсли; 
	
	КопияНаборЗаписей = ТабличноеПолеНаборЗаписей.Значение.Выгрузить();
	КопияНаборЗаписей.Сортировать(ИмяКолонки + " " + Порядок);
	ТабличноеПолеНаборЗаписей.Значение.Загрузить(КопияНаборЗаписей);
	
КонецПроцедуры // СортироватьНаборЗаписей

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));

	СоответствиеТЧ = Новый Соответствие;
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура создает и настраивает табличные поля на страницах панели ПанельРегистровСведений
//
Процедура НастроитьЗакладкиПанелиРегистровСведений(Отказ)
	
	Если ТаблицаРегистровСведений.Количество() = 0 Тогда
		
		ЭлементыФормы.ПанельРегистровСведений.Страницы.Подсказка.Видимость = Истина;
		Сч = 0;
		Пока Сч < ЭлементыФормы.ПанельРегистровСведений.Страницы.Количество() Цикл
			Если ЭлементыФормы.ПанельРегистровСведений.Страницы[Сч].Имя<>"Подсказка" Тогда
				ЭлементыФормы.ПанельРегистровСведений.Страницы.Удалить(Сч);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		ЭлементыФормы.ПанельРегистровСведений.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
		
	Иначе
		// Добавим новые страницы
		ЭлементыФормы.ПанельРегистровСведений.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
		Для каждого СтрокаТаблицыРегистров Из ТаблицаРегистровСведений Цикл
			Найдена = Ложь;
			Для каждого СтраницаПанели Из ЭлементыФормы.ПанельРегистровСведений.Страницы Цикл
				Если СтраницаПанели.Имя = СтрокаТаблицыРегистров.Имя Тогда
					Найдена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			Если Найдена Тогда
				Продолжить;
			КонецЕсли; 
			
			СтраницаПанели = ЭлементыФормы.ПанельРегистровСведений.Страницы.Вставить(ТаблицаРегистровСведений.Индекс(СтрокаТаблицыРегистров), СтрокаТаблицыРегистров.Имя, СтрокаТаблицыРегистров.Представление);
			
			ЭлементыФормы.ПанельРегистровСведений.ТекущаяСтраница = СтраницаПанели;
			
			// Расположим на странице командную панель
			КоманднаяПанельРегистра = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), ("КоманднаяПанель" + СтрокаТаблицыРегистров.Имя), Истина, ЭлементыФормы.ПанельРегистровСведений);
			КоманднаяПанельРегистра.Верх = 6;
			КоманднаяПанельРегистра.Лево = 6;
			КоманднаяПанельРегистра.Ширина = ЭлементыФормы.ПанельРегистровСведений.Ширина - 12 - 2;
			КоманднаяПанельРегистра.Высота = 24;
			
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.ПанельРегистровСведений,ГраницаЭлементаУправления.Верх);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Низ,КоманднаяПанельРегистра,ГраницаЭлементаУправления.Верх);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ПанельРегистровСведений,ГраницаЭлементаУправления.Право);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.ПанельРегистровСведений,ГраницаЭлементаУправления.Лево);
			
			// Расположим на странице табличное поле
			ПолеРегистра = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), СтрокаТаблицыРегистров.Имя, Истина, ЭлементыФормы.ПанельРегистровСведений);
			ПолеРегистра.Данные = "ДокументОбъект.Движения." + СтрокаТаблицыРегистров.Имя;
			
			Если НЕ ЭтоНовый() и НЕ Модифицированность() Тогда
				Попытка
				
					ПолеРегистра.Значение.Прочитать();
				
				Исключение
					Предупреждение(НСтр("ru='Нарушение прав доступа';uk='Порушення прав доступу'"));
					Отказ = Истина;
					Возврат; 
				КонецПопытки; 
			КонецЕсли; 
			
			ПолеРегистра.Верх = 30;
			ПолеРегистра.Лево = 6;
			ПолеРегистра.Ширина = ЭлементыФормы.ПанельРегистровСведений.Ширина - 12 - 2;
			ПолеРегистра.Высота = ЭлементыФормы.ПанельРегистровСведений.Высота - 24 - 12 - 20;
			ПолеРегистра.ТолькоПросмотр = Ложь;
			ПолеРегистра.ИзменятьПорядокСтрок = Истина;
			ПолеРегистра.ИзменятьСоставСтрок = Истина;
			ПолеРегистра.РежимВыделения = РежимВыделенияТабличногоПоля.Множественный;
			
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.ПанельРегистровСведений,ГраницаЭлементаУправления.Верх);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Низ,ЭлементыФормы.ПанельРегистровСведений,ГраницаЭлементаУправления.Низ);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ПанельРегистровСведений,ГраницаЭлементаУправления.Право);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.ПанельРегистровСведений,ГраницаЭлементаУправления.Лево);
			
			ПолеРегистра.СоздатьКолонки();
			
			ПолеРегистра.Колонки.Регистратор.Видимость	= Ложь;
			ПолеРегистра.Колонки.НомерСтроки.Видимость	= Ложь;
			ПолеРегистра.Колонки.Активность.Видимость	= Ложь;
			
			Для Каждого Колонка Из ПолеРегистра.Колонки Цикл
				Если Найти(Колонка.Имя, "Удалить") = 1 Тогда
					Колонка.Видимость = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			КоманднаяПанельРегистра.ИсточникДействий = ПолеРегистра;
			КоманднаяПанельРегистра.АвтоЗаполнение = Истина;
			
			КоманднаяПанельРегистра.Кнопки.Добавить("Разделитель1" + СтрокаТаблицыРегистров.Имя);
			
			Кнопка = КоманднаяПанельРегистра.Кнопки.Добавить(СтрокаТаблицыРегистров.Имя + "СортироватьПоВозрастанию", ТипКнопкиКоманднойПанели.Действие, НСтр("ru='Сортировать по возрастанию';uk='Сортувати за зростанням'"), Новый Действие("СортироватьНаборЗаписейПоВозрастанию"));
			Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
			Кнопка.Картинка    = БиблиотекаКартинок.СортироватьСписокПоВозрастанию;
			Кнопка.Подсказка   = НСтр("ru='Упорядочить по возрастанию';uk='Упорядкувати по зростанню'");
			
			Кнопка = КоманднаяПанельРегистра.Кнопки.Добавить(СтрокаТаблицыРегистров.Имя + "СортироватьПоУбыванию", ТипКнопкиКоманднойПанели.Действие, НСтр("ru='Сортировать по убыванию';uk='Сортувати по убуванню'") , Новый Действие("СортироватьНаборЗаписейПоУбыванию"));
			Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
			Кнопка.Картинка    = БиблиотекаКартинок.СортироватьСписокПоУбыванию;
			Кнопка.Подсказка   = НСтр("ru='Упорядочить по убыванию';uk='Упорядкувати по спаданню'");  
			
			КоманднаяПанельРегистра.Кнопки.Добавить("Разделитель" + СтрокаТаблицыРегистров.Имя);
			
			Кнопка = КоманднаяПанельРегистра.Кнопки.Добавить(СтрокаТаблицыРегистров.Имя, ТипКнопкиКоманднойПанели.Действие, , Новый Действие("ПереключитьАктивность"));
			Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
			Кнопка.Картинка    = БиблиотекаКартинок.ПереключитьАктивность;
			Кнопка.Подсказка   = НСтр("ru='Переключить активность';uk='Перемкнути активність'");
			Кнопка.ИзменяетДанные  = Истина;
			
		КонецЦикла; 
		
		// Удалим лишние страницы
		Индекс = 0;
		Пока Индекс <= ЭлементыФормы.ПанельРегистровСведений.Страницы.Количество() - 2 Цикл
			
			СтраницаПанели = ЭлементыФормы.ПанельРегистровСведений.Страницы[Индекс];
			
			Если ТаблицаРегистровСведений.Найти(СтраницаПанели.Имя, "Имя") = Неопределено Тогда
				ЭлементыФормы.ПанельРегистровСведений.Страницы.Удалить(Индекс);
				Продолжить;
			КонецЕсли;
			
			Индекс = Индекс + 1;
		
		КонецЦикла; 
		
		ЭлементыФормы.ПанельРегистровСведений.Страницы.Подсказка.Видимость = Ложь;
		ЭлементыФормы.ПанельРегистровСведений.ТекущаяСтраница = ЭлементыФормы.ПанельРегистровСведений.Страницы[0];
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура создает и настраивает табличные поля на страницах панели ПанельРегистровНакопления
//
Процедура НастроитьЗакладкиПанелиРегистровНакопления(Отказ)

	Если ТаблицаРегистровНакопления.Количество() = 0 Тогда
		
		ЭлементыФормы.ПанельРегистровНакопления.Страницы.Подсказка.Видимость = Истина;
		Сч = 0;
		Пока Сч < ЭлементыФормы.ПанельРегистровНакопления.Страницы.Количество() Цикл
			Если ЭлементыФормы.ПанельРегистровНакопления.Страницы[Сч].Имя<>"Подсказка" Тогда
				ЭлементыФормы.ПанельРегистровНакопления.Страницы.Удалить(Сч);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		ЭлементыФормы.ПанельРегистровНакопления.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
		
	Иначе
		// Добавим новые страницы
		ЭлементыФормы.ПанельРегистровНакопления.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
		Для каждого СтрокаТаблицыРегистров Из ТаблицаРегистровНакопления Цикл
			Найдена = Ложь;
			Для каждого СтраницаПанели Из ЭлементыФормы.ПанельРегистровНакопления.Страницы Цикл
				Если СтраницаПанели.Имя = СтрокаТаблицыРегистров.Имя Тогда
					Найдена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			Если Найдена Тогда
				Продолжить;
			КонецЕсли; 
			
			СтраницаПанели = ЭлементыФормы.ПанельРегистровНакопления.Страницы.Вставить(ТаблицаРегистровНакопления.Индекс(СтрокаТаблицыРегистров), СтрокаТаблицыРегистров.Имя, СтрокаТаблицыРегистров.Представление);
			
			ЭлементыФормы.ПанельРегистровНакопления.ТекущаяСтраница = СтраницаПанели;
			
			// Расположим на странице командную панель
			КоманднаяПанельРегистра = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), ("КоманднаяПанель" + СтрокаТаблицыРегистров.Имя), Истина, ЭлементыФормы.ПанельРегистровНакопления);
			КоманднаяПанельРегистра.Верх = 6;
			КоманднаяПанельРегистра.Лево = 6;
			КоманднаяПанельРегистра.Ширина = ЭлементыФормы.ПанельРегистровНакопления.Ширина - 12 - 2;
			КоманднаяПанельРегистра.Высота = 24;
			
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.ПанельРегистровНакопления,ГраницаЭлементаУправления.Верх);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Низ,КоманднаяПанельРегистра,ГраницаЭлементаУправления.Верх);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ПанельРегистровНакопления,ГраницаЭлементаУправления.Право);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.ПанельРегистровНакопления,ГраницаЭлементаУправления.Лево);
			
			// Расположим на странице табличное поле
			ПолеРегистра = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), СтрокаТаблицыРегистров.Имя, Истина, ЭлементыФормы.ПанельРегистровНакопления);
			ПолеРегистра.Данные = "ДокументОбъект.Движения." + СтрокаТаблицыРегистров.Имя;
			
			Если НЕ ЭтоНовый() и НЕ Модифицированность() Тогда
				Попытка
				
					ПолеРегистра.Значение.Прочитать();
				
				Исключение
					Предупреждение(НСтр("ru='Нарушение прав доступа';uk='Порушення прав доступу'"));
					Отказ = Истина;
					Возврат; 
				КонецПопытки; 
			КонецЕсли; 
			
			ПолеРегистра.Верх = 30;
			ПолеРегистра.Лево = 6;
			ПолеРегистра.Ширина = ЭлементыФормы.ПанельРегистровНакопления.Ширина - 12 - 2;
			ПолеРегистра.Высота = ЭлементыФормы.ПанельРегистровНакопления.Высота - 24 - 12 - 20;
			ПолеРегистра.ТолькоПросмотр = Ложь;
			ПолеРегистра.ИзменятьПорядокСтрок = Истина;
			ПолеРегистра.ИзменятьСоставСтрок = Истина;
			ПолеРегистра.РежимВыделения = РежимВыделенияТабличногоПоля.Множественный;
			
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.ПанельРегистровНакопления,ГраницаЭлементаУправления.Верх);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Низ,ЭлементыФормы.ПанельРегистровНакопления,ГраницаЭлементаУправления.Низ);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ПанельРегистровНакопления,ГраницаЭлементаУправления.Право);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.ПанельРегистровНакопления,ГраницаЭлементаУправления.Лево);
			
			ПолеРегистра.СоздатьКолонки();
			
			Если Метаданные.РегистрыНакопления[СтрокаТаблицыРегистров.Имя].ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				КолонкаВидДвижения = ПолеРегистра.Колонки.Вставить(1, НСтр("ru='Вид движения';uk='Вид руху'"));
				КолонкаВидДвижения.Имя = "ВидДвиженияРегистраНакопления";
				КолонкаВидДвижения.УстановитьЭлементУправления(Тип("ПолеВвода"));
				КолонкаВидДвижения.Данные = "ВидДвижения";
				КолонкаВидДвижения.ЭлементУправления.КнопкаВыбора = Истина;
				КолонкаВидДвижения.ЭлементУправления.ВыбиратьТип = Ложь;
			КонецЕсли; 
			
			ПолеРегистра.Колонки.Регистратор.Видимость	= Ложь;
			ПолеРегистра.Колонки.НомерСтроки.Видимость	= Ложь;
			ПолеРегистра.Колонки.Активность.Видимость	= Ложь;
			
			Для Каждого Колонка Из ПолеРегистра.Колонки Цикл
				Если Найти(Колонка.Имя, "Удалить") = 1 Тогда
					Колонка.Видимость = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			КоманднаяПанельРегистра.ИсточникДействий = ПолеРегистра;
			КоманднаяПанельРегистра.АвтоЗаполнение = Истина;
			
			КоманднаяПанельРегистра.Кнопки.Добавить("Разделитель1" + СтрокаТаблицыРегистров.Имя);
			
			Кнопка = КоманднаяПанельРегистра.Кнопки.Добавить(СтрокаТаблицыРегистров.Имя + "СортироватьПоВозрастанию", ТипКнопкиКоманднойПанели.Действие, НСтр("ru='Сортировать по возрастанию';uk='Сортувати за зростанням'"), Новый Действие("СортироватьНаборЗаписейПоВозрастанию"));
			Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
			Кнопка.Картинка    = БиблиотекаКартинок.СортироватьСписокПоВозрастанию;
			Кнопка.Подсказка   = НСтр("ru='Упорядочить по возрастанию';uk='Упорядкувати по зростанню'");
			
			Кнопка = КоманднаяПанельРегистра.Кнопки.Добавить(СтрокаТаблицыРегистров.Имя + "СортироватьПоУбыванию", ТипКнопкиКоманднойПанели.Действие, НСтр("ru='Сортировать по убыванию';uk='Сортувати по убуванню'") , Новый Действие("СортироватьНаборЗаписейПоУбыванию"));
			Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
			Кнопка.Картинка    = БиблиотекаКартинок.СортироватьСписокПоУбыванию;
			Кнопка.Подсказка   = НСтр("ru='Упорядочить по убыванию';uk='Упорядкувати по спаданню'");  
			
			КоманднаяПанельРегистра.Кнопки.Добавить("Разделитель" + СтрокаТаблицыРегистров.Имя);
			
			Кнопка = КоманднаяПанельРегистра.Кнопки.Добавить(СтрокаТаблицыРегистров.Имя, ТипКнопкиКоманднойПанели.Действие, , Новый Действие("ПереключитьАктивность"));
			Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
			Кнопка.Картинка    = БиблиотекаКартинок.ПереключитьАктивность;
			Кнопка.Подсказка   = НСтр("ru='Переключить активность';uk='Перемкнути активність'");
			Кнопка.ИзменяетДанные  = Истина;
			
			
		КонецЦикла; 
		
		// Удалим лишние страницы
		Индекс = 0;
		Пока Индекс <= ЭлементыФормы.ПанельРегистровНакопления.Страницы.Количество() - 2 Цикл
			
			СтраницаПанели = ЭлементыФормы.ПанельРегистровНакопления.Страницы[Индекс];
			
			Если ТаблицаРегистровНакопления.Найти(СтраницаПанели.Имя, "Имя") = Неопределено Тогда
				ЭлементыФормы.ПанельРегистровНакопления.Страницы.Удалить(Индекс);
				Продолжить;
			КонецЕсли;
			
			Индекс = Индекс + 1;
		
		КонецЦикла; 
		
		ЭлементыФормы.ПанельРегистровНакопления.Страницы.Подсказка.Видимость = Ложь;
		ЭлементыФормы.ПанельРегистровНакопления.ТекущаяСтраница = ЭлементыФормы.ПанельРегистровНакопления.Страницы[0];
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура создает и настраивает табличные поля на страницах панели ПанельРегистровРасчета
//
Процедура НастроитьЗакладкиПанелиРегистровРасчета(Отказ)
	
	Если ТаблицаРегистровРасчета.Количество() = 0 Тогда
		
		ЭлементыФормы.ПанельРегистровРасчета.Страницы.Подсказка.Видимость = Истина;
		Сч = 0;
		Пока Сч < ЭлементыФормы.ПанельРегистровРасчета.Страницы.Количество() Цикл
			Если ЭлементыФормы.ПанельРегистровРасчета.Страницы[Сч].Имя<>"Подсказка" Тогда
				ЭлементыФормы.ПанельРегистровРасчета.Страницы.Удалить(Сч);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		ЭлементыФормы.ПанельРегистровРасчета.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
		
	Иначе
		// Добавим новые страницы
		ЭлементыФормы.ПанельРегистровРасчета.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
		Для каждого СтрокаТаблицыРегистров Из ТаблицаРегистровРасчета Цикл
			Найдена = Ложь;
			Для каждого СтраницаПанели Из ЭлементыФормы.ПанельРегистровРасчета.Страницы Цикл
				Если СтраницаПанели.Имя = СтрокаТаблицыРегистров.Имя Тогда
					Найдена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			Если Найдена Тогда
				Продолжить;
			КонецЕсли; 
			
			СтраницаПанели = ЭлементыФормы.ПанельРегистровРасчета.Страницы.Вставить(ТаблицаРегистровРасчета.Индекс(СтрокаТаблицыРегистров), СтрокаТаблицыРегистров.Имя, СтрокаТаблицыРегистров.Представление);
			
			ЭлементыФормы.ПанельРегистровРасчета.ТекущаяСтраница = СтраницаПанели;
			
			// Расположим на странице командную панель
			КоманднаяПанельРегистра = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), ("КоманднаяПанель" + СтрокаТаблицыРегистров.Имя), Истина, ЭлементыФормы.ПанельРегистровРасчета);
			КоманднаяПанельРегистра.Верх = 6;
			КоманднаяПанельРегистра.Лево = 6;
			КоманднаяПанельРегистра.Ширина = ЭлементыФормы.ПанельРегистровРасчета.Ширина - 12 - 2;
			КоманднаяПанельРегистра.Высота = 24;
			
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.ПанельРегистровРасчета,ГраницаЭлементаУправления.Верх);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Низ,КоманднаяПанельРегистра,ГраницаЭлементаУправления.Верх);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ПанельРегистровРасчета,ГраницаЭлементаУправления.Право);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.ПанельРегистровРасчета,ГраницаЭлементаУправления.Лево);
			
			// Расположим на странице табличное поле
			ПолеРегистра = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), СтрокаТаблицыРегистров.Имя, Истина, ЭлементыФормы.ПанельРегистровРасчета);
			ПолеРегистра.Данные = "ДокументОбъект.Движения." + СтрокаТаблицыРегистров.Имя;
			
			Если НЕ ЭтоНовый() и НЕ Модифицированность() Тогда
				Попытка
				
					ПолеРегистра.Значение.Прочитать();
				
				Исключение
					Предупреждение(НСтр("ru='Нарушение прав доступа';uk='Порушення прав доступу'"));
					Отказ = Истина;
					Возврат; 
				КонецПопытки; 
			КонецЕсли; 
			
			ПолеРегистра.УстановитьДействие("ПриАктивизацииСтроки", Новый Действие("РегистрРасчетаПриАктивизацииСтроки"));
			ПолеРегистра.УстановитьДействие("ПриПолученииДанных", Новый Действие("РегистрРасчетаПриПолученииДанных"));
			
			ПолеРегистра.Верх = 30;
			ПолеРегистра.Лево = 6;
			ПолеРегистра.Ширина = ЭлементыФормы.ПанельРегистровРасчета.Ширина - 12 - 2;
			ПолеРегистра.Высота = ЭлементыФормы.ПанельРегистровРасчета.Высота - 24 - 12 - 20;
			ПолеРегистра.ТолькоПросмотр = Ложь;
			ПолеРегистра.ИзменятьПорядокСтрок = Истина;
			ПолеРегистра.ИзменятьСоставСтрок = Истина;
			ПолеРегистра.РежимВыделения = РежимВыделенияТабличногоПоля.Множественный;
			
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.ПанельРегистровРасчета,ГраницаЭлементаУправления.Верх);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Низ,ЭлементыФормы.ПанельРегистровРасчета,ГраницаЭлементаУправления.Низ);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ПанельРегистровРасчета,ГраницаЭлементаУправления.Право);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.ПанельРегистровРасчета,ГраницаЭлементаУправления.Лево);
			
			ПолеРегистра.СоздатьКолонки();
			
			ПолеРегистра.Колонки.Регистратор.Видимость	= Ложь;
			ПолеРегистра.Колонки.НомерСтроки.Видимость	= Ложь;
			ПолеРегистра.Колонки.Активность.Видимость	= Ложь;
			
			Для Каждого Колонка Из ПолеРегистра.Колонки Цикл
				Если Найти(Колонка.Имя, "Удалить") = 1 Тогда
					Колонка.Видимость = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			КоманднаяПанельРегистра.ИсточникДействий = ПолеРегистра;
			КоманднаяПанельРегистра.АвтоЗаполнение = Истина;
			
			КоманднаяПанельРегистра.Кнопки.Добавить("Разделитель1" + СтрокаТаблицыРегистров.Имя);
			
			Кнопка = КоманднаяПанельРегистра.Кнопки.Добавить(СтрокаТаблицыРегистров.Имя + "СортироватьПоВозрастанию", ТипКнопкиКоманднойПанели.Действие, НСтр("ru='Сортировать по возрастанию';uk='Сортувати за зростанням'"), Новый Действие("СортироватьНаборЗаписейПоВозрастанию"));
			Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
			Кнопка.Картинка    = БиблиотекаКартинок.СортироватьСписокПоВозрастанию;
			Кнопка.Подсказка   = НСтр("ru='Упорядочить по возрастанию';uk='Упорядкувати по зростанню'");
			
			Кнопка = КоманднаяПанельРегистра.Кнопки.Добавить(СтрокаТаблицыРегистров.Имя + "СортироватьПоУбыванию", ТипКнопкиКоманднойПанели.Действие, НСтр("ru='Сортировать по убыванию';uk='Сортувати по убуванню'") , Новый Действие("СортироватьНаборЗаписейПоУбыванию"));
			Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
			Кнопка.Картинка    = БиблиотекаКартинок.СортироватьСписокПоУбыванию;
			Кнопка.Подсказка   = НСтр("ru='Упорядочить по убыванию';uk='Упорядкувати по спаданню'");  
			
			КоманднаяПанельРегистра.Кнопки.Добавить("Разделитель" + СтрокаТаблицыРегистров.Имя);
			
			Кнопка = КоманднаяПанельРегистра.Кнопки.Добавить(СтрокаТаблицыРегистров.Имя, ТипКнопкиКоманднойПанели.Действие, , Новый Действие("ПереключитьАктивность"));
			Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
			Кнопка.Картинка    = БиблиотекаКартинок.ПереключитьАктивность;
			Кнопка.Подсказка   = НСтр("ru='Переключить активность';uk='Перемкнути активність'");
			Кнопка.ИзменяетДанные  = Истина;
			
		КонецЦикла; 
		
		// Удалим лишние страницы
		Индекс = 0;
		Пока Индекс <= ЭлементыФормы.ПанельРегистровРасчета.Страницы.Количество() - 2 Цикл
			
			СтраницаПанели = ЭлементыФормы.ПанельРегистровРасчета.Страницы[Индекс];
			
			Если ТаблицаРегистровРасчета.Найти(СтраницаПанели.Имя, "Имя") = Неопределено Тогда
				ЭлементыФормы.ПанельРегистровРасчета.Страницы.Удалить(Индекс);
				Продолжить;
			КонецЕсли;
			
			Индекс = Индекс + 1;
		
		КонецЦикла; 
		
		ЭлементыФормы.ПанельРегистровРасчета.Страницы.Подсказка.Видимость = Ложь;
		ЭлементыФормы.ПанельРегистровРасчета.ТекущаяСтраница = ЭлементыФормы.ПанельРегистровРасчета.Страницы[0];
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура НастроитьЗакладкиПанелейРегистров(Отказ)
	
	НастроитьЗакладкиПанелиРегистровСведений(Отказ);
	НастроитьЗакладкиПанелиРегистровНакопления(Отказ);
	НастроитьЗакладкиПанелиРегистровРасчета(Отказ);
	
КонецПроцедуры // НастроитьЗакладкиПанелейРегистров() 

Процедура ПереключитьАктивность(Кнопка)

	ТекущаяАктивность = Ложь;
	Если ЭлементыФормы[Кнопка.Имя].Значение.Количество() > 0 Тогда
		ТекущаяАктивность = ЭлементыФормы[Кнопка.Имя].Значение[0].Активность;
	КонецЕсли;
	ЭлементыФормы[Кнопка.Имя].Значение.УстановитьАктивность(НЕ ТекущаяАктивность);

КонецПроцедуры

// Процедура заполняет список возможных действий табличной части Выполняемые действия
//
Процедура ОбновитьСписокДействий()
	
	СписокДействий = Новый СписокЗначений;
	СписокДействий.Добавить(НСтр("ru='Сторно движений документа';uk='Сторно рухів документа'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка,
	|	ВнешниеОбработкиПринадлежность.Ссылка.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта ССЫЛКА Документ.ПереносДанных
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокДействий.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
	мСписокДействий = СписокДействий;
	
КонецПроцедуры

// Пересчет валютной суммы в основную по курсу на указанную дату
//
Функция ПересчетСуммыПоКурсу(ВалютнаяСумма, Валюта, Дата) Экспорт

	Запись = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Валюта));
	Сумма  = ВалютнаяСумма * Запись.Курс;

	Если Запись.Кратность <> 0 Тогда
		Сумма = Сумма / ?(Запись.Кратность = 0, 1, Запись.Кратность);
	КонецЕсли;

	Возврат Сумма;

КонецФункции // ПересчетСуммыПоКурсу()

// Заполнение параметров формы настройки спсика регистров перед открытием
//
Процедура ИнициализацияФормыНастройки(ФормаНастройки,ИмяТекущейСтраницы = "")
	
	ФормаНастройки.СписокРегистровСведений.Очистить();
	ФормаНастройки.СписокРегистровНакопления.Очистить();
	ФормаНастройки.СписокРегистровРасчета.Очистить();
	
	Для каждого Набор Из Движения Цикл
		
		МетаданныеНабора = Набор.Метаданные();
		Если НЕ ПравоДоступа("Изменение", МетаданныеНабора) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Метаданные.РегистрыСведений.Содержит(МетаданныеНабора) Тогда
			НовыйЭлементСписка = ФормаНастройки.СписокРегистровСведений  .Добавить(МетаданныеНабора.Имя, МетаданныеНабора.Синоним);
			НовыйЭлементСписка.Картинка = БиблиотекаКартинок.РегистрСведений;
			Если ТаблицаРегистровСведений.Найти(МетаданныеНабора.Имя, "Имя") <> Неопределено Тогда
				НовыйЭлементСписка.Пометка = Истина;
			КонецЕсли;
			
		ИначеЕсли Метаданные.РегистрыНакопления.Содержит(МетаданныеНабора) Тогда
			НовыйЭлементСписка = ФормаНастройки.СписокРегистровНакопления.Добавить(МетаданныеНабора.Имя, МетаданныеНабора.Синоним);
			Если МетаданныеНабора.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				НовыйЭлементСписка.Картинка = БиблиотекаКартинок.РегистрНакопления_Остатки;
			Иначе
				НовыйЭлементСписка.Картинка = БиблиотекаКартинок.РегистрНакопления_Обороты;
			КонецЕсли;
			Если ТаблицаРегистровНакопления.Найти(МетаданныеНабора.Имя, "Имя") <> Неопределено Тогда
				НовыйЭлементСписка.Пометка = Истина;
			КонецЕсли; 
			
		ИначеЕсли Метаданные.РегистрыРасчета.Содержит(МетаданныеНабора) Тогда
			НовыйЭлементСписка = ФормаНастройки.СписокРегистровРасчета.Добавить(МетаданныеНабора.Имя, МетаданныеНабора.Синоним);
			НовыйЭлементСписка.Картинка = БиблиотекаКартинок.РегистрРасчета;
			Если ТаблицаРегистровРасчета.Найти(МетаданныеНабора.Имя, "Имя") <> Неопределено Тогда
				НовыйЭлементСписка.Пометка = Истина;
			КонецЕсли; 
			
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	ФормаНастройки.ТЗРегистровСведений		= ТаблицаРегистровСведений.Выгрузить();
	ФормаНастройки.ТЗРегистровНакопления	= ТаблицаРегистровНакопления.Выгрузить();
	ФормаНастройки.ТЗРегистровРасчета		= ТаблицаРегистровРасчета.Выгрузить();
	
	ФормаНастройки.ИмяТекущейСтраницы = ИмяТекущейСтраницы;
	
КонецПроцедуры

// Обработка результатов возвращаемых формой настройки списока регистров
//
Процедура ОбработкаНастройки(ФормаНастройки)
	
	//////////////////////
	// Регистры сведений
	//////////////////////
	
	// Сначала удалим те, у которых сняли флажки
	Индекс = 0;
	Пока Индекс <= ТаблицаРегистровСведений.Количество() - 1 Цикл
		
		СтрокаТаблицы = ТаблицаРегистровСведений[Индекс];
			
		ЭлементСписка = ФормаНастройки.СписокРегистровСведений.НайтиПоЗначению(СтрокаТаблицы.Имя);
		Если ЭлементСписка = Неопределено Тогда
			Движения[СтрокаТаблицы.Имя].Очистить();
			ТаблицаРегистровСведений.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли; 
		Если НЕ ЭлементСписка.Пометка Тогда
			Движения[СтрокаТаблицы.Имя].Очистить();
			ТаблицаРегистровСведений.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
			
		Индекс = Индекс + 1;
		
	КонецЦикла;
		
	// Теперь добавим новые
	Для каждого ЭлементСписка Из ФормаНастройки.СписокРегистровСведений Цикл
		
		Если НЕ ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
			
		Если ТаблицаРегистровСведений.Найти(ЭлементСписка.Значение, "Имя") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		НоваяСтрока = ТаблицаРегистровСведений.Добавить();
		НоваяСтрока.Имя = ЭлементСписка.Значение;
		НоваяСтрока.Представление = ЭлементСписка.Представление;
		
	КонецЦикла; 
		
	ТаблицаРегистровСведений.Сортировать("Имя ВОЗР");
	
	//////////////////////
	// Регистры накопления
	//////////////////////
	
	// Сначала удалим те, у которых сняли флажки
	Индекс = 0;
	Пока Индекс <= ТаблицаРегистровНакопления.Количество() - 1 Цикл
		
		СтрокаТаблицы = ТаблицаРегистровНакопления[Индекс];
			
		ЭлементСписка = ФормаНастройки.СписокРегистровНакопления.НайтиПоЗначению(СтрокаТаблицы.Имя);
		Если ЭлементСписка = Неопределено Тогда
			Движения[СтрокаТаблицы.Имя].Очистить();
			ТаблицаРегистровНакопления.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли; 
		Если НЕ ЭлементСписка.Пометка Тогда
			Движения[СтрокаТаблицы.Имя].Очистить();
			ТаблицаРегистровНакопления.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
			
		Индекс = Индекс + 1;
		
	КонецЦикла;
		
	// Теперь добавим новые
	Для каждого ЭлементСписка Из ФормаНастройки.СписокРегистровНакопления Цикл
		
		Если НЕ ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
			
		Если ТаблицаРегистровНакопления.Найти(ЭлементСписка.Значение, "Имя") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		НоваяСтрока = ТаблицаРегистровНакопления.Добавить();
		НоваяСтрока.Имя = ЭлементСписка.Значение;
		НоваяСтрока.Представление = ЭлементСписка.Представление;
		
	КонецЦикла; 
		
	ТаблицаРегистровНакопления.Сортировать("Имя ВОЗР");
	
	
	//////////////////////
	// Регистры расчета
	//////////////////////
	
	// Сначала удалим те, у которых сняли флажки
	Индекс = 0;
	Пока Индекс <= ТаблицаРегистровРасчета.Количество() - 1 Цикл
		
		СтрокаТаблицы = ТаблицаРегистровРасчета[Индекс];
			
		ЭлементСписка = ФормаНастройки.СписокРегистровРасчета.НайтиПоЗначению(СтрокаТаблицы.Имя);
		Если ЭлементСписка = Неопределено Тогда
			Движения[СтрокаТаблицы.Имя].Очистить();
			ТаблицаРегистровРасчета.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли; 
		Если НЕ ЭлементСписка.Пометка Тогда
			Движения[СтрокаТаблицы.Имя].Очистить();
			ТаблицаРегистровРасчета.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
			
		Индекс = Индекс + 1;
		
	КонецЦикла;
		
	// Теперь добавим новые
	Для каждого ЭлементСписка Из ФормаНастройки.СписокРегистровРасчета Цикл
		
		Если НЕ ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
			
		Если ТаблицаРегистровРасчета.Найти(ЭлементСписка.Значение, "Имя") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		НоваяСтрока = ТаблицаРегистровРасчета.Добавить();
		НоваяСтрока.Имя = ЭлементСписка.Значение;
		НоваяСтрока.Представление = ЭлементСписка.Представление;
		
	КонецЦикла; 
		
	ТаблицаРегистровРасчета.Сортировать("Имя ВОЗР");
	
	НастроитьЗакладкиПанелейРегистров(Ложь);
	
КонецПроцедуры

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
	
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

Процедура ПолучитьСотрудниковСИсправлениями()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка В(&Исправления)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеНачисления.Сотрудник
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК ДополнительныеНачисления
	|ГДЕ
	|	ДополнительныеНачисления.Ссылка В(&Исправления)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыНаВыполнениеРабот.Сотрудник
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК ДоговорыНаВыполнениеРабот
	|ГДЕ
	|	ДоговорыНаВыполнениеРабот.Ссылка В(&Исправления)";
	
	мСотрудникиИсправление = ПроведениеРасчетов.СформироватьСоответствиеСотрудниковСИсправлениями(ТекстЗапроса, мДокументыИсправление);
	
КонецПроцедуры

Процедура ОбновитьТекущегоСотрудника(Элемент)
	
	ТекущиеДанные	= Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ТекущийСотрудник = ТекущиеДанные.Сотрудник;
	Иначе
		ТекущийСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	// Установим имя и доступность кнопки ТекущийСотрудник механизма исправлений
	Если ЭлементыФормы.ДополнительныеДействия.Кнопки.Найти("Исправить") <> Неопределено И мТекущийСотрудник <> ТекущийСотрудник Тогда
		РаботаСДиалогами.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(ТекущийСотрудник),ТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник)
	КонецЕсли;
	
	мТекущийСотрудник = ТекущийСотрудник;
	
КонецПроцедуры

Процедура ОбновитьОписаниеСостоянияДокумента()

	// связанные документы
	ЭтоИсправление = Ложь;
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	Сторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	НеЗаполнен = Не ЗначениеЗаполнено(Организация);
	
	ОписаниеСостоянияДокумента = РаботаСДиалогами.ПолучитьОписаниеРасчетногоДокумента(Не НеЗаполнен, Ложь, Истина, Истина, ЭтоИсправление, ДокументИсправлен, Сторнирован, Ложь, Ложь); // поля структуры описания - ТекстСообщения и ВажностьСообщения
	РаботаСДиалогами.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

Процедура УстановитьКнопкиИсправленияДокумента(ДокументИсправлен = Неопределено, ИсправленВесьДокумент = Неопределено, ДокументСторнирован = Неопределено)
	
	Если ДокументИсправлен = Неопределено Тогда
		ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	КонецЕсли;
	Если ДокументСторнирован = Неопределено Тогда
		ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	КонецЕсли;
	
	Если ИсправленВесьДокумент = Неопределено Тогда
		ИсправленВесьДокумент = ДокументИсправлен;
		Если ИсправленВесьДокумент Тогда
			Для Каждого СтрокаРегистра Из ТаблицаРегистровРасчета Цикл
				Для Каждого СтрокаТЧ Из Движения[СтрокаРегистра.Имя] Цикл
					ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
					Если Не ИсправленВесьДокумент Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не ИсправленВесьДокумент Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументСторнирован
		Или ПериодРегистрации >= НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату())
		Или ТаблицаРегистровРасчета.Количество() = 0 Тогда
		ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
		
	Иначе
		Кнопки = ЭлементыФормы.ДополнительныеДействия.Кнопки;
		Если Кнопки.Количество() = 0 Тогда
			МенюИсправить = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Подменю);
			ЗаполнитьЗначенияСвойств(МенюИсправить, мМенюИсправление);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеТекущийСотрудник.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеТекущийСотрудник);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеВесьДокумент.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеВесьДокумент);
			МенюИсправить.Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеСписокСотрудников.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеСписокСотрудников);
		КонецЕсли;
		Кнопки.Исправить.Кнопки.ТекущийСотрудник.Доступность = Не ИсправленВесьДокумент;
		Кнопки.Исправить.Кнопки.ВесьДокумент.Доступность = Не ДокументИсправлен;
		Кнопки.Исправить.Кнопки.СписокСотрудников.Доступность = Не ИсправленВесьДокумент;
			
		Если Кнопки.Количество() = 1 И ДокументИсправлен Тогда
			Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаОтменаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаОтменаИсправление);
		ИначеЕсли Кнопки.Количество() > 1 И Не ДокументИсправлен Тогда
			Кнопки.Удалить(Кнопки.ОтменитьИсправление);
			Кнопки.Удалить(Кнопки.Разделитель);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Управляет видимостью элементов формы, зависящих от наличия перерассчитываемого документа
Процедура ОбновитьДоступностьЭлементовФормы()
	
	ЭтоИсправление = Ложь;
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	ИсправленВесьДокумент = ДокументИсправлен;
	Если ИсправленВесьДокумент Тогда
		Для Каждого СтрокаРегистра Из ТаблицаРегистровРасчета Цикл
			Для Каждого СтрокаТЧ Из Движения[СтрокаРегистра.Имя] Цикл
				ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
				Если Не ИсправленВесьДокумент Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ИсправленВесьДокумент Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДокументИсправлен Или ДокументСторнирован Тогда
		ТолькоПросмотр = Истина
	Иначе 
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);		
	КонецЕсли;
	
	ЭлементыФормы.Организация.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
	
	УстановитьКнопкиИсправленияДокумента(ДокументИсправлен, ИсправленВесьДокумент, ДокументСторнирован);
	
	ЭлементыФормы.ПанельОткрытьИсправление.Свертка = ?(ДокументИсправлен Или ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.НадписьОткрытьИсправление.Заголовок = ?(ДокументСторнирован,НСтр("ru='Открыть сторно-документ';uk='Відкрити сторно-документ'"),НСтр("ru='Открыть исправления';uk='Відкрити виправлення'"));
	
КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗапретОткрытияДокумента Тогда
		Отказ = истина;
		Возврат;
	КонецЕсли;
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	НастроитьЗакладкиПанелейРегистров(Отказ);
	
	Если Не ЭтоНовый() Тогда
	Иначе
		РаботаСДиалогами.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, НСтр("ru='Документ не заполнен';uk='Документ не заповнений'"), "СообщениеОПроблемах");
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
	Иначе
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	Если ТаблицаРегистровСведений.Количество()>0 Тогда
		ЭлементыФормы.ПанельРегистров.ТекущаяСтраница = ЭлементыФормы.ПанельРегистров.Страницы.РегистрыСведений;
		
	ИначеЕсли ТаблицаРегистровНакопления.Количество()>0 Тогда
		ЭлементыФормы.ПанельРегистров.ТекущаяСтраница = ЭлементыФормы.ПанельРегистров.Страницы.РегистрыНакопления;
		
	ИначеЕсли ТаблицаРегистровРасчета.Количество()>0 Тогда
		ЭлементыФормы.ПанельРегистров.ТекущаяСтраница = ЭлементыФормы.ПанельРегистров.Страницы.РегистрыРасчета;
		
	КонецЕсли;
	
	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	ОбновитьСписокДействий();
	
	УстановитьЗаголовкиОрганизацийВФорме();
	
	// Исправление документов
	мМенюИсправление					= ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить;
	мКнопкаИсправлениеТекущийСотрудник	= мМенюИсправление.Кнопки.ТекущийСотрудник;
	мКнопкаИсправлениеВесьДокумент		= мМенюИсправление.Кнопки.ВесьДокумент;
	мКнопкаИсправлениеСписокСотрудников	= мМенюИсправление.Кнопки.СписокСотрудников;
	мКнопкаОтменаИсправление			= ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление;
	ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	
	// Установим видимость в зависимости от наличия перерассчитываемого документа
	ОбновитьДоступностьЭлементовФормы();
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Если ТаблицаРегистровСведений.Количество()>0 Тогда
		ЭлементыФормы.ПанельРегистров.Страницы.РегистрыСведений.КартинкаЗаголовка = БиблиотекаКартинок.РегистрСведений;
	Иначе
		ЭлементыФормы.ПанельРегистров.Страницы.РегистрыСведений.КартинкаЗаголовка = Новый Картинка;
	КонецЕсли;
	
	Если ТаблицаРегистровНакопления.Количество()>0 Тогда
		ЭлементыФормы.ПанельРегистров.Страницы.РегистрыНакопления.КартинкаЗаголовка = БиблиотекаКартинок.РегистрНакопления;
	Иначе
		ЭлементыФормы.ПанельРегистров.Страницы.РегистрыНакопления.КартинкаЗаголовка = Новый Картинка;
	КонецЕсли;
	
	Если ТаблицаРегистровРасчета.Количество()>0 Тогда
		ЭлементыФормы.ПанельРегистров.Страницы.РегистрыРасчета.КартинкаЗаголовка = БиблиотекаКартинок.РегистрРасчета;
	Иначе
		ЭлементыФормы.ПанельРегистров.Страницы.РегистрыРасчета.КартинкаЗаголовка = Новый Картинка;
	КонецЕсли;
	
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
	
	Если Модифицированность Тогда
		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения?';uk='Дані були змінені. Зберегти зміни?'"), РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			//Запишем документ
			Попытка
				Отказ = Не ЗаписатьВФорме();
			Исключение
				Предупреждение(НСтр("ru='Операция не выполнена!';uk='Операція не виконана!'"));
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	ЭлементыФормы.ПанельОткрытьИсправление.Свертка = РежимСверткиЭлементаУправления.Нет;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьФорму" И Не ЭтоНовый() Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Команда = "ДоступностьИсправленногоДокумента" Тогда
					Если Параметр.Объект = Ссылка И мДокументыИсправление.Найти(Источник) = Неопределено Тогда 
						мДокументыИсправление.Добавить(Источник);
						ПолучитьСотрудниковСИсправлениями();
						ОбновитьДоступностьЭлементовФормы();
						РаботаСДиалогами.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(мТекущийСотрудник),мТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник);
					КонецЕсли;
				ИначеЕсли Команда = "ДоступностьОтмененногоДокумента" Тогда
					Если Параметр.Объект = Ссылка Тогда
						Если мДокументСторнирование <> Источник Тогда
							мДокументСторнирование = Источник;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
						НовыйДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
						Если мДокументСторнирование <> НовыйДокументСторнирование Тогда
							мДокументСторнирование = НовыйДокументСторнирование;
							Если Не ЗначениеЗаполнено(мДокументСторнирование) Тогда
								РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
							КонецЕсли;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					КонецЕсли;
				Иначе
				КонецЕсли;
			Иначе
			КонецЕсли;
			
		Иначе
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик события элемента ДействияФормы.Настройка.
// .
Процедура ДействияФормыНастройка(Кнопка)
	
	ФормаНастройки = ЭтотОбъект.ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	
	ИнициализацияФормыНастройки(ФормаНастройки);
	
	Если Не ФормаНастройки.ОткрытьМодально() = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработкаНастройки(ФормаНастройки);
	
	ОбновлениеОтображения();
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура ДополнительныеДействияТекущийСотрудник(Кнопка)
	
	Если Не ЗначениеЗаполнено(мТекущийСотрудник) Тогда
		Предупреждение(НСтр("ru='Не выбран сотрудник для исправления расчетов!';uk='Не обраний співробітник для виправлення розрахунків!'"));
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогами.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, мТекущийСотрудник);
	
КонецПроцедуры

Процедура ДополнительныеДействияВесьДокумент(Кнопка)
	
	РаботаСДиалогами.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДополнительныеДействияСписокСотрудников(Кнопка)
	
	Если Проведен Тогда
		
		ТекстВопроса = НСтр("ru='Для исправления необходимо записать документ. Продолжить?';uk='Для виправлення необхідно записати документ. Продовжити?'");
		Если Не РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ЭтотОбъект, ЭтаФорма, ТекстВопроса) Тогда
			Возврат;
		КонецЕсли;
		
		СписокСотрудников = Новый СписокЗначений;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НевыходыВОрганизацияхНачисления.Сотрудник,
		|	НевыходыВОрганизацияхНачисления.Сотрудник.Наименование КАК Наименование
		|ИЗ
		|	Документ.НевыходыВОрганизациях.Начисления КАК НевыходыВОрганизацияхНачисления
		|ГДЕ
		|	НевыходыВОрганизацияхНачисления.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		Запрос.УстановитьПараметр("Ссылка",Ссылка); 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если мСотрудникиИсправление[Выборка.Сотрудник] = Неопределено Тогда
				СписокСотрудников.Добавить(Выборка.Сотрудник,Выборка.Наименование)
			КонецЕсли;
		КонецЦикла;
		
		Форма = ПолучитьОбщуюФорму("ФормаВыбораСотрудников", ЭтаФорма, Ссылка);
		Форма.СписокСотрудников = СписокСотрудников;
		Форма.Заголовок = НСтр("ru='Сотрудники документа Невыходы №';uk='Співробітники документа Невиходи №'") + Номер + НСтр("ru=' от ';uk=' від '") + Формат(Дата,"ДФ=dd.MM.yyyy");
		Форма.Открыть();
		
	Иначе
		Предупреждение(НСтр("ru='Исправить можно только проведенный документ!';uk='Виправити можна лише проведений документ!'"))
	КонецЕсли;
	
КонецПроцедуры

// Процедура отмены документов-исправлений
//
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогами.ОтменитьИсправлениеДокумента(Ссылка);
	мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
	ПолучитьСотрудниковСИсправлениями();
	ОбновитьДоступностьЭлементовФормы();
	РаботаСДиалогами.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(мТекущийСотрудник),мТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник);
	Обновить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "Нажатие" гиперссылки НастройкаСоставаРегистровСведений
//
Процедура ГиперссылкаНастройкаСоставаРегистровСведенийНажатие(Элемент)
	
	ФормаНастройки = ЭтотОбъект.ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	
	ИнициализацияФормыНастройки(ФормаНастройки,"Сведений");
	
	Если Не ФормаНастройки.ОткрытьМодально() = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработкаНастройки(ФормаНастройки);
	
	ОбновлениеОтображения();
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" гиперссылки НастройкаСоставаРегистровНакопления
//
Процедура ГиперссылкаНастройкаСоставаРегистровНакопленияНажатие(Элемент)

	ФормаНастройки = ЭтотОбъект.ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	
	ИнициализацияФормыНастройки(ФормаНастройки,"Накопления");
	
	Если Не ФормаНастройки.ОткрытьМодально() = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработкаНастройки(ФормаНастройки);
	
	ОбновлениеОтображения();
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" гиперссылки НастройкаСоставаРегистровРасчета
//
Процедура ГиперссылкаНастройкаСоставаРегистровРасчетаНажатие(Элемент)
	
	ФормаНастройки = ЭтотОбъект.ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	
	ИнициализацияФормыНастройки(ФормаНастройки,"Расчета");
	
	Если Не ФормаНастройки.ОткрытьМодально() = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработкаНастройки(ФормаНастройки);
	
	ОбновлениеОтображения();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	УстановитьКнопкиИсправленияДокумента();
	
КонецПроцедуры // ПериодРегистрацииПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	УстановитьКнопкиИсправленияДокумента();
	
КонецПроцедуры // ПериодРегистрацииРегулирование()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодРегистрацииОчистка()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
	УстановитьКнопкиИсправленияДокумента();
	
КонецПроцедуры // ПериодРегистрацииНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииОкончаниеВводаТекста()

Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	Если ЗначениеЗаполнено(мДокументыИсправление) Тогда
		Форма = КритерииОтбора.ДокументыИсправления.ПолучитьФорму(, ЭтаФорма);
		Форма.ИсходныйДокумент = Ссылка;
		Форма.Открыть();
	ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
		мДокументСторнирование.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ РЕГИСТРОВ

// Процедура - обработчик нажатия на кнопку "СортироватьНаборЗаписейПоВозрастанию"
//
Процедура СортироватьНаборЗаписейПоВозрастанию(Кнопка)
	
	ТабличноеПолеНаборЗаписей = ЭлементыФормы[Лев(Кнопка.Имя, Найти(Кнопка.Имя, "СортироватьПоВозрастанию") - 1)];
	СортироватьНаборЗаписей(ТабличноеПолеНаборЗаписей, ТабличноеПолеНаборЗаписей.ТекущаяКолонка.Данные);
	
КонецПроцедуры // СортироватьНаборЗаписейПоВозрастанию

// Процедура - обработчик нажатия на кнопку "СортироватьНаборЗаписейПоУбыванию"
//
Процедура СортироватьНаборЗаписейПоУбыванию(Кнопка)

	ТабличноеПолеНаборЗаписей = ЭлементыФормы[Лев(Кнопка.Имя, Найти(Кнопка.Имя, "СортироватьПоУбыванию") - 1)];
	СортироватьНаборЗаписей(ТабличноеПолеНаборЗаписей, ТабличноеПолеНаборЗаписей.ТекущаяКолонка.Данные, "Убыв");
	
КонецПроцедуры // СортироватьНаборЗаписейПоУбыванию

// Процедура - обработчик события "ПриАктивизацииСтроки"
//
Процедура РегистрРасчетаПриАктивизацииСтроки(Элемент)
	
	ОбновитьТекущегоСотрудника(Элемент);
	
КонецПроцедуры // РегистрРасчетаПриАктивизацииСтроки()

Процедура РегистрРасчетаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		Если ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		КонецЕсли;
		
		Если мСотрудникиИсправление[ДанныеСтроки.Сотрудник] <> Неопределено Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
		КонецЕсли;
		
	КонецЦикла;	
	
	
КонецПроцедуры // РегистрРасчетаПриАктивизацииСтроки()

Процедура ПанельРегистровРасчетаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Страница = ЭлементыФормы.ПанельРегистровРасчета.Страницы[ТекущаяСтраница].Имя;
	Если Страница<>"Подсказка" Тогда
		Если ЭлементыФормы.Найти(Страница) <> Неопределено Тогда
			ОбновитьТекущегоСотрудника(ЭлементыФормы[Страница]);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДокументыИсправление = Новый Массив;
мСотрудникиИсправление = Новый Соответствие;
