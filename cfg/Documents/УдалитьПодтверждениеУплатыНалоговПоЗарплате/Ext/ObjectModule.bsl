
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

функция ПроверитьОбязательныеРеквизиты(Отказ)
	Для НомерСтроки=0 По Начисления.Количество()-1 Цикл
		Если Начисления[НомерСтроки].ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			Сообщить("Ошибка! Поле ""Работник"" не может быть пустым!", СтатусСообщения.Важное);
			Отказ = Истина;
			Прервать;
		ИначеЕсли Начисления[НомерСтроки].ВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовСРаботниками.ПустаяСсылка() Тогда
			Сообщить("Ошибка! Поле ""Вид взаиморасчетов"" не может быть пустым!", СтатусСообщения.Важное);
			Отказ = Истина;
			Прервать;
		ИначеЕсли Начисления[НомерСтроки].ПериодВзаиморасчетов = '00010101' Тогда
			Сообщить("Ошибка! Поле ""Период взаиморасчетов"" не может быть пустым!", СтатусСообщения.Важное);
			Отказ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для НомерСтроки=0 По Взносы.Количество()-1 Цикл
		Если Взносы[НомерСтроки].СтатьяНалоговойДекларации = Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка() Тогда
			Сообщить("Ошибка! Поле ""Статья налоговой декларации"" не может быть пустым!", СтатусСообщения.Важное);
			Отказ = Истина;
			Прервать;
		ИначеЕсли Взносы[НомерСтроки].ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			Сообщить("Ошибка! Поле ""Работник"" не может быть пустым!", СтатусСообщения.Важное);
			Отказ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецФункции
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА


// Заполнение ТЧ "РаботникиОрганизации"
//
Функция АвтозаполнениеРаботники() Экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамНачало" , ПериодРегистрации);
	Запрос.УстановитьПараметр("парамКонец" , КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамОрганизация" , Организация);
	Запрос.УстановитьПараметр("парамПользователь" , Ответственный);
 	// Проверим ответсвенного - является ли он расчетчиком вообще и для заданного 
 	// подразделения (если оно задано)
 
 	ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
 	ПустойОтветственный = Справочники.Пользователи.ПустаяСсылка();
	Если Ответственный <> ПустойОтветственный Тогда
		Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].РасчетЗарплатыОрганизацииПоОтветственным Тогда
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Расчетчики.ПодразделениеОрганизации
				|ИЗ
				|	РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало) КАК Расчетчики
				|
				|ГДЕ
				|	Расчетчики.Пользователь = &парамПользователь";
				Если Запрос.Выполнить().Пустой() Тогда
					Сообщить(НСтр("ru='Ответственный за этот документ не является расчетчиком ни одного из подразделений организации';uk='Відповідальний за цей документ не є розраховувачем жодного з підрозділів організації'"));
					Возврат  Ложь;
				КонецЕсли;
		КонецЕсли;
 	КонецЕсли;
	
	ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	ПустойОтветственный = Справочники.Пользователи.ПустаяСсылка();

    // Описание условий	
	Если Ответственный = ПустойОтветственный Тогда
		
		ПоВсемПодразделениямОрганизации = Истина;
		УсловиеНаПодразделение = "ПодразделениеОрганизации.Владелец = &парамОрганизация";
		
	Иначе
		
		Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].РасчетЗарплатыОрганизацииПоОтветственным Тогда
			ПоВсемПодразделениямОрганизации = Ложь;
			УсловиеНаПодразделение = "ПодразделениеОрганизации В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.ПодразделениеОрганизации ИЗ РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало) Расчетчики ГДЕ Расчетчики.Пользователь = &парамПользователь)";
		Иначе
			ПоВсемПодразделениямОрганизации = Истина;
			УсловиеНаПодразделение = "ПодразделениеОрганизации.Владелец = &парамОрганизация";
		КонецЕсли;
		
		
	КонецЕсли;
	
	// Текст запроса: срез работников на конец месяца
	ТекстЗапросаАвтозаполнениеРаботники = "
	|ВЫБРАТЬ
	|	Работники.Физлицо КАК Физлицо
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамКонец, Организация = &парамОрганизация) КАК Работники
	|		
	|ГДЕ 
	|	Работники.ЗанимаемыхСтавок > 0 
	|	"+?(ПоВсемПодразделениямОрганизации, "", "И Работники."+УсловиеНаПодразделение)+"
	|
	|// + все кто уволился
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ
	|	Работники.Физлицо КАК Физлицо
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамКонец, Организация = &парамОрганизация) КАК Работники
	|		               
	|ГДЕ НАЧАЛОПЕРИОДА( Работники.Период, МЕСЯЦ ) = &парамНачало
	|	И Работники.ЗанимаемыхСтавок = 0 
	|	И Работники.Регистратор ССЫЛКА Документ.УвольнениеИзОрганизаций 
	|	"+?(ПоВсемПодразделениямОрганизации, "", "И Работники."+УсловиеНаПодразделение)+"
	|
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорникиОрганизаций.Физлицо КАК Физлицо
	|ИЗ  РегистрСведений.ДоговорникиОрганизаций КАК ДоговорникиОрганизаций
	|	
	|ГДЕ ДоговорникиОрганизаций.ДатаОкончания >= &парамНачало
	|	И ДоговорникиОрганизаций.ДатаНачала <= &парамКонец
	|	И ДоговорникиОрганизаций.Организация = &парамОрганизация
	|	"+?(ПоВсемПодразделениямОрганизации, "", " И ДоговорникиОрганизаций."+УсловиеНаПодразделение)+"
	|		
	|";
	
	Запрос.Текст = ТекстЗапросаАвтозаполнениеРаботники;
	
    РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());

КонецФункции // АвтозаполнениеРаботники()

// Заполнение ТЧ "Начисления"
//
Процедура ЗаполнитьАнализПлатежиЗП() Экспорт
	
	ТекстЗапроса_Начислено_КВыплате = ЗаполнитьАнализПлатежиЗП_Начислено_КВыплате();
	ТекстЗапроса_Выплаты = ЗаполнитьАнализПлатежиЗП_Выплаты();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Взаиморасчеты.ПериодВзаиморасчетов		КАК ПериодВзаиморасчетов,
	|	Взаиморасчеты.Физлицо					КАК Физлицо,
	|	Взаиморасчеты.ВидВзаиморасчетов			КАК ВидВзаиморасчетов,
	|	
	|	Взаиморасчеты.Начислено    				КАК Начислено,
	|	Взаиморасчеты.КВыплате 					КАК КВыплате,
	|	Выплаты.СуммаВыплаты     				КАК Выплачено,
	|	Выплаты.СуммаМежрасчетная				КАК ВыплаченоМежрасчетная
	|
	|ИЗ	( " + ТекстЗапроса_Начислено_КВыплате + " ) КАК Взаиморасчеты
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ(  " + ТекстЗапроса_Выплаты + " ) КАК Выплаты
	| ПО   Выплаты.Физлицо				= Взаиморасчеты.Физлицо
	| И    Выплаты.ПериодВзаиморасчетов	= Взаиморасчеты.ПериодВзаиморасчетов
	| И    Выплаты.ВидВзаиморасчетов	= Взаиморасчеты.ВидВзаиморасчетов
	|	
	|";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	ВсеВыплаты = ПроведениеРасчетов.ПолучитьСписокВариантовВыплатЗарплаты();                
	Запрос.УстановитьПараметр("парамВсеВыплаты",		ВсеВыплаты );
	
	Граница = Дата;
	Запрос.УстановитьПараметр("парамГраница",		Граница );
	
	Запрос.УстановитьПараметр("парамРасход",		ВидДвиженияНакопления.Расход );
	Запрос.УстановитьПараметр("парамНачало",		ПериодРегистрации );
	Запрос.УстановитьПараметр("парамКонец", 		КонецМесяца( ПериодРегистрации) );
	Запрос.УстановитьПараметр("парамОрганизация", 	Организация );
	
	Запрос.УстановитьПараметр("парамВыплатаМежрасчетная", 	Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.ВыплатаМежрасчетная );
	
	Запрос.УстановитьПараметр("парамФизЛицо",	РаботникиОрганизации.ВыгрузитьКолонку("ФизЛицо"));
	//========================================================================================
	
	ВыборкаВыплат = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаВыплат.Следующий() Цикл
		
		КВыплате		=  ?( ВыборкаВыплат.КВыплате = NULL, 0, ВыборкаВыплат.КВыплате);
		Выплачено		=  ?( ВыборкаВыплат.Выплачено = NULL, 0, ВыборкаВыплат.Выплачено);
		Начислено		=  ?( ВыборкаВыплат.Начислено = NULL, 0, ВыборкаВыплат.Начислено);
		
		Если КВыплате = Выплачено Тогда
			НачисленоПоФактуВыплаты = Начислено; 
		Иначе	
			МежрасчетнаяВыплата		=  ?( ВыборкаВыплат.ВыплаченоМежрасчетная = NULL, 0, ВыборкаВыплат.ВыплаченоМежрасчетная);
			НачисленоПоФактуВыплаты	= МежрасчетнаяВыплата + ?(КВыплате = 0 , 0, Начислено * ( Выплачено - МежрасчетнаяВыплата ) / КВыплате); 
		КонецЕсли; 
		
	    НоваяСтрока = Начисления.Добавить();
		
		НоваяСтрока.Физлицо        			= ВыборкаВыплат.Физлицо;
		НоваяСтрока.ПериодВзаиморасчетов	= ВыборкаВыплат.ПериодВзаиморасчетов;
		НоваяСтрока.ВидВзаиморасчетов		= ВыборкаВыплат.ВидВзаиморасчетов;
		
		НоваяСтрока.Начислено    			= Начислено;
		НоваяСтрока.КВыплате 				= КВыплате;
		НоваяСтрока.Выплачено     			= Выплачено;
		НоваяСтрока.НачисленоПоФактуВыплаты = НачисленоПоФактуВыплаты;
		
	КонецЦикла; 
	
	
КонецПроцедуры // ЗаполнитьВсеПлатежиЗаПериод()

Функция		ЗаполнитьАнализПлатежиЗП_Начислено_КВыплате()
		                      
		ТекстЗапроса = "
		|	ВЫБРАТЬ
		|		Ост.ФизЛицо									КАК ФизЛицо,
		|		Ост.ВидВзаиморасчетов						КАК ВидВзаиморасчетов,
		|		Ост.ПериодВзаиморасчетов					КАК ПериодВзаиморасчетов,
		|		СУММА( Ост.КВыплате )		КАК КВыплате,
		|		СУММА( Ост.Начислено )	КАК Начислено
		|	                                         
		|	    // все, что начислено за текущий период взаиморасчетов как в ПериодеРегистрации так и в предыдущих периодах                                     
		|	ИЗ(	ВЫБРАТЬ
		|	        ОстаткиВзаиморасчетов.ФизЛицо						КАК ФизЛицо,
		|	        ОстаткиВзаиморасчетов.ВидВзаиморасчетов				КАК ВидВзаиморасчетов,
		|	        НАЧАЛОПЕРИОДА(ОстаткиВзаиморасчетов.ПериодВзаиморасчетов, МЕСЯЦ)			КАК ПериодВзаиморасчетов,
		|	        СУММА( ОстаткиВзаиморасчетов.СуммаВзаиморасчетовОстаток )	КАК КВыплате,
		|	        СУММА( ОстаткиВзаиморасчетов.СуммаНачисленийОстаток )		КАК Начислено
		|	                                         
		|		ИЗ РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки( &парамНачало, Организация = &парамОрганизация 
		|				И ФизЛицо в ( &парамФизЛицо ) 
		|				И ВидВзаиморасчетов в ( &парамЗарплата )) КАК ОстаткиВзаиморасчетов
		|	                                         
		|		СГРУППИРОВАТЬ ПО
		|	        ОстаткиВзаиморасчетов.ФизЛицо,
		|	        ОстаткиВзаиморасчетов.ВидВзаиморасчетов,
		|	        НАЧАЛОПЕРИОДА(ОстаткиВзаиморасчетов.ПериодВзаиморасчетов, МЕСЯЦ)
		|	    // все, что начислено за текущий период взаиморасчетов как в ПериодеРегистрации так и в предыдущих периодах                                     
		|	                                         
		|	                                         
		|	    // Обороты за текущий период                                     
		|	    ОБЪЕДИНИТЬ ВСЕ                                     
		|		ВЫБРАТЬ
		|	        ОстаткиВзаиморасчетов.ФизЛицо						КАК ФизЛицо,
		|	        ОстаткиВзаиморасчетов.ВидВзаиморасчетов				КАК ВидВзаиморасчетов,
		|	        НАЧАЛОПЕРИОДА(ОстаткиВзаиморасчетов.ПериодВзаиморасчетов, МЕСЯЦ)			КАК ПериодВзаиморасчетов,
		|	        СУММА( ВЫБОР КОГДА ОстаткиВзаиморасчетов.ВидДвижения <> &парамРасход 
		|	                     ТОГДА ОстаткиВзаиморасчетов.СуммаВзаиморасчетов                    
		|	                     ИНАЧЕ 0 КОНЕЦ                     
		|	               - ВЫБОР КОГДА ОстаткиВзаиморасчетов.ВидДвижения <> &парамРасход ИЛИ ОстаткиВзаиморасчетов.КодОперации в ( &парамвсеВыплаты )  
		|	                     ТОГДА 0                    
		|	                     ИНАЧЕ ОстаткиВзаиморасчетов.СуммаВзаиморасчетов КОНЕЦ                          
		|	                                      )	КАК КВыплате,   
		|	                                         
		|	        СУММА( ВЫБОР КОГДА ОстаткиВзаиморасчетов.ВидДвижения <> &парамРасход 		
		|	                     ТОГДА ОстаткиВзаиморасчетов.СуммаНачислений                    
		|	                     ИНАЧЕ 0 КОНЕЦ )	КАК Начислено                    
		|	                                         
		|		ИЗ РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ОстаткиВзаиморасчетов
		|	                                         
		|	    ГДЕ  ОстаткиВзаиморасчетов.Период >= &парамНачало
		|	    		И	ОстаткиВзаиморасчетов.Период <= КОНЕЦПЕРИОДА( &парамНачало, МЕСЯЦ )
		|	    		И	ОстаткиВзаиморасчетов.Организация = &парамОрганизация                                    
		|				И	ОстаткиВзаиморасчетов.ФизЛицо в ( &парамФизЛицо ) 
		|				И	ОстаткиВзаиморасчетов.ВидВзаиморасчетов в ( &парамЗарплата ) 
		|	                                         
		|		СГРУППИРОВАТЬ ПО
		|	        ОстаткиВзаиморасчетов.ФизЛицо,
		|	        ОстаткиВзаиморасчетов.ВидВзаиморасчетов,
		|	        НАЧАЛОПЕРИОДА(ОстаткиВзаиморасчетов.ПериодВзаиморасчетов, МЕСЯЦ)
		|	) КАК Ост                                         
		|	                                         
		|	СГРУППИРОВАТЬ ПО
		|		Ост.ФизЛицо,
		|		Ост.ВидВзаиморасчетов,
		|		Ост.ПериодВзаиморасчетов
		|"; 
		
		Возврат ТекстЗапроса;
		
	КонецФункции

Функция		ЗаполнитьАнализПлатежиЗП_Выплаты()
	
	ТекстЗапроса = "
	|	    // все, выплаты текущего периода                                     
	|		ВЫБРАТЬ
	|	        Начисления.ПериодВзаиморасчетов			КАК ПериодВзаиморасчетов,
	|	        Начисления.ФизЛицо						КАК ФизЛицо,
	|	        Начисления.ВидВзаиморасчетов			КАК ВидВзаиморасчетов,
	|	        СУММА( Начисления.СуммаВзаиморасчетов )	КАК СуммаВыплаты,
	|	        СУММА( ВЫБОР КОГДА	Начисления.КодОперации в ( &парамВыплатаМежрасчетная )	
	|	                     ТОГДА	Начисления.СуммаВзаиморасчетов              
	|	                     ИНАЧЕ	0                  
	|	                     КОНЕЦ	)                          КАК СуммаМежрасчетная
	|	                                         
	|		ИЗ РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК Начисления
	|	                                         
	|	    ГДЕ  НАЧАЛОПЕРИОДА( Начисления.ПериодВзаиморасчетов,МЕСЯЦ ) <= &парамНачало                                   
	|			И НАЧАЛОПЕРИОДА( Начисления.Период,МЕСЯЦ ) <= &парамГраница
	|	    	И Начисления.ВидДвижения = &парамРасход                                    
	|	    	И Начисления.Организация = &парамОрганизация                                    
	|			И Начисления.ФизЛицо в ( &парамФизЛицо )                                    
	|	    	И Начисления.КодОперации в ( &парамвсеВыплаты )                                    
	|	                                         
	|	    СГРУППИРОВАТЬ ПО                                     
	|	        Начисления.ПериодВзаиморасчетов,
	|	        Начисления.ФизЛицо,
	|	        Начисления.ВидВзаиморасчетов
	|"; 
	
	Возврат ТекстЗапроса;
	
КонецФункции


// Заполнение ТЧ "Взносы"
Процедура ЗаполнитьАнализПлатежиВзносов() Экспорт
	МассивПустых  = Новый Массив(3);
	МассивПустых[0] = Справочники.ФизическиеЛица.ПустаяСсылка();
	МассивПустых[1] = Справочники.Контрагенты.ПустаяСсылка();
	МассивПустых[2] = Неопределено;
	
	// то что касается сумм погашения налогов
	Запрос = Новый Запрос;
	
	масФизЛицо = Новый Массив;
	Для каждого СтрокаРаботники Из РаботникиОрганизации Цикл
		масФизЛицо.Добавить(СтрокаРаботники.ФизЛицо);
	КонецЦикла; 
	масФизЛицо.Добавить(Справочники.ФизическиеЛица.ПустаяСсылка());
	масФизЛицо.Добавить(Справочники.Контрагенты.ПустаяСсылка());
	масФизЛицо.Добавить(Неопределено);
	Запрос.УстановитьПараметр("парамФизЛицо", масФизЛицо);
	Запрос.УстановитьПараметр("парамМассивПустых", МассивПустых);
	
	Граница = Новый Граница(КонецМесяца(ПериодРегистрации), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("парамГраница", Граница  );  
	Запрос.УстановитьПараметр("парамОрганизация",  Организация );
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101") );
	ТекстЗапроса = "
	|ВЫБРАТЬ
	| Взносы.СтатьяНалоговойДекларации   КАК СтатьяНалоговойДекларации,
	| Взносы.НалоговыйПериод      КАК НалоговыйПериод,
	| Взносы.ФизЛицо        КАК ФизЛицо,
	|                                          
	| ВЫБОР КОГДА Взносы.ПериодДействия ЕСТЬ NULL ИЛИ Взносы.ПериодДействия = &ПустаяДата        
	|       ТОГДА &ПериодРегистрации                                  
	|       ИНАЧЕ Взносы.ПериодДействия                                  
	|       КОНЕЦ                                 КАК ПериодДействия,  
	|                                          
	|                                             
	| Взносы.БазаОстаток           КАК База,
	| Взносы.БазаВзносаОстаток         КАК БазаВзноса,
	| Взносы.РезультатОстаток         КАК Взнос,
	| -Взносы.НеподтвержденнаяСуммаОстаток  КАК НеподтвержденнаяСумма,
	| ВЫБОР КОГДА (Взносы.НеподтвержденнаяСуммаОстаток - Взносы.РезультатОстаток) > 0 
	|       ТОГДА Взносы.НеподтвержденнаяСуммаОстаток - Взносы.РезультатОстаток                                  
	|       ИНАЧЕ 0                                  
	|       КОНЕЦ                               КАК СвободнаяСумма     
	|                                          
	|ИЗ РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Остатки(&парамГраница, Организация = &парамОрганизация И ФизЛицо в (&парамФизЛицо) ) КАК Взносы
	|                                          
	|                                          
	|ИТОГИ 
	| СУММА( База ), 
	| СУММА( БазаВзноса ), 
	| СУММА( Взнос ), 
	| СУММА( НеподтвержденнаяСумма ), //-Взносы.НеподтвержденнаяСуммаОстаток),                                      
	| СУММА( СвободнаяСумма)     
	|ПО                                          
	| Взносы.СтатьяНалоговойДекларации,
	| Взносы.НалоговыйПериод,
	| Взносы.ФизЛицо
	|"; 
	
	Запрос.Текст = ТекстЗапроса;
	
	ПоГруппировкам = ОбходРезультатаЗапроса.ПоГруппировкам;  
	Прямой = ОбходРезультатаЗапроса.Прямой; 
	НеобходимыеДанные = Новый Структура;
	НеобходимыеДанные.Вставить("Организация", Организация);
	НеобходимыеДанные.Вставить("База", 0);
	НеобходимыеДанные.Вставить("БазаВзноса", 0);
	НеобходимыеДанные.Вставить("Взнос", 0);
	
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ПоГруппировкам);
	Пока ВыборкаИтоги.Следующий() Цикл
		
		// это суммы по конкретной статье налоговой декларации
		ИтогиБаза     = ?(ВыборкаИтоги.База = NULL,     0, ВыборкаИтоги.База);
		ИтогиБазаВзноса    = ?(ВыборкаИтоги.БазаВзноса = NULL,    0, ВыборкаИтоги.БазаВзноса);
		ИтогиВзнос     = ?(ВыборкаИтоги.Взнос = NULL,     0, ВыборкаИтоги.Взнос);
		ИтогиНеподтвержденнаяСумма = ?(ВыборкаИтоги.НеподтвержденнаяСумма = NULL, 0, ВыборкаИтоги.НеподтвержденнаяСумма);
		СвободнаяСумма    = ?(ВыборкаИтоги.СвободнаяСумма = NULL,   0, ВыборкаИтоги.СвободнаяСумма);
		
		Если ИтогиНеподтвержденнаяСумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИтогиВзнос <= ИтогиНеподтвержденнаяСумма Тогда
			
			// Просто закрываем все долги по физ лицам
			Выборка = ВыборкаИтоги.Выбрать(Прямой);
			Пока Выборка.Следующий() Цикл
				Если Выборка.ПериодДействия = NULL
					или Выборка.ПериодДействия = Дата('00010101') Тогда
					Продолжить;
				КонецЕсли;
				НеобходимыеДанные.База   = Выборка.База;
				НеобходимыеДанные.БазаВзноса = Выборка.БазаВзноса;
				НеобходимыеДанные.Взнос   = Выборка.Взнос;
				СформироватьСтроку_Взносы( Выборка, Взносы, НеобходимыеДанные);
			КонецЦикла;
			
			ИтогиНеподтвержденнаяСумма = ИтогиНеподтвержденнаяСумма - ИтогиВзнос;
			
		Иначе 
			
			// списываем пропорционально
			ПустаяДата = Дата('00010101');
			СписокПолныхПериодов = Новый СписокЗначений;
			// --1-- сначала пройдем по всем переплатам, а потом по суммам, которые не доплачены
			// просмотрим периоды, которые закроются целиком
			ВыборкаНалоговыйПериод = ВыборкаИтоги.Выбрать(ПоГруппировкам, "НалоговыйПериод");
			Пока ВыборкаНалоговыйПериод.Следующий() Цикл
				Если ВыборкаНалоговыйПериод.НалоговыйПериод = ПустаяДата Тогда
					Продолжить;   
				КонецЕсли; 
				
				НалоговыйПериодВзнос     = ?(ВыборкаНалоговыйПериод.Взнос = NULL,     0, ВыборкаНалоговыйПериод.Взнос);
				НалоговыйПериодНеподтвержденнаяСумма = ?(ВыборкаНалоговыйПериод.НеподтвержденнаяСумма = NULL, 0, ВыборкаНалоговыйПериод.НеподтвержденнаяСумма);
				
				Если НалоговыйПериодВзнос <= НалоговыйПериодНеподтвержденнаяСумма Тогда
					СписокПолныхПериодов.Добавить( ВыборкаНалоговыйПериод.НалоговыйПериод );
					СвободнаяСумма = СвободнаяСумма + (НалоговыйПериодНеподтвержденнаяСумма - НалоговыйПериодВзнос);
				ИначеЕсли НалоговыйПериодВзнос <= НалоговыйПериодНеподтвержденнаяСумма + СвободнаяСумма Тогда
					СвободнаяСумма = СвободнаяСумма - (НалоговыйПериодВзнос - НалоговыйПериодНеподтвержденнаяСумма);
					СписокПолныхПериодов.Добавить( ВыборкаНалоговыйПериод.НалоговыйПериод );
				КонецЕсли; 
			КонецЦикла;
			
			// только теперь формиркем движения
			// --1-- упрощенная схема
			// --2-- пропорционально перечисленной сумме
			ВыборкаНалоговыйПериод = ВыборкаИтоги.Выбрать(ПоГруппировкам, "НалоговыйПериод");
			Пока ВыборкаНалоговыйПериод.Следующий() Цикл
				////Если ВыборкаНалоговыйПериод.НалоговыйПериод = ПустаяДата Тогда
				//// Продолжить;   
				////КонецЕсли; 
				
				// --1-- упрощенная схема
				Если СписокПолныхПериодов.НайтиПоЗначению(ВыборкаНалоговыйПериод.НалоговыйПериод) <> Неопределено Тогда
					// упрощенная схема
					Выборка = ВыборкаНалоговыйПериод.Выбрать(Прямой);
					Пока Выборка.Следующий() Цикл
						Если Выборка.ПериодДействия = NULL
							или Выборка.ПериодДействия = Дата('00010101') Тогда
							Продолжить;
						КонецЕсли;
						НеобходимыеДанные.База   = Выборка.База;
						НеобходимыеДанные.БазаВзноса = Выборка.БазаВзноса;
						НеобходимыеДанные.Взнос   = Выборка.Взнос;
						СформироватьСтроку_Взносы( Выборка, Взносы, НеобходимыеДанные);
						
						ИтогиНеподтвержденнаяСумма = ИтогиНеподтвержденнаяСумма - Выборка.Взнос;
					КонецЦикла;
					
					// в отдельную табличную часть
					
					Продолжить;
				КонецЕсли;
				
				// --2-- пропорционально перечисленной сумме
				НалоговыйПериодБаза      = ?(ВыборкаНалоговыйПериод.База = NULL,      0, ВыборкаНалоговыйПериод.База);
				НалоговыйПериодБазаВзноса    = ?(ВыборкаНалоговыйПериод.БазаВзноса = NULL,    0, ВыборкаНалоговыйПериод.БазаВзноса);
				НалоговыйПериодВзнос     = ?(ВыборкаНалоговыйПериод.Взнос = NULL,     0, ВыборкаНалоговыйПериод.Взнос);
				НалоговыйПериодНеподтвержденнаяСумма = ИтогиНеподтвержденнаяСумма;// НалоговыйПериодНеподтвержденнаяСумма + СвободнаяСумма;
				СвободнаяСумма = 0;
				Коэф = ?(НалоговыйПериодВзнос = 0, 0, НалоговыйПериодНеподтвержденнаяСумма / НалоговыйПериодВзнос);
				
				ВыборкаФизЛицо = ВыборкаНалоговыйПериод.Выбрать(ПоГруппировкам, "ФизЛицо");
				Пока ВыборкаФизЛицо.Следующий() Цикл
					
					База  = ?(ВыборкаФизЛицо.База = NULL,   0, ВыборкаФизЛицо.База);
					БазаВзноса = ?(ВыборкаФизЛицо.БазаВзноса = NULL, 0, ВыборкаФизЛицо.БазаВзноса);
					Взнос  = ?(ВыборкаФизЛицо.Взнос = NULL,  0, ВыборкаФизЛицо.Взнос);
					ФизЛицоБаза   = Окр( Коэф * База, 2);
					ФизЛицоБазаВзноса = Окр( Коэф * БазаВзноса, 2);
					ФизЛицоВзнос  = Окр(Коэф * Взнос, 6);
					
					
					Выборка = ВыборкаФизЛицо.Выбрать(Прямой);
					Пока Выборка.Следующий() Цикл
						Если Выборка.ПериодДействия = NULL
							или Выборка.ПериодДействия = Дата('00010101') Тогда
							Продолжить;
						КонецЕсли;
						
						База  = ?(Выборка.База = NULL,  0, Выборка.База);
						БазаВзноса = ?(Выборка.БазаВзноса = NULL, 0, Выборка.БазаВзноса);
						Взнос  = ?(Выборка.Взнос = NULL,  0, Выборка.Взнос);
						НеобходимыеДанные.База   = Окр( Коэф * База, 2);
						НеобходимыеДанные.БазаВзноса = Окр( Коэф * БазаВзноса, 2);
						НеобходимыеДанные.Взнос   = Окр( Коэф * Взнос, 6);
						СформироватьСтроку_Взносы( Выборка, Взносы, НеобходимыеДанные );
						
						ФизЛицоБаза   = ФизЛицоБаза - НеобходимыеДанные.База;
						ФизЛицоБазаВзноса = ФизЛицоБазаВзноса - НеобходимыеДанные.БазаВзноса;
						ФизЛицоВзнос  = ФизЛицоВзнос - НеобходимыеДанные.Взнос;
						
						НалоговыйПериодНеподтвержденнаяСумма = НалоговыйПериодНеподтвержденнаяСумма - НеобходимыеДанные.Взнос;
					КонецЦикла;
					
					// необходимо закрыть копейки по работнику, что бы уменьшить погрешность
					Если ФизЛицоБаза <> 0 
						ИЛИ ФизЛицоБазаВзноса <> 0 
						ИЛИ ФизЛицоВзнос <> 0 
						Тогда
						Выборка = ВыборкаФизЛицо.Выбрать(Прямой);
						Пока Выборка.Следующий() Цикл
							
							Если Выборка.ПериодДействия = NULL
								или Выборка.ПериодДействия = Дата('00010101') Тогда
								Продолжить;
							КонецЕсли;
							
							КвоСтрок = Взносы.Количество();
							Если КвоСтрок > 0 Тогда
								Взносы[КвоСтрок-1].База   = Взносы[КвоСтрок-1].База  + ФизЛицоБаза;
								Взносы[КвоСтрок-1].БазаВзноса = Взносы[КвоСтрок-1].БазаВзноса + ФизЛицоБазаВзноса;
								Взносы[КвоСтрок-1].Взнос  = Взносы[КвоСтрок-1].Взнос  + ФизЛицоВзнос;
							КонецЕсли; 
							
							НалоговыйПериодНеподтвержденнаяСумма = НалоговыйПериодНеподтвержденнаяСумма - ФизЛицоВзнос;
							ИтогиНеподтвержденнаяСумма = НалоговыйПериодНеподтвержденнаяСумма;
							
							Прервать; //достаточно одной таблэткы
							
						КонецЦикла;
					КонецЕсли; 
					
				КонецЦикла; 
				
				// если осталась копейка закрываем на первого попавшегося работника
				Если НалоговыйПериодНеподтвержденнаяСумма <> 0 Тогда
					
					Выборка = ВыборкаНалоговыйПериод.Выбрать(Прямой);
					Пока Выборка.Следующий() Цикл
						
						Если Выборка.ПериодДействия = NULL
							или Выборка.ПериодДействия = Дата('00010101') Тогда
							Продолжить;
						КонецЕсли;
						
						КвоСтрок = Взносы.Количество();
						Если КвоСтрок > 0 Тогда
							Взносы[КвоСтрок-1].Взнос = Взносы[КвоСтрок-1].Взнос + НалоговыйПериодНеподтвержденнаяСумма;
						КонецЕсли; 
						
						НалоговыйПериодНеподтвержденнаяСумма = 0;
						ИтогиНеподтвержденнаяСумма = НалоговыйПериодНеподтвержденнаяСумма;
						Прервать; //достаточно одной таблэткы 
						
					КонецЦикла;
				КонецЕсли; 
				
				ИтогиНеподтвержденнаяСумма = НалоговыйПериодНеподтвержденнаяСумма;
			КонецЦикла; 
			
		КонецЕсли;
		
		СтрокаИтоги = ПлатежиПоВзносам.Добавить();     
		СтрокаИтоги.СтатьяНалоговойДекларации = ВыборкаИтоги.СтатьяНалоговойДекларации;
		СтрокаИтоги.ПеречисленныйВзнос   = ВыборкаИтоги.НеподтвержденнаяСумма;
		СтрокаИтоги.НеподтвержденнаяСумма  = ИтогиНеподтвержденнаяСумма;
		
	КонецЦикла;
	
	ЗаполнитьИтоги_ПлатежиПоВзносам();
	
КонецПроцедуры // ЗаполнитьВсеПлатежиЗаПериод()

	
Процедура	СформироватьСтроку_Взносы( Выборка, Взносы, НеобходимыеДанные);
	Если  	НеобходимыеДанные.База = 0
		И	НеобходимыеДанные.БазаВзноса = 0
		И	НеобходимыеДанные.Взнос = 0
	 Тогда
        Возврат;
	КонецЕсли;
	
	НоваяСтрока = Взносы.Добавить();
	
	НоваяСтрока.ФизЛицо						= Выборка.ФизЛицо;
	НоваяСтрока.НалоговыйПериод				= Выборка.НалоговыйПериод;
	НоваяСтрока.СтатьяНалоговойДекларации	= Выборка.СтатьяНалоговойДекларации;
	НоваяСтрока.ПериодДействия				= Выборка.ПериодДействия;
	
	НоваяСтрока.База		= НеобходимыеДанные.База;
	НоваяСтрока.БазаВзноса	= НеобходимыеДанные.БазаВзноса;
	НоваяСтрока.Взнос		= НеобходимыеДанные.Взнос;
	
КонецПроцедуры

	
// Заполнение ТЧ "НДФЛ"
Процедура ЗаполнитьАнализПлатежиНДФЛ() Экспорт
	
	МассивПустых  = Новый Массив(3);
	МассивПустых[0] = Справочники.ФизическиеЛица.ПустаяСсылка();
	МассивПустых[1] = Справочники.Контрагенты.ПустаяСсылка();
	МассивПустых[2] = Неопределено;
	
	// то что касается сумм погашения налогов
	Запрос = Новый Запрос;
	
	масФизЛицо = Новый Массив;
	Для каждого СтрокаРаботники Из РаботникиОрганизации Цикл
		масФизЛицо.Добавить(СтрокаРаботники.ФизЛицо);
	КонецЦикла; 
	//масФизЛицо.Добавить(Справочники.ФизическиеЛица.ПустаяСсылка());
	//масФизЛицо.Добавить(Справочники.Контрагенты.ПустаяСсылка());
	//масФизЛицо.Добавить(Неопределено);
	Запрос.УстановитьПараметр("парамФизЛицо",		масФизЛицо);
	Запрос.УстановитьПараметр("парамМассивПустых",	МассивПустых);
	
	Граница = Новый Граница(КонецМесяца(ПериодРегистрации), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("парамГраница",		Граница ); 
	Запрос.УстановитьПараметр("парамОрганизация", 	Организация );
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НДФЛ.НалоговыйПериод					КАК НалоговыйПериод,
	|	НДФЛ.ФизЛицо							КАК ФизЛицо,
	|	НДФЛ.ДоходНДФЛ							КАК ДоходНДФЛ,
	|	НДФЛ.Льгота								КАК Льгота,
	|	НДФЛ.ВидСтавки							КАК ВидСтавки,
	|	                                         
	|	НДФЛ.ДоходОстаток     					КАК Доход,
	|	НДФЛ.НалогОстаток     					КАК Налог,
	|	-НДФЛ.НеподтвержденнаяСуммаОстаток		КАК НеподтвержденнаяСумма,
	|	ВЫБОР КОГДА НДФЛ.НеподтвержденнаяСуммаОстаток - НДФЛ.НалогОстаток > 0	
	|	      ТОГДА НДФЛ.НеподтвержденнаяСуммаОстаток - НДФЛ.НалогОстаток                                  
	|	      ИНАЧЕ 0                                  
	|	      КОНЕЦ                              КАК СвободнаяСумма     
	|	                                         
	|ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ.Остатки(&парамГраница, Организация = &парамОрганизация И ФизЛицо в (&парамФизЛицо, &парамМассивПустых) ) КАК НДФЛ
	|	                                         
	|ИТОГИ СУММА(Доход), СУММА(Налог), СУММА(НеподтвержденнаяСумма)                                      
	|ПО	                                         
	|	ОБЩИЕ,
	|	НДФЛ.НалоговыйПериод,   // УБЫВ
	|	НДФЛ.ФизЛицо,
	|	НДФЛ.ДоходНДФЛ,
	|	НДФЛ.Льгота
	|"; 
	
	Запрос.Текст = ТекстЗапроса;
	
	ПоГруппировкам = ОбходРезультатаЗапроса.ПоГруппировкам;  
	Прямой = ОбходРезультатаЗапроса.Прямой; 
	НеобходимыеДанные = Новый Структура;
	НеобходимыеДанные.Вставить("Организация", Организация);
	НеобходимыеДанные.Вставить("Доход", 0);
	НеобходимыеДанные.Вставить("Налог", 0);
	   
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ПоГруппировкам);
	Если ВыборкаИтоги.Следующий() Тогда
		
		// это итоги
		ИтогиДоход					= ?(ВыборкаИтоги.Доход = NULL,					0, ВыборкаИтоги.Доход);
		ИтогиНалог					= ?(ВыборкаИтоги.Налог = NULL,					0, ВыборкаИтоги.Налог);
		ИтогиНеподтвержденнаяСумма	= ?(ВыборкаИтоги.НеподтвержденнаяСумма = NULL,	0, ВыборкаИтоги.НеподтвержденнаяСумма);
		СвободнаяСумма				= ?(ВыборкаИтоги.СвободнаяСумма = NULL,			0, ВыборкаИтоги.СвободнаяСумма);
		
		// эта сумма информативная, при проведении она может измениться
		ПеречисленныйНДФЛ = ИтогиНеподтвержденнаяСумма;
		
		Если ИтогиНалог <= ИтогиНеподтвержденнаяСумма Тогда
			
			// Просто закрываем все долги по физ лицам
			Выборка = ВыборкаИтоги.Выбрать(Прямой);
			Пока Выборка.Следующий() Цикл
				Если Выборка.ВидСтавки = NULL 
					ИЛИ Выборка.ВидСтавки = Перечисления.ВидыСтавокНДФЛ.ПустаяСсылка() Тогда
					Продолжить;
				КонецЕсли;
				НеобходимыеДанные.Доход = Выборка.Доход;
				НеобходимыеДанные.Налог = Выборка.Налог;
				СформироватьСтроку_НДФЛ( Выборка, НДФЛ, НеобходимыеДанные);
			КонецЦикла;
			
			НеподтвержденныйНДФЛ = ИтогиНеподтвержденнаяСумма - ИтогиНалог;
			
		Иначе	
			
			// списываем пропорционально
			ПустаяДата = Дата('00010101');
			СписокПолныхПериодов = Новый СписокЗначений;
			// --1-- сначала пройдем по всем переплатам, а потом по суммам, которые не доплачены
			// просмотрим периоды, которые закроются целиком
			ВыборкаНалоговыйПериод	= ВыборкаИтоги.Выбрать(ПоГруппировкам, "НалоговыйПериод");
			Пока ВыборкаНалоговыйПериод.Следующий() Цикл
				Если ВыборкаНалоговыйПериод.НалоговыйПериод = ПустаяДата Тогда
					Продолжить;			
				КонецЕсли; 
				
				НалоговыйПериодНалог					= ?(ВыборкаНалоговыйПериод.Налог = NULL,					0, ВыборкаНалоговыйПериод.Налог);
				НалоговыйПериодНеподтвержденнаяСумма	= ?(ВыборкаНалоговыйПериод.НеподтвержденнаяСумма = NULL,	0, ВыборкаНалоговыйПериод.НеподтвержденнаяСумма);
				
				Если НалоговыйПериодНалог <= НалоговыйПериодНеподтвержденнаяСумма Тогда
					СписокПолныхПериодов.Добавить( ВыборкаНалоговыйПериод.Налоговыйпериод );
				ИначеЕсли НалоговыйПериодНалог <= НалоговыйПериодНеподтвержденнаяСумма + СвободнаяСумма Тогда
					СвободнаяСумма = СвободнаяСумма - (НалоговыйПериодНалог - НалоговыйПериодНеподтвержденнаяСумма);
					СписокПолныхПериодов.Добавить( ВыборкаНалоговыйПериод.Налоговыйпериод );
				КонецЕсли; 
			КонецЦикла;
		
			
			// только теперь формиркем движения
			// --1-- упрощенная схема
			// --2-- пропорционально перечисленной сумме
			ВыборкаНалоговыйПериод	= ВыборкаИтоги.Выбрать(ПоГруппировкам, "НалоговыйПериод");
			Пока ВыборкаНалоговыйПериод.Следующий() Цикл
				
				// --1-- упрощенная схема
				Если СписокПолныхПериодов.НайтиПоЗначению(ВыборкаНалоговыйПериод.НалоговыйПериод) <> Неопределено Тогда
					// упрощенная схема
					Выборка = ВыборкаНалоговыйПериод.Выбрать(Прямой);
					Пока Выборка.Следующий() Цикл
						Если Выборка.ВидСтавки = NULL 
							ИЛИ Выборка.ВидСтавки = Перечисления.ВидыСтавокНДФЛ.ПустаяСсылка() Тогда
							Продолжить;
						КонецЕсли;
						НеобходимыеДанные.Доход = Выборка.Доход;
						НеобходимыеДанные.Налог = Выборка.Налог;
						СформироватьСтроку_НДФЛ( Выборка, НДФЛ, НеобходимыеДанные);
						ИтогиНеподтвержденнаяСумма = ИтогиНеподтвержденнаяСумма - Выборка.Налог;
					КонецЦикла;
					
					
					Продолжить;
				КонецЕсли;
				
				// --2-- пропорционально перечисленной сумме
				НалоговыйПериодДоход					= ?(ВыборкаНалоговыйПериод.Доход = NULL,	0, ВыборкаНалоговыйПериод.Доход);
				НалоговыйПериодНалог					= ?(ВыборкаНалоговыйПериод.Налог = NULL,	0, ВыборкаНалоговыйПериод.Налог);
				НалоговыйПериодНеподтвержденнаяСумма	= ?(ВыборкаНалоговыйПериод.НеподтвержденнаяСумма = NULL,	0, ВыборкаНалоговыйПериод.НеподтвержденнаяСумма);
				
				НалоговыйПериодНеподтвержденнаяСумма = ИтогиНеподтвержденнаяСумма; //НалоговыйПериодНеподтвержденнаяСумма + СвободнаяСумма;
				СвободнаяСумма = 0;
				Коэф = ?(НалоговыйПериодНалог = 0, 0, НалоговыйПериодНеподтвержденнаяСумма / НалоговыйПериодНалог);
				
				ВыборкаФизЛицо = ВыборкаНалоговыйПериод.Выбрать(ПоГруппировкам, "ФизЛицо");
				Пока ВыборкаФизЛицо.Следующий() Цикл
					
					Если ВыборкаФизЛицо.ФизЛицо = NULL 
						ИЛИ ВыборкаФизЛицо.ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка()
						ИЛИ ВыборкаФизЛицо.ФизЛицо = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					
					Доход = ?(ВыборкаФизЛицо.Доход = NULL, 0, ВыборкаФизЛицо.Доход);
					Налог = ?(ВыборкаФизЛицо.Налог = NULL, 0, ВыборкаФизЛицо.Налог);
					ФизЛицоДоход	= Окр( Коэф * Доход, 2);
					ФизЛицоНалог	= Окр( Коэф * Налог, 2);
					
					ВыборкаДоходНДФЛ = ВыборкаФизЛицо.Выбрать(ПоГруппировкам);
					Пока ВыборкаДоходНДФЛ.Следующий() Цикл
						
						Выборка = ВыборкаДоходНДФЛ.Выбрать(Прямой);
						Пока Выборка.Следующий() Цикл
							
							Если Выборка.ВидСтавки = NULL 
								ИЛИ Выборка.ВидСтавки = Перечисления.ВидыСтавокНДФЛ.ПустаяСсылка() Тогда
								Продолжить;
							КонецЕсли;
							
							Доход = ?(Выборка.Доход = NULL, 0, Выборка.Доход);
							Налог = ?(Выборка.Налог = NULL, 0, Выборка.Налог);
							
							НеобходимыеДанные.Доход = Окр( Коэф * Доход, 2 );
							НеобходимыеДанные.Налог = Окр( Коэф * Налог, 2 );
							
							СформироватьСтроку_НДФЛ( Выборка, НДФЛ, НеобходимыеДанные );
							
							НалоговыйПериодНеподтвержденнаяСумма	= НалоговыйПериодНеподтвержденнаяСумма - НеобходимыеДанные.Налог;
							ФизЛицоДоход	= ФизЛицоДоход - НеобходимыеДанные.Доход;
							ФизЛицоНалог	= ФизЛицоНалог - НеобходимыеДанные.Налог;
							
						КонецЦикла;
					КонецЦикла;
					
					// необходимо закрыть копейки по работнику, что бы уменьшить погрешность
					Если ФизЛицоНалог <> 0 ИЛИ ФизЛицоДоход <> 0 Тогда
						Выборка = ВыборкаФизЛицо.Выбрать(Прямой);
						Пока Выборка.Следующий() Цикл
							Если Выборка.ВидСтавки = NULL 
							ИЛИ Выборка.ВидСтавки = Перечисления.ВидыСтавокНДФЛ.ПустаяСсылка() Тогда
								Продолжить;
							КонецЕсли;
							
							КвоСтрок = НДФЛ.Количество();
							Если КвоСтрок > 0 Тогда
								НДФЛ[КвоСтрок-1].Доход	= НДФЛ[КвоСтрок-1].Доход	+ ФизЛицоДоход;  
								НДФЛ[КвоСтрок-1].Налог	= НДФЛ[КвоСтрок-1].Налог	+ ФизЛицоНалог;
							КонецЕсли; 
							
							НалоговыйПериодНеподтвержденнаяСумма	= НалоговыйПериодНеподтвержденнаяСумма - ФизЛицоНалог;
							
							Прервать; //достаточно одной таблэткы	
							
						КонецЦикла;
					КонецЕсли; 
					
				КонецЦикла; 
				
				// если осталась копейка закрываем на первого попавшегося работника
				Если НалоговыйПериодНеподтвержденнаяСумма <> 0 Тогда
					
					Выборка = ВыборкаНалоговыйПериод.Выбрать(Прямой);
					Пока Выборка.Следующий() Цикл
						Если Выборка.ВидСтавки = NULL Тогда
							Продолжить;
						КонецЕсли;
						
						КвоСтрок = НДФЛ.Количество();
						Если КвоСтрок > 0 Тогда
							НДФЛ[КвоСтрок-1].Налог	= НДФЛ[КвоСтрок-1].Налог	+ НалоговыйПериодНеподтвержденнаяСумма;
						КонецЕсли; 
						
						НалоговыйПериодНеподтвержденнаяСумма = 0;
						Прервать; //достаточно одной таблэткы	
					КонецЦикла;
				КонецЕсли; 
					
			КонецЦикла; 
			
			// если, вдруг мы ошиблись и копейка вылезет, тут мы это должны заметить
			НеподтвержденныйНДФЛ = НалоговыйПериодНеподтвержденнаяСумма;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВсеПлатежиЗаПериод()
	
Процедура	СформироватьСтроку_НДФЛ( Выборка, НДФЛ, НеобходимыеДанные);
	
	НоваяСтрока = НДФЛ.Добавить();
	
	НоваяСтрока.ФизЛицо			= Выборка.ФизЛицо;
	НоваяСтрока.НалоговыйПериод	= Выборка.НалоговыйПериод;
	НоваяСтрока.ДоходНДФЛ		= Выборка.ДоходНДФЛ;
	НоваяСтрока.Льгота			= Выборка.Льгота;
	НоваяСтрока.ВидСтавки		= Выборка.ВидСтавки;
	
	НоваяСтрока.Доход	= НеобходимыеДанные.Доход;
	НоваяСтрока.Налог	= НеобходимыеДанные.Налог;
	
КонецПроцедуры

// Пересчет итогов в ТЧ "ПлатежиПоВзносам"
Процедура ЗаполнитьИтоги_ПлатежиПоВзносам() Экспорт
	
	табПлатежиПоВзносам = Новый ТаблицаЗначений;
	табПлатежиПоВзносам = Взносы.Выгрузить();
	табПлатежиПоВзносам.Свернуть("СтатьяНалоговойДекларации", "База, БазаВзноса, Взнос");
	
	Для каждого СтрокаТаблицы Из табПлатежиПоВзносам Цикл
		ЗаполнитьСтроку_ВзносПриИзменении(СтрокаТаблицы, СтрокаТаблицы.СтатьяНалоговойДекларации);
	КонецЦикла; 
	
	табПлатежиПоВзносам = "";
	
КонецПроцедуры

Процедура ЗаполнитьСтроку_ВзносПриИзменении(СтрокаТаблицы, СтатьяНалоговойДекларации) Экспорт
	
	СтрокаПлатежиПоВзносам	= ПлатежиПоВзносам.Найти( СтатьяНалоговойДекларации, "СтатьяНалоговойДекларации");
	Если СтрокаПлатежиПоВзносам <> Неопределено Тогда
	    СтрокаПлатежиПоВзносам.База = СтрокаТаблицы.База;
		СтрокаПлатежиПоВзносам.БазаВзноса = СтрокаТаблицы.БазаВзноса;
		СтрокаПлатежиПоВзносам.Взнос = СтрокаТаблицы.Взнос;
		СтрокаПлатежиПоВзносам.НеподтвержденнаяСумма = СтрокаПлатежиПоВзносам.ПеречисленныйВзнос - СтрокаТаблицы.Взнос;
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Закрыть перечисленные платежи по НДФЛ (по взаиморасчетам)
//
Процедура ЗакрытьПлатежиНДФЛ(Отказ, Заголовок) Экспорт
	
	МассивПустых  = Новый Массив(3);
	МассивПустых[0] = Справочники.ФизическиеЛица.ПустаяСсылка();
	МассивПустых[1] = Справочники.Контрагенты.ПустаяСсылка();
	МассивПустых[2] = Неопределено;
	
	// то что касается сумм погашения налогов
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамМассивПустых",	МассивПустых);
	                                
	Граница = Новый Граница(КонецМесяца(ПериодРегистрации), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("парамГраница",		Граница ); 
	Запрос.УстановитьПараметр("парамОрганизация", 	Организация );
	Запрос.УстановитьПараметр("парамРегистратор", 	Ссылка );
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР	КОГДА Взаиморасчеты.НалоговыйПериод ЕСТЬ НЕ NULL 
	|			ТОГДА Взаиморасчеты.НалоговыйПериод 
	|			ИНАЧЕ ДокПодтверждение.НалоговыйПериод 
	|			КОНЕЦ																	КАК НалоговыйПериод,
	|	СУММА(-Взаиморасчеты.НеподтвержденнаяСуммаОстаток)								КАК НеподтвержденнаяСумма,
	|	СУММА(ДокПодтверждение.Налог)													КАК Налог,
	|	СУММА(-Взаиморасчеты.НеподтвержденнаяСуммаОстаток - ДокПодтверждение.Налог)		КАК КонтрольныйОстаток,
	|	СУММА(ВЫБОР КОГДА -Взаиморасчеты.НеподтвержденнаяСуммаОстаток - ДокПодтверждение.Налог > 0	
	|	      ТОГДА -Взаиморасчеты.НеподтвержденнаяСуммаОстаток - ДокПодтверждение.Налог                                  
	|	      ИНАЧЕ 0                                  
	|	      КОНЕЦ)                              										КАК СвободнаяСумма,     
	|	СУММА(ВЫБОР КОГДА -Взаиморасчеты.НеподтвержденнаяСуммаОстаток - ДокПодтверждение.Налог < 0	
	|	      ТОГДА Взаиморасчеты.НеподтвержденнаяСуммаОстаток + ДокПодтверждение.Налог                                  
	|	      ИНАЧЕ 0                                  
	|	      КОНЕЦ)                              										КАК ЛишняяСумма     
	|	                                         
	|ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ.Остатки( &парамГраница, Организация = &парамОрганизация 
	|	И ФизЛицо в (&парамМассивПустых) ) КАК Взаиморасчеты
	|	                                         
	|ПОЛНОЕ СОЕДИНЕНИЕ(	                                         
	|ВЫБРАТЬ
	|	табНДФЛ.НалоговыйПериод	КАК НалоговыйПериод,
	|	табНДФЛ.Налог			КАК Налог
	|	                                         
	|ИЗ Документ.ПодтверждениеУплатыНалоговПоЗарплате.НДФЛ КАК табНДФЛ
	| 	                                         
	|ГДЕ	табНДФЛ.Ссылка = &парамРегистратор 
	|) КАК ДокПодтверждение	                                         
	|ПО Взаиморасчеты.НалоговыйПериод = ДокПодтверждение.НалоговыйПериод	                                         
	|	                                         
	|	                                         
	|СГРУППИРОВАТЬ ПО 	                                         
	|	ВЫБОР	КОГДА Взаиморасчеты.НалоговыйПериод ЕСТЬ НЕ NULL 
	|			ТОГДА Взаиморасчеты.НалоговыйПериод 
	|			ИНАЧЕ ДокПодтверждение.НалоговыйПериод 
	|			КОНЕЦ
	|	                                         
	|ИТОГИ                                      
	|	СУММА( КонтрольныйОстаток ) ,                                      
	|	СУММА( СвободнаяСумма),     
	|	СУММА( ЛишняяСумма )     
	|ПО	                                         
	|	ОБЩИЕ
	|"; 
	
	Запрос.Текст = ТекстЗапроса;
	
	ПоГруппировкам = ОбходРезультатаЗапроса.ПоГруппировкам;  
	Прямой = ОбходРезультатаЗапроса.Прямой; 
	   
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ПоГруппировкам);
	Если ВыборкаИтоги.Следующий() Тогда
		
		КонтрольныйОстаток	= ?(ВыборкаИтоги.КонтрольныйОстаток = NULL,	0, ВыборкаИтоги.КонтрольныйОстаток);
		ЛишняяСумма			= ?(ВыборкаИтоги.ЛишняяСумма = NULL,	0, ВыборкаИтоги.ЛишняяСумма);
		
		Если КонтрольныйОстаток < 0 Тогда
		    ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Сумма перечисленного НДФЛ меньше, чем подтверждаемая сумма';uk='Сума перерахованого ПДФО менше, ніж підтверджувана сума'"), Отказ, Заголовок);
		КонецЕсли; 
		
		Выборка = ВыборкаИтоги.Выбрать(Прямой);
		Пока Выборка.Следующий() Цикл
			
			НеподтвержденнаяСумма	= ?( Выборка.НеподтвержденнаяСумма = NULL,	0, Выборка.НеподтвержденнаяСумма );
			Налог					= ?( Выборка.Налог = NULL,					0, Выборка.Налог );
			СвободнаяСумма			= ?( Выборка.СвободнаяСумма = NULL,			0, Выборка.СвободнаяСумма );
			СписываетсяСумма = Мин( НеподтвержденнаяСумма, Налог );
			
			Если СвободнаяСумма > 0 И  ЛишняяСумма > 0 Тогда
				СписываетсяСумма = СписываетсяСумма + Мин( СвободнаяСумма, ЛишняяСумма );
				ЛишняяСумма = Макс( ЛишняяСумма - СвободнаяСумма, 0 );
			КонецЕсли; 
			
			Если СписываетсяСумма <> 0 Тогда
				// списываем сумму
				Строка = Движения.ВзаиморасчетыПоНДФЛ.Добавить();
				//свойства
				Строка.Период      = ?(РегулярнаяВыплата, ПериодРегистрации, Дата);
				Строка.ВидДвижения = ВидДвиженияНакопления.Расход;
				//измерения
				Строка.Организация           	= Организация;
				Строка.НалоговыйПериод			= Выборка.НалоговыйПериод;
				// ресурсы
				Строка.НеподтвержденнаяСумма	= - СписываетсяСумма;
				// реквизиты
				Строка.Ответственный = Ответственный;
				
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗакрытьПлатежиНДФЛ()

// Закрыть перечисленные платежи по НДФЛ (по взаиморасчетам)
//
Процедура ПроверитьПодтверждениеПлатежаНДФЛ(Отказ, Заголовок) Экспорт
	
	МассивПустых  = Новый Массив(3);
	МассивПустых[0] = Справочники.ФизическиеЛица.ПустаяСсылка();
	МассивПустых[1] = Справочники.Контрагенты.ПустаяСсылка();
	МассивПустых[2] = Неопределено;
	
	// то что касается сумм погашения налогов
	масФизЛицо = Новый Массив;
	Для каждого СтрокаРаботники Из РаботникиОрганизации Цикл
		масФизЛицо.Добавить(СтрокаРаботники.ФизЛицо);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамФизЛицо",	масФизЛицо);
	Запрос.УстановитьПараметр("парамМассивПустых",	МассивПустых);
	                                
	Граница = Новый Граница(КонецМесяца(ПериодРегистрации), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("парамГраница",		Граница ); 
	Запрос.УстановитьПараметр("парамОрганизация", 	Организация );
	Запрос.УстановитьПараметр("парамРегистратор", 	Ссылка );
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	табНДФЛ.НалоговыйПериод	КАК НалоговыйПериод,
	|	табНДФЛ.ФизЛицо			КАК ФизЛицо,
	|	табНДФЛ.ДоходНДФЛ		КАК ДоходНДФЛ,
	|	табНДФЛ.Льгота			КАК Льгота,
	|	табНДФЛ.ВидСтавки		КАК ВидСтавки,
	|	СУММА( табНДФЛ.Доход )							КАК Доход,
	|	СУММА( табНДФЛ.Налог )							КАК Налог,
	|	СУММА( Взаиморасчеты.Доход - табНДФЛ.Доход )	КАК КонтрольДоход,
	|	СУММА( Взаиморасчеты.Налог - табНДФЛ.Налог )	КАК КонтрольНалог
	|	                                         
	|ИЗ Документ.ПодтверждениеУплатыНалоговПоЗарплате.НДФЛ КАК табНДФЛ
	| 	                                         
	|ЛЕВОЕ СОЕДИНЕНИЕ(	                                         
	|	ВЫБРАТЬ
	|		НДФЛ.НалоговыйПериод	КАК НалоговыйПериод,
	|		НДФЛ.ФизЛицо			КАК ФизЛицо,
	|		НДФЛ.ДоходНДФЛ			КАК ДоходНДФЛ,
	|		НДФЛ.Льгота			КАК Льгота,
	|		НДФЛ.ВидСтавки			КАК ВидСтавки,
	|		НДФЛ.ДоходОстаток				КАК Доход,
	|		НДФЛ.НалогОстаток				КАК Налог
	|		                                         
	|	ИЗ		РегистрНакопления.ВзаиморасчетыПоНДФЛ.Остатки( &парамГраница, Организация = &парамОрганизация 
	|		И	ФизЛицо в (&парамФизЛицо) ) КАК НДФЛ
	|) КАК Взаиморасчеты	                                         
	|ПО Взаиморасчеты.НалоговыйПериод	= табНДФЛ.НалоговыйПериод
	|	И Взаиморасчеты.ФизЛицо			= табНДФЛ.ФизЛицо
	|	И Взаиморасчеты.ДоходНДФЛ		 	= табНДФЛ.ДоходНДФЛ
	|	И Взаиморасчеты.Льгота		 	= табНДФЛ.Льгота
	|	И Взаиморасчеты.ВидСтавки 		= табНДФЛ.ВидСтавки
	|	                                         
	|ГДЕ	табНДФЛ.Ссылка = &парамРегистратор 
	|	                                         
	|	                                         
	|СГРУППИРОВАТЬ ПО 	                                         
	|	табНДФЛ.НалоговыйПериод,
	|	табНДФЛ.ФизЛицо,
	|	табНДФЛ.ДоходНДФЛ,
	|	табНДФЛ.Льгота,
	|	табНДФЛ.ВидСтавки
	|"; 
	
	Запрос.Текст = ТекстЗапроса;
	
	ПоГруппировкам = ОбходРезультатаЗапроса.ПоГруппировкам;  
	Прямой = ОбходРезультатаЗапроса.Прямой; 
	   
	Результат = Истина;	
	Выборка = Запрос.Выполнить().Выбрать(Прямой);
	
	Пока Выборка.Следующий() Цикл
		
		Доход			= ?( Выборка.Доход = NULL,			0, Выборка.Доход );
		Налог			= ?( Выборка.Налог = NULL,			0, Выборка.Налог );
		КонтрольДоход	= ?( Выборка.КонтрольДоход = NULL,	0, Выборка.КонтрольДоход );
		КонтрольНалог	= ?( Выборка.КонтрольНалог = NULL,	0, Выборка.КонтрольНалог );
		
		Если КонтрольДоход < 0 ИЛИ  КонтрольНалог < 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Табличная часть ""НДФЛ"", работник ';uk='Таблична частина ""ПДФО"", працівник '") + Выборка.ФизЛицо 
			+ НСтр("ru=', налоговый период ""';uk=', податковий період ""'")+Выборка.НалоговыйПериод
			+НСтр("ru='"", статья дохода ""';uk='"", стаття доходу ""'")+Выборка.ДоходНДФЛ+НСтр("ru='"""
", льгота ""';uk='"""
", пільга ""'")+Выборка.Льгота+НСтр("ru='""."
"Подтвержденная сумма превышает свободный остаток!';uk='""."
"Підтверджена сума перевищує вільний залишок!'"), Отказ, Заголовок); 
			
			Продолжить;
		КонецЕсли; 
		
		Если Доход <> 0 ИЛИ  Налог <> 0 Тогда
			ВыполнитьДвижениеНДФЛ( Выборка );
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры // ПроверитьПодтверждениеПлатежаНДФЛ()

// Закрыть перечисленные платежи по Взносам (по взаиморасчетам)
//
Процедура ЗакрытьПлатежиВзносы(Отказ, Заголовок) Экспорт
	
	МассивПустых  = Новый Массив(3);
	МассивПустых[0] = Справочники.ФизическиеЛица.ПустаяСсылка();
	МассивПустых[1] = Справочники.Контрагенты.ПустаяСсылка();
	МассивПустых[2] = Неопределено;
	
	// то что касается сумм погашения налогов
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамМассивПустых",	МассивПустых);
	                                
	Граница = Новый Граница(КонецМесяца(ПериодРегистрации), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("парамГраница",		Граница ); 
	Запрос.УстановитьПараметр("парамОрганизация", 	Организация );
	Запрос.УстановитьПараметр("парамРегистратор", 	Ссылка );
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР	КОГДА Взаиморасчеты.СтатьяНалоговойДекларации ЕСТЬ НЕ NULL 
	|			ТОГДА Взаиморасчеты.СтатьяНалоговойДекларации 
	|			ИНАЧЕ ДокПодтверждение.СтатьяНалоговойДекларации 
	|			КОНЕЦ																	КАК СтатьяНалоговойДекларации,
	|	ВЫБОР	КОГДА Взаиморасчеты.НалоговыйПериод ЕСТЬ НЕ NULL 
	|			ТОГДА Взаиморасчеты.НалоговыйПериод 
	|			ИНАЧЕ ДокПодтверждение.НалоговыйПериод 
	|			КОНЕЦ																	КАК НалоговыйПериод,
	|	СУММА(-Взаиморасчеты.НеподтвержденнаяСуммаОстаток)								КАК НеподтвержденнаяСумма,
	|	СУММА(ДокПодтверждение.Взнос)													КАК Взнос,
	|	СУММА(-Взаиморасчеты.НеподтвержденнаяСуммаОстаток - ДокПодтверждение.Взнос)		КАК КонтрольныйОстаток,
	|	СУММА(ВЫБОР КОГДА -Взаиморасчеты.НеподтвержденнаяСуммаОстаток - ДокПодтверждение.Взнос > 0	
	|	      ТОГДА -Взаиморасчеты.НеподтвержденнаяСуммаОстаток - ДокПодтверждение.Взнос                                  
	|	      ИНАЧЕ 0                                  
	|	      КОНЕЦ)                              										КАК СвободнаяСумма,     
	|	СУММА(ВЫБОР КОГДА -Взаиморасчеты.НеподтвержденнаяСуммаОстаток - ДокПодтверждение.Взнос < 0	
	|	      ТОГДА Взаиморасчеты.НеподтвержденнаяСуммаОстаток + ДокПодтверждение.Взнос                                  
	|	      ИНАЧЕ 0                                  
	|	      КОНЕЦ)                              										КАК ЛишняяСумма     
	|	                                         
	|ИЗ РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Остатки( &парамГраница, Организация = &парамОрганизация 
	|	И ФизЛицо в (&парамМассивПустых) ) КАК Взаиморасчеты
	|	                                         
	|ЛЕВОЕ СОЕДИНЕНИЕ(	                                         
	|ВЫБРАТЬ
	|	табВзносы.СтатьяНалоговойДекларации КАК СтатьяНалоговойДекларации, 
	|	табВзносы.НалоговыйПериод			КАК НалоговыйПериод,
	|	табВзносы.Взнос						КАК Взнос
	|	                                         
	|ИЗ Документ.ПодтверждениеУплатыНалоговПоЗарплате.Взносы КАК табВзносы
	| 	                                         
	|ГДЕ	табВзносы.Ссылка = &парамРегистратор 
	|) КАК ДокПодтверждение	                                         
	|ПО Взаиморасчеты.СтатьяНалоговойДекларации = ДокПодтверждение.СтатьяНалоговойДекларации	                                         
	|И Взаиморасчеты.НалоговыйПериод = ДокПодтверждение.НалоговыйПериод	                                         
	|	                                         
	|	                                         
	|СГРУППИРОВАТЬ ПО 	                                         
	|	ВЫБОР	КОГДА Взаиморасчеты.СтатьяНалоговойДекларации ЕСТЬ НЕ NULL 
	|			ТОГДА Взаиморасчеты.СтатьяНалоговойДекларации 
	|			ИНАЧЕ ДокПодтверждение.СтатьяНалоговойДекларации 
	|			КОНЕЦ,
	|	ВЫБОР	КОГДА Взаиморасчеты.НалоговыйПериод ЕСТЬ НЕ NULL 
	|			ТОГДА Взаиморасчеты.НалоговыйПериод 
	|			ИНАЧЕ ДокПодтверждение.НалоговыйПериод 
	|			КОНЕЦ
	|	                                         
	|ИТОГИ                                      
	|	СУММА( КонтрольныйОстаток ) ,                                      
	|	СУММА( СвободнаяСумма),     
	|	СУММА( ЛишняяСумма )     
	|ПО	                                         
	|	СтатьяНалоговойДекларации
	|"; 
	
	Запрос.Текст = ТекстЗапроса;
	
	ПоГруппировкам = ОбходРезультатаЗапроса.ПоГруппировкам;  
	Прямой = ОбходРезультатаЗапроса.Прямой; 
	   
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ПоГруппировкам);
	Пока ВыборкаИтоги.Следующий() Цикл
		
		КонтрольныйОстаток	= ?(ВыборкаИтоги.КонтрольныйОстаток = NULL,	0, ВыборкаИтоги.КонтрольныйОстаток);
		ЛишняяСумма			= ?(ВыборкаИтоги.ЛишняяСумма = NULL,	0, ВыборкаИтоги.ЛишняяСумма);
		
		Если КонтрольныйОстаток < 0 Тогда
		    ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Сумма перечисленного взноса ""';uk='Сума перерахованого внеску ""'")+ВыборкаИтоги.СтатьяНалоговойДекларации+НСтр("ru='"" меньше, чем подтверждаемая сумма';uk='"" менше, ніж сума, що підтверджується'"), Отказ, Заголовок);
		КонецЕсли; 
		
		Выборка = ВыборкаИтоги.Выбрать(Прямой);
		Пока Выборка.Следующий() Цикл
			
			НеподтвержденнаяСумма	= ?( Выборка.НеподтвержденнаяСумма = NULL,	0, Выборка.НеподтвержденнаяСумма );
			Взнос					= ?( Выборка.Взнос = NULL,					0, Выборка.Взнос );
			СвободнаяСумма			= ?( Выборка.СвободнаяСумма = NULL,			0, Выборка.СвободнаяСумма );
			СписываетсяСумма = Мин( НеподтвержденнаяСумма, Взнос );
			
			Если СвободнаяСумма > 0 И  ЛишняяСумма > 0 Тогда
				СписываетсяСумма = СписываетсяСумма + Мин( СвободнаяСумма, ЛишняяСумма );
				ЛишняяСумма = Макс( ЛишняяСумма - СвободнаяСумма, 0 );
			КонецЕсли; 
			
			Если СписываетсяСумма <> 0 Тогда
				// списываем сумму
				Строка = Движения.ВзаиморасчетыПоВзносамВФонды.Добавить();
				//свойства
				Строка.Период      = ?(РегулярнаяВыплата, ПериодРегистрации, Дата);
				Строка.ВидДвижения = ВидДвиженияНакопления.Расход;
				//измерения
				Строка.Организация					= Организация;
				Строка.СтатьяНалоговойДекларации	= Выборка.СтатьяНалоговойДекларации;
				Строка.НалоговыйПериод				= Выборка.НалоговыйПериод;
				// ресурсы
				Строка.НеподтвержденнаяСумма	= - СписываетсяСумма;
				// реквизиты
				
			КонецЕсли; 
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗакрытьПлатежиВзносы()

// Закрыть перечисленные платежи по НДФЛ (по взаиморасчетам)
//
Процедура ПроверитьПодтверждениеПлатежаВзносы(Отказ, Заголовок) Экспорт
	
	МассивПустых  = Новый Массив(3);
	МассивПустых[0] = Справочники.ФизическиеЛица.ПустаяСсылка();
	МассивПустых[1] = Справочники.Контрагенты.ПустаяСсылка();
	МассивПустых[2] = Неопределено;
	
	// то что касается сумм погашения налогов
	масФизЛицо = Новый Массив;
	Для каждого СтрокаРаботники Из РаботникиОрганизации Цикл
		масФизЛицо.Добавить(СтрокаРаботники.ФизЛицо);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамФизЛицо",	масФизЛицо);
	Запрос.УстановитьПараметр("парамМассивПустых",	МассивПустых);
	                                
	Граница = Новый Граница(КонецМесяца(ПериодРегистрации), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("парамГраница",		Граница ); 
	Запрос.УстановитьПараметр("парамОрганизация", 	Организация );
	Запрос.УстановитьПараметр("парамРегистратор", 	Ссылка );
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	табВзносы.ФизЛицо					КАК ФизЛицо,
	|	табВзносы.НалоговыйПериод			КАК НалоговыйПериод,
	|	табВзносы.СтатьяНалоговойДекларации	КАК СтатьяНалоговойДекларации,
	|	табВзносы.ПериодДействия			КАК ПериодДействия,
	|	СУММА( табВзносы.База )										КАК База,
	|	СУММА( табВзносы.БазаВзноса )								КАК БазаВзноса,
	|	СУММА( табВзносы.Взнос )									КАК Взнос,
	|	СУММА( Взаиморасчеты.База - табВзносы.База )				КАК КонтрольБаза,
	|	СУММА( Взаиморасчеты.БазаВзноса - табВзносы.БазаВзноса )	КАК КонтрольБазаВзноса,
	|	СУММА( Взаиморасчеты.Взнос - табВзносы.Взнос )				КАК КонтрольВзнос
	|	                                         
	|ИЗ Документ.ПодтверждениеУплатыНалоговПоЗарплате.Взносы КАК табВзносы
	| 	                                         
	|ЛЕВОЕ СОЕДИНЕНИЕ(	                                         
	|	ВЫБРАТЬ
	|		ВзаиморасчетыПоВзносам.ФизЛицо						КАК ФизЛицо,
	|		ВзаиморасчетыПоВзносам.НалоговыйПериод				КАК НалоговыйПериод,
	|		ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации	КАК СтатьяНалоговойДекларации,
	|		ВзаиморасчетыПоВзносам.ПериодДействия				КАК ПериодДействия,
	|		ВзаиморасчетыПоВзносам.БазаОстаток					КАК База,
	|		ВзаиморасчетыПоВзносам.БазаВзносаОстаток			КАК БазаВзноса,
	|		ВзаиморасчетыПоВзносам.РезультатОстаток				КАК Взнос
	|		                                         
	|	ИЗ		РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Остатки( &парамГраница, Организация = &парамОрганизация 
	|		И	ФизЛицо в (&парамФизЛицо) ) КАК ВзаиморасчетыПоВзносам
	|) КАК Взаиморасчеты	                                         
	|ПО Взаиморасчеты.НалоговыйПериод	= табВзносы.НалоговыйПериод
	|	И Взаиморасчеты.ФизЛицо			= табВзносы.ФизЛицо
	|	И Взаиморасчеты.СтатьяНалоговойДекларации		= табВзносы.СтатьяНалоговойДекларации
	|	И Взаиморасчеты.ПериодДействия		 	= табВзносы.ПериодДействия
	|	                                         
	|ГДЕ	табВзносы.Ссылка = &парамРегистратор 
	|	                                         
	|	                                         
	|СГРУППИРОВАТЬ ПО 	                                         
	|	табВзносы.ФизЛицо,
	|	табВзносы.НалоговыйПериод,
	|	табВзносы.СтатьяНалоговойДекларации,
	|	табВзносы.ПериодДействия
	|"; 
	
	Запрос.Текст = ТекстЗапроса;
	
	ПоГруппировкам = ОбходРезультатаЗапроса.ПоГруппировкам;  
	Прямой = ОбходРезультатаЗапроса.Прямой; 
	   
	Результат = Истина;	
	Выборка = Запрос.Выполнить().Выбрать(Прямой);
	
	Пока Выборка.Следующий() Цикл
		
		База				= ?( Выборка.База = NULL,				0, Выборка.База );
		БазаВзноса			= ?( Выборка.БазаВзноса = NULL,			0, Выборка.БазаВзноса );
		Взнос				= ?( Выборка.Взнос = NULL,				0, Выборка.Взнос );
		КонтрольБаза		= ?( Выборка.КонтрольБаза = NULL,		0, Выборка.КонтрольБаза );
		КонтрольБазаВзноса	= ?( Выборка.КонтрольБазаВзноса = NULL,	0, Выборка.КонтрольБазаВзноса );
		КонтрольВзнос		= ?( Выборка.КонтрольВзнос = NULL,		0, Выборка.КонтрольВзнос );
		
		Если КонтрольБаза < 0 ИЛИ КонтрольБазаВзноса < 0 ИЛИ КонтрольВзнос < 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Табличная часть ""Взносы"", статья ""';uk='Таблична частина ""Внески"", стаття ""'")+ Выборка.СтатьяНалоговойДекларации+ НСтр("ru='"", работник ';uk='"", працівник '") + Выборка.ФизЛицо 
			+ НСтр("ru=', налоговый период ""';uk=', податковий період ""'")+Выборка.НалоговыйПериод
			+НСтр("ru='"" период действия ""';uk='"" період дії ""'")+Выборка.ПериодДействия+НСтр("ru='""."
"Подтвержденная сумма превышает свободный остаток!';uk='""."
"Підтверджена сума перевищує вільний залишок!'"), Отказ, Заголовок); 
			
			Продолжить;
		КонецЕсли; 
		
		Если	База <> 0 ИЛИ	БазаВзноса <> 0 ИЛИ	Взнос <> 0 Тогда
			
			ВыполнитьДвижениеВзносы( Выборка );
			
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры // ПроверитьПодтверждениеПлатежаНДФЛ()
	 
Процедура ВыполнитьДвижениеНачисления( СтрокаТаблицы)
	Строка = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
	//свойства
	Строка.Период      = ?(РегулярнаяВыплата, ПериодРегистрации, Дата);
	Строка.ВидДвижения = ВидДвиженияНакопления.Расход;
	//измерения
	Строка.Организация                  = Организация;
	Строка.ФизЛицо                      = СтрокаТаблицы.ФизЛицо;
	Строка.ПериодВзаиморасчетов         = СтрокаТаблицы.ПериодВзаиморасчетов;
	Строка.ВидВзаиморасчетов 			= СтрокаТаблицы.ВидВзаиморасчетов;
	// ресурсы
	Строка.СуммаНачислений              = СтрокаТаблицы.НачисленоПоФактуВыплаты;
	// реквизиты
	Строка.КодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.ПогашениеНачисленийПоФактуВыплаты;
	
КонецПроцедуры

Процедура ВыполнитьДвижениеВзносы( СтрокаТаблицы)

	Если СтрокаТаблицы.База <> 0 
		ИЛИ СтрокаТаблицы.БазаВзноса <> 0 
		ИЛИ СтрокаТаблицы.Взнос <> 0 Тогда
		
		Строка = Движения.ВзаиморасчетыПоВзносамВФонды.Добавить();
		
		//свойства
		//Строка.Период      = ПериодРегистрации;
		Строка.Период      = ?(РегулярнаяВыплата, ПериодРегистрации, Дата);
		Строка.ВидДвижения = ВидДвиженияНакопления.Расход;
		
		//измерения
		Строка.Организация                  = Организация;
		Строка.ФизЛицо                      = СтрокаТаблицы.ФизЛицо;
		Строка.СтатьяНалоговойДекларации    = СтрокаТаблицы.СтатьяНалоговойДекларации;
		Строка.НалоговыйПериод 				= СтрокаТаблицы.НалоговыйПериод;
		Строка.ПериодДействия         		= СтрокаТаблицы.ПериодДействия;
		
		// ресурсы
		Строка.База        = СтрокаТаблицы.База;
		Строка.БазаВзноса  = СтрокаТаблицы.БазаВзноса;
		Строка.Результат   = СтрокаТаблицы.Взнос;
		
		// реквизиты
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыполнитьДвижениеНДФЛ( СтрокаТаблицы)

	Если СтрокаТаблицы.Налог <> 0 
		ИЛИ СтрокаТаблицы.Доход <> 0 Тогда
		
		Строка = Движения.ВзаиморасчетыПоНДФЛ.Добавить();
		
		//свойства
		// Строка.Период      = ПериодРегистрации;
		Строка.Период      = ?(РегулярнаяВыплата, ПериодРегистрации, Дата);
		Строка.ВидДвижения = ВидДвиженияНакопления.Расход;
		
		//измерения
		Строка.Организация           	= Организация;
		Строка.ФизЛицо               	= СтрокаТаблицы.ФизЛицо;
		Строка.НалоговыйПериод			= СтрокаТаблицы.НалоговыйПериод;
		Строка.ДоходНДФЛ         		= СтрокаТаблицы.ДоходНДФЛ;
		Строка.ВидСтавки				= СтрокаТаблицы.ВидСтавки;
		Строка.Льгота         			= СтрокаТаблицы.Льгота;
		
		// ресурсы
		Строка.Налог		= СтрокаТаблицы.Налог;
		Строка.Доход		= СтрокаТаблицы.Доход;

		// реквизиты
		Строка.Ответственный = Ответственный;
		
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)
	
	Отказ = Истина;
	Возврат;
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПроверитьОбязательныеРеквизиты(Отказ);
	
	// Взаиморасчеты с работником
	Для каждого СтрокаТаблицы Из Начисления Цикл
		ВыполнитьДвижениеНачисления( СтрокаТаблицы);
	КонецЦикла;
	
	// Фонды
	ПроверитьПодтверждениеПлатежаВзносы(Отказ, Заголовок);
	Если НЕ Отказ Тогда
		ЗакрытьПлатежиВзносы(Отказ, Заголовок)
	КонецЕсли; 

	// НДФЛ
	ПроверитьПодтверждениеПлатежаНДФЛ(Отказ, Заголовок);
	Если НЕ Отказ Тогда
		ЗакрытьПлатежиНДФЛ(Отказ, Заголовок)
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	Возврат;
	
КонецПроцедуры

