////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мСведенияОСчетах;  // для получения сведений о счетах на время работы формы
Перем мСведенияОСтатьяхЗатрат;  // для получения сведений о статьях затрат на время работы формы

Перем мОтборПоСотруднику;
Перем мОтборПоНалогуВзносы;
Перем мОтборПоНалогуВзносыФОТ;

// для синхронизации строк табличных полей
Перем мСинхронизируемыеТабличныеЧасти;
Перем мСпискВыбораВНД;
Перем мТекущееФизЛицо;
Перем мСотрудник;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Записывает документ в режиме отмены проведения, спросив об этом у пользователя
Функция ЗаписатьДокументОтменивПроведение(Действие = "рассчитать")

	Если Проведен Тогда
		
		Если Вопрос("Автоматически " + Действие +" документ можно только после отмены его проведения. Выполнить отмену проведения документа?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
		
	ИначеЕсли Модифицированность ИЛИ ЭтоНовый() Тогда
		
		Если Вопрос("Автоматически " + Действие +" документ можно только после его записи. Записать?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции  

Функция РасчетДокументаРазрешен()
	
	КонфликтныеДокументы = ПолучитьДокументыРасчетаЗаВесьМесяц();
	Успешно = КонфликтныеДокументы.Количество() = 0;
	
	Если Не Успешно Тогда
		СтрокаЗаголовок = "Расчет невозможентак, как выполнено начисление зарплаты за " 
				+ Формат(ПериодРегистрации,"ДФ=ММММ") + "." + Символы.ПС + "Для расчета Вы можете отменить проведение следующих документов:";
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		ОбщегоНазначения.ОшибкаРасчета(СтрокаЗаголовок);
		Для Каждого СтрокаДока Из КонфликтныеДокументы Цикл
			ОбщегоНазначения.КомментарийРасчета("",, СтрокаДока.Представление, СтрокаДока.Ссылка);
		КонецЦикла;
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;
	
	Возврат Успешно;

КонецФункции

Функция ПолучитьСписокСотрудниковДляРасчета( Кнопка, ТабличнаяЧасть, ИмяТабличнойЧасти, мСотрудники, КомментироватьРасчет )
	
		КомментироватьРасчет = Ложь;
	
	Если Найти(Кнопка.Имя,"ПоРаботнику") > 0 Тогда
		
		мСотрудники = Новый СписокЗначений;
		мСотрудникиТекст = "";
		РазделительТекст = "";
		Для каждого СтрокаСотрудник Из ЭлементыФормы.РаботникиОрганизации.ВыделенныеСтроки Цикл
			мСотрудники.Добавить(СтрокаСотрудник.Сотрудник);
			мСотрудникиТекст = мСотрудникиТекст + РазделительТекст + СтрокаСотрудник.Сотрудник;
			РазделительТекст = "; ";
		КонецЦикла; 
	
		ТекстВопроса = "Перед заполнением из табличной части """+ИмяТабличнойЧасти+""" будут удалены данные по сотрудникам: " + мСотрудникиТекст + ". Продолжить?";
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПроведениеРасчетов.УдалитьСтрокиПоУсловию( ТабличнаяЧасть, мСотрудники ); 
		Записать();
		
	Иначе 
		
		мСотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
		Если ТабличнаяЧасть.Количество() > 0 Тогда
			
			ТекстВопроса = "Перед заполнением табличная часть """+ИмяТабличнойЧасти+""" будет очищена. Продолжить?";
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ТабличнаяЧасть.Очистить();
			Записать();
		ИначеЕсли Модифицированность() Тогда
			ТекстВопроса = "Перед заполнением докумет необходимо записать. Продолжить?";
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			КонецЕсли;
			Записать();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции		

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельНачисления);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Взносы,ЭлементыФормы.КоманднаяПанельВзносы);
	СоответствиеТЧ.Вставить(ЭлементыФормы.НДФЛ,ЭлементыФормы.КоманднаяПанельНДФЛ);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Удержания,ЭлементыФормы.КоманднаяПанельУдержания);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПогашениеЗаймов,ЭлементыФормы.КоманднаяПанельПогашениеЗаймов);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВзносыФОТ,ЭлементыФормы.КоманднаяПанельВзносыФОТ);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОтражениеВУчете,ЭлементыФормы.ОтражениеВУчетеПанель);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

Процедура НастройкаВидимостиНалоговыхНазначенийПоЗатратам(Элемент, ОформлениеСтроки, ДанныеСтроки)

	СчетЗатрат = ЗначениеЗаполнено(ДанныеСтроки.СчетДт) И
				(ДанныеСтроки.СчетДт.ПринадлежитЭлементу(Планысчетов.Хозрасчетный.ЗатратыПоЭлементам) 
		         ИЛИ ДанныеСтроки.СчетДт.ПринадлежитЭлементу(Планысчетов.Хозрасчетный.ЗатратыДеятельности));
															
	ОформлениеСтроки.Ячейки.НалоговоеНазначение.ТолькоПросмотр  = Истина;
	
	Если СчетЗатрат Тогда
		
		Если ДанныеСтроки.СчетДт = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы
			ИЛИ ДанныеСтроки.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы) Тогда
			ОформлениеСтроки.Ячейки.НалоговоеНазначение.ТолькоПросмотр  = Ложь;
		Иначе	
			ОформлениеСтроки.Ячейки.НалоговоеНазначение.ТолькоПросмотр  = Ложь;
		КонецЕсли;	
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьПоУчетнойПолитике()
	
КонецПроцедуры	
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	ИначеЕсли Дата < ПроведениеРасчетов.ДатаВводаНПНК() Тогда	
		Если НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражениеЗарплатыДо01042011") Тогда
			Этаформа.ТолькоПросмотр = Истина;
		КонецЕсли
	Иначе 
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;	
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СчетДт");
	СтруктураКолонок.Вставить("СчетКт");
 	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("НеОтражатьВБУ");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ОтражениеВУчете.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
 	
	ПредставлениеПериодаРегистрации = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
	
	УстановитьОтборСписка();
	
	УстановитьВидимостьПоУчетнойПолитике();

КонецПроцедуры

Процедура ПослеЗаписи()
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыЗаполнитьРассчитатьВсе(Кнопка)
	
	НачатьТранзакцию();
	
	Отказ = Истина;
	Если ЗаписатьДокументОтменивПроведение("заполнить") Тогда
		Отказ = Ложь;
	КонецЕсли;
	
	Если Отказ Тогда
		Предупреждение("Обработка не выполнилась");
		Возврат;
	КонецЕсли; 
	
	РаботникиОрганизации.Очистить();
	Начисления.Очистить();
	Взносы.Очистить();
	ВзносыФОТ.Очистить();
	НДФЛ.Очистить();
	Удержания.Очистить();
	ПогашениеЗаймов.Очистить();
	Записать();
	
	// необходимо перезаполнить работников
	ЗаполнитьРаботникиОрганизации();
	Записать();
	
	ЗафиксироватьТранзакцию();
	
	
	Сотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
	// основные начисления
	РассчитатьНачисления( Сотрудники );
	РассчитатьВзносы( Сотрудники );
	РассчитатьНДФЛ( Сотрудники );
	РассчитатьУдержания( Сотрудники );
	РассчитатьПогашениеЗаймов( Сотрудники );
	Записать(); // так как сейчас надо будет прочитать документ для расчтов взносов Фот
	РассчитатьВзносыФОТ( Сотрудники );
	
	АвтозаполнениеПроводок();
	Записать();
	
	// Активизируем табличную часть
	ЭлементыФормы.РаботникиОрганизации.АктивизироватьПоУмолчанию = Истина;
	УстановитьОтборСписка();
	
КонецПроцедуры // ДействияФормыЗаполнить

Процедура ДействияФормыДействиеРассчитатьВсе(Кнопка)
	
	НачатьТранзакцию();
	
	Отказ = Истина;
	Если ЗаписатьДокументОтменивПроведение("рассчитать") Тогда
		Отказ = Ложь;
	КонецЕсли;
	
	Если Отказ Тогда
		Предупреждение("Обработка не выполнилась");
		Возврат;
	КонецЕсли; 
	
	Начисления.Очистить();
	Взносы.Очистить();
	ВзносыФОТ.Очистить();
	НДФЛ.Очистить();
	Удержания.Очистить();
	ПогашениеЗаймов.Очистить();
	Записать();
	
	ЗафиксироватьТранзакцию();
	
	Сотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
	// основные начисления
	РассчитатьНачисления( Сотрудники );
	РассчитатьВзносы( Сотрудники );
	РассчитатьНДФЛ( Сотрудники );
	РассчитатьУдержания( Сотрудники );
	РассчитатьПогашениеЗаймов( Сотрудники );
	Записать(); // так как сейчас надо будет прочитать документ для расчтов взносов Фот
	РассчитатьВзносыФОТ( Сотрудники );
	
	АвтозаполнениеПроводок();
	Записать();
	
	// Активизируем табличную часть
	ЭлементыФормы.РаботникиОрганизации.АктивизироватьПоУмолчанию = Истина;
	УстановитьОтборСписка();

КонецПроцедуры

Функция ОчиститьТабличныеЧасти()
	
	Если РаботникиОрганизации.Количество() = 0
	   и ОтражениеВУчете.Количество() = 0
	   и Начисления.Количество() = 0
	   и Взносы.Количество() = 0
	   и ВзносыФОТ.Количество() = 0
	   и Удержания.Количество() = 0
	   и НДФЛ.Количество() = 0
	   и ПогашениеЗаймов.Количество() = 0 Тогда
	   
	   Возврат Истина;
	КонецЕсли;   
	   
	
	ТекстВопроса = "Табличные части будут очищены. Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	РаботникиОрганизации.Очистить();
	ОтражениеВУчете.Очистить();
	Начисления.Очистить();
	Взносы.Очистить();
	ВзносыФОТ.Очистить();
	Удержания.Очистить();
	НДФЛ.Очистить();
	 ПогашениеЗаймов.Очистить();
	
	Возврат Истина;

		
КонецФункции

Процедура ДействияФормыОчистить(Кнопка)
	
		ОчиститьТабличныеЧасти();
		
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "Регулирование" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РаботаСДиалогами.РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры


Процедура ДатаПриИзменении(Элемент = Неопределено)

	РаботаСДиалогами.ПроверитьНомерДокумента(ДокументОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	Если ПодразделениеОрганизации.Владелец <> Организация Тогда
		ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьВидимостьПоУчетнойПолитике();
	
КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ОчиститьТабличныеЧасти() Тогда
		СтандартнаяОбработка = Ложь;
    КонецЕсли;

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ТАБЛИЧНОГО ПОЛЯ ОтражениеВУчете


Процедура СформироватьПроводки()
	Если (  Начисления.Количество() > 0 
		ИЛИ Взносы.Количество() > 0
		ИЛИ ВзносыФОТ.Количество() > 0
		ИЛИ Удержания.Количество() > 0
		ИЛИ НДФЛ.Количество() > 0
		) 
		и (ОтражениеВУчете.Количество() > 0) Тогда
	
		
		ТекстВопроса = "Текущие проводки будут удалены. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Если Вопрос("Сформировать проводки можно только после записи документа. Записать документ?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Если Не ЗаписатьВФорме() Тогда
				Возврат;
			КонецЕсли;;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Проведен Тогда
		Если Вопрос("Сформировать проводки можно только после отмены проведения документа. Выполнить отмену проведения документа?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Если Не ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения) Тогда
				Возврат;
			КонецЕсли;;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	АвтозаполнениеПроводок();
	
	Если Начисления.Количество() = 0 Тогда
		
		Сообщить("Не обнаружены данные для формирования проводок.", СтатусСообщения.Важное )
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ОтражениеВУчетеПанельСформироватьПроводки(Кнопка)
	
	СформироватьПроводки();
			
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ

Процедура ТабличнаяЧастьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ТипВыбранногоЗначения = ТипЗнч(ВыбранноеЗначение);
	Если ТипВыбранногоЗначения = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
			РаботникиОрганизации.Добавить().Сотрудник = ВыбранноеЗначение;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
		Для Каждого СтрокаТЗ Из ВыбранноеЗначение.Данные.Выгрузить() Цикл
				
			СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЗ);
				
		КонецЦикла;

	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипВыбранногоЗначения) Тогда	
		
		Если Элемент.Колонки.Найти("ВидРасчета") <> НеОпределено Тогда
			Элемент.ТекущиеДанные.ВидРасчета = ВыбранноеЗначение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры  // ТабличнаяЧастьОбработкаВыбора


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ Табличной части РаботникиОрганизации

Процедура КоманднаяПанельРаботникиОрганизацииЗаполнить(Кнопка)

	Если НЕ ЗаписатьДокументОтменивПроведение("заполнить") Тогда
		Возврат;
	КонецЕсли; 
	
	НачатьТранзакцию();
	
	ОтражениеВУчете.Очистить();
	Начисления.Очистить();
	Взносы.Очистить();
	ВзносыФОТ.Очистить();
	НДФЛ.Очистить();
	Удержания.Очистить();
	ПогашениеЗаймов.Очистить();
	
	// необходимо перезаполнить работников
	РаботникиОрганизации.Очистить();
	ЗаполнитьРаботникиОрганизации();
	
	ЗафиксироватьТранзакцию();	
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииСписокРаботников(Кнопка)
	
	Если РаботникиОрганизации.Количество()+Начисления.Количество()
			+ Взносы.Количество() 
			+ НДФЛ.Количество() 
			+ Удержания.Количество()  
			+ ВзносыФОТ.Количество() 
			+ ПогашениеЗаймов.Количество()> 0
			Тогда
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		РаботникиОрганизации.Очистить();
		Начисления.Очистить();
		Взносы.Очистить();
		ВзносыФОТ.Очистить();
		НДФЛ.Очистить();
		ПогашениеЗаймов.Очистить();
		Удержания.Очистить();
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма.ЭлементыФормы.РаботникиОрганизации, ПериодРегистрации, , Организация, ПодразделениеОрганизации, , , , , , ,Ложь );	
	
КонецПроцедуры // ДействияФормыСписокРаботников()

Процедура КоманднаяПанельРаботникиОрганизацииПодборРаботников(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, Организация, 1);
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииПереключитьОтборСписка(Кнопка)
		
	мОтборПоСотруднику = Не мОтборПоСотруднику;
	СохранитьЗначение("ОтборСпискаОтражениеЗП",мОтборПоСотруднику);
	УстановитьОтборСписка();

КонецПроцедуры

Процедура УстановитьОтборСписка()
	
	КнопкаПереключитьОтборСписка = ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПереключитьОтборСписка;
	КнопкаПереключитьОтборСписка.Картинка = ?(мОтборПоСотруднику, БиблиотекаКартинок.ФизическоеЛицо, БиблиотекаКартинок.ФизическиеЛица);
	
	КнопкаПереключитьОтборПоНалогу = ЭлементыФормы.КоманднаяПанельВзносыФОТ.Кнопки.ОтборПоНалогу;
	КнопкаПереключитьОтборПоНалогу.Картинка = ?(мОтборПоНалогуВзносыФОТ, БиблиотекаКартинок.ОтключитьОтбор, БиблиотекаКартинок.ОтборПоТекущемуЗначению);
	
	КнопкаПереключитьОтборПоНалогу = ЭлементыФормы.КоманднаяПанельВзносы.Кнопки.ОтборПоНалогу;
	КнопкаПереключитьОтборПоНалогу.Картинка = ?(мОтборПоНалогуВзносы, БиблиотекаКартинок.ОтключитьОтбор, БиблиотекаКартинок.ОтборПоТекущемуЗначению);
		
	Если НЕ мОтборПоСотруднику Тогда
		
		// отключим отбор
		ЭлементыФормы.Начисления.ОтборСтрок.Сотрудник.Использование			= Ложь;
		ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Использование				= Ложь;
		ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Использование			= Ложь;
		ЭлементыФормы.НДФЛ.ОтборСтрок.Сотрудник.Использование				= Ложь;
		ЭлементыФормы.Удержания.ОтборСтрок.Сотрудник.Использование			= Ложь;
		ЭлементыФормы.ПогашениеЗаймов.ОтборСтрок.Сотрудник.Использование	= Ложь;
		
	Иначе
		
		Если ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока = Неопределено Тогда
			Если РаботникиОрганизации.Количество()>0 Тогда
				ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока = РаботникиОрганизации[0];	
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		мТекущийСотрудник = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока.Сотрудник;
		
		// установим отбор
		ЭлементыФормы.Начисления.ОтборСтрок.Сотрудник.Использование		= Истина;
		ЭлементыФормы.Начисления.ОтборСтрок.Сотрудник.Значение			= мТекущийСотрудник;
		
		ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Использование			= Истина;
		ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Значение				= мТекущийСотрудник;
		
		ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Использование		= Истина;
		ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Значение			= мТекущийСотрудник;
		
		ЭлементыФормы.Удержания.ОтборСтрок.Сотрудник.Использование		= Истина;
		ЭлементыФормы.Удержания.ОтборСтрок.Сотрудник.Значение			= мТекущийСотрудник;
		
		ЭлементыФормы.НДФЛ.ОтборСтрок.Сотрудник.Использование			= Истина;
		ЭлементыФормы.НДФЛ.ОтборСтрок.Сотрудник.Значение				= мТекущийСотрудник;
		
		ЭлементыФормы.ПогашениеЗаймов.ОтборСтрок.Сотрудник.Использование	= Истина;
		ЭлементыФормы.ПогашениеЗаймов.ОтборСтрок.Сотрудник.Значение			= мТекущийСотрудник;
		
	КонецЕсли;
	
	Если НЕ мОтборПоНалогуВзносы Тогда
		
		// отключим отбор
		ЭлементыФормы.Взносы.ОтборСтрок.Налог.Использование			= Ложь;
		
	Иначе
		
		Если ЭлементыФормы.Взносы.ТекущаяСтрока = Неопределено Тогда
			Если ВзносыФОТ.Количество()>0 Тогда
				ЭлементыФормы.Взносы.ТекущаяСтрока = ВзносыФОТ[0];	
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		мВзносыНалог = ЭлементыФормы.Взносы.ТекущаяСтрока.Налог;
		
		// установим отбор
		ЭлементыФормы.Взносы.ОтборСтрок.Налог.Использование		= Истина;
		ЭлементыФормы.Взносы.ОтборСтрок.Налог.Значение			= мВзносыНалог;
		
	КонецЕсли;
	
	Если НЕ мОтборПоНалогуВзносыФОТ Тогда
		
		// отключим отбор
		ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Налог.Использование			= Ложь;
		
	Иначе
		
		Если ЭлементыФормы.ВзносыФОТ.ТекущаяСтрока = Неопределено Тогда
			Если ВзносыФОТ.Количество()>0 Тогда
				ЭлементыФормы.ВзносыФОТ.ТекущаяСтрока = ВзносыФОТ[0];	
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		мВзносыФОТНалог = ЭлементыФормы.ВзносыФОТ.ТекущаяСтрока.Налог;
		
		// установим отбор
		ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Налог.Использование		= Истина;
		ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Налог.Значение			= мВзносыФОТНалог;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		мТекущееФизЛицо = Неопределено;
		Возврат;
	КонецЕсли;
	
	// запомним текущего сотрудника
	мТекущийСотрудник = ТекущаяСтрока.Сотрудник;
	
	ЭлементыФормы.Начисления.ОтборСтрок.Сотрудник.Значение		= мТекущийСотрудник;
	ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Значение			= мТекущийСотрудник;
	ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Значение		= мТекущийСотрудник;
	ЭлементыФормы.Удержания.ОтборСтрок.Сотрудник.Значение		= мТекущийСотрудник;
	ЭлементыФормы.НДФЛ.ОтборСтрок.Сотрудник.Значение			= мТекущийСотрудник;
	ЭлементыФормы.ПогашениеЗаймов.ОтборСтрок.Сотрудник.Значение	= мТекущийСотрудник;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ОтражениеВУчете 

Процедура ОтражениеВУчетеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетДт);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Дт", СведенияОСчете);
	
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетКт);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Кт", СведенияОСчете);
	
	НастройкаВидимостиНалоговыхНазначенийПоЗатратам(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура ОтражениеВУчетеСчетДтПриИзменении(Элемент)
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.ОтражениеВУчете, "Дт", СведенияОСчете);
КонецПроцедуры

Процедура ОтражениеВУчетеСчетКтПриИзменении(Элемент)
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.ОтражениеВУчете, "Кт", СведенияОСчете);
КонецПроцедуры

Процедура ОтражениеВУчетеСтатьяВаловыхРасходовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НазваниеНалоговойДекларации = Перечисления.ВидыНалоговыхДеклараций.ДекларацияОПрибыли;      
	РаботаСДиалогами.НачалоВыбораСтатьяНалоговойДекларации(Элемент, СтандартнаяОбработка, НазваниеНалоговойДекларации);
	
КонецПроцедуры

Процедура ОтражениеВУчетеНалоговоеНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка,Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура ОтражениеВУчетеНалоговоеНазначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура ОтражениеВУчетеНалоговоеНазначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат)
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ Начисления

Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
		
		Если СтрокаРаботники = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрока = Элемент.ТекущаяСтрока;
		ТекущаяСтрока.Сотрудник		= ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
		ТекущаяСтрока.Назначение	= ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
		
		ТекущаяСтрока.ДатаНачала			= НачалоМесяца(ПериодРегистрации);
		ТекущаяСтрока.ДатаОкончания			= КонецМесяца(ПериодРегистрации);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура НачисленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	// Дт
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетДт);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Дт", СведенияОСчете);
	
	// Кт
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетКт);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Кт", СведенияОСчете);
	
	Если ДанныеСтроки.Назначение.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(51, 51, 153);
	
	ИначеЕсли ДанныеСтроки.Назначение.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(0, 128, 128);
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.Назначение.ОсновноеНазначение)
		И ДанныеСтроки.Назначение.ОсновноеНазначение <> ДанныеСтроки.Сотрудник
		ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки.Назначение.ОсновноеНазначение)
		И ДанныеСтроки.Назначение <> ДанныеСтроки.Сотрудник
		 Тогда
	     // это замены
		ОформлениеСтроки.ЦветТекста = Новый Цвет(80, 128, 128);
		
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Период.Видимость = Ложь;
	
	НастройкаВидимостиНалоговыхНазначенийПоЗатратам(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура НачисленияФизЛицоПриИзменении(Элемент)
	
	ДатаСобытия = ?(ЗначениеЗаполнено(ЭлементыФормы.Начисления.ТекущиеДанные.ДатаОкончания), ЭлементыФормы.Начисления.ТекущиеДанные.ДатаОкончания, Дата);
	ПроведениеРасчетов.ПроставитьДанныеСтроки(ЭлементыФормы.Начисления.ТекущиеДанные.Сотрудник, Элемент.Значение, ДатаСобытия, ПериодРегистрации, ЭлементыФормы.Начисления.ТекущаяСтрока.ВидРасчета, ЭлементыФормы.Начисления.ТекущаяСтрока);
	Если Не ЗначениеЗаполнено(ЭлементыФормы.Начисления.ТекущиеДанные.Сотрудник) Тогда
		ЭлементыФормы.Начисления.ТекущиеДанные.Сотрудник = ?(Элемент.Значение.ОсновноеНазначение=Справочники.СотрудникиОрганизаций.ПустаяСсылка(), Элемент.Значение, Элемент.Значение.ОсновноеНазначение);
	КонецЕсли;
	ЭлементыФормы.Начисления.ТекущиеДанные.ДатаНачала = НачалоМесяца(ПериодРегистрации);
	ЭлементыФормы.Начисления.ТекущиеДанные.ДатаОкончания = КонецМесяца(ПериодРегистрации);

КонецПроцедуры

Процедура НачисленияФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	// переопеределим выбор физлица на выбор из списка регистра сведений
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина,  Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
КонецПроцедуры

Процедура НачисленияСчетДтПриИзменении(Элемент)
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.Начисления, "Дт", СведенияОСчете);
КонецПроцедуры

Процедура НачисленияСчетКтПриИзменении(Элемент)
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.Начисления, "Кт", СведенияОСчете);
КонецПроцедуры

Процедура НачисленияНалоговоеНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка,Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура НачисленияНалоговоеНазначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура НачисленияНалоговоеНазначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат)
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ Начисления

Процедура КоманднаяПанельНачисленийРассчитать(Кнопка)
	Перем мСотрудники, КомментироватьРасчет;
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьСписокСотрудниковДляРасчета( Кнопка, Начисления, "Начисления", мСотрудники, КомментироватьРасчет ) Тогда
		Возврат;
	КонецЕсли;

	РассчитатьНачисления(мСотрудники);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ Табличной части "Взносы"

Процедура ВзносыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетДт);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Дт", СведенияОСчете);
	
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетКт);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Кт", СведенияОСчете);
	
КонецПроцедуры

Процедура ВзносыПриАктивизацииСтроки(Элемент)
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
КонецПроцедуры

Процедура ВзносыСчетДтПриИзменении(Элемент)
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.Взносы, "Дт", СведенияОСчете);
КонецПроцедуры

Процедура ВзносыСчетКтПриИзменении(Элемент)
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.Взносы, "Кт", СведенияОСчете);
КонецПроцедуры

Процедура КоманднаяПанельВзносыОтборПоНалогу(Кнопка)
		
	мОтборПоНалогуВзносы = НЕ мОтборПоНалогуВзносы;
	УстановитьОтборСписка();

КонецПроцедуры

Процедура КоманднаяПанельВзносыРассчитать(Кнопка)
	Перем мСотрудники, КомментироватьРасчет;
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьСписокСотрудниковДляРасчета( Кнопка, Взносы, "Взносы", мСотрудники, КомментироватьРасчет ) Тогда
		Возврат;
	КонецЕсли;

	РассчитатьВзносы( мСотрудники );

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ Табличной части "ВзносыФОТ"

Процедура ВзносыФОТПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетДт);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Дт", СведенияОСчете);
	
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетКт);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Кт", СведенияОСчете);
	
	НастройкаВидимостиНалоговыхНазначенийПоЗатратам(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура ВзносыФОТПриАктивизацииСтроки(Элемент)
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
КонецПроцедуры

Процедура ВзносыФОТСтатьяВаловыхРасходовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НазваниеНалоговойДекларации = Перечисления.ВидыНалоговыхДеклараций.ДекларацияОПрибыли;      
	РаботаСДиалогами.НачалоВыбораСтатьяНалоговойДекларации(Элемент, СтандартнаяОбработка, НазваниеНалоговойДекларации);
	
КонецПроцедуры

Процедура ВзносыФОТСчетДтПриИзменении(Элемент)
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.ВзносыФОТ, "Дт", СведенияОСчете);
КонецПроцедуры

Процедура ВзносыФОТСчетКтПриИзменении(Элемент)
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.ВзносыФОТ, "Кт", СведенияОСчете);
КонецПроцедуры

Процедура ВзносыФОТНалоговоеНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка,Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура ВзносыФОТНалоговоеНазначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура ВзносыФОТНалоговоеНазначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат)
КонецПроцедуры

Процедура КоманднаяПанельВзносыФОТОтборПоНалогу(Кнопка)
		
	мОтборПоНалогуВзносыФОТ = НЕ мОтборПоНалогуВзносыФОТ;
	УстановитьОтборСписка();

КонецПроцедуры

Процедура КоманднаяПанельВзносыФОТРассчитать(Кнопка)
	Перем мСотрудники, КомментироватьРасчет;
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьСписокСотрудниковДляРасчета( Кнопка, ВзносыФОТ, "ВзносыФОТ", мСотрудники, КомментироватьРасчет ) Тогда
		Возврат;
	КонецЕсли;

	РассчитатьВзносыФОТ( мСотрудники );

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ Табличной части "НДФЛ"

Процедура НДФЛПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетДт);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Дт", СведенияОСчете);
	
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетКт);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Кт", СведенияОСчете);
	
КонецПроцедуры

Процедура НДФЛПриАктивизацииСтроки(Элемент)
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
КонецПроцедуры

Процедура НДФЛСчетДтПриИзменении(Элемент)
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.НДФЛ, "Дт", СведенияОСчете);
КонецПроцедуры

Процедура НДФЛСчетКтПриИзменении(Элемент)
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.НДФЛ, "Кт", СведенияОСчете);
КонецПроцедуры

Процедура КоманднаяПанельНДФЛРассчитать(Кнопка)
	Перем мСотрудники, КомментироватьРасчет;
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьСписокСотрудниковДляРасчета( Кнопка, НДФЛ, "НДФЛ", мСотрудники, КомментироватьРасчет ) Тогда
		Возврат;
	КонецЕсли;

	РассчитатьНДФЛ( мСотрудники );

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ Табличной части "Удержания"

Процедура УдержанияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетДт);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Дт", СведенияОСчете);
	
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетКт);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Кт", СведенияОСчете);
	
КонецПроцедуры

Процедура УдержанияПриАктивизацииСтроки(Элемент)
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
КонецПроцедуры

Процедура УдержанияСчетДтПриИзменении(Элемент)
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.Удержания, "Дт", СведенияОСчете);
КонецПроцедуры

Процедура УдержанияСчетКтПриИзменении(Элемент)
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.Удержания, "Кт", СведенияОСчете);
КонецПроцедуры

Процедура КоманднаяПанельУдержанияРассчитать(Кнопка)
	Перем мСотрудники, КомментироватьРасчет;
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьСписокСотрудниковДляРасчета( Кнопка, Удержания, "Удержания", мСотрудники, КомментироватьРасчет ) Тогда
		Возврат;
	КонецЕсли;

	РассчитатьУдержания( мСотрудники );
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ Табличной части "ПогашениеЗаймов"

Процедура ПогашениеЗаймовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетДт);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Дт", СведенияОСчете);
	
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетКт);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Кт", СведенияОСчете);
	
КонецПроцедуры

Процедура ПогашениеЗаймовПриАктивизацииСтроки(Элемент)
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
КонецПроцедуры

Процедура ПогашениеЗаймовСчетДтПриИзменении(Элемент)
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.ПогашениеЗаймов, "Дт", СведенияОСчете);
КонецПроцедуры

Процедура ПогашениеЗаймовСчетКтПриИзменении(Элемент)
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.ПогашениеЗаймов, "Кт", СведенияОСчете);
КонецПроцедуры

Процедура КоманднаяПанельПогашениеЗаймовРассчитать(Кнопка)
	Перем мСотрудники, КомментироватьРасчет;
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьСписокСотрудниковДляРасчета( Кнопка, ПогашениеЗаймов, "ПогашениеЗаймов", мСотрудники, КомментироватьРасчет ) Тогда
		Возврат;
	КонецЕсли;

	РассчитатьПогашениеЗаймов( мСотрудники );
	
КонецПроцедуры

Процедура ОтражениеВУчетеВидНалоговойДеятельностиНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
		
	мСотрудник = Элемент.ТекущаяСтрока.Сотрудник;

КонецПроцедуры

Процедура УдалитьФизЛицоИзТабличнойЧасти(текТабличнаяЧасть)
	
	ТекСтрока = текТабличнаяЧасть.Найти(мСотрудник,"Сотрудник");
	Пока ТекСтрока <> Неопределено Цикл
		текТабличнаяЧасть.Удалить(ТекСтрока);
	    ТекСтрока = текТабличнаяЧасть.Найти(мСотрудник,"Сотрудник");
	КонецЦикла; 
	
КонецПроцедуры

Процедура РаботникиОрганизацииПослеУдаления(Элемент)
	
	УдалитьФизЛицоИзТабличнойЧасти(Начисления); 
	УдалитьФизЛицоИзТабличнойЧасти(Взносы); 
	УдалитьФизЛицоИзТабличнойЧасти(ВзносыФОТ); 
	УдалитьФизЛицоИзТабличнойЧасти(НДФЛ); 
	УдалитьФизЛицоИзТабличнойЧасти(Удержания); 
	УдалитьФизЛицоИзТабличнойЧасти(ПогашениеЗаймов); 
	
КонецПроцедуры

Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	// переопеределим выбор физлица на выбор из списка регистра сведений
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина,  Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)
	Серна.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(), Ссылка, ЭтотОбъект); 
КонецПроцедуры // ОсновныеДействияФормыНастройка()

Процедура ДействияФормыОчиститьМесячныйБонус(Кнопка)
	Если ЭтоМесячныйБонус Тогда
		// Очистим полностью ТЧ не относящиеся к месячным бонусам
		Взносы.Очистить();
		НДФЛ.Очистить();
		Удержания.Очистить();
		ПогашениеЗаймов.Очистить();
		ВзносыФОТ.Очистить();
		// ТЧ Начисления очистим только от "ненужных" видов расчета
		лКолвоСтрок = Начисления.Количество();
		Для ном=1 По лКолвоСтрок Цикл
			лНомерСтроки = лКолвоСтрок - ном;
			лСтрока = Начисления[лНомерСтроки];
			Если лСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТорговыйБонусЕжемесячный Тогда Продолжить; КонецЕсли;
			Начисления.Удалить( лСтрока );
		КонецЦикла;
		
		// ТЧ ОтражениеВУчете очистим только от "ненужных" проводок
		лКолвоСтрок = ОтражениеВУчете.Количество();
		Для ном=1 По лКолвоСтрок Цикл
			лНомерСтроки = лКолвоСтрок - ном;
			лСтрока = ОтражениеВУчете[лНомерСтроки];
			Если Не лСтрока.СчетДт = ПланыСчетов.Хозрасчетный.АдминистративныеРасходы Тогда 
				ОтражениеВУчете.Удалить( лСтрока );
			ИначеЕсли Не лСтрока.СубконтоДт2 = Справочники.СтатьиЗатрат.ТорговыйБонусЕжемесячный Тогда 
				ОтражениеВУчете.Удалить( лСтрока );
			КонецЕсли;
		КонецЦикла;
	Иначе
		// ТЧ Начисления очистим только от "ненужных" видов расчета
		лКолвоСтрок = Начисления.Количество();
		Для ном=1 По лКолвоСтрок Цикл
			лНомерСтроки = лКолвоСтрок - ном;
			лСтрока = Начисления[лНомерСтроки];
			Если Не лСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТорговыйБонусЕжемесячный Тогда Продолжить; КонецЕсли;
			Начисления.Удалить( лСтрока );
		КонецЦикла;
		
		// ТЧ ОтражениеВУчете очистим только от "ненужных" проводок
		лКолвоСтрок = ОтражениеВУчете.Количество();
		Для ном=1 По лКолвоСтрок Цикл
			лНомерСтроки = лКолвоСтрок - ном;
			лСтрока = ОтражениеВУчете[лНомерСтроки];
			Если (лСтрока.СчетДт = ПланыСчетов.Хозрасчетный.АдминистративныеРасходы) И (лСтрока.СубконтоДт2 = Справочники.СтатьиЗатрат.ТорговыйБонусЕжемесячный) Тогда 
				ОтражениеВУчете.Удалить( лСтрока );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры




мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
мСинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]				= Ложь;
мСинхронизируемыеТабличныеЧасти["Начисления"]				= Ложь;
мСинхронизируемыеТабличныеЧасти["Взносы"]					= Ложь;
мСинхронизируемыеТабличныеЧасти["ВзносыФОТ"]				= Ложь;
мСинхронизируемыеТабличныеЧасти["НДФЛ"]					    = Ложь;
мСинхронизируемыеТабличныеЧасти["Удержания"]				= Ложь;
мСинхронизируемыеТабличныеЧасти["ПогашениеЗаймов"]			= Ложь;



мСведенияОСчетах = Новый Соответствие;
мСведенияОСтатьяхЗатрат = Новый Соответствие;

мСпискВыбораВНД = Новый СписокЗначений;
мСпискВыбораВНД.Добавить(Справочники.ВидыНалоговойДеятельности.НеОблагаемая);
мСпискВыбораВНД.Добавить(Справочники.ВидыНалоговойДеятельности.ОблагаемаяПоОбычнойСтавке);

мОтборПоСотруднику = ВосстановитьЗначение("ОтборСпискаОтражениеЗП");
Если мОтборПоСотруднику = Неопределено Тогда
	 мОтборПоСотруднику = Ложь;
 КонецЕсли;
 мОтборПоНалогуВзносыФОТ = Ложь; 
 мОтборПоНалогуВзносы = Ложь;