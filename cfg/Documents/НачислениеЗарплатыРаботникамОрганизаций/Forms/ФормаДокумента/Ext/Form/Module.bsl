////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;    

// для синхронизации строк табличных полей
Перем мСинхронизируемыеТабличныеЧасти;
Перем мТекущийСотрудник;
Перем мСписокЗапрещенныхСпособовРасчета;
Перем мСписокНедоступныхКодовНДФЛ;
Перем мСведенияОВидахРасчета;
Перем мСотрудник;
Перем мНеСпросили;

Перем мОтборПоСотруднику;
Перем мОтборПоНалогуВзносы;
Перем мОтборПоНалогуВзносыФОТ;
Перем мОтборПоСуммеВзносы;
Перем мОтборПоСуммеВзносыФОТ;

Перем мРезультат;
Перем мОтработаноДней;
Перем мОтработаноЧасов;
Перем мНормаДней;
Перем мНормаЧасов;
Перем мКалендарныеДни;
Перем мОплаченоДнейЧасов;

Перем мДопСведенияОВидахРасчетаНачислений;

Перем мНалог;
Перем мДоход;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем 	мРежимДоНачалаРаботы;

// Механизм исправлений
Перем мДокументыИсправление;
Перем мДокументСторнирование;
Перем мСотрудникиИсправление;
Перем мМенюИсправление;
Перем мКнопкаИсправлениеТекущийСотрудник;
Перем мКнопкаИсправлениеВесьДокумент;
Перем мКнопкаИсправлениеСписокСотрудников;
Перем мКнопкаОтменаИсправление;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьРасчетныйЛисток(Редактирование = Ложь, ТекущийСотрудник = НеОпределено)
	
	Если ТекущийСотрудник = НеОпределено Тогда
		Если ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		ТекущийСотрудник	= ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
		ЭтоСотрудник = Истина;
	КонецЕсли;
	
	Если ТекущийСотрудник = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
		Если Редактирование Тогда
			ТабличноеПолеРасчетногоЛистка = ЭлементыФормы.ТабличноеПолеРасчетногоЛистка;
			ТабличноеПолеРасчетногоЛистка.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли; 
	
	Если Редактирование или ТекущийСотрудник <> мТекущийСотрудник  Тогда
		ВременныйТабличныйДокумент = ЗаполнитьТаблицуРасчетногоЛистка(ТекущийСотрудник);
		ТабличноеПолеРасчетногоЛистка = ЭлементыФормы.ТабличноеПолеРасчетногоЛистка;
		ТабличноеПолеРасчетногоЛистка.Очистить();
		ТабличноеПолеРасчетногоЛистка.Вывести(ВременныйТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьРасчетныйЛисток()

Функция ПолучитьСписокСотрудниковДляАвтозаполнения( Кнопка, ИмяТабличнойЧасти, ТабличнаяЧасть, мСотрудники )
	
	мСотрудники = Новый СписокЗначений;
	Если Найти(Кнопка.Имя,"ПоРаботнику")>0 Тогда
		
		мСотрудникиТекст = "";
		РазделительТекст = "";
		Для каждого СтрокаСотрудник Из ЭлементыФормы.РаботникиОрганизации.ВыделенныеСтроки Цикл
			мСотрудники.Добавить(СтрокаСотрудник.Сотрудник) ;
			мСотрудникиТекст = мСотрудникиТекст + РазделительТекст + СтрокаСотрудник.Сотрудник;
			РазделительТекст = "; ";
		КонецЦикла; 
	
		ТекстВопроса = НСтр("ru='Перед заполнением из табличной части ""';uk='Перед заповненням з табличної частини ""'")+ИмяТабличнойЧасти+НСтр("ru='"" будут удалены данные по сотрудникам: ';uk='"" будуть вилучені дані по співробітниках: '") + мСотрудникиТекст + НСтр("ru='. Продолжить?';uk='. Продовжити?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПроведениеРасчетов.УдалитьСтрокиПоУсловию( ТабличнаяЧасть, мСотрудники ); 
		Записать();
		
	Иначе
		
		// по всем сотрудникам ТЧ Работникиорганизации
		мСотрудники.ЗагрузитьЗначения( РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник") );
		Если ТабличнаяЧасть.Количество() > 0 Тогда
			
			ТекстВопроса = НСтр("ru='Перед заполнением табличная часть ""';uk='Перед заповненням таблична частина ""'")+ИмяТабличнойЧасти+НСтр("ru='"" будет очищена. Продолжить?';uk='"" буде очищена. Продовжити?'");
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ТабличнаяЧасть.Очистить();
			Записать();
		ИначеЕсли Модифицированность() Тогда
			ТекстВопроса = НСтр("ru='Перед заполнением докумет необходимо записать. Продолжить?';uk='Перед заповненням документ необхідно записати. Продовжити?'");
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			КонецЕсли;
			Записать();
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции		

Функция ПолучитьСписокСотрудниковДляРасчета( Кнопка, ИмяТабличнойЧасти, ТабличнаяЧасть, мСотрудники, КомментироватьРасчет )
	
	КомментироватьРасчет = Ложь;
	мСотрудники = Новый СписокЗначений;
	
	Если Найти(Кнопка.Имя,"ПоРаботнику") > 0 Тогда
		
		Для каждого СтрокаСотрудник Из ЭлементыФормы.РаботникиОрганизации.ВыделенныеСтроки Цикл
			мСотрудники.Добавить(СтрокаСотрудник.Сотрудник);
		КонецЦикла; 
		
		Если Найти(Кнопка.Имя,"СКомментарием") > 0  Тогда
			КомментироватьРасчет = Истина;
		КонецЕсли;
		
	Иначе 
		
		мСотрудники.ЗагрузитьЗначения(РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник"));
		
	КонецЕсли;
	
	ПроверятьСторнируемыйДокумент = Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("СторнируемыйДокумент")<>Неопределено;
	ПроведениеРасчетов.УдалитьСтрокиСторноПоУсловию( ТабличнаяЧасть, мСотрудники, ПроверятьСторнируемыйДокумент ); 
	Записать();
	
	Возврат Истина;
	
КонецФункции		

Функция РасчетДокументаРазрешен()
	
	КонфликтныеДокументы = ПолучитьДокументыРасчетаЗаВесьМесяц().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Успешно = КонфликтныеДокументы.Количество() = 0;
	
	Если Не Успешно Тогда
		СтрокаЗаголовок = НСтр("ru='Расчет невозможен так, как выполнено начисление зарплаты за ';uk='Розрахунок неможливий так, як виконано нарахування зарплати за '") 
				+ Формат(ПериодРегистрации,"ДФ=ММММ") + "." + Символы.ПС + НСтр("ru='Для расчета Вы можете отменить проведение следующих документов:';uk='Для розрахунку Ви можете скасувати проведення наступних документів:'");
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		ОбщегоНазначения.ОшибкаРасчета(СтрокаЗаголовок);
		
		Пока КонфликтныеДокументы.Следующий() Цикл
			
			КонфликтныеСотрудники = КонфликтныеДокументы.Выбрать();
			КомментарийВидаРасчета = ОбщегоНазначения.КомментарийРасчета("",, КонфликтныеДокументы.Представление, КонфликтныеДокументы.Ссылка);
			
			Пока КонфликтныеСотрудники.Следующий() Цикл
				ОбщегоНазначения.КомментарийРасчета("",КомментарийВидаРасчета, НСтр("ru=' стр.';uk=' стор.'") + КонфликтныеСотрудники.НомерСтроки + " " + КонфликтныеСотрудники.Сотрудник.Наименование,"");
			КонецЦикла;
			
		КонецЦикла;
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;
	
	Возврат Успешно;

КонецФункции

// Записывает документ в режиме отмены проведения, спросив об этом у пользователя
Функция ЗаписатьДокументОтменивПроведение(Действие = "рассчитать")

	Если Проведен Тогда
		
		Если Вопрос(НСтр("ru='Автоматически ';uk='Автоматично '") + Действие +НСтр("ru=' документ можно только после отмены его проведения. Выполнить отмену проведения документа?';uk=' документ можна тільки після скасування його проведення. Виконати скасування проведення документа?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
		
	ИначеЕсли Модифицированность ИЛИ ЭтоНовый() Тогда
		
		Если Вопрос(НСтр("ru='Автоматически ';uk='Автоматично '") + Действие +НСтр("ru=' документ можно только после его записи. Записать?';uk=' документ можна тільки після його запису. Записати?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции  

Функция ОчиститьТабличныеЧасти(ЗадаватьВопрос = Истина)
	
	Если РаботникиОрганизации.Количество() > 0 
		ИЛИ Начисления.Количество() > 0
		ИЛИ Взносы.Количество() > 0
		ИЛИ ВзносыФОТ.Количество() > 0
		ИЛИ Удержания.Количество() > 0
		ИЛИ НДФЛ.Количество() > 0
		ИЛИ ПогашениеЗаймов.Количество() > 0
		Тогда
		
		Если ЗадаватьВопрос Тогда
			
			ТекстВопроса = НСтр("ru='Табличные части будут очищены. Продолжить?';uk='Табличні частини будуть очищені. Продовжити?'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			КонецЕсли; 
			
		КонецЕсли;
		
		РаботникиОрганизации.Очистить();
		Начисления.Очистить();
		Взносы.Очистить();
		ВзносыФОТ.Очистить();
		Удержания.Очистить();
		НДФЛ.Очистить();
		ПогашениеЗаймов.Очистить();
		
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

Процедура УдалитьСотрудникаИзТабличнойЧасти(текТабличнаяЧасть)
	
	ТекСтрока = текТабличнаяЧасть.Найти(мСотрудник,"Сотрудник");
	Пока ТекСтрока <> Неопределено Цикл
		текТабличнаяЧасть.Удалить(ТекСтрока);
	    ТекСтрока = текТабличнаяЧасть.Найти(мСотрудник,"Сотрудник");
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПанельРасчетаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// если активная страница с расчетным листком, то получить расчетный листок 
	Если ЭлементыФормы.ПанельРасчета.ТекущаяСтраница.Имя = "РасчетныйЛисток"  Тогда	
		ЗаполнитьРасчетныйЛисток(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборСписка()
	
	КнопкаПереключитьОтборСписка = ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПереключитьОтборСписка;
	КнопкаПереключитьОтборСписка.Картинка = ?(мОтборПоСотруднику, БиблиотекаКартинок.ФизическоеЛицо, БиблиотекаКартинок.ФизическиеЛица);
	
	КнопкаПереключитьОтборПоНалогу = ЭлементыФормы.КоманднаяПанельВзносыФОТ.Кнопки.ОтборПоНалогу;
	КнопкаПереключитьОтборПоНалогу.Картинка = ?(мОтборПоНалогуВзносыФОТ, БиблиотекаКартинок.ОтключитьОтбор, БиблиотекаКартинок.ОтборПоТекущемуЗначению);
	
	КнопкаПереключитьОтборПоНалогу = ЭлементыФормы.КоманднаяПанельВзносы.Кнопки.ОтборПоНалогу;
	КнопкаПереключитьОтборПоНалогу.Картинка = ?(мОтборПоНалогуВзносы, БиблиотекаКартинок.ОтключитьОтбор, БиблиотекаКартинок.ОтборПоТекущемуЗначению);
	
	КнопкаПереключитьОтборПоСумме = ЭлементыФормы.КоманднаяПанельВзносы.Кнопки.ОтборПоСумме;
	КнопкаПереключитьОтборПоСумме.Картинка = ?(мОтборПоСуммеВзносы, БиблиотекаКартинок.ОтключитьОтбор, БиблиотекаКартинок.ОтборИСортировка);
	
	КнопкаПереключитьОтборПоСумме = ЭлементыФормы.КоманднаяПанельВзносыФОТ.Кнопки.ОтборПоСумме;
	КнопкаПереключитьОтборПоСумме.Картинка = ?(мОтборПоСуммеВзносыФОТ, БиблиотекаКартинок.ОтключитьОтбор, БиблиотекаКартинок.ОтборИСортировка);
	
	Если НЕ мОтборПоСотруднику Тогда
		
		// отключим отбор
		ЭлементыФормы.Начисления.ОтборСтрок.Сотрудник.Использование			= Ложь;
		ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Использование				= Ложь;
		ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Использование			= Ложь;
		ЭлементыФормы.НДФЛ.ОтборСтрок.Сотрудник.Использование				= Ложь;
		ЭлементыФормы.Удержания.ОтборСтрок.Сотрудник.Использование			= Ложь;
		ЭлементыФормы.ПогашениеЗаймов.ОтборСтрок.Сотрудник.Использование	= Ложь;
		
	Иначе
		
		Если ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока = Неопределено Тогда
			Если РаботникиОрганизации.Количество()>0 Тогда
				ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока = РаботникиОрганизации[0];	
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		мТекущийСотрудник = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока.Сотрудник;
		
		// установим отбор
		ЭлементыФормы.Начисления.ОтборСтрок.Сотрудник.Использование		= Истина;
		ЭлементыФормы.Начисления.ОтборСтрок.Сотрудник.Значение			= мТекущийСотрудник;
		
		ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Использование			= Истина;
		ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Значение				= мТекущийСотрудник;
		
		ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Использование		= Истина;
		ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Значение			= мТекущийСотрудник;
		
		ЭлементыФормы.Удержания.ОтборСтрок.Сотрудник.Использование		= Истина;
		ЭлементыФормы.Удержания.ОтборСтрок.Сотрудник.Значение			= мТекущийСотрудник;
		
		ЭлементыФормы.НДФЛ.ОтборСтрок.Сотрудник.Использование			= Истина;
		ЭлементыФормы.НДФЛ.ОтборСтрок.Сотрудник.Значение				= мТекущийСотрудник;
		
		ЭлементыФормы.ПогашениеЗаймов.ОтборСтрок.Сотрудник.Использование	= Истина;
		ЭлементыФормы.ПогашениеЗаймов.ОтборСтрок.Сотрудник.Значение			= мТекущийСотрудник;
		
	КонецЕсли;
	
	Если НЕ мОтборПоНалогуВзносы Тогда
		
		// отключим отбор
		ЭлементыФормы.Взносы.ОтборСтрок.Налог.Использование			= Ложь;
		
	Иначе
		
		Если ЭлементыФормы.Взносы.ТекущаяСтрока = Неопределено Тогда
			Если Взносы.Количество()>0 Тогда
				ЭлементыФормы.Взносы.ТекущаяСтрока = Взносы[0];	
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если ЭлементыФормы.Взносы.ТекущаяСтрока <> Неопределено Тогда 
			мВзносыНалог = ЭлементыФормы.Взносы.ТекущаяСтрока.Налог;
			// установим отбор
			ЭлементыФормы.Взносы.ОтборСтрок.Налог.Использование		= Истина;
			ЭлементыФормы.Взносы.ОтборСтрок.Налог.Значение			= мВзносыНалог;
		КонецЕсли;			
	КонецЕсли;
	
	Если НЕ мОтборПоСуммеВзносы Тогда
		// отключим отбор
		ЭлементыФормы.Взносы.ОтборСтрок.Результат.Использование			= Ложь;
	Иначе
		// установим отбор
		ЭлементыФормы.Взносы.ОтборСтрок.Результат.Использование		= Истина;
		ЭлементыФормы.Взносы.ОтборСтрок.Результат.Значение			= 0;
		ЭлементыФормы.Взносы.ОтборСтрок.Результат.ВидСравнения		= ВидСравнения.НеРавно;
	КонецЕсли;
	
	Если НЕ мОтборПоНалогуВзносыФОТ Тогда
		
		// отключим отбор
		ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Налог.Использование			= Ложь;
		
	Иначе
		
		Если ЭлементыФормы.ВзносыФОТ.ТекущаяСтрока = Неопределено Тогда
			Если ВзносыФОТ.Количество()>0 Тогда
				ЭлементыФормы.ВзносыФОТ.ТекущаяСтрока = ВзносыФОТ[0];	
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если ЭлементыФормы.ВзносыФОТ.ТекущаяСтрока <> Неопределено Тогда
			мВзносыФОТНалог = ЭлементыФормы.ВзносыФОТ.ТекущаяСтрока.Налог;
			// установим отбор
			ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Налог.Использование		= Истина;
			ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Налог.Значение			= мВзносыФОТНалог;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ мОтборПоСуммеВзносыФОТ Тогда
		// отключим отбор
		ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Результат.Использование			= Ложь;
	Иначе
		// установим отбор
		ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Результат.Использование		= Истина;
		ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Результат.Значение			= 0;
		ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Результат.ВидСравнения		= ВидСравнения.НеРавно;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
		
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельНачислений);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Взносы,ЭлементыФормы.КоманднаяПанельВзносы);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Удержания,ЭлементыФормы.КоманднаяПанельУдержаний);
	СоответствиеТЧ.Вставить(ЭлементыФормы.НДФЛ,ЭлементыФормы.КоманднаяПанельНДФЛ);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПогашениеЗаймов,ЭлементыФормы.КоманднаяПанельЗаймов);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВзносыФОТ,ЭлементыФормы.КоманднаяПанельВзносыФОТ);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

Процедура УстановитьНадписьРежимВвода()
	
	мРежимДоНачалаРаботы = Ложь;
	Надпись = "";
	ПараметрыРасчета = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура("Организация", Организация));
	
	Если ПараметрыРасчета <> Неопределено Тогда
		ДатаНачалаРедактирования = ПараметрыРасчета.ДатаНачалаРаботы;
		
		Если ЗначениеЗаполнено(ДатаНачалаРедактирования) 
			И ДатаНачалаРедактирования > ПериодРегистрации
			Тогда
			мРежимДоНачалаРаботы = Истина;
			Надпись = НСтр("ru='Режим: До начала работы (';uk='Режим: До початку роботи ('") + Формат(ДатаНачалаРедактирования, "ДФ = ""ММММ гггг""") + ")";
		КонецЕсли;	
	КонецЕсли;
	
	ЭлементыФормы.НадписьРежимВвода.Заголовок = Надпись; 
	
	ЭлементыФормы.ПанельРасчета.Страницы.Взносы.Видимость = НЕ мРежимДоНачалаРаботы;
	ЭлементыФормы.ПанельРасчета.Страницы.ВзносыНаФОТ.Видимость = НЕ мРежимДоНачалаРаботы;
	ЭлементыФормы.ПанельРасчета.Страницы.НДФЛ.Видимость = НЕ мРежимДоНачалаРаботы;
	ЭлементыФормы.ПанельРасчета.Страницы.Займы.Видимость = НЕ мРежимДоНачалаРаботы;
	ЭлементыФормы.ПанельРасчета.Страницы.Удержания.Видимость = НЕ мРежимДоНачалаРаботы;
	
	
КонецПроцедуры // УстановитьКнопкиПечати()

Процедура ОбновитьОписаниеСостоянияДокумента()

	// связанные документы
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	Сторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	СтрокНДФЛ = НДФЛ.Количество();
	
	НеЗаполнен = Не ЗначениеЗаполнено(Организация)
				Или (Начисления.Количество() = 0 И Удержания.Количество() = 0
				И СтрокНДФЛ = 0 И ПогашениеЗаймов.Количество() = 0 И Взносы.Количество() = 0 И ВзносыФОТ.Количество() = 0);
	
	ЗаполненСОшибками = Ложь;
				
	СтруктураРезультата = Новый Структура("Результат, Сторно",0,Ложь);
	СтруктураНовыхЗаписей = Новый Структура("Сторно",Ложь);
	СтрокЗаймов = ПогашениеЗаймов.НайтиСтроки(СтруктураНовыхЗаписей).Количество();
	
	ЗаполненСОшибками = ЗаполненСОшибками Или Начисления.НайтиСтроки(Новый Структура("Назначение",Справочники.СотрудникиОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или Начисления.НайтиСтроки(Новый Структура("ВидРасчета",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или Удержания.НайтиСтроки(Новый Структура("Сотрудник",Справочники.СотрудникиОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или Удержания.НайтиСтроки(Новый Структура("ВидРасчета",ПланыВидовРасчета.УдержанияОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или Взносы.НайтиСтроки(Новый Структура("Сотрудник",Справочники.СотрудникиОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или Взносы.НайтиСтроки(Новый Структура("ВидРасчета",ПланыВидовРасчета.ВзносыВФонды.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или ВзносыФОТ.НайтиСтроки(Новый Структура("Сотрудник",Справочники.СотрудникиОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или ВзносыФОТ.НайтиСтроки(Новый Структура("ВидРасчета",ПланыВидовРасчета.ВзносыВФонды.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или ПогашениеЗаймов.НайтиСтроки(Новый Структура("Сотрудник",Справочники.СотрудникиОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или ПогашениеЗаймов.НайтиСтроки(Новый Структура("ДоговорЗайма",Документы.ДоговорЗаймаСРаботником.ПустаяСсылка())).Количество() > 0;
	
	НеРассчитан = Начисления.НайтиСтроки(СтруктураРезультата).Количество() = Начисления.НайтиСтроки(СтруктураНовыхЗаписей).Количество() И Начисления.НайтиСтроки(СтруктураНовыхЗаписей).Количество() > 0;
	НеРассчитан = НеРассчитан Или Удержания.НайтиСтроки(СтруктураРезультата).Количество() = Удержания.НайтиСтроки(СтруктураНовыхЗаписей).Количество() И Удержания.НайтиСтроки(СтруктураНовыхЗаписей).Количество() > 0;
	НеРассчитан = НеРассчитан Или НДФЛ.НайтиСтроки(Новый Структура("Налог",0)).Количество() = СтрокНДФЛ И СтрокНДФЛ > 0;
	НеРассчитан = НеРассчитан Или ПогашениеЗаймов.НайтиСтроки(Новый Структура("ПогашеноЗайма",0)).Количество() = СтрокЗаймов И СтрокЗаймов > 0 И ПогашениеЗаймов.НайтиСтроки(Новый Структура("НачисленоПроцентов",0)).Количество() = СтрокЗаймов;
	
	НеРассчитан = Начисления.НайтиСтроки(Новый Структура("Результат, Сторно",0,Ложь)).Количество() = Начисления.НайтиСтроки(Новый Структура("Сторно",Ложь)).Количество() И Начисления.НайтиСтроки(Новый Структура("Сторно",Ложь)).Количество() > 0;
	
	ОписаниеСостоянияДокумента = РаботаСДиалогами.ПолучитьОписаниеРасчетногоДокумента(Не НеЗаполнен,ЗаполненСОшибками,Не НеРассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Сторнирован, ТолькоПросмотр, Ложь,Ложь); // поля структуры описания - ТекстСообщения и ВажностьСообщения
	РаботаСДиалогами.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

Процедура ПолучитьСотрудниковСИсправлениями()

	мСотрудникиИсправление = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.Назначение
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка В(&Исправления)";
	Запрос.УстановитьПараметр("Исправления",мДокументыИсправление);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		мСотрудникиИсправление.Вставить(Выборка.Сотрудник, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьКнопкиИсправленияДокумента(ДокументИсправлен = Неопределено, ИсправленВесьДокумент = Неопределено, ДокументСторнирован = Неопределено)
	
	Если ДокументИсправлен = Неопределено Тогда
		ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	КонецЕсли;
	Если ДокументСторнирован = Неопределено Тогда
		ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	КонецЕсли;
	
	Если ИсправленВесьДокумент = Неопределено Тогда
		ИсправленВесьДокумент = ДокументИсправлен;
		Если ИсправленВесьДокумент Тогда
			Для каждого СтрокаТЧ Из Начисления Цикл
				ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
				Если Не ИсправленВесьДокумент Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументСторнирован Или ПериодРегистрации >= НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
		ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	Иначе 
		
		Кнопки = ЭлементыФормы.ДополнительныеДействия.Кнопки;
		Если Кнопки.Количество() = 0 Тогда
			МенюИсправить = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Подменю);
			ЗаполнитьЗначенияСвойств(МенюИсправить, мМенюИсправление);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеТекущийСотрудник.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеТекущийСотрудник);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеВесьДокумент.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеВесьДокумент);
			МенюИсправить.Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеСписокСотрудников.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеСписокСотрудников);
		КонецЕсли;
		Кнопки.Исправить.Кнопки.ТекущийСотрудник.Доступность = Не ИсправленВесьДокумент;
		Кнопки.Исправить.Кнопки.ВесьДокумент.Доступность = Не ДокументИсправлен;
		Кнопки.Исправить.Кнопки.СписокСотрудников.Доступность = Не ИсправленВесьДокумент;
			
		Если Кнопки.Количество() = 1 И ДокументИсправлен Тогда
			Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаОтменаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаОтменаИсправление);
		ИначеЕсли Кнопки.Количество() > 1 И Не ДокументИсправлен Тогда
			Кнопки.Удалить(Кнопки.ОтменитьИсправление);
			Кнопки.Удалить(Кнопки.Разделитель);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Управляет видимостью элементов формы, зависящих от наличия перерассчитываемого документа
Процедура ОбновитьДоступностьЭлементовФормы()
	
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	ИсправленВесьДокумент = ДокументИсправлен;
	Если ИсправленВесьДокумент Тогда
		Для каждого СтрокаТЧ Из Начисления Цикл
			ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
			Если Не ИсправленВесьДокумент Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если ДокументИсправлен Или ДокументСторнирован Тогда
		ТолькоПросмотр = Истина
	Иначе 
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);		
	КонецЕсли;
	
	ЭлементыФормы.Организация.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
    	
	УстановитьКнопкиИсправленияДокумента(ДокументИсправлен, ИсправленВесьДокумент, ДокументСторнирован);
	
	СверткаПанельОткрытьИсходный = ?(ЭтоИсправление И Не ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	Если ЭлементыФормы.ПанельОткрытьИсходный.Свертка <> СверткаПанельОткрытьИсходный Тогда
		ЭлементыФормы.ПанельОткрытьИсходный.Свертка = СверткаПанельОткрытьИсходный
	КонецЕсли;
	
	СверткаПанельОткрытьИсправление = ?(ДокументИсправлен Или ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	Если ЭлементыФормы.ПанельОткрытьИсправление.Свертка <> СверткаПанельОткрытьИсправление Тогда
		ЭлементыФормы.ПанельОткрытьИсправление.Свертка = СверткаПанельОткрытьИсправление
	КонецЕсли;
		
	ЭлементыФормы.НадписьОткрытьИсправление.Заголовок = ?(ДокументСторнирован,НСтр("ru='Открыть сторно-документ';uk='Відкрити сторно-документ'"),НСтр("ru='Открыть исправления';uk='Відкрити виправлення'"));
// Серна - Начало
	ЭлементыФормы.Начисления.Колонки.Авторасчет.ТолькоПросмотр = Истина;
// Серна - Конец
КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()

Процедура ОбновитьВидимостьЗакладок()
	ЭлементыФормы.ПанельРасчета.Страницы.Взносы.Видимость = НЕ ПредварительныйРасчет И НЕ мРежимДоНачалаРаботы;
	ЭлементыФормы.ПанельРасчета.Страницы.ВзносыНаФОТ.Видимость = НЕ ПредварительныйРасчет И НЕ мРежимДоНачалаРаботы;
	ЭлементыФормы.ПанельРасчета.Страницы.Займы.Видимость = НЕ ПредварительныйРасчет И НЕ мРежимДоНачалаРаботы;
	ЭлементыФормы.ПанельРасчета.Страницы.НДФЛ.Видимость = НЕ ПредварительныйРасчет И НЕ мРежимДоНачалаРаботы;
	ЭлементыФормы.ПанельРасчета.Страницы.РасчетныйЛисток.Видимость = НЕ ПредварительныйРасчет И НЕ мРежимДоНачалаРаботы;
	ЭлементыФормы.ПанельРасчета.Страницы.Удержания.Видимость = НЕ ПредварительныйРасчет И НЕ мРежимДоНачалаРаботы;
	
КонецПроцедуры

Процедура УстановитьВидимостьРеквизитовЕСВ()
	
	ИспользуетсяЕСВ = ПроведениеРасчетов.ИспользуетсяЕСВ(ПериодРегистрации);
	ЭлементыФормы.Взносы.Колонки.БазаВычет.Видимость = ИспользуетсяЕСВ;
	ЭлементыФормы.ВзносыФОТ.Колонки.БазаВычет.Видимость = ИспользуетсяЕСВ;
	ЭлементыФормы.Взносы.Колонки.КодКатегорииЗЛ.Видимость = ИспользуетсяЕСВ;
	ЭлементыФормы.Взносы.Колонки.ТипНачисления.Видимость = ИспользуетсяЕСВ;
	ЭлементыФормы.Взносы.Колонки.НомерПорога.Видимость = НЕ ИспользуетсяЕСВ;
	ЭлементыФормы.ВзносыФОТ.Колонки.НомерПорога.Видимость = НЕ ИспользуетсяЕСВ;
		
	ИспользуетсяНК = ПроведениеРасчетов.ИспользуетсяНК(ПериодРегистрации);
	ЭлементыФормы.НДФЛ.Колонки.УвеличеннаяСтавка.Видимость = ИспользуетсяНК;
	ЭлементыФормы.НДФЛ.Колонки.ДоходПолный.Видимость = ИспользуетсяНК;
	Если ИспользуетсяНК Тогда
		Если ПроведениеРасчетов.ВариантыАлгоритмовРасчетаЗарплаты().РасчетНДФЛ17 = Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ДоначислениеНаСуммуПревышения Тогда
			ЭлементыФормы.НДФЛ.Колонки.ДоходПолный.ТекстШапки = НСтр("ru='Доход (полный)';uk='Дохід (повний)'");
		Иначе
			ЭлементыФормы.НДФЛ.Колонки.ДоходПолный.ТекстШапки = НСтр("ru='Доход (прочий)';uk='Дохід (інший)'");
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если Не ЭтоНовый() Тогда
		мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
		мДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
		ОбновитьОписаниеСостоянияДокумента();
		Если ЗначениеЗаполнено(мДокументыИсправление) Тогда
			ПолучитьСотрудниковСИсправлениями();
		КонецЕсли;
	Иначе
		РаботаСДиалогами.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, НСтр("ru='Документ не заполнен';uk='Документ не заповнений'"), "СообщениеОПроблемах");
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудники");
 	СтруктураКолонок.Вставить("ВидРасчета");
 	СтруктураКолонок.Вставить("ДатаНачала");
 	СтруктураКолонок.Вставить("ДатаОкончания");

	// Установить ограничение - изменять видимоть колонок для таличной части Начисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);
	
	// Установить ограничение - изменять видимоть колонок для таличной части Удержания
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Удержания.Колонки, СтруктураКолонок);
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
 	СтруктураКолонок.Вставить("НалоговыйПериод");
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.РаботникиОрганизации.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	// Установить ограничение - изменять видимоть колонок для таличной части НДФЛ
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.НДФЛ.Колонки, СтруктураКолонок);

	// Активизируем табличную часть
	ТекущийЭлемент = ЭлементыФормы.Начисления;

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	ПредставлениеПериодаРегистрации = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
	
	// Активизируем табличную часть
	ЭлементыФормы.РаботникиОрганизации.АктивизироватьПоУмолчанию = Истина;
	УстановитьОтборСписка();
	
	УстановитьНадписьРежимВвода();
	
	УстановитьВидимостьРеквизитовЕСВ();
	
	// Исправление документов
	мМенюИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить;
	мКнопкаИсправлениеТекущийСотрудник = мМенюИсправление.Кнопки.ТекущийСотрудник;
	мКнопкаИсправлениеВесьДокумент = мМенюИсправление.Кнопки.ВесьДокумент;
	мКнопкаИсправлениеСписокСотрудников = мМенюИсправление.Кнопки.СписокСотрудников;
	мКнопкаОтменаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление;
	ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	
	// Установим видимость в зависимости от наличия перерассчитываемого документа
	ОбновитьДоступностьЭлементовФормы();
	
	ОбновитьВидимостьЗакладок();
	
	мНеСпросили = Истина;
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	// оповестим исходный, исправляемый документ
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		Оповестить("ОбновитьФорму", Новый Структура("Команда, Объект","ДоступностьИсправленногоДокумента", ПерерассчитываемыйДокумент), Ссылка);
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	ТипВыбранногоЗначения = ТипЗнч(ЗначениеВыбора);
	
	Если ТипВыбранногоЗначения = Тип("Структура") Тогда
		
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ЗаполнитьДокументИсправление" Тогда
			РаботаСДиалогами.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, ЗначениеВыбора.ВыбранныеСотрудники);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму" И Не ЭтоНовый() Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Команда = "ДоступностьИсправленногоДокумента" Тогда
					Если Параметр.Объект = Ссылка И мДокументыИсправление.Найти(Источник) = Неопределено Тогда 
						мДокументыИсправление.Добавить(Источник);
						ПолучитьСотрудниковСИсправлениями();
						ОбновитьДоступностьЭлементовФормы();
					КонецЕсли;
				ИначеЕсли Команда = "ДоступностьОтмененногоДокумента" Тогда
					Если Параметр.Объект = Ссылка Тогда
						Если мДокументСторнирование <> Источник Тогда
							мДокументСторнирование = Источник;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
						НовыйДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
						Если мДокументСторнирование <> НовыйДокументСторнирование Тогда
							мДокументСторнирование = НовыйДокументСторнирование;
							Если Не ЗначениеЗаполнено(мДокументСторнирование) Тогда
								РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
							КонецЕсли;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					КонецЕсли;
				Иначе
				КонецЕсли;
			Иначе
			КонецЕсли;
			
		Иначе
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ОбработкаОповещения

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Заполняет ТЧ Работники, заполняет все остальные ТЧ и затем расчитывает их
//
Процедура ДействияФормыДействиеЗаполнитьРассчитать(Кнопка)
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если Начисления.Количество() > 0 
		ИЛИ Взносы.Количество() > 0
		ИЛИ НДФЛ.Количество() > 0
		ИЛИ Удержания.Количество() > 0
		ИЛИ ВзносыФОТ.Количество() > 0
		ИЛИ ПогашениеЗаймов.Количество() > 0
		ИЛИ РаботникиОрганизации.Количество() > 0
		Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением все табличные части будут очищены. Продолжить?';uk='Перед заповненням всі табличні частини будуть очищені. Продовжити?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		РаботникиОрганизации.Очистить();
		Начисления.Очистить();
		Взносы.Очистить();
		НДФЛ.Очистить();
		Удержания.Очистить();
		ВзносыФОТ.Очистить();
		ПогашениеЗаймов.Очистить();
		Записать();
	КонецЕсли;
	
	ЗаполнитьРаботникиОрганизации();
	мСотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
	
	ЗаполнитьВсе( мСотрудники, мРежимДоНачалаРаботы );
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьВсе(мСотрудники, Ложь);
	ОбработкаКомментариев.ПоказатьСообщения();
    	
	// Активизируем табличную часть
	ЭлементыФормы.РаботникиОрганизации.АктивизироватьПоУмолчанию = Истина;
	УстановитьОтборСписка();
	
КонецПроцедуры

// Заполняет все табличные части по данным табличной части Работники организации
//
Процедура ДействияФормыДействиеЗаполнить(Кнопка)
	
	Если Кнопка.Имя = "ЗаполнитьПоРаботнику" Тогда
		
		мСотрудники = Новый СписокЗначений;
		мСотрудникиТекст = "";
		РазделительТекст = "";
		Для каждого СтрокаСотрудник Из ЭлементыФормы.РаботникиОрганизации.ВыделенныеСтроки Цикл
			мСотрудники.Добавить(СтрокаСотрудник.Сотрудник) ;
			мСотрудникиТекст = мСотрудникиТекст + РазделительТекст + СтрокаСотрудник.Сотрудник;
			РазделительТекст = "; ";
		КонецЦикла; 
	
		ТекстВопроса = НСтр("ru='Перед заполнением из табличной части ""Начисления"" будут удалены данные по сотрудникам: ';uk='Перед заповненням з табличної частини ""Нарахування"" будуть вилучені дані по співробітниках: '") + мСотрудникиТекст + НСтр("ru='. Продолжить?';uk='. Продовжити?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		ПроведениеРасчетов.УдалитьСтрокиПоУсловию( Начисления, мСотрудники ); 
		ПроведениеРасчетов.УдалитьСтрокиПоУсловию( Взносы, мСотрудники ); 
		ПроведениеРасчетов.УдалитьСтрокиПоУсловию( НДФЛ, мСотрудники ); 
		ПроведениеРасчетов.УдалитьСтрокиПоУсловию( Удержания, мСотрудники ); 
		ПроведениеРасчетов.УдалитьСтрокиПоУсловию( ВзносыФОТ, мСотрудники ); 
		ПроведениеРасчетов.УдалитьСтрокиПоУсловию( ПогашениеЗаймов, мСотрудники ); 
		Записать();
		
	Иначе
		
		// по всем сотрудникам ТЧ Работникиорганизации
		мСотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
		Если Начисления.Количество() > 0 
			ИЛИ Взносы.Количество() > 0
			ИЛИ НДФЛ.Количество() > 0
			ИЛИ Удержания.Количество() > 0
			ИЛИ ВзносыФОТ.Количество() > 0
			ИЛИ ПогашениеЗаймов.Количество() > 0
			Тогда
			
			ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Продолжить?';uk='Перед заповненням табличні частини будуть очищені. Продовжити?'");
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			Начисления.Очистить();
			Взносы.Очистить();
			НДФЛ.Очистить();
			Удержания.Очистить();
			ВзносыФОТ.Очистить();
			ПогашениеЗаймов.Очистить();
			Записать();
		ИначеЕсли Модифицированность() Тогда
			ТекстВопроса = НСтр("ru='Перед заполнением докумет необходимо записать. Продолжить?';uk='Перед заповненням документ необхідно записати. Продовжити?'");
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			Записать();
			
		КонецЕсли;
		
	КонецЕсли;

	ЗаполнитьВсе( мСотрудники , мРежимДоНачалаРаботы);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "По перерассчитываемому документу" подменю "Заполнить" командной панели формы
//
Процедура ДействияФормыПоПерерассчитываемомуДокументу(Кнопка)

	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='заполнить';uk='заповнити'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если  РаботникиОрганизации.Количество() > 0 
		ИЛИ Начисления.Количество() > 0
		ИЛИ Взносы.Количество() > 0 
		ИЛИ НДФЛ.Количество() > 0
		ИЛИ Удержания.Количество() > 0 
		ИЛИ ВзносыФОТ.Количество() > 0 
		ИЛИ ПогашениеЗаймов.Количество() > 0 
		Тогда
	
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Заполнить?';uk='Перед заповненням табличні частини будуть очищені. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		РаботникиОрганизации.Очистить();
		Начисления.Очистить();
		Взносы.Очистить();
		НДФЛ.Очистить();
		Удержания.Очистить();
		ВзносыФОТ.Очистить();
		ПогашениеЗаймов.Очистить();
		
	КонецЕсли;

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если Не ЗаполнитьПоПерерассчитываемомуДокументу(ПерерассчитываемыйДокумент) Тогда
		ОбщегоНазначения.ОшибкаРасчета(НСтр("ru='Нет необходимости перерассчитывать заданный документ. Для получения списка документов, подлежащих перерасчету, необходимо использовать: пункт Перерасчет зарплаты меню Расчет зарплаты';uk='Немає необхідності перерозраховувати заданий документ. Для отримання списку документів, що підлягають перерахунку, необхідно використовувати: пункт Перерахунок зарплати меню Розрахунок зарплати'"));
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры // ДействияФормыПоПерерассчитываемомуДокументу()


Процедура ДействияФормыДействиеРассчитать(Кнопка)
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	КомментироватьРасчет = Ложь;
	мСотрудники = Новый СписокЗначений;
	Если Найти(Кнопка.Имя,"РассчитатьПоРаботнику")=1 И ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные <> Неопределено Тогда
		
		Для каждого СтрокаСотрудник Из ЭлементыФормы.РаботникиОрганизации.ВыделенныеСтроки Цикл
			мСотрудники.Добавить(СтрокаСотрудник.Сотрудник) ;
		КонецЦикла; 
		
		Если Кнопка.Имя = "РассчитатьПоРаботникуСКомментарием" Тогда
			КомментироватьРасчет = Истина;
		КонецЕсли;
		
	Иначе 
		мСотрудники.ЗагрузитьЗначения(РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник"));
		
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ПроведениеРасчетов.УдалитьСтрокиСторноПоУсловию( Начисления, мСотрудники ); 
		ПроведениеРасчетов.УдалитьСтрокиСторноПоУсловию( Взносы, мСотрудники ); 
		ПроведениеРасчетов.УдалитьСтрокиСторноПоУсловию( ВзносыФОТ, мСотрудники ); 
		ПроведениеРасчетов.УдалитьСтрокиСторноПоУсловию( НДФЛ, мСотрудники ); 
		ПроведениеРасчетов.УдалитьСтрокиСторноПоУсловию( Удержания, мСотрудники ); 
		Записать();
	КонецЕсли;	
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьВсе(мСотрудники, КомментироватьРасчет);
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.Удержания.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат = ТекущаяСтрока.Результат;
	КонецЕсли;
	
	Если ЭлементыФормы.ПанельРасчета.ТекущаяСтраница.Имя = "РасчетныйЛисток"  Тогда	
		ЗаполнитьРасчетныйЛисток(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыОчистить(Кнопка)
	
		ОчиститьТабличныеЧасти();
		
КонецПроцедуры

Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ДополнительныеДействияВесьДокумент(Кнопка)
	РаботаСДиалогами.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры

Процедура ДополнительныеДействияТекущийСотрудник(Кнопка)
	
	Если Не ЗначениеЗаполнено(мТекущийСотрудник) Тогда
		Предупреждение(НСтр("ru='Не выбран сотрудник для исправления расчетов!';uk='Не обраний співробітник для виправлення розрахунків!'"));
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогами.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, мТекущийСотрудник);

КонецПроцедуры

Процедура ДополнительныеДействияСписокСотрудников(Кнопка)
	
	Если Проведен Тогда
		
		ПолучитьСотрудниковСИсправлениями();
		
		ТекстВопроса = НСтр("ru='Для исправления необходимо записать документ. Продолжить?';uk='Для виправлення необхідно записати документ. Продовжити?'");
		Если Не РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ЭтотОбъект, ЭтаФорма, ТекстВопроса) Тогда
			Возврат;
		КонецЕсли;
		
		СписокСотрудников = Новый СписокЗначений;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник.Наименование КАК Наименование
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		Запрос.УстановитьПараметр("Ссылка",Ссылка); 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если мСотрудникиИсправление[Выборка.Сотрудник] = Неопределено Тогда
				СписокСотрудников.Добавить(Выборка.Сотрудник,Выборка.Наименование)
			КонецЕсли;
		КонецЦикла;
		
		Форма = ПолучитьОбщуюФорму("ФормаВыбораСотрудников", ЭтаФорма, Ссылка);
		Форма.СписокСотрудников = СписокСотрудников;
		Форма.Заголовок = НСтр("ru='Сотрудники документа Начисление зарплаты №';uk='Співробітники документа Нарахування зарплати №'") + Номер + НСтр("ru=' от ';uk=' від '") + Формат(Дата,"ДФ=dd.MM.yyyy");
		Форма.Открыть();
		
	Иначе
		Предупреждение(НСтр("ru='Исправить можно только проведенный документ!';uk='Виправити можна лише проведений документ!'"))
	КонецЕсли;
	
КонецПроцедуры

// Процедура отмены документов-исправлений
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогами.ОтменитьИсправлениеДокумента(Ссылка);
	мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
	ПолучитьСотрудниковСИсправлениями();
	ОбновитьДоступностьЭлементовФормы();
	РаботаСДиалогами.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(мТекущийСотрудник),мТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник);
	Обновить();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "Регулирование" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	мПериодРегистрации = ПериодРегистрации;
	РаботаСДиалогами.РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации);
	
	Если мПериодРегистрации <> ПериодРегистрации Тогда
		Если РаботникиОрганизации.Количество() > 0 
			ИЛИ Начисления.Количество() > 0
			ИЛИ Взносы.Количество() > 0
			ИЛИ ВзносыФОТ.Количество() > 0
			ИЛИ Удержания.Количество() > 0
			ИЛИ НДФЛ.Количество() > 0
			ИЛИ ПогашениеЗаймов.Количество() > 0
			Тогда
			ТекстВопроса = НСтр("ru='Изменен период регистрации! Табличные части будут очищены. Продолжить?';uk='Змінено період регістрації. Табличні частини буде очищено. Продовжити?'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ОчиститьТабличныеЧасти(Ложь);
			Иначе
				ПериодРегистрации = мПериодРегистрации;
 				ПредставлениеПериодаРегистрации = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;

	УстановитьНадписьРежимВвода();
	
	УстановитьВидимостьРеквизитовЕСВ();
	
	// Установим видимость в зависимости от наличия перерассчитываемого документа
	ОбновитьДоступностьЭлементовФормы();

	УстановитьКнопкиИсправленияДокумента();


КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	мПериодРегистрации = ПериодРегистрации;
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
	Если мПериодРегистрации <> ПериодРегистрации Тогда
		Если РаботникиОрганизации.Количество() > 0 
			ИЛИ Начисления.Количество() > 0
			ИЛИ Взносы.Количество() > 0
			ИЛИ ВзносыФОТ.Количество() > 0
			ИЛИ Удержания.Количество() > 0
			ИЛИ НДФЛ.Количество() > 0
			ИЛИ ПогашениеЗаймов.Количество() > 0
			Тогда
			ТекстВопроса = НСтр("ru='Изменен период регистрации! Табличные части будут очищены. Продолжить?';uk='Змінено період регістрації. Табличні частини буде очищено. Продовжити?'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ОчиститьТабличныеЧасти(Ложь);
			Иначе
				ПериодРегистрации = мПериодРегистрации;
 				ПредставлениеПериодаРегистрации = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;

	УстановитьНадписьРежимВвода();
	
	УстановитьВидимостьРеквизитовЕСВ();

КонецПроцедуры

// Процедура - обработчик события "Очистка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ПредставлениеПериодаРегистрацииПриИзменении(Элемент)
		
	УстановитьНадписьРежимВвода();
	
	УстановитьВидимостьРеквизитовЕСВ();
	
	УстановитьКнопкиИсправленияДокумента();


КонецПроцедуры

Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	Если ПодразделениеОрганизации.Владелец <> Организация Тогда
		ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ОчиститьТабличныеЧасти() Тогда
		СтандартнаяОбработка = Ложь;
    КонецЕсли;

КонецПроцедуры

Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	Если ЗначениеЗаполнено(мДокументыИсправление) Тогда
		Форма = КритерииОтбора.ДокументыИсправления.ПолучитьФорму(, ЭтаФорма);
		Форма.ИсходныйДокумент = Ссылка;
		Форма.Открыть();
	ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
		мДокументСторнирование.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ПерерассчитываемыйДокумент.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ

Процедура ТабличнаяЧастьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ТипВыбранногоЗначения = ТипЗнч(ВыбранноеЗначение);
	Если ТипВыбранногоЗначения = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
			РаботникиОрганизации.Добавить().Сотрудник = ВыбранноеЗначение;
		КонецЕсли;

		СтандартнаяОбработка = Ложь;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
		Для Каждого СтрокаТЗ Из ВыбранноеЗначение.Данные.Выгрузить() Цикл
				
			СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЗ);
				
		КонецЦикла;

	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипВыбранногоЗначения) Тогда	
		
		Если Элемент.Колонки.Найти("ВидРасчета") <> НеОпределено Тогда
			Элемент.ТекущиеДанные.ВидРасчета = ВыбранноеЗначение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры  // ТабличнаяЧастьОбработкаВыбора

Процедура НачалоВыбораВидРасчета( ЭлементФормы, СтандартнаяОбработка ) Экспорт

	СтандартнаяОбработка = Ложь;

	ФормаВыбора = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора(,ЭлементФормы,);
	ФормаВыбора.ПланВидовРасчетаСписок.Отбор.СпособРасчета.ВидСравнения  = ВидСравнения.НеВСписке;
	ФормаВыбора.ПланВидовРасчетаСписок.Отбор.СпособРасчета.Значение      = мСписокЗапрещенныхСпособовРасчета;
	ФормаВыбора.ПланВидовРасчетаСписок.Отбор.СпособРасчета.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.ПланВидовРасчетаСписок.НастройкаОтбора.СпособРасчета.Доступность = Ложь;

	ФормаВыбора.Открыть();

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ РаботникиОрганизации и ее РЕКВИЗИТОВ 

Процедура КоманднаяПанельРаботникиОрганизацииСписокРаботников(Кнопка)
	
	Если РаботникиОрганизации.Количество()+Начисления.Количество()
			+ Взносы.Количество() 
			+ НДФЛ.Количество() 
			+ Удержания.Количество()  
			+ ВзносыФОТ.Количество() 
			+ ПогашениеЗаймов.Количество()> 0
			Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Заполнить?';uk='Перед заповненням табличні частини будуть очищені. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		РаботникиОрганизации.Очистить();
		Начисления.Очистить();
		Взносы.Очистить();
		ВзносыФОТ.Очистить();
		НДФЛ.Очистить();
		ПогашениеЗаймов.Очистить();
		Удержания.Очистить();
		ЭлементыФормы.ТабличноеПолеРасчетногоЛистка.Очистить();
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма.ЭлементыФормы.РаботникиОрганизации, ПериодРегистрации, , Организация, ПодразделениеОрганизации, , , , , , ,Ложь );	

	//после заполнения табличных частей, активизируем строку
	//УстановитьТекущуюСтрокуТабличнойЧасти(ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры // ДействияФормыСписокРаботников()

Процедура КоманднаяПанельРаботникиОрганизацииЗаполнить(Кнопка)
	
	НачатьТранзакцию();
	
	Отказ = Истина;
	Если ЗаписатьДокументОтменивПроведение("заполнить") Тогда
		Отказ = Ложь;
	КонецЕсли;
	
	Если Отказ Тогда
		Предупреждение(НСтр("ru='Обработка не выполнилась';uk='Обробка не виконалась'"));
		Возврат;
	КонецЕсли; 
	
	РаботникиОрганизации.Очистить();
	Начисления.Очистить();
	Взносы.Очистить();
	ВзносыФОТ.Очистить();
	НДФЛ.Очистить();
	Удержания.Очистить();
	ПогашениеЗаймов.Очистить();
	Записать();
	
	// необходимо перезаполнить работников
	ЗаполнитьРаботникиОрганизации();
	Записать();
	
	ЗафиксироватьТранзакцию();
	
	// Активизируем табличную часть
	ЭлементыФормы.РаботникиОрганизации.АктивизироватьПоУмолчанию = Истина;
	УстановитьОтборСписка();
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииПодборРаботников(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, Организация, 1);
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииСписокУволенных(Кнопка)
	
	НачатьТранзакцию();
	
	Отказ = Истина;
	Если ЗаписатьДокументОтменивПроведение("заполнить") Тогда
		Отказ = Ложь;
	КонецЕсли;
	
	Если Отказ Тогда
		Предупреждение(НСтр("ru='Обработка не выполнилась';uk='Обробка не виконалась'"));
		Возврат;
	КонецЕсли; 
	
	РаботникиОрганизации.Очистить();
	Начисления.Очистить();
	Взносы.Очистить();
	ВзносыФОТ.Очистить();
	НДФЛ.Очистить();
	Удержания.Очистить();
	ПогашениеЗаймов.Очистить();
	Записать();
	
	// необходимо перезаполнить работников
	ЗаполнитьРаботникиОрганизации(Истина);
	Записать();
	
	ЗафиксироватьТранзакцию();
	
	// Активизируем табличную часть
	ЭлементыФормы.РаботникиОрганизации.АктивизироватьПоУмолчанию = Истина;
	УстановитьОтборСписка();
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииСписокГПХ(Кнопка)
	
	НачатьТранзакцию();
	
	Отказ = Истина;
	Если ЗаписатьДокументОтменивПроведение("заполнить") Тогда
		Отказ = Ложь;
	КонецЕсли;
	
	Если Отказ Тогда
		Предупреждение(НСтр("ru='Обработка не выполнилась';uk='Обробка не виконалась'"));
		Возврат;
	КонецЕсли; 
	
	РаботникиОрганизации.Очистить();
	Начисления.Очистить();
	Взносы.Очистить();
	ВзносыФОТ.Очистить();
	НДФЛ.Очистить();
	Удержания.Очистить();
	ПогашениеЗаймов.Очистить();
	Записать();
	
	// необходимо перезаполнить работников
	ЗаполнитьРаботникиОрганизации(,Истина);
	Записать();
	
	ЗафиксироватьТранзакцию();
	
	// Активизируем табличную часть
	ЭлементыФормы.РаботникиОрганизации.АктивизироватьПоУмолчанию = Истина;
	УстановитьОтборСписка();
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииПоПерерассчитываемомуДокументу(Кнопка)

	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='заполнить';uk='заповнити'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если Начисления.Количество() > 0 ИЛИ
		Взносы.Количество() > 0 ИЛИ
		ВзносыФОТ.Количество() > 0 ИЛИ
		Удержания.Количество() > 0 ИЛИ 
		ПогашениеЗаймов.Количество() > 0 ИЛИ 
		НДФЛ.Количество() > 0 Тогда
	
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Заполнить?';uk='Перед заповненням табличні частини будуть очищені. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Начисления.Очистить();
		Взносы.Очистить();
		ВзносыФОТ.Очистить();
		Удержания.Очистить();
		ПогашениеЗаймов.Очистить();
		НДФЛ.Очистить();
		ЭлементыФормы.ТабличноеПолеРасчетногоЛистка.Очистить();
		
	КонецЕсли;

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если Не ЗаполнитьПоПерерассчитываемомуДокументу(ПерерассчитываемыйДокумент) Тогда
		ОбщегоНазначения.ОшибкаРасчета(НСтр("ru='Нет необходимости перерассчитывать заданный документ. Для получения списка документов, подлежащих перерасчету, необходимо использовать: пункт Перерасчет зарплаты меню Расчет зарплаты';uk='Немає необхідності перерозраховувати заданий документ. Для отримання списку документів, що підлягають перерахунку, необхідно використовувати: пункт Перерахунок зарплати меню Розрахунок зарплати'"));
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	////после заполнения табличных частей, активизируем строку
	//УстановитьТекущуюСтрокуТабличнойЧасти(ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры // ДействияФормыПоПерерассчитываемомуДокументу()

Процедура КоманднаяПанельРаботникиОрганизацииПереключитьОтборСписка(Кнопка)
		
	мОтборПоСотруднику = Не мОтборПоСотруднику;
	СохранитьЗначение("ОтборСпискаНачислениеЗП",мОтборПоСотруднику);
	УстановитьОтборСписка();

КонецПроцедуры

Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
		
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");

	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		мТекущийСотрудник = Неопределено;
		Возврат;
	КонецЕсли;
	
	// запомним текущего сотрудника
	мТекущийСотрудник = ТекущаяСтрока.Сотрудник;
	
	ЭлементыФормы.Начисления.ОтборСтрок.Сотрудник.Значение		= мТекущийСотрудник;
	ЭлементыФормы.Взносы.ОтборСтрок.Сотрудник.Значение			= мТекущийСотрудник;
	ЭлементыФормы.ВзносыФОТ.ОтборСтрок.Сотрудник.Значение		= мТекущийСотрудник;
	ЭлементыФормы.Удержания.ОтборСтрок.Сотрудник.Значение		= мТекущийСотрудник;
	ЭлементыФормы.НДФЛ.ОтборСтрок.Сотрудник.Значение			= мТекущийСотрудник;
	ЭлементыФормы.ПогашениеЗаймов.ОтборСтрок.Сотрудник.Значение	= мТекущийСотрудник;
	
	// если активная страница с расчетным листком, то получить расчетный листок 
	Если ЭлементыФормы.ПанельРасчета.ТекущаяСтраница.Имя = "РасчетныйЛисток"  Тогда	
		ЗаполнитьРасчетныйЛисток(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура РаботникиОрганизацииПослеУдаления(Элемент)
	
	УдалитьСотрудникаИзТабличнойЧасти(Начисления); 
	УдалитьСотрудникаИзТабличнойЧасти(Взносы); 
	УдалитьСотрудникаИзТабличнойЧасти(ВзносыФОТ); 
	УдалитьСотрудникаИзТабличнойЧасти(НДФЛ); 
	УдалитьСотрудникаИзТабличнойЧасти(Удержания); 
	УдалитьСотрудникаИзТабличнойЧасти(ПогашениеЗаймов); 
	
КонецПроцедуры

Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);
	
КонецПроцедуры

Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	мСотрудник = Элемент.ТекущаяСтрока.Сотрудник;

КонецПроцедуры


Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина,  Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // НачисленияФизлицоНачалоВыбора()

Процедура РаботникиОрганизацииСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	мСотрудник = Элемент.Значение;
	мСтрока = РаботникиОрганизации.Найти(ВыбранноеЗначение,"Сотрудник");
	
	Если мСтрока <> Неопределено Тогда
		
		Сообщить(НСтр("ru='Работник ';uk='Працівник '") + мСтрока.Сотрудник + НСтр("ru=' уже введен в строке ';uk=' вже введено в рядку '") + мСтрока.НомерСтроки );
		
	ИначеЕсли ЗначениеЗаполнено(мСотрудник) И мСотрудник <> ВыбранноеЗначение И мНеСпросили Тогда
		
		ТекстВопроса = НСтр("ru='Данные по работнику ';uk='Дані по працівнику '") + мСотрудник + НСтр("ru=' будут удалены. Удалить?';uk=' будуть вилучені. Вилучити?'");
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да  Тогда
			
			УдалитьСотрудникаИзТабличнойЧасти(Начисления); 
			УдалитьСотрудникаИзТабличнойЧасти(Взносы); 
			УдалитьСотрудникаИзТабличнойЧасти(ВзносыФОТ); 
			УдалитьСотрудникаИзТабличнойЧасти(НДФЛ); 
			УдалитьСотрудникаИзТабличнойЧасти(Удержания); 
			УдалитьСотрудникаИзТабличнойЧасти(ПогашениеЗаймов);
			
			Элемент.Значение = ВыбранноеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		Элемент.Значение = ВыбранноеЗначение;
		
	КонецЕсли;
	
	мНеСпросили = Истина;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // РаботникиОрганизацииСотрудникОбработкаВыбора()

Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникАвтоПодборТекста()

Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	мСотрудник = Элемент.Значение;
	тЗначение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
	Если ЗначениеЗаполнено(мСотрудник) И мСотрудник <> тЗначение Тогда
		
		ТекстВопроса = НСтр("ru='Данные по работнику ';uk='Дані по працівнику '") + мСотрудник + НСтр("ru=' будут удалены. Удалить?';uk=' будуть вилучені. Вилучити?'");
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да  Тогда
			
			УдалитьСотрудникаИзТабличнойЧасти(Начисления); 
			УдалитьСотрудникаИзТабличнойЧасти(Взносы); 
			УдалитьСотрудникаИзТабличнойЧасти(ВзносыФОТ); 
			УдалитьСотрудникаИзТабличнойЧасти(НДФЛ); 
			УдалитьСотрудникаИзТабличнойЧасти(Удержания); 
			УдалитьСотрудникаИзТабличнойЧасти(ПогашениеЗаймов);
			
			Значение = тЗначение;
			мНеСпросили = Ложь;
			
		Иначе
			Значение = мСотрудник;
			
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(мСотрудник) И ЗначениеЗаполнено(тЗначение) Тогда
		Значение = тЗначение;
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииСотрудникОкончаниеВводаТекста()


//////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ Начисления и ее РЕКВИЗИТОВ 

Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
КонецПроцедуры

Процедура НачисленияПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мРезультат			= ТекущаяСтрока.Результат;
		мОтработаноДней		= ТекущаяСтрока.ОтработаноДней;
		мОтработаноЧасов	= ТекущаяСтрока.ОтработаноЧасов;
		мНормаДней			= ТекущаяСтрока.НормаДней;
		мНормаЧасов			= ТекущаяСтрока.НормаЧасов;
		мКалендарныеДни		= ТекущаяСтрока.КалендарныеДни;
		мОплаченоДнейЧасов	= ТекущаяСтрока.ОплаченоДнейЧасов;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияПередНачаломДобавления(Элемент, Отказ, Копирование)
	СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	Если СтрокаРаботники = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаРаботники.Сотрудник) Тогда
		Отказ = Истина;
	КонецЕсли;	
КонецПроцедуры

Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		
		СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
		
		Если СтрокаРаботники = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрока = Элемент.ТекущаяСтрока;
		ТекущаяСтрока.Авторасчет	= Истина;
		ТекущаяСтрока.Сотрудник		= ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
		ТекущаяСтрока.Назначение	= ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
		ТекущаяСтрока.ГрафикРаботы	= ТекущаяСтрока.Назначение.ГрафикРаботы;
		
		ТекущаяСтрока.ДатаНачала			= НачалоМесяца(ПериодРегистрации);
		ТекущаяСтрока.ДатаОкончания			= КонецМесяца(ПериодРегистрации);
		ТекущаяСтрока.БазовыйПериодНачало	= НачалоМесяца(ПериодРегистрации);
		ТекущаяСтрока.БазовыйПериодКонец	= КонецМесяца(ПериодРегистрации);
		ПроведениеРасчетов.ПроставитьДанныеСтроки(ТекущаяСтрока.Сотрудник, ТекущаяСтрока.Назначение, ТекущаяСтрока.ДатаНачала, ПериодРегистрации, ЭлементыФормы.Начисления.ТекущаяСтрока.ВидРасчета, ЭлементыФормы.Начисления.ТекущаяСтрока);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура НачисленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если НЕ ДанныеСтроки.ВидРасчета.Пустая() Тогда
		
		Если НЕ ДанныеСтроки.ВидРасчета.ЗачетОтработанногоВремени Тогда
			
			ОформлениеСтроки.Ячейки.ОтработаноДней.ТолькоПросмотр 			  = Истина;
			ОформлениеСтроки.Ячейки.ОтработаноЧасов.ТолькоПросмотр			  = Истина;
		
		КонецЕсли;
		
		Если НЕ ДанныеСтроки.ВидРасчета.ЗачетНормыВремени Тогда
			
			ОформлениеСтроки.Ячейки.НормаДней.ТолькоПросмотр 			 = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеСтроки.Сторно Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);

	ИначеЕсли ДанныеСтроки.Назначение.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(51, 51, 153);
	
	ИначеЕсли ДанныеСтроки.Назначение.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(0, 128, 128);
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.Назначение.ОсновноеНазначение)
		И ДанныеСтроки.Назначение.ОсновноеНазначение <> ДанныеСтроки.Сотрудник
		ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки.Назначение.ОсновноеНазначение)
		И ДанныеСтроки.Назначение <> ДанныеСтроки.Сотрудник
		 Тогда
	     // это замены
		ОформлениеСтроки.ЦветТекста = Новый Цвет(80, 128, 128);
		
	КонецЕсли;
	
	РаботаСДиалогами.ПриВыводеСтрокиНачисленийИУдержаний(ДанныеСтроки, ОформлениеСтроки, мДопСведенияОВидахРасчетаНачислений);
	
	// управление видимостью ячеек, которые группируют некоторые элементы шапки
	//ВидимостьДокументОснование = Ложь;
	//Если ДанныеСтроки.Назначение.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
	//	ВидимостьДокументОснование = Ложь;
	//ИначеЕсли ДанныеСтроки.Назначение.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
	//	ВидимостьДокументОснование = Ложь;
	//КонецЕсли;
	//ВидимостьДокументОснование = ?(, Истина, Ложь);
	//ОформлениеСтроки.Ячейки.ДокументОснование.Видимость = ВидимостьДокументОснование;
	
КонецПроцедуры


Процедура НачисленияНазначениеПриИзменении(Элемент)

	ДатаСобытия = ?(ЗначениеЗаполнено(ЭлементыФормы.Начисления.ТекущиеДанные.ДатаОкончания), ЭлементыФормы.Начисления.ТекущиеДанные.ДатаОкончания, Дата);
	Если Не ЗначениеЗаполнено(ЭлементыФормы.Начисления.ТекущиеДанные.Сотрудник) Тогда
		ЭлементыФормы.Начисления.ТекущиеДанные.Сотрудник = ?(Элемент.Значение.ОсновноеНазначение=Справочники.СотрудникиОрганизаций.ПустаяСсылка(), Элемент.Значение, Элемент.Значение.ОсновноеНазначение);
	КонецЕсли;
	ПроведениеРасчетов.ПроставитьДанныеСтроки(ЭлементыФормы.Начисления.ТекущиеДанные.Сотрудник, Элемент.Значение, ДатаСобытия, ПериодРегистрации, ЭлементыФормы.Начисления.ТекущаяСтрока.ВидРасчета, ЭлементыФормы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры // НачисленияФизлицоПриИзменении()

Процедура НачисленияНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина,  Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // НачисленияФизлицоНачалоВыбора()

Процедура НачисленияНазначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДатаСобытия = ?(ЗначениеЗаполнено(ЭлементыФормы.Начисления.ТекущиеДанные.ДатаОкончания), ЭлементыФормы.Начисления.ТекущиеДанные.ДатаОкончания, Дата);
	Если Не ЗначениеЗаполнено(ЭлементыФормы.Начисления.ТекущиеДанные.Сотрудник) Тогда
		ЭлементыФормы.Начисления.ТекущиеДанные.Сотрудник = ?(Элемент.Значение.ОсновноеНазначение=Справочники.СотрудникиОрганизаций.ПустаяСсылка(), Элемент.Значение, Элемент.Значение.ОсновноеНазначение);
	КонецЕсли;
	ПроведениеРасчетов.ПроставитьДанныеСтроки(ЭлементыФормы.Начисления.ТекущиеДанные.Сотрудник, ВыбранноеЗначение, ДатаСобытия, ПериодРегистрации, ЭлементыФормы.Начисления.ТекущаяСтрока.ВидРасчета, ЭлементыФормы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры

Процедура НачисленияНазначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры

Процедура НачисленияНазначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры

Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
		
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДатаНачала) Тогда
		ТекущаяСтрока.ДатаНачала = ПериодРегистрации;
		ТекущаяСтрока.ДатаОкончания	= КонецМесяца(ПериодРегистрации);
	Иначе
		ТекущаяСтрока.ДатаОкончания			= Макс(ТекущаяСтрока.ДатаНачала, ТекущаяСтрока.ДатаОкончания);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.БазовыйПериодНачало) 
		ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.БазовыйПериодКонец)
		Тогда
		ТекущаяСтрока.БазовыйПериодНачало	= ТекущаяСтрока.ДатаНачала;
		ТекущаяСтрока.БазовыйПериодКонец	= ТекущаяСтрока.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияДатаОкончанияПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДатаОкончания) Тогда
		ТекущаяСтрока.ДатаНачала = ПериодРегистрации;
		ТекущаяСтрока.ДатаОкончания	= КонецМесяца(ПериодРегистрации);
	Иначе
		ТекущаяСтрока.ДатаНачала			= Мин(ТекущаяСтрока.ДатаНачала, ТекущаяСтрока.ДатаОкончания);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.БазовыйПериодНачало) 
		ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.БазовыйПериодКонец)
		Тогда
		ТекущаяСтрока.БазовыйПериодНачало	= ТекущаяСтрока.ДатаНачала;
		ТекущаяСтрока.БазовыйПериодКонец	= ТекущаяСтрока.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияБазовыйПериодНачалоПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.БазовыйПериодНачало) Тогда
		ТекущаяСтрока.БазовыйПериодНачало = ТекущаяСтрока.ДатаНачала;
		ТекущаяСтрока.БазовыйПериодКонец	= ТекущаяСтрока.ДатаОкончания;
	Иначе
		ТекущаяСтрока.БазовыйПериодКонец	= Макс(ТекущаяСтрока.БазовыйПериодНачало, ТекущаяСтрока.БазовыйПериодКонец);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияБазовыйПериодКонецПриИзменении(Элемент)
		
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.БазовыйПериодКонец) Тогда
		ТекущаяСтрока.БазовыйПериодНачало = ТекущаяСтрока.ДатаНачала;
		ТекущаяСтрока.БазовыйПериодКонец = ТекущаяСтрока.ДатаОкончания;
	Иначе
		ТекущаяСтрока.БазовыйПериодНачало	= Мин(ТекущаяСтрока.БазовыйПериодНачало, ТекущаяСтрока.БазовыйПериодКонец);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияРезультатПриИзменении(Элемент)
		
	Если Элемент.Значение <> мРезультат Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мРезультат = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияОплаченоДнейЧасовПриИзменении(Элемент)
		
	Если Элемент.Значение <> мОплаченоДнейЧасов Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мОплаченоДнейЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияОтработаноДнейПриИзменении(Элемент)
		
	Если Элемент.Значение <> мОтработаноДней Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мОтработаноДней = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияОтработаноЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мОтработаноЧасов Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мОтработаноЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияНормаДнейПриИзменении(Элемент)
		
	Если Элемент.Значение <> мНормаДней Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мНормаДней = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияНормаЧасовПриИзменении(Элемент)
		
	Если Элемент.Значение <> мНормаЧасов Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мНормаЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияКалендарныеДниПриИзменении(Элемент)
		
	Если Элемент.Значение <> мКалендарныеДни Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мКалендарныеДни = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ Начисления

Процедура КоманднаяПанельНачисленийЗаполнить(Кнопка)
	Перем мСотрудники;
	
	Если НЕ ПолучитьСписокСотрудниковДляАвтозаполнения( Кнопка, "Начисления", Начисления, мСотрудники ) Тогда
		Возврат;
	КонецЕсли;

	АвтозаполнениеНачисления( Ссылка, Начисления, мСотрудники );
	УстановитьОтборСписка();
	
КонецПроцедуры

Процедура КоманднаяПанельНачисленийРассчитать(Кнопка)
	Перем мСотрудники, КомментироватьРасчет;
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьСписокСотрудниковДляРасчета( Кнопка, "Начисления", Начисления, мСотрудники, КомментироватьРасчет ) Тогда
		Возврат;
	КонецЕсли;

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьНачисления(мСотрудники, КомментироватьРасчет);
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат				= ТекущаяСтрока.Результат;
		мБылоОтработаноДней				= ТекущаяСтрока.ОтработаноДней;
		мБылоОтработаноЧасов			= ТекущаяСтрока.ОтработаноЧасов;
		мБылоНормаДней					= ТекущаяСтрока.НормаДней;
		мБылоНормаЧасов					= ТекущаяСтрока.НормаЧасов;
		мБылоКалендарныеДни				= ТекущаяСтрока.КалендарныеДни;
		мБылоОплаченоДнейЧасов			= ТекущаяСтрока.ОплаченоДнейЧасов;
	КонецЕсли;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ Взносы и ее РЕКВИЗИТОВ

Процедура ВзносыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Сторно Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);
	
	КонецЕсли;
		
	ОформлениеСтроки.Ячейки.Период.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.НалоговыйПериод.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.Дни.Видимость = Ложь;
	
	ЯчейкаСКартинкой = ОформлениеСтроки.Ячейки.Картинка;
	ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
	ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);
	
КонецПроцедуры

Процедура ВзносыПриАктивизацииСтроки(Элемент)
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
КонецПроцедуры

Процедура ВзносыПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Взносы.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мРезультат	= ТекущаяСтрока.Результат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВзносыРезультатПриИзменении(Элемент)
		
	Если Элемент.Значение <> мРезультат Тогда
		ЭлементыФормы.Взносы.ТекущаяСтрока.Авторасчет = Ложь;
		мРезультат = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ Взносы

Процедура КоманднаяПанельВзносыОтборПоНалогу(Кнопка)
		
	мОтборПоНалогуВзносы = НЕ мОтборПоНалогуВзносы;
	УстановитьОтборСписка();

КонецПроцедуры

Процедура КоманднаяПанельВзносыОтборПоСумме(Кнопка)
	
	мОтборПоСуммеВзносы = НЕ мОтборПоСуммеВзносы;
	УстановитьОтборСписка();
	
КонецПроцедуры

Процедура КоманднаяПанельВзносыЗаполнить(Кнопка)
	Перем мСотрудники;
	
	Если НЕ ПолучитьСписокСотрудниковДляАвтозаполнения( Кнопка, "Взносы", Взносы, мСотрудники ) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьВзносы( мСотрудники, Взносы );
	
	ТекущаяСтрока = ЭлементыФормы.Взносы.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат				= ТекущаяСтрока.Результат;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура КоманднаяПанельВзносыРассчитать(Кнопка)
	Перем мСотрудники, КомментироватьРасчет;
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьСписокСотрудниковДляРасчета( Кнопка, "Взносы", Взносы, мСотрудники, КомментироватьРасчет ) Тогда
		Возврат;
	КонецЕсли;
 	
	ПроведениеРасчетов.УдалитьСтрокиСторноПоУсловию( Взносы, мСотрудники ); 
	Записать();

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьВзносы( Взносы,, мСотрудники, КомментироватьРасчет );
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.Взносы.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат = ТекущаяСтрока.Результат;
	КонецЕсли;

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ВзносыФОТ и ее РЕКВИЗИТОВ

Процедура ВзносыФОТПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Сторно Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);
	
	КонецЕсли;
		
	ОформлениеСтроки.Ячейки.Период.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.НалоговыйПериод.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.Дни.Видимость = Ложь;
	
	ЯчейкаСКартинкой = ОформлениеСтроки.Ячейки.Картинка;
	ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
	ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);
	
КонецПроцедуры

Процедура ВзносыФОТПриАктивизацииСтроки(Элемент)
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
КонецПроцедуры

Процедура ВзносыФОТПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ВзносыФОТ.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мРезультат	= ТекущаяСтрока.Результат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВзносыФОТРезультатПриИзменении(Элемент)
		
	Если Элемент.Значение <> мРезультат Тогда
		ЭлементыФормы.ВзносыФОТ.ТекущаяСтрока.Авторасчет = Ложь;
		мРезультат = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ВзносыФОТ

Процедура КоманднаяПанельВзносыФОТОтборПоНалогу(Кнопка)
		
	мОтборПоНалогуВзносыФОТ = НЕ мОтборПоНалогуВзносыФОТ;
	УстановитьОтборСписка();

КонецПроцедуры

Процедура КоманднаяПанельВзносыФОТОтборПоСумме(Кнопка)
	
	мОтборПоСуммеВзносыФОТ = НЕ мОтборПоСуммеВзносыФОТ;
	УстановитьОтборСписка();

КонецПроцедуры

Процедура КоманднаяПанельВзносыФОТЗаполнить(Кнопка)
	Перем мСотрудники;
	
	Если НЕ ПолучитьСписокСотрудниковДляАвтозаполнения( Кнопка, НСтр("ru='Взносы на ФОТ';uk='Внески на ФОП'"), ВзносыФОТ, мСотрудники ) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьВзносы( мСотрудники, ВзносыФОТ, Ложь );
	
	ТекущаяСтрока = ЭлементыФормы.ВзносыФОТ.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат				= ТекущаяСтрока.Результат;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура КоманднаяПанельВзносыФОТРассчитать(Кнопка)
	Перем мСотрудники, КомментироватьРасчет;
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьСписокСотрудниковДляРасчета( Кнопка, "ВзносыФОТ", ВзносыФОТ, мСотрудники, КомментироватьРасчет ) Тогда
		Возврат;
	КонецЕсли;

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьВзносы( ВзносыФОТ, "ВзносыФОТ", мСотрудники, КомментироватьРасчет);
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.ВзносыФОТ.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат				= ТекущаяСтрока.Результат;
	КонецЕсли;

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ НДФЛ и ее РЕКВИЗИТОВ

// Процедура обеспечивает синхронизацию строк табличных полей 
//
// Параметры:
//  Элемент - табличное поле, которое отображает т.ч.
//  
Процедура НДФЛПриАктивизацииСтроки(Элемент)
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
КонецПроцедуры

Процедура НДФЛПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ЯчейкаСКартинкой = ОформлениеСтроки.Ячейки.Картинка;
	ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
	ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);
	
	Если ДанныеСтроки.Сторно Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);

	КонецЕсли;
	
	
КонецПроцедуры

Процедура НДФЛПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.НДФЛ.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мДоход	= ТекущаяСтрока.Доход;
		мНалог	= ТекущаяСтрока.Налог;
	КонецЕсли;
	
КонецПроцедуры

Процедура НДФЛДоходПриИзменении(Элемент)
		
	Если Элемент.Значение <> мДоход Тогда
		ЭлементыФормы.НДФЛ.ТекущаяСтрока.Авторасчет = Ложь;
		мДоход = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НДФЛНалогПриИзменении(Элемент)
		
	Если Элемент.Значение <> мНалог Тогда
		ЭлементыФормы.НДФЛ.ТекущаяСтрока.Авторасчет = Ложь;
		мНалог = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ НДФЛ

Процедура КоманднаяПанельНДФЛЗаполнить(Кнопка)
	Перем мСотрудники;
	
	Если НЕ ПолучитьСписокСотрудниковДляАвтозаполнения( Кнопка, "НДФЛ", НДФЛ, мСотрудники ) Тогда
		Возврат;
	КонецЕсли;
	
	СНачалаГода = ?(Найти(Кнопка.Имя,"СНачалаГода")>0, Истина, Ложь);
	Если СНачалаГода Тогда
		ГодЗаполнения = Год(ПериодРегистрации);
		Если ВвестиЧисло(ГодЗаполнения, НСтр("ru='Введите год заполнения';uk='Уведіть рік заповнення'"), 4, 0) Тогда
			ЗаполнитьНДФЛ(мСотрудники, СНачалаГода, ГодЗаполнения);
		КонецЕсли;
		
	Иначе
		ЗаполнитьНДФЛ(мСотрудники);
		
	КонецЕсли;
	
 	
КонецПроцедуры

Процедура КоманднаяПанельНДФЛРассчитать(Кнопка)
	Перем мСотрудники, КомментироватьРасчет;
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьСписокСотрудниковДляРасчета( Кнопка, "НДФЛ", НДФЛ, мСотрудники, КомментироватьРасчет ) Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеРасчетов.УдалитьСтрокиСторноПоУсловию( НДФЛ, мСотрудники ); 
	Записать();
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьНДФЛ(мСотрудники, КомментироватьРасчет);
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.НДФЛ.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мНалог	= ТекущаяСтрока.Налог;
		мДоход	= ТекущаяСтрока.Доход;
	КонецЕсли;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ Удержания и ее РЕКВИЗИТОВ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ Удержания и ее РЕКВИЗИТОВ
Процедура УдержанияПриАктивизацииСтроки(Элемент)
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
КонецПроцедуры

Процедура УдержанияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	
	Если ДанныеСтроки.Сторно Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);

	ИначеЕсли ДанныеСтроки.Сотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(51, 51, 153);
	
	ИначеЕсли ДанныеСтроки.Сотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(0, 128, 128);
	КонецЕсли;
	
	РаботаСДиалогами.ПриВыводеСтрокиНачисленийИУдержаний(ДанныеСтроки, ОформлениеСтроки, мДопСведенияОВидахРасчетаНачислений, Ложь);
	
	// управление видимостью ячеек, которые группируют некоторые элементы шапки
	ВидимостьДокументОснование = ?(ЗначениеЗаполнено(ДанныеСтроки.ДокументОснование), Истина, Ложь);
	ОформлениеСтроки.Ячейки.ДокументОснование.Видимость = ВидимостьДокументОснование;
	

	
КонецПроцедуры

Процедура УдержанияПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Удержания.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мРезультат	= ТекущаяСтрока.Результат;
	КонецЕсли;
	
КонецПроцедуры


Процедура УдержанияРезультатПриИзменении(Элемент)
		
	Если Элемент.Значение <> мРезультат Тогда
		ЭлементыФормы.Удержания.ТекущаяСтрока.Авторасчет = Ложь;
		мРезультат = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		
		СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
		
		Если СтрокаРаботники = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрока = Элемент.ТекущаяСтрока;
		ТекущаяСтрока.Авторасчет	= Истина;
		ТекущаяСтрока.Сотрудник		= ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
		
		ТекущаяСтрока.ДатаНачала			= НачалоМесяца(ПериодРегистрации);
		ТекущаяСтрока.ДатаОкончания			= КонецМесяца(ПериодРегистрации);
		
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ Удержания

Процедура КоманднаяПанельУдержанийЗаполнить(Кнопка)
	
	Если Кнопка.Имя = "ЗаполнитьПоРаботнику" Тогда
		
		мСотрудники = Новый СписокЗначений;
		мСотрудникиТекст = "";
		РазделительТекст = "";
		Для каждого СтрокаСотрудник Из ЭлементыФормы.РаботникиОрганизации.ВыделенныеСтроки Цикл
			мСотрудники.Добавить(СтрокаСотрудник.Сотрудник) ;
			мСотрудникиТекст = мСотрудникиТекст + РазделительТекст + СтрокаСотрудник.Сотрудник;
			РазделительТекст = "; ";
		КонецЦикла; 
	
		ТекстВопроса = НСтр("ru='Перед заполнением из табличной части ""Удержания"" будут удалены данные по сотрудникам: ';uk='Перед заповненням з табличної частини ""Утримання"" будуть вилучені дані по співробітниках: '") + мСотрудникиТекст + НСтр("ru='. Заполнить?';uk='. Заповнити?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		ПроведениеРасчетов.УдалитьСтрокиПоУсловию( Удержания, мСотрудники ); 
		Записать();
		
	Иначе
		
		// по всем сотрудникам ТЧ Работникиорганизации
		мСотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
		Если Удержания.Количество() > 0 Тогда
			
			ТекстВопроса = НСтр("ru='Перед заполнением табличная часть ""Удержания"" будет очищена. Заполнить?';uk='Перед заповненням таблична частина ""Утримання"" буде очищена. Заповнити?'");
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			Удержания.Очистить();
			Записать();
			
		КонецЕсли;
		
	КонецЕсли;

	АвтозаполнениеУдержания( Ссылка, Удержания, мСотрудники );
	
КонецПроцедуры

Процедура КоманднаяПанельУдержанийРассчитать(Кнопка)
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	КомментироватьРасчет = Ложь;
	Если Найти(Кнопка.Имя,"РассчитатьПоРаботнику")=1 И ЭлементыФормы.Начисления.ТекущиеДанные <> Неопределено Тогда
		
		мСотрудники = Новый СписокЗначений;
		Для каждого СтрокаСотрудник Из ЭлементыФормы.РаботникиОрганизации.ВыделенныеСтроки Цикл
			мСотрудники.Добавить(СтрокаСотрудник.Сотрудник) ;
		КонецЦикла; 
		
		Если Кнопка.Имя = "РассчитатьПоРаботникуСКомментарием" Тогда
			КомментироватьРасчет = Истина;
		КонецЕсли;
		
	Иначе 
		мСотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьУдержания(мСотрудники, КомментироватьРасчет);
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.Удержания.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат = ТекущаяСтрока.Результат;
	КонецЕсли;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ Займы и ее РЕКВИЗИТОВ

// Процедура обеспечивает синхронизацию строк табличных полей 
//
// Параметры:
//  Элемент - табличное поле, которое отображает т.ч.
//  
Процедура ПогашениеЗаймовПриАктивизацииСтроки(Элемент)
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
КонецПроцедуры

Процедура ПогашениеЗаймовДоговорЗаймаПриИзменении(Элемент)
	ДоговорЗайма = ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные.ДоговорЗайма;
	
	Если Не ЗначениеЗаполнено (ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные.Сотрудник) Тогда
		ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные.Сотрудник = Элемент.Значение.Сотрудник;
	КонецЕсли;
			
КонецПроцедуры

Процедура ПогашениеЗаймовНачисленоПроцентовПриИзменении(Элемент)
	УстановитьЗначениеПогашеноПроцентов();
КонецПроцедуры

Процедура ПогашениеЗаймовПогашениеОсновногоДолгаПриИзменении(Элемент)
	УстановитьЗначениеПогашеноПроцентов();
КонецПроцедуры

Процедура УстановитьЗначениеПогашеноПроцентов()
	ТекущиеДанные = ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные;
	ТекущиеДанные.ПогашеноПроцентов = Мин(ТекущиеДанные.ПогашеноЗайма, ТекущиеДанные.НачисленоПроцентов);
КонецПроцедуры

Процедура ПогашениеЗаймовДоговорЗаймаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Документы.ДоговорЗаймаСРаботником.ПолучитьФормуВыбора(,Элемент); 
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ФормаВыбора.Отбор.Организация.Использование = Истина;
		ФормаВыбора.Отбор.Организация.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.Отбор.Организация.Значение = Организация;
	КонецЕсли;
	
	Сотрудник = ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные.Сотрудник;
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		ФормаВыбора.Отбор.Сотрудник.Использование = Истина;
		ФормаВыбора.Отбор.Сотрудник.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.Отбор.Сотрудник.Значение = Сотрудник;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
КонецПроцедуры

Процедура ПогашениеЗаймовСотрудникПриИзменении(Элемент)
	Если Элемент.Значение <> ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные.ДоговорЗайма.Сотрудник Тогда
		ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные.ДоговорЗайма = Документы.ДоговорЗаймаСРаботником.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ Займов

Процедура КоманднаяПанельЗаймовЗаполнить(Кнопка)
	Перем мСотрудники;
	
	Если НЕ ПолучитьСписокСотрудниковДляАвтозаполнения( Кнопка, "Займы", ПогашениеЗаймов, мСотрудники ) Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	АвтозаполнениеЗаймы(Ссылка, ПогашениеЗаймов, мСотрудники);
		
	
КонецПроцедуры

Процедура КоманднаяПанельЗаймовРассчитать(Кнопка)
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	КомментироватьРасчет = Ложь;
	Если Найти(Кнопка.Имя,"РассчитатьПоРаботнику")=1 И ЭлементыФормы.Начисления.ТекущиеДанные <> Неопределено Тогда
		
		мСотрудники = Новый СписокЗначений;
		Для каждого СтрокаСотрудник Из ЭлементыФормы.РаботникиОрганизации.ВыделенныеСтроки Цикл
			мСотрудники.Добавить(СтрокаСотрудник.Сотрудник) ;
		КонецЦикла; 
		
		Если Кнопка.Имя = "РассчитатьПоРаботникуСКомментарием" Тогда
			КомментироватьРасчет = Истина;
		КонецЕсли;
		
	Иначе 
		мСотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьПогашениеЗаймов(мСотрудники, КомментироватьРасчет);
	ОбработкаКомментариев.ПоказатьСообщения();
	
	//активизируем текущую строку после расчета
	Если ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные = Неопределено И ПогашениеЗаймов.Количество()>0 Тогда
		СтрокаТЧ = ПогашениеЗаймов.Получить(0);
		ЭлементыФормы.ПогашениеЗаймов.ТекущаяСтрока = СтрокаТЧ;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияНазначениеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка = &Сотрудник ИЛИ
		|	Сотрудники.ОсновноеНазначение = &Сотрудник
		|";
		
		Запрос.УстановитьПараметр("Сотрудник",     ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Сотрудник);
		Запрос.Текст = ТекстЗапроса;
		ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
		СписокВыбора = Новый СписокЗначений;
		Пока ВыборкаИзЗапроса.Следующий() Цикл
			СписокВыбора.Добавить(ВыборкаИзЗапроса.Сотрудник);
		КонецЦикла;
		Элемент.СписокВыбора = СписокВыбора;

КонецПроцедуры

Процедура НачисленияВидРасчетаПриИзменении(Элемент)
	
	ТекСтрока = ЭлементыФормы.Начисления.ТекущиеДанные;
	
	ТекСтрока.ДатаНачала = ?(ТекСтрока.ДатаНачала=Дата('00010101'), ПериодРегистрации, ТекСтрока.ДатаНачала);
	ТекСтрока.ДатаОкончания = ?(ТекСтрока.ДатаОкончания=Дата('00010101'), КонецМесяца( ПериодРегистрации ), ТекСтрока.ДатаОкончания);
	
	ТекСтрока.БазовыйПериодНачало = ДобавитьМесяц(НачалоМесяца(ТекСтрока.ДатаНачала),-ТекСтрока.ВидРасчета.ЧислоМесяцев);
	ТекСтрока.БазовыйПериодКонец = КонецМесяца(ДобавитьМесяц(НачалоМесяца(ТекСтрока.ДатаНачала),-Мин(ТекСтрока.ВидРасчета.ЧислоМесяцев, 1)));
	
	ПроведениеРасчетов.ПроставитьДанныеСтроки(ТекСтрока.Сотрудник, ТекСтрока.Назначение, ТекСтрока.ДатаНачала, ПериодРегистрации, ТекСтрока.ВидРасчета, ТекСтрока);
	
КонецПроцедуры

Процедура ВзносыПередНачаломДобавления(Элемент, Отказ, Копирование)
	СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	Если СтрокаРаботники = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаРаботники.Сотрудник) Тогда
		Отказ = Истина;
	КонецЕсли;	
КонецПроцедуры

Процедура ВзносыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		
		СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
		
		Если СтрокаРаботники = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрока = Элемент.ТекущаяСтрока;
		ТекущаяСтрока.Авторасчет	= Истина;
		ТекущаяСтрока.Сотрудник		= ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
		
		ТекущаяСтрока.БазовыйПериодНачало	= НачалоМесяца(ПериодРегистрации);
		ТекущаяСтрока.БазовыйПериодКонец	= КонецМесяца(ПериодРегистрации);
		
	КонецЕсли; 

КонецПроцедуры


Процедура НДФЛПередНачаломДобавления(Элемент, Отказ, Копирование)
	СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	Если СтрокаРаботники = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаРаботники.Сотрудник) Тогда
		Отказ = Истина;
	КонецЕсли;	
КонецПроцедуры

Процедура НДФЛПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		
		СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
		
		Если СтрокаРаботники = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрока = Элемент.ТекущаяСтрока;
		ТекущаяСтрока.Авторасчет	= Истина;
		ТекущаяСтрока.Сотрудник		= ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
		
		ТекущаяСтрока.НалоговыйПериод		= НачалоМесяца(ПериодРегистрации);
		
	КонецЕсли; 

КонецПроцедуры

Процедура УдержанияПередНачаломДобавления(Элемент, Отказ, Копирование)
	СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	Если СтрокаРаботники = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаРаботники.Сотрудник) Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ВзносыФОТПередНачаломДобавления(Элемент, Отказ, Копирование)
	СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	Если СтрокаРаботники = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаРаботники.Сотрудник) Тогда
		Отказ = Истина;
	КонецЕсли;	
КонецПроцедуры

Процедура ВзносыФОТПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		
		СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
		
		Если СтрокаРаботники = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрока = Элемент.ТекущаяСтрока;
		ТекущаяСтрока.Авторасчет	= Истина;
		ТекущаяСтрока.Сотрудник		= ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
		
		ТекущаяСтрока.БазовыйПериодНачало	= НачалоМесяца(ПериодРегистрации);
		ТекущаяСтрока.БазовыйПериодКонец	= КонецМесяца(ПериодРегистрации);
		
	КонецЕсли; 
КонецПроцедуры

Процедура ПогашениеЗаймовПередНачаломДобавления(Элемент, Отказ, Копирование)
	СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	Если СтрокаРаботники = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаРаботники.Сотрудник) Тогда
		Отказ = Истина;
	КонецЕсли;	
КонецПроцедуры

Процедура ПогашениеЗаймовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		
		СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
		
		Если СтрокаРаботники = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрока = Элемент.ТекущаяСтрока;
		ТекущаяСтрока.Сотрудник		= ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
		
	КонецЕсли; 
КонецПроцедуры

Процедура ПредварительныйРасчетПриИзменении(Элемент)
	
	Если Начисления.Количество() > 0
		ИЛИ Взносы.Количество() > 0
		ИЛИ ВзносыФОТ.Количество() > 0
		ИЛИ Удержания.Количество() > 0
		ИЛИ НДФЛ.Количество() > 0
		ИЛИ ПогашениеЗаймов.Количество() > 0
		Тогда
		ТекстВопроса = НСтр("ru='Табличные части будут очищены. Продолжить?';uk='Табличні частини будуть очищені. Продовжити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Начисления.Очистить();
			Взносы.Очистить();
			ВзносыФОТ.Очистить();
			Удержания.Очистить();
			НДФЛ.Очистить();
		Иначе
			ПредварительныйРасчет = НЕ ПредварительныйРасчет;
		КонецЕсли; 
	КонецЕсли;
	
	ОбновитьВидимостьЗакладок();
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ФОРМЫ

мСписокЗапрещенныхСпособовРасчета = ПроведениеРасчетов.ПолучитьСписокСпособовРасчетаТребующихСпециализированныхДокументов();

мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
мСинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]		= Ложь;
мСинхронизируемыеТабличныеЧасти["Начисления"]				= Ложь;
мСинхронизируемыеТабличныеЧасти["Взносы"]					= Ложь;
мСинхронизируемыеТабличныеЧасти["ВзносыФОТ"]				= Ложь;
мСинхронизируемыеТабличныеЧасти["НДФЛ"]					    = Ложь;
мСинхронизируемыеТабличныеЧасти["Удержания"]				= Ложь;
мСинхронизируемыеТабличныеЧасти["ПогашениеЗаймов"]			= Ложь;

мСписокНедоступныхКодовНДФЛ = ПроведениеРасчетов.ПолучитьСписокКодовДоходаТребующихДополнительнойОбработки();

мДопСведенияОВидахРасчетаНачислений = Новый Соответствие;
мОтборПоСотруднику = ВосстановитьЗначение("ОтборСпискаНачислениеЗП");
Если мОтборПоСотруднику = Неопределено Тогда
	 мОтборПоСотруднику = Ложь;
КонецЕсли;	 
мОтборПоНалогуВзносыФОТ = Ложь; 
мОтборПоНалогуВзносы = Ложь;
мОтборПоСуммеВзносы = Ложь;
мОтборПоСуммеВзносыФОТ = Ложь; 
 
мДокументыИсправление = Новый Массив;
