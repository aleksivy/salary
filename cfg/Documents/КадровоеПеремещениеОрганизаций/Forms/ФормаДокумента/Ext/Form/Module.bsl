////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущийСотрудник;
Перем мВалютаРегламентированногоУчета; // Хранит значение константы ВалютаРегламентированногоУчета - для ввода значений по умолчанию

// для синхронизации строк табличных полей
Перем мСтрокаРаботникиУстановлена;
Перем мСтрокаНачисленияУстановлена;

Перем мСинхронизируемыеТабличныеЧасти;

Перем мСведенияОВидахРасчетаОснНачислений;
Перем мСведенияОВидахРасчетаДопНачислений;

Перем мДеревоМакетов;		// Хранит дерево макетов печатных форм
Перем мПодменюПечати;		// Хранит элемент управления подменю печати
Перем мПечатьПоУмолчанию;	// Хранит элемент управления кнопку печать по умолчанию
Перем мКнопкиЗаполненияТЧ;	// Хранит дерево кнопок подменю заполнение ТЧ

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПолучитьСтруктуруПараметровТайпинга()
	
	ВидыВремени = Новый Массив;
	ВидыВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
	ВидыВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);

	СтруктураПараметров = Новый Структура("ВидВремени", ВидыВремени);
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровТайпинга()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанель1);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеНачисления,ЭлементыФормы.КоманднаяПанель2);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

Процедура УстановитьВидимостьПанели(ИзменятьДанные = Ложь)

	ПоказыватьПодразделения = Организация.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо и ЗначениеЗаполнено(Организация);
	ЭлементыФормы.ПанельОбособленныхПодразделений.Видимость = Ложь;
	Если ИзменятьДанные Тогда
		Если ПоказыватьПодразделения Тогда
			ОбособленноеПодразделениеКуда	= Организация;
			ОбособленноеПодразделениеОткуда	= Организация;
		Иначе
			ОбособленноеПодразделениеКуда	= Справочники.Организации.ПустаяСсылка();
			ОбособленноеПодразделениеОткуда	= Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.РаботникиОрганизации.Колонки.ПодразделениеОрганизации.ЭлементУправления.ВыборПоВладельцу = ?(ПоказыватьПодразделения,ОбособленноеПодразделениеКуда,Организация);
	
КонецПроцедуры // УстановитьВидимостьПанели()

// Добавляет строку с начислением работника.
Процедура ДобавитьНачисленияПоСтроке(СтрокаТабличнойЧасти)
	
	ДатаАктуальности = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаНачала), СтрокаТабличнойЧасти.ДатаНачала - 1, Дата);
	СтруктураНачисления = РегистрыСведений.ПлановыеНачисленияРаботниковОрганизаций.ПолучитьПоследнее(ДатаАктуальности, Новый Структура("Сотрудник",СтрокаТабличнойЧасти.Сотрудник));
	
	ДобавитьСтрокиНачисленийПоРаботнику(СтрокаТабличнойЧасти.Сотрудник, ДатаАктуальности);

КонецПроцедуры // ДобавитьНачисленияПоСтроке()

// удаляет начисления по работнику, все или автоматически заполняемые
// Параметры:
//   Сотрудник - СправочникСсылка.СотрудникиОрганизаций
//   УдалятьВсе - булево, если Истина - удаляются все начисления по Сотруднику,
//				например, при его удалении из сиска.
//				Если Ложь - удалаются только те, которые вводятся "автоматически",
//				например, при редактировании данных по строке табличной части 
//				со списком работников
Процедура УдалитьНачисленияПоРаботнику(Сотрудник)
	
	СтруктураПоиска = Новый Структура("Сотрудник", Сотрудник);
	
	// удалять начисления будем в том случае, когда в т.ч. Работники эта строка с сотрудником - последняя
	Если РаботникиОрганизации.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Строки = ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаТабличнойЧасти из Строки Цикл
		ОсновныеНачисления.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
		
КонецПроцедуры // УдалитьНачисленияПоРаботнику()

// Добавляет или переопределяет строку в табличной части "Начисления" при изменении сотрудника 
// или формы оплаты труда у сотрудника.
//
Процедура ПереформироватьНачисленияПоРаботнику(ТекущаяСтрока)

	УдалитьНачисленияПоРаботнику(мТекущийСотрудник);
	ДобавитьНачисленияПоСтроке(ТекущаяСтрока);
	
КонецПроцедуры // ПереформироватьНачисленияПоРаботнику()

// Возвращает структуру с данными по выбранному работнику 
// Параметры:
//  Сотрудник - ссылка на справочник сотрудников
//
// Возвращаемое значение:
//  Структура с элементами
//		всегда присуствует 
//			Сотрудник
//		если ВыбираемыеДанные содержит строку "Работники"
//			Подразделение
//			Должность
//			ГрафикРаботы
//			ЗанимаемыхСтавок
//		если ВыбираемыеДанные содержит строку "УчетЗаработкаРаботников"
//			СпособОтраженияВУпрУчете
//			УчетНачисленийПоОрганизации
//
Функция СведенияПоВыбранномуРаботникуОрганизации(ЭлементФормы, Сотрудник)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудник",		Сотрудник);
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник,
	|	РаботникиОрганизации.Сотрудник.Наименование,
	|	РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность КАК Должность,
	|	РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
	|	РаботникиОрганизации.Должность.Наименование КАК ДолжностьНаименование,
	|	РаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
	|	РаботникиОрганизации.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	РаботникиОрганизации.ПринятНаНовоеРабочееМесто
  	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДокумента, Сотрудник = &Сотрудник) КАК РаботникиОрганизации";
	
	НаборыДанных = Запрос.Выполнить().Выгрузить();
	
	// Если не нашли данных - ничего не делаем
	Если НаборыДанных.Количество() = 0 Тогда
		Возврат Неопределено;
		
	// Если нашли один набор данных то используем его
	ИначеЕсли НаборыДанных.Количество() = 1 Тогда
		Возврат НаборыДанных[0];
		
	// Если наборов данных несколько - предложим выбрать из списка.
	Иначе
		СписокНаборовДанных = Новый СписокЗначений;
		Для Каждого СтрокаТабличнойЧасти Из НаборыДанных Цикл
			СписокНаборовДанных.Добавить(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.СотрудникНаименование + " (" + СтрокаТабличнойЧасти.ПодразделениеОрганизацииНаименование + ", " + СтрокаТабличнойЧасти.ДолжностьНаименование + ")");
		КонецЦикла;
		ВыбранныйНаборДанных = ВыбратьИзСписка(СписокНаборовДанных, ЭлементФормы);
		Если ВыбранныйНаборДанных = НеОпределено Тогда
			Возврат Неопределено;
		Иначе
			Возврат ВыбранныйНаборДанных.Значение;
		КонецЕсли;
			
	КонецЕсли;
	
КонецФункции // СведенияПоВыбранномуРаботникуОрганизации()

// проставляет в строку табличной части полученные данные по Сотруднику
Процедура ПроставитьДанныеПриИзмененииСотрудника(ТекущаяСтрока, ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СтрокаТаблицыЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыбранноеЗначение);
	
	Если мТекущийСотрудник <> ВыбранноеЗначение.Сотрудник Тогда
		мТекущийСотрудник = ВыбранноеЗначение.Сотрудник;
		ПереформироватьНачисленияПоРаботнику(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры // ПроставитьДанныеПриИзмененииСотрудника()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	Иначе 
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ПодразделениеОрганизации");
	СтруктураКолонок.Вставить("Должность");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ГрафикРаботы");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаботникиОрганизации.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента	= Дата;
	мТекущийСотрудник		= ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.СотрудникиОрганизаций");

	УстановитьВидимостьПанели();
		
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.РаботникиОрганизации.Колонки.ТабельныйНомерСтрока);
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта1);
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта2);
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта3);
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта4);
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта5);
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта6);
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);

	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФормеЗУП(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;
	КонецЕсли;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			
			РаботникиОрганизации.Загрузить(ЗначениеВыбора.Данные.Выгрузить());
			Сотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
			
			ДобавитьСтрокиНачисленийПоРаботнику(Сотрудники);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Заполнить?';uk='Перед заповненням табличні частини будуть очищені. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		РаботникиОрганизации.Очистить();
		ОсновныеНачисления.Очистить();
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, , ?(ЭлементыФормы.ПанельОбособленныхПодразделений.Видимость, ОбособленноеПодразделениеОткуда, Организация));
	
КонецПроцедуры // ДействияФормыЗаполнить()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

Процедура КоманднаяПанельРаботникиПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, Организация, 1);
	
КонецПроцедуры // КоманднаяПанельРаботникиПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	УстановитьВидимостьПанели(Истина);
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ОбособленноеПодразделениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	(Организации.ГоловнаяОрганизация = &Организация
	|			ИЛИ Организации.Ссылка = &Организация)
	|	И Организации.Наименование ПОДОБНО &Текст";
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст+"%";
	
	Запрос.УстановитьПараметр("Текст", Текст);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ТекстАвтоПодбора = Выборка.Наименование;
	КонецЕсли;

КонецПроцедуры // ОбособленноеПодразделениеАвтоПодборТекста()

Процедура ОбособленноеПодразделениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)

	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
	|	Организации.Наименование,
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	(Организации.ГоловнаяОрганизация = &Организация
	|			ИЛИ Организации.Ссылка = &Организация)
	|	И Организации.Наименование ПОДОБНО &Текст";
	
	
	ТекстВПоле = Текст;
	
	// заменим спецсимволы
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "~", "~~");
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "%", "~%");
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "_", "~_");
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "[", "~[");
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "-", "~-");
	ТекстВПоле = ТекстВПоле+"%";
	
	Запрос.УстановитьПараметр("Текст", ТекстВПоле);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Количество = Выборка.Количество();
	
	Если Количество = 0 Тогда
		Предупреждение(НСтр("ru='В поле ввода неверно задано наименование обособленного подразделения!';uk='В полі введення невірно задане найменування відокремленого підрозділу!'"));
		Значение = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации");
		
	ИначеЕсли Количество < 51 Тогда
		Значение = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Значение.Добавить(Выборка.Ссылка, Выборка.Наименование);
		КонецЦикла;
		
	Иначе
		Значение = Неопределено;
		
	КонецЕсли;
	
	СтандартнаяОбработка = (Значение = Неопределено);
	
КонецПроцедуры // ОбособленноеПодразделениеОкончаниеВводаТекста()

Процедура ОбособленноеПодразделениеОткудаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ОбособленноеПодразделениеОткудаНачалоВыбора()

Процедура ОбособленноеПодразделениеОткудаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Список = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	Список.Вставить(0, Организация);
	Элемент.СписокВыбора = Список;
	
КонецПроцедуры // ОбособленноеПодразделениеОткудаНачалоВыбораИзСписка()

Процедура ОбособленноеПодразделениеКудаПриИзменении(Элемент)
	
	ЭлементыФормы.РаботникиОрганизации.Колонки.ПодразделениеОрганизации.ЭлементУправления.ВыборПоВладельцу = ОбособленноеПодразделениеКуда;
	
КонецПроцедуры // ОбособленноеПодразделениеКудаПриИзменении()

Процедура ОбособленноеПодразделениеКудаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ОбособленноеПодразделениеКудаНачалоВыбора()

Процедура ОбособленноеПодразделениеКудаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Список = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	Список.Вставить(0,Организация);
	Элемент.СписокВыбора = Список;
	
КонецПроцедуры // ОбособленноеПодразделениеКудаНачалоВыбораИзСписка()

                                      
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура - обработчик события "ПередНачаломДобавления" строки ТЧ
Процедура РаботникиОрганизацииПередНачаломДобавления(Элемент, Отказ, Копирование)
		
	Если Копирование Тогда
		
		ДанныеСтроки = Элемент.ТекущиеДанные;

		НоваяСтрока = РаботникиОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки,, "Сотрудник");
		
		Элемент.ТекущаяСтрока = НоваяСтрока;
		Отказ = Истина;
		
	КонецЕсли;

КонецПроцедуры // РаботникиОрганизацииПередНачаломДобавления()

// Процедура - обработчик события "ПриАктивизацииСтроки" строки ТЧ
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.РаботникиОрганизации, мСинхронизируемыеТабличныеЧасти, "Сотрудник"); 
	
КонецПроцедуры // РаботникиОрганизацииПриАктивизацииСтроки()
 
// Процедура - обработчик события "ПриАктивизацииЯчейки" строки ТЧ
Процедура РаботникиОрганизацииПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяКолонка = Элемент.ТекущаяКолонка;
	Если ТекущаяКолонка.Имя = "ПодразделениеОрганизации" Или ТекущаяКолонка.Имя = "Должность" Тогда
		
		ИмяВторойКолонки = ?(ТекущаяКолонка.Имя = "ПодразделениеОрганизации","Должность","ПодразделениеОрганизации");
		
		СписокПодразделений = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации(ТекущаяКолонка.Имя, Организация, Элемент.ТекущиеДанные[ИмяВторойКолонки]);
		КоличествоЗначений = СписокПодразделений.Количество();
		
		ПолеВвода = ТекущаяКолонка.ЭлементУправления;
		ПолеВвода.СписокВыбора = СписокПодразделений;
		ПолеВвода.КнопкаСпискаВыбора = КоличествоЗначений > 0;
		ПолеВвода.ВысотаСпискаВыбора = Мин(10, КоличествоЗначений);
		
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииПриАктивизацииЯчейки()

// Процедура удаляут строку с работником из табличной части "ОсновныеНачисления".
Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	УдалитьНачисленияПоРаботнику(Элемент.ТекущиеДанные.Сотрудник);
	
КонецПроцедуры // РаботникиОрганизацииПередУдалением()

// Процедура обеспечивает начальное значение реквизита "ЗанимаемыхСтавок" и 
//  "ГрафикРаботы".
//
// Параметры:
//  Элемент      - табличное поле, которое отображает т.ч.
//  НоваяСтрока  - булево, признак редактирования новой строки
//  
Процедура РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ЗанимаемыхСтавок) Тогда
			ДанныеСтроки.ЗанимаемыхСтавок = 1;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ГрафикРаботы) Тогда
			ДанныеСтроки.ГрафикРаботы = ПроцедурыУправленияПерсоналом.ПолучитьГрафикРаботы(Ответственный);
		КонецЕсли;
		
	КонецЕсли;
	
	мТекущийСотрудник = ДанныеСтроки.Сотрудник;
	
КонецПроцедуры // РаботникиОрганизацииПриНачалеРедактирования()


// Процедура обеспечивает заполнение колонок с данными работника на дату перемещения
//
// Параметры:
//  Элемент - табличное поле, которое отображает т.ч.
//  
Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиОрганизацииСрезПоследних.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РаботникиОрганизацииСрезПоследних.Должность КАК Должность
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Период, Сотрудник = &Сотрудник И Регистратор <> &Ссылка) КАК РаботникиОрганизацииСрезПоследних";

	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		
		ДанныеСтроки = СтрокаТабличнойЧасти.ДанныеСтроки;
		
		Если Не ДанныеСтроки.Сотрудник.Пустая() Тогда
			
			Запрос.УстановитьПараметр("Период",		ДанныеСтроки.ДатаНачала);
			Запрос.УстановитьПараметр("Сотрудник",	ДанныеСтроки.Сотрудник);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				СтрокаТабличнойЧасти.Ячейки.СтароеПодразделение.УстановитьТекст(Выборка.ПодразделениеОрганизации);
				СтрокаТабличнойЧасти.Ячейки.СтараяДолжность.УстановитьТекст(Выборка.Должность);
				СтрокаТабличнойЧасти.Ячейки.СтараяСтавка.УстановитьТекст(Формат(Выборка.ЗанимаемыхСтавок,"ЧЦ=4;ЧДЦ=2"));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);
	
КонецПроцедуры // РаботникиОрганизацииПриПолученииДанных()

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение.ЭтоГруппа Тогда
		Возврат
	КонецЕсли;
	
	// Если выбор произошел в форме подбора и этого сотрудника в документе пока нет, 
	// добавим новую строку в таблицу 
	
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		
		СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
		СтрокаТабличнойЧасти.Сотрудник = ВыбранноеЗначение;
		СтрокаТабличнойЧасти.ФизЛицо = ВыбранноеЗначение.ФизЛицо;
		
		ПроставитьДанныеПриИзмененииСотрудника(СтрокаТабличнойЧасти, СведенияПоВыбранномуРаботникуОрганизации(Элемент, ВыбранноеЗначение));
		мТекущийСотрудник = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура - обработчик события "ПриИзменении" поля ввода Сотрудник
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)

	ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
	ПроставитьДанныеПриИзмененииСотрудника(ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные, СведенияПоВыбранномуРаботникуОрганизации(Элемент, Элемент.Значение));
	
КонецПроцедуры // РаботникиОрганизацииСотрудникПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Сотрудник
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1,СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода Сотрудник
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокиРаботников = РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение));
	Если СтрокиРаботников.Количество() > 0 и Элемент.Значение <> ВыбранноеЗначение Тогда
		Предупреждение(НСтр("ru='В данном документе по одному работнику можно вводить только одну строку!';uk='В даному документі по одному працівнику можна вводити тільки один рядок!'"));
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = ВыбранноеЗначение;
	ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
	ПроставитьДанныеПриИзмененииСотрудника(ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные, СведенияПоВыбранномуРаботникуОрганизации(Элемент, ВыбранноеЗначение));
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода Сотрудник
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода Сотрудник
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникОкончаниеВводаТекста()

// Процедура обеспечивает нестандартный шаг регулирования 
//
// Параметры:
//  Элемент - поле ввода т.ч., которое отображает занимаемые ставки
//  Направление - число, определяет, какая из кнопок регулирования была нажата
//  СтандартнаяОбработка - булево, признак выполнения системной обработки события
//  
Процедура РаботникиОрганизацииЗанимаемыхСтавокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	Если Направление = 1 Тогда // увеличиваем значение
		ДанныеСтроки.ЗанимаемыхСтавок = ДанныеСтроки.ЗанимаемыхСтавок + 0.5;
		
	Иначе // = -1 - уменьшаем значение
		ДанныеСтроки.ЗанимаемыхСтавок = ДанныеСтроки.ЗанимаемыхСтавок - 0.5;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // РаботникиОрганизацииЗанимаемыхСтавокРегулирование()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

// Процедура - обработчик события "ПриАктивизацииСтроки" строки ТЧ
Процедура ОсновныеНачисленияПриАктивизацииСтроки(Элемент)
	
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.ОсновныеНачисления, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
КонецПроцедуры // ОсновныеНачисленияПриАктивизацииСтроки()

// Процедура - обработчик события "ПриВыводеСтроки" ТЧ
Процедура ОсновныеНачисленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПриВыводеСтрокиПлановыхНачисленийИУдержаний(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчетаОснНачислений);
	
КонецПроцедуры // ОсновныеНачисленияПриВыводеСтроки()

// Процедура - обработчик события "ПриОкончанииРедактирования" ТЧ
Процедура ОсновныеНачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		Элемент.ТекущиеДанные.Показатель1 = 0;
	КонецЕсли;
		
КонецПроцедуры // ОсновныеНачисленияПриОкончанииРедактирования()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

Процедура ОсновныеНачисленияСотрудникПриИзменении(Элемент)
	ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода начисления
//
Процедура ОсновныеНачисленияВидРасчетаПриИзменении(Элемент)
	ПриИзмененииВидаРасчета(Элемент.Значение,"ОсновныеНачисления");	
КонецПроцедуры // ОсновныеНачисленияВидРасчетаПриИзменении()

Процедура ОсновныеНачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокВидовВремени = Новый СписокЗначений;
	СписокВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
	СписокВидовВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
	
	СписокНедопустимыхВР = Новый СписокЗначений;
	//СписокНедопустимыхВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет);
	//СписокНедопустимыхВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет);
	СписокНедопустимыхВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаПраздничныеИВыходные);
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора(,Элемент,Ссылка);
	
	
	ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбора.Отбор.Ссылка.Значение = СписокНедопустимыхВР;
	ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ОсновныеНачисленияВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));	
КонецПроцедуры

Процедура ОсновныеНачисленияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаТайпинга, мТекстТайпинга, мПоследнееЗначениеЭлементаТайпинга, Ложь);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура - обработчик события "Файлы".
//
Процедура ДействияФормыФайлы(Кнопка)
	
	Если Ссылка.Пустая() Тогда
		Предупреждение(НСтр("ru='Сначала запишите документ.';uk='Спочатку запишіть документ.'"));
		Возврат;
	КонецЕсли;

	ФормаФайлов = Справочники.ХранилищеДополнительнойИнформации.ПолучитьФорму("ФормаСпискаФайловИИзображений", ЭтаФорма);
	
	ФормаФайлов.Изображения.Отбор.Объект.Использование                               = Истина;
	ФормаФайлов.Изображения.Отбор.Объект.Значение                                    = Ссылка;
	ФормаФайлов.ЭлементыФормы.Изображения.НастройкаОтбора.Объект.Доступность         = Ложь;
	ФормаФайлов.ЭлементыФормы.Изображения.Колонки.Объект.Видимость                   = Ложь;

	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Использование                       = Истина;
	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Значение                            = Ссылка;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.НастройкаОтбора.Объект.Доступность = Ложь;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.Колонки.Объект.Видимость           = Ложь;

	ОбязательныеОтборы = Новый Структура;
	ОбязательныеОтборы.Вставить("Объект",Ссылка);

	ФормаФайлов.ОбязательныеОтборы = ОбязательныеОтборы;
	
	ФормаФайлов.Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанель2ГрупповаяОбработка(Кнопка)
	Форма = ПолучитьФорму("ФормаГрупповаяОбработка", Кнопка);
	Форма.Документ = ДокументОбъект;
	Форма.Работники = РаботникиОрганизации.Выгрузить();
	Форма.ОткрытьМодально();
КонецПроцедуры



Процедура ПриИзмененииВидаРасчета(Значение, ИмяОбъекта)

	СведенияОВидеРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчетаОснНачислений, Значение);

	Для СчПоказателей = 1 По Мин(СведенияОВидеРасчета["КоличествоПоказателей"],6) Цикл
		Если НЕ ЗначениеЗаполнено(ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей]) И 
			СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей] = мВалютаРегламентированногоУчета;
		КонецЕсли;
		Если НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей] = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;
		Если НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Показатель" + СчПоказателей] = 0;
		КонецЕсли;
	КонецЦикла;
	
	// для ночных и вчерних определим "процент отплаты"
	Если Значение = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы Тогда
		ЭлементыФормы[ИмяОбъекта].ТекущиеДанные.Показатель2 = 100*РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).КоэффициентВечерних;
	ИначеЕсли Значение = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы Тогда
		ЭлементыФормы[ИмяОбъекта].ТекущиеДанные.Показатель2 = 100*РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).КоэффициентНочных;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мСтрокаРаботникиУстановлена		= Ложь;
мСтрокаНачисленияУстановлена	= Ложь;

мСинхронизируемыеТабличныеЧасти = Новый Соответствие;

мСинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]		= Ложь;
мСинхронизируемыеТабличныеЧасти["ОсновныеНачисления"]		= Ложь;

мСведенияОВидахРасчетаОснНачислений = Новый Соответствие;
мСведенияОВидахРасчетаДопНачислений = Новый Соответствие;

мОбработкаТайпинга					= Ложь;
мТекстТайпинга						= "";
мПоследнееЗначениеЭлементаТайпинга	= Неопределено;

