////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;
Перем мКурсВалютыУпрУчета;
Перем мКратностьВалютыУпрУчета;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Список соответствий 1 - пн, 2 - вт,.... 7 - вс.
Перем ДниНедели;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает видимость колонки, номер которой совпадает с днем даты документа
//
Процедура УстановитьКолонкуПоДате()

	НомерКолонки = День(ДатаНачалаПериода);
	Для каждого Колонка из ЭлементыФормы.Исполнители.Колонки Цикл
		
		Если Найти(Колонка.Имя, "Колонка") = 0 Тогда
			Продолжить
		КонецЕсли;
		
		Колонка.Видимость = ?(Колонка.Имя = "Колонка" + Строка(НомерКолонки), Истина, Ложь)
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура удаляет лишние колонки с днями для месяцев с количеством дней менее 31
//
Процедура УдалениеЛишнихКолонокДней()
	
	НомерДня = День(КонецМесяца(ПериодРегистрации)) + 1;
	Пока НомерДня <= 31 Цикл
		ЭлементыФормы.Исполнители.Колонки["Колонка" + Строка(НомерДня)].Видимость = Ложь;
		НомерДня = НомерДня + 1
	КонецЦикла
	
КонецПроцедуры //УдалениеЛишнихКолонокДней()

Процедура ПервоначальнаяУстановкаРеквизитовУчетаВремени()

	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
		ПериодНаряда = СпособВводаДанных;
	Иначе
		ПериодНаряда = Перечисления.СпособыВводаДанныхОВремени.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // ПервоначальнаяУстановкаРеквизитовУчетаВремени()

Процедура ОбновитьСуммуОтработанныхДнейИЧасов()
	
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
		ТекущаяСтрока = ЭлементыФормы.Исполнители.ТекущаяСтрока;
		
		СуммаЧасов	= 0;
		СуммаДней	= 0;
		Для Сч = 1 По 31 Цикл
			
			ЧасовПоСтроке = ТекущаяСтрока["Часов" + Строка(Сч)];
			СуммаЧасов = СуммаЧасов + ЧасовПоСтроке;
			Если ЧасовПоСтроке > 0 Тогда
				СуммаДней = СуммаДней + 1
			КонецЕсли;
			
		КонецЦикла;
		
		ЭлементыФормы.Исполнители.ТекущиеДанные.ОтработаноЧасов	= СуммаЧасов;
		ЭлементыФормы.Исполнители.ТекущиеДанные.ОтработаноДней	= СуммаДней;
	ИначеЕсли СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
		
		СуммаЧасов = ЭлементыФормы.Исполнители.ТекущаяСтрока["Часов" + Строка(День(ДатаНачалаПериода))];
		
		ЭлементыФормы.Исполнители.ТекущиеДанные.ОтработаноЧасов	= СуммаЧасов;
		ЭлементыФормы.Исполнители.ТекущиеДанные.ОтработаноДней	= ?(СуммаЧасов > 0, 1, 0);
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСуммуОтработанныхДнейИЧасов()


Процедура ОбновитьСуммуОтработанныхДнейИЧасовДляВсехСтрок()
	
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
		Для Каждого СтрокаТабличнойЧасти Из Исполнители Цикл
			СуммаЧасов = 0;
			СуммаДней = 0;
			Для Сч = 1 По 31 Цикл
				
				ЧасовПоСтроке = СтрокаТабличнойЧасти["Часов" + Строка(Сч)];
				СуммаЧасов = СуммаЧасов + ЧасовПоСтроке;
				Если ЧасовПоСтроке > 0 Тогда
					СуммаДней = СуммаДней + 1
				КонецЕсли;
			КонецЦикла;
			СтрокаТабличнойЧасти.ОтработаноЧасов = СуммаЧасов;
			СтрокаТабличнойЧасти.ОтработаноДней = СуммаДней;
		КонецЦикла;
		
	ИначеЕсли СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
		Для Каждого СтрокаТабличнойЧасти Из Исполнители Цикл
			СуммаЧасов = СтрокаТабличнойЧасти["Часов" + Строка(День(ДатаНачалаПериода))];
			СтрокаТабличнойЧасти.ОтработаноЧасов = СуммаЧасов;
			СтрокаТабличнойЧасти.ОтработаноДней = ?(СуммаЧасов > 0, 1, 0);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСуммуОтработанныхДнейИЧасовДляВсехСтрок()

// Процедура устанавливает видимость колонок в зависимости от выбранного способа регистрации времени
// и видимость и доступность реквизитов учета времени
Процедура ОбновитьРеквизитыУчетаВремени()
	
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
		ЭлементыФормы.ДатаНачалаПериода.ТолькоПросмотр = Ложь;
		ЭлементыФормы.ПериодРегистрации.Доступность = Ложь;
		ЭлементыФормы.ПоДням.Видимость = Ложь;
		ЭлементыФормы.ВЦеломЗаПериод.Видимость = Ложь;
		
		ЭлементыФормы.Исполнители.Колонки.ОтработаноДней.Видимость = Ложь;
		ЭлементыФормы.Исполнители.Колонки.ОтработаноЧасов.Видимость = Ложь;
	ИначеЕсли СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
		ЭлементыФормы.ДатаНачалаПериода.ТолькоПросмотр = Истина;
		ЭлементыФормы.ПериодРегистрации.Доступность = Истина;
		ЭлементыФормы.ВЦеломЗаПериод.Видимость = Истина;
		ЭлементыФормы.ПоДням.Видимость = Истина;
		ЭлементыФормы.ВЦеломЗаПериод.Доступность = УчитыватьОтработанноеВремя;
		ЭлементыФормы.ПоДням.Доступность = УчитыватьОтработанноеВремя;
		
		ЭлементыФормы.Исполнители.Колонки.ОтработаноДней.Видимость = УчитыватьОтработанноеВремя;
		ЭлементыФормы.Исполнители.Колонки.ОтработаноЧасов.Видимость = УчитыватьОтработанноеВремя;
	Иначе // В целом за период
		ЭлементыФормы.ДатаНачалаПериода.ТолькоПросмотр = Истина;
		ЭлементыФормы.ПериодРегистрации.Доступность = Истина;
		ЭлементыФормы.ПоДням.Видимость = Истина;
		ЭлементыФормы.ВЦеломЗаПериод.Видимость = Истина;
		ЭлементыФормы.ВЦеломЗаПериод.Доступность = УчитыватьОтработанноеВремя;
		ЭлементыФормы.ПоДням.Доступность = УчитыватьОтработанноеВремя;
		
		ЭлементыФормы.Исполнители.Колонки.ОтработаноДней.Видимость = УчитыватьОтработанноеВремя;
		ЭлементыФормы.Исполнители.Колонки.ОтработаноЧасов.Видимость = УчитыватьОтработанноеВремя;
	КонецЕсли;
	
	
	ВидимостьКолонокПоДням = (СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням) И УчитыватьОтработанноеВремя;
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень И УчитыватьОтработанноеВремя Тогда
		УстановитьКолонкуПоДате();
	Иначе
		Для Каждого Колонка Из ЭлементыФормы.Исполнители.Колонки Цикл
			Если Найти(Колонка.Имя, "Колонка") = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Колонка.Видимость = ВидимостьКолонокПоДням;
			
		КонецЦикла;
		
		// Обрубание лишних колонок по дням для месяцес с количеством дней менее 31.
		Если ВидимостьКолонокПоДням Тогда
			УдалениеЛишнихКолонокДней();
		КонецЕсли;
		ОформитьЗаголовкиДнейМесяца();
		
	КонецЕсли;
КонецПроцедуры // ОбновитьРеквизитыУчетаВремени()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Выработка,ЭлементыФормы.КоманднаяПанельРаботы);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Исполнители,ЭлементыФормы.КоманднаяПанельРаботники);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

// Запоминаем курс упр валюты на дату документа
//
// Параметры
//	ДатаКурса	- дата курса
//
Процедура ПолучитьКурсУпрВалюты(ДатаКурса)

	Если мВалютаУпрУчета = мВалютаРегламентированногоУчета Тогда
		мКурсВалютыУпрУчета			= 1;
		мКратностьВалютыУпрУчета	= 1;
		
	Иначе
		Структура = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.ПолучитьПоследнее(НачалоМесяца(ДатаКурса), Новый Структура("Валюта", мВалютаУпрУчета));
		мКурсВалютыУпрУчета			= Структура.Курс;
		мКратностьВалютыУпрУчета	= Структура.Кратность;
		
	КонецЕсли;

КонецПроцедуры // ПолучитьКурсУпрВалюты()

// Управляет элементами формы
//
// Параметры
//	Нет.
//
Процедура ПриИзмененииВидаУчета()

	//РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	ЭлементыФормы.Организация.АвтоОтметкаНезаполненного	= ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.Организация.ОтметкаНезаполненного		= ОтражатьВБухгалтерскомУчете и Организация.Пустая();
	
	Если ОтражатьВБухгалтерскомУчете Тогда 
		
		ЭлементыФормы.Выработка.Колонки.Аналитика.ОтображатьВШапке				= Истина;
		ЭлементыФормы.Выработка.Колонки.НоменклатурнаяГруппа.ОтображатьВШапке	= Ложь;
		ЭлементыФормы.Выработка.Колонки.ОбъектСтроительства.ОтображатьВШапке	= Ложь;
		ЭлементыФормы.Выработка.Колонки.Продукция.ОтображатьВШапке				= Ложь;
		ЭлементыФормы.Выработка.Колонки.ОбъектСтроительства.Положение	= ПоложениеКолонки.НаСледующейСтроке;
		ЭлементыФормы.Выработка.Колонки.Продукция.Положение				= ПоложениеКолонки.НаСледующейСтроке;
		
	Иначе
		
		ЭлементыФормы.Выработка.Колонки.Аналитика.ОтображатьВШапке				= Ложь;
		ЭлементыФормы.Выработка.Колонки.НоменклатурнаяГруппа.ОтображатьВШапке	= Истина;
		ЭлементыФормы.Выработка.Колонки.ОбъектСтроительства.ОтображатьВШапке	= Истина;
		ЭлементыФормы.Выработка.Колонки.Продукция.ОтображатьВШапке				= Истина;
		ЭлементыФормы.Выработка.Колонки.ОбъектСтроительства.Положение	= ПоложениеКолонки.ВТойЖеКолонке;
		ЭлементыФормы.Выработка.Колонки.Продукция.Положение				= ПоложениеКолонки.ВТойЖеКолонке;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииВидаУчета()

// Процедура надписывает колонки т.п. ГрафикРаботы в зависимости от способа ввода данных
// и количества дней в месяце.
Процедура ОформитьЗаголовкиДнейМесяца()

	// Устанавливаем заголовки дней месяца.
	БледноКрасныйЦвет	= Новый Цвет(255, 176, 176);
	СерыйЦвет			= Новый Цвет(234, 229, 216);
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
		ЭлементыФормы.Исполнители.ВысотаШапки = 1;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоМесяца",ПериодРегистрации);
		Запрос.УстановитьПараметр("КонецМесяца",КонецМесяца(ПериодРегистрации));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегламентированныйПроизводственныйКалендарь.ВидДня,
		|	ДЕНЬНЕДЕЛИ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК ДеньНедели
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоМесяца И &КонецМесяца
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			ДеньНеделиМесяца = ДеньНедели(ПериодРегистрации);
			Для ДеньМесяца = 1 по День(КонецМесяца(ПериодРегистрации)) Цикл
				
				Колонка = ЭлементыФормы.Исполнители.Колонки["Колонка"+Строка(ДеньМесяца)];

				Колонка.ТекстШапки = Строка(ДеньМесяца) + Символы.ПС + ДниНедели[ДеньНеделиМесяца];
				Если ДеньНеделиМесяца = 6 Или ДеньНеделиМесяца = 7 Тогда
					Колонка.ЦветТекстаШапки = ЦветаСтиля.ЦветОсобогоТекста;
					Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
				Иначе
					Колонка.ЦветТекстаШапки = Новый Цвет();	
					Колонка.ШрифтШапки = Новый Шрифт();
				КонецЕсли;
				
				ДеньНеделиМесяца = (ДеньНеделиМесяца%7)+1;
			КонецЦикла;
		Иначе
			Данные = Результат.Выгрузить();
			ЦветСубботы	           = Новый Цвет(153, 51,   0); // Темно-красный
			ЦветВоскресенья 	   = ЦветаСтиля.ЦветОсобогоТекста; // Красный
			ЦветПредпразничногоДня = Новый Цвет(  0,  0, 186); // Темно-синий
			ЦветПраздничногоДня	   = Новый Цвет(255,  0, 255); // Фиолетовый
			Для ДеньМесяца = 1 по День(КонецМесяца(ПериодРегистрации)) Цикл
				
				Колонка = ЭлементыФормы.Исполнители.Колонки["Колонка"+Строка(ДеньМесяца)];

				Колонка.ТекстШапки = Строка(ДеньМесяца) + Символы.ПС + ДниНедели[Данные[ДеньМесяца - 1].ДеньНедели];
				
			    ВидДня = Данные[ДеньМесяца - 1].ВидДня;
				Если ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда
					Колонка.ЦветТекстаШапки = ЦветПраздничногоДня;
					Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
				ИначеЕсли ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье Тогда
					Колонка.ЦветТекстаШапки = ЦветВоскресенья;
					Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
				ИначеЕсли ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота Тогда
					Колонка.ЦветТекстаШапки = ЦветСубботы;
					Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
				ИначеЕсли ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
					Колонка.ЦветТекстаШапки = ЦветПредпразничногоДня;
					Колонка.ШрифтШапки = Новый Шрифт();
				Иначе
					Колонка.ЦветТекстаШапки = Новый Цвет();	
					Колонка.ШрифтШапки = Новый Шрифт();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ЭлементыФормы.Исполнители.ВысотаШапки = 2;
		
	КонецЕсли;

КонецПроцедуры

// Процедуру управляет видимостью аналитики счета затрат
//
// Параметры
//  ДанныеСтроки  – ДанныеСтроки из ТЧ Выработка 
//  ОформлениеСтроки  – ОформлениеСтроки из ТЧ Выработка
//
Процедура УстановитьВидимостьЯчеекАналитикиЗатрат(ДанныеСтроки, ОформлениеСтроки)

	Если ОтражатьВБухгалтерскомУчете Тогда
	
		НоменклатурныеГруппы	= Ложь;
		ОбъектыСтроительства	= Ложь;
		Номенклатура			= Ложь;
		
		Для СчСубконто = 0 По 2 Цикл
			Если СчСубконто+1 > ДанныеСтроки.СчетЗатрат.ВидыСубконто.Количество() Тогда
				Прервать
			КонецЕсли; 
			ВидыСубконто = ДанныеСтроки.СчетЗатрат.ВидыСубконто[СчСубконто].ВидСубконто;
			Если ВидыСубконто = NULL Тогда
				
			ИначеЕсли ВидыСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
				НоменклатурныеГруппы	= Истина;
			ИначеЕсли ВидыСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
				ОбъектыСтроительства	= Истина;
			ИначеЕсли ВидыСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
				Номенклатура	= Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
	
		НоменклатурныеГруппы	= Истина;
		ОбъектыСтроительства	= Истина;
		Номенклатура			= Истина;
	
	КонецЕсли; 
	
	ОформлениеСтроки.Ячейки.Аналитика.Видимость					= Ложь;
	ОформлениеСтроки.Ячейки.ОбъектСтроительства.Видимость		= ОбъектыСтроительства;
	ОформлениеСтроки.Ячейки.ОбъектСтроительства.ТолькоПросмотр	= НЕ ОбъектыСтроительства;
	ОформлениеСтроки.Ячейки.НоменклатурнаяГруппа.Видимость		= НоменклатурныеГруппы;
	ОформлениеСтроки.Ячейки.НоменклатурнаяГруппа.ТолькоПросмотр	= НЕ НоменклатурныеГруппы;
	ОформлениеСтроки.Ячейки.Продукция.Видимость					= Номенклатура;
	ОформлениеСтроки.Ячейки.Продукция.ТолькоПросмотр			= НЕ Номенклатура;
	
КонецПроцедуры // УстановитьВидимостьЯчеекАналитикиЗатрат()

Процедура НастройкаВидимостиНалоговыхНазначенийПоЗатратам(Элемент, ОформлениеСтроки, ДанныеСтроки)

	СчетЗатрат = ЗначениеЗаполнено(ДанныеСтроки.СчетЗатрат) И
				(ДанныеСтроки.СчетЗатрат.ПринадлежитЭлементу(Планысчетов.Хозрасчетный.ЗатратыПоЭлементам) 
		         ИЛИ ДанныеСтроки.СчетЗатрат.ПринадлежитЭлементу(Планысчетов.Хозрасчетный.ЗатратыДеятельности));
															
	ОформлениеСтроки.Ячейки.НалоговоеНазначение.ТолькоПросмотр  = Истина;
	
	ОформлениеСтроки.Ячейки.НалоговоеНазначениеНДС.ТолькоПросмотр  = Истина;
	
	Если СчетЗатрат Тогда
		
		Если ДанныеСтроки.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы
			ИЛИ ДанныеСтроки.СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы) Тогда
			ОформлениеСтроки.Ячейки.НалоговоеНазначение.ТолькоПросмотр  = Ложь;
		
		    ОформлениеСтроки.Ячейки.НалоговоеНазначениеНДС.ТолькоПросмотр  = Ложь;
		Иначе	
			ОформлениеСтроки.Ячейки.НалоговоеНазначение.ТолькоПросмотр  = Ложь;
		КонецЕсли;	
		
		Возврат;
	КонецЕсли;
	
	НоменклатурныеГруппы	= Ложь;
	ОбъектыСтроительства	= Ложь;
	
	Для СчСубконто = 0 По 2 Цикл
		Если СчСубконто+1 > ДанныеСтроки.СчетЗатрат.ВидыСубконто.Количество() Тогда
			Прервать
		КонецЕсли; 
		ВидыСубконто = ДанныеСтроки.СчетЗатрат.ВидыСубконто[СчСубконто].ВидСубконто;
		Если ВидыСубконто = NULL Тогда
				
		ИначеЕсли ВидыСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
			НоменклатурныеГруппы	= Истина;
		ИначеЕсли ВидыСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
			ОбъектыСтроительства	= Истина;
		КонецЕсли;
			
	КонецЦикла;
	
	
	Если НоменклатурныеГруппы Тогда
		ОформлениеСтроки.Ячейки.НалоговоеНазначениеНДС.Текст = ДанныеСтроки.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве;
	КонецЕсли;
	Если ОбъектыСтроительства Тогда
		ОформлениеСтроки.Ячейки.НалоговоеНазначениеНДС.Текст = ДанныеСтроки.ОбъектСтроительства.НалоговоеНазначение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет обработкой выбора из справочника "Сотрудники организаций"
//
// Параметры
//  ВыбранноеЗначение  – СправочникСсылка.СотрудникиОрганизаций – выбранное значение
//
Процедура ОбработкаВыбораРаботника(ВыбранноеЗначение, ДобавлятьНовуюСтроку = Истина, ПроверятьУникальностьСотрудника = Истина)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	
	// Если выбор произошел в форме подбора и этого физлица в документе пока нет,
	// добавим новую строку в таблицу
	СтруктураПоиска = Новый Структура("Сотрудник", ВыбранноеЗначение);
	
	Если Не ПроверятьУникальностьСотрудника ИЛИ Исполнители.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		СписокСотрудников = Новый СписокЗначений;
		СписокСотрудников.Добавить(ВыбранноеЗначение);
		Если ДобавлятьНовуюСтроку Тогда
			Автозаполнение(,СписокСотрудников);
		Иначе
			Автозаполнение(,СписокСотрудников, ЭлементыФормы.Исполнители.ТекущаяСтрока);
		КонецЕсли;
	Иначе
		Предупреждение(НСтр("ru='Такой сотрудник уже есть в документе!';uk='Такий працівник вже є у документі!'"));		
	КонецЕсли;		
	

КонецПроцедуры // ОбработкаВыбораРаботника()

Процедура ВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//Предложим для выбора список расчетов, имеющих способ расчета, соответствующий указанной форме оплаты
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаОплатаПоСреднемуЗаработку");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	МассивСпособовРасчета = Новый СписокЗначений;
	МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
		
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение = МассивСпособовРасчета;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование = Истина;
 
	ФормаВыбораВидаРасчета.Открыть();
	
	СтандартнаяОбработка = Ложь
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - устанавливает видимость/доступность элементов формы
//
Процедура УстановитьВидимостьДоступность()

	Колонки = ЭлементыФормы.Выработка.Колонки;
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;

	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.НалоговоеНазначение		, ОтражатьВНалоговомУчете);
	//ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СтатьяВаловыхРасходов	, ОтражатьВНалоговомУчете);
	
КонецПроцедуры // ДоступностьЭлементовФормы()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод;
		ДатаНачалаПериода = ТекущаяДата();
		ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата;
	Иначе 
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	ПервоначальнаяУстановкаРеквизитовУчетаВремени();
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("ТехнологическаяОперация");
	СтруктураКолонок.Вставить("СтатьяЗатрат");
	СтруктураКолонок.Вставить("Расценка");
	СтруктураКолонок.Вставить("Количество");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Выработка.Колонки, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("Сотрудник");
	//СтруктураКолонок.Вставить("ДатаНачала");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Исполнители.Колонки, СтруктураКолонок);

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	ПриИзмененииВидаУчета();
	ЭлементыФормы.Исполнители.Колонки.КТУ.Видимость				= УчитыватьКТУ;
	ЭлементыФормы.Исполнители.Колонки.ОтработаноЧасов.Видимость	= УчитыватьОтработанноеВремя;
	ЭлементыФормы.Исполнители.Колонки.ОтработаноДней.Видимость	= СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.Исполнители.Колонки.ТабельныйНомерСтрока);
	
	// Установим видимость реквизитов в зависимости от уч.политики
	//Если ОтражатьВБухгалтерскомУчете Тогда
	//	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	//	// отразим видимость элементов формы в зависимости от учетной политики
	//Иначе
	//	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу"));
	//КонецЕсли;
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = ?(Дата = Неопределено,'00010101',Дата);
	ПолучитьКурсУпрВалюты(Дата);
	
	ЭлементыФормы.ДатаНачалаПериода.ТолькоПросмотр = СпособВводаДанных <> Перечисления.СпособыВводаДанныхОВремени.ЗаДень;
	
	УстановитьВидимостьДоступность();
	
	// Установить видимость колонок.
	ОбновитьРеквизитыУчетаВремени();
	
	// Установить активный реквизит.
	//Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
	//	ТекущийЭлемент = ЭлементыФормы.Выработка;
	//КонецЕсли;
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьПостроительЗапроса" Тогда
			
			Автозаполнение(ЗначениеВыбора.ПостроительЗапроса);
			//ТЧ = ЗначениеВыбора.Данные.Выгрузить();
			//ТЧ.Колонки.Добавить("КТУ");
			//ТЧ.ЗаполнитьЗначения(1,"КТУ");
			
			Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
				//ТЧ.Колонки.Добавить("ДатаНачала");
				//ТЧ.ЗаполнитьЗначения(Дата,"ДатаНачала");
			КонецЕсли;
			
			//Исполнители.Загрузить(ТЧ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура выполняет  открытие формы регистра ГрафикиРаботыПоВидамВремени
// с отбором по данному документу
Процедура ДействияФормыГрафикиРаботыПоВидамВремени(Кнопка)
	ФормаСписка = РегистрыСведений.ГрафикиРаботыПоВидамВремени.ПолучитьФормуСписка();	
	ФормаСписка.Отбор.Документ.Установить(Ссылка);
	ФормаСписка.Открыть();
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

Процедура КоманднаяПанельРаботникиПодбор(Кнопка)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.Исполнители, Ссылка, Ложь, Дата, Организация, 1);
	Иначе
		ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(ЭлементыФормы.Исполнители, Ссылка, Ложь, Дата);
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельРаботникиПодбор()

Процедура КоманднаяПанельРаботникиСписокРаботников(Кнопка)
	
	Если Исполнители.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Заполнить?';uk='Перед заповненням табличні частини будуть очищені. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Исполнители.Очистить();
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, ?(ОтражатьВУправленческомУчете,"Работники","РаботникиОрганизаций"), Организация, ?(ОтражатьВУправленческомУчете,Неопределено,ПодразделениеОрганизации), Ложь);
	
КонецПроцедуры // КоманднаяПанельРаботникиСписокРаботников()

Процедура КоманднаяПанельРаботникиРассчитать(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если Исполнители.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ОбновитьСуммуОтработанныхДнейИЧасовДляВсехСтрок();
	
	// получим массив коэффициентов распределения
	МассивКТУ	= Новый Массив;
	ПоТарифу	= 0;
	
	Для Каждого СтрокаИсполнители Из Исполнители Цикл
		
		Вес = 1;
		Если УчитыватьКТУ Тогда
			Вес = Вес * ?(СтрокаИсполнители.КТУ = 0, 1, СтрокаИсполнители.КТУ);
		КонецЕсли;
		
		Если УчитыватьТариф Тогда
			
			// Рассчитаем часовую тарифную ставку работника 
			ЧасовойТариф = ПроцедурыУправленияПерсоналом.ЧасоваяТарифнаяСтавкаРаботникаОрг(СтрокаИсполнители.Сотрудник, Дата, ПериодРегистрации, мВалютаРегламентированногоУчета);
			Вес = Вес * ЧасовойТариф;
			
			// Учтем оплату по тарифу
			ПоТарифу = ПоТарифу + ЧасовойТариф * СтрокаИсполнители.ОтработаноЧасов
			
		КонецЕсли;
		
		Если УчитыватьОтработанноеВремя Тогда
			Вес = Вес * СтрокаИсполнители.ОтработаноЧасов;
		КонецЕсли;
		
		МассивКТУ.Добавить(Вес);
		
		// Очищение колонки "Сумма к начислению"
		Если ОтражатьВБухгалтерскомУчете Тогда
			СтрокаИсполнители.СуммаКНачислениюРегл	= 0;
		Иначе
			СтрокаИсполнители.СуммаКНачислению		= 0;
		КонецЕсли;
		
	КонецЦикла;
	
	МассивСуммКНачислению = ОбщегоНазначения.РаспределитьПропорционально(Выработка.Итог("Сумма"),МассивКТУ);
	Если МассивСуммКНачислению <> Неопределено Тогда
		
		Исполнители.ЗагрузитьКолонку(МассивСуммКНачислению,"СуммаКНачислению");
		
	КонецЕсли;
	
	СуммаКРаспределению = ?(РаспределятьТолькоПриработок, ?(Выработка.Итог("СуммаРегл") - ПоТарифу > 0, Выработка.Итог("СуммаРегл") - ПоТарифу, 0), Выработка.Итог("СуммаРегл"));
	МассивСуммКНачислению = ОбщегоНазначения.РаспределитьПропорционально(СуммаКРаспределению,МассивКТУ);
	Если МассивСуммКНачислению <> Неопределено Тогда
		
		Исполнители.ЗагрузитьКолонку(МассивСуммКНачислению,"СуммаКНачислениюРегл");
		
		Если РаспределятьТолькоПриработок и УчитыватьТариф Тогда
			
			Для каждого СтрокаИсполнители из Исполнители Цикл
				ЧасовойТариф = ПроцедурыУправленияПерсоналом.ЧасоваяТарифнаяСтавкаРаботникаОрг(СтрокаИсполнители.Сотрудник, Дата, ПериодРегистрации, мВалютаРегламентированногоУчета);
				СтрокаИсполнители.СуммаКНачислениюРегл = СтрокаИсполнители.СуммаКНачислениюРегл + ЧасовойТариф * СтрокаИсполнители.ОтработаноЧасов;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельРаботникиРассчитать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа
//
Процедура ДатаПриИзменении(Элемент = Неопределено)

	РаботаСДиалогами.ПроверитьНомерДокумента(ДокументОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;
	
	УстановитьВидимостьДоступность();
	
	ПолучитьКурсУпрВалюты(Дата);
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	УстановитьВидимостьДоступность();
	
	// Установим видимость реквизитов в зависимости от уч.политики
	Если ОтражатьВБухгалтерскомУчете Тогда
		РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в бух. учете.
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	ОтражатьВУправленческомУчете = НЕ ОтражатьВБухгалтерскомУчете;
	
	ПриИзмененииВидаУчета();
	
	// Установим видимость реквизитов в зависимости от уч.политики
	Если ОтражатьВБухгалтерскомУчете Тогда
		РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	Иначе
		РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу"));
	КонецЕсли;
	
КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	Если Не ОтражатьВБухгалтерскомУчете
	   И Не ОтражатьВНалоговомУчете
	   И Не ОтражатьВУправленческомУчете Тогда
		ОтражатьВУправленческомУчете = Истина;
	КонецЕсли;

	// Установить доступность элементов формы
	УстановитьВидимостьДоступность();
	

КонецПроцедуры // ОтражатьВНалоговомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в управленческом учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	Если Не ОтражатьВБухгалтерскомУчете
	   И Не ОтражатьВНалоговомУчете
	   И Не ОтражатьВУправленческомУчете Тогда
		ОтражатьВБухгалтерскомУчете = Истина;
		ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент);
		Возврат;
	КонецЕсли;

	// Установить доступность элементов формы
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

Процедура ПодразделениеПриИзменении(Элемент)
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);

	
КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" Способа регистрации времени
Процедура СпособВводаДанныхПриИзменении(Элемент)
	
	ОбновитьРеквизитыУчетаВремени();
	ЭлементыФормы.ДатаНачалаПериода.ТолькоПросмотр = СпособВводаДанных <> Перечисления.СпособыВводаДанныхОВремени.ЗаДень
	
КонецПроцедуры

Процедура ЗаДеньПриИзменении(Элемент)
	Если Элемент.Значение = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
		СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень;
	Иначе
		СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням;
	КонецЕсли;
	ОбновитьРеквизитыУчетаВремени();
	ОбновитьСуммуОтработанныхДнейИЧасовДляВсехСтрок();
КонецПроцедуры

Процедура ПоДнямПриИзменении(Элемент)
	ОбновитьРеквизитыУчетаВремени()
КонецПроцедуры

Процедура ДатаНачалаПериодаПриИзменении(Элемент)
	
	ПериодРегистрации = НачалоМесяца(ДатаНачалаПериода);
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	ОбновитьРеквизитыУчетаВремени();

КонецПроцедуры


Процедура УчитыватьКТУПриИзменении(Элемент)
	
	ЭлементыФормы.Исполнители.Колонки.КТУ.Видимость = Элемент.Значение;
	
КонецПроцедуры // УчитыватьКТУПриИзменении()

Процедура УчитыватьОтработанныеЧасыПриИзменении(Элемент)
	
	ОбновитьРеквизитыУчетаВремени();
	
КонецПроцедуры // УчитыватьОтработанныеЧасыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	ОбновитьРеквизитыУчетаВремени();
	
КонецПроцедуры // ПериодРегистрацииПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	ДатаНачалаПериода = ПериодРегистрации;
	ОбновитьРеквизитыУчетаВремени();
	
КонецПроцедуры // ПериодРегистрацииРегулирование()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодРегистрацииОчистка()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
	ДатаНачалаПериода = ПериодРегистрации;
	ОбновитьРеквизитыУчетаВремени();
	
КонецПроцедуры // ПериодРегистрацииНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
	ДатаНачалаПериода = ПериодРегистрации;
	ОбновитьРеквизитыУчетаВремени();
	
КонецПроцедуры // ПериодРегистрацииАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
	ДатаНачалаПериода = ПериодРегистрации;
	ОбновитьРеквизитыУчетаВремени();
	
КонецПроцедуры // ПериодРегистрацииОкончаниеВводаТекста()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ Выработка

// Процедура - обработчик события "ПриИзменении" поля ввода технологической операции
//
Процедура ВыработкаТехнологическаяОперацияПриИзменении(Элемент)
	
	ТехОперация = Элемент.Значение;
	Если Не ТехОперация.Пустая() Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТехнологическиеОперации.ОсновнаяСтатьяЗатратНаПроизводство,
		|	ТехнологическиеОперации.СпособОтраженияЗарплатыВБухучете.СчетДт КАК СчетУчетаБУ,
		|	ТехнологическиеОперации.СпособОтраженияЗарплатыВБухучете.СтатьяВаловыхРасходов КАК СтатьяВаловыхРасходов,
		|	ТехнологическиеОперации.ОсновнаяНоменклатурнаяГруппа,
		|	ТехнологическиеОперации.Расценка,
		|	ТехнологическиеОперации.Валюта,
		|	ТехнологическиеОперации.СпособОтраженияЗарплатыВБухучете.СубконтоДт1 КАК СубконтоДт1,
		|	ТехнологическиеОперации.СпособОтраженияЗарплатыВБухучете.СубконтоДт2 КАК СубконтоДт2,
		|	ТехнологическиеОперации.СпособОтраженияЗарплатыВБухучете.СубконтоДт3 КАК СубконтоДт3
		|ИЗ
		|	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
		|ГДЕ
		|	ТехнологическиеОперации.Ссылка = &Ссылка");
							  
		Запрос.УстановитьПараметр("Ссылка",ТехОперация);
		ТехОперация = Запрос.Выполнить().Выбрать();
		ТехОперация.Следующий();
		
		ДанныеСтроки = ЭлементыФормы.Выработка.ТекущиеДанные;
		
		ДанныеСтроки.СтатьяЗатрат			= ТехОперация.ОсновнаяСтатьяЗатратНаПроизводство;
		ДанныеСтроки.НоменклатурнаяГруппа	= ТехОперация.ОсновнаяНоменклатурнаяГруппа;
		ДанныеСтроки.Расценка				= ТехОперация.Расценка;
		ДанныеСтроки.Валюта					= ?(Не ЗначениеЗаполнено(ТехОперация.Валюта),?(ОтражатьВУправленческомУчете,мВалютаУпрУчета,мВалютаРегламентированногоУчета),ТехОперация.Валюта);
		ДанныеСтроки.СчетЗатрат				= ТехОперация.СчетУчетаБУ;
		ДанныеСтроки.СтатьяВаловыхРасходов		= ТехОперация.СтатьяВаловыхРасходов;
		
		ПроведениеРасчетов.РассчитатьСуммуЗаРаботу(ОтражатьВБухгалтерскомУчете, ОтражатьВУправленческомУчете, ДанныеСтроки,Дата, мВалютаРегламентированногоУчета, мВалютаУпрУчета, мКурсВалютыУпрУчета, мКратностьВалютыУпрУчета);
		
	КонецЕсли;
	
КонецПроцедуры // ВыработкаТехнологическаяОперацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода расченки
//
Процедура ВыработкаРасценкаПриИзменении(Элемент)
	
	ПроведениеРасчетов.РассчитатьСуммуЗаРаботу(ОтражатьВБухгалтерскомУчете, ОтражатьВУправленческомУчете, ЭлементыФормы.Выработка.ТекущиеДанные,Дата, мВалютаРегламентированногоУчета, мВалютаУпрУчета, мКурсВалютыУпрУчета, мКратностьВалютыУпрУчета)
	
КонецПроцедуры // ВыработкаРасценкаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода валюты
//
Процедура ВыработкаВалютаПриИзменении(Элемент)
	
	ПроведениеРасчетов.РассчитатьСуммуЗаРаботу(ОтражатьВБухгалтерскомУчете, ОтражатьВУправленческомУчете, ЭлементыФормы.Выработка.ТекущиеДанные,Дата, мВалютаРегламентированногоУчета, мВалютаУпрУчета, мКурсВалютыУпрУчета, мКратностьВалютыУпрУчета)
	
КонецПроцедуры // ВыработкаВалютаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
//
Процедура ВыработкаКоличествоПриИзменении(Элемент)
	
	ПроведениеРасчетов.РассчитатьСуммуЗаРаботу(ОтражатьВБухгалтерскомУчете, ОтражатьВУправленческомУчете, ЭлементыФормы.Выработка.ТекущиеДанные,Дата, мВалютаРегламентированногоУчета, мВалютаУпрУчета, мКурсВалютыУпрУчета, мКратностьВалютыУпрУчета)
	
КонецПроцедуры // ВыработкаКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаЗаРаботуВВалюте"
//
Процедура ВыработкаСуммаЗаРаботуВВалютеПриИзменении(Элемент)
	
	ПроведениеРасчетов.РассчитатьСуммуЗаРаботу(ОтражатьВБухгалтерскомУчете, ОтражатьВУправленческомУчете, ЭлементыФормы.Выработка.ТекущиеДанные,Дата, мВалютаРегламентированногоУчета, мВалютаУпрУчета, мКурсВалютыУпрУчета, мКратностьВалютыУпрУчета, Ложь)
	
КонецПроцедуры // ВыработкаСуммаЗаРаботуВВалютеПриИзменении()

Процедура ВыработкаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УстановитьВидимостьЯчеекАналитикиЗатрат(ДанныеСтроки, ОформлениеСтроки);
	
	НастройкаВидимостиНалоговыхНазначенийПоЗатратам(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура ВыработкаСтатьяВаловыхРасходовНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	НазваниеНалоговойДекларации = Перечисления.ВидыНалоговыхДеклараций.ДекларацияОПрибыли;      
	РаботаСДиалогами.НачалоВыбораСтатьяНалоговойДекларации(Элемент, СтандартнаяОбработка, НазваниеНалоговойДекларации);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СтатьяЗатрат"
//
Процедура ВыработкаСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Выработка.ТекущиеДанные;
	УправлениеПроизводством.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(
		СтрокаТабличнойЧасти,
		ПодразделениеОрганизации,
		СтрокаТабличнойЧасти.СтатьяЗатрат);
	
КонецПроцедуры // ВыработкаСтатьяЗатратПриИзменении()

Процедура ВыработкаНалоговоеНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка,Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура ВыработкаНалоговоеНазначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура ВыработкаНалоговоеНазначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат)
КонецПроцедуры

Процедура ВыработкаНалоговоеНазначениеНДСНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка,Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура ВыработкаНалоговоеНазначениеНДСАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура ВыработкаНалоговоеНазначениеНДСОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС)
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Исполнители

Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		
		Элемент.ТекущиеДанные.КТУ = 1;
		//Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
		//	Элемент.ТекущиеДанные.ДатаНачала = Дата;
		//КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ИсполнителиПриНачалеРедактирования()

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура ИсполнителиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Исполнители, ОформленияСтрок);
	
КонецПроцедуры // ИсполнителиПриПолученииДанных()

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура ИсполнителиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораРаботника(ВыбранноеЗначение);
	ВидимостьДокументОснование = ?(ВыбранноеЗначение.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда, Истина, Ложь);
	Если ВидимостьДокументОснование Тогда
		// Проставим договор по умолчанию
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ИсполнителиОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ Исполнители

Процедура ИсполнителиСотрудникПриИзменении(Элемент)
	ЭлементыФормы.Исполнители.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
	ОбработкаВыбораРаботника(Элемент.Значение, Ложь, Ложь);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ИсполнителиСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// переопеределим выбор физлица на выбор из списка регистра сведений
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
		
	Иначе
		ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
		
	КонецЕсли;
	
КонецПроцедуры // ИсполнителиСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ИсполнителиСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, ?(ОтражатьВБухгалтерскомУчете,"РаботникиОрганизации","Работники"), Текст, Организация);
	
КонецПроцедуры // ИсполнителиСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ИсполнителиСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, ?(ОтражатьВБухгалтерскомУчете,"РаботникиОрганизации","Работники"), Текст, Элемент.Значение, Организация);
	
КонецПроцедуры // ИсполнителиСотрудникОкончаниеВводаТекста()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ИсполнителиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	// управление видимостью ячеек, которые группируют некоторые элементы шапки
	ВидимостьДокументОснование = ?(ДанныеСтроки.Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда, Истина, Ложь);
	ОформлениеСтроки.Ячейки.ДокументОснование.Видимость = ВидимостьДокументОснование;
	
КонецПроцедуры

Процедура ИсполнителиДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФормаВыбора = Документы.ДоговорНаВыполнениеРаботСФизЛицом.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "ФормаВыбора");
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбора.Отбор.Сотрудник.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбора.Отбор.Сотрудник.Значение = ЭлементыФормы.Исполнители.ТекущиеДанные.Сотрудник;
	ФормаВыбора.Отбор.Сотрудник.Использование = Истина;
	
	Если ПериодНаряда = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
		
		ФормаВыбора.Отбор.ДатаНачала.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
		ФормаВыбора.Отбор.ДатаНачала.Значение = ДатаНачалаПериода;
		ФормаВыбора.Отбор.ДатаНачала.Использование = Истина;
		
		ФормаВыбора.Отбор.ДатаОкончания.ВидСравнения = ВидСравнения.БольшеИлиРавно;
		ФормаВыбора.Отбор.ДатаОкончания.Значение = ДатаНачалаПериода;
		ФормаВыбора.Отбор.ДатаОкончания.Использование = Истина;
	
	Иначе
		
		ФормаВыбора.Отбор.ДатаНачала.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
		ФормаВыбора.Отбор.ДатаНачала.Значение = КонецМесяца(ПериодРегистрации);
		ФормаВыбора.Отбор.ДатаНачала.Использование = Истина;
		
		ФормаВыбора.Отбор.ДатаОкончания.ВидСравнения = ВидСравнения.БольшеИлиРавно;
		ФормаВыбора.Отбор.ДатаОкончания.Значение = ПериодРегистрации;
		ФормаВыбора.Отбор.ДатаОкончания.Использование = Истина;

		
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
	СтандартнаяОбработка = Ложь
	

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
ДлинаСуток = 86400;
ПерваяДата = НачалоДня(ОбщегоНазначения.ПолучитьРабочуюДату());
ПерваяДата = ПерваяДата - ДеньНедели(ПерваяДата) * ДлинаСуток;
ДниНедели = Новый Соответствие;
Для ДеньНедели = 1 По 7 Цикл
	ДниНедели.Вставить(ДеньНедели, НРег(Формат(ПерваяДата + ДеньНедели * ДлинаСуток,"ДФ=ддд")));
КонецЦикла;
