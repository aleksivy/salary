// Текущие курс и кратность валюты документа для расчетов
//Перем КурсДокумента Экспорт;
//Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мИмяВалютыРегламентированногоУчета Экспорт;
Перем мПрежнееОтражатьВУправленческомУчете;

// Хранит текущее распределение долга работника по займу
// на основную сумму займа и начисленные проценты
Перем СтруктураДолг Экспорт;
Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Формирует номер приходного оредера в пределах организации
//
Процедура УстановитьНомерОрдера() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаГода", НачалоГода(Дата));
	Запрос.УстановитьПараметр("ДатаКонцаГода", КонецГода(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Максимум(НомерОрдера) КАК НомерОрдера
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Организация = &Организация
	|	И ПриходныйКассовыйОрдер.Дата >= &ДатаНачалаГода
	|	И ПриходныйКассовыйОрдер.Дата <= &ДатаКонцаГода";

	СписокОрдеров = Запрос.Выполнить().Выбрать();
	
	Если СписокОрдеров.Следующий() Тогда
		Попытка
			НомерОрдера = Число(СписокОрдеров.НомерОрдера) + 1;
		Исключение
			НомерОрдера = 1;
		КонецПопытки;	
	Иначе
		НомерОрдера = 1;
	КонецЕсли;	
	
	
КонецПроцедуры

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
Функция ПечатьПКО()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);


	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата  КАК ДатаДокумента,
	|	Организация КАК Орган,
	|	Организация,
	|	Организация КАК Руководители,
	//|	Подразделение.Представление КАК ПредставлениеПодразделения,
	//|	Подразделение               КАК Подразделение,
	|	Контрагент,
	|	Контрагент.Представление КАК Контрагент,
	|	ПринятоОт      КАК ПринятоОт,
	|	Основание      КАК Основание,
	|	Приложение     КАК Приложение,
	|	СуммаДокумента КАК Сумма,
	|	ВалютаДокумента,
	|	ВалютаДокумента.Представление КАК ВалютаПредставление,
	//|	СтавкаНДС,
	|	НомерОрдера
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйКассовыйОрдер_КО1";
	Вариант2018 = Ложь;
	Если Дата >= Дата('20180105') Тогда
		Макет = ПолучитьОбщийМакет("КО1_2018");
		Вариант2018 = Истина;
	ИначеЕсли Дата >= Дата('20090616') Тогда
		Макет = ПолучитьОбщийМакет("КО1_2009");
	Иначе
		Макет = ПолучитьОбщийМакет("КО1");
	КонецЕсли;

	// Выводим шапку ПКО

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Орган, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	Если Вариант2018 Тогда
		ПредставлениеДаты = Формат(Шапка.ДатаДокумента, "Л=uk_UA; ДЛФ=DD");
		ПредставлениеДаты = Сред(ПредставлениеДаты, 1, СтрДлина(ПредставлениеДаты) - 2) + "року";
		ОбластьМакета.Параметры.ДатаДокумента = ПредставлениеДаты;
	КонецЕсли;

	ОбластьМакета.Параметры.ПолноеНаименование = СведенияОбОрганизации.ПолноеНаименование;
	ОбластьМакета.Параметры.Сумма             = ОбщегоНазначения.ФорматСумм(Шапка.Сумма, Шапка.ВалютаДокумента);
	Если Вариант2018 И ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		ОбластьМакета.Параметры.СуммаПрописью = ?(Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета, "грн      коп.", "");
		ОбластьМакета.Область("R23C2:R23C9").ГоризонтальноеПоложение   = ГоризонтальноеПоложение.Право;
		ОбластьМакета.Область("R23C13:R23C14").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	Иначе	
		ОбластьМакета.Параметры.СуммаПрописью     = ФорматироватьСуммуПрописи(Шапка.Сумма, Шапка.ВалютаДокумента);
	КонецЕсли;	
	
	Если Шапка.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ОбластьМакета.Параметры.КодПоЕДРПОУ = СведенияОбОрганизации.КодПоДРФО
	Иначе	
		ОбластьМакета.Параметры.КодПоЕДРПОУ = СведенияОбОрганизации.КодПоЕДРПОУ
	КонецЕсли;	
	Если НЕ Вариант2018 Тогда
		ОбластьМакета.Параметры.ВТомЧисле = "0,00"+ " " + СокрП(Шапка.ВалютаДокумента)
	КонецЕсли;	
	Руководители = ФормированиеПечатныхФорм.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
	Если ЗначениеЗаполнено(Руководители.РуководительФИО) Тогда
		Руководитель = Руководители.РуководительФИО.Фамилия	    + " " + Лев(Руководители.РуководительФИО.Имя, 1)	 + "." + Лев(Руководители.РуководительФИО.Отчество, 1) + ".";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерФИО) Тогда
		Бухгалтер    = Руководители.ГлавныйБухгалтерФИО.Фамилия + " " + Лев(Руководители.ГлавныйБухгалтерФИО.Имя, 1) + "." + Лев(Руководители.ГлавныйБухгалтерФИО.Отчество, 1) + ".";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Руководители.КассирФИО) Тогда
		Кассир       = Руководители.КассирФИО.Фамилия			+ " " + Лев(Руководители.КассирФИО.Имя, 1)			 + "." + Лев(Руководители.КассирФИО.Отчество, 1) + ".";
    КонецЕсли;


	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Бухгалтер;
	ОбластьМакета.Параметры.ФИОКассира = Кассир;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	Если Дата < Дата('20090616') Тогда
		ОбластьМакета.Параметры.ДатаДокумента = Шапка.ДатаДокумента;
	КонецЕсли;

	Возврат ТабДокумент;


КонецФункции // ПечатьПКО()
	
	
	
	  
	



	

	


// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПКО" Тогда
		
		


		
		ТабДокумент = ПечатьПКО();	
	КонецЕсли; 
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)));

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт
	
	СписокМакетов = Новый СписокЗначений;
	
	СписокМакетов.Добавить("ПКО", НСтр("ru='Приходный кассовый ордер';uk='Прибутковий касовий ордер'"));
	
	Возврат СписокМакетов;
	
КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
		Возврат Новый Структура("ПКО",
			НСтр("ru='Приходный кассовый ордер';uk='Прибутковий касовий ордер'"));

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Формирует остаток по договору займа с работником при соответствующем виде операции
//
Процедура ПолучитьОстатокПоДоговоруЗайма(Основание) Экспорт
	
	СтруктураДолг=Новый Структура;
	СтруктураДолг.Вставить("ОсновнойДолг",0);
	СтруктураДолг.Вставить("Проценты",0);
	
	Если ЗначениеЗаполнено(Основание) Тогда		
		
		Если Основание.ОтражатьВБухгалтерскомУчете Тогда
			ИмяРегистра="ПогашениеЗаймовРаботникамиОрганизаций";
			СтруктураДолг.Вставить("Валюта",мВалютаРегламентированногоУчета);
		Иначе
			ИмяРегистра="ПогашениеЗаймовРаботниками";
			СтруктураДолг.Вставить("Валюта",Константы.ВалютаУправленческогоУчета.Получить());
		КонецЕсли;
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ПогашениеЗаймовОстатки.ОсновнойДолгОстаток КАК ОсновнойДолгОстаток,
		|	ПогашениеЗаймовОстатки.ПроцентыОстаток КАК ПроцентыОстаток
		|ИЗ
		|	РегистрНакопления."+ИмяРегистра+".Остатки(, ДоговорЗайма=&ДоговорЗайма) КАК ПогашениеЗаймовОстатки";
		
		Запрос.УстановитьПараметр("ДоговорЗайма",Основание);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			СтруктураДолг.Вставить("ОсновнойДолг",Результат.ОсновнойДолгОстаток);
			СтруктураДолг.Вставить("Проценты",Результат.ПроцентыОстаток);
		КонецЕсли;
		
	КонецЕсли;
				
КонецПроцедуры // ПолучитьОстатокПоДоговоруЗаймаУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда
		//Проверяем заполнение шапки
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		 
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрам(Режим, Отказ, Заголовок ,СтруктураШапкиДокумента)

	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента,  Режим, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, Режим, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, Режим, Отказ, Заголовок)

	Если ОтражатьВУправленческомУчете Тогда // Принято кассиром
		
		Если ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
			// По регистру управленческих расчетов с работниками по займам
			
			НаборДвижений = Движения.ПогашениеЗаймовРаботниками;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ФизЛицо = Контрагент.Физлицо;
			СтрокаДвижений.ДоговорЗайма = РасчетныйДокумент;
			
			//СуммаРасчетов = СуммаДокумента;
		
			ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
			СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУправленческогоУчета,Дата);
			
			СуммаРасчетов	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента,ВалютаДокумента,ВалютаУправленческогоУчета,
														КурсДокумента,СтруктураКурса.Курс,
														КратностьДокумента,СтруктураКурса.Кратность);
			
			Если СтруктураДолг.Проценты < СуммаРасчетов Тогда
				
				СтрокаДвижений.Проценты = СтруктураДолг.Проценты;
				СтрокаДвижений.ОсновнойДолг = СуммаРасчетов-СтруктураДолг.Проценты;
				
			Иначе
				
				СтрокаДвижений.Проценты = СуммаРасчетов;
				СтрокаДвижений.ОсновнойДолг = 0;
				
			КонецЕсли;
			
			НаборДвижений.мПериод=Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ПогашениеЗаймовРаботниками.ВыполнитьРасход();
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
			
			НаборДвижений = Движения.ВзаиморасчетыСРаботниками;
			
			СтрокаДвижений = НаборДвижений.Добавить();
			СтрокаДвижений.ФизЛицо = Контрагент.Физлицо;
			СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Приход;
			СтрокаДвижений.СуммаУпр = СуммаДокумента;
			СтрокаДвижений.Период=Дата;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, Режим, Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда // Принято кассиром
		
		Если ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
			// По регистру регламентированных расчетов с работниками по займам
			
			НаборДвижений = Движения.ПогашениеЗаймовРаботникамиОрганизаций;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Организация=Организация;
			СтрокаДвижений.Сотрудник=Контрагент;
			СтрокаДвижений.ДоговорЗайма=РасчетныйДокумент;
			
			//СуммаРасчетов = СуммаДокумента;
			СуммаРасчетов	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента,ВалютаДокумента,мВалютаРегламентированногоУчета,
																		КурсДокумента,1,
																		КратностьДокумента,1);

		
			Если СтруктураДолг.Проценты < СуммаРасчетов Тогда
				
				СтрокаДвижений.Проценты = СтруктураДолг.Проценты;
				СтрокаДвижений.ОсновнойДолг = СуммаРасчетов - СтруктураДолг.Проценты;
				
			Иначе
				
				СтрокаДвижений.Проценты = СуммаРасчетов;
				СтрокаДвижений.ОсновнойДолг=0;
				
			КонецЕсли;
			
			НаборДвижений.мПериод=Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ПогашениеЗаймовРаботникамиОрганизаций.ВыполнитьРасход();
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
			
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ
			               |	ВзаиморасчетыСРаботникамиОрганизацииОстатки.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
			               |	-(ВзаиморасчетыСРаботникамиОрганизацииОстатки.СуммаВзаиморасчетовОстаток) КАК Остаток
			               |ИЗ
			               |	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&Дата, Организация = &Организация И Сотрудник = &Сотрудник) КАК ВзаиморасчетыСРаботникамиОрганизацииОстатки
			               |
			               |ГДЕ
			               |	(ВзаиморасчетыСРаботникамиОрганизацииОстатки.СуммаВзаиморасчетовОстаток < 0)
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ПериодВзаиморасчетов";
						   
			Запрос.УстановитьПараметр("Дата",Дата);
			Запрос.УстановитьПараметр("Организация",Организация);
			Запрос.УстановитьПараметр("Сотрудник",Контрагент);
			
			ВыборкаОстатков = Запрос.Выполнить().Выбрать();
			СуммаКПогашению = СуммаДокумента;
			
			НаборДвижений = Движения.ВзаиморасчетыСРаботникамиОрганизаций;
			
			Пока ВыборкаОстатков.СледующийПоЗначениюПоля("ПериодВзаиморасчетов") Цикл 
				
				СтрокаДвижений = НаборДвижений.Добавить();
				//Свойства
				СтрокаДвижений.Период = Дата;
				СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход;
				//Измерения
				СтрокаДвижений.Сотрудник = Контрагент;
				СтрокаДвижений.Организация = Организация;
				СтрокаДвижений.ПериодВзаиморасчетов = ВыборкаОстатков.ПериодВзаиморасчетов;
				СтрокаДвижений.СчетУчета =	СчетУчета; 
				//Ресурсы
				СуммаВзаиморасчетов = Мин(ВыборкаОстатков.Остаток,СуммаКПогашению);
				СтрокаДвижений.СуммаВзаиморасчетов = - СуммаВзаиморасчетов; 
				
				СтрокаДвижений.КодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата; 

				СуммаКПогашению = СуммаКПогашению - СуммаВзаиморасчетов;
				
				Если СуммаКПогашению = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
				
			Если СуммаКПогашению > 0 Тогда
				
				СтрокаДвижений = НаборДвижений.Добавить();
				//Свойства
				СтрокаДвижений.Период = Дата;
				СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход;
				//Измерения                  
				СтрокаДвижений.Сотрудник = Контрагент;
				СтрокаДвижений.Организация = Организация;
				СтрокаДвижений.ПериодВзаиморасчетов = НачалоМесяца(Дата);
				СтрокаДвижений.СчетУчета =	СчетУчета;
				//Ресурсы
				СтрокаДвижений.СуммаВзаиморасчетов = - СуммаКПогашению;
				СтрокаДвижений.КодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата;
								
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Форматирует сумму прописью документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо представить прописью 
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСуммуПрописи(Сумма, Валюта)
	
	ФорматСтрока  = "Л=uk_UA; ДП=Ложь";
	ПарамПредмета = ВалютаДокумента.ПараметрыПрописиНаУкраинском;
	
	Результат = ЧислоПрописью(СуммаДокумента, ФорматСтрока, ПарамПредмета);
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописи()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ДоговорЗаймаСРаботником")	Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		Если Основание.ОтражатьВБухгалтерскомУчете <> Неопределено Тогда
			ОтражатьВБухгалтерскомУчете = Основание.ОтражатьВБухгалтерскомУчете;
		КонецЕсли;
		Если Основание.ОтражатьВУправленческомУчете <> Неопределено Тогда
			ОтражатьВУправленченскомУчете = Основание.ОтражатьВУправленческомУчете;
		КонецЕсли;
		
		Если ОтражатьВБухгалтерскомУчете Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаДокумента = Константы.ВалютаУправленческогоУчета.Получить();
		КонецЕсли;

		
		ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками;

		Контрагент        = Основание.Сотрудник;
		РасчетныйДокумент = Основание;

		ПолучитьОстатокПоДоговоруЗайма(Основание);
		
		СуммаДокумента=СтруктураДолг.ОсновнойДолг+СтруктураДолг.Проценты;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим) 
	
	// удалим движения
	УдалитьДвижения();
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок);
	
	Если Не Отказ Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
			ПолучитьОстатокПоДоговоруЗайма(РасчетныйДокумент);
		КонецЕсли;
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// Установим прежнее состояние ОтражатьВУправленческомУчете
	мПрежнееОтражатьВУправленческомУчете = Ссылка.ОтражатьВУправленческомУчете;
	
	мУдалятьДвижения = Не ЭтоНовый();
	
КонецПроцедуры

// удаление движений - документ не удаляеи движения автоматически
Процедура УдалитьДвижения()

	Если НЕ мУдалятьДвижения Тогда
		Возврат;
	КонецЕсли;
	
	Если мПрежнееОтражатьВУправленческомУчете Тогда
		Движения.ВзаиморасчетыСРаботниками.Очистить();
		Движения.ВзаиморасчетыСРаботниками.Записать();
		Движения.ПогашениеЗаймовРаботниками.Очистить();
		Движения.ПогашениеЗаймовРаботниками.Записать();
	Иначе
		Движения.ВзаиморасчетыСРаботникамиОрганизаций.Очистить();
		Движения.ВзаиморасчетыСРаботникамиОрганизаций.Записать();
		Движения.ПогашениеЗаймовРаботникамиОрганизаций.Очистить();
		Движения.ПогашениеЗаймовРаботникамиОрганизаций.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	// удалим движения
	УдалитьДвижения();
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	//ДобавитьПрефиксУзла(Префикс);
	Возврат;
КонецПроцедуры

Запрос = Новый Запрос("ВЫБРАТЬ
                      |	Константы.ВалютаРегламентированногоУчета.Ссылка КАК Ссылка,
                      |	Константы.ВалютаРегламентированногоУчета.Наименование КАК Наименование
                      |ИЗ
                      |	Константы КАК Константы");

Выборка = Запрос.Выполнить().Выбрать();
Выборка.Следующий();
мИмяВалютыРегламентированногоУчета	= Выборка.Наименование;
мВалютаРегламентированногоУчета		= Выборка.Ссылка;
