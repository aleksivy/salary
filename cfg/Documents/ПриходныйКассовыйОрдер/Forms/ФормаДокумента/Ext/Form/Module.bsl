////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;
Перем мИмяВалютыДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;
Перем мПечатнаяФормаПоУмолчанию;


// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

Процедура ОбновитьНадписьКурса()

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мИмяВалютыДокумента, КурсДокумента, КратностьДокумента, мИмяВалютыРегламентированногоУчета, Истина);
																					 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Управляет элементами формы
//
// Параметры
//  нет
//
Процедура ПриИзмененииВидаУчета()

	ЭлементыФормы.Организация.АвтоОтметкаНезаполненного = ОтражатьВБухгалтерскомУчете;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		ЭлементыФормы.Организация.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Организация);
	Иначе
		ЭлементыФормы.Организация.ОтметкаНезаполненного = Ложь;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииВидаУчета()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
		ЭлементыФормы.НадписьДокумент.Видимость		= Ложь;
		ЭлементыФормы.РасчетныйДокумент.Видимость	= Ложь;
		ЭлементыФормы.НадписьВалюта.Видимость		= Ложь;
		ЭлементыФормы.ВалютаДокумента.Видимость		= Ложь;
		ЭлементыФормы.НадписьКурс.Видимость			= Ложь;
		ЭлементыФормы.КурсДокумента.Видимость		= Ложь;
		ЭлементыФормы.ИнфНадписьКурса.Видимость		= Ложь;
		
		ЭлементыФормы.СчетУчета.Видимость	= Истина;
		Если Не ЗначениеЗаполнено(ЭлементыФормы.СчетУчета.Значение) Тогда
			ЭлементыФормы.СчетУчета.Значение 	= ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		КонецЕсли;
		
		ЭлементыФормы.НадписьСчетУчета.Видимость	= Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		ЭлементыФормы.НадписьДокумент.Видимость		= Истина;
		ЭлементыФормы.РасчетныйДокумент.Видимость	= Истина;
		ЭлементыФормы.НадписьВалюта.Видимость		= Истина;
		ЭлементыФормы.ВалютаДокумента.Видимость		= Истина;
		ЭлементыФормы.НадписьКурс.Видимость			= Истина;
		ЭлементыФормы.КурсДокумента.Видимость		= Истина;
		ЭлементыФормы.ИнфНадписьКурса.Видимость		= Истина;
		
		ЭлементыФормы.СчетУчета.Видимость	= Ложь;
		Если Не ЗначениеЗаполнено(ЭлементыФормы.СчетУчета.Значение) Тогда
		КонецЕсли;
		
		ЭлементыФормы.НадписьСчетУчета.Видимость	= Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ	
		Если Не ЗначениеЗаполнено(ВидОперации) Тогда
			//Второе условие нужно для того, чтобы отличить документы введенные на основании от пустых, только что открытых
		
			УстановитьНомерОрдера();
			// Заполнить реквизиты значениями по умолчанию.

			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
			ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками;
		КонецЕсли;
	Иначе 
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли; 
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	Массив = Новый Массив;
	Массив.Добавить(ВидОперации.Метаданные().ЗначенияПеречисления.РасчетыПоКредитамИЗаймамСРаботниками );
	Массив.Добавить(ВидОперации.Метаданные().ЗначенияПеречисления.ВозвратДенежныхСредствРаботником);
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
										Массив,
	                                    Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
																													
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	//Доступность поля ввода номера
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);


	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента	 = Дата;
	мИмяВалютыДокумента		 = ВалютаДокумента.Наименование;
	
	ОбновитьНадписьКурса();
	ПриИзмененииВидаУчета();
	УстановитьВидимость();
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		Если ВидОперации = Перечисления.ВидыОперацийПКО[Кнопка.Имя] Тогда
			Возврат;
		КонецЕсли; 
		ВидОперации = Перечисления.ВидыОперацийПКО[Кнопка.Имя];
	Иначе
		Возврат;
	КонецЕсли;
	
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

//Работа с печатью
// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)
	
	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" переключателя учета.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	ОтражатьВУправленческомУчете = НЕ ОтражатьВБухгалтерскомУчете;
	ОтражатьВБухгалтерскомУчете = Не ОтражатьВУправленческомУчете;
	ПриИзмененииВидаУчета();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	УстановитьНомерОрдера();

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода валюты.
//
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	мИмяВалютыДокумента = ВалютаДокумента.Наименование;
	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента		 = СтруктураКурсаДокумента.Курс;
	КратностьДокумента	 = СтруктураКурсаДокумента.Кратность;
	ОбновитьНадписьКурса();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода курса валюты.
//
Процедура КурсДокументаПриИзменении(Элемент)
	ОбновитьНадписьКурса();
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода курса валюты.
//
Процедура КурсДокументаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	// Выберем курс на дату документа
	РаботаСДиалогами.ВыбратьКурсВалюты(КурсДокумента,КратностьДокумента,ВалютаДокумента, Дата); 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	ПринятоОт = Контрагент.Наименование;	

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица   
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура КонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка)

	// переопеределим выбор физлица на выбор из списка регистра сведений
	Если ОтражатьВУправленческомУчете Тогда
		ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка);
	Иначе
		ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, ,СтандартнаяОбработка);
	КонецЕсли;
	
	УстановитьНомерОрдера();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода физического лица   
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Контрагент = ВыбранноеЗначение;
		СтандартнаяОбработка = Ложь
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура КонтрагентАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, ?(ОтражатьВУправленческомУчете,"Работники","РаботникиОрганизации"), Текст, Организация);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, ?(ОтражатьВУправленческомУчете,"Работники","РаботникиОрганизации"), Текст, Элемент.Значение, Организация);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "РасходныйКассовыйОрдер".
// Процедура фильтрует список документов по выбранным значениям.
//
Процедура РасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
		ФормаВыбора = Документы["ДоговорЗаймаСРаботником"].ПолучитьФормуВыбора(,Элемент,);
						
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ФормаВыбора.ДокументСписок.Отбор.Сотрудник.Значение = Контрагент;
			ФормаВыбора.ДокументСписок.Отбор.Сотрудник.Использование = Истина;
			ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Сотрудник.Доступность=Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ФормаВыбора.ДокументСписок.Отбор.Организация.Значение = Организация;
			ФормаВыбора.ДокументСписок.Отбор.Организация.Использование = Истина;
			ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность=Ложь;
		КонецЕсли;
		
		ФормаВыбора.ДокументСписок.Отбор.ОтражатьВУправленческомУчете.Значение = Не ОтражатьВБухгалтерскомУчете;
		ФормаВыбора.ДокументСписок.Отбор.ОтражатьВУправленческомУчете.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ОтражатьВУправленческомУчете.Доступность=Ложь;
		
		ФормаВыбора.ДокументСписок.Отбор.ОтражатьВБухгалтерскомУчете.Значение = ОтражатьВБухгалтерскомУчете;
		ФормаВыбора.ДокументСписок.Отбор.ОтражатьВБухгалтерскомУчете.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ОтражатьВБухгалтерскомУчете.Доступность=Ложь;
		
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			
			ФормаВыбора.ПараметрТекущаяСтрока=Элемент.Значение;
			
		КонецЕсли;
		
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // РасходныйКассовыйОрдерНачалоВыбора

// Процедура - обработчик события "ПриИзменении" поля ввода "РасходныйКассовыйОрдер".
// Процедура заполнение пустых полей на основании выбранного РКО.
//
Процедура РасчетныйДокументПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		Возврат;
	КонецЕсли;

	Если Элемент.Значение.Метаданные().Имя="ДоговорЗаймаСРаботником" Тогда
			
		Контрагент = РасчетныйДокумент.Сотрудник;
		Организация = РасчетныйДокумент.Организация;			
					
		Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда
			
			ПолучитьОстатокПоДоговоруЗайма(РасчетныйДокумент);
			
			ВалютаУчета = СтруктураДолг.Валюта;
		
			СтруктураКурсУчета = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУчета, РасчетныйДокумент.Дата);
			
			СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
			КурсДокумента      = СтруктураКурсаДокумента.Курс;
			КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
			СуммаДокумента=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураДолг.ОсновнойДолг+СтруктураДолг.Проценты, 
			                            ВалютаУчета, ВалютаДокумента,
			                            СтруктураКурсУчета.Курс, КурсДокумента,
			                            СтруктураКурсУчета.Кратность, КратностьДокумента);
		
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры // РасходныйКассовыйОрдерПриИзменении()

Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)
	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мПечатнаяФормаПоУмолчанию);
КонецПроцедуры

