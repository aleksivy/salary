Перем мУдалятьДвижения;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим       - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	Дата,
	| 	Ссылка 
	|ИЗ 
	|	Документ." + Метаданные().Имя + "
	|ГДЕ 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()


// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоКандидаты(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	// угловыми скобками выделены изменяющиеся фрагменты текста запроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	Док.ФизЛицо,
	               |	Док.НомерСтроки КАК НомерСтроки,
	               |	Док.ДатаПринятияРешения,
	               |	Док.Оценка,
	               |	Док.Решение,
	               |	КандидатыНаРаботу.Статус КАК ПроверяемоеЗначение,
	               |	КандидатыНаРаботу.Должность КАК Должность,
	               |	КандидатыНаРаботу.Подразделение КАК Подразделение,
				   |	КандидатыНаРаботу.ОсновнойМенеджер КАК ОсновнойМенеджер,
	               |	СписокДат.ДатаЗначения,
	               |	МИНИМУМ(ПересекающиесяСтроки.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	               |ИЗ
	               |	Документ.ОценкаКандидата.Кандидаты КАК Док
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КандидатыНаРаботу КАК КандидатыНаРаботу
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				МАКСИМУМ(КандидатыВнутри.Период) КАК ДатаЗначения,
	               |				Док.ФизЛицо КАК ФизЛицо
	               |			ИЗ
	               |				Документ.ОценкаКандидата.Кандидаты КАК Док
	               |					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КандидатыНаРаботу КАК КандидатыВнутри
	               |					ПО КандидатыВнутри.ФизЛицо = Док.ФизЛицо
	               |						И КандидатыВнутри.Период <= Док.ДатаПринятияРешения
	               |			ГДЕ
	               |				Док.Ссылка = &ДокументСсылка
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				Док.ФизЛицо) КАК СписокДат
	               |			ПО КандидатыНаРаботу.Период = СписокДат.ДатаЗначения
	               |				И КандидатыНаРаботу.ФизЛицо = СписокДат.ФизЛицо
	               |		ПО КандидатыНаРаботу.ФизЛицо = Док.ФизЛицо
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОценкаКандидата.Кандидаты КАК ПересекающиесяСтроки
	               |		ПО Док.Ссылка = ПересекающиесяСтроки.Ссылка
	               |			И Док.ФизЛицо = ПересекающиесяСтроки.ФизЛицо
	               |			И Док.НомерСтроки < ПересекающиесяСтроки.НомерСтроки
	               |ГДЕ
	               |	Док.Ссылка = &ДокументСсылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Док.ФизЛицо,
	               |	Док.НомерСтроки,
	               |	Док.ДатаПринятияРешения,
	               |	Док.Оценка,
	               |	Док.Решение,
	               |	КандидатыНаРаботу.Статус,
	               |	КандидатыНаРаботу.Должность,
	               |	КандидатыНаРаботу.Подразделение,
				   |	КандидатыНаРаботу.ОсновнойМенеджер,
	               |	СписокДат.ДатаЗначения";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоКандидаты()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Кандидаты" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиКандидата(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = НСтр("ru='В строке номер ""';uk='У рядку номер ""'")+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									НСтр("ru='"" табл. части ""Кандидаты"": ';uk='"" табл. частини ""Кандидати"": '");
	
	//Если ВыборкаПоСтрокамДокумента.Следующий() Тогда

		// ФизЛицо
		ЕстьФизЛицо = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо);
		Если Не ЕстьФизЛицо Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не выбрано физическое лицо!';uk='не обрана фізична особа!'"), Отказ, Заголовок);
		КонецЕсли;

		// ДатаПринятияРешения
		ЕстьДатаПринятияРешения = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаПринятияРешения);
		Если Не ЕстьДатаПринятияРешения Тогда	
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата принятия решения!';uk='не вказана дата прийняття рішення!'"), Отказ, Заголовок);
		КонецЕсли;

		// Решение
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Решение) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указано решение!';uk='не зазначено рішення!'"), Отказ, Заголовок);
		КонецЕсли;
		
		Если ЕстьФизЛицо и ЕстьДатаПринятияРешения Тогда
			
			Если ВыборкаПоСтрокамДокумента.ДатаЗначения = ВыборкаПоСтрокамДокумента.ДатаПринятияРешения Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='по кандидату на дату оценки уже присутствует решение!';uk='по кандидату на дату оцінки вже є рішення!'"), Отказ, Заголовок);
			КонецЕсли;
			
			Если ВыборкаПоСтрокамДокумента.ПроверяемоеЗначение = Перечисления.СостоянияКандидатаНаРаботу.Отклонен Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='указан кандидат,по которому принято решение ""Отказать""!';uk='вказаний кандидат,по якому прийнято рішення ""Відмовити""!'"), Отказ, Заголовок);
			КонецЕсли;
			
			// Проверка: противоречие другой строке документа
			Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
				СтрокаСообщениеОбОшибке = НСтр("ru='кандидат не может быть указан в документе дважды (см. строку ';uk='кандидат не може бути вказаний в документі двічі (див. рядок '") + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;	
		
		КонецЕсли;
		
	//КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботника()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                 по которым надо проводить документ.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	СтруктураПроведенияПоРегистрамСведений.Вставить("КандидатыНаРаботу");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, 
	
	СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")
	
    ИмяРегистра = "КандидатыНаРаботу";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

		Движение = Движения[ИмяРегистра].Добавить();
		
		// Свойства
		Движение.Период      = ВыборкаПоСтрокамДокумента.ДатаПринятияРешения;
	
		
		// Измерения
		Движение.ФизЛицо     = ВыборкаПоСтрокамДокумента.ФизЛицо;
		
		// Ресурсы
		Движение.Статус      = ВыборкаПоСтрокамДокумента.Решение;
		
		// Реквизиты
		Движение.Оценка           = ВыборкаПоСтрокамДокумента.Оценка;
		Движение.Должность        = ВыборкаПоСтрокамДокумента.Должность ;
		Движение.Подразделение    = ВыборкаПоСтрокамДокумента.Подразделение;
		Движение.ОсновнойМенеджер = ВыборкаПоСтрокамДокумента.ОсновнойМенеджер;
		
	КонецЕсли
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;

	//Документ не используется
	Отказ = Истина;
	Возврат;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);

			// получим реквизиты табличной части
			РезультатЗапросаПоКандидаты = СформироватьЗапросПоКандидаты(Режим);
			ВыборкаПоКандидаты = РезультатЗапросаПоКандидаты.Выбрать();

			Пока ВыборкаПоКандидаты.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиКандидата(ВыборкаПоКандидаты, Отказ, Заголовок);

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоКандидаты, СтруктураПроведенияПоРегистрамСведений);

				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.ОчисткаКоллекцииДвиженийДокумента(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)

	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры // ОбработкаУдаленияПроведения




