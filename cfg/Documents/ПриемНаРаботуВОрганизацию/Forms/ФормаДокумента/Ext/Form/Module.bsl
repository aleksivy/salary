////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущийСотрудник;
Перем мВалютаРегламентированногоУчета;

// для синхронизации строк табличных полей
Перем мСинхронизируемыеТабличныеЧасти;
                
Перем мСведенияОВидахРасчетаОснНачислений;
Перем мСведенияОВидахРасчета;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Диалог настройки периода
Перем мНастройкаПериода;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПолучитьСтруктуруПараметровТайпинга()
	
	ВидыВремени = Новый Массив;
	ВидыВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
	ВидыВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);

	СтруктураПараметров = Новый Структура("ВидВремени", ВидыВремени);
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровТайпинга()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
     	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеНачисления,ЭлементыФормы.КоманднаяПанель1);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ, СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

// Заполняет "пустые" реквизиты ТЧ значениями по умолчанию
//
Процедура ДоЗаполнитьСтроку()

	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ЗанимаемыхСтавок) Тогда
		ДанныеСтроки.ЗанимаемыхСтавок  = 1;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ГрафикРаботы) Тогда
		ДанныеСтроки.ГрафикРаботы = ПроцедурыУправленияПерсоналом.ПолучитьГрафикРаботы(Ответственный);
	КонецЕсли;
	
КонецПроцедуры // ДоЗаполнитьСтроку()

// удаляет начисления по работнику, все или автоматически заполняемые
// Параметры:
//   Сотрудник  - СправочникСсылка.СотрудникиОрганизации
//   УдалятьВсе - булево, если Истина - удаляются все начисления по физлицу,
//				например, при его удалении из сиска.
//				Если Ложь - удалаются только те, которые вводятся "автоматически",
//				например, при редактировании данных по строке табличной части 
//				со списком работников
Процедура УдалитьНачисленияПоРаботнику(Сотрудник)
	
	СтруктураПоиска = Новый Структура("Сотрудник", Сотрудник);
	
	// удалять начисления будем в том случае, когда в т.ч. Работники эта строка с сотрудником - последняя
	Если РаботникиОрганизации.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Строки = ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаТабличнойЧасти из Строки Цикл
		ОсновныеНачисления.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
		
КонецПроцедуры // УдалитьНачисленияПоРаботнику()

Процедура ВнестиДанныеПоСотруднику(ИзменятьКадровыеДанные = Ложь)
	
	УдалитьНачисленияПоРаботнику(мТекущийСотрудник);
		
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудник", ДанныеСтроки.Сотрудник);
	Запрос.УстановитьПараметр("Физлицо", ДанныеСтроки.Физлицо);
	Запрос.УстановитьПараметр("Подразделение", ДанныеСтроки.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Должность", ДанныеСтроки.Должность);
	Запрос.УстановитьПараметр("Организация", Организация);	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК ЭтоДанныеСотрудника,
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.Физлицо,
	|	СотрудникиОрганизаций.ПодразделениеОрганизации,
	|	СотрудникиОрганизаций.Должность,
	|	СотрудникиОрганизаций.ЗанимаемыхСтавок,
	|	СотрудникиОрганизаций.ИспытательныйСрок,
	|	СотрудникиОрганизаций.ГрафикРаботы,
	|	СотрудникиОрганизаций.ДатаНачала КАК ДатаПриема,
	|	СотрудникиОрганизаций.ДатаОкончания КАК ДатаУвольнения,
	|	СотрудникиОрганизаций.ВидРасчета,
	|	СотрудникиОрганизаций.ТарифнаяСтавка КАК Показатель1,
	|	СотрудникиОрганизаций.ВалютаТарифнойСтавки КАК Валюта1,
	|	СотрудникиОрганизаций.ТарифныйРазряд КАК ТарифныйРазряд1,
	|	NULL КАК Показатель2,
	|	NULL КАК Валюта2,
	|	NULL КАК ТарифныйРазряд2,
	|	NULL КАК Показатель3,
	|	NULL КАК Валюта3,
	|	NULL КАК ТарифныйРазряд3,
	|	NULL КАК Показатель4,
	|	NULL КАК Валюта4,
	|	NULL КАК ТарифныйРазряд4
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка = &Сотрудник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	Надбавки.Ссылка,
	|	Надбавки.Ссылка.Физлицо,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Надбавки.Надбавка,
	|	Надбавки.Показатель1,
	|	Надбавки.Валюта1,
	|	Надбавки.ТарифныйРазряд1,
	|	Надбавки.Показатель2,
	|	Надбавки.Валюта2,
	|	Надбавки.ТарифныйРазряд2,
	|	Надбавки.Показатель3,
	|	Надбавки.Валюта3,
	|	Надбавки.ТарифныйРазряд3,
	|	Надбавки.Показатель4,
	|	Надбавки.Валюта4,
	|	Надбавки.ТарифныйРазряд4
	|ИЗ
	|	Справочник.СотрудникиОрганизаций.ПерсональныеНадбавки КАК Надбавки
	|ГДЕ
	|	Надбавки.Ссылка = &Сотрудник
	|	И Надбавки.Надбавка <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ	
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	&Сотрудник,
	|	&Физлицо,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СхемыМотивацииРаботников.ВидРасчета,
	|	СхемыМотивацииРаботников.Показатель1,
	|	СхемыМотивацииРаботников.Валюта1,
	|	СхемыМотивацииРаботников.ТарифныйРазряд1,
	|	СхемыМотивацииРаботников.Показатель2,
	|	СхемыМотивацииРаботников.Валюта2,
	|	СхемыМотивацииРаботников.ТарифныйРазряд2,
	|	СхемыМотивацииРаботников.Показатель3,
	|	СхемыМотивацииРаботников.Валюта3,
	|	СхемыМотивацииРаботников.ТарифныйРазряд3,
	|	СхемыМотивацииРаботников.Показатель4,
	|	СхемыМотивацииРаботников.Валюта4,
	|	СхемыМотивацииРаботников.ТарифныйРазряд4
	|ИЗ
	|	РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
	|ГДЕ
	|	СхемыМотивацииРаботников.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций
	|	И СхемыМотивацииРаботников.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|	И ВЫБОР КОГДА СхемыМотивацииРаботников.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|     ТОГДА	СхемыМотивацииРаботников.Организация = &Организация
	|     ИНАЧЕ ИСТИНА КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СхемыМотивацииРаботников.Должность <> ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)
	|					И СхемыМотивацииРаботников.Подразделение ССЫЛКА Справочник.ПодразделенияОрганизаций И СхемыМотивацииРаботников.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|				ТОГДА СхемыМотивацииРаботников.Должность = &Должность
	|						И СхемыМотивацииРаботников.Подразделение = &Подразделение
	|			ИНАЧЕ СхемыМотивацииРаботников.Должность = &Должность
	|		КОНЕЦ";

	ДанныеСотрудника = Запрос.Выполнить().Выбрать();			
	
	// введем надбавки
	Пока ДанныеСотрудника.Следующий() Цикл
		
		Если ДанныеСотрудника.ЭтоДанныеСотрудника Тогда
			Если ИзменятьКадровыеДанные Тогда
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, ДанныеСотрудника);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеСотрудника.ВидРасчета) Тогда
			ЗаполнитьЗначенияСвойств(ОсновныеНачисления.Добавить(), ДанныеСотрудника);
		КонецЕсли;
						
	КонецЦикла;	
	
КонецПроцедуры //ВнестиДанныеПоСотруднику

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	Иначе 
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ПодразделениеОрганизации");
	СтруктураКолонок.Вставить("Должность");
	СтруктураКолонок.Вставить("ДатаПриема");
	СтруктураКолонок.Вставить("ГрафикРаботы");

	// Установить ограничение - изменять видимость колонок для табличной части Начисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаботникиОрганизации.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента	= Дата;
	мТекущийСотрудник		= ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.СотрудникиОрганизаций");
	
	//УстановитьВидимостьРК();
		
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.РаботникиОрганизации.Колонки.ТабельныйНомерСтрока);
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта1);
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта2);
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта3);
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта4);
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта5);
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта6);
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	// Установить настройку периода по умолчанию
	мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	мНастройкаПериода.УстановитьПериод(НачалоМесяца(Дата), КонецМесяца(Дата));
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФормеЗУП(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	Оповестить("ОбновитьДоступностьРеквизитов");
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()


// Процедура - обработчик нажатия кнопки "ЗаполнитьПоТрудовымДоговорам"
//
Процедура КоманднаяПанельРаботникиОрганизацииЗаполнитьСотрудниками(Кнопка)
	
	Если РаботникиОрганизации.Количество()>0 Тогда
		ТекстВопроса = НСтр("ru='Имеющийся список работников будет очищен. Продолжить?';uk='Наявний список працівників буде очищений. Продовжити?'");
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если мНастройкаПериода.Редактировать() Тогда
		ЗаполнитьТабличнуюЧастьРаботникиСотрудниками(мНастройкаПериода.ПолучитьДатуНачала(), мНастройкаПериода.ПолучитьДатуОкончания());
		ПереформироватьВзносыПоРаботникам()
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииЗаполнитьПоТрудовымДоговорам()

// Процедура - обработчик нажатия кнопки "ЗаполнитьПринятымиВКомпанию"
//
Процедура КоманднаяПанельРаботникиОрганизацииЗаполнитьПринятымиВКомпанию(Кнопка)
	
	Если РаботникиОрганизации.Количество()>0 Тогда
		ТекстВопроса = НСтр("ru='Имеющийся список работников будет очищен. Продолжить?';uk='Наявний список працівників буде очищений. Продовжити?'");
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если мНастройкаПериода.Редактировать() Тогда
		ЗаполнитьТабличнуюЧастьРаботникиПринятымиВКомпанию(мНастройкаПериода.ПолучитьДатуНачала(), мНастройкаПериода.ПолучитьДатуОкончания());
		ПереформироватьВзносыПоРаботникам();
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииЗаполнитьПринятымиВКомпанию()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа
//
Процедура ДатаПриИзменении(Элемент = Неопределено)

	РаботаСДиалогами.ПроверитьНомерДокумента(ДокументОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура - обработчик события "ПриАктивизацииСтроки" строки ТЧ
//
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.РаботникиОрганизации, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
КонецПроцедуры // РаботникиОрганизацииПриАктивизацииСтроки()
 
// Процедура - обработчик события "ПриАктивизацииЯчейки" строки ТЧ
//
Процедура РаботникиОрганизацииПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяКолонка = Элемент.ТекущаяКолонка;
	Если ТекущаяКолонка.Имя = "ПодразделениеОрганизации" Или ТекущаяКолонка.Имя = "Должность" Тогда
		
		ИмяВторойКолонки = ?(ТекущаяКолонка.Имя = "ПодразделениеОрганизации","Должность","ПодразделениеОрганизации");
		
		СписокПодразделений = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации(ТекущаяКолонка.Имя, Организация, Элемент.ТекущиеДанные[ИмяВторойКолонки]);
		КоличествоЗначений = СписокПодразделений.Количество();
		
		ПолеВвода = ТекущаяКолонка.ЭлементУправления;
		ПолеВвода.СписокВыбора = СписокПодразделений;
		ПолеВвода.КнопкаСпискаВыбора = КоличествоЗначений > 0;
		ПолеВвода.ВысотаСпискаВыбора = Мин(10, КоличествоЗначений);
		
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииПриАктивизацииЯчейки()

// Процедура - обработчик события "ПередНачаломДобавления" строки ТЧ
//
Процедура РаботникиОрганизацииПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		
		ДанныеСтроки = Элемент.ТекущиеДанные;
		
		НоваяСтрока = РаботникиОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки,, "Сотрудник");
		
		Элемент.ТекущаяСтрока = НоваяСтрока;
		
		ДоЗаполнитьСтроку();
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииПередНачаломДобавления()

// Процедура удаляет строки с работником из табличной части "ОсновныеНачисления".
//
Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	УдалитьНачисленияПоРаботнику(Элемент.ТекущиеДанные.Сотрудник);
	УдалитьВзносыПоРаботнику(Элемент.ТекущиеДанные.Сотрудник);
	
КонецПроцедуры // РаботникиОрганизацииПередУдалением()

// Процедура обеспечивает начальное значение реквизитов "ЗанимаемыхСтавок" 
//  и "ИспытательныйСрок"
//
// Параметры:
//  Элемент - табличное поле, которое отображает т.ч.
//  НоваяСтрока - булево, признак редактирования новой строки
//  
Процедура РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	мТекущийСотрудник = Элемент.ТекущаяСтрока.Сотрудник;
	
КонецПроцедуры // РаботникиОрганизацииПриНачалеРедактирования()

Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);
	
КонецПроцедуры

Процедура РаботникиОрганизацииПриИзмененииФлажка(Элемент, Колонка)
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	Если ТекущаяСтрока.ПринятНаНовоеРабочееМесто Тогда
		ДанныеШР = ПроцедурыУправленияПерсоналом.СведенияОПозицииШтатногоРасписания(ТекущаяСтрока.ДатаПриема, ТекущаяСтрока.ПодразделениеОрганизации, ТекущаяСтрока.Должность);
		Если ДанныеШР.Количество() > 0 Тогда
			ТекущаяСтрока.ДатаСозданияРабочегоМеста = ДанныеШР[0].Период;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.ДатаСозданияРабочегоМеста = Дата('00010101')
	КонецЕсли	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица.
//
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	
	ВнестиДанныеПоСотруднику(Истина);
	
	ДоЗаполнитьСтроку();
	
	мТекущийСотрудник = Элемент.Значение;
	
	Если мТекущийСотрудник.ВидЗанятости<>Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
			ПереформироватьВзносыПоРаботнику();
	КонецЕсли;
	
	
	
КонецПроцедуры // РаботникиОрганизацииСотрудникПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода трудового договора.
//
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникНачалоВыбора()

Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "Сотрудники", Текст, Организация);
	
КонецПроцедуры

Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "Сотрудники", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры


// Процедура обеспечивает нестандартный шаг регулирования 
//
// Параметры:
//  Элемент - поле ввода т.ч., которое отображает занимаемые ставки
//  Направление - число, определяет, какая из кнопок регулирования была нажата
//  СтандартнаяОбработка - булево, признак выполнения системной обработки события
//  
Процедура РаботникиОрганизацииЗанимаемыхСтавокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если Направление = 1 Тогда // увеличиваем значение
		ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.ЗанимаемыхСтавок = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.ЗанимаемыхСтавок + 0.5
		
	Иначе // = -1 - уменьшаем значение
		ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.ЗанимаемыхСтавок = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.ЗанимаемыхСтавок - 0.5
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // РаботникиОрганизацииЗанимаемыхСтавокРегулирование()

Процедура РаботникиОрганизацииПодразделениеОрганизацииПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ГрафикРаботы) Тогда
		ДанныеШР = ПроцедурыУправленияПерсоналом.СведенияОПозицииШтатногоРасписания(Дата, ДанныеСтроки.ПодразделениеОрганизации, ДанныеСтроки.Должность);
		Если ДанныеШР.Количество() > 0 Тогда
			ДанныеСтроки.ГрафикРаботы = ДанныеШР[0].ГрафикРаботы;
		КонецЕсли;
	КонецЕсли;
	
	ВнестиДанныеПоСотруднику(Ложь);
	
КонецПроцедуры // РаботникиОрганизацииПодразделениеОрганизацииПриИзменении()

Процедура РаботникиОрганизацииДолжностьПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ГрафикРаботы) Тогда
		ДанныеШР = ПроцедурыУправленияПерсоналом.СведенияОПозицииШтатногоРасписания(Дата, ДанныеСтроки.ПодразделениеОрганизации, ДанныеСтроки.Должность);
		Если ДанныеШР.Количество() > 0 Тогда
			ДанныеСтроки.ГрафикРаботы = ДанныеШР[0].ГрафикРаботы;
		КонецЕсли;
	КонецЕсли;
	
	ВнестиДанныеПоСотруднику(Ложь);
	
КонецПроцедуры // РаботникиОрганизацииДолжностьПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

Процедура ОсновныеНачисленияПриАктивизацииСтроки(Элемент)
	
    ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.ОсновныеНачисления, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
КонецПроцедуры // ОсновныеНачисленияПриАктивизацииСтроки()
 
Процедура ОсновныеНачисленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
РаботаСДиалогами.ПриВыводеСтрокиПлановыхНачисленийИУдержаний(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчетаОснНачислений, );
	
КонецПроцедуры // ОсновныеНачисленияПриВыводеСтроки()

Процедура ОсновныеНачисленияВидРасчетаПриИзменении(Элемент)
	
	ПриИзмененииВидаРасчета(Элемент.Значение,"ОсновныеНачисления");
	
КонецПроцедуры // ОсновныеНачисленияВидРасчетаПриИзменении()

Процедура ОсновныеНачисленияСотрудникПриИзменении(Элемент)
	ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо
КонецПроцедуры

Процедура ОсновныеНачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура ОсновныеНачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "Сотрудники", Текст, Организация);
	
КонецПроцедуры

Процедура ОсновныеНачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "Сотрудники", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры

Процедура ОсновныеНачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокВидовВремени = Новый СписокЗначений;
	СписокВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
	СписокВидовВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
	
	//СписокНедопустимыхВР = Новый СписокЗначений;
	//СписокНедопустимыхВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет);
	//СписокНедопустимыхВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет);
	//СписокНедопустимыхВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаПраздничныеИВыходные);
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора(,Элемент,Ссылка);
	
	
	//ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	//ФормаВыбора.Отбор.Ссылка.Значение = СписокНедопустимыхВР;
	//ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ОсновныеНачисленияВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));	
КонецПроцедуры

Процедура ОсновныеНачисленияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаТайпинга, мТекстТайпинга, мПоследнееЗначениеЭлементаТайпинга, Ложь);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура - обработчик события "Файлы".
//
Процедура ДействияФормыФайлы(Кнопка)
	
	Если Ссылка.Пустая() Тогда
		Предупреждение(НСтр("ru='Сначала запишите документ.';uk='Спочатку запишіть документ.'"));
		Возврат;
	КонецЕсли;

	ФормаФайлов = Справочники.ХранилищеДополнительнойИнформации.ПолучитьФорму("ФормаСпискаФайловИИзображений", ЭтаФорма);
	
	ФормаФайлов.Изображения.Отбор.Объект.Использование                               = Истина;
	ФормаФайлов.Изображения.Отбор.Объект.Значение                                    = Ссылка;
	ФормаФайлов.ЭлементыФормы.Изображения.НастройкаОтбора.Объект.Доступность         = Ложь;
	ФормаФайлов.ЭлементыФормы.Изображения.Колонки.Объект.Видимость                   = Ложь;

	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Использование                       = Истина;
	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Значение                            = Ссылка;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.НастройкаОтбора.Объект.Доступность = Ложь;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.Колонки.Объект.Видимость           = Ложь;

	ОбязательныеОтборы = Новый Структура;
	ОбязательныеОтборы.Вставить("Объект",Ссылка);

	ФормаФайлов.ОбязательныеОтборы = ОбязательныеОтборы;
	
	ФормаФайлов.Открыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
//РАБОТА С ТЧ ВЗНОСЫ И ВЗНОСЫФОТ
Процедура ДобавитьВзносыПоСтроке(РаботникСтрока)
	
	Если НЕ РаботникСтрока.Сотрудник.ОсновноеНазначение.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураПоиска = Новый Структура("Сотрудник", РаботникСтрока.Сотрудник);
	Если Взносы.НайтиСтроки(СтруктураПоиска).Количество() > 1 
		ИЛИ	ВзносыФОТ.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		Возврат
	КонецЕсли;

	
	Если ЗначениеЗаполнено(РаботникСтрока.Сотрудник.ГруппаВзносов) Тогда
		ГруппаВзносов = РаботникСтрока.Сотрудник.ГруппаВзносов;
	Иначе
		ГруппаВзносов = Справочники.ГруппыВзносовВФонды.ОсновнойСостав;
	КонецЕсли;
	
	ДатаЗаполнения = ?(ЗначениеЗаполнено(РаботникСтрока.ДатаПриема),РаботникСтрока.ДатаПриема,Дата);
	Выборка = ПроведениеРасчетов.НалогиПоГруппеВзносов(ГруппаВзносов, ДатаЗаполнения);
	Пока Выборка.Следующий() Цикл
		Если Выборка.СпосовРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВзносыФОТ Тогда
			Строка = ВзносыФОТ.Добавить();
			Строка.Сотрудник	= РаботникСтрока.Сотрудник;
			Строка.Налог		= Выборка.Налог;
		Иначе	
			Строка = Взносы.Добавить();
			Строка.Сотрудник	= РаботникСтрока.Сотрудник;
			Строка.Налог		= Выборка.Налог;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПроведениеРасчетов.ИспользуетсяЕСВ(ДатаЗаполнения) И ПроведениеРасчетов.ИспользуетсяЕСВ() Тогда
		//Если дата приема раньше ввода ЕСВ, а на рабочую дату ЕСВ уже используется
		//тогда добавим еще и новые взносы
		Выборка = ПроведениеРасчетов.НалогиПоГруппеВзносов(ГруппаВзносов);
		Пока Выборка.Следующий() Цикл
			Если Выборка.СпосовРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВзносыФОТ Тогда
				Строка = ВзносыФОТ.Добавить();
				Строка.Сотрудник	= РаботникСтрока.Сотрудник;
				Строка.Налог		= Выборка.Налог;
			Иначе	
				Строка = Взносы.Добавить();
				Строка.Сотрудник	= РаботникСтрока.Сотрудник;
				Строка.Налог		= Выборка.Налог;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;	
	
КонецПроцедуры


// удаляет взносы по работнику
// Параметры:
//   Физлицо - СправочникСсылка.Физлица
Процедура УдалитьВзносыПоРаботнику(Сотрудник)
	
	СтруктураПоиска = Новый Структура("Сотрудник", Сотрудник);
	
	// удалять взносы будем в том случае, когда в т.ч. Работники эта строка с физлицом - последняя
	Если РаботникиОрганизации.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		Возврат
	КонецЕсли;
	
	Строки = Взносы.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Строка из Строки Цикл
		Взносы.Удалить(Строка);
	КонецЦикла;
		
	Строки = ВзносыФОТ.НайтиСтроки(СтруктураПоиска);
		
	Для Каждого Строка из Строки Цикл
		ВзносыФОТ.Удалить(Строка);
	КонецЦикла;
			
КонецПроцедуры  // УдалитьВзносыПоРаботнику

// Добавляет или переопределяет строку в табличных частях "Взносы" и "Взносы ФОТ" при изменении сотрудника 
//
Процедура ПереформироватьВзносыПоРаботнику()
	
	Если ЗначениеЗаполнено(мТекущийСотрудник) Тогда
		УдалитьВзносыПоРаботнику(мТекущийСотрудник);
	КонецЕсли;
	
	ДобавитьВзносыПоСтроке(ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока);
	
	
КонецПроцедуры // ПереформироватьВзносыПоРаботнику()

Процедура ПереформироватьВзносыПоРаботникам()

    Для Каждого СтрокаТЧ из РаботникиОрганизации Цикл
		ДобавитьВзносыПоСтроке(СтрокаТЧ);
	КонецЦикла;	
	
КонецПроцедуры // ПереформироватьВзносыПоРаботникам()

/////////////////////////////////////////////////////////////////////////
Процедура ПриИзмененииВидаРасчета(Значение, ИмяОбъекта)
	
	СведенияОВидеРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, Значение);
	
	Для СчПоказателей = 1 По Мин(СведенияОВидеРасчета["КоличествоПоказателей"],6) Цикл
		Если НЕ ЗначениеЗаполнено(ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей]) И 
			СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей] = мВалютаРегламентированногоУчета;
		КонецЕсли;
		Если НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей] = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;
		Если НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Показатель" + СчПоказателей] = 0;
		КонецЕсли;
	КонецЦикла;
	
	
	
	// для ночных и вчерних определим "процент отплаты"
	Если Значение = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы Тогда
		ЭлементыФормы[ИмяОбъекта].ТекущиеДанные.Показатель2 = 100*РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).КоэффициентВечерних;
	ИначеЕсли Значение = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы Тогда
		ЭлементыФормы[ИмяОбъекта].ТекущиеДанные.Показатель2 = 100*РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).КоэффициентНочных;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
мСинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]		= Ложь;
мСинхронизируемыеТабличныеЧасти["ОсновныеНачисления"]		= Ложь;
мСинхронизируемыеТабличныеЧасти["Взносы"]					= Ложь;
мСинхронизируемыеТабличныеЧасти["ВзносыФОТ"]				= Ложь;

мСведенияОВидахРасчетаОснНачислений = Новый Соответствие;
мСведенияОВидахРасчета = Новый Соответствие;

мНастройкаПериода = Новый НастройкаПериода;
