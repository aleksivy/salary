////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет расчет основных и дополнительных записей начислений
//
Процедура РассчитатьНачисления() Экспорт
	
	Отказ = Ложь;
	МассивИндексыСтрокНачисления = Новый Массив();
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента).Выбрать();
	ЗафиксироватьТранзакцию();

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	// создадим наборы записей для выполнения движений
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	// Если почасовое отклонение, то записываем движения в регистр ВнутрисменноеВремяРаботниковОрганизаций
	НаборЗаписейРабочееВремя = РегистрыНакопления.ВнутрисменноеВремяРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписейРабочееВремя.Отбор.Регистратор.Значение = Ссылка;
	
	// получим реквизиты табличной части
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, НаборОсновныеНачисления);
			ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, НаборЗаписейРабочееВремя);
			МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
		КонецЕсли;
	КонецЦикла;
	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	НаборЗаписейРабочееВремя.Записать();

	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодРегистрации");
	ТаблицаСторноЗаписей.Колонки.ПериодРегистрацииСторно.Имя = "ПериодРегистрации";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияНачало");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияНачалоСторно.Имя = "ПериодДействияНачало";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияКонец");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияКонецСторно.Имя = "ПериодДействияКонец";
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		
		// Заполним записи в наборе записей регистра
		Движение = НаборОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;
		Движение.СторнируемыйДокумент = СтрокаСторно.Регистратор;

		// и в табличной части
		Движение = ОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.ДатаНачала		= СтрокаСторно.ПериодДействияНачало;   
		Движение.ДатаОкончания	= СтрокаСторно.ПериодДействияКонец; 
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;
		Движение.СторнируемыйДокумент = СтрокаСторно.Регистратор;

		МассивИндексыСтрокНачисления.Добавить(Движение.НомерСтроки-1);
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	// перед тем как начать расчет, сформированные движения надо записать - 
	// по ним чуть позже будем получать дополнительные данные для расчетов

	// рассчитываем записи
	// при этом передаем не только набор записей регистра расчета, но и набор записей регисра 
	// накопления со сведениями об отработанном времени
	//ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, Неопределено, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, ОсновныеНачисления);
	
	мСотрудники = Новый СписокЗначений;
	мСотрудники.ЗагрузитьЗначения(ОсновныеНачисления.ВыгрузитьКолонку("Сотрудник"));
	
	Для Каждого Сотрудник из мСотрудники Цикл
		Если ЗначениеЗаполнено(Сотрудник.Значение.ОсновноеНазначение) Тогда
			Сотрудник.Значение = Сотрудник.Значение.ОсновноеНазначение;
		КонецЕсли;	
	КонецЦикла;	
	
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления,ОсновныеНачисления,МассивИндексыСтрокНачисления,мСотрудники);
	// запишем результат расчета для расчета доп. начислений
	НаборОсновныеНачисления.Записать(Истина, Истина);
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборЗаписейРабочееВремя.Очистить();
	НаборЗаписейРабочееВремя.Записать();

КонецПроцедуры // РассчитатьНачисления()

// Выполняет перерасчет по заданному списку физлиц
// Если передан пустой список физлиц - перерасчет не проводится
// Если в качестве списка физлиц передан не массив, а Неопределено - перерасчет по всем физлицам 
// регистратора по которым требуется перерасчет
//
// Параметры
// 	Физлица - список значений - ссылки на физлиц
// Возвращаемое значение
//  Нет
//
Процедура Перерассчитать( Сотрудники = Неопределено) Экспорт
	
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	Если Не ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// получим список перерассчитываемых сорудников
	СотрудникиСписок = Новый СписокЗначений;
	Если Сотрудники = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Перерасчет.Сотрудник
		|ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектПерерасчета = &парамРегистратор
		|	
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ РегистрРасчета.ВзносыВФонды.ПерерасчетВзносовВФонды КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектПерерасчета = &парамРегистратор		
		|	
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ РегистрСведений.ЗаполнениеПлановыхНачислений КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектЗаполнения = &парамРегистратор		
		|	
		|";
		
		Запрос.Текст = ТекстЗапроса;
		СотрудникиСписок.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник"));
		
	Иначе
		
		СотрудникиСписок = Сотрудники;
		
	КонецЕсли;
	
	// если не перерассчитываем никого - возврат
	Если СотрудникиСписок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	// читаем все данные 
	НачатьТранзакцию();
	Прочитать();
	
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Прочитать();
	ЗафиксироватьТранзакцию();
	
	////////////////////////////////////////////////////////////////////////
	// Основные начисления
	Если Истина Тогда
		// перерассчитываем записи начислений
		ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", 
											Движения.ОсновныеНачисленияРаботниковОрганизаций, 
											ОсновныеНачисления, 
											, 
											СотрудникиСписок);
		Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	КонецЕсли;
	
	// записываем документ перед вызовом СформироватьВзаиморасчетыСРаботниками
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Взаиморасчеты с работниками
	Если Истина Тогда
		// сначала удалим сведения о взаиморасчетах с работниками
		ВзаиморасчетыСРаботникамиОрганизаций = Движения.ВзаиморасчетыСРаботникамиОрганизаций;
		ПоследнееДвижение = ВзаиморасчетыСРаботникамиОрганизаций.Количество()-1;
		// удалим записи по всем сотрудника полученного списка
		// обходим в обратном порядке
		Для Сч = 0 По ПоследнееДвижение Цикл
			Если СотрудникиСписок.НайтиПоЗначению(ВзаиморасчетыСРаботникамиОрганизаций[ПоследнееДвижение - Сч].Сотрудник) <> Неопределено Тогда
				ВзаиморасчетыСРаботникамиОрганизаций.Удалить(ПоследнееДвижение - Сч);
			КонецЕсли;
		КонецЦикла;
		
		// теперь сформируем начисления к выплате по начислениям документа для перерассчитываемых работников
		СформироватьВзаиморасчетыСРаботниками(ВзаиморасчетыСРаботникамиОрганизаций, СотрудникиСписок );
		
	КонецЕсли;
			
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Удалим записи перерасчета по которым выполнен перерасчет
	НаборЗаписей = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	ПроведениеРасчетов.УдалитьЗаписиПерерасчетаПоКоторымВыполненПерерасчет(Ссылка, НаборЗаписей, СотрудникиСписок);
	НаборЗаписей.Записать();
	
КонецПроцедуры // Перерассчитать()

Функция ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Знач Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных
	

	Если Сотрудники = "ПоДаннымПерерасчета" Тогда
		// получим список Сотрудников для перерасчета
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент
		|";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		СотрудникиПерерасчета = Результат.ВыгрузитьКолонку("Сотрудник");
		
	ИначеЕсли Сотрудники <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка В(&Сотрудники)";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		СотрудникиПерерасчета = Результат.ВыгрузитьКолонку("Сотрудник");
		
	Иначе
		// получим список Сотрудников для перерасчета
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК Перерасчет
		|ГДЕ Перерасчет.Ссылка = &ПерерассчитываемыйДокумент
		|";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		СотрудникиПерерасчета = Результат.ВыгрузитьКолонку("Сотрудник");
		
	КонецЕсли;	
	
	Если СотрудникиПерерасчета.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	Запрос.УстановитьПараметр("СотрудникиПерерасчета", СотрудникиПерерасчета);
	// ТЧ Начисления
	Если Истина Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец,
		|	Начисления.Показатель1,
		|	Начисления.Показатель2,
		|	Начисления.Показатель3,
		|	Начисления.Показатель4,
		|	Начисления.Показатель5,
		|	Начисления.Показатель6,
		|	Начисления.ГрафикРаботы,
		|	Начисления.ПодразделениеОрганизации,
		|	Начисления.НормаДнейЗаМесяц,
		|	Начисления.НормаЧасовЗаМесяц,
		|	-Начисления.Результат КАК Результат,
		|	-Начисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
		|	-Начисления.ОтработаноДней КАК ОтработаноДней,
		|	-Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
		|	-Начисления.КалендарныеДни КАК КалендарныеДни,
		|	-Начисления.НормаДней КАК НормаДней,
		|	-Начисления.НормаЧасов КАК НормаЧасов,
		|	ИСТИНА КАК Сторно,
		|	Начисления.Ссылка КАК СторнируемыйДокумент,
		|	Начисления.Авторасчет КАК Авторасчет,
		|	Начисления.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ Начисления.Сторно)
		|	И Начисления.Сотрудник В(&СотрудникиПерерасчета)
		|	И Начисления.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец,
		|	Начисления.Показатель1,
		|	Начисления.Показатель2,
		|	Начисления.Показатель3,
		|	Начисления.Показатель4,
		|	Начисления.Показатель5,
		|	Начисления.Показатель6,
		|	Начисления.ГрафикРаботы,
		|	Начисления.ПодразделениеОрганизации,
		|	Начисления.НормаДнейЗаМесяц,
		|	Начисления.НормаЧасовЗаМесяц,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ЛОЖЬ,
		|	NULL,
		|	Истина,
		|	Начисления.НомерСтроки
		|ИЗ
		|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ Начисления.Сторно)
		|	И Начисления.Сотрудник В(&СотрудникиПерерасчета)
		|	И Начисления.Ссылка.Проведен
        |УПОРЯДОЧИТЬ ПО
		|	Сторно УБЫВ,
		|	НомерСтроки";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// сторно-строка
			ЗаполнитьЗначенияСвойств(ОсновныеНачисления.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Записать();
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьПоПерерассчитываемомуДокументу()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамРегистрацияДляЧастиСмены", Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.Дата,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.ПериодРегистрации,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.Организация,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.Организация КАК ГоловнаяОрганизация,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.Организация КАК ОбособленноеПодразделение,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.Ссылка,
	|	ВЫБОР
	|		КОГДА РегистрацияРазовыхНачисленийРаботниковОрганизации.СпособРегистрацииВремени = &парамРегистрацияДляЧастиСмены
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РегистрируютсяПочасовыеОтклонения
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций КАК РегистрацияРазовыхНачисленийРаботниковОрганизации
	|ГДЕ
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	СписокСтруктурныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",	СписокСтруктурныхПодразделений);

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ГоловнаяОрганизация);
	МассивВидовВремени = Новый СписокЗначений;
	МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеНеотработанное);
	МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
	Запрос.УстановитьПараметр("ПочасовоеНачисление",МассивВидовВремени);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР КОГДА ТЧНачисления.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство) 
	|         ТОГДА ТЧНачисления.Сотрудник.ОсновноеНазначение
	|         ИНАЧЕ ТЧНачисления.Сотрудник
	|	КОНЕЦ КАК Сотрудник,
	|	ТЧНачисления.Сотрудник КАК Назначение,
	|	ТЧНачисления.Сотрудник.Наименование,
	|	ТЧНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ТЧНачисления.ДатаОкончания КАК ПериодДействияКонец,
	|	ТЧНачисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ТЧНачисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ТЧНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ТЧНачисления.ВидРасчета.ВидВремени КАК ВидВремени,
	|	ТЧНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ТЧНачисления.ВидРасчета.ДоходНДФЛ КАК КодДоходаНДФЛ,
	|	ТЧНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|	ТЧНачисления.Показатель1,
	|	ТЧНачисления.Показатель2,
	|	ТЧНачисления.Показатель3,
	|	ТЧНачисления.Показатель4,
	|	ТЧНачисления.Показатель5,
	|	ТЧНачисления.Показатель6,
	|	ТЧНачисления.Результат,
	|	ТЧНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|   	КОГДА НЕ ТЧНачисления.ГрафикРаботы ЕСТЬ NULL 
	|			ТОГДА ТЧНачисления.ГрафикРаботы
	|		КОГДА ГрафикРаботыПоСотруднику.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы
	|		ИНАЧЕ ТЧНачисления.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|   ВЫБОР	КОГДА ТЧНачисления.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы
	|   			ТОГДА NULL
	|			ИНАЧЕ ТЧНачисления.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботыСотрудник,
	|	ЕСТЬNULL(ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	ТЧНачисления.НормаДней,
	|	ТЧНачисления.НормаЧасов,
	|	ТЧНачисления.ОтработаноДней,
	|	ТЧНачисления.ОтработаноЧасов,
	|	ТЧНачисления.НормаЧасовЗаМесяц                       	КАК НормаЧасовЗаМесяц,
	|	ТЧНачисления.НормаДнейЗаМесяц                        	КАК НормаДнейЗаМесяц,
	|	ТЧНачисления.КалендарныеДни                        	 	КАК КалендарныеДни,
	|	ТЧНачисления.Сторно,
	|	ТЧНачисления.ОплачиватьЧасов КАК ОплачиватьЧасов,
	|	ТЧНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА (НЕ ТЧНачисления.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ТЧНачисления.Авторасчет,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ВидВремени В (&ПочасовоеНачисление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяПочасовымОтклонением
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК Период
	|		ИЗ
	|			Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК ТЧНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО РаботникиОрганизации.Период <= ТЧНачисления.ДатаНачала
	|					И ТЧНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ГДЕ
	|			ТЧНачисления.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧНачисления.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуНаДатуНачисления
	|		ПО ДанныеПоРаботникуНаДатуНачисления.Период = ДатыПоследнихДвиженийРаботников.Период
	|			И ТЧНачисления.Сотрудник = ДанныеПоРаботникуНаДатуНачисления.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК СтрокиНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|				ПО ГрафикиРаботыПоВидамВремени.ГрафикРаботы = СтрокиНачисления.Сотрудник
	|					И (ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаНачала, МЕСЯЦ))
	|		ГДЕ
	|			СтрокиНачисления.Ссылка = &ДокументСсылка) КАК ГрафикРаботыПоСотруднику
	|		ПО ТЧНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указана организация, по которой выполняются начисления!';uk='Не вказана організація, по якій виконуються нарахування!'"), Отказ, Заголовок);
	КонецЕсли;
	
	//  ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указан месяц, в котором выполняются начисления!';uk='Не вказаний місяць, в якому виконуються нарахування!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Период документа должен быть больше периода перерассчитываемого документа!';uk='Період документа повинен бути більше періоду документа, що перерозраховується!'"), Отказ, Заголовок);
	КонецЕсли;
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!';uk='Організація, задана для документа, повинна збігатися з організацією документа, що перерозраховується!'"), Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОсновныеНачисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = НСтр("ru='В строке номер ""';uk='У рядку номер ""'")+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									НСтр("ru='"" табл. части ""Начисления"": ';uk='"" табл. частини ""Нарахування"": '");
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не задан Сотрудник!';uk='не заданий Співробітник!'"), Отказ, Заголовок);
	КонецЕсли;

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан вид расчета!';uk='не зазначений вид розрахунку!'"), Отказ, Заголовок);
	ИначеЕсли ВыборкаПоШапкеДокумента.РегистрируютсяПочасовыеОтклонения <> ВыборкаПоСтрокамДокумента.ЯвляетсяПочасовымОтклонением Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='указанный вид расчета не соответствует способу регистрации времени в документе!';uk='зазначений вид розрахунку не відповідає способу реєстрації часу в документі!'"), Отказ, Заголовок);
	КонецЕсли;

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата начала начисления!';uk='не зазначена дата початку нарахування!'"), Отказ, Заголовок);
		
	ИначеЕсли Не ВыборкаПоСтрокамДокумента.ЯвляетсяПочасовымОтклонением Тогда
		// Дата окончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата окончания начисления!';uk='не зазначена дата закінчення нарахування!'"), Отказ, Заголовок);
		Иначе
			Если ВыборкаПоСтрокамДокумента.ПериодДействияКонец < ВыборкаПоСтрокамДокумента.ПериодДействияНачало Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='дата окончания начисления не должна быть меньше даты начала!';uk='дата закінчення нарахування не повинна бути менша дати початку!'"), Отказ, Заголовок);
				
			Иначе
				Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='даты начала и окончания должны принадлежать одному месяцу!';uk='дати початку і закінчення повинні належати одному місяцю!'"), Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	
	Если ВыборкаПоШапкеДокумента.РегистрируютсяПочасовыеОтклонения И ВыборкаПоСтрокамДокумента.ЯвляетсяПочасовымОтклонением Тогда
		
		// ВидИспользованияРабочегоВремени
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан учет времени для вида расчета!';uk='не зазначений облік часу для виду розрахунку!'"), Отказ, Заголовок);
		КонецЕсли;
		
		// ОплачиватьЧасов
		Если ВыборкаПоСтрокамДокумента.ОплачиватьЧасов <= 0 Или ВыборкаПоСтрокамДокумента.ОплачиватьЧасов > 24 Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='количество оплачиваемых часов должно быть положительным и не превышать 24!';uk='кількість оплачуваних годин має бути позитивною і не перевищувати 24!'"), Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
		// Подразделение
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указано подразделение организации!';uk='не вказаний підрозділ організації!'"), Отказ, Заголовок);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='указано подразделение, принадлежащее другой организации!';uk='вказано підрозділ, що належить іншій організації!'"), Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' указанный сотрудник оформлен на другую организацию!';uk=' зазначений співробітник оформлений на іншу організацію!'"), Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);

	// Свойства
	Движение.ПериодРегистрации				= ПериодРегистрации;
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// Реквизиты
	Движение.ВидУчетаВремени				= ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.СпособРасчета, ВыборкаПоСтрокамДокумента.ВидРасчета.ВидВремени, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

// По выборке из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//	ВыборкаПоШапкеДокумента				- спозиционированная на определеной строке выборка 
//										  из результата запроса к документу 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, НаборЗаписей)
	
	Если ВыборкаПоНачислениям.ЯвляетсяПочасовымОтклонением Тогда
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период = ВыборкаПоНачислениям.ПериодДействияНачало;
		
		// Измерения
		Движение.Сотрудник							= ВыборкаПоНачислениям.Сотрудник;
		Движение.Организация						= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ВидИспользованияРабочегоВремени	= ВыборкаПоНачислениям.ВидИспользованияРабочегоВремени;
		
		// Ресурсы
		Движение.Часов								= ВыборкаПоНачислениям.ОплачиватьЧасов;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРабочегоВремени()

// Вычисляет разницу между начислениями и удержаниями работника и формирует
// движения по взаиморасчетам с работниками
//
// Параметры:
//	ВыборкаПоШапкеДокумента	- спозиционированная выборка по шапке документа
//	НаборЗаписей			- набор записей 
//	Перерасчет				- признак проведения перерасчетов, по умолчанию - Ложь
//	Физлица					- список физлиц, по которым производится расчет, по умолчанию - отсутствует
//
// Возвращаемое значение:
//	Нет.
//	
Процедура СформироватьВзаиморасчетыСРаботниками(НаборЗаписей, Сотрудники = Неопределено)
	
	Если Сотрудники = Неопределено Тогда
		Сотрудники = ОсновныеНачисления.ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;

	НачисленияРаботниковТекст = 
		"ВЫБРАТЬ
		|	ВЫБОР КОГДА Доходы.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство) 
		|         ТОГДА Доходы.Сотрудник.ОсновноеНазначение
		|         ИНАЧЕ Доходы.Сотрудник
		|	КОНЕЦ КАК Сотрудник,
		|	Доходы.Сотрудник КАК Назначение,
		|	Доходы.СчетУчета	КАК СчетУчета,
		|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основные.Сотрудник КАК Сотрудник,
		|		Основные.ВидРасчета.СчетУчета 	КАК СчетУчета,
		|		Основные.Результат КАК СуммаДохода
		|	ИЗ
		|		Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК Основные
		|	ГДЕ
		|		Основные.Ссылка = &парамСсылка
		|		И Основные.Сотрудник В (&парамСотрудники)
		|		И Основные.Результат <> 0
		|		И (НЕ Основные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме)
		|	
		|) КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Сотрудник
		|	,Доходы.СчетУчета
		|";
		
	Запрос = Новый Запрос(НачисленияРаботниковТекст);
		
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамСотрудники" , Сотрудники);
	
	Доходы = Запрос.Выполнить().Выбрать();
	// сформируем движения ВзаиморасчетыСРаботникамиОрганизаций
	Пока Доходы.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// свойства
		Движение.Период					= КонецМесяца(ПериодРегистрации);
		Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
		
		// измерения 
		Движение.Сотрудник				= Доходы.Сотрудник;
		Движение.Организация			= Организация;
		Движение.ПериодВзаиморасчетов	= ПериодРегистрации;
		Движение.СчетУчета			  	= Доходы.СчетУчета;
		
		// ресурсы
		Движение.СуммаВзаиморасчетов	= Доходы.СуммаДохода;
		
		Движение.КодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьВзаиморасчетыСРаботниками()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// получим реквизиты табличной части
			ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента).Выбрать();

			Пока ВыборкаПоНачислениям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, Движения.ОсновныеНачисленияРаботниковОрганизаций);
					ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ВнутрисменноеВремяРаботниковОрганизаций);
				КонецЕсли;
			КонецЦикла;

			////////////////////////////////////////////////////////////////////////
			// взаиморасчеты с работниками
			
			// сформируем начисления к выплате по начислениям документа
			СформироватьВзаиморасчетыСРаботниками(Движения.ВзаиморасчетыСРаботникамиОрганизаций);

			Если не ПерерассчитываемыйДокумент.Пустая() Тогда
				// выполним удаление перерасчетов перерассчитываемого документа
				НаборЗаписейПерерасчета = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
				НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = ПерерассчитываемыйДокумент;
				НаборЗаписейПерерасчета.Записать();
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ОсновныеНачисления);
	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(ОсновныеНачисления);
	
	Если ПерерассчитываемыйДокумент = Ссылка И НЕ Ссылка.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Документ не может быть исправлением самого себя!';uk='Документ не може бути виправленням самого себе!'"),Отказ);
	КонецЕсли;	
	
	Если Не ОбменДанными.Загрузка Тогда
		Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены Тогда
			ОсновныеНачисления.ЗагрузитьКолонку(ОсновныеНачисления.ВыгрузитьКолонку("ДатаНачала"),"ДатаОкончания")
		Иначе 
			Для каждого СтрокаТЧ Из ОсновныеНачисления Цикл
				СтрокаТЧ.ОплачиватьЧасов = 0
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
// Серна - Начало
	// Заблокируем возможность делать начисление самому себе
#Если Клиент Тогда
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		лТекПользователь = глЗначениеПеременной("глТекущийПользователь");
		лТекущееФизЛицо = лТекПользователь.ФизЛицо;
		Если Не ЗначениеЗаполнено(лТекПользователь) или Не ЗначениеЗаполнено(лТекущееФизЛицо) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не определен текущий пользователь или физ.лицо!", Отказ);
			Возврат;
		КонецЕсли;
		// Пробуем найти текущее физ.лицо в таблице начислений
		лДоплатаДоОтпускных = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоНаименованию("20. Доплата до відпускних");
		лОтбор = Новый Структура("Физлицо", лТекущееФизЛицо);
		лНайденныеСтроки = ОсновныеНачисления.НайтиСтроки( лОтбор );
		Для каждого лСтрока Из лНайденныеСтроки Цикл
			Если (Не лСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.МедицинскаяСтраховка) и (Не лСтрока.ВидРасчета = лДоплатаДоОтпускных) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Запрещено вводить начисления для самого себя! Строка - " + лСтрока.НомерСтроки, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
#КонецЕсли	
// Серна - Конец

КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаЗаполнения(Основание)
// Серна - Начало
	Если Не Основание = Неопределено Тогда ДокументОснование = Основание.Ссылка; КонецЕсли;
// Серна - Конец
	ТипОснования = ТипЗнч(Основание);
	
	Если ТипОснования = Тип("ДокументСсылка.ПоощрениеВзысканиеОрганизаций") Тогда
		ДокументОснование = Основание;
		ЗаполнитьДокументНаОснованииПоощренияВзыскания(Основание);		
// Серна - Начало
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПредварительныеНачисления") Тогда
		ЗаполнитьДокументНаОснованииПредварительныеНачисления(Основание);
// Серна - Конец
	КонецЕсли

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

Процедура ЗаполнитьДокументНаОснованииПоощренияВзыскания(Основание)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.УстановитьПараметр("ДатаДокумента", Основание.Дата);
	Запрос.УстановитьПараметр("ПустойГрафикРаботы", Справочники.ГрафикиРаботы.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяДолжность", Справочники.ДолжностиОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоощрениеВзысканиеОрганизаций.Сотрудник											КАК Сотрудник,
	|	ПоощрениеВзысканиеОрганизаций.Размер											КАК Размер,
	|	ЕстьNULL(РаботникиОрганизаций.ПодразделениеОрганизации, &ПустоеПодразделение)	КАК ПодразделениеОрганизации,
	|	ЕстьNULL(РаботникиОрганизаций.Должность, &ПустаяДолжность)						КАК Должность,
	|	ЕстьNULL(Работникиорганизаций.ГрафикРаботы, &ПустойГрафикРаботы)					КАК ГрафикРаботы
	|ИЗ
	|	Документ.ПоощрениеВзысканиеОрганизаций.РаботникиОрганизации 	КАК ПоощрениеВзысканиеОрганизаций
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДокумента) КАК РаботникиОрганизаций
	|ПО
	|	ПоощрениеВзысканиеОрганизаций.Сотрудник = РаботникиОрганизаций.Сотрудник
	|	И ПоощрениеВзысканиеОрганизаций.Ссылка.Организация = РаботникиОрганизаций.Организация
	|ГДЕ
	|	ПоощрениеВзысканиеОрганизаций.Ссылка = &Ссылка               
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ЗначениеЗаполнено(Основание.Организация) Тогда
		Организация = Основание.Организация;
	КонецЕсли;
	
	ПериодРегистрации = НачалоМесяца(Основание.Дата);
		
	Если ЗначениеЗаполнено(Основание.ВидПоощренияВзыскания.ВидРасчета) Тогда
		ВидРасчета = Основание.ВидПоощренияВзыскания.ВидРасчета; 
	Иначе
		ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ОсновныеНачисления.Добавить();
		НоваяСтрока.Авторасчет = Истина;
		НоваяСтрока.ВидРасчета = ВидРасчета;
		НоваяСтрока.Сотрудник = Выборка.Сотрудник;
		НоваяСтрока.Показатель1 = Выборка.Размер;	
		НоваяСтрока.ДатаНачала = НачалоМесяца(Основание.Дата);
		НоваяСтрока.ДатаОкончания = КонецМесяца(Основание.Дата);
		НоваяСтрока.БазовыйПериодНачало = НачалоМесяца(Основание.Дата);
		НоваяСтрока.БазовыйПериодКонец = КонецМесяца(Основание.Дата);
		НоваяСтрока.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
		НоваяСтрока.ГрафикРаботы = Выборка.ГрафикРаботы;		
	КонецЦикла;
	
КонецПроцедуры
Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	
КонецПроцедуры

// Серна - Начало

// СформироватьЗапросДляПечати
//
Функция СформироватьЗапросДляПечати(Режим)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	//Запрос.УстановитьПараметр("ВидРасчета",	 Дата);
	Запрос.УстановитьПараметр("Организация",	 Организация);
	
	Если Режим = "ПоРеквизитамДокумента" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК ФИОРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо КАК ДолжностьРуководителя
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних КАК ОтветственныеЛицаОрганизацийСрезПоследних";
		
	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда
		
		Запрос.УстановитьПараметр("Дата", Ссылка.Дата);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ФИОФизЛиц.Фамилия ЕСТЬ NULL 
		|			ТОГДА РегистрацияРазовыхНачисленийРаботниковОрганизацийОсновныеНачисления.Сотрудник.Наименование
		|		ИНАЧЕ ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество
		|	КОНЕЦ КАК Работник,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник.Код КАК ТабельныйНомер,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.КодПоДРФО КАК КодПоДРФО,
		|	РаботникиОрганизацийСрезПоследних.Организация.Представление КАК ПодразделениеРаботника,
		|	РегистрацияРазовыхНачисленийРаботниковОрганизацийОсновныеНачисления.ДатаНачала,
		|	РегистрацияРазовыхНачисленийРаботниковОрганизацийОсновныеНачисления.Результат КАК Величина
		|ИЗ
		|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК РегистрацияРазовыхНачисленийРаботниковОрганизацийОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛиц
		|		ПО РегистрацияРазовыхНачисленийРаботниковОрганизацийОсновныеНачисления.Сотрудник.Физлицо = ФИОФизЛиц.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних КАК РаботникиОрганизацийСрезПоследних
		|		ПО РегистрацияРазовыхНачисленийРаботниковОрганизацийОсновныеНачисления.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
		|ГДЕ
		|	РегистрацияРазовыхНачисленийРаботниковОрганизацийОсновныеНачисления.Ссылка = &ДокументСсылка"
		//|	И РегистрацияРазовыхНачисленийРаботниковОрганизацийОсновныеНачисления.ВидРасчета = &ВидРасчета"
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросДляПечати()

// ПечатьПремий
//
Процедура ПечатьПремий()Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПремииРаботниковОрганизаций_ПечатьПремий";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;   
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	
	// получаем данные для печати
	ВыборкаДляШапкиИПодвала = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();
	
	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();
	
	// запоминаем области макета
	Если Организация.Префикс = "АТ" Тогда
		Макет = ПолучитьМакет("ПечатьПремийАТ");
	Иначе
		Макет = ПолучитьМакет("ПечатьПремий");
	КонецЕсли;
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	//Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Строка"); // строка работника
	
	ВыводитьИтоги = Ложь;
	
	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	//ВыводимыеОбласти.Добавить(ОбластьИтогов);
	// выводим данные о руководителях организации
	Если ВыборкаДляШапкиИПодвала.Следующий() Тогда 
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Шапка документа.
		
		ПовторятьПриПечатиСтроки.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // "Колонтитул" страницы
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Для подвала
	КонецЕсли;
	Если Организация.Префикс = "АТ" Тогда
		лПриказ = "За високі індивідуальні результати роботи протягом " + Сред(Формат(ПериодРегистрации,"ДФ='дд ММММ гггг';Л=uk_UA"),3,15)+" року";
	Иначе
		лПриказ = "У відповідності до Положення про оплату праці, затвердженого наказом № ОД-22 від 14.12.2018 р.";
	КонецЕсли;
	лПункт1 = "1. Виплатити премію наступним працівникам:";
	Если (ОсновныеНачисления.Количество() > 1) Тогда
		лНачисление = ОсновныеНачисления[0].ВидРасчета;
		Если лНачисление = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТорговыйБонусЕжемесячный Тогда
			лПриказ = "У відповідності до Положення про оплату праці, затвердженого наказом № ОД-22 від 14.12.2018 р.";
			лПункт1 = "1. Виплатити щомісячну торгову премію наступним працівникам:";
		КонецЕсли;
	КонецЕсли;
	ОбластьМакетаШапка.Параметры.Приказ = лПриказ;
	ОбластьМакетаШапка.Параметры.Пункт1 = лПункт1;
	// Начинаем формировать выходной документ
	ОбластьМакетаШапка.Параметры.Номер=Номер;
	ДатаПрик=Формат(Дата, "ДФ='дд ММММ гггг';Л=uk_UA")+"р.";
	ОбластьМакетаШапка.Параметры.Дата=ДатаПрик;
	
	
	
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.    
	
	ВыведеноСтрок = 0;
	ПодИтогСтраницы = 0;
	ИтогДокумента = 0;
	// выводим строки по работникам
	н=0;
	Пока ВыборкаРаботники.Следующий() Цикл
		н=н+1;
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакета.Параметры.НомерПП=н;
		ОбластьМакета.Параметры.Работник = ВыборкаРаботники.Работник + ?(СокрЛП(ВыборкаРаботники.КодПоДРФО)="",""," (" +  ВыборкаРаботники.КодПоДРФО + ")");
		ТабДокумент.Вывести(ОбластьМакета);
		ПодИтогСтраницы = ПодИтогСтраницы + ВыборкаРаботники.Величина;
		ИтогДокумента = ИтогДокумента + ВыборкаРаботники.Величина;
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент,ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент,ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ПодИтогСтраницы = 0;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		
	КонецЦикла;
	ОбластьМакетаПодвал.Параметры.ИтогДокумента = ИтогДокумента;
	
	// если не было ни одного сотра - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = ОбластьМакетаШапка.ВысотаТаблицы Тогда
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	ТекстЗапроса="ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
	|ГДЕ
	|	ФИОФизЛицСрезПоследних.ФизЛицо = &ФизЛицо";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо");
	Отбор.СтруктурнаяЕдиница	= Организация;
	Отбор.ОтветственноеЛицо		= Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер;
	
	Выборка = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Дата, Отбор);
	Для Каждого Строка Из Выборка Цикл
		Если Не (Строка.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка()) Тогда  
			Запрос.УстановитьПараметр("ФизЛицо",Строка.ФизическоеЛицо);
			ВыборкаФам = Запрос.Выполнить().Выбрать();
			ВыборкаФам.Следующий();
			ГлавБух=Строка(Строка.ФизическоеЛицо) ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Объект = новый COMОбъект("Padeg_ua.Declension");
	Исключение
		Сообщить("Не загружена библиотека Padeg_ua.dll");
	Конецпопытки;
	
	ОбластьМакетаПодвал.Параметры.НадписьПодвал  ="2. Бухгалтерії здійснити розрахунки разом з заробітною платою за другу половину " 
	+ Сред(Формат(ПериодРегистрации,"ДФ='дд ММММ гггг';Л=uk_UA"),3,15) + " року.";
	ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, Дата);
	Рез = Объект.GetFIOPadegFS(ГлавБух, "", 4);	
	ОбластьМакетаПодвал.Параметры.НомерТри	="3.Відповідальність за виконання наказу покласти на головного бухгалтера "+ Рез;
	ОбластьМакетаПодвал.Параметры.ФИОРуководителя=	 ОтветственныеЛица.Руководитель;
	ТекстЗапроса="ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
	|ГДЕ
	|	ФИОФизЛицСрезПоследних.ФизЛицо = &ФизЛицо";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо");
	Отбор.СтруктурнаяЕдиница	= Организация;
	Отбор.ОтветственноеЛицо		= Перечисления.ОтветственныеЛицаОрганизаций.ФинДиректор;
	
	Выборка = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Дата, Отбор);
	Для Каждого Строка Из Выборка Цикл
		Если Не (Строка.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка()) Тогда  
			Запрос.УстановитьПараметр("ФизЛицо",Строка.ФизическоеЛицо);
			ВыборкаФам = Запрос.Выполнить().Выбрать();
			ВыборкаФам.Следующий();
			ФинДир = ВыборкаФам.Фамилия +" "+Лев(ВыборкаФам.Имя, 1)+"."+Лев(ВыборкаФам.Отчество, 1)+".";
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Организация.Префикс = "АТ" Тогда
	Иначе
		// ОбластьМакетаПодвал.Параметры.ФИОФинДир=	ФинДир ;
	КонецЕсли;
	
	
	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, , ,ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Премии "));
	
	
КонецПроцедуры// ПечатьПечатьПремий()

// ЗаполнитьДокументНаОснованииПредварительныеНачисления
//
Процедура ЗаполнитьДокументНаОснованииПредварительныеНачисления(Основание, ДатаТекущая = Неопределено) Экспорт
	Если ДатаТекущая = Неопределено Тогда ДатаТекущая = ТекущаяДата(); КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.УстановитьПараметр("ДатаДокумента", Основание.Дата);
	Запрос.УстановитьПараметр("ДатаДляКурса", ?(ЗначениеЗаполнено(Основание.Выплачено), Основание.Выплачено, Основание.Дата ) );
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокТЧ.Ссылка.ВидРасчета КАК ВидРасчета,
	|	ДокТЧ.Сотрудник,
	|	ДокТЧ.ДатаНачисления,
	|	ДокТЧ.Валюта,
	|	СУММА(ДокТЧ.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ДокТЧ
	|ИЗ
	|	Документ.ПредварительныеНачисления.ОсновныеНачисления КАК ДокТЧ
	|ГДЕ
	|	ДокТЧ.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТЧ.Ссылка.ВидРасчета,
	|	ДокТЧ.Валюта,
	|	ДокТЧ.Сотрудник,
	|	ДокТЧ.ДатаНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Курсы.Кратность = 0
	|				ТОГДА Курсы.Курс
	|			ИНАЧЕ Курсы.Курс / Курсы.Кратность
	|		КОНЕЦ) КАК Курс
	|ПОМЕСТИТЬ Курсы
	|ИЗ
	|	РегистрСведений.КурсыВалютДляРасчетовСПерсоналом.СрезПоследних(&ДатаДляКурса, Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.Доллар)) КАК Курсы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Авторасчет,
	|	ДокТЧ.ВидРасчета,
	|	ДокТЧ.Сотрудник КАК Сотрудник,
	|	ДокТЧ.Сумма КАК Показатель1,
	|	ДокТЧ.Валюта,
	|	ВЫБОР
	|		КОГДА ДокТЧ.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.Доллар)
	|				И НЕ Курсы.Курс ЕСТЬ NULL
	|				И НЕ Курсы.Курс = 0
	|			ТОГДА ВЫРАЗИТЬ(ДокТЧ.Сумма * Курсы.Курс КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ДокТЧ.Сумма
	|	КОНЕЦ КАК Результат,
	|	НАЧАЛОПЕРИОДА(ДокТЧ.ДатаНачисления, МЕСЯЦ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(ДокТЧ.ДатаНачисления, МЕСЯЦ) КАК ДатаОкончания,
	|	НАЧАЛОПЕРИОДА(ДокТЧ.ДатаНачисления, МЕСЯЦ) КАК БазовыйПериодНачало,
	|	КОНЕЦПЕРИОДА(ДокТЧ.ДатаНачисления, МЕСЯЦ) КАК БазовыйПериодКонец,
	|	ЕСТЬNULL(РаботникиОрганизаций.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ПодразделениеОрганизации,
	|	ЕСТЬNULL(РаботникиОрганизаций.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)) КАК Должность,
	|	ЕСТЬNULL(РаботникиОрганизаций.ГрафикРаботы, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)) КАК ГрафикРаботы
	|ИЗ
	|	ДокТЧ КАК ДокТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК РаботникиОрганизаций
	|		ПО ДокТЧ.Сотрудник = РаботникиОрганизаций.Сотрудник,
	|	Курсы КАК Курсы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ЗначениеЗаполнено(Основание.Организация) Тогда
		Организация = Основание.Организация;
	КонецЕсли;
	
	ПериодРегистрации = НачалоМесяца(ТекущаяДата());
	ВидРасчета = Основание.ВидРасчета; 
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДокументНаОснованииПредварительныеНачисления

// ЗаполнитьДокументНаОснованииКомандировкиОрганизаций
//
Процедура ЗаполнитьДокументНаОснованииКомандировкиОрганизаций(Основание, ДатаТекущая = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.УстановитьПараметр("ДатаДокумента", Основание.Дата);
	Запрос.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоНаименованию( "23. Доплата до средньоденного (відрядження)" ));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокТЧ.ФизЛицо,
	|	ДокТЧ.Сотрудник,
	|	1 КАК Признак,
	|	ДокТЧ.ДатаНачала,
	|	ДокТЧ.ДатаОкончания
	|ПОМЕСТИТЬ ДокТЧ
	|ИЗ
	|	Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК ДокТЧ
	|ГДЕ
	|	ДокТЧ.Ссылка = &Ссылка
	|	И НАЧАЛОПЕРИОДА(ДокТЧ.ДатаНачала, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ДокТЧ.ДатаОкончания, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокТЧ.ФизЛицо,
	|	ДокТЧ.Сотрудник,
	|	2,
	|	ДокТЧ.ДатаНачала,
	|	КОНЕЦПЕРИОДА(ДокТЧ.ДатаНачала, МЕСЯЦ)
	|ИЗ
	|	Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК ДокТЧ
	|ГДЕ
	|	ДокТЧ.Ссылка = &Ссылка
	|	И НЕ НАЧАЛОПЕРИОДА(ДокТЧ.ДатаНачала, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ДокТЧ.ДатаОкончания, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокТЧ.ФизЛицо,
	|	ДокТЧ.Сотрудник,
	|	3,
	|	НАЧАЛОПЕРИОДА(ДокТЧ.ДатаОкончания, МЕСЯЦ),
	|	ДокТЧ.ДатаОкончания
	|ИЗ
	|	Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК ДокТЧ
	|ГДЕ
	|	ДокТЧ.Ссылка = &Ссылка
	|	И НЕ НАЧАЛОПЕРИОДА(ДокТЧ.ДатаНачала, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ДокТЧ.ДатаОкончания, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ВидРасчета КАК ВидРасчета,
	|	ДокТЧ.ФизЛицо КАК ФизЛицо,
	|	ДокТЧ.Сотрудник КАК Сотрудник,
	|	ДокТЧ.Признак КАК Признак,
	|	ДокТЧ.ДатаНачала КАК ДатаНачала,
	|	ДокТЧ.ДатаОкончания КАК ДатаОкончания,
	|	НАЧАЛОПЕРИОДА(ДокТЧ.ДатаНачала, МЕСЯЦ) КАК БазовыйПериодНачало,
	|	КОНЕЦПЕРИОДА(ДокТЧ.ДатаНачала, МЕСЯЦ) КАК БазовыйПериодКонец,
	|	ИСТИНА КАК Авторасчет,
	|	ЕСТЬNULL(РаботникиОрганизаций.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ПодразделениеОрганизации,
	|	ЕСТЬNULL(РаботникиОрганизаций.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)) КАК Должность,
	|	ЕСТЬNULL(РаботникиОрганизаций.ГрафикРаботы, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)) КАК ГрафикРаботы
	|ИЗ
	|	ДокТЧ КАК ДокТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК РаботникиОрганизаций
	|		ПО ДокТЧ.Сотрудник = РаботникиОрганизаций.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	Сотрудник,
	|	Признак,
	|	ДатаНачала
	|";
	лтзРез = Запрос.Выполнить().Выгрузить();
	
	ПериодРегистрации = НачалоМесяца(Основание.Дата);
	ОсновныеНачисления.Очистить();
	ОсновныеНачисления.Загрузить( лтзРез );
	Для каждого СтрокаТабличнойЧасти Из ОсновныеНачисления Цикл
		ОснНазначение = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сотрудник.ОсновноеНазначение), СтрокаТабличнойЧасти.Сотрудник.ОсновноеНазначение, СтрокаТабличнойЧасти.Сотрудник);
		ПроведениеРасчетов.ПроставитьДанныеСтроки(ОснНазначение, СтрокаТабличнойЧасти.Сотрудник, СтрокаТабличнойЧасти.ДатаНачала, ПериодРегистрации, СтрокаТабличнойЧасти.ВидРасчета, СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДокументНаОснованииКомандировкиОрганизаций

// Серна - Конец
