////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Список доступных для начисления способов расчета
Перем мСписокДоступныхСпособовРасчета;

Перем мСведенияОВидахРасчетаОснНачислений;
Перем мСведенияОВидахРасчетаДопНачислений;

Перем мСписокКодовВычетов;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит "Результат" текущей строки
Перем мСтарыйРезультат;
// Хранит "ОтработаноДней" текущей строки
Перем мБылоОтработаноДней;
// Хранит "ОтработаноЧасов" текущей строки
Перем мБылоОтработаноЧасов;
// Хранит "ОтработаноДнейПоПятидневке" текущей строки
Перем мБылоОтработаноДнейПоПятидневке;
// Хранит "ОтработаноЧасовПоПятидневке" текущей строки
Перем мБылоОтработаноЧасовПоПятидневке;
// Хранит "НормаДней" текущей строки
Перем мБылоНормаДней;
// Хранит "НормаЧасов" текущей строки
Перем мБылоНормаЧасов;
// Хранит "НормаДнейПоПятидневке" текущей строки
Перем мБылоНормаДнейПоПятидневке;
// Хранит "НормаЧасовПоПятидневке" текущей строки
Перем мБылоНормаЧасовПоПятидневке;
// Хранит "ОплаченоДнейЧасов" текущей строки
Перем мБылоОплаченоДнейЧасов;

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;

// Хранит имя табличного поля для заполнения списком сотрудников
Перем мИмяЗаполняемойТаблицы;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

// Механизм исправлений
Перем мДокументыИсправление;
Перем мДокументСторнирование;
Перем мСотрудникиИсправление;
Перем мМенюИсправление;
Перем мКнопкаИсправлениеТекущийСотрудник;
Перем мКнопкаИсправлениеВесьДокумент;
Перем мКнопкаИсправлениеСписокСотрудников;
Перем мКнопкаОтменаИсправление;
Перем мТекущийСотрудник;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура имен и значений параметров.
//
Функция ПолучитьСтруктуруПараметровТайпинга(ИмяЭУ)
	
	Если ИмяЭУ = "КодВычета" Тогда
		
		СтруктураПараметров = Новый Структура("Ссылка", мСписокКодовВычетов);
		
		
	ИначеЕсли ИмяЭУ = "ОсновныеНачисления" Тогда
		
		МассивВидовВремени = Новый СписокЗначений;
	    Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены Тогда
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеСверхНормы);
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
		Иначе
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеНеотработанное);
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура("ВидВремени, СпособРасчета", МассивВидовВремени, мСписокДоступныхСпособовРасчета);

	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьСтруктуруПараметровТайпинга()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеНачисления,ЭлементыФормы.КоманднаяПанельОсновныеНачисления);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

// Удаляет кнопку из набора кнопок, если она существует
//
Процедура УдалитьКнопкуИзНабора(ИмяКнопки, НаборКнопок)

	Кнопка = НаборКнопок.Найти(ИмяКнопки);
	Если Кнопка <> Неопределено Тогда
		НаборКнопок.Удалить(НаборКнопок.Индекс(Кнопка));
	КонецЕсли;

КонецПроцедуры // УдалитьКнопкуИзНабора()

// Управляет видимостью элементов формы, зависящих от наличия перерассчитываемого документа
//
Процедура ОбновитьВидимостьПоПерерассчитываемомуДокументу(ЭтоПерерасчет)
	
	// Заполнение команд подменю "Заполнить"
	КнопкиЗаполнить = ЭлементыФормы.ДействияФормы.Кнопки.ПодменюЗаполнить.Кнопки;
	ДействиеПоКнопке = Новый Действие("ДействияФормыЗаполнить");
	Если ЭтоПерерасчет Тогда
		УдалитьКнопкуИзНабора("НачисленияСписокРаботников", КнопкиЗаполнить);
		Если КнопкиЗаполнить.Найти("ПоПерерассчитываемомуДокументу") = Неопределено Тогда
			КнопкиЗаполнить.Вставить(0, "ПоПерерассчитываемомуДокументу",ТипКнопкиКоманднойПанели.Действие,НСтр("ru='По перерассчитываемому документу';uk='По документу, що перераховується'"), ДействиеПоКнопке);
		КонецЕсли;
	Иначе
		УдалитьКнопкуИзНабора("ПоПерерассчитываемомуДокументу", КнопкиЗаполнить);
		Если КнопкиЗаполнить.Найти("НачисленияСписокРаботников") = Неопределено Тогда
			КнопкиЗаполнить.Вставить(0, "НачисленияСписокРаботников",ТипКнопкиКоманднойПанели.Действие,НСтр("ru='Начисления списком работников';uk='Нарахування списком працівників'"), ДействиеПоКнопке);			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ТолькоПросмотр Тогда
		ЭлементыФормы.СпособРегистрацииВремениДляЦелойСмены.Доступность = Не ЭтоПерерасчет;
		ЭлементыФормы.СпособРегистрацииВремениДляЧастиСмены.Доступность = Не ЭтоПерерасчет;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьВидимостьПоПерерассчитываемомуДокументу()

// Управляет видиммостью элементов формы, зависящих от способа регистрации времени
Процедура ОбновитьВидимостьПоСпособуРегистрацииВремени()
	ЭтоЦелосменноеНачисление = СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
	ЭлементыФормы.ОсновныеНачисления.Колонки.ДатаОкончания.Видимость = ЭтоЦелосменноеНачисление;
	ЭлементыФормы.ОсновныеНачисления.Колонки.ДатаОкончания.ИзменятьВидимость = ЭтоЦелосменноеНачисление;
	ЭлементыФормы.ОсновныеНачисления.Колонки.ОплачиватьЧасов.Видимость = Не ЭтоЦелосменноеНачисление;
	ЭлементыФормы.ОсновныеНачисления.Колонки.ОплачиватьЧасов.ИзменятьВидимость = Не ЭтоЦелосменноеНачисление;
КонецПроцедуры // ОбновитьВидимостьПоСпособуРегистрацииВремени

Процедура ОбновитьОписаниеСостоянияДокумента()

	// связанные документы
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	Сторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	НеЗаполнен = Не ЗначениеЗаполнено(Организация) Или (ОсновныеНачисления.Количество() = 0);
	
	ЗаполненСОшибками = ОсновныеНачисления.НайтиСтроки(Новый Структура("Сотрудник",Справочники.СотрудникиОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или ОсновныеНачисления.НайтиСтроки(Новый Структура("ВидРасчета",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка())).Количество() > 0;
	
	СтруктураРезультата = Новый Структура("Результат, Сторно",0,Ложь);
	СтруктураНовыхЗаписей = Новый Структура("Сторно",Ложь);
	НеРассчитан = ОсновныеНачисления.НайтиСтроки(СтруктураРезультата).Количество() = ОсновныеНачисления.НайтиСтроки(СтруктураНовыхЗаписей).Количество() И ОсновныеНачисления.НайтиСтроки(СтруктураНовыхЗаписей).Количество() > 0;
	
	ОписаниеСостоянияДокумента = РаботаСДиалогами.ПолучитьОписаниеРасчетногоДокумента(Не НеЗаполнен,ЗаполненСОшибками,Не НеРассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Сторнирован, ТолькоПросмотр,Ложь,Ложь); // поля структуры описания - ТекстСообщения и ВажностьСообщения
	РаботаСДиалогами.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

Процедура ОбновитьТекущегоСотрудника()

	ТекущиеДанные	= ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ТекущийСотрудник = ТекущиеДанные.Сотрудник;
	Иначе
		ТекущийСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	ПолучитьСотрудниковСИсправлениями();
	
	// Установим имя и доступность кнопки ТекущийСотрудник механизма исправлений
	Если ЭлементыФормы.ДополнительныеДействия.Кнопки.Найти("Исправить") <> Неопределено И мТекущийСотрудник <> ТекущийСотрудник Тогда
		РаботаСДиалогами.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(ТекущийСотрудник),ТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник)
	КонецЕсли;
	
	мТекущийСотрудник = ТекущийСотрудник;

КонецПроцедуры

Процедура ПолучитьСотрудниковСИсправлениями()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазовыеНачисления.Сотрудник
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК РазовыеНачисления
	|ГДЕ
	|	РазовыеНачисления.Ссылка В(&Исправления)
	|	И РазовыеНачисления.Сторно
	|	И РазовыеНачисления.СторнируемыйДокумент = РазовыеНачисления.Ссылка.ПерерассчитываемыйДокумент
	|";

	мСотрудникиИсправление = ПроведениеРасчетов.СформироватьСоответствиеСотрудниковСИсправлениями(ТекстЗапроса, мДокументыИсправление);
	

	
КонецПроцедуры

Процедура УстановитьКнопкиИсправленияДокумента(ДокументИсправлен = Неопределено, ИсправленВесьДокумент = Неопределено, ДокументСторнирован = Неопределено)
	
	Если ДокументИсправлен = Неопределено Тогда
		ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	КонецЕсли;
	Если ДокументСторнирован = Неопределено Тогда
		ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	КонецЕсли;
	
	Если ИсправленВесьДокумент = Неопределено Тогда
		ИсправленВесьДокумент = ДокументИсправлен;
		Если ИсправленВесьДокумент Тогда
			Для каждого СтрокаТЧ Из ОсновныеНачисления Цикл
				ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
				Если Не ИсправленВесьДокумент Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументСторнирован Или ПериодРегистрации >= НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
		ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	Иначе 
		
		Кнопки = ЭлементыФормы.ДополнительныеДействия.Кнопки;
		Если Кнопки.Количество() = 0 Тогда
			МенюИсправить = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Подменю);
			ЗаполнитьЗначенияСвойств(МенюИсправить, мМенюИсправление);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеТекущийСотрудник.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеТекущийСотрудник);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеВесьДокумент.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеВесьДокумент);
			МенюИсправить.Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеСписокСотрудников.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеСписокСотрудников);
		КонецЕсли;
		Кнопки.Исправить.Кнопки.ТекущийСотрудник.Доступность = Не ИсправленВесьДокумент;
		Кнопки.Исправить.Кнопки.ВесьДокумент.Доступность = Не ДокументИсправлен;
		Кнопки.Исправить.Кнопки.СписокСотрудников.Доступность = Не ИсправленВесьДокумент;
			
		Если Кнопки.Количество() = 1 И ДокументИсправлен Тогда
			Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаОтменаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаОтменаИсправление);
		ИначеЕсли Кнопки.Количество() > 1 И Не ДокументИсправлен Тогда
			Кнопки.Удалить(Кнопки.ОтменитьИсправление);
			Кнопки.Удалить(Кнопки.Разделитель);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДоступностьЭлементовФормы()
	
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	ИсправленВесьДокумент = ДокументИсправлен;
	Если ИсправленВесьДокумент Тогда
		Для каждого СтрокаТЧ Из ОсновныеНачисления Цикл
			ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
			Если Не ИсправленВесьДокумент Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если ДокументИсправлен Или ДокументСторнирован Тогда
		ТолькоПросмотр = Истина
	Иначе 	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	ЭлементыФормы.Организация.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
	
	УстановитьКнопкиИсправленияДокумента(ДокументИсправлен, ИсправленВесьДокумент, ДокументСторнирован);
	
	ЭлементыФормы.ПанельОткрытьИсправление.Свертка = ?(ДокументИсправлен Или ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.ПанельОткрытьИсходный.Свертка = ?(ЭтоИсправление И Не ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.НадписьОткрытьИсправление.Заголовок = ?(ДокументСторнирован,НСтр("ru='Открыть сторно-документ';uk='Відкрити сторно-документ'"),НСтр("ru='Открыть исправления';uk='Відкрити виправлення'"));
	
	Если Не ТолькоПросмотр Тогда
		МожноЗаполнять = Не ЭтоИсправление;
		СоставМенюЗаполнить = ЭлементыФормы.ДействияФормы.Кнопки.ПодменюЗаполнить.Кнопки;
		Для каждого Кнопка Из СоставМенюЗаполнить Цикл
			Если Кнопка.ТипКнопки <> ТипКнопкиКоманднойПанели.Разделитель Тогда
				Кнопка.Доступность = МожноЗаполнять
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
// Серна - Начало
	ЭлементыФормы.ОсновныеНачисления.Колонки.Авторасчет.ТолькоПросмотр = Истина;
// Серна - Конец
	
КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если Не ЭтоНовый() Тогда
		мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
		мДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
		ОбновитьОписаниеСостоянияДокумента();
		Если ЗначениеЗаполнено(мДокументыИсправление) Тогда
			ПолучитьСотрудниковСИсправлениями();
		КонецЕсли;
	Иначе
		РаботаСДиалогами.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, НСтр("ru='Документ не заполнен';uk='Документ не заповнений'"), "СообщениеОПроблемах");
	КонецЕсли;

	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		Если СпособРегистрацииВремени.Пустая() Тогда
			СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
		КонецЕсли;
	Иначе 
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("Сотрудник");
	//СтруктураКолонок.Вставить("ПодразделениеОрганизации");
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ДатаОкончания");
	СтруктураКолонок.Вставить("Показатель1");

	// Установить ограничение - изменять видимость колонок для табличной части ОсновныеНачисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ОсновныеНачисления.Колонки, СтруктураКолонок);
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
// Серна - Начало
	// Установим видимость реквизита "Приказ"
	РаботаСДиалогами.УстановитьВидимостьПриказа(ЭтаФорма,Организация,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"));
// Серна - Конец
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	// Установим видимость в зависимости от наличия перерассчитываемого документа
	ОбновитьВидимостьПоПерерассчитываемомуДокументу(Не ПерерассчитываемыйДокумент.Пустая());
	
	// Установим видимость в зависимости от значения способа регистрации времени
	ОбновитьВидимостьПоСпособуРегистрацииВремени();
	
	СписокНеДоступныхСпособовРасчета = Новый СписокЗначений;
	 
	СписокНеДоступныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	СписокНеДоступныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	СписокНеДоступныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	СписокНеДоступныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыРасчетаОплатыТруда.Ссылка
	|ИЗ
	|	Перечисление.СпособыРасчетаОплатыТруда КАК СпособыРасчетаОплатыТруда
	|ГДЕ
	|	(НЕ СпособыРасчетаОплатыТруда.Ссылка В (&Ссылка))";
	Запрос.УстановитьПараметр("Ссылка", СписокНеДоступныхСпособовРасчета);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		мСписокДоступныхСпособовРасчета.Добавить(Выборка.Ссылка);
	КонецЦикла;

	// Установить активный реквизит.
	//Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
	//	Если ОсновныеНачисления.Количество() > 0 Тогда
	//		ТекущийЭлемент = ЭлементыФормы.ОсновныеНачисления;
	//	ИначеЕсли ДополнительныеНачисления.Количество() > 0 Тогда
	//		ТекущийЭлемент = ЭлементыФормы.ДополнительныеНачисления;
	//	Иначе 	
	//		ТекущийЭлемент = ЭлементыФормы.ОсновныеНачисления;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	// Исправление документов
	мМенюИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить;
	мКнопкаИсправлениеТекущийСотрудник = мМенюИсправление.Кнопки.ТекущийСотрудник;
	мКнопкаИсправлениеВесьДокумент = мМенюИсправление.Кнопки.ВесьДокумент;
	мКнопкаИсправлениеСписокСотрудников = мМенюИсправление.Кнопки.СписокСотрудников;
	мКнопкаОтменаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление;
	ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	
	// Установим видимость в зависимости от наличия перерассчитываемого документа
	ОбновитьДоступностьЭлементовФормы();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";  Реквизиты = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда			
			ВременнаяТаблица = ЗначениеВыбора.Данные.Выгрузить();
			
			Если мИмяЗаполняемойТаблицы = "ОсновныеНачисления" Тогда
				
				Если ЗначениеВыбора.Свойство("Реквизиты",Реквизиты) Тогда
					РеквизитыТЧ = ЭтотОбъект.Метаданные().ТабличныеЧасти.ОсновныеНачисления.Реквизиты;
					
					Для Каждого Значение Из Реквизиты Цикл
						Если РеквизитыТЧ.Найти(Значение.Ключ) <> Неопределено Тогда
							ВременнаяТаблица.Колонки.Добавить(Значение.Ключ); 
							ВременнаяТаблица.ЗаполнитьЗначения(Значение.Значение,Значение.Ключ);
						КонецЕсли;
					КонецЦикла;
					
					ВременнаяТаблица.Колонки.Добавить("ДатаНачалаСобытия"); 
					ВременнаяТаблица.ЗаполнитьЗначения(Реквизиты.ДатаНачала,"ДатаНачалаСобытия");
				КонецЕсли;
				ВременнаяТаблица.Колонки.Добавить("Авторасчет");
				ВременнаяТаблица.ЗаполнитьЗначения(Истина,"Авторасчет");
				Для Каждого ТекСтрока из ВременнаяТаблица Цикл
					ТекСтрока.ДатаНачала = Макс(ТекСтрока.ДатаНачала,ТекСтрока.ДатаПриема)
				КонецЦикла;	
				ОсновныеНачисления.Загрузить(ВременнаяТаблица);
				
				Если ЗначениеВыбора.Реквизиты.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
					Для Каждого ТекСтрока из ОсновныеНачисления Цикл
						ОснНазначение = ?(ЗначениеЗаполнено(ТекСтрока.Сотрудник.ОсновноеНазначение), ТекСтрока.Сотрудник.ОсновноеНазначение, ТекСтрока.Сотрудник);
						ПроведениеРасчетов.ПроставитьДанныеСтроки(ОснНазначение, ТекСтрока.Сотрудник, Дата, ПериодРегистрации, ТекСтрока.ВидРасчета, ТекСтрока);
					КонецЦикла;	
				КонецЕсли;	
				
			КонецЕсли;
			мИмяЗаполняемойТаблицы = "";
		ИначеЕсли ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ЗаполнитьДокументИсправление" Тогда
			РаботаСДиалогами.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, ЗначениеВыбора.ВыбранныеСотрудники);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// оповестим исходный, исправляемый документ
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		Оповестить("ОбновитьФорму", Новый Структура("Команда, Объект","ДоступностьИсправленногоДокумента", ПерерассчитываемыйДокумент), Ссылка);
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму" И Не ЭтоНовый() Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Команда = "ДоступностьИсправленногоДокумента" Тогда
					Если Параметр.Объект = Ссылка И мДокументыИсправление.Найти(Источник) = Неопределено Тогда 
						мДокументыИсправление.Добавить(Источник);
						ПолучитьСотрудниковСИсправлениями();
						ОбновитьДоступностьЭлементовФормы();
						РаботаСДиалогами.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(мТекущийСотрудник),мТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник);
					КонецЕсли;
				ИначеЕсли Команда = "ДоступностьОтмененногоДокумента" Тогда
					Если Параметр.Объект = Ссылка Тогда
						Если мДокументСторнирование <> Источник Тогда
							мДокументСторнирование = Источник;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
						НовыйДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
						Если мДокументСторнирование <> НовыйДокументСторнирование Тогда
							мДокументСторнирование = НовыйДокументСторнирование;
							Если Не ЗначениеЗаполнено(мДокументСторнирование) Тогда
								РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
							КонецЕсли;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					КонецЕсли;
				Иначе
				КонецЕсли;
			Иначе
			КонецЕсли;
			
		Иначе
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ОбработкаОповещения

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если ОсновныеНачисления.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Заполнить?';uk='Перед заповненням табличні частини будуть очищені. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		ОсновныеНачисления.Очистить();
	КонецЕсли;

	Если Кнопка.Имя = "НачисленияСписокРаботников" Тогда
		мИмяЗаполняемойТаблицы = "ОсновныеНачисления";
		Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены Тогда
			ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, ПериодРегистрации, , Организация, , , ,"РазовыеРасчеты", Новый Структура("ВидРасчета,Показатель1,ДатаНачала,ДатаОкончания, БазовыйПериодНачало, БазовыйПериодКонец",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка(),0, ПериодРегистрации,КонецМесяца(ПериодРегистрации), ПериодРегистрации,КонецМесяца(ПериодРегистрации)));
		Иначе
			ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, ПериодРегистрации, , Организация, , , ,"РазовыеРасчетыДляЧастиСмены", Новый Структура("ВидРасчета,Показатель1,ДатаНачала,ОплачиватьЧасов",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка(),0,Дата(1,1,1),0));
		КонецЕсли;
	ИначеЕсли Кнопка.Имя = "ПоПерерассчитываемомуДокументу" Тогда
		Если Не ЗаполнитьПоПерерассчитываемомуДокументу(ПерерассчитываемыйДокумент) Тогда
			Сообщить(НСтр("ru='Нет необходимости перерассчитывать заданный документ. Для получения списка документов, подлежащих перерасчету, необходимо использовать: пункт Перерасчет зарплаты меню Расчет зарплаты';uk='Немає необхідності перерозраховувати заданий документ. Для отримання списку документів, що підлягають перерахунку, необхідно використовувати: пункт Перерахунок зарплати меню Розрахунок зарплати'"));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДействияФормыЗаполнить()

// Процедура-обработчик события нажатия кнопки "Рассчитать"
//
Процедура ДействияФормыРассчитать(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;   
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьНачисления();
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ДанныеСтроки = ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		мСтарыйРезультат				= ДанныеСтроки.Результат;
		мБылоОтработаноДней				= ДанныеСтроки.ОтработаноДней;
		мБылоОтработаноЧасов			= ДанныеСтроки.ОтработаноЧасов;
		//мБылоОтработаноДнейПоПятидневке	= ДанныеСтроки.ОтработаноДнейПоПятидневке;
		мБылоНормаДней					= ДанныеСтроки.НормаДней;
		мБылоНормаЧасов					= ДанныеСтроки.НормаЧасов;
		//мБылоНормаДнейПоПятидневке		= ДанныеСтроки.НормаДнейПоПятидневке;
		мБылоОплаченоДнейЧасов			= ДанныеСтроки.ОплаченоДнейЧасов;
	КонецЕсли;
	
	
КонецПроцедуры // ДействияФормыРассчитать()

Процедура ДействияФормыБезНалогов(Кнопка)

	Док = Документы.ЗарплатаКВыплатеОрганизаций.СоздатьДокумент();
	Док.Заполнить(Новый Структура("Ссылка,СпособРасчета",Ссылка,"ЗаВычетомНалога"));
	Док.ПолучитьФорму().Открыть();
	
КонецПроцедуры // ДействияФормыБезНалогов()

Процедура ДействияФормыСНалогами(Кнопка)
	
	Док = Документы.ЗарплатаКВыплатеОрганизаций.СоздатьДокумент();
	Док.Заполнить(Новый Структура("Ссылка,СпособРасчета",Ссылка,"ВсяНачисленнаяСумма"));
	Док.ПолучитьФорму().Открыть();
	
КонецПроцедуры // ДействияФормыСНалогами()


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельОсновныеНачисленияПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.ОсновныеНачисления, Ссылка, Ложь, Дата, Организация, 1);
	
КонецПроцедуры // КоманднаяПанельОсновныеНачисленияПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики
	РаботаСДиалогами.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
КонецПроцедуры // ПериодРегистрацииПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	// Установим видимость в зависимости от наличия перерассчитываемого документа
	ОбновитьДоступностьЭлементовФормы();

	УстановитьКнопкиИсправленияДокумента();
	
КонецПроцедуры // ПериодРегистрацииРегулирование()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодРегистрацииОчистка()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
КонецПроцедуры // ПериодРегистрацииНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода перерассчитываемого документа.
//
Процедура ПерерассчитываемыйДокументПриИзменении(Элемент)
	
	ЭтоПерерасчет = Не ПерерассчитываемыйДокумент.Пустая();
	ОбновитьВидимостьПоПерерассчитываемомуДокументу(ЭтоПерерасчет);
	Если ЭтоПерерасчет Тогда // Копируем реквизиты документа
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ПерерассчитываемыйДокумент,"СпособРегистрацииВремени");
		ОбновитьВидимостьПоСпособуРегистрацииВремени();
	КонецЕсли;
	
КонецПроцедуры // ПерерассчитываемыйДокументПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода перерассчитываемого документа.
//
Процедура ПерерассчитываемыйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)

	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораПерерассчитываемогоДокумента(Элемент, СтандартнаяОбработка, ДокументОбъект);
	
КонецПроцедуры // ПерерассчитываемыйДокументНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" пееречисления СпособРегистрацииВремени
//
Процедура СпособРегистрацииВремениПриИзменении(Элемент)
	
	ОбновитьВидимостьПоСпособуРегистрацииВремени();
	
КонецПроцедуры

Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	Если ЗначениеЗаполнено(мДокументыИсправление) Тогда
		Форма = КритерииОтбора.ДокументыИсправления.ПолучитьФорму(, ЭтаФорма);
		Форма.ИсходныйДокумент = Ссылка;
		Форма.Открыть();
	ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
		мДокументСторнирование.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ПерерассчитываемыйДокумент.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

// Процедура - обработчик оповещения о выборе, присланного формой подбора из спр-ка Сотрудники
//
Процедура ОсновныеНачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ОсновныеНачисления.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		СтрокаТабличнойЧасти = ОсновныеНачисления.Добавить();
		СтрокаТабличнойЧасти.Сотрудник	= ВыбранноеЗначение;
		СтрокаТабличнойЧасти.ФизЛицо	= ВыбранноеЗначение.ФизЛицо;
		Если СтрокаТабличнойЧасти.Сотрудник.ДатаПриемаНаРаботу <> Дата('00010101') и СтрокаТабличнойЧасти.Сотрудник.ДатаПриемаНаРаботу > ПериодРегистрации Тогда
			СтрокаТабличнойЧасти.ДатаНачала = СтрокаТабличнойЧасти.Сотрудник.ДатаПриемаНаРаботу;
		Иначе	
			СтрокаТабличнойЧасти.ДатаНачала = ПериодРегистрации;
		КонецЕсли;

		СтрокаТабличнойЧасти.ДатаОкончания = КонецМесяца(ПериодРегистрации);
		СтрокаТабличнойЧасти.БазовыйПериодНачало = ПериодРегистрации;
		СтрокаТабличнойЧасти.БазовыйПериодКонец	= КонецМесяца(ПериодРегистрации);
		СтрокаТабличнойЧасти.Авторасчет	= Истина;
		
		ЭлементыФормы.ОсновныеНачисления.ТекущаяСтрока = СтрокаТабличнойЧасти;
		
		ОснНазначение = ?(ЗначениеЗаполнено(ВыбранноеЗначение.ОсновноеНазначение), ВыбранноеЗначение.ОсновноеНазначение, ВыбранноеЗначение);
		ПроведениеРасчетов.ПроставитьДанныеСтроки(ОснНазначение, ВыбранноеЗначение, Дата, ПериодРегистрации, СтрокаТабличнойЧасти.ВидРасчета, СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияОбработкаВыбора()

// Процедура - обработчик события "ПриВыводеСтроки" ТЧ
//
Процедура ОсновныеНачисленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки.Сторно Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);

	ИначеЕсли ДанныеСтроки.Сотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(51, 51, 153);
	
	ИначеЕсли ДанныеСтроки.Сотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(0, 128, 128);
		
	КонецЕсли;
	
    РаботаСДиалогами.ПриВыводеСтрокиНачисленийИУдержаний(ДанныеСтроки, ОформлениеСтроки, мСведенияОВидахРасчетаОснНачислений);
	
КонецПроцедуры // ОсновныеНачисленияПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ
//
Процедура ОсновныеНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина;
		
		ТекущаяСтрока = ЭлементыФормы.ОсновныеНачисления.ТекущаяСтрока;
		ТекущаяСтрока.ДатаНачала			= НачалоМесяца(ПериодРегистрации);
		ТекущаяСтрока.ДатаОкончания			= КонецМесяца(ПериодРегистрации);
		ТекущаяСтрока.БазовыйПериодНачало	= НачалоМесяца(ПериодРегистрации);
		ТекущаяСтрока.БазовыйПериодКонец	= КонецМесяца(ПериодРегистрации);
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияПриНачалеРедактирования()

Процедура ОсновныеНачисленияДатаНачалаПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ОсновныеНачисления.ТекущаяСтрока;
		
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДатаНачала) Тогда
		ТекущаяСтрока.ДатаНачала = ПериодРегистрации;
		ТекущаяСтрока.ДатаОкончания	= КонецМесяца(ПериодРегистрации);
	Иначе
		ТекущаяСтрока.ДатаОкончания			= Макс(КонецМесяца(ТекущаяСтрока.ДатаНачала), Мин(КонецМесяца(ТекущаяСтрока.ДатаНачала), ТекущаяСтрока.ДатаОкончания));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.БазовыйПериодНачало) 
		ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.БазовыйПериодКонец)
		Тогда
		ТекущаяСтрока.БазовыйПериодНачало	= ТекущаяСтрока.ДатаНачала;
		ТекущаяСтрока.БазовыйПериодКонец	= ТекущаяСтрока.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеНачисленияДатаОкончанияПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ОсновныеНачисления.ТекущаяСтрока;
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДатаОкончания) Тогда
		ТекущаяСтрока.ДатаНачала = ПериодРегистрации;
		ТекущаяСтрока.ДатаОкончания	= КонецМесяца(ПериодРегистрации);
	Иначе
		ТекущаяСтрока.ДатаНачала			= Мин(ТекущаяСтрока.ДатаНачала, ТекущаяСтрока.ДатаОкончания);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.БазовыйПериодНачало) 
		ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.БазовыйПериодКонец)
		Тогда
		ТекущаяСтрока.БазовыйПериодНачало	= ТекущаяСтрока.ДатаНачала;
		ТекущаяСтрока.БазовыйПериодКонец	= ТекущаяСтрока.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеНачисленияБазовыйПериодНачалоПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ОсновныеНачисления.ТекущаяСтрока;
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.БазовыйПериодНачало) Тогда
		ТекущаяСтрока.БазовыйПериодНачало = ТекущаяСтрока.ДатаНачала;
		ТекущаяСтрока.БазовыйПериодКонец	= ТекущаяСтрока.ДатаОкончания;
	Иначе
		ТекущаяСтрока.БазовыйПериодКонец	= Макс(ТекущаяСтрока.БазовыйПериодНачало, ТекущаяСтрока.БазовыйПериодКонец);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеНачисленияБазовыйПериодКонецПриИзменении(Элемент)
		
	ТекущаяСтрока = ЭлементыФормы.ОсновныеНачисления.ТекущаяСтрока;
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.БазовыйПериодКонец) Тогда
		ТекущаяСтрока.БазовыйПериодНачало = ТекущаяСтрока.ДатаНачала;
		ТекущаяСтрока.БазовыйПериодКонец = ТекущаяСтрока.ДатаОкончания;
	Иначе
		ТекущаяСтрока.БазовыйПериодНачало	= Мин(ТекущаяСтрока.БазовыйПериодНачало, ТекущаяСтрока.БазовыйПериодКонец);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" строки таблицы
//
Процедура ОсновныеНачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Или СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьТекущегоСотрудника();
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	Если ТекущаяСтрока.Сторно Или НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	РазницаВМесяцах = (Год(ТекущаяСтрока.ДатаОкончания)*12 + Месяц(ТекущаяСтрока.ДатаОкончания)) - (Год(ТекущаяСтрока.ДатаНачала)*12 + Месяц(ТекущаяСтрока.ДатаНачала));
	Если РазницаВМесяцах > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Разбить строку начислений на помесячные записи?';uk='Розбити рядок нарахувань на помісячні записи?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		ПроведениеРасчетов.РазбитьСтрокуНачисленийНаПомесячныеЗаписи(ТекущаяСтрока, ОсновныеНачисления);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки"
//
Процедура ОсновныеНачисленияПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		мСтарыйРезультат				= ДанныеСтроки.Результат;
		мБылоОтработаноДней				= ДанныеСтроки.ОтработаноДней;
		мБылоОтработаноЧасов			= ДанныеСтроки.ОтработаноЧасов;
		//мБылоОтработаноДнейПоПятидневке	= ДанныеСтроки.ОтработаноДнейПоПятидневке;
		мБылоНормаДней					= ДанныеСтроки.НормаДней;
		мБылоНормаЧасов					= ДанныеСтроки.НормаЧасов;
		//мБылоНормаДнейПоПятидневке		= ДанныеСтроки.НормаДнейПоПятидневке;
		ОбновитьТекущегоСотрудника();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияПриАктивизацииСтроки()

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура ОсновныеНачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.ОсновныеНачисления, ОформленияСтрок);
	
КонецПроцедуры // ОсновныеНачисленияПриПолученииДанных()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица -  
// подбирает подходящие должность и подразделение
//
// Параметры:
//	Элемент - элемент формы, который отображает физическое лицо
//
Процедура ОсновныеНачисленияСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные;
	ДатаСобытия = ?(ЗначениеЗаполнено(ДанныеСтроки.ДатаОкончания), ДанныеСтроки.ДатаОкончания, Дата);
	
	ОснНазначение = ?(ЗначениеЗаполнено(Элемент.Значение.ОсновноеНазначение), Элемент.Значение.ОсновноеНазначение, Элемент.Значение);
	ПроведениеРасчетов.ПроставитьДанныеСтроки(ОснНазначение, Элемент.Значение, ДатаСобытия, ПериодРегистрации, ДанныеСтроки.ВидРасчета, ЭлементыФормы.ОсновныеНачисления.ТекущаяСтрока);
	Если ЗначениеЗаполнено(ДанныеСтроки.Сотрудник) Тогда
		ДанныеСтроки.ДатаНачала = Макс(ДанныеСтроки.ДатаНачала,ДанныеСтроки.Сотрудник.ДатаПриемаНаРаботу);	
	КонецЕсли;	
	ДанныеСтроки.ФизЛицо = Элемент.Значение.ФизЛицо;
	ДанныеСтроки.Авторасчет	= Истина;
	
КонецПроцедуры // ОсновныеНачисленияСотрудникПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникАвтоПодборТекста()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода вида расчета 
//
Процедура ОсновныеНачисленияВидРасчетаПриИзменении(Элемент)
	
	СведенияОВидеРасчета = РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчетаОснНачислений, Элемент.Значение, "ПриРасчете");

	Для СчПоказателей = 1 По 6 Цикл
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы.ОсновныеНачисления.Колонки["Показатель" + СчПоказателей].ЭлементУправления.Формат = "ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]
			Иначе			
				ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Показатель" + СчПоказателей] = 0;
			КонецЕсли;
		Иначе
			ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Показатель" + СчПоказателей] = 0;			
		КонецЕсли;
	КонецЦикла;
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ОсновныеНачисления.ТекущаяСтрока;	
	ОснНазначение = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сотрудник.ОсновноеНазначение), СтрокаТабличнойЧасти.Сотрудник.ОсновноеНазначение, СтрокаТабличнойЧасти.Сотрудник);
	ПроведениеРасчетов.ПроставитьДанныеСтроки(ОснНазначение, СтрокаТабличнойЧасти.Сотрудник, СтрокаТабличнойЧасти.ДатаНачала, ПериодРегистрации, СтрокаТабличнойЧасти.ВидРасчета, СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода вида расчета
Процедура ОсновныеНачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	//Предложим для выбора список расчетов, имеющих способ расчета, соответствующий указанной форме оплаты
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаРегистрацияРазовыхНачислений");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	МассивВидовВремени = Новый СписокЗначений;
    Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены Тогда
		МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
		МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
		МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеСверхНормы);
		МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
	Иначе
		МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеНеотработанное);
		МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
	КонецЕсли;
	
	ФормаВыбораВидаРасчета.Отбор.ВидВремени.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.ВидВремени.Значение = МассивВидовВремени;
	ФормаВыбораВидаРасчета.Отбор.ВидВремени.Использование = Истина;
	
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение = мСписокДоступныхСпособовРасчета;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование = Истина;

	//ФормаВыбораВидаРасчета.Отбор.ДоходНДФЛ.ВидСравнения = ВидСравнения.ВСписке;
	//ФормаВыбораВидаРасчета.Отбор.ДоходНДФЛ.Значение = ПроведениеРасчетов.ПолучитьСписокКодовДоходаОсновныхНачислений();
	//ФормаВыбораВидаРасчета.Отбор.ДоходНДФЛ.Использование = Истина;

	
	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры // ОсновныеНачисленияВидРасчетаНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода вида расчета
Процедура ОсновныеНачисленияВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга("ОсновныеНачисления"), Элемент.ТипЗначения.Типы()[0]);
	
КонецПроцедуры // ОсновныеНачисленияВидРасчетаАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода вида расчета
//
Процедура ОсновныеНачисленияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга("ОсновныеНачисления"), ЭтаФорма, Элемент.ТипЗначения.Типы()[0], мОбработкаТайпинга, мТекстТайпинга, мПоследнееЗначениеЭлементаТайпинга, Ложь);
	
КонецПроцедуры // ОсновныеНачисленияВидРасчетаОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля "Результат"
//
Процедура ОсновныеНачисленияРезультатПриИзменении(Элемент)
	
	Если Элемент.Значение <> мСтарыйРезультат Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Авторасчет = Ложь;
		мСтарыйРезультат = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияРезультатПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ОтработаноДней"
//
Процедура ОсновныеНачисленияОтработаноДнейПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоОтработаноДней Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Авторасчет = Ложь;
		мБылоОтработаноДней = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияОтработаноДнейПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ОтработаноЧасов"
//
Процедура ОсновныеНачисленияОтработаноЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоОтработаноЧасов Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Авторасчет = Ложь;
		мБылоОтработаноЧасов = Элемент.Значение;
	КонецЕсли;

КонецПроцедуры // ОсновныеНачисленияОтработаноЧасовПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "НормаДней"
//
Процедура ОсновныеНачисленияНормаДнейПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоНормаДней Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Авторасчет = Ложь;
		мБылоНормаДней = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияНормаДнейПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "НормаЧасов"
//
Процедура ОсновныеНачисленияНормаЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоНормаЧасов Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Авторасчет = Ложь;
		мБылоНормаЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияНормаЧасовПриИзменении()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ДополнительныеДействияВесьДокумент(Кнопка)
	РаботаСДиалогами.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры

Процедура ДополнительныеДействияТекущийСотрудник(Кнопка)
	
	Если Не ЗначениеЗаполнено(мТекущийСотрудник) Тогда
		Предупреждение(НСтр("ru='Не выбран сотрудник для исправления расчетов!';uk='Не обраний співробітник для виправлення розрахунків!'"));
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогами.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, мТекущийСотрудник);

КонецПроцедуры

Процедура ДополнительныеДействияСписокСотрудников(Кнопка)
	
	Если Проведен Тогда
		
		ПолучитьСотрудниковСИсправлениями();
		
		ТекстВопроса = НСтр("ru='Для исправления необходимо записать документ. Продолжить?';uk='Для виправлення необхідно записати документ. Продовжити?'");
		Если Не РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ЭтотОбъект, ЭтаФорма, ТекстВопроса) Тогда
			Возврат;
		КонецЕсли;
		
		СписокСотрудников = Новый СписокЗначений;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрацияРазовыхНачисленийРаботниковОрганизаций.Сотрудник,
		|	РегистрацияРазовыхНачисленийРаботниковОрганизаций.Сотрудник.Наименование КАК Наименование
		|ИЗ
		|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК РегистрацияРазовыхНачисленийРаботниковОрганизаций
		|ГДЕ
		|	РегистрацияРазовыхНачисленийРаботниковОрганизаций.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		Запрос.УстановитьПараметр("Ссылка",Ссылка); 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если мСотрудникиИсправление[Выборка.Сотрудник] = Неопределено Тогда
				СписокСотрудников.Добавить(Выборка.Сотрудник,Выборка.Наименование)
			КонецЕсли;
		КонецЦикла;
		
		Форма = ПолучитьОбщуюФорму("ФормаВыбораСотрудников", ЭтаФорма, Ссылка);
		Форма.СписокСотрудников = СписокСотрудников;
		Форма.Заголовок = НСтр("ru='Сотрудники документа Регистрация разовых начислений №';uk='Співробітники документа Реєстрація разових нарахувань №'") + Номер + НСтр("ru=' от ';uk=' від '") + Формат(Дата,"ДФ=dd.MM.yyyy");
		Форма.Открыть();
		
	Иначе
		Предупреждение(НСтр("ru='Исправить можно только проведенный документ!';uk='Виправити можна лише проведений документ!'"))
	КонецЕсли;
	
КонецПроцедуры

// Процедура отмены документов-исправлений
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогами.ОтменитьИсправлениеДокумента(Ссылка);
	мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
	ПолучитьСотрудниковСИсправлениями();
	ОбновитьДоступностьЭлементовФормы();
	РаботаСДиалогами.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(мТекущийСотрудник),мТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник);
	Обновить();
	
КонецПроцедуры


// Серна - Начало
Процедура Кнопка1Нажатие(Элемент)
ПечатьПремий();
КонецПроцедуры

Процедура ЗаполнитьИзОснования(Кнопка)
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Сообщить("Не указан документ-основание");
		Возврат;
	ИначеЕсли (Не ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПредварительныеНачисления")) и (Не ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КомандировкиОрганизаций")) Тогда
		Сообщить("Заполнение возможно только на соновании документа-основания типа 'Предварительные начисления' и 'Командировки организаций'");
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Дата) Тогда
		Сообщить("Не указана дата документа");
		Возврат;
	КонецЕсли;
	ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
	Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	ОсновныеНачисления.Очистить();
	Если 	  (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПредварительныеНачисления")) Тогда
		ЗаполнитьДокументНаОснованииПредварительныеНачисления(ДокументОснование, Дата);
	ИначеЕсли (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КомандировкиОрганизаций")) Тогда
		ЗаполнитьДокументНаОснованииКомандировкиОрганизаций(ДокументОснование, Дата);
	КонецЕсли;
КонецПроцедуры
// Серна - Конец
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСведенияОВидахРасчетаОснНачислений = Новый Соответствие;
мСведенияОВидахРасчетаДопНачислений = Новый Соответствие;
мСписокДоступныхСпособовРасчета = Новый СписокЗначений;

мДокументыИсправление = Новый Массив;
мСотрудникиИсправление = Новый Соответствие;

