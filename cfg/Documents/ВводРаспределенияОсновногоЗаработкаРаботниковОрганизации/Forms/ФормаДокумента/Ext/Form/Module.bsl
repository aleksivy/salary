////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента;			// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущийСотрудник;				// Ссылка на текущего работника формы
Перем мСинхронизируемыеТабличныеЧасти;	// для синхронизации строк табличных полей
Перем мДеревоМакетов;					// Хранит дерево макетов печатных форм
Перем мПодменюПечати;					// Хранит элемент управления подменю печати
Перем мПечатьПоУмолчанию;				// Хранит элемент управления кнопку печать по умолчанию
Перем мКнопкиЗаполненияТЧ;				// Хранит дерево кнопок подменю заполнение ТЧ

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики налоговому учету
Перем мМассивЭУЕНВД;

// Переменные обработки ввода
Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Удаляет строки РаспределениеНачислений по РаботникиОрганизации
//
Процедура УдалитьСтрокиПоРаботнику(Сотрудник) 
	
	СтруктураПоиска = Новый Структура("Сотрудник", Сотрудник);
	
	МассивСтрок = РаспределениеНачислений.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаТабличнойЧасти Из МассивСтрок Цикл
		РаспределениеНачислений.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры // УдалитьСтрокиПоРаботнику()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаспределениеНачислений,ЭлементыФормы.КоманднаяПанельРаспределениеНачислений);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()


Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("СписокПроводок",НСтр("ru='Список проводок';uk='Список проводок'"));

КонецФункции // ПолучитьТаблицуПечатныхФорм()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

// Обновляет значение отбора строк т.п. РаспределениеНачислений
Процедура УстановитьОтборРаботника(Сотрудник)
	
	ЭлементыФормы.РаспределениеНачислений.ОтборСтрок.Сотрудник.Значение = Сотрудник;
	
КонецПроцедуры // УстановитьОтборРаботника()

// Процедура формирует таблицу работников на основе данных табличных частей документа 
//
// Параметры
//
Процедура ЗаполнитьТаблицуРаботников()
	
	РаботникиОрганизации.Очистить();
	
	ТЗ = РаспределениеНачислений.Выгрузить();
	ТЗ.Свернуть("Сотрудник,Физлицо");
	Для Каждого СтрокаТабличнойЧасти Из ТЗ Цикл
		ЗаполнитьЗначенияСвойств(РаботникиОрганизации.Добавить(), СтрокаТабличнойЧасти);
	КонецЦикла;

	РаботникиОрганизации.Сортировать("Сотрудник");
	
КонецПроцедуры // ЗаполнитьТаблицуРаботников()

Процедура ПриИзмененииРаботника(Значение)

	// если работник изменился, то по предыдущему работнику удалим строки
	Если Значение <> мТекущийСотрудник Тогда
		
		УдалитьСтрокиПоРаботнику(мТекущийСотрудник);
		// запомним текущего работника
		мТекущийСотрудник = Значение;
		
		УстановитьОтборРаботника(мТекущийСотрудник);

	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииРаботника()

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровПодбораПоСтроке(ЗначениеПараметра)

	СтруктураПараметров = Новый Структура("ОтнесениеРасходовКДеятельностиЕНВД", ЗначениеПараметра);
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

		Если НЕ ЗначениеЗаполнено(Период) Тогда
			// реквизит Период - месяц для которого вводим распределение
			Период = НачалоМесяца(РабочаяДата);
		КонецЕсли;
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("СпособОтраженияВБухучете");
	СтруктураКолонок.Вставить("ДоляСпособаОтражения");
	СтруктураКолонок.Вставить("ПодпадаетПодЕНВД");

	// Установить ограничение - изменять видимость колонок для табличной части Удержания
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаспределениеНачислений.Колонки, СтруктураКолонок);

	// Активизируем табличное поле
	ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Кнопки "По сотруднику" командной панели установим в отключенное состояние
	ЭлементыФормы.КоманднаяПанельРаспределениеНачислений.Кнопки.ВсеРаботники.Пометка  = Ложь;
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(Период);
    
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = Организация;
	
	////// Установить активный реквизит.
	////Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
	////	ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;
	////КонецЕсли;
	////УстановитьЗаголовкиОрганизацийВФорме();
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Реквизиты = "";
		ТаблицаРаспределения = "";
		
		ТаблицаРаспределенияПустая = Истина;
		Если ЗначениеВыбора.Свойство("Реквизиты",Реквизиты) И Реквизиты.Свойство("РаспределениеНачислений",ТаблицаРаспределения) Тогда
			ТаблицаРаспределенияПустая = ТаблицаРаспределения.Количество() = 0;
		КонецЕсли;
		
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			
			РаботникиОрганизации.Очистить();
			РаспределениеНачислений.Очистить();
			
			Для Каждого СтрокаТЗ Из ЗначениеВыбора.Данные.Выгрузить() Цикл
				ЗаполнитьЗначенияСвойств(РаботникиОрганизации.Добавить(), СтрокаТЗ);
			КонецЦикла;
			
//*			РаботникиОрганизации.Свернуть("Сотрудник,Физлицо");
			
			Если НЕ ТаблицаРаспределенияПустая Тогда
				//заполним таблицу распределения начислений
				Для каждого СтрокаТЗ Из РаботникиОрганизации Цикл
					Для каждого СтрокаТаблицыРаспределения Из ТаблицаРаспределения Цикл
						НоваяСтрока = РаспределениеНачислений.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
						Если ЗначениеЗаполнено(СтрокаТЗ.Сотрудник.ОсновноеНазначение) Тогда
							НоваяСтрока.Сотрудник = СтрокаТЗ.Сотрудник.ОсновноеНазначение;
						Иначе
							НоваяСтрока.Сотрудник = СтрокаТЗ.Сотрудник;
						КонецЕсли;
						НоваяСтрока.Назначение = СтрокаТЗ.Сотрудник;
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыРаспределения);
					КонецЦикла;
					Если ЗначениеЗаполнено(СтрокаТЗ.Сотрудник.ОсновноеНазначение) Тогда
						РаботникиОрганизации.Удалить(СтрокаТЗ);
					КонецЕсли;	
				КонецЦикла; 
		
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура - обработчик события нажатия кнопки "ВсеРаботники"
//
Процедура КоманднаяПанельРаспределениеНачисленийВсеРаботники(Кнопка)
	
	Если ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока <> Неопределено Тогда
		
		Если ЭлементыФормы.РаспределениеНачислений.ОтборСтрок.Сотрудник.Использование Тогда
			// отключим отбор
			ЭлементыФормы.РаспределениеНачислений.Колонки.ДоляСпособаОтражения.ОтображатьИтогиВПодвале = Ложь;
			ЭлементыФормы.РаспределениеНачислений.Колонки.ДоляСпособаОтражения.ТекстПодвала = "";
			ЭлементыФормы.РаспределениеНачислений.ОтборСтрок.Сотрудник.Использование = Ложь;
			ЭлементыФормы.КоманднаяПанельРаспределениеНачислений.Кнопки.ВсеРаботники.Пометка = Ложь;
			
		Иначе
			// установим отбор
			ЭлементыФормы.РаспределениеНачислений.ОтборСтрок.Сотрудник.Установить(ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Сотрудник);
			ЭлементыФормы.КоманднаяПанельРаспределениеНачислений.Кнопки.ВсеРаботники.Пометка = Истина;
			ЭлементыФормы.РаспределениеНачислений.Колонки.ДоляСпособаОтражения.ОтображатьИтогиВПодвале = Истина;
		КонецЕсли;
		
	Иначе
		Сообщить(НСтр("ru='В таблице сотрудников не выбрана строка!';uk='У таблиці співробітників не обраний рядок!'")) 
		
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельУдержанияВсеРаботники()

 // Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
		
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

Процедура КоманднаяПанельРаботникиОрганизацииЗаполнить(Кнопка)
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРаспределения = Новый ТаблицаЗначений;
	ТаблицаРаспределения.Колонки.Добавить("СпособОтраженияВБухучете");
	ТаблицаРаспределения.Колонки.Добавить("ДоляСпособаОтражения");
	ТаблицаРаспределения.Колонки.Добавить("ПодпадаетПодЕНВД");
	ТаблицаРаспределения.Колонки.Добавить("СтатьяЗатратЕНВД");
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, КонецМесяца(Период), , Организация, , , ,"ВводРаспределенияОсновногоЗаработка",Новый Структура("РаспределениеНачислений", ТаблицаРаспределения), Период, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 7);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = Организация;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, Период);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(Период);
	
КонецПроцедуры // ПериодПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Период = ДобавитьМесяц(Период, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(Период);
	
КонецПроцедуры // ПериодРегулирование()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодРегулирование()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, Период, ЭтаФорма);
	
КонецПроцедуры // ПериодНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодОкончаниеВводаТекста()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля
//
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.РаботникиОрганизации, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
    ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
    
    Если ДанныеСтроки = Неопределено Тогда
    	мТекущийСотрудник = Неопределено;
    	Возврат;
    КонецЕсли;
    
    // запомним текущего работника
   мТекущийСотрудник = ДанныеСтроки.Сотрудник;
   УстановитьОтборРаботника(мТекущийСотрудник);
 	
КонецПроцедуры // РаботникиОрганизацииПриАктивизацииСтроки()
  
// Процедура - обработчик события "ОбработкаВыбора" табличного поля
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		РаботникиОрганизации.Добавить().Сотрудник = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииОбработкаВыбора()

// Процедура - обработчик события "Перед удалением" строки табличного поля
//
Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	УдалитьСтрокиПоРаботнику(Элемент.ТекущиеДанные.Сотрудник);
	
КонецПроцедуры // РаботникиОрганизацииПередУдалением()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	
	ПриИзмененииРаботника(Элемент.Значение);
	
КонецПроцедуры

Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 7, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура РаботникиОрганизацииСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокиРаботников = РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение));
	Если СтрокиРаботников.Количество() > 0 И Элемент.Значение <> ВыбранноеЗначение Тогда
		Предупреждение(НСтр("ru='В данном документе по одному сотруднику можно вводить только одну строку!';uk='В цьому документі по одному співробітнику можна вводити тільки один рядок!'"));
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = ВыбранноеЗначение;
	ПриИзмененииРаботника(ВыбранноеЗначение);

КонецПроцедуры

Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры

Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры

Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);
	
КонецПроцедуры
  
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаспределениеНачислений

// Процедура - обработчик события "ПриАктивизацииСтроки" строки ТЧ
//
Процедура РаспределениеНачисленийПриАктивизацииСтроки(Элемент)
	
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.РаспределениеНачислений, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
КонецПроцедуры // РаспределениеНачисленийПриАктивизацииСтроки()

// Процедура - обработчик события "ПослеУдаления" строки ТЧ
//
Процедура РаспределениеНачисленийПослеУдаления(Элемент)
	
	ЗаполнитьТаблицуРаботников();
	
КонецПроцедуры // РаспределениеНачисленийПослеУдаления()

// Процедура - обработчик события "ПриНачалеРедактирования" строки ТЧ
//
Процедура РаспределениеНачисленийПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ДанныеСтрокиТЧРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
		
		Если ДанныеСтрокиТЧРаботники <> Неопределено Тогда
			ДанныеСтроки.Сотрудник = ДанныеСтрокиТЧРаботники.Сотрудник;
			ДанныеСтроки.Назначение = ДанныеСтрокиТЧРаботники.Сотрудник;
		КонецЕсли;

		Если ЭлементыФормы.РаспределениеНачислений.ОтборСтрок.Сотрудник.Использование Тогда
			ДанныеСтроки.Сотрудник = ЭлементыФормы.РаспределениеНачислений.ОтборСтрок.Сотрудник.Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РаспределениеНачисленийПриНачалеРедактирования()



Процедура НачисленияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	
	Если СтрокаРаботники = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаРаботники.Сотрудник) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределениеНачисленийПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока Тогда
		
		СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
		
		Если СтрокаРаботники = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрока = Элемент.ТекущаяСтрока;
		ТекущаяСтрока.Сотрудник		= ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
		ТекущаяСтрока.Назначение	= ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриПолученииДанных" табличного поля
Процедура РаспределениеНачисленийПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаспределениеНачислений, ОформленияСтрок, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РаспределениеНачислений

Процедура РаспределениеНачисленийСотрудникПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Значение.ОсновноеНазначение) Тогда
		ЭлементыФормы.РаспределениеНачислений.ТекущиеДанные.Назначение = Элемент.Значение;
		Элемент.Значение = Элемент.Значение.ОсновноеНазначени;
	Иначе
		ЭлементыФормы.РаспределениеНачислений.ТекущиеДанные.Назначение = Элемент.Значение;
	КонецЕсли;	
	
КонецПроцедуры
  
Процедура РаспределениеНачисленийСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 7, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура РаспределениеНачисленийСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры

Процедура РаспределениеНачисленийСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры

Процедура РаспределениеНачисленийНазначениеПриИзменении(Элемент)
	
	ЭлементыФормы.РаспределениеНачислений.ТекущиеДанные.Физлицо = Элемент.Значение.Физлицо;
	
КонецПроцедуры
  
Процедура РаспределениеНачисленийНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 7, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура РаспределениеНачисленийНазначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры

Процедура РаспределениеНачисленийНазначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры




Процедура РаспределениеНачисленийСпособОтраженияВБухучетеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//ФормаВыбора = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПолучитьФормуВыбора(,Элемент,Ссылка);
	//
	//ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	//
	//СписокПредопределенных = Новый СписокЗначений;
	//Для каждого ВидРасч Из ПланыВидовРасчета.ОсновныеНачисленияОрганизаций Цикл
	//	Если ВидРасч.Предопределенный Тогда
	//		СписокПредопределенных.Добавить(ВидРасч);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//ФормаВыбора.Отбор.Ссылка.Значение =  СписокПредопределенных;
	//ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	//ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	//ФормаВыбора.Открыть();
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПолучитьФормуВыбора(,Элемент,Ссылка);
	
	ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеРавно;
	ФормаВыбора.Отбор.Ссылка.Значение =  Справочники.СпособыОтраженияЗарплатыВРеглУчете.РаспределятьПоБазовымНачислениям;
	ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();

	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.НадписьОрганизация.Значение = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
	ЭлементыФормы.РамкаГруппыРаботникиОрганизации.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса(НСтр("ru='Сотрудники организации';uk='Співробітники організації'"));
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ <Наименование>

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
мСинхронизируемыеТабличныеЧасти["РаспределениеНачислений"]	= Ложь;
мСинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]		= Ложь;

мОбработкаПодбораПоСтроке					= Ложь;
мТекстПодбораПоСтроке						= "";
мПоследнееЗначениеЭлементаПодбораПоСтроке	= Неопределено;




