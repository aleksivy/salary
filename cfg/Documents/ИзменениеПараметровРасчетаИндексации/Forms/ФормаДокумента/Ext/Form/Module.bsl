////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Ссылка на текущего работника формы
Перем мТекущийСотрудник;

// для синхронизации строк табличных полей
Перем мСинхронизируемыеТабличныеЧасти;


// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	Иначе 
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;	
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	ПредставлениеПериодаРегистрации = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);

	ОбновитьВидимостьЭлементовФормы();
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
КонецПроцедуры

// Управляет видимостью и доступностью элементов формы
Процедура ОбновитьВидимостьЭлементовФормы()

КонецПроцедуры


// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

//Процедура - обработчик выбора ТЧ РаботникиОрганизации
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	//Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
	//	СтандартнаяОбработка = Ложь;
	//	Элемент.Значение = ВыбранноеЗначение;
	//КонецЕсли;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		РаботникиОрганизации.Добавить().Сотрудник = ВыбранноеЗначение;
    КонецЕсли;
КонецПроцедуры
         

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	мТекущаяДатаДокумента = Дата;
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода физического лица -  
// переопеределим выбор физлица на выбор из списка регистра сведений
//
// Параметры:
//	Элемент - элемент формы, который отображает физическое лицо
//
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникОкончаниеВводаТекста()

Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
	Элемент = ЭлементыФормы.РаботникиОрганизации;
    
    ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		мТекущийСотрудник = Неопределено;
		Возврат;
	КонецЕсли;
	
	// запомним текущего работника
	мТекущийСотрудник	= ДанныеСтроки.Сотрудник;
	
	УстановитьОтборРаботника(ДанныеСтроки.Сотрудник);

КонецПроцедуры

Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);

КонецПроцедуры

Процедура РаботникиОрганизацииСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокиРаботников = РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение));
	Если СтрокиРаботников.Количество() > 0 И Элемент.Значение <> ВыбранноеЗначение Тогда
		Предупреждение(НСтр("ru='В данном документе по одному работнику можно вводить только одну строку!';uk='В даному документі по одному працівнику можна вводити тільки один рядок!'"));
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = ВыбранноеЗначение;
	ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Физлицо = Элемент.Значение.Физлицо;
	//УстановитьОтборРаботника(ВыбранноеЗначение);

КонецПроцедуры

// Обновляет значение отбора строк т.п. начислений
//
// Параметры
//	Сотрудник	- СправочникСсылка.СотрудникиОрганизаций - текущий сотрудник
//
Процедура УстановитьОтборРаботника(Сотрудник)

	ЭлементыФормы.РаботникиОрганизации.ОтборСтрок.Сотрудник.Значение = Сотрудник;
	ЭлементыФормы.НачисленияДо.ОтборСтрок.Сотрудник.Значение = Сотрудник;
	ЭлементыФормы.НачисленияПосле.ОтборСтрок.Сотрудник.Значение = Сотрудник;
	
КонецПроцедуры // УстановитьОтборРаботника()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура разрешения/запрещения редактирования номера документа
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ДействияФормыРассчитать(Кнопка)
	
	Если РаботникиОрганизации.Количество() + 
		 НачисленияДо.Количество() +
		 НачисленияПосле.Количество() = 0 Тогда
		 
		 Возврат;
	КонецЕсли;	 
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	Рассчитать(НачисленияДо,"НачисленияДо");
	Рассчитать(НачисленияПосле,"НачисленияПосле");
	РассчитатьИндексацию();
	
КонецПроцедуры

Процедура ДействияФормыЗаполнитьНачисления(Кнопка)
	
	Если НачисленияДо.Количество() +
		 НачисленияПосле.Количество() > 0 Тогда
		 
		 ТекстВопроса = НСтр("ru='Перед заполнением табличные части начислений будут очищены. Продолжить?';uk='Перед заповненям табличні частини нарахувань будуть очищені. Продовжити?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		НачисленияДо.Очистить();
		НачисленияПосле.Очистить();
		
	ИначеЕсли РаботникиОрганизации.Количество()= 0 Тогда
		 
		Сообщить(НСтр("ru='Для заполнения начислений необходимо заполнить список работников';uk='Для заповненя нарахувань необхідно заповнити список працівників'"), СтатусСообщения.Информация);
		
	КонецЕсли;
	
	мСотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
	АвтозаполнениеНачисления( Ссылка, НачисленияДо, мСотрудники );
	АвтозаполнениеНачисления( Ссылка, НачисленияПосле, мСотрудники );
	
КонецПроцедуры

Процедура ПредставлениеПериодаРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);

КонецПроцедуры

Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РаботаСДиалогами.РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации);

КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, Организация, 1);

КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииПереключитьОтборСписка(Кнопка)
	Если ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПереключитьОтборСписка.Пометка Тогда
		// отключим отбор
		ЭлементыФормы.НачисленияДо.ОтборСтрок.Сотрудник.Использование                			= Ложь;
		ЭлементыФормы.НачисленияПосле.ОтборСтрок.Сотрудник.Использование                     	= Ложь;
		
		ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПереключитьОтборСписка.Пометка = Ложь;
	Иначе
		
		Если ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока <> Неопределено Тогда
			ТекущееФизЛицо = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока.Сотрудник;
			
			// установим отбор
			ЭлементыФормы.НачисленияДо.ОтборСтрок.Сотрудник.Использование     = Истина;
			ЭлементыФормы.НачисленияДо.ОтборСтрок.Сотрудник.Значение          = ТекущееФизЛицо;
			
			ЭлементыФормы.НачисленияПосле.ОтборСтрок.Сотрудник.Использование                   = Истина;
			ЭлементыФормы.НачисленияПосле.ОтборСтрок.Сотрудник.Значение                        = ТекущееФизЛицо;
			
			ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПереключитьОтборСписка.Пометка = Истина;
			
		Иначе
			Сообщить(НСтр("ru='В таблице работников не выбрана строка!';uk='У таблиці працівників не обраний рядок!'")) 
		КонецЕсли; 
		
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		РаботникиОрганизации.Очистить();
		НачисленияДо.Очистить();
		НачисленияПосле.Очистить();
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, , Организация,,,,"ИзменениеПараметровРасчетаИндексации",Новый Структура("ДатаИзменения",Дата),)
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";  Реквизиты = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда			
			ВременнаяТаблица = ЗначениеВыбора.Данные.Выгрузить();
				Если ЗначениеВыбора.Свойство("Реквизиты",Реквизиты) Тогда
					РеквизитыТЧ = ЭтотОбъект.Метаданные().ТабличныеЧасти.РаботникиОрганизации.Реквизиты;
					
					Для Каждого Значение Из Реквизиты Цикл
						Если РеквизитыТЧ.Найти(Значение.Ключ) <> Неопределено Тогда
							ВременнаяТаблица.Колонки.Добавить(Значение.Ключ); 
							ВременнаяТаблица.ЗаполнитьЗначения(Значение.Значение,Значение.Ключ);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				РаботникиОрганизации.Загрузить(ВременнаяТаблица);
				
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииПоДаннымОбИзмененияхНачислений(Кнопка)
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		РаботникиОрганизации.Очистить();
		НачисленияДо.Очистить();
		НачисленияПосле.Очистить();
	КонецЕсли;
	
	АвтозаполнениеПоДаннымИзмененияНачислений()
	
КонецПроцедуры

мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
мСинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]		= Ложь;
мСинхронизируемыеТабличныеЧасти["НачисленияДо"]				= Ложь;
мСинхронизируемыеТабличныеЧасти["НачисленияПосле"]			= Ложь;

