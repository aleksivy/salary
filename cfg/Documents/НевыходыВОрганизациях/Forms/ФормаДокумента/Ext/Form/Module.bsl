////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период

Перем мРезультат;
Перем мОтработаноДней;
Перем мОтработаноЧасов;
Перем мНормаДней;
Перем мНормаЧасов;
Перем мКалендарныеДни;
Перем мОплаченоДнейЧасов;

Перем мДопСведенияОВидахРасчетаНачислений;
//Перем мСведенияОВидахРасчета;
Перем мСписокПричинНевыхода;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Механизм исправлений
Перем мДокументыИсправление;
Перем мДокументСторнирование;
Перем мСотрудникиИсправление;
Перем мМенюИсправление;
Перем мКнопкаИсправлениеТекущийСотрудник;
Перем мКнопкаИсправлениеВесьДокумент;
Перем мКнопкаИсправлениеСписокСотрудников;
Перем мКнопкаОтменаИсправление;
Перем мТекущийСотрудник;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
 
Функция ПолучитьСписокСотрудниковДляРасчета( Кнопка, ИмяТабличнойЧасти, мСотрудники, КомментироватьРасчет )
	
		КомментироватьРасчет = Ложь;
	
	Если Найти(Кнопка.Имя,"ПоРаботнику") > 0 Тогда
		
		мСотрудники = Новый СписокЗначений;
		Для каждого СтрокаСотрудник Из ЭлементыФормы.Начисления.ВыделенныеСтроки Цикл
			мСотрудники.Добавить(СтрокаСотрудник.Сотрудник);
		КонецЦикла; 
		
		Если Найти(Кнопка.Имя,"СКомментарием") > 0  Тогда
			КомментироватьРасчет = Истина;
		КонецЕсли;
		
	Иначе 
		
		мСотрудники = Начисления.ВыгрузитьКолонку("Сотрудник");
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции		

Процедура ОбновитьВидимостьПоСпособуРегистрацииВремени()
	
	ЭтоЦелосменныйНевыход = СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
	
	ЭлементыФормы.Начисления.Колонки.ДатаОкончания.Видимость = ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.ДатаОкончания.ИзменятьВидимость = ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.Период.Видимость = ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.Период.ИзменятьВидимость = ЭтоЦелосменныйНевыход;
	
	ЭлементыФормы.Начисления.Колонки.ДатаНачала.Положение = ?(ЭтоЦелосменныйНевыход, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.НоваяКолонка);
	ЭлементыФормы.Начисления.Колонки.ДатаНачала.ТекстШапки = ?(ЭтоЦелосменныйНевыход, НСтр("ru='Начало';uk='Початок'"), НСтр("ru='Дата';uk='Дата'"));
	
	ЭлементыФормы.Начисления.Колонки.КалендарныеДни.Видимость = ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.Результат.Видимость = ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.Показатели.Видимость = ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.Показатель1.Видимость = ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.Показатель2.Видимость = ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.Показатель3.Видимость = ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.Показатель4.Видимость = ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.Показатель5.Видимость = ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.Показатель6.Видимость = ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.НаименованиеПоказатель1.Видимость = ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.НаименованиеПоказатель2.Видимость = ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.НаименованиеПоказатель3.Видимость = ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.НаименованиеПоказатель4.Видимость = ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.НаименованиеПоказатель5.Видимость = ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.НаименованиеПоказатель6.Видимость = ЭтоЦелосменныйНевыход;
	
	ЭлементыФормы.Начисления.Колонки.ОплачиватьЧасов.Видимость = Не ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.ОплачиватьЧасов.ИзменятьВидимость = Не ЭтоЦелосменныйНевыход;

КонецПроцедуры // ОбновитьВидимостьПоСпособуРегистрацииВремени

Процедура СформироватьСписокПричинНевыхода()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НулеваяСумма", Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисления.Ссылка КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	(НЕ ОсновныеНачисления.Предопределенный)
	|	И ОсновныеНачисления.СпособРасчета В(&НулеваяСумма)
	|	И ОсновныеНачисления.ВидВремени = &ВидВремени";
	
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены Тогда
		
		Запрос.УстановитьПараметр("ВидВремени", Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
		мСписокПричинНевыхода.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"));
		мСписокПричинНевыхода.Вставить(0,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет);
		мСписокПричинНевыхода.Вставить(1,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчетПоСоглашению);
		мСписокПричинНевыхода.Вставить(2,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НевыходРегл);
		мСписокПричинНевыхода.Вставить(3,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул);
		мСписокПричинНевыхода.Вставить(4,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыУчебный);
		
	Иначе // здесь только почасовые невыходы
		
		Запрос.УстановитьПараметр("ВидВремени", Перечисления.ВидыВремени.ЧасовоеНеотработанное);
		мСписокПричинНевыхода.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьВидимостьПоПерерассчитываемомуДокументу(ЭтоПерерасчет)
	
	// Заполнение команд подменю "Заполнить"
	КнопкиЗаполнить = ЭлементыФормы.ДействияФормы.Кнопки.ПодменюЗаполнить.Кнопки;
	ДействиеПоКнопке = Новый Действие("ДействияФормыЗаполнить");
	Если ЭтоПерерасчет Тогда
		УдалитьКнопкуИзНабора("СписокРаботников", КнопкиЗаполнить);	
		Если КнопкиЗаполнить.Найти("ПоПерерассчитываемомуДокументу") = Неопределено Тогда
			НоваяКнопка = КнопкиЗаполнить.Вставить(0, "ПоПерерассчитываемомуДокументу",ТипКнопкиКоманднойПанели.Действие,НСтр("ru='По перерассчитываемому документу';uk='По документу, що перераховується'"), ДействиеПоКнопке);
			НоваяКнопка.ИзменяетДанные = Истина;
		КонецЕсли;
	Иначе
		УдалитьКнопкуИзНабора("ПоПерерассчитываемомуДокументу", КнопкиЗаполнить);
		Если КнопкиЗаполнить.Найти("СписокРаботников") = Неопределено Тогда
			НоваяКнопка = КнопкиЗаполнить.Вставить(0, "СписокРаботников",ТипКнопкиКоманднойПанели.Действие,НСтр("ru='Списком работников';uk='Списком працівників'"), ДействиеПоКнопке);
			НоваяКнопка.ИзменяетДанные = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ТолькоПросмотр Тогда
		ЭлементыФормы.СпособРегистрацииВремениДляЦелойСмены.Доступность = Не ЭтоПерерасчет;
		ЭлементыФормы.СпособРегистрацииВремениДляЧастиСмены.Доступность = Не ЭтоПерерасчет;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьВидимостьПоПерерассчитываемомуДокументу()

Процедура УдалитьКнопкуИзНабора(ИмяКнопки, НаборКнопок)

	Кнопка = НаборКнопок.Найти(ИмяКнопки);
	Если Кнопка <> Неопределено Тогда
		НаборКнопок.Удалить(НаборКнопок.Индекс(Кнопка));
	КонецЕсли;

КонецПроцедуры // УдалитьКнопкуИзНабора()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

Процедура ПолучитьСотрудниковСИсправлениями()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НевыходыВОрганизацияхНачисления.Сотрудник
	|ИЗ
	|	Документ.НевыходыВОрганизациях.Начисления КАК НевыходыВОрганизацияхНачисления
	|ГДЕ
	|	НевыходыВОрганизацияхНачисления.Ссылка В(&Исправления)
	|	И НевыходыВОрганизацияхНачисления.Сторно
	|	И НевыходыВОрганизацияхНачисления.СторнируемыйДокумент = НевыходыВОрганизацияхНачисления.Ссылка.ПерерассчитываемыйДокумент";
	
	мСотрудникиИсправление = ПроведениеРасчетов.СформироватьСоответствиеСотрудниковСИсправлениями(ТекстЗапроса, мДокументыИсправление);
	
КонецПроцедуры

Процедура ОбновитьТекущегоСотрудника()

	ТекущиеДанные	= ЭлементыФормы.Начисления.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ТекущийСотрудник = ТекущиеДанные.Сотрудник;
	Иначе
		ТекущийСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	// Установим имя и доступность кнопки ТекущийСотрудник механизма исправлений
	Если ЭлементыФормы.ДополнительныеДействия.Кнопки.Найти("Исправить") <> Неопределено И мТекущийСотрудник <> ТекущийСотрудник Тогда
		РаботаСДиалогами.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(ТекущийСотрудник),ТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник)
	КонецЕсли;
	
	мТекущийСотрудник = ТекущийСотрудник;

КонецПроцедуры

Процедура ОбновитьОписаниеСостоянияДокумента()

	// связанные документы
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	Сторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	НеЗаполнен = Не ЗначениеЗаполнено(Организация) Или Начисления.Количество() = 0;
	
	ЗаполненСОшибками = Начисления.НайтиСтроки(Новый Структура("Сотрудник",Справочники.СотрудникиОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или Начисления.НайтиСтроки(Новый Структура("ВидРасчета",Неопределено)).Количество() > 0;
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены Тогда
		ЗаполненСОшибками = ЗаполненСОшибками Или Начисления.НайтиСтроки(Новый Структура("ДатаНачала",'00010101')).Количество() > 0;
		ЗаполненСОшибками = ЗаполненСОшибками Или Начисления.НайтиСтроки(Новый Структура("ДатаОкончания",'00010101')).Количество() > 0;
	Иначе
		ЗаполненСОшибками = ЗаполненСОшибками Или Начисления.НайтиСтроки(Новый Структура("ОплачиватьЧасов",0)).Количество() > 0;
	КонецЕсли;
	
	СтрокНачислений = Начисления.НайтиСтроки(Новый Структура("Сторно",Ложь)).Количество();
	НеРассчитан = Начисления.НайтиСтроки(Новый Структура("Результат, Сторно",0,Ложь)).Количество() = СтрокНачислений И СтрокНачислений > 0 И Начисления.НайтиСтроки(Новый Структура("НормаДней, Сторно",0,Ложь)).Количество() = СтрокНачислений И Начисления.НайтиСтроки(Новый Структура("НормаЧасов, Сторно",0,Ложь)).Количество() = СтрокНачислений;
	
	ОписаниеСостоянияДокумента = РаботаСДиалогами.ПолучитьОписаниеРасчетногоДокумента(Не НеЗаполнен,ЗаполненСОшибками,Не НеРассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Сторнирован, ТолькоПросмотр,Ложь,Ложь); // поля структуры описания - ТекстСообщения и ВажностьСообщения
	РаботаСДиалогами.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

Процедура УстановитьКнопкиИсправленияДокумента(ДокументИсправлен = Неопределено, ИсправленВесьДокумент = Неопределено, ДокументСторнирован = Неопределено)
	
	Если ДокументИсправлен = Неопределено Тогда
		ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	КонецЕсли;
	Если ДокументСторнирован = Неопределено Тогда
		ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	КонецЕсли;
	
	Если ИсправленВесьДокумент = Неопределено Тогда
		ИсправленВесьДокумент = ДокументИсправлен;
		Если ИсправленВесьДокумент Тогда
			Для каждого СтрокаТЧ Из Начисления Цикл
				ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
				Если Не ИсправленВесьДокумент Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументСторнирован Или ПериодРегистрации >= НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
		ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	Иначе 
		
		Кнопки = ЭлементыФормы.ДополнительныеДействия.Кнопки;
		Если Кнопки.Количество() = 0 Тогда
			МенюИсправить = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Подменю);
			ЗаполнитьЗначенияСвойств(МенюИсправить, мМенюИсправление);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеТекущийСотрудник.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеТекущийСотрудник);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеВесьДокумент.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеВесьДокумент);
			МенюИсправить.Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеСписокСотрудников.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеСписокСотрудников);
		КонецЕсли;
		Кнопки.Исправить.Кнопки.ТекущийСотрудник.Доступность = Не ИсправленВесьДокумент;
		Кнопки.Исправить.Кнопки.ВесьДокумент.Доступность = Не ДокументИсправлен;
		Кнопки.Исправить.Кнопки.СписокСотрудников.Доступность = Не ИсправленВесьДокумент;
			
		Если Кнопки.Количество() = 1 И ДокументИсправлен Тогда
			Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаОтменаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаОтменаИсправление);
		ИначеЕсли Кнопки.Количество() > 1 И Не ДокументИсправлен Тогда
			Кнопки.Удалить(Кнопки.ОтменитьИсправление);
			Кнопки.Удалить(Кнопки.Разделитель);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Управляет видимостью элементов формы, зависящих от наличия перерассчитываемого документа
Процедура ОбновитьДоступностьЭлементовФормы()
	
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	ИсправленВесьДокумент = ДокументИсправлен;
	Если ИсправленВесьДокумент Тогда
		Для каждого СтрокаТЧ Из Начисления Цикл
			ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
			Если Не ИсправленВесьДокумент Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если ДокументИсправлен Или ДокументСторнирован Тогда
		ТолькоПросмотр = Истина
	Иначе 
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);		
	КонецЕсли;
	
	ЭлементыФормы.Организация.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
	
	УстановитьКнопкиИсправленияДокумента(ДокументИсправлен, ИсправленВесьДокумент, ДокументСторнирован);
	
	ЭлементыФормы.ПанельОткрытьИсправление.Свертка = ?(ДокументИсправлен Или ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.ПанельОткрытьИсходный.Свертка = ?(ЭтоИсправление И Не ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.НадписьОткрытьИсправление.Заголовок = ?(ДокументСторнирован,НСтр("ru='Открыть сторно-документ';uk='Відкрити сторно-документ'"),НСтр("ru='Открыть исправления';uk='Відкрити виправлення'"));
	
	Если Не ТолькоПросмотр Тогда
		МожноЗаполнять = Не ЭтоИсправление;
		СоставМенюЗаполнить = ЭлементыФормы.ДействияФормы.Кнопки.ПодменюЗаполнить.Кнопки;
		Для каждого Кнопка Из СоставМенюЗаполнить Цикл
			Если Кнопка.ТипКнопки <> ТипКнопкиКоманднойПанели.Разделитель Тогда
				Кнопка.Доступность = МожноЗаполнять
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если Не ЭтоНовый() Тогда
		мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
		мДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
		ОбновитьОписаниеСостоянияДокумента();
		Если ЗначениеЗаполнено(мДокументыИсправление) Тогда
			ПолучитьСотрудниковСИсправлениями();
		КонецЕсли;
	Иначе
		РаботаСДиалогами.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, НСтр("ru='Документ не заполнен';uk='Документ не заповнений'"), "СообщениеОПроблемах");
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
		Если СпособРегистрацииВремени.Пустая() Тогда
			СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
		КонецЕсли;
		
	КонецЕсли;	

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	//СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("Назначение");
 	СтруктураКолонок.Вставить("ДатаНачала");
 	СтруктураКолонок.Вставить("ДатаОкончания");
 	СтруктураКолонок.Вставить("ВидРасчета");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
 
	// Установить видимость колонок табличной части по выбранному способу регистрации времени.
	ОбновитьВидимостьПоСпособуРегистрацииВремени();
	
	// Список причин невыхода
	СформироватьСписокПричинНевыхода();

	// Установим видимость в зависимости от наличия перерассчитываемого документа
	ОбновитьВидимостьПоПерерассчитываемомуДокументу(Не ПерерассчитываемыйДокумент.Пустая());
	
	// Исправление документов
	мМенюИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить;
	мКнопкаИсправлениеТекущийСотрудник = мМенюИсправление.Кнопки.ТекущийСотрудник;
	мКнопкаИсправлениеВесьДокумент = мМенюИсправление.Кнопки.ВесьДокумент;
	мКнопкаИсправлениеСписокСотрудников = мМенюИсправление.Кнопки.СписокСотрудников;
	мКнопкаОтменаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление;
	ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	
	// Установим видимость в зависимости от наличия перерассчитываемого документа
	ОбновитьДоступностьЭлементовФормы();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	// Список причин невыхода
	СписокПричинНевыхода = Новый СписокЗначений;
	СписокПричинНевыхода.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул);
	СписокПричинНевыхода.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет);
	СписокПричинНевыхода.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчетПоСоглашению);
	СписокПричинНевыхода.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыУчебный);
	СписокПричинНевыхода.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НевыходРегл);
	ЭлементыФормы.Начисления.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора = СписокПричинНевыхода;
	
	ПредставлениеПериодаРегистрации = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
	
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	// оповестим исходный, исправляемый документ
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		Оповестить("ОбновитьФорму", Новый Структура("Команда, Объект","ДоступностьИсправленногоДокумента", ПерерассчитываемыйДокумент), Ссылка);
	КонецЕсли;	
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
		Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = ""; Реквизиты = "";
		
		Если ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ЗаполнитьДокументИсправление" Тогда
			РаботаСДиалогами.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, ЗначениеВыбора.ВыбранныеСотрудники);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму" И Не ЭтоНовый() Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Команда = "ДоступностьИсправленногоДокумента" Тогда
					Если Параметр.Объект = Ссылка И мДокументыИсправление.Найти(Источник) = Неопределено Тогда 
						мДокументыИсправление.Добавить(Источник);
						ПолучитьСотрудниковСИсправлениями();
						ОбновитьДоступностьЭлементовФормы();
						РаботаСДиалогами.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(мТекущийСотрудник),мТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник);
					КонецЕсли;
				ИначеЕсли Команда = "ДоступностьОтмененногоДокумента" Тогда
					Если Параметр.Объект = Ссылка Тогда
						Если мДокументСторнирование <> Источник Тогда
							мДокументСторнирование = Источник;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
						НовыйДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
						Если мДокументСторнирование <> НовыйДокументСторнирование Тогда
							мДокументСторнирование = НовыйДокументСторнирование;
							Если Не ЗначениеЗаполнено(мДокументСторнирование) Тогда
								РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
							КонецЕсли;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					КонецЕсли;
				Иначе
				КонецЕсли;
			Иначе
			КонецЕсли;
			
		Иначе
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ОбработкаОповещения

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если Начисления.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Заполнить?';uk='Перед заповненням табличні частини будуть очищені. Заповнити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Начисления.Очистить();
	КонецЕсли;
	
	Если Кнопка.Имя = "СписокРаботников" Тогда
		Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены Тогда
			ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭлементыФормы.Начисления, ПериодРегистрации, , Организация, , , ,"НевыходыВОрганизацияхДляЦелойСмены", Новый Структура("ВидРасчета,ДатаНачала,ДатаОкончания",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка(),Дата(1,1,1),Дата(1,1,1)));
		Иначе
			ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭлементыФормы.Начисления, ПериодРегистрации, , Организация, , , ,"НевыходыВОрганизацияхДляЧастиСмены", Новый Структура("ВидРасчета,ОплачиватьЧасов,ДатаНачала",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка(),0,Дата(1,1,1)));
		КонецЕсли;
		
	ИначеЕсли Кнопка.Имя = "ПоПерерассчитываемомуДокументу" Тогда
		
		Если Начисления.Количество() > 0 Тогда
		
			ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			Начисления.Очистить();
			
		КонецЕсли;

		Если Не ЗаполнитьПоПерерассчитываемомуДокументу(ПерерассчитываемыйДокумент) Тогда
			Сообщить(НСтр("ru='Нет необходимости перерассчитывать заданный документ. Для получения списка документов, подлежащих перерасчету, необходимо использовать: пункт Перерасчет зарплаты меню Расчет зарплаты';uk='Немає необхідності перерозраховувати заданий документ. Для отримання списку документів, що підлягають перерахунку, необхідно використовувати: пункт Перерахунок зарплати меню Розрахунок зарплати'"));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДействияФормыЗаполнить()

Процедура ДействияФормыРассчитатьНачисления(Кнопка)
	Перем мСотрудники, КомментироватьРасчет;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, НСтр("ru='рассчитать';uk='розрахувати'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьСписокСотрудниковДляРасчета( Кнопка, "Начисления", мСотрудники, КомментироватьРасчет ) Тогда
		Возврат;
	КонецЕсли;

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	РассчитатьНачисления(мСотрудники, КомментироватьРасчет);
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат				= ТекущаяСтрока.Результат;
		мБылоОтработаноДней				= ТекущаяСтрока.ОтработаноДней;
		мБылоОтработаноЧасов			= ТекущаяСтрока.ОтработаноЧасов;
		мБылоНормаДней					= ТекущаяСтрока.НормаДней;
		мБылоНормаЧасов					= ТекущаяСтрока.НормаЧасов;
		мБылоКалендарныеДни				= ТекущаяСтрока.КалендарныеДни;
		мБылоОплаченоДнейЧасов			= ТекущаяСтрока.ОплаченоДнейЧасов;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ДополнительныеДействияТекущийСотрудник(Кнопка)
	
	Если Не ЗначениеЗаполнено(мТекущийСотрудник) Тогда
		Предупреждение(НСтр("ru='Не выбран работник для исправления расчетов!';uk='Не обраний співробітник для виправлення розрахунків!'"));
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогами.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, мТекущийСотрудник);

КонецПроцедуры

Процедура ДополнительныеДействияВесьДокумент(Кнопка)
	РаботаСДиалогами.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры

Процедура ДополнительныеДействияСписокСотрудников(Кнопка)
	
	Если Проведен Тогда
		
		ТекстВопроса = НСтр("ru='Для исправления необходимо записать документ. Продолжить?';uk='Для виправлення необхідно записати документ. Продовжити?'");
		Если Не РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ЭтотОбъект, ЭтаФорма, ТекстВопроса) Тогда
			Возврат;
		КонецЕсли;
		
		СписокСотрудников = Новый СписокЗначений;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НевыходыВОрганизацияхНачисления.Сотрудник,
		|	НевыходыВОрганизацияхНачисления.Сотрудник.Наименование КАК Наименование
		|ИЗ
		|	Документ.НевыходыВОрганизациях.Начисления КАК НевыходыВОрганизацияхНачисления
		|ГДЕ
		|	НевыходыВОрганизацияхНачисления.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		Запрос.УстановитьПараметр("Ссылка",Ссылка); 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если мСотрудникиИсправление[Выборка.Сотрудник] = Неопределено Тогда
				СписокСотрудников.Добавить(Выборка.Сотрудник,Выборка.Наименование)
			КонецЕсли;
		КонецЦикла;
		
		Форма = ПолучитьОбщуюФорму("ФормаВыбораСотрудников", ЭтаФорма, Ссылка);
		Форма.СписокСотрудников = СписокСотрудников;
		Форма.Заголовок = НСтр("ru='Сотрудники документа Невыходы №';uk='Співробітники документа Невиходи №'") + Номер + НСтр("ru=' от ';uk=' від '") + Формат(Дата,"ДФ=dd.MM.yyyy");
		Форма.Открыть();
		
	Иначе
		Предупреждение(НСтр("ru='Исправить можно только проведенный документ!';uk='Виправити можна лише проведений документ!'"))
	КонецЕсли;
	
КонецПроцедуры

// Процедура отмены документов-исправлений
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогами.ОтменитьИсправлениеДокумента(Ссылка);
	мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
	ПолучитьСотрудниковСИсправлениями();
	ОбновитьДоступностьЭлементовФормы();
	РаботаСДиалогами.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(мТекущийСотрудник),мТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник);
	Обновить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "Регулирование" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РаботаСДиалогами.РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации);
	УстановитьКнопкиИсправленияДокумента();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Установим видимость реквизита "Приказ"
	РаботаСДиалогами.УстановитьВидимостьПриказа(ЭтаФорма,Организация,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"));

КонецПроцедуры // ОрганизацияПриИзменении()

Процедура СпособРегистрацииВремениПриИзменении(Элемент)
	
	ОбновитьВидимостьПоСпособуРегистрацииВремени();
	СформироватьСписокПричинНевыхода();
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены И мСписокПричинНевыхода.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='В списке начислений не описано ни одного внутрисменного невыхода!';uk='У списку нарахувань не описано жодного внутрішньозмінного невиходу!'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерерассчитываемыйДокументПриИзменении(Элемент)
	
	ЭтоПерерасчет = Не ПерерассчитываемыйДокумент.Пустая();
	ОбновитьВидимостьПоПерерассчитываемомуДокументу(ЭтоПерерасчет);
	Если ЭтоПерерасчет Тогда // Копируем реквизиты документа
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ПерерассчитываемыйДокумент,"СпособРегистрацииВремени");
		ОбновитьВидимостьПоСпособуРегистрацииВремени();
	КонецЕсли;
	
КонецПроцедуры // ПерерассчитываемыйДокументПриИзменении()

Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	Если ЗначениеЗаполнено(мДокументыИсправление) Тогда
		Форма = КритерииОтбора.ДокументыИсправления.ПолучитьФорму(, ЭтаФорма);
		Форма.ИсходныйДокумент = Ссылка;
		Форма.Открыть();
	ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
		мДокументСторнирование.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ПерерассчитываемыйДокумент.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ

Процедура НачисленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Сторно Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);

	ИначеЕсли ДанныеСтроки.Назначение.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(51, 51, 153);
	
	ИначеЕсли ДанныеСтроки.Назначение.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(0, 128, 128);
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.Назначение.ОсновноеНазначение)
		И ДанныеСтроки.Назначение.ОсновноеНазначение <> ДанныеСтроки.Сотрудник
		ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки.Назначение.ОсновноеНазначение)
		И ДанныеСтроки.Назначение <> ДанныеСтроки.Сотрудник
		 Тогда
	     // это замены
		ОформлениеСтроки.ЦветТекста = Новый Цвет(80, 128, 128);
		
	КонецЕсли;
	
	Если НЕ ДанныеСтроки.ВидРасчета.Пустая() Тогда
		
		Если НЕ ДанныеСтроки.ВидРасчета.ЗачетОтработанногоВремени Тогда
			
			ОформлениеСтроки.Ячейки.ОтработаноДней.ТолькоПросмотр 			  = Истина;
			ОформлениеСтроки.Ячейки.ОтработаноЧасов.ТолькоПросмотр			  = Истина;
		
		КонецЕсли;
		
		Если НЕ ДанныеСтроки.ВидРасчета.ЗачетНормыВремени Тогда
			
			ОформлениеСтроки.Ячейки.НормаДней.ТолькоПросмотр 			 = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеСтроки.Сторно Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);

	ИначеЕсли ДанныеСтроки.Назначение.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(51, 51, 153);
	
	ИначеЕсли ДанныеСтроки.Назначение.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
	
		ОформлениеСтроки.ЦветТекста = Новый Цвет(0, 128, 128);
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.Назначение.ОсновноеНазначение)
		И ДанныеСтроки.Назначение.ОсновноеНазначение <> ДанныеСтроки.Сотрудник
		ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки.Назначение.ОсновноеНазначение)
		И ДанныеСтроки.Назначение <> ДанныеСтроки.Сотрудник
		 Тогда
	     // это замены
		ОформлениеСтроки.ЦветТекста = Новый Цвет(80, 128, 128);
		
	КонецЕсли;
	
	РаботаСДиалогами.ПриВыводеСтрокиНачисленийИУдержаний(ДанныеСтроки, ОформлениеСтроки, мДопСведенияОВидахРасчетаНачислений);

КонецПроцедуры

Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли; 
	
	ОбновитьТекущегоСотрудника();

	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	РазницаВМесяцах = (Год(ТекущаяСтрока.ДатаОкончания)*12 + Месяц(ТекущаяСтрока.ДатаОкончания)) - (Год(ТекущаяСтрока.ДатаНачала)*12 + Месяц(ТекущаяСтрока.ДатаНачала));
	Если РазницаВМесяцах > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Разбить строку начислений на помесячные записи?';uk='Розбити рядок нарахувань на помісячні записи?'");
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		ПроведениеРасчетов.РазбитьСтрокуНачисленийНаПомесячныеЗаписи(ТекущаяСтрока, Начисления);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ОбновитьТекущегоСотрудника();
	
КонецПроцедуры

Функция ПолучитьГрафикРаботыПоВидуВремени(Месяц, мСотрудник, мНазначение) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСотрудник",		мСотрудник );
	Запрос.УстановитьПараметр("парамНазначение",	мНазначение );
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	НачалоМесяца(Месяц) );
	
	ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Работники.Сотрудник    						КАК Назначение,
		|		ВЫБОР	КОГДА ДанныеКалендаряСотрудник.Сотрудник ЕСТЬ NULL 
		|					ТОГДА ДанныеКалендаря.ГрафикРаботы 
		|					ИНАЧЕ ДанныеКалендаряСотрудник.ГрафикРаботы 
		|				КОНЕЦ    							КАК ГрафикРаботы,
		|		ВЫБОР	КОГДА ДанныеКалендаряСотрудник.Сотрудник ЕСТЬ NULL 
		|					ТОГДА ДанныеКалендаря.НормаДнейЗаМесяц 
		|					ИНАЧЕ ДанныеКалендаряСотрудник.НормаДнейЗаМесяц 
		|				КОНЕЦ    							КАК НормаДнейЗаМесяц,
		|		ВЫБОР	КОГДА ДанныеКалендаряСотрудник.Сотрудник ЕСТЬ NULL 
		|					ТОГДА ДанныеКалендаря.НормаЧасовЗаМесяц 
		|					ИНАЧЕ ДанныеКалендаряСотрудник.НормаЧасовЗаМесяц 
		|				КОНЕЦ    							КАК НормаЧасовЗаМесяц
		|
		|   ИЗ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &парамНазначение ) КАК Работники
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			ГрафикиРаботы.ГрафикРаботы						КАК ГрафикРаботы,
		|			НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )		КАК ДатаМесяца,
		|			СУММА( ГрафикиРаботы.ОсновноеЗначение )			КАК НормаДнейЗаМесяц,
		|			СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
		|		ИЗ	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|		ГДЕ ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
		|		И	ГрафикиРаботы.Дата >= НАЧАЛОПЕРИОДА( &ДатаНачалаСобытия, МЕСЯЦ )	
		|		И	ГрафикиРаботы.Дата <= КОНЕЦПЕРИОДА( &ДатаНачалаСобытия, МЕСЯЦ )	
		|		СГРУППИРОВАТЬ ПО
		|			ГрафикиРаботы.ГрафикРаботы,
		|			НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )
		|	) КАК ДанныеКалендаря
		|	ПО		ДанныеКалендаря.ГрафикРаботы = Работники.ГрафикРаботы	
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			ГрафикиРаботы.ГрафикРаботы						КАК ГрафикРаботы,
		|			ГрафикиРаботы.Сотрудник							КАК Сотрудник,
		|			НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )		КАК ДатаМесяца,
		|			СУММА( ГрафикиРаботы.ОсновноеЗначение )			КАК НормаДнейЗаМесяц,
		|			СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
		|		ИЗ	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|		ГДЕ ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
		|		И ГрафикиРаботы.Сотрудник = &парамСотрудник 
		|		И	ГрафикиРаботы.Дата >= НАЧАЛОПЕРИОДА( &ДатаНачалаСобытия, МЕСЯЦ )	
		|		И	ГрафикиРаботы.Дата <= КОНЕЦПЕРИОДА( &ДатаНачалаСобытия, МЕСЯЦ )	
		|		СГРУППИРОВАТЬ ПО
		|			ГрафикиРаботы.ГрафикРаботы,
		|			ГрафикиРаботы.Сотрудник,
		|			НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )
		|	) КАК ДанныеКалендаряСотрудник
		|	ПО		ДанныеКалендаряСотрудник.ГрафикРаботы = Работники.Сотрудник	
		|		И	ДанныеКалендаряСотрудник.ДатаМесяца = ДанныеКалендаря.ДатаМесяца	
		|";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураГрафикаЗаМесяц = Новый Структура("ГрафикРаботы, НормаДнейЗаМесяц, НормаЧасовЗаМесяц");
	Если Выборка.Следующий() Тогда
		СтруктураГрафикаЗаМесяц.ГрафикРаботы = Выборка.ГрафикРаботы;
		СтруктураГрафикаЗаМесяц.НормаДнейЗаМесяц = Выборка.НормаДнейЗаМесяц;
		СтруктураГрафикаЗаМесяц.НормаЧасовЗаМесяц = Выборка.НормаЧасовЗаМесяц;
	Иначе
		СтруктураГрафикаЗаМесяц.ГрафикРаботы = Неопределено;
		СтруктураГрафикаЗаМесяц.НормаДнейЗаМесяц = 0;
		СтруктураГрафикаЗаМесяц.НормаЧасовЗаМесяц = 0;
	КонецЕсли;
	
	Возврат СтруктураГрафикаЗаМесяц;

КонецФункции // ПолучитьПериодИПроцентОплатыПоРаботнику()

Процедура НачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Перем  СтруктураГрафика;
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	СписокРаботников = ВыбранноеЗначение.Данные.Выгрузить();
	Для Каждого Сотр из СписокРаботников Цикл
		СтрокаНач = Начисления.Добавить();
		СтрокаНач.Назначение = Сотр.Сотрудник;
		Если ЗначениеЗаполнено(Сотр.Сотрудник.ОсновноеНазначение) Тогда
			СтрокаНач.Сотрудник =  Сотр.Сотрудник.ОсновноеНазначение;
		Иначе	
			СтрокаНач.Сотрудник = Сотр.Сотрудник;
		КонецЕсли;
		СтрокаНач.Авторасчет = Истина;
		СтрокаНач.ВидРасчета = ВыбранноеЗначение.Реквизиты.ВидРасчета;
		СтрокаНач.ДатаНачала = ВыбранноеЗначение.Реквизиты.ДатаНачала;
		СтрокаНач.БазовыйПериодНачало = ВыбранноеЗначение.Реквизиты.ДатаНачала;
		Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены Тогда
			СтрокаНач.ДатаОкончания = ВыбранноеЗначение.Реквизиты.ДатаОкончания;
		    СтрокаНач.БазовыйПериодКонец = ВыбранноеЗначение.Реквизиты.ДатаОкончания;
		Иначе
			СтрокаНач.ОплачиватьЧасов = ВыбранноеЗначение.Реквизиты.ОплачиватьЧасов;
			СтрокаНач.ДатаОкончания = СтрокаНач.ДатаНачала;
			СтрокаНач.БазовыйПериодКонец = СтрокаНач.ДатаОкончания;
		КонецЕсли;	
		
		СтруктураГрафика = ПолучитьГрафикРаботыПоВидуВремени(ВыбранноеЗначение.Реквизиты.ДатаНачала, СтрокаНач.Сотрудник, СтрокаНач.Назначение);
		СтрокаНач.ГрафикРаботы = СтруктураГрафика.ГрафикРаботы;
		СтрокаНач.НормаДнейЗаМесяц = СтруктураГрафика.НормаДнейЗаМесяц;
		СтрокаНач.НормаЧасовЗаМесяц = СтруктураГрафика.НормаЧасовЗаМесяц;
	КонецЦикла;	
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ Начисления

Процедура НачисленияСотрудникПриИзменении(Элемент)

	СтрокаНачислений = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если Не ЗначениеЗаполнено(СтрокаНачислений.Назначение) Тогда
		СтрокаНачислений.Назначение = СтрокаНачислений.Сотрудник;
	КонецЕсли;
	ПроведениеРасчетов.ПроставитьДанныеСтроки( СтрокаНачислений.Сотрудник, СтрокаНачислений.Назначение, СтрокаНачислений.ДатаНачала, ПериодРегистрации, ЭлементыФормы.Начисления.ТекущаяСтрока.ВидРасчета, ЭлементыФормы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры

Процедура НачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1,СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура НачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры

Процедура НачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры


Процедура НачисленияНазначениеПриИзменении(Элемент)

	СтрокаНачислений = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если Не ЗначениеЗаполнено(СтрокаНачислений.Сотрудник) Тогда
		СтрокаНачислений.Сотрудник = ?(ЗначениеЗаполнено(Элемент.Значение.ОсновноеНазначение), Элемент.Значение.ОсновноеНазначение, Элемент.Значение);
	КонецЕсли;
	ПроведениеРасчетов.ПроставитьДанныеСтроки( СтрокаНачислений.Сотрудник, Элемент.Значение, СтрокаНачислений.ДатаНачала, ПериодРегистрации, ЭлементыФормы.Начисления.ТекущаяСтрока.ВидРасчета, ЭлементыФормы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры

Процедура НачисленияНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, Организация, 1,СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура НачисленияНазначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры

Процедура НачисленияНазначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры

Процедура НачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЭлементыФормы.Начисления.ТекущаяСтрока.Сторно Тогда
		
		СтандартнаяОбработка = Ложь;
		ЭлементСписка = ВыбратьИзСписка(мСписокПричинНевыхода,Элемент,мСписокПричинНевыхода.НайтиПоЗначению(Элемент.Значение));
		Если ЭлементСписка <> Неопределено Тогда
			Элемент.Значение = ЭлементСписка.Значение
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	
	СтрокаНачислений = ЭлементыФормы.Начисления.ТекущаяСтрока;
	СтрокаНачислений.БазовыйПериодНачало = СтрокаНачислений.ДатаНачала;
	
	ЭтоЦелосменныйНевыход = СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
	Если ЭтоЦелосменныйНевыход Тогда
		СтрокаНачислений.ДатаОкончания = СтрокаНачислений.ДатаНачала;
		СтрокаНачислений.БазовыйПериодКонец = СтрокаНачислений.ДатаНачала;
	Иначе
		СтрокаНачислений.ДатаОкончания = Макс(СтрокаНачислений.ДатаОкончания,СтрокаНачислений.ДатаНачала);
		СтрокаНачислений.БазовыйПериодКонец = СтрокаНачислений.ДатаОкончания;
	КонецЕсли;
	
	ПроведениеРасчетов.ПроставитьДанныеСтроки( СтрокаНачислений.Сотрудник, СтрокаНачислений.Назначение, СтрокаНачислений.ДатаНачала, ПериодРегистрации, СтрокаНачислений.ВидРасчета, ЭлементыФормы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры

Процедура НачисленияДатаОкончанияПриИзменении(Элемент)

	СтрокаНачислений = ЭлементыФормы.Начисления.ТекущаяСтрока;
	СтрокаНачислений.ДатаОкончания = Макс(СтрокаНачислений.ДатаОкончания,СтрокаНачислений.ДатаНачала);
	СтрокаНачислений.БазовыйПериодКонец = СтрокаНачислений.ДатаОкончания;
	
КонецПроцедуры

Процедура НачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Начисления, ОформленияСтрок, Истина);
	
КонецПроцедуры

Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущаяСтрока = Элемент.ТекущаяСтрока;
		ТекущаяСтрока.Сторно = Ложь;
			
		ТекущаяСтрока.Авторасчет = Истина;
		
		ТекущаяСтрока.ДатаНачала = ПериодРегистрации;
		ТекущаяСтрока.ДатаОкончания = КонецМесяца(ПериодРегистрации);
		ТекущаяСтрока.БазовыйПериодНачало = ТекущаяСтрока.ДатаНачала;
		ТекущаяСтрока.БазовыйПериодКонец = ТекущаяСтрока.ДатаОкончания;
		
		ПроведениеРасчетов.ПроставитьДанныеСтроки(ТекущаяСтрока.Сотрудник, ТекущаяСтрока.Назначение, ТекущаяСтрока.ДатаНачала, ПериодРегистрации, ЭлементыФормы.Начисления.ТекущаяСтрока.ВидРасчета, ЭлементыФормы.Начисления.ТекущаяСтрока);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура НачисленияРезультатПриИзменении(Элемент)
		
	Если Элемент.Значение <> мРезультат Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мРезультат = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияОплаченоДнейЧасовПриИзменении(Элемент)
		
	Если Элемент.Значение <> мОтработаноДней Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мОплаченоДнейЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияОтработаноДнейПриИзменении(Элемент)
		
	Если Элемент.Значение <> мОтработаноДней Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мОтработаноДней = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияОтработаноЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мОтработаноЧасов Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мОтработаноЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияКалендарныеДниПриИзменении(Элемент)
		
	Если Элемент.Значение <> мКалендарныеДни Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мКалендарныеДни = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияНормаДнейПриИзменении(Элемент)
		
	Если Элемент.Значение <> мНормаДней Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мНормаДней = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияНормаЧасовПриИзменении(Элемент)
		
	Если Элемент.Значение <> мНормаЧасов Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мНормаЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры


мДопСведенияОВидахРасчетаНачислений = Новый Соответствие;
мСписокПричинНевыхода	= Новый СписокЗначений;

мДокументыИсправление = Новый Массив;
мСотрудникиИсправление = Новый Соответствие;
