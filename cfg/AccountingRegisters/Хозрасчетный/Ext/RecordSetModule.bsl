Перем мДействияПередЗаписьюВыполнены Экспорт;
Перем мКолвоПроводокЗаписанныхВИБ Экспорт;

Процедура ПроверитьПроводку(Проводка)

	СчетДт = Проводка.СчетДт;
	СчетКт = Проводка.СчетКт;
	
	Если НЕ СчетДт.Валютный И Проводка.ВалютаДт <> Неопределено Тогда
	    Проводка.ВалютаДт = Неопределено;
	КонецЕсли; 

	Если НЕ СчетДт.Валютный И Проводка.ВалютнаяСуммаДт <> 0 Тогда
	    Проводка.ВалютнаяСуммаДт = Неопределено;
	КонецЕсли; 

	Если НЕ СчетКт.Валютный И Проводка.ВалютаКт <> Неопределено Тогда
	    Проводка.ВалютаКт = Неопределено;
	КонецЕсли; 

	Если НЕ СчетКт.Валютный И Проводка.ВалютнаяСуммаКт <> 0 Тогда
	    Проводка.ВалютнаяСуммаКт = Неопределено;
	КонецЕсли; 

	// Проверим сочетание баланса и забаланса
	Если СчетДт.Забалансовый И НЕ СчетКт.Забалансовый Тогда
		Проводка.СчетКт          = Неопределено;
		Проводка.ВалютаКт        = Неопределено;
		Проводка.КоличествоКт    = 0;
		Проводка.ВалютнаяСуммаКт = 0;
		Проводка.СубконтоКт.Очистить();
		Проводка.НалоговоеНазначениеКт = Неопределено;
		Проводка.СуммаНУКт = 0;
	КонецЕсли; 

	Если СчетКт.Забалансовый И НЕ СчетДт.Забалансовый Тогда
		Проводка.СчетДт          = Неопределено;
		Проводка.ВалютаДт        = Неопределено;
		Проводка.КоличествоДт    = 0;
		Проводка.ВалютнаяСуммаДт = 0;
		Проводка.СубконтоДт.Очистить();
		Проводка.НалоговоеНазначениеДт = Неопределено;
		Проводка.СуммаНУДт = 0;
	КонецЕсли; 

	Если НЕ СчетКт.НалоговыйУчет И Проводка.НалоговоеНазначениеКт <> Неопределено Тогда
	    Проводка.НалоговоеНазначениеКт = Неопределено;
	КонецЕсли; 

	Если НЕ СчетКт.НалоговыйУчет И Проводка.СуммаНУКт <> 0 Тогда
	    Проводка.СуммаНУКт = 0;
	КонецЕсли; 

	Если НЕ СчетДт.НалоговыйУчет И Проводка.НалоговоеНазначениеДт <> Неопределено Тогда
	    Проводка.НалоговоеНазначениеДт = Неопределено;
	КонецЕсли; 

	Если НЕ СчетДт.НалоговыйУчет И Проводка.СуммаНУДт <> 0 Тогда
	    Проводка.СуммаНУДт = 0;
	КонецЕсли; 
	
КонецПроцедуры

Функция СчетПринадлежитРодителю(Счет, СчетРодитель)
	
	Результат = Ложь;
	Если ТипЗнч(СчетРодитель) = Тип("Массив") Тогда
		Для каждого ИндСчетРодитель Из СчетРодитель Цикл
			Если Счет = ИндСчетРодитель ИЛИ Счет.ПринадлежитЭлементу(ИндСчетРодитель) Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	Иначе	
		Если Счет = СчетРодитель ИЛИ Счет.ПринадлежитЭлементу(СчетРодитель) Тогда
			Результат = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
 
//Процедура обрабатывает проводки, в котрых Дт и Кт отличаются только аналитикой ДокументыРасчетовСКонтрагентами ("Зачет авансов" когда счет взаиморасчетов = счет авансов)
//сумма такой проводки распределяется между 
Процедура ОбработатьПроводкиПерезачетВнутриСчета()

	//Расчеты
	БУ = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками;
	ВестиРасчетыПоДокументам = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	Если НЕ ВестиРасчетыПоДокументам Тогда
		Возврат;
	КонецЕсли;
	
	ВидКонтрагенты = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	ВидДоговоры = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	ВидДокРасч = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами;

	ПроводкиПерезачетВнутриСчета = Новый Массив;
	ПроводкиВзаиморасчетов = Новый Массив;
	Для Каждого Проводка Из ЭтотОбъект Цикл
		Если (Проводка.СчетДт = Проводка.СчетКт) И 
			(НЕ Проводка.СубконтоДт[ВидДокРасч]=Неопределено) И
			(НЕ Проводка.СубконтоДт[ВидКонтрагенты]=Неопределено И Проводка.СубконтоДт[ВидКонтрагенты]=Проводка.СубконтоКт[ВидКонтрагенты]) И 
			(НЕ Проводка.СубконтоДт[ВидДоговоры]=Неопределено И Проводка.СубконтоДт[ВидДоговоры]=Проводка.СубконтоКт[ВидДоговоры]) 
			 Тогда
			
			ПроводкиПерезачетВнутриСчета.Добавить(Проводка);
		ИначеЕсли 
			((НЕ Проводка.СубконтоДт[ВидДокРасч]=Неопределено) И (НЕ Проводка.СубконтоДт[ВидКонтрагенты]=Неопределено) И (НЕ Проводка.СубконтоДт[ВидДоговоры]=Неопределено)) ИЛИ
			((НЕ Проводка.СубконтоКт[ВидДокРасч]=Неопределено) И (НЕ Проводка.СубконтоКт[ВидКонтрагенты]=Неопределено) И (НЕ Проводка.СубконтоКт[ВидДоговоры]=Неопределено)) Тогда
			
			ПроводкиВзаиморасчетов.Добавить(Проводка);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого ПроводкаЗачета Из ПроводкиПерезачетВнутриСчета Цикл
		
		ВалютныйСчет = ПроводкаЗачета.СчетКт.Валютный;
		Для Каждого Проводка Из ПроводкиВзаиморасчетов Цикл
			МожноЗачесть = Ложь;
			Если (Проводка.СчетДт = ПроводкаЗачета.СчетКт) И 
				(Проводка.СубконтоДт[ВидДокРасч]=ПроводкаЗачета.СубконтоКт[ВидДокРасч]) И
				(Проводка.СубконтоДт[ВидКонтрагенты]=ПроводкаЗачета.СубконтоКт[ВидКонтрагенты]) И 
				(Проводка.СубконтоДт[ВидДоговоры]=ПроводкаЗачета.СубконтоКт[ВидДоговоры]) 
				И ((Проводка.Сумма>0) = (ПроводкаЗачета.Сумма>0))
				 Тогда
				 
				// зачет по дебету
				МожноЗачесть = Истина;
				СторонаЗачета = "Дт";
				СторонаКор = "Кт";
				СторонаАналитики = "Дт"; // Совпадает с СторонаЗачета
				ЗнакСуммы = 1;
				
			ИначеЕсли (Проводка.СчетКт = ПроводкаЗачета.СчетДт) И 
				(Проводка.СубконтоКт[ВидКонтрагенты]=ПроводкаЗачета.СубконтоДт[ВидКонтрагенты]) И 
				(Проводка.СубконтоКт[ВидДоговоры]=ПроводкаЗачета.СубконтоДт[ВидДоговоры]) И 
				(Проводка.СубконтоКт[ВидДокРасч]=ПроводкаЗачета.СубконтоДт[ВидДокРасч]) 
				И ((Проводка.Сумма>0) = (ПроводкаЗачета.Сумма>0))
				Тогда
				
				// зачет по кредиту
				МожноЗачесть = Истина;
				СторонаЗачета = "Кт";
				СторонаКор = "Дт";
				СторонаАналитики = "Кт"; // Совпадает с СторонаЗачета
				ЗнакСуммы = 1;
				
			ИначеЕсли (Проводка.СчетКт = ПроводкаЗачета.СчетКт) И 
				(Проводка.СубконтоКт[ВидКонтрагенты]=ПроводкаЗачета.СубконтоКт[ВидКонтрагенты]) И 
				(Проводка.СубконтоКт[ВидДоговоры]=ПроводкаЗачета.СубконтоКт[ВидДоговоры]) И 
				(Проводка.СубконтоКт[ВидДокРасч]=ПроводкаЗачета.СубконтоКт[ВидДокРасч]) И 
// Суммы разного знака
				((Проводка.Сумма<0) = (ПроводкаЗачета.Сумма>0)) Тогда
				
				// зачет по кредиту
				МожноЗачесть = Истина;
				СторонаЗачета = "Кт";
				СторонаКор = "Кт";
				СторонаАналитики = "Дт"; // НЕ совпадает с СторонаЗачета
				ЗнакСуммы = -1;
				
			КонецЕсли; 
			
			Если МожноЗачесть Тогда
			
				СуммаПереброски = Мин(ЗнакСуммы*Проводка.Сумма, ПроводкаЗачета.Сумма);
				Если ВалютныйСчет Тогда
					СуммаПереброскиВалютная = Мин(ЗнакСуммы*Проводка["ВалютнаяСумма"+СторонаЗачета], ПроводкаЗачета["ВалютнаяСумма"+СторонаЗачета]);
				Иначе
					СуммаПереброскиВалютная = 0;
				КонецЕсли;
				Если СуммаПереброски=0 И СуммаПереброскиВалютная = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
				Если (СуммаПереброски = ЗнакСуммы*Проводка.Сумма) И (НЕ ВалютныйСчет ИЛИ (СуммаПереброскиВалютная = ЗнакСуммы*Проводка["ВалютнаяСумма"+СторонаЗачета])) Тогда
					// сумма переброски совпадает с суммой найденной проводки по взаиморасчетам
					// просто заменяем аналитику в проводке взаиморасчетов
					Проводка["Субконто"+СторонаЗачета][ВидДокРасч] = ПроводкаЗачета["Субконто"+СторонаАналитики][ВидДокРасч];
					
					Проводка.Содержание = Проводка.Содержание + " ("+ ПроводкаЗачета.Содержание+")";
					
					//корректируем проводку зачета
					ПроводкаЗачета.Сумма = ПроводкаЗачета.Сумма - СуммаПереброски;
					Если ВалютныйСчет Тогда
						ПроводкаЗачета.ВалютнаяСуммаДт = ПроводкаЗачета.ВалютнаяСуммаДт - СуммаПереброскиВалютная;
						ПроводкаЗачета.ВалютнаяСуммаКт = ПроводкаЗачета.ВалютнаяСуммаКт - СуммаПереброскиВалютная;
					КонецЕсли;
					
				Иначе 
					// сумма переброски меньше суммы найденной проводки по взаиморасчетам
					
					КорСчетВалютный = Проводка["Счет"+СторонаКор].Валютный;
					КорСчетНалоговый = Проводка["Счет"+СторонаКор].НалоговыйУчет;
					
					// новая проводка
					НоваяПроводка = ЭтотОбъект.Вставить(ЭтотОбъект.Индекс(Проводка)+1);
					
					// копируем все свойства от старой идентично
					ЗаполнитьЗначенияСвойств(НоваяПроводка,Проводка);
					ВидыСубконтоКт = Проводка.СчетКт.ВидыСубконто;
					Для К = 1 По ВидыСубконтоКт.Количество() Цикл
						НоваяПроводка.СубконтоКт[ВидыСубконтоКт[К-1].ВидСубконто] = Проводка.СубконтоКт[ВидыСубконтоКт[К-1].ВидСубконто];
					КонецЦикла; 	
					ВидыСубконтоДт = Проводка.СчетДт.ВидыСубконто;
					Для К = 1 По ВидыСубконтоДт.Количество() Цикл
						НоваяПроводка.СубконтоДт[ВидыСубконтоДт[К-1].ВидСубконто] = Проводка.СубконтоДт[ВидыСубконтоДт[К-1].ВидСубконто];
					КонецЦикла; 		
					
					//корректируем аналитику по ДокументыРасчетовСКонтрагентами, Суммы и Содержание
					НоваяПроводка["Субконто"+СторонаЗачета][ВидДокРасч] = ПроводкаЗачета["Субконто"+СторонаАналитики][ВидДокРасч];
					
					НоваяПроводка.Сумма = ЗнакСуммы*СуммаПереброски;
					Если ВалютныйСчет Тогда
						НоваяПроводка["ВалютнаяСумма"+СторонаЗачета] = ЗнакСуммы*СуммаПереброскиВалютная;
					КонецЕсли;
					
					Если КорСчетВалютный Тогда
						КорВалютнаяСуммаПереброски = ?(Проводка.Сумма = 0, 0, Окр(Проводка["ВалютнаяСумма"+СторонаКор]* СуммаПереброски / Проводка.Сумма,3,РежимОкругления.Окр15как20));
						НоваяПроводка["ВалютнаяСумма"+СторонаКор] = ЗнакСуммы*КорВалютнаяСуммаПереброски;
					КонецЕсли;
					Если КорСчетНалоговый Тогда
						КорСуммаНУПереброски = ?(Проводка.Сумма = 0, 0, Окр(Проводка["СуммаНУ"+СторонаКор]* СуммаПереброски / Проводка.Сумма,3,РежимОкругления.Окр15как20));
						НоваяПроводка["СуммаНУ"+СторонаКор] = ЗнакСуммы*КорСуммаНУПереброски;
					КонецЕсли;
					
					НоваяПроводка.Содержание = НоваяПроводка.Содержание + " ("+ ПроводкаЗачета.Содержание+")";
					
					//корректируем исходную проводку взаиморасчетов
					Проводка.Сумма = Проводка.Сумма - ЗнакСуммы*СуммаПереброски;
					Если ВалютныйСчет Тогда
						Проводка["ВалютнаяСумма"+СторонаЗачета] = Проводка["ВалютнаяСумма"+СторонаЗачета] - ЗнакСуммы*СуммаПереброскиВалютная;
					КонецЕсли;
					Если КорСчетВалютный Тогда
						Проводка["ВалютнаяСумма"+СторонаКор] = Проводка["ВалютнаяСумма"+СторонаКор] - ЗнакСуммы*КорВалютнаяСуммаПереброски;
					КонецЕсли;
					Если КорСчетНалоговый Тогда
						Проводка["СуммаНУ"+СторонаКор] = Проводка["СуммаНУ"+СторонаКор] - ЗнакСуммы*КорСуммаНУПереброски;
					КонецЕсли;
					
					//корректируем проводку зачета
					ПроводкаЗачета.Сумма = ПроводкаЗачета.Сумма - СуммаПереброски;
					Если ВалютныйСчет Тогда
						ПроводкаЗачета.ВалютнаяСуммаДт = ПроводкаЗачета.ВалютнаяСуммаДт - СуммаПереброскиВалютная;
						ПроводкаЗачета.ВалютнаяСуммаКт = ПроводкаЗачета.ВалютнаяСуммаКт - СуммаПереброскиВалютная;
					КонецЕсли;
					
				КонецЕсли; 
			КонецЕсли; 
			Если (ПроводкаЗачета.Сумма = 0) И (НЕ ВалютныйСчет ИЛИ (ПроводкаЗачета.ВалютнаяСуммаДт = 0)) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла;
	
	// удаляем проводки зачета, суммы которых удалось распределить полностью
	Для каждого ПроводкаЗачета Из ПроводкиПерезачетВнутриСчета Цикл
		ВалютныйСчет = ПроводкаЗачета.СчетДт.Валютный;
		Если (ПроводкаЗачета.Сумма = 0) И (НЕ ВалютныйСчет ИЛИ (ПроводкаЗачета.ВалютнаяСуммаДт = 0)) Тогда
			ЭтотОбъект.Удалить(ПроводкаЗачета);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
 
Процедура ВыполнитьДействияПередЗаписьюДвижений() Экспорт

	КвоПроводок    = ЭтотОбъект.Количество();
	КвоДобавленных = 0;
	
	Если мКолвоПроводокЗаписанныхВИБ = Неопределено Тогда
		мКолвоПроводокЗаписанныхВИБ = 0;
	КонецЕсли;	
	
	Если КвоПроводок = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработатьПроводкиПерезачетВнутриСчета();
	КвоПроводок    = ЭтотОбъект.Количество();
	
	СтруктураПараметров = Новый Структура;
	
	Для К = 1 По КвоПроводок Цикл
		
		Индекс = К - 1 + КвоДобавленных;
		Проводка = ЭтотОбъект[Индекс];
		
	КонецЦикла;
	
	мДействияПередЗаписьюВыполнены = Истина;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КвоПроводок    = ЭтотОбъект.Количество();
	КвоДобавленных = 0;
	
	Если мКолвоПроводокЗаписанныхВИБ = Неопределено Тогда
		мКолвоПроводокЗаписанныхВИБ = 0;
	КонецЕсли;	
	
	Если КвоПроводок > 0 Тогда
	    Заголовок = СокрЛП(ЭтотОбъект.Отбор.Регистратор.Значение);
	Иначе
		Возврат;
	КонецЕсли; 
	
	Если НЕ мДействияПередЗаписьюВыполнены = Истина Тогда
		ОбработатьПроводкиПерезачетВнутриСчета()
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	Для К = 1 По КвоПроводок Цикл
		
		Индекс = К - 1 + КвоДобавленных;
		Проводка = ЭтотОбъект[Индекс];
		
		Если НЕ ЗначениеЗаполнено(Проводка.СчетДт) И не Проводка.СчетКт.Забалансовый Тогда
			ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru='Проводка № ¤1¤ <¤2¤>: не заполнен счет дебета.';uk='Проводка № ¤1¤ <¤2¤>: не заповнений рахунок дебету.'"), (Проводка.НомерСтроки+1), Проводка.Содержание),Отказ,Заголовок);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Проводка.СчетКт) И не Проводка.СчетДт.Забалансовый Тогда
			ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru='Проводка № ¤1¤ <¤2¤>: не заполнен счет кредита.';uk='Проводка № ¤1¤ <¤2¤>: не заповнений рахунок кредиту.'"), (Проводка.НомерСтроки+1), Проводка.Содержание),Отказ,Заголовок);
		КонецЕсли;
		
		Если Не Отказ Тогда
			ПроверитьПроводку(Проводка);
		КонецЕсли;
		
	КонецЦикла;
		
	КвоПроводокОбщее    = ЭтотОбъект.Количество();
	Для К = 1 По КвоПроводокОбщее Цикл
		
		Индекс = К - 1;
		Проводка = ЭтотОбъект[Индекс];
		
		// Приведение пустых значений субконто составного типа.
		Для Каждого Субконто Из Проводка.СубконтоДт Цикл
			ТипыСубконто = Субконто.Ключ.ТипЗначения.Типы();
			Если ТипыСубконто.Количество() > 1
			   И НЕ ЗначениеЗаполнено(Субконто.Значение) 
			   И НЕ (Субконто.Значение = Неопределено) Тогда
				Проводка.СубконтоДт.Вставить(Субконто.Ключ, Неопределено);
			ИначеЕсли ТипыСубконто.Количество() = 1	И Субконто.Значение = Неопределено Тогда
				Проводка.СубконтоДт.Вставить(Субконто.Ключ, ОбщегоНазначения.ПустоеЗначениеТипа(ТипыСубконто[0]));
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			ТипыСубконто = Субконто.Ключ.ТипЗначения.Типы();
			Если ТипыСубконто.Количество() > 1
			   И НЕ ЗначениеЗаполнено(Субконто.Значение) 
			   И НЕ (Субконто.Значение = Неопределено) Тогда
				Проводка.СубконтоКт.Вставить(Субконто.Ключ, Неопределено);
			ИначеЕсли ТипыСубконто.Количество() = 1	И Субконто.Значение = Неопределено Тогда	
				Проводка.СубконтоКт.Вставить(Субконто.Ключ, ОбщегоНазначения.ПустоеЗначениеТипа(ТипыСубконто[0]));
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если РежимЗаписи = Ложь Тогда
		мКолвоПроводокЗаписанныхВИБ = мКолвоПроводокЗаписанныхВИБ + КвоПроводокОбщее;
	КонецЕсли;
	
КонецПроцедуры

