////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поля табличного документа
//аккуратно переименовать в зависимости наименований ПолейТабличногоДокумента
Перем мОтчетДопГарантии;

Перем мСлужебныеДанные;
Перем ФормаОбр Экспорт;
Перем ЧастноеЛицо;

Перем тбСхемыXML;

// хранят имена многострочных разделов
//переименовать в зависимости от имен многострочных разделов текущего отчета
Перем мИдГруппы;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов;
Перем мСтруктураИсхКолвоСтрокРазделов;

// хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц;

//хранит массив панелей формы
Перем МассивПанелей;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы;

Перем ОписаниеТиповЧисло,ОписаниеТиповДата,ОписаниеТиповСтрока;

Перем мПечатныеФормы Экспорт;

Перем СпП Экспорт;
Перем мСохранятьРасшифровку Экспорт;
Перем ЕстьДуплекс;

Перем мМенеджерЗвит1С Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПолучитьНастройкиПроверкиЗаполенения(Макет = "СоставПоказателей2018") Экспорт

	СтруктураПроверкиЗаполенения = Новый Структура();
	
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(Макет);
	
	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ТаблицаПроверкаЗаполнения = Новый ТаблицаЗначений;
		ТаблицаПроверкаЗаполнения.Колонки.Добавить( "ИмяПоказателя", 	   ОписаниеТиповСтрока100 );
		ТаблицаПроверкаЗаполнения.Колонки.Добавить( "ПроверкаЗаполненияРеквизитов",  ОписаниеТиповЧисло15 );
		ТаблицаПроверкаЗаполнения.Колонки.Добавить( "ИмяТабличногоПоля",   ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			ИмяПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);

			Если ИмяПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(ИмяПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// вариант заполнения ячейки определяется по колонке 6 макета
			стрПроверкаЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			ПроверкаЗаполненияРеквизитов    = ? (ПустаяСтрока(стрПроверкаЗаполнения), 0, Число(стрПроверкаЗаполнения));
			ИмяТабличногоПоля	  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);

			Если ПроверкаЗаполненияРеквизитов <> 0  Тогда
				// формируем таблицу значений, содержащей состав показателей отчета
				НоваяСтрока = ТаблицаПроверкаЗаполнения.Добавить();
				НоваяСтрока.ИмяПоказателя   	 = ИмяПоказателя;
				НоваяСтрока.ПроверкаЗаполненияРеквизитов   = ПроверкаЗаполненияРеквизитов;
				НоваяСтрока.ИмяТабличногоПоля    = ?(ЗначениеЗаполнено(ИмяТабличногоПоля), ИмяТабличногоПоля, ИмяСтраницы);
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаПроверкаЗаполнения.Количество() > 0 Тогда
			СтруктураПроверкиЗаполенения.Вставить(ИмяСтраницы, ТаблицаПроверкаЗаполнения);
		Конецесли;

	КонецЦикла;
	
	Возврат СтруктураПроверкиЗаполенения;
	
КонецФункции

Процедура ПроверитьЗаполнениеОсобыхПоказателей(ТаблицаНезаполненныхПоказателей,ДанныеОтчета)

	Если ЧастноеЛицо = 1 Тогда
		ИмяПоказателя = "HFO"; 	
	Иначе
		ИмяПоказателя = "HBOS"; 	
	КонецЕсли;
	                   
	Для Каждого ИмяПанели из МассивПанелей Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеОтчета["ПолеТабличногоДокумента"+ИмяПанели][ИмяПоказателя]) Тогда
			 НезаполненныйПоказатель = ТаблицаНезаполненныхПоказателей.Строки.Добавить();
			 НезаполненныйПоказатель.ИмяПоказателя 		= ИмяПоказателя;
			 НезаполненныйПоказатель.ИмяТабличногоПоля  = "ПолеТабличногоДокумента"+ИмяПанели;
		 КонецЕсли;      		
		 
	КонецЦикла;
		
КонецПроцедуры

Функция ПроверитьКорректностьЗаполненияОтчета(ДанныеОтчета, ОбработкаЭкспортXML)
	
	ТаблицаНезаполненныхПоказателей = Новый ДеревоЗначений;
	ТаблицаНезаполненныхПоказателей.Колонки.Добавить( "ИмяПоказателя", 		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаНезаполненныхПоказателей.Колонки.Добавить( "ИмяТабличногоПоля",  Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	
	ПроверитьЗаполнениеОсобыхПоказателей(ТаблицаНезаполненныхПоказателей,ДанныеОтчета);
	
	СтруктураПроверки = ПолучитьНастройкиПроверкиЗаполенения();
	Для каждого СтраницаОтчета Из СтруктураПроверки Цикл
		
		ГруппыОбязательныхПолей = Новый Соответствие;
		
		// Проверим заполенение полей не в группах
		Для каждого Поле  Из СтраницаОтчета.Значение Цикл
			
			// поле - строка таблицы значений
			Если Поле.ПроверкаЗаполненияРеквизитов <> 0 Тогда
				
				Если Поле.ПроверкаЗаполненияРеквизитов > 1 Тогда
					// это группа обязательных полей, добавим в соответствие, проверим позже
					ГруппаОбязательныхПолей = ГруппыОбязательныхПолей[Поле.ПроверкаЗаполненияРеквизитов];
					Если ГруппаОбязательныхПолей = Неопределено Тогда
						ГруппаОбязательныхПолей = Новый Массив();
					КонецЕсли;
					ГруппаОбязательныхПолей.Добавить(Поле);
					ГруппыОбязательныхПолей[Поле.ПроверкаЗаполненияРеквизитов] = ГруппаОбязательныхПолей;
					Продолжить;	
				КонецЕсли;
				
				// табличное поле может быть "СлужебныеДанные" или другим
				ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + Поле.ИмяТабличногоПоля;
				
				ЗначениеПоказателя = ДанныеОтчета[ИмяТекТабличногоПоля][Поле.ИмяПоказателя];												
				Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				     // показатель не заполнен
					 НезаполненныйПоказатель = ТаблицаНезаполненныхПоказателей.Строки.Добавить();
				     НезаполненныйПоказатель.ИмяПоказателя 		= Поле.ИмяПоказателя;
					 НезаполненныйПоказатель.ИмяТабличногоПоля  = ИмяТекТабличногоПоля;
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла;
		
		// Проверим заполенение полей в группах
		Для каждого ГруппаОбязательныхПолей Из ГруппыОбязательныхПолей Цикл
			
			ЕстьЗаполненный = Ложь;
			Для каждого Поле Из ГруппаОбязательныхПолей.Значение Цикл
				
				// табличное поле может быть "СлужебныеДанные" или другим
				ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + Поле.ИмяТабличногоПоля;
				
				ЗначениеПоказателя = ДанныеОтчета[ИмяТекТабличногоПоля][Поле.ИмяПоказателя];												
				Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
					ЕстьЗаполненный	= Истина;
					Прервать;
				КонецЕсли;
			
			КонецЦикла;
			
			
			Если Не ЕстьЗаполненный Тогда
				
				НезаполненныйПоказательГруппа = ТаблицаНезаполненныхПоказателей.Строки.Добавить();
				НезаполненныйПоказательГруппа.ИмяПоказателя = НСтр("ru = 'Ни один из показателей:'; uk = 'Жоден з показників:'");
		
				Для каждого Поле Из ГруппаОбязательныхПолей.Значение Цикл
				
					// табличное поле может быть "СлужебныеДанные" или другим
				    ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + Поле.ИмяТабличногоПоля;
					НезаполненныйПоказатель = НезаполненныйПоказательГруппа.Строки.Добавить();
					НезаполненныйПоказатель.ИмяПоказателя 		= Поле.ИмяПоказателя;
					НезаполненныйПоказатель.ИмяТабличногоПоля   = ИмяТекТабличногоПоля;
				
			    КонецЦикла;
				 
			 КонецЕсли;	
			
		КонецЦикла; 
		
	КонецЦикла;
	
	ФормаОшибок = ОбработкаЭкспортXML.ПолучитьФорму("ФормаОтображенияНезаполенныхПоказателей", ЭтаФорма);

	Если ТаблицаНезаполненныхПоказателей.Строки.Количество()> 0 Тогда
		
		ФормаОшибок.ДеревоСтрок = ТаблицаНезаполненныхПоказателей;
		Для каждого Строка Из ФормаОшибок.ДеревоСтрок.Строки Цикл
			ФормаОшибок.ЭлементыФормы.ДеревоСтрок.Развернуть(Строка,Истина);	
		КонецЦикла;
		
		ФормаОшибок.Открыть();
		
		ТекстВопроса = НСтр("ru = 'Существуют незаполненные показатели, которые являются обязательными для выгрузки отчета в формате XML! Выгрузить отчет?'; uk = ""Існують незаповнені показники, що є обов'язковими для вивантаження звіту в форматі XML! Выгрузить отчет?""");
		
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, Нстр("ru = 'Ошибка!'; uk = 'Помилка!'")) <> КодВозвратаДиалога.Да Тогда
			// ошибка
			Возврат Истина;	
		КонецЕсли;
	Иначе
		
		Если ФормаОшибок.Открыта() Тогда
		
			ФормаОшибок.Закрыть();	
		
		КонецЕсли;

	КонецЕсли;

	// нет ошибки
	Возврат Ложь;
	
КонецФункции // ()

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Перем ИмяПоказателя;
	Перем ИмяТабличногоПоля;
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		
		// если это оповещение из формы списка незаполенных показателей
		Если  ЗначениеВыбора.Свойство("ИмяПоказателя", 		ИмяПоказателя)
			И ЗначениеВыбора.Свойство("ИмяТабличногоПоля", 	ИмяТабличногоПоля) Тогда
		
			Попытка
				
				//Если ИмяПоказателя = "HTIN" Тогда
				//	Если ЧастноеЛицо = 1  Тогда
				//		ИмяПоказателя = "HTINF";
				//	Иначе
				//		ИмяПоказателя = "HTINJ";						
				//	КонецЕсли;
				//КонецЕсли;
				
				// переключаемся на текущий отчет
				Активизировать();
		
				ТекущийЭлемент = ЭлементыФормы[ИмяТабличногоПоля];
				
				// выделяем ячейку так, чтобы она оказалось видимой при любом положении полосы прокрутки.
				ТекущийЭлемент.ВыделенныеОбласти.Очистить();
				ТекущийЭлемент.ВыделенныеОбласти.Вставить(ТекущийЭлемент.Области.Найти(ИмяПоказателя),0);
				ТекущийЭлемент.ВыделенныеОбласти.Удалить(ТекущийЭлемент.Область("R1C1"));
				
			Исключение
			КонецПопытки;	
			
		КонецЕсли;	
	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьНачальныеНастройки(Макет = "СоставПоказателей2018") Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(Макет);

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(15, ДопустимаяДлина.Переменная));

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			
			Если    чВариантЗаполнения  <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();
	
	УстановитьСистемуюОбластьПечатиОтчета();
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//  требуется редакция по наименованиям ПолейТабличныхДокументов
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОтчетДопГарантии";
	СтрокаУровня1.Представление            = НСтр("ru='Отчет о трудоустройстве граждан с доп. гарантиями';uk='Звіт про працевлаштування громадан з дод. гарантіями'");
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаОтчетДопГарантии";
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()


// Обрабатывает полученный из формы ФормаНастройкиСтраниц дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//  унифицирована для всех отчетов
Процедура УстановитьСистемуюОбластьПечатиОтчета()

	Если ТипЗнч(мДеревоСтраницОтчета) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаУровня1 Из мДеревоСтраницОтчета.Строки Цикл
		
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			
			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						
						УстановитьСистемуюОбластьПечатиСтраницыОтчета(СтруктураПараметров);
						
					КонецЦикла;

					Продолжить;

				КонецЕсли;
				
				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				
				УстановитьСистемуюОбластьПечатиСтраницыОтчета(СтруктураПараметров);
				
			КонецЦикла;

			Продолжить;

		КонецЕсли;
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);

		УстановитьСистемуюОбластьПечатиСтраницыОтчета(СтруктураПараметров);
		
	КонецЦикла;

КонецПроцедуры // 

// Процедура управляет системным выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//  процедура унифицирована
Процедура УстановитьСистемуюОбластьПечатиСтраницыОтчета(СтруктураПараметровЛиста)
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
  
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	
	ТабличноеПоле = ЭлементыФормы[ИмяТабличногоПоля];
	
	Если НЕ ТабличноеПоле.Области.Найти("ПредупреждениеОПечати") = Неопределено Тогда
	    ИмяОбластиПечати = "ПредупреждениеОПечати";
	ИначеЕсли ПустаяСтрока(ИмяОбластиТаблПоля) Тогда
		ИмяОбластиПечати = "";
	Иначе
		ИмяОбластиПечати = ИмяОбластиТаблПоля;
	КонецЕсли;
	
	ТабличноеПоле.ОбластьПечати = ТабличноеПоле.Области.Найти(ИмяОбластиПечати);
	
КонецПроцедуры // ВывестиНаПечатьЛист()

// Функция проверяет вхождение области ячеек табличного документа 
// в многострочный раздел.
//
// Параметры:
//  ТекущаяОбласть - область ячеек табличного документа;
//
// Возвращаемое значение:
//  строка, имя раздела, содержащего искомую область ячеек.
//  В случае, когда область не входит ни в какой многострочный раздел,
//  возвращает Неопределено.
//  актуальна только для случая наличия таких разделов в отчете
//  для декларации - нужна, походе что коррекция не требуется
Функция РазделТекущейОбласти(ТекущаяОбласть)

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено; // отсутствует активная область табличного документа
	КонецЕсли;
	ИмяТекущейОбласти   = ТекущаяОбласть.Имя;
	Если (Сред(ИмяТекущейОбласти,1,3) = "TB1") Тогда
		ИмяАктивногоРаздела = Сред(ИмяТекущейОбласти,1,3) + Сред(ИмяТекущейОбласти,10) ;
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		Если СтруктураГруппы.Колонки.Найти(ИмяАктивногоРаздела) <> Неопределено Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции // РазделТекущейОбласти()

//// Функция округляет число согласно установленной размерности чисел.
////
//// Параметры:
////  ИсходноеЧисло - заданное число;
////
//// Возвращаемое значение:
////  число, округленное с заданной точностью с учетом установленной единицы измерения.
//// редакция не требуется,унифицирована для всех отчетов 
//Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

//	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

//	Возврат ОкругленноеЧисло;

//КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//  актуально только для отчетов, содержащих многострочные разделы
//  похоже а ее унифицированность
//вернуться с многострочніми разделами - приложения К1/2
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы)	
	Перем ТекТабличноеПоле;
	
	Если (ИдГруппы = мИдГруппы) Тогда
		ТекТабличноеПоле = мОтчетДопГарантии;		
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
// актуально только для отчетов, содержащих многострочные разделы
//  похоже а ее унифицированность
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()
	Перем ИмяГруппы;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	Если ИмяТекущейСтраницыПанели = "ОтчетДопГарантии" Тогда
		ТекТабличноеПоле = мОтчетДопГарантии;
		ИмяГруппы = мИдГруппы;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция определяет страницу основной панели формы, на которой табличный документ
// содержит показатель по переданному параметром "КодПоказателя" коду.
//
// Параметры:
//  КодПоказателя - строка, код показателя.
//
// Возвращаемое значение:
//  строка, имя найденной страницы основной панели формы.
//  Если страница не найдена, возвращает Неопределено.
//  унифицирована для всех отчетов
Функция ОпределитьСтраницуПанелиПоКодуПоказателя(КодПоказателя)
	Перем ИмяСтраницы;

	НайденнаяСтрока = мТаблицаСоставПоказателей.Найти(КодПоказателя, "КодПоказателяПоСоставу, КодПоказателяПоФорме");
	Если НайденнаяСтрока <> Неопределено Тогда
		ИмяСтраницы = НайденнаяСтрока.ИмяПоляТаблДокумента;
	КонецЕсли;

	Возврат ИмяСтраницы;
	
КонецФункции // ОпределитьСтраницуПанелиПоКодуПоказателя()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
// унифицирована, используется как при работе с многостраничными разделами, так и при сохранении
// данных отчета
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураДанныхПоля = Новый Структура;

	ОбрабатываемыеОбласти = Новый Структура;
	Если НЕ ТабличноеПоле.Области.Найти("_СохрЯчейкиВнеТаблиц_001") = Неопределено Тогда
		
		Инд = 1;
		Пока 1 = 1 Цикл
			Если НЕ ТабличноеПоле.Области.Найти("_СохрЯчейкиВнеТаблиц_" + Формат(Инд, "ЧЦ=3; ЧН=; ЧВН=")) = Неопределено Тогда
				ОбрабатываемыеОбласти.Вставить("_" + Инд,  ТабличноеПоле.ПолучитьОбласть("_СохрЯчейкиВнеТаблиц_" + Формат(Инд, "ЧЦ=3; ЧН=; ЧВН=")));
				Инд = Инд + 1;
			Иначе
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
	Иначе		
		
		ОбрабатываемыеОбласти.Вставить("_1",  ТабличноеПоле); 
		
	КонецЕсли;
	
	ОбластиТабличногоПоля = ТабличноеПоле.Области;
	Для каждого ОбрабатываемаяОбласть_ Из ОбрабатываемыеОбласти Цикл
		
		ОбрабатываемаяОбласть = ОбрабатываемаяОбласть_.Значение.Области;
		
		Для Каждого ТекОбласть Из ОбрабатываемаяОбласть Цикл
			
			Если ТипЗнч(ТекОбласть) = Тип("РисунокТабличногоДокумента") Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяОбласть = ОбластиТабличногоПоля[ТекОбласть.Имя];
			
			//пропускаем рисунки табличного документа
	        Если ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
			   Продолжить;
			КонецЕсли;

			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Продолжить;
			КонецЕсли;

			ИмяПоказателя      = ТекущаяОбласть.Имя;
			ЗначениеПоказателя = ТекущаяОбласть.Значение;

			СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

		КонецЦикла;
    		
	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//  унифицирована, редакции не требуется
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			МассивТипов = Новый Массив; 
			МассивТипов.Добавить(Тип("Строка"));
			ОписаниеТиповСтрока15  = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(15, ДопустимаяДлина.Переменная));

			МассивТипов = Новый Массив; 
			МассивТипов.Добавить(Тип("Строка"));
			ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));

			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Число"));
			ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Число"));
			ОписаниеТиповЧисло15   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2018");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2018");

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(15, ДопустимаяДлина.Переменная));

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			Если    чВариантЗаполнения  <> 0 Тогда

				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку.

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						
						НайденнаяСтрока = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
						Если НайденнаяСтрока = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						ИначеЕсли  НайденнаяСтрока.ВариантЗаполнения <> ВариантЗаполнения Тогда
						    НайденнаяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,а в текущей
							// версии - отключено. В этом случае удаляем эту ячейку из таблицы пользовательских
							// настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета.Строки Цикл

			Если мПользовательскиеНастройкиСтраниц.Строки.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц.Строки Цикл

			Если мДеревоСтраницОтчета.Строки.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл
	
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()
 
// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина" );

	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
	
	ИзмШапкаПериода();

КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом даты представления отчета в соответствующие
// ячейки табличного документа.
// нужно существенная коррекция в зависимости от формы отчета
Процедура ЗаполнитьДатуВЯчейках()

	Для каждого ИмяПанели Из МассивПанелей Цикл
		Дата = Формат(ДатаПодписи,"ДФ= дд/ММ/гггг");	
		Для НомЯчейки = 1 По 10 Цикл
			Если  Сред(Дата, НомЯчейки, 1)<>"/" Тогда
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["Д" + НомЯчейки].Значение = Сред(Дата, НомЯчейки, 1);
			Иначе
				Продолжить;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Процедура управляет выводом значений в соответствующие
// ячейки табличного документа.
//Процедура ЗаполнитьЗначениеВЯчейках(Длина, ИмяОбласти,Значение)
//	Для каждого ИмяПанели Из МассивПанелей Цикл		
//		Для НомЯчейки = 1 По Длина Цикл
//			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области[ИмяОбласти + НомЯчейки].Значение = Сред(Строка(Значение), НомЯчейки, 1);
//		КонецЦикла;
//	КонецЦикла;
//КонецПроцедуры	

//Служит для заполения некоторых (недоступных) служебных пераметров
//
Функция ОбновитьПоСлужебнымДанным()
	
	// Дополнительная проверка и установка значения признака юр/физ лица
	// при восстановлении сохраненного отчета данный параметр терялся
	Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ЧастноеЛицо = 0;
	Иначе	
		ЧастноеЛицо = 1;
	Конецесли;
	
	//TIN из раздела DHEAD, сама ячейка с таким именем находится в служебной области
	//Если ЧастноеЛицо = 1 Тогда
	//	Если ЗначениеЗаполнено(мСлужебныеДанные.Области.HTINF.Значение) Тогда
	//		мСлужебныеДанные.Области.TIN.Значение = мСлужебныеДанные.Области.HTINF.Значение;
	//	КонецЕсли;
	//Иначе
	//	Если ЗначениеЗаполнено(мСлужебныеДанные.Области.HTINJ.Значение) Тогда
	//		мСлужебныеДанные.Области.TIN.Значение = мСлужебныеДанные.Области.HTINJ.Значение;
	//	КонецЕсли;
	//КонецЕсли;
	//	
	//Если  ЧастноеЛицо = 0 Тогда
	//	ЗаполнитьЗначениеВЯчейках(8,  "ЕДРПОУ", мСлужебныеДанные.Области.HTINJ.Значение);
	//	ЗаполнитьЗначениеВЯчейках(10, "ЕДРПОУФ",мСлужебныеДанные.Области.HTINF.Значение);
	//Иначе
	//	ЗаполнитьЗначениеВЯчейках(10, "ЕДРПОУФ",мСлужебныеДанные.Области.HTINF.Значение);
	//	ЗаполнитьЗначениеВЯчейках(8,  "ЕДРПОУ", мСлужебныеДанные.Области.HTINJ.Значение);
	//КонецЕсли;
	//
	//ЗаполнитьЗначениеВЯчейках(12, "ИНН",мСлужебныеДанные.Области.HNPDV.Значение);
	//ЗаполнитьЗначениеВЯчейках(9,  "СД", мСлужебныеДанные.Области.HTINSD.Значение);
	//ЗаполнитьЗначениеВЯчейках(9,  "ПрН",мСлужебныеДанные.Области.HTINNR.Значение);
	//ЗаполнитьЗначениеВЯчейках(9,  "УИ", мСлужебныеДанные.Области.HTINUM.Значение);
	//
	//ЗаполнитьЗначениеВЯчейках(10,  "ИННРук",мСлужебныеДанные.Области.HKBOS.Значение);
	//ЗаполнитьЗначениеВЯчейках(10,  "ИННГБ", мСлужебныеДанные.Области.HKBUH.Значение);
	//
	//Для НомЯчейки = 1 По 5 Цикл
	//	мДекларацияПоНДС.Области["Инд"   + НомЯчейки].Значение = Сред(мСлужебныеДанные.Области.HZIP.Значение, НомЯчейки, 1);
	//	мЗаявление.Области["Инд"   + НомЯчейки].Значение       = Сред(мСлужебныеДанные.Области.HZIP.Значение, НомЯчейки, 1);
	//КонецЦикла;
	//
	//Для каждого ИмяПанели Из МассивПанелей Цикл
	//	Дата = Формат(мСлужебныеДанные.Области.HFILL.Значение,"ДФ= дд/ММ/гггг");	
	//	Для НомЯчейки = 1 По 10 Цикл
	//		Если  Сред(Дата, НомЯчейки, 1)<>"/" Тогда
	//			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["Д" + НомЯчейки].Значение = Сред(Дата, НомЯчейки, 1);
	//		Иначе
	//			Продолжить;
	//		КонецЕсли;	
	//	КонецЦикла;
	//КонецЦикла; 
  		
КонецФункции

Процедура ИзмШапкаПериода()  
	
	//дата подачи отчета в деларации и во всех приложниях 
	//Если НЕ ЗначениеЗаполнено(мСлужебныеДанные.Области.HFILL.Значение) Тогда
	//	мСлужебныеДанные.Области.HFILL.Значение  = РабочаяДата;	
	//КонецЕсли;
	
	//все ячейки из служебной области
	//мСлужебныеДанные.Области.HZY.Значение = Формат(Год(мДатаНачалаПериодаОтчета),"ЧЦ=4;ЧГ=;");
	//мСлужебныеДанные.Области.PERIOD_YEAR.Значение = мСлужебныеДанные.Области.HZY.Значение;
	//
	//Если (Периодичность = Перечисления.Периодичность.Месяц)  Тогда    
	//	мСлужебныеДанные.Области.HZKV.Значение = "";
	//	мСлужебныеДанные.Области.HZM.Значение =  Месяц(мДатаНачалаПериодаОтчета);
	//	мСлужебныеДанные.Области.PERIOD_MONTH.Значение = мСлужебныеДанные.Области.HZM.Значение;
	//	мСлужебныеДанные.Области.PERIOD_TYPE.Значение = 1;
	//Иначе   
	//	мСлужебныеДанные.Области.HZKV.Значение = Месяц(КонецКвартала(мДатаНачалаПериодаОтчета))/3;
	//	мСлужебныеДанные.Области.PERIOD_MONTH.Значение = мСлужебныеДанные.Области.HZKV.Значение*3;
	//	мСлужебныеДанные.Области.HZM.Значение = "";
	//	мСлужебныеДанные.Области.PERIOD_TYPE.Значение = 2;
	//КонецЕсли;
	ОбновитьПоСлужебнымДанным();
	
КонецПроцедуры 	

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации()
	
	//сначала все постоянные сведения из справочника "Организации"
	ОргНазв   = Организация.НаименованиеПолное;
	
	//мОтчетДопГарантии.Области.HNAME.Значение = ОргНазв;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ИННРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","ИННБух");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","ИНН");

	Сведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей);
	
	ФИОДиректора          = Сведения.ФИОРук;
	ФИОГлавБуха           = Сведения.ФИОБух;
	ИННРук       		  = Сведения.ИННРук;
	ИННБух                = Сведения.ИННБух;
	КодЕДРПОУ             = Сведения.КодПоЕДРПОУ;
	ИНН                   = Сведения.ИНН;
	
	Для каждого ИмяПанели Из МассивПанелей Цикл
		ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["HBUH"].Значение      = ФИОГлавБуха; 
	КонецЦикла;   

	//мСлужебныеДанные.Области.HNPDV.Значение = ИНН;
	//мСлужебныеДанные.Области.HKBUH.Значение = ИННБух;
	//мСлужебныеДанные.Области.HKBOS.Значение = ИННРук;
	
	Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ЧастноеЛицо = 0;
	Иначе	
		ЧастноеЛицо = 1;
	Конецесли;	
	
	Если  ЧастноеЛицо = 1 Тогда
		//мСлужебныеДанные.Области.HTINJ.Значение = "";
		//мСлужебныеДанные.Области.HTINF.Значение = Строка(КодЕДРПОУ);
		Для каждого ИмяПанели Из МассивПанелей Цикл
			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["HFO"].Значение = ФИОДиректора; 
			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["HBOS"].Значение = "";
		КонецЦикла;   
	Иначе
		//мСлужебныеДанные.Области.HTINJ.Значение = Строка(КодЕДРПОУ);
				
		Для каждого ИмяПанели Из МассивПанелей Цикл
			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["HBOS"].Значение = ФИОДиректора; 
			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["HFO"].Значение = "";
		КонецЦикла;   
		//мСлужебныеДанные.Области.HTINF.Значение = "";
	КонецЕсли;
	
	//мОтчетДопГарантии.Области.HLOC.Значение = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
	//мОтчетДопГарантии.Области.HTEL.Значение = УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	//мОтчетДопГарантии.Области.HFAX.Значение = УправлениеКонтактнойИнформацией.ПолучитьФаксИзКонтактнойИнформации(Организация);
	//мОтчетДопГарантии.Области.HEMAIL.Значение = УправлениеКонтактнойИнформацией.ПолучитьEmailИзКонтактнойИнформации(Организация);
		
	//получить индекс из контактной информации и емэйл через функции общего
	//Если ЗначениеЗаполнено(Организация) Тогда
	//	ВидАдреса = Справочники.ВидыКонтактнойИнформации["ЮрАдресОрганизации"];
	//	
	//	Запрос = Новый Запрос;
	//	
	//	Запрос.УстановитьПараметр("Объект", Организация);
	//	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
	//	Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
	//	
	//	Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда
	//		
	//		Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо 
	//		 ИЛИ РегламентированнаяОтчетность.ИдКонфигурации() = "ЗУП" Тогда
	//			ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	//			Объект    = Организация;
	//		Иначе
	//			ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица;
	//			Объект    = Организация.ИндивидуальныйПредприниматель;
	//		КонецЕсли;			
	//		
	//		Запрос = Новый Запрос;
	//		
	//		Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
	//		Запрос.УстановитьПараметр("Объект", Объект);
	//		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
	//		
	//		Запрос.Текст = "
	//		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//		|	КонтактнаяИнформация.Поле1
	//		|ИЗ
	//		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//		|ГДЕ
	//		|	КонтактнаяИнформация.Объект = &Объект
	//		|	И
	//		|	КонтактнаяИнформация.Тип = &Тип
	//		|	И
	//		|	КонтактнаяИнформация.Вид = &Вид
	//		|";
	//		РезультатЗапроса = Запрос.Выполнить();
	//		Если НЕ РезультатЗапроса.Пустой() Тогда
	//			Индекс = РезультатЗапроса.Выгрузить()[0].Поле1;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//  
	//мСлужебныеДанные.Области.HZIP.Значение = Индекс;
	
	//мСлужебныеДанные.Области.C_DOC_TYPE.Значение = 0; //номер исправленного доекумента. Для первого подающегося документа  = 0
	//мСлужебныеДанные.Области.C_DOC_CNT.Значение  = 1;  //номер документа в периоде. 
	
	ИзмШапкаПериода();
	
	ОбновитьПоСлужебнымДанным();
		
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(НСтр("ru='Отчет о ценах производителей промышленной продукции: при выводе сумм в гривнях точность не может превышать 2 знака';uk='Звіт про ціни виробників промислової продукції: при виведенні сум у гривнях точність не може перевищувати 2 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(НСтр("ru='Отчет о ценах производителей промышленной продукции: при выводе сумм в тысячах гривень точность не может превышать 3 знака';uk='Звіт про ціни виробників промислової продукції: при виведенні сум у тисячах гривень точність не може перевищувати 3 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(НСтр("ru='Отчет о ценах производителей промышленной продукции: при выводе сумм в миллионах гривень точность не может превышать 6 знаков';uk='Звіт про ціни виробників промислової продукції: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

	Сообщить(НСтр("ru='После изменения формата вывода значений, для корректного расчета итогов необходимо перезаполнить отчет!';uk='Після зміни формату виводу значень, для корректного розрахунку підсумків треба перезаполвнити звіт!'"), СтатусСообщения.Внимание);	
	
КонецПроцедуры // ПроверитьТочность()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)
	
	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округляются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()
 
// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	//формирование строки формата для присваивания ее полю "Формат" в свойствах ячейки
	//формат зависит от выбранной на форме отчета единицы измерения (представления) его показателей
	//присвоение форма происходит только для тех показателей. для которых установлен признак "Е",
	//т.е. признак денежного формата с регулируемой точностью
	//вообще в макете еще можно задать числовой формат с неизменяемой точностью "Ч", форма строки "С"
	//и даты "Д"
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		мДелитель = 1;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		мДелитель = 1000;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		мДелитель = 1000000;

	КонецЕсли;

	//таблица мТаблицаСоставПоказателей формируется по макету показателейц отчета
	//в модуле самого объекта, т.е. отчета
	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		// только для денежных показателей с регулируемой
		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			Иначе
				НСтр = 1;
				Пока 1=1 Цикл
					
					ИмяОбласти = Сред(ИмяПоказателя,1,3) + Формат(НСтр,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(ИмяПоказателя,4);
					
					Если ТекТабличноеПоле.Области.Найти(ИмяОбласти) = Неопределено Тогда
						Прервать;
					КонецЕсли;
					
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяОбласти];
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
					
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//  возможнозедась также понадобится обрабатывать многострочные группы...
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = ОпределитьСтраницуПанелиПоКодуПоказателя(ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Коммент       = Строка.Комментарий;

			
			Если ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области.Найти(ИмяПоказателя) = Неопределено Тогда
				//проверим на многострочность
					
				ТекИнд = 1;
				ТекИндСтр = Формат(ТекИнд,"ЧЦ=6; ЧДЦ=0; ЧВН=; ЧГ=");
				ИмяПоказателяМногострочка = Лев(ИмяПоказателя,3) + ТекИндСтр + Сред(ИмяПоказателя,4);
				
				Если ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области.Найти(ИмяПоказателяМногострочка) = Неопределено Тогда
					// это не многострочка, а ошибка
					Продолжить;
				КонецЕсли;
				
				ТекИнд = 1;
				Пока НЕ ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области.Найти(ИмяПоказателяМногострочка) = Неопределено Цикл
				
					ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателяМногострочка];
					Если (Не ПустаяСтрока(Коммент)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
						ТекОбластьЯчеек.Примечание.Текст = Коммент;
					КонецЕсли;

					Ключ = "_" + ВариантЗаполнения;
					мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателяМногострочка].ЦветФона = ЦветФона;
					
					ТекИнд = ТекИнд + 1;
					ТекИндСтр = Формат(ТекИнд,"ЧЦ=6; ЧДЦ=0; ЧВН=; ЧГ=");
					ИмяПоказателяМногострочка = Лев(ИмяПоказателя,3) + ТекИндСтр + Сред(ИмяПоказателя,4);
				КонецЦикла;
				
			Иначе	
				
				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Коммент)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Коммент;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				
			КонецЕсли;
			
			
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку(ИмяГруппы = Неопределено)
	Перем СтруктураГруппы;
	
	Если ИмяГруппы = Неопределено Тогда
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	КонецЕсли;
	
	Если ИмяГруппы = Неопределено Тогда 
		Сообщить(НСтр("ru='Установите курсор на строке многострочной части. Сейчас вы выбрали не верную строку!';uk='встановіть курсор на строку багатостроковї частини! Зараз ві обрали не вірну строку!'"), СтатусСообщения.Внимание);
		Возврат;
    КонецЕсли; 
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	
	ИмяПервойЯчейкиПоследнейСтроки = Сред(СтруктураГруппы.Колонки[0].Имя,1,3) + Формат(КолСтрок,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(СтруктураГруппы.Колонки[0].Имя,4);
	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );
    КолСтрокНов = КолСтрок + 1;
	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл                    
		ИмяКолонки          = Колонка.Имя;
		
		//Если ...
		ИмяОбластиЯчейки    = Сред(ИмяКолонки,1,3) + Формат(КолСтрок,   "ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(ИмяКолонки,4);
		ИмяНовОбластиЯчейки = Сред(ИмяКолонки,1,3) + Формат(КолСтрокНов,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(ИмяКолонки,4);
		//КонецЕсли;
		
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
		
		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
		
		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
		
		// очищаем значения ячеек вставленной области
		Если (ОбластьЯчейки.СодержитЗначение)  Тогда
			ОбластьЯчейки.Очистить();
			ОбластьЯчейки.Примечание.Текст = "";
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число(ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;
			
			ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
			
		КонецЕсли;
	КонецЦикла;
	
	ОбластьТекстовыйНомер = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх,1,ОбластьЯчейки.Верх,1 );
	ОбластьТекстовыйНомер.Текст = Строка(КолСтрок + 1);
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = Сред (СтруктураГруппы.Колонки[0].Имя,1,3) + Формат(КолСтрокНов,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред (СтруктураГруппы.Колонки[0].Имя,4);
	
	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИмяГруппы = Неопределено Тогда
		Сообщить(НСтр("ru='Не выбрана удаляемая строка многострочного раздела.';uk='Не обрано строку багаторядкового розділу, що видаляється'"), СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить(НСтр("ru='Не выбрана удаляемая строка многострочного раздела.';uk='Не обрано строку багаторядкового розділу, що видаляється'"), СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

		Попытка
				НомУдаляемойСтроки = Число(Сред(ИмяЯчейки,4,6));
				КоличествоСтрокПослеУдаления = СтруктураГруппы.Количество() -1;
				Ответ = Вопрос(НСтр("ru='Удалить выбранную строку?"
				"(Внимание! данная операция необратима)';uk='Видалити обраний рядок?"
				"(Увага! дана операція необоротна)'"), РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Да);

  				Если Ответ <> КодВозвратаДиалога.Да Тогда
					Возврат;
				КонецЕсли;

		Исключение
			Ответ = Вопрос(НСтр("ru='Удалить последнюю строку?"
								"(Внимание! данная операция необратима)';uk='Видалити останній рядок?"
								"(Увага! дана операція необоротна)'"), РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Да);

				Если Ответ <> КодВозвратаДиалога.Да Тогда
					Возврат;
				КонецЕсли;
			НомУдаляемойСтроки = СтруктураГруппы.Количество();
		КонецПопытки;
 
	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = Сред(СтруктураГруппы.Колонки[0].Имя,1,3) + Формат(НомУдаляемойСтроки,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(СтруктураГруппы.Колонки[0].Имя,4);
    
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		// Определим область удаляемой строки
		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

		// непосредственно удаляем область строки табличного документа
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда    
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
              	ТекСтрока = СтруктураГруппы[НСтр-1];
                НСтрНов = НСтр - 1;
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки    = Сред(Колонка.Имя,1,3) + Формат(НСтр,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(Колонка.Имя,4);
					НовоеИмяСдвинутойЯчейки = Сред(Колонка.Имя,1,3) + Формат(НСтрНов,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(Колонка.Имя,4);

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если НЕ(ОбластьСдвинутойЯчейки.СодержитЗначение) Тогда
						// обновляем порядковый номер строки
						СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
						ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;
				
				ОбластьТекстовыйНомер = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх,1,ОбластьСдвинутойЯчейки.Верх,1 );
				ОбластьТекстовыйНомер.Текст = Строка(НСтрНов);
				
			КонецЦикла;

		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
					
				ИмяЯчейки    = Сред(КолонкаТаблицы.Имя,1,3) + Формат(НомерСтрокиВФормеТаблицы,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(КолонкаТаблицы.Имя,4);
				
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если НЕ(ОбластьЯчейкиТаблицы.СодержитЗначение) Тогда
					ПервыйНомерВГруппе = 1;
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	
	ИмяТекущейОбласти    = Сред(СтруктураГруппы.Колонки[0].Имя,1,3) + Формат(НомТекущейСтроки,"ЧЦ=6;ЧВН=0;ЧГ=;") +  Сред(СтруктураГруппы.Колонки[0].Имя,4);
	
	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()	

// Обновляет пользовательские настройки при изменении версии формы.
// похоже, что актуальна только для отчетов, в которых присутствуют
// реквизиты, с помощью которых пользователь может сам корректировать
// формат вывода для каждого конретного показателя (с помощью наличия соотв реквизитов на форме
// отчета, указывать, можно ли заполнять автоматом, а также ввод суммы корректировки), 
// пока такой сервис был доступен только для отчетов по МСФО 
Процедура ОбновитьПользовательскиеНастройки(СписокСохранения)
    Перем ДанныеМногострочныхРазделов;
	Перем ИсходноеКоличествоСтрокГруппы;
	
	Сообщить(НСтр("ru='Измененилась версия формы отчета."
"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
"Виконується відновлення користувальницьких настройок.'"), СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если Модифицированность ИЛИ ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить(НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Оновлення користувальницьких настройок успішно завершене!'"));

	Иначе

		Сообщить(НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі користувальницьких настройок не виявлені!'"));

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
// похоже унифицирована и актуальна только при наличии таких разделов
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для обоих многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		    НСтрНов = НСтр + 1;
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				ИмяКолонки    = Колонка.Имя;
				ИмяЯчейки    = Сред(ИмяКолонки,1,3) + Формат(НСтр,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(ИмяКолонки,4);
				ИмяНовОбластиЯчейки = Сред(ИмяКолонки,1,3) + Формат(НСтрНов,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(ИмяКолонки,4);
						
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейки.СодержитЗначение Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;

				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

			КонецЦикла;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
    ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

 КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Открывает форму документа ФормаНастройкиСтраниц с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//  унифицирована и актуальна только при наличии таких разделов
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиСтраниц = ПолучитьФорму("ФормаНастройкиСтраниц", ЭтаФорма, "дляВыбораСтраницОтчета");

	Если ФормаНастройкиСтраниц.Открыта() Тогда
		ФормаНастройкиСтраниц.Активизировать();
		Если Вопрос(НСтр("ru='Предыдущая операция выбора листов не завершена."
"Завершить?';uk='Попередня операція вибору аркушів не завершена."
"Завершити?'"),РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиСтраниц.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиСтраниц.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиСтраниц.мВариантВыбора          = ВариантВыбора;

	ВыбранноеЗначение = ФормаНастройкиСтраниц.ОткрытьМодально();

	Если ВыбранноеЗначение <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = ВыбранноеЗначение;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

Процедура РазбитьПечатнуюФорму(ПечФорма, ИмяФормы = "")
	
	УчитыватьАвтомасштаб = (Сред(ИмяФормы,1,6) = "Деклар");

	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	Если ЕстьДуплекс Тогда
		НовТаблДок = Новый ТабличныйДокумент();
	КонецЕсли;
	
	Сч = 0;
	Пока Сч < ПечФорма.ВысотаТаблицы Цикл
		 Сч = Сч + 1;
		 
		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			
			// проверим, не должна ли предпоследняя строка печататься вместе со текущей ("не влезшей") строкой.
			// если так, то "откатимся" вверх
			Пока ПослВерх < Сч-1 И ПечФорма.ПолучитьОбласть(Сч-1, , Сч-1, ).Область().ВместеСоСледующим Цикл
			  Сч = Сч - 1;
			КонецЦикла; 
			
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		Если НЕ ЕстьДуплекс Тогда
			НовТаблДок = Новый ТабличныйДокумент();
		КонецЕсли;
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		Если НЕ ЕстьДуплекс Тогда
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
		КонецЕсли;
	КонецЕсли;
	Если ЕстьДуплекс Тогда
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры


// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
// унифицирована, но актуально только для отчетов с наличием таких многостраничных разделов
// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//  процедура унифицирована
Процедура ВывестиНаПечатьЛист(СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
  
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	ПечатнаяФорма = Новый ТабличныйДокумент();

	ТабличноеПоле = ЭлементыФормы[ИмяТабличногоПоля];
	Если ПустаяСтрока(ИмяОбластиТаблПоля) Тогда
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть();
	Иначе
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть(ИмяОбластиТаблПоля);
	КонецЕсли;
	
	ПечатнаяФорма.Вывести(ОбластьПечати);
		
	РазбитьПечатнуюФорму(ПечатнаяФорма, ИмяЛиста);
 
КонецПроцедуры // ВывестиНаПечатьЛист()

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//   унифицирована, но актульная для отчетов, их имеющих
// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  похоже унифицирована, используется при  восстановлении сохраненных данных
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		///////////////////////////////////////////////////////
		// получаем описание координат каждой колонки многострочной части (лево, право, высота)
		СтруктураКоординатЯчеек = Новый Структура();
		ВысотаСтроки = 0;
		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			
			ИмяКолонки          = Колонка.Имя;
			
			ИмяОбластиЯчейки    = Сред(ИмяКолонки,1,3) + Формат(1,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(ИмяКолонки,4);
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];

			Координаты = Новый Структура();
			// определяем границы ячейки исходной области
			Координаты.Вставить("НомерВерхСтрокиЯчейки",  ОбластьЯчейки.Верх);
			Координаты.Вставить("НомерНижнСтрокиЯчейки",  ОбластьЯчейки.Низ);
			Координаты.Вставить("НомерЛевоКолонкиЯчейки", ОбластьЯчейки.Лево);
			Координаты.Вставить("НомерПравКолонкиЯчейки", ОбластьЯчейки.Право);
		
			СтруктураКоординатЯчеек.Вставить(ИмяКолонки, Координаты);
			
			Если ВысотаСтроки < ОбластьЯчейки.Низ - ОбластьЯчейки.Верх + 1 Тогда
				ВысотаСтроки = ОбластьЯчейки.Низ - ОбластьЯчейки.Верх + 1;
			КонецЕсли;
			
		КонецЦикла;
			
		///////////////////////////////////////////////////////
		// вставляем необходимое количество строк за один раз
		ИмяПервойЯчейкиПоследнейСтроки = Сред(СтруктураГруппы.Колонки[0].Имя,1,3) + Формат(ИсходноеКоличествоСтрокГруппы,"ЧЦ=6;ЧВН=0;ЧГ=;")  +  Сред(СтруктураГруппы.Колонки[0].Имя,4);
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

		// номера строк исходной области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
		
		ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
		// добавляем в таблицу новые строки
		ИсходнаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти + (ТекущееКоличествоСтрокГруппы - ИсходноеКоличествоСтрокГруппы - 1) * ВысотаСтроки, );	
		ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть,ИсходнаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		///////////////////////////////////////////////////////
		// переименовываем все ячейки многострочной части сверху вниз
		// при этом удаляем старые имена, если они есть
		Для НомерСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомерПроставлен = Ложь;
			
			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = Сред(ИмяКолонки,1,3) + Формат(НомерСтроки,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(ИмяКолонки,4);
				
				Если НомерСтроки <= ИсходноеКоличествоСтрокГруппы Тогда
					// удаляем старые имана (они сдвинуты)
					ТекТабличноеПоле.Области[ИмяОбластиЯчейки].Имя = "";
				КонецЕсли;
				
				// определяем границы ячейки заданной строки и колонки 
				НомерВерхСтрокиЯчейки  = СтруктураКоординатЯчеек[ИмяКолонки].НомерВерхСтрокиЯчейки + ВысотаСтроки * (НомерСтроки - 1);
				НомерНижнСтрокиЯчейки  = СтруктураКоординатЯчеек[ИмяКолонки].НомерНижнСтрокиЯчейки + ВысотаСтроки * (НомерСтроки - 1);
				НомерЛевоКолонкиЯчейки = СтруктураКоординатЯчеек[ИмяКолонки].НомерЛевоКолонкиЯчейки;
				НомерПравКолонкиЯчейки = СтруктураКоординатЯчеек[ИмяКолонки].НомерПравКолонкиЯчейки;

				// Назначаем имя ячейки области,
				ОбластьЯчейки = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
                ОбластьЯчейки.Имя = ИмяОбластиЯчейки; 
				
				// очищаем значения ячеек 
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ОбластьЯчейки.Очистить();
					// вставляем номер
					Если Не НомерПроставлен Тогда
						ОбластьТекстовыйНомер = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх,1,ОбластьЯчейки.Верх,1 );
						ОбластьТекстовыйНомер.Текст = Строка(НомерСтроки);
						НомерПроставлен = Истина;
					КонецЕсли;
					
				Иначе
					ОбластьЯчейки.Текст  = Строка(НомерСтроки);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
            ИмяКолонки          = КолонкаТаблицы.Имя;

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;

			ИмяЯчейки    = Сред(ИмяКолонки,1,3) + Формат(НомерСтрокиВФормеТаблицы,"ЧЦ=6;ЧВН=0;ЧГ=;") +  Сред(ИмяКолонки,4);
					
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
// очень похоже, что в реготчетах не используется (отстутсвуют соотв реквизиты на форме)
// такой сервис был только в отчетах в МСФО
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;
	
	Если Тип ("РисунокТабличногоДокумента") = ТипЗнч (ТекущаяЯчейка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	
	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Коммент           = НайденнаяСтрока.Комментарий;
	
	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Коммент;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);
	
КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет();
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
// очень похоже, что в реготчетах не используется (отстутсвуют соотв реквизиты на форме)
// такой сервис был только в отчетах в МСФО
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//   очень похоже, что в реготчетах не используется (отстутсвуют соотв реквизиты на форме)
// такой сервис был только в отчетах в МСФО
Процедура ИзменитьКомментарийПоЯчейке(Коммент)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Коммент;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Коммент;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//  унифицирована для всех отчетов
//Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя)

//	ИмяСтраницыПанели = ОпределитьСтраницуПанелиПоКодуПоказателя(ИмяПоказателя);

//	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели);
//	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

//		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
//		Если НайденнаяСтрока <> Неопределено Тогда

//			НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;

//			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
//			Если ВариантЗаполнения = 1 Тогда
//				// заполняется только вручную
//				Возврат;
//			ИначеЕсли ВариантЗаполнения = 2 Тогда
//				// автоматически, с возможностью ручной корректировки
//				Дельта             = НайденнаяСтрока.Дельта;
//				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
//			КонецЕсли;

//		КонецЕсли;
//	КонецЕсли;

//	ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыПанели].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

//КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемых 
//и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//  унифицирована для всех отчетов
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле )

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		
		Если Тип ("РисунокТабличногоДокумента") <> ТипЗнч (ТекущаяОбласть) Тогда
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяОбласть.Защита = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(Врег(ТекущаяОбласть.Имя), ВРег("Штампик")) > 0  Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяОбласть.Очистить();
		КонецЕсли;
	КонецЦикла;
      
КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
// унифицирована для всех отчетов
Процедура Очистить()
	Перем ИсходноеКоличествоСтрокГруппы;

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле = ЭлементыФормы[ИмяТекТабличногоПоля];

		ОчиститьТабличноеПоле(ТекТабличноеПоле);

	КонецЦикла;
	
	// Далее выясним, есть ли добавленные в многострочный раздел дополнительные строки.
	// При наличии таких строк удаляем их.
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

		ИмяГруппы        = ЭлементСтруктуры.Ключ;
		СтруктураГруппы  = ЭлементСтруктуры.Значение;
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = СтруктураГруппы.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их

			НомерВерхЯчейкиОбласти = 999999999;
			НомерНижнЯчейкиОбласти = 0;
			Для Нстр =  ИсходноеКоличествоСтрокГруппы + 1 ПО ТекущееКоличествоСтрок Цикл

				ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
				
				ИмяПервойКолонки = СтруктураГруппы.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки = Сред(СтруктураГруппы.Колонки[0].Имя,1,3) + Формат(НСтр,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(СтруктураГруппы.Колонки[0].Имя,4);

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				// номера строк удаляемой области
				Если НомерВерхЯчейкиОбласти > ОбластьЯчейки.Верх Тогда
				
					НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;	
				
				КонецЕсли;
				Если НомерНижнЯчейкиОбласти < ОбластьЯчейки.Низ Тогда
				
					НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;	
				
				КонецЕсли;

			КонецЦикла;
			
			// Определим область удаляемой строки
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// непосредственно удаляем область строки табличного документа
			ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
			
		КонецЕсли;

		СтруктураГруппы.Очистить();
		Для Сч = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			СтруктураГруппы.Добавить();	
		КонецЦикла;
		
	КонецЦикла;
		
	ОбновитьПоСлужебнымДанным();

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// очищаем ячейки, в которых отображается дата подписи
	// должностных лиц организации
	ЗаполнитьДатуВЯчейках();

	// Очищаем расшифровку.
	СпП.Очистить();
	
	// выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	ЗаполнитьСведенияОбОрганизации();
	
	// устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

КонецПроцедуры // Очистить()

// Обрабатывает полученный из формы ФормаНастройкиСтраниц дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//  унифицирована для всех отчетов
Процедура Печать(ВидПечати)

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
    мПечатныеФормы.Очистить();
	
	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = СтрокаУровня1.ВыводНаПечать;

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = СтрокаУровня2.ВыводНаПечать;

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = СтрокаУровня3.ВыводНаПечать;
						Если Пометка = 0 Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

						ВывестиНаПечатьЛист(СтруктураПараметров);
						
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

				ВывестиНаПечатьЛист(СтруктураПараметров);
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

		ВывестиНаПечатьЛист(СтруктураПараметров);
		
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()

// Управляет видимостью страниц основной панели формы.
//
Процедура ПоказатьСтраницыОтчета()

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	ИмеютсяСкрытые      = Ложь;
	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		ПоказатьСтраницу   = СтрокаУровня1.ПоказатьСтраницу;

		Если ПоказатьСтраницу = 0 Тогда
			ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Ложь;
			ИмеютсяСкрытые = Истина;
		Иначе
			ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Истина;

		КонецЕсли; 

	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	КнопкиНастройки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаНастройкаСтраниц;
	ИсходныйТекст   = НСтр("ru='Настройка страниц';uk='Настройка сторінок'");

	КнопкиНастройки.Текст = ИсходныйТекст;

	Если ИмеютсяСкрытые Тогда
		// Выводим в названии кнопки "Настройка страниц" доп. сммвол '*'.
		КнопкиНастройки.Текст = ИсходныйТекст + " (*)";
	КонецЕсли;

КонецПроцедуры // ПоказатьСтраницыОтчета()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//  похоже. унифицированна для всех отчетов
Функция Сохранить()  Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.

		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;

		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();

	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Периодичность              = Периодичность;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", мСохранятьРасшифровку);

	Если мСохранятьРасшифровку = Истина Тогда
		СписокСохранения.Вставить("Расшифровка", СпП);
	КонецЕсли;
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// Сохраняем выбранные листы для печати в хранилище
	ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
	мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	Модифицированность = Ложь;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
// унифицированна для всех отчетов, редакция не требуется
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Расшифровка;

	// восстанавливаем реквизиты отчета
	Организация              = мСохраненныйДок.Организация;
	Периодичность            = мСохраненныйДок.Периодичность;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
	Комментарий              = мСохраненныйДок.Комментарий;

	ЗаполнитьДатуВЯчейках();

	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();
	
	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки(СписокСохранения);
		КонецЕсли;
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("СохранятьРасшифровку", мСохранятьРасшифровку);
	Если мСохранятьРасшифровку = Неопределено Тогда
		мСохранятьРасшифровку = Истина;
	КонецЕсли;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюНастройка.Кнопки.ПодменюРасшифровка.Кнопки.КнопкаСохранятьРасшифровку.Пометка = мСохранятьРасшифровку;
	
	СписокСохранения.Свойство("Расшифровка", Расшифровка);
	Если Расшифровка <> Неопределено Тогда
		СпП = Расшифровка;
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Если    Лев(ИмяПоказателя, 3) = "T1R"
				ИЛИ Лев(ИмяПоказателя, 3) = "T2R"
				ИЛИ Лев(ИмяПоказателя, 3) = "T3R" Тогда
			
				Если СтрДлина(ИмяПоказателя) > 8 Тогда
					// это показатель многострочки; 
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки
		КонецЦикла;
	КонецЦикла;
	УстановитьФорматВывода();
	
	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	ПоказатьСтраницыОтчета();

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//  уникальна для каждого отчета  , требуется соотв редакция
Процедура Расчет()
	
	мОтчетДопГарантии.Области.П031.Значение = мОтчетДопГарантии.Области.П011.Значение * 0.05;
	
КонецПроцедуры // Расчет()

Процедура СоздатьТаблицуСоСхемамиВыгрузки() Экспорт
	
	//для возможности выгрузки в XML файл	
	тбСхемыXML = Новый ТаблицаЗначений;
	ТипКолИмяСхемы = СоздатьОписанияТипов("Строка",8);
	тбСхемыXML.Колонки.Добавить("ИмяСхемы",ТипКолИмяСхемы,НСтр("ru='Имя файла-схемы';uk=""Ім'я файлу-схеми"""));
	ТипКолПредставлениеСхемы = СоздатьОписанияТипов("Строка",80);
	тбСхемыXML.Колонки.Добавить("ПредставлениеСхемы",ТипКолПредставлениеСхемы,НСтр("ru='Наименование регл.отчета';uk='Найменування регл.звіту'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	тбСхемыXML.Колонки.Добавить("НазваниеСтраницыПанели",ТипКолНазваниеСтраницыПанели,НСтр("ru='Наименование страницы панели';uk='Найменування сторінки панелі'"));

	ТипКолфВыгрузка = СоздатьОписанияТипов("Число",1,0);
	тбСхемыXML.Колонки.Добавить("фВыгрузка",ТипКолфВыгрузка,НСтр("ru='Выгружать?';uk='Вивантажувати?'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	ТипПрефикса = СоздатьОписанияТипов("Строка",2);
	тбСхемыXML.Колонки.Добавить("Префикс",ТипПрефикса,НСтр("ru='Префикс';uk='Префікс'"));

	//НовСтрока = тбСхемыXML.Добавить();
	//НовСтрока.ИмяСхемы = "J0000000"; 
	//НовСтрока.ПредставлениеСхемы =НСтр("ru='Отчет о ценах производителей промышленной продукции';uk='Звіт про ціни виробників промислової продукції'");
	//НовСтрока.НазваниеСтраницыПанели ="ОтчетДопГарантии";
	//НовСтрока.Префикс = "Д";

КонецПроцедуры

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//  унифицирована для всех отчетов
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя, ИмяСтраницыПанели = "")

	Если ИмяСтраницыПанели = "" Тогда
		ИмяСтраницыПанели = ОпределитьСтраницуПанелиПоКодуПоказателя(ИмяПоказателя);
	КонецЕсли;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели);
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыПанели].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
// уникальна для каждого отчета, т.е. нужна редакция
Процедура ЗаполнитьАвто() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Дата", КонецГода(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РаботникиОрганизаций.Сотрудник) КАК КоличествоСотрудников 
	|ИЗ  РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, Организация = &Организация И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)) КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоСотрудников = 0;
	Если Выборка.Следующий() Тогда
		КоличествоСотрудников = Выборка.КоличествоСотрудников;
	КонецЕсли;

	Если КоличествоСотрудников > 20 Тогда
	
		ТаблСреднеспЧисленности = ПроведениеРасчетов.ПолучитьСреднююЧисленность(НачалоГода(ДобавитьМесяц(мДатаНачалаПериодаОтчета, -12)), КонецГода(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12)), "ССЧ", "КВАРТАЛСНАЧАЛАГОДА", Организация, "ШТАТ"); 
		УстановитьЗначениеПоказателя("П011", ТаблСреднеспЧисленности[0].Средняя);
		
		ТаблСреднеспЧисленности = ПроведениеРасчетов.ПолучитьСреднююЧисленность(НачалоГода(ДобавитьМесяц(мДатаНачалаПериодаОтчета, -12)), КонецГода(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12)), "ССЧ", "КВАРТАЛСНАЧАЛАГОДА", Организация, "ДОПГАРАНТИИНЕИНВШТАТ");
		Если ТаблСреднеспЧисленности.Колонки.Найти("РасчетВыполнен") = Неопределено
			ИЛИ НЕ ТаблСреднеспЧисленности[0].РасчетВыполнен Тогда
			//Старая версия, не убираем инвалидов
			ТаблСреднеспЧисленности = ПроведениеРасчетов.ПолучитьСреднююЧисленность(НачалоГода(ДобавитьМесяц(мДатаНачалаПериодаОтчета, -12)), КонецГода(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12)), "ССЧ", "КВАРТАЛСНАЧАЛАГОДА", Организация, "ДОПГАРАНТИИШТАТ");
			УстановитьЗначениеПоказателя("П021", ТаблСреднеспЧисленности[0].Средняя);
		Иначе	
			УстановитьЗначениеПоказателя("П021", ТаблСреднеспЧисленности[0].Средняя);
		КонецЕсли;
		Расчет();
	Иначе	
		ТаблСреднеспЧисленности = ПроведениеРасчетов.ПолучитьСреднююЧисленность(НачалоГода(мДатаНачалаПериодаОтчета), КонецГода(мДатаКонцаПериодаОтчета), "ССЧ", "КВАРТАЛСНАЧАЛАГОДА", Организация, "ШТАТ");
		УстановитьЗначениеПоказателя("П041", ТаблСреднеспЧисленности[0].Средняя);

		ТаблСреднеспЧисленности = ПроведениеРасчетов.ПолучитьСреднююЧисленность(НачалоГода(мДатаНачалаПериодаОтчета), КонецГода(мДатаКонцаПериодаОтчета), "ССЧ", "КВАРТАЛСНАЧАЛАГОДА", Организация, "ДОПГАРАНТИИ10ЛЕТШТАТ");
		УстановитьЗначениеПоказателя("П051", ТаблСреднеспЧисленности[0].Средняя);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьАвто()

// устанавливает пометки выгрузки в таблице тбСхемыXML
Процедура  ОпределитьСписокВыгружаемыхСхем();
	Для Каждого стр Из  тбСхемыXML Цикл
		//по-умолчанию выгружаем все приложения
		стр.фВыгрузка = 1;
	КонецЦикла;
КонецПроцедуры	

//создает массив описания типов для таблицы значений со схемами XML
Функция СоздатьОписанияТипов(НазваниеТипа, Длина,Точность="")
	  мас = Новый Массив;
	  мас.Добавить(Тип(НазваниеТипа));
	  Если Точность = "" Тогда
		 КвалифСтроки = Новый КвалификаторыСтроки(Длина,ДопустимаяДлина.Переменная); 
	  Иначе
		 КвалифЧисла = Новый КвалификаторыЧисла(Длина,Точность,ДопустимыйЗнак.Неотрицательный); 
	  КонецЕсли;	   
	  Возврат Новый ОписаниеТипов(мас,КвалифСтроки,КвалифЧисла);
КонецФункции	


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью кнопок "Добавить" и "Удалить" формы.
// 
Процедура ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть = Неопределено)

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если Не ТекущаяОбласть = Неопределено Тогда
		КнопкаДобавитьУдалить = ЭлементыФормы.Найти("КнопкаУдалитьДопСтроки" + ИмяТекущейСтраницыПанели);

		Если КнопкаДобавитьУдалить <> Неопределено Тогда
			Если РазделТекущейОбласти( ТекущаяОбласть ) = Неопределено Тогда
				КнопкаДобавитьУдалить.Доступность = Ложь;
			Иначе
				КнопкаДобавитьУдалить.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДоступностьКнопокДобавитьУдалить()

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант = 4 Тогда
		
		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");

	ИначеЕсли Вариант <> Неопределено Тогда
	
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

		
	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вычисляется автоматически';uk='Значення обчислюється автоматично'");
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");
		КонецЕсли;
		
		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//коррекция кода выполнена, за исключением специфики многтсрочного
//раздела, в комментраиях это указано

// Процедура - обработчик события "ПередОткрытием" формы.
//редакция не требуется,унифицирована для всех отчетов 
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;
   	Если ЭлементМеню.Кнопки.Количество() = 0 Тогда

		ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
		                            НСтр("ru='Печатать сразу';uk='Друкувати відразу'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

		ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
		                            НСтр("ru='Предварительный просмотр';uk='Попередній перегляд'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
									
		ЭлементМеню.Кнопки.Добавить("Разделитель1", ТипКнопкиКоманднойПанели.Разделитель);

		ЭлементМеню.Кнопки.Добавить("ЕстьДуплекс", ТипКнопкиКоманднойПанели.Действие,
		                            НСтр("ru='Принтер поддерживает автом. дуплекс';uk='Принтер підтримує автом. дуплекс'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
									
		ЭлементМеню.Кнопки.ЕстьДуплекс.Пометка = ЕстьДуплекс;
		
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
// редакция требуется, см. далее по комментариям
Процедура ПриОткрытии()
	Перем ИсходноеКоличествоСтрокГруппы;

	ЭтаФорма.АвтоЗаголовок = Ложь;
	
    //здесь локальным переменным модуля присваиваем имена всех объектов ПолеТабличногоДокумента 
	//(для декларации это будет собственно поле, содержащее тело самой декларации, а также 
	//все остальные ее приложения, пока сделано только для тела самой декларации )
	мОтчетДопГарантии = ЭлементыФормы.ПолеТабличногоДокументаОтчетДопГарантии;			
	
	МассивПанелей = Новый Массив;
	//здесь локальным переменным модуля присваиваем имена всех объектов ПолеТабличногоДокумента 
	//(для декларации это будет собственно поле, содержащее тело самой декларации, а также 
	//все остальные ее приложения, пока сделано только для тела самой декларации )
	
	
	//////МассивПанелей.Добавить("ОтчетДопГарантии");
		
	Если мСохраненныйДок = Неопределено Тогда
		
		ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
		
		ЗаполнитьСведенияОбОрганизации();	
		
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			
			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
			
			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
			
			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл
				
				СтрокаГруппы = СтруктураГруппы.Добавить();
				
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					
					ИмяКолонки    = Колонка.Имя;
					
					КодПоказателя    = Сред(ИмяКолонки,1,3) + Формат(НСтр,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(ИмяКолонки,4);
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];
						
					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;
					
					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;
					
				КонецЦикла;
			КонецЦикла;
		
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
			
			
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 2;
			
			//устанавливает форма для ячеек, для которых в макете показателей задан тип формата Е,
			//т.е. денежный с регулируемой размерностью (в зависимости от выбранной единицы измерения)
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			
			УстановитьФорматВывода();
			
			ЗаполнитьСведенияОбОрганизации();

			мСохранятьРасшифровку = Истина;
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюНастройка.Кнопки.ПодменюРасшифровка.Кнопки.КнопкаСохранятьРасшифровку.Пометка = мСохранятьРасшифровку;
			
		КонецЕсли;
		
	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;
	
	//отображает соотвествующий период сдачи отчета в шапке формы
	ПоказатьПериод();

	//заполняет дату сдачи/подачи отчетности
	ЗаполнитьДатуВЯчейках();
	
	//устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		УстановитьЦветФонаЯчейки(,,Страница.Имя);
	КонецЦикла;

	//управляет доступностью кнопок добавать/удалить,которые актуальны для многострочных разделов
	//коррекция актуальна при работе над могострочным приложением к декларации (долгосрочные договора)
	ДоступностьКнопокДобавитьУдалить();

	мОтчетДопГарантии.ТолькоПросмотр = Истина;
	
	//мСлужебныеДанные.ТолькоПросмотр   = Истина;	
	
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
// редакция не требуется, процедура унифицирована для всех отчетов
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность = Истина Тогда

		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения ?';uk='Дані були змінені. Зберегти зміни ?'"), РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;
	
    СохранитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс", ЕстьДуплекс);
	
КонецПроцедуры // ПередЗакрытием()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".
//код этой процедуры пока не корректировался
//вызывает только процедуру из раздела "Процедуры общего назначения"
//Очистить()
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Если Найти(Кнопка.Имя, "Дуплекс") >0 Тогда
		     ЕстьДуплекс    = НЕ Кнопка.Пометка;
			 Кнопка.Пометка = НЕ Кнопка.Пометка;
		Иначе
			 Печать(Кнопка.Имя);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	ПоказатьСтраницыОтчета();

	Модифицированность = Истина;

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

Процедура КоманднаяПанельФормыРасшифровка(Кнопка)
	Обраб = Обработки.РасшифровкаРегламентированнойОтчетности.Создать();
	Обраб.Форма = ЭтаФорма;
	
	ИмяТекущейСтраницыПанели  = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ИмяПоказателя 			  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть.Имя;
	
	Обраб.ИмяЯчейки = ИмяПоказателя;
	Обраб.ПолучитьФорму().Показать();
КонецПроцедуры

Процедура КоманднаяПанельФормыСохранять(Кнопка)
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	мСохранятьРасшифровку = Кнопка.Пометка;
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельДействийДействиеXML(Кнопка) Экспорт
	
	Перем спДанныеОтчета, спПараметры;
	Перем НужнаяСтруктура;
  
  	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьТаблицуСоСхемамиВыгрузки();
	
	//Создадим структуру со списком параметров для передачи их в обработку выгрузки
 	спПараметры = Новый Структура();
	спПараметры.Вставить("Команда","ЭкспортXML"); //Операция
	
	ОпределитьСписокВыгружаемыхСхем();
	спПараметры.Вставить("Схемы",тбСхемыXML );	//Схемы (правила) выгрузки. Определеяются ГНАУ
	
	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ДанныеОтчета = Новый Структура();
	
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		
		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
		
		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ДанныеОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		
	КонецЦикла;
	
	// вставляем данные  ячеек таблицы	
	спПараметры.Вставить("ДанныеОтчета",ДанныеОтчета);
	
	// вставляем данные многострочных разделов
	спПараметры.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);
    КаталогДанныхФирмы = Организация.НаименованиеПолное;
	спПараметры.Вставить("КаталогДанныхФирмы",КаталогДанныхФирмы); //каталог для сохранения выгрузки
	ОбработкаЭкспортXML = РегламентированнаяОтчетность.РеглОтчеты("РегламентированныйОтчетМастерВыгрузкиРегламентированнойОтчетности",Истина);
	
	Ошибка = ПроверитьКорректностьЗаполненияОтчета(ДанныеОтчета, ОбработкаЭкспортXML);
	Если Ошибка = Истина Тогда
		Возврат;
	КонецЕсли;

	//ИдФормы = "Форма";   
	//ФормаОбр = ОбработкаЭкспортXML.ПолучитьФорму(ИдФормы,ЭтаФорма);
	//ФормаОбр.спПараметры = спПараметры; 
	//ФормаОбр.ИмяНужногоОтчета = "РегламентированныйОтчетДопГарантии";
	//
	//ФормаОбр.тбСхемы = спПараметры.Схемы;
	//ФормаОбр.Открыть();
	//
	//ФормаОбр.Объект = ЭтотОбъект;
	//ФормаОбр.Док    = мСохраненныйДок;
	//
	//Попытка
	//	ФормаОбр.ДлинаНомераВМногострочке = 6;
	//Исключение КонецПопытки;
	
КонецПроцедуры


// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
// редакция не требуется
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Перем ТекущаяОбласть;

	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИдГруппы <> Неопределено Тогда
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
		ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	КонецЕсли;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	// управляем доступностью кнопок "Добавить" и "Удалить"
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);

	// управляем показом статика, отображающего номер текущей страницы
	// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
	ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(ТекущаяОбласть);

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()


// Процедура вызывается при активизации поля табличного документа формы.
// Определяет текущую область таблмчного документа и вызывает процедуру
// управления доступностью кнопок "Добавить" и "Удалить" формы.
// редакция не требуется
Процедура ПолеТабличногоДокументаОтчетДопГарантииПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаПриАктивизацииОбласти()

// Процедура вызывается при изменении поля табличного документа формы
//
Процедура ПолеТабличногоДокументаОтчетДопГарантииПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Расчет();
	Модифицированность = Истина;
	
КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" подя ввода ПолеВыбораВариантЗаполненияОтчетДопГарантии
//
Процедура ПолеВыбораВариантЗаполненияОтчетДопГарантииПриИзменении(Элемент)
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" подя ввода ПолеВводаЗначениеКорректировкиОтчетДопГарантии
//
Процедура ПолеВводаЗначениеКорректировкиОтчетДопГарантииПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" подя ввода ПолеВводаКомментарийОтчетДопГарантии
//
Процедура ПолеВводаКомментарийОтчетДопГарантииПриИзменении(Элемент)
	
	Коммент = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Коммент);

	Модифицированность = Истина;

КонецПроцедуры


// Процедура - обработчик события "Нажатие" кнопки КнопкаДобавитьДопСтроки
//
Процедура КнопкаДобавитьДопСтрокиОтчетДопГарантииНажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки КнопкаУдалитьДопСтроки
//
Процедура КнопкаУдалитьДопСтрокиОтчетДопГарантииНажатие(Элемент)
	УдалитьДополнительнуюСтроку();
    Расчет();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБМЕНА ДАННЫМИ

Функция СформироватьДанныеДляЗвит1С() Экспорт 
	
	мСохраненныйДок   = Неопределено;	
	мСкопированаФорма = Неопределено;
	
	ПередОткрытием(Ложь, Истина);
	ПриОткрытии();
	
	Очистить();
	ЗаполнитьСведенияОбОрганизации();
	ЗаполнитьАвто();
	
	Если мМенеджерЗвит1С.ФлагОтладки Тогда
		ЭтаФорма.ОткрытьМодально();
	КонецЕсли;
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// расшифровка
	Попытка
		Выполнить("СписокСохранения.Вставить(""РасшифровкаОтчета"", СпП);");
	Исключение КонецПопытки;
	
	ПоказателиОтчета = Новый Структура();
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	КонецЦикла;
	
	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции

Процедура ПолеТабличногоДокументаОтчетДопГарантииВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Расчет();
	Модифицированность = Истина;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       НСтр("ru='в гривнях';uk='у гривнях'"));
//ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    НСтр("ru='в тысячах гривень';uk='у тисячах гривень'"));
//ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, НСтр("ru='в миллионах гривень';uk='у мільйонах гривень'"));

// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетДопГарантии.СписокВыбора.Добавить(1, НСтр("ru='не заполнять автоматически';uk='не заповнювати автоматично'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетДопГарантии.СписокВыбора.Добавить(2, НСтр("ru='заполнять автоматически с корректировкой';uk='заповнювати автоматично з коригуванням'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетДопГарантии.СписокВыбора.Добавить(3, НСтр("ru='заполнять автоматически без корректировки';uk='заповнювати автоматично без коригування'"));

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Число"));
ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15, 2));

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Число"));
ОписаниеТиповЧислоЦелое = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(12, 0));

МассивТипов = Новый Массив; 
МассивТипов.Добавить(Тип("Строка"));
ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(254, ДопустимаяДлина.Переменная));

МассивТипов = Новый Массив; 
МассивТипов.Добавить(Тип("Строка"));
ОписаниеТиповСтрокаНеогр = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(0));

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
//нужна редакция в зависимости от структуры многострочных групп приложений декларации
//мИдГруппы = "TB1";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
//нужна редакция в зависимости от структуры многострочных групп приложений декларации

//КолИсхСтрокИдГруппы  = 1;

//СтруктураГруппы = Новый ТаблицаЗначений;
//СтруктураГруппы.Колонки.Добавить("TB1AA", ОписаниеТиповСтрока);
//СтруктураГруппы.Колонки.Добавить("TB1AB", ОписаниеТиповСтрока);
//СтруктураГруппы.Колонки.Добавить("TB1AV", ОписаниеТиповСтрока);
//СтруктураГруппы.Колонки.Добавить("TB1A1", ОписаниеТиповЧисло);
//СтруктураГруппы.Колонки.Добавить("TB1A2", ОписаниеТиповЧисло);
//СтруктураГруппы.Колонки.Добавить("TB1A3", ОписаниеТиповСтрока);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
//мСтруктураМногострочныхРазделов.Вставить(мИдГруппы, СтруктураГруппы);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
//мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы, КолИсхСтрокИдГруппы);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  	  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);     // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
мВерсияФормы = "01/01/2014";

мПечатныеформы = Новый СписокЗначений;

СпП = Новый ТаблицаЗначений;
СпП.Колонки.Добавить("НомСтроки");
СпП.Колонки.Добавить("ИмяЯчейки");
СпП.Колонки.Добавить("ИмяПоказателя");
СпП.Колонки.Добавить("ЗнакОперации");
СпП.Колонки.Добавить("ИмяСлагаемого");
СпП.Колонки.Добавить("Сумма");
СпП.Колонки.Добавить("КодСчета");
СпП.Колонки.Добавить("КодКорСчета");
СпП.Колонки.Добавить("ДатаНачала");
СпП.Колонки.Добавить("ДатаКонца");
СпП.Колонки.Добавить("Сдвиг");
СпП.Колонки.Добавить("Раздел");
СпП.Колонки.Добавить("Страница");
СпП.Колонки.Добавить("МнЧ");
СпП.Колонки.Добавить("СтрокаПП");
СпП.Колонки.Добавить("Субконто1");
СпП.Колонки.Добавить("Субконто2");
СпП.Колонки.Добавить("Субконто3");

ЕстьДуплекс = ВосстановитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс");
Если НЕ ТипЗнч(ЕстьДуплекс) = Тип("Булево") Тогда
	ЕстьДуплекс = Ложь;	
КонецЕсли;
