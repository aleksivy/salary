////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поля табличного документа
//аккуратно переименовать в зависимости наименований ПолейТабличногоДокумента,
//которые повторяют названия приложени1 самой декларации
Перем мДекларацияПоНДФЛ;
Перем мПриложение;

Перем мПодразделение;

Перем мСлужебныеДанные;
Перем мСоставПоказателей Экспорт;
Перем ФормаОбр Экспорт;
Перем ЧастноеЛицо;

Перем мСтруктураМногострочныхРазделов;

//для расчета бухгалтерских итогов
Перем мБухИтогиРС;
Перем мБухИтогиНалогНаПрибыль, мБухИтогиНалогНаПрибыльПрошлыйПериод;
Перем ТаблицаРезультатов;
Перем тбСхемыXML, фОчистка;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц;

//хранит массив панелей формы
Перем МассивПанелей;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы;

Перем ИмяИзмененнойЯчейки; 

Перем ОписаниеТиповЧисло,ОписаниеТиповДата,ОписаниеТиповСтрока;

Перем мПечатныеФормы Экспорт;

Перем мНеВыдаватьСообщенияОбОшибкахВРасчете;

Перем СпП Экспорт;
Перем мСохранятьРасшифровку Экспорт;
Перем ЕстьДуплекс;

Перем мМенеджерЗвит1С Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПолучитьНастройкиПроверкиЗаполенения(Макет = "СоставПоказателей2011") Экспорт

	СтруктураПроверкиЗаполенения = Новый Структура();
	
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(Макет);
	
	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ТаблицаПроверкаЗаполнения = Новый ТаблицаЗначений;
		ТаблицаПроверкаЗаполнения.Колонки.Добавить( "ИмяПоказателя", 	   ОписаниеТиповСтрока100 );
		ТаблицаПроверкаЗаполнения.Колонки.Добавить( "ПроверкаЗаполненияРеквизитов",  ОписаниеТиповЧисло15 );
		ТаблицаПроверкаЗаполнения.Колонки.Добавить( "ИмяТабличногоПоля",   ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			ИмяПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);

			Если ИмяПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(ИмяПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// вариант заполнения ячейки определяется по колонке 6 макета
			стрПроверкаЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			ПроверкаЗаполненияРеквизитов    = ? (ПустаяСтрока(стрПроверкаЗаполнения), 0, Число(стрПроверкаЗаполнения));
			ИмяТабличногоПоля	  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);

			Если ПроверкаЗаполненияРеквизитов <> 0  Тогда
				// формируем таблицу значений, содержащей состав показателей отчета
				НоваяСтрока = ТаблицаПроверкаЗаполнения.Добавить();
				НоваяСтрока.ИмяПоказателя   	 = ИмяПоказателя;
				НоваяСтрока.ПроверкаЗаполненияРеквизитов   = ПроверкаЗаполненияРеквизитов;
				НоваяСтрока.ИмяТабличногоПоля    = ?(ЗначениеЗаполнено(ИмяТабличногоПоля), ИмяТабличногоПоля, ИмяСтраницы);
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаПроверкаЗаполнения.Количество() > 0 Тогда
			СтруктураПроверкиЗаполенения.Вставить(ИмяСтраницы, ТаблицаПроверкаЗаполнения);
		Конецесли;

	КонецЦикла;
	
	Возврат СтруктураПроверкиЗаполенения;
	
КонецФункции

Процедура ПроверитьЗаполнениеОсобыхПоказателей(ТаблицаНезаполненныхПоказателей,ДанныеОтчета)
	
	ЧастноеЛицо = НЕ (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо);
	
	Если ЧастноеЛицо Тогда
		ИмяПоказателя = "HFO"; 	
	Иначе
		ИмяПоказателя = "HBOS"; 	
	КонецЕсли;
	                   
	Для Каждого ИмяПанели из МассивПанелей Цикл
		
		Если НЕ ЧастноеЛицо Тогда
		
			Если НЕ ЗначениеЗаполнено(ДанныеОтчета["ПолеТабличногоДокумента"+ИмяПанели].HTIN) Тогда
				 НезаполненныйПоказатель = ТаблицаНезаполненныхПоказателей.Строки.Добавить();
				 НезаполненныйПоказатель.ИмяПоказателя 		= "HTIN";
				 НезаполненныйПоказатель.ИмяТабличногоПоля  = "ПолеТабличногоДокумента"+ИмяПанели;
			 КонецЕсли;      		
			
		Иначе 
		    ИмяТекТабличногоПоля = "ПолеТабличногоДокумента"+ИмяПанели;
			Если  НЕ ЗначениеЗаполнено(ДанныеОтчета["ПолеТабличногоДокумента"+ИмяПанели].HTIN)
				И НЕ ЗначениеЗаполнено(ДанныеОтчета["ПолеТабличногоДокумента"+ИмяПанели].HPASS) Тогда
				
					НезаполненныйПоказательГруппа = ТаблицаНезаполненныхПоказателей.Строки.Добавить();
					НезаполненныйПоказательГруппа.ИмяПоказателя = НСтр("ru = 'Ни один из показателей:'; uk = 'Жоден з показників:'");
		
					НезаполненныйПоказатель = НезаполненныйПоказательГруппа.Строки.Добавить();
					НезаполненныйПоказатель.ИмяПоказателя 		= "HTIN";
					НезаполненныйПоказатель.ИмяТабличногоПоля   = ИмяТекТабличногоПоля;

					НезаполненныйПоказатель.ИмяПоказателя 		= "HPASS";
					НезаполненныйПоказатель.ИмяТабличногоПоля   = ИмяТекТабличногоПоля;
				
			 КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;
		
КонецПроцедуры

Функция ПроверитьКорректностьЗаполненияОтчета(ДанныеОтчета, ОбработкаЭкспортXML)
	
	ТаблицаНезаполненныхПоказателей = Новый ДеревоЗначений;
	ТаблицаНезаполненныхПоказателей.Колонки.Добавить( "ИмяПоказателя", 		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаНезаполненныхПоказателей.Колонки.Добавить( "ИмяТабличногоПоля",  Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	
	ПроверитьЗаполнениеОсобыхПоказателей(ТаблицаНезаполненныхПоказателей,ДанныеОтчета);
	
	СтруктураПроверки = ПолучитьНастройкиПроверкиЗаполенения();
	Для каждого СтраницаОтчета Из СтруктураПроверки Цикл
		
		ГруппыОбязательныхПолей = Новый Соответствие;
		
		// Проверим заполенение полей не в группах
		Для каждого Поле  Из СтраницаОтчета.Значение Цикл
			
			// поле - строка таблицы значений
			Если Поле.ПроверкаЗаполненияРеквизитов <> 0 Тогда
				
				Если Поле.ПроверкаЗаполненияРеквизитов > 1 Тогда
					// это группа обязательных полей, добавим в соответствие, проверим позже
					ГруппаОбязательныхПолей = ГруппыОбязательныхПолей[Поле.ПроверкаЗаполненияРеквизитов];
					Если ГруппаОбязательныхПолей = Неопределено Тогда
						ГруппаОбязательныхПолей = Новый Массив();
					КонецЕсли;
					ГруппаОбязательныхПолей.Добавить(Поле);
					ГруппыОбязательныхПолей[Поле.ПроверкаЗаполненияРеквизитов] = ГруппаОбязательныхПолей;
					Продолжить;	
				КонецЕсли;
				
				// табличное поле может быть "СлужебныеДанные" или другим
				ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + Поле.ИмяТабличногоПоля;
				
				ЗначениеПоказателя = ДанныеОтчета[ИмяТекТабличногоПоля][Поле.ИмяПоказателя];												
				Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				     // показатель не заполнен
					 НезаполненныйПоказатель = ТаблицаНезаполненныхПоказателей.Строки.Добавить();
				     НезаполненныйПоказатель.ИмяПоказателя 		= Поле.ИмяПоказателя;
					 НезаполненныйПоказатель.ИмяТабличногоПоля  = ИмяТекТабличногоПоля;
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла;
		
		// Проверим заполенение полей в группах
		Для каждого ГруппаОбязательныхПолей Из ГруппыОбязательныхПолей Цикл
			
			ЕстьЗаполненный = Ложь;
			Для каждого Поле Из ГруппаОбязательныхПолей.Значение Цикл
				
				// табличное поле может быть "СлужебныеДанные" или другим
				ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + Поле.ИмяТабличногоПоля;
				
				ЗначениеПоказателя = ДанныеОтчета[ИмяТекТабличногоПоля][Поле.ИмяПоказателя];												
				Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
					ЕстьЗаполненный	= Истина;
					Прервать;
				КонецЕсли;
			
			КонецЦикла;
			
			
			Если Не ЕстьЗаполненный Тогда
				
				НезаполненныйПоказательГруппа = ТаблицаНезаполненныхПоказателей.Строки.Добавить();
				НезаполненныйПоказательГруппа.ИмяПоказателя = НСтр("ru = 'Ни один из показателей:'; uk = 'Жоден з показників:'");
		
				Для каждого Поле Из ГруппаОбязательныхПолей.Значение Цикл
				
					// табличное поле может быть "СлужебныеДанные" или другим
				    ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + Поле.ИмяТабличногоПоля;
					НезаполненныйПоказатель = НезаполненныйПоказательГруппа.Строки.Добавить();
					НезаполненныйПоказатель.ИмяПоказателя 		= Поле.ИмяПоказателя;
					НезаполненныйПоказатель.ИмяТабличногоПоля   = ИмяТекТабличногоПоля;
				
			    КонецЦикла;
				 
			 КонецЕсли;	
			
		КонецЦикла; 
		
	КонецЦикла;
	
	ФормаОшибок = ОбработкаЭкспортXML.ПолучитьФорму("ФормаОтображенияНезаполенныхПоказателей", ЭтаФорма);

	Если ТаблицаНезаполненныхПоказателей.Строки.Количество()> 0 Тогда
		
		ФормаОшибок.ДеревоСтрок = ТаблицаНезаполненныхПоказателей;
		Для каждого Строка Из ФормаОшибок.ДеревоСтрок.Строки Цикл
			ФормаОшибок.ЭлементыФормы.ДеревоСтрок.Развернуть(Строка,Истина);	
		КонецЦикла;
		
		ФормаОшибок.Открыть();
		
		ТекстВопроса = НСтр("ru = 'Существуют незаполненные показатели, которые являются обязательными для выгрузки отчета в формате XML! Выгрузить отчет?'; uk = ""Існують незаповнені показники, що є обов'язковими для вивантаження звіту в форматі XML! Выгрузить отчет?""");
		
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, Нстр("ru = 'Ошибка!'; uk = 'Помилка!'")) <> КодВозвратаДиалога.Да Тогда
			// ошибка
			Возврат Истина;	
		КонецЕсли;
	Иначе
		
		Если ФормаОшибок.Открыта() Тогда
		
			ФормаОшибок.Закрыть();	
		
		КонецЕсли;

	КонецЕсли;

	// нет ошибки
	Возврат Ложь;
	
КонецФункции // ()

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Перем ИмяПоказателя;
	Перем ИмяТабличногоПоля;
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		
		// если это оповещение из формы списка незаполенных показателей
		Если  ЗначениеВыбора.Свойство("ИмяПоказателя", 		ИмяПоказателя)
			И ЗначениеВыбора.Свойство("ИмяТабличногоПоля", 	ИмяТабличногоПоля) Тогда
		
			Попытка
				
				// переключаемся на текущий отчет
				Активизировать();
		
				ТекущийЭлемент = ЭлементыФормы[ИмяТабличногоПоля];

				//переопределим имя, если это значение в клеточках
				Если ИмяПоказателя = "HTIN" Тогда
					Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
						ИмяПоказателя = "ЕДРПОУ1"
					Иначе	
					    ИмяПоказателя = "ИНН1"
					КонецЕсли;
				ИначеЕсли ИмяПоказателя = "HPASS" Тогда
					ИмяПоказателя = "Пасп1"
				ИначеЕсли ИмяПоказателя = "HZIP" Тогда
					ИмяПоказателя = "Инд1"
				ИначеЕсли ИмяПоказателя = "HINTURB" Тогда
					ИмяПоказателя = "КодТел1"
				ИначеЕсли ИмяПоказателя = "HTEL" Тогда
					ИмяПоказателя = "Тел1"
				ИначеЕсли ИмяПоказателя = "HFAX" Тогда
					ИмяПоказателя = "Факс1"
				ИначеЕсли ИмяПоказателя = "HZIP1" Тогда
					ИмяПоказателя = "Инд1_1"
				ИначеЕсли ИмяПоказателя = "HINTURB1" Тогда
					ИмяПоказателя = "КодТел1"
				ИначеЕсли ИмяПоказателя = "HTEL1" Тогда
					ИмяПоказателя = "Тел1_1"
				ИначеЕсли ИмяПоказателя = "HFAX1" Тогда
					ИмяПоказателя = "Факс1_1"
				ИначеЕсли ИмяПоказателя = "HDATA" Тогда
					ИмяПоказателя = "ДеньВып1"
				ИначеЕсли ИмяПоказателя = "HTINSTI" Тогда
					ИмяПоказателя = "КодНалоговой1"
				ИначеЕсли ИмяПоказателя = "HPAGES1" Тогда
					ИмяПоказателя = "КолДек1"
				ИначеЕсли ИмяПоказателя = "R00G01I" Тогда
					ИмяПоказателя = "РабШтат1"
				ИначеЕсли ИмяПоказателя = "R00G02I" Тогда
					ИмяПоказателя = "РабГПХ1"
				ИначеЕсли ИмяПоказателя = "HPAGES" Тогда
					ИмяПоказателя = "КолРасч1"
				ИначеЕсли ИмяПоказателя = "HKBUH" Тогда
					ИмяПоказателя = "ИННГБ1"
				ИначеЕсли ИмяПоказателя = "HKBOS" Тогда
					ИмяПоказателя = "ИННРук1"
				КонецЕсли;
				
				// выделяем ячейку так, чтобы она оказалось видимой при любом положении полосы прокрутки.
				ТекущийЭлемент.ВыделенныеОбласти.Очистить();
				ТекущийЭлемент.ВыделенныеОбласти.Вставить(ТекущийЭлемент.Области.Найти(ИмяПоказателя),0);
				ТекущийЭлемент.ВыделенныеОбласти.Удалить(ТекущийЭлемент.Область("R1C1"));
				
			Исключение
			КонецПопытки;	
			
		КонецЕсли;	
	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьНачальныеНастройки(Макет = "СоставПоказателей2011") Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(Макет);

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(15, ДопустимаяДлина.Переменная));

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока100  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			
			Если    чВариантЗаполнения  <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();
	
	УстановитьСистемуюОбластьПечатиОтчета();
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//  требуется редакция по наименованиям ПолейТабличныхДокументов
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ДекларацияПоНДФЛ";
	СтрокаУровня1.Представление            = НСтр("ru='Декларация по НДФЛ';uk='Декларація з ПДФО'");
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаДекларацияПоНДФЛ";
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение';uk='Додаток'");
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение";
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 0;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()


// Обрабатывает полученный из формы ФормаНастройкиСтраниц дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//  унифицирована для всех отчетов
Процедура УстановитьСистемуюОбластьПечатиОтчета()

	Если ТипЗнч(мДеревоСтраницОтчета) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаУровня1 Из мДеревоСтраницОтчета.Строки Цикл
		
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			
			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						
						УстановитьСистемуюОбластьПечатиСтраницыОтчета(СтруктураПараметров);
						
					КонецЦикла;

					Продолжить;

				КонецЕсли;
				
				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				
				УстановитьСистемуюОбластьПечатиСтраницыОтчета(СтруктураПараметров);
				
			КонецЦикла;

			Продолжить;

		КонецЕсли;
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);

		УстановитьСистемуюОбластьПечатиСтраницыОтчета(СтруктураПараметров);
		
	КонецЦикла;

КонецПроцедуры // 

// Процедура управляет системным выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//  процедура унифицирована
Процедура УстановитьСистемуюОбластьПечатиСтраницыОтчета(СтруктураПараметровЛиста)
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
  
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	
	ТабличноеПоле = ЭлементыФормы[ИмяТабличногоПоля];
	
	Если НЕ ТабличноеПоле.Области.Найти("ПредупреждениеОПечати") = Неопределено Тогда
	    ИмяОбластиПечати = "ПредупреждениеОПечати";
	ИначеЕсли ПустаяСтрока(ИмяОбластиТаблПоля) Тогда
		ИмяОбластиПечати = "";
	Иначе
		ИмяОбластиПечати = ИмяОбластиТаблПоля;
	КонецЕсли;
	
	ТабличноеПоле.ОбластьПечати = ТабличноеПоле.Области.Найти(ИмяОбластиПечати);
	
КонецПроцедуры // ВывестиНаПечатьЛист()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
// редакция не требуется,унифицирована для всех отчетов 
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет страницу основной панели формы, на которой табличный документ
// содержит показатель по переданному параметром "КодПоказателя" коду.
//
// Параметры:
//  КодПоказателя - строка, код показателя.
//
// Возвращаемое значение:
//  строка, имя найденной страницы основной панели формы.
//  Если страница не найдена, возвращает Неопределено.
//  унифицирована для всех отчетов
Функция ОпределитьСтраницуПанелиПоКодуПоказателя(КодПоказателя)
	Перем ИмяСтраницы;

	НайденнаяСтрока = мТаблицаСоставПоказателей.Найти(КодПоказателя, "КодПоказателяПоСоставу, КодПоказателяПоФорме");
	Если НайденнаяСтрока <> Неопределено Тогда
		ИмяСтраницы = НайденнаяСтрока.ИмяПоляТаблДокумента;
	КонецЕсли;

	Возврат ИмяСтраницы;
	
КонецФункции // ОпределитьСтраницуПанелиПоКодуПоказателя()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
// унифицирована, используется как при работе с многостраничными разделами, так и при сохранении
// данных отчета
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураДанныхПоля = Новый Структура;

	ОбрабатываемыеОбласти = Новый Структура;
	Если НЕ ТабличноеПоле.Области.Найти("_СохрЯчейкиВнеТаблиц_001") = Неопределено Тогда
		
		Инд = 1;
		Пока 1 = 1 Цикл
			Если НЕ ТабличноеПоле.Области.Найти("_СохрЯчейкиВнеТаблиц_" + Формат(Инд, "ЧЦ=3; ЧН=; ЧВН=")) = Неопределено Тогда
				ОбрабатываемыеОбласти.Вставить("_" + Инд,  ТабличноеПоле.ПолучитьОбласть("_СохрЯчейкиВнеТаблиц_" + Формат(Инд, "ЧЦ=3; ЧН=; ЧВН=")));
				Инд = Инд + 1;
			Иначе
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
	Иначе		
		
		ОбрабатываемыеОбласти.Вставить("_1",  ТабличноеПоле); 
		
	КонецЕсли;
	
	ОбластиТабличногоПоля = ТабличноеПоле.Области;
	Для каждого ОбрабатываемаяОбласть_ Из ОбрабатываемыеОбласти Цикл
		
		ОбрабатываемаяОбласть = ОбрабатываемаяОбласть_.Значение.Области;
		
		Для Каждого ТекОбласть Из ОбрабатываемаяОбласть Цикл
			
			Если ТипЗнч(ТекОбласть) = Тип("РисунокТабличногоДокумента") Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяОбласть = ОбластиТабличногоПоля[ТекОбласть.Имя];
			
			//пропускаем рисунки табличного документа
	        Если ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
			   Продолжить;
			КонецЕсли;

			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Продолжить;
			КонецЕсли;

			ИмяПоказателя      = ТекущаяОбласть.Имя;
			ЗначениеПоказателя = ТекущаяОбласть.Значение;

			СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

		КонецЦикла;
    		
	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//  унифицирована, редакции не требуется
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			МассивТипов = Новый Массив; 
			МассивТипов.Добавить(Тип("Строка"));
			ОписаниеТиповСтрока15  = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(15, ДопустимаяДлина.Переменная));

			МассивТипов = Новый Массив; 
			МассивТипов.Добавить(Тип("Строка"));
			ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));

			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Число"));
			ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Число"));
			ОписаниеТиповЧисло15   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2011");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2011");

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(15, ДопустимаяДлина.Переменная));

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			Если    чВариантЗаполнения  <> 0 Тогда

				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку.

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						
						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,а в текущей
							// версии - отключено. В этом случае удаляем эту ячейку из таблицы пользовательских
							// настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета.Строки Цикл

			Если мПользовательскиеНастройкиСтраниц.Строки.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц.Строки Цикл

			Если мДеревоСтраницОтчета.Строки.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл
	
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()
 
// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина" );
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
	
	ИзмШапкаПериода();

КонецПроцедуры // ПоказатьПериод()

Функция ОбновитьПоСлужебнымДанным()

	ЧастноеЛицо = НЕ (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо);
	
	Если ЧастноеЛицо Тогда
		РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"HTIN", "ИНН", 10);
		РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"", "ЕДРПОУ", 8);
		РазбитьПоКлеточкам(мПриложение,"HTIN", "ИНН", 10);
		РазбитьПоКлеточкам(мПриложение,"", "ЕДРПОУ", 8);
		
		мДекларацияПоНДФЛ.Области.HJ.Значение = "";
		мДекларацияПоНДФЛ.Области.HF.Значение = "Х";
		мПриложение.Области.HJ.Значение = "";
		мПриложение.Области.HF.Значение = "Х";
	Иначе		
		РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"", "ИНН", 10);
		РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"HTIN", "ЕДРПОУ", 8);
		РазбитьПоКлеточкам(мПриложение,"", "ИНН", 10);
		РазбитьПоКлеточкам(мПриложение,"HTIN", "ЕДРПОУ", 8);
		
		мДекларацияПоНДФЛ.Области.HJ.Значение = "Х";
		мДекларацияПоНДФЛ.Области.HF.Значение = "";
		мПриложение.Области.HJ.Значение = "Х";
		мПриложение.Области.HF.Значение = "";
	КонецЕсли;
	
	РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"HPASS", "Пасп", 8);
	РазбитьПоКлеточкам(мПриложение,"HPASS", "Пасп", 8);

	Для каждого ИмяПанели Из МассивПанелей Цикл
	    Год   = Формат(мСлужебныеДанные.Области.HZY.Значение,"ЧЦ=4;ЧГ=;");	
	    ГодОш = Формат(ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["HZYP"].Значение,"ЧЦ=4;ЧГ=;");
		Для НомЯчейки = 1 По 4 Цикл
			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["Год" + НомЯчейки].Значение   = Сред(Год, НомЯчейки, 1);
			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["ГодОш" + НомЯчейки].Значение = Сред(ГодОш, НомЯчейки, 1);
		КонецЦикла;
		
		Мес = мСлужебныеДанные.Области.HZM.Значение;
		ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["Мес1"].Значение = Сред(Формат(Мес, "ЧЦ=2; ЧВН="),1,1);
		ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["Мес2"].Значение = Сред(Формат(Мес, "ЧЦ=2; ЧВН="),2,1);
		
		МесОш = Формат(ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["HZMP"]. Значение,"ЧЦ=2; ЧДЦ=0; ЧВН=");		
		ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["МесОш1"].Значение = Сред(МесОш,1,1);
		ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["МесОш2"].Значение = Сред(МесОш,2,1);

	КонецЦикла;   
	
	РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"HZIP", "Инд", 5);
	РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"HINTURB", "КодТел", 5);
	РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"HTEL", "Тел", 7);
	РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"HFAX", "Факс", 7);
	
	РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"HZIP1", "Инд1_", 5);
	РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"HINTURB1", "КодТел1_", 5);
	РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"HTEL1", "Тел1_", 7);
	РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"HFAX1", "Факс1_", 7);
	
	ДатаВып = Формат(мДекларацияПоНДФЛ.Области.HDATA.Значение, "ДФ=ddMMyyyy");
	мДекларацияПоНДФЛ.Области.ДеньВып1.Значение = Сред(ДатаВып,1,1);
	мДекларацияПоНДФЛ.Области.ДеньВып2.Значение = Сред(ДатаВып,2,1);
	мДекларацияПоНДФЛ.Области.МесВып1.Значение = Сред(ДатаВып,3,1);
	мДекларацияПоНДФЛ.Области.МесВып2.Значение = Сред(ДатаВып,4,1);
	мДекларацияПоНДФЛ.Области.ГодВып1.Значение = Сред(ДатаВып,5,1);
	мДекларацияПоНДФЛ.Области.ГодВып2.Значение = Сред(ДатаВып,6,1);
	мДекларацияПоНДФЛ.Области.ГодВып3.Значение = Сред(ДатаВып,7,1);
	мДекларацияПоНДФЛ.Области.ГодВып4.Значение = Сред(ДатаВып,8,1);
	
	РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"HTINSTI", "КодНалоговой", 8);
	РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"HPAGES1", "КолДек", 5, Истина);
	
	РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"R00G01I", "РабШтат", 5, Истина);
	РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"R00G02I", "РабГПХ", 5, Истина);
	
	РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"HPAGES", "КолРасч", 6, Истина);
	
	РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"HKBOS", "ИннРук", 10);
	РазбитьПоКлеточкам(мДекларацияПоНДФЛ,"HKBUH", "ИннГБ",10);
	
	РазбитьПоКлеточкам(мПриложение,"HKBOS", "ИннРук", 10);
	РазбитьПоКлеточкам(мПриложение,"HKBUH", "ИннГБ", 10);
	
	Для каждого ИмяПанели Из МассивПанелей Цикл
		Дата = Формат(мСлужебныеДанные.Области.HFILL.Значение,"ДФ= дд/ММ/гггг");	
		Для НомЯчейки = 1 По 10 Цикл
			Если  Сред(Дата, НомЯчейки, 1)<>"/" Тогда
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["Д" + НомЯчейки].Значение = Сред(Дата, НомЯчейки, 1);
			Иначе
				Продолжить;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла; 

КонецФункции
 
Процедура РазбитьПоКлеточкам(ИмяПанели, ИмяПоказателя, ИмяКлеточки, КоличествоКлеточек, ДополнятьНулямиСлева = Ложь)

	Если ЗначениеЗаполнено(ИмяПоказателя) Тогда
		Значение = СОКРЛП(ФОРМАТ(ИмяПанели.Области[ИмяПоказателя].Значение,"ЧН=-; ЧГ="));
	Иначе	
	    Значение = "";
	КонецЕсли;
	
	Если  ДополнятьНулямиСлева И НЕ Значение = "-" И НЕ Значение = "" Тогда
		Значение = Прав("000000000000000000000" + Значение, КоличествоКлеточек);	
	КонецЕсли;
	
	Для Инд = 1 ПО КоличествоКлеточек Цикл
		ИмяПанели.Области[ИмяКлеточки + Инд].Значение = СРед(Значение,Инд,1);
	КонецЦикла;

КонецПроцедуры

//===========================================
Процедура ИзмШапкаПериода()  
	
	//дата подачи отчета в деларации и во всех приложниях 
	Если НЕ ЗначениеЗаполнено(мСлужебныеДанные.Области.HFILL.Значение) Тогда
		мСлужебныеДанные.Области.HFILL.Значение  = РабочаяДата;	
	КонецЕсли;
	
	//все ячейки из служебной области
	мСлужебныеДанные.Области.HZY.Значение = Формат(Год(мДатаНачалаПериодаОтчета),"ЧЦ=4;ЧГ=;");
	мСлужебныеДанные.Области.PERIOD_YEAR.Значение = мСлужебныеДанные.Области.HZY.Значение;
	
	мСлужебныеДанные.Области.HZM.Значение =  Месяц(мДатаНачалаПериодаОтчета);
	мСлужебныеДанные.Области.PERIOD_MONTH.Значение = мСлужебныеДанные.Области.HZM.Значение;
	мСлужебныеДанные.Области.PERIOD_TYPE.Значение = 1;

	ОбновитьПоСлужебнымДанным();
КонецПроцедуры 	


// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации()
	
	//сначала все постоянные сведения из справочника "Организации"
	ОргНазв   = Организация.НаименованиеПолное;
	
	мДекларацияПоНДФЛ.Области.HNAME.Значение = ОргНазв;
	мПриложение.Области.HNAME.Значение       = ОргНазв;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ИННРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","ИННБух");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","НалоговаяИнспекция");

	Сведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей);
	
	ФИОДиректора          = Сведения.ФИОРук;
	ФИОГлавБуха           = Сведения.ФИОБух;
	ИННРук       		  = Сведения.ИННРук;
	ИННБух                = Сведения.ИННБух;
	КодЕДРПОУ             = Сведения.КодПоЕДРПОУ;
	НалоговаяИнспекция    = Сведения.НалоговаяИнспекция;
	
	Для каждого ИмяПанели Из МассивПанелей Цикл
		ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["HBOS"].Значение      = ФИОДиректора; 
		ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["HKBOS"].Значение     = ИННРук; 
		ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["HBUH"].Значение      = ФИОГлавБуха; 
		ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["HKBUH"].Значение     = ИННБух; 
	КонецЦикла;   
	
	ЧастноеЛицо = НЕ (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо);

	Для каждого ИмяПанели Из МассивПанелей Цикл
		ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПанели].Области["HTIN"].Значение      = Строка(КодЕДРПОУ); 
	КонецЦикла;   		
	мСлужебныеДанные.ОБласти.TIN.Значение = Строка(КодЕДРПОУ);
	
	НомерТелефона = УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	СтруктураТелефона = УправлениеКонтактнойИнформацией.РазложитьТелефонПоПолям(НомерТелефона);
	НомерФакса = УправлениеКонтактнойИнформацией.ПолучитьФаксИзКонтактнойИнформации(Организация);
	СтруктураФакса = УправлениеКонтактнойИнформацией.РазложитьТелефонПоПолям(НомерФакса);
	
	СтруктураТелефона.СамТелефон = СтрЗаменить(СтруктураТелефона.СамТелефон," ", "");
	СтруктураТелефона.СамТелефон = СтрЗаменить(СтруктураТелефона.СамТелефон,"-", "");
	СтруктураТелефона.СамТелефон = СтрЗаменить(СтруктураТелефона.СамТелефон,"/", "");
	СтруктураТелефона.СамТелефон = СтрЗаменить(СтруктураТелефона.СамТелефон,"(", "");
	СтруктураТелефона.СамТелефон = СтрЗаменить(СтруктураТелефона.СамТелефон,")", "");
	СтруктураТелефона.СамТелефон = СтрЗаменить(СтруктураТелефона.СамТелефон,".", "");
	СтруктураТелефона.СамТелефон = СтрЗаменить(СтруктураТелефона.СамТелефон,",", "");
	
	СтруктураФакса.СамТелефон = СтрЗаменить(СтруктураФакса.СамТелефон," ", "");
	СтруктураФакса.СамТелефон = СтрЗаменить(СтруктураФакса.СамТелефон,"-", "");
	СтруктураФакса.СамТелефон = СтрЗаменить(СтруктураФакса.СамТелефон,"/", "");
	СтруктураФакса.СамТелефон = СтрЗаменить(СтруктураФакса.СамТелефон,"(", "");
	СтруктураФакса.СамТелефон = СтрЗаменить(СтруктураФакса.СамТелефон,")", "");
	СтруктураФакса.СамТелефон = СтрЗаменить(СтруктураФакса.СамТелефон,".", "");
	СтруктураФакса.СамТелефон = СтрЗаменить(СтруктураФакса.СамТелефон,",", "");
	
	мДекларацияПоНДФЛ.Области.HLOC.Значение 	= УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
	мДекларацияПоНДФЛ.Области.HINTURB.Значение 	= СтруктураТелефона.КодГорода;
	мДекларацияПоНДФЛ.Области.HTEL.Значение 	= СтруктураТелефона.СамТелефон;
	мДекларацияПоНДФЛ.Области.HFAX.Значение   	= СтруктураФакса.СамТелефон;
	мДекларацияПоНДФЛ.Области.HEMAIL.Значение 	= УправлениеКонтактнойИнформацией.ПолучитьEmailИзКонтактнойИнформации(Организация);
	
	//получить индекс из контактной информации и емэйл через функции общего
	Если ЗначениеЗаполнено(Организация) Тогда
		ВидАдреса = Справочники.ВидыКонтактнойИнформации["ЮрАдресОрганизации"];
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Объект", Организация);
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
		Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
		
		Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда
			
			Если    Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо 
				ИЛИ РегламентированнаяОтчетность.ИдКонфигурации() = "ЗУП" Тогда
				
				ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
				Объект    = Организация;
				
			Иначе
				
				ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица;
				Объект    = Организация.ИндивидуальныйПредприниматель;
				
			КонецЕсли;			
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
			Запрос.УстановитьПараметр("Объект", Объект);
			Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	КонтактнаяИнформация.Поле1
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Объект
			|	И
			|	КонтактнаяИнформация.Тип = &Тип
			|	И
			|	КонтактнаяИнформация.Вид = &Вид
			|";
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Индекс = РезультатЗапроса.Выгрузить()[0].Поле1;
			КонецЕсли;
		КонецЕсли;
	  КонецЕсли;
	мДекларацияПоНДФЛ.Области.HZIP.Значение = Индекс;
	
	//налоговая инспекция из справочника налоговых инспекций
	Если (НалоговаяИнспекция <> Неопределено) Тогда
		Если РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП" Тогда
			мДекларацияПоНДФЛ.Области.HSTI.Значение  = НалоговаяИнспекция.Наименование;
		Иначе	
			НалоговаяИнспекция_НаименованиеПолное 		= НалоговаяИнспекция.НаименованиеПолное;
			НалоговаяИнспекция_Наименование 			= ?(ЗначениеЗаполнено(НалоговаяИнспекция_НаименованиеПолное),
														НалоговаяИнспекция_НаименованиеПолное, НалоговаяИнспекция.Наименование); 
			мДекларацияПоНДФЛ.Области.HSTI.Значение  = НалоговаяИнспекция_Наименование;
		КонецЕсли;	
		мДекларацияПоНДФЛ.Области.HTINSTI.Значение 		= НалоговаяИнспекция.ЕДРПОУ;
		мСлужебныеДанные.Области.C_RAJ.Значение    		= НалоговаяИнспекция.КодАдмРайона;
		мСлужебныеДанные.Области.C_REG.Значение    		= НалоговаяИнспекция.Родитель.Код;
		мСлужебныеДанные.Области.C_STI.Значение     	= НалоговаяИнспекция.Код;
		мСлужебныеДанные.Области.C_STI_ORIG.Значение   	= НалоговаяИнспекция.Код;
	КонецЕсли;
	
	мСлужебныеДанные.Области.C_DOC_TYPE.Значение = 0; //номер исправленного доекумента. Для первого подающегося документа  = 0
	мСлужебныеДанные.Области.C_DOC_CNT.Значение  = 1;  //номер документа в периоде. 
	
	ИзмШапкаПериода();
	
	ОбновитьПоСлужебнымДанным();
		
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(НСтр("ru='Декларация по НДС: при выводе сумм в гривнях точность не может превышать 2 знака';uk='Декларація по ПДВ: при виведенні сум у гривнях точність не може перевищувати 2 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(НСтр("ru='Декларация по НДС: при выводе сумм в тысячах гривень точность не может превышать 3 знака';uk='Декларація по ПДВ: при виведенні сум у тисячах гривень точність не може перевищувати 3 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(НСтр("ru='Декларация по НДС: при выводе сумм в миллионах гривень точность не может превышать 6 знаков';uk='Декларація по ПДВ: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

	Сообщить(НСтр("ru='После изменения формата вывода значений, для корректного расчета итогов необходимо перезаполнить отчет!';uk='Після зміни формату виводу значень, для корректного розрахунку підсумків треба перезаполвнити звіт!'"), СтатусСообщения.Внимание);	
КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	//формирование строки формата для присваивания ее полю "Формат" в свойствах ячейки
	//формат зависит от выбранной на форме отчета единицы измерения (представления) его показателей
	//присвоение форма происходит только для тех показателей. для которых установлен признак "Е",
	//т.е. признак денежного формата с регулируемой точностью
	//вообще в макете еще можно задать числовой формат с неизменяемой точностью "Ч", форма строки "С"
	//и даты "Д"
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		мДелитель = 1;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		мДелитель = 1000;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		мДелитель = 1000000;

	КонецЕсли;


	//таблица мТаблицаСоставПоказателей формируется по макету показателейц отчета
	//в модуле самого объекта, т.е. отчета
	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		// только для денежных показателей с регулируемой
		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			Иначе
				// определяем колво строк многострочного раздела
				// и прменяем процедуру форматирования к данной графе
				// по всем строкам
				//для одного из приложений декларации будет актуально тоже
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//  возможнозедась также понадобится обрабатывать многострочные группы...
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = ОпределитьСтраницуПанелиПоКодуПоказателя(ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Коммент       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Коммент)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Коммент;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет пользовательские настройки при изменении версии формы.
// похоже, что актуальна только для отчетов, в которых присутствуют
// реквизиты, с помощью которых пользователь может сам корректировать
// формат вывода для каждого конретного показателя (с помощью наличия соотв реквизитов на форме
// отчета, указывать, можно ли заполнять автоматом, а также ввод суммы корректировки), 
// пока такой сервис был доступен только для отчетов по МСФО 
Процедура ОбновитьПользовательскиеНастройки(СписокСохранения)
    Перем ДанныеМногострочныхРазделов;
	Перем ИсходноеКоличествоСтрокГруппы;
	
	Сообщить(НСтр("ru='Измененилась версия формы отчета."
"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
"Виконується відновлення користувальницьких настройок.'"), СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	ВерсияФормы = СписокСохранения.ВерсияФормы;
	Если ВерсияФормы = "01/01/2011" Тогда
		
		Расшифровка = Неопределено;
		СписокСохранения.Свойство("Расшифровка", Расшифровка);
		Если Расшифровка <> Неопределено Тогда
			СпП = Расшифровка;
		КонецЕсли;
		
		НайденаяСтрокаВРасшифровке = Спп.Найти("R0150G3", "ИмяЯчейки"); 
		Если  Не НайденаяСтрокаВРасшифровке = Неопределено Тогда 
			НайденаяСтрокаВРасшифровке.ИмяЯчейки = "R0160G3";	
		КонецЕсли; 	
		
		НайденаяСтрокаВРасшифровке = Спп.Найти("R0140G3", "ИмяЯчейки"); 
		Если  Не НайденаяСтрокаВРасшифровке = Неопределено Тогда 
			НайденаяСтрокаВРасшифровке.ИмяЯчейки = "R0150G3";	
		КонецЕсли; 	
		
		СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаДекларацияПоНДФЛ.Вставить("R0160G3", СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаДекларацияПоНДФЛ.R0150G3);
		СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаДекларацияПоНДФЛ.Вставить("R0150G3", СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаДекларацияПоНДФЛ.R0140G3);
		СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаДекларацияПоНДФЛ.Вставить("R0140G3", СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаДекларацияПоНДФЛ.R0130G3);
		
		СписокСохранения.ВерсияФормы = "01/03/2011";
		Модифицированность = Истина;
	КонецЕсли;


	Если Модифицированность ИЛИ ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить(НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Оновлення користувальницьких настройок успішно завершене!'"));

	Иначе

		Сообщить(НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі користувальницьких настройок не виявлені!'"));

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
    ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

 КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Открывает форму документа ФормаНастройкиСтраниц с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//  унифицирована и актуальна только при наличии таких разделов
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиСтраниц = ПолучитьФорму("ФормаНастройкиСтраниц", ЭтаФорма, "дляВыбораСтраницОтчета");

	Если ФормаНастройкиСтраниц.Открыта() Тогда
		ФормаНастройкиСтраниц.Активизировать();
		Если Вопрос(НСтр("ru='Предыдущая операция выбора листов не завершена."
"Завершить?';uk='Попередня операція вибору аркушів не завершена."
"Завершити?'"),РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиСтраниц.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиСтраниц.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиСтраниц.мВариантВыбора          = ВариантВыбора;

	ВыбранноеЗначение = ФормаНастройкиСтраниц.ОткрытьМодально();

	Если ВыбранноеЗначение <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = ВыбранноеЗначение;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

Процедура РазбитьПечатнуюФорму(ПечФорма, ИмяФормы = "")
	
	УчитыватьАвтомасштаб = Истина;

	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	Если ЕстьДуплекс Тогда
		НовТаблДок = Новый ТабличныйДокумент();
	КонецЕсли;
	
	Сч = 0;
	Пока Сч < ПечФорма.ВысотаТаблицы Цикл
		 Сч = Сч + 1;
		 
		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			
			// проверим, не должна ли предпоследняя строка печататься вместе со текущей ("не влезшей") строкой.
			// если так, то "откатимся" вверх
			Пока ПослВерх < Сч-1 И ПечФорма.ПолучитьОбласть(Сч-1, , Сч-1, ).Область().ВместеСоСледующим Цикл
			  Сч = Сч - 1;
			КонецЦикла; 
			
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		Если НЕ ЕстьДуплекс Тогда
			НовТаблДок = Новый ТабличныйДокумент();
		КонецЕсли;
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		Если НЕ ЕстьДуплекс Тогда
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
		КонецЕсли;
	КонецЕсли;
	Если ЕстьДуплекс Тогда
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
// унифицирована, но актуально только для отчетов с наличием таких многостраничных разделов
// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//  процедура унифицирована
Процедура ВывестиНаПечатьЛист(СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
  
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	ПечатнаяФорма = Новый ТабличныйДокумент();

	ТабличноеПоле = ЭлементыФормы[ИмяТабличногоПоля];
	Если ПустаяСтрока(ИмяОбластиТаблПоля) Тогда
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть();
	Иначе
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть(ИмяОбластиТаблПоля);
	КонецЕсли;
	
	ПечатнаяФорма.Вывести(ОбластьПечати);
		
	РазбитьПечатнуюФорму(ПечатнаяФорма, ИмяЛиста);
 
КонецПроцедуры // ВывестиНаПечатьЛист()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
// очень похоже, что в реготчетах не используется (отстутсвуют соотв реквизиты на форме)
// такой сервис был только в отчетах в МСФО
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;
	
	Если Тип ("РисунокТабличногоДокумента") = ТипЗнч (ТекущаяЯчейка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	
	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Коммент           = НайденнаяСтрока.Комментарий;
	
	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Коммент;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);
	
КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет();
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
// очень похоже, что в реготчетах не используется (отстутсвуют соотв реквизиты на форме)
// такой сервис был только в отчетах в МСФО
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//   очень похоже, что в реготчетах не используется (отстутсвуют соотв реквизиты на форме)
// такой сервис был только в отчетах в МСФО
Процедура ИзменитьКомментарийПоЯчейке(Коммент)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Коммент;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Коммент;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//  унифицирована для всех отчетов
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя)

	ИмяСтраницыПанели = ОпределитьСтраницуПанелиПоКодуПоказателя(ИмяПоказателя);

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели);
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыПанели].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемых 
//и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//  унифицирована для всех отчетов
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле )

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		
		Если Тип ("РисунокТабличногоДокумента") <> ТипЗнч (ТекущаяОбласть) Тогда
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			//Если ТекущаяОбласть.Защита = Истина Тогда
			//	Продолжить;
			//КонецЕсли;
			
			Если Найти(Врег(ТекущаяОбласть.Имя), ВРег("Штампик")) > 0  Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяОбласть.Очистить();
		КонецЕсли;
	КонецЦикла;
      
КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
// унифицирована для всех отчетов
Процедура Очистить()
	
	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле = ЭлементыФормы[ИмяТекТабличногоПоля];

		ОчиститьТабличноеПоле(ТекТабличноеПоле);

	КонецЦикла;

	мДекларацияПоНДФЛ.Области.HZ.Значение = "X";
	мДекларацияПоНДФЛ.Области.HZN.Значение = "";
	мДекларацияПоНДФЛ.Области.HZU.Значение = "";
	мДекларацияПоНДФЛ.Области.HZ1.Значение = "";
	мДекларацияПоНДФЛ.Области.HZN1.Значение = "";
	мДекларацияПоНДФЛ.Области.HZU1.Значение = "";
	мСлужебныеДанные.Области.C_DOC_STAN.Значение = 1;
	мПриложение.Области.C_DOC_STAN.Значение     = 1;

	ЗаполнитьСведенияОбОрганизации();

	ОбновитьПоСлужебнымДанным();

	// Очищаем расшифровку.
	СпП.Очистить();
	
	// устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

КонецПроцедуры // Очистить()

// Обрабатывает полученный из формы ФормаНастройкиСтраниц дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//  унифицирована для всех отчетов
Процедура Печать(ВидПечати)

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
    мПечатныеФормы.Очистить();
	
	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = СтрокаУровня1.ВыводНаПечать;

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = СтрокаУровня2.ВыводНаПечать;

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = СтрокаУровня3.ВыводНаПечать;
						Если Пометка = 0 Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

						ВывестиНаПечатьЛист(СтруктураПараметров);
						
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

				ВывестиНаПечатьЛист(СтруктураПараметров);
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

		ВывестиНаПечатьЛист(СтруктураПараметров);
		
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()

// Управляет видимостью страниц основной панели формы.
//
Процедура ПоказатьСтраницыОтчета()

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	ИмеютсяСкрытые      = Ложь;
	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		ПоказатьСтраницу   = СтрокаУровня1.ПоказатьСтраницу;

		Если ПоказатьСтраницу = 0 Тогда
			ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Ложь;
			ИмеютсяСкрытые = Истина;
		Иначе
			ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Истина;

		КонецЕсли; 

	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	КнопкиНастройки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаНастройкаСтраниц;
	ИсходныйТекст   = НСтр("ru='Настройка страниц';uk='Настройка сторінок'");

	КнопкиНастройки.Текст = ИсходныйТекст;

	Если ИмеютсяСкрытые Тогда
		// Выводим в названии кнопки "Настройка страниц" доп. сммвол '*'.
		КнопкиНастройки.Текст = ИсходныйТекст + " (*)";
	КонецЕсли;

КонецПроцедуры // ПоказатьСтраницыОтчета()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//  похоже. унифицированна для всех отчетов
Функция Сохранить()  Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.

		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;

		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();

	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Периодичность              = Периодичность;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;


	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);
	
	СписокСохранения.Вставить("Авторасчет", Авторасчет);
	СписокСохранения.Вставить("Подразделение", Подразделение);
	СписокСохранения.Вставить("НеВключатьЧПников", НеВключатьЧПников);
	СписокСохранения.Вставить("ВыплаченныйДоходЧистыми", ВыплаченныйДоходЧистыми);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", мСохранятьРасшифровку);

	Если мСохранятьРасшифровку = Истина Тогда
		СписокСохранения.Вставить("Расшифровка", СпП);
	КонецЕсли;
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// Сохраняем выбранные листы для печати в хранилище
	ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
	мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	Модифицированность = Ложь;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
// унифицированна для всех отчетов, редакция не требуется
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Расшифровка;

	// восстанавливаем реквизиты отчета
	Организация              = мСохраненныйДок.Организация;
	Периодичность            = мСохраненныйДок.Периодичность;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();
	
	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки(СписокСохранения);
		КонецЕсли;
	КонецЕсли;
	
	СписокСохранения.Свойство("СохранятьРасшифровку", мСохранятьРасшифровку);
	Если мСохранятьРасшифровку = Неопределено Тогда
		мСохранятьРасшифровку = Истина;
	КонецЕсли;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюНастройка.Кнопки.ПодменюРасшифровка.Кнопки.КнопкаСохранятьРасшифровку.Пометка = мСохранятьРасшифровку;
	
	СписокСохранения.Свойство("Расшифровка", Расшифровка);
	Если Расшифровка <> Неопределено Тогда
		СпП = Расшифровка;
	КонецЕсли;
	
	Если НЕ СписокСохранения.Свойство("Авторасчет", Авторасчет) Тогда
		Авторасчет = Истина;	
	КонецЕсли;	
	СписокСохранения.Свойство("Подразделение", Подразделение);
	СписокСохранения.Свойство("НеВключатьЧПников", НеВключатьЧПников);
	СписокСохранения.Свойство("ВыплаченныйДоходЧистыми", ВыплаченныйДоходЧистыми);
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки
		КонецЦикла;
	КонецЦикла;
	УстановитьФорматВывода();
	
	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	ПоказатьСтраницыОтчета();

	АвторасчетПриИзменении(Неопределено);
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//  уникальна для каждого отчета  , требуется соотв редакция
Процедура Расчет()
	
	Если НЕ Авторасчет = Истина Тогда
		Возврат;
	КонецЕсли;
        	
	мДекларацияПоНДФЛ.Области.R0070G3.Значение = ОкруглитьЧислоПоФормату(мДекларацияПоНДФЛ.Области.R0030G3.Значение)
											+ ОкруглитьЧислоПоФормату(мДекларацияПоНДФЛ.Области.R0050G3.Значение)
											- ОкруглитьЧислоПоФормату(мДекларацияПоНДФЛ.Области.R0060G3.Значение);
											
	СуммаКорректировки = ОкруглитьЧислоПоФормату(мДекларацияПоНДФЛ.Области.R0100G3.Значение)- ОкруглитьЧислоПоФормату(мДекларацияПоНДФЛ.Области.R0090G3.Значение);
	Если СуммаКорректировки >= 0  Тогда
		мДекларацияПоНДФЛ.Области.R0111G3.Значение = СуммаКорректировки;
		мДекларацияПоНДФЛ.Области.R0112G3.Значение = 0;
		мДекларацияПоНДФЛ.Области.R0120G3.Значение = СуммаКорректировки * мДекларацияПоНДФЛ.Области.R0120G1.Значение / 100;
	Иначе	
		мДекларацияПоНДФЛ.Области.R0111G3.Значение = 0;
		мДекларацияПоНДФЛ.Области.R0112G3.Значение = - СуммаКорректировки;
		мДекларацияПоНДФЛ.Области.R0120G3.Значение = 0;
	КонецЕсли;
	
	СуммаКорректировки = ОкруглитьЧислоПоФормату(мПриложение.Области.R020G3.Значение)- ОкруглитьЧислоПоФормату(мПриложение.Области.R010G3.Значение);
	Если СуммаКорректировки >= 0  Тогда
		мПриложение.Области.R031G3.Значение = СуммаКорректировки;
		мПриложение.Области.R032G3.Значение = 0;
		мПриложение.Области.R040G3.Значение = СуммаКорректировки * мПриложение.Области.R040G1.Значение / 100;
	Иначе	
		мПриложение.Области.R031G3.Значение = 0;
		мПриложение.Области.R032G3.Значение = - СуммаКорректировки;
		мПриложение.Области.R040G3.Значение = 0;
	КонецЕсли;
	
КонецПроцедуры // Расчет()

Процедура СоздатьТаблицуСоСхемамиВыгрузки() Экспорт
	
	//для возможности выгрузки в XML файл	
	тбСхемыXML = Новый ТаблицаЗначений;
	ТипКолИмяСхемы = СоздатьОписанияТипов("Строка",8);
	тбСхемыXML.Колонки.Добавить("ИмяСхемы",ТипКолИмяСхемы,НСтр("ru='Имя файла-схемы';uk=""Ім'я файлу-схеми"""));
	ТипКолПредставлениеСхемы = СоздатьОписанияТипов("Строка",80);
	тбСхемыXML.Колонки.Добавить("ПредставлениеСхемы",ТипКолПредставлениеСхемы,НСтр("ru='Наименование регл.отчета';uk='Найменування регл.звіту'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	тбСхемыXML.Колонки.Добавить("НазваниеСтраницыПанели",ТипКолНазваниеСтраницыПанели,НСтр("ru='Наименование страницы панели';uk='Найменування сторінки панелі'"));

	ТипКолфВыгрузка = СоздатьОписанияТипов("Число",1,0);
	тбСхемыXML.Колонки.Добавить("фВыгрузка",ТипКолфВыгрузка,НСтр("ru='Выгружать?';uk='Вивантажувати?'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	ТипПрефикса = СоздатьОписанияТипов("Строка",2);
	тбСхемыXML.Колонки.Добавить("Префикс",ТипПрефикса,НСтр("ru='Префикс';uk='Префікс'"));

	Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "J0501001"; 
		НовСтрока.ПредставлениеСхемы =НСтр("ru='Декларация по НДФЛ';uk='Декларація з ПДФО'");
		НовСтрока.НазваниеСтраницыПанели ="ДекларацияПоНДФЛ";


		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "J0515101"; 
		НовСтрока.ПредставлениеСхемы =НСтр("ru='Приложение ';uk='Додаток '");
		НовСтрока.НазваниеСтраницыПанели ="Приложение";
		
	Иначе	
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "F0501001"; 
		НовСтрока.ПредставлениеСхемы =НСтр("ru='Декларация по НДФЛ';uk='Декларація з ПДФО'");
		НовСтрока.НазваниеСтраницыПанели ="ДекларацияПоНДФЛ";


		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "F0515101"; 
		НовСтрока.ПредставлениеСхемы =НСтр("ru='Приложение ';uk='Додаток '");
		НовСтрока.НазваниеСтраницыПанели ="Приложение";
		
	Конецесли;

КонецПроцедуры

Функция СформироватьТекстЗапросаПоШтатнымСовместителям(ДопУсловие = "")
	
	ТекстЗапросаПоШтатнымСовместителям = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                                     |	РаботникиОрганизаций.Сотрудник.Физлицо КАК Сотрудник,
	                                     |	РаботникиОрганизаций.Сотрудник.ВидЗанятости КАК ВидЗанятости
	                                     |ИЗ
	                                     |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаСреза, ) КАК РаботникиОрганизаций
	                                     |ГДЕ
	                                     |	(РаботникиОрганизаций.Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы
	                                     |			ИЛИ РаботникиОрганизаций.Сотрудник.ВидЗанятости = &Совместительство)
	                                     |	И РаботникиОрганизаций.Организация = &Организация
	                                     |	И РаботникиОрганизаций.ЗанимаемыхСтавок > 0 "+ ДопУсловие +"
	                                     |
	                                     |ОБЪЕДИНИТЬ
	                                     |
	                                     |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                     |	РаботникиОрганизаций.Сотрудник.Физлицо,
	                                     |	РаботникиОрганизаций.Сотрудник.ВидЗанятости
	                                     |ИЗ
	                                     |	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	                                     |ГДЕ
	                                     |	(РаботникиОрганизаций.Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы
	                                     |			ИЛИ РаботникиОрганизаций.Сотрудник.ВидЗанятости = &Совместительство)
	                                     |	И РаботникиОрганизаций.Организация = &Организация
	                                     |	И РаботникиОрганизаций.ЗанимаемыхСтавок > 0 "+ ДопУсловие +"
	                                     |	И РаботникиОрганизаций.Период МЕЖДУ &ДатаСреза И &ДатаСрезаПлюсМесяц";
		
   Возврат (ТекстЗапросаПоШтатнымСовместителям);  	
   
КонецФункции

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
// уникальна для каждого отчета, т.е. нужна редакция
Процедура ЗаполнитьАвто() Экспорт

	УсловиеНаПодразделение = "";
	Если ЗначениеЗаполнено(Подразделение) Тогда
		УсловиеНаПодразделение	= "И 
								   |(ВЫБОР КОГДА Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций
								   |	ТОГДА
								   |		Сотрудник В (ВЫБРАТЬ
								   |						РаботникиОрганизацийСрезПоследних.Сотрудник
		                      	   |					 ИЗ
		                      	   |						РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаКонцаПериода, Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
		                      	   |					 ГДЕ
		                      	   |						(РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации В ИЕРАРХИИ (&Подразделение)
		                      	   |						ИЛИ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации = &Подразделение))
								   |	ИНАЧЕ НЕ &НеВключатьЧПников
								   |КОНЕЦ)";
	КонецЕсли;	

	//запрос для получения числа штатных и совместителей
	ЗапросПоШтатнымСовместителям = Новый Запрос();
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("Организация",         Организация);
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("ОсновноеМестоРаботы", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("Совместительство", Перечисления.ВидыЗанятостиВОрганизации.Совместительство);
	
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("Подразделение", Подразделение);
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("НеВключатьЧПников", НеВключатьЧПников);
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("ДатаКонцаПериода", мДатаКонцаПериодаОтчета);
	
	ТекстЗапросаПоШтатнымСовместителям = СформироватьТекстЗапросаПоШтатнымСовместителям(УсловиеНаПодразделение);
	
	ЗапросПоШтатнымСовместителям.Текст = ТекстЗапросаПоШтатнымСовместителям;
	
	МассивШтатныхМес = Новый Массив;
	МассивСовместителейМес = Новый Массив;
	
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("ДатаСреза",мДатаНачалаПериодаОтчета);
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("ДатаСрезаПлюсМесяц", мДатаКонцаПериодаОтчета);
	ТаблицаШтатныхСовместителей = ЗапросПоШтатнымСовместителям.Выполнить().Выгрузить();
	
	ОтборШтатных = Новый Структура("ВидЗанятости",Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	УстановитьЗначениеПоказателя("R00G01I", ТаблицаШтатныхСовместителей.НайтиСтроки(ОтборШтатных).Количество());
	
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") 
	 ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП") 
	 ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "УТП") Тогда
		ЗапросГПХ = Новый Запрос;
		ЗапросГПХ.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	 Работники.Сотрудник.ФизЛицо КАК Сотрудник
		|ИЗ  Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК Работники
		|ГДЕ 
		| 	Работники.Проведен
		| И Работники.ДатаОкончания >= &ДатаНачала
		| И Работники.ДатаНачала <= &ДатаКонца
		| И Работники.Организация = &Организация  "+УсловиеНаПодразделение+"
		|";	
		ЗапросГПХ.УстановитьПараметр("ДатаНачала",мДатаНачалаПериодаОтчета);
		ЗапросГПХ.УстановитьПараметр("ДатаКонца",мДатаКонцаПериодаОтчета);
		ЗапросГПХ.УстановитьПараметр("Организация",Организация);
		ЗапросГПХ.УстановитьПараметр("НеВключатьЧПников", НеВключатьЧПников);
		ЗапросГПХ.УстановитьПараметр("Подразделение", Подразделение);
		ЗапросГПХ.УстановитьПараметр("ДатаКонцаПериода", мДатаКонцаПериодаОтчета);
		
		КолГПХ = ЗапросГПХ.Выполнить().Выгрузить().Количество();
	Иначе
		
		КолГПХ = 0;
	КонецЕсли;
	УстановитьЗначениеПоказателя("R00G02I", КолГПХ);
	

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("НеВключатьЧПников", НеВключатьЧПников);
	Запрос.УстановитьПараметр("ДатаКонцаПериода", мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаНач", мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон", мДатаКонцаПериодаОтчета);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.ПериодВзаиморасчетов, МЕСЯЦ) КАК НалоговыйПериод,
	|	ЕстьNULL(СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Доход ИНАЧЕ 0 КОНЕЦ),0) КАК ДоходПриход,
	|	ЕстьNULL(СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Доход ИНАЧЕ 0 КОНЕЦ),0) КАК ДоходРасход,
	|	ЕстьNULL(СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Налог ИНАЧЕ 0 КОНЕЦ),0) КАК НалогПриход,
	|	ЕстьNULL(СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Налог ИНАЧЕ 0 КОНЕЦ),0) КАК НалогРасход
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛОбороты
	|	ГДЕ 
	|		 (Период >= &ДатаНач) И (Период <= &ДатаКон)
	|  	   И Организация = &Организация
	|	   И НЕ ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.ВидСтавкиРезидента = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.НеОблагается)	
	|	   " + УсловиеНаПодразделение + "
	|
	|   СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.ПериодВзаиморасчетов, МЕСЯЦ)
	|ИТОГИ
	|	СУММА(ДоходПриход),
	|	СУММА(ДоходРасход),
	|	СУММА(НалогРасход)
	|ПО ОБЩИЕ
	|";
	
	ВыборкаНачисленияЗаТекущийМесяц = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	R0010G3 = 0;
	R0020G3 = 0;
	R0040G3 = 0;
	Если ВыборкаНачисленияЗаТекущийМесяц.Следующий() Тогда
		// начислено дохода в периоде
		R0010G3 = ВыборкаНачисленияЗаТекущийМесяц.ДоходПриход;	
		Если ВыплаченныйДоходЧистыми Тогда
			R0020G3 = ВыплаченныйДоходЧистыми(УсловиеНаПодразделение);
		Иначе	
			// выплачено дохода в периоде
			R0020G3 = ВыборкаНачисленияЗаТекущийМесяц.ДоходРасход;	
		КонецЕсли;
		// перечислено налога в периоде
		R0040G3 = ВыборкаНачисленияЗаТекущийМесяц.НалогРасход;	
	КонецЕсли;
	УстановитьЗначениеПоказателя("R0010G3", R0010G3);	
	УстановитьЗначениеПоказателя("R0020G3", R0020G3);	
	УстановитьЗначениеПоказателя("R0040G3", R0040G3);	
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма,
															"R0010G3",
															"Графа 01",
															"+",
															"Сумма начисленного дохода в отчетном месяце по данным регистра ""Взаиморасчеты по НДФЛ""",
															R0010G3);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма,
															"R0020G3",
															"Графа 02",
															"+",
															?(ВыплаченныйДоходЧистыми,
																	"""Чистый"" доход (за минусом удержаний и взносов), выплаченный в отчетном месяце по данным регистра ""Взаиморасчеты с работниками организаций""",
																	"Доход, выплаченный (в указанной сумме за минусом удержаний и взносов) в отчетном месяце по данным регистра ""Взаиморасчеты по НДФЛ"""),
															
															
															R0020G3);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма,
															"R0040G3",
															"Графа 04",
															"+",
															"Сумма перечисленного налога в отчетном месяце по данным регистра ""Взаиморасчеты по НДФЛ""",
															R0040G3);
	
	НачисленныйНалогТекПериод = 0;
	ВыплаченныйНалогПрошлыйПериод = 0;
	ВыплаченоНалогТекПериод = 0;
	Выборка = ВыборкаНачисленияЗаТекущийМесяц.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.НалоговыйПериод = мДатаНачалаПериодаОтчета Тогда
			НачисленныйНалогТекПериод = НачисленныйНалогТекПериод + Выборка.НалогПриход;
			ВыплаченоНалогТекПериод   = ВыплаченоНалогТекПериод   + Выборка.НалогРасход;
		ИначеЕсли Выборка.НалоговыйПериод < мДатаНачалаПериодаОтчета Тогда
			ВыплаченныйНалогПрошлыйПериод = ВыплаченныйНалогПрошлыйПериод + Выборка.НалогРасход;
		КонецЕсли;	
	КонецЦикла;
	УстановитьЗначениеПоказателя("R0030G3", НачисленныйНалогТекПериод);	
	УстановитьЗначениеПоказателя("R0050G3", ВыплаченныйНалогПрошлыйПериод);	
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма,
															"R0030G3",
															"Графа 03",
															"+",
															"Сумма начисленного налога в отчетном месяце за отчетный месяц по данным регистра ""Взаиморасчеты по НДФЛ""",
															НачисленныйНалогТекПериод);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма,
															"R0050G3",
															"Графа 05",
															"+",
															"Сумма перечисленного в бюджет налога в отчетном месяце за прошлые месяцы по данным регистра ""Взаиморасчеты по НДФЛ""",
															ВыплаченныйНалогПрошлыйПериод);
	
	НачисленоНоНеПеречисленоЗаТекПериод = НачисленныйНалогТекПериод - ВыплаченоНалогТекПериод;
	
	УстановитьЗначениеПоказателя("R0060G3", НачисленоНоНеПеречисленоЗаТекПериод);	
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма,
															"R0060G3",
															"Графа 06",
															"+",
															"Сумма налога начисленного, но не перечисленного в бюджет за  текущий период по дангным регистра ""Взаиморасчеты по НДФЛ""",
															НачисленоНоНеПеречисленоЗаТекПериод);
	
	
	// незаполняемые показатели
	УстановитьЗначениеПоказателя("R0080G3", 0);
	УстановитьЗначениеПоказателя("R0090G3", 0);
	УстановитьЗначениеПоказателя("R0100G3", 0);
	УстановитьЗначениеПоказателя("R0110G3", 0);
	
	// задолженность по невыплаченной ЗП на начало след. месяца  за текущий (срок выплаты которой не настал).
	Запрос = Новый Запрос ("ВЫБРАТЬ
	                       |	ЕСТЬNULL(СУММА(ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток), 0) КАК Задолженность
	                       |ИЗ
	                       |	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&ДатаНач, Организация = &Организация) КАК ВзаиморасчетыСРаботниками
	                       |ГДЕ
	                       |	НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ) = &ТекущийМесяц
						   |	   " + УсловиеНаПодразделение + "
						   |");
	
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("Подразделение", 		Подразделение);
	Запрос.УстановитьПараметр("НеВключатьЧПников", 	НеВключатьЧПников);
	Запрос.УстановитьПараметр("ДатаНач", 			мДатаКонцаПериодаОтчета + 1);
	Запрос.УстановитьПараметр("ДатаКонцаПериода", 	мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ТекущийМесяц", 		мДатаНачалаПериодаОтчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	R0150G3 = 0;
	Если Выборка.Следующий() Тогда
		R0150G3 = ?(Выборка.Задолженность>0,Выборка.Задолженность,0);
	КонецЕсли;
	УстановитьЗначениеПоказателя("R0150G3", R0150G3);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма,
															"R0150G3",
															"Графа 14",
															"+",
															"Сумма невыплаченной зарплаты за отчетный месяц на конец отчетного месяца по данным регистра ""Взаиморасчеты с работниками организаций""",
															R0150G3);
	
	R0160G3 = 0;
	Если мДатаНачалаПериодаОтчета = '20110101' Тогда
		// в этом отчете нужно заполнить строку 15
		// задолженность по НДФЛ на начало 2011 года
		// кроме текущей задолженности за декабрь
		Запрос = Новый Запрос();
		Запрос.Текст = "";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("НеВключатьЧПников", НеВключатьЧПников);
		Запрос.УстановитьПараметр("ДатаНач", мДатаНачалаПериодаОтчета);
		Запрос.УстановитьПараметр("ДатаКонцаПериода", мДатаКонцаПериодаОтчета);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЕСТЬNULL(СУММА(ВзаиморасчетыПоНДФЛОстатки.НалогОстаток), 0) КАК ЗадолженностьПоНалогу
		               |ИЗ
		               |	РегистрНакопления.ВзаиморасчетыПоНДФЛ.Остатки(&ДатаНач, Организация = &Организация) КАК ВзаиморасчетыПоНДФЛОстатки
		               |ГДЕ
		               |	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОстатки.ПериодВзаиморасчетов, МЕСЯЦ) <> &ДатаНач
					   |	   " + УсловиеНаПодразделение + "
					   |";
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ЗадолженностьПоНалогу > 0 Тогда
				R0160G3 = Выборка.ЗадолженностьПоНалогу;
			КонецЕсли;
		КонецЕсли;

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма,
																"R0160G3",
																"Графа 15",
																"+",
																"Сумма не перечисленного в бюджет налога на 01.01.2011 по данным регистра ""Взаиморасчеты по НДФЛ""",
																R0160G3);
			
		
	КонецЕсли;
	УстановитьЗначениеПоказателя("R0160G3", R0160G3);
	
	ОбновитьПоСлужебнымДанным();
	
	Расчет();
	
	Модифицированность = Истина;

КонецПроцедуры // ЗаполнитьАвто()

Функция ВыплаченныйДоходЧистыми(УсловиеНаПодразделение)
	
	Запрос = Новый Запрос ("ВЫБРАТЬ
	                       |	ЕСТЬNULL(СУММА(ВзаиморасчетыСРаботниками.СуммаВзаиморасчетов), 0) КАК Выплата
	                       |ИЗ
	                       |	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботниками
	                       |ГДЕ
						   |	  Период >= &ДатаНач
						   |	И Период <= &ДатаКон
						   |	И Организация = &Организация
						   |	И ВидДвижения = &ВидДвижения
						   |	И КодОперации = &КодОперации
						   |    " + УсловиеНаПодразделение + "
						   |");
	
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("Подразделение", 		Подразделение);
	Запрос.УстановитьПараметр("НеВключатьЧПников", 	НеВключатьЧПников);
	Запрос.УстановитьПараметр("ДатаНач", 			мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон", 			мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКонцаПериода", 	мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ТекущийМесяц", 		мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ВидДвижения", 		ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("КодОперации", 		Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	    Возврат Выборка.Выплата;
	Иначе	
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ВыплаченныйДоходЧистыми()

//===========================================
// устанавливает пометки выгрузки в таблице тбСхемыXML
Процедура  ОпределитьСписокВыгружаемыхСхем();
	Для Каждого стр Из  тбСхемыXML Цикл
		Если (стр.НазваниеСтраницыПанели = "Приложение") Тогда
			стр.фВыгрузка = 0;
		Иначе	
			//по-умолчанию выгружаем все приложения
			стр.фВыгрузка = 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	

//создает массив описания типов для таблицы значений со схемами XML
Функция СоздатьОписанияТипов(НазваниеТипа, Длина,Точность="")
  мас = Новый Массив;
  мас.Добавить(Тип(НазваниеТипа));
  Если Точность = "" Тогда
	 КвалифСтроки = Новый КвалификаторыСтроки(Длина,ДопустимаяДлина.Переменная); 
  Иначе
	 КвалифЧисла = Новый КвалификаторыЧисла(Длина,Точность,ДопустимыйЗнак.Неотрицательный); 
  КонецЕсли;	   
  Возврат Новый ОписаниеТипов(мас,КвалифСтроки,КвалифЧисла);
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант = 4 Тогда
		
		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");

	//Если Вариант <> Неопределено Тогда
	ИначеЕсли Вариант <> Неопределено Тогда
	
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

		
	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вычисляется автоматически';uk='Значення обчислюється автоматично'");
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");
		КонецЕсли;
		
		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//коррекция кода выполнена, за исключением специфики многтсрочного
//раздела, в комментраиях это указано

// Процедура - обработчик события "ПередОткрытием" формы.
//редакция не требуется,унифицирована для всех отчетов 
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;
   	Если ЭлементМеню.Кнопки.Количество() = 0 Тогда

		ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
		                            НСтр("ru='Печатать сразу';uk='Друкувати відразу'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

		ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
		                            НСтр("ru='Предварительный просмотр';uk='Попередній перегляд'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
									
		ЭлементМеню.Кнопки.Добавить("Разделитель1", ТипКнопкиКоманднойПанели.Разделитель);

		ЭлементМеню.Кнопки.Добавить("ЕстьДуплекс", ТипКнопкиКоманднойПанели.Действие,
		                            НСтр("ru='Принтер поддерживает автом. дуплекс';uk='Принтер підтримує автом. дуплекс'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
									
		ЭлементМеню.Кнопки.ЕстьДуплекс.Пометка = ЕстьДуплекс;
		
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
// редакция требуется, см. далее по комментариям
Процедура ПриОткрытии()

	ЭтаФорма.АвтоЗаголовок = Ложь;
	
    //здесь локальным переменным модуля присваиваем имена всех объектов ПолеТабличногоДокумента 
	//(для декларации это будет собственно поле, содержащее тело самой декларации, а также 
	//все остальные ее приложения, пока сделано только для тела самой декларации )
	мДекларацияПоНДФЛ  = ЭлементыФормы.ПолеТабличногоДокументаДекларацияПоНДФЛ;
	мПриложение        = ЭлементыФормы.ПолеТабличногоДокументаПриложение;
	мСлужебныеДанные   = ЭлементыФормы.ПолеТабличногоДокументаСлужебныеДанные;
	
	МассивПанелей = Новый Массив;
	//здесь локальным переменным модуля присваиваем имена всех объектов ПолеТабличногоДокумента 
	//(для декларации это будет собственно поле, содержащее тело самой декларации, а также 
	//все остальные ее приложения, пока сделано только для тела самой декларации )
	МассивПанелей.Добавить("ДекларацияПоНДФЛ");
	МассивПанелей.Добавить("Приложение");
	
	Если мСохраненныйДок = Неопределено Тогда
		
		мДекларацияПоНДФЛ.Области.HZ.Значение = "X";
		мСлужебныеДанные.Области.C_DOC_STAN.Значение = 1;
		мПриложение.Области.C_DOC_STAN.Значение = 1;
		ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
		
		ЗаполнитьСведенияОбОрганизации();	
		
		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
			
			
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 2;
			//устанавливает форма для ячеек, для которых в макете показателей задан тип формата Е,
			//т.е. денежный с регулируемой размерностью (в зависимости от выбранной единицы измерения)
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			НеВключатьЧПников = Истина;
			
			УстановитьФорматВывода();
			
			ЗаполнитьСведенияОбОрганизации();

					
			мСохранятьРасшифровку = Истина;
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюНастройка.Кнопки.ПодменюРасшифровка.Кнопки.КнопкаСохранятьРасшифровку.Пометка = мСохранятьРасшифровку;
			
			Авторасчет = Истина;							
			
		КонецЕсли;
		
	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;
	
	//отображает соотвествующий период сдачи отчета в шапке формы
	ПоказатьПериод();

	//устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		УстановитьЦветФонаЯчейки(,,Страница.Имя);
	КонецЦикла;


	мДекларацияПоНДФЛ.ТолькоПросмотр = Истина;
	
	//далее должны идти наименования ПолейТабличныхДокумента приложений
	//к декларации 
	мПриложение.ТолькоПросмотр       = Истина;
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
// редакция не требуется, процедура унифицирована для всех отчетов
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность = Истина Тогда

		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения ?';uk='Дані були змінені. Зберегти зміни ?'"), РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;
	
    СохранитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс", ЕстьДуплекс);
	
КонецПроцедуры // ПередЗакрытием()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".
//код этой процедуры пока не корректировался
//вызывает только процедуру из раздела "Процедуры общего назначения"
//Очистить()
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Если Найти(Кнопка.Имя, "Дуплекс") >0 Тогда
		     ЕстьДуплекс    = НЕ Кнопка.Пометка;
			 Кнопка.Пометка = НЕ Кнопка.Пометка;
		Иначе
			 Печать(Кнопка.Имя);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	ПоказатьСтраницыОтчета();

	Модифицированность = Истина;

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	
	Очистить();
	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

Процедура КоманднаяПанельДействийДействиеXML(Кнопка) Экспорт
  Перем спДанныеОтчета, спПараметры;
  Перем НужнаяСтруктура;
  
  	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьТаблицуСоСхемамиВыгрузки();
	
	//Создадим структуру со списком параметров для передачи их в обработку выгрузки
 	спПараметры = Новый Структура();
	спПараметры.Вставить("Команда","ЭкспортXML"); //Операция
	
	ОпределитьСписокВыгружаемыхСхем();
	спПараметры.Вставить("Схемы",тбСхемыXML );	//Схемы (правила) выгрузки. Определеяются ГНАУ
	
	// формируем данные редактируемых ячеек таблицы
	ДанныеОтчета = Новый Структура();
	
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		
		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
		
		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ДанныеОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		
	КонецЦикла;
	
	// вставляем данные  ячеек таблицы	
	спПараметры.Вставить("ДанныеОтчета",ДанныеОтчета);
	
	// вставляем данные многострочных разделов
	спПараметры.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);
    КаталогДанныхФирмы = Организация.НаименованиеПолное;
	спПараметры.Вставить("КаталогДанныхФирмы",КаталогДанныхФирмы); //каталог для сохранения выгрузки
	ОбработкаЭкспортXML = РегламентированнаяОтчетность.РеглОтчеты("РегламентированныйОтчетМастерВыгрузкиРегламентированнойОтчетности",Истина);
	// проверим корректность заполнения отчета (обязательные поля и группы полей)
    Ошибка = ПроверитьКорректностьЗаполненияОтчета(ДанныеОтчета, ОбработкаЭкспортXML);
	Если Ошибка = Истина Тогда
		Возврат;
	КонецЕсли;

	ИдФормы = "Форма";   
	ФормаОбр = ОбработкаЭкспортXML.ПолучитьФорму(ИдФормы,ЭтаФорма);
	ФормаОбр.спПараметры = спПараметры; 
	ФормаОбр.ИмяНужногоОтчета = "РегламентированныйОтчетДекларацияНДФЛ";
	
	ФормаОбр.тбСхемы = спПараметры.Схемы;
	ФормаОбр.Открыть();
	
	ФормаОбр.Объект = ЭтотОбъект;
	ФормаОбр.Док    = мСохраненныйДок;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА


// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
// редакция не требуется
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Перем ТекущаяОбласть;
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;
	
	// управляем показом статика, отображающего номер текущей страницы
	// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
	ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(ТекущаяОбласть);

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события "ПриИзменении" поля ввода
// даты представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	мСлужебныеДанные.Области.HFILL.Значение = ДатаПодписи;
	
	ОбновитьПоСлужебнымДанным();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
// !!!Важно проверить тип реквизитов ЕдиницаИзмерения (должна быть ПеречислениеСсылка.ПорядкиОкругленияОтчетности)
//в остальном редакция не требуется
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//  редакция не требуется
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа формы.
// Определяет текущую область таблмчного документа и вызывает процедуру
// управления доступностью кнопок "Добавить" и "Удалить" формы.
// редакция не требуется
Процедура ПолеТабличногоДокументаПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаПриАктивизацииОбласти()
 
Процедура ПолеВводаЗначениеКорректировкиДекларацияПоНДСПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры

Процедура ПолеВводаКомментарийДекларацияПоНДСПриИзменении(Элемент)
	
	Коммент = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Коммент);

	Модифицированность = Истина;

КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияДекларацияПоНДСПриИзменении(Элемент)
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасшифровка(Кнопка)
	Обраб = Обработки.РасшифровкаРегламентированнойОтчетности.Создать();
	Обраб.Форма = ЭтаФорма;
	
	ИмяТекущейСтраницыПанели  = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ИмяПоказателя 			  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть.Имя;
	
	Обраб.ИмяЯчейки = ИмяПоказателя;
	Обраб.ПолучитьФорму().Показать();
КонецПроцедуры

Процедура КоманднаяПанельФормыСохранять(Кнопка)
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	мСохранятьРасшифровку = Кнопка.Пометка;
КонецПроцедуры

Процедура АвторасчетПриИзменении(Элемент)
	
	// сменим/установим флаг "Защита" для автоматически расчитываемых ячеек
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		
		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(СтраницаПанели.Имя);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Для каждого СтрокаТаблицыВариантовЗаполнения Из ТаблицаВариантыЗаполнения Цикл
			
			Попытка
				                                                          //признак расчитваемых ячеек
				Если СтрокаТаблицыВариантовЗаполнения.ВариантЗаполнения = 4 Тогда
				
					ИмяПоказателя = СтрокаТаблицыВариантовЗаполнения.КодПоказателя;
					
					ТекТабличноеПоле.Области[ИмяПоказателя].Защита = Авторасчет;
				
				КонецЕсли;	
					
			Исключение
			    Сообщить("Не удалось изменить возможность редактирования для показателя с кодом " + ИмяПоказателя);
			КонецПопытки;
		
		КонецЦикла;
		
	КонецЦикла;
	
	Если Авторасчет Тогда
		Расчет();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаДекларацияПоНДФЛВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ПриИзмененииПолейВКлеточках(Элемент, Область);
	
КонецПроцедуры

Процедура ПриИзмененииПолейВКлеточках(Элемент, Область)
	ЧастноеЛицо = НЕ (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо);
	
	ИмяОбласти = Область.Имя;
	
	Если ВРЕГ(Лев(ИмяОбласти, 5)) = "ГОДОШ" Тогда
		ВвестиЧисло(Элемент.Области.HZYP.Значение,Нстр("ru = 'Введите год'; uk = 'Введіть рік'"),4,0);
		Если Элемент.Области.HZYP.Значение = 0 Тогда
		     Элемент.Области.HZMP.Значение = 0;
		ИначеЕсли    Элемент.Области.HZYP.Значение < 1991
			     ИЛИ Элемент.Области.HZYP.Значение > 2099 Тогда
			Элемент.Области.HZYP.Значение = 0;
		КонецЕсли;
	ИначеЕсли ВРЕГ(Лев(ИмяОбласти, 5)) = "МЕСОШ" Тогда
		ВвестиЧисло(Элемент.Области.HZMP.Значение,Нстр("ru = 'Введите месяц'; uk = 'Введіть місяць'"),2,0);
		Если    Элемент.Области.HZMP.Значение < 1
			ИЛИ Элемент.Области.HZMP.Значение > 12 Тогда
			Элемент.Области.HZMP.Значение = 0;
		КонецЕсли;
	ИначеЕсли ИмяОбласти = "HZ" Тогда
		Элемент.Области.HZ.Значение	 = "Х";
		Элемент.Области.HZN.Значение = "";
		Элемент.Области.HZU.Значение = "";
		Элемент.Области.HZ1.Значение  = "";
		Элемент.Области.HZN1.Значение = "";
		Элемент.Области.HZU1.Значение = "";
		мСлужебныеДанные.Области.C_DOC_STAN.Значение = 1;
	ИначеЕсли ИмяОбласти = "HZN" Тогда
		Элемент.Области.HZ.Значение	 = "";
		Элемент.Области.HZN.Значение = "Х";
		Элемент.Области.HZU.Значение = "";
		Элемент.Области.HZ1.Значение  = "";
		Элемент.Области.HZN1.Значение = "";
		Элемент.Области.HZU1.Значение = "";
		мСлужебныеДанные.Области.C_DOC_STAN.Значение = 2;
	ИначеЕсли ИмяОбласти = "HZU" Тогда
		Элемент.Области.HZ.Значение	 = "";
		Элемент.Области.HZN.Значение = "";
		Элемент.Области.HZU.Значение = "Х";
		Элемент.Области.HZ1.Значение  = "";
		Элемент.Области.HZN1.Значение = "";
		Элемент.Области.HZU1.Значение = "";
		мСлужебныеДанные.Области.C_DOC_STAN.Значение = 3;
	ИначеЕсли ИмяОбласти = "HZ1" Тогда
		Элемент.Области.HZ.Значение	 = "";
		Элемент.Области.HZN.Значение = "";
		Элемент.Области.HZU.Значение = "";
		Элемент.Области.HZ1.Значение = "Х";
		Элемент.Области.HZN1.Значение = "";
		Элемент.Области.HZU1.Значение = "";
		мСлужебныеДанные.Области.C_DOC_STAN.Значение = 1;
	ИначеЕсли ИмяОбласти = "HZN1" Тогда
		Элемент.Области.HZ.Значение	 = "";
		Элемент.Области.HZN.Значение = "";
		Элемент.Области.HZU.Значение = "";
		Элемент.Области.HZ1.Значение  = "";
		Элемент.Области.HZN1.Значение = "Х";
		Элемент.Области.HZU1.Значение = "";
		мСлужебныеДанные.Области.C_DOC_STAN.Значение = 2;
	ИначеЕсли ИмяОбласти = "HZU1" Тогда
		Элемент.Области.HZ.Значение	 = "";
		Элемент.Области.HZN.Значение = "";
		Элемент.Области.HZU.Значение = "";
		Элемент.Области.HZ1.Значение  = "";
		Элемент.Области.HZN1.Значение = "";
		Элемент.Области.HZU1.Значение = "Х";
		мСлужебныеДанные.Области.C_DOC_STAN.Значение = 3;
	//ИначеЕсли ИмяОбласти = "HJ" Тогда
	//	Элемент.Области.HJ.Значение  = "Х";
	//	Элемент.Области.HF.Значение = "";
	//ИначеЕсли ИмяОбласти = "HF" Тогда
	//	Элемент.Области.HJ.Значение  = "";
	//	Элемент.Области.HF.Значение = "Х";
	ИначеЕсли ВРЕГ(Лев(ИмяОбласти, 7)) = "ДЕНЬВЫП"
		  ИЛИ ВРЕГ(Лев(ИмяОбласти, 6)) = "МЕСВЫП"
		  ИЛИ ВРЕГ(Лев(ИмяОбласти, 6)) = "ГОДВЫП" Тогда
		  
		 СписокВыбора = Новый СписокЗначений(); 
		 СписокВыбора.Добавить(1, НСТР("ru = 'Ввести значение'; uk = 'Ввести значення'")); 
		 СписокВыбора.Добавить(2, НСТР("ru = 'Очистить значение'; uk = 'Очистити значення'")); 
		 ВыбранныйВариант = ЭтаФорма.ВыбратьИзМеню(СписокВыбора, Элемент);
		 Если НЕ ВыбранныйВариант = Неопределено  Тогда
		 	Если ВыбранныйВариант.Значение = 2 Тогда
			    Элемент.Области.HDATA.Значение = Неопределено;
			Иначе	
				ВвестиДату(Элемент.Области.HDATA.Значение,Нстр("ru = 'Введите значение'; uk = 'Введіть значення'"),ЧастиДаты.Дата);	
			КонецЕсли;
		 
		 КонецЕсли;

	 ИначеЕсли  ВРЕГ(Лев(ИмяОбласти, 6)) = "ЕДРПОУ" Тогда
		Если ЧастноеЛицо Тогда
			Возврат;
		КонецЕсли; 
		 
		ВвестиСтроку(Элемент.Области.HTIN.Значение,Нстр("ru = 'Введите значение'; uk = 'Введіть значення'"),8);	 
		
	ИначеЕсли ВРЕГ(Лев(ИмяОбласти, 6)) = "ИННРУК" Тогда
			
		ВвестиСтроку(Элемент.Области.HKBOS.Значение,Нстр("ru = 'Введите значение'; uk = 'Введіть значення'"),10);	 
		
	ИначеЕсли ВРЕГ(Лев(ИмяОбласти, 5)) = "ИННГБ" Тогда
			
		ВвестиСтроку(Элемент.Области.HKBUH.Значение,Нстр("ru = 'Введите значение'; uk = 'Введіть значення'"),10);	 
		
	ИначеЕсли ВРЕГ(Лев(ИмяОбласти, 3)) = "ИНН" Тогда
		Если НЕ ЧастноеЛицо Тогда
			Возврат;
		КонецЕсли; 
			
		ВвестиСтроку(Элемент.Области.HTIN.Значение,Нстр("ru = 'Введите значение'; uk = 'Введіть значення'"),10);	 
		
	ИначеЕсли ВРЕГ(Лев(ИмяОбласти, 4)) = "ПАСП" Тогда
			
		ВвестиСтроку(Элемент.Области.HPASS.Значение,Нстр("ru = 'Введите значение'; uk = 'Введіть значення'"),8);	 
		
	ИначеЕсли ВРЕГ(Лев(ИмяОбласти, 6)) = "КОЛДЕК" Тогда
			
		ВвестиЧисло(Элемент.Области.HPAGES1.Значение,Нстр("ru = 'Введите значение'; uk = 'Введіть значення'"),5);	 
		
	ИначеЕсли ВРЕГ(Лев(ИмяОбласти, 5)) = "ИНД1_" Тогда
			
		ВвестиСтроку(Элемент.Области.HZIP1.Значение,Нстр("ru = 'Введите значение'; uk = 'Введіть значення'"),5);	 
		
	ИначеЕсли ВРЕГ(Лев(ИмяОбласти, 8)) = "КОДТЕЛ1_" Тогда
			
		ВвестиСтроку(Элемент.Области.HINTURB1.Значение,Нстр("ru = 'Введите значение'; uk = 'Введіть значення'"),5);	 
		
	ИначеЕсли ВРЕГ(Лев(ИмяОбласти, 5)) = "ТЕЛ1_" Тогда
			
		ВвестиСтроку(Элемент.Области.HTEL1.Значение,Нстр("ru = 'Введите значение'; uk = 'Введіть значення'"),7);	 
		
	ИначеЕсли ВРЕГ(Лев(ИмяОбласти, 6)) = "ФАКС1_" Тогда
			
		ВвестиСтроку(Элемент.Области.HFAX1.Значение,Нстр("ru = 'Введите значение'; uk = 'Введіть значення'"),7);	 
		
	ИначеЕсли ВРЕГ(Лев(ИмяОбласти, 3)) = "ИНД" Тогда
			
		ВвестиСтроку(Элемент.Области.HZIP.Значение,Нстр("ru = 'Введите значение'; uk = 'Введіть значення'"),5);	 
		
	ИначеЕсли ВРЕГ(Лев(ИмяОбласти, 6)) = "КОДТЕЛ" Тогда
			
		ВвестиСтроку(Элемент.Области.HINTURB.Значение,Нстр("ru = 'Введите значение'; uk = 'Введіть значення'"),5);	 
		
	ИначеЕсли ВРЕГ(Лев(ИмяОбласти, 3)) = "ТЕЛ" Тогда
			
		ВвестиСтроку(Элемент.Области.HTEL.Значение,Нстр("ru = 'Введите значение'; uk = 'Введіть значення'"),7);	 
		
	ИначеЕсли ВРЕГ(Лев(ИмяОбласти, 4)) = "ФАКС" Тогда
			
		ВвестиСтроку(Элемент.Области.HFAX.Значение,Нстр("ru = 'Введите значение'; uk = 'Введіть значення'"),7);	 
		
	ИначеЕсли ВРЕГ(Лев(ИмяОбласти, 12)) = "КОДНАЛОГОВОЙ" Тогда
			
		ВвестиСтроку(Элемент.Области.HTINSTI.Значение,Нстр("ru = 'Введите значение'; uk = 'Введіть значення'"),8);	 
		
	ИначеЕсли ВРЕГ(Лев(ИмяОбласти, 7)) = "РАБШТАТ" Тогда
			
		ВвестиЧисло(Элемент.Области.R00G01I.Значение,Нстр("ru = 'Введите значение'; uk = 'Введіть значення'"),5);	 
		
	ИначеЕсли ВРЕГ(Лев(ИмяОбласти, 6)) = "РАБГПХ" Тогда
			
		ВвестиЧисло(Элемент.Области.R00G02I.Значение,Нстр("ru = 'Введите значение'; uk = 'Введіть значення'"),5);	 
		
	ИначеЕсли ВРЕГ(Лев(ИмяОбласти, 7)) = "КОЛРАСЧ" Тогда
			
		ВвестиЧисло(Элемент.Области.HPAGES.Значение,Нстр("ru = 'Введите значение'; uk = 'Введіть значення'"),6);	 
		
	КонецЕсли;	
	
	ОбновитьПоСлужебнымДанным();
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаДекларацияПоНДФЛПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;
	
	ОбновитьПараметрыАвтозаполненияЯчейки();
	
	ОбновитьПоСлужебнымДанным();
	
	ИмяИзмененнойЯчейки = ИмяПоказателя;
	Расчет();
	ИмяИзмененнойЯчейки = Неопределено; 
	
	Модифицированность = Истина;
КонецПроцедуры

Процедура ПолеТабличногоДокументаПриложениеВыбор(Элемент, Область, СтандартнаяОбработка)
	 ПриИзмененииПолейВКлеточках(Элемент, Область);
КонецПроцедуры

Процедура ПолеТабличногоДокументаПриложениеПриИзмененииСодержимогоОбласти(Элемент, Область)
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;
	
	ОбновитьПараметрыАвтозаполненияЯчейки();
	
	ОбновитьПоСлужебнымДанным();
	
	ИмяИзмененнойЯчейки = ИмяПоказателя;
	Расчет();
	ИмяИзмененнойЯчейки = Неопределено; 
	
	Модифицированность = Истина;
КонецПроцедуры

Процедура ПолеТабличногоДокументаСлужебныеДанныеПриИзменении()
	ОбновитьПоСлужебнымДанным();
КонецПроцедуры

Процедура ПолеТабличногоДокументаПриложение235HZПриИзменении()
	ОбновитьПоСлужебнымДанным();
КонецПроцедуры

Процедура УстановитьВидимость();
	
	ЭлементыФормы.НеВключатьЧПников.Видимость = ЗначениеЗаполнено(Подразделение);
	
КонецПроцедуры

Процедура ПодразделениеПриИзменении(Элемент)
	
	Если НЕ Подразделение = мПодразделение Тогда
	
		Сообщить(НСтр("ru = 'Необходимо перезаполнить отчет!'; uk = 'Необхідно перезаповнити звіт!'"), СтатусСообщения.Внимание);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		НеВключатьЧПников = Истина;	
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	мПодразделение = Подразделение;
КонецПроцедуры

Процедура ПолеТабличногоДокументаПриложение235HZNПриИзменении()
	ОбновитьПоСлужебнымДанным();
КонецПроцедуры

Функция СформироватьДанныеДляЗвит1С() Экспорт 
	
	мСохраненныйДок   = Неопределено;	
	мСкопированаФорма = Неопределено;
	
	ПередОткрытием(Ложь, Истина);
	ПриОткрытии();
	
	Очистить();
	ЗаполнитьСведенияОбОрганизации();
	ЗаполнитьАвто();
	
	Если мМенеджерЗвит1С.ФлагОтладки Тогда
		ЭтаФорма.ОткрытьМодально();
	КонецЕсли;
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	// расшифровка
	Попытка
		ВЫПОЛНИТЬ("СписокСохранения.Вставить(""РасшифровкаОтчета"", СпП);");
	Исключение КонецПопытки;
	
	ПоказателиОтчета = Новый Структура();
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	КонецЦикла;

	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
// формирование человеческого описания для элементов перечисления ПорядкиОкругленияОтчетности
// крайне важна правильная установка типа для этого реквизита формы отчета
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       НСтр("ru='в гривнях';uk='у гривнях'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    НСтр("ru='в тысячах гривень';uk='у тисячах гривень'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, НСтр("ru='в миллионах гривень';uk='у мільйонах гривень'"));

// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияДекларацияПоНДФЛ.СписокВыбора.Добавить(1, НСтр("ru='не заполнять автоматически';uk='не заповнювати автоматично'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияДекларацияПоНДФЛ.СписокВыбора.Добавить(2, НСтр("ru='заполнять автоматически с корректировкой';uk='заповнювати автоматично з коригуванням'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияДекларацияПоНДФЛ.СписокВыбора.Добавить(3, НСтр("ru='заполнять автоматически без корректировки';uk='заповнювати автоматично без коригування'"));

// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияПриложение.СписокВыбора.Добавить(1, НСтр("ru='не заполнять автоматически';uk='не заповнювати автоматично'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияПриложение.СписокВыбора.Добавить(2, НСтр("ru='заполнять автоматически с корректировкой';uk='заповнювати автоматично з коригуванням'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияПриложение.СписокВыбора.Добавить(3, НСтр("ru='заполнять автоматически без корректировки';uk='заповнювати автоматично без коригування'"));

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  	  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);     // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

мСтруктураМногострочныхРазделов = Новый Структура;

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
//мВерсияФормы = "01/01/2011";
мВерсияФормы = "01/03/2011";

мСоставПоказателей = "СоставПоказателей2011";

мПечатныеформы = Новый СписокЗначений;

СпП = Новый ТаблицаЗначений;
СпП.Колонки.Добавить("НомСтроки");
СпП.Колонки.Добавить("ИмяЯчейки");
СпП.Колонки.Добавить("ИмяПоказателя");
СпП.Колонки.Добавить("ЗнакОперации");
СпП.Колонки.Добавить("ИмяСлагаемого");
СпП.Колонки.Добавить("Сумма");
СпП.Колонки.Добавить("КодСчета");
СпП.Колонки.Добавить("КодКорСчета");
СпП.Колонки.Добавить("ДатаНачала");
СпП.Колонки.Добавить("ДатаКонца");
СпП.Колонки.Добавить("Сдвиг");
СпП.Колонки.Добавить("Раздел");
СпП.Колонки.Добавить("Страница");
СпП.Колонки.Добавить("МнЧ");
СпП.Колонки.Добавить("СтрокаПП");
СпП.Колонки.Добавить("Субконто1");
СпП.Колонки.Добавить("Субконто2");
СпП.Колонки.Добавить("Субконто3");

ЕстьДуплекс = ВосстановитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс");
Если НЕ ТипЗнч(ЕстьДуплекс) = Тип("Булево") Тогда
	ЕстьДуплекс = Ложь;	
КонецЕсли;
