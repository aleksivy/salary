
#Если Клиент Тогда

Перем мИмяОтчета Экспорт; // Имя этого отчета
Перем мКодОтчета;// Код отчета

// Периодичности
Перем мЧасДень Экспорт;
Перем мДеньНеделяМесяц Экспорт;
Перем мНеделяМесяцГод Экспорт;
Перем мМесяцГод Экспорт;

// Список значений, имена отборов построителя отчета, которые задаются по умолчанию 
Перем мСписокГруппировки;

// Список значений, имена отборов построителя отчета, которые задаются по умолчанию
Перем мСписокОтборы;

// Таблица доступных видов отчета
Перем мТаблицаВидыОтчета Экспорт;

// Коды видов отчета
Перем мГрафикОтпусков Экспорт;
Перем мФактическиеОтпуска Экспорт;
Перем мГрафикОтпусковИФактическиеОтпуска Экспорт;
Перем мПланируемаяЗанятостьПомещений Экспорт;
Перем мПланируемаяЗанятостьРаботников Экспорт;
Перем мПланируемаяЗанятостьРаботниковНеУтверждено Экспорт;
Перем мГрафикОтпусковОрганизации Экспорт;
Перем мФактическиеОтпускаОрганизации Экспорт;
Перем мГрафикОтпусковИФактическиеОтпускаОрганизации Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
// 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Вывод строки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка       - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров - структура параметров, необходимых для вывода строки
//	Номер         - число, номер обходимой группировки
//	ДопСтрока 	  - строка, выводится справа от группировки. по умолчанию пустая
//
Функция ВывестиСтрокуГруппировки(Выборка, СтруктураПараметров, ТочкаРодитель)

	Если ТочкаРодитель = Неопределено Тогда
		СтруктураРодитель = Новый Структура;
	Иначе
		СтруктураРодитель = ТочкаРодитель.Значение
	КонецЕсли;

	СтруктураГруппировок = Новый Структура;
	Для каждого Элемент Из СтруктураРодитель Цикл
	    СтруктураГруппировок.Вставить(Элемент.Ключ,Элемент.Значение)
	КонецЦикла;
	
	ИмяГруппировки  = Выборка.Группировка();
	ЗначениеГруппировки = Выборка[ИмяГруппировки];
	СтруктураГруппировок.Вставить(ИмяГруппировки,ЗначениеГруппировки);
	
	Попытка 
		ПредставлениеГруппировки = "" + Выборка[ИмяГруппировки + "Представление"];
	Исключение
		ПредставлениеГруппировки = "" + Выборка[ИмяГруппировки];
	КонецПопытки;	
	
	Если ПустаяСтрока(ПредставлениеГруппировки) Тогда
		ПредставлениеГруппировки = "<...>";
	КонецЕсли;
	
	Диаграмма = СтруктураПараметров.Диаграмма;
	Точка = Диаграмма.УстановитьТочку(СтруктураГруппировок, СтруктураРодитель);
	Точка.Расшифровка = ЗначениеГруппировки; 
	Точка.Текст = ПредставлениеГруппировки;
	
	Возврат Точка;
	
КонецФункции // ВывестиСтрокуГруппировки()

// Вывод отрезков диаграммы.
// Параметры:
//	Выборка -       Выборка из результата запроса по периоду
//	СтруктураПараметров - структура общих параметров
//	ИмяПоказателя - Имя поля показателя. По умолчанию "РесурсЧисло".
//	ЦветОтрезка - Цвет. Если задан, отрезки будут окрашены таким цветом, иначе - цветом из макета
//
Процедура ВывестиИнтервалы(Выборка, СтруктураПараметров, Точка)

	Диаграмма = СтруктураПараметров.Диаграмма;
	
	Пока Выборка.СледующийПоЗначениюПоля("Серия") Цикл
		
		Серия = СтруктураПараметров["Серия" + Выборка.Серия];
		МассивТочек = Диаграмма.ПолучитьЗначение(Точка, Серия);										
		
		НачалоИнтервалов = ДатаКон;
		КонецИнтервалов = Дата(1,1,1);
		
		Пока Выборка.Следующий() Цикл
			
			// Если построение слишком долгое, например, выбрана слишком мелкая периодичность, 
			// то его можно прервать (Ctrl+Break)
			ОбработкаПрерыванияПользователя();
		
			НачИнтервала = Макс(Выборка.НачалоИнтервала, ДатаНач);
			КонИнтервала = ?(Выборка.КонецИнтервала = NULL, ДатаКон, Мин(Выборка.КонецИнтервала, ДатаКон));
			НачалоИнтервалов = Мин(НачалоИнтервалов,НачИнтервала);
			КонецИнтервалов = Макс(КонецИнтервалов,КонИнтервала);
			
			Интервал = МассивТочек.Добавить();
			Интервал.Начало = НачИнтервала;
			Интервал.Конец 	= КонИнтервала;
			Интервал.Расшифровка = Выборка.Регистратор;
			Если Периодичность = мЧасДень Тогда
				Интервал.Текст = ""  + Формат(НачИнтервала, "ДФ='ЧЧ:мм дд.ММ'") + " - " + Формат(КонИнтервала, "ДФ='ЧЧ:мм дд.ММ'");
			Иначе	
				Интервал.Текст = ""  + Формат(НачИнтервала, "ДФ=dd.MM.yyyy") + " - " + Формат(КонИнтервала, "ДФ=dd.MM.yyyy");
			КонецЕсли; 
			
			// добавим текущий интервал во все родительские точки
			ТочкаРодитель = Точка.Родитель;
			Пока ТочкаРодитель <> Неопределено Цикл
				
				МассивТочекРодителя = Диаграмма.ПолучитьЗначение(ТочкаРодитель, Серия);										
				ИнтервалРодителя = МассивТочекРодителя.Добавить();
				ИнтервалРодителя.Начало = НачИнтервала;
				ИнтервалРодителя.Конец = КонИнтервала;
				
				ТочкаРодитель = ТочкаРодитель.Родитель;
			КонецЦикла; 
			
		КонецЦикла;
		
		Если Периодичность = мЧасДень Тогда
			МассивТочек.Текст = ""  + Формат(НачалоИнтервалов, "ДФ='ЧЧ:мм дд.ММ'") + " - " + Формат(КонецИнтервалов, "ДФ='ЧЧ:мм дд.ММ'");
		Иначе	
			МассивТочек.Текст = ""  + Формат(НачалоИнтервалов, "ДФ=dd.MM.yyyy") + " - " + Формат(КонецИнтервалов, "ДФ=dd.MM.yyyy");
		КонецЕсли; 
		
	КонецЦикла; 
	

КонецПроцедуры

// Обход выборки из результата запроса по группировкам для вывода строк отчета
//
// Параметры:
//
//	Выборка       - выборка из результата отчета, которая обходится в процедуре,
//	СтруктураПараметров - структура параметров, передеваемых в процедуру вывода
//	                строки отчета,
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиВыборку(Выборка, СтруктураПараметров, Номер, ТочкаРодитель = Неопределено)

  	Состояние(НСтр("ru='Вывод отчета';uk='Виведення звіту'"));
	ОбработкаПрерыванияПользователя();

	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;
	
	// Берутся группировки все подряд
	Пока Выборка.Следующий() Цикл

		ПоследняяГруппировка = (Номер = ВсегоГруппировок-1);
		
		// Для каждого значения группировки строим строку диаграммы
		Точка = ВывестиСтрокуГруппировки(Выборка, СтруктураПараметров, ТочкаРодитель);
		
		Если НЕ ПоследняяГруппировка Тогда
			ВывестиВыборку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, Номер + 1, Точка);
		Иначе	
			ВыборкаДетальныхЗаписей = Выборка.Выбрать(ОбходРезультатаЗапроса.Прямой);
			ВывестиИнтервалы(ВыборкаДетальныхЗаписей, СтруктураПараметров, Точка);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиВыборку()

// Формирует текст основного источника данных для построения диаграммы
Функция ПолучитьТекстОсновнойВыборкиДляВидаДиаграммы(КодОтчета ,ТекстОграничениеПериода)

	ТекстОграничениеПериода = СтрЗаменить(ТекстОграничениеПериода,"ДатаНач","ДатаПослеНачала");

	Если КодОтчета = мГрафикОтпусков Тогда

		ВыборкаДатУходаВОтпуск = "
		|			//Выборка ушедших в отпуск с даты начала периода + 1
		|			ВЫБРАТЬ
		|				ГрафикОтпусков.ФизЛицо,
		|				ГрафикОтпусков.Период КАК НачалоИнтервала,
		|				ГрафикОтпусков.ДатаОкончания КАК КонецИнтервала,
		|				ГрафикОтпусков.Регистратор
		|			ИЗ
		|				РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК ГрафикОтпусков
		|
		|			ГДЕ
		|				Состояние = &Отпуск " + ?(ТекстОграничениеПериода <> ""," И " + ТекстОграничениеПериода,"");

		Если ТекстОграничениеПериода <> "" тогда
			ВыборкаДатУходаВОтпуск = 		ВыборкаДатУходаВОтпуск + "
			|
			|			ОБЪЕДИНИТЬ ВСЕ
			|
			|           //Срез находящихся в отпуске на дату начала периоду
			|			ВЫБРАТЬ
			|				ГрафикОтпусков.ФизЛицо,
			|				ГрафикОтпусков.Период,
			|				ГрафикОтпусков.ДатаОкончания,
			|				ГрафикОтпусков.Регистратор
			|			ИЗ
			|				РегистрСведений.СобытийныйПланЗанятостиФизлиц.СрезПоследних(&ДатаНач) КАК ГрафикОтпусков
			|			ГДЕ
			|				Состояние = &Отпуск ";
		КонецЕсли;	 

		ОсновнаяВыборка = ВыборкаДатУходаВОтпуск;
		
	ИначеЕсли КодОтчета = мГрафикОтпусковОрганизации Тогда

		ВыборкаДатУходаВОтпуск = "
		|			//Выборка ушедших в отпуск с даты начала периода + 1
		|			ВЫБРАТЬ
		|				ГрафикОтпусковОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
		|				ГрафикОтпусковОрганизации.Сотрудник,
		|				ГрафикОтпусковОрганизации.Организация,
		|				ГрафикОтпусковОрганизации.Период КАК НачалоИнтервала,
		|				ГрафикОтпусковОрганизации.ДатаОкончания КАК КонецИнтервала,
		|				ГрафикОтпусковОрганизации.Регистратор
		|			ИЗ
		|				РегистрСведений.ГрафикОтпусковОрганизаций КАК ГрафикОтпусковОрганизации
		|
		|			ГДЕ
		|				Состояние = &Отпуск " + ?(ТекстОграничениеПериода <> ""," И " + ТекстОграничениеПериода,"");

		Если ТекстОграничениеПериода <> "" тогда
			ВыборкаДатУходаВОтпуск = 		ВыборкаДатУходаВОтпуск + "
			|
			|			ОБЪЕДИНИТЬ ВСЕ
			|
			|           //Срез находящихся в отпуске на дату начала периоду
			|			ВЫБРАТЬ
			|				ГрафикОтпусковОрганизации.Сотрудник.ФизЛицо,
			|				ГрафикОтпусковОрганизации.Сотрудник,
			|				ГрафикОтпусковОрганизации.Организация,
			|				ГрафикОтпусковОрганизации.Период,
			|				ГрафикОтпусковОрганизации.ДатаОкончания,
			|				ГрафикОтпусковОрганизации.Регистратор
			|			ИЗ
			|				РегистрСведений.ГрафикОтпусковОрганизаций.СрезПоследних(&ДатаНач) КАК ГрафикОтпусковОрганизации
			|			ГДЕ
			|				Состояние = &Отпуск
			|			";
		КонецЕсли;	 

		ОсновнаяВыборка = ВыборкаДатУходаВОтпуск;

	ИначеЕсли КодОтчета = мФактическиеОтпуска Тогда
        //Фактические отпуска рабоников компании

		ВыборкаДатУходаВОтпуск = "
		|			//Выборка ушедших в отпуск с даты начала периода + 1
		|			ВЫБРАТЬ
		|				СостояниеРаботников.ФизЛицо,
		|				ДобавитьКДате(СостояниеРаботников.ПериодЗавершения, ДЕНЬ, -1) КАК ПериодЗавершения,
		|				СостояниеРаботников.Период КАК НачалоИнтервала,
		|				СостояниеРаботников.Регистратор
		|			ИЗ
		|				РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
		|
		|			ГДЕ
		|				Состояние = &РаботникВОтпуске " + ?(ТекстОграничениеПериода <> ""," И " + ТекстОграничениеПериода,"");

		Если ТекстОграничениеПериода <> "" тогда
			ВыборкаДатУходаВОтпуск = 		ВыборкаДатУходаВОтпуск + "
			|
			|			ОБЪЕДИНИТЬ ВСЕ
			|
			|           //Срез находящихся в отпуске на дату начала периоду
			|			ВЫБРАТЬ
			|				СостояниеРаботниковСрезПоследних.ФизЛицо,
    		|				ДобавитьКДате(СостояниеРаботниковСрезПоследних.ПериодЗавершения, ДЕНЬ, -1) КАК ПериодЗавершения,
			|				СостояниеРаботниковСрезПоследних.Период КАК НачалоИнтервала,
			|				СостояниеРаботниковСрезПоследних.Регистратор
			|			ИЗ
			|				РегистрСведений.СостояниеРаботников.СрезПоследних(&ДатаНач) КАК СостояниеРаботниковСрезПоследних
			|			ГДЕ
			|				ВЫБОР КОГДА &ДатаНач >= СостояниеРаботниковСрезПоследних.ПериодЗавершения И СостояниеРаботниковСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) ТОГДА СостояниеРаботниковСрезПоследних.СостояниеЗавершения ИНАЧЕ СостояниеРаботниковСрезПоследних.Состояние КОНЕЦ = &РаботникВОтпуске
			|			";
		КонецЕсли;	 

		ОсновнаяВыборка = "
        |		//Запрос на получение интервалов отпусков
		|		ВЫБРАТЬ
		|			ДатыУходаВОтпуск.ФизЛицо,
		|			ДатыУходаВОтпуск.Регистратор,
		|			ДатыУходаВОтпуск.НачалоИнтервала,
		|			ЕСТЬNULL(ДобавитьКДате(ДатыВозврата.КонецИнтервала, СЕКУНДА, -1), &ТекущаяДата) КАК КонецИнтервала
		|		ИЗ (" + ВыборкаДатУходаВОтпуск + ") КАК ДатыУходаВОтпуск
		|		ЛЕВОЕ СОЕДИНЕНИЕ (
		|   		//Запрос на получение дат возврата из отпуска
		|			ВЫБРАТЬ
		|				ДатыУходаВОтпуск.ФизЛицо,
		|				ДатыУходаВОтпуск.НачалоИнтервала,
        |				ВЫБОР 
        |                    КОГДА ДатыУходаВОтпуск.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) 
        |                    ТОГДА
        |                        ВЫБОР 
        |							КОГДА Минимум(СостояниеРаботников.Период) ЕСТЬ NULL 
        |								ТОГДА ДатыУходаВОтпуск.ПериодЗавершения 
        |							ИНАЧЕ 
        |								ВЫБОР 
        |									КОГДА ДатыУходаВОтпуск.ПериодЗавершения < Минимум(СостояниеРаботников.Период) 
        |										ТОГДА ДатыУходаВОтпуск.ПериодЗавершения 
        |									ИНАЧЕ Минимум(СостояниеРаботников.Период) 
        |								КОНЕЦ 
        |                        КОНЕЦ 
        |                    ИНАЧЕ    
        |                        Минимум(СостояниеРаботников.Период)
        |                    КОНЕЦ
        |                    КАК КонецИнтервала
		|			ИЗ (" + ВыборкаДатУходаВОтпуск + ") КАК ДатыУходаВОтпуск
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
		|			ПО	СостояниеРаботников.ФизЛицо = ДатыУходаВОтпуск.ФизЛицо И СостояниеРаботников.Период > ДатыУходаВОтпуск.НачалоИнтервала	
		|			СГРУППИРОВАТЬ ПО 
        |               ДатыУходаВОтпуск.ФизЛицо, 
        |               ДатыУходаВОтпуск.ПериодЗавершения, 
        |               ДатыУходаВОтпуск.НачалоИнтервала
		|		) КАК ДатыВозврата
		|		ПО ДатыВозврата.ФизЛицо = ДатыУходаВОтпуск.ФизЛицо И ДатыВозврата.НачалоИнтервала = ДатыУходаВОтпуск.НачалоИнтервала
		|		";

	ИначеЕсли КодОтчета = мФактическиеОтпускаОрганизации Тогда

		ВыборкаДатУходаВОтпуск = "
		|			//Выборка ушедших в отпуск с даты начала периода + 1
		|			ВЫБРАТЬ
		|				СостояниеРаботниковОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
		|				СостояниеРаботниковОрганизации.Сотрудник,
		|				СостояниеРаботниковОрганизации.Организация,
		|				СостояниеРаботниковОрганизации.Регистратор,
		|				ДобавитьКДате(СостояниеРаботниковОрганизации.ПериодЗавершения, ДЕНЬ, -1) КАК ПериодЗавершения,
		|				СостояниеРаботниковОрганизации.Период КАК НачалоИнтервала
		|			ИЗ
		|				РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизации
		|
		|			ГДЕ
		|				Состояние = &РаботникОрганизацииВОтпуске " + ?(ТекстОграничениеПериода <> ""," И " + ТекстОграничениеПериода,"");

		Если ТекстОграничениеПериода <> "" тогда
			ВыборкаДатУходаВОтпуск = 		ВыборкаДатУходаВОтпуск + "
			|
			|			ОБЪЕДИНИТЬ ВСЕ
			|
			|           //Срез находящихся в отпуске на дату начала периоду
			|			ВЫБРАТЬ
			|				СостояниеРаботниковОрганизацииСрезПоследних.Сотрудник.ФизЛицо,
			|				СостояниеРаботниковОрганизацииСрезПоследних.Сотрудник,
			|				СостояниеРаботниковОрганизацииСрезПоследних.Организация,
			|				СостояниеРаботниковОрганизацииСрезПоследних.Регистратор,
		    |				ДобавитьКДате(СостояниеРаботниковОрганизацииСрезПоследних.ПериодЗавершения, ДЕНЬ, -1) КАК ПериодЗавершения,
			|				СостояниеРаботниковОрганизацииСрезПоследних.Период Как НачалоИнтервала
			|			ИЗ
			|				РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних(&ДатаНач) КАК СостояниеРаботниковОрганизацииСрезПоследних
			|			ГДЕ
			|				ВЫБОР КОГДА &ДатаНач >= СостояниеРаботниковОрганизацииСрезПоследних.ПериодЗавершения И СостояниеРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) ТОГДА СостояниеРаботниковОрганизацииСрезПоследних.СостояниеЗавершения ИНАЧЕ СостояниеРаботниковОрганизацииСрезПоследних.Состояние КОНЕЦ = &РаботникОрганизацииВОтпуске
			|			";
		КонецЕсли;
		
		ОсновнаяВыборка = "
        |		//Запрос на получение периодов
		|		ВЫБРАТЬ
		|			ДатыУходаВОтпуск.Сотрудник.ФизЛицо КАК ФизЛицо,
		|			ДатыУходаВОтпуск.Сотрудник,
		|			ДатыУходаВОтпуск.Организация,
		|			ДатыУходаВОтпуск.Регистратор,
		|			ДатыУходаВОтпуск.НачалоИнтервала,
		|			ЕСТЬNULL(ДобавитьКДате(ДатыВозврата.КонецИнтервала, СЕКУНДА, -1), &ТекущаяДата) КАК КонецИнтервала
		|		ИЗ (" + ВыборкаДатУходаВОтпуск + ") КАК ДатыУходаВОтпуск
		|		ЛЕВОЕ СОЕДИНЕНИЕ (
		|   		//Запрос на получение дат возврата из отпуска
		|			ВЫБРАТЬ
		|				ДатыУходаВОтпуск.Сотрудник.ФизЛицо,
		|				ДатыУходаВОтпуск.Сотрудник,
		|			    ДатыУходаВОтпуск.Организация,
		|				ДатыУходаВОтпуск.НачалоИнтервала,
        |				ВЫБОР 
        |                    КОГДА ДатыУходаВОтпуск.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) 
        |                    ТОГДА
        |                        ВЫБОР 
        |                        КОГДА Минимум(СостояниеРаботниковОрганизации.Период) ЕСТЬ NULL 
        |                        ТОГДА ДатыУходаВОтпуск.ПериодЗавершения
        |                        ИНАЧЕ 
        |                            ВЫБОР 
        |                            КОГДА ДатыУходаВОтпуск.ПериодЗавершения < Минимум(СостояниеРаботниковОрганизации.Период) 
        |                            ТОГДА ДатыУходаВОтпуск.ПериодЗавершения 
        |                            ИНАЧЕ Минимум(СостояниеРаботниковОрганизации.Период) 
        |                            КОНЕЦ 
        |                        КОНЕЦ 
        |                    ИНАЧЕ    
        |                        Минимум(СостояниеРаботниковОрганизации.Период)
        |                    КОНЕЦ
        |                    КАК КонецИнтервала
		|			ИЗ (" + ВыборкаДатУходаВОтпуск + ") КАК ДатыУходаВОтпуск
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизации
		|			ПО	СостояниеРаботниковОрганизации.Сотрудник = ДатыУходаВОтпуск.Сотрудник И СостояниеРаботниковОрганизации.Период > ДатыУходаВОтпуск.НачалоИнтервала
		|			СГРУППИРОВАТЬ ПО 
        |               ДатыУходаВОтпуск.Сотрудник.ФизЛицо, 
        |               ДатыУходаВОтпуск.Сотрудник, 
        |               ДатыУходаВОтпуск.Организация, 
        |               ДатыУходаВОтпуск.ПериодЗавершения, 
        |               ДатыУходаВОтпуск.НачалоИнтервала
		|		) КАК ДатыВозврата
		|		ПО ДатыВозврата.Сотрудник = ДатыУходаВОтпуск.Сотрудник И ДатыВозврата.НачалоИнтервала = ДатыУходаВОтпуск.НачалоИнтервала
		|		";

   	ИначеЕсли КодОтчета = мПланируемаяЗанятостьПомещений тогда

		ВыборкаДатУходаВОтпуск = "
		|			//Выборка занятых за период с даты начала периода + 1
		|			ВЫБРАТЬ
		|				ПланируемаяЗанятостьПомещений.Помещение,
		|				ПланируемаяЗанятостьПомещений.Занятость,
		|				ПланируемаяЗанятостьПомещений.Период КАК НачалоИнтервала,
		|				ПланируемаяЗанятостьПомещений.ДатаОкончания КАК КонецИнтервала,
		|				ПланируемаяЗанятостьПомещений.Регистратор
		|			ИЗ
		|				РегистрСведений.ПланируемаяЗанятостьПомещений КАК ПланируемаяЗанятостьПомещений
		|
		|			ГДЕ
		|				Занятость <> &ПомещениеСвободно " + ?(ТекстОграничениеПериода <> ""," И " + ТекстОграничениеПериода,"");

		Если ТекстОграничениеПериода <> "" тогда
			ВыборкаДатУходаВОтпуск = 		ВыборкаДатУходаВОтпуск + "
			|
			|			ОБЪЕДИНИТЬ ВСЕ
			
			|
			|           //Срез занятых на дату начала периоду
			|			ВЫБРАТЬ
			|				ПланируемаяЗанятостьПомещений.Помещение,
			|				ПланируемаяЗанятостьПомещений.Занятость,
			|				ПланируемаяЗанятостьПомещений.Период,
			|				ПланируемаяЗанятостьПомещений.ДатаОкончания,
			|				ПланируемаяЗанятостьПомещений.Регистратор
			|			ИЗ
			|  				РегистрСведений.ПланируемаяЗанятостьПомещений.СрезПоследних(&ДатаНач) КАК ПланируемаяЗанятостьПомещений
			|
			|			ГДЕ
			|				Занятость <> &ПомещениеСвободно ";
		КонецЕсли;	 

		ОсновнаяВыборка = ВыборкаДатУходаВОтпуск;
		   
	ИначеЕсли КодОтчета = мПланируемаяЗанятостьРаботников тогда

		ВыборкаДатУходаВОтпуск = "
		|			//Выборка занятых за период с даты начала периода + 1
		|			ВЫБРАТЬ
		|				ПланируемаяЗанятостьФизлиц.ФизЛицо,
		|				ПланируемаяЗанятостьФизлиц.Состояние,
		|				ПланируемаяЗанятостьФизлиц.Период  КАК НачалоИнтервала,
		|				ПланируемаяЗанятостьФизлиц.Регистратор,
		|				ПланируемаяЗанятостьФизлиц.ДатаОкончания КАК КонецИнтервала
		|			ИЗ
		|				РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК ПланируемаяЗанятостьФизлиц
		|
		|			ГДЕ
		|				Состояние <> &Свободен" + ?(ТекстОграничениеПериода <> ""," И " + ТекстОграничениеПериода,"");

		Если ТекстОграничениеПериода <> "" тогда
			ВыборкаДатУходаВОтпуск = 		ВыборкаДатУходаВОтпуск + "
			|
			|			ОБЪЕДИНИТЬ ВСЕ
			|
			|           //Срез занятых на дату начала периоду
			|			ВЫБРАТЬ
			|				ПланируемаяЗанятостьФизлиц.ФизЛицо,
			|				ПланируемаяЗанятостьФизлиц.Состояние,
			|				ПланируемаяЗанятостьФизлиц.Период Как НачалоИнтервала,
			|				ПланируемаяЗанятостьФизлиц.Регистратор,
			|				ПланируемаяЗанятостьФизлиц.ДатаОкончания
			|			ИЗ  РегистрСведений.СобытийныйПланЗанятостиФизлиц.СрезПоследних(&ДатаНач) КАК ПланируемаяЗанятостьФизлиц
			|			ГДЕ Состояние <> &Свободен 
			|			";
		КонецЕсли;	 

		ОсновнаяВыборка = ВыборкаДатУходаВОтпуск;

	ИначеЕсли КодОтчета = мПланируемаяЗанятостьРаботниковНеУтверждено тогда

		ВыборкаДатУходаВОтпуск = "
		|			//Выборка занятых за период с даты начала периода + 1
		|			ВЫБРАТЬ
		|				ПланируемаяЗанятостьФизлиц.ФизЛицо,
		|				ПланируемаяЗанятостьФизлиц.Состояние,
		|				ПланируемаяЗанятостьФизлиц.Период  КАК НачалоИнтервала,
		|				ПланируемаяЗанятостьФизлиц.Регистратор,
		|				ПланируемаяЗанятостьФизлиц.Документ,
		|				ПланируемаяЗанятостьФизлиц.ДатаОкончания КАК КонецИнтервала
		|			ИЗ
		|				РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК ПланируемаяЗанятостьФизлиц
		|
		|			ГДЕ
		|				Состояние <> &Свободен" + ?(ТекстОграничениеПериода <> ""," И " + ТекстОграничениеПериода,"");

		Если ТекстОграничениеПериода <> "" тогда
			ВыборкаДатУходаВОтпуск = 		ВыборкаДатУходаВОтпуск + "
			|
			|			ОБЪЕДИНИТЬ ВСЕ
			|
			|           //Срез занятых на дату начала периоду
			|			ВЫБРАТЬ
			|				ПланируемаяЗанятостьФизлиц.ФизЛицо,
			|				ПланируемаяЗанятостьФизлиц.Состояние,
			|				ПланируемаяЗанятостьФизлиц.Период Как НачалоИнтервала,
			|				ПланируемаяЗанятостьФизлиц.Регистратор,
			|				ПланируемаяЗанятостьФизлиц.Документ,
			|				ПланируемаяЗанятостьФизлиц.ДатаОкончания
			|			ИЗ  РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц.СрезПоследних(&ДатаНач) КАК ПланируемаяЗанятостьФизлиц
			|			ГДЕ Состояние <> &Свободен 
			|			";
		КонецЕсли;	 

		ОсновнаяВыборка = ВыборкаДатУходаВОтпуск;

	КонецЕсли;	 

	Возврат ОсновнаяВыборка;
	
КонецФункции	

// Возвращает код отчета в зависимости от вида отчета
Функция ПолучитьКодОтчета() Экспорт 
	Возврат мТаблицаВидыОтчета.Найти(ВидОтчета, "ВидОтчета").КодОтчета;
КонецФункции // ПолучитьКодОтчета()


///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет настройку отчета по умолчанию для заданного вида отчета
//
// Параметры: 
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	мКодОтчета = ПолучитьКодОтчета();
	
	мСписокОтборы = Новый СписокЗначений;
	мСписокГруппировки = Новый СписокЗначений;
	
	// Пустой период - без ограничения
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда
		ТекстОграничениеПериода = "";
	Иначе
		Если ДатаНач = '00010101000000' Тогда
			ТекстОграничениеПериода = "Период <= &ДатаКон";
		ИначеЕсли ДатаКон = '00010101000000' Тогда
			ТекстОграничениеПериода = "Период >= &ДатаНач";
		Иначе
			ТекстОграничениеПериода = "Период МЕЖДУ &ДатаНач И &ДатаКон";
		КонецЕсли;
	КонецЕсли; 

	Если мКодОтчета = мГрафикОтпусков Или мКодОтчета = мФактическиеОтпуска 
		Или мКодОтчета = мГрафикОтпусковИФактическиеОтпуска Или мКодОтчета = мПланируемаяЗанятостьРаботников  Или мКодОтчета = мПланируемаяЗанятостьРаботниковНеУтверждено Тогда
		
		// Отчеты по компании
		
		Если мКодОтчета = мГрафикОтпусков Тогда
			
			//График отпусков компании
			ОсновнаяВыборка = ПолучитьТекстОсновнойВыборкиДляВидаДиаграммы(мКодОтчета,ТекстОграничениеПериода);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Основная.НачалоИнтервала,
			|	Основная.КонецИнтервала,
			|	Основная.Регистратор,
			|	Основная.ФизЛицо КАК Работник,
			|	Работники.Подразделение КАК Подразделение,
			|	Работники.Должность,
			|	""План"" КАК Серия
			|ИЗ
			|	(" + ОсновнаяВыборка + ") КАК Основная";
			
		ИначеЕсли мКодОтчета = мФактическиеОтпуска Тогда
			
			//График отпусков компании
			ОсновнаяВыборка = ПолучитьТекстОсновнойВыборкиДляВидаДиаграммы(мКодОтчета,ТекстОграничениеПериода);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Основная.НачалоИнтервала,
			|	Основная.КонецИнтервала,
			|	Основная.Регистратор,
			|	Основная.ФизЛицо КАК Работник,
			|	Работники.Подразделение КАК Подразделение,
			|	Работники.Должность,
			|	""Факт"" КАК Серия
			|ИЗ
			|	(" + ОсновнаяВыборка + ") КАК Основная";
			
		ИначеЕсли мКодОтчета = мГрафикОтпусковИФактическиеОтпуска Тогда
			
			//График отпусков и фактические отпуска работников компании
			
			ОсновнаяВыборка = "
			|//Выборка данных графика отпусков
			|ВЫБРАТЬ
			|	ФизЛицо,
			|	Регистратор,
			|	НачалоИнтервала,
			|	КонецИнтервала,
			|	""План"" КАК Серия
			|ИЗ
			|	(" + ПолучитьТекстОсновнойВыборкиДляВидаДиаграммы(мГрафикОтпусков,ТекстОграничениеПериода) + ") КАК ГрафикОтпусков
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|//Выборка данных фактических отпусков
			|ВЫБРАТЬ
			|	ФизЛицо,
			|	Регистратор,
			|	НачалоИнтервала,
			|	КонецИнтервала,
			|	""Факт"" КАК Серия
			|ИЗ
			|	(" + ПолучитьТекстОсновнойВыборкиДляВидаДиаграммы(мФактическиеОтпуска,ТекстОграничениеПериода) + ") КАК ФактическиеОтпуска
			|";
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Основная.НачалоИнтервала,
			|	Основная.КонецИнтервала,
			|	Основная.Регистратор,
			|	Основная.ФизЛицо КАК Работник,
			|	Работники.Подразделение КАК Подразделение,
			|	Работники.Должность,
			|	Основная.Серия КАК Серия
			|ИЗ
			|	(" + ОсновнаяВыборка + ") КАК Основная";
			
		ИначеЕсли мКодОтчета = мПланируемаяЗанятостьРаботников Тогда
			
			//Планируемая занятость работников (утвержденная)
			ОсновнаяВыборка = ПолучитьТекстОсновнойВыборкиДляВидаДиаграммы(мКодОтчета,ТекстОграничениеПериода);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Основная.НачалоИнтервала,
			|	Основная.КонецИнтервала,
			|	Основная.Регистратор,
			|	Основная.ФизЛицо КАК Работник,
			|	Работники.Подразделение КАК Подразделение,
			|	Работники.Должность,
			|	""План"" КАК Серия
			|ИЗ
			|	(" + ОсновнаяВыборка + ") КАК Основная";
			
		ИначеЕсли мКодОтчета = мПланируемаяЗанятостьРаботниковНеУтверждено Тогда
			
			//Планируемая занятость работников (утвержденная)
			ОсновнаяВыборка = ПолучитьТекстОсновнойВыборкиДляВидаДиаграммы(мКодОтчета,ТекстОграничениеПериода);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Основная.НачалоИнтервала,
			|	Основная.КонецИнтервала,
			|	Основная.Регистратор,
			|	Основная.Документ,
			|	Основная.ФизЛицо КАК Работник,
			|	Работники.Подразделение КАК Подразделение,
			|	Работники.Должность,
			|	""План"" КАК Серия
			|ИЗ
			|	(" + ОсновнаяВыборка + ") КАК Основная";
			
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + " 
		|
		|{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники.СрезПоследних(&ДатаСведений) КАК Работники
		|ПО Работники.ФизЛицо = Основная.ФизЛицо}
		|
		|{ГДЕ 
		|	Работники.Подразделение.* КАК Подразделение,
		|	Работники.Должность.* КАК Должность,
		|	Работники.ФизЛицо.* КАК Работник,
		|	Основная.Регистратор КАК Регистратор}
		|
		|{УПОРЯДОЧИТЬ ПО Работники.Подразделение.* КАК Подразделение,
		|	Работники.Должность.* КАК Должность,
		|	Работники.ФизЛицо.* КАК Работник }
		|
		|{ИТОГИ  ПО 
		|	Работники.Подразделение КАК Подразделение, 
		|	Основная.ФизЛицо КАК Работник, 
		|	Работники.Должность КАК Должность}";
		
		мСписокГруппировки.Добавить("Подразделение");
		мСписокГруппировки.Добавить("Работник");
		мСписокОтборы.Добавить("Подразделение");
		мСписокОтборы.Добавить("Работник");
		
	ИначеЕсли мКодОтчета = мФактическиеОтпускаОрганизации Или мКодОтчета = мГрафикОтпусковОрганизации
		Или мКодОтчета = мГрафикОтпусковИФактическиеОтпускаОрганизации Тогда
		
		// Отчеты по организации
		
		Если мКодОтчета = мГрафикОтпусковОрганизации Тогда
			
			//График отпусков компании
			ОсновнаяВыборка = ПолучитьТекстОсновнойВыборкиДляВидаДиаграммы(мКодОтчета,ТекстОграничениеПериода);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Основная.ФизЛицо КАК Работник,
			|	Основная.Сотрудник,
			|	Основная.Регистратор,
			|	Основная.НачалоИнтервала,
			|	Основная.КонецИнтервала,
			|	РаботникиОрганизации.ПодразделениеОрганизации КАК Подразделение,
			|	РаботникиОрганизации.Должность КАК Должность,
			|	РаботникиОрганизации.ОбособленноеПодразделение КАК Организация,
			|	""План"" КАК Серия
			|ИЗ
			|	(" + ОсновнаяВыборка + ") КАК Основная";
			
		ИначеЕсли мКодОтчета = мФактическиеОтпускаОрганизации Тогда
			
			//График отпусков компании
			ОсновнаяВыборка = ПолучитьТекстОсновнойВыборкиДляВидаДиаграммы(мКодОтчета,ТекстОграничениеПериода);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Основная.ФизЛицо КАК Работник,
			|	Основная.Сотрудник,
			|	Основная.Регистратор,
			|	Основная.НачалоИнтервала,
			|	Основная.КонецИнтервала,
			|	РаботникиОрганизации.ПодразделениеОрганизации КАК Подразделение,
			|	РаботникиОрганизации.Должность КАК Должность,
			|	РаботникиОрганизации.ОбособленноеПодразделение КАК Организация,
			|	""Факт"" КАК Серия
			|ИЗ
			|	(" + ОсновнаяВыборка + ") КАК Основная";
			
		ИначеЕсли мКодОтчета = мГрафикОтпусковИФактическиеОтпускаОрганизации Тогда
			
			//График отпусков и фактические отпуска работников организации
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Основная.ФизЛицо КАК Работник,
			|	Основная.Сотрудник,
			|	Основная.Регистратор,
			|	Основная.НачалоИнтервала,
			|	Основная.КонецИнтервала,
			|	РаботникиОрганизации.ПодразделениеОрганизации КАК Подразделение,
			|	РаботникиОрганизации.Должность КАК Должность,
			|	РаботникиОрганизации.ОбособленноеПодразделение КАК Организация,
			|	Основная.Серия
			|ИЗ (
			|
			|//Выборка данных графика отпусков
			|ВЫБРАТЬ
			|	ФизЛицо,
			|	Сотрудник,
			|	Организация,
			|	Регистратор,
			|	НачалоИнтервала,
			|	КонецИнтервала,
			|	""План"" КАК Серия
			|ИЗ
			|	(" + ПолучитьТекстОсновнойВыборкиДляВидаДиаграммы(мГрафикОтпусковОрганизации,ТекстОграничениеПериода) + ") КАК ГрафикОтпусков
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|//Выборка данных фактических отпусков
			|ВЫБРАТЬ
			|	ФизЛицо,
			|	Сотрудник,
			|	Организация,
			|	Регистратор,
			|	НачалоИнтервала,
			|	КонецИнтервала,
			|	""Факт"" КАК Серия
			|ИЗ
			|	(" + ПолучитьТекстОсновнойВыборкиДляВидаДиаграммы(мФактическиеОтпускаОрганизации,ТекстОграничениеПериода) + ") КАК ФактическиеОтпуска
			|) КАК Основная
			|";
			
		КонецЕсли;	
		ТекстЗапроса = 	ТекстЗапроса +"
		|{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаСведений) КАК РаботникиОрганизации
		|ПО РаботникиОрганизации.Сотрудник = Основная.Сотрудник}
		|
		|{ГДЕ 
		|	РаботникиОрганизации.ОбособленноеПодразделение.* КАК Организация,
		|	РаботникиОрганизации.ПодразделениеОрганизации.* КАК Подразделение,
		|	РаботникиОрганизации.Должность.* КАК Должность,
		|	Основная.ФизЛицо.* КАК Работник,
		|	Основная.Сотрудник.* КАК Сотрудник,
		|	Основная.Регистратор КАК Регистратор
		|	}
		|
		|{УПОРЯДОЧИТЬ ПО 
		|	РаботникиОрганизации.ОбособленноеПодразделение.* КАК Организация,
		|	РаботникиОрганизации.ПодразделениеОрганизации.* КАК Подразделение,
		|	РаботникиОрганизации.Должность.* КАК Должность,
		|	Основная.ФизЛицо.* КАК Работник}
		|
		|{ИТОГИ  ПО 
		|	РаботникиОрганизации.ОбособленноеПодразделение КАК Организация,
		|	РаботникиОрганизации.ПодразделениеОрганизации КАК Подразделение,
		|	РаботникиОрганизации.Должность КАК Должность,
		|	Основная.ФизЛицо КАК Работник}";
		
		
		
		мСписокГруппировки.Добавить("Организация");
		мСписокГруппировки.Добавить("Подразделение");
		мСписокГруппировки.Добавить("Работник");
		мСписокОтборы.Добавить("Организация");
		мСписокОтборы.Добавить("Подразделение");
		мСписокОтборы.Добавить("Работник");
		
	ИначеЕсли мКодОтчета = мПланируемаяЗанятостьПомещений Тогда
		
		//Планируемая занятость помещений
		ОсновнаяВыборка = ПолучитьТекстОсновнойВыборкиДляВидаДиаграммы(мКодОтчета,ТекстОграничениеПериода);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Основная.Помещение,
		|	Основная.Регистратор,
		|	Основная.НачалоИнтервала,
		|	Основная.КонецИнтервала,
		|	""План"" КАК Серия
		|ИЗ
		|	(" + ОсновнаяВыборка + ") КАК Основная
		|
		|{ГДЕ 
		|	Основная.Помещение.* КАК Помещение,
		|	Основная.Регистратор КАК Регистратор
		|	}
		|
		|{УПОРЯДОЧИТЬ ПО 
		|	Основная.Помещение.* КАК Помещение}
		|
		|{ИТОГИ  ПО 
		|	Основная.Помещение.* КАК Помещение}";
		
		мСписокГруппировки.Добавить("Помещение");
		мСписокОтборы.Добавить("Помещение");
		
	КонецЕсли;

	// Очистим прежние настройки отчета
	ПостроительОтчета.ИзмеренияСтроки.Очистить();
	ПостроительОтчета.Порядок.Очистить();
	Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
		ПостроительОтчета.Отбор.Удалить(0);
	КонецЦикла; 
	
	ПостроительОтчета.Текст = ТекстЗапроса;
	
	// Установим группировки по умолчанию
	Для Каждого ЭлементСписка Из мСписокГруппировки Цикл
		ПостроительОтчета.ИзмеренияСтроки.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	// Установим отборы по умолчанию
	Для Каждого ЭлементСписка Из мСписокОтборы Цикл
		ПостроительОтчета.Отбор.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	// Периодичноть по умолчанию
	Если мКодОтчета = мПланируемаяЗанятостьРаботников ИЛИ мКодОтчета = мПланируемаяЗанятостьРаботниковНеУтверждено ИЛИ мКодОтчета = мПланируемаяЗанятостьПомещений Тогда
		Периодичность = мЧасДень;
	Иначе	
		Периодичность = мДеньНеделяМесяц;
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДиаграммаГанта) Экспорт

    мКодОтчета = ПолучитьКодОтчета();
	
	Если Периодичность < 0 ИЛИ Периодичность > 3 Тогда
		Предупреждение(НСтр("ru='Не выбрана периодичность!';uk='Не обрана періодичність!'"));
		Возврат;
	КонецЕсли;
	
	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда
		Предупреждение(НСтр("ru='Дата начала периода не может быть больше даты конца периода';uk='Дата початку періоду не може бути більше дати кінця періоду'"));
		Возврат;
	КонецЕсли; 

	Если ПостроительОтчета.ИзмеренияСтроки.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Не выбрано ни одной группировки!';uk='Не вибрано жодного групування!'"));
		Возврат;
	КонецЕсли;

	Если ДатаНач <> Дата('00010101') Тогда
		ДатаНач = НачалоДня(ДатаНач);
	КонецЕсли; 
	Если ДатаКон <> Дата('00010101') Тогда
		ДатаКон = КонецДня(ДатаКон);
	КонецЕсли; 
	
	//РезультатЗапроса = СформироватьЗапрос(Регистратор);
	ПостроительОтчета.Параметры.Вставить("ДатаНач", НачалоДня(ДатаНач));
	ПостроительОтчета.Параметры.Вставить("ДатаКон", НачалоМинуты(КонецДня(ДатаКон)));
	ПостроительОтчета.Параметры.Вставить("ДатаСведений", ДатаКон);
	ПостроительОтчета.Параметры.Вставить("ДатаПослеНачала", ДатаНач + 1);
	ПостроительОтчета.Параметры.Вставить("ТекущаяДата", КонецДня(ОбщегоНазначения.ПолучитьРабочуюДату()));
	ПостроительОтчета.Параметры.Вставить("РаботникВОтпуске", Перечисления.СостоянияРаботника.ОтпускЕжегодный);
	ПостроительОтчета.Параметры.Вставить("РаботникОрганизацииВОтпуске", Перечисления.СостоянияРаботникаОрганизации.ОтпускЕжегодный);
	ПостроительОтчета.Параметры.Вставить("ПомещениеСвободно", Перечисления.Занятость.Свободно);
	ПостроительОтчета.Параметры.Вставить("Свободен", Перечисления.ТипыПериодическихЗадачРаботника.Свободен);
	ПостроительОтчета.Параметры.Вставить("Отпуск", Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
	
	ПостроительОтчета.Выполнить();
	РезультатЗапроса = ПостроительОтчета.Результат;
	
	ДиаграммаГанта.Обновление = Ложь;
	ДиаграммаГанта.Очистить();
	
	//ДиаграммаГанта.ОбластьЗаголовка.Текст = СформироватьЗаголовок();
	
	// Оформление шкалы времени
	ЭлементыШкалыВремени = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы;
	
	// очистим коллекцию
	ПервыйЭлемент = ЭлементыШкалыВремени[0];// нельзя полностью очитить коллекцию (один элемент будет всегда)
	Для Н=1 по ЭлементыШкалыВремени.Количество()-1 Цикл
		ЭлементыШкалыВремени.Удалить(ЭлементыШкалыВремени[1]);
	КонецЦикла; 
	
	// заполним коллекцию
	Если Периодичность = мДеньНеделяМесяц Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.Месяц;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Неделя;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.День;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Пунктир, 1);
		Элемент.ФорматДня =  ФорматДняШкалыВремени.ДеньМесяца;
		
	ИначеЕсли Периодичность = мЧасДень Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.День;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		ПервыйЭлемент.ФорматДня =  ФорматДняШкалыВремени.ДеньМесяца;
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Час;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
		
	ИначеЕсли Периодичность = мНеделяМесяцГод Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.Год;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Месяц;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Неделя;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Пунктир, 1);
		
	ИначеЕсли Периодичность = мМесяцГод Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.Год;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Месяц;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
	КонецЕсли;

	// Вывод данных
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Диаграмма", ДиаграммаГанта);
	СтруктураПараметров.Вставить("ВсегоГруппировок", ПостроительОтчета.ИзмеренияСтроки.Количество());
	
	Если мКодОтчета = мГрафикОтпусковИФактическиеОтпуска ИЛИ мКодОтчета = мГрафикОтпусковИФактическиеОтпускаОрганизации Тогда
		СтруктураПараметров.Вставить("СерияПлан", ДиаграммаГанта.УстановитьСерию("План"));
		СтруктураПараметров.Вставить("СерияФакт", ДиаграммаГанта.УстановитьСерию("Факт"));
	ИначеЕсли мКодОтчета = мФактическиеОтпуска ИЛИ мКодОтчета = мФактическиеОтпускаОрганизации Тогда	
		СтруктураПараметров.Вставить("СерияФакт", ДиаграммаГанта.УстановитьСерию("Факт"));
	Иначе
		СтруктураПараметров.Вставить("СерияПлан", ДиаграммаГанта.УстановитьСерию("План"));
	КонецЕсли; 
	
	ВывестиВыборку(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, 0);
	
	ДиаграммаГанта.ПоказатьУровеньТочек(0);
	ДиаграммаГанта.Обновление = Истина;
	
КонецПроцедуры // СформироватьОтчет()

// Выводим диаграмму отчета в табличный документ
Функция  Печать(Регистратор = "") Экспорт
	
	ЯзыкФормированияПечатныхФормОтчетов = ЛокализацияПовтИсп.ПолучитьЯзыкФормированияПечатныхФормОтчетов();
	
	Если ЗначениеЗаполнено(Регистратор) Тогда
		Если ПостроительОтчета.Отбор.Найти("Регистратор") = Неопределено Тогда
			ПостроительОтчета.Отбор.Добавить("Регистратор");
		КонецЕсли; 
		ПостроительОтчета.Отбор.Регистратор.Значение = Регистратор;
		ПостроительОтчета.Отбор.Регистратор.Использование = Истина;
	КонецЕсли; 
	
	ДокументРезультат = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("Макет");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьДиаграмма = Макет.ПолучитьОбласть("ОбластьДиаграммы");
	
	// Заполним заголовок отчета
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда
		СтрПериод = НСтр("ru='без ограничения ';uk='без обмеження '", ЯзыкФормированияПечатныхФормОтчетов);
	Иначе
		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда
			СтрПериод = Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = """+НСтр("ru='без ограничения ';uk='без обмеження '", ЯзыкФормированияПечатныхФормОтчетов)+"""") 
			+ " - " + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = """+НСтр("ru='без ограничения ';uk='без обмеження '", ЯзыкФормированияПечатныхФормОтчетов)+"""");
		Иначе
			СтрПериод = ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон));
		КонецЕсли;
	КонецЕсли;

	СписокОтбор = "";
	Для Сч=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		Если ПостроительОтчета.Отбор[Сч].Использование Тогда
			СписокОтбор = СписокОтбор +", "+ ЛокализацияПовтИсп.ПолучитьПереводТекста(ПостроительОтчета.Отбор[Сч].Представление) 
			+" "+ ЛокализацияПовтИсп.ПолучитьПереводТекста(Строка(ПостроительОтчета.Отбор[Сч].ВидСравнения)) +" "+ ПостроительОтчета.Отбор[Сч].Значение;
		КонецЕсли; 
	КонецЦикла; 

	СписокГруппировок = "";
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		СписокГруппировок = СписокГруппировок +", "+ ЛокализацияПовтИсп.ПолучитьПереводТекста(ПостроительОтчета.ИзмеренияСтроки[Сч].Представление)
		+" "+ ПостроительОтчета.ИзмеренияСтроки[Сч].ТипИзмерения;
	КонецЦикла; 
	
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ЛокализацияПовтИсп.ПолучитьПереводТекста(ВидОтчета);
	ОбластьЗаголовок.Параметры.Период     = НСтр("ru='Период: ';uk='Період: '", ЯзыкФормированияПечатныхФормОтчетов)+СтрПериод;
	ОбластьЗаголовок.Параметры.Отбор      = НСтр("ru='Отбор: ';uk='Відбір: '", ЯзыкФормированияПечатныхФормОтчетов)    +Сред(СписокОтбор,2);
	ОбластьЗаголовок.Параметры.Группировки  = НСтр("ru='Группировки по: ';uk='Групування по: '", ЯзыкФормированияПечатныхФормОтчетов)+Сред(СписокГруппировок,2);
	ДокументРезультат.Вывести(ОбластьЗаголовок);
	
	// Выводим диаграмму
	ДокументРезультат.Вывести(ОбластьДиаграмма);
	СформироватьОтчет(ДокументРезультат.Рисунки.Диаграмма.Объект);
	
	УниверсальныеМеханизмы.НапечататьДокумент(ДокументРезультат, ,, НСтр("ru='Диаграмма: ';uk='Діаграма: '") + ВидОтчета);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
// виды периодичностей. Номера соответсвуют значению Периодичность
мЧасДень 			= 0;
мДеньНеделяМесяц	= 1;
мНеделяМесяцГод		= 2;
мМесяцГод		    = 3;

// Коды отчета
мГрафикОтпусков		= 1;
мФактическиеОтпуска	= 2;
мГрафикОтпусковИФактическиеОтпуска	= 3;
мПланируемаяЗанятостьПомещений = 7;
мПланируемаяЗанятостьРаботников = 8;
мПланируемаяЗанятостьРаботниковНеУтверждено = 9;
мГрафикОтпусковОрганизации		= 4;
мФактическиеОтпускаОрганизации	= 5;
мГрафикОтпусковИФактическиеОтпускаОрганизации	= 6;

мТаблицаВидыОтчета = Новый ТаблицаЗначений;
мТаблицаВидыОтчета.Колонки.Добавить("ВидОтчета", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
мТаблицаВидыОтчета.Колонки.Добавить("КодОтчета", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(2));
мТаблицаВидыОтчета.Индексы.Добавить("ВидОтчета");

// Соответствие видов отчета и их кодов
НоваяСтрока = мТаблицаВидыОтчета.Добавить();
НоваяСтрока.ВидОтчета = НСтр("ru='График отпусков';uk='Графік відпусток'");
НоваяСтрока.КодОтчета = мГрафикОтпусков;

НоваяСтрока = мТаблицаВидыОтчета.Добавить();
НоваяСтрока.ВидОтчета = НСтр("ru='Фактические отпуска';uk='Фактичні відпустки'");
НоваяСтрока.КодОтчета = мФактическиеОтпуска;

НоваяСтрока = мТаблицаВидыОтчета.Добавить();
НоваяСтрока.ВидОтчета = НСтр("ru='Исполнение графика отпусков';uk='Виконання графіка відпусток'");
НоваяСтрока.КодОтчета = мГрафикОтпусковИФактическиеОтпуска;

НоваяСтрока = мТаблицаВидыОтчета.Добавить();
НоваяСтрока.ВидОтчета = НСтр("ru='График отпусков работников организаций';uk='Графік відпусток працівників організацій'");
НоваяСтрока.КодОтчета = мГрафикОтпусковОрганизации;

НоваяСтрока = мТаблицаВидыОтчета.Добавить();
НоваяСтрока.ВидОтчета = НСтр("ru='Фактические отпуска работников организаций';uk='Фактичні відпустки працівників організацій'");
НоваяСтрока.КодОтчета = мФактическиеОтпускаОрганизации;

НоваяСтрока = мТаблицаВидыОтчета.Добавить();
НоваяСтрока.ВидОтчета = НСтр("ru='Исполнение графика отпусков организаций';uk='Виконання графіка відпусток організацій'");
НоваяСтрока.КодОтчета = мГрафикОтпусковИФактическиеОтпускаОрганизации;

НоваяСтрока = мТаблицаВидыОтчета.Добавить();
НоваяСтрока.ВидОтчета = НСтр("ru='Планируемая занятость помещений';uk='Планована зайнятість приміщень'");
НоваяСтрока.КодОтчета = мПланируемаяЗанятостьПомещений;

НоваяСтрока = мТаблицаВидыОтчета.Добавить();
НоваяСтрока.ВидОтчета = НСтр("ru='Планируемая занятость работников (утвержденная)';uk='Планована зайнятість працівників (затверджена)'");
НоваяСтрока.КодОтчета = мПланируемаяЗанятостьРаботников;

НоваяСтрока = мТаблицаВидыОтчета.Добавить();
НоваяСтрока.ВидОтчета = НСтр("ru='Планируемая занятость работников (не утвержденная)';uk='Планована зайнятість працівників (не затверджена)'");
НоваяСтрока.КодОтчета = мПланируемаяЗанятостьРаботниковНеУтверждено;

мИмяОтчета = Метаданные().Имя;


#КонецЕсли

