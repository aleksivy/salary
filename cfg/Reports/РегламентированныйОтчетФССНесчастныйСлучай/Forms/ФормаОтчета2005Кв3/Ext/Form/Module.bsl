////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
//каждая закладка отчета - это объект ПолеТабличногоДокумента
Перем мОтчетФССНесчастныйСлучай;

Перем мВедомость;

Перем мСоставПоказателей Экспорт;

// переменный для хранения бухгалтерских итогов
Перем мБухИтоги, мБухИтогиРС, мБухИтогиЗП,мБухгИтоги;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранит код отчета по КНД
Перем мКодОтчета;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы;

// хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц;

Перем ставка;

Перем Счет661, СчетФССНесч, СчетРасчСчет1, СчетРасчСчет2;

Перем ПС;

Перем П5_1;

Перем НужныйВидСбора, НужнаяСтатья, МассивСчетов, СтрокиДекларации, МассивСтатей;

Перем мПечатныеФормы Экспорт;

Перем мСохранятьРасшифровку Экспорт;

Перем СпП Экспорт;

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//  требуется редакция по наименованиям ПолейТабличныхДокументов
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОтчетФССНесчастныйСлучай";
	СтрокаУровня1.Представление            = "Отчет в ФСС от несчастных случаев";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаОтчетФССНесчастныйСлучай";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
		
	//далее требуется правка по названиям ПолейТабличныхДокументов,
	//которые будут именоваться, также как и соответствующие приложения
	//декларации
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Ведомость";
	СтрокаУровня1.Представление            = НСтр("ru='Ведомость';uk='Відомість'");
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаВедомость";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
  
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
//Процедура ЗаполнитьНачальныеНастройки() Экспорт
Процедура ЗаполнитьНачальныеНастройки(Макет = "СоставПоказателей2005Кв3") Экспорт

//МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(Макет);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по дебету счета, указанного в параметре.
//
Функция СНД(Счет,Субконто)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет,Субконто1", Счет,Субконто);

	Возврат Итог;

КонецФункции // СНД()

// Функция вычисляет начальный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по кредиту счета, указанного в параметре.
//
Функция СНК(Счет,Субконто)

	Перем Итог;

	Возврат мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет,Субконто1", Счет,Субконто);

	Возврат Итог;

КонецФункции // СНК()

Функция СКК(Счет)

	Перем Итог;

	Возврат мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Период,Счет", ДобавитьМесяц(мДатаНачалаПериодаОтчета, 2),Счет);

	Возврат Итог;

КонецФункции // СНК()


// Функция вычисляет перекрестный оборот в дебет счета, указанного в качестве 
// первого параметра функции, с кредита счета, указанного в качестве второго 
// параметра. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  СчетД        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот в дебет счета;
//  СчетК        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот с кредита счета.
//
// Возвращаемое значение:
//  Число        - сумма перекрестного оборота. 
Функция ОБ(СчетД)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКорОборотКт", "КорСчет,Период",СчетД,ДобавитьМесяц(мДатаНачалаПериодаОтчета, 2));

	Возврат Итог;

КонецФункции // ОБ()

Функция КО(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Период,Счет", ДобавитьМесяц(мДатаНачалаПериодаОтчета, 2), Счет);

	Возврат Итог;

КонецФункции

// Функция вычисляет начальный остаток счета, указанного в качестве параметра 
// функции, развернутый по дебету субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма начального остатка, развернутого по субсчетам 
//                 указанного счета.

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция округляет значение ССЧ согласно новым правилам: Наказ Державного комітету статистики України від 28 вересня 2005 року N 286 
// Параметры:
//  Значение - исходное значение ССЧ
//
// Возвращаемое значение:
//  значение ССЧ, округленное по утвержденному правилу.
//
Функция ОкруглитьССЧ(Значение)
	ССЧ = Значение;
	ССЧ = Строка(ССЧ);
	Позиция = Найти(ССЧ, ",");
	ЦелаяЧасть = Лев(ССЧ, Позиция-1);
	
	Если Позиция = 0 Тогда
		ОкругленноеССЧ = Значение;
	Иначе
		ПоследняяЦифраЦелойЧасти = Сред(ССЧ,Позиция-1, 1);

		Если Число(Сред(ССЧ, Позиция+1, 1)) >= 6 Тогда
			ОкругленноеССЧ = Число(ЦелаяЧасть)+1;
		ИначеЕсли Число(Сред(ССЧ, Позиция+1, 1)) <= 4 Тогда
			ОкругленноеССЧ = Число(ЦелаяЧасть);
		ИначеЕсли Число(Сред(ССЧ, Позиция+1, 1)) = 5 Тогда
			Если   Число(ПоследняяЦифраЦелойЧасти) = 2
			   ИЛИ Число(ПоследняяЦифраЦелойЧасти) = 4
			   ИЛИ Число(ПоследняяЦифраЦелойЧасти) = 6
			   ИЛИ Число(ПоследняяЦифраЦелойЧасти) = 8 Тогда
			   	ОкругленноеССЧ = Число(ЦелаяЧасть)+1;
			Иначе
				ОкругленноеССЧ = Число(ЦелаяЧасть);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОкругленноеССЧ;
КонецФункции


// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураПоказателейВнутрСвязи = Новый Структура;

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		//Проверяется условие не является ли ТекущаяОбласть многоячеечной областью для вывода 
		//документа на печать. Если является - то следующую проверку выполнять не нужно
		Если (ТекущаяОбласть.Имя = "Область1" ИЛИ ТекущаяОбласть.Имя = "Область2") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.Защита Тогда
			Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2005Кв3");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()
// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2005Кв3");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий параметры автозаполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки параметров автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии формы для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя, а в текущей - отключено.
							// В этом случае удаляем ячейку из таблицы пользовательских настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

Функция УстановитьДатуПодписи()

	
	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	
	мОтчетФССНесчастныйСлучай.Области.ДеньДаты.Значение 	= ЧастиДатыПодписи.День;
	мОтчетФССНесчастныйСлучай.Области.МесяцДаты.Значение 	= ЧастиДатыПодписи.Месяц;
	мОтчетФССНесчастныйСлучай.Области.ГодДаты.Значение 		= ЧастиДатыПодписи.ПоследняяЦифраГода;
	
	мВедомость.Области.ДеньДаты.Значение 	= ЧастиДатыПодписи.День;
	мВедомость.Области.МесяцДаты.Значение 	= ЧастиДатыПодписи.Месяц;
	мВедомость.Области.ГодДаты.Значение 	= ЧастиДатыПодписи.ПоследняяЦифраГода;	
	
	Модифицированность = Истина;	
КонецФункции

// Процедура управляет показом в форме периода построения отчета,
Процедура ПоказатьПериод()

	СтрПериодОтчета = ПредставлениеПериода( НачалоГода(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина");

// Период в заголовке отчета
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
    мОтчетФССНесчастныйСлучай.Области.ПериодОтчета.Значение = "за  " +  СтрПериодОтчета;
	мВедомость.Области.ПериодОтчета.Значение = "за  " + Формат(Год (мДатаКонцаПериодаОтчета), "ЧГ=0") + " р.";
	
	
	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	
	мОтчетФССНесчастныйСлучай.Области.ДеньДаты.Значение 	= ЧастиДатыПодписи.День;
	мОтчетФССНесчастныйСлучай.Области.МесяцДаты.Значение 	= ЧастиДатыПодписи.Месяц;
	мОтчетФССНесчастныйСлучай.Области.ГодДаты.Значение 		= ЧастиДатыПодписи.ПоследняяЦифраГода;
	
	мВедомость.Области.ДеньДаты.Значение 	= ЧастиДатыПодписи.День;
	мВедомость.Области.МесяцДаты.Значение 	= ЧастиДатыПодписи.Месяц;
	мВедомость.Области.ГодДаты.Значение 	= ЧастиДатыПодписи.ПоследняяЦифраГода;
  	
КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
// пока не прописаны коды - вернуться
Процедура ЗаполнитьСведенияОбОрганизации()
	
	ОргНазв = Организация.НаименованиеПолное;

	мОтчетФССНесчастныйСлучай.Области.ОргНазв.Значение = ОргНазв;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","КодЗКГНГ");
	СписокПоказателей.Добавить("","КодКВЕД");
	СписокПоказателей.Добавить("","НомерФССНесчСлучай");
  
	ФИОДиректора = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФИОРук;
	ФИОГлавБуха = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФИОБух;
	КодЕДРПОУ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодПоЕДРПОУ;
	КодЗКГНГ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодЗКГНГ;
	КодКВЕД = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодКВЕД;
	НомерФССНесчСлучай = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).НомерФССНесчСлучай;
	
	мОтчетФССНесчастныйСлучай.Области.КодЕДРПОУ.Значение = КодЕДРПОУ; 
//	мОтчетФССНесчастныйСлучай.Области.КодЗКГНГ.Значение = КодЗКГНГ;
	мОтчетФССНесчастныйСлучай.Области.КодКВЕД.Значение = КодКВЕД;
	мОтчетФССНесчастныйСлучай.Области.НомерРегистрацииНС.Значение = НомерФССНесчСлучай;

	мОтчетФССНесчастныйСлучай.Области.ОргБухгалтер.Значение = ФИОГлавБуха; 
	мОтчетФССНесчастныйСлучай.Области.ОргДиректор.Значение = ФИОДиректора;
	
	мВедомость.Области.ОргБухгалтер.Значение = ФИОГлавБуха; 
	мВедомость.Области.ОргДиректор.Значение = ФИОДиректора;

	
	мОтчетФССНесчастныйСлучай.Области.Адрес.Значение = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
	мОтчетФССНесчастныйСлучай.Области.Телефон.Значение = УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	
	ДопСведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, мДатаНачалаПериодаОтчета, "uk");
	мОтчетФССНесчастныйСлучай.Области.РС.Значение     = ДопСведенияОбОрганизации.НомерСчета;
	мОтчетФССНесчастныйСлучай.Области.Банк.Значение   = ДопСведенияОбОрганизации.Банк;
	мОтчетФССНесчастныйСлучай.Области.МФО.Значение    = ДопСведенияОбОрганизации.МФО;
	
	//определяем размер страхового тарифа
	СпрНалоги = Справочники.Налоги;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|НалогиОсн.Организация  КАК Организация, 
	|НалогиОсн.Налог  КАК Налог, 
	|НалогиОсн.Ставка КАК Ставка
    |ИЗ
	|РегистрСведений.ШкалаСтавокНалогов.СрезПоследних (&Дата) КАК НалогиОсн
	|ГДЕ 
	|(НалогиОсн.Налог = &ФЗПСоцстрахНесчСлучай) И ((НалогиОсн.Организация = &Организация)  ИЛИ (НалогиОсн.Организация = &пустаяОрганизация))
	|";
	
	ЗапросЗначенияСтавок = Новый Запрос;
	ЗапросЗначенияСтавок.Текст = ТекстЗапроса;
	ЗапросЗначенияСтавок.УстановитьПараметр("Организация",Организация);
	ЗапросЗначенияСтавок.УстановитьПараметр( "пустаяОрганизация"     , Справочники.Организации.ПустаяСсылка());
	ЗапросЗначенияСтавок.УстановитьПараметр("Дата", мДатаНачалаПериодаОтчета);
	ЗапросЗначенияСтавок.УстановитьПараметр("ФЗПСоцстрахНесчСлучай",СпрНалоги.СоцстрахНесчФОТ);
	
	РезультатЗапроса = ЗапросЗначенияСтавок.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаСтавок = РезультатЗапроса.Выгрузить();
		Отбор = Новый Структура;
		Отбор.Вставить("Налог", СпрНалоги.СоцстрахНесчФОТ);
		Отбор.Вставить("Организация", Организация);
		НайденныеСтроки = ТаблицаСтавок.НайтиСтроки (Отбор);
		Если (НайденныеСтроки.Количество() <> 0 ) Тогда
			ставка = НайденныеСтроки[0].Ставка; 
		Иначе	  
			Отбор.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
			НайденныеСтроки = ТаблицаСтавок.НайтиСтроки (Отбор);
			Если (НайденныеСтроки.Количество() <> 0 ) Тогда
				ставка = НайденныеСтроки[0].Ставка; 
			КонецЕсли;
			
		КонецЕсли;	   
	КонецЕсли;

 	СтраховойТариф = ставка * 100;
	УстановитьЗначениеПоказателя("СтраховойТариф", СтраховойТариф);
	
	ПС = ПланыСчетов["Хозрасчетный"];
	
	ПоказатьПериод();

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(НСтр("ru='Отчет в ФСС от несчастных случаев: при выводе сумм в гривнях точность не может превышать 2 знака';uk='Звіт у ФСС від нещасних випадків: при виведенні сум у гривнях точність не може перевищувати 2 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(НСтр("ru='Отчет в ФСС от несчастных случаев: при выводе сумм в тысячах гривень точность не может превышать 3 знака';uk='Звіт у ФСС від нещасних випадків: при виведенні сум у тисячах гривень точність не може перевищувати 3 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(НСтр("ru='Отчет в ФСС от несчастных случаев: при выводе сумм в миллионах гривень точность не может превышать 6 знаков';uk='Звіт у ФСС від нещасних випадків: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

	Сообщить(НСтр("ru='После изменения формата вывода значений, для корректного расчета итогов необходимо перезаполнить отчет!';uk='Після зміни формату виводу значень, для корректного розрахунку підсумків треба перезаполвнити звіт!'"), СтатусСообщения.Внимание);	
	
КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";

	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "ОтчетФССНесчастныйСлучай";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()


// Обновляет пользовательские настройки при изменении версии формы.
// унифицирована, однако использование пока ... вопрос
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить(НСтр("ru='Измененилась версия формы отчета."
"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
"Виконується відновлення користувальницьких настройок.'"), СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	Если ЕстьИзмененияВариантыЗаполнения Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить(НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Оновлення користувальницьких настройок успішно завершене!'"));

	Иначе

		Сообщить(НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі користувальницьких настройок не виявлені!'"));

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()


// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетФССНесчастныйСлучай";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиСтраниц = ПолучитьФорму("ФормаНастройкиСтраниц", ЭтаФорма, "дляВыбораСтраницОтчета");

	Если ФормаНастройкиСтраниц.Открыта() Тогда
		ФормаНастройкиСтраниц.Активизировать();
		Если Вопрос(НСтр("ru='Предыдущая операция выбора листов не завершена."
"Завершить?';uk='Попередня операція вибору аркушів не завершена."
"Завершити?'"),РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиСтраниц.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиСтраниц.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиСтраниц.мВариантВыбора          = ВариантВыбора;

	ВыбранноеЗначение = ФормаНастройкиСтраниц.ОткрытьМодально();

	Если ВыбранноеЗначение <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = ВыбранноеЗначение;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
// унифицирована, но актуально только для отчетов с наличием таких многостраничных разделов

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//  процедура унифицирована
Процедура ВывестиНаПечатьЛист(СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
  
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	ПечатнаяФорма = Новый ТабличныйДокумент();

	ТабличноеПоле = ЭлементыФормы[ИмяТабличногоПоля];
	Если ПустаяСтрока(ИмяОбластиТаблПоля) Тогда
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть();
	Иначе
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть(ИмяОбластиТаблПоля);
	КонецЕсли;
	
	ПечатнаяФорма.Вывести(ОбластьПечати);
		
	Если ИмяТабличногоПоля = "ПолеТабличногоДокументаОтчетФССНесчастныйСлучай" Тогда
		РазбитьПечатнуюФорму(ПечатнаяФорма);
		
	Иначе
		мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);
	КонецЕсли;

	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;

//	Если ВидПечати = "ПоказатьБланк" Тогда
//		ПечатнаяФорма.Показать(СокрП(ЭтаФорма.Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
//	ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
//		ПечатнаяФорма.Напечатать();
//	КонецЕсли;

	
//	мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);
		
КонецПроцедуры // ВывестиНаПечатьЛист()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетФССНесчастныйСлучай";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетФССНесчастныйСлучай";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет();
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		
		// Очищаем комментарий редактируемой ячейки
		ТекущаяОбласть.Примечание.Текст = "";

	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетФССНесчастныйСлучай";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетФССНесчастныйСлучай";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя)

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("ОтчетФССНесчастныйСлучай");
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	мОтчетФССНесчастныйСлучай.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить()

	// Очищаем содержимое ячеек поля табличного документа
	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле = ЭлементыФормы[ИмяТекТабличногоПоля];
		ОчиститьТабличноеПоле(ТекТабличноеПоле);

	КонецЦикла;


	// Выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	// Очищаем расшифровку.
	СпП.Очистить();

	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

КонецПроцедуры // Очистить()

Процедура РазбитьПечатнуюФорму(ПечФорма)
	
	ИмяФормы = НСтр("ru='Отчет в ФСС от несч.случая';uk='Звіт у ФСС від нещ.випадку'");
	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = Истина;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	
	Для Сч = 1 По ПечФорма.ВысотаТаблицы Цикл
		
		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		НовТаблДок = Новый ТабличныйДокумент();
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = Истина;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры


// Обрабатывает полученный из формы ФормаНастройкиСтраниц дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//  унифицирована для всех отчетов
Процедура Печать(ВидПечати)

//	ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
    мПечатныеФормы.Очистить();
	
	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = СтрокаУровня1.ВыводНаПечать;

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = СтрокаУровня2.ВыводНаПечать;

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = СтрокаУровня3.ВыводНаПечать;
						Если Пометка = 0 Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

						ВывестиНаПечатьЛист(СтруктураПараметров);
						
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

				ВывестиНаПечатьЛист(СтруктураПараметров);
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

		ВывестиНаПечатьЛист(СтруктураПараметров);
		
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()

// Управляет видимостью страниц основной панели формы.
//
Процедура ПоказатьСтраницыОтчета()

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	ИмеютсяСкрытые      = Ложь;
	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		ПоказатьСтраницу   = СтрокаУровня1.ПоказатьСтраницу;

		Если ПоказатьСтраницу = 0 Тогда
			ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Ложь;
			ИмеютсяСкрытые = Истина;
		Иначе
			ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Истина;

		КонецЕсли; 

	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	КнопкиНастройки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаНастройкаСтраниц;
	ИсходныйТекст   = НСтр("ru='Настройка страниц';uk='Настройка сторінок'");

	КнопкиНастройки.Текст = ИсходныйТекст;

	Если ИмеютсяСкрытые Тогда
		// Выводим в названии кнопки "Настройка страниц" доп. сммвол '*'.
		КнопкиНастройки.Текст = ИсходныйТекст + " (*)";
	КонецЕсли;

КонецПроцедуры // ПоказатьСтраницыОтчета()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить()   Экспорт

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.

		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;

		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();

	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		//вспомогательная переменная, для которой нет именованной ячейки
	//	Если (ИмяТекТабличногоПоля = "ПолеТабличногоДокументаДекларацияПоНДС") Тогда
//			ПоказателиТекущегоЛиста.Вставить("БартерA", БартерA);
//		КонецЕсли;	
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета2005Кв3", ПоказателиОтчета);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	СписокСохранения.Вставить("СохранятьРасшифровку", мСохранятьРасшифровку);
	
	Если мСохранятьРасшифровку = Истина Тогда
		СписокСохранения.Вставить("Расшифровка", СпП);
	КонецЕсли;
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	Модифицированность = Ложь;

	Возврат Истина; 
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
    Перем Расшифровка;

	// восстанавливаем реквизиты отчета
	Организация              = мСохраненныйДок.Организация;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;

	ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета2005Кв3", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	СписокСохранения.Свойство("СохранятьРасшифровку", мСохранятьРасшифровку);
	Если мСохранятьРасшифровку = Неопределено Тогда
		мСохранятьРасшифровку = Истина;
	КонецЕсли;
//	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюНастройка.Кнопки.ПодменюРасшифровка.Кнопки.КнопкаСохранятьРасшифровку.Пометка = мСохранятьРасшифровку;

	СписокСохранения.Свойство("Расшифровка", Расшифровка);
	Если Расшифровка <> Неопределено Тогда
		СпП = Расшифровка;
	КонецЕсли;
	
	УстановитьФорматВывода();
	Расчет();
    	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	ПоказатьСтраницыОтчета();
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

Процедура РассчитатьИтоговыеПоказателиВедомости()
	перем ССЧСумма,СтоимостьРПрод;
	
	ССЧСумма = мВедомость.Области.ССЧ.Значение 
	         + мВедомость.Области.ССЧ2.Значение 
	         + мВедомость.Области.ССЧ3.Значение 
			 + мВедомость.Области.ССЧ4.Значение 
			 + мВедомость.Области.ССЧ5.Значение;
			 
	мВедомость.Области.П3_Сумма.Значение = ССЧСумма;
	
	Если мВедомость.Области.ССЧ.Значение <> 0 Тогда
		мВедомость.Области.П4_1.Значение = (мВедомость.Области.ССЧ.Значение * 100)/ССЧСумма;
	Иначе
		мВедомость.Области.П4_1.Значение = 0;
	КонецЕсли;
	
	Если мВедомость.Области.ССЧ2.Значение <> 0 Тогда
		мВедомость.Области.П4_2.Значение = (мВедомость.Области.ССЧ2.Значение * 100)/ССЧСумма;
	Иначе
		мВедомость.Области.П4_2.Значение = 0;
	КонецЕсли;  
	
	Если мВедомость.Области.ССЧ3.Значение <> 0 Тогда
		мВедомость.Области.П4_3.Значение = (мВедомость.Области.ССЧ3.Значение * 100)/ССЧСумма;
	Иначе
		мВедомость.Области.П4_3.Значение = 0;
	КонецЕсли;              
	
	Если мВедомость.Области.ССЧ4.Значение <> 0 Тогда
		мВедомость.Области.П4_4.Значение = (мВедомость.Области.ССЧ4.Значение * 100)/ССЧСумма;
	Иначе
		мВедомость.Области.П4_4.Значение = 0;
	КонецЕсли;             
	
	Если мВедомость.Области.ССЧ5.Значение <> 0 Тогда
		мВедомость.Области.П4_5.Значение = (мВедомость.Области.ССЧ5.Значение * 100)/ССЧСумма;
	Иначе
		мВедомость.Области.П4_5.Значение = 0;
	КонецЕсли;
	
	// Питома вага обсягу реалізованої продукції 
	СтоимостьРПрод = мВедомость.Области.П5_1.Значение 
	               + мВедомость.Области.П5_2.Значение 
				   + мВедомость.Области.П5_3.Значение 
				   + мВедомость.Области.П5_4.Значение 
				   + мВедомость.Области.П5_5.Значение;
				   
	мВедомость.Области.П5_Сумма.Значение = СтоимостьРПрод;
	
	Если мВедомость.Области.П5_1.Значение <> 0 Тогда
		мВедомость.Области.П6_1.Значение = (мВедомость.Области.П5_1.Значение * 100)/СтоимостьРПрод;
	Иначе
		мВедомость.Области.П6_1.Значение = 0;
	КонецЕсли;
	
	Если мВедомость.Области.П5_2.Значение <> 0 Тогда
		мВедомость.Области.П6_2.Значение = (мВедомость.Области.П5_2.Значение * 100)/СтоимостьРПрод;
	Иначе
		мВедомость.Области.П6_2.Значение = 0;
	КонецЕсли;  
	
	Если мВедомость.Области.П5_3.Значение <> 0 Тогда
		мВедомость.Области.П6_3.Значение = (мВедомость.Области.П5_3.Значение * 100)/СтоимостьРПрод;
	Иначе
		П6_3 = 0;
	КонецЕсли;                       
	
	Если мВедомость.Области.П5_4.Значение <> 0 Тогда
		мВедомость.Области.П6_4.Значение = (мВедомость.Области.П5_4.Значение * 100)/СтоимостьРПрод;
	Иначе
		мВедомость.Области.П6_4.Значение = 0;
	КонецЕсли;                      
	
	Если мВедомость.Области.П5_5.Значение <> 0 Тогда
		мВедомость.Области.П6_5.Значение = (мВедомость.Области.П5_5.Значение * 100)/СтоимостьРПрод;
	Иначе
		мВедомость.Области.П6_5.Значение = 0;
	КонецЕсли;
	
КонецПроцедуры	

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()
	//1. Загальна сума виплат, на які нараховуються страхові внески  (в грн.)
	//І квартал (за місяцями)
	мОтчетФССНесчастныйСлучай.Области.П1Кв.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_1.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_2.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_3.Значение);
	//II квартал (за місяцями) 
	
	мОтчетФССНесчастныйСлучай.Области.П2Кв.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_4.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_5.Значение) 
										            + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_6.Значение);
	//III квартал (за місяцями)     
	мОтчетФССНесчастныйСлучай.Области.П3Кв.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_7.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_8.Значение) 
								                    + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_9.Значение); 
	//IV квартал (за місяцями)       
	мОтчетФССНесчастныйСлучай.Области.П4Кв.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_10.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_11.Значение) 
													+ ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_12.Значение); 
	//Усього з початку року
	мОтчетФССНесчастныйСлучай.Области.ПГод.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П1Кв.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П2Кв.Значение) 
													+ ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П3Кв.Значение) 
													+ ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П4Кв.Значение);
	
	//2. Розрахунок страхових внесків до Фонду (грн.) 
	//нараховано: За звітний період (за місяцями)
	мОтчетФССНесчастныйСлучай.Области.П3.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П3_1.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П3_2.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П3_3.Значение);
	//Разом (2 + 3)
	мОтчетФССНесчастныйСлучай.Области.П4.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П2.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П3.Значение);
	//Нараховано за актами, всього
	мОтчетФССНесчастныйСлучай.Области.П6.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П7.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П8.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П9.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П10.Значение);
	
	//Усього належить до сплати (1 + 4 + 5 + 6 + 11 - 12 - 13)
	мОтчетФССНесчастныйСлучай.Области.П14.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П1.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П4.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П5.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П6.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П11.Значение) 
	                                               - ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П12.Значение)
	                                               - ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П13.Значение);
										  
	//Зараховано витрат за соціальним страхуванням:За звітний період (за місяцями)
	мОтчетФССНесчастныйСлучай.Области.П18.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П18_1.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П18_2.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П18_3.Значение);
	//Разом (17 + 18)
	мОтчетФССНесчастныйСлучай.Области.П19.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П17.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П18.Значение);
												   
	//Перераховано: За звітний період (за місяцями)
	мОтчетФССНесчастныйСлучай.Области.П21.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П21_1.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П21_2.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П21_3.Значение);
	//Разом (20 + 21)
	мОтчетФССНесчастныйСлучай.Области.П22.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П20.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П21.Значение);
	
	//Перераховано за актами
	мОтчетФССНесчастныйСлучай.Области.П23.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П24.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П25.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П26.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П27.Значение);
	
	//Усього зараховано і заплачено (16 + 19 + 22 + 23)
	мОтчетФССНесчастныйСлучай.Области.П28.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П16.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П19.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П22.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П23.Значение);
	
	//Залишок заборгованності на кінець звітного періоду за Фондом
	мОтчетФССНесчастныйСлучай.Области.П15.Значение = Макс(0, ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П28.Значение) 
	                                               - ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П14.Значение)); // Если П28 > П14
	
	//Сума несплачених платежів (14 - 28)
	мОтчетФССНесчастныйСлучай.Области.П29.Значение = Макс(0, ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П14.Значение) 
	                                               - ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П28.Значение)); // Если П14 > П28
	
	
	//4. Фонд оплати праці
	// усього з початку року
	мОтчетФССНесчастныйСлучай.Области.ПФОП_Год.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.ПФОП_1кв.Значение) 
	                                                    + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.ПФОП_2кв.Значение) 
	                                                    + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.ПФОП_3кв.Значение) 
	                                                    + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.ПФОП_4кв.Значение);
	
	//7. Витрати по коштах Фонду з початку року
	//Разом (34 + 35 + 36 + 37)
	//Сума усього
	мОтчетФССНесчастныйСлучай.Области.П38_2.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П34_2.Значение) 
	                                                 + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П35_2.Значение) 
	                                                 + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П36_2.Значение)
													 + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П37_2.Значение);
	
КонецПроцедуры // Расчет()

Процедура РассчитатьСостояниеВзаиморасчетовСФондом()
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "БП") или (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") Тогда
		НужнаяСтатья     = СтрокиДекларации.ФССНесчСлуч_Орг;
		
		СчетФССНесч = ПС.РасчетыПоСтрахованиюОтНесчастныхСлучаев;
		СчетФСС = ПС.РасчетыПоСоциальномуСтрахованию;
		
		СчетРасчСчет1 = ПС.ТекущиеСчетаВНациональнойВалюте;
		СчетРасчСчет2 = ПС.ДругиеСчетаВБанкеВНациональнойВалюте;
		Счет661 = ПС.РасчетыПоЗаработнойПлате;
		
		МассивСчетов = Новый Массив;
		МассивСчетов.Добавить(СчетРасчСчет1);
		МассивСчетов.Добавить(СчетРасчСчет2);
		
		//показатели, расчет которых - это сальдо , то есть остаточные сущности
		//для них - расчет итогов - может быть выполнен только отдельно
		мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
		Итоги = "НачальныйОстатокДт,НачальныйОстатокКт,КонечныйОстатокДт,КонечныйОстатокКт,ОборотКт,КорОборотДт,КорОборотКт";
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Период,Счет,Субконто1,КорСчет", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,"Месяц","656",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Налоги,,, "Организация", Организация);
		
		П1 = СНК(СчетФССНесч,НужныйВидСбора);
		
		П16 = СНД(СчетФССНесч,НужныйВидСбора);
		
	ИначеЕсли (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП")  Тогда
		//состояние взаиморасчетов с Фондом - аналог сальдо счета 656
		ЗапросСуммаНаНачалоГода = Новый Запрос;
		ЗапросСуммаНаНачалоГода.Текст = "
		|ВЫБРАТЬ
		|	СУММА(РезультатОстаток + НеподтвержденнаяСуммаОстаток)	КАК Результат
		|
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Остатки(&НачДата, Организация = &Организация И СтатьяНалоговойДекларации В (&МассивСтатей))
		|
		|";
		
		ЗапросСуммаНаНачалоГода.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
		ЗапросСуммаНаНачалоГода.УстановитьПараметр("Организация",   Организация);
		
		МассивСтатей = Новый Массив;
		МассивСтатей.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССНесчСлуч_Орг);	
		ЗапросСуммаНаНачалоГода.УстановитьПараметр("МассивСтатей",   МассивСтатей);
		
		РезультатЗапроса = ЗапросСуммаНаНачалоГода.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			Если РезультатЗапроса.Результат <> NULL Тогда
				Если РезультатЗапроса.Результат > 0 Тогда
					П1 = РезультатЗапроса.Результат;
				Иначе
					П16 =  - РезультатЗапроса.Результат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	УстановитьЗначениеПоказателя("П1", П1);
	УстановитьЗначениеПоказателя("П16", П16);
КонецПроцедуры

Процедура РассчитатьСуммыЗадолженностиИФОТПоквартально()
	
	МассивКварталов = Новый Массив(3,4);
	
	Для i = 0 по 3 Цикл
		МассивКварталов[2][i] = 0;
		МассивКварталов[1][i] = 0;
	КонецЦикла;
	
	Если  (РегламентированнаяОтчетность.ИДКонфигурации() = "БП") или (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") Тогда
		мБухИтогиЗП = Обработки.БухгалтерскиеИтоги.Создать();
		Итоги = "НачальныйОстатокДт,НачальныйОстатокКт,КонечныйОстатокДт,КонечныйОстатокКт";
		мБухИтогиЗП.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Период,Счет", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,"Месяц","66",,,, "Организация", Организация);
		
		Для НомМес = Месяц (НачалоГода(мДатаНачалаПериодаОтчета)) по Месяц(мДатаКонцаПериодаОтчета) Цикл
			мес = НачалоМесяца( ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), НомМес-1));
			ЗадолженностьЗП = мБухИтогиЗП.ПолучитьИтог("СуммаКонечныйОстатокКт", "Период,Счет",мес, Счет661);
			Задолженность = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Период,Счет,Субконто1",мес, СчетФССНесч, НужныйВидСбора);
			индекс = Цел((НомМес - 1) / 3);
			МассивКварталов[0][индекс] = Задолженность;
			МассивКварталов[1][индекс] = ЗадолженностьЗП;
			
		КонецЦикла;
		
		мБухИтогиЗП = Обработки.БухгалтерскиеИтоги.Создать();
		Итоги = "НачальныйОстатокДт,НачальныйОстатокКт,КонечныйОстатокДт,КонечныйОстатокКт,ОборотКт,КорОборотКт";
		мБухИтогиЗП.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Период,Счет,КорСчет", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,"Месяц","66",,"652,656",, "Организация", Организация);
		
	ИначеЕсли РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП" Тогда
		
		ЗапросЗадолжПоквартально = Новый Запрос;
		ЗапросЗадолжПоквартально.Текст = "
		|Выбрать
		|	СУММА (ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток) 	КАК Результат
		|
		|Из
		|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&НачДата,Организация = &Организация И ПериодВзаиморасчетов <> &НачДата) КАК ВзаиморасчетыСРаботниками
		|
		|";
		
		Для НомМес = Месяц (НачалоГода(мДатаНачалаПериодаОтчета)) по Месяц(мДатаКонцаПериодаОтчета) Цикл
			мес = НачалоМесяца( ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), НомМес-1));
			
			Если(НомМес = 1 ИЛИ НомМес = 2 ИЛИ НомМес = 3) Тогда
				ЗапросЗадолжПоквартально.УстановитьПараметр("НачДата", ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), 3));
			ИначеЕсли(НомМес = 4 ИЛИ НомМес = 5 ИЛИ НомМес = 6)Тогда
				ЗапросЗадолжПоквартально.УстановитьПараметр("НачДата", ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), 6));
			ИначеЕсли(НомМес = 7 ИЛИ НомМес = 8 ИЛИ НомМес = 9)Тогда
				ЗапросЗадолжПоквартально.УстановитьПараметр("НачДата", ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), 9));
			ИначеЕсли(НомМес = 10 ИЛИ НомМес = 11 ИЛИ НомМес = 12)Тогда
				ЗапросЗадолжПоквартально.УстановитьПараметр("НачДата", ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), 12));
			КонецЕсли;
			
			ЗапросЗадолжПоквартально.УстановитьПараметр("Организация",   Организация);
			РезультатЗапроса = ЗапросЗадолжПоквартально.Выполнить().Выбрать();
			
			Пока РезультатЗапроса.Следующий() Цикл
				Если(НомМес = 1 ИЛИ НомМес = 2 ИЛИ НомМес = 3) Тогда
					МассивКварталов[1][0] = РезультатЗапроса.Результат;
				ИначеЕсли(НомМес = 4 ИЛИ НомМес = 5 ИЛИ НомМес = 6) Тогда
					МассивКварталов[1][1] = РезультатЗапроса.Результат;
				ИначеЕсли(НомМес = 7 ИЛИ НомМес = 8 ИЛИ НомМес = 9) Тогда
					МассивКварталов[1][2] = РезультатЗапроса.Результат;
				ИначеЕсли(НомМес = 10 ИЛИ НомМес = 11 ИЛИ НомМес = 12) Тогда
					МассивКварталов[1][3] = РезультатЗапроса.Результат;
				КонецЕсли;		
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

		ЗапросФОТ = Новый Запрос;
		ЗапросФОТ.Текст ="
		|Выбрать
		|	ПериодВзаиморасчетов			КАК Период,
		|	СуммаНачисленийОборот			КАК Результат
		|
		|Из 
		|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Обороты(&Начало, &Конец, Квартал, Организация = &Организация И ВидВзаиморасчетов = &ВидВзаиморасчетов)
		|
		|
		|";
		
		ЗапросФОТ.УстановитьПараметр("Начало", НачалоГода(мДатаНачалаПериодаОтчета));
		ЗапросФОТ.УстановитьПараметр("Конец",  мДатаКонцаПериодаОтчета);
		ЗапросФОТ.УстановитьПараметр("Организация", Организация);
		ЗапросФОТ.УстановитьПараметр("ВидВзаиморасчетов", Перечисления.ВидыВзаиморасчетовСРаботниками.ЗаработнаяПлата);
		РезультатЗапрос = ЗапросФОТ.Выполнить().Выбрать();
		
		Пока РезультатЗапрос.Следующий() Цикл
			НомМес = Месяц(РезультатЗапрос.Период);
			Если(НомМес = 1 ИЛИ НомМес = 2 ИЛИ НомМес = 3) Тогда
				МассивКварталов[2][0] = МассивКварталов[2][0] + РезультатЗапрос.Результат;
			ИначеЕсли(НомМес = 4 ИЛИ НомМес = 5 ИЛИ НомМес = 6) Тогда
				МассивКварталов[2][1] = МассивКварталов[2][1] + РезультатЗапрос.Результат;
			ИначеЕсли(НомМес = 7 ИЛИ НомМес = 8 ИЛИ НомМес = 9) Тогда
				МассивКварталов[2][2] = МассивКварталов[2][2] + РезультатЗапрос.Результат;
			ИначеЕсли(НомМес = 10 ИЛИ НомМес = 11 ИЛИ НомМес = 12) Тогда
				МассивКварталов[2][3] = МассивКварталов[2][3] + РезультатЗапрос.Результат;
			КонецЕсли;
		КонецЦикла;
	
	Для Сч = 0 по 3 Цикл  
		
		ИмяЯчейки = "ПДолг_" + Строка(Сч + 1) + "Кв";
		Если МассивКварталов[1][Сч] <> Неопределено Тогда
			УстановитьЗначениеПоказателя(ИмяЯчейки,МассивКварталов[1][Сч]); 
		КонецЕсли;	
		
		ИмяЯчейки = "ПФОП_" + Строка(Сч + 1) + "Кв";
		Если МассивКварталов[1][Сч] <> Неопределено Тогда
			УстановитьЗначениеПоказателя(ИмяЯчейки,МассивКварталов[2][Сч]); 
		КонецЕсли;	 
	КонецЦикла; 
	
КонецПроцедуры

Процедура РассчитатьЗачтенныеПеречисленныеИПрочиеСуммы()
	Перем П2 , П20,ИтогЗачтено;	
	П2 =0; П20 = 0;ИтогЗачтено = 0;
	
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "БП") или (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") Тогда
		мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();
		ИтогиРС = "ОборотДт, ОборотКт,КорОборотДт, КорОборотКт";
		
		МассивСубконто = Новый Массив;
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Налоги);
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций); 
		
		//задать периодичность расчета итогов - месяц
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Период,Счет,Субконто1,Субконто2,КорСчет", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,"Месяц", "656",МассивСубконто,МассивСчетов,, "Организация", Организация);
		
		//вероятно, на будущее два цикла объединить в один
		
		Для НомМес = Месяц (НачалоГода(мДатаНачалаПериодаОтчета)) по (Месяц(мДатаНачалаПериодаОтчета)-1) Цикл
			мес = НачалоМесяца( ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), НомМес - 1));
			П2 = П2 + мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Период,Счет,Субконто1,Субконто2",мес, СчетФССНесч, НужныйВидСбора,НужнаяСтатья);
			Перечислено = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто1,Субконто2",мес, СчетФССНесч, НужныйВидСбора,НужнаяСтатья);
			П20 = П20 + Перечислено;
			ИтогДт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Период,Счет,Субконто1,Субконто2",мес, СчетФССНесч, НужныйВидСбора,НужнаяСтатья);
			ИтогЗачтено = ИтогЗачтено + ОкруглитьЧислоПоФормату(ИтогДт) - ОкруглитьЧислопоФормату(Перечислено);
		КонецЦикла;
		
		УстановитьЗначениеПоказателя("П2", П2);
		УстановитьЗначениеПоказателя("П20", П20);
		УстановитьЗначениеПоказателя("П17", ИтогЗачтено);
		
		Для i = 0 по 2 Цикл
			мес = НачалоМесяца( ДобавитьМесяц(мДатаНачалаПериодаОтчета, i));
			ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Период,Счет,Субконто1,Субконто2",мес, СчетФССНесч, НужныйВидСбора,НужнаяСтатья);
			ИмяЯчейкиКт = "П3_"+ Строка(i + 1);
			УстановитьЗначениеПоказателя(ИмяЯчейкиКт, ИтогКт);
			ИтогДтКорРасчСчет = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто1,Субконто2",мес, СчетФССНесч, НужныйВидСбора,НужнаяСтатья);
			ИмяЯчейкиДтКорРасчСчет = "П21_"+ Строка(i + 1);
			УстановитьЗначениеПоказателя(ИмяЯчейкиДтКорРасчСчет, ИтогДтКорРасчСчет);
			ИтогДт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Период,Счет,Субконто1,Субконто2",мес, СчетФССНесч, НужныйВидСбора,НужнаяСтатья);
			ИтогЗачтено = ОкруглитьЧислопоФормату(ИтогДт) - ОкруглитьЧислоПоФормату(ИтогДтКорРасчСчет);
			ИмяЯчейкиДт = "П18_"+ Строка(i + 1);
			УстановитьЗначениеПоказателя(ИмяЯчейкиДт, ИтогЗачтено);
		КонецЦикла;
		
		// показатели в целом за квартал
		мБухИтогиРСКв = Обработки.БухгалтерскиеИтоги.Создать();
		ИтогиРС = "ОборотДт, ОборотКт,КорОборотДт, КорОборотКт";
		
		мБухИтогиРСКв.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет,Субконто1,Субконто2,КорСчет", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,, "656",МассивСубконто,МассивСчетов,, "Организация", Организация);
		
		
		// перечислено на расчетный счет
		П11 = мБухИтогиРСКв.ПолучитьИтог("СуммаКорОборотКт", "Счет,Субконто1",, СчетФССНесч, НужныйВидСбора);
		УстановитьЗначениеПоказателя("П11", П11);
		
		//списано задолженности
		//	Перечислено = мБухИтогиРСКв.ПолучитьИтог("СуммаКорОборотДт", "Счет,Субконто1",, СчетФССНесч, НужныйВидСбора));
		//	Списано = ОкруглитьЧислоПоФормату(мБухИтогиРСКв.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто1",, СчетФССНесч, НужныйВидСбора)))
		//	        - ОкруглитьЧислоПоФормату(Перечислено);
		
		//	П12 = Списано;		
		//теперь обороты только за весь период в целом и, как правило, только по второму субконто
		//не принято к зачету
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_НеПринятоКЗачет;
		ИтогКт = мБухИтогиРСКв.ПолучитьИтог("СуммаОборотКт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
		УстановитьЗначениеПоказателя("П7", ИтогКт);	
		
		//не принято к зачету
		ИтогДт = мБухИтогиРСКв.ПолучитьИтог("СуммаКорОборотДт", "Счет,Субконто2", СчетФССНесч,НужнаяСтатья);
		УстановитьЗначениеПоказателя("П24", ИтогДт);
		
		//доначисленные суммы взносов
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ДоначислСамост;
		ИтогКт = мБухИтогиРСКв.ПолучитьИтог("СуммаОборотКт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
		УстановитьЗначениеПоказателя("П8", ИтогКт);
		
		ИтогДт = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет,Субконто2", СчетФССНесч,НужнаяСтатья);
		УстановитьЗначениеПоказателя("П25", ИтогДт);
		
		//пеня
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_Пеня;
		ИтогКт = мБухИтогиРСКв.ПолучитьИтог("СуммаОборотКт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
		УстановитьЗначениеПоказателя("П9", ИтогКт);	
		
		ИтогДт = мБухИтогиРСКв.ПолучитьИтог("СуммаКорОборотДт", "Счет,Субконто2", СчетФССНесч,НужнаяСтатья);
		УстановитьЗначениеПоказателя("П26", ИтогДт);
		
		//штраф
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_Штраф;
		ИтогКт = мБухИтогиРСКв.ПолучитьИтог("СуммаОборотКт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
		УстановитьЗначениеПоказателя("П10", ИтогКт);	
		
		ИтогДт = мБухИтогиРСКв.ПолучитьИтог("СуммаКорОборотДт", "Счет,Субконто2", СчетФССНесч,НужнаяСтатья);
		УстановитьЗначениеПоказателя("П27", ИтогДт);
		
		// расчет суммы страховых отчислений, срок выплаты которых не наступил (текущая задолженность)
		Если СКК(СчетФССНесч) <> 0 Тогда
			П32 = КО(СчетФССНесч)- (ОБ(СчетРасчСчет1) + ОБ(СчетРасчСчет2));
		Иначе
			П32 = 0;
		КонецЕсли;
		
		// поле 33  - взять как начальное кредитовое сальдо счета 656 на начало последнего месяца отчетного квартала
		П33 = СКК(СчетФССНесч) - (ОБ(СчетРасчСчет1) + ОБ(СчетРасчСчет2)) - П32;
		
		УстановитьЗначениеПоказателя("П32", П32);
		УстановитьЗначениеПоказателя("П33", П33);

		
	ИначеЕсли (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП") Тогда
		
		ЗапросНачисленоПеречислено = Новый Запрос;
		ЗапросНачисленоПеречислено.Текст = "
		|ВЫБРАТЬ
		|	НалоговыйПериод,
		|	СтатьяНалоговойДекларации,
		|	РезультатПриход					КАК Начислено,
		|	РезультатРасход					КАК УплаченоПодтверждено,
		|	НеподтвержденнаяСуммаРасход	    КАК УплаченоНеПодтверждено
		|	
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Обороты(&Начало, &Конец, КВАРТАЛ, СтатьяНалоговойДекларации В (&МассивСтатей) И Организация = &Организация)	
		|";
		
		ЗапросНачисленоПеречислено.УстановитьПараметр("Начало", НачалоГода(мДатаНачалаПериодаОтчета));
		ЗапросНачисленоПеречислено.УстановитьПараметр("Конец" , мДатаКонцаПериодаОтчета);
		ЗапросНачисленоПеречислено.УстановитьПараметр("МассивСтатей", МассивСтатей);
		ЗапросНачисленоПеречислено.УстановитьПараметр("Организация", Организация);
		
		Результат = ЗапросНачисленоПеречислено.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			i = 0;
			Если Месяц(Результат.НалоговыйПериод) < Месяц(мДатаНачалаПериодаОтчета) Тогда
				П2 	= П2  + Результат.Начислено;
				П20 = П20 + Результат.УплаченоПодтверждено + Результат.УплаченоНеПодтверждено;
				
				//первый месяц	
			ИначеЕсли Месяц(Результат.НалоговыйПериод) = Месяц(мДатаНачалаПериодаОтчета) Тогда
				П3_1 	= Результат.Начислено;
				П21_1 	= Результат.УплаченоПодтверждено + Результат.УплаченоНеПодтверждено;;
				
				УстановитьЗначениеПоказателя("П3_1", П3_1);
				УстановитьЗначениеПоказателя("П21_1", П21_1);
				
				//третий месяц	
			ИначеЕсли Месяц(Результат.НалоговыйПериод) = Месяц(мДатаКонцаПериодаОтчета)	 Тогда
				П3_3 = Результат.Начислено;
				П21_3 = Результат.УплаченоПодтверждено + Результат.УплаченоНеПодтверждено;
				
				УстановитьЗначениеПоказателя("П3_3", П3_3);
				УстановитьЗначениеПоказателя("П21_3", П21_3);
				//второй месяц	
			Иначе	
				П3_2 = Результат.Начислено;
				П21_2 = Результат.УплаченоПодтверждено + Результат.УплаченоНеПодтверждено;
				
				УстановитьЗначениеПоказателя("П3_2", П3_2);
				УстановитьЗначениеПоказателя("П21_2", П21_2);
			КонецЕсли;	
			i = i + 1;	
		КонецЦикла;
		
		УстановитьЗначениеПоказателя("П2", П2);
		УстановитьЗначениеПоказателя("П20", П20);
		
		П17 = 0;
		
		//расчет зачтенных сумм
		ЗапросЗачтено = Новый Запрос;
		ЗапросЗачтено.Текст = "
		|Выбрать
		|	Сумма(Результат) Как Результат,
		|   ПериодРегистрации
		|
		|Из
		|	РегистрРасчета.ОтражениеЗарплатыОрганизацийВРеглУчете
		|
		|Где
		|	ВидРасчета = &ВидРасчета
		|  И
		|   СчетДТ = &Счет656
		|  И
		|   Организация = &Организация
		|  И
		|   ПериодРегистрации МЕЖДУ &ДатаНачала И &ДатаКонца
		|
		|Сгруппировать по
		|	ПериодРегистрации
		|";
		
		ЗапросЗачтено.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ОтражениеЗарплатыОрганизаций.Начисление);
		ЗапросЗачтено.УстановитьПараметр("Счет656", ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев);
		ЗапросЗачтено.УстановитьПараметр("Организация", Организация);
		ЗапросЗачтено.УстановитьПараметр("ДатаНачала", НачалоГода(мДатаНачалаПериодаОтчета));
		ЗапросЗачтено.УстановитьПараметр("ДатаКонца", мДатаКонцаПериодаОтчета);
		
		РезультатЗапроса = ЗапросЗачтено.Выполнить().Выбрать();
		Пока РезультатЗапроса.Следующий() Цикл
			Если Месяц(РезультатЗапроса.ПериодРегистрации) < Месяц(мДатаНачалаПериодаОтчета) Тогда
				П17 = П17 + РезультатЗапроса.Результат;
				//первый месяц	
			ИначеЕсли Месяц(РезультатЗапроса.ПериодРегистрации) = Месяц(мДатаНачалаПериодаОтчета) Тогда
				П18_1 	= РезультатЗапроса.Результат;
				УстановитьЗначениеПоказателя("П18_1", П18_1);
				//третий месяц	
			ИначеЕсли Месяц(РезультатЗапроса.ПериодРегистрации) = Месяц(мДатаКонцаПериодаОтчета)	 Тогда
				П18_3 	= РезультатЗапроса.Результат;
				УстановитьЗначениеПоказателя("П18_3", П18_3);
				//второй месяц	
			Иначе	
				П18_2 	= РезультатЗапроса.Результат;
				УстановитьЗначениеПоказателя("П18_2", П18_2);
			КонецЕсли;	
		КонецЦикла;
		УстановитьЗначениеПоказателя("П17", П17);
		
		// расчет суммы страховых отчислений, срок выплаты которых не наступил (текущая задолженность)
		П32 = 0;
		УстановитьЗначениеПоказателя("П32", П32);
		
		// поле 33  - взять как начальное кредитовое сальдо счета 656 на начало последнего месяца отчетного квартала
		П33 = 0;
		УстановитьЗначениеПоказателя("П33", П33);

		
	КонецЕсли
	
КонецПроцедуры

Процедура РассчитатьсуммыРасходовПоСтрахованию()
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "БП") или (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") Тогда
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ВремНетрудосп;
		ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
		УстановитьЗначениеПоказателя("П34_2", ИтогКт);	
		
		//на похороны потерпевшего
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_Погребение;
		ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
		УстановитьЗначениеПоказателя("П35_2", ИтогКт);	
		
		//так как значение в поле 37_2 накапливается, перед занесением первого значения обнулим поле
		УстановитьЗначениеПоказателя("П37_2", 0);
		
		//в случае утраты профпригодности
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ОднПомПрофПриг;
		ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
		//	УстановитьЗначениеПоказателя("П36_2", ИтогКт);	
		УстановитьЗначениеПоказателя("П37_2", мОтчетФССНесчастныйСлучай.Области["П37_2"].Значение + ИтогКт);
		
		//ежемесячная помощь в случае утраты профпригодности
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ЕжемесПомощь;
		ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
		//	УстановитьЗначениеПоказателя("П37_2", ИтогКт);
		УстановитьЗначениеПоказателя("П37_2", мОтчетФССНесчастныйСлучай.Области["П37_2"].Значение + ИтогКт);
		
		//за моральный ущерб	
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_Ущерб;
		ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
		//	УстановитьЗначениеПоказателя("П38_2", ИтогКт);
		УстановитьЗначениеПоказателя("П37_2", мОтчетФССНесчастныйСлучай.Области["П37_2"].Значение + ИтогКт);
		
		//при переводе на более легкую работу	
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ЛегкРабота;
		ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
		//  УстановитьЗначениеПоказателя("П39_2", ИтогКт);
		УстановитьЗначениеПоказателя("П36_2", ИтогКт);
		
		//за профреабилитация	
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ПрофРеабилит;
		ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
		//	УстановитьЗначениеПоказателя("П40_2", ИтогКт);
		УстановитьЗначениеПоказателя("П37_2", мОтчетФССНесчастныйСлучай.Области["П37_2"].Значение + ИтогКт);
		
		//за медицинская и социальная помощь	
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_МедПомощь;
		ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
		//	УстановитьЗначениеПоказателя("П41_2", ИтогКт);
		УстановитьЗначениеПоказателя("П37_2", мОтчетФССНесчастныйСлучай.Области["П37_2"].Значение + ИтогКт);
		
		//одноразовая помощь в случае смерти	
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ОднПомСмерть;
		ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
		//	УстановитьЗначениеПоказателя("П42_2", ИтогКт);
		УстановитьЗначениеПоказателя("П37_2", мОтчетФССНесчастныйСлучай.Области["П37_2"].Значение + ИтогКт);
		
		//ежемесячная помощь в случае смерти
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ЕжемесПомСмерть;
		ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
		//	УстановитьЗначениеПоказателя("П43_2", ИтогКт);
		УстановитьЗначениеПоказателя("П37_2", мОтчетФССНесчастныйСлучай.Области["П37_2"].Значение + ИтогКт);
	ИначеЕсли (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП") Тогда
		ЗапросРасходыПоСтрахованию = Новый Запрос;
		ЗапросРасходыПоСтрахованию.Текст = "
		|Выбрать
		|	Сумма(Результат)	КАК Результат
		|
		|
		|
		|
		|Из
		|	РегистрРасчета.ОтражениеЗарплатыОрганизацийВРеглУчете
		|
		|Где
		|	ВидРасчета = &ВидРасчета
		|  И
		|   Организация = &Организация
		|  И
		|   ПериодРегистрации МЕЖДУ &Начало и &Конец
		|  И
		|	СчетДТ = &СчетДТ
		|
		|  И СубконтоДт2 = &НужнаяСтатья
		|";
		
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("Организация", Организация);
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("Начало", мДатаНачалаПериодаОтчета);
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("Конец", мДатаКонцаПериодаОтчета);
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("СчетДТ", ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев);
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ОтражениеЗарплатыОрганизаций.Начисление);
		
		//Расходы по страхованию - только по второму субконто
		//временная утрата трудоспособности
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ВремНетрудосп;
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("НужнаяСтатья", НужнаяСтатья);
		РезультатЗапроса = ЗапросРасходыПоСтрахованию.Выполнить().Выбрать();
		ИтогКт = 0;
		Если РезультатЗапроса.Следующий() И РезультатЗапроса.Результат <> NULL  Тогда
			ИтогКт = РезультатЗапроса.Результат;
		КонецЕсли;
		//ИтогКт = 0;//мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
		УстановитьЗначениеПоказателя("П34_2", ИтогКт);	
		
		//на похороны потерпевшего
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_Погребение;
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("НужнаяСтатья", НужнаяСтатья);
		РезультатЗапроса = ЗапросРасходыПоСтрахованию.Выполнить().Выбрать();
		ИтогКт = 0;
		Если РезультатЗапроса.Следующий() И РезультатЗапроса.Результат <> NULL  Тогда
			ИтогКт = РезультатЗапроса.Результат;
		КонецЕсли;
		//ИтогКт = 0;//мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
		УстановитьЗначениеПоказателя("П35_2", ИтогКт);	
		
		//так как значение в поле 37_2 накапливается, перед занесением первого значения обнулим поле
		УстановитьЗначениеПоказателя("П37_2", 0);
		
		//в случае утраты профпригодности
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ОднПомПрофПриг;
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("НужнаяСтатья", НужнаяСтатья);
		РезультатЗапроса = ЗапросРасходыПоСтрахованию.Выполнить().Выбрать();
		ИтогКт = 0;
		Если РезультатЗапроса.Следующий() И РезультатЗапроса.Результат <> NULL  Тогда
			ИтогКт = РезультатЗапроса.Результат;
		КонецЕсли;
		УстановитьЗначениеПоказателя("П37_2", мОтчетФССНесчастныйСлучай.Области["П37_2"].Значение + ИтогКт);
		
		//ежемесячная помощь в случае утраты профпригодности
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ЕжемесПомощь;
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("НужнаяСтатья", НужнаяСтатья);
		РезультатЗапроса = ЗапросРасходыПоСтрахованию.Выполнить().Выбрать();
		ИтогКт = 0;
		Если РезультатЗапроса.Следующий() И РезультатЗапроса.Результат <> NULL  Тогда
			ИтогКт = РезультатЗапроса.Результат;
		КонецЕсли;
		УстановитьЗначениеПоказателя("П37_2", мОтчетФССНесчастныйСлучай.Области["П37_2"].Значение + ИтогКт);
		
		//за моральный ущерб	
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_Ущерб;
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("НужнаяСтатья", НужнаяСтатья);
		РезультатЗапроса = ЗапросРасходыПоСтрахованию.Выполнить().Выбрать();
		ИтогКт = 0;
		Если РезультатЗапроса.Следующий() И РезультатЗапроса.Результат <> NULL  Тогда
			ИтогКт = РезультатЗапроса.Результат;
		КонецЕсли;
		УстановитьЗначениеПоказателя("П37_2", мОтчетФССНесчастныйСлучай.Области["П37_2"].Значение + ИтогКт);
		
		//при переводе на более легкую работу	
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ЛегкРабота;
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("ВидРасчета", НужнаяСтатья);
		РезультатЗапроса = ЗапросРасходыПоСтрахованию.Выполнить().Выбрать();
		ИтогКт = 0;
		Если РезультатЗапроса.Следующий() И РезультатЗапроса.Результат <> NULL  Тогда
			ИтогКт = РезультатЗапроса.Результат;
		КонецЕсли;
		
		УстановитьЗначениеПоказателя("П36_2", ИтогКт);
		
		//за профреабилитация	
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ПрофРеабилит;
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("ВидРасчета", НужнаяСтатья);
		РезультатЗапроса = ЗапросРасходыПоСтрахованию.Выполнить().Выбрать();
		ИтогКт = 0;
		Если РезультатЗапроса.Следующий() И РезультатЗапроса.Результат <> NULL  Тогда
			ИтогКт = РезультатЗапроса.Результат;
		КонецЕсли;
		УстановитьЗначениеПоказателя("П37_2", мОтчетФССНесчастныйСлучай.Области["П37_2"].Значение + ИтогКт);
		
		//за медицинская и социальная помощь	
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_МедПомощь;
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("ВидРасчета", НужнаяСтатья);
		РезультатЗапроса = ЗапросРасходыПоСтрахованию.Выполнить().Выбрать();
		ИтогКт = 0;
		Если РезультатЗапроса.Следующий() И РезультатЗапроса.Результат <> NULL  Тогда
			ИтогКт = РезультатЗапроса.Результат;
		КонецЕсли;
		УстановитьЗначениеПоказателя("П37_2", мОтчетФССНесчастныйСлучай.Области["П37_2"].Значение + ИтогКт);
		
		//одноразовая помощь в случае смерти	
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ОднПомСмерть;
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("ВидРасчета", НужнаяСтатья);
		РезультатЗапроса = ЗапросРасходыПоСтрахованию.Выполнить().Выбрать();
		ИтогКт = 0;
		Если РезультатЗапроса.Следующий() И РезультатЗапроса.Результат <> NULL  Тогда
			ИтогКт = РезультатЗапроса.Результат;
		КонецЕсли;
		УстановитьЗначениеПоказателя("П37_2", мОтчетФССНесчастныйСлучай.Области["П37_2"].Значение + ИтогКт);
		
		//ежемесячная помощь в случае смерти
		НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ЕжемесПомСмерть;
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("ВидРасчета", НужнаяСтатья);
		РезультатЗапроса = ЗапросРасходыПоСтрахованию.Выполнить().Выбрать();
		ИтогКт = 0;
		Если РезультатЗапроса.Следующий() И РезультатЗапроса.Результат <> NULL  Тогда
			ИтогКт = РезультатЗапроса.Результат;
		КонецЕсли;
		УстановитьЗначениеПоказателя("П37_2", мОтчетФССНесчастныйСлучай.Области["П37_2"].Значение + ИтогКт);
		
	КонецЕсли;
КонецПроцедуры

// Функция рассчитывает кредитовый оборот счета, указанного в качестве
// аргумента
Функция КрО(Счет)

	Перем Итог;

	Итог = мБухгИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // КО()

// Функция вычисляет перекрестный оборот в дебет счета, указанного в качестве 
// первого параметра функции, с кредита счета, указанного в качестве второго 
// параметра. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  СчетД        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот в дебет счета;
//  СчетК        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот с кредита счета.
//
// Возвращаемое значение:
//  Число        - сумма перекрестного оборота.
//
Функция ОБДт_Кт(СчетД, СчетК)

	Перем Итог;

	Итог = мБухгИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);

	Возврат Итог;

КонецФункции // ОБ()


Процедура ЗаполнитьВедомость()
	//инициализация	
	
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "БП") или (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") Тогда
		
		Счет70_1    = ПС.ДоходОтРеализацииГотовойПродукции;
		Счет70_2    = ПС.ДоходОтРеализацииТоваров;
		Счет70_3    = ПС.ДоходОтРеализацииРаботИУслуг;
		Счет64_1_2  = ПС.РасчетыПоНДС;
		Счет64_1_6  = ПС.РасчетыПоАкцизу;
		Счет64_3    = ПС.НалоговыеОбязательства;
		
		// Бухгалтерский итоги по счетам
		мБухгИтоги = Обработки.БухгалтерскиеИтоги.Создать();
		
		
		Итоги = "ОборотДт, ОборотКт,КорОборотДт, КорОборотКт";
		
		// Бухгалтерские итоги по счетам, без аналитики
		мБухгИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет,КорСчет", НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета, , , , , , "Организация", Организация);
		//Бухгалтерские итоги за аналогичный период прошлого года
		
		//Доход (выручка) от реализации продукции (работ, услуг)
		П5_1 = КрО(Счет70_1) + КрО(Счет70_2) + КрО(Счет70_3) 
		- ОБДт_Кт(Счет70_1,Счет70_1) - ОБДт_Кт(Счет70_2,Счет70_2) - ОБДт_Кт(Счет70_3,Счет70_3)
		- ОБДт_Кт(Счет64_1_2,Счет70_1) - ОБДт_Кт(Счет64_1_2,Счет70_2) - ОБДт_Кт(Счет64_1_2,Счет70_3)
		- ОБДт_Кт(Счет64_3,Счет70_1) - ОБДт_Кт(Счет64_3,Счет70_2) - ОБДт_Кт(Счет64_3,Счет70_3)
		- ОБДт_Кт(Счет64_1_6,Счет70_1) - ОБДт_Кт(Счет64_1_6,Счет70_2) - ОБДт_Кт(Счет64_1_6,Счет70_3);
		
		мВедомость.Области.П5_1.Значение = П5_1;
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки( ЭтаФорма,"П5_1", "Показник ""Обсяг реалізованої продукції, робіт, послуг (без ПДВ, акцизу)""",	"+", "!КО",КрО(Счет70_1), Счет70_1);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки( ЭтаФорма,"П5_1", "",	"+", "!КО",КрО(Счет70_2),Счет70_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки( ЭтаФорма,"П5_1", "",	"+", "!КО",КрО(Счет70_3),Счет70_3);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки( ЭтаФорма,"П5_1", "",	"-", "!ОБ",ОБДт_Кт(Счет70_1,Счет70_1),Счет70_1, Счет70_1);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки( ЭтаФорма,"П5_1", "",	"-", "!ОБ",ОБДт_Кт(Счет70_2,Счет70_2),Счет70_2, Счет70_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки( ЭтаФорма,"П5_1", "",	"-", "!ОБ",ОБДт_Кт(Счет70_3,Счет70_3),Счет70_3, Счет70_3);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки( ЭтаФорма,"П5_1", "",	"-", "!ОБ",ОБДт_Кт(Счет64_1_2,Счет70_1),Счет64_1_2, Счет70_1);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки( ЭтаФорма,"П5_1", "",	"-", "!ОБ",ОБДт_Кт(Счет64_1_2,Счет70_2),Счет64_1_2, Счет70_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки( ЭтаФорма,"П5_1", "",	"-", "!ОБ",ОБДт_Кт(Счет64_1_2,Счет70_3),Счет64_1_2, Счет70_3);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки( ЭтаФорма,"П5_1", "",	"-", "!ОБ",ОБДт_Кт(Счет64_3,Счет70_1),Счет64_3, Счет70_1);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки( ЭтаФорма,"П5_1", "",	"-", "!ОБ",ОБДт_Кт(Счет64_3,Счет70_2),Счет64_3, Счет70_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки( ЭтаФорма,"П5_1", "",	"-", "!ОБ",ОБДт_Кт(Счет64_3,Счет70_3),Счет64_3, Счет70_3);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки( ЭтаФорма,"П5_1", "",	"-", "!ОБ",ОБДт_Кт(Счет64_1_6,Счет70_1),Счет64_1_6, Счет70_1);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки( ЭтаФорма,"П5_1", "",	"-", "!ОБ",ОБДт_Кт(Счет64_1_6,Счет70_2),Счет64_1_6, Счет70_2);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки( ЭтаФорма,"П5_1", "",	"-", "!ОБ",ОБДт_Кт(Счет64_1_6,Счет70_3),Счет64_1_6, Счет70_3);
		
	КонецЕсли;
	
	
	ТаблСреднеспЧисленности  = ПроведениеРасчетов.ПолучитьСреднююЧисленность(НачалоГода(мДатаНачалаПериодаОтчета), КонецКвартала(мДатаКонцаПериодаОтчета), "ССЧ", "КВАРТАЛСНАЧАЛАГОДА", Организация, "Штат"); 
	ССЧ = ОкруглитьССЧ(ТаблСреднеспЧисленности[0].Средняя);
	мВедомость.Области.ССЧ.Значение = ССЧ;
	
	ЗаполнитьСведенияОбОрганизации();
	
	РассчитатьИтоговыеПоказателиВедомости();
	
КонецПроцедуры

Процедура ЗаполнитьОтчетФССНесчастныйСлучай()
	НужныйВидСбора   = Справочники.Налоги.СоцстрахНесчФОТ;
	СтрокиДекларации = Справочники.СтатьиНалоговыхДеклараций;
	
	
	НужнаяСтатья =  Справочники.СтатьиНалоговыхДеклараций.ФССНесчСлуч_Орг;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|ВзаиморасчетыПоВзносам.ПериодВзаиморасчетов            КАК Месяц,
	|ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации  КАК СтатьяНалоговойДекларации,
	|СУММА(ВзаиморасчетыПоВзносам.БазаВзносаПриход)  КАК БазаОборот
	|ИЗ РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.ОстаткиИОбороты(&НачДата,&КонДата) КАК ВзаиморасчетыПоВзносам
	|
	|ГДЕ 
	|	ВзаиморасчетыПоВзносам.Организация = &парамОрганизация
	|    И ВЫБОР КОГДА ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации = &парамСтатья  ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыПоВзносам.ПериодВзаиморасчетов,
	|	ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации
	|";
	
	Запрос = Новый Запрос ();
	Запрос.УстановитьПараметр("НачДата", НачалоГода(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонДата" ,мДатаКонцаПериодаОтчета);
	
	Запрос.УстановитьПараметр("парамСтатья", НужнаяСтатья);
	Запрос.УстановитьПараметр("парамОрганизация",  Организация);
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
	
	Отбор = Новый Структура;
	Отбор.Вставить("СтатьяНалоговойДекларации",НужнаяСтатья);
	
	i = 0;
	Для мес = Месяц (НачалоГода(мДатаНачалаПериодаОтчета)) по Месяц(мДатаКонцаПериодаОтчета) Цикл
		Если (i <> 0) Тогда
			Отбор.Удалить("Месяц");
		КонецЕсли;	
		Отбор.Вставить("Месяц",ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета),i));
		// результатом поиска всегда будет только одна строка, не массив
		НайденныеСтроки = ТаблицаРезультатов.НайтиСтроки (Отбор);
		
		Если (НайденныеСтроки.Количество() = 1 ) Тогда
			ИмяЯчейки = "Пмес_"+ Строка(мес);
			УстановитьЗначениеПоказателя(ИмяЯчейки, НайденныеСтроки[0].БазаОборот);
		КонецЕсли;
		i = i + 1;
	КонецЦикла;
	
	РассчитатьСостояниеВзаиморасчетовСФондом();
	
	РассчитатьСуммыЗадолженностиИФОТПоквартально();
	
	РассчитатьЗачтенныеПеречисленныеИПрочиеСуммы();
	
	// расчет среднесписочной численности
	Квартал = 1;
	НачДата = НачалоГода(мДатаНачалаПериодаОтчета);
	КонДата = ДобавитьМесяц(КонецМесяца(НачДата),2);
	Пока Истина Цикл
		Если КонДата <= мДатаКонцаПериодаОтчета Тогда
			ЧисленностьССЧ = ПроведениеРасчетов.ПолучитьСреднююЧисленность(НачДата, КонДата, "ССЧ", "КВАРТАЛ", Организация, "");
			ИмяЯчейки = "ПСер_"+Строка(Квартал)+"Кв";
			Для каждого стр  Из ЧисленностьССЧ Цикл
				//Округляем значение ССЧ по новым правилам округления: Наказ Державного комітету статистики України від 28 вересня 2005 року N 286 
				стр.Средняя = ОкруглитьССЧ(стр.Средняя);
				УстановитьЗначениеПоказателя(ИмяЯчейки, стр.Средняя);
			КонецЦикла;
			Квартал = Квартал+1;
			//НачДата = ДобавитьМесяц(НачДата,3);
			КонДата = ДобавитьМесяц(КонДата,3);
		Иначе
			прервать;
		КонецЕсли;
		
	КонецЦикла;
	//Расходы по страхованию - только по второму субконто
	//временная утрата трудоспособности
	РассчитатьсуммыРасходовПоСтрахованию();
	
	ЗаполнитьСведенияОбОрганизации();
	
	Расчет();
	
КонецПроцедуры	

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто()  Экспорт

	////////
	// *** Здесь необходимо написать алгоритм заполнения отчета.***
	//
	// Для присвоения показателям отчета вычисленного значения необходимо
	// использовать процедуру
	//
	//     УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя).
	//
	////////
// Инициализация

   ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
   ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
   
   Если ИмяТекущейСтраницыПанели = "ОтчетФССНесчастныйСлучай" Тогда
	   ЗаполнитьОтчетФССНесчастныйСлучай();
   ИначеЕсли ИмяТекущейСтраницыПанели = "Ведомость" Тогда
	   ЗаполнитьВедомость();	
   КонецЕсли;
   
   УстановитьДатуПодписи();
   Модифицированность = Истина;

КонецПроцедуры // ЗаполнитьАвто()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетФССНесчастныйСлучай";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вычисляется автоматически';uk='Значення обчислюється автоматично'");
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");
		КонецЕсли;

		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки("СоставПоказателей2005Кв3");

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Печатать сразу';uk='Друкувати відразу'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Показать бланк';uk='Показати бланк'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЛинияСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЛинияПусто = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);

	мМассивТиповЛиний = Новый Массив();
	мМассивТиповЛиний.Вставить(0, ЛинияПусто);
	мМассивТиповЛиний.Вставить(1, ЛинияСнизу);

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	Перем ИсходноеКоличествоСтрокГруппы;

	ЭтаФорма.АвтоЗаголовок = Ложь;

	мОтчетФССНесчастныйСлучай = ЭлементыФормы.ПолеТабличногоДокументаОтчетФССНесчастныйСлучай;
	мВедомость                = ЭлементыФормы.ПолеТабличногоДокументаВедомость; 
	ТекТабличноеПоле = мОтчетФССНесчастныйСлучай;
	
	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 2;

			УстановитьФорматВывода();
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			//НомерКвартала
            //ЭлементыФормы.ОсновнаяПанель.Страницы.Ведомость.Видимость
			ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();
	мОтчетФССНесчастныйСлучай.ТолькоПросмотр = Истина;

	ставка = 0;
	
	ЗаполнитьСведенияОбОрганизации();
    	
	УстановитьЦветФонаЯчейки(,,"ОтчетФССНесчастныйСлучай");

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность = Истина Тогда

		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения ?';uk='Дані були змінені. Зберегти зміни ?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;

			мСохраненныйДок.Записать();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	// Заглушка
	//ЗаполнитьДемо();
	
	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	ПоказатьСтраницыОтчета();

	Модифицированность = Истина;

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;
	

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

// Процедура вызывается нажатием кнопки "Расшифровка" командной панели действий формы.
Процедура КоманднаяПанельФормыРасшифровка(Кнопка)
	
   ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
   ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
   
   Если ИмяТекущейСтраницыПанели = "ОтчетФССНесчастныйСлучай" Тогда
	   Сообщить(НСтр("ru='Для показателей данного отчета расшифровок не предусмотрено.';uk='Для показників цього звіту розшифровок не передбачено.'"), СтатусСообщения.Важное);
   Иначе
	   Обраб = Обработки.РасшифровкаРегламентированнойОтчетности.Создать();
	   Обраб.Форма = ЭтаФорма;
	   Обраб.ИмяЯчейки = ЭлементыФормы.ПолеТабличногоДокументаВедомость.ТекущаяОбласть.Имя;
	   Обраб.ПолучитьФорму().Показать();
	   
   КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельФормыКнопкаСохранять(Кнопка)
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	мСохранятьРасшифровку = Кнопка.Пометка;
КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА
// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
// редакция не требуется
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Перем ТекущаяОбласть;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	// управляем показом статика, отображающего номер текущей страницы
	// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
	ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(ТекущаяОбласть);
	
	Если (ИмяТекущейСтраницыПанели = "Ведомость") Тогда
		ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
		ТочностьЕдиницыИзмерения = 0;  
	Иначе
		ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
		ТочностьЕдиницыИзмерения = 2;
	КонецЕсли;	
	
	УстановитьФорматВывода();

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)
	
	УстановитьДатуПодписи();

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаОтчетФССНесчастныйСлучайПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаОтчетФССНесчастныйСлучайПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа.
//   Устанавливает признак модифицированности данных в форме, вызывает пересчет
// вычисляемых показателей  табличных полей и обновляет структуру данных
// многострочного раздела.
//
Процедура ПолеТабличногоДокументаОтчетФССНесчастныйСлучайПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	Расчет();
	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаОтчетФССНесчастныйСлучайПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа.
//
Процедура ПолеВыбораВариантЗаполненияОтчетФССНесчастныйСлучайПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки.
//
Процедура ПолеВводаЗначениеКорректировкиОтчетФССНесчастныйСлучайПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиПриИзменении

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// "Комментарий" по ячейке, для которой установлен алгоритм автозаполнения 
// [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийОтчетФССНесчастныйСлучайПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийПриИзменении()

Процедура ПолеТабличногоДокументаВедомостьПриИзменении(Элемент)
	РассчитатьИтоговыеПоказателиВедомости();
	Модифицированность = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       НСтр("ru='в гривнях';uk='у гривнях'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    НСтр("ru='в тысячах гривень';uk='у тисячах гривень'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, НСтр("ru='в миллионах гривень';uk='у мільйонах гривень'"));


// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетФССНесчастныйСлучай.СписокВыбора.Добавить(1, НСтр("ru='не заполнять автоматически';uk='не заповнювати автоматично'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетФССНесчастныйСлучай.СписокВыбора.Добавить(2, НСтр("ru='заполнять автоматически с корректировкой';uk='заповнювати автоматично з коригуванням'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетФССНесчастныйСлучай.СписокВыбора.Добавить(3, НСтр("ru='заполнять автоматически без корректировки';uk='заповнювати автоматично без коригування'"));

ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

мСоставПоказателей = "СоставПоказателей2005Кв3";

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
мВерсияФормы = "30/09/2003";
// Код отчета, равен коду по ОКУД
мКодОтчета   = "0710001";

мПечатныеФормы = Новый СписокЗначений;

СпП = Новый ТаблицаЗначений;
СпП.Колонки.Добавить("НомСтроки");
СпП.Колонки.Добавить("ИмяЯчейки");
СпП.Колонки.Добавить("ИмяПоказателя");
СпП.Колонки.Добавить("ЗнакОперации");
СпП.Колонки.Добавить("ИмяСлагаемого");
СпП.Колонки.Добавить("Сумма");
СпП.Колонки.Добавить("КодСчета");
СпП.Колонки.Добавить("КодКорСчета");
СпП.Колонки.Добавить("ДатаНачала");
СпП.Колонки.Добавить("ДатаКонца");
СпП.Колонки.Добавить("Сдвиг");
СпП.Колонки.Добавить("Раздел");
СпП.Колонки.Добавить("Страница");
СпП.Колонки.Добавить("МнЧ");
СпП.Колонки.Добавить("СтрокаПП");
СпП.Колонки.Добавить("Субконто1");
СпП.Колонки.Добавить("Субконто2");
СпП.Колонки.Добавить("Субконто3");
