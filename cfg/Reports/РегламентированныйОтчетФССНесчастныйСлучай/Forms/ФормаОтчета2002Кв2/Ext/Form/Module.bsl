////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
//каждая закладка отчета - это объект ПолеТабличногоДокумента
Перем мОтчетФССНесчастныйСлучай;

Перем мСоставПоказателей Экспорт;

// переменный для хранения бухгалтерских итогов
Перем мБухИтоги, мБухИтогиРС;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;


// хранит код отчета по КНД
Перем мКодОтчета;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы;

Перем ставка;

Перем мПечатныеФормы Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
//Процедура ЗаполнитьНачальныеНастройки() Экспорт
Процедура ЗаполнитьНачальныеНастройки(Макет = "СоставПоказателей") Экспорт

//МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(Макет);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	//ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по дебету счета, указанного в параметре.
//
Функция СНД(Счет,Субконто)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет,Субконто1", Счет,Субконто);

	Возврат Итог;

КонецФункции // СНД()

// Функция вычисляет начальный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по кредиту счета, указанного в параметре.
//
Функция СНК(Счет,Субконто)

	Перем Итог;

	Возврат мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет,Субконто1", Счет,Субконто);

	Возврат Итог;

КонецФункции // СНК()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураПоказателейВнутрСвязи = Новый Структура;

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		//Проверяется условие не является ли ТекущаяОбласть многоячеечной областью для вывода 
		//документа на печать. Если является - то следующую проверку выполнять не нужно
		Если (ТекущаяОбласть.Имя = "Область1" ИЛИ ТекущаяОбласть.Имя = "Область2") Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий параметры автозаполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки параметров автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии формы для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя, а в текущей - отключено.
							// В этом случае удаляем ячейку из таблицы пользовательских настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Процедура управляет показом в форме периода построения отчета,
Процедура ПоказатьПериод()

	СтрПериодОтчета = ПредставлениеПериода( НачалоГода(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина");

// Период в заголовке отчета
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
    мОтчетФССНесчастныйСлучай.Области.ПериодОтчета.Значение = "за  " +  СтрПериодОтчета;
	
КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
// пока не прописаны коды - вернуться
Процедура ЗаполнитьСведенияОбОрганизации()

	ОргНазв = Организация.НаименованиеПолное;

	мОтчетФССНесчастныйСлучай.Области.ОргНазв.Значение = ОргНазв;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","КодЗКГНГ");
	СписокПоказателей.Добавить("","КодКВЕД");
	СписокПоказателей.Добавить("","НомерФССНесчСлучай");
  
	ФИОДиректора = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФИОРук;
	ФИОГлавБуха = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФИОБух;
	КодЕДРПОУ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодПоЕДРПОУ;
	КодЗКГНГ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодЗКГНГ;
	КодКВЕД = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодКВЕД;
	НомерФССНесчСлучай = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).НомерФССНесчСлучай;
	
	мОтчетФССНесчастныйСлучай.Области.КодЕДРПОУ.Значение = КодЕДРПОУ; 
	мОтчетФССНесчастныйСлучай.Области.КодЗКГНГ.Значение = КодЗКГНГ;
	мОтчетФССНесчастныйСлучай.Области.КодКВЕД.Значение = КодКВЕД;
	мОтчетФССНесчастныйСлучай.Области.НомерРегистрацииНС.Значение = НомерФССНесчСлучай;

	мОтчетФССНесчастныйСлучай.Области.ОргБухгалтер.Значение = ФИОГлавБуха; 
	мОтчетФССНесчастныйСлучай.Области.ОргДиректор.Значение = ФИОДиректора;
	
	мОтчетФССНесчастныйСлучай.Области.Адрес.Значение = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
	мОтчетФССНесчастныйСлучай.Области.Телефон.Значение = УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	
	ДопСведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, мДатаНачалаПериодаОтчета, "uk");
	мОтчетФССНесчастныйСлучай.Области.РС.Значение     = ДопСведенияОбОрганизации.НомерСчета;
	мОтчетФССНесчастныйСлучай.Области.Банк.Значение   = ДопСведенияОбОрганизации.Банк;
	
	//определяем размер страхового тарифа
	СпрНалоги = Справочники.Налоги;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|НалогиОсн.Налог  КАК Налог, 
	|НалогиОсн.Ставка КАК Ставка
    |ИЗ
	|РегистрСведений.ШкалаСтавокНалогов.СрезПоследних (&Дата) КАК НалогиОсн
	|ГДЕ 
	|(НалогиОсн.Налог = &ФЗПСоцстрахНесчСлучай) И (НалогиОсн.Организация = &Организация)
	|";
	
	ЗапросЗначенияСтавок = Новый Запрос;
	ЗапросЗначенияСтавок.Текст = ТекстЗапроса;
	ЗапросЗначенияСтавок.УстановитьПараметр("Организация",Организация);
	ЗапросЗначенияСтавок.УстановитьПараметр("Дата", мДатаНачалаПериодаОтчета);
	ЗапросЗначенияСтавок.УстановитьПараметр("ФЗПСоцстрахНесчСлучай",СпрНалоги.СоцстрахНесчФОТ);
	
	РезультатЗапроса = ЗапросЗначенияСтавок.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаСтавок = РезультатЗапроса.Выгрузить();
		НайденнаяСтрока = ТаблицаСтавок.Найти (СпрНалоги.СоцстрахНесчФОТ,"Налог" ); 
		ставка = НайденнаяСтрока.Ставка;
	КонецЕсли;

 	СтраховойТариф = ставка * 100;
	УстановитьЗначениеПоказателя("СтраховойТариф", СтраховойТариф);

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(НСтр("ru='Отчет в ФСС от несчастных случаев: при выводе сумм в гривнях точность не может превышать 2 знака';uk='Звіт у ФСС від нещасних випадків: при виведенні сум у гривнях точність не може перевищувати 2 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(НСтр("ru='Отчет в ФСС от несчастных случаев: при выводе сумм в тысячах гривень точность не может превышать 3 знака';uk='Звіт у ФСС від нещасних випадків: при виведенні сум у тисячах гривень точність не може перевищувати 3 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(НСтр("ru='Отчет в ФСС от несчастных случаев: при выводе сумм в миллионах гривень точность не может превышать 6 знаков';uk='Звіт у ФСС від нещасних випадків: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;
	
	Сообщить(НСтр("ru='После изменения формата вывода значений, для корректного расчета итогов необходимо перезаполнить отчет!';uk='Після зміни формату виводу значень, для корректного розрахунку підсумків треба перезаполвнити звіт!'"), СтатусСообщения.Внимание);	

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";

	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "ОтчетФССНесчастныйСлучай";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()


// Обновляет пользовательские настройки при изменении версии формы.
// унифицирована, однако использование пока ... вопрос
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить(НСтр("ru='Измененилась версия формы отчета."
"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
"Виконується відновлення користувальницьких настройок.'"), СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	Если ЕстьИзмененияВариантыЗаполнения Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить(НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Оновлення користувальницьких настройок успішно завершене!'"));

	Иначе

		Сообщить(НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі користувальницьких настройок не виявлені!'"));

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()


// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетФССНесчастныйСлучай";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетФССНесчастныйСлучай";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетФССНесчастныйСлучай";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет();
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		
		// Очищаем комментарий редактируемой ячейки
		ТекущаяОбласть.Примечание.Текст = "";

	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетФССНесчастныйСлучай";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетФССНесчастныйСлучай";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя)

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("ОтчетФССНесчастныйСлучай");
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	мОтчетФССНесчастныйСлучай.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить()

	// Очищаем содержимое ячеек поля табличного документа
	ТекТабличноеПоле = мОтчетФССНесчастныйСлучай;
	ОчиститьТабличноеПоле(ТекТабличноеПоле);

	// Выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

КонецПроцедуры // Очистить()

Процедура РазбитьПечатнуюФорму(ПечФорма)
	
	ИмяФормы = "ОтчетФССНесчастныйСлучай";
	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = Истина;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	
	Для Сч = 1 По ПечФорма.ВысотаТаблицы Цикл
		
		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		НовТаблДок = Новый ТабличныйДокумент();
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = Истина;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры


// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати)
    мПечатныеФормы.Очистить();
	
	ПечатнаяФорма = Новый ТабличныйДокумент();

//	ОбластьПечати = мОтчетФССНесчастныйСлучай.ПолучитьОбласть("Отчет");
//	ПечатнаяФорма.Вывести(ОбластьПечати);
	ОбластьПечати = мОтчетФССНесчастныйСлучай.ПолучитьОбласть("Область1");
	ПечатнаяФорма.Вывести(ОбластьПечати);
	
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
	
	ОбластьПечати = мОтчетФССНесчастныйСлучай.ПолучитьОбласть("Область2");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	
	ОбластьПечати = мОтчетФССНесчастныйСлучай.ПолучитьОбласть("Подвал");
	ПечатнаяФорма.Вывести(ОбластьПечати);


	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;

//	Если ВидПечати = "ПоказатьБланк" Тогда
//		ПечатнаяФорма.Показать(СокрП(ЭтаФорма.Заголовок));
//	ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
//		ПечатнаяФорма.Напечатать();
//	КонецЕсли;

	РазбитьПечатнуюФорму(ПечатнаяФорма);
	
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()


// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить()   Экспорт
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.

		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;

		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();

	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаОтчетФССНесчастныйСлучай";
	
	ТекТабличноеПоле        = мОтчетФССНесчастныйСлучай;

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	Модифицированность = Ложь;

	Возврат Истина;
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	// восстанавливаем реквизиты отчета
	Организация              = мСохраненныйДок.Организация;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;

	ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	УстановитьФорматВывода();
	Расчет();

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()
	//1. Загальна сума виплат, на які нараховуються страхові внески  (в грн.)
	//І квартал (за місяцями)
	мОтчетФССНесчастныйСлучай.Области.П1Кв.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_1.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_2.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_3.Значение);
	//II квартал (за місяцями) 
	
	мОтчетФССНесчастныйСлучай.Области.П2Кв.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_4.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_5.Значение) 
										            + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_6.Значение);
	//III квартал (за місяцями)     
	мОтчетФССНесчастныйСлучай.Области.П3Кв.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_7.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_8.Значение) 
								                    + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_9.Значение); 
	//IV квартал (за місяцями)       
	мОтчетФССНесчастныйСлучай.Области.П4Кв.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_10.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_11.Значение) 
													+ ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.Пмес_12.Значение); 
	//Усього з початку року
	мОтчетФССНесчастныйСлучай.Области.ПГод.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П1Кв.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П2Кв.Значение) 
													+ ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П3Кв.Значение) 
													+ ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П4Кв.Значение);
	
	//2. Розрахунок страхових внесків до Фонду (грн.) 
	//нараховано: За звітний період (за місяцями)
	мОтчетФССНесчастныйСлучай.Области.П3.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П3_1.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П3_2.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П3_3.Значение);
	//Разом (2 + 3)
	мОтчетФССНесчастныйСлучай.Области.П4.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П2.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П3.Значение);
	//Нараховано за актами, всього
	мОтчетФССНесчастныйСлучай.Области.П6.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П7.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П8.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П9.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П10.Значение);
	
	//Усього належить до сплати (1 + 4 + 5 + 6 + 11 - 12 - 13)
	мОтчетФССНесчастныйСлучай.Области.П14.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П1.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П4.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П5.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П6.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П11.Значение) 
	                                               - ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П12.Значение)
	                                               - ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П13.Значение);
										  
	//Зараховано витрат за соціальним страхуванням:За звітний період (за місяцями)
	мОтчетФССНесчастныйСлучай.Области.П18.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П18_1.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П18_2.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П18_3.Значение);
	//Разом (17 + 18)
	мОтчетФССНесчастныйСлучай.Области.П19.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П17.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П18.Значение);
												   
	//Перераховано: За звітний період (за місяцями)
	мОтчетФССНесчастныйСлучай.Области.П21.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П21_1.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П21_2.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П21_3.Значение);
	//Разом (20 + 21)
	мОтчетФССНесчастныйСлучай.Области.П22.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П20.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П21.Значение);
	
	//Перераховано за актами
	мОтчетФССНесчастныйСлучай.Области.П23.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П24.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П25.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П26.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П27.Значение);
	
	//Усього зараховано і заплачено (16 + 19 + 22 + 23)
	мОтчетФССНесчастныйСлучай.Области.П28.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П16.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П19.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П22.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П23.Значение);
	
	//Залишок заборгованності на кінець звітного періоду за Фондом
	мОтчетФССНесчастныйСлучай.Области.П15.Значение = Макс(0, ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П28.Значение) 
	                                               - ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П14.Значение)); // Если П28 > П14
	
	//Сума несплачених платежів (14 - 28)
	мОтчетФССНесчастныйСлучай.Области.П29.Значение = Макс(0, ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П14.Значение) 
	                                               - ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П28.Значение)); // Если П14 > П28
	
	
	//4. Фонд оплати праці
	// усього з початку року
	мОтчетФССНесчастныйСлучай.Области.ПФОП_Год.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.ПФОП_1кв.Значение) 
	                                                    + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.ПФОП_2кв.Значение) 
	                                                    + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.ПФОП_3кв.Значение) 
	                                                    + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.ПФОП_4кв.Значение);
	
	//7.1. Розшифровка інших витрат
	//Разом (36 + 37 + 38 + 39 + 40 + 41 + 42 + 43)
	//Сума усього
	мОтчетФССНесчастныйСлучай.Области.П44_2.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П36_2.Значение) 
	                                                 + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П37_2.Значение) 
	                                                 + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П38_2.Значение) 
	                                                 + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П39_2.Значение) 
	                                                 + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П40_2.Значение) 
	                                                 + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П41_2.Значение) 
	                                                 + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П42_2.Значение) 
	                                                 + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П43_2.Значение);
	
	//Інші витрати
	мОтчетФССНесчастныйСлучай.Области.П34_2.Значение = мОтчетФССНесчастныйСлучай.Области.П44_2.Значение;		
	
	//7. Витрати по коштах Фонду з початку року
	//Разом (32 + 33 + 34)
	//Сума усього
	мОтчетФССНесчастныйСлучай.Области.П35_2.Значение = ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П32_2.Значение) 
	                                                 + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П33_2.Значение) 
	                                                 + ОкруглитьЧислоПоФормату(мОтчетФССНесчастныйСлучай.Области.П34_2.Значение);
	
КонецПроцедуры // Расчет()

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто() Экспорт

	////////
	// *** Здесь необходимо написать алгоритм заполнения отчета.***
	//
	// Для присвоения показателям отчета вычисленного значения необходимо
	// использовать процедуру
	//
	//     УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя).
	//
	////////
// Инициализация

   НужнаяСтатья =  Справочники.СтатьиНалоговыхДеклараций.ФССНесчСлуч_Орг;

   Запрос = Новый Запрос ("
   |ВЫБРАТЬ
   |ВзносыВФонды.Результат         КАК СуммаВзносов,
   |ВзносыВФонды.БазаВзноса        КАК БазаВзноса,
   |ВзносыВФонды.ПериодРегистрации КАК ПериодРегистрации,
   |ВзносыВФонды.БазовыйПериодНачало КАК НачалоМесяца,
   |ВзносыВФонды.БазовыйПериодКонец КАК КонецМесяца,
   |ВзносыВФонды.СтатьяНалоговойДекларации  КАК СтатьяНалоговойДекларации
	
   |ИЗ РегистрРасчета.ВзносыВФонды КАК ВзносыВФонды

   |ГДЕ 
   |	ВзносыВФонды.Активность = ИСТИНА
   |	И ВзносыВФонды.ПериодРегистрации >= &парамНачалоПериода
   |	И ВзносыВФонды.ПериодРегистрации <= &парамКонецПериода
   |	И ВзносыВФонды.Организация = &парамОрганизация
   |   И ВЫБОР КОГДА ВзносыВФонды.СтатьяНалоговойДекларации = &парамСтатья  ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ
   |");
	
	Запрос.УстановитьПараметр("парамНачалоПериода", НачалоГода(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парамКонецПериода" , мДатаКонцаПериодаОтчета);

	Запрос.УстановитьПараметр("парамСтатья",  НужнаяСтатья);
	Запрос.УстановитьПараметр("парамОрганизация",   Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
	
	ТаблицаРезультатов.Свернуть("СтатьяНалоговойДекларации, НачалоМесяца,КонецМесяца", "СуммаВзносов,БазаВзноса");
	//ищем структуру по месяцу и статье декларации
	Отбор = Новый Структура;
	Отбор.Вставить("СтатьяНалоговойДекларации",НужнаяСтатья);
	i = 0;
	Для мес = Месяц (НачалоГода(мДатаНачалаПериодаОтчета)) по Месяц(мДатаКонцаПериодаОтчета) Цикл
		Если (i <> 0) Тогда
			Отбор.Удалить("НачалоМесяца");
		КонецЕсли;	
		Отбор.Вставить("НачалоМесяца",ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета),i));
        // результатом поиска всегда будет только одна строка, не массив
		НайденныеСтроки = ТаблицаРезультатов.НайтиСтроки (Отбор);
		//	НайденнаяСтрока = ТаблицаРезультатов.Найти (МассивСтатей[0],"СтатьяНалоговойДекларации" ); 
		Если (НайденныеСтроки.Количество() = 1 ) Тогда
			ИмяЯчейки = "Пмес_"+ Строка(мес);
	//		мОтчетФССНесчастныйСлучай.Области[ИмяЯчейки].Значение = НайденныеСтроки[0].БазаВзноса;
			УстановитьЗначениеПоказателя(ИмяЯчейки, НайденныеСтроки[0].БазаВзноса);
		КонецЕсли;
	    i = i + 1;
	КонецЦикла;
	
	НужныйВидСбора   = Справочники.Налоги.СоцстрахНесчФОТ;
	СтрокиДекларации = Справочники.СтатьиНалоговыхДеклараций;
	НужнаяСтатья     = СтрокиДекларации.ФССНесчСлуч_Орг;
   	
	ПС = ПланыСчетов["Хозрасчетный"];
	СчетФССНесч = ПС.РасчетыПоСтрахованиюОтНесчастныхСлучаев;
	СчетФСС = ПС.РасчетыПоСоциальномуСтрахованию;

	СчетРасчСчет1 = ПС.ТекущиеСчетаВНациональнойВалюте;
	СчетРасчСчет2 = ПС.ДругиеСчетаВБанкеВНациональнойВалюте;
	СчетЗП = ПС.РасчетыПоОплатеТруда;
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(СчетРасчСчет1);
	МассивСчетов.Добавить(СчетРасчСчет2);
	
	//показатели, расчет которых - это сальдо , то есть остаточные сущности
	//для них - расчет итогов - может быть выполнен только отдельно
	мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
	Итоги = "НачальныйОстатокДт,НачальныйОстатокКт,КонечныйОстатокДт,КонечныйОстатокКт";
	мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Период,Счет,Субконто1", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,"Месяц","656",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Налоги,,, "Организация", Организация);
	
	П1 = СНК(СчетФССНесч,НужныйВидСбора);
    УстановитьЗначениеПоказателя("П1", П1);
	
	П16 = СНД(СчетФССНесч,НужныйВидСбора);
    УстановитьЗначениеПоказателя("П16", П16);
	
	мБухИтогиЗП = Обработки.БухгалтерскиеИтоги.Создать();
	Итоги = "НачальныйОстатокДт,НачальныйОстатокКт,КонечныйОстатокДт,КонечныйОстатокКт";
	мБухИтогиЗП.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Период,Счет", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,"Месяц","66",,,, "Организация", Организация);
	
	МассивКварталов = Новый Массив(3,4);
		
	Для НомМес = Месяц (НачалоГода(мДатаНачалаПериодаОтчета)) по Месяц(мДатаКонцаПериодаОтчета) Цикл
		мес = НачалоМесяца( ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), НомМес-1));
		ЗадолженностьЗП = мБухИтогиЗП.ПолучитьИтог("СуммаКонечныйОстатокКт", "Период,Счет",мес, СчетЗП);
		Задолженность = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Период,Счет,Субконто1",мес, СчетФССНесч, НужныйВидСбора);
		индекс = Цел((НомМес - 1) / 3);
	    МассивКварталов[0][индекс] = Задолженность;
		МассивКварталов[1][индекс] = ЗадолженностьЗП;

	КонецЦикла;
	
	мБухИтогиЗП = Обработки.БухгалтерскиеИтоги.Создать();
	Итоги = "НачальныйОстатокДт,НачальныйОстатокКт,КонечныйОстатокДт,КонечныйОстатокКт,ОборотКт,КорОборотКт";
	мБухИтогиЗП.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Период,Счет,КорСчет", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,"Месяц","66",,"652,656",, "Организация", Организация);
	
	Для i = 0 по 3 Цикл
	  МассивКварталов[2][i] = 0;	
	КонецЦикла;
	
	Для НомМес = Месяц (НачалоГода(мДатаНачалаПериодаОтчета)) по Месяц(мДатаКонцаПериодаОтчета) Цикл
		мес = НачалоМесяца( ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), НомМес-1));
		ЗадолженностьЗП = мБухИтогиЗП.ПолучитьИтог("СуммаКонечныйОстатокКт", "Период,Счет",мес, СчетЗП);
		индекс = Цел((НомМес - 1) / 3);
		МассивКварталов[1][индекс] = ЗадолженностьЗП;
		Начислено = мБухИтогиЗП.ПолучитьИтог("СуммаОборотКт", "Период,Счет",мес, СчетЗП);
        Больничные = мБухИтогиЗП.ПолучитьИтог("СуммаКорОборотКт", "Период,Счет",мес, СчетЗП);
		Если (Начислено <> NULL) и (Больничные <> NULL) Тогда
			ФОТ = Начислено - Больничные;
		Иначе
			ФОТ = 0;
		КонецЕсли;
		МассивКварталов[2][индекс] = МассивКварталов[2][индекс] + ФОТ;
	КонецЦикла;

	Для Сч = 0 по 3 Цикл  
		ИмяЯчейки = "ПВзнос_" + Строка(Сч + 1) + "Кв";
		Если МассивКварталов[0][Сч] <> Неопределено Тогда
			УстановитьЗначениеПоказателя(ИмяЯчейки,МассивКварталов[0][Сч]); 
		КонецЕсли;	 
		
		ИмяЯчейки = "ПДолг_" + Строка(Сч + 1) + "Кв";
		Если МассивКварталов[1][Сч] <> Неопределено Тогда
			УстановитьЗначениеПоказателя(ИмяЯчейки,МассивКварталов[1][Сч]); 
		КонецЕсли;	
		
		ИмяЯчейки = "ПФОП_" + Строка(Сч + 1) + "Кв";
		Если МассивКварталов[1][Сч] <> Неопределено Тогда
			УстановитьЗначениеПоказателя(ИмяЯчейки,МассивКварталов[2][Сч]); 
		КонецЕсли;	 

	КонецЦикла;   

	мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();
	ИтогиРС = "ОборотДт, ОборотКт,КорОборотДт, КорОборотКт";
		
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Налоги);
    МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций); 
	
	//задать периодичность расчета итогов - месяц
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Период,Счет,Субконто1,Субконто2,КорСчет", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,"Месяц", "656",МассивСубконто,МассивСчетов,, "Организация", Организация);
	
	П2 =0; П20 = 0;ИтогЗачтено = 0;
	//вероятно, на будущее два цикла объединить в один
	
	Для НомМес = Месяц (НачалоГода(мДатаНачалаПериодаОтчета)) по Месяц(мДатаНачалаПериодаОтчета) Цикл
		мес = НачалоМесяца( ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), НомМес - 1));
		П2 = П2 + мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Период,Счет,Субконто1,Субконто2",мес, СчетФССНесч, НужныйВидСбора,НужнаяСтатья);
		Перечислено = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто1,Субконто2",мес, СчетФССНесч, НужныйВидСбора,НужнаяСтатья);
	    П20 = П20 + Перечислено;
		ИтогДт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Период,Счет,Субконто1,Субконто2",мес, СчетФССНесч, НужныйВидСбора,НужнаяСтатья);
		ИтогЗачтено = ИтогЗачтено + ОкруглитьЧислоПоФормату(ИтогДт) - ОкруглитьЧислопоФормату(Перечислено);
	КонецЦикла;
	
	   УстановитьЗначениеПоказателя("П2", П2);
	   УстановитьЗначениеПоказателя("П20", П20);
       УстановитьЗначениеПоказателя("П17", ИтогЗачтено);
	   
	Для i = 0 по 2 Цикл
		мес = НачалоМесяца( ДобавитьМесяц(мДатаНачалаПериодаОтчета, i));
		ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Период,Счет,Субконто1,Субконто2",мес, СчетФССНесч, НужныйВидСбора,НужнаяСтатья);
		ИмяЯчейкиКт = "П3_"+ Строка(i + 1);
	//	мОтчетФССНесчастныйСлучай.Области[ИмяЯчейкиКт].Значение = ИтогКт;
	    УстановитьЗначениеПоказателя(ИмяЯчейкиКт, ИтогКт);
		ИтогДтКорРасчСчет = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто1,Субконто2",мес, СчетФССНесч, НужныйВидСбора,НужнаяСтатья);
		ИмяЯчейкиДтКорРасчСчет = "П21_"+ Строка(i + 1);
	//	мОтчетФССНесчастныйСлучай.Области[ИмяЯчейкиДтКорРасчСчет].Значение = ИтогДтКорРасчСчет;
	    УстановитьЗначениеПоказателя(ИмяЯчейкиДтКорРасчСчет, ИтогДтКорРасчСчет);
		ИтогДт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Период,Счет,Субконто1,Субконто2",мес, СчетФССНесч, НужныйВидСбора,НужнаяСтатья);
		ИтогЗачтено = ОкруглитьЧислопоФормату(ИтогДт) - ОкруглитьЧислоПоФормату(ИтогДтКорРасчСчет);
		ИмяЯчейкиДт = "П18_"+ Строка(i + 1);
	//	мОтчетФССНесчастныйСлучай.Области[ИмяЯчейкиДт].Значение = ИтогЗачтено;
	    УстановитьЗначениеПоказателя(ИмяЯчейкиДт, ИтогЗачтено);
	КонецЦикла;
	
	// показатели в целом за квартал
	мБухИтогиРСКв = Обработки.БухгалтерскиеИтоги.Создать();
	ИтогиРС = "ОборотДт, ОборотКт,КорОборотДт, КорОборотКт";
		
	мБухИтогиРСКв.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет,Субконто1,Субконто2,КорСчет", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,, "656",МассивСубконто,МассивСчетов,, "Организация", Организация);

	
	// перечислено на расчетный счет
	П11 = мБухИтогиРСКв.ПолучитьИтог("СуммаКорОборотКт", "Счет,Субконто1",, СчетФССНесч, НужныйВидСбора);
	УстановитьЗначениеПоказателя("П11", П11);
	
	//списано задолженности
//	Перечислено = мБухИтогиРСКв.ПолучитьИтог("СуммаКорОборотДт", "Счет,Субконто1",, СчетФССНесч, НужныйВидСбора));
//	Списано = ОкруглитьЧислоПоФормату(мБухИтогиРСКв.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто1",, СчетФССНесч, НужныйВидСбора)))
//	        - ОкруглитьЧислоПоФормату(Перечислено);
			
//	П12 = Списано;		
	//теперь обороты только за весь период в целом и, как правило, только по второму субконто
	//не принято к зачету
	НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_НеПринятоКЗачет;
	ИтогКт = мБухИтогиРСКв.ПолучитьИтог("СуммаОборотКт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
	УстановитьЗначениеПоказателя("П7", ИтогКт);	
	
	//не принято к зачету
	ИтогДт = мБухИтогиРСКв.ПолучитьИтог("СуммаКорОборотДт", "Счет,Субконто2", СчетФССНесч,НужнаяСтатья);
    УстановитьЗначениеПоказателя("П24", ИтогДт);
	
	//доначисленные суммы взносов
	НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ДоначислСамост;
	ИтогКт = мБухИтогиРСКв.ПолучитьИтог("СуммаОборотКт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
	УстановитьЗначениеПоказателя("П8", ИтогКт);
	
	ИтогДт = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет,Субконто2", СчетФССНесч,НужнаяСтатья);
    УстановитьЗначениеПоказателя("П25", ИтогДт);
	
	//пеня
	НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_Пеня;
	ИтогКт = мБухИтогиРСКв.ПолучитьИтог("СуммаОборотКт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
	УстановитьЗначениеПоказателя("П9", ИтогКт);	
	
	ИтогДт = мБухИтогиРСКв.ПолучитьИтог("СуммаКорОборотДт", "Счет,Субконто2", СчетФССНесч,НужнаяСтатья);
    УстановитьЗначениеПоказателя("П26", ИтогДт);
    	
	//штраф
	НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_Штраф;
	ИтогКт = мБухИтогиРСКв.ПолучитьИтог("СуммаОборотКт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
	УстановитьЗначениеПоказателя("П10", ИтогКт);	
	
	ИтогДт = мБухИтогиРСКв.ПолучитьИтог("СуммаКорОборотДт", "Счет,Субконто2", СчетФССНесч,НужнаяСтатья);
    УстановитьЗначениеПоказателя("П27", ИтогДт);
	
	// расчет среднесписочной численности в эквиваленте полной занятости
	// расчет среднесписочной численности
	Квартал = 1;
	НачДата = НачалоГода(мДатаНачалаПериодаОтчета);
	КонДата = ДобавитьМесяц(КонецМесяца(НачДата),2);
	Пока Истина Цикл
		Если КонДата <= мДатаКонцаПериодаОтчета Тогда   
			ЧисленностьЭПЗ = ПроведениеРасчетов.ПолучитьСреднююЧисленность(НачДата, КонДата, "ЭПЗ", "КВАРТАЛ", Организация, "");
			ИмяЯчейки = "ПСер_"+Строка(Квартал)+"Кв";
			Для каждого стр  Из ЧисленностьЭПЗ Цикл
				УстановитьЗначениеПоказателя(ИмяЯчейки, стр.Средняя);
			КонецЦикла;
			Квартал = Квартал+1;
			НачДата = ДобавитьМесяц(НачДата,3);
			КонДата = ДобавитьМесяц(КонецМесяца(НачДата),2);
		Иначе
			прервать;
		КонецЕсли;
		
	КонецЦикла;
//	ТаблЧисленностиЭПЗ = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "ЭПЗ", "КВАРТАЛСНАЧАЛАГОДА", Организация, ""); 
//	ПрисвоитьЗначенияЯчейкам(ТаблЧисленностиЭПЗ,"ПСер_");
	
    ТаблЧисленностиЭПЗ = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "ЭПЗ", "МЕСЯЦСНАЧАЛАГОДА", Организация, ""); 
	Ном = ТаблЧисленностиЭПЗ.Количество() - 1;
	УстановитьЗначениеПоказателя("ПСер_Год",ТаблЧисленностиЭПЗ[Ном].Средняя);
 	
	//Расходы по страхованию - только по второму субконто
	//временная утрата трудоспособности
	НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ВремНетрудосп;
	ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
	УстановитьЗначениеПоказателя("П32_2", ИтогКт);	
	
	//на похороны потерпевшего
	НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_Погребение;
	ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
	УстановитьЗначениеПоказателя("П33_2", ИтогКт);	
	
	//в случае утраты профпригодности
	НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ОднПомПрофПриг;
	ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
	УстановитьЗначениеПоказателя("П36_2", ИтогКт);	
	
	//ежемесячная помощь в случае утраты профпригодности
	НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ЕжемесПомощь;
	ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
	УстановитьЗначениеПоказателя("П37_2", ИтогКт);
	
	//за моральный ущерб	
	НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_Ущерб;
	ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
	УстановитьЗначениеПоказателя("П38_2", ИтогКт);
	
	//при переводе на более легкую работу	
	НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ЛегкРабота;
	ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
	УстановитьЗначениеПоказателя("П39_2", ИтогКт);
	
	//за профреабилитация	
	НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ПрофРеабилит;
	ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
	УстановитьЗначениеПоказателя("П40_2", ИтогКт);
	
	//за медицинская и социальная помощь	
	НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_МедПомощь;
	ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
	УстановитьЗначениеПоказателя("П41_2", ИтогКт);
	
	//одноразовая помощь в случае смерти	
	НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ОднПомСмерть;
	ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
	УстановитьЗначениеПоказателя("П42_2", ИтогКт);
	
	//ежемесячная помощь в случае смерти
	НужнаяСтатья = СтрокиДекларации.ФССНесчСлуч_ЕжемесПомСмерть;
	ИтогКт = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФССНесч,НужнаяСтатья);
	УстановитьЗначениеПоказателя("П43_2", ИтогКт);



    Расчет();
	
	Модифицированность = Истина;

КонецПроцедуры // ЗаполнитьАвто()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетФССНесчастныйСлучай";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вычисляется автоматически';uk='Значення обчислюється автоматично'");
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");
		КонецЕсли;

		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки("СоставПоказателей");

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Печатать сразу';uk='Друкувати відразу'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Показать бланк';uk='Показати бланк'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЛинияСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЛинияПусто = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);

	мМассивТиповЛиний = Новый Массив();
	мМассивТиповЛиний.Вставить(0, ЛинияПусто);
	мМассивТиповЛиний.Вставить(1, ЛинияСнизу);

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	Перем ИсходноеКоличествоСтрокГруппы;

	ЭтаФорма.АвтоЗаголовок = Ложь;

	мОтчетФССНесчастныйСлучай = ЭлементыФормы.ПолеТабличногоДокументаОтчетФССНесчастныйСлучай;
	ТекТабличноеПоле = мОтчетФССНесчастныйСлучай;
	
	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 2;

			УстановитьФорматВывода();
			
			ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();
	мОтчетФССНесчастныйСлучай.ТолькоПросмотр = Истина;

	ставка = 0;
	
	ЗаполнитьСведенияОбОрганизации();
    	
	УстановитьЦветФонаЯчейки(,,"ОтчетФССНесчастныйСлучай");

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность = Истина Тогда

		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения ?';uk='Дані були змінені. Зберегти зміни ?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;

			мСохраненныйДок.Записать();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	// Заглушка
	//ЗаполнитьДемо();
	
	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

	

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА




// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

//	мОтчетФССНесчастныйСлучай.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаОтчетФССНесчастныйСлучайПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаОтчетФССНесчастныйСлучайПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа.
//   Устанавливает признак модифицированности данных в форме, вызывает пересчет
// вычисляемых показателей  табличных полей и обновляет структуру данных
// многострочного раздела.
//
Процедура ПолеТабличногоДокументаОтчетФССНесчастныйСлучайПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	Расчет();
	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаОтчетФССНесчастныйСлучайПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа.
//
Процедура ПолеВыбораВариантЗаполненияОтчетФССНесчастныйСлучайПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки.
//
Процедура ПолеВводаЗначениеКорректировкиОтчетФССНесчастныйСлучайПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиПриИзменении

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// "Комментарий" по ячейке, для которой установлен алгоритм автозаполнения 
// [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийОтчетФССНесчастныйСлучайПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийПриИзменении()


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       НСтр("ru='в гривнях';uk='у гривнях'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    НСтр("ru='в тысячах гривень';uk='у тисячах гривень'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, НСтр("ru='в миллионах гривень';uk='у мільйонах гривень'"));


// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетФССНесчастныйСлучай.СписокВыбора.Добавить(1, НСтр("ru='не заполнять автоматически';uk='не заповнювати автоматично'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетФССНесчастныйСлучай.СписокВыбора.Добавить(2, НСтр("ru='заполнять автоматически с корректировкой';uk='заповнювати автоматично з коригуванням'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетФССНесчастныйСлучай.СписокВыбора.Добавить(3, НСтр("ru='заполнять автоматически без корректировки';uk='заповнювати автоматично без коригування'"));

ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

мСоставПоказателей = "СоставПоказателей";

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
мВерсияФормы = "30/09/2003";
// Код отчета, равен коду по ОКУД
мКодОтчета   = "0710001";

мПечатныеФормы = Новый СписокЗначений;
