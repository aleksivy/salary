////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	КолонкаРазмещениеСписокВыбора = ЭлементыФормы.ТабличноеПолеВыбранныеПоля.Колонки.КолонкаРазмещение.ЭлементУправления.СписокВыбора;
	КолонкаРазмещениеСписокВыбора.Добавить(ТипРазмещенияРеквизитовИзмерений.ВместеСИзмерениями, НСтр("ru='С группировками';uk='З групуванням'"));
	КолонкаРазмещениеСписокВыбора.Добавить(ТипРазмещенияРеквизитовИзмерений.Отдельно, НСтр("ru='В отдельных колонках';uk='В окремих колонках'"));
	КолонкаРазмещениеСписокВыбора.Добавить(ТипРазмещенияРеквизитовИзмерений.Вместе, НСтр("ru='В отдельной колонке';uk='В окремій колонці'"));
	
	КолонкаРазмещениеСписокВыбора = ЭлементыФормы.ТабличноеПолеВыбранныеПоля.Колонки.КолонкаПоложение.ЭлементУправления.СписокВыбора;
	КолонкаРазмещениеСписокВыбора.Добавить("Перед группировкой", НСтр("ru='Перед группировкой';uk='Перед групуванням'"));
	КолонкаРазмещениеСписокВыбора.Добавить("Вместо группировки", НСтр("ru='Вместо группировки';uk='Замість групування'"));
	КолонкаРазмещениеСписокВыбора.Добавить("После группировки", НСтр("ru='После группировки';uk='Після групування'"));
	
	ВариантОформленияСписокВыбора = ЭлементыФормы.ПолеВыбораВариантОформления.СписокВыбора;
	
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.БезОформления, НСтр("ru='Без оформления';uk='Без оформлення'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Камень, НСтр("ru='Камень';uk='Камінь'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Классика, НСтр("ru='Классика';uk='Класика'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Классика2, НСтр("ru='Классика 2';uk='Класика 2'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Классика3, НСтр("ru='Классика 3';uk='Класика 3'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Весна, НСтр("ru='Весна';uk='Весна'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Лето, НСтр("ru='Лето';uk='Літо'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Осень, НСтр("ru='Осень';uk='Осінь'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Зима, НСтр("ru='Зима';uk='Зима'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Асфальт, НСтр("ru='Асфальт';uk='Асфальт'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Медь, НСтр("ru='Медь';uk='Мідь'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Бронза, НСтр("ru='Бронза';uk='Бронза'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Платина, НСтр("ru='Платина';uk='Платина'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Серебро, НСтр("ru='Серебро';uk='Срібло'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Бирюза, НСтр("ru='Бирюза';uk='Бірюза'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Песок, НСтр("ru='Песок';uk='Пісок'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Трава, НСтр("ru='Трава';uk='Трава'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Лед, НСтр("ru='Лед';uk='Лід'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Апельсин, НСтр("ru='Апельсин';uk='Апельсин'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Текстиль, НСтр("ru='Текстиль';uk='Текстиль'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Дерево, НСтр("ru='Дерево';uk='Дерево'"));
	ВариантОформленияСписокВыбора.Добавить(СтандартноеОформление.Интерфейс, НСтр("ru='Интерфейс';uk='Інтерфейс'"));
	
	ЭлементыФормы.ПолеВыбораВариантОформления.Значение = ВариантОформления;
	
	Если мВыбиратьИмяРегистра Тогда
		
		ЭлементыФормы.ПолеВыбораИмяРегистра.СписокВыбора = УправлениеОтчетами.ПолучитьСписокРегистровНакопления();
		ЭлементыФормы.ПолеВыбораИмяРегистра.Значение = ИмяРегистра;
		ЭлементыФормы.ПолеВыбораИмяРегистра1.СписокВыбора = УправлениеОтчетами.ПолучитьСписокРегистровНакопления();
		ЭлементыФормы.ПолеВыбораИмяРегистра1.Значение = ИмяРегистра;
		ЭлементыФормы.ПолеВыбораИмяРегистра2.СписокВыбора = УправлениеОтчетами.ПолучитьСписокРегистровНакопления();
		ЭлементыФормы.ПолеВыбораИмяРегистра2.Значение = ИмяРегистра;
		
	Иначе
		
		ЭлементыФормы.НадписьИмяРегистра.Видимость = Ложь;
		ЭлементыФормы.ПолеВыбораИмяРегистра.Видимость = Ложь;
		ЭлементыФормы.НадписьИмяРегистра1.Видимость = Ложь;
		ЭлементыФормы.ПолеВыбораИмяРегистра1.Видимость = Ложь;
		ЭлементыФормы.НадписьИмяРегистра2.Видимость = Ложь;
		ЭлементыФормы.ПолеВыбораИмяРегистра2.Видимость = Ложь;
		
	КонецЕсли;
	
	ЭлементыФормы.ФлажокИспользоватьСвойстваИКатегории.Видимость = мВыбиратьИспользованиеСвойств;
	ЭлементыФормы.ФлажокИспользоватьСвойстваИКатегории1.Видимость = мВыбиратьИспользованиеСвойств;
	ЭлементыФормы.ФлажокИспользоватьСвойстваИКатегории2.Видимость = мВыбиратьИспользованиеСвойств;
	
	Если мРасширеннаяНастройка = Неопределено Тогда
		
		РасширеннаяНастройка = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РасширеннаяФормаНастройкиОтчетов");
		
	Иначе
		
		РасширеннаяНастройка = мРасширеннаяНастройка;
		
	КонецЕсли;
	
	ИнициализацияИнтерваловГруппировок();
	
	НастройкаОтображенияФормы();
	
	Для каждого Показатель из Показатели.Строки Цикл
		
		УстановитьПометкиРодителей(Показатель);
		
	КонецЦикла;
	
КонецПроцедуры // ПриОткрытии()

Процедура ПриЗакрытии()
	
	мТекущаяСтраницаНастройка = ЭлементыФормы.Панель.Страницы.Индекс(ЭлементыФормы.Панель.ТекущаяСтраница);
	мРасширеннаяНастройка = РасширеннаяНастройка;
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ

Процедура ОсновныеДействияФормыСформировать(Кнопка)
	
	Перем ТекущиеНастройкиОтчета;
	
	Если ИспользоватьИнтервальныеГруппировки Тогда
		
		ВладелецФормы.ОтчетОбъект.СформироватьСтруктуруДляСохраненияНастроек(ТекущиеНастройкиОтчета);
		ВладелецФормы.ОтчетОбъект.УстановитьНачальныеНастройки();
		ВладелецФормы.ОтчетОбъект.ВосстановитьНастройкиИзСтруктуры(ТекущиеНастройкиОтчета);
		
	КонецЕсли;
	
	Закрыть(2);
	
КонецПроцедуры // ОсновныеДействияФормыСформировать()

Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Перем ТекущиеНастройкиОтчета;
	
	Если ИспользоватьИнтервальныеГруппировки Тогда
		
		ВладелецФормы.ОтчетОбъект.СформироватьСтруктуруДляСохраненияНастроек(ТекущиеНастройкиОтчета);
		ВладелецФормы.ОтчетОбъект.УстановитьНачальныеНастройки();
		ВладелецФормы.ОтчетОбъект.ВосстановитьНастройкиИзСтруктуры(ТекущиеНастройкиОтчета);
		
	КонецЕсли;
	
	Закрыть(1);
	
КонецПроцедуры // ОсновныеДействияФормыОК()

Процедура ПолеВыбораИмяРегистраПриИзменении(Элемент)
	
	Универсальный = (Метаданные.НайтиПоТипу(ТипЗнч(ЭтотОбъект)) = ВладелецФормы.ОтчетОбъект.Метаданные());
	
	Если Универсальный Тогда
		
		ПереустановитьНачальныеНастройки(ВладелецФормы.ОтчетОбъект, ВладелецФормы.ОтчетОбъект, ВладелецФормы);
		
	Иначе
		
		ПереустановитьНачальныеНастройки(ВладелецФормы.ОтчетОбъект.УниверсальныйОтчет, ВладелецФормы.ОтчетОбъект, ВладелецФормы);
		
	КонецЕсли;
	
КонецПроцедуры // ПолеВыбораИмяРегистраПриИзменении()

Процедура ПолеВыбораИнтервальноеПолеПриИзменении(Элемент)
	
	ПолучитьИнтервалы();
	ЭлементыФормы.ТабличноеПолеОтобранныеИнтервалы.ТолькоПросмотр = Не ЗначениеЗаполнено(ИнтервальноеПоле);
	
КонецПроцедуры // ПолеВыбораИнтервальноеПолеПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ТабличноеПолеПоказатели

Процедура ТабличноеПолеПоказателиПриИзмененииФлажка(Элемент, Колонка)
	
	УстановитьПометки(Элемент.ТекущаяСтрока);
	
КонецПроцедуры // ТабличноеПолеПоказателиПриИзмененииФлажка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ КоманднаяПанельПоказатели

Процедура КоманднаяПанельПоказателиУстановитьПометки(Кнопка)
	
	Для каждого Показатель из Показатели.Строки Цикл
		
		Показатель.Использование = 1;
		УстановитьПометки(Показатель);
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельПоказателиУстановитьПометки()

Процедура КоманднаяПанельПоказателиСнятьПометки(Кнопка)
	
	Для каждого Показатель из Показатели.Строки Цикл
		
		Показатель.Использование = 0;
		УстановитьПометки(Показатель);
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельПоказателиСнятьПометки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ТабличноеПолеИзмеренияСтроки

Процедура ТабличноеПолеИзмеренияСтрокиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	// Действие "Выбор" не обрабатывается.
	// Разрешено перетаскивать только значения с типом "ИзмерениеПостроителяОтчета".
	Если ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Выбор И ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ИзмерениеПостроителяОтчета") Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеИзмеренияСтрокиПроверкаПеретаскивания()

Процедура ТабличноеПолеИзмеренияСтрокиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СтандартнаяОбработка = НЕ(ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Выбор);
	
	ПутьКДанным = ПараметрыПеретаскивания.Значение.ПутьКДанным;
	ТипИзмерения = ПараметрыПеретаскивания.Значение.ТипИзмерения;
	
	Если Строка = Неопределено Тогда
		
		ПостроительОтчета.ИзмеренияСтроки.Добавить(ПутьКДанным,, ТипИзмерения);
		
	Иначе
		
		ПостроительОтчета.ИзмеренияСтроки.Вставить(ПутьКДанным,, ТипИзмерения,,, ПостроительОтчета.ИзмеренияСтроки.Индекс(Строка));
		
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
		
		ПостроительОтчета.ИзмеренияСтроки.Удалить(ПараметрыПеретаскивания.Значение);
		ПостроительОтчета.ИзмеренияКолонки.Удалить(ПараметрыПеретаскивания.Значение);
		
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеИзмеренияСтрокиПеретаскивание()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ТабличноеПолеИзмеренияКолонки

Процедура ТабличноеПолеИзмеренияКолонкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	// Действие "Выбор" не обрабатывается.
	// Разрешено перетаскивать только значения с типом "ИзмерениеПостроителяОтчета".
	Если ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Выбор И ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ИзмерениеПостроителяОтчета") Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеИзмеренияКолонкиПроверкаПеретаскивания()

Процедура ТабличноеПолеИзмеренияКолонкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ПутьКДанным = ПараметрыПеретаскивания.Значение.ПутьКДанным;
	ТипИзмерения = ПараметрыПеретаскивания.Значение.ТипИзмерения;
	
	Если Строка = Неопределено Тогда
		
		ПостроительОтчета.ИзмеренияКолонки.Добавить(ПутьКДанным,, ТипИзмерения);
		
	Иначе
		
		ПостроительОтчета.ИзмеренияКолонки.Вставить(ПутьКДанным,, ТипИзмерения,,, ПостроительОтчета.ИзмеренияКолонки.Индекс(Строка));
		
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
		
		ПостроительОтчета.ИзмеренияСтроки.Удалить(ПараметрыПеретаскивания.Значение);
		ПостроительОтчета.ИзмеренияКолонки.Удалить(ПараметрыПеретаскивания.Значение);
		
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеИзмеренияСтрокиПеретаскивание()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ КоманднаяПанельГруппировки

Процедура КоманднаяПанельГруппировкиДействиеПеренестиВИзмеренияКолонок(Кнопка)
	
	ЭлементыФормыТабличноеПолеИзмеренияСтроки = ЭлементыФормы["ТабличноеПолеИзмеренияСтроки" + СтрЗаменить(Панель.ТекущаяСтраница.Имя, "СтраницаНастройка", "")];
	ЭлементыФормыТабличноеПолеИзмеренияКолонки = ЭлементыФормы["ТабличноеПолеИзмеренияКолонки" + СтрЗаменить(Панель.ТекущаяСтраница.Имя, "СтраницаНастройка", "")];
	
	Если ЭлементыФормыТабличноеПолеИзмеренияСтроки.ТекущиеДанные <> Неопределено Тогда
		
		ПутьКДанным = ЭлементыФормыТабличноеПолеИзмеренияСтроки.ТекущиеДанные.ПутьКДанным;
		ТипИзмерения = ЭлементыФормыТабличноеПолеИзмеренияСтроки.ТекущиеДанные.ТипИзмерения;
		
		Если ЭлементыФормыТабличноеПолеИзмеренияКолонки.ТекущаяСтрока = Неопределено Тогда
			
			ПостроительОтчета.ИзмеренияКолонки.Добавить(ПутьКДанным, , ТипИзмерения);
			
		Иначе
			
			ПостроительОтчета.ИзмеренияКолонки.Вставить(ПутьКДанным,, ТипИзмерения,,, ПостроительОтчета.ИзмеренияКолонки.Индекс(ЭлементыФормыТабличноеПолеИзмеренияКолонки.ТекущаяСтрока) + 1);
			
		КонецЕсли;
			
		ПостроительОтчета.ИзмеренияСтроки.Удалить(ПостроительОтчета.ИзмеренияСтроки.Найти(ЭлементыФормыТабличноеПолеИзмеренияСтроки.ТекущиеДанные.Имя));
		
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельГруппировкиДействиеПеренестиВГруппировкиКолонок()

Процедура КоманднаяПанельГруппировкиДействиеПеренестиВИзмеренияСтрок(Кнопка)
	
	ЭлементыФормыТабличноеПолеИзмеренияСтроки = ЭлементыФормы["ТабличноеПолеИзмеренияСтроки" + СтрЗаменить(Панель.ТекущаяСтраница.Имя, "СтраницаНастройка", "")];
	ЭлементыФормыТабличноеПолеИзмеренияКолонки = ЭлементыФормы["ТабличноеПолеИзмеренияКолонки" + СтрЗаменить(Панель.ТекущаяСтраница.Имя, "СтраницаНастройка", "")];
	
	Если ЭлементыФормыТабличноеПолеИзмеренияКолонки.ТекущиеДанные <> Неопределено Тогда
		
		ПутьКДанным = ЭлементыФормыТабличноеПолеИзмеренияКолонки.ТекущиеДанные.ПутьКДанным;
		ТипИзмерения = ЭлементыФормыТабличноеПолеИзмеренияКолонки.ТекущиеДанные.ТипИзмерения;
		
		Если ЭлементыФормыТабличноеПолеИзмеренияСтроки.ТекущаяСтрока = Неопределено Тогда
			
			ПостроительОтчета.ИзмеренияСтроки.Добавить(ПутьКДанным, , ТипИзмерения);
			
		Иначе
			
			ПостроительОтчета.ИзмеренияСтроки.Вставить(ПутьКДанным,, ТипИзмерения,,, ПостроительОтчета.ИзмеренияСтроки.Индекс(ЭлементыФормыТабличноеПолеИзмеренияСтроки.ТекущаяСтрока) + 1);
			
		КонецЕсли;
			
		ПостроительОтчета.ИзмеренияКолонки.Удалить(ПостроительОтчета.ИзмеренияКолонки.Найти(ЭлементыФормыТабличноеПолеИзмеренияКолонки.ТекущиеДанные.Имя));
		
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельГруппировкиДействиеПеренестиВГруппировкиСтрок()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ТабличноеПолеОтобранныеИнтервалы

Процедура ТабличноеПолеОтобранныеИнтервалыПослеУдаления(Элемент)
	
	ОтобранныеИнтервалы.Сортировать("ВГраница");
	ОбновитьИнтервалы();
	
КонецПроцедуры // ТабличноеПолеОтобранныеИнтервалыПослеУдаления()

Процедура ТабличноеПолеОтобранныеИнтервалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока = Истина И Копирование = Ложь Тогда
		
		Элемент.ТекущиеДанные.ВГраница = Элемент.Колонки.ВГраница.ЭлементУправления.ОграничениеТипа.ПривестиЗначение(Элемент.ТекущиеДанные.ВГраница);
		
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеОтобранныеИнтервалыПриНачалеРедактирования()

Процедура ТабличноеПолеОтобранныеИнтервалыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОтобранныеИнтервалы.Сортировать("ВГраница");
	ОбновитьИнтервалы();
	
КонецПроцедуры // ТабличноеПолеОтобранныеИнтервалыПриОкончанииРедактирования()

Процедура ТабличноеПолеОтобранныеИнтервалыВГраницаПриИзменении(Элемент)
	
	_ОтобранныеИнтервалы = ОтобранныеИнтервалы.Скопировать();
	
	НоваяСтрока = _ОтобранныеИнтервалы.Добавить();
	НоваяСтрока.ВГраница = Элемент.Значение;
	
	_ОтобранныеИнтервалы.Свернуть("ВГраница");
	_ОтобранныеИнтервалы.Сортировать("ВГраница");
	
	НайденнаяСтрока = _ОтобранныеИнтервалы.Найти(Элемент.Значение);
	
	Если _ОтобранныеИнтервалы.Индекс(НайденнаяСтрока) > 0 Тогда
		
		НачальноеЗначение = _ОтобранныеИнтервалы[_ОтобранныеИнтервалы.Индекс(НайденнаяСтрока) - 1].ВГраница;
		
	Иначе
		
		НачальноеЗначение = "";
		
	КонецЕсли;
	
	КонечноеЗначение = Элемент.Значение;
	ЭлементыФормы.ТабличноеПолеОтобранныеИнтервалы.ТекущаяСтрока.Название = "" + НачальноеЗначение + ".." + КонечноеЗначение;
	
	Если _ОтобранныеИнтервалы.Индекс(НайденнаяСтрока) > 0 И _ОтобранныеИнтервалы.Индекс(НайденнаяСтрока) < _ОтобранныеИнтервалы.Количество() - 1 Тогда
		
		НачальноеЗначение = Элемент.Значение;
		КонечноеЗначение = _ОтобранныеИнтервалы[_ОтобранныеИнтервалы.Индекс(НайденнаяСтрока) + 1].ВГраница;
		ОтобранныеИнтервалы.Найти(_ОтобранныеИнтервалы[_ОтобранныеИнтервалы.Индекс(НайденнаяСтрока) + 1].ВГраница).Название = "" + НачальноеЗначение + ".." + КонечноеЗначение;
		
	КонецЕсли;
	
	ОбновитьИнтервалы();
	
КонецПроцедуры // ТабличноеПолеОтобранныеИнтервалыВГраницаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ТабличноеПолеОтбор

Процедура ТабличноеПолеОтборЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отборы по свойствам и категориям должны быть обработаны специальным образом
	// Они определяются по представлению 
	Если Найти(НРег(ЭлементыФормы["ТабличноеПолеОтбор" + СтрЗаменить(Панель.ТекущаяСтраница.Имя, "СтраницаНастройка", "")].ТекущаяСтрока.Представление), "св-во") Тогда

		Свойство = мСоответствиеНазначений.Получить(ЭлементыФормы["ТабличноеПолеОтбор" + СтрЗаменить(Панель.ТекущаяСтраница.Имя, "СтраницаНастройка", "")].ТекущаяСтрока.Представление);
		УправлениеОтчетами.ОсуществитьВыборСвойства(Элемент, Свойство, ЭтаФорма, СтандартнаяОбработка);
		
	ИначеЕсли Найти(НРег(ЭлементыФормы["ТабличноеПолеОтбор" + СтрЗаменить(Панель.ТекущаяСтраница.Имя, "СтраницаНастройка", "")].ТекущаяСтрока.Представление), "(категории)") Тогда
		
		Назначение = мСоответствиеНазначений.Получить(ЭлементыФормы["ТабличноеПолеОтбор" + СтрЗаменить(Панель.ТекущаяСтраница.Имя, "СтраницаНастройка", "")].ТекущаяСтрока.Представление);
		УправлениеОтчетами.ОсуществитьВыборКатегории(Элемент, Назначение, ЭтаФорма, СтандартнаяОбработка);

	КонецЕсли;
		
КонецПроцедуры // ТабличноеПолеОтборЗначениеНачалоВыбора()

Процедура ТабличноеПолеОтборПередУдалением(Элемент, Отказ)
	
	Если Не ПустаяСтрока(Элемент.ТекущаяСтрока.Имя) Тогда
		
		Отказ = Истина;
		
	КонецЕсли; 

КонецПроцедуры // ТабличноеПолеОтборПередУдалением()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ТабличноеПолеВыбранныеПоля

Процедура ТабличноеПолеВыбранныеПоляПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Элемент.Колонки.КолонкаРазмещение.ЭлементУправления.Значение = ПолучитьРазмещениеВыбранногоПоля(Элемент.ТекущиеДанные.Имя);
	Элемент.Колонки.КолонкаПоложение.ЭлементУправления.Значение = ПолучитьПоложениеВыбранногоПоля(Элемент.ТекущиеДанные.Имя);
	
КонецПроцедуры // ТабличноеПолеВыбранныеПоляПриНачалеРедактирования()

Процедура ТабличноеПолеВыбранныеПоляПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		Размещение = ПолучитьРазмещениеВыбранногоПоля(ДанныеСтроки.Имя);
		Если Размещение = ТипРазмещенияРеквизитовИзмерений.ВместеСИзмерениями Тогда
			
			Размещение = НСтр("ru='С группировками';uk='З групуванням'");
			
		ИначеЕсли Размещение = ТипРазмещенияРеквизитовИзмерений.Отдельно Тогда
			
			Размещение = НСтр("ru='В отдельных колонках';uk='В окремих колонках'");
			
		ИначеЕсли Размещение = ТипРазмещенияРеквизитовИзмерений.Вместе Тогда
			
			Размещение = НСтр("ru='В отдельной колонке';uk='В окремій колонці'");
			
		КонецЕсли;
		
		ОформлениеСтроки.Ячейки.КолонкаРазмещение.УстановитьТекст(Размещение);
		ОформлениеСтроки.Ячейки.КолонкаПоложение.УстановитьТекст(ПолучитьПоложениеВыбранногоПоля(ДанныеСтроки.Имя));
		
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеВыбранныеПоляПриВыводеСтроки()

Процедура ТабличноеПолеВыбранныеПоляПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущиеДанные <> Неопределено И НЕ ОтменаРедактирования Тогда
		
		УстановитьРазмещениеВыбранногоПоля(Элемент.ТекущиеДанные.Имя, Элемент.Колонки.КолонкаРазмещение.ЭлементУправления.Значение);
		УстановитьПоложениеВыбранногоПоля(Элемент.ТекущиеДанные.Имя, Элемент.Колонки.КолонкаПоложение.ЭлементУправления.Значение);
		
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеВыбранныеПоляПриОкончанииРедактирования()

Процедура ТабличноеПолеВыбранныеПоляКолонкаПоложениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ТабличноеПолеВыбранныеПоляКолонкаПоложениеОчистка()

Процедура ТабличноеПолеВыбранныеПоляКолонкаРазмещениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ТабличноеПолеВыбранныеПоляКолонкаРазмещениеОчистка()

Процедура ТабличноеПолеВыбранныеПоляКолонкаРазмещениеПриИзменении(Элемент)
	
	УстановитьРазмещениеВыбранногоПоля(ЭлементыФормы.ТабличноеПолеВыбранныеПоля.ТекущиеДанные.Имя, Элемент.Значение);
	
КонецПроцедуры // ТабличноеПолеВыбранныеПоляКолонкаРазмещениеПриИзменении()

Процедура ТабличноеПолеВыбранныеПоляКолонкаПоложениеПриИзменении(Элемент)
	
	УстановитьПоложениеВыбранногоПоля(ЭлементыФормы.ТабличноеПолеВыбранныеПоля.ТекущиеДанные.Имя, Элемент.Значение);
	
КонецПроцедуры // ТабличноеПолеВыбранныеПоляКолонкаПоложениеПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ТабличноеПолеУсловноеОформление

Процедура ТабличноеПолеУсловноеОформлениеПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		
		Если ОформлениеСтроки.ДанныеСтроки.Область.Количество() = 0 Тогда
			
			ОформлениеСтроки.Ячейки.Области.Текст = НСтр("ru='<Все поля>';uk='<Всі поля>'");
			
		КонецЕсли;
		
		Если ОформлениеСтроки.ДанныеСтроки.Отбор.Количество() = 0 Тогда
			
			ОформлениеСтроки.Ячейки.Отбор.Текст = НСтр("ru='<Без условия>';uk='<Без умови>'");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ТабличноеПолеУсловноеОформлениеПриПолученииДанных()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура НастройкаОтображенияФормы()
	
	Если мРежимФормыНастройкиБезГруппировокКолонок = Ложь И РасширеннаяНастройка = Ложь Тогда
		
		ЭтаФорма.Панель.ТекущаяСтраница = ЭтаФорма.Панель.Страницы.Найти("СтраницаНастройка1");
		ЭлементыФормы.ОсновныеДействияФормы1.Кнопки.Сформировать.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли мРежимФормыНастройкиБезГруппировокКолонок = Истина И РасширеннаяНастройка = Ложь Тогда
		
		ЭтаФорма.Панель.ТекущаяСтраница = ЭтаФорма.Панель.Страницы.Найти("СтраницаНастройка2");
		ЭлементыФормы.ОсновныеДействияФормы2.Кнопки.Сформировать.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		ЭтаФорма.Панель.ТекущаяСтраница = ЭтаФорма.Панель.Страницы.Найти("СтраницаНастройка");
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Сформировать.КнопкаПоУмолчанию = Истина;
		
		Если мТекущаяСтраницаНастройка <> Неопределено Тогда
			
			ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Получить(мТекущаяСтраницаНастройка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если мРежимВводаПериода = -1 Тогда
		
		ЭлементыФормы.ПанельВыборПериода.Видимость = Ложь;
		ЭлементыФормы.ПанельВыборПериода1.Видимость = Ложь;
		ЭлементыФормы.ПанельВыборПериода2.Видимость = Ложь;
	
	ИначеЕсли мРежимВводаПериода = 0 Тогда
		
		ЭлементыФормы.ПанельВыборПериода.ТекущаяСтраница = ЭлементыФормы.ПанельВыборПериода.Страницы.Найти("СтраницаПроизвольныйПериод");
		ЭлементыФормы.ПанельВыборПериода1.ТекущаяСтраница = ЭлементыФормы.ПанельВыборПериода1.Страницы.Найти("СтраницаПроизвольныйПериод");
		ЭлементыФормы.ПанельВыборПериода2.ТекущаяСтраница = ЭлементыФормы.ПанельВыборПериода2.Страницы.Найти("СтраницаПроизвольныйПериод");
		
	ИначеЕсли мРежимВводаПериода = 1 Тогда
		
		ЭлементыФормы.ПанельВыборПериода.ТекущаяСтраница = ЭлементыФормы.ПанельВыборПериода.Страницы.Найти("СтраницаНаДату");
		ЭлементыФормы.ПанельВыборПериода1.ТекущаяСтраница = ЭлементыФормы.ПанельВыборПериода1.Страницы.Найти("СтраницаНаДату");
		ЭлементыФормы.ПанельВыборПериода2.ТекущаяСтраница = ЭлементыФормы.ПанельВыборПериода2.Страницы.Найти("СтраницаНаДату");
		
	Иначе
		
		ЭлементыФормы.ПанельВыборПериода.ТекущаяСтраница = ЭлементыФормы.ПанельВыборПериода.Страницы.Найти("СтраницаПериод");
		ЭлементыФормы.ПанельВыборПериода1.ТекущаяСтраница = ЭлементыФормы.ПанельВыборПериода1.Страницы.Найти("СтраницаПериод");
		ЭлементыФормы.ПанельВыборПериода2.ТекущаяСтраница = ЭлементыФормы.ПанельВыборПериода2.Страницы.Найти("СтраницаПериод");
		
		Если мРежимВводаПериода = 2 Тогда
			
			ЭлементыФормы.Период.Формат = мСтруктураФорматаПолей.ПериодНеделя;
			ЭлементыФормы.Период1.Формат = мСтруктураФорматаПолей.ПериодНеделя;
			ЭлементыФормы.Период2.Формат = мСтруктураФорматаПолей.ПериодНеделя;
			
		ИначеЕсли мРежимВводаПериода = 3 Тогда
			
			ЭлементыФормы.Период.Формат = мСтруктураФорматаПолей.ПериодДекада;
			ЭлементыФормы.Период1.Формат = мСтруктураФорматаПолей.ПериодДекада;
			ЭлементыФормы.Период2.Формат = мСтруктураФорматаПолей.ПериодДекада;
			
		ИначеЕсли мРежимВводаПериода = 4 Тогда
			
			ЭлементыФормы.Период.Формат = мСтруктураФорматаПолей.ПериодМесяц;
			ЭлементыФормы.Период1.Формат = мСтруктураФорматаПолей.ПериодМесяц;
			ЭлементыФормы.Период2.Формат = мСтруктураФорматаПолей.ПериодМесяц;
			
		ИначеЕсли мРежимВводаПериода = 5 Тогда
			
			ЭлементыФормы.Период.Формат = мСтруктураФорматаПолей.ПериодКвартал;
			ЭлементыФормы.Период1.Формат = мСтруктураФорматаПолей.ПериодКвартал;
			ЭлементыФормы.Период2.Формат = мСтруктураФорматаПолей.ПериодКвартал;
			
		ИначеЕсли мРежимВводаПериода = 6 Тогда
			
			ЭлементыФормы.Период.Формат = мСтруктураФорматаПолей.ПериодПолугодие;
			ЭлементыФормы.Период1.Формат = мСтруктураФорматаПолей.ПериодПолугодие;
			ЭлементыФормы.Период2.Формат = мСтруктураФорматаПолей.ПериодПолугодие;
			
		ИначеЕсли мРежимВводаПериода = 7 Тогда
			
			ЭлементыФормы.Период.Формат = мСтруктураФорматаПолей.ПериодГод;
			ЭлементыФормы.Период1.Формат = мСтруктураФорматаПолей.ПериодГод;
			ЭлементыФормы.Период2.Формат = мСтруктураФорматаПолей.ПериодГод;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыФормы.Панель.Страницы.СтраницаИнтервалыГруппировок.Видимость = ИспользоватьИнтервальныеГруппировки;
	
КонецПроцедуры // НастройкаОтображенияФормы()

Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	ФормаНастройкаПериода(ЭтотОбъект);
	
КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

Процедура КнопкаМинусПериодНажатие(Элемент)
	
	УстановитьПериод(ДатаНач, ДатаКон, мРежимВводаПериода, -1);
	
КонецПроцедуры // КнопкаМинусПериодНажатие()

Процедура КнопкаПлюсПериодНажатие(Элемент)
	
	УстановитьПериод(ДатаНач, ДатаКон, мРежимВводаПериода, 1);
	
КонецПроцедуры // КнопкаПлюсПериодНажатие()

Процедура ФлажокИспользоватьСвойстваИКатегорииПриИзменении(Элемент)
	
	Перем ТекущиеНастройкиОтчета;
	
	ВладелецФормы.ОтчетОбъект.СформироватьСтруктуруДляСохраненияНастроек(ТекущиеНастройкиОтчета);
	ВладелецФормы.ОтчетОбъект.УстановитьНачальныеНастройки();
	ВладелецФормы.ОтчетОбъект.ВосстановитьНастройкиИзСтруктуры(ТекущиеНастройкиОтчета);
	
КонецПроцедуры // ФлажокИспользоватьСвойстваИКатегорииПриИзменении()

Процедура ФлажокРасширеннаяНастройкаПриИзменении(Элемент)
	
	НастройкаОтображенияФормы();
	
КонецПроцедуры // ФлажокРасширеннаяНастройкаПриИзменении()

Процедура ПолучитьИнтервалы()
	
	Если мСоответствиеТиповИнтервальныхПолей[ИнтервальноеПоле] = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НайденныеСтроки = Интервалы.НайтиСтроки(Новый Структура("ИнтервальноеПоле", ИнтервальноеПоле));
	
	ТипПоляГруппировки = мСоответствиеТиповИнтервальныхПолей[ИнтервальноеПоле];
	МассивТиповПоляГруппировки = Новый Массив;
	МассивТиповПоляГруппировки.Добавить(ТипПоляГруппировки);
	ОписаниеТиповПоляГруппировки = Новый ОписаниеТипов(МассивТиповПоляГруппировки);
	
	ОтобранныеИнтервалы.Очистить();
	
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		НоваяСтрока = ОтобранныеИнтервалы.Добавить();
		НоваяСтрока.ВГраница = НайденнаяСтрока.ВГраница;
		НоваяСтрока.Название = НайденнаяСтрока.Название;
		
	КонецЦикла;
	
	ЭлементыФормы.ТабличноеПолеОтобранныеИнтервалы.Колонки.ВГраница.ЭлементУправления.ОграничениеТипа = ОписаниеТиповПоляГруппировки;
	
	Если ТипПоляГруппировки = Тип("Число") Тогда
		
		ЭлементыФормы.ТабличноеПолеОтобранныеИнтервалы.Колонки.ВГраница.ЭлементУправления.Формат = "ЧЦ=" + ОписаниеТиповПоляГруппировки.КвалификаторыЧисла.Разрядность + ";ЧДЦ=" + ОписаниеТиповПоляГруппировки.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		
	ИначеЕсли ТипПоляГруппировки = Тип("Дата") Тогда
		
		Если ОписаниеТиповПоляГруппировки.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
			
			ЭлементыФормы.ОтобранныеИнтервалы.Колонки.ВГраница.ЭлементУправления.Формат = "ДФ = дд.ММММ.гггг";
			
		ИначеЕсли ОписаниеТиповПоляГруппировки.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
			
			ЭлементыФормы.ОтобранныеИнтервалы.Колонки.ВГраница.ЭлементУправления.Формат = "ДФ = чч:мм:сс";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьИнтервалы()

Процедура ОбновитьИнтервалы()
	
	НайденныеСтроки = Интервалы.НайтиСтроки(Новый Структура("ИнтервальноеПоле", ИнтервальноеПоле));
	
	Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
		
		Интервалы.Удалить(НайденнаяСтрока);
		
	КонецЦикла;
	
	Для Каждого ОтобранныйИнтервал Из ОтобранныеИнтервалы Цикл
		
		НовыйИнтервал = Интервалы.Добавить();
		НовыйИнтервал.ВГраница = ОтобранныйИнтервал.ВГраница;
		НовыйИнтервал.ИнтервальноеПоле = ИнтервальноеПоле;
		НовыйИнтервал.Название = ОтобранныйИнтервал.Название;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьИнтервалы()

Процедура ИнициализацияИнтерваловГруппировок()
	
	Если ИспользоватьИнтервальныеГруппировки Тогда
		
		Для каждого ДоступноеПоле из ПостроительОтчета.ДоступныеПоля Цикл
			
			Если ДоступноеПоле.Измерение Тогда
				
				Если Прав(ДоступноеПоле.Имя,2) = "ИН" Тогда
					
					ЭлементыФормы.ПолеВыбораИнтервальноеПоле.СписокВыбора.Добавить(ДоступноеПоле.Имя, ДоступноеПоле.Представление);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ИзмеренияСтроки из ПостроительОтчета.ИзмеренияСтроки Цикл
			
			НайденнаяСтрока = ЭлементыФормы.ПолеВыбораИнтервальноеПоле.СписокВыбора.НайтиПоЗначению(ИзмеренияСтроки.ПутьКДанным);
			
			Если НайденнаяСтрока <> Неопределено Тогда
				
				ИнтервальноеПоле = НайденнаяСтрока.Значение;
				ПолучитьИнтервалы(); 
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЭлементыФормы.ТабличноеПолеОтобранныеИнтервалы.ТолькоПросмотр = Не ЗначениеЗаполнено(ИнтервальноеПоле);
		
	КонецЕсли;
	
КонецПроцедуры // ИнициализацияИнтерваловГруппировок()

Процедура ТабличноеПолеИзмеренияСтрокиПолеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Выбор = ПолеНачалоВыбора(, ЭлементыФормы.ТабличноеПолеИзмеренияСтроки.ТекущиеДанные, Истина);
	ПолеОбработкаВыбора(Элемент, Выбор, ЭлементыФормы.ТабличноеПолеИзмеренияСтроки, СтандартнаяОбработка);
	
КонецПроцедуры // ТабличноеПолеИзмеренияСтрокиПолеНачалоВыбора()

Процедура ТабличноеПолеИзмеренияКолонкиПолеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Выбор = ПолеНачалоВыбора(, ЭлементыФормы.ТабличноеПолеИзмеренияКолонки.ТекущиеДанные, Истина);
	ПолеОбработкаВыбора(Элемент, Выбор, ЭлементыФормы.ТабличноеПолеИзмеренияКолонки, СтандартнаяОбработка);
	
КонецПроцедуры // ТабличноеПолеИзмеренияКолонкиПолеНачалоВыбора()

Процедура ТабличноеПолеОтборИмяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Выбор = ПолеНачалоВыбора(, ЭлементыФормы.ТабличноеПолеОтбор.ТекущиеДанные,, Истина);
	ПолеОбработкаВыбора(Элемент, Выбор, ЭлементыФормы.ТабличноеПолеОтбор, СтандартнаяОбработка);
	
КонецПроцедуры // ТабличноеПолеОтборИмяНачалоВыбора()

Процедура ТабличноеПолеВыбранныеПоляПолеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Выбор = ПолеНачалоВыбора(, ЭлементыФормы.ТабличноеПолеВыбранныеПоля.ТекущиеДанные,,, Истина);
	ПолеОбработкаВыбора(Элемент, Выбор, ЭлементыФормы.ТабличноеПолеВыбранныеПоля, СтандартнаяОбработка);
	
КонецПроцедуры // ТабличноеПолеВыбранныеПоляПолеНачалоВыбора()

Процедура ТабличноеПолеПорядокИмяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Выбор = ПолеНачалоВыбора(, ЭлементыФормы.ТабличноеПолеПорядок.ТекущиеДанные,,,, Истина);
	ПолеОбработкаВыбора(Элемент, Выбор, ЭлементыФормы.ТабличноеПолеПорядок, СтандартнаяОбработка);
	
КонецПроцедуры // ТабличноеПолеПорядокИмяНачалоВыбора()

Процедура ТабличноеПолеИзмеренияСтроки1ПолеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Выбор = ПолеНачалоВыбора(, ЭлементыФормы.ТабличноеПолеИзмеренияСтроки1.ТекущиеДанные, Истина);
	ПолеОбработкаВыбора(Элемент, Выбор, ЭлементыФормы.ТабличноеПолеИзмеренияСтроки1, СтандартнаяОбработка);
	
КонецПроцедуры // ТабличноеПолеИзмеренияСтроки1ПолеНачалоВыбора()

Процедура ТабличноеПолеИзмеренияКолонки1ПолеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Выбор = ПолеНачалоВыбора(, ЭлементыФормы.ТабличноеПолеИзмеренияКолонки1.ТекущиеДанные, Истина);
	ПолеОбработкаВыбора(Элемент, Выбор, ЭлементыФормы.ТабличноеПолеИзмеренияКолонки1, СтандартнаяОбработка);
	
КонецПроцедуры // ТабличноеПолеИзмеренияКолонки1ПолеНачалоВыбора()

Процедура ТабличноеПолеОтбор1ИмяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Выбор = ПолеНачалоВыбора(, ЭлементыФормы.ТабличноеПолеОтбор1.ТекущиеДанные,, Истина);
	ПолеОбработкаВыбора(Элемент, Выбор, ЭлементыФормы.ТабличноеПолеОтбор1, СтандартнаяОбработка);
	
КонецПроцедуры // ТабличноеПолеОтбор1ИмяНачалоВыбора()

Процедура ТабличноеПолеИзмеренияСтроки2ПолеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Выбор = ПолеНачалоВыбора(, ЭлементыФормы.ТабличноеПолеИзмеренияСтроки2.ТекущиеДанные, Истина);
	ПолеОбработкаВыбора(Элемент, Выбор, ЭлементыФормы.ТабличноеПолеИзмеренияСтроки2, СтандартнаяОбработка);
	
КонецПроцедуры // ТабличноеПолеИзмеренияСтроки2ПолеНачалоВыбора()

Процедура ТабличноеПолеОтбор2ИмяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Выбор = ПолеНачалоВыбора(, ЭлементыФормы.ТабличноеПолеОтбор2.ТекущиеДанные,, Истина);
	ПолеОбработкаВыбора(Элемент, Выбор, ЭлементыФормы.ТабличноеПолеОтбор2, СтандартнаяОбработка);
	
КонецПроцедуры // ТабличноеПолеОтбор2ИмяНачалоВыбора()
