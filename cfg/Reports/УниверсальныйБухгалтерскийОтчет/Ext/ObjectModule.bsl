////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА УПРАВЛЕНИЯ НАСТРОЙКАМИ

Функция ПолучитьОписаниеРодительскойПричиныИнформацииОбОшибке(ИнформацияОбОшибке) Экспорт
	
	Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
		ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
	КонецЦикла;
	Возврат ИнформацияОбОшибке.Описание;

КонецФункции

Функция мЗаполнитьНастройкиПриОткрытииОтчета(ФормаОтчета) Экспорт
	
	//Пользователи = УправлениеПользователями.СписокГруппВключающихПользователя();
	Пользователи = Новый Массив;
	Пользователи.Добавить(ПараметрыСеанса.ТекущийПользователь);
	Пользователи.Добавить(Справочники.ГруппыПользователей.ВсеПользователи);
	
	Запрос = Новый Запрос;
	Если Метаданные.Справочники.СохраненныеНастройки.ТабличныеЧасти.Найти("Пользователи") <> Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	СохраненныеНастройки.Ссылка КАК СохраненнаяНастройка
		|ИЗ
		|	Справочник.СохраненныеНастройки.Пользователи КАК СохраненныеНастройкиПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СохраненныеНастройки КАК СохраненныеНастройки
		|		ПО СохраненныеНастройкиПользователи.Ссылка = СохраненныеНастройки.Ссылка
		|ГДЕ
		|	СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
		|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
		|	И СохраненныеНастройкиПользователи.Пользователь В(&Пользователи)
		|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
		
		Запрос.УстановитьПараметр("Пользователи", Пользователи);
		Запрос.УстановитьПараметр("НастраиваемыйОбъект", ФормаОтчета.ИдентификаторОбъекта);
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	СохраненныеНастройки.Ссылка КАК СохраненнаяНастройка
		|ИЗ
		|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
		|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
		|	И СохраненныеНастройки.Владелец В(&Пользователи)
		|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
		
		Запрос.УстановитьПараметр("Пользователи", Пользователи);
		Запрос.УстановитьПараметр("НастраиваемыйОбъект", ФормаОтчета.ИдентификаторОбъекта);
	КонецЕсли;

	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультата.Количество() > 0 Тогда
		ФормаОтчета.СохраненнаяНастройка = ТаблицаРезультата[0].СохраненнаяНастройка;
		ФормаОтчета.ПрименитьНастройку();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// По структуре параметров восстанавливает состояние отчета
Процедура мПрименитьСтруктуруПараметровОтчета(ФормаОтчета, СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ФормаОтчета, СтруктураПараметров);
	ФормаОтчета.ИнициализацияОтчета();
	ФормаОтчета.КН.ЗагрузитьНастройки(СтруктураПараметров.НастройкиКомпоновщика);
	
КонецПроцедуры

// Возвращает структуру параметров отчета для сохранения
Функция мПолучитьСтруктуруПараметровТиповогоОтчета(ФормаОтчета) Экспорт
	
	СтруктураПараметров = Новый Структура;
	Для каждого Реквизит Из ФормаОтчета.Реквизиты Цикл
		СтруктураПараметров.Вставить(Реквизит, ФормаОтчета[Реквизит])
	КонецЦикла;
	
	СтруктураПараметров.Вставить("НастройкиКомпоновщика", ФормаОтчета.КН.ПолучитьНастройки());
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Процедура открывает форму выбора настройки форм.
//
// Параметры:
//  ФормаВладелец            - Форма - форма, которая является владельцем формы выбора.
//  НастраиваемыйОбъект       - объект, для которой выбирается настройка.
//  РежимСохраненияНастройки - Истина - форма открыта для выбора сохраняемой настройки.
//
Процедура мВыбратьНастройкуФормы(СохраненнаяНастройка, ФормаВладелец, НастраиваемыйОбъект, РежимСохраненияНастройки, Наименование = "") Экспорт

	ФормаВыбора = Справочники.СохраненныеНастройки.ПолучитьФормуВыбора(, ФормаВладелец);
	ФормаВыбора.Отбор.НастраиваемыйОбъект.Установить(НастраиваемыйОбъект);
	Если Найти(НастраиваемыйОбъект, "ОтчетОбъект") > 0 Тогда
		ФормаВыбора.Отбор.ТипНастройки.Установить(Перечисления.ТипыНастроек.НастройкиОтчета);
	КонецЕсли;
	ФормаВыбора.Отбор.НастраиваемыйОбъект.Установить(НастраиваемыйОбъект);
	ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	СписокДоступныхВариантов = ТиповыеОтчеты.ПолучитьСписокДоступныхВариантов(НастраиваемыйОбъект);
	Для каждого ДоступныйВариант Из СписокДоступныхВариантов Цикл
		Если ДоступныйВариант.Пометка или НЕ РежимСохраненияНастройки Тогда
			ФормаВыбора.Отбор.Ссылка.Значение.Добавить(ДоступныйВариант.Значение);
		КонецЕсли;
	КонецЦикла;
	ФормаВыбора.Наименование             = Наименование;
	ФормаВыбора.ПараметрТекущаяСтрока    = СохраненнаяНастройка;
	ФормаВыбора.РежимСохраненияНастройки = РежимСохраненияНастройки;
	//ФормаВыбора.ЭлементыФормы.СправочникСписокСохраненныеНастройки.Колонки.Владелец.Видимость = Ложь;
	ФормаВыбора.ОткрытьМодально();
	ФормаВыбора.Активизировать();

КонецПроцедуры

// Устанавливает параметр вывода компоновщика настроек
Функция мУстановитьПараметрВывода(КомпоновщикНастроекГруппировка, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = мПолучитьПараметрВывода(КомпоновщикНастроекГруппировка, ИмяПараметра);
	
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
		Возврат ЗначениеПараметра;
	КонецЕсли;
	
КонецФункции

// Получает параметр вывода компоновщика настроек
Функция мПолучитьПараметрВывода(КомпоновщикНастроекГруппировка, ИмяПараметра) Экспорт
	
	МассивПараметров   = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяПараметра, ".");
	УровеньВложенности = МассивПараметров.Количество();
	
	Если УровеньВложенности > 1 Тогда
		ИмяПараметра = МассивПараметров[0];		
	КонецЕсли;
	
	Если ТипЗнч(КомпоновщикНастроекГруппировка) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекГруппировка.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Иначе
		ЗначениеПараметра = КомпоновщикНастроекГруппировка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Если УровеньВложенности > 1 Тогда
		Для Индекс = 1 По УровеньВложенности - 1 Цикл
			ИмяПараметра = ИмяПараметра + "." + МассивПараметров[Индекс];
			ЗначениеПараметра = ЗначениеПараметра.ЗначенияВложенныхПараметров.Найти(ИмяПараметра); 
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;  
	
КонецФункции

// Добавляет отбор в набор отборов компоновщика или группы отборов
// Добавляет отбор в набор отборов компоновщика или группы отборов
Функция мДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение  = Поле;
	НовыйЭлемент.ВидСравнения   = ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = Значение;
	Возврат НовыйЭлемент;
	
КонецФункции

// Устанавливает параметр данных компоновщика настроек
Функция мУстановитьПараметр(КомпоновщикНастроекКоллекцияЗначений, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	ИначеЕсли ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Найти(ИмяПараметра);
	ИначеЕсли ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
		Возврат ЗначениеПараметра;
	КонецЕсли;
	
КонецФункции

// Получает параметр данных компоновщика настроек
Функция мПолучитьПараметр(КомпоновщикНастроекКоллекцияЗначений, ИмяПараметра) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 ИЛИ ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	ИначеЕсли ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Найти(ИмяПараметра);
	ИначеЕсли ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Возврат ЗначениеПараметра;

КонецФункции

Процедура мСохранитьНастройку(ФормаОтчета) Экспорт
	
	СтруктураНастроек = мПолучитьСтруктуруПараметровТиповогоОтчета(ФормаОтчета);
	
	Если ФормаОтчета.СохраненнаяНастройка = Неопределено Тогда
		Настройка = Справочники.СохраненныеНастройки.СоздатьЭлемент();
		Попытка
			Настройка.Владелец = глЗначениеПеременной("глТекущийПользователь");
		Исключение
		КонецПопытки;
		Настройка.НастраиваемыйОбъект = ФормаОтчета.ИдентификаторОбъекта;
		Попытка
			Настройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета;
		Исключение
			Настройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиОтчета;
		КонецПопытки;
		Настройка.Наименование = "НастройкиПользователяНастройкиОтчета";
		Настройка.ИспользоватьПриОткрытии = Истина;
		Попытка
			НовыйПользователь = Настройка.Пользователи.Добавить();
			НовыйПользователь.Пользователь = глЗначениеПеременной("глТекущийПользователь");
		Исключение
		КонецПопытки;
		Настройка.Записать();
		
		ФормаОтчета.СохраненнаяНастройка = Настройка.Ссылка;
	КонецЕсли;
	
	СохранениеНастроек.СохранитьНастройкуОбъекта(ФормаОтчета.СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Функция добавляет выбранное поле в набор выбранных полей
Функция мДобавитьВыбранноеПоле(ЭлементСтруктуры, Знач Поле, Заголовок = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Поле;
	Если Заголовок <> Неопределено Тогда
		ВыбранноеПоле.Заголовок = Заголовок;
	КонецЕсли;
	Возврат ВыбранноеПоле;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ
////////////////////////////////////////////////////////////////////////////////

//Процедура назначает форме уникальный ключ идентификации для возможности открытия нескольких одинаковых форм
Процедура мНазначитьФормеУникальныйКлючИдентификации(ФормаОтчета) Экспорт
	
	Если ФормаОтчета.КлючУникальности = Неопределено Тогда
		ФормаОтчета.КлючУникальности = Новый УникальныйИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

Процедура мДобавитьГруппировкуПоПериоду(ФормаОтчета, Структура) Экспорт
	
	Если ФормаОтчета.Периодичность > 0 Тогда
		Если ТипЗнч(Структура) = Тип("ГруппировкаКомпоновкиДанных") Тогда 
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(Структура) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Структура = Структура.Структура.Добавить();
		КонецЕсли;
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(?(ФормаОтчета.Периодичность = 2, "Регистратор", "Период"));		
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
		Если ФормаОтчета.Периодичность = 2 Тогда
			мДобавитьОтбор(Структура.Отбор, "Регистратор", 0, ВидСравненияКомпоновкиДанных.Заполнено);
			мУстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция мСкопироватьПараметрСхемыКомпоновкиДанных(СхемаКомпоновкиДанных, Приемник, Источник, ЗначениеПриемника = Неопределено) Экспорт
	
	Если ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		Параметры = СхемаКомпоновкиДанных.Параметры;
		
		НовыйПараметр = Параметры.Найти(Приемник);
		Если НовыйПараметр = Неопределено Тогда
			НовыйПараметр = Параметры.Добавить();
		КонецЕсли;
		
		ПараметрИсточник = Параметры.Найти(Источник);
		
		Если ПараметрИсточник = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			ЗаполнитьЗначенияСвойств(НовыйПараметр, ПараметрИсточник);
			НовыйПараметр.Имя = Приемник;
			Если ЗначениеПриемника <> Неопределено Тогда
				НовыйПараметр.Значение = ЗначениеПриемника;
			КонецЕсли;
		КонецЕсли;
		
		Возврат НовыйПараметр;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция мПолучитьСтруктуруПоказателейОтчета(БУ = Истина, НУ = Ложь, Контроль = Ложь, ВалютнаяСумма = Истина, РазвернутоеСальдо = Ложь) Экспорт
	
	Возврат Новый Структура("БУ, НУ, Контроль, ВалютнаяСумма, РазвернутоеСальдо", 
							Новый Структура("Значение, Использование, Представление", Истина, БУ,                "БУ (данные бухгалтерского учета)"),
							Новый Структура("Значение, Использование, Представление", Ложь,   НУ,                "НУ (данные налогового учета)"),
							Новый Структура("Значение, Использование, Представление", Ложь,   Контроль,          "Контроль (БУ - НУ)"),
							Новый Структура("Значение, Использование, Представление", Ложь,   ВалютнаяСумма,     "Валютная сумма"),
							Новый Структура("Значение, Использование, Представление", Ложь,   РазвернутоеСальдо, "Развернутое сальдо"));
	
КонецФункции

Функция мПолучитьКопиюОписанияМакета(ОписаниеМакета, ФормаЗаписи = Неопределено) Экспорт
	
	Если ФормаЗаписи = Неопределено Тогда
		ФормаЗаписи = "{http://v8.1c.ru/8.1/data-composition-system/composition-template}";
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОписаниеМакета, "item", ФормаЗаписи);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML, ТипЗнч(ОписаниеМакета));
	
КонецФункции

Функция мПолучитьМакетШапки(МакетКомпоновки, Тело = Неопределено, ТипМакета = "Заголовок") Экспорт
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Если Тело.Количество() > 0 Тогда
		Если ТипМакета = "Заголовок" Тогда
			НачальныйИндекс = 0;
			КонечныйИндекс  = Тело.Количество();
			ИтераторПрямой  = Истина;
		ИначеЕсли ТипМакета = "Подвал" Тогда 
			НачальныйИндекс = Тело.Количество() - 1;
			КонечныйИндекс  = 0;
			ИтераторПрямой  = Ложь;
		КонецЕсли;
		
		Индекс = НачальныйИндекс;
		Пока Индекс <> КонечныйИндекс Цикл
			Элемент = Тело[Индекс];
			Если ТипЗнч(Элемент) = Тип("МакетОбластиМакетаКомпоновкиДанных") Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.Макет];	
			ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаМакетаКомпоновкиДанных") Тогда
				Индекс = Индекс + 1;				
			КонецЕсли;
			
			Если ИтераторПрямой Тогда
				Индекс = Индекс + 1;
			Иначе
				Индекс = Индекс - 1;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция мПолучитьМакетПодвала(МакетКомпоновки, Тело = Неопределено) Экспорт
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Если Не ПустаяСтрока(Элемент.МакетПодвала) Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.МакетПодвала];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции

Функция мПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь, ТипМакета = "Заголовок") Экспорт
	
	МассивМакетов = Новый Массив;
	
	мОбойтиТелоМакетаКомпоновки(МакетКомпоновки, МакетКомпоновки.Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях, ТипМакета);	
	
	Возврат МассивМакетов;
	
КонецФункции

Процедура мОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь, ТипМакета) 
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Для Каждого ЭлементГруппировки Из Элемент.Группировка Цикл
				Если Найти(ЭлементГруппировки.ИмяПоля, ПолеГруппировки) = 1 Тогда 
					МакетТело = мПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело, ТипМакета);
					Если МакетТело <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТело);  
					КонецЕсли;
					МакетТелоИерархии = мПолучитьМакетШапки(МакетКомпоновки, Элемент.ТелоИерархии, ТипМакета);
					Если МакетТелоИерархии <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТелоИерархии);
					КонецЕсли;
				КонецЕсли; 
				мОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Элемент.Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях, ТипМакета);
			КонецЦикла;
		КонецЕсли;
		Если ИскатьВДетальныхЗаписях Тогда
			Если ТипЗнч(Элемент) = Тип("ЗаписиМакетаКомпоновкиДанных") Тогда
				Если Элемент.Имя = ПолеГруппировки Тогда
					МассивМакетов.Добавить(мПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело));	
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция мПолучитьСвойствоПоля(ЭлементСтруктура, Поле, Свойство = "Заголовок") Экспорт
	
	Если ТипЗнч(ЭлементСтруктура) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Коллекция = ЭлементСтруктура.Настройки.ДоступныеПоляВыбора;
	Иначе
		Коллекция = ЭлементСтруктура;
	КонецЕсли;
	
	ПолеСтрокой = Строка(Поле);
	ПозицияКвадратнойСкобки = Найти(ПолеСтрокой, "[");
	Окончание = "";
	Заголовок = "";
	Если ПозицияКвадратнойСкобки > 0 Тогда
		Окончание = Сред(ПолеСтрокой, ПозицияКвадратнойСкобки);
		ПолеСтрокой = Лев(ПолеСтрокой, ПозицияКвадратнойСкобки - 2);
	КонецЕсли;
	
	МассивСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПолеСтрокой, ".");
	
	Если Не ПустаяСтрока(Окончание) Тогда
		МассивСтрок.Добавить(Окончание);
	КонецЕсли;
	
	ДоступныеПоля = Коллекция.Элементы;
	ПолеПоиска = "";
	Для Индекс = 0 По МассивСтрок.Количество() - 1 Цикл
		ПолеПоиска = ПолеПоиска + ?(Индекс = 0, "", ".") + МассивСтрок[Индекс];
		ДоступноеПоле = ДоступныеПоля.Найти(ПолеПоиска);
		Если ДоступноеПоле <> Неопределено Тогда
			ДоступныеПоля = ДоступноеПоле.Элементы;
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступноеПоле <> Неопределено Тогда
		Результат = ДоступноеПоле[Свойство]; 
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция мКонецПериода(Период, Периодичность) Экспорт
	
	КонецПериода = Период;
	Если Периодичность = 6 Тогда       //День
		КонецПериода = КонецДня(Период);
	ИначеЕсли Периодичность = 7 Тогда  //Неделя
		КонецПериода = КонецНедели(Период);
	ИначеЕсли Периодичность = 8 Тогда  //Декада
		Если День(Период) > 20 Тогда
			КонецПериода = КонецМесяца(Период);
		Иначе
			КонецПериода = КонецДня(Период + 10 * 86400 - 1);
		КонецЕсли; 
	ИначеЕсли Периодичность = 9 Тогда  //Месяц
		КонецПериода = КонецМесяца(Период);
	ИначеЕсли Периодичность = 10 Тогда //Квартал
		КонецПериода = КонецКвартала(Период);
	ИначеЕсли Периодичность = 11 Тогда //Полугодие
		КонецПериода = ?(Месяц(Период) < 7, КонецДня(Дата(Год(Период), 6, 30)), КонецДня(Дата(Год(Период), 12, 31)));
	ИначеЕсли Периодичность = 12 Тогда //Год
		КонецПериода = КонецГода(Период);
	КонецЕсли;
	
	Возврат КонецПериода;
	
КонецФункции

Функция мПолучитьТипДополненияПоИнтервалу(Интервал = 0) Экспорт
	
	ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
	
	Если Интервал = 6 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.День;
	ИначеЕсли Интервал = 7 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Неделя;
	ИначеЕсли Интервал = 8 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Декада;
	ИначеЕсли Интервал = 9 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Месяц;
	ИначеЕсли Интервал = 10 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Квартал;
	ИначеЕсли Интервал = 11 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Полугодие;
	ИначеЕсли Интервал = 12 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Год;
	КонецЕсли;
	
	Возврат ТипДополнения;	
	
КонецФункции

Функция мПолучитьВидПодписейКДиаграмме(Значение = 0) Экспорт
	
	ВидПодписей = ВидПодписейКДиаграмме.Нет;
	
	Если Значение = 0 Тогда
		ВидПодписей = ВидПодписейКДиаграмме.Нет;
	ИначеЕсли Значение = 1 Тогда
		ВидПодписей = ВидПодписейКДиаграмме.Серия;
	ИначеЕсли Значение = 2 Тогда
		ВидПодписей = ВидПодписейКДиаграмме.Значение;
	ИначеЕсли Значение = 3 Тогда
		ВидПодписей = ВидПодписейКДиаграмме.Процент;
	ИначеЕсли Значение = 4 Тогда
		ВидПодписей = ВидПодписейКДиаграмме.СерияПроцент;
	ИначеЕсли Значение = 5 Тогда
		ВидПодписей = ВидПодписейКДиаграмме.СерияЗначение;
	ИначеЕсли Значение = 6 Тогда
		ВидПодписей = ВидПодписейКДиаграмме.СерияЗначениеПроцент;
	ИначеЕсли Значение = 7 Тогда
		ВидПодписей = ВидПодписейКДиаграмме.ЗначениеПроцент;
	ИначеЕсли Значение = 8 Тогда
		ВидПодписей = ВидПодписейКДиаграмме.Точка;
	ИначеЕсли Значение = 9 Тогда
		ВидПодписей = ВидПодписейКДиаграмме.ТочкаПроцент;
	ИначеЕсли Значение = 10 Тогда
		ВидПодписей = ВидПодписейКДиаграмме.ТочкаЗначение;
	ИначеЕсли Значение = 11 Тогда
		ВидПодписей = ВидПодписейКДиаграмме.ТочкаЗначениеПроцент;
	ИначеЕсли Значение = 12 Тогда
		ВидПодписей = ВидПодписейКДиаграмме.СерияТочка;
	ИначеЕсли Значение = 13 Тогда
		ВидПодписей = ВидПодписейКДиаграмме.СерияТочкаПроцент;
	ИначеЕсли Значение = 14 Тогда
		ВидПодписей = ВидПодписейКДиаграмме.СерияТочкаЗначение;
	ИначеЕсли Значение = 15 Тогда
		ВидПодписей = ВидПодписейКДиаграмме.СерияТочкаЗначениеПроцент;
	КонецЕсли;
	
	Возврат ВидПодписей;
	
КонецФункции

Функция мПолучитьВидДиаграммы(Значение = 0) Экспорт
	
	ВидДиаграммы = ТипДиаграммы.График;
	
	Если Значение = 0 Тогда
		ВидДиаграммы = ТипДиаграммы.График;
	ИначеЕсли Значение = 1 Тогда
		ВидДиаграммы = ТипДиаграммы.ГистограммаОбъемная;
	ИначеЕсли Значение = 2 Тогда
		ВидДиаграммы = ТипДиаграммы.ГистограммаСНакоплениемОбъемная;
	ИначеЕсли Значение = 3 Тогда
		ВидДиаграммы = ТипДиаграммы.ГистограммаГоризонтальнаяОбъемная;
	ИначеЕсли Значение = 4 Тогда
		ВидДиаграммы = ТипДиаграммы.ГистограммаСНакоплениемГоризонтальнаяОбъемная;
	ИначеЕсли Значение = 5 Тогда
		ВидДиаграммы = ТипДиаграммы.КруговаяОбъемная;
	ИначеЕсли Значение = 6 Тогда
		ВидДиаграммы = ТипДиаграммы.Изометрическая;
	ИначеЕсли Значение = 7 Тогда
		ВидДиаграммы = ТипДиаграммы.ИзометрическаяНепрерывная;
	ИначеЕсли Значение = 8 Тогда
		ВидДиаграммы = ТипДиаграммы.Измерительная;
	ИначеЕсли Значение = 9 Тогда
		ВидДиаграммы = ТипДиаграммы.ГрафикСНакоплением;
	КонецЕсли;
	
	Возврат ВидДиаграммы;
	
КонецФункции

Процедура мУстановитьДополнениеПоляГруппировки(Группировка, ТипДополнения, ИмяПоля = "Период") Экспорт

	Для каждого ПолеГруппировки Из Группировка.ПоляГруппировки.Элементы Цикл
		Если ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
			ПолеГруппировки.ТипДополнения = ТипДополнения;
			Возврат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция мПолучитьТекстЗаголовка(ОтчетОбъект, ЗаголовокТекст = "") Экспорт
	
	ТекстОрганизации = "";
	
	Если ОтчетОбъект.Метаданные().Реквизиты.Найти("Период") = Неопределено Тогда
		Попытка
			ТекстПериод = " за " + ПредставлениеПериода(НачалоДня(ОтчетОбъект.НачалоПериода), КонецДня(ОтчетОбъект.КонецПериода), "ФП");
		Исключение
			ТекстПериод = "";
		КонецПопытки;
	Иначе
		Если ЗначениеЗаполнено(ОтчетОбъект.Период) Тогда 
			ТекстПериод = " на " + Формат(ОтчетОбъект.Период, "ДФ=dd.MM.yyyy");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовокОтчета = "" + ЗаголовокТекст;
	
	Если ЗначениеЗаполнено(ТекстПериод) Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + ТекстПериод;
	КонецЕсли;
	
	Возврат ЗаголовокОтчета;
	
КонецФункции

Функция мПолучитьПредставлениеПериодичности(Периодичность) 
	
	Представление = "";
	Если Периодичность = 6 Тогда
		Представление = "по дням";
	ИначеЕсли Периодичность = 7 Тогда
		Представление = "по неделям";
	ИначеЕсли Периодичность = 8 Тогда
		Представление = "по декадам";
	ИначеЕсли Периодичность = 9 Тогда
		Представление = "по месяцам";
	ИначеЕсли Периодичность = 10 Тогда
		Представление = "по кварталам";
	ИначеЕсли Периодичность = 11 Тогда
		Представление = "по полугодиям";
	ИначеЕсли Периодичность = 12 Тогда
		Представление = "по годам";
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция мПолучитьПредставлениеПериода(ФормаОтчета = Неопределено, НачалоПериода = Неопределено, КонецПериода = Неопределено, ТолькоДаты  = Ложь) Экспорт
	
	ТекстПериод = "";
	
	Если ФормаОтчета <> Неопределено Тогда 
		НачалоПериода = ФормаОтчета.НачалоПериода;
		КонецПериода  = ФормаОтчета.КонецПериода;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда 
		Если КонецПериода >= НачалоПериода Тогда
			ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, Найти(ТекстПериод, " - ")), " - ...");
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции

Функция мПолучитьЦветНеИспользуемогоЭлемента() Экспорт 
	
	Возврат Новый Цвет(117, 117, 117);
	
КонецФункции

Процедура мДобавитьОтборДляПоказателяКонтроль(ФормаОтчета) Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("НУ");
	
КонецПроцедуры

Функция мПолучитьСписокСчетовПоСубсчетам(Таблица) Экспорт
	
	СписокСчетовПоСубсчетам = Новый СписокЗначений;
	Для каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы.ПоСубсчетам И СтрокаТаблицы.Использование Тогда
			СписокСчетовПоСубсчетам.Добавить(СтрокаТаблицы.Счет);
		КонецЕсли;
	КонецЦикла;
	
    Возврат СписокСчетовПоСубсчетам;
	
КонецФункции

Функция мПолучитьТипИзмеренияПостроителяОтчетаПоУмолчанию()
	
	ТипДетализацииПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ТипДетализацииСтандартныхОтчетов");
	
	Если ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы Тогда
		Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	ИначеЕсли ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
		Возврат ТипИзмеренияПостроителяОтчета.Иерархия;
	ИначеЕсли ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
		Возврат ТипИзмеренияПостроителяОтчета.ТолькоИерархия;
	Иначе
		Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	КонецЕсли;
	
КонецФункции

Функция мВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ПолеТабличногоДокумента) Экспорт
	
	Сумма = 0;
	Для Каждого Область Из ПолеТабличногоДокумента.ВыделенныеОбласти Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Для ИндексСтрока = Область.Верх По Область.Низ Цикл
				Для ИндексКолонка = Область.Лево По Область.Право Цикл
					Попытка
						Сумма = Сумма + Число(СтрЗаменить(ПолеТабличногоДокумента.Область("R" + Формат(ИндексСтрока, "ЧГ=0") + "C" + Формат(ИндексКолонка, "ЧГ=0")) .Текст, " ", ""));
					Исключение
					КонецПопытки;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

Процедура мОбработатьНаборДанныхСвязаннойИнформации(Схема, ИмяНабора, ПараметрыПоляВладельца, ИмяПоляПрефикс = "Субконто") Экспорт
	
	Если ПараметрыПоляВладельца.ИндексСубконто > 0 Тогда
		ПутьКДаннымОсновногоПоля = "";
		ЗаголовокОсновногоПоля   = "";
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если Найти(ПолеНабора.Поле, "СвязанноеПолеСсылка") = 1 Тогда
				ПутьКДаннымОсновногоПоля = ПолеНабора.ПутьКДанным;
				ЗаголовокОсновногоПоля   = СтрЗаменить(ПолеНабора.Заголовок, ".Ссылка", "");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если Найти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ПутьКДанным = СтрЗаменить(ПолеНабора.ПутьКДанным, ПутьКДаннымОсновногоПоля, ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто);
				ПолеНабора.Заголовок   = СтрЗаменить(ПолеНабора.Заголовок, ЗаголовокОсновногоПоля, ПараметрыПоляВладельца.ЗаголовокСубконто);
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Ложь;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Ложь;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Связь Из Схема.СвязиНаборовДанных Цикл
			Если Связь.ВыражениеПриемник = ИмяНабора Тогда
				Связь.ВыражениеИсточник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
				Связь.ВыражениеПриемник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если Найти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Истина;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ФОРМОЙ ОТЧЕТА
////////////////////////////////////////////////////////////////////////////////

Процедура мРезультатПриАктивизацииОбласти(ФормаОтчета, Элемент) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	ЭлементыФормы.ПолеСумма.Значение = мВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Элемент);
	
КонецПроцедуры

Процедура мНастроитьСтраницыПанелиПользователя(ФормаОтчета, Кнопка) Экспорт
	
	ФормаНастройкиПанелиПользователя = ПолучитьФорму("ФормаНастройкиПанелиПользователя", ФормаОтчета);
	
	ФормаНастройкиПанелиПользователя.ЗакрыватьПанельПриФормированииОтчета = ФормаОтчета.НастройкиФормы.ЗакрыватьПанельПриФормированииОтчета;
	ФормаНастройкиПанелиПользователя.ТаблицаСтраниц                       = мПолучитьТаблицуСтраниц(ФормаОтчета);
	Если ФормаНастройкиПанелиПользователя.ОткрытьМодально() = КодВозвратаДиалога.ОК Тогда
		ТаблицаСтраниц = ФормаНастройкиПанелиПользователя.ТаблицаСтраниц;
		мОбработкаИзмененияТаблицыСтраниц(ФормаОтчета, ТаблицаСтраниц);
		ФормаОтчета.НастройкиФормы.ЗакрыватьПанельПриФормированииОтчета = ФормаНастройкиПанелиПользователя.ЗакрыватьПанельПриФормированииОтчета;
	КонецЕсли;	
	
КонецПроцедуры

Функция мПолучитьТаблицуСтраниц(ФормаОтчета) Экспорт 
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	ТаблицаСтраниц = Новый ТаблицаЗначений;
	ТаблицаСтраниц.Колонки.Добавить("Использование");
	ТаблицаСтраниц.Колонки.Добавить("Страница");
	ТаблицаСтраниц.Колонки.Добавить("Представление");
	ТаблицаСтраниц.Колонки.Добавить("Высота");
	ТаблицаСтраниц.Колонки.Добавить("Раскрыта");
	
	Для Каждого Страница Из ЭлементыФормы.ПанельЗакладок.Страницы Цикл
		НоваяСтрока = ТаблицаСтраниц.Добавить();
		НоваяСтрока.Использование = Страница.Видимость;
		НоваяСтрока.Представление = Страница.Заголовок;
		НоваяСтрока.Страница      = Страница.Имя;
		НоваяСтрока.Раскрыта      = Страница.Раскрыта;
	КонецЦикла;
	
	Возврат ТаблицаСтраниц;
	
КонецФункции

Процедура мОбработкаИзмененияТаблицыСтраниц(ФормаОтчета, ТаблицаСтраниц) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	Если ТипЗнч(ТаблицаСтраниц) = Тип("ТаблицаЗначений") Тогда	
		ЭлементыФормы.ПанельЗакладок.РежимПрокручиваемыхСтраниц = Ложь;
		Индекс = 0;
		Для Каждого СтрокаТаблицы Из ТаблицаСтраниц Цикл
			СтраницыПанели = ЭлементыФормы.ПанельЗакладок.Страницы;
			Попытка
				Страница = СтраницыПанели[СтрокаТаблицы.Страница];
				Страница.Видимость = СтрокаТаблицы.Использование; 
				Страница.Раскрыта  = СтрокаТаблицы.Раскрыта;
			
				ТекущаяПозиция = СтраницыПанели.Индекс(Страница);
				Если ТекущаяПозиция <> Индекс Тогда
					СтраницыПанели.Сдвинуть(Страница, Индекс - ТекущаяПозиция);
				КонецЕсли;
				Индекс = Индекс + 1;
			Исключение
			    //ОписаниеОшибки()
			КонецПопытки;
		КонецЦикла;
		Если ФормаОтчета.НастройкиФормы.Свойство("ТаблицаЭлементов") Тогда
			Для Каждого ЭлементУправления Из ФормаОтчета.НастройкиФормы.ТаблицаЭлементов Цикл
				Элемент = ЭлементыФормы[ЭлементУправления.Элемент];
				Если Элемент.Верх <> ЭлементУправления Тогда
					Элемент.Верх = ЭлементУправления.Верх;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ЭлементыФормы.ПанельЗакладок.РежимПрокручиваемыхСтраниц = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура мСохранитьНастройкиФормы(ФормаОтчета) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	НастройкиФормы = ФормаОтчета.НастройкиФормы;
	
	НастройкиФормы.Вставить("ВыводитьЗаголовок"        , ЭлементыФормы.ФлагВыводитьЗаголовок.Значение);
	НастройкиФормы.Вставить("ВыводитьПодписи"          , ЭлементыФормы.ФлагВыводитьПодписи.Значение);
	НастройкиФормы.Вставить("ПанельПользователяПометка", ЭлементыФормы.ДействияФормыДополнительные.Кнопки.ПанельПользователя.Пометка);
	НастройкиФормы.Вставить("ШиринаПанелиПользователя" , ЭлементыФормы.ПанельПользователя.Ширина);
	НастройкиФормы.Вставить("МакетОформления"          , ЭлементыФормы.ПолеВыбораОформления.Значение);
	НастройкиФормы.Вставить("ТаблицаСтраниц"           , мПолучитьТаблицуСтраниц(ФормаОтчета));
	
	КнопкаПоказатьДиаграмму = ЭлементыФормы.ДействияФормыДополнительные.Кнопки.Найти("ПоказатьДиаграмму");
	Если КнопкаПоказатьДиаграмму <> Неопределено Тогда
		НастройкиФормы.Вставить("ВыводитьДиаграмму", КнопкаПоказатьДиаграмму.Пометка);
	КонецЕсли;
	
КонецПроцедуры

Процедура мВосстановитьНастройкиФормы(ФормаОтчета, ВсеНастройки = Истина) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	НастройкиФормы = ФормаОтчета.НастройкиФормы;
	
	Если ВсеНастройки Тогда
		Если НастройкиФормы = Неопределено Тогда
			НастройкиФормы = Новый Структура;
		КонецЕсли;
		
		Если НастройкиФормы.Свойство("ВыводитьЗаголовок") Тогда
			ВыводитьЗаголовок = НастройкиФормы.ВыводитьЗаголовок;
		Иначе
			НастройкиФормы.Вставить("ВыводитьЗаголовок", Истина);
			ВыводитьЗаголовок = Истина;
		КонецЕсли;
		ЭлементыФормы.ФлагВыводитьЗаголовок.Значение = ВыводитьЗаголовок;
		
		Если НастройкиФормы.Свойство("ВыводитьПодписи") Тогда
			ВыводитьПодписи = НастройкиФормы.ВыводитьПодписи;
		Иначе
			НастройкиФормы.Вставить("ВыводитьПодписи", Ложь);
			ВыводитьПодписи = Ложь;
		КонецЕсли;
		ЭлементыФормы.ФлагВыводитьПодписи.Значение = ВыводитьПодписи;
		
		Если НастройкиФормы.Свойство("ПанельПользователяПометка") Тогда
			ЭлементыФормы.ДействияФормыДополнительные.Кнопки.ПанельПользователя.Пометка = НастройкиФормы.ПанельПользователяПометка;
		КонецЕсли;
		
		Если Не НастройкиФормы.Свойство("ШиринаПанелиПользователя") Тогда
			НастройкиФормы.Вставить("ШиринаПанелиПользователя", 306);
		КонецЕсли;
		
		Если НастройкиФормы.Свойство("ТаблицаЭлементов") Тогда
			НастройкиФормы.Удалить("ТаблицаЭлементов");
		КонецЕсли;
		
		Если НастройкиФормы.Свойство("ТаблицаСтраниц") Тогда
			мОбработкаИзмененияТаблицыСтраниц(ФормаОтчета, НастройкиФормы.ТаблицаСтраниц);
		КонецЕсли;
		
		Если Не НастройкиФормы.Свойство("ЗакрыватьПанельПриФормированииОтчета") Тогда
			НастройкиФормы.Вставить("ЗакрыватьПанельПриФормированииОтчета", Ложь);
		КонецЕсли;
		
		Если Не НастройкиФормы.Свойство("МакетОформления") Тогда
			НастройкиФормы.Вставить("МакетОформления", 0);
		КонецЕсли;
		ЭлементыФормы.ПолеВыбораОформления.Значение = НастройкиФормы.МакетОформления;
		
		КнопкаПоказатьДиаграмму = ЭлементыФормы.ДействияФормыДополнительные.Кнопки.Найти("ПоказатьДиаграмму");
		Если КнопкаПоказатьДиаграмму <> Неопределено Тогда
			Если Не НастройкиФормы.Свойство("ВыводитьДиаграмму") Тогда
				НастройкиФормы.Вставить("ВыводитьДиаграмму", Ложь);
			КонецЕсли;
			КнопкаПоказатьДиаграмму.Пометка = НастройкиФормы.ВыводитьДиаграмму;
		КонецЕсли;
	КонецЕсли;
	
	ФормаОтчета.НастройкиФормы = НастройкиФормы;
	
КонецПроцедуры

Процедура мДобавитьЭлементСортировки(ФормаОтчета, Отказ = Ложь) Экспорт
	
	Форма = ПолучитьФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
	РодителиПоля = мПолучитьЗапрещенныеПоля(ФормаОтчета, "Сортировка");
	Форма.РодителиПоля = РодителиПоля;
	Форма.Режим = "Порядок";
	Форма.КН = ФормаОтчета.КН;
	ТекущиеДанные = Форма.ОткрытьМодально();
	Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
		ЭлементПорядка = ФормаОтчета.КН.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	
		ЭлементПорядка.Поле  = ТекущиеДанные.Поле;
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		
		ФормаОтчета.ЭлементыФормы.Сортировка.ТекущаяСтрока = ЭлементПорядка;
	КонецЕсли;
	
КонецПроцедуры

Процедура мСортировкаПередНачаломИзменения(ФормаОтчета, Элемент, Отказ) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	Если Элемент.ТекущаяКолонка.Имя = "Поле" Тогда
		Форма = ПолучитьФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
		РодителиПоля = мПолучитьЗапрещенныеПоля(ФормаОтчета, "Сортировка");
		Форма.РодителиПоля = РодителиПоля;
		Форма.Режим = "Порядок";
		Форма.КН = ФормаОтчета.КН;
		ТекущиеДанные = Форма.ОткрытьМодально();
		Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
			ЭлементПорядка = ЭлементыФормы.Сортировка.ТекущаяСтрока;
			
			ЭлементПорядка.Поле  = ТекущиеДанные.Поле;
			ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		КонецЕсли;
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

Процедура мОтборНачалоВыбора(ФормаОтчета, Элемент, СтандартнаяОбработка) Экспорт
		
	Если ТипЗнч(Элемент.Значение) = Тип("ПолеКомпоновкиДанных") Тогда
		СтандартнаяОбработка = Ложь;
		
		Форма = ПолучитьФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
		
		РодителиПоля = мПолучитьЗапрещенныеПоля(ФормаОтчета, "Отбор");
		Форма.РодителиПоля = РодителиПоля;
		
		Форма.Режим = "Отбор";
		Форма.КН = ФормаОтчета.КН;
		ТекущиеДанные = Форма.ОткрытьМодально();
		
		Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда
			Элемент.Значение  = ТекущиеДанные.Поле;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура мОтборДобавитьГруппу(ФормаОтчета, Кнопка) Экспорт
	
	ФормаОтчета.КН.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		
КонецПроцедуры

Процедура мОтборДобавитьЭлемент(ФормаОтчета, Отказ = Ложь) Экспорт
	
	Отказ = Истина;
	
	Форма = ПолучитьФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
	РодителиПоля = мПолучитьЗапрещенныеПоля(ФормаОтчета, "Отбор");
	Форма.РодителиПоля = РодителиПоля;
	Форма.Режим = "Отбор";
	Форма.КН = ФормаОтчета.КН;
	ТекущиеДанные = Форма.ОткрытьМодально();
	Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда
		ЭлементОтбора = ФормаОтчета.КН.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение  = ТекущиеДанные.Поле;
		ЭлементОтбора.ПравоеЗначение = ТекущиеДанные.Тип.ПривестиЗначение(Неопределено);
		Если ТекущиеДанные.ДоступныеВидыСравнения.Количество() > 0 Тогда
			ЭлементОтбора.ВидСравнения   = ТекущиеДанные.ДоступныеВидыСравнения[0].Значение;
		КонецЕсли;
		мОтборПриОкончанииРедактирования(ФормаОтчета, Неопределено, Истина, Ложь);
		
		ФормаОтчета.ЭлементыФормы.Отбор.ТекущаяСтрока = ЭлементОтбора;
	КонецЕсли;
		
КонецПроцедуры

Процедура мОтборПриОкончанииРедактирования(ФормаОтчета, Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт
КонецПроцедуры

Процедура мГруппировкаДобавитьЭлемент(ФормаОтчета, Отказ = Ложь) Экспорт
	
	Отказ = Истина;
	
	Форма = ПолучитьФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
	РодителиПоля = мПолучитьЗапрещенныеПоля(ФормаОтчета, "Группировка");
	Форма.РодителиПоля = РодителиПоля;
	Форма.Режим = "Группировка";
	Форма.КН = ФормаОтчета.КН;
	ТекущиеДанные = Форма.ОткрытьМодально();
	Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
		НоваяСтрока = ФормаОтчета.Группировка.Добавить();
		
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Представление  = мПолучитьСвойствоПоля(ФормаОтчета.КН, ТекущиеДанные.Поле);
		НоваяСтрока.Поле           = ТекущиеДанные.Поле;
		НоваяСтрока.ТипГруппировки = ТипИзмеренияПостроителяОтчета.Элементы;
		
		ФормаОтчета.ЭлементыФормы.Группировка.ТекущаяСтрока = НоваяСтрока;
	КонецЕсли;
	
КонецПроцедуры

Процедура мГруппировкаПередНачаломИзменения(ФормаОтчета, Элемент, Отказ) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	Если Элемент.ТекущаяКолонка.Имя = "Представление" Тогда
		ТекущаяСтрока = ЭлементыФормы.Группировка.ТекущаяСтрока;
		Форма = ПолучитьФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
		РодителиПоля = мПолучитьЗапрещенныеПоля(ФормаОтчета, "Группировка");
		Форма.РодителиПоля = РодителиПоля;
		Форма.КН = ФормаОтчета.КН;
		ТекущиеДанные = Форма.ОткрытьМодально();
		Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
			НоваяСтрока = ЭлементыФормы.Группировка.ТекущаяСтрока;
			
			НоваяСтрока.Использование = Истина;
			НоваяСтрока.Представление = мПолучитьСвойствоПоля(ФормаОтчета.КН, ТекущиеДанные.Поле);
			НоваяСтрока.Поле          = Строка(ТекущиеДанные.Поле);
		КонецЕсли;
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура мДополнительныеПоляДобавитьЭлемент(ФормаОтчета, Отказ = Ложь) Экспорт
	
	Отказ = Истина;
	
	Форма = ПолучитьФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
	РодителиПоля = мПолучитьЗапрещенныеПоля(ФормаОтчета, "ДополнительныеПоля");		
	Форма.РодителиПоля = РодителиПоля;
	Форма.Режим = "ВыбранныеПоля";
	Форма.КН = ФормаОтчета.КН;
	ТекущиеДанные = Форма.ОткрытьМодально();
	Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
		НоваяСтрока = ФормаОтчета.ДополнительныеПоля.Добавить();
		
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Представление = мПолучитьСвойствоПоля(ФормаОтчета.КН, ТекущиеДанные.Поле);
		НоваяСтрока.Поле          = ТекущиеДанные.Поле;
		
		ФормаОтчета.ЭлементыФормы.ДополнительныеПоля.ТекущаяСтрока = НоваяСтрока;
	КонецЕсли;
	
КонецПроцедуры

Процедура мДополнительныеПоляПередНачаломИзменения(ФормаОтчета, Элемент, Отказ) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	Если Элемент.ТекущаяКолонка.Имя = "Представление" Тогда 	
		Форма = ПолучитьФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
		РодителиПоля = мПолучитьЗапрещенныеПоля(ФормаОтчета, "ДополнительныеПоля");	
		Форма.РодителиПоля = РодителиПоля;
		Форма.КН = ФормаОтчета.КН;
		ТекущиеДанные = Форма.ОткрытьМодально();
		Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
			НоваяСтрока = ЭлементыФормы.ДополнительныеПоля.ТекущаяСтрока;
			
			НоваяСтрока.Использование = Истина;
			НоваяСтрока.Представление = мПолучитьСвойствоПоля(ФормаОтчета.КН, ТекущиеДанные.Поле);
			НоваяСтрока.Поле          = ТекущиеДанные.Поле;
		КонецЕсли;
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура мПоказателиОтчетаПередНачаломИзменения(ФормаОтчета, Элемент, Отказ) Экспорт
	
	ПоказателиОтчета = ФормаОтчета.ДанныеОтчета.ПоказателиОтчета;
	
	Для Каждого ЭлементСтруктуры Из ПоказателиОтчета Цикл
		НайденнаяСтрока = Элемент.Значение.Найти(ЭлементСтруктуры.Значение.Представление, "Показатель");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЭлементСтруктуры.Значение.Значение = НайденнаяСтрока.Использование;
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура мПоказателиОтчетаПриИзмененииФлажка(ФормаОтчета, Элемент, Колонка) Экспорт
	
	ЗначениеПоказателей = Элемент.Значение;
	ПоказателиОтчета = ФормаОтчета.ДанныеОтчета.ПоказателиОтчета;
	
	Количество = 0;
	Для Каждого СтрокаТаблицы Из ЗначениеПоказателей Цикл
		Если СтрокаТаблицы.Показатель <> "Развернутое сальдо" Тогда
			Количество = Количество + СтрокаТаблицы.Использование;
		КонецЕсли;
	КонецЦикла;
	
	Если Количество = 0 Тогда
		Элемент.ТекущаяСтрока.Использование = Истина;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из ПоказателиОтчета Цикл
		НайденнаяСтрока = ЗначениеПоказателей.Найти(ЭлементСтруктуры.Значение.Представление, "Показатель");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЭлементСтруктуры.Значение.Значение = НайденнаяСтрока.Использование;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура мОбновитьПредставлениеПоказателейОтчета(ФормаОтчета) Экспорт
	
	Если ФормаОтчета.ДанныеОтчета.Свойство("ПоказателиОтчета") Тогда
		ПоказателиОтчета = ФормаОтчета.ДанныеОтчета.ПоказателиОтчета;
	Иначе
		ФормаОтчета.ПолучитьСтруктуруПоказателейОтчета();
		ПоказателиОтчета = ФормаОтчета.ДанныеОтчета.ПоказателиОтчета;
	КонецЕсли;
	
	ТабличноеПоле = ФормаОтчета.ЭлементыФормы.Найти("ПоказателиОтчета");
	Если ТабличноеПоле <> Неопределено Тогда 
		ЗначениеПоказателей = ТабличноеПоле.Значение;
	Иначе
		ЗначениеПоказателей = Новый ТаблицаЗначений;
		ЗначениеПоказателей.Колонки.Добавить("Использование");
		ЗначениеПоказателей.Колонки.Добавить("Показатель");
	КонецЕсли;
	
	ЗначениеПоказателей.Очистить();
	
	Для Каждого Показатель Из ПоказателиОтчета Цикл
		Если Показатель.Значение.Использование Тогда			
			НоваяСтрока = ЗначениеПоказателей.Добавить();
			НоваяСтрока.Использование = Показатель.Значение.Значение;
			НоваяСтрока.Показатель    = Показатель.Значение.Представление;
		КонецЕсли;
	КонецЦикла;
	
	ФормаОтчета.ЭлементыФормы.ПоказателиОтчета.Значение = ЗначениеПоказателей;	
	
КонецПроцедуры

Процедура мУправлениеОтображениемПанелиПользователя(ФормаОтчета) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	Кнопка = ЭлементыФормы.ДействияФормыДополнительные.Кнопки.ПанельПользователя;
	
	Если Кнопка.Пометка тогда
		ФормаОтчета.ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Нет;
		ФормаОтчета.ЭлементыФормы.Разделитель.Свертка        = РежимСверткиЭлементаУправления.Нет;
		ШиринаПанели = ЭлементыФормы.ПанельПользователя.Ширина;
		Если ШиринаПанели / ФормаОтчета.Ширина > 0.5 тогда
			ШиринаПанели = 306;
			ЭлементыФормы.ПанельПользователя.Ширина = ШиринаПанели;
			ЭлементыФормы.ПанельПользователя.Лево = ФормаОтчета.Ширина - ШиринаПанели -6;
		КонецЕсли;
		ФормаОтчета.ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ФормаОтчета.Панель, ГраницаЭлементаУправления.Право);
		ФормаОтчета.ЭлементыФормы.ПанельПользователя.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.Разделитель, ГраницаЭлементаУправления.Право);
		
		ЭлементыФормы.Разделитель.Лево = ФормаОтчета.Ширина - ШиринаПанели - 6;
		ЭлементыФормы.Результат.Ширина = ФормаОтчета.Ширина - 6 - ШиринаПанели;
	Иначе
		ФормаОтчета.ЭлементыФормы.ПанельПользователя.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
		ФормаОтчета.ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельПользователя, ГраницаЭлементаУправления.Лево);
		ФормаОтчета.ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Право;
		ФормаОтчета.ЭлементыФормы.Разделитель.Свертка        = РежимСверткиЭлементаУправления.Право;
	КонецЕсли;
	
КонецПроцедуры

Процедура мУправлениеОтображениемПанелиРасшифровки(ФормаОтчета, Видимость = Истина) Экспорт
	
	Если Видимость тогда
		ФормаОтчета.ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Нет;
		ФормаОтчета.ЭлементыФормы.Результат.Ширина = ФормаОтчета.ЭлементыФормы.ПанельПользователя.Лево - 6;
	Иначе
		ФормаОтчета.ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Право;
		ФормаОтчета.ЭлементыФормы.Результат.Ширина = ФормаОтчета.Ширина - 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура мУправлениеОтображениемПанелиДополнительныеНастройки(ФормаОтчета, Видимость = Истина) Экспорт
	
	Если Видимость Тогда
		ФормаОтчета.ЭлементыФормы.НадписьДополнительныеНастройки.Заголовок = "Скрыть дополнительные настройки";
		ФормаОтчета.ЭлементыФормы.НадписьДополнительныеНастройки.Картинка  = БиблиотекаКартинок.Минус;
		ФормаОтчета.ЭлементыФормы.ПанельДополнительныеНастройки.Свертка    = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ФормаОтчета.ЭлементыФормы.НадписьДополнительныеНастройки.Заголовок = "Показать дополнительные настройки";
		ФормаОтчета.ЭлементыФормы.НадписьДополнительныеНастройки.Картинка  = БиблиотекаКартинок.Плюс;
		ФормаОтчета.ЭлементыФормы.ПанельДополнительныеНастройки.Свертка    = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
КонецПроцедуры

Процедура мЗаполнитьТаблицуЭлементов(ФормаОтчета) Экспорт
	
	ТаблицаЭлементов = Новый ТаблицаЗначений;
	ТаблицаЭлементов.Колонки.Добавить("Элемент");
	ТаблицаЭлементов.Колонки.Добавить("Верх");
	
	Для Каждого ЭлементУправления Из ФормаОтчета.ЭлементыФормы Цикл
		НоваяСтрока = ТаблицаЭлементов.Добавить();
		НоваяСтрока.Элемент = ЭлементУправления.Имя;
		НоваяСтрока.Верх = ЭлементУправления.Верх;
	КонецЦикла;
	
	ФормаОтчета.НастройкиФормы.Вставить("ТаблицаЭлементов", ТаблицаЭлементов);
	
КонецПроцедуры

Процедура мУсловноеОформлениеПриВыводеСтроки(ФормаОтчета, Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт 

	Если ДанныеСтроки.Поля.Элементы.Количество() = 0 Тогда
		
		ОформлениеСтроки.Ячейки.ОбластиДляКраткогоОтображенияЭлемента.Текст = НСтр("ru='<Все поля>'");
		ОформлениеСтроки.Ячейки.ОбластиДляПодробногоОтображенияЭлемента.Текст = НСтр("ru='<Все поля>'");
		
	КонецЕсли;
	
	Если ДанныеСтроки.Отбор.Элементы.Количество() = 0 Тогда
		
		ОформлениеСтроки.Ячейки.ОтборДляКраткогоОтображенияЭлемента.Текст = НСтр("ru='<Без условия>'");
		ОформлениеСтроки.Ячейки.ОтборДляПодробногоОтображенияЭлемента.Текст = НСтр("ru='<Без условия>'");
		
	КонецЕсли;
	
	ЦветФона = ДанныеСтроки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветФона"));
	Если ЦветФона.Использование Тогда
		
		ОформлениеСтроки.ЦветФона = ЦветФона.Значение;
		
	КонецЕсли;
	
	ЦветТекста = ДанныеСтроки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"));
	Если ЦветТекста.Использование Тогда
		
		ОформлениеСтроки.ЦветТекста = ЦветТекста.Значение;
		
	КонецЕсли;
	
	Шрифт = ДанныеСтроки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Шрифт"));
	Если Шрифт.Использование Тогда
		
		ОформлениеСтроки.Шрифт = Шрифт.Значение;
		
	КонецЕсли;
	
	Текст = ДанныеСтроки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Текст"));
	Если Текст.Использование Тогда
		Если ТипЗнч(Текст.Значение) = Тип("ПолеКомпоновкиДанных") Тогда
			ПредставлениеПоля = мПолучитьСвойствоПоля(ФормаОтчета.КН, Текст.Значение);
		Иначе
			ПредставлениеПоля = Текст.Значение;
		КонецЕсли;
		ОформлениеСтроки.Ячейки.ОформлениеДляКраткогоОтображенияЭлемента.Текст   = ПредставлениеПоля;
		ОформлениеСтроки.Ячейки.ОформлениеДляПодробногоОтображенияЭлемента.Текст = ПредставлениеПоля;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура мРаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт
	
	Для Каждого Оформление Из ОформленияСтрок Цикл		
		Если Оформление.ДанныеСтроки.Использование = Ложь Тогда			
			Оформление.ЦветТекста = мПолучитьЦветНеИспользуемогоЭлемента();			
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

Функция мПолучитьЗапрещенныеПоля(ФормаОтчета, Режим = "Группировка") Экспорт
	
	ДанныеОтчета = ФормаОтчета.ДанныеОтчета;
	
	РодителиПоля = Новый ТаблицаЗначений;
	РодителиПоля.Колонки.Добавить("Поле");
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "UserFields";
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "DataParameters";
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "SystemFields";
			
	ИдентификаторОбъекта = ФормаОтчета.ИдентификаторОбъекта;
	
	Если Режим = "ДополнительныеПоля" Тогда
		Для Каждого ДоступноеПоле Из ФормаОтчета.КН.Настройки.ДоступныеПоляВыбора.Элементы Цикл
			Если ДоступноеПоле.Ресурс Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = Строка(ДоступноеПоле.Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомость" Тогда
		Если Режим = "ДополнительныеПоля" Тогда
			НоваяСтрока = РодителиПоля.Добавить();	
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
		КонецЕсли;		
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету" Тогда
		Если Режим = "Группировка" Тогда
			Если ЗначениеЗаполнено(ФормаОтчета.Счет) Тогда 
				КоличествоСубконто = ФормаОтчета.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели"; 
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
		ИначеЕсли Режим = "ДополнительныеПоля" Тогда
			Если ЗначениеЗаполнено(ФормаОтчета.Счет) Тогда 
				КоличествоСубконто = ФормаОтчета.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
		ИначеЕсли Режим = "Отбор" ИЛИ Режим = "Сортировка" Тогда
			ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
			мДобавитьПоляРесурсовВЗапрещенныеПоля(ФормаОтчета, РодителиПоля);
			Если ЗначениеЗаполнено(ФормаОтчета.Счет) Тогда 
				КоличествоСубконто = ФормаОтчета.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" Тогда
		Если Режим = "Группировка" Тогда
			Если ЗначениеЗаполнено(ФормаОтчета.Счет) Тогда 
				КоличествоСубконто = ФормаОтчета.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Регистратор";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "КорСчет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели"; 
		ИначеЕсли Режим = "ДополнительныеПоля" Тогда
			Если ЗначениеЗаполнено(ФормаОтчета.Счет) Тогда 
				КоличествоСубконто = ФормаОтчета.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "КорСчет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
		ИначеЕсли Режим = "Отбор" ИЛИ Режим = "Сортировка" Тогда
			мДобавитьПоляРесурсовВЗапрещенныеПоля(ФормаОтчета, РодителиПоля);
			Если ЗначениеЗаполнено(ФормаОтчета.Счет) Тогда 
				КоличествоСубконто = ФормаОтчета.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" Тогда
		Если Режим = "Группировка" Тогда
			Если ЗначениеЗаполнено(ФормаОтчета.Счет) Тогда 
				КоличествоСубконто = ФормаОтчета.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "КорСчет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели"; 
			Для Индекс = 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КорСубконто" + Индекс;
			КонецЦикла;
		ИначеЕсли Режим = "ДополнительныеПоля" Тогда
			Если ЗначениеЗаполнено(ФормаОтчета.Счет) Тогда 
				КоличествоСубконто = ФормаОтчета.Счет.ВидыСубконто.Количество();
				
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "КорСчет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
		ИначеЕсли Режим = "Отбор" ИЛИ Режим = "Сортировка" Тогда
			мДобавитьПоляРесурсовВЗапрещенныеПоля(ФормаОтчета, РодителиПоля);
			Если ЗначениеЗаполнено(ФормаОтчета.Счет) Тогда 
				КоличествоСубконто = ФормаОтчета.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСчета" Тогда
		Если Режим = "Отбор" Тогда
			ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
			Если Не ПоказателиОтчета.БУ.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "БУДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "БУКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.НУ.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "НУДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "НУКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютнаяСуммаДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютнаяСуммаКт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Валюта";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютаДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютаКт";
			КонецЕсли;
			Если ЗначениеЗаполнено(ФормаОтчета.Счет) Тогда 
				КоличествоСубконто = ФормаОтчета.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			Для Индекс = 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВидСубконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ПериодГруппировки";
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСубконто" Тогда
		Если Режим = "Отбор" Тогда
			ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
			Если Не ПоказателиОтчета.БУ.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "БУДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "БУКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.НУ.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "НУДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "НУКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютнаяСуммаДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютнаяСуммаКт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Валюта";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютаДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютаКт";
			КонецЕсли;
			Если ЗначениеЗаполнено(ФормаОтчета.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ФормаОтчета.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			Для Индекс = 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВидСубконто" + Индекс;
			КонецЦикла;	
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ПериодГруппировки";
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" Тогда
		Если Режим = "Группировка" Тогда
			Если ЗначениеЗаполнено(ФормаОтчета.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ФормаОтчета.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели"; 
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
		ИначеЕсли Режим = "ДополнительныеПоля" Тогда
			Если ЗначениеЗаполнено(ФормаОтчета.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ФормаОтчета.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
		ИначеЕсли Режим = "Отбор" ИЛИ Режим = "Сортировка" Тогда
			ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
			мДобавитьПоляРесурсовВЗапрещенныеПоля(ФормаОтчета, РодителиПоля);
			Если ЗначениеЗаполнено(ФормаОтчета.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ФормаОтчета.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
		Если Режим = "Группировка" Тогда
			Если ЗначениеЗаполнено(ФормаОтчета.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ФормаОтчета.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			Если ЗначениеЗаполнено(ФормаОтчета.СписокВидовКорСубконто) Тогда 
				КоличествоКорСубконто = ФормаОтчета.СписокВидовКорСубконто.Количество();
			Иначе
				КоличествоКорСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоКорСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КорСубконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "КорСчет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Валюта";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "КорВалюта";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели"; 
		ИначеЕсли Режим = "ДополнительныеПоля" Тогда
			Если ЗначениеЗаполнено(ФормаОтчета.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ФормаОтчета.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			Если ЗначениеЗаполнено(ФормаОтчета.СписокВидовКорСубконто) Тогда 
				КоличествоКорСубконто = ФормаОтчета.СписокВидовКорСубконто.Количество();
			Иначе
				КоличествоКорСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоКорСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КорСубконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
		ИначеЕсли Режим = "Отбор" ИЛИ Режим = "Сортировка" Тогда
			ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
			мДобавитьПоляРесурсовВЗапрещенныеПоля(ФормаОтчета, РодителиПоля);
			Если ЗначениеЗаполнено(ФормаОтчета.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ФормаОтчета.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			Если ЗначениеЗаполнено(ФормаОтчета.СписокВидовКорСубконто) Тогда 
				КоличествоКорСубконто = ФормаОтчета.СписокВидовКорСубконто.Количество();
			Иначе
				КоличествоКорСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоКорСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КорСубконто" + Индекс;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОтчетПоПроводкам" Тогда
		Если Режим = "Отбор" Тогда
			ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
			Если Не ПоказателиОтчета.БУ.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "БУДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "БУКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.НУ.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "НУДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "НУКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютнаяСуммаДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютнаяСуммаКт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Валюта";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютаДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютаКт";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат РодителиПоля;
	
КонецФункции

Процедура мДобавитьПоляРесурсовВЗапрещенныеПоля(ОтчетОбъект, ТаблицаПолей)
	
	ПоказателиОтчета = ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета;
	
	Если Не ПоказателиОтчета.БУ.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СальдоНаНачалоПериода.БУНачальныйОстатокДт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СальдоНаНачалоПериода.БУНачальныйОстатокКт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ОборотыЗаПериод.БУОборотДт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ОборотыЗаПериод.БУОборотКт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СальдоНаКонецПериода.БУКонечныйОстатокДт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СальдоНаКонецПериода.БУКонечныйОстатокКт";
	КонецЕсли;
	Если Не ПоказателиОтчета.НУ.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СальдоНаНачалоПериода.НУНачальныйОстатокДт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СальдоНаНачалоПериода.НУНачальныйОстатокКт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ОборотыЗаПериод.НУОборотДт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ОборотыЗаПериод.НУОборотКт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СальдоНаКонецПериода.НУКонечныйОстатокДт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СальдоНаКонецПериода.НУКонечныйОстатокКт";
	КонецЕсли;
	Если Не ПоказателиОтчета.Контроль.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СальдоНаНачалоПериода.КонтрольНачальныйОстатокДт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СальдоНаНачалоПериода.КонтрольНачальныйОстатокКт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ОборотыЗаПериод.КонтрольОборотДт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ОборотыЗаПериод.КонтрольОборотКт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СальдоНаКонецПериода.КонтрольКонечныйОстатокДт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СальдоНаКонецПериода.КонтрольКонечныйОстатокКт";
	КонецЕсли;
	Если Не ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "Валюта";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СальдоНаНачалоПериода.ВалютнаяСуммаНачальныйОстатокДт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СальдоНаНачалоПериода.ВалютнаяСуммаНачальныйОстатокКт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ОборотыЗаПериод.ВалютнаяСуммаОборотДт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ОборотыЗаПериод.ВалютнаяСуммаОборотКт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СальдоНаКонецПериода.ВалютнаяСуммаКонечныйОстатокДт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СальдоНаКонецПериода.ВалютнаяСуммаКонечныйОстатокКт";
	КонецЕсли;
	
КонецПроцедуры

Процедура мПодразделениеПриИзменении(ФормаОтчета, Элемент) Экспорт
	
	Для Каждого ЭлементОтбора Из ФормаОтчета.КН.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда 
					ЭлементОтбора.ПравоеЗначение = ФормаОтчета.Подразделение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура мДействияФормыДополнительныеВосстановитьЗначения(ФормаОтчета) Экспорт
	
	СохранениеНастроек.ВыбратьНастройкуФормы(ФормаОтчета.СохраненнаяНастройка, ФормаОтчета, ФормаОтчета.ИдентификаторОбъекта, Ложь);
	//ТиповыеОтчеты.ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ОтчетОбъект, ФормаОтчета);
	//ТиповыеОтчеты.ОбновитьЗаголовокТиповогоОтчета(ОтчетОбъект, ФормаОтчета);
	
	ФормаОтчета.РежимРасшифровки = Ложь;
	ФормаОтчета.Настроить();	
	ФормаОтчета.ОбновитьПанельНастроек();
	
КонецПроцедуры

Процедура мДействияФормыДополнительныеСохранитьЗначения(ФормаОтчета) Экспорт
	
	мВыбратьНастройкуФормы(ФормаОтчета.СохраненнаяНастройка, ФормаОтчета, ФормаОтчета.ИдентификаторОбъекта, Истина, мПолучитьПредставлениеНастройкиДляИстории(ФормаОтчета));
	
КонецПроцедуры

Процедура мЗаполнитьДополнительныеПоляПоУмолчанию(ФормаОтчета) Экспорт
	
	ДанныеОтчета        = ФормаОтчета.ДанныеОтчета;
	КН = ФормаОтчета.КН;
	
	ДанныеОтчета.ДополнительныеПоля.Очистить();
	
	Для Каждого Группировка Из ДанныеОтчета.Группировка Цикл 
		ТипПоля = мПолучитьСвойствоПоля(КН, Группировка.Поле, "Тип");	
		Попытка
			Если ТипПоля.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
				НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
				НоваяСтрока.Использование = Ложь;
				НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".ИНН";
				НоваяСтрока.Представление = мПолучитьСвойствоПоля(КН, НоваяСтрока.Поле);
				НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
				НоваяСтрока.Использование = Ложь;
				НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".КПП";
				НоваяСтрока.Представление = мПолучитьСвойствоПоля(КН, НоваяСтрока.Поле);
			ИначеЕсли ТипПоля.СодержитТип(Тип("СправочникСсылка.ОсновныеСредства")) Тогда
				НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
				НоваяСтрока.Использование = Ложь;
				НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".СвязанноеПолеИнвентарныйНомер_ОС";
				НоваяСтрока.Представление = МПолучитьСвойствоПоля(КН, НоваяСтрока.Поле);	
			ИначеЕсли ТипПоля.СодержитТип(Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств")) Тогда
				НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
				НоваяСтрока.Использование = Ложь;
				НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".ВидДвиженияДенежныхСредств";
				НоваяСтрока.Представление = мПолучитьСвойствоПоля(КН, НоваяСтрока.Поле);
			ИначеЕсли ТипПоля.СодержитТип(Тип("СправочникСсылка.РасходыБудущихПериодов")) Тогда
				НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
				НоваяСтрока.Использование = Ложь;
				НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".ВидРБП";
				НоваяСтрока.Представление = мПолучитьСвойствоПоля(КН, НоваяСтрока.Поле);
				НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
				НоваяСтрока.Использование = Ложь;
				НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".ДатаНачалаСписания";
				НоваяСтрока.Представление = мПолучитьСвойствоПоля(КН, НоваяСтрока.Поле);	
				НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
				НоваяСтрока.Использование = Ложь;
				НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".ДатаОкончанияСписания";
				НоваяСтрока.Представление = мПолучитьСвойствоПоля(КН, НоваяСтрока.Поле);
			ИначеЕсли ТипПоля.СодержитТип(Тип("ДокументСсылка.СчетФактураПолученный"))
				ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
				ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ПоступлениеНМА"))
				ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"))
				ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"))
				ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"))
				ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС"))
				ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС"))
				ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом")) Тогда
				НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
				НоваяСтрока.Использование = Ложь;
				НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".НомерВходящегоДокумента";
				НоваяСтрока.Представление = мПолучитьСвойствоПоля(КН, НоваяСтрока.Поле);
				НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
				НоваяСтрока.Использование = Ложь;
				НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".ДатаВходящегоДокумента";
				НоваяСтрока.Представление = мПолучитьСвойствоПоля(КН, НоваяСтрока.Поле);	
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ДЛЯ ФОРМИРОВАНИЯ И ВЫВОДА ОТЧЕТ, ОБРАБОТКА РЕЗУЛЬТАТА ОТЧЕТА
////////////////////////////////////////////////////////////////////////////////

Процедура мСохранитьКопиюРезультатаОтчета(ФормаОтчета, ПолноеИмяФайла = "") Экспорт
	
	Результат = ФормаОтчета.ЭлементыФормы.Результат;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок = "Save as";
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда 
		ПолноеИмяФайла = ФормаОтчета.ПредставлениеОтчета;
	КонецЕсли;
	ПолноеИмяФайла = мУдалитьЗапрещенныеСимволыИмени(ПолноеИмяФайла);
	Диалог.ПолноеИмяФайла = ПолноеИмяФайла;
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.Фильтр = "Табличный документ (*.mxl)|*.mxl|"
	      		  + "Документ Microsoft Excel (*.xls)|*.xls|";
	Если Диалог.Выбрать() Тогда
		ИмяФайла = Диалог.ПолноеИмяФайла;
		Попытка
			Результат.Записать(ИмяФайла, ?(Прав(ИмяФайла,3) = "xls", ТипФайлаТабличногоДокумента.XLS, ТипФайлаТабличногоДокумента.MXL));
		Исключение
			Предупреждение("Ошибка при записи. Файл не записан.");
		КонецПопытки;		
	КонецЕсли;
	
КонецПроцедуры

// функция формирует имя файла выбрасывая из первоначально предложенного имени все
// запрещенные символы
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, без каталога.
//
// Возвращаемое значение:
//   Строка – имя файла, которое может быть использовано в файловой системе
//
Функция мУдалитьЗапрещенныеСимволыИмени(Знач ИмяФайла) Экспорт

	ИтоговоеИмяФайла = СокрЛП(ИмяФайла);
	
	Если ПустаяСтрока(ИтоговоеИмяФайла) Тогда
		
		Возврат ИтоговоеИмяФайла;
		
	КонецЕсли;
	
	СписокСимволов = мПолучитьСписокЗапрещенныхСимволовВИменахФайлов();
	
	Для Каждого СтрокаЗапретногоСимвола  Из СписокСимволов Цикл
		
		ИтоговоеИмяФайла = СтрЗаменить(ИтоговоеИмяФайла,  СтрокаЗапретногоСимвола.Значение, "");			
		
	КонецЦикла;
	
	Возврат ИтоговоеИмяФайла;

КонецФункции // УдалитьЗапрещенныеСимволыИмени()

// функция возвращает список запрещенных символов в именах файлов
// Возвращаемое значение:
//   Список значений в котором хранится список всех запрещенных символов в именах файлов.
//
Функция мПолучитьСписокЗапрещенныхСимволовВИменахФайлов()
	
	СписокСимволов = Новый СписокЗначений();
	
	СписокСимволов.Добавить("\");
	СписокСимволов.Добавить("/");
	СписокСимволов.Добавить(":");
	СписокСимволов.Добавить("*");
	СписокСимволов.Добавить("&");
	СписокСимволов.Добавить("""");
	СписокСимволов.Добавить("<");
	СписокСимволов.Добавить(">");
	СписокСимволов.Добавить("|");
	
	Возврат СписокСимволов;
	
КонецФункции

Процедура мОбработкаРезультатаОтчета(ФормаОтчета, Результат) Экспорт
	
	// Выводим надписи вертикально, если количество точек диаграмм больше 9
	Для Каждого Рисунок Из Результат.Рисунки Цикл
		Попытка
			Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
				Рисунок.Объект.ОбластьПостроения.ВертикальныеМетки  = (Рисунок.Объект.Точки.Количество() > 9);
				Рисунок.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧГ=3,0";
				Рисунок.Объект.ОбластьЛегенды.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Результат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ФормаОтчета.ИдентификаторОбъекта;
	
	УстановитьКолонтитулыПоУмолчанию(Результат, ФормаОтчета.ПолучитьТекстЗаголовка(), Строка(глЗначениеПеременной("глТекущийПользователь")));
	
КонецПроцедуры

Процедура мВывестиОтчет(ФормаОтчета, НастройкаКомпоновщикаНастроек, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, ЗаполнятьДанныеРасшифровки = Истина) Экспорт
	
	Схема = ФормаОтчета.СхемаКД;
	
	МакетОформления = мУстановитьМакетОформленияОтчета(ФормаОтчета.НастройкиФормы, НастройкаКомпоновщикаНастроек);
	
	//Сгенерируем макет компоновки данных при помощи компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Попытка
		
		//В качестве схемы компоновки будет выступать схема самого отчета
		//В качестве настроек отчета - текущие настройки отчета
		//Данные расшифровки будем помещать в ДанныеРасшифровки
		Если ЗаполнятьДанныеРасшифровки Тогда 
			МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, НастройкаКомпоновщикаНастроек, ДанныеРасшифровки, МакетОформления);
		Иначе
			МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, НастройкаКомпоновщикаНастроек, , МакетОформления);
		КонецЕсли;
		
		//Вызываем событые отчета
		Попытка
			ФормаОтчета.ПередВыводомОтчета(МакетКомпоновки);
		Исключение
		КонецПопытки;
		
		//Создадим и инициализируем процессор компоновки
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		Если ВнешниеНаборыДанных = Неопределено Тогда
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		Иначе
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
		КонецЕсли;
		
		//Создадим и инициализируем процессор вывода результата
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		//Обозначим начало вывода
		ПроцессорВывода.НачатьВывод();
		Состояние(НСТР("ru='Если Вы хотите прервать вывод отчета, нажмите Ctrl+Break'"));
		
		ТаблицаЗафиксирована = Не ВыводВФормуОтчета;
		
		Результат.ФиксацияСверху = 0;
		//Основной цикл вывода отчета
		Пока Истина Цикл
			
			ОбработкаПрерыванияПользователя();
			//Получим следующий элемент результата компоновки
			ЭлементРезультата = ПроцессорКомпоновки.Следующий();
			
			Если ЭлементРезультата = Неопределено Тогда
				//Следующий элемент не получен - заканчиваем цикл вывода
				Прервать;
				
			Иначе
				
				// Зафиксируем шапку
				Если Не ТаблицаЗафиксирована 
					И ЭлементРезультата.ЗначенияПараметров.Количество() > 0 
					И ТипЗнч(НастройкаКомпоновщикаНастроек.Структура[0]) <> Тип("ДиаграммаКомпоновкиДанных") Тогда
					ТаблицаЗафиксирована = Истина;
					Результат.ФиксацияСверху = Результат.ВысотаТаблицы;
				КонецЕсли;
								
				Отказ = Ложь;
				
				Попытка
					ФормаОтчета.ПередВыводомЭлементаРезультата(МакетКомпоновки, ДанныеРасшифровки, ЭлементРезультата, Отказ);
				Исключение
				КонецПопытки;
				
				Если Не Отказ Тогда
					//Элемент получен - выведем его при помощи процессора вывода
					ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		//Обозначем завершение вывода
		ПроцессорВывода.ЗакончитьВывод();
		
	Исключение
		Вопрос("Отчет не сформирован!" + Символы.ПС + ПолучитьОписаниеРодительскойПричиныИнформацииОбОшибке(ИнформацияОбОшибке()), РежимДиалогаВопрос.ОК);
	КонецПопытки;

КонецПроцедуры

Процедура мВыводЗаголовкаОтчета(ФормаОтчета, Результат) Экспорт
	
	Макет = ПолучитьМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	
	// Текст заголовка
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ФормаОтчета.ПолучитьТекстЗаголовка();
	Результат.Вывести(ОбластьЗаголовок);
	
	ИдентификаторОбъекта = ФормаОтчета.ИдентификаторОбъекта;
	
	
	// Показатели отчета
	ПоказыватьВыводимыеДанные = Ложь;
	ТекстВыводимыеДанные = "";
	КоличествоПоказателей = 0;
	Для Каждого Показатель Из ФормаОтчета.ДанныеОтчета.ПоказателиОтчета Цикл
		Если Показатель.Значение.Использование И Показатель.Значение.Значение
			И Показатель.Ключ <> "РазвернутоеСальдо" Тогда
			ТекстВыводимыеДанные = ТекстВыводимыеДанные + Показатель.Значение.Представление + ", ";
			КоличествоПоказателей = КоличествоПоказателей + 1;
		КонецЕсли;
	КонецЦикла;
	Если ФормаОтчета.ДанныеОтчета.Свойство("ДополнительныеПоля") Тогда
		Для Каждого ДополнительПоле Из ФормаОтчета.ДанныеОтчета.ДополнительныеПоля Цикл
			Если ДополнительПоле.Использование Тогда
				ТекстВыводимыеДанные = ТекстВыводимыеДанные + ДополнительПоле.Представление + ", ";
				ПоказыватьВыводимыеДанные = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТекстВыводимыеДанные = Лев(ТекстВыводимыеДанные, СтрДлина(ТекстВыводимыеДанные) - 2);
	
	Если КоличествоПоказателей = 1 Тогда
		ПоказыватьВыводимыеДанные = Истина;
	КонецЕсли;
	Если ПоказыватьВыводимыеДанные Тогда 
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = "Выводимые данные:";
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстВыводимыеДанные;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
		// Отбор
		ТекстОтбор = Строка(ФормаОтчета.КН.Настройки.Отбор);
		ТекстПодразделение = "";
		Если Не ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
			ТекстОтбор = ТекстПодразделение + " И " + ТекстОтбор;
		ИначеЕсли ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
			ТекстОтбор = ТекстПодразделение;
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстОтбор) Тогда
			ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = "Отбор:";
			ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
			Результат.Вывести(ОбластьОписаниеНастроек);
		КонецЕсли;
		
		Если ИдентификаторОбъекта <>  "ОтчетОбъект.ОборотноСальдоваяВедомость" 
			И ИдентификаторОбъекта <> "ОтчетОбъект.КарточкаСчета"
			И ИдентификаторОбъекта <> "ОтчетОбъект.КарточкаСубконто"
			И ИдентификаторОбъекта <> "ОтчетОбъект.ОтчетПоПроводкам" Тогда
			// Сортировка
			ТекстСортировка = "";
			Для Каждого СтрокаПорядок Из ФормаОтчета.КН.Настройки.Порядок.Элементы Цикл
				Если СтрокаПорядок.Использование Тогда
					ТекстСортировка = ТекстСортировка + мПолучитьСвойствоПоля(ФормаОтчета.КН, СтрокаПорядок.Поле);
					ТекстСортировка = ТекстСортировка + " " + Строка(СтрокаПорядок.ТипУпорядочивания) + ", ";
				КонецЕсли;
			КонецЦикла;
			ТекстСортировка = Лев(ТекстСортировка, СтрДлина(ТекстСортировка) - 2);
			
			Если Не ПустаяСтрока(ТекстСортировка) Тогда
				ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = "Сортировка:";
				ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстСортировка;
				Результат.Вывести(ОбластьОписаниеНастроек);
			КонецЕсли;
		КонецЕсли;
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	Результат.Области.Заголовок.Видимость = ФормаОтчета.НастройкиФормы.ВыводитьЗаголовок;
	
КонецПроцедуры

Процедура мВыводПодписейОтчета(ФормаОтчета, Результат) Экспорт
	
	Макет = ПолучитьМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");

	Результат.Вывести(ОбластьПодписи);
	
	Результат.Области.Подписи.Видимость = ФормаОтчета.НастройкиФормы.ВыводитьПодписи;
			
КонецПроцедуры

Функция мУстановитьМакетОформленияОтчета(НастройкиФормы, НастройкаКомпоновщикаНастроек) Экспорт
	
	Попытка
		МакетОформления = Неопределено;
		
		Если НастройкиФормы.МакетОформления = 0 Тогда // Зеленый
			мУстановитьПараметрВывода(НастройкаКомпоновщикаНастроек, "МакетОформления", "МакетОформленияОтчетовЗеленый");
		ИначеЕсли НастройкиФормы.МакетОформления = 1 Тогда // Черно-белый
			мУстановитьПараметрВывода(НастройкаКомпоновщикаНастроек, "МакетОформления", "МакетОформленияОтчетовЧерноБелый");
		ИначеЕсли НастройкиФормы.МакетОформления = 2 Тогда 
			мУстановитьПараметрВывода(НастройкаКомпоновщикаНастроек, "МакетОформления", "Основной");
		ИначеЕсли НастройкиФормы.МакетОформления = 3 Тогда 
			мУстановитьПараметрВывода(НастройкаКомпоновщикаНастроек, "МакетОформления", "Яркий");
		ИначеЕсли НастройкиФормы.МакетОформления = 4 Тогда 
			мУстановитьПараметрВывода(НастройкаКомпоновщикаНастроек, "МакетОформления", "Море");
		ИначеЕсли НастройкиФормы.МакетОформления = 5 Тогда 
			мУстановитьПараметрВывода(НастройкаКомпоновщикаНастроек, "МакетОформления", "Арктика");
		ИначеЕсли НастройкиФормы.МакетОформления = 6 Тогда 
			мУстановитьПараметрВывода(НастройкаКомпоновщикаНастроек, "МакетОформления", "Зеленый");
		ИначеЕсли НастройкиФормы.МакетОформления = 7 Тогда 
			мУстановитьПараметрВывода(НастройкаКомпоновщикаНастроек, "МакетОформления", "Античный");
		КонецЕсли;
	Исключение
		МакетОформления = ПолучитьМакет("МакетОформленияОтчетовЗеленый");
	КонецПопытки;
	
	Возврат МакетОформления;
	
КонецФункции

Процедура мУправлениеОтображениемОбластейОтчета(ФормаОтчета) Экспорт
	
	НеобходимоОбновить = Ложь;
	НастройкиФормы = ФормаОтчета.НастройкиФормы;
	
	Если Не НастройкиФормы.Свойство("ВыводитьЗаголовок") Тогда
		НастройкиФормы.Вставить("ВыводитьЗаголовок", Истина);
	КонецЕсли;
	
	ОбластьПоиска = ФормаОтчета.ЭлементыФормы.Результат.Области.Найти("Заголовок");
	Если ОбластьПоиска = Неопределено Тогда
		НеобходимоОбновить = Истина;
	Иначе
		ОбластьПоиска.Видимость = НастройкиФормы.ВыводитьЗаголовок;
	КонецЕсли;
	
	Если Не НастройкиФормы.Свойство("ВыводитьПодписи") Тогда
		НастройкиФормы.Вставить("ВыводитьПодписи", Истина);
	КонецЕсли;
	
	ОбластьПоиска = ФормаОтчета.ЭлементыФормы.Результат.Области.Найти("Подписи");
	Если ОбластьПоиска = Неопределено Тогда
		НеобходимоОбновить = Истина;
	Иначе
		ОбластьПоиска.Видимость = НастройкиФормы.ВыводитьПодписи;
	КонецЕсли;
	
	Если НеобходимоОбновить Тогда
		ФормаОтчета.ОбновитьОтчет(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура мСохранитьДанныеОтчета(ФормаОтчета) Экспорт 
	
	ИдентификаторОбъекта = ФормаОтчета.ИдентификаторОбъекта;
	
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
		ФормаОтчета.ДанныеОтчета.Вставить("ДополнительныеПоля", ФормаОтчета.ДополнительныеПоля.Скопировать());
		ФормаОтчета.ДанныеОтчета.Вставить("Группировка"       , ФормаОтчета.Группировка.Скопировать());
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомость" Тогда
		ФормаОтчета.ДанныеОтчета.Вставить("Группировка"       , ФормаОтчета.Группировка.Скопировать());
		ФормаОтчета.ДанныеОтчета.Вставить("ДополнительныеПоля", ФормаОтчета.ДополнительныеПоля.Скопировать());
		ФормаОтчета.ДанныеОтчета.Вставить("РазвернутоеСальдо" , ФормаОтчета.РазвернутоеСальдо.Скопировать());
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" Тогда
		ФормаОтчета.ДанныеОтчета.Вставить("Группировка"       , ФормаОтчета.Группировка.Скопировать());
		ФормаОтчета.ДанныеОтчета.Вставить("ДополнительныеПоля", ФормаОтчета.ДополнительныеПоля.Скопировать());
		ФормаОтчета.ДанныеОтчета.Вставить("ГруппировкаКор"    , ФормаОтчета.ГруппировкаКор.Скопировать());
	КонецЕсли;
	
	ПоказателиОтчета = ФормаОтчета.ЭлементыФормы.ПоказателиОтчета.Значение;
	
	Для Каждого ЭлементСтруктуры Из ФормаОтчета.ДанныеОтчета.ПоказателиОтчета Цикл
		НайденнаяСтрока = ПоказателиОтчета.Найти(ЭлементСтруктуры.Значение.Представление, "Показатель");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЭлементСтруктуры.Значение.Значение = НайденнаяСтрока.Использование;
		КонецЕсли;
	КонецЦикла;		
	
КонецПроцедуры

Функция мПроверитьЗаполнениеОбязательныхРеквизитов(ФормаОтчета) Экспорт
	
	ЗаполнениеКорректно = Истина;    
	
	ИдентификаторОбъекта = ФормаОтчета.ИдентификаторОбъекта;
	
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСчета" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" Тогда
		Если Не ЗначениеЗаполнено(ФормаОтчета.Счет) Тогда
			Ответ = Вопрос("Для формирования отчета необходимо указать счет." + Символы.ПС + "Открыть план счетов?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Если ВвестиЗначение(ФормаОтчета.Счет, "Выберите счет") Тогда
					ЗаполнениеКорректно = Истина;
					ФормаОтчета.ОбработкаИзмененияСчета();
					ФормаОтчета.ОбновитьПанельНастроек();
				Иначе
					ЗаполнениеКорректно = Ложь;
				КонецЕсли;
			Иначе
				ЗаполнениеКорректно = Ложь;
			КонецЕсли;  
			Если Не ЗаполнениеКорректно Тогда 
				ФормаОтчета.ТекущийЭлемент = ФормаОтчета.ЭлементыФормы.Счет;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
		КоличествоСубконто = 0;
		Для Каждого ВидСубконто Из ФормаОтчета.СписокВидовСубконто Цикл
			Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
				КоличествоСубконто = КоличествоСубконто + 1;
			КонецЕсли;
		КонецЦикла;
		КоличествоКорСубконто = 0;
		Для Каждого ВидСубконто Из ФормаОтчета.СписокВидовКорСубконто Цикл
			Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
				КоличествоКорСубконто = КоличествоКорСубконто + 1;
			КонецЕсли;
		КонецЦикла;
		Если КоличествоСубконто = 0 Тогда
			Ответ = Вопрос("Для формирования отчета необходимо указать вид субконто." + Символы.ПС + "Открыть список видов субконто?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ФормаОтчета.СписокВидовСубконто.Добавить();
				Если ВвестиЗначение(ФормаОтчета.СписокВидовСубконто[0].Значение, "Выберите вид субконто", Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные")) Тогда
					ЗаполнениеКорректно = Истина;
					ФормаОтчета.ОбработкаИзмененияСоставаСубконто();
					ФормаОтчета.ОбновитьПанельНастроек();
				Иначе
					ЗаполнениеКорректно = Ложь;
				КонецЕсли;
			Иначе
				ЗаполнениеКорректно = Ложь;
			КонецЕсли;
			Если Не ЗаполнениеКорректно Тогда 
				ФормаОтчета.ТекущийЭлемент = ФормаОтчета.ЭлементыФормы.СписокВидовСубконто;
			КонецЕсли;
		КонецЕсли;
		Если КоличествоКорСубконто = 0 Тогда
			Ответ = Вопрос("Для формирования отчета необходимо указать вид кор. субконто." + Символы.ПС + "Открыть список видов субконто?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ФормаОтчета.СписокВидовКорСубконто.Добавить();
				Если ВвестиЗначение(ФормаОтчета.СписокВидовКорСубконто[0].Значение, "Выберите вид субконто", Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные")) Тогда
					ЗаполнениеКорректно = Истина;
					ФормаОтчета.ОбработкаИзмененияСоставаСубконто();
					ФормаОтчета.ОбновитьПанельНастроек();
				Иначе
					ЗаполнениеКорректно = Ложь;
				КонецЕсли;
			Иначе
				ЗаполнениеКорректно = Ложь;
			КонецЕсли;
			Если Не ЗаполнениеКорректно Тогда 
				ФормаОтчета.ТекущийЭлемент = ФормаОтчета.ЭлементыФормы.СписокВидовКорСубконто;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФормаОтчета.КонецПериода) И ФормаОтчета.НачалоПериода > ФормаОтчета.КонецПериода Тогда 
		Предупреждение("Дата начала периода не может быть больше даты конца периода!");
		ЗаполнениеКорректно = Ложь;
	КонецЕсли;
	
	Возврат ЗаполнениеКорректно;
	
КонецФункции

Процедура мЗаполнитьДанныеОтчета(ФормаОтчета) Экспорт
	
	ИдентификаторОбъекта = ФормаОтчета.ИдентификаторОбъекта;
	
	//Данные отчета
	Если ФормаОтчета.ДанныеОтчета = Неопределено Тогда
		ФормаОтчета.ДанныеОтчета = Новый Структура;
	КонецЕсли;
	
	// Показатели отчета
	Если Не ФормаОтчета.ДанныеОтчета.Свойство("ПоказателиОтчета") Тогда
		ФормаОтчета.ПолучитьСтруктуруПоказателейОтчета();
	КонецЕсли;
		
	// Дополнительные поля	
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомость"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" Тогда
		Если Не ФормаОтчета.ДанныеОтчета.Свойство("ДополнительныеПоля") Тогда
			ДополнительныеПоля = Новый ТаблицаЗначений;
			ДополнительныеПоля.Колонки.Добавить("Использование");
			ДополнительныеПоля.Колонки.Добавить("Представление");
			ДополнительныеПоля.Колонки.Добавить("Поле");
			ФормаОтчета.ДанныеОтчета.Вставить("ДополнительныеПоля", ДополнительныеПоля);
		КонецЕсли;
	КонецЕсли;
	
	
	// Группировка по счету
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" Тогда
		Если Не ФормаОтчета.ДанныеОтчета.Свойство("Группировка") Тогда
			Группировка = Новый ТаблицаЗначений;
			Группировка.Колонки.Добавить("Использование");
			Группировка.Колонки.Добавить("Представление");
			Группировка.Колонки.Добавить("Поле");
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ТипИзмеренияПостроителяОтчета"));
			Группировка.Колонки.Добавить("ТипГруппировки", Новый ОписаниеТипов(МассивТипов));
			ФормаОтчета.ДанныеОтчета.Вставить("Группировка", Группировка);
		КонецЕсли;
	КонецЕсли;
	
	
	// Группировка по кор. счетам
	Если ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" Тогда
		Если Не ФормаОтчета.ДанныеОтчета.Свойство("ГруппировкаКор") Тогда
			ГруппировкаКор = Новый ТаблицаЗначений;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Булево"));
			ГруппировкаКор.Колонки.Добавить("Использование", Новый ОписаниеТипов(МассивТипов));		
			ГруппировкаКор.Колонки.Добавить("ПоСубсчетам", Новый ОписаниеТипов(МассивТипов));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ПланСчетовСсылка.Хозрасчетный"));
			ГруппировкаКор.Колонки.Добавить("Счет", Новый ОписаниеТипов(МассивТипов));
			ГруппировкаКор.Колонки.Добавить("Представление", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СписокЗначений"));
			ГруппировкаКор.Колонки.Добавить("ПоСубконто", Новый ОписаниеТипов(МассивТипов));
			
			ФормаОтчета.ДанныеОтчета.Вставить("ГруппировкаКор", ГруппировкаКор);
		КонецЕсли;
	КонецЕсли;
	
	// Группировка
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомость" Тогда
		Если Не ФормаОтчета.ДанныеОтчета.Свойство("Группировка") Тогда
			Группировка = Новый ТаблицаЗначений;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Булево"));
			Группировка.Колонки.Добавить("Использование", Новый ОписаниеТипов(МассивТипов));		
			Группировка.Колонки.Добавить("ПоСубсчетам", Новый ОписаниеТипов(МассивТипов));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ПланСчетовСсылка.Хозрасчетный"));
			Группировка.Колонки.Добавить("Счет", Новый ОписаниеТипов(МассивТипов));
			Группировка.Колонки.Добавить("Представление", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СписокЗначений"));
			Группировка.Колонки.Добавить("ПоСубконто", Новый ОписаниеТипов(МассивТипов));
			
			ФормаОтчета.ДанныеОтчета.Вставить("Группировка", Группировка);
		КонецЕсли;
		
		// РазвернутоеСальдо 
		Если Не ФормаОтчета.ДанныеОтчета.Свойство("РазвернутоеСальдо") Тогда
			РазвернутоеСальдо = Новый ТаблицаЗначений;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Булево"));
			РазвернутоеСальдо.Колонки.Добавить("Использование", Новый ОписаниеТипов(МассивТипов));		
			РазвернутоеСальдо.Колонки.Добавить("ПоСубсчетам", Новый ОписаниеТипов(МассивТипов));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ПланСчетовСсылка.Хозрасчетный"));
			РазвернутоеСальдо.Колонки.Добавить("Счет", Новый ОписаниеТипов(МассивТипов));
			РазвернутоеСальдо.Колонки.Добавить("Представление", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СписокЗначений"));
			РазвернутоеСальдо.Колонки.Добавить("ПоСубконто", Новый ОписаниеТипов(МассивТипов));
			ФормаОтчета.ДанныеОтчета.Вставить("РазвернутоеСальдо", РазвернутоеСальдо);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура мОбработкаРасшифровкиСтандартногоОтчета(ФормаОтчета, Расшифровка, СтандартнаяОбработка) Экспорт
	
	Перем ВыполненноеДействие;
	
	// Запретим стандартную обработку расшифровки
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторОбъекта = ФормаОтчета.ИдентификаторОбъекта;
	
	Если ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСчета" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСубконто"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОтчетПоПроводкам" Тогда 
		ОткрытьЗначение(ФормаОтчета.ДР.Элементы[Расшифровка].ПолучитьПоля()[0].Значение);
	Иначе
		
		МассивПолей = ТиповыеОтчеты.ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДР, , истина);
		
		ЕстьПоказатель  = Ложь;
		ЕстьКорЗначение = Ложь;
		ЕстьСчет        = Истина;
		СторонаПроводки = "";
		ПервыйЭлемент   = Неопределено;
		Счет            = Неопределено;
		КорСчет         = Неопределено;
		Период          = Неопределено;
		Для Каждого Элемент Из МассивПолей Цикл
			Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "Показатель" Тогда 
					ПервыйЭлемент = Элемент;
				КонецЕсли;
				Если Элемент.Поле = "Показатель" Тогда
					ЕстьПоказатель = Истина;
				КонецЕсли;
				Если Найти(Элемент.Поле, "Кор") = 1 Тогда
					ЕстьКорЗначение = Истина;
				КонецЕсли;
				Если Элемент.Поле = "КорСчет" Тогда
					КорСчет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Счет" Тогда
					Счет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Период" Тогда
					Период = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "СторонаПроводки" Тогда
					СторонаПроводки = Элемент.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ФормироватьОСВПоСчету            = Ложь;
		ФормироватьАнализСчета           = Ложь;
		ФормироватьОборотыСчетаПоМесяцам = Ложь;
		ФормироватьОборотыСчетаПоДням    = Ложь;
		ФормироватьКарточкуСчета         = Ложь;
		ФормироватьКарточкуСубконто      = Ложь;
		ФормироватьОтчетПоПроводкам      = Ложь;
		
		ПредставлениеДляОСВПоСчету            = "ОСВ по счету "   + Счет;
		ПредставлениеДляКарточкиСчета         = "Карточка счета " + Счет;
		ПредставлениеДляАнализаСчета          = "Анализ счета "   + Счет;
		ПредставлениеДляОборотыСчетаПоМесяцам = "Обороты счета "  + Счет + " по месяцам";
		ПредставлениеДляОборотыСчетаПоДням    = "Обороты счета "  + Счет + " по дням";
		ПредставлениеДляКарточкиСубконто      = "Карточка субконто";
		ПредставлениеДляОтчетаПоПроводкам     = "Отчет по проводкам";
		
		УстановитьВсеПоказатели = Ложь;
		
		ДобавитьОтборПоВидСубконто    = Истина;
		ДобавитьОтборПоВидКорСубконто = Истина;
		
		Если ПервыйЭлемент <> Неопределено Тогда
			Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомость" Тогда
				
				// Создадим и инициализируем обработчик расшифровки
				ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ФормаОтчета.ДР, Новый ИсточникДоступныхНастроекКомпоновкиДанных(ФормаОтчета.СхемаКД));
				
				ДоступныеДействия = Новый Массив();
				
				СписокПунктовМеню = Новый СписокЗначений;
				Если Не ЕстьПоказатель И ЗначениеЗаполнено(ПервыйЭлемент.Значение) Тогда
					СписокПунктовМеню.Добавить("Открыть """ + ПервыйЭлемент.Значение + """");
				КонецЕсли;
				СписокПунктовМеню.Добавить(ПредставлениеДляОСВПоСчету);
				СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСчета);
				СписокПунктовМеню.Добавить(ПредставлениеДляАнализаСчета);
				СписокПунктовМеню.Добавить(ПредставлениеДляОборотыСчетаПоМесяцам);
				СписокПунктовМеню.Добавить(ПредставлениеДляОборотыСчетаПоДням);
				
				// Осуществим выбор действия расшифровки пользователем
				Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия, СписокПунктовМеню);
				
				Если ВыполненноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда 
					Если ВыполненноеДействие = ПредставлениеДляОСВПоСчету Тогда
						ФормироватьОСВПоСчету   = Истина;
						УстановитьВсеПоказатели = Истина;
					ИначеЕсли ВыполненноеДействие = ПредставлениеДляКарточкиСчета Тогда
						ФормироватьКарточкуСчета = Истина;
						УстановитьВсеПоказатели  = Истина;
					ИначеЕсли ВыполненноеДействие = ПредставлениеДляАнализаСчета Тогда
						ФормироватьАнализСчета  = Истина;
						УстановитьВсеПоказатели = Истина;
					ИначеЕсли ВыполненноеДействие = ПредставлениеДляОборотыСчетаПоМесяцам Тогда
						ФормироватьОборотыСчетаПоМесяцам = Истина;
						УстановитьВсеПоказатели          = Истина;
					ИначеЕсли ВыполненноеДействие = ПредставлениеДляОборотыСчетаПоДням Тогда
						ФормироватьОборотыСчетаПоДням = Истина;
						УстановитьВсеПоказатели       = Истина;
					Иначе
						Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) Тогда
							ОткрытьЗначение(ПервыйЭлемент.Значение);
							Возврат;
						КонецЕсли;       
					КонецЕсли;
				Иначе 
					Возврат;
				КонецЕсли;
			Иначе
				Если ЕстьПоказатель Тогда
					// Если расшифровывается показатель, то необходимо сразу формировать отчет
					Если ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" Тогда
						Если Счет <> Неопределено Тогда 
							ФормироватьКарточкуСчета = Истина;
						Иначе
							ФормироватьКарточкуСубконто = Истина;		
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" Тогда
						Если ЕстьКорЗначение Тогда
							ФормироватьОтчетПоПроводкам = Истина;
						Иначе
							ФормироватьКарточкуСчета = Истина;		
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету" Тогда
						ФормироватьКарточкуСчета = Истина;
					ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
						ФормироватьОтчетПоПроводкам = Истина;
					ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" Тогда				
						ФормироватьОтчетПоПроводкам = Истина;
					ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.СводныеПроводки" Тогда
						ФормироватьОтчетПоПроводкам = Истина;
					КонецЕсли;
				Иначе
					Если ИдентификаторОбъекта = "ОтчетОбъект.СводныеПроводки" Тогда
						ФормироватьОтчетПоПроводкам = Истина;
						УстановитьВсеПоказатели     = Истина;
					Иначе 
						// Создадим и инициализируем обработчик расшифровки
						ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ФормаОтчета.ДР, Новый ИсточникДоступныхНастроекКомпоновкиДанных(ФормаОтчета.СхемаКД));
						
						ДоступныеДействия = Новый Массив();
						
						СписокПунктовМеню = Новый СписокЗначений;
						
						Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) Тогда
							СписокПунктовМеню.Добавить("Открыть """ + ПервыйЭлемент.Значение + """");
						КонецЕсли;
						Если ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" Тогда
							Если Счет <> Неопределено Тогда 
								СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСчета);
							Иначе
								СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСубконто);
							КонецЕсли;	
						ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" Тогда
							Если ЕстьКорЗначение Тогда 
								СписокПунктовМеню.Добавить(ПредставлениеДляОтчетаПоПроводкам);
							Иначе
								СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСчета);
							КонецЕсли;
						ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету" Тогда
							СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСчета);
						ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
							СписокПунктовМеню.Добавить(ПредставлениеДляОтчетаПоПроводкам);
						ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" Тогда				
							СписокПунктовМеню.Добавить(ПредставлениеДляОтчетаПоПроводкам);
						КонецЕсли;
						
						// Осуществим выбор действия расшифровки пользователем
						Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия, СписокПунктовМеню);
						
						Если ВыполненноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда 
							Если ВыполненноеДействие = ПредставлениеДляКарточкиСчета Тогда
								ФормироватьКарточкуСчета = Истина;
								УстановитьВсеПоказатели  = Истина;
							ИначеЕсли ВыполненноеДействие = ПредставлениеДляКарточкиСубконто Тогда
								ФормироватьКарточкуСубконто = Истина;
								УстановитьВсеПоказатели     = Истина;
							ИначеЕсли ВыполненноеДействие = ПредставлениеДляОтчетаПоПроводкам Тогда
								ФормироватьОтчетПоПроводкам = Истина;
								УстановитьВсеПоказатели     = Истина;
							Иначе
								Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) Тогда
									ОткрытьЗначение(ПервыйЭлемент.Значение);
									Возврат;
								КонецЕсли;       
							КонецЕсли;
						Иначе 
							Возврат;
						КонецЕсли;  
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
			Если ФормироватьКарточкуСчета Тогда 
				ФормаРасшифровка = ПолучитьФорму("КарточкаСчета",, Новый УникальныйИдентификатор);
			ИначеЕсли ФормироватьКарточкуСубконто Тогда
				ФормаРасшифровка = ПолучитьФорму("КарточкаСубконто",, Новый УникальныйИдентификатор);
				ФормаРасшифровка.СписокВидовСубконто = ФормаОтчета.СписокВидовСубконто.Скопировать();
			ИначеЕсли ФормироватьАнализСчета Тогда
				ФормаРасшифровка = ПолучитьФорму("АнализСчета",, Новый УникальныйИдентификатор);
			ИначеЕсли ФормироватьОборотыСчетаПоДням Тогда
				ФормаРасшифровка = ПолучитьФорму("ОборотыСчета",, Новый УникальныйИдентификатор);
				ФормаРасшифровка.Периодичность = 6;
			ИначеЕсли ФормироватьОборотыСчетаПоМесяцам Тогда
				ФормаРасшифровка = ПолучитьФорму("ОборотыСчета",, Новый УникальныйИдентификатор);
				ФормаРасшифровка.Периодичность = 9;
			ИначеЕсли ФормироватьОСВПоСчету Тогда
				ФормаРасшифровка = ПолучитьФорму("ОборотноСальдоваяВедомостьПоСчету",, Новый УникальныйИдентификатор);
			ИначеЕсли ФормироватьОтчетПоПроводкам Тогда
				ФормаРасшифровка = ПолучитьФорму("ОтчетПоПроводкам",, Новый УникальныйИдентификатор);
			КонецЕсли;
			ФормаРасшифровка.РежимРасшифровки = Истина;
			
			Попытка
				ФормаРасшифровка.Счет = Счет;
			Исключение
				ЕстьСчет = Ложь;
			КонецПопытки;
			
			СписокПолейОтборов = Новый Массив;
			Для каждого Отбор из МассивПолей Цикл
				Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
					Если Отбор.Значение = NULL тогда
						Продолжить;
					КонецЕсли;
					Если Отбор.Поле = "Счет" И (ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета") Тогда
						ЗначениеСчет = ?(Счет.Уровень() > ФормаОтчета.Счет.Уровень(), Счет, ФормаОтчета.Счет); 
						мДобавитьОтбор(ФормаРасшифровка.КН, Строка(Отбор.Поле) + СторонаПроводки, ЗначениеСчет, ВидСравненияКомпоновкиДанных.ВИерархии);	
					ИначеЕсли (Отбор.Поле = "Счет" ИЛИ Отбор.Поле = "КорСчет") И Не ЕстьСчет Тогда
						Если Отбор.Поле = "КорСчет" И СторонаПроводки <> "" Тогда
							мДобавитьОтбор(ФормаРасшифровка.КН, "Счет" + ?(СторонаПроводки = "Дт", "Кт", "Дт"), Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);	
						Иначе
							мДобавитьОтбор(ФормаРасшифровка.КН, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);	
						КонецЕсли;
					ИначеЕсли Отбор.Поле = "Счет" И ЕстьСчет Тогда
					ИначеЕсли Отбор.Поле = "СторонаПроводки" Тогда
					ИначеЕсли Найти(Отбор.Поле, "Субконто") = 1 тогда
						Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
							Если Счет <> Неопределено Тогда 
								ИндексСубконто = Сред(Отбор.Поле, 9, 1); 
								ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
								ИндексСубконтоОтчет = Счет.ВидыСубконто.Найти(ФормаОтчета.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто").НомерСтроки;
								мДобавитьОтбор(ФормаРасшифровка.КН, "Субконто" + ИндексСубконтоОтчет, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
							Иначе
								мДобавитьОтбор(ФормаРасшифровка.КН, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
								ИндексСубконто = Число(Сред(Отбор.Поле, 9));
								мДобавитьОтбор(ФормаРасшифровка.КН, "Вид" + Отбор.Поле, ФормаОтчета.СписокВидовСубконто[ИндексСубконто - 1].Значение);
							КонецЕсли;
							ДобавитьОтборПоВидСубконто = Ложь;
						ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" И ФормироватьКарточкуСчета Тогда
							ИндексСубконто = Сред(Отбор.Поле, 9, 1); 
							ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
							НайденнаяСтрока = Счет.ВидыСубконто.Найти(ФормаОтчета.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
							Если НайденнаяСтрока <> Неопределено Тогда
								ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
								мДобавитьОтбор(ФормаРасшифровка.КН, СтрЗаменить(Строка(Отбор.Поле), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), Отбор.Значение);
							КонецЕсли;
						Иначе
							ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
							Если Отбор.Поле = "Субконто4" Тогда
								мДобавитьОтбор(ФормаРасшифровка.КН, "Субконто2.Номенклатура", Отбор.Значение);
							Иначе
								мДобавитьОтбор(ФормаРасшифровка.КН, Сред(Отбор.Поле, ПозицияСубконто, СтрДлина(Отбор.Поле) - ПозицияСубконто + 1), Отбор.Значение);
							КонецЕсли;
						КонецЕсли;
						СписокПолейОтборов.Добавить(Отбор.Поле);
					ИначеЕсли Найти(Отбор.Поле, "КорСубконто") = 1 тогда
						Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
							Если КорСчет <> Неопределено Тогда
								ИндексКорСубконто = Сред(Отбор.Поле, 12, 1); 
								ПозицияКорСубконто = Найти(Отбор.Поле, "КорСубконто");
								ИндексКорСубконтоОтчет = КорСчет.ВидыСубконто.Найти(ФормаОтчета.СписокВидовКорСубконто[Число(ИндексКорСубконто) - 1].Значение, "ВидСубконто").НомерСтроки;
								мДобавитьОтбор(ФормаРасшифровка.КН, "КорСубконто" + ИндексКорСубконтоОтчет, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));	
							Иначе
								мДобавитьОтбор(ФормаРасшифровка.КН, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
								ИндексСубконто = Число(Сред(Отбор.Поле, 12));
								мДобавитьОтбор(ФормаРасшифровка.КН, "Вид" + Отбор.Поле, ФормаОтчета.СписокВидовКорСубконто[ИндексСубконто - 1].Значение);
							КонецЕсли;
							ДобавитьОтборПоВидКорСубконто = Ложь;
						КонецЕсли;
					ИначеЕсли Отбор.Поле = "Показатель" Тогда 
						Показатель = Отбор.Значение;
					ИначеЕсли Отбор.Поле = "Период" ИЛИ Отбор.Поле = "Регистратор" Тогда 
					Иначе
						Если Отбор.Иерархия Тогда
							мДобавитьОтбор(ФормаРасшифровка.КН, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);
						Иначе
							мДобавитьОтбор(ФормаРасшифровка.КН, Отбор.Поле, Отбор.Значение);
						КонецЕсли;
					КонецЕсли;	
				ИначеЕсли ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					Если Отбор.Представление = "###Контроль###" Тогда
					КонецЕсли;
				ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Если СписокПолейОтборов.Найти(Строка(Отбор.ЛевоеЗначение)) = Неопределено Тогда
						Если Найти(Отбор.ЛевоеЗначение, "Субконто") = 1 И ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" И ФормироватьКарточкуСчета Тогда
							ИндексСубконто = Сред(Отбор.ЛевоеЗначение, 9, 1); 
							ПозицияСубконто = Найти(Отбор.ЛевоеЗначение, "Субконто");
							НайденнаяСтрока = Счет.ВидыСубконто.Найти(ФормаОтчета.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
							Если НайденнаяСтрока <> Неопределено Тогда
								ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
								мДобавитьОтбор(ФормаРасшифровка.КН, СтрЗаменить(Строка(Отбор.ЛевоеЗначение), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), Отбор.ПравоеЗначение, Отбор.ВидСравнения);
							КонецЕсли;
						ИначеЕсли Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") 
							И Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
							ФормаРасшифровка.Подразделение = Отбор.ПравоеЗначение;
						Иначе
							мДобавитьОтбор(ФормаРасшифровка.КН, Отбор.ЛевоеЗначение, Отбор.ПравоеЗначение, Отбор.ВидСравнения);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
				Если ДобавитьОтборПоВидСубконто Тогда
					Индекс = 1;
					Для Каждого ВидСубконто Из ФормаОтчета.СписокВидовСубконто Цикл
						Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
							мДобавитьОтбор(ФормаРасшифровка.КН, "ВидСубконто" + Индекс, ВидСубконто.Значение);
							Индекс = Индекс + 1;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если ДобавитьОтборПоВидКорСубконто Тогда
					Индекс = 1;
					Для Каждого ВидСубконто Из ФормаОтчета.СписокВидовКорСубконто Цикл
						Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
							мДобавитьОтбор(ФормаРасшифровка.КН, "ВидКорСубконто" + Индекс, ВидСубконто.Значение);
							Индекс = Индекс + 1;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если Период <> Неопределено Тогда
				ФормаРасшифровка.НачалоПериода = Период;
				ФормаРасшифровка.КонецПериода  = мКонецПериода(Период, ФормаОтчета.Периодичность);
			Иначе
				ФормаРасшифровка.НачалоПериода = ФормаОтчета.НачалоПериода;
				ФормаРасшифровка.КонецПериода  = ФормаОтчета.КонецПериода;
			КонецЕсли;
			ФормаРасшифровка.Настроить();
			
			
			// Настройка показателей
			Для Каждого ЭлементСтруктуры Из ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета Цикл
				ЭлементСтруктуры.Значение.Значение = Ложь;
			КонецЦикла;
			Если УстановитьВсеПоказатели Тогда
				Для Каждого ЭлементСтруктуры Из ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета Цикл
					Если ЭлементСтруктуры.Значение.Использование Тогда
						ЭлементСтруктуры.Значение.Значение = ФормаОтчета.ДанныеОтчета.ПоказателиОтчета[ЭлементСтруктуры.Ключ].Значение;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если Показатель = "Контроль" Тогда
					ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета.БУ.Значение = Истина;
					ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета.НУ.Значение = Истина;
				Иначе
					ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета[Показатель].Значение = Истина;
				КонецЕсли;
			КонецЕсли;
			
			ФормаРасшифровка.Открыть();
			ФормаРасшифровка.ОбновитьОтчет();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура мДобавитьДиаграммуВСтандартныеОтчеты(ФормаОтчета) Экспорт
	
	Диаграмма = ФормаОтчета.КН.Настройки.Структура.Добавить(Тип("ДиаграммаКомпоновкиДанных"));
	Серия = Диаграмма.Серии.Добавить();
	ПолеСерии = Серия.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеСерии.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.ДанныеОтчета.СерияДиаграммы);
	Серия.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Серия.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	Если ФормаОтчета.Периодичность > 0 Тогда
		Точка = Диаграмма.Точки.Добавить();
		ПолеТочки = Точка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеТочки.Поле = Новый ПолеКомпоновкиДанных(?(ФормаОтчета.Периодичность = 2, "Регистратор", "Период"));
		
		Если ЗначениеЗаполнено(ФормаОтчета.НачалоПериода) И ЗначениеЗаполнено(ФормаОтчета.КонецПериода) Тогда
			ПолеТочки.ТипДополнения	= мПолучитьТипДополненияПоИнтервалу(ФормаОтчета.Периодичность);
			ПолеТочки.НачалоПериода = ФормаОтчета.НачалоПериода;
			ПолеТочки.КонецПериода  = ФормаОтчета.КонецПериода;
		КонецЕсли;
		
		Точка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Точка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	КонецЕсли;
	
	ВыбранноеПоле = Диаграмма.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.ДанныеОтчета.ПоказательДиаграммы);
	
	мУстановитьПараметрВывода(Диаграмма, "ТипДиаграммы"                     , мПолучитьВидДиаграммы(ФормаОтчета.ДанныеОтчета.ВидДиаграммы));
	мУстановитьПараметрВывода(Диаграмма, "ТипДиаграммы.ВидПодписей"         , мПолучитьВидПодписейКДиаграмме(ФормаОтчета.ДанныеОтчета.ВидПодписейКДиаграмме));
    мУстановитьПараметрВывода(Диаграмма, "ТипДиаграммы.АвтоРаздвижениеСерий", АвтоРаздвижениеСерий.Максимум);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ИСТОРИЕЙ
////////////////////////////////////////////////////////////////////////////////

Процедура мСохранитьНастройкуДляИстории(ФормаОтчета) Экспорт
	
	МаксимальноеКоличествоХранимыхНастроек = 10;
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ФормаОтчета);
	СтруктураНастроек.Удалить("История");
	СтруктураНастроек.Удалить("НастройкиФормы");
	
	НастройкиДляИстории = XMLСтрока(Новый ХранилищеЗначения(СтруктураНастроек));
	
	Если ФормаОтчета.История.НайтиПоЗначению(НастройкиДляИстории) = Неопределено Тогда
		Если ФормаОтчета.История.Количество() >= МаксимальноеКоличествоХранимыхНастроек Тогда
			ФормаОтчета.История.Удалить(МаксимальноеКоличествоХранимыхНастроек - 1);
		КонецЕсли; 
		ФормаОтчета.История.Вставить(0, НастройкиДляИстории, мПолучитьПредставлениеНастройкиДляИстории(ФормаОтчета));
	КонецЕсли;
	
КонецПроцедуры

Функция мПолучитьПредставлениеНастройкиДляИстории(ФормаОтчета) Экспорт 
	
	Представление = "";
	
	Попытка 
		Представление = ФормаОтчета.ПолучитьПредставлениеНастройкиДляИстории();
	Исключение
		
		ОсновнаяЧастьПредставления = "";
		
		ИдентификаторОбъекта = ФормаОтчета.ИдентификаторОбъекта;
		
		Префикс = "";
		Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСчета"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" Тогда 
			Префикс = "По счету " + ФормаОтчета.Счет;
		КонецЕсли;
		
		Если ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСубконто" Тогда
			ПредставлениеСубконто = "";
			Для Каждого ВидСубконто Из ФормаОтчета.СписокВидовСубконто Цикл
				Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
					ПредставлениеСубконто = ПредставлениеСубконто + ВидСубконто.Значение + ", ";
				КонецЕсли;
			КонецЦикла;
			ПредставлениеСубконто = Сред(ПредставлениеСубконто, 1, СтрДлина(ПредставлениеСубконто) - 2);
			Префикс = "По субконто " + ПредставлениеСубконто;	
		КонецЕсли;
		
		Если ИдентификаторОбъекта = "ОтчетОбъект.ОтчетПоПроводкам"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.СводныеПроводки" Тогда 
			ОсновнаяЧастьПредставления = "Проводки ";
		КонецЕсли;
		
		Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомость" Тогда 
			ОсновнаяЧастьПредставления = "Данные ";
		КонецЕсли;
		
		Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
			ПредставлениеСубконто = "";
			Для Каждого ВидСубконто Из ФормаОтчета.СписокВидовСубконто Цикл
				Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
					ПредставлениеСубконто = ПредставлениеСубконто + ВидСубконто.Значение + ", ";
				КонецЕсли;
			КонецЦикла;
			ПредставлениеСубконто = Сред(ПредставлениеСубконто, 1, СтрДлина(ПредставлениеСубконто) - 2);
			ОсновнаяЧастьПредставления = "По субконто " + ПредставлениеСубконто;	
			ПредставлениеСубконто = "";
			Для Каждого ВидСубконто Из ФормаОтчета.СписокВидовКорСубконто Цикл
				Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
					ПредставлениеСубконто = ПредставлениеСубконто + " Кор. " + ВидСубконто.Значение + ", ";
				КонецЕсли;
			КонецЦикла;
			ПредставлениеСубконто = Сред(ПредставлениеСубконто, 1, СтрДлина(ПредставлениеСубконто) - 2);	
			ОсновнаяЧастьПредставления = ОсновнаяЧастьПредставления + ", " + ПредставлениеСубконто;
		КонецЕсли;
		
		ОсновнаяЧастьПредставления = Префикс + мПолучитьПредставлениеПериода(ФормаОтчета);
		
		СответствиеПоказателей = Новый Соответствие;
		СответствиеПоказателей.Вставить("БУ"               , "БУ");
		СответствиеПоказателей.Вставить("НУ"               , "НУ");
		СответствиеПоказателей.Вставить("Контроль"         , "Контр.");
		СответствиеПоказателей.Вставить("ВалютнаяСумма"    , "Вал.");
		СответствиеПоказателей.Вставить("РазвернутоеСальдо", "Разв.");
		
		ПредставлениеПоказатели = "";
		Для Каждого Показатель Из ФормаОтчета.ДанныеОтчета.ПоказателиОтчета Цикл
			Если Показатель.Значение.Значение Тогда
				ПредставлениеПоказатели = ПредставлениеПоказатели + СответствиеПоказателей[Показатель.Ключ]+ ", ";
			КонецЕсли;
		КонецЦикла;
		ПредставлениеПоказатели = Сред(ПредставлениеПоказатели, 1, СтрДлина(ПредставлениеПоказатели) - 2);
		
		ПредставлениеГруппировка = "";
		Если ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" Тогда
			Для Каждого СтрокаГруппировки Из ФормаОтчета.ДанныеОтчета.Группировка Цикл
				Если СтрокаГруппировки.Использование Тогда
					ПредставлениеГруппировка = ПредставлениеГруппировка + СтрокаГруппировки.Представление + ?(СтрокаГруппировки.ТипГруппировки = ТипИзмеренияПостроителяОтчета.Элементы, "", " (" + СтрокаГруппировки.ТипГруппировки + ")") + ", ";
				КонецЕсли;	
			КонецЦикла;
			ПредставлениеГруппировка = Сред(ПредставлениеГруппировка, 1, СтрДлина(ПредставлениеГруппировка) - 2);
		ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСчета" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСубконто" Тогда
			Если ФормаОтчета.Периодичность <> 0 Тогда
				ПредставлениеГруппировка = "обороты " + мПолучитьПредставлениеПериодичности(ФормаОтчета.Периодичность);
			КонецЕсли;
		КонецЕсли;
		
		ПредставлениеОтбора = Строка(ФормаОтчета.КН.Настройки.Отбор);
		ДополнительнаяЧастьПредставления = "; " + ПредставлениеПоказатели;
		ДополнительнаяЧастьПредставления = ДополнительнаяЧастьПредставления + ?(Не ПустаяСтрока(ПредставлениеГруппировка), "; " + ПредставлениеГруппировка, ПредставлениеГруппировка);
		ДополнительнаяЧастьПредставления = ДополнительнаяЧастьПредставления + ?(Не ПустаяСтрока(ПредставлениеОтбора), "; " + ПредставлениеОтбора, ПредставлениеОтбора);
		
		Представление = СокрЛП(ОсновнаяЧастьПредставления + ДополнительнаяЧастьПредставления);
		
	КонецПопытки;
	
	Возврат Представление;
	
КонецФункции

Процедура мДействияФормыДополнительныеИстория(ФормаОтчета, Кнопка) Экспорт 
	
	ТекущееЗначениеЗакрыватьПанельПриФормированииОтчета = ФормаОтчета.НастройкиФормы.ЗакрыватьПанельПриФормированииОтчета;
	
	Индекс = Число(СтрЗаменить(Кнопка.Имя, "История", ""));
	
	СтруктураПараметров = XMLЗначение(Тип("ХранилищеЗначения"), ФормаОтчета.История[Индекс].Значение).Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ФормаОтчета, СтруктураПараметров);
	мВосстановитьНастройкиФормы(ФормаОтчета, Ложь);
	ФормаОтчета.ОбновитьПанельНастроек();
	ФормаОтчета.НастройкиФормы.ЗакрыватьПанельПриФормированииОтчета = ТекущееЗначениеЗакрыватьПанельПриФормированииОтчета;
	ФормаОтчета.ОбновитьОтчет();
	
КонецПроцедуры

Процедура мОбновитьКоллекциюКнопокИстории(ФормаОтчета) Экспорт
	
	МаксимальнаяДлинаПредставления = 100;
	
	ФормаОтчета.ЭлементыФормы.ДействияФормыДополнительные.Кнопки.История.Кнопки.Очистить();
	
	Индекс = 0;
	Для Каждого ЭлементИстории Из ФормаОтчета.История Цикл
		Представление = ЭлементИстории.Представление;
		
		Если СтрДлина(Представление) > МаксимальнаяДлинаПредставления Тогда
			Представление = Лев(Представление, МаксимальнаяДлинаПредставления - 3) + "...";
		КонецЕсли;
		
		Кнопка = ФормаОтчета.ЭлементыФормы.ДействияФормыДополнительные.Кнопки.История.Кнопки.Добавить("История" + Индекс, ТипКнопкиКоманднойПанели.Действие, Представление, Новый Действие("ДействияФормыДополнительныеИстория"));
		Кнопка.Пояснение = ЭлементИстории.Представление;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры	

// Устанавливает параметр данных компоновщика настроек
Функция УстановитьПараметр(КомпоновщикНастроекКоллекцияЗначений, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	ИначеЕсли ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Найти(ИмяПараметра);
	ИначеЕсли ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
		Возврат ЗначениеПараметра;
	КонецЕсли;
	
КонецФункции

// Получает параметр данных компоновщика настроек
Функция ПолучитьПараметр(КомпоновщикНастроекКоллекцияЗначений, ИмяПараметра) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 ИЛИ ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	ИначеЕсли ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Найти(ИмяПараметра);
	ИначеЕсли ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Возврат ЗначениеПараметра;

КонецФункции

// Обновляет параметры периода в компоновщике настроек по данным формы
Процедура ОбновитьПараметрыПериодаПоФорме(КомпоновщикНастроек, Форма) Экспорт
	
	ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ЗначениеПараметраКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	ЗначениеПараметраПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если ЗначениеПараметраНачалоПериода <> Неопределено Тогда
		ЗначениеПараметраНачалоПериода.Значение = Форма.НачалоПериода;
		ЗначениеПараметраНачалоПериода.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеПараметраКонецПериода <> Неопределено Тогда
		ЗначениеПараметраКонецПериода.Значение = ?(Форма.КонецПериода = '0001-01-01', Форма.КонецПериода, КонецДня(Форма.КонецПериода));
		ЗначениеПараметраКонецПериода.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеПараметраПериод <> Неопределено Тогда
		ЗначениеПараметраПериод.Значение = ?(Форма.Период = '0001-01-01', Форма.Период, КонецДня(Форма.Период));
		ЗначениеПараметраПериод.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму настройки периода
Функция НастроитьПериод(НастройкаПериода, НачалоПериода, КонецПериода) Экспорт
	
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачалоПериода, ?(КонецПериода='0001-01-01', КонецПериода, КонецДня(КонецПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	Если НастройкаПериода.Редактировать() Тогда
		НачалоПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонецПериода = НастройкаПериода.ПолучитьДатуОкончания();
		Возврат НастройкаПериода;
	КонецЕсли;
	
КонецФункции

// Установка колонтитулов для отчета
//
// Параметры
//  ТабличныйДокумент  – ТабличныйДокумент – Отчет, у которого необходимо установить колонтитулы
//  НазваниеОтчета     – Строка            – Название отчета для вывода в колонтитул
//  Пользователь       – Строка            – Имя пользователя для вывода в колонтитул
//
Процедура УстановитьКолонтитулыПоУмолчанию(ТабличныйДокумент, НазваниеОтчета, Пользователь) Экспорт

	Настройка = ПолучитьНастройкиКолонтитулов();
	
	ТабличныйДокумент.ВерхнийКолонтитул.Выводить          = Настройка.ВерхнийКолонтитул.Выводить;
	ТабличныйДокумент.ВерхнийКолонтитул.НачальнаяСтраница = Настройка.ВерхнийКолонтитул.НачальнаяСтраница;
	ТабличныйДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстСлева   = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстСлева, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстВЦентре = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстВЦентре, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстСправа  = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстСправа, НазваниеОтчета, Пользователь);
	
	ТабличныйДокумент.НижнийКолонтитул.Выводить          = Настройка.НижнийКолонтитул.Выводить;
	ТабличныйДокумент.НижнийКолонтитул.НачальнаяСтраница = Настройка.НижнийКолонтитул.НачальнаяСтраница;
	ТабличныйДокумент.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ТабличныйДокумент.НижнийКолонтитул.ТекстСлева   = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстСлева, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.НижнийКолонтитул.ТекстВЦентре = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстВЦентре, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.НижнийКолонтитул.ТекстСправа  = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстСправа, НазваниеОтчета, Пользователь);
	
КонецПроцедуры // УстановитьКолонтитулы()

// Чтение настроек колонтитулов из константы. Если константа не заполнена, то формируются пустые настройки.
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//   Структура   – Настройки колонтитулов
//
Функция ПолучитьНастройкиКолонтитулов()

	Настройка = Константы.НастройкиКолонтитуловПоУмолчанию.Получить().Получить();
	
	Если ТипЗнч(Настройка) <> Тип("Структура") Тогда
		// Если константа не заполнена, то заполним структуру настройками пустых колонтитулов
		
		Настройка = Новый Структура;
		
		Верхний = Новый Структура;
		Нижний = Новый Структура;
		
		Верхний.Вставить("Выводить", Ложь);
		Верхний.Вставить("НачальнаяСтраница", 1);
		Верхний.Вставить("ТекстСлева",   "");
		Верхний.Вставить("ТекстВЦентре", "");
		Верхний.Вставить("ТекстСправа",  "");
		
		Нижний.Вставить("Выводить", Ложь);
		Нижний.Вставить("НачальнаяСтраница", 1);
		Нижний.Вставить("ТекстСлева",   "");
		Нижний.Вставить("ТекстВЦентре", "");
		Нижний.Вставить("ТекстСправа",  "");
		
		Настройка.Вставить("ВерхнийКолонтитул", Верхний);
		Настройка.Вставить("НижнийКолонтитул",  Нижний);
		
	Иначе
		// Если константа заполнена, но нет нужных нам полей, то заполним структуру настройками пустых колонтитулов
	
		Если Не Настройка.Свойство("ВерхнийКолонтитул") Тогда
			
			Верхний = Новый Структура;
			
			Верхний.Вставить("Выводить", Ложь);
			Верхний.Вставить("НачальнаяСтраница", 1);
			Верхний.Вставить("ТекстСлева",   "");
			Верхний.Вставить("ТекстВЦентре", "");
			Верхний.Вставить("ТекстСправа",  "");
			
			Настройка.Вставить("ВерхнийКолонтитул", Верхний);
			
		КонецЕсли;
		
		Если Не Настройка.Свойство("НижнийКолонтитул") Тогда
			
			Нижний = Новый Структура;
			
			Нижний.Вставить("Выводить", Ложь);
			Нижний.Вставить("НачальнаяСтраница", 1);
			Нижний.Вставить("ТекстСлева",   "");
			Нижний.Вставить("ТекстВЦентре", "");
			Нижний.Вставить("ТекстСправа",  "");
			
			Настройка.Вставить("НижнийКолонтитул",  Нижний);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Настройка;

КонецФункции // ПолучитьНастройкиКолонтитулов()

// Проставление в тексте вместо шаблонов, значений
//
// Параметры
//  Текст           – Строка – Исходный текст шаблона
//  НазваниеОтчета  – Строка – Название отчета
//  Пользователь    – Строка – Имя пользователя
//
// Возвращаемое значение:
//   Строка   – результурующий текст для колонтитула
//
Функция ЗаполнитьТекстКолонтитула(Текст, НазваниеОтчета, Пользователь)

	Результат = Текст;
	
	Результат = СтрЗаменить(Результат, "[&НазваниеОтчета]", НазваниеОтчета);
	Результат = СтрЗаменить(Результат, "[&Пользователь]", Пользователь);
	
	Возврат Результат;

КонецФункции // ЗаполнитьТекстКолонтитула()
