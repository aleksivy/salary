Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем РежимРасшифровки Экспорт;
Перем Реквизиты Экспорт;

//
Процедура ОбработкаИзмененияСчета(ПолнаяОбработка = Истина) Экспорт
	
	Если ЗначениеЗаполнено(Счет) Тогда
		
		КоличествоСубконто = Счет.ВидыСубконто.Количество();
		ИмяПоляПрефикс = "Субконто";
		
		ПараметрыОС        = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
		ПараметрыНМА       = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
		ПараметрыФизЛица   = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
		ПараметрыКонтрагентов = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
		
		МассивНаборовДанных = Новый Массив;
		МассивНаборовДанных.Добавить("ОсновнойНаборДанных");
		МассивНаборовДанных.Добавить("Обороты");
		
		// Изменение представления и наложения ограничения типа значения
		Для Индекс = 1 По КоличествоСубконто Цикл
			Для Каждого ЭлементМассива Из МассивНаборовДанных Цикл
				Набор = СхемаКД.НаборыДанных[ЭлементМассива];
				Поле = Набор.Поля.Найти(ИмяПоляПрефикс + Индекс);
				Если Поле <> Неопределено Тогда
					ТипЗначения = Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения;
					Поле.ТипЗначения = ТипЗначения;
					Поле.Заголовок   = Счет.ВидыСубконто[Индекс - 1].ВидСубконто.Наименование;
				КонецЕсли;
				
				Если Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ОсновныеСредства")) Тогда
					ПараметрыОС.ИндексСубконто    = Индекс;
					ПараметрыОС.ЗаголовокСубконто = Поле.Заголовок;
				ИначеЕсли Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НематериальныеАктивы")) Тогда
					ПараметрыНМА.ИндексСубконто    = Индекс;
					ПараметрыНМА.ЗаголовокСубконто = Поле.Заголовок;
				ИначеЕсли Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
					ПараметрыФизЛица.ИндексСубконто    = Индекс;
					ПараметрыФизЛица.ЗаголовокСубконто = Поле.Заголовок;
				ИначеЕсли Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
					ПараметрыКонтрагентов.ИндексСубконто    = Индекс;
					ПараметрыКонтрагентов.ЗаголовокСубконто = Поле.Заголовок;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
		
		КН.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
			
		Если ПолнаяОбработка Тогда
			
			// Управление показателями
			Если Счет.НалоговыйУчет Тогда
				ДанныеОтчета.ПоказателиОтчета.БУ.Использование = Истина;
				ДанныеОтчета.ПоказателиОтчета.БУ.Значение      = Истина;
				ДанныеОтчета.ПоказателиОтчета.НУ.Использование = Истина;
				ДанныеОтчета.ПоказателиОтчета.НУ.Значение      = Ложь;
				ДанныеОтчета.ПоказателиОтчета.Контроль.Использование = Истина;
				ДанныеОтчета.ПоказателиОтчета.Контроль.Значение      = Ложь;
			Иначе
				ДанныеОтчета.ПоказателиОтчета.БУ.Использование = Истина;
				ДанныеОтчета.ПоказателиОтчета.БУ.Значение      = Истина;
				ДанныеОтчета.ПоказателиОтчета.НУ.Использование = Ложь;
				ДанныеОтчета.ПоказателиОтчета.НУ.Значение      = Ложь;
				ДанныеОтчета.ПоказателиОтчета.Контроль.Использование = Ложь;
				ДанныеОтчета.ПоказателиОтчета.Контроль.Значение      = Ложь;	
			КонецЕсли;
			Если Счет.Валютный Тогда
				ДанныеОтчета.ПоказателиОтчета.ВалютнаяСумма.Использование = Истина;
				ДанныеОтчета.ПоказателиОтчета.ВалютнаяСумма.Значение      = Истина;			
			Иначе
				ДанныеОтчета.ПоказателиОтчета.ВалютнаяСумма.Использование = Ложь;
				ДанныеОтчета.ПоказателиОтчета.ВалютнаяСумма.Значение      = Ложь;		
			КонецЕсли;
			
			Если Счет.Вид = ВидСчета.АктивноПассивный Тогда
				ДанныеОтчета.ПоказателиОтчета.РазвернутоеСальдо.Использование = Истина;
				ДанныеОтчета.ПоказателиОтчета.РазвернутоеСальдо.Значение      = Ложь;		
			Иначе
				ДанныеОтчета.ПоказателиОтчета.РазвернутоеСальдо.Использование = Ложь;
				ДанныеОтчета.ПоказателиОтчета.РазвернутоеСальдо.Значение      = Ложь;	
			КонецЕсли;
			
			// Добавление группировок с соответствии с выбранным счетом	
			ДанныеОтчета.Группировка.Очистить();
			
			// Если есть аналитика Договоры, то надо добавить аналитику ТМЦ
			лЕстьДоговор = Ложь;
			лНомерСубконтоДоговор = 0;
			лТипСубконтоДоговоры = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
			Для Индекс = 1 По КоличествоСубконто Цикл
				НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
				Поле = КН.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоляПрефикс + Индекс));
				НоваяСтрока.Поле           = Поле.Поле;
				НоваяСтрока.Использование  = Ложь;
				НоваяСтрока.Представление  = Поле.Заголовок;
				НоваяСтрока.ТипГруппировки = ТипИзмеренияПостроителяОтчета.Элементы;	
				// Проверим наличие аналитики Договоры
				Если Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения = лТипСубконтоДоговоры Тогда
					лЕстьДоговор = Истина;
					лНомерСубконтоДоговор = Индекс;
				КонецЕсли;
			КонецЦикла;	
			
			Если лЕстьДоговор Тогда
				НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
				Поле = КН.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоляПрефикс + лНомерСубконтоДоговор + ".Номенклатура"));
				НоваяСтрока.Поле           = Поле.Поле;
				НоваяСтрока.Использование  = Ложь;
				НоваяСтрока.Представление  = Поле.Заголовок;
				НоваяСтрока.ТипГруппировки = ТипИзмеренияПостроителяОтчета.Элементы;	
			КонецЕсли;
			
			Если Счет.НалоговыйУчет Тогда
				НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
				НоваяСтрока.Поле           = "НалоговоеНазначение";
				НоваяСтрока.Использование  = Ложь;
				НоваяСтрока.Представление  = НСтр("ru='Налоговое назначение';uk='Податкове призначення'");
				НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
			КонецЕсли;
			
			// Обработка дополнительных полей
			мЗаполнитьДополнительныеПоляПоУмолчанию(ЭтаФорма);
			
			Если Не РежимРасшифровки Тогда
				// Добавление неактивных отборов по субконто в соответствии с выбранным счетом
				ОтборыДляУдаления = Новый Массив;
				Для Каждого ЭлементОтбора Из КН.Настройки.Отбор.Элементы Цикл
					Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
						Если Найти(ЭлементОтбора.ЛевоеЗначение, "Субконто") > 0 ИЛИ Строка(ЭлементОтбора.ЛевоеЗначение) = "Валюта" 
							ИЛИ (Найти(ЭлементОтбора.ЛевоеЗначение, "НалоговоеНазначение") = 1) Тогда
							ОтборыДляУдаления.Добавить(ЭлементОтбора);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ЭлементОтбора Из ОтборыДляУдаления Цикл
					КН.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
				КонецЦикла;
				
				Для Индекс = 1 По КоличествоСубконто Цикл
					мДобавитьОтбор(КН, ИмяПоляПрефикс + Индекс, Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения.ПривестиЗначение(Неопределено), , Ложь);	
				КонецЦикла;
				// Если есть аналитика Договоры, то надо добавить отбор по аналитике ТМЦ
				Если лЕстьДоговор Тогда
					лТипСубконтоНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
					мДобавитьОтбор(КН, ИмяПоляПрефикс + лНомерСубконтоДоговор + ".Номенклатура", лТипСубконтоНоменклатура.ПривестиЗначение(Неопределено), , Ложь);	
				КонецЕсли;
				Если Счет.Валютный Тогда
					Поле = КН.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Валюта"));
					мДобавитьОтбор(КН, "Валюта", Поле.Тип.ПривестиЗначение(Неопределено), , Ложь); 
				КонецЕсли;
				Если Счет.НалоговыйУчет Тогда
					Поле = КН.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("НалоговоеНазначение"));
					мДобавитьОтбор(КН, "НалоговоеНазначение", Поле.Тип.ПривестиЗначение(Неопределено), , Ложь); 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	мЗаполнитьДанныеОтчета(ЭтаФорма);
	
КонецПроцедуры

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено, ВыводитьПолностью = Истина) Экспорт
	
	Результат.Очистить();
	
	Настройки = КН.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтаФорма, Результат);
	Если ВыводитьПолностью Тогда
		ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
		КН.Восстановить();
		НастройкаКомпоновщикаНастроек = КН.ПолучитьНастройки();
		мВывестиОтчет(ЭтаФорма, НастройкаКомпоновщикаНастроек, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
		КН.ЗагрузитьНастройки(Настройки);
	КонецЕсли; 
	ВыводПодписейОтчета(ЭтаФорма, Результат);
	
	Если ВыводитьПолностью Тогда
		// Выполним дополнительную обработку Результата отчета
		ОбработкаРезультатаОтчета(Результат);
		
		// Сохраним настройки для Истории
		мСохранитьНастройкуДляИстории(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередВыводомОтчета(МакетКомпоновки) Экспорт
	
	КорСчетаВсе = Новый СписокЗначений;
	
	ИсходныйТекстЗапроса = МакетКомпоновки.НаборыДанных.Обороты.Запрос;
	КонечныйТекстЗапроса = "";
	ЗавершающаяЧастьЗапроса = ") КАК ХозрасчетныйОбороты";
	ПозицияКорсчета = Найти(ИсходныйТекстЗапроса, ", " + ЗавершающаяЧастьЗапроса);
	ПостояннаяЧастьЗапроса = Лев(ИсходныйТекстЗапроса, ПозицияКорСчета - 1);
	
	// Поиск условия по кор. счету
	Индекс = СтрДлина(ПостояннаяЧастьЗапроса);
	Символ = Сред(ПостояннаяЧастьЗапроса, Индекс, 1); 
	УсловиеКорСчета = "";
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Символ = Сред(ПостояннаяЧастьЗапроса, Индекс, 1);		
		Если Символ = "," Тогда
			УсловиеКорСчета = Сред(ПостояннаяЧастьЗапроса, Индекс + 1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Формируем запрос-объединение для детализации корсчетов
	Индекс = 1;
	Для Каждого СтрокаТаблицы Из ДанныеОтчета.ГруппировкаКор Цикл 
		Если СтрокаТаблицы.Использование И ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			КорСчетаВсе.Добавить(СтрокаТаблицы.Счет);
			
			Если Не ПустаяСтрока(УсловиеКорСчета) Тогда
				ТекстУсловияКорСчета = " И КорСчет В ИЕРАРХИИ(&КорСчет" + Индекс + ")";
			Иначе
				ТекстУсловияКорСчета = " КорСчет В ИЕРАРХИИ(&КорСчет" + Индекс + ")";
			КонецЕсли;
			
			//Добавим значение корсчета
			НовоеЗначение = МакетКомпоновки.ЗначенияПараметров.Добавить();
			НовоеЗначение.Имя = "КорСчет" + Индекс;
			НовоеЗначение.Значение = СтрокаТаблицы.Счет;
						
			//Добавим значение корсубконто
			СписокКорСубконто = Новый СписокЗначений;
			
			Для Каждого ВидКорСубконто Из СтрокаТаблицы.ПоСубконто Цикл
				Если ВидКорСубконто.Пометка И ТипЗнч(ВидКорСубконто.Значение) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные") Тогда
					СписокКорСубконто.Добавить(ВидКорСубконто.Значение); 
				КонецЕсли;
			КонецЦикла;
						
			НовоеЗначение = МакетКомпоновки.ЗначенияПараметров.Добавить();
			НовоеЗначение.Имя = "КорСубконто" + Индекс;
			НовоеЗначение.Значение = СписокКорСубконто;			
			
			Если СписокКорСубконто.Количество() = 0 Тогда 
				ТекстУсловияКорСубконто = "";                 
				НачальныйИндексКор = 0;
			Иначе
				ТекстУсловияКорСубконто = "&КорСубконто" + Индекс;
				НачальныйИндексКор = СписокКорСубконто.Количество();
			КонецЕсли;
			
			ПромежуточныйТекстЗапроса = ПостояннаяЧастьЗапроса;
			
			Для ИндексКор = НачальныйИндексКор + 1 По 3 Цикл
				ПромежуточныйТекстЗапроса = СтрЗаменить(ПромежуточныйТекстЗапроса, "ХозрасчетныйОбороты.КорСубконто" + ИндексКор, "NULL");
			КонецЦикла;
			
			КонечныйТекстЗапроса = КонечныйТекстЗапроса + " " + ПромежуточныйТекстЗапроса + " " + ТекстУсловияКорСчета + ", " + ТекстУсловияКорСубконто + ЗавершающаяЧастьЗапроса;
			КонечныйТекстЗапроса = КонечныйТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ";
			
					
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Индекс > 1 Тогда 
		КонечныйТекстЗапроса = Сред(КонечныйТекстЗапроса, 0, СтрДлина(КонечныйТекстЗапроса) - 16);
	КонецЕсли;
	
	Для Индекс = 1 По 3 Цикл
		ПостояннаяЧастьЗапроса = СтрЗаменить(ПостояннаяЧастьЗапроса, "ХозрасчетныйОбороты.КорСубконто" + Индекс + " КАК", "NULL КАК");
	КонецЦикла;
	
	Если Индекс > 1 Тогда
		Если Не ПустаяСтрока(УсловиеКорСчета) Тогда
			ТекстУсловияКорСчета = " И КорСчет НЕ В ИЕРАРХИИ(&КорСчетВсе)";
		Иначе
			ТекстУсловияКорСчета = " КорСчет НЕ В ИЕРАРХИИ(&КорСчетВсе)";
		КонецЕсли;
		НовоеЗначение = МакетКомпоновки.ЗначенияПараметров.Добавить();
		НовоеЗначение.Имя      = "КорСчетВсе";
		НовоеЗначение.Значение = КорСчетаВсе;	
		
		ИсходныйТекстЗапроса = ПостояннаяЧастьЗапроса + ТекстУсловияКорСчета + ЗавершающаяЧастьЗапроса;
	КонецЕсли;
	
	Если Не ПустаяСтрока(КонечныйТекстЗапроса) Тогда
		КонечныйТекстЗапроса = ИсходныйТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ " + КонечныйТекстЗапроса;
	Иначе
		КонечныйТекстЗапроса = ИсходныйТекстЗапроса;
	КонецЕсли;
	
	КонечныйТекстЗапроса = СокрЛП(СтрЗаменить(КонечныйТекстЗапроса, "РАЗРЕШЕННЫЕ", ""));
	КонечныйТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + Сред(КонечныйТекстЗапроса, 8); 
	
	МакетКомпоновки.НаборыДанных.Обороты.Запрос = КонечныйТекстЗапроса;
	
	МакетШапкиОтчета = мПолучитьМакетШапки(МакетКомпоновки);
	Ячейка00 = МакетШапкиОтчета.Макет[0].Ячейки[0];
	Ячейка00.Элементы.Очистить();
	НовыйЭлемент = Ячейка00.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
	
	СтрокаЗаголовкаГруппировки = ?(ПоСубсчетам, "Субсчет \ ", "");
	КоличествоГруппировок = ?(ПоСубсчетам, 1, 0);
	Для Каждого СтрокаТаблицы Из ДанныеОтчета.Группировка Цикл
		Если СтрокаТаблицы.Использование Тогда
			СтрокаЗаголовкаГруппировки = СтрокаЗаголовкаГруппировки + СтрокаТаблицы.Представление + " \ ";
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
	КонецЦикла;
	СтрокаЗаголовкаГруппировки = Сред(СтрокаЗаголовкаГруппировки, 1, СтрДлина(СтрокаЗаголовкаГруппировки) - 2);
	Если КоличествоГруппировок = 0 Тогда
		СтрокаЗаголовкаГруппировки = "Счет";
	КонецЕсли;
		
	НовыйЭлемент.Значение = СтрокаЗаголовкаГруппировки;
	
	Ячейка01 = МакетШапкиОтчета.Макет[0].Ячейки[1];
	Ячейка01.Элементы.Очистить();
	НовыйЭлемент = Ячейка01.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
	НовыйЭлемент.Значение = ?(ПоСубсчетамКорСчетов, "Субсчет кор. счета", "Кор. счет");
	мУстановитьПараметр(Ячейка01.Оформление.Элементы, "ОбъединятьПоГоризонтали", Ложь);
	
	Ячейка10 = МакетШапкиОтчета.Макет[1].Ячейки[0];
	Ячейка10.Элементы.Очистить();
	мУстановитьПараметр(Ячейка10.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);

	МассивДляУдаления = Новый Массив;
	Для Индекс = 1 По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
		МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
	КонецЦикла;
	
	МакетГруппировкиСчетЗаголовок = мПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Счет", , "Заголовок");
	МакетГруппировкиСчетПодвал    = мПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Счет", , "Подвал");
	
	МакетГруппировкиСубконтоЗаголовок = мПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Субконто", , "Заголовок");
	МакетГруппировкиСубконтоПодвал    = мПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Субконто", , "Подвал");
	
	МакетГруппировкиОрганизацияЗаголовок = мПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Организация", , "Заголовок");
	МакетГруппировкиОрганизацияПодвал    = мПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Организация", , "Подвал");

	МакетГруппировкиВалютаЗаголовок = мПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Валюта", , "Заголовок");
	МакетГруппировкиВалютаПодвал    = мПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Валюта", , "Подвал");

	МакетГруппировкиПериодЗаголовок = мПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Период", , "Заголовок");
	МакетГруппировкиПериодПодвал    = мПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Период", , "Подвал");

	МакетГруппировкиНалоговоеНазначениеЗаголовок = мПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "НалоговоеНазначение", , "Заголовок");
	МакетГруппировкиНалоговоеНазначениеПодвал    = мПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "НалоговоеНазначение", , "Подвал");
	
	МакетГруппировкиКорЗаголовок = мПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Кор", , "Заголовок");

	Для Каждого Элемент Из МассивДляУдаления Цикл
		МакетШапкиОтчета.Макет.Удалить(Элемент);
	КонецЦикла;
	//
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	//
	Для Каждого Макет Из МакетКомпоновки.Макеты Цикл 
		МассивДляУдаления.Очистить();
		Если МакетГруппировкиСчетЗаголовок.Найти(Макет) <> Неопределено 
			ИЛИ МакетГруппировкиСубконтоЗаголовок.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиНалоговоеНазначениеЗаголовок.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиОрганизацияЗаголовок.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиВалютаЗаголовок.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиПериодЗаголовок.Найти(Макет) <> Неопределено Тогда
			КоличествоПоказателей = Макет.Макет.Количество() / 3;
			Для Индекс = КоличествоПоказателей По Макет.Макет.Количество() - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);
			КонецЦикла;
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				Ячейка = Макет.Макет[Индекс].Ячейки[1];
				мУстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоГоризонтали", Ложь);	
			КонецЦикла;
			
			Ячейка00 = Макет.Макет[0].Ячейки[0];
			ПараметрОтступ = мПолучитьПараметр(Ячейка00.Оформление.Элементы, "Отступ");
			Ячейка01 = Макет.Макет[0].Ячейки[1];
			НовыйЭлемент = Ячейка01.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
			НовыйЭлемент.Значение = НСтр("ru='Начальное сальдо';uk='Початкове сальдо'");
			мУстановитьПараметр(Ячейка01.Оформление.Элементы, "Отступ", ПараметрОтступ.Значение); 
		КонецЕсли;
		
		Если МакетГруппировкиСчетПодвал.Найти(Макет) <> Неопределено 
			ИЛИ МакетГруппировкиСубконтоПодвал.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиНалоговоеНазначениеПодвал.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиОрганизацияПодвал.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиВалютаПодвал.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиПериодПодвал.Найти(Макет) <> Неопределено Тогда
			КоличествоПоказателей = Макет.Макет.Количество() / 3;
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);  
			КонецЦикла;
			Ячейка00 = Макет.Макет[0].Ячейки[0];
			ПараметрОтступ = мПолучитьПараметр(Ячейка00.Оформление.Элементы, "Отступ");
			
			// Область итога "Оборот"
			ЯчейкаN0 = Макет.Макет[КоличествоПоказателей].Ячейки[0];
			мУстановитьПараметр(ЯчейкаN0.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);	
			ЯчейкаN1 = Макет.Макет[КоличествоПоказателей].Ячейки[1];
			мУстановитьПараметр(ЯчейкаN1.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);
			НовыйЭлемент = ЯчейкаN1.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
			НовыйЭлемент.Значение = "Оборот";
			мУстановитьПараметр(ЯчейкаN1.Оформление.Элементы, "Отступ", ПараметрОтступ.Значение);
			ЯчейкаN2 = Макет.Макет[КоличествоПоказателей].Ячейки[2];
			мУстановитьПараметр(ЯчейкаN2.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);
			
			Для Индекс = КоличествоПоказателей По КоличествоПоказателей * 2 - 1 Цикл
				Ячейка1 = Макет.Макет[Индекс].Ячейки[1];
				мУстановитьПараметр(Ячейка1.Оформление.Элементы, "ОбъединятьПоГоризонтали", Ложь);
			КонецЦикла;
			
			// Область итога "Конечное сальдо"
			Ячейка2N0 = Макет.Макет[КоличествоПоказателей * 2].Ячейки[0];
			мУстановитьПараметр(Ячейка2N0.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);	
			Ячейка2N1 = Макет.Макет[КоличествоПоказателей * 2].Ячейки[1];
			мУстановитьПараметр(Ячейка2N1.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);
			НовыйЭлемент = Ячейка2N1.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
			НовыйЭлемент.Значение = НСтр("ru='Конечное сальдо';uk='Кінцеве сальдо'");
			мУстановитьПараметр(Ячейка2N1.Оформление.Элементы, "Отступ", ПараметрОтступ.Значение);			
			Ячейка2N2 = Макет.Макет[КоличествоПоказателей * 2].Ячейки[2];
			мУстановитьПараметр(Ячейка2N2.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);
			Для Индекс = 2 * КоличествоПоказателей По КоличествоПоказателей * 3 - 1 Цикл
				Ячейка2N1 = Макет.Макет[Индекс].Ячейки[1];
				мУстановитьПараметр(Ячейка2N1.Оформление.Элементы, "ОбъединятьПоГоризонтали", Ложь);
			КонецЦикла;
		КонецЕсли;
		
		Если МакетГруппировкиКорЗаголовок.Найти(Макет) <> Неопределено Тогда
			КоличествоПоказателей = Макет.Макет.Количество() / 3;
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);  
			КонецЦикла;
			Для Индекс = КоличествоПоказателей * 2 По КоличествоПоказателей * 3 - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);  
			КонецЦикла;
			
			Ячейка01 = Макет.Макет[0].Ячейки[1];
			Ячейка1 = Макет.Макет[КоличествоПоказателей].Ячейки[1];
			мУстановитьПараметр(Ячейка1.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);
			
			Для Каждого Элемент Из Ячейка01.Элементы Цикл
				НовыйЭлемент = Ячейка1.Элементы.Добавить(ТипЗнч(Элемент));
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
			КонецЦикла; 
			
			Для Каждого Элемент Из Ячейка01.Оформление.Элементы Цикл
				Индекс = Ячейка01.Оформление.Элементы.Индекс(Элемент);
				Приемник = Ячейка1.Оформление.Элементы[Индекс];
				ЗаполнитьЗначенияСвойств(Приемник, Элемент);
			КонецЦикла; 
			
			Ячейка2 = Макет.Макет[КоличествоПоказателей].Ячейки[2];
			мУстановитьПараметр(Ячейка2.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);
			
			Для Индекс = КоличествоПоказателей + 1 По КоличествоПоказателей * 2 Цикл
				Ячейка0 = Макет.Макет[Индекс].Ячейки[0];
				мУстановитьПараметр(Ячейка0.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
			КонецЦикла;
		КонецЕсли;
		//
		Для Каждого Элемент Из МассивДляУдаления Цикл
			Макет.Макет.Удалить(Элемент);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередВыводомЭлементаРезультата(МакетКомпоновки, ДанныеРасшифровки, ЭлементРезультата, Отказ = Ложь) Экспорт

	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	КН.Настройки.Структура.Очистить();
	КН.Настройки.Выбор.Элементы.Очистить();
	
	мУстановитьПараметр(КН, "Счет"         , Счет);
	мУстановитьПараметр(КН, "Периодичность", Периодичность);
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		мУстановитьПараметр(КН, "НачалоПериода", НачалоДня(НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		мУстановитьПараметр(КН, "КонецПериода", КонецДня(КонецПериода));
		мУстановитьПараметр(КН, "ПараметрПериод", КонецДня(КонецПериода));
	Иначе
		мУстановитьПараметр(КН, "ПараметрПериод", КонецДня(ТекущаяДата()));
	КонецЕсли;
		
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("НУ");
	МассивПоказателей.Добавить("Контроль");
	МассивПоказателей.Добавить("ВалютнаяСумма");
		
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	КоличествоПоказателей = 0;
	Для Каждого Показатель Из ПоказателиОтчета Цикл
		Если Показатель.Ключ <> "РазвернутоеСальдо" Тогда
			КоличествоПоказателей = КоличествоПоказателей + Показатель.Значение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоПоказателей > 1 Тогда
		ГруппаПоказатели = КН.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоказатели.Заголовок     = "Показатели";
		ГруппаПоказатели.Использование = Истина;
		ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Индекс = 1 По 3 Цикл
			Если Индекс = 1 Тогда
					ЗначениеПодстановки = "НачальныйОстаток";
				ИначеЕсли Индекс = 2 Тогда 
					ЗначениеПодстановки = "Оборот";
				Иначе
					ЗначениеПодстановки = "КонечныйОстаток";
				КонецЕсли;
			Для Каждого ЭлементМассива Из МассивПоказателей Цикл
				Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
					мДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ЭлементМассива + ЗначениеПодстановки);
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	
	ГруппаДт = КН.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДт.Заголовок     = "Дебет";
	ГруппаДт.Использование = Истина;
	ГруппаДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаКт = КН.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаКт.Заголовок     = "Кредит";
	ГруппаКт.Использование = Истина;
	ГруппаКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;	
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("НУ");
	
	
	МассивПоказателейДоп = Новый Массив;
	МассивПоказателейДоп.Добавить("Контроль");
	МассивПоказателейДоп.Добавить("ВалютнаяСумма");
	
	ВидОстатоков = ?(ПоказателиОтчета.РазвернутоеСальдо.Значение, "Развернутый", "");
	
	Для Каждого ЭлементМассива Из МассивПоказателей Цикл
		Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
			мДобавитьВыбранноеПоле(ГруппаДт, "СальдоНаНачалоПериода." + ЭлементМассива + "Начальный" + ВидОстатоков + "ОстатокДт");
			мДобавитьВыбранноеПоле(ГруппаКт, "СальдоНаНачалоПериода." + ЭлементМассива + "Начальный" + ВидОстатоков + "ОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивПоказателейДоп Цикл
		Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
			мДобавитьВыбранноеПоле(ГруппаДт, "СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокДт");
			мДобавитьВыбранноеПоле(ГруппаКт, "СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивПоказателей Цикл
		Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
			мДобавитьВыбранноеПоле(ГруппаДт,        "ОборотыЗаПериод."       + ЭлементМассива + "ОборотДт");
			мДобавитьВыбранноеПоле(ГруппаКт,        "ОборотыЗаПериод."       + ЭлементМассива + "ОборотКт");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивПоказателейДоп Цикл
		Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
			мДобавитьВыбранноеПоле(ГруппаДт,        "ОборотыЗаПериод."       + ЭлементМассива + "ОборотДт");
			мДобавитьВыбранноеПоле(ГруппаКт,        "ОборотыЗаПериод."       + ЭлементМассива + "ОборотКт");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивПоказателей Цикл
		Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
			мДобавитьВыбранноеПоле(ГруппаДт,  "СальдоНаКонецПериода."  + ЭлементМассива + "Конечный"  + ВидОстатоков + "ОстатокДт");
			мДобавитьВыбранноеПоле(ГруппаКт,  "СальдоНаКонецПериода."  + ЭлементМассива + "Конечный"  + ВидОстатоков + "ОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивПоказателейДоп Цикл
		Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
			мДобавитьВыбранноеПоле(ГруппаДт,  "СальдоНаКонецПериода."  + ЭлементМассива + "КонечныйОстатокДт");
			мДобавитьВыбранноеПоле(ГруппаКт,  "СальдоНаКонецПериода."  + ЭлементМассива + "КонечныйОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПолеГруппировки Из ДанныеОтчета.ДополнительныеПоля Цикл 
		Если ПолеГруппировки.Использование Тогда
			мДобавитьВыбранноеПоле(КН, ПолеГруппировки.Поле);
		КонецЕсли;
	КонецЦикла;

  
	Структура = КН.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		
	ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Счет");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных")); 
	мУстановитьПараметрВывода(Структура, "РасположениеГруппировки", РасположениеГруппировкиКомпоновкиДанных.НачалоИКонец); 
	
	Если Не ПоСубсчетам Тогда
		ЗначениеОтбора = мДобавитьОтбор(Структура.Отбор, "SystemFields.LevelInGroup", 1);
		ЗначениеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
		
		мУстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	КонецЕсли;
	
	Для Каждого ПолеВыбраннойГруппировки Из ДанныеОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			
			Если ПолеВыбраннойГруппировки.ТипГруппировки = ТипИзмеренияПостроителяОтчета.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = ТипИзмеренияПостроителяОтчета.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			мУстановитьПараметрВывода(Структура, "РасположениеГруппировки", РасположениеГруппировкиКомпоновкиДанных.НачалоИКонец);
		КонецЕсли;
	КонецЦикла;
	
	// Период
	мДобавитьГруппировкуПоПериоду(ЭтаФорма, Структура);
	
	// Валюта
	Если ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
		Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Валюта");		
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
		мУстановитьПараметрВывода(Структура, "РасположениеГруппировки", РасположениеГруппировкиКомпоновкиДанных.НачалоИКонец);
	КонецЕсли;
	
	// Кор счет
	Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("КорСчет");	
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
	мУстановитьПараметрВывода(Структура, "ВыводитьОтбор"               , ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	мУстановитьПараметрВывода(Структура, "РасположениеПолейГруппировки", РасположениеПолейГруппировкиКомпоновкиДанных.ОтдельноИТолькоВИтогах); 
	
	Если Не ПоСубсчетамКорСчетов Тогда
		// Установка отбора на выводимый уровень иерархии счета
		ГруппаЭлементовОтбора = Структура.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
		ГруппаЭлементовОтбора.ТипГруппы  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		мДобавитьОтбор(ГруппаЭлементовОтбора, "СистемныеПоля.УровеньВГруппировке", 1);
		СписокСчетовПоСубсчетам = мПолучитьСписокСчетовПоСубсчетам(ДанныеОтчета.ГруппировкаКор);;
		мДобавитьОтбор(ГруппаЭлементовОтбора, "КорСчет", СписокСчетовПоСубсчетам, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, СписокСчетовПоСубсчетам.Количество() > 0);
	КонецЕсли;
	
	//КорСубконто 
	КоличествоКорГруппировок = 0;
	Для Каждого СтрокаГруппировки Из ДанныеОтчета.ГруппировкаКор Цикл
		Если СтрокаГруппировки.Использование Тогда
			КоличествоКорГруппировок = КоличествоКорГруппировок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоКорГруппировок > 0 Тогда
		Для Индекс = 1 По 3 Цикл 
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("КорСубконто" + Индекс);		
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
		КонецЦикла;
	КонецЕсли;	
	
	мДобавитьОтборДляПоказателяКонтроль(ЭтотОбъект);
	
	
	УсловноеОформлениеАвтоотступа = Неопределено;
	Для каждого ЭлементОформления Из КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = НСтр("ru='Уменьшенный автоотступ';uk='Зменшений авто відступ'") Тогда
			УсловноеОформлениеАвтоотступа = ЭлементОформления;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УсловноеОформлениеАвтоотступа = Неопределено Тогда
		УсловноеОформлениеАвтоотступа = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		УсловноеОформлениеАвтоотступа.Представление = НСтр("ru='Уменьшенный автоотступ';uk='Зменшений авто відступ'");
		УсловноеОформлениеАвтоотступа.Оформление.УстановитьЗначениеПараметра("Автоотступ", 1);
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
		УсловноеОформлениеАвтоотступа.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	Иначе
		УсловноеОформлениеАвтоотступа.Поля.Элементы.Очистить();
	КонецЕсли;
	
	Если УсловноеОформлениеАвтоотступа.Поля.Элементы.Количество() = 0 Тогда
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
	КонецЕсли;
	
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	
	Поле = УсловноеОформление.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода.НУНачальныйОстатокДт");
	Поле = УсловноеОформление.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода.КонтрольНачальныйОстатокДт");
	
	Поле = УсловноеОформление.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода.НУКонечныйОстатокДт");
	Поле = УсловноеОформление.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода.КонтрольКонечныйОстатокДт");
	
	мДобавитьОтбор(УсловноеОформление.Отбор, "Счет.НалоговыйУчет", Ложь);
	мУстановитьПараметр(УсловноеОформление.Оформление, "МаксимальнаяВысота", 1);
КонецПроцедуры

Процедура ВыводЗаголовкаОтчета(ФормаОтчета, Результат)
	
	 мВыводЗаголовкаОтчета(ФормаОтчета, Результат);
			
КонецПроцедуры

Процедура ВыводПодписейОтчета(ФормаОтчета, Результат)
	
	мВыводПодписейОтчета(ФормаОтчета, Результат);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ЗаголовокОтчета = "Анализ счета " + Счет + мПолучитьПредставлениеПериода(ЭтаФорма);

	Возврат ЗаголовокОтчета;
	
КонецФункции

Процедура ПолучитьСтруктуруПоказателейОтчета() Экспорт
	
	ПоказателиОтчета = мПолучитьСтруктуруПоказателейОтчета(,, Истина, Истина, Истина);
	ДанныеОтчета.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(Результат)
	
	мОбработкаРезультатаОтчета(ЭтаФорма, Результат);

	// Зафиксируем заголовок отчета
	ВысотаЗаголовка = Результат.Области.Заголовок.Низ;
	Результат.ФиксацияСверху = ВысотаЗаголовка + 1;
	
	ВыводитьКолонкуСчет = Ложь;
	
	КоличествоГруппировок = 0;
	Для Каждого СтрокаГруппировки Из ДанныеОтчета.Группировка Цикл
		Если СтрокаГруппировки.Использование Тогда
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоСубсчетам ИЛИ ДанныеОтчета.ПоказателиОтчета.ВалютнаяСумма.Значение ИЛИ Периодичность > 0 ИЛИ КоличествоГруппировок > 0 Тогда 
		ВыводитьКолонкуСчет = Истина;
	КонецЕсли;
	
	Если Не ВыводитьКолонкуСчет Тогда
		Результат.УдалитьОбласть(Результат.Область("C1"), ТипСмещенияТабличногоДокумента.ПоВертикали);	
	КонецЕсли;
	
КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить() Экспорт
	
	ЗаполнитьНачальныеНастройки();
	ОбработкаИзмененияСчета(РежимРасшифровки);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	мСохранитьНастройку(ЭтаФорма);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	Если РежимРасшифровки Тогда
		НастройкиФормы = СтруктураПараметров.НастройкиФормы;
	Иначе
		мПрименитьСтруктуруПараметровОтчета(ЭтаФорма, СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	Если Не ЗначениеЗаполнено(СохраненнаяНастройка) И Не РежимРасшифровки Тогда
		НачалоПериода = НачалоМесяца(ТекущаяДата());
		КонецПериода  = КонецМесяца(ТекущаяДата());
		Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
			Организация   = глЗначениеПеременной("ОсновнаяОрганизация");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТЧИКИ ФОРМЫ
Процедура ОбновитьОтчет(ВыводитьПолностью = Истина) Экспорт
	
	Если ВыводитьПолностью Тогда
		Если Не мПроверитьЗаполнениеОбязательныхРеквизитов(ЭтаФорма) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;  
	
	Если РежимРасшифровки Тогда
		РежимРасшифровки = Ложь;
	Иначе
		мСохранитьДанныеОтчета(ЭтаФорма);    
	КонецЕсли;
	
	Если НастройкиФормы.ЗакрыватьПанельПриФормированииОтчета И ВыводитьПолностью Тогда
		ЭлементыФормы.ДействияФормыДополнительные.Кнопки.ПанельПользователя.Пометка = Ложь;
		мУправлениеОтображениемПанелиПользователя(ЭтаФорма);
	КонецЕсли;
	
	СформироватьОтчет(ЭтаФорма.ЭлементыФормы.Результат, ДР, Ложь, , ВыводитьПолностью);
	
	мОбновитьКоллекциюКнопокИстории(ЭтаФорма);
	
КонецПроцедуры

Процедура ОбновитьПанельНастроек() Экспорт
	
	мОбновитьПредставлениеПоказателейОтчета(ЭтаФорма);
	Группировка        = ДанныеОтчета.Группировка.Скопировать();
	ГруппировкаКор     = ДанныеОтчета.ГруппировкаКор.Скопировать();
	ДополнительныеПоля = ДанныеОтчета.ДополнительныеПоля.Скопировать();
	
КонецПроцедуры
/////
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	мНазначитьФормеУникальныйКлючИдентификации(ЭтаФорма);
		
	Если Не мЗаполнитьНастройкиПриОткрытииОтчета(ЭтаФорма) Тогда
		ИнициализацияОтчета();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если Не РежимРасшифровки Тогда
		Настроить();
	КонецЕсли;
	
	мВосстановитьНастройкиФормы(ЭтаФорма);
	ОбновитьПанельНастроек();
	мУправлениеОтображениемОбластейОтчета(ЭтаФорма);
	мУправлениеОтображениемПанелиПользователя(ЭтаФорма);
	мЗаполнитьТаблицуЭлементов(ЭтаФорма);
	
	Если Не Организация = глЗначениеПеременной("ОсновнаяОрганизация") Тогда Организация = глЗначениеПеременной("ОсновнаяОрганизация"); КонецЕсли;
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Заголовок = ПолучитьТекстЗаголовка(Ложь);
	
КонецПроцедуры
                             
Процедура ПриЗакрытии()
	
	мСохранитьНастройкиФормы(ЭтаФорма);
	мСохранитьНастройку(ЭтаФорма);
	
КонецПроцедуры
////////
Процедура ДействияФормыОсновныеСформировать(Кнопка)
	
	ОбновитьОтчет();
	
КонецПроцедуры

Процедура ДействияФормыОсновныеПечать(Кнопка)
	
	ЭлементыФормы.Результат.Напечатать(Ложь);
	
КонецПроцедуры

Процедура ДействияФормыОсновныеСохранитьКак(Кнопка)
	
	ПредставлениеСохраняемогоФайла = ПолучитьТекстЗаголовка(Ложь);
	мСохранитьКопиюРезультатаОтчета(ЭтаФорма, ПредставлениеСохраняемогоФайла);
	
КонецПроцедуры
//
Процедура ДействияФормыДополнительныеПанельПользователя(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	мУправлениеОтображениемПанелиПользователя(ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыДополнительныеИстория(Кнопка) Экспорт
	
	мДействияФормыДополнительныеИстория(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ДействияФормыДополнительныеНастройкаПанелиПользователя(Кнопка)
	
	мНастроитьСтраницыПанелиПользователя(ЭтаФорма, Кнопка);
		
КонецПроцедуры

Процедура ДействияФормыДополнительныеВосстановитьЗначения(Кнопка)
	
	мДействияФормыДополнительныеВосстановитьЗначения(ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыДополнительныеСохранитьЗначения(Кнопка)
	
	мДействияФормыДополнительныеСохранитьЗначения(ЭтаФорма);
	
КонецПроцедуры
//
Процедура ПоказателиОтчетаПриИзмененииФлажка(Элемент, Колонка)
	
	мПоказателиОтчетаПриИзмененииФлажка(ЭтаФорма, Элемент, Колонка);
	
КонецПроцедуры
//
Процедура КоманднаяПанельДополнительныеПоляДобавитьЭлемент(Кнопка)
	
	мДополнительныеПоляДобавитьЭлемент(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельДополнительныеПоляВключитьВсе(Кнопка)
	
	ДополнительныеПоля.ЗаполнитьЗначения(Истина, "Использование");
	
КонецПроцедуры

Процедура КоманднаяПанельДополнительныеПоляВыключитьВсе(Кнопка)
	
	ДополнительныеПоля.ЗаполнитьЗначения(Ложь, "Использование");
	
КонецПроцедуры

Процедура ДополнительныеПоляПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	мДополнительныеПоляДобавитьЭлемент(ЭтаФорма, Отказ);
	
КонецПроцедуры

Процедура ДополнительныеПоляПередНачаломИзменения(Элемент, Отказ)
	
	мДополнительныеПоляПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры

Процедура ДополнительныеПоляПриПолученииДанных(Элемент, ОформленияСтрок)
	
	мРаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры
//
Процедура КоманднаяПанельГруппировкаДобавитьЭлемент(Кнопка)
	
	мГруппировкаДобавитьЭлемент(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельГруппировкаВключитьВсе(Кнопка)
	
	Группировка.ЗаполнитьЗначения(Истина, "Использование");
	
КонецПроцедуры

Процедура КоманднаяПанельГруппировкаВыключитьВсе(Кнопка)
	
	Группировка.ЗаполнитьЗначения(Ложь, "Использование");
	
КонецПроцедуры

Процедура ГруппировкаПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	мГруппировкаДобавитьЭлемент(ЭтаФорма, Отказ);
	
КонецПроцедуры

Процедура ГруппировкаПередНачаломИзменения(Элемент, Отказ)
	
	мГруппировкаПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры 

Процедура ГруппировкаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	мРаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры
//
Процедура ГруппировкаКорСчетПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ГруппировкаКор.ТекущаяСтрока;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Счет) Тогда
		ТекущаяСтрока.ПоСубконто.Очистить();
		Представление = "";
		Для Индекс = 0 По ТекущаяСтрока.Счет.ВидыСубконто.Количество() - 1 Цикл
			ВидСубконто = ТекущаяСтрока.Счет.ВидыСубконто[Индекс].ВидСубконто;
			ТекущаяСтрока.ПоСубконто.Добавить(ВидСубконто, , Истина);
			Представление = Представление + ВидСубконто + ", ";
		КонецЦикла;
		ТекущаяСтрока.Представление = Сред(Представление, 1, СтрДлина(Представление) - 2);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ГруппировкаКорПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.ГруппировкаКор.ТекущаяСтрока;
	
	ФормаНастройкиСубконто = ПолучитьФорму("ФормаНастройкаПоСубконто", Элемент);
	
	ФормаНастройкиСубконто.Список = ТекущаяСтрока.ПоСубконто.Скопировать();
	
	ФормаНастройкиСубконто.Открыть();
	
	
КонецПроцедуры

Процедура ГруппировкаКорПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		ТекущаяСтрока = ЭлементыФормы.ГруппировкаКор.ТекущаяСтрока;
		ТекущаяСтрока.ПоСубконто = ВыбранноеЗначение;
		
		Представление = "";
		Для Каждого СтрокаСписка Из ТекущаяСтрока.ПоСубконто Цикл
			Если СтрокаСписка.Пометка Тогда
				Представление = Представление + СтрокаСписка.Значение + ", ";
			КонецЕсли;
		КонецЦикла;
		ТекущаяСтрока.Представление = Сред(Представление, 1, СтрДлина(Представление) - 2);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ГруппировкаКорПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущаяСтрока.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ГруппировкаКорПриПолученииДанных(Элемент, ОформленияСтрок)
	
	мРаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура ГруппировкаКорПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.ГруппировкаКор.ТекущаяСтрока;
	
	ТекущаяСтрока.ПоСубконто.ЗаполнитьПометки(Ложь);
	ТекущаяСтрока.Представление = "";		
	
КонецПроцедуры
//
Процедура КоманднаяПанельОтборДобавитьЭлемент(Кнопка)
	
	мОтборДобавитьЭлемент(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельОтборДобавитьГруппу(Кнопка)
	
	мОтборДобавитьГруппу(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ОтборПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	мОтборДобавитьЭлемент(ЭтаФорма, Отказ);
	
КонецПроцедуры

Процедура ОтборПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ЛевоеЗначениеДляКраткогоОтображенияЭлемента.ОтображатьКартинку = Ложь;
	
КонецПроцедуры

Процедура ОтборПриПолученииДанных(Элемент, ОформленияСтрок)
	
	мРаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура ОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	мОтборПриОкончанииРедактирования(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

Процедура ОтборЛевоеЗначениеДляКраткогоОтображенияЭлементаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мОтборНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОтборПравоеЗначениеДляКраткогоОтображенияЭлементаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мОтборНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры
//
Процедура КоманднаяПанельСортировкаДобавитьЭлемент(Кнопка)
	
	мДобавитьЭлементСортировки(ЭтаФорма, ЭтаФорма);
	
КонецПроцедуры

Процедура СортировкаПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	мДобавитьЭлементСортировки(ЭтаФорма, Отказ);
	
КонецПроцедуры

Процедура СортировкаПередНачаломИзменения(Элемент, Отказ)
	
	мСортировкаПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);	
	
КонецПроцедуры

Процедура СортировкаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	мРаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры
//
Процедура ФлагВыводитьЗаголовокПриИзменении(Элемент)
	
	НастройкиФормы.Вставить("ВыводитьЗаголовок", Элемент.Значение);

КонецПроцедуры

Процедура ФлагВыводитьПодписиПриИзменении(Элемент)
	
	НастройкиФормы.Вставить("ВыводитьПодписи", Элемент.Значение);
		
КонецПроцедуры

Процедура ПолеВыбораОформленияПриИзменении(Элемент)
	
	НастройкиФормы.Вставить("МакетОформления" , ЭлементыФормы.ПолеВыбораОформления.Значение);	
	
КонецПроцедуры

Процедура УсловноеОформлениеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	мУсловноеОформлениеПриВыводеСтроки(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура УсловноеОформлениеПриПолученииДанных(Элемент, ОформленияСтрок)
	
	мРаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры
//
Процедура ПолеВводаПериодПриИзменении(Элемент)
	
	ТиповыеОтчеты.ОбновитьПараметрыПериодаПоФорме(КН, ЭтаФорма);
	
КонецПроцедуры

Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	ТиповыеОтчеты.НастроитьПериод(НастройкаПериода, НачалоПериода, КонецПериода);
	ТиповыеОтчеты.ОбновитьПараметрыПериодаПоФорме(КН, ЭтаФорма);
	
КонецПроцедуры

Процедура СчетПриИзменении(Элемент)
	
	ОбработкаИзмененияСчета();
	ОбновитьПанельНастроек();
	
КонецПроцедуры
////
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	мОбработкаРасшифровкиСтандартногоОтчета(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	мРезультатПриАктивизацииОбласти(ЭтаФорма, Элемент);
	
КонецПроцедуры

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

РежимРасшифровки = Ложь;

ИдентификаторОбъекта  = "ОтчетОбъект.АнализСчета";
ПредставлениеОтчета   = "Анализ счета";

СхемаКД = ПолучитьМакет("АнализСчета");
КН.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
КН.ЗагрузитьНастройки(СхемаКД.НастройкиПоУмолчанию);

ЭлементыФормы.Отбор.Данные              = "КН.Настройки.Отбор";
ЭлементыФормы.Сортировка.Данные         = "КН.Настройки.Порядок";
ЭлементыФормы.УсловноеОформление.Данные = "КН.Настройки.УсловноеОформление";

Реквизиты = Новый Массив;
Реквизиты.Добавить("Счет");
Реквизиты.Добавить("Организация");
Реквизиты.Добавить("НачалоПериода");
Реквизиты.Добавить("КонецПериода");
Реквизиты.Добавить("ПоСубсчетам");
Реквизиты.Добавить("ПоСубсчетамКорСчетов");
Реквизиты.Добавить("НастройкиФормы");
Реквизиты.Добавить("ДанныеОтчета");
Реквизиты.Добавить("История");
Реквизиты.Добавить("Периодичность");