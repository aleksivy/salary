Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем РежимРасшифровки Экспорт;
Перем Реквизиты Экспорт;

Процедура ОбработкаИзмененияСчета(ПолнаяОбработка = Истина) Экспорт
	
	Если ЗначениеЗаполнено(Счет) Тогда
		
		КоличествоСубконто = Счет.ВидыСубконто.Количество();
		ИмяПоляПрефикс = "Субконто";
		
		ПараметрыОС      = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
		ПараметрыНМА     = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
		ПараметрыФизЛица = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
		ПараметрыКонтрагентов = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
		
		МассивНаборовДанных = Новый Массив;
		МассивНаборовДанных.Добавить("ОсновнойНаборДанных");
		МассивНаборовДанных.Добавить("Обороты");
		
		// Изменение представления и наложения ограничения типа значения
		Для Индекс = 1 По КоличествоСубконто Цикл
			Для Каждого ЭлементМассива Из МассивНаборовДанных Цикл
				Набор = СхемаКД.НаборыДанных[ЭлементМассива];
				Поле = Набор.Поля.Найти(ИмяПоляПрефикс + Индекс);
				Если Поле <> Неопределено Тогда
					ТипЗначения = Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения;
					Поле.ТипЗначения = ТипЗначения;
					Поле.Заголовок   = Счет.ВидыСубконто[Индекс - 1].ВидСубконто.Наименование;
				КонецЕсли;
				
				Если Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ОсновныеСредства")) Тогда
					ПараметрыОС.ИндексСубконто    = Индекс;
					ПараметрыОС.ЗаголовокСубконто = Поле.Заголовок;
				ИначеЕсли Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НематериальныеАктивы")) Тогда
					ПараметрыНМА.ИндексСубконто    = Индекс;
					ПараметрыНМА.ЗаголовокСубконто = Поле.Заголовок;
				ИначеЕсли Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
					ПараметрыФизЛица.ИндексСубконто    = Индекс;
					ПараметрыФизЛица.ЗаголовокСубконто = Поле.Заголовок;
				ИначеЕсли Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
					ПараметрыКонтрагентов.ИндексСубконто    = Индекс;
					ПараметрыКонтрагентов.ЗаголовокСубконто = Поле.Заголовок;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
		
		КН.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
			
		Если ПолнаяОбработка Тогда
			
			// Управление показателями
			Если Счет.НалоговыйУчет Тогда
				ДанныеОтчета.ПоказателиОтчета.БУ.Использование = Истина;
				ДанныеОтчета.ПоказателиОтчета.БУ.Значение      = Истина;
				ДанныеОтчета.ПоказателиОтчета.НУ.Использование = Истина;
				ДанныеОтчета.ПоказателиОтчета.НУ.Значение      = Ложь;
				ДанныеОтчета.ПоказателиОтчета.Контроль.Использование = Истина;
				ДанныеОтчета.ПоказателиОтчета.Контроль.Значение      = Ложь;
			Иначе
				ДанныеОтчета.ПоказателиОтчета.БУ.Использование = Истина;
				ДанныеОтчета.ПоказателиОтчета.БУ.Значение      = Истина;
				ДанныеОтчета.ПоказателиОтчета.НУ.Использование = Ложь;
				ДанныеОтчета.ПоказателиОтчета.НУ.Значение      = Ложь;
				ДанныеОтчета.ПоказателиОтчета.Контроль.Использование = Ложь;
				ДанныеОтчета.ПоказателиОтчета.Контроль.Значение      = Ложь;	
			КонецЕсли;
			Если Счет.Валютный Тогда
				ДанныеОтчета.ПоказателиОтчета.ВалютнаяСумма.Использование = Истина;
				ДанныеОтчета.ПоказателиОтчета.ВалютнаяСумма.Значение      = Истина;			
			Иначе
				ДанныеОтчета.ПоказателиОтчета.ВалютнаяСумма.Использование = Ложь;
				ДанныеОтчета.ПоказателиОтчета.ВалютнаяСумма.Значение      = Ложь;		
			КонецЕсли;
			
			Если Счет.Вид = ВидСчета.АктивноПассивный Тогда
				ДанныеОтчета.ПоказателиОтчета.РазвернутоеСальдо.Использование = Истина;
				ДанныеОтчета.ПоказателиОтчета.РазвернутоеСальдо.Значение      = Ложь;		
			Иначе
				ДанныеОтчета.ПоказателиОтчета.РазвернутоеСальдо.Использование = Ложь;
				ДанныеОтчета.ПоказателиОтчета.РазвернутоеСальдо.Значение      = Ложь;	
			КонецЕсли;
			
			// Выводимые данные			
			СальдоНаНачалоДт   = Истина;
			СальдоНаНачалоКт   = Истина;
			СальдоНаКонецДт    = Истина;
			СальдоНаКонецКт    = Истина;
			ОборотыЗаПериодДт  = Истина;
			ОборотыЗаПериодКт  = Истина;
			ОборотыСоСчетамиДт = Истина;
			ОборотыСоСчетамиКт = Истина;
			
			// Добавление группировок с соответствии с выбранным счетом	
			ДанныеОтчета.Группировка.Очистить();
			
			// Если есть аналитика Договоры, то надо добавить аналитику ТМЦ
			лЕстьДоговор = Ложь;
			лНомерСубконтоДоговор = 0;
			лТипСубконтоДоговоры = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
			Для Индекс = 1 По КоличествоСубконто Цикл
				НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
				Поле = КН.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоляПрефикс + Индекс));
				НоваяСтрока.Поле           = Поле.Поле;
				НоваяСтрока.Использование  = Истина;
				НоваяСтрока.Представление  = Поле.Заголовок;
				НоваяСтрока.ТипГруппировки = ТипИзмеренияПостроителяОтчета.Элементы;				
				// Проверим наличие аналитики Договоры
				Если Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения = лТипСубконтоДоговоры Тогда
					лЕстьДоговор = Истина;
					лНомерСубконтоДоговор = Индекс;
				КонецЕсли;
			КонецЦикла;	
			
			Если лЕстьДоговор Тогда
				НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
				Поле = КН.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоляПрефикс + лНомерСубконтоДоговор + ".Номенклатура"));
				НоваяСтрока.Поле           = Поле.Поле;
				НоваяСтрока.Использование  = Истина;
				НоваяСтрока.Представление  = Поле.Заголовок;
				НоваяСтрока.ТипГруппировки = ТипИзмеренияПостроителяОтчета.Элементы;				
			КонецЕсли;
			
			Если Счет.Валютный Тогда
				НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
				НоваяСтрока.Поле = "Валюта";
				НоваяСтрока.Использование = Истина;
				НоваяСтрока.Представление = НСтр("ru='Валюта';uk='Валюта'");
				НоваяСтрока.ТипГруппировки = ТипИзмеренияПостроителяОтчета.Элементы;
			КонецЕсли;
			
			Если Счет.НалоговыйУчет Тогда
				НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
				НоваяСтрока.Поле           = "НалоговоеНазначение";
				НоваяСтрока.Использование  = Ложь;
				НоваяСтрока.Представление  = НСтр("ru='Налоговое назначение';uk='Податкове призначення'");
				НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
			КонецЕсли;
			// Обработка дополнительных полей
			мЗаполнитьДополнительныеПоляПоУмолчанию(ЭтаФорма);
			
			Если Не РежимРасшифровки Тогда
				// Добавление неактивных отборов по субконто в соответствии с выбранным счетом
				ОтборыДляУдаления = Новый Массив;
				Для Каждого ЭлементОтбора Из КН.Настройки.Отбор.Элементы Цикл
					Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
						Если Найти(ЭлементОтбора.ЛевоеЗначение, "Субконто") > 0 ИЛИ Строка(ЭлементОтбора.ЛевоеЗначение) = "Валюта" 
							ИЛИ (Найти(ЭлементОтбора.ЛевоеЗначение, "НалоговоеНазначение") = 1) Тогда
							ОтборыДляУдаления.Добавить(ЭлементОтбора);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ЭлементОтбора Из ОтборыДляУдаления Цикл
					КН.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
				КонецЦикла;
				
				Для Индекс = 1 По КоличествоСубконто Цикл
					мДобавитьОтбор(КН, ИмяПоляПрефикс + Индекс, Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения.ПривестиЗначение(Неопределено), , Ложь);	
				КонецЦикла;
				// Если есть аналитика Договоры, то надо добавить отбор по аналитике ТМЦ
				Если лЕстьДоговор Тогда
					лТипСубконтоНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
					мДобавитьОтбор(КН, ИмяПоляПрефикс + лНомерСубконтоДоговор + ".Номенклатура", лТипСубконтоНоменклатура.ПривестиЗначение(Неопределено), , Ложь);	
				КонецЕсли;
				Если Счет.Валютный Тогда
					Поле = КН.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Валюта"));
					мДобавитьОтбор(КН, "Валюта", Поле.Тип.ПривестиЗначение(Неопределено), , Ложь); 
				КонецЕсли;
				Если Счет.НалоговыйУчет Тогда
					Поле = КН.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("НалоговоеНазначение"));
					мДобавитьОтбор(КН, "НалоговоеНазначение", Поле.Тип.ПривестиЗначение(Неопределено), , Ложь); 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	мЗаполнитьДанныеОтчета(ЭтаФорма);
	
КонецПроцедуры

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено, ВыводитьПолностью = Истина) Экспорт
	
	Результат.Очистить();
	
	Настройки = КН.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтаФорма, Результат);
	Если ВыводитьПолностью Тогда
		ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
		КН.Восстановить();
		НастройкаКомпоновщикаНастроек = КН.ПолучитьНастройки();
		мВывестиОтчет(ЭтаФорма, НастройкаКомпоновщикаНастроек, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
		КН.ЗагрузитьНастройки(Настройки);
	КонецЕсли; 
	ВыводПодписейОтчета(ЭтаФорма, Результат);
	
	Если ВыводитьПолностью Тогда
		// Выполним дополнительную обработку Результата отчета
		ОбработкаРезультатаОтчета(Результат);
		
		// Сохраним настройки для Истории
		мСохранитьНастройкуДляИстории(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередВыводомОтчета(МакетКомпоновки) Экспорт
	
	ДанныеОтчета.Вставить("ВысотаШапки",МакетКомпоновки.Макеты[МакетКомпоновки.Тело[0].МакетШапки].Макет.Количество()); 
	
КонецПроцедуры

Процедура ПередВыводомЭлементаРезультата(МакетКомпоновки, ДанныеРасшифровки, ЭлементРезультата, Отказ = Ложь) Экспорт

	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	КН.Настройки.Структура.Очистить();
	КН.Настройки.Выбор.Элементы.Очистить();
	
	мУстановитьПараметр(КН, "Счет"         , Счет);
	мУстановитьПараметр(КН, "Периодичность", Периодичность);
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		мУстановитьПараметр(КН, "НачалоПериода", НачалоДня(НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		мУстановитьПараметр(КН, "КонецПериода", КонецДня(КонецПериода));
		мУстановитьПараметр(КН, "ПараметрПериод", КонецДня(КонецПериода));
	Иначе
		мУстановитьПараметр(КН, "ПараметрПериод", КонецДня(ТекущаяДата()));
	КонецЕсли;
		
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("НУ");
	МассивПоказателей.Добавить("Контроль");
	МассивПоказателей.Добавить("ВалютнаяСумма");
		
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	КоличествоПоказателей = 0;
	Для Каждого Показатель Из ПоказателиОтчета Цикл
		Если Показатель.Ключ <> "РазвернутоеСальдо" Тогда
			КоличествоПоказателей = КоличествоПоказателей + Показатель.Значение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Таблица = КН.Настройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	
	// Колонка "показатели"
	Если КоличествоПоказателей > 1 Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "Показатели";
		Колонка.Использование = Истина;
		
		ГруппаПоказатели = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоказатели.Использование = Истина;
		ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				мДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ЭлементМассива);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("НУ");
	
	МассивПоказателейДоп = Новый Массив;
	МассивПоказателейДоп.Добавить("Контроль");
	МассивПоказателейДоп.Добавить("ВалютнаяСумма");

	ВидОстатоков = ?(ПоказателиОтчета.РазвернутоеСальдо.Значение, "Развернутый", "");
	
	// Колонка "Сальдо на начало Дт"
	Если СальдоНаНачалоДт Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "НачальноеСальдоДт";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				мДобавитьВыбранноеПоле(Группа, "СальдоНаНачалоПериода." + ЭлементМассива + "Начальный" + ВидОстатоков + "ОстатокДт");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементМассива Из МассивПоказателейДоп Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				мДобавитьВыбранноеПоле(Группа, "СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокДт");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Колонка "Сальдо на начало Кт"
	Если СальдоНаНачалоКт Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "НачальноеСальдоКт";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				мДобавитьВыбранноеПоле(Группа, "СальдоНаНачалоПериода." + ЭлементМассива + "Начальный" + ВидОстатоков + "ОстатокКт");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементМассива Из МассивПоказателейДоп Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				мДобавитьВыбранноеПоле(Группа, "СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокКт");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Колонка "Обороты за период Дт"
	Если ОборотыЗаПериодДт Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "ОборотДт";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				мДобавитьВыбранноеПоле(Группа, "ОборотыЗаПериод." + ЭлементМассива + "ОборотДт");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементМассива Из МассивПоказателейДоп Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				мДобавитьВыбранноеПоле(Группа, "ОборотыЗаПериод." + ЭлементМассива + "ОборотДт");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Колонка "Обороты со счетами Дт"
	Если ОборотыСоСчетамиДт Тогда
		Если ОборотыЗаПериодДт Тогда 
			Колонка = Колонка.Структура.Добавить();
		Иначе 
			Колонка = Таблица.Колонки.Добавить();
		КонецЕсли;
		Колонка.Имя           = "КорСчетДт";
		Колонка.Использование = Истина;
		
		ПолеГруппировки = Колонка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("КорСчет");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
		
		Если Не ПоСубсчетамКорСчетов Тогда
			ЗначениеОтбора = мДобавитьОтбор(Колонка.Отбор, "SystemFields.LevelInGroup", 1);
			ЗначениеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
			мУстановитьПараметрВывода(Колонка, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
		КонецЕсли;
		мУстановитьПараметрВывода(Колонка, "РасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
		
		мДобавитьВыбранноеПоле(Колонка.Выбор, "КорСчет");
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				мДобавитьВыбранноеПоле(Группа, "ОборотыЗаПериод." + ЭлементМассива + "ОборотДт");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементМассива Из МассивПоказателейДоп Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				мДобавитьВыбранноеПоле(Группа, "ОборотыЗаПериод." + ЭлементМассива + "ОборотДт");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Колонка "Обороты за период Кт"
	Если ОборотыЗаПериодКт Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "ОборотКт";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				мДобавитьВыбранноеПоле(Группа, "ОборотыЗаПериод." + ЭлементМассива + "ОборотКт");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементМассива Из МассивПоказателейДоп Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				мДобавитьВыбранноеПоле(Группа, "ОборотыЗаПериод." + ЭлементМассива + "ОборотКт");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Колонка "Обороты со счетами Кт"
	Если ОборотыСоСчетамиКт Тогда
		Если ОборотыЗаПериодДт Тогда 
			Колонка = Колонка.Структура.Добавить();
		Иначе 
			Колонка = Таблица.Колонки.Добавить();
		КонецЕсли;
		Колонка.Имя           = "КорСчетКт";
		Колонка.Использование = Истина;
		
		ПолеГруппировки = Колонка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("КорСчет");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
		
		Если Не ПоСубсчетамКорСчетов Тогда
			ЗначениеОтбора = мДобавитьОтбор(Колонка.Отбор, "SystemFields.LevelInGroup", 1);
			ЗначениеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
			мУстановитьПараметрВывода(Колонка, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
		КонецЕсли;
		мУстановитьПараметрВывода(Колонка, "РасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
		
		мДобавитьВыбранноеПоле(Колонка.Выбор, "КорСчет");
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				мДобавитьВыбранноеПоле(Группа, "ОборотыЗаПериод." + ЭлементМассива + "ОборотКт");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементМассива Из МассивПоказателейДоп Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				мДобавитьВыбранноеПоле(Группа, "ОборотыЗаПериод." + ЭлементМассива + "ОборотКт");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	// Колонка "Сальдо на конец Дт"
	Если СальдоНаКонецДт Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "КонечноеСальдоДт";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				мДобавитьВыбранноеПоле(Группа, "СальдоНаКонецПериода." + ЭлементМассива + "Конечный" + ВидОстатоков + "ОстатокДт");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементМассива Из МассивПоказателейДоп Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				мДобавитьВыбранноеПоле(Группа, "СальдоНаКонецПериода." + ЭлементМассива + "КонечныйОстатокДт");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Колонка "Сальдо на конец Кт"
	Если СальдоНаКонецКт Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "КонечноеСальдоКт";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				мДобавитьВыбранноеПоле(Группа, "СальдоНаКонецПериода." + ЭлементМассива + "Конечный" + ВидОстатоков + "ОстатокКт");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементМассива Из МассивПоказателейДоп Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				мДобавитьВыбранноеПоле(Группа, "СальдоНаКонецПериода." + ЭлементМассива + "КонечныйОстатокКт");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Для Каждого ПолеГруппировки Из ДанныеОтчета.ДополнительныеПоля Цикл 
		Если ПолеГруппировки.Использование Тогда
			мДобавитьВыбранноеПоле(КН, ПолеГруппировки.Поле);
		КонецЕсли;
	КонецЦикла;

  
	Структура = Таблица.Строки.Добавить();
	Структура.Имя = "Счет";
		
	ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Счет");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных")); 
	
	Если Не ПоСубсчетам Тогда
		ЗначениеОтбора = мДобавитьОтбор(Структура.Отбор, "SystemFields.LevelInGroup", 1);
		ЗначениеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
		
		мУстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	КонецЕсли;
	
	СтрокаЗаголовкаГруппировки = ?(ПоСубсчетам, "Субсчет \ ", "");
	КоличествоГруппировок = ?(ПоСубсчетам, 1, 0);
	Для Каждого ПолеВыбраннойГруппировки Из ДанныеОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Структура = Структура.Структура.Добавить();
			
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			
			Если ПолеВыбраннойГруппировки.ТипГруппировки = ТипИзмеренияПостроителяОтчета.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = ТипИзмеренияПостроителяОтчета.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			СтрокаЗаголовкаГруппировки = СтрокаЗаголовкаГруппировки + ПолеВыбраннойГруппировки.Представление + " \ ";
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаЗаголовкаГруппировки = Сред(СтрокаЗаголовкаГруппировки, 1, СтрДлина(СтрокаЗаголовкаГруппировки) - 2);
	Если КоличествоГруппировок = 0 Тогда
		СтрокаЗаголовкаГруппировки = "Счет";
	КонецЕсли;
	
	мУстановитьПараметр(КН, "ТекстЗаголовкаГруппировки", СтрокаЗаголовкаГруппировки);
	
	// Период
	мДобавитьГруппировкуПоПериоду(ЭтаФорма, Структура);
	
	// Валюта
	Если ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
		Структура = Структура.Структура.Добавить();
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Валюта");		
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
	КонецЕсли;
	
	мДобавитьОтборДляПоказателяКонтроль(ЭтотОбъект);
	
	УсловноеОформлениеАвтоотступа = Неопределено;
	Для каждого ЭлементОформления Из КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = НСтр("ru='Уменьшенный автоотступ';uk='Зменшений авто відступ'") Тогда
			УсловноеОформлениеАвтоотступа = ЭлементОформления;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УсловноеОформлениеАвтоотступа = Неопределено Тогда
		УсловноеОформлениеАвтоотступа = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		УсловноеОформлениеАвтоотступа.Представление = НСтр("ru='Уменьшенный автоотступ';uk='Зменшений авто відступ'");
		УсловноеОформлениеАвтоотступа.Оформление.УстановитьЗначениеПараметра("Автоотступ", 1);
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
		УсловноеОформлениеАвтоотступа.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	Иначе
		УсловноеОформлениеАвтоотступа.Поля.Элементы.Очистить();
	КонецЕсли;
	
	Если УсловноеОформлениеАвтоотступа.Поля.Элементы.Количество() = 0 Тогда
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
	КонецЕсли;
	
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	
	Поле = УсловноеОформление.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода.НУНачальныйОстатокДт");
	Поле = УсловноеОформление.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода.КонтрольНачальныйОстатокДт");
	
	ТиповыеОтчеты.ДобавитьОтбор(УсловноеОформление.Отбор, "Счет.НалоговыйУчет", Ложь);
	УстановитьПараметр(УсловноеОформление.Оформление, "МаксимальнаяВысота", 1);
	
КонецПроцедуры

Процедура ВыводЗаголовкаОтчета(ФормаОтчета, Результат)
	
	 мВыводЗаголовкаОтчета(ФормаОтчета, Результат);
			
КонецПроцедуры

Процедура ВыводПодписейОтчета(ФормаОтчета, Результат)
	
	мВыводПодписейОтчета(ФормаОтчета, Результат);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ЗаголовокОтчета = "Обороты счета " + Счет + мПолучитьПредставлениеПериода(ЭтаФорма);

	Возврат ЗаголовокОтчета;
	
КонецФункции

Процедура ПолучитьСтруктуруПоказателейОтчета() Экспорт
	
	ПоказателиОтчета = мПолучитьСтруктуруПоказателейОтчета(,, Истина, Истина, Истина);
	ДанныеОтчета.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(Результат)
	
	мОбработкаРезультатаОтчета(ЭтаФорма, Результат);

	// Зафиксируем заголовок отчета
	ВысотаЗаголовка = Результат.Области.Заголовок.Низ;
	Результат.ФиксацияСверху = ВысотаЗаголовка + ДанныеОтчета.ВысотаШапки;
	
	КоличествоПоказателей = 0;
	Для Каждого Показатель Из ДанныеОтчета.ПоказателиОтчета Цикл
		Если Показатель.Значение.Значение И Показатель.Ключ <> "РазвернутоеСальдо" Тогда
			КоличествоПоказателей = КоличествоПоказателей + 1;
		КонецЕсли;
	КонецЦикла;
	
	Результат.ФиксацияСлева = ?(КоличествоПоказателей > 1, 2, 1);
	
		
КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить() Экспорт
	
	ЗаполнитьНачальныеНастройки();
	ОбработкаИзмененияСчета(РежимРасшифровки);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	мСохранитьНастройку(ЭтаФорма);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	Если РежимРасшифровки Тогда
		НастройкиФормы = СтруктураПараметров.НастройкиФормы;
	Иначе
		мПрименитьСтруктуруПараметровОтчета(ЭтаФорма, СтруктураПараметров);
	КонецЕсли;

КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	Если Не ЗначениеЗаполнено(СохраненнаяНастройка) И Не РежимРасшифровки Тогда
		НачалоПериода = НачалоМесяца(ТекущаяДата());
		КонецПериода  = КонецМесяца(ТекущаяДата());
		Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
			Организация   = глЗначениеПеременной("ОсновнаяОрганизация");
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

//ОБРАБОТЧИКИ ФОРМЫ
Процедура ОбновитьОтчет(ВыводитьПолностью = Истина) Экспорт
	
	Если ВыводитьПолностью Тогда
		Если Не мПроверитьЗаполнениеОбязательныхРеквизитов(ЭтаФорма) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;  
	
	Если РежимРасшифровки Тогда
		РежимРасшифровки = Ложь;
	Иначе
		мСохранитьДанныеОтчета(ЭтаФорма);    
	КонецЕсли;
	
	Если НастройкиФормы.ЗакрыватьПанельПриФормированииОтчета И ВыводитьПолностью Тогда
		ЭлементыФормы.ДействияФормыДополнительные.Кнопки.ПанельПользователя.Пометка = Ложь;
		мУправлениеОтображениемПанелиПользователя(ЭтаФорма);
	КонецЕсли;
	
	СформироватьОтчет(ЭтаФорма.ЭлементыФормы.Результат, ДР, Ложь, , ВыводитьПолностью);
	
	мОбновитьКоллекциюКнопокИстории(ЭтаФорма);
	
КонецПроцедуры

Процедура ОбновитьПанельНастроек() Экспорт
	
	мОбновитьПредставлениеПоказателейОтчета(ЭтаФорма);
	Группировка = ДанныеОтчета.Группировка.Скопировать();
	ДополнительныеПоля = ДанныеОтчета.ДополнительныеПоля.Скопировать();
	ОбновитьПредставлениеВыводимыхДанных();
	
КонецПроцедуры

Процедура ОбновитьПредставлениеВыводимыхДанных() 
	
	ВыводимыеДанные.Очистить();
	
	// Сальдо на начало
	НоваяСтрока = ВыводимыеДанные.Добавить();
	НоваяСтрока.Дт     = СальдоНаНачалоДт;
	НоваяСтрока.Кт     = СальдоНаНачалоКт;
	НоваяСтрока.Данные = "Сальдо на начало";
	
	// Сальдо на конец
	НоваяСтрока = ВыводимыеДанные.Добавить();
	НоваяСтрока.Дт     = СальдоНаКонецДт;
	НоваяСтрока.Кт     = СальдоНаКонецКт;
	НоваяСтрока.Данные = "Сальдо на конец";
	
	// Оборот за период
	НоваяСтрока = ВыводимыеДанные.Добавить();
	НоваяСтрока.Дт     = ОборотыЗаПериодДт;
	НоваяСтрока.Кт     = ОборотыЗаПериодКт;
	НоваяСтрока.Данные = "Обороты за период";
	
	// Обороты со счетами
	НоваяСтрока = ВыводимыеДанные.Добавить();
	НоваяСтрока.Дт     = ОборотыСоСчетамиДт;
	НоваяСтрока.Кт     = ОборотыСоСчетамиКт;
	НоваяСтрока.Данные = "Обороты со счетами";
	
КонецПроцедуры
/////
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	мНазначитьФормеУникальныйКлючИдентификации(ЭтаФорма);
	
	Если Не мЗаполнитьНастройкиПриОткрытииОтчета(ЭтаФорма) Тогда
		ИнициализацияОтчета();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если Не РежимРасшифровки Тогда
		Настроить();
	КонецЕсли;
	
	мВосстановитьНастройкиФормы(ЭтаФорма);
	ОбновитьПанельНастроек();
	мУправлениеОтображениемОбластейОтчета(ЭтаФорма);
	мУправлениеОтображениемПанелиПользователя(ЭтаФорма);
	мЗаполнитьТаблицуЭлементов(ЭтаФорма);
	
	Если Не Организация = глЗначениеПеременной("ОсновнаяОрганизация") Тогда Организация = глЗначениеПеременной("ОсновнаяОрганизация"); КонецЕсли;
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Заголовок = ПолучитьТекстЗаголовка(Ложь);
	
КонецПроцедуры
                             
Процедура ПриЗакрытии()
	
	мСохранитьДанныеОтчета(ЭтаФорма);
	мСохранитьНастройкиФормы(ЭтаФорма);
	мСохранитьНастройку(ЭтаФорма);
	
КонецПроцедуры
////////
Процедура ДействияФормыОсновныеСформировать(Кнопка)
	
	ОбновитьОтчет();
	
КонецПроцедуры

Процедура ДействияФормыОсновныеПечать(Кнопка)
	
	ЭлементыФормы.Результат.Напечатать(Ложь);
	
КонецПроцедуры

Процедура ДействияФормыОсновныеСохранитьКак(Кнопка)
	
	ПредставлениеСохраняемогоФайла = ПолучитьТекстЗаголовка(Ложь);
	мСохранитьКопиюРезультатаОтчета(ЭтаФорма, ПредставлениеСохраняемогоФайла);
	
КонецПроцедуры
//
Процедура ДействияФормыДополнительныеПанельПользователя(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	мУправлениеОтображениемПанелиПользователя(ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыДополнительныеИстория(Кнопка) Экспорт
	
	мДействияФормыДополнительныеИстория(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ДействияФормыДополнительныеНастройкаПанелиПользователя(Кнопка)
	
	мНастроитьСтраницыПанелиПользователя(ЭтаФорма, Кнопка);
		
КонецПроцедуры

Процедура ДействияФормыДополнительныеВосстановитьЗначения(Кнопка)
	
	мДействияФормыДополнительныеВосстановитьЗначения(ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыДополнительныеСохранитьЗначения(Кнопка)
	
	мДействияФормыДополнительныеСохранитьЗначения(ЭтаФорма);
	
КонецПроцедуры
//
Процедура ПоказателиОтчетаПриИзмененииФлажка(Элемент, Колонка)
	
	мПоказателиОтчетаПриИзмененииФлажка(ЭтаФорма, Элемент, Колонка);
	
КонецПроцедуры
//
Процедура ВыводимыеДанныеПриИзмененииФлажка(Элемент, Колонка)
	
	Для Каждого СтрокаТаблицы Из ВыводимыеДанные Цикл
		Если СтрокаТаблицы.Данные = "Сальдо на начало" Тогда 
			СальдоНаНачалоДт = СтрокаТаблицы.Дт;
			СальдоНаНачалоКт = СтрокаТаблицы.Кт;
		ИначеЕсли СтрокаТаблицы.Данные = "Сальдо на конец" Тогда 
			СальдоНаКонецДт = СтрокаТаблицы.Дт;
			СальдоНаКонецКт = СтрокаТаблицы.Кт;
		ИначеЕсли СтрокаТаблицы.Данные = "Обороты за период" Тогда 
			ОборотыЗаПериодДт = СтрокаТаблицы.Дт;
			ОборотыЗаПериодКт = СтрокаТаблицы.Кт;
		ИначеЕсли СтрокаТаблицы.Данные = "Обороты со счетами" Тогда 
			ОборотыСоСчетамиДт = СтрокаТаблицы.Дт;
			ОборотыСоСчетамиКт = СтрокаТаблицы.Кт;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
//
Процедура КоманднаяПанельДополнительныеПоляДобавитьЭлемент(Кнопка)
	
	мДополнительныеПоляДобавитьЭлемент(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельДополнительныеПоляВключитьВсе(Кнопка)
	
	ДополнительныеПоля.ЗаполнитьЗначения(Истина, "Использование");
	
КонецПроцедуры

Процедура КоманднаяПанельДополнительныеПоляВыключитьВсе(Кнопка)
	
	ДополнительныеПоля.ЗаполнитьЗначения(Ложь, "Использование");
	
КонецПроцедуры

Процедура ДополнительныеПоляПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	мДополнительныеПоляДобавитьЭлемент(ЭтаФорма, Отказ);
	
КонецПроцедуры

Процедура ДополнительныеПоляПередНачаломИзменения(Элемент, Отказ)
	
	мДополнительныеПоляПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры
 
Процедура ДополнительныеПоляПриПолученииДанных(Элемент, ОформленияСтрок)
	
	мРаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры
//
Процедура КоманднаяПанельГруппировкаДобавитьЭлемент(Кнопка)
	
	мГруппировкаДобавитьЭлемент(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельГруппировкаВключитьВсе(Кнопка)
	
	Группировка.ЗаполнитьЗначения(Истина, "Использование");
	
КонецПроцедуры

Процедура КоманднаяПанельГруппировкаВыключитьВсе(Кнопка)
	
	Группировка.ЗаполнитьЗначения(Ложь, "Использование");
	
КонецПроцедуры

Процедура ГруппировкаПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	мГруппировкаДобавитьЭлемент(ЭтаФорма, Отказ);
	
КонецПроцедуры

Процедура ГруппировкаПередНачаломИзменения(Элемент, Отказ)
	
	мГруппировкаПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры
  
Процедура ГруппировкаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	мРаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры
//
Процедура КоманднаяПанельОтборДобавитьЭлемент(Кнопка)
	
	мОтборДобавитьЭлемент(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельОтборДобавитьГруппу(Кнопка)
	
	мОтборДобавитьГруппу(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ОтборПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	мОтборДобавитьЭлемент(ЭтаФорма, Отказ);
	
КонецПроцедуры

Процедура ОтборПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ЛевоеЗначениеДляКраткогоОтображенияЭлемента.ОтображатьКартинку = Ложь;
	
КонецПроцедуры

Процедура ОтборПриПолученииДанных(Элемент, ОформленияСтрок)
	
	мРаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура ОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	мОтборПриОкончанииРедактирования(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

Процедура ОтборЛевоеЗначениеДляКраткогоОтображенияЭлементаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мОтборНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОтборПравоеЗначениеДляКраткогоОтображенияЭлементаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мОтборНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры
//
Процедура КоманднаяПанельСортировкаДобавитьЭлемент(Кнопка)
	
	мДобавитьЭлементСортировки(ЭтаФорма, ЭтаФорма);
	
КонецПроцедуры

Процедура СортировкаПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	мДобавитьЭлементСортировки(ЭтаФорма, Отказ);
	
КонецПроцедуры

Процедура СортировкаПередНачаломИзменения(Элемент, Отказ)
	
	мСортировкаПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);	
	
КонецПроцедуры

Процедура СортировкаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	мРаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры
//
Процедура ФлагВыводитьЗаголовокПриИзменении(Элемент)
	
	НастройкиФормы.Вставить("ВыводитьЗаголовок", Элемент.Значение);

КонецПроцедуры

Процедура ФлагВыводитьПодписиПриИзменении(Элемент)
	
	НастройкиФормы.Вставить("ВыводитьПодписи", Элемент.Значение);
		
КонецПроцедуры

Процедура ПолеВыбораОформленияПриИзменении(Элемент)
	
	НастройкиФормы.Вставить("МакетОформления" , ЭлементыФормы.ПолеВыбораОформления.Значение);	
	
КонецПроцедуры

Процедура УсловноеОформлениеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	мУсловноеОформлениеПриВыводеСтроки(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура УсловноеОформлениеПриПолученииДанных(Элемент, ОформленияСтрок)
	
	мРаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры
//
Процедура ПолеВводаПериодПриИзменении(Элемент)
	
	ТиповыеОтчеты.ОбновитьПараметрыПериодаПоФорме(КН, ЭтаФорма);
	
КонецПроцедуры

Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	ТиповыеОтчеты.НастроитьПериод(НастройкаПериода, НачалоПериода, КонецПериода);
	ТиповыеОтчеты.ОбновитьПараметрыПериодаПоФорме(КН, ЭтаФорма);
	
КонецПроцедуры

Процедура СчетПриИзменении(Элемент)
	
	ОбработкаИзмененияСчета();
	ОбновитьПанельНастроек();
	
КонецПроцедуры
////
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	мОбработкаРасшифровкиСтандартногоОтчета(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	мРезультатПриАктивизацииОбласти(ЭтаФорма, Элемент);
	
КонецПроцедуры

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

РежимРасшифровки = Ложь;

ИдентификаторОбъекта  = "ОтчетОбъект.ОборотыСчета";
ПредставлениеОтчета   = "Обороты счета";

СхемаКД = ПолучитьМакет("ОборотыСчета");
КН.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
КН.ЗагрузитьНастройки(СхемаКД.НастройкиПоУмолчанию);

ЭлементыФормы.Отбор.Данные              = "КН.Настройки.Отбор";
ЭлементыФормы.Сортировка.Данные         = "КН.Настройки.Порядок";
ЭлементыФормы.УсловноеОформление.Данные = "КН.Настройки.УсловноеОформление";

Реквизиты = Новый Массив;
Реквизиты.Добавить("Счет");
Реквизиты.Добавить("Организация");
Реквизиты.Добавить("НачалоПериода");
Реквизиты.Добавить("КонецПериода");
Реквизиты.Добавить("ПоСубсчетам");
Реквизиты.Добавить("ПоСубсчетамКорСчетов");
Реквизиты.Добавить("НастройкиФормы");
Реквизиты.Добавить("ДанныеОтчета");
Реквизиты.Добавить("История");
Реквизиты.Добавить("Периодичность");
Реквизиты.Добавить("ОборотыЗаПериодДт");
Реквизиты.Добавить("ОборотыЗаПериодКт");
Реквизиты.Добавить("ОборотыСоСчетамиДт");
Реквизиты.Добавить("ОборотыСоСчетамиКт");
Реквизиты.Добавить("СальдоНаКонецДт");
Реквизиты.Добавить("СальдоНаКонецКт");
Реквизиты.Добавить("СальдоНаНачалоДт");
Реквизиты.Добавить("СальдоНаНачалоКт");
