Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем РежимРасшифровки Экспорт;
Перем Реквизиты Экспорт;

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	мЗаполнитьДанныеОтчета(ЭтаФорма);
	
	Если ДанныеОтчета.ДополнительныеПоля.Найти("Счет.Наименование", "Поле") = Неопределено Тогда
		НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
		НоваяСтрока.Представление = "Выводить наименование счета";
		НоваяСтрока.Поле          = "Счет.Наименование";
		НоваяСтрока.Использование = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено, ВыводитьПолностью = Истина) Экспорт
	
	Результат.Очистить();
	
	Настройки = КН.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтаФорма, Результат);
	Если ВыводитьПолностью Тогда
		ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
		КН.Восстановить();
		НастройкаКомпоновщикаНастроек = КН.ПолучитьНастройки();
		мВывестиОтчет(ЭтаФорма, НастройкаКомпоновщикаНастроек, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
		КН.ЗагрузитьНастройки(Настройки);
	КонецЕсли; 
	ВыводПодписейОтчета(ЭтаФорма, Результат);
	
	Если ВыводитьПолностью Тогда
		// Выполним дополнительную обработку Результата отчета
		ОбработкаРезультатаОтчета(Результат);
		
		// Сохраним настройки для Истории
		мСохранитьНастройкуДляИстории(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередВыводомОтчета(МакетКомпоновки) Экспорт
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;	
	
	КоличествоПоказателей = 0;
	Для Каждого Показатель Из ПоказателиОтчета Цикл
		Если Показатель.Ключ <> "РазвернутоеСальдо" Тогда
			КоличествоПоказателей = КоличествоПоказателей + Показатель.Значение.Значение;
		КонецЕсли;
	КонецЦикла;

	МакетШапкиОтчета = мПолучитьМакетШапки(МакетКомпоновки);
	Ячейка2 = МакетШапкиОтчета.Макет[0].Ячейки[0];
	Ячейка2.Элементы.Очистить();
	НовыйЭлемент = Ячейка2.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
	
	СтрокаЗаголовкаГруппировки = "Счет";
		
	НовыйЭлемент.Значение = СтрокаЗаголовкаГруппировки;
	Ячейка10 = МакетШапкиОтчета.Макет[1].Ячейки[0];
	Ячейка10.Элементы.Очистить();
	мУстановитьПараметр(Ячейка10.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
	
	Если КоличествоПоказателей > 1 Тогда
		НовыйЭлемент.Значение = СтрокаЗаголовкаГруппировки;
		Ячейка11 = МакетШапкиОтчета.Макет[1].Ячейки[1];
		Ячейка11.Элементы.Очистить();
		мУстановитьПараметр(Ячейка11.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
	КонецЕсли;

	МассивДляУдаления = Новый Массив;
	Для Индекс = 2 По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
		МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
	КонецЦикла;
	
	
	МакетПодвалаОтчета            		= мПолучитьМакетПодвала(МакетКомпоновки);
	МакетГруппировкиСчет          		= мПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Счет");
	МакетГруппировкиНалоговоеНазначение = мПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "НалоговоеНазначение");
	МакетГруппировкиВалюта        		= мПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Валюта");
	
	Для Каждого Элемент Из МассивДляУдаления Цикл
		МакетШапкиОтчета.Макет.Удалить(Элемент);
	КонецЦикла;
	
	Для Каждого Макет Из МакетКомпоновки.Макеты Цикл 
		Если Макет = МакетШапкиОтчета Тогда
		Иначе
			Индекс = -1;
			МассивПоказателей = Новый Массив;
			МассивПоказателей.Добавить("БУ");
			МассивПоказателей.Добавить("НУ");
			
			Для Каждого ЭлементМассива Из МассивПоказателей Цикл
				Если ПоказателиОтчета[ЭлементМассива].Значение Тогда
					Индекс = Индекс + 1;
				КонецЕсли;
			КонецЦикла;
			Если ПоказателиОтчета.Контроль.Значение Тогда 
				Индекс = Индекс + 1;					
			КонецЕсли;
			
			Если ПоказателиОтчета.ВалютнаяСумма.Значение И КоличествоПоказателей = 1 Тогда 
			ИначеЕсли ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
				Индекс = Индекс + 1;				
				Если МакетГруппировкиВалюта.Найти(Макет) <> Неопределено Тогда
					
				Иначе
					Макет.Макет.Удалить(Макет.Макет[Индекс]);
					Индекс = Индекс - 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоПоказателей = 0 + ПоказателиОтчета.БУ.Значение + ПоказателиОтчета.НУ.Значение + ПоказателиОтчета.Контроль.Значение;
	ЗначенияПоказателей = Новый Массив(6, КоличествоПоказателей);
	Для Каждого Массив Из ЗначенияПоказателей Цикл
		Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
			Массив[Индекс] = 0;
		КонецЦикла;
	КонецЦикла;
	
	ДанныеОтчета.Вставить("МакетШапки"           , МакетШапкиОтчета);
	ДанныеОтчета.Вставить("МакетСчет"            , МакетГруппировкиСчет);
	ДанныеОтчета.Вставить("МакетПодвал"          , МакетПодвалаОтчета);
	ДанныеОтчета.Вставить("КоличествоПоказателей", КоличествоПоказателей);
	ДанныеОтчета.Вставить("ЗначенияПоказателей"  , ЗначенияПоказателей);
	
	Если МакетПодвалаОтчета.Макет.Количество() > 0 Тогда
		ЯчейкаОбразец = МакетПодвалаОтчета.Макет[0].Ячейки[0];
		ЦветНеОтрицательный = ПолучитьПараметр(ЯчейкаОбразец.Оформление.Элементы, "ЦветТекста").Значение;
		
		ВыделятьОтрицательные 	= Ложь;
		Для Каждого ЭлементУсловногоОформления Из КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
			ПараметрВыделятьОтрицательные = ПолучитьПараметр(ЭлементУсловногоОформления.Оформление.Элементы, "ВыделятьОтрицательные");
			Если ПараметрВыделятьОтрицательные <> Неопределено Тогда
				ВыделятьОтрицательные = ПараметрВыделятьОтрицательные.Использование И ЭлементУсловногоОформления.Использование;				
			КонецЕсли;
			Если ВыделятьОтрицательные Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;

		КоличествоЯчеек = МакетПодвалаОтчета.Макет[0].Ячейки.Количество();
		Для Каждого СтрокаМакета Из МакетПодвалаОтчета.Макет Цикл
			
			Для Индекс = КоличествоЯчеек - 7 По КоличествоЯчеек - 1 Цикл
				УстановитьПараметр(СтрокаМакета.Ячейки[Индекс].Оформление.Элементы, "ЦветТекста", ЦветНеОтрицательный);
				УстановитьПараметр(СтрокаМакета.Ячейки[Индекс].Оформление.Элементы, "ВыделятьОтрицательные", ВыделятьОтрицательные);
			КонецЦикла;
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

Процедура ПередВыводомЭлементаРезультата(МакетКомпоновки, ДанныеРасшифровки, ЭлементРезультата, Отказ = Ложь) Экспорт
	
	Попытка
		Если ЭлементРезультата.ЗначенияПараметров.П1.Значение = null 
			И ДанныеОтчета.МакетШапки.Имя <> ЭлементРезультата.Макет Тогда
			Отказ = Истина;
		КонецЕсли;                                                          
	Исключение
	КонецПопытки;
	
	СмещениеПоСтроке = ?(ДанныеОтчета.КоличествоПоказателей = 1, 0, 1);
	// Накапливаем суммы по корневым счетам
	Попытка
		Если ДанныеОтчета.МакетСчет.Найти(МакетКомпоновки.Макеты[ЭлементРезультата.Макет]) <> Неопределено Тогда
			ЗначениеСчет = ДанныеРасшифровки.Элементы[ЭлементРезультата.ЗначенияПараметров.П2.Значение].ПолучитьПоля()[0].Значение;
			Если Не ЗначениеЗаполнено(ЗначениеСчет.Родитель) И Не ЗначениеСчет.Забалансовый Тогда
				Для Индекс = 0 По ДанныеОтчета.КоличествоПоказателей - 1 Цикл
					Для ПодИндекс = 1 По 6 Цикл
						Значение = ЭлементРезультата.ЗначенияПараметров[Строка(МакетКомпоновки.Макеты[ЭлементРезультата.Макет].Макет[Индекс].Ячейки[ПодИндекс + СмещениеПоСтроке].Элементы[0].Значение)].Значение;
						Если Не ЗначениеСчет.НалоговыйУчет И Индекс = (ДанныеОтчета.КоличествоПоказателей - 1)
							 И ДанныеОтчета.ПоказателиОтчета.Контроль.Значение Тогда
							Значение = 0;
						КонецЕсли;
						ДанныеОтчета.ЗначенияПоказателей[ПодИндекс - 1][Индекс] = ДанныеОтчета.ЗначенияПоказателей[ПодИндекс - 1][Индекс] + Значение;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 
	Исключение
	КонецПопытки;
	
	// Проставляем накопленные суммы в подвал отчета
	Если ЭлементРезультата.Макет = ДанныеОтчета.МакетПодвал.Имя Тогда
		Для Индекс = 0 По ДанныеОтчета.КоличествоПоказателей - 1 Цикл
			Для ПодИндекс = 1 По 6 Цикл
				ЭлементРезультата.ЗначенияПараметров[Строка(ДанныеОтчета.МакетПодвал.Макет[Индекс].Ячейки[ПодИндекс + СмещениеПоСтроке].Элементы[0].Значение)].Значение = ДанныеОтчета.ЗначенияПоказателей[ПодИндекс - 1][Индекс];
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	КН.Настройки.Структура.Очистить();
	КН.Настройки.Выбор.Элементы.Очистить();
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("НУ");
	МассивПоказателей.Добавить("Контроль");
	МассивПоказателей.Добавить("ВалютнаяСумма");
		
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	КоличествоПоказателей = 0;
	Для Каждого Показатель Из ПоказателиОтчета Цикл
		Если Показатель.Ключ <> "РазвернутоеСальдо" Тогда
			КоличествоПоказателей = КоличествоПоказателей + Показатель.Значение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоПоказателей > 1 Тогда
		ГруппаПоказатели = КН.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоказатели.Заголовок     =  НСтр("ru='Показатели';uk='Показники'");
		ГруппаПоказатели.Использование = Истина;
		ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				мДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ЭлементМассива);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
		
	ГруппаСальдоНаНачало = КН.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачало.Заголовок     = НСтр("ru='Сальдо на начало периода';uk='Сальдо на початок періоду'");
	ГруппаСальдоНаНачало.Использование = Истина;
	ГруппаСальдоНаНачалоДт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачалоДт.Заголовок     = "Дебет";
	ГруппаСальдоНаНачалоДт.Использование = Истина;
	ГруппаСальдоНаНачалоДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСальдоНаНачалоКт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачалоКт.Заголовок     = "Кредит";
	ГруппаСальдоНаНачалоКт.Использование = Истина;
	ГруппаСальдоНаНачалоКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ГруппаОбороты = КН.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОбороты.Заголовок     = НСтр("ru='Обороты за период';uk='Обороти за період'");
	ГруппаОбороты.Использование = Истина;
	ГруппаОборотыДт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОборотыДт.Заголовок     = "Дебет";
	ГруппаОборотыДт.Использование = Истина;
	ГруппаОборотыДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаОборотыКт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОборотыКт.Заголовок     = "Кредит";
	ГруппаОборотыКт.Использование = Истина;
	ГруппаОборотыКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ГруппаСальдоНаКонец = КН.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонец.Заголовок     = НСтр("ru='Сальдо на конец периода';uk='Сальдо на кінець періоду'");
	ГруппаСальдоНаКонец.Использование = Истина;
	ГруппаСальдоНаКонецДт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонецДт.Заголовок     = "Дебет";
	ГруппаСальдоНаКонецДт.Использование = Истина;
	ГруппаСальдоНаКонецДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСальдоНаКонецКт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонецКт.Заголовок     = "Кредит";
	ГруппаСальдоНаКонецКт.Использование = Истина;
	ГруппаСальдоНаКонецКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ВидОстатоков = ?(ПоказателиОтчета.РазвернутоеСальдо.Значение, "Развернутый", "");
	
	Для Каждого ЭлементМассива Из МассивПоказателей Цикл
		Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
			мДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоДт, "СальдоНаНачалоПериода." + ЭлементМассива + "Начальный" + ВидОстатоков + "ОстатокДт");
			мДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоКт, "СальдоНаНачалоПериода." + ЭлементМассива + "Начальный" + ВидОстатоков + "ОстатокКт");
			мДобавитьВыбранноеПоле(ГруппаОборотыДт,        "ОборотыЗаПериод."       + ЭлементМассива + "ОборотДт");
			мДобавитьВыбранноеПоле(ГруппаОборотыКт,        "ОборотыЗаПериод."       + ЭлементМассива + "ОборотКт");
			мДобавитьВыбранноеПоле(ГруппаСальдоНаКонецДт,  "СальдоНаКонецПериода."  + ЭлементМассива + "Конечный"  + ВидОстатоков + "ОстатокДт");
			мДобавитьВыбранноеПоле(ГруппаСальдоНаКонецКт,  "СальдоНаКонецПериода."  + ЭлементМассива + "Конечный"  + ВидОстатоков + "ОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("Контроль");
	МассивПоказателей.Добавить("ВалютнаяСумма");
	
	Для Каждого ЭлементМассива Из МассивПоказателей Цикл
		Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
			мДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоДт, "СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокДт");
			мДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоКт, "СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокКт");
			мДобавитьВыбранноеПоле(ГруппаОборотыДт,        "ОборотыЗаПериод."       + ЭлементМассива + "ОборотДт");
			мДобавитьВыбранноеПоле(ГруппаОборотыКт,        "ОборотыЗаПериод."       + ЭлементМассива + "ОборотКт");
			мДобавитьВыбранноеПоле(ГруппаСальдоНаКонецДт,  "СальдоНаКонецПериода."  + ЭлементМассива + "КонечныйОстатокДт");
			мДобавитьВыбранноеПоле(ГруппаСальдоНаКонецКт,  "СальдоНаКонецПериода."  + ЭлементМассива + "КонечныйОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПолеГруппировки Из ДанныеОтчета.ДополнительныеПоля Цикл 
		Если ПолеГруппировки.Использование Тогда
			мДобавитьВыбранноеПоле(КН, ПолеГруппировки.Поле);
		КонецЕсли;
	КонецЦикла;
  	
	СхемаКД = ПолучитьМакет("ОборотноСальдоваяВедомость");
	
	// Доработка схемы - развернутое сальдо
	НаборДанных = СхемаКД.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконтоРазвернутое; // Набор "ПоСубконтоРазвернутое"
	ТекстЗапроса = НаборДанных.Запрос;
	НаборДанных.Запрос = "";
	
	ТекстЗапросПоСубконтоРазвернутое       = ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало ЗапросПоСубконто РазвернутоеСальдо", "//Конец ЗапросПоСубконто РазвернутоеСальдо");
	ТекстУсловиеСчетаПоСубконтоРазвернутое = ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало УсловиеСчета РазвернутоеСальдо"    , "//Конец УсловиеСчета РазвернутоеСальдо");
	ТекстСубконтоПоСубконтоРазвернутое     = ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало Субконто РазвернутоеСальдо"        , "//Конец Субконто РазвернутоеСальдо");
		
	ВыводитьРазвернутоеСальдо = Ложь;
	
	ТекстУсловие = "Ложь ИЛИ ";
	
	СписокВсехСчетовРазвернутоеСальдо = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из ДанныеОтчета.РазвернутоеСальдо Цикл
		Если СтрокаТаблицы.Использование И ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			СписокВсехСчетовРазвернутоеСальдо.Добавить(СтрокаТаблицы.Счет);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ДанныеОтчета.РазвернутоеСальдо Цикл
		СубконтоРазвернутоеСальдо = Новый СписокЗначений;
		Если СтрокаТаблицы.Использование И ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			ВыводитьРазвернутоеСальдо = Истина;
			Для Каждого СтрокаТаблицыСубконто Из СтрокаТаблицы.ПоСубконто Цикл
				Если СтрокаТаблицыСубконто.Пометка Тогда
					СубконтоРазвернутоеСальдо.Добавить(СтрокаТаблицыСубконто.Значение);            
				КонецЕсли;
			КонецЦикла;		
			
			//СписокСчетовРазвернутоеСальдо.Добавить(Строка.Счет, , Истина);
			
			Индекс = ДанныеОтчета.РазвернутоеСальдо.Индекс(СтрокаТаблицы) + 1;
			
			ТекстУсловие = ТекстУсловие + "Счет = &СчетРазвернутоеСальдо" + Индекс + " ИЛИ "; 
			
			// Формируем текст параметра УсловиеСчета запроса детализации по субконто
			ТекстДляПодстановкиУсловиеСчетаПоСубконтоРазвернутое = "Счет В ИЕРАРХИИ (&СчетРазвернутоеСальдо" + Индекс + ")
																	| И Счет НЕ В (&СчетаИсключенныеИзЗапросаПоСчетамРазвернутое" + Индекс + ")
																	| И ((НЕ Счет.Забалансовый)
																	| ИЛИ &ВыводитьЗабалансовыеСчета)";
			
			// Формируем текст параметра Субконто запроса по субконто развернутое
			ТекстДляПодстановкиСубконтоПоСубконтоРазвернутое = "&СубконтоРазвернутый" + Индекс;
			
			// Установка параметра СчетРазвернутоеСальдо
			мСкопироватьПараметрСхемыКомпоновкиДанных(СхемаКД, "СчетРазвернутоеСальдо" + Индекс, "СчетРазвернутоеСальдо", СтрокаТаблицы.Счет);
			
			СчетаИсключенныеИзЗапросаПоСчетамРазвернутое = СписокВсехСчетовРазвернутоеСальдо.Скопировать();
			СчетаИсключенныеИзЗапросаПоСчетамРазвернутое.Удалить(СчетаИсключенныеИзЗапросаПоСчетамРазвернутое.НайтиПоЗначению(СтрокаТаблицы.Счет));
			// Установка параметра СчетаИсключенныеИзЗапросаПоСчетамРазвернутое
			мСкопироватьПараметрСхемыКомпоновкиДанных(СхемаКД, "СчетаИсключенныеИзЗапросаПоСчетамРазвернутое" + Индекс, "СчетаИсключенныеИзЗапросаПоСчетамРазвернутое", СчетаИсключенныеИзЗапросаПоСчетамРазвернутое);
			
			// Установка параметра "СубконтоДетализацииРазвернутый
			мСкопироватьПараметрСхемыКомпоновкиДанных(СхемаКД, "СубконтоРазвернутый" + Индекс, "СубконтоРазвернутый", СубконтоРазвернутоеСальдо);
			
			// Формируем текст запроса для счета детализации
			ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = ТекстЗапросПоСубконтоРазвернутое;//СтрЗаменить(ТекстЗапросПоСубконтоРазвернутое, ТекстПолеСчетПоСубконтоРазвернутое, ТекстДляПодстановкиПолеСчетПоСубконтоРазвернутое);
			ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, ТекстУсловиеСчетаПоСубконтоРазвернутое, ТекстДляПодстановкиУсловиеСчетаПоСубконтоРазвернутое);
			ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, ТекстСубконтоПоСубконтоРазвернутое, ТекстДляПодстановкиСубконтоПоСубконтоРазвернутое);
			
			Для Индекс = 1 По СубконтоРазвернутоеСальдо.Количество() Цикл
				ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, "//Null КАК Субконто" + Индекс, "ОстаткиИОбороты.Субконто" + Индекс + " КАК Субконто" + Индекс);
			КонецЦикла;
			
			// Доработка запроса набора данных
			НаборДанных.Запрос = НаборДанных.Запрос + ТекстДляПодстановкиЗапросПоСубконтоРазвернутое;
			
			// Доработка запроса набора данных
			НаборДанных.Запрос = НаборДанных.Запрос + " ОБЪЕДИНИТЬ ВСЕ ";
		КонецЕсли;	
	КонецЦикла;
	НаборДанных.Запрос = Лев(НаборДанных.Запрос, СтрДлина(НаборДанных.Запрос) - 16);
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("НУ");
	
	Если ВыводитьРазвернутоеСальдо Тогда
		ТекстУсловие = Лев(ТекстУсловие, СтрДлина(ТекстУсловие) - 4);
		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
			ПолеИтога = СхемаКД.ПоляИтога.Найти("СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокДт");
			ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйРазвернутыйОстатокДт) Иначе Сумма(СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокДт) Конец";
			
			ПолеИтога = СхемаКД.ПоляИтога.Найти("СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокКт");
			ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйРазвернутыйОстатокКт) Иначе Сумма(СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокКт) Конец";
			
			ПолеИтога = СхемаКД.ПоляИтога.Найти("СальдоНаКонецПериода." + ЭлементМассива + "КонечныйОстатокДт");
			ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаКонецПериода." + ЭлементМассива + "КонечныйРазвернутыйОстатокДт) Иначе Сумма(СальдоНаКонецПериода." + ЭлементМассива + "КонечныйОстатокДт) Конец";
			
			ПолеИтога = СхемаКД.ПоляИтога.Найти("СальдоНаКонецПериода." + ЭлементМассива + "КонечныйОстатокКт");
			ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаКонецПериода." + ЭлементМассива + "КонечныйРазвернутыйОстатокКт) Иначе Сумма(СальдоНаКонецПериода." + ЭлементМассива + "КонечныйОстатокКт) Конец";
		КонецЦикла;
	КонецЕсли;
	
	НаборДанных = СхемаКД.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконто; // Набор "ПоСубконто"
	ТекстЗапроса = НаборДанных.Запрос;
	НаборДанных.Запрос = "";
	
	ТекстЗапросДетализацииПоСубконто       = ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало ЗапросПоСубконто Детализация", "//Конец ЗапросПоСубконто Детализация");
	ТекстУсловиеСчетаДетализацииПоСубконто = ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало УсловиеСчета Детализация", "//Конец УсловиеСчета Детализация");
	ТекстСубконтоДетализацииПоСубконто     = ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало Субконто Детализация", "//Конец Субконто Детализация");
	
	СчетаИсключенныеИзЗапросаПоСчетам = Новый СписокЗначений;
	
	// Доработка для детализации
	ЕстьДетализацияПоСубконто = Ложь;
	Для Каждого СтрокаТаблицы Из ДанныеОтчета.Группировка Цикл	
		СубконтоДетализации = Новый СписокЗначений;
		Если СтрокаТаблицы.Использование И ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда	
			Для Каждого СтрокаТаблицыСубконто Из СтрокаТаблицы.ПоСубконто Цикл
				Если СтрокаТаблицыСубконто.Пометка Тогда
					СубконтоДетализации.Добавить(СтрокаТаблицыСубконто.Значение);            
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;
		
		Если СубконтоДетализации.Количество() > 0 Тогда
			ЕстьДетализацияПоСубконто = Истина;
			
			СчетаИсключенныеИзЗапросаПоСчетам.Добавить(СтрокаТаблицы.Счет);
			Индекс = ДанныеОтчета.Группировка.Индекс(СтрокаТаблицы) + 1;
			
			// Формируем текст параметра УсловиеСчета запроса детализации по субконто
			ТекстДляПодстановкиУсловиеСчетаДетализацииПоСубконто = "Счет В ИЕРАРХИИ (&СчетДетализации" + Индекс + ")
																   | И ((НЕ Счет.Забалансовый)
																   | ИЛИ &ВыводитьЗабалансовыеСчета)";
											  
			// Формируем текст параметра Субконто запроса детализации по субконто
			ТекстДляПодстановкиСубконтоДетализацииПоСубконто = "&СубконтоДетализации" + Индекс;
			
			// Формируем текст запроса для счета детализации
			ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстЗапросДетализацииПоСубконто, ТекстУсловиеСчетаДетализацииПоСубконто, ТекстДляПодстановкиУсловиеСчетаДетализацииПоСубконто);
			ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, ТекстСубконтоДетализацииПоСубконто, ТекстДляПодстановкиСубконтоДетализацииПоСубконто);
			
			// Корректировка текста запроса в зависимости от количества указанных видов субконто
			Если Индекс > 1 Тогда
				Для ИндексПсевдонима = 1 По 3 Цикл
					ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, " КАК Субконто" + ИндексПсевдонима, "");
				КонецЦикла;
			КонецЕсли;
			Для ИндексСубконто = СубконтоДетализации.Количество() + 1 По 3 Цикл
				ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, "ОстаткиИОбороты.Субконто" + ИндексСубконто , "Null");	
			КонецЦикла;
			
			// Добавление и установка значения параметра СчетДетализации{Индекс}
			
			мСкопироватьПараметрСхемыКомпоновкиДанных(СхемаКД, "СчетДетализации" + Индекс, "СчетДетализации", СтрокаТаблицы.Счет);
			
			// Добавление и установка значения параметра СубконтоДетализации{Индекс}
			мСкопироватьПараметрСхемыКомпоновкиДанных(СхемаКД, "СубконтоДетализации" + Индекс, "СубконтоДетализации", СубконтоДетализации);
							
			// Доработка запроса набора данных
			НаборДанных.Запрос = НаборДанных.Запрос + ТекстДляПодстановкиЗапросДетализацииПоСубконто;
			
			// Доработка запроса набора данных
			НаборДанных.Запрос = НаборДанных.Запрос + " ОБЪЕДИНИТЬ ВСЕ ";	
		КонецЕсли;
	КонецЦикла;
	
	НаборДанных.Запрос = Лев(НаборДанных.Запрос, СтрДлина(НаборДанных.Запрос) - 16);
	
	СхемаКД.Параметры.ВыводитьЗабалансовыеСчета.Значение = Истина;
	//мУстановитьПараметр(Компон
	СхемаКД.Параметры.СчетаИсключенныеИзЗапросаПоСчетам.Значение = СчетаИсключенныеИзЗапросаПоСчетам;
	
	Если Не ЕстьДетализацияПоСубконто Тогда
		СхемаКД.НаборыДанных.НаборДанныхОбъединение.Элементы.Удалить(СхемаКД.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконто);
	КонецЕсли;
	Если Не ВыводитьРазвернутоеСальдо Тогда
		СхемаКД.НаборыДанных.НаборДанныхОбъединение.Элементы.Удалить(СхемаКД.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконтоРазвернутое);
	КонецЕсли;
		
	КН.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
	
	Для Каждого Параметр Из КН.Настройки.ПараметрыДанных.Элементы Цикл
		Параметр.Использование = Истина;
	КонецЦикла;
	
	мУстановитьПараметр(КН, "СчетаИсключенныеИзЗапросаПоСчетам", СчетаИсключенныеИзЗапросаПоСчетам);
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		мУстановитьПараметр(КН, "НачалоПериода", НачалоДня(НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		мУстановитьПараметр(КН, "КонецПериода", КонецДня(КонецПериода));
	КонецЕсли;
	
	мУстановитьПараметр(КН, "ВыводитьЗабалансовыеСчета", ВыводитьЗабалансовыеСчета);
	
	
	// Формирование структуры отчета
	Структура = КН.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Счет");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		
	// Установка отбора на выводимый уровень иерархии счета
	ГруппаЭлементовОтбора = Структура.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
	ГруппаЭлементовОтбора.ТипГруппы  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	мДобавитьОтбор(ГруппаЭлементовОтбора, "ПараметрыДанных.ПоСубсчетам", Истина);
	мДобавитьОтбор(ГруппаЭлементовОтбора, "СистемныеПоля.УровеньВГруппировке", 1);
	СписокСчетовПоСубсчетам = мПолучитьСписокСчетовПоСубсчетам(ДанныеОтчета.Группировка);
	мДобавитьОтбор(ГруппаЭлементовОтбора, "Счет", СписокСчетовПоСубсчетам, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, СписокСчетовПоСубсчетам.Количество() > 0);

	мУстановитьПараметр(КН, "ПоСубсчетам", ПоСубсчетам);
	
	// Отключим вывод отборов
	мУстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
	Если ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
		Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));		
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Валюта");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
	КонецЕсли;
	
	Если ЕстьДетализацияПоСубконто Тогда
		Для Индекс = 1 По 3 Цикл 
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Субконто" + Индекс);
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			Если ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
				Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));		
				ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеГруппировки.Использование  = Истина;
				ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Валюта");
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
				
				Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	мДобавитьОтборДляПоказателяКонтроль(ЭтотОбъект);
	
	УсловноеОформление = КН.Настройки.УсловноеОформление.Элементы.Добавить();
	
	Поле = УсловноеОформление.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода.НУНачальныйОстатокДт");
	Поле = УсловноеОформление.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода.КонтрольНачальныйОстатокДт");
	
	мДобавитьОтбор(УсловноеОформление.Отбор, "Счет.НалоговыйУчет", Ложь);
	УстановитьПараметр(УсловноеОформление.Оформление, "МаксимальнаяВысота", 1);
	
КонецПроцедуры

Функция ПолучитьТекстПоМаркерам(Текст, МаркерНачало, МаркерКонец)
	
	ПозицияМаркерНачало = Найти(Текст, МаркерНачало) + СтрДлина(МаркерНачало);
	ПозицияМаркерКонец  = Найти(Текст, МаркерКонец);
	
	Возврат СокрЛП(Сред(Текст, ПозицияМаркерНачало, ПозицияМаркерКонец - ПозицияМаркерНачало - 1));
	
КонецФункции

Процедура ВыводЗаголовкаОтчета(ФормаОтчета, Результат)
	
	 мВыводЗаголовкаОтчета(ФормаОтчета, Результат);
			
КонецПроцедуры

Процедура ВыводПодписейОтчета(ФормаОтчета, Результат)
	
	мВыводПодписейОтчета(ФормаОтчета, Результат);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка() Экспорт 
	
	ЗаголовокОтчета = "Оборотно-сальдовая ведомость" + мПолучитьПредставлениеПериода(ЭтаФорма);

	Возврат ЗаголовокОтчета;
	
КонецФункции

Процедура ПолучитьСтруктуруПоказателейОтчета() Экспорт
	
	ПоказателиОтчета = мПолучитьСтруктуруПоказателейОтчета(,, Истина, Истина, Ложь);
	ДанныеОтчета.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(Результат)
	
	мОбработкаРезультатаОтчета(ЭтаФорма, Результат);
	
	Индекс = Результат.ВысотаТаблицы;
	Пока Индекс > 0 Цикл
		ИндексСтроки = "R" + Формат(Индекс,"ЧГ=0");
		Если Результат.Область(ИндексСтроки).ВысотаСтроки = 1 Тогда
			Результат.УдалитьОбласть(Результат.Область(ИндексСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	// Зафиксируем заголовок отчета
	ВысотаЗаголовка = Результат.Области.Заголовок.Низ;
	Результат.ФиксацияСверху = ВысотаЗаголовка + 2;
	
КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить() Экспорт
	
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	мСохранитьНастройку(ЭтаФорма);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	мПрименитьСтруктуруПараметровОтчета(ЭтаФорма, СтруктураПараметров);
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	Если Не ЗначениеЗаполнено(СохраненнаяНастройка) И Не РежимРасшифровки Тогда
		НачалоПериода = НачалоМесяца(ТекущаяДата());
		КонецПериода  = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьОтчет(ВыводитьПолностью = Истина) Экспорт
	
	Если ВыводитьПолностью Тогда
		Если Не мПроверитьЗаполнениеОбязательныхРеквизитов(ЭтаФорма) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;  
	
	Если РежимРасшифровки Тогда
		РежимРасшифровки = Ложь;
	Иначе
		мСохранитьДанныеОтчета(ЭтаФорма);    
	КонецЕсли;
	
	Если НастройкиФормы.ЗакрыватьПанельПриФормированииОтчета И ВыводитьПолностью Тогда
		ЭлементыФормы.ДействияФормыДополнительные.Кнопки.ПанельПользователя.Пометка = Ложь;
		мУправлениеОтображениемПанелиПользователя(ЭтаФорма);
	КонецЕсли;
	
	СформироватьОтчет(ЭтаФорма.ЭлементыФормы.Результат, ДР, Ложь, , ВыводитьПолностью);
	
	мОбновитьКоллекциюКнопокИстории(ЭтаФорма);
	
КонецПроцедуры

Процедура ОбновитьПанельНастроек() Экспорт
	
	мОбновитьПредставлениеПоказателейОтчета(ЭтаФорма);
	Группировка        = ДанныеОтчета.Группировка.Скопировать();
	РазвернутоеСальдо  = ДанныеОтчета.РазвернутоеСальдо.Скопировать();
	ДополнительныеПоля = ДанныеОтчета.ДополнительныеПоля.Скопировать();
	
КонецПроцедуры
/////
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	мНазначитьФормеУникальныйКлючИдентификации(ЭтаФорма);
	
	Если Не мЗаполнитьНастройкиПриОткрытииОтчета(ЭтаФорма) Тогда
		ИнициализацияОтчета();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если Не РежимРасшифровки Тогда
		Настроить();
	КонецЕсли;
	
	мВосстановитьНастройкиФормы(ЭтаФорма);
	ОбновитьПанельНастроек();
	мУправлениеОтображениемОбластейОтчета(ЭтаФорма);
	мУправлениеОтображениемПанелиПользователя(ЭтаФорма);
	мЗаполнитьТаблицуЭлементов(ЭтаФорма);
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Заголовок = ПолучитьТекстЗаголовка();
	
КонецПроцедуры
                             
Процедура ПриЗакрытии()
	
	мСохранитьДанныеОтчета(ЭтаФорма);
	мСохранитьНастройкиФормы(ЭтаФорма);
	мСохранитьНастройку(ЭтаФорма);
	
КонецПроцедуры
////////
Процедура ДействияФормыОсновныеСформировать(Кнопка)
	
	ОбновитьОтчет();

КонецПроцедуры

Процедура ДействияФормыОсновныеПечать(Кнопка)
	
	ЭлементыФормы.Результат.Напечатать(Ложь);
	
КонецПроцедуры

Процедура ДействияФормыОсновныеСохранитьКак(Кнопка)
	
	ПредставлениеСохраняемогоФайла = ПолучитьТекстЗаголовка();
	мСохранитьКопиюРезультатаОтчета(ЭтаФорма, ПредставлениеСохраняемогоФайла);
	
КонецПроцедуры
//
Процедура ДействияФормыДополнительныеПанельПользователя(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	мУправлениеОтображениемПанелиПользователя(ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыДополнительныеИстория(Кнопка) Экспорт
	
	мДействияФормыДополнительныеИстория(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ДействияФормыДополнительныеНастройкаПанелиПользователя(Кнопка)
	
	мНастроитьСтраницыПанелиПользователя(ЭтаФорма, Кнопка);
		
КонецПроцедуры

Процедура ДействияФормыДополнительныеВосстановитьЗначения(Кнопка)
	
	мДействияФормыДополнительныеВосстановитьЗначения(ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыДополнительныеСохранитьЗначения(Кнопка)
	
	мДействияФормыДополнительныеСохранитьЗначения(ЭтаФорма);
	
КонецПроцедуры
//
Процедура ПоказателиОтчетаПриИзмененииФлажка(Элемент, Колонка)
	
	мПоказателиОтчетаПриИзмененииФлажка(ЭтаФорма, Элемент, Колонка);
	
КонецПроцедуры
//
Процедура КоманднаяПанельДополнительныеПоляДобавитьЭлемент(Кнопка)
	
	мДополнительныеПоляДобавитьЭлемент(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельДополнительныеПоляВключитьВсе(Кнопка)
	
	ДополнительныеПоля.ЗаполнитьЗначения(Истина, "Использование");
	
КонецПроцедуры

Процедура КоманднаяПанельДополнительныеПоляВыключитьВсе(Кнопка)
	
	ДополнительныеПоля.ЗаполнитьЗначения(Ложь, "Использование");
	
КонецПроцедуры

Процедура ДополнительныеПоляПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	мДополнительныеПоляДобавитьЭлемент(ЭтаФорма, Отказ);
	
КонецПроцедуры

Процедура ДополнительныеПоляПередНачаломИзменения(Элемент, Отказ)
	
	мДополнительныеПоляПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры

Процедура ДополнительныеПоляПриПолученииДанных(Элемент, ОформленияСтрок)
	
	мРаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры
//
Процедура КоманднаяПанельОтборДобавитьЭлемент(Кнопка)
	
	мОтборДобавитьЭлемент(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельОтборДобавитьГруппу(Кнопка)
	
	мОтборДобавитьГруппу(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ОтборПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	мОтборДобавитьЭлемент(ЭтаФорма, Отказ);
	
КонецПроцедуры

Процедура ОтборПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ЛевоеЗначениеДляКраткогоОтображенияЭлемента.ОтображатьКартинку = Ложь;
	
КонецПроцедуры

Процедура ОтборПриПолученииДанных(Элемент, ОформленияСтрок)
	
	мРаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура ОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	мОтборПриОкончанииРедактирования(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

Процедура ОтборЛевоеЗначениеДляКраткогоОтображенияЭлементаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мОтборНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОтборПравоеЗначениеДляКраткогоОтображенияЭлементаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мОтборНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры
//
Процедура КоманднаяПанельГруппировкаВключитьВсе(Кнопка)
	
	Группировка.ЗаполнитьЗначения(Истина, "Использование");
	
КонецПроцедуры

Процедура КоманднаяПанельГруппировкаВыключитьВсе(Кнопка)
	
	Группировка.ЗаполнитьЗначения(Ложь, "Использование");
	
КонецПроцедуры

Процедура ГруппировкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущаяСтрока.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ГруппировкаСчетПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Группировка.ТекущаяСтрока;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Счет) Тогда
		ТекущаяСтрока.ПоСубконто.Очистить();
		Представление = "";
		Для Индекс = 0 По ТекущаяСтрока.Счет.ВидыСубконто.Количество() - 1 Цикл
			ВидСубконто = ТекущаяСтрока.Счет.ВидыСубконто[Индекс].ВидСубконто;
			ТекущаяСтрока.ПоСубконто.Добавить(ВидСубконто, , Истина);
			Представление = Представление + ВидСубконто + ", ";
		КонецЦикла;
		ТекущаяСтрока.Представление = Сред(Представление, 1, СтрДлина(Представление) - 2);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ГруппировкаПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.Группировка.ТекущаяСтрока;
	
	ТекущаяСтрока.ПоСубконто.ЗаполнитьПометки(Ложь);
	ТекущаяСтрока.Представление = "";
	
КонецПроцедуры

Процедура ГруппировкаПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.Группировка.ТекущаяСтрока;
	
	ФормаНастройкиСубконто = ПолучитьФорму("ФормаНастройкаПоСубконто", Элемент);
	
	ФормаНастройкиСубконто.Список = ТекущаяСтрока.ПоСубконто.Скопировать();
	
	ФормаНастройкиСубконто.Открыть();
	
КонецПроцедуры

Процедура ГруппировкаПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		ТекущаяСтрока = ЭлементыФормы.Группировка.ТекущаяСтрока;
		ТекущаяСтрока.ПоСубконто = ВыбранноеЗначение;
		
		Представление = "";
		Для Каждого СтрокаСписка Из ТекущаяСтрока.ПоСубконто Цикл
			Если СтрокаСписка.Пометка Тогда
				Представление = Представление + СтрокаСписка.Значение + ", ";
			КонецЕсли;
		КонецЦикла;
		ТекущаяСтрока.Представление = Сред(Представление, 1, СтрДлина(Представление) - 2);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ГруппировкаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	мРаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры
//
Процедура КоманднаяПанельРазвернутоеСальдоВключитьВсе(Кнопка)
	
	РазвернутоеСальдо.ЗаполнитьЗначения(Истина, "Использование");
	
КонецПроцедуры

Процедура КоманднаяПанельРазвернутоеСальдоВыключитьВсе(Кнопка)
	
	РазвернутоеСальдо.ЗаполнитьЗначения(Ложь, "Использование");
	
КонецПроцедуры

Процедура РазвернутоеСальдоПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущаяСтрока.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура РазвернутоеСальдоПриПолученииДанных(Элемент, ОформленияСтрок)
	
	мРаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура РазвернутоеСальдоСчетПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.РазвернутоеСальдо.ТекущаяСтрока;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Счет) Тогда
		ТекущаяСтрока.ПоСубконто.Очистить();
		Представление = "";
		Для Индекс = 0 По ТекущаяСтрока.Счет.ВидыСубконто.Количество() - 1 Цикл
			ВидСубконто = ТекущаяСтрока.Счет.ВидыСубконто[Индекс].ВидСубконто;
			ТекущаяСтрока.ПоСубконто.Добавить(ВидСубконто, , Истина);
			Представление = Представление + ВидСубконто + ", ";
		КонецЦикла;
		ТекущаяСтрока.Представление = Сред(Представление, 1, СтрДлина(Представление) - 2);
	КонецЕсли;
	
КонецПроцедуры

Процедура РазвернутоеСальдоПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.РазвернутоеСальдо.ТекущаяСтрока;
	
	ФормаНастройкиСубконто = ПолучитьФорму("ФормаНастройкаПоСубконто", Элемент);
	
	ФормаНастройкиСубконто.Список = ТекущаяСтрока.ПоСубконто.Скопировать();
	
	ФормаНастройкиСубконто.Открыть();
	
КонецПроцедуры

Процедура РазвернутоеСальдоПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		ТекущаяСтрока = ЭлементыФормы.РазвернутоеСальдо.ТекущаяСтрока;
		ТекущаяСтрока.ПоСубконто = ВыбранноеЗначение;
		
		Представление = "";
		Для Каждого СтрокаСписка Из ТекущаяСтрока.ПоСубконто Цикл
			Если СтрокаСписка.Пометка Тогда
				Представление = Представление + СтрокаСписка.Значение + ", ";
			КонецЕсли;
		КонецЦикла;
		ТекущаяСтрока.Представление = Сред(Представление, 1, СтрДлина(Представление) - 2);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазвернутоеСальдоПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.РазвернутоеСальдо.ТекущаяСтрока;
	
	ТекущаяСтрока.ПоСубконто.ЗаполнитьПометки(Ложь);
	ТекущаяСтрока.Представление = "";
	
КонецПроцедуры
//
Процедура ФлагВыводитьЗаголовокПриИзменении(Элемент)
	
	НастройкиФормы.Вставить("ВыводитьЗаголовок", Элемент.Значение);

КонецПроцедуры

Процедура ФлагВыводитьПодписиПриИзменении(Элемент)
	
	НастройкиФормы.Вставить("ВыводитьПодписи", Элемент.Значение);
		
КонецПроцедуры

Процедура ПолеВыбораОформленияПриИзменении(Элемент)
	
	НастройкиФормы.Вставить("МакетОформления" , ЭлементыФормы.ПолеВыбораОформления.Значение);	
	
КонецПроцедуры

Процедура УсловноеОформлениеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	мУсловноеОформлениеПриВыводеСтроки(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура УсловноеОформлениеПриПолученииДанных(Элемент, ОформленияСтрок)
	
	мРаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры
//
Процедура ПолеВводаПериодПриИзменении(Элемент)
	
	ОбновитьПараметрыПериодаПоФорме(КН, ЭтаФорма);
	
КонецПроцедуры

Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	НастроитьПериод(НастройкаПериода, НачалоПериода, КонецПериода);
	ОбновитьПараметрыПериодаПоФорме(КН, ЭтаФорма);
	
КонецПроцедуры 
////
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	мОбработкаРасшифровкиСтандартногоОтчета(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	мРезультатПриАктивизацииОбласти(ЭтаФорма, Элемент);
	
КонецПроцедуры

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

РежимРасшифровки = Ложь;

ИдентификаторОбъекта  = "ОтчетОбъект.ОборотноСальдоваяВедомость";
ПредставлениеОтчета   = "Оборотно-сальдовая ведомость";

СхемаКД = ПолучитьМакет("ОборотноСальдоваяВедомость");
КН.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
КН.ЗагрузитьНастройки(СхемаКД.НастройкиПоУмолчанию);

ЭлементыФормы.Отбор.Данные              = "КН.Настройки.Отбор";
ЭлементыФормы.УсловноеОформление.Данные = "КН.Настройки.УсловноеОформление";

Реквизиты = Новый Массив;
Реквизиты.Добавить("НачалоПериода");
Реквизиты.Добавить("КонецПериода");
Реквизиты.Добавить("НастройкиФормы");
Реквизиты.Добавить("ДанныеОтчета");
Реквизиты.Добавить("История");
Реквизиты.Добавить("ВыводитьЗабалансовыеСчета");
Реквизиты.Добавить("ПоСубсчетам");