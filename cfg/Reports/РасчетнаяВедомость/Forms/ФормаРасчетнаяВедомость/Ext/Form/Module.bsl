////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Обновление отчета
//
// Параметры:
//  Нет.
//
Процедура ОбновитьОтчет() Экспорт
	
	НачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода")).Значение;
	КонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода")).Значение;
	
	Если НачалоПериода > КонецПериода тогда
		Сообщить(НСтр("ru='Неправильно указан период.';uk='Неправильно вказаний період.'"));
		Возврат;
	КонецЕсли;
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачальноеСальдо", НСтр("ru='Начальное сальдо';uk='Початкове сальдо'",ЛокализацияПовтИсп.ПолучитьЯзыкФормированияПечатныхФормОтчетов()));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонечноеСальдо", НСтр("ru='Конечное сальдо';uk='Кінцеве сальдо'",ЛокализацияПовтИсп.ПолучитьЯзыкФормированияПечатныхФормОтчетов()));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВсегоНачислено", НСтр("ru='Всего начислено';uk='Всього нараховано'",ЛокализацияПовтИсп.ПолучитьЯзыкФормированияПечатныхФормОтчетов()));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВсегоУдержано", НСтр("ru='Всего удержано';uk='Всього утримано'",ЛокализацияПовтИсп.ПолучитьЯзыкФормированияПечатныхФормОтчетов()));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПогашениеЗайма", НСтр("ru='Погашение займа';uk='Погашення позики'",ЛокализацияПовтИсп.ПолучитьЯзыкФормированияПечатныхФормОтчетов()));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПогашеноЗадолженности", НСтр("ru='Погашено задолженности';uk='Погашено заборгованості'",ЛокализацияПовтИсп.ПолучитьЯзыкФормированияПечатныхФормОтчетов()));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПодРасчет", НСтр("ru='Под расчет';uk='Під розрахунок'",ЛокализацияПовтИсп.ПолучитьЯзыкФормированияПечатныхФормОтчетов()));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПоРеглУчету", НСтр("ru='По регл. учету';uk='За регл. обліком'",ЛокализацияПовтИсп.ПолучитьЯзыкФормированияПечатныхФормОтчетов()));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Прочее", НСтр("ru='Прочее';uk='Інше'",ЛокализацияПовтИсп.ПолучитьЯзыкФормированияПечатныхФормОтчетов()));
	Если ФормированиеПечатныхФорм.ЗаполненРегламентированныйПроизводственныйКалендарь(НачалоПериода, КонецПериода) тогда 
		СФормироватьОтчет(ЭлементыФормы.Результат, ДанныеРасшифровки);
	Иначе
		Сообщить(НСтр("ru='Не заполнен регламентированный производственный календарь';uk='Не заповнений регламентований виробничий календар'"));
	КонецЕсли;

КонецПроцедуры //ОбновитьОтчет()

// Копирует упорядочивания из элемента структуры настройки СКД в отчет
//
// Параметры:
//  Настройка - настройки схемы компоновки данных
//
Процедура ПеренестиВсеУпорядочиванияГруппировкиВНастройки(Настройки)
	
	Если Настройки.Структура.Количество() <> 0 тогда
		
		Если ТипЗнч(Настройки.Структура[0]) = Тип("ТаблицаКомпоновкиДанных") тогда
			
			Если Настройки.Структура[0].Строки.Количество() <> 0 тогда
				
				ПеренестиУпорядочивание(Настройки, Настройки.Структура[0].Строки[0]);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Настройки.Структура[0]) = Тип("ГруппировкаТаблицыКомпоновкиДанных") тогда
			
			ПеренестиУпорядочивание(Настройки, Настройки.Структура[0]);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ПеренестиВсеУпорядочиванияГруппировкиВНастройки()

// Копирует упорядочивания из группировки объекта в отчет
//
// Параметры:
//  Настройка - настройки схемы компоновки данных
//  Структура - структура настройки компоновки данных
//
Процедура ПеренестиУпорядочивание(Настройки, Структура)
	
	ТиповыеОтчеты.СкопироватьЭлементы(Настройки.Порядок, Структура.Порядок);
	
	Если Структура.Структура.Количество() <> 0 тогда
		
		ПеренестиУпорядочивание(Настройки, Структура.Структура[0]);
		
	КонецЕсли;
	
КонецПроцедуры //ПеренестиУпорядочивание()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события перед открытием формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ЭтоОтработкаРасшифровки 
	   И Не СохранениеНастроек.ЗаполнитьНастройкиПриОткрытииОтчета(ЭтотОтчет) Тогда
		ИнициализацияОтчета();
	КонецЕсли;
	
	ТиповыеОтчеты.НазначитьФормеУникальныйКлючИдентификации(ЭтаФорма);
	ТиповыеОтчеты.ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ЭтотОтчет, ЭтаФорма);
	ТиповыеОтчеты.УправлениеОтображениемЭлементовФормыТиповогоОтчета(ЭтотОтчет, ЭтаФорма);
	
	
	ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ЗначениеПараметраКонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	Если ЗначениеПараметраНачалоПериода.Значение = '00010101' ИЛИ ЗначениеПараметраКонецПериода.Значение = '00010101' тогда
		
		РД = ОбщегоНазначения.ПолучитьРабочуюДату();
		
		ЗначениеПараметраНачалоПериода.Значение = НачалоМесяца(РД);
		ЗначениеПараметраКонецПериода.Значение  = КонецМесяца(РД);
		
	КонецЕсли;
	
	НачалоПериода = ЗначениеПараметраНачалоПериода.Значение;
	КонецПериода  = ЗначениеПараметраКонецПериода.Значение;
	
	СтрокаНачалоПериода = РаботаСДиалогами.ДатаКакМесяцПредставление(НачалоПериода);
	СтрокаКонецПериода  = РаботаСДиалогами.ДатаКакМесяцПредставление(КонецПериода);
	
КонецПроцедуры //ПередОткрытием()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ НАЖАТИЯ КНОПОК КОМАНДНОЙ ПАНЕЛИ

// Процедура - обработчик нажатия кнопки "Отбор".
//
Процедура КоманднаяПанельФормыОтбор(Кнопка)

	Кнопка.Пометка = Не Кнопка.Пометка;
	ПоказыватьБыстрыйОтбор = Кнопка.Пометка;
	ТиповыеОтчеты.УправлениеОтображениемЭлементовФормыТиповогоОтчета(ЭтотОтчет, ЭтаФорма);
	
КонецПроцедуры //КоманднаяПанельФормыОтбор()

// Процедура - обработчик нажатия кнопки "Сформировать".
//
Процедура КоманднаяПанельФормыСформировать(Кнопка)
	
	ОбновитьОтчет();
	
КонецПроцедуры // КоманднаяПанельФормыСформировать()

// Процедура - обработчик нажатия кнопки "Заголовок".
//
Процедура КоманднаяПанельЗаголовок(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ТиповыеОтчеты.УправлениеОтображениемЭлементовФормыТиповогоОтчета(ЭтотОтчет, ЭтаФорма);
	ТиповыеОтчеты.УправлениеОтображениемЗаголовкаТиповогоОтчета(ЭтотОтчет, ЭтаФорма.ЭлементыФормы.Результат);
	
КонецПроцедуры //КоманднаяПанельЗаголовок()

// Процедура - обработчик нажатия кнопки "На принтер"
//
Процедура ДействияФормыНаПринтер(Кнопка)
	
	ЭлементыФормы.Результат.Напечатать();

КонецПроцедуры //ДействияФормыНаПринтер()

// Обработчик события элемента КоманднаяПанельФормы.НовыйОтчет.
//
Процедура КоманднаяПанельНовыйОтчет(Кнопка)
	
	Если Строка(ЭтотОбъект) = "ВнешняяОбработкаОбъект." + ЭтотОбъект.Метаданные().Имя Тогда
			
		Предупреждение(НСтр("ru='Данный отчет является внешней обработкой.';uk='Даний звіт є зовнішньою обробкою.'") + Символы.ПС + НСтр("ru='Открытие нового отчета возможно только для объектов конфигурации.';uk=""Відкриття нового звіту можливо тільки для об'єктів конфігурації."""));
		Возврат;
			
	Иначе
			
		НовыйОтчет = Отчеты[ЭтотОбъект.Метаданные().Имя].Создать();
			
	КонецЕсли;
	
	ФормаНовогоОтчета = НовыйОтчет.ПолучитьФорму();
	ФормаНовогоОтчета.Открыть();

КонецПроцедуры // КоманднаяПанельНовыйОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик нажатия на кнопку "ВосстановитьЗначения"
//
Процедура ДействияФормыВосстановитьЗначения___(Кнопка)
	
	СохранениеНастроек.ВыбратьНастройкуФормы(СохраненнаяНастройка, ЭтаФорма, "ОтчетОбъект." + ЭтотОтчет.Метаданные().Имя, Ложь);
	ТиповыеОтчеты.ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ЭтотОтчет, ЭтаФорма);
	ТиповыеОтчеты.ОбновитьЗаголовокТиповогоОтчета(ЭтотОтчет, ЭтаФорма);

	ЗначениеНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ЗначениеКонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	НачалоПериода = ЗначениеНачалоПериода.Значение;
	КонецПериода  = ЗначениеКонецПериода.Значение;
	
	СтрокаНачалоПериода = РаботаСДиалогами.ДатаКакМесяцПредставление(НачалоПериода);
	СтрокаКонецПериода  = РаботаСДиалогами.ДатаКакМесяцПредставление(КонецПериода);
	
КонецПроцедуры //ДействияФормыВосстановитьЗначения___()

// Процедура - обработчик нажатия на кнопку "СохранитьЗначения"
//
Процедура ДействияФормыСохранитьЗначения(Кнопка)
	
	СохранениеНастроек.ВыбратьНастройкуФормы(СохраненнаяНастройка, ЭтаФорма, "ОтчетОбъект." + ЭтотОтчет.Метаданные().Имя, Истина);
	ТиповыеОтчеты.ОбновитьЗаголовокТиповогоОтчета(ЭтотОтчет, ЭтаФорма);
	
КонецПроцедуры //ДействияФормыСохранитьЗначения()

// Процедура - обработчик нажатия на кнопку "Настройки"
//
Процедура ДействияФормыНастройки(Кнопка)
	
	
	
	
	

	

	Если ТиповыеОтчеты.РедактироватьНастройкиТиповогоОтчета(ЭтотОтчет, ЭтаФорма) Тогда
		ОбновитьОтчет();
	КонецЕсли;

		
КонецПроцедуры //ДействияФормыНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик нажатия кнопки выбора даты начала периода
//
Процедура НачалоПериодаПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, НачалоПериода);
	
	Элемент.Значение           = РаботаСДиалогами.ДатаКакМесяцПредставление(НачалоПериода);
	
	ЗначениеПараметра          = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));;
	ЗначениеПараметра.Значение = НачалоМесяца(НачалоПериода);
	
КонецПроцедуры //НачалоПериодаПриИзменении()

// Процедура - обработчик нажатия кнопки выбора даты окончания периода
//
Процедура КонецПериодаПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, КонецПериода);
	
	Элемент.Значение           = РаботаСДиалогами.ДатаКакМесяцПредставление(КонецПериода);
	
	ЗначениеПараметра          = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	ЗначениеПараметра.Значение = КонецМесяца(КонецПериода);
	
КонецПроцедуры //КонецПериодаПриИзменении()

// Процедура - обработчик события регулирование поле ввода "НачалоПериода"
//
Процедура НачалоПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	НачалоПериода = ДобавитьМесяц(НачалоПериода, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(НачалоПериода);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода").Значение = НачалоМесяца(НачалоПериода);
	
КонецПроцедуры //НачалоПериодаРегулирование()

// Процедура - обработчик события авто подбора текста поле ввода "НачалоПериода"
//
Процедура НачалоПериодаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры //НачалоПериодаАвтоПодборТекста()

// Процедура - обработчик события начало выбора из списка кнопки "НачалоПериода"
//
Процедура НачалоПериодаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, НачалоПериода, ЭтаФорма);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода").Значение = НачалоМесяца(НачалоПериода);
	
КонецПроцедуры //НачалоПериодаНачалоВыбораИзСписка()

// Процедура - обработчик события очистка кнопки "НачалоПериода"
//
Процедура НачалоПериодаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры //НачалоПериодаОчистка()

// Процедура - обработчик события начало выбора из списка кнопки "КонецПериода"
//
Процедура КонецПериодаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, КонецПериода, ЭтаФорма);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода").Значение = КонецМесяца(КонецПериода);
	
КонецПроцедуры //КонецПериодаНачалоВыбораИзСписка()

// Процедура - обработчик события очистка кнопки "КонецПериода"
//
Процедура КонецПериодаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры //КонецПериодаОчистка()

// Процедура - обработчик события регулирование поля ввода "КонецПериода"
//
Процедура КонецПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	КонецПериода = ДобавитьМесяц(КонецПериода, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(КонецПериода);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода").Значение = КонецМесяца(КонецПериода);
	
КонецПроцедуры //КонецПериодаРегулирование()

// Процедура - обработчик события авто подбора текста поля ввода "КонецПериода"
//
Процедура КонецПериодаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры //КонецПериодаАвтоПодборТекста()

// Процедура - обработчик события обработка расшифровки табличного поля "Результат"
//
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Перем ВыполненноеДействие;

	// Запретим стандартную обработку расшифровки
	СтандартнаяОбработка = Ложь;

	// Создадим и инициализируем обработчик расшифровки
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	ДоступныеДействия = Новый Массив();
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить);
	
	// Осуществим выбор действия расшифровки пользователем
	Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия);
	
	Если Настройки <> Неопределено Тогда
		// Пользователь выбрал действие, для которого нужно менять настройки

		Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить Тогда
			
			ПеренестиВсеУпорядочиванияГруппировкиВНастройки(Настройки);
			
			// Если требется упорядочить - упорядочим в текущем отчете
			КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
			ОбновитьОтчет();

		Иначе
            // При других действиях - создадим новый отчет, откроем форму, сформируем отчет в ней
			Отчет = Отчеты[Метаданные().Имя].Создать();
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
			Форма = Отчет.ПолучитьФорму();
			Форма.ОбновитьОтчет();
			Форма.Открыть();

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //РезультатОбработкаРасшифровки()

// Процедура - обработчик события обновление отображения формы
//
Процедура ОбновлениеОтображения()
	
	ТиповыеОтчеты.ОбновитьЗаголовокТиповогоОтчета(ЭтотОтчет, ЭтаФорма);
	
КонецПроцедуры

Процедура ТабличноеПолеОтборПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТиповыеОтчеты.ОбработкаИзмененияТиповогоОтчетаНаФормеОтчета(ЭтотОтчет, ЭтаФорма);
	
КонецПроцедуры
