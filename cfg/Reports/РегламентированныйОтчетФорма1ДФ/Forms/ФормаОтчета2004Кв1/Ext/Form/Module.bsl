////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
//каждая закладка отчета - это объект ПолеТабличногоДокумента
Перем мФорма1ДФ, мСлужебныеДанные;

Перем мСоставПоказателей Экспорт;

Перем ФормаОбраб Экспорт;

// переменный для хранения бухгалтерских итогов
Перем мБухИтоги, мБухИтогиРС;

// хранят имена многострочных разделов
Перем мИдГруппы1;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов;
Перем мСтруктураИсхКолвоСтрокРазделов;
Перем спПараметрыСтраницы;

// хранит код отчета по КНД
Перем мКодОтчета;

Перем ЧастноеЛицо;
// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы;

Перем тбСхемыXML;

Перем R02G01I, КварталОтчета;

Перем ТестЗапросаПоШтатнымСовместителям,ЗапросПоШтатнымСовместителям;

Перем мПечатныеФормы Экспорт;
Перем ЕстьДуплекс;

Перем мПодразделение;
Перем мУсловиеПоПодразделению;

Перем мМенеджерЗвит1С Экспорт;
Перем СпП Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПолучитьНастройкиПроверкиЗаполенения(Макет = "СоставПоказателей") Экспорт

	СтруктураПроверкиЗаполенения = Новый Структура();
	
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(Макет);
	
	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ТаблицаПроверкаЗаполнения = Новый ТаблицаЗначений;
		ТаблицаПроверкаЗаполнения.Колонки.Добавить( "ИмяПоказателя", 	   ОписаниеТиповСтрока100 );
		ТаблицаПроверкаЗаполнения.Колонки.Добавить( "ПроверкаЗаполненияРеквизитов",  ОписаниеТиповЧисло15 );
		ТаблицаПроверкаЗаполнения.Колонки.Добавить( "ИмяТабличногоПоля",   ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			ИмяПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);

			Если ИмяПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(ИмяПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// вариант заполнения ячейки определяется по колонке 6 макета
			стрПроверкаЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			ПроверкаЗаполненияРеквизитов    = ? (ПустаяСтрока(стрПроверкаЗаполнения), 0, Число(стрПроверкаЗаполнения));
			ИмяТабличногоПоля	  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);

			Если ПроверкаЗаполненияРеквизитов <> 0  Тогда
				// формируем таблицу значений, содержащей состав показателей отчета
				НоваяСтрока = ТаблицаПроверкаЗаполнения.Добавить();
				НоваяСтрока.ИмяПоказателя   	 = ИмяПоказателя;
				НоваяСтрока.ПроверкаЗаполненияРеквизитов   = ПроверкаЗаполненияРеквизитов;
				НоваяСтрока.ИмяТабличногоПоля    = ?(ЗначениеЗаполнено(ИмяТабличногоПоля), ИмяТабличногоПоля, ИмяСтраницы);
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаПроверкаЗаполнения.Количество() > 0 Тогда
			СтруктураПроверкиЗаполенения.Вставить(ИмяСтраницы, ТаблицаПроверкаЗаполнения);
		Конецесли;

	КонецЦикла;
	
	Возврат СтруктураПроверкиЗаполенения;
	
КонецФункции

Процедура ПроверитьЗаполнениеИНН(ТаблицаНезаполненныхПоказателей, ДанныеОтчета, ОбработкаЭкспортXML)
	
	НомерСтроки = 0;
	
	СтруктураМногострочнойЧасти = ДанныеОтчета.ПолеТабличногоДокументаФорма1ДФ;
	
	Пока Истина Цикл
		
		НомерСтроки = НомерСтроки + 1;
		ИмяПоказателя = "R" + Формат(НомерСтроки , "ЧЦ=4; ЧВН=; ЧГ=0") + "G02";
		ЗначениеПоказателя = "";
		
		Если СтруктураМногострочнойЧасти.Свойство(ИмяПоказателя,ЗначениеПоказателя) Тогда
			Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				 НезаполненныйПоказатель = ТаблицаНезаполненныхПоказателей.Строки.Добавить();
				 НезаполненныйПоказатель.ИмяПоказателя 		= ИмяПоказателя;
				 НезаполненныйПоказатель.ИмяТабличногоПоля  = "ПолеТабличногоДокументаФорма1ДФ";
			КонецЕсли;
		Иначе
			// закончились строки
			Прервать
		КонецЕсли;
	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеОсобыхПоказателей(ТаблицаНезаполненныхПоказателей,ДанныеОтчета)

	Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ИмяПоказателя = "HFO"; 	
	Иначе
		ИмяПоказателя = "HBOS"; 	
	КонецЕсли;
	                   
	Если НЕ ЗначениеЗаполнено(ДанныеОтчета.ПолеТабличногоДокументаФорма1ДФ[ИмяПоказателя]) Тогда
		НезаполненныйПоказатель = ТаблицаНезаполненныхПоказателей.Строки.Добавить();
		НезаполненныйПоказатель.ИмяПоказателя 		= ИмяПоказателя;
		НезаполненныйПоказатель.ИмяТабличногоПоля  = "ПолеТабличногоДокументаФорма1ДФ";
	КонецЕсли;      		
	
КонецПроцедуры

Функция ПроверитьКорректностьЗаполненияОтчета(ДанныеОтчета, ОбработкаЭкспортXML)
	
	ТаблицаНезаполненныхПоказателей = Новый ДеревоЗначений;
	ТаблицаНезаполненныхПоказателей.Колонки.Добавить( "ИмяПоказателя", 		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаНезаполненныхПоказателей.Колонки.Добавить( "ИмяТабличногоПоля",  Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	
	ПроверитьЗаполнениеОсобыхПоказателей(ТаблицаНезаполненныхПоказателей,ДанныеОтчета);
	
	ПроверитьЗаполнениеИНН(ТаблицаНезаполненныхПоказателей, ДанныеОтчета, ОбработкаЭкспортXML);
	
	СтруктураПроверки = ПолучитьНастройкиПроверкиЗаполенения();
	Для каждого СтраницаОтчета Из СтруктураПроверки Цикл
		
		ГруппыОбязательныхПолей = Новый Соответствие;
		
		// Проверим заполенение полей не в группах
		Для каждого Поле  Из СтраницаОтчета.Значение Цикл
			
			// поле - строка таблицы значений
			Если Поле.ПроверкаЗаполненияРеквизитов <> 0 Тогда
				
				Если Поле.ПроверкаЗаполненияРеквизитов > 1 Тогда
					// это группа обязательных полей, добавим в соответствие, проверим позже
					ГруппаОбязательныхПолей = ГруппыОбязательныхПолей[Поле.ПроверкаЗаполненияРеквизитов];
					Если ГруппаОбязательныхПолей = Неопределено Тогда
						ГруппаОбязательныхПолей = Новый Массив();
					КонецЕсли;
					ГруппаОбязательныхПолей.Добавить(Поле);
					ГруппыОбязательныхПолей[Поле.ПроверкаЗаполненияРеквизитов] = ГруппаОбязательныхПолей;
					Продолжить;	
				КонецЕсли;
				
				// табличное поле может быть "СлужебныеДанные" или другим
				ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + Поле.ИмяТабличногоПоля;
				
				ЗначениеПоказателя = ДанныеОтчета[ИмяТекТабличногоПоля][Поле.ИмяПоказателя];												
				Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				     // показатель не заполнен
					 НезаполненныйПоказатель = ТаблицаНезаполненныхПоказателей.Строки.Добавить();
				     НезаполненныйПоказатель.ИмяПоказателя 		= Поле.ИмяПоказателя;
					 НезаполненныйПоказатель.ИмяТабличногоПоля  = ИмяТекТабличногоПоля;
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла;
		
		// Проверим заполенение полей в группах
		Для каждого ГруппаОбязательныхПолей Из ГруппыОбязательныхПолей Цикл
			
			ЕстьЗаполненный = Ложь;
			Для каждого Поле Из ГруппаОбязательныхПолей.Значение Цикл
				
				// табличное поле может быть "СлужебныеДанные" или другим
				ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + Поле.ИмяТабличногоПоля;
				
				ЗначениеПоказателя = ДанныеОтчета[ИмяТекТабличногоПоля][Поле.ИмяПоказателя];												
				Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
					ЕстьЗаполненный	= Истина;
					Прервать;
				КонецЕсли;
			
			КонецЦикла;
			
			
			Если Не ЕстьЗаполненный Тогда
				
				НезаполненныйПоказательГруппа = ТаблицаНезаполненныхПоказателей.Строки.Добавить();
				НезаполненныйПоказательГруппа.ИмяПоказателя = НСтр("ru = 'Ни один из показателей:'; uk = 'Жоден з показників:'");
		
				Для каждого Поле Из ГруппаОбязательныхПолей.Значение Цикл
				
					// табличное поле может быть "СлужебныеДанные" или другим
				    ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + Поле.ИмяТабличногоПоля;
					НезаполненныйПоказатель = НезаполненныйПоказательГруппа.Строки.Добавить();
					НезаполненныйПоказатель.ИмяПоказателя 		= Поле.ИмяПоказателя;
					НезаполненныйПоказатель.ИмяТабличногоПоля   = ИмяТекТабличногоПоля;
				
			    КонецЦикла;
				 
			 КонецЕсли;	
			
		КонецЦикла; 
		
	КонецЦикла;
	
	ФормаОшибок = ОбработкаЭкспортXML.ПолучитьФорму("ФормаОтображенияНезаполенныхПоказателей", ЭтаФорма);

	Если ТаблицаНезаполненныхПоказателей.Строки.Количество()> 0 Тогда
		
		ФормаОшибок.ДеревоСтрок = ТаблицаНезаполненныхПоказателей;
		Для каждого Строка Из ФормаОшибок.ДеревоСтрок.Строки Цикл
			ФормаОшибок.ЭлементыФормы.ДеревоСтрок.Развернуть(Строка,Истина);	
		КонецЦикла;
		
		ФормаОшибок.Открыть();
		
		ТекстВопроса = НСтр("ru = 'Существуют незаполненные показатели, которые являются обязательными для выгрузки отчета в формате XML! Выгрузить отчет?'; uk = ""Існують незаповнені показники, що є обов'язковими для вивантаження звіту в форматі XML! Выгрузить отчет?""");
		
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, Нстр("ru = 'Ошибка!'; uk = 'Помилка!'")) <> КодВозвратаДиалога.Да Тогда
			// ошибка
			Возврат Истина;	
		КонецЕсли;
	Иначе
		
		Если ФормаОшибок.Открыта() Тогда
		
			ФормаОшибок.Закрыть();	
		
		КонецЕсли;

	КонецЕсли;

	// нет ошибки
	Возврат Ложь;
	
КонецФункции // ()

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Перем ИмяПоказателя;
	Перем ИмяТабличногоПоля;
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		
		// если это оповещение из формы списка незаполенных показателей
		Если  ЗначениеВыбора.Свойство("ИмяПоказателя", 		ИмяПоказателя)
			И ЗначениеВыбора.Свойство("ИмяТабличногоПоля", 	ИмяТабличногоПоля) Тогда
		
			Попытка
				
				// переключаемся на текущий отчет
				Активизировать();
		
				ТекущийЭлемент = ЭлементыФормы[ИмяТабличногоПоля];
				
				// выделяем ячейку так, чтобы она оказалось видимой при любом положении полосы прокрутки.
				ТекущийЭлемент.ВыделенныеОбласти.Очистить();
				ТекущийЭлемент.ВыделенныеОбласти.Вставить(ТекущийЭлемент.Области.Найти(ИмяПоказателя),0);
				ТекущийЭлемент.ВыделенныеОбласти.Удалить(ТекущийЭлемент.Область("R1C1"));
				
			Исключение
			КонецПопытки;	
			
		КонецЕсли;	
	
	КонецЕсли;	
	
КонецПроцедуры


//ПреобразоватьТелефонВДопустимыйФормат
Функция  ПреобразоватьТелефонВДопустимыйФормат(ЗНАЧ ТелефонВПроизвольномФормате)
	перем Телефон;
	Телефон = "";
	
	Пока 1=1 Цикл
	
		ТекСимв = Лев(ТелефонВПроизвольномФормате, 1);
		Если ТекСимв = "" Тогда
			Прервать;
		КонецЕсли;
		ТелефонВПроизвольномФормате = Сред(ТелефонВПроизвольномФормате, 2);
		
		Если Найти("1234567890", ТекСимв) > 0 Тогда
			Телефон = Телефон + ТекСимв;
		КонецЕсли;
	
	КонецЦикла; 
	 
	 Если Телефон = "" Тогда
		 Телефон = 0;
	 КонецЕсли; 
	 
	Возврат (Телефон)
КонецФункции	
  
  
//Служит для заполнения некоторых (недоступных) служебных пераметров
Функция ОбновитьСлужебныеДанные()  
	мСлужебныеДанные.Области.TIN.Значение = мФорма1ДФ.Области.HTIN.Значение;
	мСлужебныеДанные.Области.PERIOD_MONTH.Значение = Месяц(КонецКвартала(мДатаКонцаПериодаОтчета));
	мСлужебныеДанные.Области.HZP.Значение = Месяц(КонецКвартала(мДатаКонцаПериодаОтчета))/3;
	мСлужебныеДанные.Области.HZY.Значение = Формат (Год(мДатаКонцаПериодаОтчета),"ЧЦ=4; ЧДЦ=0; ЧГ=;");
	мСлужебныеДанные.Области.PERIOD_YEAR.Значение = Формат(мСлужебныеДанные.Области.HZY.Значение, "ЧЦ=4; ЧДЦ=0; ЧГ=;");
	мСлужебныеДанные.Области.PERIOD_TYPE.Значение = 2;
КонецФункции

//============================
// Функция определяет номер страницы, на какую попадет строка табличной части с номером ТекСтр при печати.
// Если ТекСтр = 0 будет определено общее количество страниц.
// Параметры:
//     спПарам - список параметров страницы. Должен содержать следующие значения:
//			  КвоСтрокНаСтранице - количество строк на странице
//			  ВысотаОснШапки - размер основной шапки отчета, включающей высоту шапки ТЧ на первой странице
//			  ВысотаДопШапки - размер шапки таблицы, печатающейся на второй и последующих страницах.
//			  ВысотаПодвала - размер подвала отчета. Примечание. На последней странице отчета будет по крайней мере одна строка ТЧ
//			  КвоСтрокВТаблицеЕслиСтраницаОдна - количество строк в таблцие, если у отчета единственная страница.
//			  КвоСтрокТаблицы - количество строк в ТЧ.
//     
Функция НомерСтраницыПриПечати(спПарам, Знач ТекСтрока = 0)
	
	Перем СтруктураГруппы;
	
	ИмяГруппы = мИдГруппы1;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	КвоСтрокТаблицы = СтруктураГруппы.Количество();
	
	Если ТекСтрока = 0 Тогда
    	//так как последняя строка таблицы будет выводится вместе с подвалом, то количество страниц
		//совпадет со станицей, на которую попадет последняя строка
		ТекСтрока = КвоСтрокТаблицы;
    КонецЕсли;	
	
	КвоСтрокНаСтранице = спПарам.КвоСтрокНаСтранице;
	ВысотаОснШапки 	   = спПарам.ВысотаОснШапки;
	ВысотаДопШапки 	   = спПарам.ВысотаДопШапки;
	ВысотаПодвала 	   = спПарам.ВысотаПодвала;
	КвоСтрокВТаблицеЕслиСтраницаОдна = спПарам.КоличествоСтрокТаблицыНаЕдинстеннойСтранице;
	
	Если ТекСтрока <= КвоСтрокВТаблицеЕслиСтраницаОдна Тогда
		
		Возврат 1;
		
	ИначеЕсли ВысотаОснШапки + ВысотаДопШапки + ТекСтрока > КвоСтрокНаСтранице Тогда
		НомерСтраницы = 2 + Цел((ВысотаОснШапки + ВысотаДопШапки + ТекСтрока - КвоСтрокНаСтранице)/(КвоСтрокНаСтранице - ВысотаДопШапки)); 
	    ПустыеСтрокиНаСтранице = КвоСтрокНаСтранице - (ВысотаОснШапки + ВысотаДопШапки + ТекСтрока - КвоСтрокНаСтранице)%(КвоСтрокНаСтранице - ВысотаДопШапки);
	Иначе
		НомерСтраницы = 1;
		ПустыеСтрокиНаСтранице = КвоСтрокНаСтранице - ВысотаОснШапки - ВысотаДопШапки - ТекСтрока;	
	КонецЕсли;
	
	ОставшиесяСтрокиТаблицы = КвоСтрокТаблицы - ТекСтрока;
	
	Если (ПустыеСтрокиНаСтранице < ОставшиесяСтрокиТаблицы + ВысотаПодвала) 
		 И (ОставшиесяСтрокиТаблицы=0) Тогда
		//таблица с подвалом не поместится на этой странице
		//перенесем последнюю строку таблицы на следующую страницу
		Возврат НомерСтраницы+1
	Иначе 
		Возврат НомерСтраницы
	КонецЕсли
	
КонецФункции   

//Процедура для вывода целых чисел в массив "клеток" в "шапке" и "дне" отчета 
Процедура ЗначениеВКлетку(Знач Значение, Знач Нули, Размер,ИмяПараметра,ТекущаяОбластьМакета)
	Пустышка = ?(Нули = 1, "0", " ");
	ЗначСтр = "";
    ЗначСтр = Строка(Значение);
		ДлинаЗнач = СтрДлина(ЗначСтр);
		Пока ДлинаЗнач < Размер Цикл
			// дозаполним значение пустышками (слева!!!)
			ЗначСтр = Пустышка + ЗначСтр;
			ДлинаЗнач = ДлинаЗнач + 1;
		КонецЦикла;
	// заполним массив
	Для Инд = 1 По Размер Цикл
		ТекущаяОбластьМакета.Параметры[ИмяПараметра + Инд] = Сред(ЗначСтр,Инд,1) 
	КонецЦикла;
КонецПроцедуры

//процедура выделения копеек и вывола их в строку
Процедура КопейкиВСтроку(Знач НачЗначение, КонечСтрока) 
	НачЗначение = ? (НачЗначение < 0, - НачЗначение, НачЗначение);
	
	КоличествоКопеек = Окр((НачЗначение-Цел(НачЗначение))* 100,0);
	
	КонечСтрока = Формат(КоличествоКопеек, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=0");
	
КонецПроцедуры   

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураПоказателейВнутрСвязи = Новый Структура;

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если НЕ (ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента")) Тогда
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;
				
		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Процедура управляет показом в форме периода построения отчета,
Процедура ПоказатьПериод()
// Период в заголовке отчета
    ПериодОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета),КонецДня(мДатаКонцаПериодаОтчета),"Л = ""uk_UA""; ФП = Истина" );
	КварталОтчета= Месяц(КонецКвартала(мДатаНачалаПериодаОтчета))/3;
	мФорма1ДФ.Области.ПериодОтчета.Значение = ПериодОтчета;
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " за " + ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина" );
	ОбновитьСлужебныеДанные();
// Создает новую строку многострочного раздела.
КонецПроцедуры // ПоказатьПериод()

Процедура ВставитьДополнительнуюСтроку()
	Перем СтруктураГруппы;
	
	ИмяГруппы = мИдГруппы1;
	ТекТабличноеПоле = мФорма1ДФ;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = Сред(СтруктураГруппы.Колонки[0].Имя,1,1) + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[0].Имя,2,3);
	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );
    КолСтрокНов = КолСтрок + 1;
	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = Сред (ИмяКолонки,1,1) + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0")    + Сред (ИмяКолонки,2,СтрДлина(ИмяКолонки)-1);
		ИмяНовОбластиЯчейки = Сред (ИмяКолонки,1,1) + Формат(КолСтрокНов, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред (ИмяКолонки,2,СтрДлина(ИмяКолонки)-1);
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
		
		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
		
		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
		
		// очищаем значения ячеек вставленной области
		Если (ОбластьЯчейки.СодержитЗначение)  Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число(ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;
			ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
		КонецЕсли;
	КонецЦикла;
	Если (ИмяГруппы = мИдГруппы1) Тогда 
		ОбластьТекстовыйНомер = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх,2,ОбластьЯчейки.Верх,2 );
		ОбластьТекстовыйНомер.Текст = Строка(КолСтрок + 1);
	КонецЕсли;
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	
	ИмяТекущейОбласти = Сред (СтруктураГруппы.Колонки[0].Имя,1,1) + Формат(КолСтрокНов, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред (СтруктураГруппы.Колонки[0].Имя,2,3);
    ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	спПараметрыСтраницы.Вставить("КвоСтрокТаблицы",СтруктураГруппы.Количество());
	мФорма1ДФ.Области.R02G01I.Значение = СтруктураГруппы.Количество();
	мФорма1ДФ.Области.R02G03I.Значение = НомерСтраницыПриПечати(спПараметрыСтраницы);
	
	Модифицированность = Истина;
КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = мИдГруппы1;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = мФорма1ДФ;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить(НСтр("ru='Не выбрана удаляемая строка многострочного раздела.';uk='Не обрано строку багаторядкового розділу, що видаляється'"), СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	Попытка
		
		НомУдаляемойСтроки = Число(Сред(ИмяЯчейки,2,4));
		
		Ответ = Вопрос(НСтр("ru='Удалить выбранную строку?"
							"(Внимание! данная операция необратима)';uk='Видалити обраний рядок?"
							"(Увага! дана операція необоротна)'"), РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Да);

		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

	Исключение
		Ответ = Вопрос(НСтр("ru='Удалить последнюю строку?"
"(Внимание! данная операция необратима)';uk='Видалити останній рядок?"
"(Увага! дана операція необоротна)'"), РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Да);

		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		НомУдаляемойСтроки = СтруктураГруппы.Количество();
		
	КонецПопытки;

	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
    мФорма1ДФ.Области.R02G01I.Значение = СтруктураГруппы.Количество() - 1;
	
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = "R" + Формат(НомУдаляемойСтроки , "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[0].Имя,2);

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		// Определим область удаляемой строки
		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

		// непосредственно удаляем область строки табличного документа
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				ТекСтрока = СтруктураГруппы[НСтр-1];
				НСтрНов = НСтр - 1;
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки      = "R" + Формат(НСтр ,    "ЧЦ=4; ЧВН=; ЧГ=0") + Сред (Колонка.Имя,2);
					НовоеИмяСдвинутойЯчейки = "R" + Формат(НСтрНов , "ЧЦ=4; ЧВН=; ЧГ=0") + Сред (Колонка.Имя,2);
					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
					
					Если НЕ(ОбластьСдвинутойЯчейки.СодержитЗначение) Тогда
						// обновляем порядковый номер строки
						СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
						ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки    = "R" + Формат(НомерСтрокиВФормеТаблицы , "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(КолонкаТаблицы.Имя,2);
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если НЕ(ОбластьЯчейкиТаблицы.СодержитЗначение) Тогда
					ПервыйНомерВГруппе = 1;
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = "R" + Формат(НомТекущейСтроки , "ЧЦ=4; ЧВН=; ЧГ=0") + Сред (СтруктураГруппы.Колонки[0].Имя,2);
	
	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;
	
	спПараметрыСтраницы.Вставить("КвоСтрокТаблицы",СтруктураГруппы.Количество());
	мФорма1ДФ.Области.R02G01I.Значение = СтруктураГруппы.Количество();
	мФорма1ДФ.Области.R02G03I.Значение = НомерСтраницыПриПечати(спПараметрыСтраницы);

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()	

Функция ПолучитьТелефонОтветственногоЛица(ВидОтветственногоЛица)
	
	Телефон = "";
	
	Данные = Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",Организация, ВидОтветственногоЛица);
	ОтвЛица = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(мДатаКонцаПериодаОтчета, Данные);
	Результат = ОтвЛица.Найти(ВидОтветственногоЛица);
	
	Если Результат <> Неопределено Тогда
		
		ОтветственноеЛицо = Результат.ФизическоеЛицо;
		
		Если (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") 
		 ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП") 
		 ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "УТП") Тогда
			Попытка 
				ВидТелефона = Справочники.ВидыКонтактнойИнформации["ТелефонФизЛицаСлужебный"]; 
			Исключение
				ВидТелефона = Справочники.ВидыКонтактнойИнформации["ТелефонСлужебный"];
			КонецПопытки;
	 	Иначе
			ВидТелефона = Справочники.ВидыКонтактнойИнформации["ТелефонФизЛица"];
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект", ОтветственноеЛицо);
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
		Запрос.УстановитьПараметр("Вид"   , ВидТелефона);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И
		|	КонтактнаяИнформация.Тип = &Тип
		|	И
		|	КонтактнаяИнформация.Вид = &Вид
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Телефон =  "";
		Иначе
			Телефон =  РезультатЗапроса.Выгрузить()[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Телефон;
	
КонецФункции //

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
Процедура ЗаполнитьСведенияОбОрганизации()

	ОргНазв = Организация.НаименованиеПолное;
	
	HJ = "";
	HF = "";
	мФорма1ДФ.Области.HJ.Значение = HJ;
	мФорма1ДФ.Области.HF.Значение = HF;
	
	Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		HJ = "X";
		мФорма1ДФ.Области.HJ.Значение = HJ;
		мФорма1ДФ.Области.HF.Значение = "";
	ИначеЕсли Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		HF = "X";
		мФорма1ДФ.Области.HF.Значение = HF;
		мФорма1ДФ.Области.HJ.Значение = "";
	КонецЕсли;	
	
	мФорма1ДФ.Области.HZ.Значение = "X";	
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","ИННРук");
	СписокПоказателей.Добавить("","ИННБух");
	СписокПоказателей.Добавить("","НалоговаяИнспекция");

	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей);
	
	ФИОДиректора 		= СведенияОбОрганизации.ФИОРук;
	ФИОГлавБуха 		= СведенияОбОрганизации.ФИОБух;
	ИННРук       		= СведенияОбОрганизации.ИННРук;
	ИННБух       		= СведенияОбОрганизации.ИННБух;
	НалоговаяИнспекция 	= СведенияОбОрганизации.НалоговаяИнспекция;
	//справочник налоговых инспекций
	Если (НалоговаяИнспекция <> Неопределено) Тогда 
		мФорма1ДФ.Области.HTINSTI.Значение            = НалоговаяИнспекция.ЕДРПОУ;
		мФорма1ДФ.Области.HSTI.Значение               = НалоговаяИнспекция.Наименование;
		мСлужебныеДанные.Области.C_RAJ.Значение       = НалоговаяИнспекция.КодАдмРайона;
		мСлужебныеДанные.Области.C_REG.Значение       = НалоговаяИнспекция.Родитель.Код;
		мСлужебныеДанные.Области.C_STI.Значение       = НалоговаяИнспекция.Код;
	КонецЕсли;
	
	КодЕДРПОУ = СведенияОбОрганизации.КодПоЕДРПОУ;
	
	ТелБух = ПолучитьТелефонОтветственногоЛица(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	ТелРук = ПолучитьТелефонОтветственногоЛица(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	
	мФорма1ДФ.Области.HNAME.Значение = ОргНазв;
	мФорма1ДФ.Области.HTIN.Значение  = КодЕДРПОУ;
	
	мФорма1ДФ.Области.HBUH.Значение    = ФИОГлавБуха; 
	мФорма1ДФ.Области.HKBUH.Значение   = ИННБух; 
	мФорма1ДФ.Области.HTELBUH.Значение = ТелБух; 
	
	мФорма1ДФ.Области.HFILL.Значение = ДатаПодписи;
	
	Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ЧастноеЛицо = 0;
	Иначе	
		ЧастноеЛицо = 1;
	Конецесли;	
	
	Если  ЧастноеЛицо = 1 Тогда
  		мФорма1ДФ.Области.HBOS.Значение    = "";
        мФорма1ДФ.Области.HKBOS.Значение   = "";
		мФорма1ДФ.Области.HTELBOS.Значение = "";
		мФорма1ДФ.Области.HFO.Значение     = ФИОДиректора;
		мФорма1ДФ.Области.HTELFO.Значение  = ТелРук
	Иначе
		мФорма1ДФ.Области.HBOS.Значение    = ФИОДиректора;
        мФорма1ДФ.Области.HKBOS.Значение   = ИННРук;
		мФорма1ДФ.Области.HTELBOS.Значение = ТелРук;
		мФорма1ДФ.Области.HFO.Значение     = "";
		мФорма1ДФ.Области.HTELFO.Значение  = ""
	КонецЕсли;

	мСлужебныеДанные.Области.C_DOC_TYPE.Значение = 0; //номер исправленного доекумента. Для первого подающегося документа  = 0
	мСлужебныеДанные.Области.C_DOC_CNT.Значение = 1;  //номер документа в периоде. 
    
	мФорма1ДФ.Области.HPAGES.Значение = 1;

    ОбновитьСлужебныеДанные();
  
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Обновляет пользовательские настройки при изменении версии формы.
// унифицирована, однако использование пока ... вопрос
Процедура ОбновитьПользовательскиеНастройки(СписокСохранения)

	Перем ДанныеМногострочныхРазделов, ДанныеВариановАвтоЗаполнения, ПоказателиОтчета;
	
	Сообщить(НСтр("ru='Измененилась версия формы отчета."
"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
"Виконується відновлення користувальницьких настройок.'"), СтатусСообщения.Информация);

	//Обновление проводим последовательно
	ВерсияФормы = СписокСохранения.ВерсияФормы;
	Если ВерсияФормы = "30/09/2003" Тогда
		
		Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
			Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
				ИмяГруппы       = ЭлементСтруктуры.Ключ;
				СтруктураГруппы = ЭлементСтруктуры.Значение;
				
				Если ИмяГруппы = мИдГруппы1 Тогда
					Попытка
					СтруктураГруппы.Колонки.Добавить("RGFIO");
					Исключение КонецПопытки;
				КонецЕсли;
				
			КонецЦикла;
			СписокСохранения.ДанныеМногострочныхРазделов =  ДанныеМногострочныхРазделов;
		КонецЕсли;

		//Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		//	мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
		//	
		//	СписокСохранения.ДанныеВариановАвтоЗаполнения =  ДанныеМногострочныхРазделов;
		//КонецЕсли;

		СписокСохранения.Вставить("ВыплатыЗПНеРегулярны", Истина);
		СписокСохранения.Вставить("ДатаВыплатыНач", НачалоКвартала(мДатаКонцаПериодаОтчета) + 10*86400 - 1);
		СписокСохранения.Вставить("ДатаВыплатыКон", КонецКвартала(мДатаКонцаПериодаОтчета) + 10*86400);
		
		//Если СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета) Тогда
		//	
		//	СписокСохранения.ПоказателиОтчета =  ПоказателиОтчета;
		//КонецЕсли;
		
		СписокСохранения.ВерсияФормы = "01/06/2008";
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ВерсияФормы = СписокСохранения.ВерсияФормы;
	Если ВерсияФормы = "01/06/2008" Тогда
		
		Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
			Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
				ИмяГруппы       = ЭлементСтруктуры.Ключ;
				СтруктураГруппы = ЭлементСтруктуры.Значение;
				
				Если ИмяГруппы = мИдГруппы1 Тогда
					Для каждого Строка Из СтруктураГруппы Цикл
						Если Строка.RG09 = "0" Тогда
							Строка.RG09	= "";
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
			СписокСохранения.ДанныеМногострочныхРазделов =  ДанныеМногострочныхРазделов;
		КонецЕсли;
		
		Если СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета) Тогда
			Для Каждого ЭлементСтруктуры Из ПоказателиОтчета Цикл
				ИмяГруппы       = ЭлементСтруктуры.Ключ;
				СписокПоказателей = ЭлементСтруктуры.Значение;
				
				Если ИмяГруппы = "ПолеТабличногоДокументаФорма1ДФ" Тогда
					Для каждого Показатель Из СписокПоказателей Цикл
						Если Прав(СокрП(Показатель.Ключ),3) = "G09" Тогда
							Если Показатель.Значение = 0 Тогда
								СписокПоказателей.Вставить(Показатель.Ключ, "");
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			СписокСохранения.ПоказателиОтчета =  ПоказателиОтчета;
		КонецЕсли;
	
		СписокСохранения.ВерсияФормы = "01/12/2009";
	КонецЕсли;
	
	//ВерсияФормы = СписокСохранения.ВерсияФормы;
	//Если ВерсияФормы = "01/12/2009" Тогда
	//
	//	СписокСохранения.ВерсияФормы = "../../...."
	//КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	ТекТабличноеПоле = мФорма1ДФ;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл
			НомИсходнойСтроки = НомНовойСтроки - 1;
			
			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = "R" + Формат(НомИсходнойСтроки , "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[0].Имя,2);
			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );
			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = "R" + Формат(НомИсходнойСтроки , "ЧЦ=4; ЧВН=; ЧГ=0")  + Сред (ИмяКолонки,2);
				ИмяНовОбластиЯчейки = "R" + Формат(НомНовойСтроки , "ЧЦ=4; ЧВН=; ЧГ=0")     + Сред (ИмяКолонки,2);
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядековый номер последней строки перед вставкой
					ИсходныйНомер        = Число(ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;
					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
//  выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяКолонки = КолонкаТаблицы.Имя;
			ИмяЯчейки    = "R" + Формат(НомерСтрокиВФормеТаблицы , "ЧЦ=4; ЧВН=; ЧГ=0") + Сред (ИмяКолонки,2);
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];
			
			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить()
    Перем ИсходноеКоличествоСтрокГруппы;
	
	СпП.Очистить();
	
	// Очищаем содержимое ячеек поля табличного документа
	ТекТабличноеПоле = мФорма1ДФ;
	ОчиститьТабличноеПоле(ТекТабличноеПоле);

	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;
	
	//Удалим лишние строки многострочной области
	// Далее выясним, есть ли добавленные в многострочный раздел дополнительные строки.
	// При наличии таких строк удаляем их.
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

		ИмяГруппы        = ЭлементСтруктуры.Ключ;
		СтруктураГруппы  = ЭлементСтруктуры.Значение;
		ТекТабличноеПоле = мФорма1ДФ;

		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = СтруктураГруппы.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их

			НСтр = СтруктураГруппы.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
				
				ИмяПервойКолонки = СтруктураГруппы.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + НСтр;
				
				Если (ТекТабличноеПоле = мФорма1ДФ) Тогда
					ИмяПервойЯчейкиУдаляемойСтроки = Сред(СтруктураГруппы.Колонки[0].Имя,1,1) + Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;") + Сред(СтруктураГруппы.Колонки[0].Имя,2);
				КонецЕсли;


				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				// Определим область удаляемой строки
				УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

				// непосредственно удаляем область строки табличного документа
				ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

				// удаляем из структуры многострочного раздела соответствующую строку
				СтруктураГруппы.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	// Выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	мСлужебныеДанные.Области.C_DOC_STAN.Значение = 1;			
	
	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

КонецПроцедуры // Очистить()
	
Процедура РазбитьПечатнуюФорму(ПечФорма, ИмяФормы = "")
	
	Если ИмяФормы = "" Тогда
	
		ИмяФормы = "Форма1ДФ";	
	
	КонецЕсли;
	
	УчитыватьАвтомасштаб = Истина;

	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	Если ЕстьДуплекс Тогда
		НовТаблДок = Новый ТабличныйДокумент();
	КонецЕсли;
	ПослВерх = 1;
	
	Сч = 0;
	Пока Сч < ПечФорма.ВысотаТаблицы Цикл
		 Сч = Сч + 1;
		 
		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			
			// проверим, не должна ли предпоследняя строка печататься вместе со текущей ("не влезшей") строкой.
			// если так, то "откатимся" вверх
			Пока ПослВерх < Сч-1 И ПечФорма.ПолучитьОбласть(Сч-1, , Сч-1, ).Область().ВместеСоСледующим Цикл
			  Сч = Сч - 1;
			КонецЦикла; 
			
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		Если НЕ ЕстьДуплекс Тогда
			НовТаблДок = Новый ТабличныйДокумент();
		КонецЕсли;
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		Если НЕ ЕстьДуплекс Тогда
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
		КонецЕсли;
	КонецЕсли;
	Если ЕстьДуплекс Тогда
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати)
Перем СтруктураГруппы;
	мПечатныеФормы.Очистить();

    ОбновитьСтруктуруМногострочныхРазделов();

	ТабДокумент  = Новый ТабличныйДокумент;
	Макет        = ПолучитьМакет("ПечатнаяФорма");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьМакета.Параметры["ТипФ1"] = мФорма1ДФ.Области.HZ.Значение;
	ОбластьМакета.Параметры["ТипФ2"] = мФорма1ДФ.Области.HZN.Значение;
	ОбластьМакета.Параметры["ТипФ3"] = мФорма1ДФ.Области.HZU.Значение;

  	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ПД" + Инд] = Сред(мФорма1ДФ.Области.HTIN.Значение, Инд, 1);
		ОбластьМакета.Параметры["Пнд" + Инд] = Сред(мФорма1ДФ.Области.HTINSTI.Значение, Инд, 1);
	КонецЦикла; 
	
	ОбластьМакета.Параметры.ОргНаименование  = мФорма1ДФ.Области.HNAME.Значение;
	ОбластьМакета.Параметры.ЮрЛ  = мФорма1ДФ.Области.HJ.Значение;
	ОбластьМакета.Параметры.ФизЛ  = мФорма1ДФ.Области.HF.Значение;
	ОбластьМакета.Параметры.ПериодОтчета  = мФорма1ДФ.Области.ПериодОтчета.Значение;
	ОбластьМакета.Параметры.ОтделНИ       = мФорма1ДФ.Области.HSTI.Значение;
	
	Если мФорма1ДФ.Области.R00G01I.Значение <> 0 Тогда
		ЗначениеВКлетку(мФорма1ДФ.Области.R00G01I.Значение,0, 7 ,"Шт",ОбластьМакета);
	Иначе
		ОбластьМакета.Параметры.Шт7= "-";
	КонецЕсли;
	
	Если мФорма1ДФ.Области.R00G02I.Значение <> 0 Тогда
		ЗначениеВКлетку(мФорма1ДФ.Области.R00G02I.Значение,0, 7 ,"свм",ОбластьМакета);
	Иначе
		ОбластьМакета.Параметры.свм7= "-";
	КонецЕсли;

// наконец вывод на печать именованной области макета
  ТабДокумент.Вывести(ОбластьМакета);
  
  ОбластьМакета = Макет.ПолучитьОбласть("ИменаСтолбцов");
  ТабДокумент.Вывести(ОбластьМакета);

  мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы);
  спПараметрыСтраницы.Вставить("КвоСтрокТаблицы",СтруктураГруппы.Количество());
  ТекСтраница = 1;
  
  Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
	  
	  Если ТекСтраница < НомерСтраницыПриПечати(спПараметрыСтраницы, НСтр)  Тогда
		  ТекСтраница = ТекСтраница + 1;
		  
		  ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц(); 
		  ОбластьМакета = Макет.ПолучитьОбласть("НомерСтраницы");
		  ЗначениеВКлетку(ТекСтраница, 0, 4,"НСтран",ОбластьМакета);
		  
		  ТабДокумент.Вывести(ОбластьМакета);
		  ОбластьМакета = Макет.ПолучитьОбласть("ИменаСтолбцов");
		  ТабДокумент.Вывести(ОбластьМакета);
		  
	  КонецЕсли;
	  
	  ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	  ЗначениеВКлетку(НСтр, 1, 5,"НомПП",ОбластьМакета);
	  ИмяНужнойЯчейки = "R" + Формат(НСтр , "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[1].Имя,2);
	  // область первой ячейки последней строки многострочного раздела
	  ИНН = Формат(мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение, "ЧГ=");
	  Для Инд = 1 По 10 Цикл
		  ОбластьМакета.Параметры["ИНН" + Инд] = Сред(ИНН, Инд, 1);
	  КонецЦикла; 
	  ИмяНужнойЯчейки = "R" + Формат(НСтр , "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[2].Имя,2);
	  Если (мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение <> 0) Тогда
		  ОбластьМакета.Параметры.СумНачислДохГрн = Цел(мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение);
		  КопейкиВСтроку(мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение, ОбластьМакета.Параметры.СумНачислДохКоп);
	  Иначе
		  ОбластьМакета.Параметры.СумНачислДохГрн = "" + "-"; 
		  ОбластьМакета.Параметры.СумНачислДохКоп= "" + "-"; 
	  КонецЕсли;
	  
	  ИмяНужнойЯчейки = "R" + Формат(НСтр , "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[3].Имя,2);
	  Если (мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение <> 0) Тогда
		  ОбластьМакета.Параметры.СумВыплачДохГрн = Цел(мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение);
		  КопейкиВСтроку(мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение, ОбластьМакета.Параметры.СумВыплачДохКоп);
	  Иначе
		  ОбластьМакета.Параметры.СумВыплачДохГрн = "" + "-"; 
		  ОбластьМакета.Параметры.СумВыплачДохКоп= "" + "-"; 
	  КонецЕсли;
	  
	  ИмяНужнойЯчейки = "R" + Формат(НСтр , "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[4].Имя,2);
	  Если мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение <> 0 Тогда
		  ОбластьМакета.Параметры.СумНачислНДФЛГрн = Цел(мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение);
		  КопейкиВСтроку(мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение, ОбластьМакета.Параметры.СумНачислНДФЛКоп);
	  Иначе
		  ОбластьМакета.Параметры.СумНачислНДФЛГрн = "" + "-"; 
		  ОбластьМакета.Параметры.СумНачислНДФЛКоп= "" + "-"; 
	  КонецЕсли;
	  
	  ИмяНужнойЯчейки = "R" + Формат(НСтр , "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[5].Имя,2);
	  Если (мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение <> 0) Тогда
		  ОбластьМакета.Параметры.СумПеречислНДФЛГрн = Цел(мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение);
		  КопейкиВСтроку(мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение, ОбластьМакета.Параметры.СумПеречислНДФЛКоп);
	  Иначе
		  ОбластьМакета.Параметры.СумПеречислНДФЛГрн = "" + "-"; 
		  ОбластьМакета.Параметры.СумПеречислНДФЛКоп= "" + "-"; 
	  КонецЕсли;
	  
	  ИмяНужнойЯчейки = "R" + Формат(НСтр , "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[6].Имя,2);
	  ОбластьМакета.Параметры.Пр = мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение;
	  
	  ИмяНужнойЯчейки = "R" + Формат(НСтр , "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[9].Имя,2);
	  
	  Если СтрДлина(мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение)<> 0 Тогда
		  ОбластьМакета.Параметры.КодЛьг  = мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение;
	  Иначе
		  ОбластьМакета.Параметры.КодЛьг  = "-";
	  КонецЕсли;
	  
	  ИмяНужнойЯчейки = "R" + Формат(НСтр , "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[10].Имя,2);
	  ОбластьМакета.Параметры.Озн  = мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение;
	  
	  ИмяНужнойЯчейки = "R" + Формат(НСтр , "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[7].Имя,2);
	  Если мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение <> '00010101' Тогда
		  ОбластьМакета.Параметры.ДД = Сред(мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение,1,2);	
		  ОбластьМакета.Параметры.ММ = Сред(мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение,4,2);
		  ОбластьМакета.Параметры.ГГ = Сред(мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение,7,4);
	  Иначе	
		  ОбластьМакета.Параметры.ДД = "-";	
		  ОбластьМакета.Параметры.ММ = "-";
		  ОбластьМакета.Параметры.ГГ = "-";
	  КонецЕсли;
	  
	  ИмяНужнойЯчейки = "R" + Формат(НСтр , "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[8].Имя,2);
	  Если мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение <> '00010101' Тогда
		  ОбластьМакета.Параметры.ДДД = Сред(мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение,1,2);	
		  ОбластьМакета.Параметры.МММ = Сред(мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение,4,2);
		  ОбластьМакета.Параметры.ГГГ = Сред(мФорма1ДФ.Области[ИмяНужнойЯчейки].Значение,7,4);
	  Иначе	
		  ОбластьМакета.Параметры.ДДД = "-";	
		  ОбластьМакета.Параметры.МММ = "-";
		  ОбластьМакета.Параметры.ГГГ = "-";
	  КонецЕсли;
	  
	  ТабДокумент.Вывести(ОбластьМакета);
  КонецЦикла;			

  Если ТекСтраница < НомерСтраницыПриПечати(спПараметрыСтраницы) Тогда
	  ТекСтраница = ТекСтраница + 1;
	  ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц(); 
  КонецЕсли;	  
  
  ОбластьМакета = Макет.ПолучитьОбласть("НомерСтраницы");
  ЗначениеВКлетку(ТекСтраница, 0, 4,"НСтран",ОбластьМакета);
  
  ОбластьМакета = Макет.ПолучитьОбласть("Дно");
  ИтСуммаНачислДохода = мФорма1ДФ.Области["R01G03A"].Значение;
  Если ИтСуммаНачислДохода <> 0 Тогда
	  ОбластьМакета.Параметры.ИтСуммаНачислДоходаГрн = Цел(ИтСуммаНачислДохода);  
	  КопейкиВСтроку(ИтСуммаНачислДохода, ОбластьМакета.Параметры.ИтСуммаНачислДоходаКоп);
  Иначе
	  ОбластьМакета.Параметры.ИтСуммаНачислДоходаГрн ="-";  
	  ОбластьМакета.Параметры.ИтСуммаНачислДоходаКоп ="-";
  КонецЕсли;	  
  
  ИтСуммаВыплачДохода = мФорма1ДФ.Области["R01G03"].Значение;
  Если ИтСуммаВыплачДохода <> 0 Тогда
	  ОбластьМакета.Параметры.ИтСуммаВыплачДоходаГрн = Цел(ИтСуммаВыплачДохода);  
	  КопейкиВСтроку(ИтСуммаВыплачДохода, ОбластьМакета.Параметры.ИтСуммаВыплачДоходаКоп);
  Иначе
	  ОбластьМакета.Параметры.ИтСуммаВыплачДоходаГрн ="-";  
	  ОбластьМакета.Параметры.ИтСуммаВыплачДоходаКоп ="-";
  КонецЕсли;	  
  
  ИтСуммаНачислНДФЛ = мФорма1ДФ.Области["R01G04A"].Значение;
  Если ИтСуммаНачислНДФЛ <> 0 Тогда
	  ОбластьМакета.Параметры.ИтСуммаНачислНДФЛГрн = Цел(ИтСуммаНачислНДФЛ);  
	  КопейкиВСтроку(ИтСуммаНачислНДФЛ, ОбластьМакета.Параметры.ИтСуммаНачислНДФЛКоп);
  Иначе
	  ОбластьМакета.Параметры.ИтСуммаНачислНДФЛГрн ="-";  
	  ОбластьМакета.Параметры.ИтСуммаНачислНДФЛКоп ="-";
  КонецЕсли;	  
  
  ИтСуммаПеречислНДФЛ = мФорма1ДФ.Области["R01G04"].Значение;
  Если ИтСуммаПеречислНДФЛ <> 0 Тогда
	  ОбластьМакета.Параметры.ИтСуммаПеречислНДФЛГрн = Цел(ИтСуммаПеречислНДФЛ);  
	  КопейкиВСтроку(ИтСуммаПеречислНДФЛ, ОбластьМакета.Параметры.ИтСуммаПеречислНДФЛКоп);
  Иначе
	  ОбластьМакета.Параметры.ИтСуммаПеречислНДФЛГрн ="-";  
	  ОбластьМакета.Параметры.ИтСуммаПеречислНДФЛКоп ="-";
  КонецЕсли;	  
  
  ЗначениеВКлетку(мФорма1ДФ.Области.R02G01I.Значение, 0, 6,"Строк",ОбластьМакета);
  ЗначениеВКлетку(мФорма1ДФ.Области.R02G02I.Значение, 0, 6,"ФЛ",ОбластьМакета);
  
  КоличествоСтраниц = НомерСтраницыПриПечати(спПараметрыСтраницы,0);
  ЗначениеВКлетку(КоличествоСтраниц,0,5,"Стр",ОбластьМакета);
  мФорма1ДФ.Области.R02G03I.Значение = КоличествоСтраниц;
  
  ЗначениеВКлетку(мФорма1ДФ.Области.HKBOS.Значение, 0, 10,"ИННРук",ОбластьМакета);
  ЗначениеВКлетку(мФорма1ДФ.Области.HKBUH.Значение, 0, 10,"ИННБух",ОбластьМакета);
  
  ОбластьМакета.Параметры.ФИОДиректор  = мФорма1ДФ.Области.HBOS.Значение;
  ОбластьМакета.Параметры.ФИОБухгалтер = мФорма1ДФ.Области.HBUH.Значение;
  ОбластьМакета.Параметры.ФИОЧЛ        = мФорма1ДФ.Области.HFO.Значение;
  ОбластьМакета.Параметры.ТелД         = мФорма1ДФ.Области.HTELBOS.Значение;
  ОбластьМакета.Параметры.ТелБ         = мФорма1ДФ.Области.HTELBUH.Значение;
  
  ОбластьМакета.Параметры.ДП = Сред(мФорма1ДФ.Области.HFILL.Значение,1,2);
  ОбластьМакета.Параметры.МП = Сред(мФорма1ДФ.Области.HFILL.Значение,4,2);
  ОбластьМакета.Параметры.ГП = Сред(мФорма1ДФ.Области.HFILL.Значение,7,4);
    
  ТабДокумент.Вывести(ОбластьМакета);
  
  РазбитьПечатнуюФорму(ТабДокумент);
	
  РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
// похоже унифицирована и актуальна только при наличии таких разделов
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;
		ТекТабличноеПоле = мФорма1ДФ;
		//ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
		Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		    НСтрНов = НСтр + 1;
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				ИмяКолонки    = Колонка.Имя;
				ИмяЯчейки    		= "R" + Формат(НСтр , 	 "ЧЦ=4; ЧВН=; ЧГ=0") + Сред (ИмяКолонки,2);
				ИмяНовОбластиЯчейки = "R" + Формат(НСтрНов , "ЧЦ=4; ЧВН=; ЧГ=0") + Сред (ИмяКолонки,2);
	    		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
     			Если ОбластьЯчейки.СодержитЗначение Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
    			ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	спПараметрыСтраницы.Вставить("КвоСтрокТаблицы",СтруктураГруппы.Количество());

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

Процедура СохранитьВФорматеDBF()
	перем СтруктураГруппы;
	перем СтруктураМногострочныхРазделов;
	
	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаФорма1ДФ";
	ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
	
	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);
	
	ИмяФайлаДБФ = "DA";
	Если СтрДлина(мСлужебныеДанные.Области.C_STI.Значение) = 4 Тогда
		ИмяФайлаДБФ = ИмяФайлаДБФ + мСлужебныеДанные.Области.C_STI.Значение;
	Иначе
		ИмяФайлаДБФ = ИмяФайлаДБФ + "rrcc";
	КонецЕсли;
	ИмяФайлаДБФ = ИмяФайлаДБФ + "01."+Строка(КварталОтчета);
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок = НСтр("ru='Укажите имя DBF-файла в формате DArrccnn.k';uk=""Укажіть ім'я DBF-Файлу в форматі DArrccnn.k""");
	Диалог.ПолноеИмяФайла = ИмяФайлаДБФ;
    //Диалог.Фильтр = "(*.dbf)|*.dbf" ;
	
	Если Диалог.Выбрать() Тогда
		ФайлДанныхРез = Диалог.ПолноеИмяФайла;
		Каталог = Диалог.Каталог;
		ФайлДанных = Каталог + "1df";
	Иначе
		Возврат;
	КонецЕсли;
	
	xB = Новый xBase();
	xB.Кодировка = КодировкаXBase.OEM;
	xB.Поля.Добавить("NP","N",5,0);  
	xB.Поля.Добавить("PERIOD","N",1,0);
	xB.Поля.Добавить("RIK","N",4,0);
	xB.Поля.Добавить("KOD","S",10,0);
	xB.Поля.Добавить("TYP","N",1,0);
	xB.Поля.Добавить("TIN","S",10,0);
	xB.Поля.Добавить("S_NAR","N",12,2);
	xB.Поля.Добавить("S_DOX","N",12,2);
	xB.Поля.Добавить("S_TAXN","N",12,2);
	xB.Поля.Добавить("S_TAXP","N",12,2);
	xB.Поля.Добавить("OZN_DOX","N",2,0);
	xB.Поля.Добавить("D_PRIYN","D",8,0);
	xB.Поля.Добавить("D_ZVILN","D",8,0);
	xB.Поля.Добавить("OZN_PILG","N",2,0);
	xB.Поля.Добавить("OZNAKA","N",1,0); 
	
	xB.СоздатьФайл(ФайлДанных); 
	
	Если Не xB.Открыта() Тогда  
		Предупреждение(НСтр("ru='Не удалось создать и открыть указанный файл!';uk='Не вдалося створити й відкрити зазначений файл!'"));  
	КонецЕсли;  
	
	СписокСохранения.Свойство("ДанныеМногострочныхРазделов",СтруктураМногострочныхРазделов);
	СтруктураМногострочныхРазделов.Свойство("R",СтруктураГруппы);
	
	СтрокКол = СтруктураГруппы.Количество();
		
	Для ТекСтрока = 1 По СтрокКол Цикл
		//заполним параметры строки
		xB.Добавить();
		xB.УстановитьЗначениеПоля("NP",Число(ТекСтрока));
		xB.УстановитьЗначениеПоля("PERIOD",Число(КварталОтчета));
		xB.УстановитьЗначениеПоля("RIK",Число(мСлужебныеДанные.Области.HZY.Значение)); 
		xB.УстановитьЗначениеПоля("KOD",Строка(мФорма1ДФ.Области.HTIN.Значение));  
		
		Если НЕ ЗначениеЗаполнено(мФорма1ДФ.Области.HJ.Значение) = ЛОЖЬ Тогда
			xB.УстановитьЗначениеПоля("TYP",Число(0));
		Иначе 
			xB.УстановитьЗначениеПоля("TYP",Число(1));
		КонецЕсли;
		
		xB.УстановитьЗначениеПоля("TIN",     СтруктураГруппы[ТекСтрока - 1]["RG02"]); 
		xB.УстановитьЗначениеПоля("S_NAR",   СтруктураГруппы[ТекСтрока - 1]["RG03A"]);
		xB.УстановитьЗначениеПоля("S_DOX",   СтруктураГруппы[ТекСтрока - 1]["RG03"]);
		xB.УстановитьЗначениеПоля("S_TAXN",  СтруктураГруппы[ТекСтрока - 1]["RG04A"]);
		xB.УстановитьЗначениеПоля("S_TAXP",  СтруктураГруппы[ТекСтрока - 1]["RG04"]);
		xB.УстановитьЗначениеПоля("OZN_DOX", СтруктураГруппы[ТекСтрока - 1]["RG05"]);
		xB.УстановитьЗначениеПоля("D_PRIYN", Дата(СтруктураГруппы[ТекСтрока - 1]["RG06D"]));
		xB.УстановитьЗначениеПоля("D_ZVILN", Дата(СтруктураГруппы[ТекСтрока - 1]["RG07D"]));
		xB.УстановитьЗначениеПоля("OZN_PILG",СтруктураГруппы[ТекСтрока - 1]["RG08"]);
		xB.УстановитьЗначениеПоля("OZNAKA",  СтруктураГруппы[ТекСтрока - 1]["RG09"]);
		xB.Записать();
	КонецЦикла;
	
	//======= запишем в DBF контрольные строки =========
	xB.Добавить();
	xB.УстановитьЗначениеПоля("NP",Число(99991));
	xB.УстановитьЗначениеПоля("PERIOD",Число(КварталОтчета)); 
	xB.УстановитьЗначениеПоля("RIK",Число(мСлужебныеДанные.Области.HZY.Значение));
	xB.УстановитьЗначениеПоля("KOD",Строка(мФорма1ДФ.Области.HTIN.Значение));
	
	Если НЕ ЗначениеЗаполнено(мФорма1ДФ.Области.HJ.Значение) = ЛОЖЬ Тогда
		xB.УстановитьЗначениеПоля("TYP",Число(0));
	Иначе 
		xB.УстановитьЗначениеПоля("TYP",Число(1));
	КонецЕсли;
	
	xB.УстановитьЗначениеПоля("TIN",Строка(мФорма1ДФ.Области.HKBOS.Значение));
	ТелДиректора = ПреобразоватьТелефонВДопустимыйФормат(мФорма1ДФ.Области.HTELBOS.Значение);
    xB.УстановитьЗначениеПоля("S_DOX",ТелДиректора);
	xB.УстановитьЗначениеПоля("S_NAR",Число(0));
 	xB.УстановитьЗначениеПоля("S_TAXN",Число(0));
	xB.УстановитьЗначениеПоля("S_TAXP",Число(0));
 	xB.УстановитьЗначениеПоля("OZN_DOX",Число(0));
 	xB.УстановитьЗначениеПоля("OZN_PILG",Число(0));
 	xB.УстановитьЗначениеПоля("OZNAKA",Число(0));

	xB.Записать();
	
	xB.Добавить();
	xB.УстановитьЗначениеПоля("NP",Число(99992));
	xB.УстановитьЗначениеПоля("PERIOD",Число(КварталОтчета));
	xB.УстановитьЗначениеПоля("RIK",Число(мСлужебныеДанные.Области.HZY.Значение));
	xB.УстановитьЗначениеПоля("KOD",Строка(мФорма1ДФ.Области.HTIN.Значение));
	
	Если НЕ ЗначениеЗаполнено(мФорма1ДФ.Области.HJ.Значение) = ЛОЖЬ Тогда
		xB.УстановитьЗначениеПоля("TYP",Число(0));
	Иначе 
		xB.УстановитьЗначениеПоля("TYP",Число(1));
	КонецЕсли;
	
	xB.УстановитьЗначениеПоля("TIN",Строка(мФорма1ДФ.Области.HKBUH.Значение));
	ТелБухгалтера = ПреобразоватьТелефонВДопустимыйФормат(мФорма1ДФ.Области.HTELBUH.Значение);
	xB.УстановитьЗначениеПоля("S_DOX",Число(ТелБухгалтера));
	xB.УстановитьЗначениеПоля("S_NAR",Число(0));
	xB.УстановитьЗначениеПоля("S_TAXN",Число(0));
	xB.УстановитьЗначениеПоля("S_TAXP",Число(0));
	xB.УстановитьЗначениеПоля("OZN_DOX",Число(0));
	xB.УстановитьЗначениеПоля("OZN_PILG",Число(0));
	xB.УстановитьЗначениеПоля("OZNAKA",Число(0));

	xB.Записать();
	
	xB.Добавить();
	xB.УстановитьЗначениеПоля("NP",Число(99999));
	xB.УстановитьЗначениеПоля("PERIOD",Число(КварталОтчета));
	xB.УстановитьЗначениеПоля("RIK",Число(мСлужебныеДанные.Области.HZY.Значение));
	xB.УстановитьЗначениеПоля("KOD",Строка(мФорма1ДФ.Области.HTIN.Значение));
	
	Если НЕ ЗначениеЗаполнено(мФорма1ДФ.Области.HJ.Значение) = ЛОЖЬ Тогда
		xB.УстановитьЗначениеПоля("TYP",Число(0));
	Иначе 
		xB.УстановитьЗначениеПоля("TYP",Число(1));
	КонецЕсли;
	
	xB.УстановитьЗначениеПоля("TIN",Строка(""));  
	xB.УстановитьЗначениеПоля("S_NAR",Число(мФорма1ДФ.Области.R01G03A.Значение));
	xB.УстановитьЗначениеПоля("S_DOX",Число(мФорма1ДФ.Области.R01G03.Значение));
	xB.УстановитьЗначениеПоля("S_TAXN",Число(мФорма1ДФ.Области.R01G04A.Значение));
	xB.УстановитьЗначениеПоля("S_TAXP",Число(мФорма1ДФ.Области.R01G04.Значение));
	xB.УстановитьЗначениеПоля("OZN_DOX",Число(0));
 	xB.УстановитьЗначениеПоля("OZN_PILG",Число(0));
 	xB.УстановитьЗначениеПоля("OZNAKA",Число(0));

	
	//======= конец загрузки в DBF  ====================
	xB.Записать();
	xB.ЗакрытьФайл();
	
	ФайлДанных = ФайлДанных + ".DBF";
    ВыбФайл = Новый Файл(ФайлДанных);  
 
	Если ВыбФайл.Существует() Тогда 
		
	Попытка
		ПереместитьФайл(ФайлДанных,ФайлДанныхРез);
	Исключение
		Предупреждение(НСтр("ru='Закройте файл с именем ';uk=""Закрийте файл із ім'ям """) + ФайлДанныхРез +" !");
		Возврат
	КонецПопытки;

		Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Файл  %1  успешно сформирован в каталоге: %2';uk='Файл  %1  успішно сформований у каталозі: %2'"), СокрЛП(ИмяФайлаДБФ), Каталог));
	Иначе  
		Предупреждение(НСтр("ru='Файл не найден!';uk='Файл не знайдений!'"));  
	КонецЕсли  

КонецПроцедуры	

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить()  Экспорт

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.
		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;
		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	СписокСохранения.Вставить("ВыплатыЗПНеРегулярны", ВыплатыЗПНеРегулярны);
	СписокСохранения.Вставить("ДатаВыплатыНач", ДатаВыплатыНач);
	СписокСохранения.Вставить("ДатаВыплатыКон", ДатаВыплатыКон);
	
	СписокСохранения.Вставить("Подразделение", Подразделение);
	СписокСохранения.Вставить("НеВключатьЧПников", НеВключатьЧПников);
	СписокСохранения.Вставить("СортироватьПоИНН", СортироватьПоИНН);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	// Сохраняем выбранные листы для печати в хранилище
	ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
	мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	Модифицированность = Ложь;
    Возврат Истина;
КонецФункции// Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	// восстанавливаем реквизиты отчета
	Организация              = мСохраненныйДок.Организация;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
    ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
	ЭлементыФормы.НадписьПредыдущийМесяц.Заголовок 	= Формат(НачалоКвартала(мДатаНачалаПериодаОтчета)-1,"ДФ=MMMM");
	ЭлементыФормы.НадписьТекущийМесяц.Заголовок 	= Формат(КонецКвартала(мДатаНачалаПериодаОтчета),   "ДФ=MMMM");
	Комментарий              = мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки(СписокСохранения);
		КонецЕсли;
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			//только одна группа
			спПараметрыСтраницы.Вставить("КвоСтрокТаблицы",СтруктураГруппы.Количество());
			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	СписокСохранения.Свойство("ВыплатыЗПНеРегулярны", ВыплатыЗПНеРегулярны);
	СписокСохранения.Свойство("ДатаВыплатыНач", ДатаВыплатыНач);
	СписокСохранения.Свойство("ДатаВыплатыКон", ДатаВыплатыКон);
	СписокСохранения.Свойство("Подразделение", Подразделение);
	СписокСохранения.Свойство("НеВключатьЧПников", НеВключатьЧПников);
	СписокСохранения.Свойство("СортироватьПоИНН", СортироватьПоИНН);
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	Если ПустаяСтрока(мСлужебныеДанные.Области.C_DOC_STAN.Значение) И мСлужебныеДанные.Области.C_DOC_STAN.Значение = Неопределено Тогда 
		мСлужебныеДанные.Области.C_DOC_STAN.Значение = 1;			
	КонецЕсли;
	
	Расчет();

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()
	
	Перем СтруктураГруппы1;	
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);
	
	мФорма1ДФ.Области.R01G03A.Значение = СтруктураГруппы1.Итог("RG03A");
	мФорма1ДФ.Области.R01G03.Значение = СтруктураГруппы1.Итог("RG03");
	мФорма1ДФ.Области.R01G04A.Значение = СтруктураГруппы1.Итог("RG04A");
	мФорма1ДФ.Области.R01G04.Значение = СтруктураГруппы1.Итог("RG04");
	
	мФорма1ДФ.Области.R02G03I.Значение = НомерСтраницыПриПечати(спПараметрыСтраницы, 0);
	
КонецПроцедуры // Расчет()

Процедура СоздатьТаблицуСоСхемамиВыгрузки() Экспорт
	тбСхемыXML = Новый ТаблицаЗначений;
	ТипКолИмяСхемы = СоздатьОписанияТипов("Строка",8);
	тбСхемыXML.Колонки.Добавить("ИмяСхемы",ТипКолИмяСхемы,НСтр("ru='Имя файла-схемы';uk=""Ім'я файлу-схеми"""));
	ТипКолПредставлениеСхемы = СоздатьОписанияТипов("Строка",80);
	тбСхемыXML.Колонки.Добавить("ПредставлениеСхемы",ТипКолПредставлениеСхемы,НСтр("ru='Наименование регл.отчета';uk='Найменування регл.звіту'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	тбСхемыXML.Колонки.Добавить("НазваниеСтраницыПанели",ТипКолНазваниеСтраницыПанели,НСтр("ru='Наименование страницы панели';uk='Найменування сторінки панелі'"));

	ТипКолфВыгрузка = СоздатьОписанияТипов("Число",1,0);
	тбСхемыXML.Колонки.Добавить("фВыгрузка",ТипКолфВыгрузка,НСтр("ru='Выгружать?';uk='Вивантажувати?'"));
	Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда 
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "J0500102"; 
		НовСтрока.ПредставлениеСхемы ="Форма № 1ДФ";
		НовСтрока.НазваниеСтраницыПанели ="Форма1ДФ";
	Иначе
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "F0500102"; 
		НовСтрока.ПредставлениеСхемы ="Форма № 1ДФ";
		НовСтрока.НазваниеСтраницыПанели ="Форма1ДФ";
		
	КонецЕсли;
КонецПроцедуры	

Функция СформироватьТекстЗапросаПоШтатнымСовместителям(ДопУсловие = "")
	
	ТекстЗапросаПоШтатнымСовместителям = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                                     |	РаботникиОрганизаций.Сотрудник.Физлицо КАК Сотрудник,
	                                     |	РаботникиОрганизаций.Сотрудник.ВидЗанятости КАК ВидЗанятости
	                                     |ИЗ
	                                     |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаСреза, ) КАК РаботникиОрганизаций
	                                     |ГДЕ
	                                     |	(РаботникиОрганизаций.Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы
	                                     |			ИЛИ РаботникиОрганизаций.Сотрудник.ВидЗанятости = &Совместительство)
	                                     |	И РаботникиОрганизаций.Организация = &Организация
	                                     |	И РаботникиОрганизаций.ЗанимаемыхСтавок > 0 "+ ДопУсловие +"
	                                     |
	                                     |ОБЪЕДИНИТЬ
	                                     |
	                                     |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                     |	РаботникиОрганизаций.Сотрудник.Физлицо,
	                                     |	РаботникиОрганизаций.Сотрудник.ВидЗанятости
	                                     |ИЗ
	                                     |	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	                                     |ГДЕ
	                                     |	(РаботникиОрганизаций.Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы
	                                     |			ИЛИ РаботникиОрганизаций.Сотрудник.ВидЗанятости = &Совместительство)
	                                     |	И РаботникиОрганизаций.Организация = &Организация
	                                     |	И РаботникиОрганизаций.ЗанимаемыхСтавок > 0 "+ ДопУсловие +"
	                                     |	И РаботникиОрганизаций.Период МЕЖДУ &ДатаСреза И &ДатаСрезаПлюсМесяц";
		
   Возврат (ТекстЗапросаПоШтатнымСовместителям);  	
   
КонецФункции

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто()  Экспорт
    Перем СтруктураГруппы;
	Перем ЭтоУТП;
	
	ЭтоУТП = (РегламентированнаяОтчетность.ИДКонфигурации() = "УТП");
	
	ЛьготаВИзмеренииРегистра = Истина;
	МетаРегистраНДФЛ = РегистрыНакопления.ВзаиморасчетыПоНДФЛ.СоздатьНаборЗаписей().Метаданные();
	Если МетаРегистраНДФЛ.Измерения.Найти("Льгота") = Неопределено Тогда
		ЛьготаВИзмеренииРегистра = Ложь;	
	КонецЕсли;
	
	УсловиеНаПодразделение = "";
	Если ЗначениеЗаполнено(Подразделение) Тогда
		УсловиеНаПодразделение	= "И 
								   |(ВЫБОР КОГДА Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций
								   |	ТОГДА
								   |		Сотрудник В (ВЫБРАТЬ
								   |						РаботникиОрганизацийСрезПоследних.Сотрудник
		                      	   |					 ИЗ
		                      	   |						РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаКонцаКвартала, Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
		                      	   |					 ГДЕ
		                      	   |						(РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации В ИЕРАРХИИ (&Подразделение)
		                      	   |						ИЛИ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации = &Подразделение))
								   |	ИНАЧЕ НЕ &НеВключатьЧПников
								   |КОНЕЦ)";
	КонецЕсли;
	
	Если ЛьготаВИзмеренииРегистра Тогда
	
		ЗапросНДФЛ = Новый Запрос;
		
		ЗапросНДФЛ.УстановитьПараметр("Организация", Организация);
		ЗапросНДФЛ.УстановитьПараметр("Подразделение", Подразделение);
		ЗапросНДФЛ.УстановитьПараметр("НеВключатьЧПников", НеВключатьЧПников);
		ЗапросНДФЛ.УстановитьПараметр("ДатаКонцаКвартала", мДатаКонцаПериодаОтчета);
		ЗапросНДФЛ.УстановитьПараметр("ДатаНач", мДатаНачалаПериодаОтчета);
		ЗапросНДФЛ.УстановитьПараметр("ДатаКон", Новый Граница(мДатаКонцаПериодаОтчета,ВидГраницы.Включая));
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.ФизЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Сотрудник КОНЕЦ КАК Сотрудник,
		|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.ФизЛицо.КодПоДРФО  КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.Контрагенты ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.КодПоЕДРПОУ ИНАЧЕ """" КОНЕЦ КАК ИННСотрудника,
		|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.КодДо2011 КАК ДоходНДФЛ,
		|	ВзаиморасчетыПоНДФЛОбороты.Льгота,
		|	ВзаиморасчетыПоНДФЛОбороты.ДоходПриход,
		|	ВзаиморасчетыПоНДФЛОбороты.ДоходРасход,
		|	ВзаиморасчетыПоНДФЛОбороты.НалогПриход,
		|	ВзаиморасчетыПоНДФЛОбороты.НалогРасход
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыПоНДФЛ.Обороты(&ДатаНач, &ДатаКон, , Организация = &Организация) КАК ВзаиморасчетыПоНДФЛОбороты
		|ГДЕ
		|	Истина " + УсловиеНаПодразделение;
		
		Если НЕ ВыплатыЗПНеРегулярны Тогда

			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ //добавим выплаты дохода вида 01 в следующем месяце за последний месяц квартала
			|
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.ФизЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Сотрудник КОНЕЦ КАК Сотрудник,
			|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.ФизЛицо.КодПоДРФО  КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.Контрагенты ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.КодПоЕДРПОУ ИНАЧЕ """" КОНЕЦ КАК ИННСотрудника,
			|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.КодДо2011 КАК ДоходНДФЛ,
			|	ВзаиморасчетыПоНДФЛОбороты.Льгота,
			|	0,
			|	СУММА(ВзаиморасчетыПоНДФЛОбороты.Доход),
			|	0,
			|	СУММА(ВзаиморасчетыПоНДФЛОбороты.Налог)
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛОбороты
			|	ГДЕ 
			|		 Период МЕЖДУ &ДатаКонКвартала И &ДатаВыплатыКон
			|  	   И Организация = &Организация
			|      И ДоходНДФЛ В (&ЗП) 
			|	   И НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) = &ПоследнийМесяц
			|      И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) "+УсловиеНаПодразделение+"
			|СГРУППИРОВАТЬ ПО 
			|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.ФизЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Сотрудник КОНЕЦ,
			|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.ФизЛицо.КодПоДРФО  КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.Контрагенты ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.КодПоЕДРПОУ ИНАЧЕ """" КОНЕЦ,
			|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.КодДо2011,
			|	ВзаиморасчетыПоНДФЛОбороты.Льгота
			|
			|ОБЪЕДИНИТЬ ВСЕ //удалим выплаты дохода вида 01 в первом месяце квартала за последний месяц прошлого квартала
			|
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.ФизЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Сотрудник КОНЕЦ КАК Сотрудник,
			|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.ФизЛицо.КодПоДРФО  КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.Контрагенты ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.КодПоЕДРПОУ ИНАЧЕ """" КОНЕЦ КАК ИННСотрудника,
			|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.КодДо2011 КАК ДоходНДФЛ,
			|	ВзаиморасчетыПоНДФЛОбороты.Льгота,
			|	0,
			|	-СУММА(ВзаиморасчетыПоНДФЛОбороты.Доход),
			|	0,
			|	-СУММА(ВзаиморасчетыПоНДФЛОбороты.Налог)
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛОбороты
			|	ГДЕ 
			|		 Период МЕЖДУ &ДатаНачКвартала И &ДатаВыплатыНач
			|  	   И Организация = &Организация
			|      И ДоходНДФЛ В (&ЗП) 
			|	   И НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) = &ПрошлыйМесяц
			|      И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) "+УсловиеНаПодразделение+"
			|СГРУППИРОВАТЬ ПО 
			|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.ФизЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Сотрудник КОНЕЦ,
			|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.ФизЛицо.КодПоДРФО  КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.Контрагенты ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.КодПоЕДРПОУ ИНАЧЕ """" КОНЕЦ,
			|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.КодДо2011,
			|	ВзаиморасчетыПоНДФЛОбороты.Льгота
			|
			|";
		
			ЗапросНДФЛ.УстановитьПараметр("ДатаНачКвартала", мДатаНачалаПериодаОтчета);
			ЗапросНДФЛ.УстановитьПараметр("ДатаКонКвартала", мДатаКонцаПериодаОтчета + 1);
			
	        ЗапросНДФЛ.УстановитьПараметр("ДатаВыплатыНач", КонецДня(ДатаВыплатыНач));
			ЗапросНДФЛ.УстановитьПараметр("ДатаВыплатыКон", КонецДня(ДатаВыплатыКон));
			
	        ЗапросНДФЛ.УстановитьПараметр("ПрошлыйМесяц", 	НачалоМесяца(ДобавитьМесяц(мДатаНачалаПериодаОтчета,-1)));
			ЗапросНДФЛ.УстановитьПараметр("ПоследнийМесяц", НачалоМесяца(мДатаКонцаПериодаОтчета));
			
			ЗП = Новый Массив();
			ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.Код01);
			Попытка
				ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.Код01ГПХ);
			Исключение
			КонецПопытки;
			Попытка
				ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.Код01Шахтеры);
			Исключение
			КонецПопытки;
			ЗапросНДФЛ.УстановитьПараметр("ЗП", ЗП);

		КонецЕсли;
		
		ЗапросНДФЛ.Текст = ТекстЗапроса;
		
		РезультатЗапросаНДФЛ = ЗапросНДФЛ.Выполнить();
		ТаблицаНДФЛ = РезультатЗапросаНДФЛ.Выгрузить();
		
		ТаблицаНДФЛ.Свернуть("Сотрудник,ИННСотрудника,ДоходНДФЛ,Льгота","ДоходПриход,ДоходРасход,НалогПриход,НалогРасход");
		Если СортироватьПоИНН Тогда
		    ТаблицаНДФЛ.Сортировать("ИННСотрудника,Сотрудник,ДоходНДФЛ,Льгота");
		Иначе	
			ТаблицаНДФЛ.Сортировать("Сотрудник,ИННСотрудника,ДоходНДФЛ,Льгота");
		КонецЕсли;
			
	Иначе	
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("НеВключатьЧПников", НеВключатьЧПников);
		Запрос.УстановитьПараметр("ДатаКонцаКвартала", мДатаКонцаПериодаОтчета);
		Запрос.УстановитьПараметр("ДатаНач", мДатаНачалаПериодаОтчета);
		Запрос.УстановитьПараметр("ДатаКон", мДатаКонцаПериодаОтчета);
		
		// получим данные по начислениям/перечислениям в разрезе налоговых периодов, но без учета льгот
		// Далее мы определеям по последней записи в регистре (по сотруднику в разрезе налоговых периодов) какая же льгота применялась на самом деле
		// далее добавим в таблицу по начислениям/перечислениям информацию по применявшимся льготам
		// далее свернем таблицу в разрезе льгот (так как налоговый период нам в отчете не нужен).
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.ФизЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Сотрудник КОНЕЦ КАК Сотрудник,
		|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.КодДо2011 КАК ДоходНДФЛ,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.ПериодВзаиморасчетов, МЕСЯЦ) КАК НалоговыйПериод,
		|	СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Доход ИНАЧЕ 0 КОНЕЦ) КАК ДоходПриход,
		|	СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Доход ИНАЧЕ 0 КОНЕЦ) КАК ДоходРасход,
		|	СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Налог ИНАЧЕ 0 КОНЕЦ) КАК НалогПриход,
		|	СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Налог ИНАЧЕ 0 КОНЕЦ) КАК НалогРасход
		|	ПОМЕСТИТЬ ТаблицаНДФЛБезЛьгот
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛОбороты
		|	ГДЕ 
		|		 Период МЕЖДУ &ДатаНач И &ДатаКон
		|  	   И Организация = &Организация
		|	   " + УсловиеНаПодразделение + "
		|
		|   СГРУППИРОВАТЬ ПО
		|		ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.ФизЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Сотрудник КОНЕЦ,
		|		ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.КодДо2011,
		|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.ПериодВзаиморасчетов, МЕСЯЦ)
		|";
		
		Если НЕ ВыплатыЗПНеРегулярны Тогда

			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ //добавим выплаты дохода вида 01 в следующем месяце за последний месяц квартала
			|
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.ФизЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Сотрудник КОНЕЦ КАК Сотрудник,
			|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.КодДо2011 КАК ДоходНДФЛ,
			|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.ПериодВзаиморасчетов, МЕСЯЦ),
			|	0,
			|	СУММА(ВзаиморасчетыПоНДФЛОбороты.Доход),
			|	0,
			|	СУММА(ВзаиморасчетыПоНДФЛОбороты.Налог)
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛОбороты
			|	ГДЕ 
			|		 Период МЕЖДУ &ДатаКонКвартала И &ДатаВыплатыКон
			|  	   И Организация = &Организация
			|      И ДоходНДФЛ В (&ЗП) 
			|	   И НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) = &ПоследнийМесяц
			|      И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) "+УсловиеНаПодразделение+"
			|СГРУППИРОВАТЬ ПО 
			|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.ФизЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Сотрудник КОНЕЦ,
			|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.КодДо2011,
			|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.ПериодВзаиморасчетов, МЕСЯЦ)
			|
			|ОБЪЕДИНИТЬ ВСЕ //удалим выплаты дохода вида 01 в первом месяце квартала за последний месяц прошлого квартала
			|
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.ФизЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Сотрудник КОНЕЦ КАК Сотрудник,
			|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.КодДо2011 КАК ДоходНДФЛ,
			|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.ПериодВзаиморасчетов, МЕСЯЦ),
			|	0,
			|	-СУММА(ВзаиморасчетыПоНДФЛОбороты.Доход),
			|	0,
			|	-СУММА(ВзаиморасчетыПоНДФЛОбороты.Налог)
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛОбороты
			|	ГДЕ 
			|		 Период МЕЖДУ &ДатаНачКвартала И &ДатаВыплатыНач
			|  	   И Организация = &Организация
			|      И ДоходНДФЛ В (&ЗП) 
			|	   И НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) = &ПрошлыйМесяц
			|      И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) "+УсловиеНаПодразделение+"
			|СГРУППИРОВАТЬ ПО 
			|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций ТОГДА ВзаиморасчетыПоНДФЛОбороты.Сотрудник.ФизЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Сотрудник КОНЕЦ,
			|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.КодДо2011,
			|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.ПериодВзаиморасчетов, МЕСЯЦ)
			|
			|";
		
			Запрос.УстановитьПараметр("ДатаНачКвартала", мДатаНачалаПериодаОтчета);
			Запрос.УстановитьПараметр("ДатаКонКвартала", мДатаКонцаПериодаОтчета + 1);
			
	        Запрос.УстановитьПараметр("ДатаВыплатыНач", КонецДня(ДатаВыплатыНач));
			Запрос.УстановитьПараметр("ДатаВыплатыКон", КонецДня(ДатаВыплатыКон));
			
	        Запрос.УстановитьПараметр("ПрошлыйМесяц", 	НачалоМесяца(ДобавитьМесяц(мДатаНачалаПериодаОтчета,-1)));
			Запрос.УстановитьПараметр("ПоследнийМесяц", НачалоМесяца(мДатаКонцаПериодаОтчета));
			
			ЗП = Новый Массив();
			ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.Код01);
			Попытка
				ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.Код01ГПХ);
			Исключение
			КонецПопытки;
			Попытка
				ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.Код01Шахтеры);
			Исключение
			КонецПопытки;
			Запрос.УстановитьПараметр("ЗП", ЗП);

		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		// получим информацию по льготам
		Запрос.Текст = "
		|		ВЫБРАТЬ
		|			ВЫБОР КОГДА НДФЛ.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций ТОГДА НДФЛ.Сотрудник.ФизЛицо ИНАЧЕ НДФЛ.Сотрудник КОНЕЦ КАК Сотрудник,
		|			НДФЛ.ПериодВзаиморасчетов КАК НалоговыйПериод,
		|			НДФЛ.ДоходНДФЛ.КодДо2011 КАК ДоходНДФЛ,
		|			МАКСИМУМ(ЕСТЬNULL(НДФЛЛьготы.Льгота,ЗНАЧЕНИЕ(Справочник.ВидыЛьготРаботниковОрганизаций.ПустаяСсылка))) КАК Льгота
		|		ПОМЕСТИТЬ  ТаблицаЛьгот
		|		ИЗ (
		|			ВЫБРАТЬ
		|				ВзаиморасчетыПоНДФЛ.Сотрудник КАК Сотрудник,
		|				ВзаиморасчетыПоНДФЛ.ДоходНДФЛ КАК ДоходНДФЛ,
		|				НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.ПериодВзаиморасчетов, МЕСЯЦ) КАК ПериодВзаиморасчетов,
		|				МАКСИМУМ(ВзаиморасчетыПоНДФЛ.Период) КАК ПериодАктуальнойЛьготы
		|			ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛ
		|			ГДЕ	
		//|					ВзаиморасчетыПоНДФЛ.Период >= &ДатаНач
		|					ВзаиморасчетыПоНДФЛ.Период <= &ДатаКон
		|				И	ВзаиморасчетыПоНДФЛ.Организация = &Организация
		|				И	ВзаиморасчетыПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			" + УсловиеНаПодразделение + "
		|			СГРУППИРОВАТЬ ПО
		|				ВзаиморасчетыПоНДФЛ.Сотрудник,
		|				ВзаиморасчетыПоНДФЛ.ДоходНДФЛ,
		|				НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.ПериодВзаиморасчетов, МЕСЯЦ)
		|   		)КАК НДФЛ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК НДФЛЛьготы
		|		ПО		
		|				НЕ НДФЛ.ПериодВзаиморасчетов ЕСТЬ NULL 
		//|			И	НДФЛЛьготы.Период >= &ДатаНач
		|			И	НДФЛЛьготы.Период <= &ДатаКон
		|			И	НДФЛЛьготы.Организация = &Организация
		|			И	НДФЛЛьготы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			И	НДФЛЛьготы.Сотрудник = НДФЛ.Сотрудник
		|			И	НДФЛЛьготы.ДоходНДФЛ = НДФЛ.ДоходНДФЛ
		|			И	НАЧАЛОПЕРИОДА(НДФЛЛьготы.ПериодВзаиморасчетов, МЕСЯЦ) = НАЧАЛОПЕРИОДА(НДФЛ.ПериодВзаиморасчетов, МЕСЯЦ)
		|			И	НДФЛЛьготы.Период = НДФЛ.ПериодАктуальнойЛьготы
		|		СГРУППИРОВАТЬ ПО 
		|			ВЫБОР КОГДА НДФЛ.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций ТОГДА НДФЛ.Сотрудник.ФизЛицо ИНАЧЕ НДФЛ.Сотрудник КОНЕЦ,
		|			НДФЛ.ПериодВзаиморасчетов,
		|			НДФЛ.ДоходНДФЛ.КодДо2011
		|";
		Запрос.Выполнить();
		
		// соединим данные по ндфл со льготами + свернем
		Запрос.Текст = "
		|ВЫБРАТЬ 
		|	ТаблицаНДФЛБезЛьгот.Сотрудник КАК Сотрудник,
		|	ВЫБОР КОГДА ТаблицаНДФЛБезЛьгот.Сотрудник ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА ТаблицаНДФЛБезЛьгот.Сотрудник.КодПоДРФО
		|		  КОГДА ТаблицаНДФЛБезЛьгот.Сотрудник ССЫЛКА Справочник.Контрагенты
		|			ТОГДА ТаблицаНДФЛБезЛьгот.Сотрудник.КодПоЕДРПОУ
		|	ИНАЧЕ """" КОНЕЦ КАК ИННСотрудника,
		|	ТаблицаНДФЛБезЛьгот.ДоходНДФЛ КАК ДоходНДФЛ,
		|	ТаблицаЛьгот.Льгота  КАК Льгота,
		|	СУММА(ТаблицаНДФЛБезЛьгот.ДоходПриход) КАК ДоходПриход,
		|	СУММА(ТаблицаНДФЛБезЛьгот.ДоходРасход) КАК ДоходРасход,
		|	СУММА(ТаблицаНДФЛБезЛьгот.НалогПриход) КАК НалогПриход,
		|	СУММА(ТаблицаНДФЛБезЛьгот.НалогРасход) КАК НалогРасход
		|ИЗ ТаблицаНДФЛБезЛьгот КАК ТаблицаНДФЛБезЛьгот
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЛьгот КАК ТаблицаЛьгот
		|	ПО  
		|		  ТаблицаНДФЛБезЛьгот.Сотрудник = ТаблицаЛьгот.Сотрудник
		|		И ТаблицаНДФЛБезЛьгот.ДоходНДФЛ = ТаблицаЛьгот.ДоходНДФЛ
		|		И ТаблицаНДФЛБезЛьгот.НалоговыйПериод = ТаблицаЛьгот.НалоговыйПериод
		|	СГРУППИРОВАТЬ ПО 
		|		ТаблицаНДФЛБезЛьгот.Сотрудник,
		|		ВЫБОР КОГДА ТаблицаНДФЛБезЛьгот.Сотрудник ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА ТаблицаНДФЛБезЛьгот.Сотрудник.КодПоДРФО
		|		  КОГДА ТаблицаНДФЛБезЛьгот.Сотрудник ССЫЛКА Справочник.Контрагенты
		|			ТОГДА ТаблицаНДФЛБезЛьгот.Сотрудник.КодПоЕДРПОУ
		|		ИНАЧЕ """" КОНЕЦ,
		|		ТаблицаНДФЛБезЛьгот.ДоходНДФЛ,
		|		ТаблицаЛьгот.Льгота
		|";
		
		ТаблицаНДФЛ = Запрос.Выполнить().Выгрузить();
		
		Если СортироватьПоИНН Тогда
		    ТаблицаНДФЛ.Сортировать("ИННСотрудника,Сотрудник,ДоходНДФЛ,Льгота");
		Иначе	
			ТаблицаНДФЛ.Сортировать("Сотрудник,ИННСотрудника,ДоходНДФЛ,Льгота");
		КонецЕсли;
		
	КонецЕсли;
	
	
	// Увольниение или прием на работу определяем по тому, сколько ставок занимал работник в течение периода
	// 0 ставок - считаем что не работал, > 0 работал.
	// Подсчет ставок ведем суммой по всем назначениям физ.лица.
	//
	// Если физ. лицо было уволено до начала периода, но получало доход
	// нужно указать дату увольнения
	//
	// Если сотрудник ранее был уволен но сейчас получал доход по договору ГПХ - дату увольнения 
	//показывать не будем
	ЗапросРаботникиНаНачало = Новый Запрос;
	ЗапросРаботникиНаНачало.УстановитьПараметр("ДатаНач", Новый Граница(мДатаНачалаПериодаОтчета-1,ВидГраницы.Включая));
	ЗапросРаботникиНаНачало.УстановитьПараметр("Организация", Организация);
	
	ЗапросРаботникиНаНачало.Текст = "
	 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Сотрудник,
	 |	ВЫБОР
	 |		КОГДА СУММА(РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок) > 0
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ КАК РаботалНаНачалоПериода,
	 |	МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Период) КАК ДатаУвольнения
	 |ИЗ
	 |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНач, Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
	 |";

	РаботникиНаНачало = ЗапросРаботникиНаНачало.Выполнить().Выгрузить();
	
	ЗапросДатыКадровыхИзменений = Новый Запрос;
	ЗапросДатыКадровыхИзменений.УстановитьПараметр("ДатаНач", мДатаНачалаПериодаОтчета);
	ЗапросДатыКадровыхИзменений.УстановитьПараметр("ДатаКон", мДатаКонцаПериодаОтчета + 24*60*60); // добавляем день, так как уваольнение "видно" только на следующий день
	ЗапросДатыКадровыхИзменений.УстановитьПараметр("Организация", Организация);
	ЗапросДатыКадровыхИзменений.УстановитьПараметр("Перемещение", Перечисления.ПричиныИзмененияСостояния.Перемещение);
	
	ЗапросДатыКадровыхИзменений.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РаботникиОрганизаций.Период КАК Период,
	|	РаботникиОрганизаций.Сотрудник.Физлицо КАК Сотрудник
	|
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ 
	|
	|    РаботникиОрганизаций.Период 	>= &ДатаНач 
	|  И РаботникиОрганизаций.Период 	<= &ДатаКон
	|  И РаботникиОрганизаций.Организация = &Организация
	|  И НЕ (РаботникиОрганизаций.ПричинаИзмененияСостояния =&Перемещение)
	|ИТОГИ ПО Период";
	
	ВыборкаПериод = ЗапросДатыКадровыхИзменений.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РаботникиПриемУвольнение = Новый ТаблицаЗначений();
	РаботникиПриемУвольнение.Колонки.Добавить("Сотрудник");
	РаботникиПриемУвольнение.Колонки.Добавить("Период");
	РаботникиПриемУвольнение.Колонки.Добавить("РаботалВПериоде");
	
	ЗапросПриемУвольнение = Новый Запрос;
	ЗапросПриемУвольнение.УстановитьПараметр("Организация", Организация);

	Пока ВыборкаПериод.Следующий() Цикл
		
		МассивФизЛиц = Новый Массив();       
		
		ВыборкаФизЛицо = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока ВыборкаФизЛицо.Следующий() Цикл
			МассивФизЛиц.Добавить(ВыборкаФизЛицо.Сотрудник);	
		КонецЦикла;
		ЗапросПриемУвольнение.УстановитьПараметр("Сотрудники", МассивФизЛиц);
		ЗапросПриемУвольнение.УстановитьПараметр("Период", ВыборкаПериод.Период);
		
		ЗапросПриемУвольнение.Текст =  "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Сотрудник,
			|	ВЫБОР
			|		КОГДА СУММА(РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок) > 0
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК РаботалВПериоде,
			|	&Период КАК Период
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Период, Организация = &Организация И Сотрудник.Физлицо В (&Сотрудники)) КАК РаботникиОрганизацийСрезПоследних
			|
			|СГРУППИРОВАТЬ ПО
			| РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо 
			|";
			
		ВыборкаПриемУвольнение = ЗапросПриемУвольнение.Выполнить().Выбрать();
		Пока ВыборкаПриемУвольнение.Следующий() Цикл
		    СтрокаТаблицы = РаботникиПриемУвольнение.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаПриемУвольнение);
		КонецЦикла;
			
	КонецЦикла;
	
	//запрос для получения числа штатных и совместителей
	ЗапросПоШтатнымСовместителям = Новый Запрос();
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("Организация",         Организация);
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("ОсновноеМестоРаботы", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("Совместительство", Перечисления.ВидыЗанятостиВОрганизации.Совместительство);
	
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("Подразделение", Подразделение);
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("НеВключатьЧПников", НеВключатьЧПников);
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("ДатаКонцаКвартала", мДатаКонцаПериодаОтчета);
	
	ТекстЗапросаПоШтатнымСовместителям = СформироватьТекстЗапросаПоШтатнымСовместителям(УсловиеНаПодразделение);
	
	ЗапросПоШтатнымСовместителям.Текст = ТекстЗапросаПоШтатнымСовместителям;
	
	МассивШтатныхМес = Новый Массив;
	МассивСовместителейМес = Новый Массив;
	
	Для НомМес = 0 по 2 Цикл
		ДатаСреза = ДобавитьМесяц(мДатаНачалаПериодаОтчета,НомМес);
		ЗапросПоШтатнымСовместителям.УстановитьПараметр("ДатаСреза",ДатаСреза);
		ЗапросПоШтатнымСовместителям.УстановитьПараметр("ДатаСрезаПлюсМесяц", ДобавитьМесяц(ДатаСреза,1)-1);
		
		ТаблицаШтатныхСовместителей = ЗапросПоШтатнымСовместителям.Выполнить().Выгрузить();
		
		ОтборШтатных = Новый Структура("ВидЗанятости",Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
		МассивШтатныхМес.Добавить(ТаблицаШтатныхСовместителей.НайтиСтроки(ОтборШтатных).Количество());
		
		ОтборСовместителей = Новый Структура("ВидЗанятости",Перечисления.ВидыЗанятостиВОрганизации.Совместительство);
		МассивСовместителейМес.Добавить(ТаблицаШтатныхСовместителей.НайтиСтроки(ОтборСовместителей).Количество());
	КонецЦикла;	
	
	R00G01I = Макс(МассивШтатныхМес[0],МассивШтатныхМес[1],МассивШтатныхМес[2]);
	мФорма1ДФ.Области.R00G01I.Значение = R00G01I;
	
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") 
	 ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП") 
	 ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "УТП") Тогда
		ЗапросГПХ = Новый Запрос;
		ЗапросГПХ.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	 Работники.Сотрудник.ФизЛицо КАК Сотрудник
		|ИЗ  Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК Работники
		|ГДЕ 
		| 	Работники.Проведен
		| И Работники.ДатаОкончания >= &ДатаНачалаКваратала
		| И Работники.ДатаНачала <= &ДатаКонцаКвартала
		| И Работники.Организация = &Организация  "+УсловиеНаПодразделение+"
		|";	
		ЗапросГПХ.УстановитьПараметр("ДатаНачалаКваратала",мДатаНачалаПериодаОтчета);
		ЗапросГПХ.УстановитьПараметр("ДатаКонцаКвартала",мДатаКонцаПериодаОтчета);
		ЗапросГПХ.УстановитьПараметр("Организация",Организация);
		ЗапросГПХ.УстановитьПараметр("НеВключатьЧПников", НеВключатьЧПников);
		ЗапросГПХ.УстановитьПараметр("Подразделение", Подразделение);
		
		ТаблицаРезультатГПХ = ЗапросГПХ.Выполнить().Выгрузить();
		КолГПХ = ТаблицаРезультатГПХ.Количество();
	Иначе
		ТаблицаРезультатГПХ = Неопределено;
		КолГПХ = 0;
	КонецЕсли;
	
	R00G02I = Макс(МассивСовместителейМес[0],МассивСовместителейМес[1],МассивСовместителейМес[2]) + КолГПХ;
	мФорма1ДФ.Области.R00G02I.Значение = R00G02I;
	
	R02G02I = 0;
	R02G01I = 1;
	Номер = 0;
	СотрудникПредыдущий = Неопределено;
	
	Для Каждого стр ИЗ ТаблицаНДФЛ Цикл
		Если Номер > 0 Тогда
			ВставитьДополнительнуюСтроку();
			R02G01I = R02G01I + 1;
		КонецЕсли;
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы);
		КолСтрок = СтруктураГруппы.Количество();
		
		СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" отчета"": ';uk='У рядку номер ""%1"" звіту"": '"), СокрЛП(КолСтрок));
		
		ИмяНужнойЯчейкиНовойСтроки = "R" + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[0].Имя,2);
		// номер строки
		
		ИмяНужнойЯчейкиНовойСтроки = "R" + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[1].Имя,2);
		// область первой ячейки последней строки многострочного раздела
		ОбластьЯчейки = мФорма1ДФ.Области[ИмяНужнойЯчейкиНовойСтроки];
		
		Если НЕ ЗначениеЗаполнено(стр.ИННСотрудника) Тогда
			Сообщить(СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' у контрагента (сотрудника) не заполнен идентификационный код!';uk=' у контрагента (співробітника) не заповнений ідентифікаційний код !'"), СтатусСообщения.Важное);
		КонецЕсли;
		ОбластьЯчейки.Значение = стр.ИННСотрудника;
		
		// отобразим ФИО сотрудника
		ИмяНужнойЯчейкиНовойСтроки = "R" + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + "GFIO";
		ОбластьЯчейки = мФорма1ДФ.Области[ИмяНужнойЯчейкиНовойСтроки];
		ОбластьЯчейки.Значение = стр.Сотрудник;
		
		
		ИмяНужнойЯчейкиНовойСтроки = "R" + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[2].Имя,2);
		ОбластьЯчейки = мФорма1ДФ.Области[ИмяНужнойЯчейкиНовойСтроки];
		ОбластьЯчейки.Значение = стр.ДоходПриход;
		
		ИмяНужнойЯчейкиНовойСтроки = "R" + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[3].Имя,2);
		ОбластьЯчейки = мФорма1ДФ.Области[ИмяНужнойЯчейкиНовойСтроки];
		ОбластьЯчейки.Значение = стр.ДоходРасход;
		
		ИмяНужнойЯчейкиНовойСтроки = "R" + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[4].Имя,2);
		ОбластьЯчейки = мФорма1ДФ.Области[ИмяНужнойЯчейкиНовойСтроки];
		ОбластьЯчейки.Значение = стр.НалогПриход;
		
		ИмяНужнойЯчейкиНовойСтроки = "R" + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[5].Имя,2);
		ОбластьЯчейки = мФорма1ДФ.Области[ИмяНужнойЯчейкиНовойСтроки];
		ОбластьЯчейки.Значение = стр.НалогРасход;
		
		ИмяНужнойЯчейкиНовойСтроки = "R" + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[6].Имя,2);
		ОбластьЯчейки = мФорма1ДФ.Области[ИмяНужнойЯчейкиНовойСтроки];
		ОбластьЯчейки.Значение = стр.ДоходНДФЛ;
		
		
		ИмяНужнойЯчейкиНовойСтроки = "R" + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[9].Имя,2);
		ОбластьЯчейки = мФорма1ДФ.Области[ИмяНужнойЯчейкиНовойСтроки];
		Льгота = "";
		Если (СтрДлина(стр.Льгота) > 0)  Тогда
			Льгота = стр.Льгота.КодОтчетностиНДФЛ;	
		КонецЕсли;	
		ОбластьЯчейки.Значение = Льгота;
		
		// даты увольнения/приема
		Если (стр.Сотрудник <> СотрудникПредыдущий)  Тогда
			//количество физ.лиз
			R02G02I = R02G02I + 1;
			
			//ищем даты приема/увольнения 
			Если НЕ (ТипЗнч(стр.Сотрудник) = Тип("СправочникСсылка.Контрагенты")) Тогда
				ДатаПриема 	   = '00010101';
				ДатаУвольнения = '00010101';
				
				ПараметрыОтбора = Новый Структура("Сотрудник");
				ПараметрыОтбора.Вставить("Сотрудник", стр.Сотрудник);  
				
				ЗаписьНаНачало  = РаботникиНаНачало.НайтиСтроки(ПараметрыОтбора);
				ПриемУвольнение = РаботникиПриемУвольнение.НайтиСтроки(ПараметрыОтбора);
				
				// 1. Если сотр был уволен ранее, не работал в этом периоде (в т.ч. по ГПХ), но получал доход 
				//		заполняем только дату увольнения:
				РаботалНаНачало = Ложь;
				Если ЗаписьНаНачало.Количество() > 0 Тогда
					// 1.1 определяем, что сотрудник ранее работал и был уволен
					РаботалНаНачало = ЗаписьНаНачало[0].РаботалНаНачалоПериода;
					Если НЕ РаботалНаНачало Тогда
						ДатаУвольнения = ЗаписьНаНачало[0].ДатаУвольнения;
					КонецЕсли;
				КонецЕсли;
				Если НЕ РаботалНаНачало 
	  				  И ДатаУвольнения > '00010101' Тогда
					//1.2 показанный в периоде доход не должен быть связан с ГПХ
					Если НЕ ТаблицаРезультатГПХ = Неопределено
						  И ТаблицаРезультатГПХ.НайтиСтроки(ПараметрыОтбора).Количество() > 0  Тогда
						  ДатаУвольнения = '00010101';
					КонецЕсли;
				КонецЕсли;
				Если НЕ РаботалНаНачало 
					  И ДатаУвольнения > '00010101' Тогда
					//1.3 В периоде работник не принимался на работу
					Для каждого ЗаписьПриемУвольнение Из ПриемУвольнение Цикл
						Если ЗаписьПриемУвольнение.РаботалВПериоде Тогда
							ДатаУвольнения = '00010101';
							Прервать;
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
				
				//2. Пройдемся по таблице приема/увольнения и при необходимости добавим строки с данными по приему и увольнению
				РаботалВПредыдущемПериоде = РаботалНаНачало;
				СтрокаВыведенаВОтчет = Ложь;
				Для каждого ЗаписьПриемУвольнение Из ПриемУвольнение Цикл
					
					Если НЕ РаботалВПредыдущемПериоде 
						И ЗаписьПриемУвольнение.РаботалВПериоде Тогда
						
						Если ЗаписьПриемУвольнение.Период > мДатаКонцаПериодаОтчета Тогда 
							// в выборку могут попать записи о приеме на работу в первый день след. квартала
							Продолжить;
						КонецЕсли;
						
						Если ДатаПриема > '00010101' ИЛИ ДатаУвольнения > '00010101' Тогда
							
							// это второй прием/увольнение в периоде
							// выведем строку в таблицу
							
							Если СтрокаВыведенаВОтчет Тогда
								Номер = Номер + 1;
								ВставитьДополнительнуюСтроку();
								R02G01I = R02G01I + 1;
								
								мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы);
								КолСтрок = СтруктураГруппы.Количество();
								
								ИмяНужнойЯчейкиНовойСтроки = "R" + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[1].Имя,2);
								ОбластьЯчейки = мФорма1ДФ.Области[ИмяНужнойЯчейкиНовойСтроки];
								ОбластьЯчейки.Значение = стр.ИННСотрудника;
								
								ИмяНужнойЯчейкиНовойСтроки = "R" + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + "GFIO";
								ОбластьЯчейки = мФорма1ДФ.Области[ИмяНужнойЯчейкиНовойСтроки];
								ОбластьЯчейки.Значение = стр.Сотрудник;
							Иначе
								СтрокаВыведенаВОтчет = Истина;
							КонецЕсли;
							
							ИмяНужнойЯчейкиНовойСтроки = "R" + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[7].Имя,2);
							ОбластьЯчейки = мФорма1ДФ.Области[ИмяНужнойЯчейкиНовойСтроки];
							ОбластьЯчейки.Значение = ДатаПриема;
							
							ИмяНужнойЯчейкиНовойСтроки = "R" + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[8].Имя,2);
							ОбластьЯчейки = мФорма1ДФ.Области[ИмяНужнойЯчейкиНовойСтроки];
							ОбластьЯчейки.Значение = ДатаУвольнения;
							// без этого не выгружается в XML, хотя в порядке заполнения об этом ничего не говориться
							ИмяНужнойЯчейкиНовойСтроки = "R" + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[6].Имя,2);
							ОбластьЯчейки = мФорма1ДФ.Области[ИмяНужнойЯчейкиНовойСтроки];
							ОбластьЯчейки.Значение = стр.ДоходНДФЛ;
							
						КонецЕсли;
						
						ДатаПриема 		= ЗаписьПриемУвольнение.Период;
						ДатаУвольнения  = '00010101';
						РаботалВПредыдущемПериоде = Истина;
						
					ИначеЕсли РаботалВПредыдущемПериоде
						И НЕ ЗаписьПриемУвольнение.РаботалВПериоде Тогда
						
						// дата увольнения = предыдущий день
						ДатаУвольнения = НачалоДня(ЗаписьПриемУвольнение.Период) - ?(ЭтоУТП,0,24*60*60); 
						РаботалВПредыдущемПериоде = Ложь;
						
					КонецЕсли;	
					
				КонецЦикла;
				
				Если СтрокаВыведенаВОтчет Тогда
					Номер = Номер + 1;
					ВставитьДополнительнуюСтроку();
					R02G01I = R02G01I + 1;
					
					мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы);
					КолСтрок = СтруктураГруппы.Количество();
					
					ИмяНужнойЯчейкиНовойСтроки = "R" + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[1].Имя,2);
					ОбластьЯчейки = мФорма1ДФ.Области[ИмяНужнойЯчейкиНовойСтроки];
					ОбластьЯчейки.Значение = стр.ИННСотрудника;
					
					ИмяНужнойЯчейкиНовойСтроки = "R" + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + "GFIO";
					ОбластьЯчейки = мФорма1ДФ.Области[ИмяНужнойЯчейкиНовойСтроки];
					ОбластьЯчейки.Значение = стр.Сотрудник;
				КонецЕсли;				
				
				// выведем информацию в отчет
				ИмяНужнойЯчейкиНовойСтроки = "R" + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[7].Имя,2);
				ОбластьЯчейки = мФорма1ДФ.Области[ИмяНужнойЯчейкиНовойСтроки];
				ОбластьЯчейки.Значение = ДатаПриема;
				
				ИмяНужнойЯчейкиНовойСтроки = "R" + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[8].Имя,2);
				ОбластьЯчейки = мФорма1ДФ.Области[ИмяНужнойЯчейкиНовойСтроки];
				ОбластьЯчейки.Значение = ДатаУвольнения;
				
				// без этого не выгружается в XML, хотя в порядке заполнения об этом ничего не говориться
				ИмяНужнойЯчейкиНовойСтроки = "R" + Формат(КолСтрок, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред(СтруктураГруппы.Колонки[6].Имя,2);
				ОбластьЯчейки = мФорма1ДФ.Области[ИмяНужнойЯчейкиНовойСтроки];
				ОбластьЯчейки.Значение = стр.ДоходНДФЛ;
				
			КонецЕсли;         
			
		КонецЕсли;	
		
		СотрудникПредыдущий = стр.Сотрудник;
		Номер = Номер + 1;
		
	КонецЦикла;
	ОбновитьСтруктуруМногострочныхРазделов();	
	
	мФорма1ДФ.Области.R02G02I.Значение = R02G02I;
	мФорма1ДФ.Области.R02G01I.Значение = R02G01I;
	Расчет();
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьАвто()

//===========================================
// устанавливает пометки выгрузки в таблице тбСхемыXML
Процедура  ОпределитьСписокВыгружаемыхСхем();
	Для Каждого стр Из  тбСхемыXML Цикл
		//по-умолчанию выгружаем все приложения
		стр.фВыгрузка = 1;
	КонецЦикла;
КонецПроцедуры	

//создает массив описания типов для таблицы значений со схемами XML
Функция СоздатьОписанияТипов(НазваниеТипа, Длина,Точность="")
  мас = Новый Массив;
  мас.Добавить(Тип(НазваниеТипа));
  Если Точность = "" Тогда
	 КвалифСтроки = Новый КвалификаторыСтроки(Длина,ДопустимаяДлина.Переменная); 
  Иначе
	 КвалифЧисла = Новый КвалификаторыЧисла(Длина,Точность,ДопустимыйЗнак.Неотрицательный); 
  КонецЕсли;	   
  Возврат Новый ОписаниеТипов(мас,КвалифСтроки,КвалифЧисла);
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	//ФормироватьСтруктуруСтраницОтчета();
	
	УстановитьСистемуюОбластьПечатиСтраницыОтчета(Новый Структура("ИмяТабличногоПоля","ПолеТабличногоДокументаФорма1ДФ"));
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Процедура управляет системным выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//  процедура унифицирована
Процедура УстановитьСистемуюОбластьПечатиСтраницыОтчета(СтруктураПараметровЛиста)
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
  
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	
	ТабличноеПоле = ЭлементыФормы[ИмяТабличногоПоля];
	
	Если НЕ ТабличноеПоле.Области.Найти("ПредупреждениеОПечати") = Неопределено Тогда
	    ИмяОбластиПечати = "ПредупреждениеОПечати";
	ИначеЕсли ПустаяСтрока(ИмяОбластиТаблПоля) Тогда
		ИмяОбластиПечати = "";
	Иначе
		ИмяОбластиПечати = ИмяОбластиТаблПоля;
	КонецЕсли;
	
	ТабличноеПоле.ОбластьПечати = ТабличноеПоле.Области.Найти(ИмяОбластиПечати);
	
КонецПроцедуры // ВывестиНаПечатьЛист()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	Если ЭлементМеню.Кнопки.Количество() = 0 Тогда
	
		ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
									НСтр("ru='Печатать сразу';uk='Друкувати відразу'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

		ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
									НСтр("ru='Предварительный просмотр';uk='Попередній перегляд'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
									
		ЭлементМеню.Кнопки.Добавить("Разделитель1", ТипКнопкиКоманднойПанели.Разделитель);

		ЭлементМеню.Кнопки.Добавить("ЕстьДуплекс", ТипКнопкиКоманднойПанели.Действие,
									НСтр("ru='Принтер поддерживает автом. дуплекс';uk='Принтер підтримує автом. дуплекс'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
									
		ЭлементМеню.Кнопки.ЕстьДуплекс.Пометка = ЕстьДуплекс;
	
	КонецЕсли;

	ЛинияСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЛинияПусто = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);

	мМассивТиповЛиний = Новый Массив();
	мМассивТиповЛиний.Вставить(0, ЛинияПусто);
	мМассивТиповЛиний.Вставить(1, ЛинияСнизу);

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	Перем ИсходноеКоличествоСтрокГруппы;
	
	ЭтаФорма.АвтоЗаголовок = Ложь;
	мФорма1ДФ = ЭлементыФормы.ПолеТабличногоДокументаФорма1ДФ;
	мСлужебныеДанные = ЭлементыФормы.ПолеТабличногоДокументаСлужебныеДанные;
	ТекТабличноеПоле = мФорма1ДФ;

	Если мСохраненныйДок = Неопределено Тогда
		
		ЗаполнитьСведенияОбОрганизации();
		
		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			ТекТабличноеПоле = мФорма1ДФ;
			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл
				СтрокаГруппы = СтруктураГруппы.Добавить();
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяКолонки    = Колонка.Имя;
					КодПоказателя    = Сред (ИмяКолонки,1,1) + Формат(НСтр, "ЧЦ=4; ЧВН=; ЧГ=0") + Сред (ИмяКолонки,2,СтрДлина(ИмяКолонки)-1);
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];
					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;
					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			ЗаполнитьСведенияОбОрганизации();
			мФорма1ДФ.Области.HZ.Значение = "Х";
			мСлужебныеДанные.Области.C_DOC_STAN.Значение = 1;			

			ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
			
			ЭлементыФормы.НадписьПредыдущийМесяц.Заголовок 	= Формат(НачалоКвартала(мДатаНачалаПериодаОтчета)-1,"ДФ=MMMM");
			ЭлементыФормы.НадписьТекущийМесяц.Заголовок 	= Формат(КонецКвартала(мДатаНачалаПериодаОтчета),   "ДФ=MMMM");
			
			//ВыплатыЗПНеРегулярны = Истина;
			мВыплатыЗПНеРегулярны = ВосстановитьЗначение("РегламентированнаяОтчетность_1ДФ_ВыплатыЗПНеРегулярны");
			Если мВыплатыЗПНеРегулярны = Неопределено Тогда
				ВыплатыЗПНеРегулярны = Истина;
			Иначе
				ВыплатыЗПНеРегулярны = мВыплатыЗПНеРегулярны;
			КонецЕсли;
			
			ЧислоВыплатыЗП = ВосстановитьЗначение("РегламентированнаяОтчетность_1ДФ_ЧислоВыплатыЗП");
			Если        ЧислоВыплатыЗП = Неопределено
				ИЛИ НЕ (ТипЗнч(ЧислоВыплатыЗП) = Тип("Число"))
				ИЛИ ЧислоВыплатыЗП = 0 Тогда
				ЧислоВыплатыЗП = 10;
			КонецЕсли;
			
			ДатаВыплатыНач = НачалоКвартала(мДатаКонцаПериодаОтчета) + ЧислоВыплатыЗП*86400 - 1;
			ДатаВыплатыКон = КонецКвартала(мДатаКонцаПериодаОтчета)  + ЧислоВыплатыЗП*86400;
		КонецЕсли;
	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
	КонецЕсли;
	
	ПоказатьПериод();
	
	ОбновитьСлужебныеДанные();
	
	мФорма1ДФ.ТолькоПросмотр = Истина;
	
	СоздатьТаблицуСоСхемамиВыгрузки();
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность = Истина Тогда

		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения ?';uk='Дані були змінені. Зберегти зміни ?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;
    СохранитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс", ЕстьДуплекс);

	//ВыплатыЗПНеРегулярны = Истина;
	СохранитьЗначение("РегламентированнаяОтчетность_1ДФ_ВыплатыЗПНеРегулярны", 	ВыплатыЗПНеРегулярны);
	СохранитьЗначение("РегламентированнаяОтчетность_1ДФ_ЧислоВыплатыЗП", 		День(ДатаВыплатыКон));
	
КонецПроцедуры // ПередЗакрытием()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	// Заглушка
	//ЗаполнитьДемо();
	
	//Сначала очистим отчет и удалим добавленные строки многострочной области
	Очистить();
	
	//Снова заполним сведения об организации
	ЗаполнитьСведенияОбОрганизации();
	
	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Если Найти(Кнопка.Имя, "Дуплекс") >0 Тогда
		     ЕстьДуплекс    = НЕ Кнопка.Пометка;
			 Кнопка.Пометка = НЕ Кнопка.Пометка;
		Иначе
			 Печать(Кнопка.Имя);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;
	

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

 // Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

//	мФорма1ДФ.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа.
//   Устанавливает признак модифицированности данных в форме, вызывает пересчет
// вычисляемых показателей  табличных полей и обновляет структуру данных
// многострочного раздела.
//
Процедура ПолеТабличногоДокументаФорма1ДФПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	Расчет();
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаБалансПриИзменении()

Процедура КнопкаДобавитьДопСтрокиФорма1ДФНажатие(Элемент)
	// Вставить содержимое обработчика.
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиФорма1ДФНажатие(Элемент)
	// Вставить содержимое обработчика.
	УдалитьДополнительнуюСтроку();
	Расчет();
КонецПроцедуры

Процедура КоманднаяПанельДействийДействиеXML(Кнопка) Экспорт
  Перем спДанныеОтчета, спПараметры;
  Перем НужнаяСтруктура;
  
  Если Модифицированность И НЕ Сохранить() Тогда
	  Возврат;
  КонецЕсли;

  //Создадим структуру со списком параметров для передачи их в обработку выгрузки
  спПараметры = Новый Структура();
  спПараметры.Вставить("Команда","ЭкспортXML"); //Операция
  
  ОпределитьСписокВыгружаемыхСхем();
  спПараметры.Вставить("Схемы",тбСхемыXML );	//Схемы (правила) выгрузки. Определеяются ГНАУ
  
  // обновляем структуру многострочных разделов
  ОбновитьСтруктуруМногострочныхРазделов();
		
  // формируем данные редактируемых ячеек таблицы
  ДанныеОтчета = Новый Структура();
  
  Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
	  
	  ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
	  ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
	  
	  ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	  ДанныеОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	  
  КонецЦикла;
  
  // вставляем данные  ячеек таблицы	
  спПараметры.Вставить("ДанныеОтчета",ДанныеОтчета);
  
  // вставляем данные многострочных разделов
  спПараметры.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);
  КаталогДанныхФирмы = Организация.НаименованиеПолное;
  спПараметры.Вставить("КаталогДанныхФирмы",КаталогДанныхФирмы); //каталог для сохранения выгрузки
  
  ОбработкаЭкспортXML = РегламентированнаяОтчетность.РеглОтчеты("РегламентированныйОтчетМастерВыгрузкиРегламентированнойОтчетности",Истина);
  // проверим корректность заполнения отчета (обязательные поля и группы полей)
  Ошибка = ПроверитьКорректностьЗаполненияОтчета(ДанныеОтчета, ОбработкаЭкспортXML);
  Если Ошибка = Истина Тогда
	  Возврат;
  КонецЕсли;
  
  ИдФормы = "Форма";   
	  
  ФормаОбр = ОбработкаЭкспортXML.ПолучитьФорму(ИдФормы,ЭтаФорма);
  ФормаОбр.спПараметры = спПараметры; 
  ФормаОбр.ИмяНужногоОтчета = "РегламентированныйОтчетФорма1ДФ";
  
  ФормаОбр.тбСхемы = спПараметры.Схемы;
  ФормаОбр.Открыть();
  
  ФормаОбр.Объект = ЭтотОбъект;
  ФормаОбр.Док    = мСохраненныйДок;

КонецПроцедуры

Процедура КоманднаяПанельДействийДействиеDBF(Кнопка)
	СохранитьвФорматеDBF();
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаФорма1ДФHZПриИзменении(Элемент)
	мСлужебныеДанные.Области.C_DOC_STAN.Значение = 1;
	мФорма1ДФ.Области.HZN.Значение = "";
	мФорма1ДФ.Области.HZU.Значение = "";	
КонецПроцедуры

Процедура ПолеТабличногоДокументаФорма1ДФHZNПриИзменении(Элемент)
	мСлужебныеДанные.Области.C_DOC_STAN.Значение = 2;
	мФорма1ДФ.Области.HZ.Значение = "";
	мФорма1ДФ.Области.HZU.Значение = "";	
КонецПроцедуры

Процедура ПолеТабличногоДокументаФорма1ДФHZUПриИзменении(Элемент)
	мСлужебныеДанные.Области.C_DOC_STAN.Значение = 3;
	мФорма1ДФ.Области.HZN.Значение = "";
	мФорма1ДФ.Области.HZ.Значение = "";	
КонецПроцедуры

Процедура ВыплатыЗПНеРегулярныПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

Процедура УстановитьВидимость();
	
	ЭлементыФормы.НадписьДатаВыплатыНач.Доступность 	= НЕ ВыплатыЗПНеРегулярны;
	ЭлементыФормы.НадписьДатаВыплатыКон.Доступность 	= НЕ ВыплатыЗПНеРегулярны;
	ЭлементыФормы.НадписьДатаВыплатыКон1.Доступность 	= НЕ ВыплатыЗПНеРегулярны;
	ЭлементыФормы.НадписьДатаВыплатыНач1.Доступность 	= НЕ ВыплатыЗПНеРегулярны;
	ЭлементыФормы.НадписьДатаВыплатыКон2.Доступность 	= НЕ ВыплатыЗПНеРегулярны;
	ЭлементыФормы.НадписьДатаВыплатыНач2.Доступность 	= НЕ ВыплатыЗПНеРегулярны;
	ЭлементыФормы.НадписьПредыдущийМесяц.Доступность	= НЕ ВыплатыЗПНеРегулярны;
	ЭлементыФормы.НадписьТекущийМесяц.Доступность 		= НЕ ВыплатыЗПНеРегулярны;
	
	ЭлементыФормы.ДатаВыплатыНач.Доступность	= НЕ ВыплатыЗПНеРегулярны;
	ЭлементыФормы.ДатаВыплатыКон.Доступность 	= НЕ ВыплатыЗПНеРегулярны;
	
	ЭлементыФормы.НеВключатьЧПников.Видимость = ЗначениеЗаполнено(Подразделение);
	
КонецПроцедуры

Процедура ПодразделениеПриИзменении(Элемент)
	
	Если НЕ Подразделение = мПодразделение Тогда
	
		Сообщить(НСтр("ru = 'Необходимо перезаполнить отчет!'; uk = 'Необхідно перезаповнити звіт!'"), СтатусСообщения.Внимание);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		НеВключатьЧПников = Истина;	
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	мПодразделение = Подразделение;
КонецПроцедуры

Функция СформироватьДанныеДляЗвит1С() Экспорт 
	
	мСохраненныйДок   = Неопределено;	
	мСкопированаФорма = Неопределено;
	
	ПередОткрытием(Ложь, Истина);
	ПриОткрытии();
	
	Очистить();
	ЗаполнитьСведенияОбОрганизации();
	ЗаполнитьАвто();
	
	Если мМенеджерЗвит1С.ФлагОтладки Тогда
		ЭтаФорма.ОткрытьМодально();
	КонецЕсли;
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	// расшифровка
	Попытка
		ВЫПОЛНИТЬ("СписокСохранения.Вставить(""РасшифровкаОтчета"", СпП);");
	Исключение КонецПопытки;
	
	ПоказателиОтчета = Новый Структура();
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	КонецЦикла;

	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции

Процедура СортироватьПоФИОПриИзменении(Элемент)
	Сообщить(НСтр("ru = 'Необходимо перезаполнить отчет!'; uk = 'Необхідно перезаповнити звіт!'"), СтатусСообщения.Внимание);
КонецПроцедуры

Процедура ПолеТабличногоДокументаФорма1ДФR28C3НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаФорма1ДФ.ТекущаяОбласть;
	ТекущийНомерСтроки = Сред(ТекущаяОбласть.Имя,2,4);
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбораТипа = Новый СписокЗначений;
	СписокВыбораТипа.Добавить("ФизическиеЛица", НСтр("ru = 'Физ. лица                      '; uk = 'Фіз. особи                      '"));
	СписокВыбораТипа.Добавить("Контрагенты", НСтр("ru = 'Контрагенты                      '; uk = 'Контрагенти                      '"));
	
	ЗначениеВыбора = ЭтаФОрма.ВыбратьИзСписка(СписокВыбораТипа,ЭлементыФормы.ПолеТабличногоДокументаФорма1ДФ);
	Если ЗначениеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = Справочники[ЗначениеВыбора.Значение].ПолучитьФорму("ФормаВыбора");
	ФормаВыбора.РежимВыбора = Истина;
	
	РезультатВыбора = ФормаВыбора.ОткрытьМодально();
	Если НЕ РезультатВыбора = Неопределено Тогда
		
		Если НЕ РезультатВыбора.ЭтоГруппа Тогда
			Элемент.Значение = ?(ЗначениеВыбора.Значение = "ФизическиеЛица", РезультатВыбора.КодПоДРФО, РезультатВыбора.КодПоЕДРПОУ);	
			ТекущаяОбласть.Значение = ?(ЗначениеВыбора.Значение = "ФизическиеЛица", РезультатВыбора.КодПоДРФО, РезультатВыбора.КодПоЕДРПОУ);	
			ЭлементыФормы.ПолеТабличногоДокументаФорма1ДФ.Области["R" + ТекущийНомерСтроки + "GFIO"].Значение = РезультатВыбора;		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ


ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповЧисло2 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(2,0);

ОписаниеТиповЧисло3 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,0);


ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1 = "R";
// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
//нужна редакция в зависимости от структуры многострочных групп приложений декларации

КолИсхСтрокИдГруппы1 = 1;

СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("RG01",  ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("RG02",  ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("RG03A", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("RG03",  ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("RG04A", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("RG04",  ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("RG05",  ОписаниеТиповЧисло2);
СтруктураГруппы1.Колонки.Добавить("RG06D", ОписаниеТиповДата);
СтруктураГруппы1.Колонки.Добавить("RG07D", ОписаниеТиповДата);
СтруктураГруппы1.Колонки.Добавить("RG08",  ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("RG09",  ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("RGFIO",  ОписаниеТиповСтрока);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);


//списрк значений для разбиения по страницам многострочной части отчета
//при его печати
спПараметрыСтраницы = Новый Структура;
спПараметрыСтраницы.Вставить("КвоСтрокНаСтранице",61);
спПараметрыСтраницы.Вставить("ВысотаОснШапки",19);
спПараметрыСтраницы.Вставить("ВысотаДопШапки",7);
спПараметрыСтраницы.Вставить("ВысотаПодвала",23);
спПараметрыСтраницы.Вставить("КоличествоСтрокТаблицыНаЕдинстеннойСтранице",18);

                                         
// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

мСоставПоказателей = "СоставПоказателей";

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
//мВерсияФормы = "30/09/2003";
//мВерсияФормы = "01/06/2008";
мВерсияФормы = "01/12/2009";

// Код отчета, равен коду по ОКУД
мКодОтчета   = "0710001";

мПечатныеФормы = Новый СписокЗначений;
ЕстьДуплекс = ВосстановитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс");
Если НЕ ТипЗнч(ЕстьДуплекс) = Тип("Булево") Тогда
	ЕстьДуплекс = Ложь;	
КонецЕсли;


СпП = Новый ТаблицаЗначений;
СпП.Колонки.Добавить("НомСтроки");
СпП.Колонки.Добавить("ИмяЯчейки");
СпП.Колонки.Добавить("ИмяПоказателя");
СпП.Колонки.Добавить("ЗнакОперации");
СпП.Колонки.Добавить("ИмяСлагаемого");
СпП.Колонки.Добавить("Сумма");
СпП.Колонки.Добавить("КодСчета");
СпП.Колонки.Добавить("КодКорСчета");
СпП.Колонки.Добавить("ДатаНачала");
СпП.Колонки.Добавить("ДатаКонца");
СпП.Колонки.Добавить("Сдвиг");
СпП.Колонки.Добавить("Раздел");
СпП.Колонки.Добавить("Страница");
СпП.Колонки.Добавить("МнЧ");
СпП.Колонки.Добавить("СтрокаПП");
СпП.Колонки.Добавить("Субконто1");
СпП.Колонки.Добавить("Субконто2");
СпП.Колонки.Добавить("Субконто3");
