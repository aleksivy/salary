////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
//каждая закладка отчета - это объект ПолеТабличногоДокумента
Перем мОтчетПФ;


Перем мСоставПоказателей Экспорт;

//хранит нужные статьи налоговых деклараций
Перем МассивНужныхСтатей;

// переменный для хранения бухгалтерских итогов
Перем мБухИтоги, мБухИтогиРС, мБухИтогиКорРС;


// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;


Перем мИдГруппы1;
Перем мИдГруппы2;
// хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

Перем  КолИсхСтрокИдГруппы1, КолИсхСтрокИдГруппы2 ; 
// хранит код отчета по КНД
Перем мКодОтчета;



// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы;

Перем ТбСхемыАРМЗС;

Перем БольничныеПредприятие,БольничныеФСС;

Перем ОписаниеТиповЧисло;

Перем СтрокиДекларации;

Перем Счет65_1,Счет66,Счет66_1,Счет66_2,Счет66_3,Счет65_2,Счет65_6,Счет81_5,Счет91,Счет92,Счет93,Счет301;

Перем П1_1_2;

Перем мПечатныеФормы Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2008Фев");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	//ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()


// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по дебету счета, указанного в параметре.
//
Функция СНД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНД()

// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - конечный остаток по дебету счета, указанного в параметре.
//
Функция СКД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНД()


// Функция вычисляет начальный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по кредиту счета, указанного в параметре.
//
Функция СНК(Счет)

	Перем Итог;

	Возврат мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНК()

// Функция вычисляет начальный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по кредиту счета, указанного в параметре.
//
Функция СКК(Счет)

	Перем Итог;

	Возврат мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКК()

// Функция вычисляет кредитовый оборот счета, указанного в качестве параметра 
Функция КО(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // КО()

// Функция вычисляет перекрестный оборот в дебет счета, указанного в качестве 
// первого параметра функции, с кредита счета, указанного в качестве второго 
// параметра. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  СчетД        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот в дебет счета;
//  СчетК        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот с кредита счета.
//
// Возвращаемое значение:
//  Число        - сумма перекрестного оборота.
//
Функция ОБ(СчетД, СчетК)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);

	Возврат Итог;

КонецФункции // ОБ()


// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураПоказателейВнутрСвязи = Новый Структура;

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2008Фев");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2008Фев");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий параметры автозаполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки параметров автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии формы для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя, а в текущей - отключено.
							// В этом случае удаляем ячейку из таблицы пользовательских настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()


// Процедура управляет системным выводом отдельных страниц отчета на печать.
//
// Параметры:
//  
//  процедура унифицирована

Процедура УстановитьСистемуюОбластьПечатиСтраницыОтчета()
	
	ТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокументаОтчетПФ"];
	ТабличноеПоле.ОбластьПечати = ТабличноеПоле.Области.Найти("ПредупреждениеОПечати");	
	
КонецПроцедуры  	

// Процедура управляет показом в форме периода построения отчета,
Процедура ПоказатьПериод()

	ПериодОтчета = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'");
	
	// Период в заголовке отчета
	мОтчетПФ.Области.ПериодОтчета.Значение   = "за " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг р.';Л = uk_UA");
	
	мОтчетПФ.Области.ПериодОтчетаПриложение.Значение   = "за " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг р.';Л = uk_UA");
		
	//П_ставка = ?((Год(мДатаНачалаПериодаОтчета) - 2004)*10<=100,(Год(мДатаНачалаПериодаОтчета) - 2004)*10,100);
	//мОтчетПФ.Области.П_ставка.Значение = П_ставка;
	//

	// Период в заголовке отчета
	// Для показа периода в заголовке берется текст из заголовка основной формы
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' (за %1 г.)';uk=' (за %1 р.)'"), Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'")); 
	

	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	
	мОтчетПФ.Области.ДеньДаты.Значение 	= ЧастиДатыПодписи.День;
	мОтчетПФ.Области.МесяцДаты.Значение = ЧастиДатыПодписи.Месяц;
	мОтчетПФ.Области.ГодДаты.Значение 	= ЧастиДатыПодписи.ПоследняяЦифраГода;

КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
Процедура ЗаполнитьСведенияОбОрганизации()

	ОргНазв = Организация.НаименованиеПолное;
	мОтчетПФ.Области.ОргНазв.Значение = ОргНазв;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","ФормаСобственности");
    СписокПоказателей.Добавить("","НомерРегистрацииПФ");
	
	ФИОДиректора       = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СписокПоказателей).ФИОРук;
	ФИОГлавБуха        = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СписокПоказателей).ФИОБух;
	КодЕДРПОУ          = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодПоЕДРПОУ;
	ФормаСобственности = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФормаСобственности;
	НомерРегистрацииПФ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).НомерРегистрацииПФ;
	
	мОтчетПФ.Области.Директор.Значение = ФИОДиректора;
	мОтчетПФ.Области.ОргБухгалтер.Значение = ФИОГлавБуха; 
	мОтчетПФ.Области.ГлавБух.Значение = ФИОГлавБуха; 
	мОтчетПФ.Области.ОргКодЕДРПОУ.Значение = КодЕДРПОУ;
	мОтчетПФ.Области.ОргФормаСобственности.Значение = ФормаСобственности;
	мОтчетПФ.Области.НомерРегистрацииПФ.Значение = НомерРегистрацииПФ;

	мОтчетПФ.Области.Адрес.Значение   = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
	мОтчетПФ.Области.Телефон.Значение = УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	
	ДопСведенияОбОрганизации        = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, мДатаНачалаПериодаОтчета, "uk");
	мОтчетПФ.Области.РС.Значение    = ДопСведенияОбОрганизации.НомерСчета;
	мОтчетПФ.Области.Банк.Значение  = ДопСведенияОбОрганизации.Банк;
	мОтчетПФ.Области.МФО.Значение   = ДопСведенияОбОрганизации.МФО;

	
	Если Не РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП" Тогда
		СхемаНалогообл = Справочники.СхемыНалогообложения.НеПлательщик;
		УчетнаяПолитикаНеЗадана = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(мДатаНачалаПериодаОтчета, УчетнаяПолитикаНеЗадана, Организация, "Нал");
		Если НЕ УчетнаяПолитикаНеЗадана Тогда 
			СхемаНалогообл = УчетнаяПолитика.СхемаНалогообложения;
		КонецЕсли;
	Иначе
	  //Пользователь сам должен заполнить  поле СистемуНалогообложения
	КонецЕсли;
	ПоказатьПериод();
   
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(НСтр("ru='Отчет в ПФ: при выводе сумм в гривнях точность не может превышать 2 знака';uk='Звіт у ПФ: при виведенні сум у гривнях точність не може перевищувати 2 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(НСтр("ru='Отчет в ПФ: при выводе сумм в тысячах гривень точность не может превышать 3 знака';uk='Звіт у ПФ: при виведенні сум у тисячах гривень точність не може перевищувати 3 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(НСтр("ru='Отчет в ПФ: при выводе сумм в миллионах гривень точность не может превышать 6 знаков';uk='Звіт у ПФ: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

	Сообщить(НСтр("ru='После изменения формата вывода значений, для корректного расчета итогов необходимо перезаполнить отчет!';uk='Після зміни формату виводу значень, для корректного розрахунку підсумків треба перезаполвнити звіт!'"), СтатусСообщения.Внимание);	
	
КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=2; ЧС = 0";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=2; ЧС = 3";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=2; ЧС = 6";

	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "ОтчетПФ";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

//Выбор схемы выгрузки
Процедура  ОпределитьСписокВыгружаемыхСхем();
	Для Каждого стр Из ТбСхемыАрмЗс Цикл
		//по-умолчанию выгружаем все приложения
		стр.фВыгрузка = 1;
	КонецЦикла;
КонецПроцедуры

// Обновляет пользовательские настройки при изменении версии формы.
// унифицирована, однако использование пока ... вопрос
Процедура ОбновитьПользовательскиеНастройки(СписокСохранения)
    Перем ПоказателиОтчета, СтруктураГруппы1,ТаблицаВариантовЗаполнения,СтруктураПоказателейСтраницы;
	Перем МассивВариантовЗаполненияСтраниц ;
	Перем Мес1,Мес2,Мес3,Мес4, СУМП,СУМБ;
	Сообщить(НСтр("ru='Измененилась версия формы отчета."
"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
"Виконується відновлення користувльницьких настройок.'"), СтатусСообщения.Информация);
    МассивСтрокДляУдаления = Новый Массив;
	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	ВерсияФормы = СписокСохранения.ВерсияФормы;
	Если ВерсияФормы = "30/09/2003" Тогда 
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1,СтруктураГруппы1);
		СписокСохранения.Свойство("ПоказателиОтчета",ПоказателиОтчета);
		ПоказателиОтчета.Свойство("ПолеТабличногоДокументаОтчетПФ",СтруктураПоказателейСтраницы);
		
		
		НоваяСтрока = СтруктураГруппы1.Добавить();
		Если  Не СтруктураПоказателейСтраницы.Свойство("Мес_1",Мес1) Тогда 
			Мес1="";
		Иначе
			СтруктураПоказателейСтраницы.Удалить("Мес_1");
		КонецЕсли;	
		СтруктураПоказателейСтраницы.Свойство("СУМП_1",СУМП); 
		СтруктураПоказателейСтраницы.Удалить("СУМП_1"); 

		СтруктураПоказателейСтраницы.Свойство("СУМБ_1",СУМБ);
		СтруктураПоказателейСтраницы.Удалить("СУМБ_1"); 
		НоваяСтрока.Т1КМес_  = Мес1;
		НоваяСтрока.Т1КСУМП_ = СУМП;
		НоваяСтрока.Т1КСУМБ_ = СУМБ;
		
		НоваяСтрока = СтруктураГруппы1.Добавить();
		Если Не СтруктураПоказателейСтраницы.Свойство("Мес_2",Мес2) Тогда 
			Мес2="";
		Иначе
			СтруктураПоказателейСтраницы.Удалить("Мес_2");

		КонецЕсли;	
		СтруктураПоказателейСтраницы.Свойство("СУМП_2",СУМП); 
		СтруктураПоказателейСтраницы.Удалить("СУМП_2"); 
		
		СтруктураПоказателейСтраницы.Свойство("СУМБ_2",СУМБ);
		СтруктураПоказателейСтраницы.Удалить("СУМБ_2"); 
		НоваяСтрока.Т1КМес_  = Мес2;
		НоваяСтрока.Т1КСУМП_ = СУМП;
		НоваяСтрока.Т1КСУМБ_ = СУМБ;

		НоваяСтрока = СтруктураГруппы1.Добавить();
		Если  Не СтруктураПоказателейСтраницы.Свойство("Мес_3",Мес3) Тогда 
			Мес3="";
		Иначе
			СтруктураПоказателейСтраницы.Удалить("Мес_3");

		КонецЕсли;	
		СтруктураПоказателейСтраницы.Свойство("СУМП_3",СУМП); 
		СтруктураПоказателейСтраницы.Удалить("СУМП_3"); 
		
		СтруктураПоказателейСтраницы.Свойство("СУМБ_3",СУМБ);
		СтруктураПоказателейСтраницы.Удалить("СУМБ_3"); 
		НоваяСтрока.Т1КМес_  = Мес3;
		НоваяСтрока.Т1КСУМП_ = СУМП;
		НоваяСтрока.Т1КСУМБ_ = СУМБ;
		
		НоваяСтрока = СтруктураГруппы1.Добавить();
		Если Не СтруктураПоказателейСтраницы.Свойство("Мес_4",Мес4) Тогда 
			Мес4="";
		Иначе
			СтруктураПоказателейСтраницы.Удалить("Мес_4");

		КонецЕсли;	
		СтруктураПоказателейСтраницы.Свойство("СУМП_4",СУМП); 
		СтруктураПоказателейСтраницы.Удалить("СУМП_4"); 
		СтруктураПоказателейСтраницы.Свойство("СУМБ_4",СУМБ);
		СтруктураПоказателейСтраницы.Удалить("СУМБ_4");
		
		НоваяСтрока.Т1КМес_  = Мес4;
		НоваяСтрока.Т1КСУМП_ = СУМП;
		НоваяСтрока.Т1КСУМБ_ = СУМБ;


		
		
		
		Если мСтруктураВариантыЗаполнения.Свойство("ОтчетПФ", МассивВариантовЗаполненияСтраниц) Тогда
			НомерТекущейСтраницы         = 1;
			ТаблицаВариантыЗаполнения    = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
			//НайденаяСтрока               = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя,"КодПоказателя");
			//СтруктураПоиска = Новый Структура(КодПоказателя,"Пр")
			//ТаблицаВариантыЗаполнения.Найти()
			//
			Для Каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл 
				ИмяПоказателя = СтрокаТаблицы.КодПоказателя;
				Если (Сред(ИмяПоказателя,1,4) = "Мес_") Или (Сред(ИмяПоказателя,1,4) = "СУМП") Или (Сред(ИмяПоказателя,1,4) = "СУМБ") Тогда  
					Позиция_ = Найти(ИмяПоказателя,"_");
					СтрокаТаблицы.КодПоказателя = мИдГруппы1 + Лев(ИмяПоказателя,Позиция_) + "0" + Прав(ИмяПоказателя,1);
					МассивСтрокДляУдаления.Добавить(СтрокаТаблицы);
					
				КонецЕсли;	
				
			КонецЦикла;
			Для Каждого  ЭлементМассиваСтрокДляУдаления  ИЗ МассивСтрокДляУдаления Цикл
				ТаблицаВариантыЗаполнения.Удалить(ЭлементМассиваСтрокДляУдаления);
			КонецЦикла;	
		КонецЕсли; 
		
		
		Модифицированность = Истина;
		
		мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1,СтруктураГруппы1);
		
		СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);
	КонецЕсли; 
	
	Если ЕстьИзмененияВариантыЗаполнения  Тогда
		
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить(НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Оновлення користувальницьких настройок успішно завершене!'"));

	Иначе

		Сообщить(НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі користувальницьких настройок не виявлені!'"));

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()


// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ИмяТекущейСтраницыПанели  = "ОтчетПФ";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетПФ";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетПФ";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет();
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		
		// Очищаем комментарий редактируемой ячейки
		ТекущаяОбласть.Примечание.Текст = "";

	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетПФ";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетПФ";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя)

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("ОтчетПФ");
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	мОтчетПФ.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить()
   Перем ИсходноеКоличествоСтрокГруппы;
   
    // Очищаем содержимое ячеек поля табличного документа
	ТекТабличноеПоле = мОтчетПФ;
	ОчиститьТабличноеПоле(ТекТабличноеПоле);

	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

		ИмяГруппы        = ЭлементСтруктуры.Ключ;
		СтруктураГруппы  = ЭлементСтруктуры.Значение;
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = СтруктураГруппы.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их

			НСтр = СтруктураГруппы.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
				
				ИмяПервойКолонки = СтруктураГруппы.Колонки[0].Имя;
								
				ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + Формат(НСтр,"ЧЦ=2;ЧВН=0;ЧГ=;") ;

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				// Определим область удаляемой строки
				УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

				// непосредственно удаляем область строки табличного документа
				ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

				// удаляем из структуры многострочного раздела соответствующую строку
				СтруктураГруппы.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();
	
	// Выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

КонецПроцедуры // Очистить()

Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для обоих многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		    НСтрНов = НСтр + 1;
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				ИмяКолонки    = Колонка.Имя;
				ИмяЯчейки     = ИмяКолонки + Формат(НСтр,"ЧЦ=2;ЧВН=0;ЧГ=;");
				ИмяНовОбластиЯчейки = ИмяКолонки + Формат(НСтрНов,"ЧЦ=2;ЧВН=0;ЧГ=;");
						
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейки.СодержитЗначение Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;

				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

			КонецЦикла;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

Процедура РазбитьПечатнуюФорму(ПечФорма)
	
	ИмяФормы = НСтр("ru='Отчет в ПФ';uk='Звіт у ПФ'");
	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = Ложь;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	
	Сч = 0;
	Пока Сч < ПечФорма.ВысотаТаблицы Цикл
		 Сч = Сч + 1;
		 
		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			
			// проверим, не должна ли предпоследняя строка печататься вместе со текущей ("не влезшей") строкой.
			// если так, то "откатимся" вверх
			Пока ПослВерх < Сч-1 И ПечФорма.ПолучитьОбласть(Сч-1, , Сч-1, ).Область().ВместеСоСледующим Цикл
			  Сч = Сч - 1;
			КонецЦикла; 
			
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = Ложь;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = Ложь;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		НовТаблДок = Новый ТабличныйДокумент();
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = Ложь;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;

	
КонецПроцедуры

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати)
    мПечатныеФормы.Очистить();
	
	ПечатнаяФорма = Новый ТабличныйДокумент();

	ОбластьПечати = мОтчетПФ.ПолучитьОбласть("Шапка");
	ПечатнаяФорма.Вывести(ОбластьПечати);
	
	ОбластьПечати = мОтчетПФ.ПолучитьОбласть("ОтчетПФ");
	ПечатнаяФорма.Вывести(ОбластьПечати);
	
	ОбластьПечати = мОтчетПФ.ПолучитьОбласть("Подвал");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Ложь;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;

//	Если ВидПечати = "ПоказатьБланк" Тогда
//		ПечатнаяФорма.Показать(СокрП(ЭтаФорма.Заголовок));
//	ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
//		ПечатнаяФорма.Напечатать();
//	КонецЕсли;

	РазбитьПечатнуюФорму(ПечатнаяФорма);
	
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
КонецПроцедуры // Печать()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//  актуально только для отчетов, содержащих многострочные разделы
//  похоже а ее унифицированность
//вернуться с многострочніми разделами - приложения К1/2
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы)
	Перем ТекТабличноеПоле;
	
	// Так как у нас одно табличное поле - его и возвращаем
	ТекТабличноеПоле = мОтчетПФ;
	
	
	Возврат ТекТабличноеПоле;
	
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
// актуально только для отчетов, содержащих многострочные разделы
//  похоже а ее унифицированность
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()
	Перем ИмяГруппы;
	
	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокументаОтчетПФ"].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;
	
	Если Сред (ИмяПоказателя,1,3) = "Т1К" Тогда
			ИмяГруппы = мИдГруппы1;
	//ИначеЕсли Сред (ИмяПоказателя,1,3) = "Т2К" Тогда
	//		ИмяГруппы = мИдГруппы2;
	КонецЕсли;

		
	Возврат ИмяГруппы;
	
КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()


// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  похоже унифицирована, используется при  восстановлении сохраненных данных
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;
			
			// определяем имя первой ячейки последней из исходных строк
		
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + Формат(НомИсходнойСтроки,"ЧЦ=2;ЧВН=0;ЧГ=;");
		
			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// переопределяем имена вставленной области
			НомерКолонки = 0;
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				

				ИмяОбластиЯчейки    = ИмяКолонки + Формат(НомИсходнойСтроки,"ЧЦ=2;ЧВН=0;ЧГ=;");
				ИмяНовОбластиЯчейки = ИмяКолонки + Формат(НомНовойСтроки,"ЧЦ=2;ЧВН=0;ЧГ=;");

		
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ОбластьЯчейки.Очистить();
					
				КонецЕсли;

				НомерКолонки = НомерКолонки+1;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
			ИмяКолонки          = КолонкаТаблицы.Имя;

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;

		//   Если (ТекТабличноеПоле = мПриложение1) Тогда
				ИмяЯчейки    =ИмяКолонки + Формат(НомерСтрокиВФормеТаблицы,"ЧЦ=2;ЧВН=0;ЧГ=;");
		//	КонецЕсли;
					
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				//ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить() Экспорт
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;


	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.

		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;

		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();

	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.Периодичность			   = Периодичность;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	//Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

	//	ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
	//	ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

	//	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	//	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	//КонецЦикла;

	//ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаОтчетПФ";
	//ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекТабличноеПоле        = мОтчетПФ;

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		СписокСохранения.Вставить("ТаблицаВРБольничные", ТаблицаВРБольничные);
		СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничные", ТаблицаВРБольничные.ВыгрузитьКолонку("ВидРасчета"));	
		
		мСоостветствиеБольничныеЗаСчетПредприятия = Новый Соответствие();
		Для каждого Стр Из ТаблицаВРБольничные  Цикл
			мСоостветствиеБольничныеЗаСчетПредприятия.Вставить(Стр.ВидРасчета, Стр.ЗаСчетПредприятия);	
		КонецЦикла;
		СохранитьЗначение("РегламентированнаяОтчетность_СоостветствиеБольничныеЗаСчетПредприятия", мСоостветствиеБольничныеЗаСчетПредприятия);	
	КонецЕсли;

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	Модифицированность = Ложь;

	Возврат Истина;
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	// восстанавливаем реквизиты отчета
	Организация              = мСохраненныйДок.Организация;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
    ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();


	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки(СписокСохранения);
		КонецЕсли;
	КонецЕсли;
	
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;


	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		// только для бухгалтерии
		мТаблицаВРБольничные = Неопределено;
		СписокСохранения.Свойство("ТаблицаВРБольничные", мТаблицаВРБольничные);
		
		Если мТаблицаВРБольничные = Неопределено Тогда
			// попробуем поднять значение общее для регл. отчетности
			мТаблицаВРБольничные = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничные");	
		     
			Если НЕ мТаблицаВРБольничные = Неопределено Тогда
				// построим таблицу из двух общих параметров
				// один - массив видов расчетов (общий для персонификации и отчета)
				// второй - соответствие - кто из видов расчетов является оплатой первых пяти дней (за счет предприятия)
				мСоостветствиеБольничныеЗаСчетПредприятия = ВосстановитьЗначение("РегламентированнаяОтчетность_СоостветствиеБольничныеЗаСчетПредприятия");	
				Если мСоостветствиеБольничныеЗаСчетПредприятия = Неопределено Тогда
					мСоостветствиеБольничныеЗаСчетПредприятия = Новый Соответствие();
				КонецЕсли;
				
				ТаблицаВРБольничные.Очистить();
				Для каждого ВР Из мТаблицаВРБольничные Цикл
					СтрокаВР = ТаблицаВРБольничные.Добавить();
					СтрокаВР.ВидРасчета = ВР;
					Если мСоостветствиеБольничныеЗаСчетПредприятия[ВР] = Истина Тогда
						СтрокаВР.ЗаСчетПредприятия = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			// сохранена таблица значений
			ТаблицаВРБольничные.Очистить();
			Для каждого Стр Из мТаблицаВРБольничные Цикл
				СтрокаВР = ТаблицаВРБольничные.Добавить();
				СтрокаВР.ВидРасчета 		= Стр.ВидРасчета;
				СтрокаВР.ЗаСчетПредприятия  = Стр.ЗаСчетПредприятия;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

	УстановитьФорматВывода();
	Расчет();

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку(ИмяГруппы = Неопределено)
	Перем СтруктураГруппы;
	
	Если ИмяГруппы = Неопределено Тогда 
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	КонецЕсли;
	
	Если ИмяГруппы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	
	
	ИмяПоследнейЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[2].Имя + Формат(КолСтрок,"ЧЦ=2;ЧВН=0;ЧГ=;");
	ИмяПервойЯчейкиПоследнейСтроки    = СтруктураГруппы.Колонки[0].Имя + Формат(КолСтрок,"ЧЦ=2;ЧВН=0;ЧГ=;");
	
	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейкиНиз = ТекТабличноеПоле.Области[ИмяПоследнейЯчейкиПоследнейСтроки];
	НомерНижнЯчейкиОбласти = ОбластьЯчейкиНиз.Низ;
	
	ОбластьЯчейкиВерх = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	НомерВерхЯчейкиОбласти = ОбластьЯчейкиВерх.Верх;
	
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	
	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );
	КолСтрокНов = КолСтрок + 1;
	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл                    
		ИмяКолонки          = Колонка.Имя;   		
			
		ИмяОбластиЯчейки    = ИмяКолонки + Формат(КолСтрок,"ЧЦ=2;ЧВН=0;ЧГ=;");
		ИмяНовОбластиЯчейки = ИмяКолонки + Формат(КолСтрокНов,"ЧЦ=2;ЧВН=0;ЧГ=;");
			
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
		
		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
		
		// очищаем значения ячеек вставленной области
		Если (ОбластьЯчейки.СодержитЗначение)  Тогда
			ОбластьЯчейки.Очистить();
		КонецЕсли;
		
		
	КонецЦикла;
	
		
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	Если (ИмяГруппы = "Т1К") Тогда	
		ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + Формат(КолСтрокНов,"ЧЦ=2;ЧВН=0;ЧГ=;");
	//ИначеЕсли (ИмяГруппы = "Т2К") Тогда	
	//	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + Формат(КолСтрокНов,"ЧЦ=2;ЧВН=0;ЧГ=;");
	КонецЕсли;
	
	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;
	
	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	//	Расчет(ТекТабличноеПоле);
	
	Модифицированность = Истина;
	
КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку(Очистка = Ложь, ЗадаватьВопрос = Истина, ИмяГруппы = Неопределено)
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	Если Не Очистка Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	КонецЕсли;
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить(НСтр("ru='Не выбрана удаляемая строка многострочного раздела.';uk='Не обрано строку багаторядкового розділу, що видаляється'"), СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	Если ЗадаватьВопрос Тогда
		
		Ответ = Вопрос(НСтр("ru='Удалить выбранную строку?"
		"(Внимание! данная операция необратима)';uk='Видалити обраний рядок?"
		"(Увага! дана операція необоротна)'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();
	
	Если Очистка Тогда
		НомУдаляемойСтроки = СтруктураГруппы.Количество();
		Пока НомУдаляемойСтроки > 1 Цикл
			НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля 
			
			Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
				// удаляется добавленная строка
				Если (ИмяГруппы = "Т1К") Тогда
					ИмяПоследнейЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[3].Имя + Формат(СтруктураГруппы.Количество(),"ЧЦ=2;ЧВН=0;ЧГ=;");
					ИмяПервойЯчейкиУдаляемойСтроки    = СтруктураГруппы.Колонки[0].Имя + Формат(СтруктураГруппы.Количество(),"ЧЦ=2;ЧВН=0;ЧГ=;");
				//ИначеЕсли (ИмяГруппы = "Т2К") Тогда
					//ИмяПоследнейЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[8].Имя + Формат(СтруктураГруппы.Количество(),"ЧЦ=4;ЧВН=0;ЧГ=;");
					//ИмяПервойЯчейкиУдаляемойСтроки    = СтруктураГруппы.Колонки[0].Имя + Формат(СтруктураГруппы.Количество(),"ЧЦ=4;ЧВН=0;ЧГ=;");	
				КонецЕсли;
				
				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейкиВерх = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
				ОбластьЯчейкиНиз  = ТекТабличноеПоле.Области[ИмяПоследнейЯчейкиУдаляемойСтроки];
				
				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейкиВерх.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейкиНиз.Низ;
				
				// Определим область удаляемой строки
				УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
				
				// непосредственно удаляем область строки табличного документа
				ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
				
				КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
				
				// обновим имена ячеек сдвинутых строк
				Если КолвоСдвигаемыхСтрок > 0 Тогда
					
					Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() - 1 Цикл
						
						ТекСтрока = СтруктураГруппы[НСтр-1];
						НСтрНов = НСтр - 1;
						Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
							Если (Колонка.Имя <> "ДатаРожд") И (Колонка.Имя <> "Пол") И (Колонка.Имя <> "ДатаПриема") И (Колонка.Имя <> "ДатаУвольнения") Тогда
								
								ИмяСдвинутойЯчейки    = Колонка.Имя + Формат(НСтр,"ЧЦ=2;ЧВН=0;ЧГ=;");
								НовоеИмяСдвинутойЯчейки = Колонка.Имя + Формат(НСтрНов,"ЧЦ=2;ЧВН=0;ЧГ=;");
								
								ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
								ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
								
								Если НЕ(ОбластьСдвинутойЯчейки.СодержитЗначение) Тогда
									// обновляем порядковый номер строки
									СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
									НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
									ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
									
									// обновляем значение элемента таблицы значений
									ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					
				КонецЕсли;
				
				// обновляем структуру многострочного раздела
				СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
				
			Иначе
				// строка не удаляется в форме табличного документа,
				// а должна осуществляться сдвиг строк
				
				// обновляем структуру многострочного раздела
				// методом удаления выбранной строки и добавления пустой строки
				СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
				
				ДобавляемаяСтрока = СтруктураГруппы.Добавить();
				
				// обновляем порядковые номера строк, выводимых в табличный документ
				Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
					Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
						
						НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
						НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
						
						ИмяЯчейки    = КолонкаТаблицы.Имя + Формат(НомерСтрокиВФормеТаблицы,"ЧЦ=2;ЧВН=0;ЧГ=;");
						
						ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
						
						Если НЕ(ОбластьЯчейкиТаблицы.СодержитЗначение) Тогда
							ПервыйНомерВГруппе = 1;
							// обновляем порядковый номер строки
							НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
							СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				// Обновляем экранную форму табличного документа
				ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
				
			КонецЕсли;
			
			// назначим текущей областью таблицы первую редактируемую ячейку
			// удаленной строки, если ее порядковый номер меньше кол-ва строк
			// многострочного раздела, или последней строки раздела в противном случае
			
			// определяем текущую область таблицы
			НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
			
			ИмяТекущейОбласти    = СтруктураГруппы.Колонки[0].Имя + Формат(НомТекущейСтроки,"ЧЦ=2;ЧВН=0;ЧГ=;") ;
			
			ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
			
			// установим фокус на поле табличн. документа
			ТекущийЭлемент = ТекТабличноеПоле;
			НомУдаляемойСтроки = СтруктураГруппы.Количество();
		КонецЦикла; //Очистка
		
	Иначе
		
		// номер строки многострочного раздела определим
		// по имени выделенной ячейки
		Попытка
			НомУдаляемойСтроки = Число( Прав( ИмяЯчейки, 2));
		Исключение
			Сообщить(НСтр("ru='Не выбрана удаляемая строка многострочного раздела.';uk='Не обрано строку багаторядкового розділу, що видаляється'"), СтатусСообщения.Внимание);
			Возврат;	
		КонецПопытки;
		//   НомУдаляемойСтроки = СтруктураГруппы.Количество();
		НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
		
		
		Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
			// удаляется добавленная строка
			Если (ИмяГруппы = "Т1К") Тогда
				ИмяПоследнейЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[2].Имя + Формат(НомерСтрокиТаблицы + 1,"ЧЦ=2;ЧВН=0;ЧГ=;");
				ИмяПервойЯчейкиУдаляемойСтроки    = СтруктураГруппы.Колонки[0].Имя + Формат(НомерСтрокиТаблицы + 1,"ЧЦ=2;ЧВН=0;ЧГ=;");
			//ИначеЕсли (ИмяГруппы = "Т2К")Тогда
				//ИмяПоследнейЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[8].Имя + Формат(НомерСтрокиТаблицы+1,"ЧЦ=4;ЧДЦ=0;ЧН=0000;ЧГ=;ЧВН=;");;//Формат(СтруктураГруппы.Количество(),"ЧЦ=4;ЧВН=0;ЧГ=;");
				//ИмяПервойЯчейкиУдаляемойСтроки    = СтруктураГруппы.Колонки[0].Имя + Формат(НомерСтрокиТаблицы+1,"ЧЦ=4;ЧДЦ=0;ЧН=0000;ЧГ=;ЧВН=;");;//Формат(СтруктураГруппы.Количество(),"ЧЦ=4;ЧВН=0;ЧГ=;");	
			КонецЕсли;
			
			// область первой ячейки удаляемой строки многострочного раздела
			ОбластьЯчейкиВерх = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
			ОбластьЯчейкиНиз  = ТекТабличноеПоле.Области[ИмяПоследнейЯчейкиУдаляемойСтроки];
			
			// номера строк удаляемой области
			НомерВерхЯчейкиОбласти = ОбластьЯчейкиВерх.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейкиНиз.Низ;
			
			// Определим область удаляемой строки
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
			
			// непосредственно удаляем область строки табличного документа
			ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
			
			КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
			
			// обновим имена ячеек сдвинутых строк
			Если КолвоСдвигаемыхСтрок > 0 Тогда
				
				Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
					
					//
					// определяем последнюю строку многострочной группы
					КолСтрок = СтруктураГруппы.Количество();
					Если (ИмяГруппы = "Т1К") Тогда
						ИмяПоследнейЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[2].Имя + Формат(НСтр,"ЧЦ=2;ЧВН=0;ЧГ=;");
						ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + Формат(НСтр,"ЧЦ=2;ЧВН=0;ЧГ=;");
					//ИначеЕсли (ИмяГруппы = "Т2К")  Тогда	
					//	//ИмяПоследнейЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[7].Имя + Формат(НСтр,"ЧЦ=4;ЧДЦ=0;ЧН=0000;ЧГ=;ЧВН=;");
						//ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + Формат(НСтр,"ЧЦ=4;ЧДЦ=0;ЧН=0000;ЧГ=;ЧВН=;");
					КонецЕсли;
					
					// область первой ячейки последней строки многострочного раздела
					ОбластьЯчейкиНиз = ТекТабличноеПоле.Области[ИмяПоследнейЯчейкиПоследнейСтроки];
					НомерНижнЯчейкиОбласти = ОбластьЯчейкиНиз.Низ;
					
					ОбластьЯчейкиВерх = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
					НомерВерхЯчейкиОбласти = ОбластьЯчейкиВерх.Верх;
					
					СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
					
					// номера строк вставляемой области
					НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти;
					НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти;
					
					Если	(ИмяГруппы = мИдГруппы1)  Тогда 
						ОбластьТекстовыйНомер = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти,1,НомерНижнЯчейкиНовойОбласти,2);
					ИначеЕсли (ИмяГруппы = мИдГруппы2) Тогда 
						ОбластьТекстовыйНомер = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти,1,НомерНижнЯчейкиНовойОбласти,1);
					КонецЕсли;
					
					
					//
					
					ТекСтрока = СтруктураГруппы[НСтр-1];
					НСтрНов = НСтр - 1;
					Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
													
							ИмяСдвинутойЯчейки    = Колонка.Имя + Формат(НСтр,"ЧЦ=2;ЧВН=0;ЧГ=;");
							НовоеИмяСдвинутойЯчейки = Колонка.Имя + Формат(НСтрНов,"ЧЦ=2;ЧВН=0;ЧГ=;");
							
							ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
							ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
																				
					КонецЦикла;
				КонецЦикла;
				
			КонецЕсли;
			
			// обновляем структуру многострочного раздела
			СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
			
		Иначе
			// строка не удаляется в форме табличного документа,
			// а должна осуществляться сдвиг строк
			
			// обновляем структуру многострочного раздела
			// методом удаления выбранной строки и добавления пустой строки
			СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
			
			ДобавляемаяСтрока = СтруктураГруппы.Добавить();
			
			// обновляем порядковые номера строк, выводимых в табличный документ
			Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
				Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
					Если    (КолонкаТаблицы.Имя = "ДатаРожд") 
						ИЛИ (КолонкаТаблицы.Имя = "Пол")
						ИЛИ (КолонкаТаблицы.Имя = "ДатаПриема")
						ИЛИ (КолонкаТаблицы.Имя = "ДатаУвольнения") Тогда
						Продолжить;
					КонецЕсли;
					
					НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
					НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
					
					ИмяЯчейки    = КолонкаТаблицы.Имя + Формат(НомерСтрокиВФормеТаблицы,"ЧЦ=2;ЧВН=0;ЧГ=;");
					
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если НЕ(ОбластьЯчейкиТаблицы.СодержитЗначение) Тогда
						ПервыйНомерВГруппе = 1;
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			// Обновляем экранную форму табличного документа
			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
			
		КонецЕсли;
		
		// назначим текущей областью таблицы первую редактируемую ячейку
		// удаленной строки, если ее порядковый номер меньше кол-ва строк
		// многострочного раздела, или последней строки раздела в противном случае
		
		// определяем текущую область таблицы
		НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
		
		ИмяТекущейОбласти    = СтруктураГруппы.Колонки[0].Имя + Формат(НомТекущейСтроки,"ЧЦ=2;ЧВН=0;ЧГ=;");
		
		ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
		
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = ТекТабличноеПоле;
		
		//	Расчет(ТекТабличноеПоле);
		
	КонецЕсли; // Если Очистка
	
	Модифицированность = Истина;
	
КонецПроцедуры // УдалитьДополнительнуюСтроку()	


// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()
	
	мОтчетПФ.Области.П1.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П1_1.Значение) 
	                             + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П1_2.Значение);	 
	
	//Фактичні витрати на оплату праці, суми перших п'яти днів тимчасової непрацездатності та суми 
	//допомоги у зв'язку з тимчасовою непрацездатністю та суми доходу, що розподіляється між членами 
	//колективних, орендних підприємств, сільськогосподарських кооперативів, фермерських господарств, 
	//на які нараховуються внески, усього
	мОтчетПФ.Области.П2.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П2_1.Значение) 
	                             + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П2_2.Значение)
	                             + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П2_3.Значение);
	                                
	
	мОтчетПФ.Области.П3_1.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П3_1_1.Значение) 
	                               + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П3_1_2.Значение)
								   + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П3_1_3.Значение);
								   
	
	мОтчетПФ.Области.П3_2.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П3_2_1_1.Значение) 
	                               + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П3_2_2.Значение);
	//Нараховано, усього
	мОтчетПФ.Области.П3.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П3_1.Значение) 
	                             + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П3_2.Значение);
	
     
	//Сума, на яку збільшено внески у зв'язку з виправленням помилки у період після 01.01.2004
	мОтчетПФ.Области.П6.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П6_1.Значение) 
	                             + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П6_2.Значение);
	
	//Сума, на яку зменшені внески у зв'язку з виправленням помилки у період після 01.01.2004
	мОтчетПФ.Области.П7.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П7_1.Значение) 
	                             + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П7_2.Значение);
	
	//Загальна сума страхових внесків за розділом 1 (рядки 3 + 5 + 6 - 7)
	//32%, 4%, 42%   (рядки 3 + 6.1 - 7.1)
	мОтчетПФ.Области.П8_1.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П3.Значение) 
	                               + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П6_1.Значение) 
	                               - ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П7_1.Значение); 
								   
	
	//1-5%    (рядки 5 + 6.2 - 7.2)  
	мОтчетПФ.Области.П8_2.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П5.Значение) 
	                               + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П6_2.Значение) 
	                               - ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П7_2.Значение); 
	
	мОтчетПФ.Области.П8.Значение = 	  ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П3.Значение) 
									+ ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П5.Значение) 
									+ ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П6.Значение)
									- ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П7.Значение); 
	                   
	
	//II Розділ*
    //Розрахунки за внесками (зборами) за період до 01.01.2004
	//Одержаний фонд оплати праці у звітному місяці
	мОтчетПФ.Области.ПР2_1.Значение  = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП1_1.Значение) 
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП1_2.Значение) 
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП1_3.Значение)
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП2_1.Значение) 
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП2_2.Значение) 
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП2_3.Значение) 
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП3_1.Значение) 
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП3_2.Значение) 
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП3_3.Значение)
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП4_1.Значение) 
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП4_2.Значение) 
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП4_3.Значение);
	
	//Належить до сплати, усього 32 %
	мОтчетПФ.Области.ПР2_2_1.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл1_32.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл2_32.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл3_32.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл4_32.Значение);
		
	//Належить до сплати, усього 4 %
	мОтчетПФ.Области.ПР2_2_2.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл1_4.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл2_4.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл3_4.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл4_4.Значение); 
	
	//Належить до сплати, усього 42 %
	мОтчетПФ.Области.ПР2_2_3.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл1_42.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл2_42.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл3_42.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл4_42.Значение); 

	//Належить до сплати, усього  1 - 5 % 
	мОтчетПФ.Области.ПР2_2_4.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл1_5.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл2_5.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл3_5.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл4_5.Значение);
		
	//Належить до сплати, усього
	мОтчетПФ.Области.ПР2_2.Значение  = мОтчетПФ.Области.ПР2_2_1.Значение 
	                                 + мОтчетПФ.Области.ПР2_2_2.Значение 
	                                 + мОтчетПФ.Области.ПР2_2_3.Значение 
									 + мОтчетПФ.Области.ПР2_2_4.Значение;
	
	//Загальна сума внесків (збору) за розділом II (рядки 2 + 3 - 4)
	мОтчетПФ.Области.ПР2_5.Значение = мОтчетПФ.Области.ПР2_2.Значение 
	                                + мОтчетПФ.Области.ПР2_3.Значение 
									- мОтчетПФ.Области.ПР2_4.Значение;


	мОтчетПФ.Области.КВыпл1.Значение  = мОтчетПФ.Области.КВыпл1_32.Значение; 
	мОтчетПФ.Области.КВыпл2.Значение  = мОтчетПФ.Области.КВыпл1_4.Значение; 
	мОтчетПФ.Области.КВыпл3.Значение  = мОтчетПФ.Области.КВыпл1_42.Значение; 
	мОтчетПФ.Области.КВыпл4.Значение  = мОтчетПФ.Области.КВыпл1_5.Значение;
	мОтчетПФ.Области.КВыпл5.Значение  = мОтчетПФ.Области.КВыпл2_32.Значение;	
	мОтчетПФ.Области.КВыпл6.Значение  = мОтчетПФ.Области.КВыпл2_4.Значение; 
	мОтчетПФ.Области.КВыпл7.Значение  = мОтчетПФ.Области.КВыпл2_42.Значение; 
	мОтчетПФ.Области.КВыпл8.Значение  = мОтчетПФ.Области.КВыпл2_5.Значение;
	мОтчетПФ.Области.КВыпл9.Значение  = мОтчетПФ.Области.КВыпл3_32.Значение;	
	мОтчетПФ.Области.КВыпл10.Значение = мОтчетПФ.Области.КВыпл3_4.Значение; 
	мОтчетПФ.Области.КВыпл11.Значение = мОтчетПФ.Области.КВыпл3_42.Значение; 
	мОтчетПФ.Области.КВыпл12.Значение = мОтчетПФ.Области.КВыпл3_5.Значение;
	мОтчетПФ.Области.КВыпл13.Значение = мОтчетПФ.Области.КВыпл4_32.Значение; 
	мОтчетПФ.Области.КВыпл14.Значение = мОтчетПФ.Области.КВыпл4_4.Значение; 
	мОтчетПФ.Области.КВыпл15.Значение = мОтчетПФ.Области.КВыпл4_42.Значение; 
	мОтчетПФ.Области.КВыпл16.Значение = мОтчетПФ.Области.КВыпл4_5.Значение;
	
	//Одержаний фонд оплати праці у звітному місяці за місяці
	мОтчетПФ.Области.ФОП_Итого.Значение = ОкруглитьЧислоПоФормату(Макс(мОтчетПФ.Области.ФОП1_1.Значение, 
	                                                                   мОтчетПФ.Области.ФОП1_2.Значение,  
																	   мОтчетПФ.Области.ФОП1_3.Значение, 
																	   мОтчетПФ.Области.ФОП1_4.Значение)) 
	                                    + ОкруглитьЧислоПоФормату(Макс(мОтчетПФ.Области.ФОП2_1.Значение, 
										                               мОтчетПФ.Области.ФОП2_2.Значение, 
																	   мОтчетПФ.Области.ФОП2_3.Значение, 
																	   мОтчетПФ.Области.ФОП2_4.Значение)) 
	                                    + ОкруглитьЧислоПоФормату(Макс(мОтчетПФ.Области.ФОП3_1.Значение, 
										                               мОтчетПФ.Области.ФОП3_2.Значение, 
																	   мОтчетПФ.Области.ФОП3_3.Значение, 
																	   мОтчетПФ.Области.ФОП3_4.Значение)) 
	                                    + ОкруглитьЧислоПоФормату(Макс(мОтчетПФ.Области.ФОП4_1.Значение, 
										                               мОтчетПФ.Области.ФОП4_2.Значение, 
																	   мОтчетПФ.Области.ФОП4_3.Значение, 
																	   мОтчетПФ.Области.ФОП4_4.Значение));
	
	мОтчетПФ.Области.КВыпл_Итого.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл1.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл2.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл3.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл4.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл5.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл6.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл7.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл8.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл9.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл10.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл11.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл12.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл13.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл14.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл15.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл16.Значение);
	
КонецПроцедуры // Расчет()

//выпоняет расчет числа застрахованных лиц и лиц, получающих пособие по уходу за ребенком
Процедура РассчитатьЧислоЗастрахованныхЛиц (ТаблицаБазВзносовОтчетногоПериода)
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("ФизЛицо");
	
	ТаблицаКоличестваЗастрахованныхЛиц = ТаблицаБазВзносовОтчетногоПериода.Скопировать();
	
	Отбор = Новый Структура;
	Отбор.Вставить("СтатьяНалоговойДекларации",МассивНужныхСтатей[3]);
	НайденныеСтроки = ТаблицаБазВзносовОтчетногоПериода.НайтиСтроки(Отбор);
	
	Для каждого строка Из НайденныеСтроки Цикл
		НоваяСтрока 		= ТаблицаСотрудников.Добавить();
		НоваяСтрока.ФизЛицо = Строка.ФизЛицо;
	КонецЦикла;	
	
	ТаблицаСотрудников.Свернуть("ФизЛицо");
	
    УстановитьЗначениеПоказателя("ЗастрЛиц", ТаблицаСотрудников.Количество());	

КонецПроцедуры

Процедура РассчитатьБольничные()
	
	БольничныеПредприятие = 0;
	БольничныеФСС = 0;
	
	Если 	РегламентированнаяОтчетность.ИДКонфигурации() = "УТП"
		ИЛИ РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		ИмяРегистра = "Начисления";
	Иначе	
		ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций";
	КонецЕсли;
	
	//запросы по больничным
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОсновныеНачисленияРаботников.ВидРасчета 	  КАК ВидРасчета,
	|	СУММА(ОсновныеНачисленияРаботников.Результат) КАК Результат
	|ИЗ
	|	РегистрРасчета."+ИмяРегистра+" КАК ОсновныеНачисленияРаботников
	|
	|ГДЕ
	|	  ОсновныеНачисленияРаботников.Организация = &Организация
	|	И ОсновныеНачисленияРаботников.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	|   И ОсновныеНачисленияРаботников.ВидРасчета В (&Больничные)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисленияРаботников.ВидРасчета";
	
	ЗапросНачисленияБольн = Новый Запрос ();
	ЗапросНачисленияБольн.Текст = ТекстЗапроса;
	ЗапросНачисленияБольн.УстановитьПараметр("ДатаНач", мДатаНачалаПериодаОтчета);
	ЗапросНачисленияБольн.УстановитьПараметр("ДатаКон" , мДатаКонцаПериодаОтчета);
	ЗапросНачисленияБольн.УстановитьПараметр("Организация",   Организация);
	
	ИмяПланаВидовРасчета = "ОсновныеНачисленияОрганизаций";
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		ЗапросНачисленияБольн.УстановитьПараметр("Больничные", ТаблицаВРБольничные.ВыгрузитьКолонку("ВидРасчета"));
	Иначе		
		МассивБольничных = Новый Массив();
		Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
			ИмяПланаВидовРасчета = "Начисления";
			МассивБольничных.Добавить(ПланыВидовРасчета[ИмяПланаВидовРасчета].ОплатаПоСреднемуБЛОрганизации);
			МассивБольничных.Добавить(ПланыВидовРасчета[ИмяПланаВидовРасчета].ОплатаПоСреднемуБЛ);
			МассивБольничных.Добавить(ПланыВидовРасчета[ИмяПланаВидовРасчета].ОплатаПоСреднемуБЛТравмаНаПроизводстве);
			
		Иначе
			МассивБольничных.Добавить(ПланыВидовРасчета[ИмяПланаВидовРасчета].ОплатаПоСреднемуБЛОрганизации);
			МассивБольничных.Добавить(ПланыВидовРасчета[ИмяПланаВидовРасчета].ОплатаПоСреднемуБЛ);
			МассивБольничных.Добавить(ПланыВидовРасчета[ИмяПланаВидовРасчета].ОплатаБЛПоТравмеНаПроизводстве);
		КонецЕсли;
		ЗапросНачисленияБольн.УстановитьПараметр("Больничные", МассивБольничных);
	КонецЕсли;
	
	Выборка = ЗапросНачисленияБольн.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП"  Тогда
			
			СтрокаТаблицыБольничных = ТаблицаВРБольничные.Найти(Выборка.ВидРасчета);
			ЗаСчетПредприятия = Ложь;
			Если НЕ СтрокаТаблицыБольничных = Неопределено Тогда
				ЗаСчетПредприятия = СтрокаТаблицыБольничных.ЗаСчетПредприятия;
			КонецЕсли;
			
			Если ЗаСчетПредприятия Тогда
				БольничныеПредприятие = БольничныеПредприятие + Выборка.Результат;
			Иначе
				БольничныеФСС 		  = БольничныеФСС + Выборка.Результат;
			КонецЕсли;
			
		Иначе	
			
			Если  Выборка.ВидРасчета  = ПланыВидовРасчета[ИмяПланаВидовРасчета].ОплатаПоСреднемуБЛОрганизации Тогда 
				БольничныеПредприятие = БольничныеПредприятие + Выборка.Результат;
			Иначе
				БольничныеФСС = БольничныеФСС + Выборка.Результат;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла; 
		
	//У тому числі:
	//а) сума оплати перших п'яти днів тимчасової непрацездатності
	УстановитьЗначениеПоказателя("П1_1_1", БольничныеПредприятие);
	
	//б) сума допомоги у зв'язку з тимчасовою непрацездатністю
	УстановитьЗначениеПоказателя("П1_1_2", БольничныеФСС);	
	
КонецПроцедуры

//выполняет расчет начислений за прошлые и будущие периоды
Процедура  РассчитатьНачисленияЗаПрошлыеИБудущиеПериоды(ТаблицаБазВзносовОтчетногоПериода)
	
	Перем ИсходноеКоличествоСтрокГруппы;	

	ТаблицаНачисленийПрошлБудущ = ТаблицаБазВзносовОтчетногоПериода.Скопировать();
	ТаблицаНачисленийПрошлБудущ.Свернуть("ПериодДействия, СтатьяНалоговойДекларации", "База");
	
	тбНачисления = Новый ТаблицаЗначений;
	тбНачисления.Колонки.Добавить("Месяц");
	тбНачисления.Колонки.Добавить("ПрошлаяСумма",ОписаниеТиповЧисло);
	тбНачисления.Колонки.Добавить("БудущаяСумма",ОписаниеТиповЧисло);

	Для каждого стр Из ТаблицаНачисленийПрошлБудущ Цикл
		
		Если    стр.СтатьяНалоговойДекларации = МассивНужныхСтатей[0]
			ИЛИ стр.СтатьяНалоговойДекларации = МассивНужныхСтатей[1]
			ИЛИ стр.СтатьяНалоговойДекларации = МассивНужныхСтатей[2] Тогда
		
			Если стр.ПериодДействия < мДатаНачалаПериодаОтчета Тогда 
				НоваяСтрока 			 = тбНачисления.Добавить();
				НоваяСтрока.Месяц 		 = стр.ПериодДействия;
				НоваяСтрока.ПрошлаяСумма = стр.База;   
			ИначеЕсли стр.ПериодДействия > мДатаКонцаПериодаОтчета Тогда
				НоваяСтрока 			 = тбНачисления.Добавить();
				НоваяСтрока.Месяц 		 = стр.ПериодДействия;
				НоваяСтрока.БудущаяСумма = стр.База;   
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла; 
		
	тбНачисления.Свернуть("Месяц","ПрошлаяСумма,БудущаяСумма");
	тбНачисления.Сортировать("Месяц Возр");   
	
	// III Раздел 	
	//Суми, нараховані у звітному базовому періоді за минулі та 
	//майбутні місяці, на які нараховуються страхові внески	
	Если тбНачисления.Количество() <> 0 Тогда   
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(мИдГруппы1, ИсходноеКоличествоСтрокГруппы);
		
		ТекТаблПоле = мОтчетПФ;
		
		КолСтрок = 0;		
		Для каждого стр из  тбНачисления Цикл  
			КолСтрок = КолСтрок + 1;
			
			Если  КолСтрок > ИсходноеКоличествоСтрокГруппы Тогда
				ВставитьДополнительнуюСтроку(мИдГруппы1);
			КонецЕсли;	
			
			НомСтр = тбНачисления.Индекс(стр) + 1; 
			
			ИмяЯчейки = мИдГруппы1 + "Мес_" + Формат(НомСтр,"ЧЦ=2;ЧВН=0;ЧГ=;");
			ТекТаблПоле.Области[ИмяЯчейки].Значение =Формат(стр.Месяц,"ДФ = 'ММММ';Л = uk_UA");
			
			ИмяЯчейки = мИдГруппы1 + "СУМП_" + Формат(НомСтр,"ЧЦ=2;ЧВН=0;ЧГ=;");
			ТекТаблПоле.Области[ИмяЯчейки].Значение = стр.ПрошлаяСумма;
			
			ИмяЯчейки = мИдГруппы1 + "СУМБ_" + Формат(НомСтр,"ЧЦ=2;ЧВН=0;ЧГ=;");
			ТекТаблПоле.Области[ИмяЯчейки].Значение = стр.БудущаяСумма;             		
			
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

Процедура РассчитатьСуммыВыплат()
	
	ТекстЗапроса = "
	 |ВЫБРАТЬ
	 |	СУММА(СуммаВзаиморасчетов) КАК Выплачено
	 |ИЗ
	 |	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизаций
	 |ГДЕ 
	 |	  ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	 |  И Период МЕЖДУ &НачДата И &КонДата
	 |  И Организация = &парамОрганизация
	 |	И КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата)
	 |";
	 
	ЗапросВыплатаВТекПериоде = Новый Запрос;
	ЗапросВыплатаВТекПериоде.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
	ЗапросВыплатаВТекПериоде.УстановитьПараметр("КонДата", мДатаКонцаПериодаОтчета);
	ЗапросВыплатаВТекПериоде.УстановитьПараметр("парамОрганизация" ,Организация);
	ЗапросВыплатаВТекПериоде.Текст = ТекстЗапроса;
	
	РезультатЗапроса = ЗапросВыплатаВТекПериоде.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаВыплатОтчетногоПериода = РезультатЗапроса.Выгрузить();
		мОтчетПФ.Области.СправочноВыплач.Значение =  ТаблицаВыплатОтчетногоПериода[0].Выплачено;
	КонецЕсли;	
	
КонецПроцедуры	

Процедура РассчитатьСуммуФактическихЗатратНаОплатуТруда()
	
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП") Тогда
		//Загальна сума фактичних витрат на оплату праці та інших виплат, пов'язаних з відносинами 
		//трудового найму (Кт 661)
		
		//  по виду взаиморасчетов "заработная плата" начисления гарантированно пройдут 
		//  по кредиту счет 661
		Запрос = Новый Запрос;
		Запрос.Текст = "	
		|ВЫБРАТЬ
		|	ЕстьNULL(СУММА(Взаиморасчеты.СуммаВзаиморасчетовПриход),0) КАК КО66	
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Обороты(&ПериодНачало, &ПериодКонец, МЕСЯЦ, (СчетУчета В ИЕРАРХИИ (&СчетУчета661) ИЛИ СчетУчета В ИЕРАРХИИ (&СчетУчета663)) И Организация = &Организация) КАК Взаиморасчеты
		|";
		
		Запрос.УстановитьПараметр("ПериодНачало",	мДатаНачалаПериодаОтчета);
		Запрос.УстановитьПараметр("ПериодКонец",	мДатаКонцаПериодаОтчета);
		Запрос.УстановитьПараметр("Организация",	Организация);
		Запрос.УстановитьПараметр("СчетУчета661",	ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате);
		Запрос.УстановитьПараметр("СчетУчета663",	ПланыСчетов.Хозрасчетный.РасчетыПоДругимВыплатам);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда	
			П1_1 = Выборка.КО66;
			УстановитьЗначениеПоказателя("П1_1", П1_1);
		КонецЕсли;
	Иначе
		
		П1_1 = КО(Счет66);
		
		// без возврата денег в кассу
		П1_1 = П1_1 - ОБ(Счет301, Счет66);
		// без движения по депонентам
		П1_1 = П1_1 - КО(Счет66_2);
		// без выплат за счет соц. страха
		П1_1 = П1_1 - СуммаВыплатЗаСчетФССКромеБольничных();
		      
		УстановитьЗначениеПоказателя("П1_1", П1_1);
			
	КонецЕсли;	
	
КонецПроцедуры	

Функция СуммаВыплатЗаСчетФССКромеБольничных()
	
	СуммаФСС = 0;
	
	СтатьиЗаСчетФСС = Справочники.СтатьиНалоговыхДеклараций.Выбрать(Справочники.СтатьиНалоговыхДеклараций.ФССУтратаТрудосп_);
	Пока СтатьиЗаСчетФСС.Следующий() Цикл
		
		Если    СтатьиЗаСчетФСС.Ссылка = Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_ВремНетрудосп
			ИЛИ СтатьиЗаСчетФСС.Ссылка = Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_ВремНетрудоспУход Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаФСС = СуммаФСС + мБухИтогиКорРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет, ", Счет65_2, СтатьиЗаСчетФСС.Ссылка,Счет66_1)
					 		+ мБухИтогиКорРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет, ", Счет65_2, СтатьиЗаСчетФСС.Ссылка,Счет66_3);
	КонецЦикла;
	
	СтатьиЗаСчетФССНесч = Справочники.СтатьиНалоговыхДеклараций.Выбрать(Справочники.СтатьиНалоговыхДеклараций.ФССНесчСлуч_);
	Пока СтатьиЗаСчетФССНесч.Следующий() Цикл
		
		Если СтатьиЗаСчетФССНесч.Ссылка = Справочники.СтатьиНалоговыхДеклараций.ФССНесчСлуч_ВремНетрудосп Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаФСС = СуммаФСС + мБухИтогиКорРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет, ", Счет65_6, СтатьиЗаСчетФССНесч.Ссылка,Счет66_1)
					 		+ мБухИтогиКорРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет, ", Счет65_6, СтатьиЗаСчетФССНесч.Ссылка,Счет66_3);
	КонецЦикла;
	
	Возврат СуммаФСС;				 
				 
КонецФункции

//выполняет расчет сальдо взаиомрасчетов с фондом
Процедура РассчитатьСальдоВзаиморасчетовСФондом()
	
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП") Тогда
		
		//Сальдо розрахунків рахунка 65 "Розрахунки за страхуванням" субрахунка 651 "За пенсійним забезпеченням" на початок 
		//звітного періоду: 
		
		ЗапросРасчетыСФондом = Новый Запрос;
		ЗапросРасчетыСФондом.Текст ="
		|ВЫБРАТЬ
		|	ЕстьNULL(СУММА(РезультатОстаток), 0)	КАК Результат
		|
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Остатки(&НачДата, Организация = &Организация И СтатьяНалоговойДекларации В (&МассивСтатей))
		|
		|";
		
		ЗапросРасчетыСФондом.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
		ЗапросРасчетыСФондом.УстановитьПараметр("Организация",   Организация);
		
		ЗапросРасчетыСФондом.УстановитьПараметр("МассивСтатей",   МассивНужныхСтатей);
		
		РезультатЗапроса = ЗапросРасчетыСФондом.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			Если РезультатЗапроса.Результат > 0 Тогда
				ПенсНачКт = РезультатЗапроса.Результат;
				УстановитьЗначениеПоказателя("ПенсНачКт",ПенсНачКт);
			Иначе
				ПенсНачДт = -РезультатЗапроса.Результат;
				УстановитьЗначениеПоказателя("ПенсНачДт",ПенсНачДт);
			КонецЕсли;
		КонецЕсли;
		
		//Сальдо розрахунків рахунка 65 "Розрахунки за страхуванням" субрахунка 651 "За пенсійним забезпеченням" на кінець 
		//звітного періоду:
		ЗапросРасчетыСФондом.УстановитьПараметр("НачДата", мДатаКонцаПериодаОтчета);
		
		РезультатЗапроса = ЗапросРасчетыСФондом.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			Если РезультатЗапроса.Результат > 0 Тогда
				ПенсКонКт = РезультатЗапроса.Результат;
				УстановитьЗначениеПоказателя("ПенсКонКт",ПенсКонКт);
			Иначе
				ПенсКонДт = -РезультатЗапроса.Результат;
				УстановитьЗначениеПоказателя("ПенсКонДт",ПенсКонДт);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПенсНачДт = СНД(Счет65_1);
		УстановитьЗначениеПоказателя("ПенсНачДт",ПенсНачДт);
		
		ПенсНачКт = СНК(Счет65_1);
		УстановитьЗначениеПоказателя("ПенсНачКт",ПенсНачКт);
		
		//Сальдо розрахунків рахунка 65 "Розрахунки за страхуванням" субрахунка 651 "За пенсійним забезпеченням" на кінець 
		//звітного періоду: 
		ПенсКонДт = СКД(Счет65_1);
		УстановитьЗначениеПоказателя("ПенсКонДт",ПенсКонДт);
		
		ПенсКонКт = СКК(Счет65_1);
		УстановитьЗначениеПоказателя("ПенсКонКт",ПенсКонКт);
	КонецЕсли;   
	   
КонецПроцедуры

Процедура ВыполнитьИнициализацию()
	
	Если     РегламентированнаяОтчетность.ИДКонфигурации() = "БП"
		Или  РегламентированнаяОтчетность.ИДКонфигурации() = "УПП"
		Или  РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
		
		ПС = ПланыСчетов["Хозрасчетный"];
		Счет65_1      = ПС.РасчетыПоПенсионномуОбеспечению;
		Счет66        = ПС.РасчетыПоОплатеТруда;
		Счет66_1      = ПС.РасчетыПоЗаработнойПлате;
		Счет66_2      = ПС.РасчетыПоДепонентам;
		Счет66_3      = ПС.РасчетыПоДругимВыплатам;
		Счет65_2      = ПС.РасчетыПоСоциальномуСтрахованию;
		Счет65_6      = ПС.РасчетыПоСтрахованиюОтНесчастныхСлучаев;
		Счет81_5      = ПС.ОплатаДругогоНеотработанногоВремени;
		Счет91        = ПС.ОбщепроизводственныеРасходы;
		Счет92        = ПС.АдминистративныеРасходы;
		Счет93        = ПС.РасходыНаСбыт;
		Счет301       = ПС.КассаВНациональнойВалюте;
		
		// Бухгалтерский итоги по счетам
		мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
		// Бухгалтерские итоги по аналитике 
		мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();
		
		МассивСубконто = Новый Массив;
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Налоги);
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций);
		
		Итоги = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
		|НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
		|КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
		|КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт,
		|ОборотДт, ОборотКт,
		|КорОборотДт, КорОборотКт";
		
		ИтогиРС = "ОборотДт, ОборотКт";
		
		// Бухгалтерские итоги по счетам, без аналитики
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет,КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , , , , , "Организация", Организация);
		
		// Бухгалтерские итоги по счетам, с аналитикой
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет,Субконто1,Субконто2", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета,,"651",МассивСубконто,,, "Организация", Организация);
		
		мБухИтогиКорРС = Обработки.БухгалтерскиеИтоги.Создать();
		Итоги = "ОборотКт,ОборотДт,КорОборотДт, КорОборотКт";	
		мБухИтогиКорРС.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Период,Счет,Субконто1,Субконто2,КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета,"Месяц","652,656",МассивСубконто,,, "Организация", Организация);
		
	КонецЕсли;
	
	СтрокиДекларации = Справочники.СтатьиНалоговыхДеклараций;
	
	МассивНужныхСтатей = Новый Массив; 
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ПФ_Орг32);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ПФ_Орг4);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ПФ_Орг42);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ПФ_Сотр15);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ПФ_Декр);
	
КонецПроцедуры	

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто()  Экспорт
	////////
	// *** Здесь необходимо написать алгоритм заполнения отчета.***
	//
	// Для присвоения показателям отчета вычисленного значения необходимо
	// использовать процедуру
	//
	//     УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя).
	//
	////////
	
	// Инициализация
	ВыполнитьИнициализацию();
	
	ТаблСреднеспЧисленности = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "ССЧ", "МЕСЯЦ", Организация, "ШТАТ"); 
	Сотрудников = ТаблСреднеспЧисленности[0].Средняя;
	УстановитьЗначениеПоказателя("Сотрудников", Сотрудников);
	
	КолГПХ = 0;	
	Если    (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") 
		ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП") 
		ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "УТП") Тогда
	
		ЗапросГПХ = Новый Запрос;
		ЗапросГПХ.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Работники.Сотрудник.ФизЛицо
		|ИЗ  Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК Работники
		|ГДЕ 
		|   Работники.Проведен
		| И Работники.ДатаОкончания >= &парамНачало
		| И Работники.ДатаНачала    <= &парамКонец
		| И Работники.Организация = &парамОрганизация
		|";	
		ЗапросГПХ.УстановитьПараметр("парамНачало",мДатаНачалаПериодаОтчета);
		ЗапросГПХ.УстановитьПараметр("парамКонец",мДатаКонцаПериодаОтчета);
		ЗапросГПХ.УстановитьПараметр("парамОрганизация",Организация);
		
		ВыборкаГПХ = ЗапросГПХ.Выполнить().Выбрать();
		КолГПХ = ВыборкаГПХ.Количество()
		
	КонецЕсли;
	УстановитьЗначениеПоказателя("Сотр_по_ГПХ", КолГПХ);

	Запрос = Новый Запрос();
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		ИмяРегистра = "ВзносыВФондыИНалоги";
	Иначе	
	    ИмяРегистра = "ВзносыВФонды";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
				   |	НАЧАЛОПЕРИОДА(ВзносыВФондыИНалоги.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
	               |    ВзносыВФондыИНалоги.Сотрудник.ФизЛицо 				 КАК ФизЛицо,
				   |    ВзносыВФондыИНалоги.СтатьяНалоговойДекларации		 КАК СтатьяНалоговойДекларации,
	               |	СУММА(ВзносыВФондыИНалоги.БазаВзноса) 				 КАК База,
	               |	СУММА(ВзносыВФондыИНалоги.Результат)  				 КАК СуммаВзноса
	               |ИЗ
	               |	РегистрРасчета."+ИмяРегистра+" КАК ВзносыВФондыИНалоги
				   |
				   |ГДЕ
				   |    ВзносыВФондыИНалоги.ПериодРегистрации МЕЖДУ &ПарамНач И &ПарамКон
				   |  И ВзносыВФондыИНалоги.Организация = &Организация
				   |  И ВзносыВФондыИНалоги.СтатьяНалоговойДекларации В (&МассивНужныхСтатей)
		           |
				   |СГРУППИРОВАТЬ ПО 
				   |	НАЧАЛОПЕРИОДА(ВзносыВФондыИНалоги.ДатаНачала, МЕСЯЦ),
				   |	ВзносыВФондыИНалоги.Сотрудник.ФизЛицо,
				   |	ВзносыВФондыИНалоги.СтатьяНалоговойДекларации
				   |";
		
	
	Запрос.УстановитьПараметр("ПарамНач",    мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ПарамКон",    мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("МассивНужныхСтатей",  МассивНужныхСтатей);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТаблицаБазВзносов = РезультатЗапроса.Выгрузить();
		
		//перед сворачиванием таблицы по статьям по статьям налоговых деклараций и налоговым периодом
		//выполняем расчет числа застрахованных лиц и лиц, получающих пособия по уходу за ребенком
		РассчитатьЧислоЗастрахованныхЛиц(ТаблицаБазВзносов);
		
		РассчитатьБольничные();
		
		РассчитатьНачисленияЗаПрошлыеИБудущиеПериоды(ТаблицаБазВзносов);
		
		ТаблицаБазВзносов.Свернуть("СтатьяНалоговойДекларации", "База, СуммаВзноса");
		
		//ищем структуру по месяцу и статье декларации для определения баз
		Отбор = Новый Структура;
		Для i = 0 по 3  Цикл
			Отбор.Вставить("СтатьяНалоговойДекларации",МассивНужныхСтатей[i]);
			НайденныеСтроки = ТаблицаБазВзносов.НайтиСтроки(Отбор);
			
			Если  НайденныеСтроки.Количество() >0  Тогда
				Если (i < 3)  Тогда
					// взносы с ФОТ
					Ном = i + 1;
					ИмяЯчейки = "П2"+ "_" + Ном;
					УстановитьЗначениеПоказателя(ИмяЯчейки,НайденныеСтроки[0].База);
					
					ИмяЯчейки = "П3_1"+ "_" + Ном;
					УстановитьЗначениеПоказателя(ИмяЯчейки,НайденныеСтроки[0].СуммаВзноса);
				Иначе
					// взносы с Сотрудника
					П4 = НайденныеСтроки[0].База;
					УстановитьЗначениеПоказателя("П4", П4);
					
					П5 = НайденныеСтроки[0].СуммаВзноса;
					УстановитьЗначениеПоказателя("П5",П5);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	//Загальна сума фактичних витрат на оплату праці та інших виплат, пов'язаних з відносинами 
	//трудового найму (Кт 661)
	РассчитатьСуммуФактическихЗатратНаОплатуТруда();
	
	//Додаток до розрахунку суми страхових внесків
	//на загальнообов'язкове державне пенсійне 	
	//Сума заборгованості з виплати заробітної плати на початок звітного періоду
	ЗапросСуммаЗадолжНачало = Новый Запрос ("
	|ВЫБРАТЬ
	| СУММА (ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток) КАК Результат
	|  ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&НачДата,Организация = &Организация) КАК ВзаиморасчетыСРаботниками
	| ГДЕ
	| ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов <> &ПрошлыйМесяц  
	|");
	
	ЗапросСуммаЗадолжНачало.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
	ЗапросСуммаЗадолжНачало.УстановитьПараметр("ПрошлыйМесяц",ДобавитьМесяц(мДатаНачалаПериодаОтчета,-1));
	ЗапросСуммаЗадолжНачало.УстановитьПараметр("Организация",   Организация);
	РезультатЗапроса = ЗапросСуммаЗадолжНачало.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаРезультатовЗадолжЗПНач = РезультатЗапроса.Выгрузить();
		ЗадолжНач = ТаблицаРезультатовЗадолжЗПНач[0].Результат;
		УстановитьЗначениеПоказателя("ЗадолжНач",ЗадолжНач);
	КонецЕсли;
	
	//Сума заборгованості з виплати заробітної плати на початок звітного періоду
	ЗапросСуммаЗадолжКонец = Новый Запрос ("
	|ВЫБРАТЬ
	| СУММА (ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток) КАК Результат
	|  ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&КонДата,Организация = &Организация) КАК ВзаиморасчетыСРаботниками
	| ГДЕ
	| ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов <> &НачДата 
	|");
	
	ЗапросСуммаЗадолжКонец.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
	ЗапросСуммаЗадолжКонец.УстановитьПараметр("КонДата", мДатаКонцаПериодаОтчета);
	ЗапросСуммаЗадолжКонец.УстановитьПараметр("Организация",   Организация);
	РезультатЗапроса = ЗапросСуммаЗадолжКонец.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаРезультатовЗадолжЗПКон = РезультатЗапроса.Выгрузить();
		ЗадолжКон = ТаблицаРезультатовЗадолжЗПКон[0].Результат;
		УстановитьЗначениеПоказателя("ЗадолжКон",ЗадолжКон);
	КонецЕсли;
	
	//Сальдо розрахунків рахунка 65 "Розрахунки за страхуванням" субрахунка 651 "За пенсійним забезпеченням" на початок 
	//звітного періоду: 
	РассчитатьСальдоВзаиморасчетовСФондом();
	
	//РассчитатьСуммыЗадолженностейЗаПериодДо2004();
	РассчитатьСуммыВыплат();
	
	Расчет();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьАвто()

// ФункцияВозвращает код месяца 	
Функция ПолучитьКодМесяца(Месяц)
		Если Месяц = 1 Тогда 
		КодМесяца = "1" ;
		Возврат КодМесяца;
	ИначеЕсли Месяц = 2 Тогда 
		КодМесяца = "2" ;
		Возврат КодМесяца;
	ИначеЕсли Месяц = 3 Тогда 
		КодМесяца = "3" ;
		Возврат КодМесяца;
	ИначеЕсли Месяц = 4 Тогда 
		КодМесяца = "4" ;
		Возврат КодМесяца;
	ИначеЕсли Месяц = 5 Тогда 
		КодМесяца = "5" ;
		Возврат КодМесяца;
	ИначеЕсли Месяц = 6 Тогда 
		КодМесяца = "6" ;
		Возврат КодМесяца;
	ИначеЕсли Месяц = 7 Тогда 
		КодМесяца = "7" ;
		Возврат КодМесяца;
	ИначеЕсли Месяц = 8 Тогда 
		КодМесяца = "8" ;
		Возврат КодМесяца;
	ИначеЕсли Месяц = 9 Тогда 
		КодМесяца = "9" ;
		Возврат КодМесяца;
	ИначеЕсли Месяц = 10 Тогда 
		КодМесяца = "A" ;
		Возврат КодМесяца;
	ИначеЕсли Месяц = 11 Тогда 
		КодМесяца = "B" ;
		Возврат КодМесяца;
	ИначеЕсли Месяц = 12 Тогда 
		КодМесяца = "C" ;
		Возврат КодМесяца;
	Иначе КодМесяца = "";
		Возврат КодМесяца; 
		
	КонецЕсли;	
КонецФункции

// Процедура ВыгрузитьВАРМЗС -выполняет заполнение параметров для передачи в мастер отчетов и вызывает его.
Процедура ВыгрузитьВАРМЗС ()
	Перем спДанныеОтчета, спПараметры;
	Перем НужнаяСтруктура;  	
	Перем Значение,ДанныеОтчета;
	//Создадим структуру со списком параметров для передачи их в обработку выгрузки
	спПараметры = Новый Структура();
	спПараметры.Вставить("Команда","ЭкспортАРМЗС"); //Операция
	
	ОпределитьСписокВыгружаемыхСхем();
	
	ОбновитьСтруктуруМногострочныхРазделов();
	
	спПараметры.Вставить("Схемы",ТбСхемыАрмЗс );	//Схемы (правила) выгрузки. Определеяются ГНАУ
	
	ДанныеОтчета = Новый Структура();
	
	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаОтчетПФ";
	ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
	
		
	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	
	// получим код органиазции по ЕДРПОУ
	ДанныеОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, мДатаКонцаПериодаОтчета);
	Код = "";
	ДанныеОбОрганизации.Свойство("КодПоЕДРПОУ", Код);
	Если НЕ ЗначениеЗаполнено(Код) Тогда
		ДанныеОбОрганизации.Свойство("КодПоДРФО", Код);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Код) Тогда
		Код = Организация.Наименование;
	КонецЕсли;
	
	Значение = Код + Формат(День(мДатаКонцаПериодаОтчета),"ЧЦ=2;ЧГ=;") + Формат(Месяц(мДатаКонцаПериодаОтчета), "ЧЦ=2;ЧГ=;") + Формат(Год(мДатаКонцаПериодаОтчета),"ЧЦ=4;ЧГ=0;")+ "P0100111" + ".ZDI";
	ПоказателиТекущегоЛиста.Вставить("ИмяФайла",СтрЗаменить(Значение," ",""));

	Значение = "M" + ПолучитьКодМесяца(Месяц(мДатаНачалаПериодаОтчета));
	ПоказателиТекущегоЛиста.Вставить("PerType",Значение);
	Значение = Формат(Год(мДатаКонцаПериодаОтчета),"ЧЦ=4;ЧГ=0;");
	ПоказателиТекущегоЛиста.Вставить("Year",СокрЛп(Формат(Значение)));
	Значение = "ANSI";
	ПоказателиТекущегоЛиста.Вставить("Encoding",Значение);
	
	
	мСтруктураМногострочныхРазделов.Свойство("Т1К",Значение);

	ПоказателиТекущегоЛиста.Вставить("МногострочнаяЧасть",Значение);

	ДанныеОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	

	спПараметры.Вставить("ДанныеОтчета",ДанныеОтчета);
	
	КаталогДанныхФирмы = Организация.НаименованиеПолное;
	спПараметры.Вставить("КаталогДанныхФирмы",КаталогДанныхФирмы); //каталог для сохранения выгрузки
	
	
	ОбработкаЭкспортВАРМЗС = РегламентированнаяОтчетность.РеглОтчеты("РегламентированныйОтчетМастерВыгрузкиРегламентированнойОтчетности",Истина);

	ИдФормы = "Форма";   
	
	ФормаОбр = ОбработкаЭкспортВАРМЗС.ПолучитьФорму(ИдФормы);
	ФормаОбр.спПараметры = спПараметры; 
	ФормаОбр.ИмяНужногоОтчета = "РегламентированныйОтчетПенсионныйФонд";
	
	ФормаОбр.тбСхемы = спПараметры.Схемы;
	ФормаОбр.Открыть();
	 	
	Сохранить();
	ФормаОбр.Объект = ЭтотОбъект;
	ФормаОбр.Док    = мСохраненныйДок;
	                    	
КонецПроцедуры


//создает массив описания типов для таблицы значений со схемами АРМ Зс
Функция СоздатьОписанияТипов(НазваниеТипа, Длина,Точность="")
  мас = Новый Массив;
  мас.Добавить(Тип(НазваниеТипа));
  Если Точность = "" Тогда
	 КвалифСтроки = Новый КвалификаторыСтроки(Длина,ДопустимаяДлина.Переменная); 
  Иначе
	 КвалифЧисла = Новый КвалификаторыЧисла(Длина,Точность,ДопустимыйЗнак.Неотрицательный); 
  КонецЕсли;	   
  Возврат Новый ОписаниеТипов(мас,КвалифСтроки,КвалифЧисла);
КонецФункции	
// Процедура создает таблицу с именами макетов выгрузки в АРМ ЗС

Процедура СоздатьТаблицуСоСхемамиВыгрузки() Экспорт
	//для возможности выгрузки в XML файл
	тбСхемыАРМЗС = Новый ТаблицаЗначений;
	ТипКолИмяСхемы = СоздатьОписанияТипов("Строка",21);
	тбСхемыАРМЗС.Колонки.Добавить("ИмяСхемы",ТипКолИмяСхемы,"Имя файла-схемы");
	ТипКолПредставлениеСхемы = СоздатьОписанияТипов("Строка",80);
	тбСхемыАРМЗС.Колонки.Добавить("ПредставлениеСхемы",ТипКолПредставлениеСхемы,НСтр("ru='Наименование регл.отчета';uk='Найменування регл.звіту'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	тбСхемыАРМЗС.Колонки.Добавить("НазваниеСтраницыПанели",ТипКолНазваниеСтраницыПанели,НСтр("ru='Наименование страницы панели';uk='Найменування сторінки панелі'"));

	ТипКолфВыгрузка = СоздатьОписанияТипов("Число",1,0);
	тбСхемыАРМЗС.Колонки.Добавить("фВыгрузка",ТипКолфВыгрузка,НСтр("ru='Выгружать?';uk='Вивантажувати?'"));
	
	НовСтрока = тбСхемыАРМЗС.Добавить();
	НовСтрока.ИмяСхемы = "ПоказателиАРМЗС2008"; 
	НовСтрока.ПредставлениеСхемы =НСтр("ru='отчет в пенсионный фонд ';uk='Звіт у пенсійний фонд'");
	НовСтрока.НазваниеСтраницыПанели ="ОтчетПф";
	НовСтрока.фВыгрузка = 1;
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетПФ";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вычисляется автоматически';uk='Значення обчислюється автоматично'");
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");
		КонецЕсли;

		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Печатать сразу';uk='Друкувати відразу'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Показать бланк';uk='Показати бланк'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЛинияСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЛинияПусто = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);

	
	УстановитьСистемуюОбластьПечатиСтраницыОтчета();

	мМассивТиповЛиний = Новый Массив();
	мМассивТиповЛиний.Вставить(0, ЛинияПусто);
	мМассивТиповЛиний.Вставить(1, ЛинияСнизу);
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		ТаблицаВРБольничные.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), "",10);
		КолонкаВидРасчета 		 = ЭлементыФормы.ТаблицаВРБольничных.Колонки.Вставить(0,НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
		КолонкаВидРасчета.Имя    = "ВидРасчета";
		КолонкаВидРасчета.Данные = "ВидРасчета";
	Иначе	
		ЭлементыФормы.ПанельВРБольничные.Свертка = РежимСверткиЭлементаУправления.Лево;
		ЭлементыФормы.Разделитель1.Лево = 0;
	КонецЕсли;
	
	ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.ОбластьПечати = ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Найти("ПредупреждениеОПечати");
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	Перем ИсходноеКоличествоСтрокГруппы;

	ЭтаФорма.АвтоЗаголовок = Ложь;

	мОтчетПФ = ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ;
	ТекТабличноеПоле = мОтчетПФ;
	
	Если мСохраненныйДок = Неопределено Тогда

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			
			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
			
			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
			
			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл
				
				СтрокаГруппы = СтруктураГруппы.Добавить();
				
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					
					ИмяКолонки    = Колонка.Имя;
					
					//Если (ТекТабличноеПоле = мПриложение1) Или (ТекТабличноеПоле = мПриложение5) Тогда
					КодПоказателя    = ИмяКолонки + Формат(НСтр,"ЧЦ=2;ЧВН=0;ЧГ=;");
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];
					//КонецЕсли;
						
					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;
					
					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;
					
				КонецЦикла;
			КонецЦикла;
		
		КонецЦикла;

		
		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 2;

			ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
			
			УстановитьФорматВывода();
			
		    Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
				// только для бухгалтерии
				мТаблицаВРБольничные 					  = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничные");	
				Если НЕ мТаблицаВРБольничные = Неопределено Тогда
					
					мСоостветствиеБольничныеЗаСчетПредприятия = ВосстановитьЗначение("РегламентированнаяОтчетность_СоостветствиеБольничныеЗаСчетПредприятия");	
					Если мСоостветствиеБольничныеЗаСчетПредприятия = Неопределено Тогда
						мСоостветствиеБольничныеЗаСчетПредприятия = Новый Соответствие();
					КонецЕсли;
					
					ТаблицаВРБольничные.Очистить();
					Для каждого ВР Из мТаблицаВРБольничные Цикл
						СтрокаВР = ТаблицаВРБольничные.Добавить();
						СтрокаВР.ВидРасчета = ВР;
						Если мСоостветствиеБольничныеЗаСчетПредприятия[ВР] = Истина Тогда
							СтрокаВР.ЗаСчетПредприятия = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьСведенияОбОрганизации();

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();
	мОтчетПФ.ТолькоПросмотр = Истина;

	УстановитьЦветФонаЯчейки(,,"ОтчетПФ");
	
	СоздатьТаблицуСоСхемамиВыгрузки();
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность = Истина Тогда

		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения ?';uk='Дані були змінені. Зберегти зміни ?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;

			мСохраненныйДок.Записать();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	Очистить();
	
	ЗаполнитьСведенияОбОрганизации();
	
	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		ЭтаФорма.Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)


	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	
	мОтчетПФ.Области.ДеньДаты.Значение 	= ЧастиДатыПодписи.День;
	мОтчетПФ.Области.МесяцДаты.Значение = ЧастиДатыПодписи.Месяц;
	мОтчетПФ.Области.ГодДаты.Значение 	= ЧастиДатыПодписи.ПоследняяЦифраГода;
	
//	мОтчетПФ.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;
	
 КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаОтчетПФПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаОтчетПФПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа.
//   Устанавливает признак модифицированности данных в форме, вызывает пересчет
// вычисляемых показателей  табличных полей и обновляет структуру данных
// многострочного раздела.
//
Процедура ПолеТабличногоДокументаОтчетПФПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	Расчет();
	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаОтчетПФПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа.
//
Процедура ПолеВыбораВариантЗаполненияОтчетПФПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки.
//
Процедура ПолеВводаЗначениеКорректировкиОтчетПФПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиПриИзменении

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// "Комментарий" по ячейке, для которой установлен алгоритм автозаполнения 
// [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийОтчетПФПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийПриИзменении()

Процедура КоманднаяПанельДействийВыгрузитьВАРМЗС(Кнопка)
	
  	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВАРМЗС();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиНажатие(Элемент)
	
	ВставитьДополнительнуюСтроку(); 
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиНажатие(Элемент)
	
	УдалитьДополнительнуюСтроку();
		
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       НСтр("ru='в гривнях';uk='у гривнях'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    НСтр("ru='в тысячах гривень';uk='у тисячах гривень'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, НСтр("ru='в миллионах гривень';uk='у мільйонах гривень'"));


// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетПФ.СписокВыбора.Добавить(1, НСтр("ru='не заполнять автоматически';uk='не заповнювати автоматично'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетПФ.СписокВыбора.Добавить(2, НСтр("ru='заполнять автоматически с корректировкой';uk='заповнювати автоматично з коригуванням'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетПФ.СписокВыбора.Добавить(3, НСтр("ru='заполнять автоматически без корректировки';uk='заповнювати автоматично без коригування'"));
//Список выьбора для полей содержащих месяца 
СписокВыбораМесяца = Новый СписокЗначений;
СписокВыбораМесяца.Добавить("Січень","Січень");
СписокВыбораМесяца.Добавить("Лютий","Лютий");
СписокВыбораМесяца.Добавить("Березень","Березень");
СписокВыбораМесяца.Добавить("Квітень","Квітень");
СписокВыбораМесяца.Добавить("Травень","Травень");
СписокВыбораМесяца.Добавить("Червень","Червень");
СписокВыбораМесяца.Добавить("Липень","Липень");
СписокВыбораМесяца.Добавить("Серпень","Серпень");
СписокВыбораМесяца.Добавить("Вересень","Вересень");
СписокВыбораМесяца.Добавить("Жовтень","Жовтень");
СписокВыбораМесяца.Добавить("Листопад","Листопад");
СписокВыбораМесяца.Добавить("Грудень","Грудень");


ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Т1КМес_01.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;
//ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Т1КМес_02.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;
//ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Т1КМес_03.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;
//ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Т1КМес_04.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;

//ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Мес1_1.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;
//ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Мес1_2.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;
//ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Мес1_3.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;
//ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Мес1_4.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;
//ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Мес2_1.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;
//ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Мес2_2.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;
//ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Мес2_3.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;
//ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Мес2_4.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;
//ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Мес3_1.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;
//ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Мес3_2.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;
//ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Мес3_3.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;
//ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Мес3_4.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;
//ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Мес4_1.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;
//ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Мес4_2.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;
//ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Мес4_3.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;
//ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ.Области.Мес4_4.ЭлементУправления.СписокВыбора = СписокВыбораМесяца ;


ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
ОписаниеТиповСтрока10  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10);


МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));


 мИдГруппы1 = "Т1К";
// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)

КолИсхСтрокИдГруппы1 = 1;

СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("Т1КМес_",   ОписаниеТиповСтрока10);
СтруктураГруппы1.Колонки.Добавить("Т1КСУМП_",  ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("Т1КСУМБ_",  ОписаниеТиповЧисло);


//мИдГруппы2 = "Т2К";
//// количество строк многострочных разделов по "бумажной" форме отчета
//// (минимальное количество строк, которое должно присутствовать всегда)

//КолИсхСтрокИдГруппы2 = 4;

//СтруктураГруппы2 = Новый ТаблицаЗначений;
//СтруктураГруппы2.Колонки.Добавить("ИНН",     ОписаниеТиповСтрока10);
//СтруктураГруппы2.Колонки.Добавить("КодОснования",   ОписаниеТиповСтрока);
//СтруктураГруппы2.Колонки.Добавить("Закон",   ОписаниеТиповСтрока);
//СтруктураГруппы2.Колонки.Добавить("Статья",   ОписаниеТиповСтрока);
//СтруктураГруппы2.Колонки.Добавить("Пункт",   ОписаниеТиповЧисло10);
//СтруктураГруппы2.Колонки.Добавить("Часть",   ОписаниеТиповСтрока);
//СтруктураГруппы2.Колонки.Добавить("Фамилия", ОписаниеТиповСтрока);
//СтруктураГруппы2.Колонки.Добавить("СтажМес",    ОписаниеТиповЧисло10);
//СтруктураГруппы2.Колонки.Добавить("СтажДень",    ОписаниеТиповЧисло10);
//СтруктураГруппы2.Колонки.Добавить("Имя",     ОписаниеТиповСтрока);
//СтруктураГруппы2.Колонки.Добавить("Отчество",ОписаниеТиповСтрока);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
//мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
//мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);

 
ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

мСоставПоказателей = "СоставПоказателей2008Фев";

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
мВерсияФормы = "10/06/2008";
// Код отчета, равен коду по ОКУД
мКодОтчета   = "0710001";

мПечатныеФормы = Новый СписокЗначений;
