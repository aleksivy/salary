////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
//каждая закладка отчета - это объект ПолеТабличногоДокумента
Перем мОтчетПФ;

Перем мСоставПоказателей Экспорт;

//хранит нужные статьи налоговых деклараций
Перем МассивНужныхСтатей;

// переменный для хранения бухгалтерских итогов
Перем мБухИтоги, мБухИтогиРС;


// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов;
Перем мСтруктураИсхКолвоСтрокРазделов;

// хранит код отчета по КНД
Перем мКодОтчета;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы;

Перем ТаблицаБазВзносовОтчетногоПериода,БольничныеПредприятие,БольничныеФСС;

Перем ОписаниеТиповЧисло;

Перем СтрокиДекларации;

Перем Счет65_1,Счет66,Счет66_1,Счет66_3,Счет65_2,Счет65_6,Счет81_5,Счет91,Счет92,Счет93;

Перем мПечатныеФормы Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	//ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по дебету счета, указанного в параметре.
//
Функция СНД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНД()

// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - конечный остаток по дебету счета, указанного в параметре.
//
Функция СКД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНД()


// Функция вычисляет начальный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по кредиту счета, указанного в параметре.
//
Функция СНК(Счет)

	Перем Итог;

	Возврат мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНК()

// Функция вычисляет начальный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по кредиту счета, указанного в параметре.
//
Функция СКК(Счет)

	Перем Итог;

	Возврат мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКК()


// Функция вычисляет кредитовый оборот счета, указанного в качестве параметра 
Функция КО(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // КО()

// Функция вычисляет оборот по кредиту счета и тому субконто, которые указаны в 
// качестве параметров функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по дебету счета, указанного в параметре.
//

Функция КО_субконто_запрос(Счет,Субконто2)
	
	Перем Итог;
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "БП") или (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") Тогда
		
		Итог = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет,Субконто2", Счет, Субконто2);
		
		Возврат Итог;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Сумма(РезультатПриход) КАК Результат	
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Обороты(&ПериодНачало, &ПериодКонец, МЕСЯЦ, СтатьяНалоговойДекларации = &СтатьяНалоговойДекларации И Организация = &Организация)	КАК Взаиморасчеты
		|
		|";
		
		Запрос.УстановитьПараметр("ПериодНачало",	мДатаНачалаПериодаОтчета);
		Запрос.УстановитьПараметр("ПериодКонец",	мДатаКонцаПериодаОтчета);
		Запрос.УстановитьПараметр("Организация",	Организация);
		Запрос.УстановитьПараметр("СтатьяНалоговойДекларации",	Субконто2);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Результат; 
		
	КонецЕсли;
	
КонецФункции // КО_субконто_запрос()


// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураПоказателейВнутрСвязи = Новый Структура;

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий параметры автозаполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки параметров автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии формы для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя, а в текущей - отключено.
							// В этом случае удаляем ячейку из таблицы пользовательских настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Процедура управляет показом в форме периода построения отчета,
Процедура ПоказатьПериод()

	ПериодОтчета = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'");
	
	// Период в заголовке отчета
	мОтчетПФ.Области.ПериодОтчета.Значение   = "за " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг р.';Л = uk_UA");
	
	мОтчетПФ.Области.ПериодОтчетаПриложение.Значение   = "за " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг р.';Л = uk_UA");
		
	П_ставка = ?((Год(мДатаНачалаПериодаОтчета) - 2004)*10<=100,(Год(мДатаНачалаПериодаОтчета) - 2004)*10,100);
	мОтчетПФ.Области.П_ставка.Значение = П_ставка;
	

	// Период в заголовке отчета
	// Для показа периода в заголовке берется текст из заголовка основной формы
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' (за %1 г.)';uk=' (за %1 р.)'"), Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'")); 

КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
Процедура ЗаполнитьСведенияОбОрганизации()

	ОргНазв = Организация.НаименованиеПолное;
	мОтчетПФ.Области.ОргНазв.Значение = ОргНазв;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","ФормаСобственности");
    СписокПоказателей.Добавить("","НомерРегистрацииПФ");
	
	ФИОДиректора       = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФИОРук;
	ФИОГлавБуха        = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФИОБух;
	КодЕДРПОУ          = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодПоЕДРПОУ;
	ФормаСобственности = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФормаСобственности;
	НомерРегистрацииПФ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).НомерРегистрацииПФ;
	
	мОтчетПФ.Области.Директор.Значение              = ФИОДиректора;
	мОтчетПФ.Области.ОргБухгалтер.Значение          = ФИОГлавБуха; 
	мОтчетПФ.Области.ГлавБух.Значение               = ФИОГлавБуха; 
	мОтчетПФ.Области.ОргКодЕДРПОУ.Значение          = КодЕДРПОУ;
	мОтчетПФ.Области.ОргФормаСобственности.Значение = ФормаСобственности;
	мОтчетПФ.Области.НомерРегистрацииПФ.Значение    = НомерРегистрацииПФ;

	мОтчетПФ.Области.Адрес.Значение   = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
	мОтчетПФ.Области.Телефон.Значение = УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	
	ДопСведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, мДатаНачалаПериодаОтчета, "uk");
	мОтчетПФ.Области.РС.Значение     = ДопСведенияОбОрганизации.НомерСчета;
	мОтчетПФ.Области.Банк.Значение   = ДопСведенияОбОрганизации.Банк;
	мОтчетПФ.Области.МФО.Значение    = ДопСведенияОбОрганизации.МФО;

   
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(НСтр("ru='Отчет в ПФ: при выводе сумм в гривнях точность не может превышать 2 знака';uk='Звіт у ПФ: при виведенні сум у гривнях точність не може перевищувати 2 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(НСтр("ru='Отчет в ПФ: при выводе сумм в тысячах гривень точность не может превышать 3 знака';uk='Звіт у ПФ: при виведенні сум у тисячах гривень точність не може перевищувати 3 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(НСтр("ru='Отчет в ПФ: при выводе сумм в миллионах гривень точность не может превышать 6 знаков';uk='Звіт у ПФ: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

	Сообщить(НСтр("ru='После изменения формата вывода значений, для корректного расчета итогов необходимо перезаполнить отчет!';uk='Після зміни формату виводу значень, для корректного розрахунку підсумків треба перезаполвнити звіт!'"), СтатусСообщения.Внимание);	
КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";

	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "ОтчетПФ";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()


// Обновляет пользовательские настройки при изменении версии формы.
// унифицирована, однако использование пока ... вопрос
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить(НСтр("ru='Измененилась версия формы отчета."
"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
"Виконується відновлення користувальницьких настройок.'"), СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	Если ЕстьИзмененияВариантыЗаполнения Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить(НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Оновлення користувальницьких настройок успішно завершене!'"));

	Иначе

		Сообщить(НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі користувальницьких настройок не виявлені!'"));

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()


// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ИмяТекущейСтраницыПанели  = "ОтчетПФ";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетПФ";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетПФ";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет();
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		
		// Очищаем комментарий редактируемой ячейки
		ТекущаяОбласть.Примечание.Текст = "";

	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетПФ";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетПФ";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя)

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("ОтчетПФ");
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	мОтчетПФ.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить()

	// Очищаем содержимое ячеек поля табличного документа
	ТекТабличноеПоле = мОтчетПФ;
	ОчиститьТабличноеПоле(ТекТабличноеПоле);

	// Выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

КонецПроцедуры // Очистить()

Процедура РазбитьПечатнуюФорму(ПечФорма)
	
	ИмяФормы = НСтр("ru='Отчет в ПФ';uk='Звіт у ПФ'");
	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = Истина;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	
	Для Сч = 1 По ПечФорма.ВысотаТаблицы Цикл
		
		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		НовТаблДок = Новый ТабличныйДокумент();
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = Истина;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати)
    мПечатныеФормы.Очистить();
	
	ПечатнаяФорма = Новый ТабличныйДокумент();

	ОбластьПечати = мОтчетПФ.ПолучитьОбласть("Шапка");
	ПечатнаяФорма.Вывести(ОбластьПечати);
	
	ОбластьПечати = мОтчетПФ.ПолучитьОбласть("ОтчетПФ");
	ПечатнаяФорма.Вывести(ОбластьПечати);
	
	ОбластьПечати = мОтчетПФ.ПолучитьОбласть("Подвал");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;

//	Если ВидПечати = "ПоказатьБланк" Тогда
//		ПечатнаяФорма.Показать(СокрП(ЭтаФорма.Заголовок));
//	ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
//		ПечатнаяФорма.Напечатать();
//	КонецЕсли;

	РазбитьПечатнуюФорму(ПечатнаяФорма);
	
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
КонецПроцедуры // Печать()


// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить() Экспорт
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;


	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.

		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;

		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();

	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	//Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

	//	ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
	//	ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

	//	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	//	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	//КонецЦикла;

	//ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаОтчетПФ";
	//ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекТабличноеПоле        = мОтчетПФ;

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
//	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	Модифицированность = Ложь;

	Возврат Истина;
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	// восстанавливаем реквизиты отчета
	Организация              = мСохраненныйДок.Организация;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;

	ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();


	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	УстановитьФорматВывода();
	Расчет();

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()
	
	мОтчетПФ.Области.П1.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П1_1.Значение) 
	                             + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П1_2.Значение);	 
	
	//Фактичні витрати на оплату праці, суми перших п'яти днів тимчасової непрацездатності та суми 
	//допомоги у зв'язку з тимчасовою непрацездатністю та суми доходу, що розподіляється між членами 
	//колективних, орендних підприємств, сільськогосподарських кооперативів, фермерських господарств, 
	//на які нараховуються внески, усього
	мОтчетПФ.Области.П2.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П2_1.Значение) 
	                             + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П2_2.Значение) 
	                             + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П2_3.Значение);   
	
	мОтчетПФ.Области.П3_1.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П3_1_1.Значение) 
	                               + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П3_1_2.Значение) 
								   + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П3_1_3.Значение); 
	
	мОтчетПФ.Области.П3_2.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П3_2_1.Значение) 
	                               + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П3_2_2.Значение); 
	
	//Нараховано, усього
	мОтчетПФ.Области.П3.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П3_1.Значение) 
	                             + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П3_2.Значение);
	
     
	//Сума, на яку збільшено внески у зв'язку з виправленням помилки у період після 01.01.2004
	мОтчетПФ.Области.П6.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П6_1.Значение) 
	                             + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П6_2.Значение);
	
	//Сума, на яку зменшені внески у зв'язку з виправленням помилки у період після 01.01.2004
	мОтчетПФ.Области.П7.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П7_1.Значение) 
	                             + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П7_2.Значение);
	
	//Загальна сума страхових внесків за розділом 1 (рядки 3 + 5 + 6 - 7)
	//32%, 4%, 42%   (рядки 3 + 6.1 - 7.1)
	мОтчетПФ.Области.П9_1.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П3.Значение) 
	                               + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П6_1.Значение) 
	                               - ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П7_1.Значение) 
								   + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П8.Значение);
	
	//1-5%    (рядки 5 + 6.2 - 7.2)  
	мОтчетПФ.Области.П9_2.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П5.Значение) 
	                               + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П6_2.Значение) 
	                               - ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П7_2.Значение); 
	
	мОтчетПФ.Области.П9.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П3.Значение) 
	                    + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П5.Значение) 
	                    + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П6.Значение) 
	                    - ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П7.Значение) 
	                    + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.П8.Значение);      
	
	//II Розділ*
    //Розрахунки за внесками (зборами) за період до 01.01.2004
	//Одержаний фонд оплати праці у звітному місяці
	мОтчетПФ.Области.ПР2_1.Значение  = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП1_1.Значение) 
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП1_2.Значение) 
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП1_3.Значение)
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП2_1.Значение) 
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП2_2.Значение) 
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП2_3.Значение) 
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП3_1.Значение) 
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП3_2.Значение) 
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП3_3.Значение)
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП4_1.Значение) 
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП4_2.Значение) 
	                                 + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.ФОПП4_3.Значение);
	
	//Належить до сплати, усього 32 %
	мОтчетПФ.Области.ПР2_2_1.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл1_32.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл2_32.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл3_32.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл4_32.Значение);
		
	//Належить до сплати, усього 4 %
	мОтчетПФ.Области.ПР2_2_2.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл1_4.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл2_4.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл3_4.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл4_4.Значение); 
	
	//Належить до сплати, усього 42 %
	мОтчетПФ.Области.ПР2_2_3.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл1_42.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл2_42.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл3_42.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл4_42.Значение); 

	//Належить до сплати, усього  1 - 5 % 
	мОтчетПФ.Области.ПР2_2_4.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл1_5.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл2_5.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл3_5.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл4_5.Значение);
		
	//Належить до сплати, усього
	мОтчетПФ.Области.ПР2_2.Значение  = мОтчетПФ.Области.ПР2_2_1.Значение 
	                                 + мОтчетПФ.Области.ПР2_2_2.Значение 
	                                 + мОтчетПФ.Области.ПР2_2_3.Значение 
									 + мОтчетПФ.Области.ПР2_2_4.Значение;
	
	//Загальна сума внесків (збору) за розділом II (рядки 2 + 3 - 4)
	мОтчетПФ.Области.ПР2_5.Значение = мОтчетПФ.Области.ПР2_2.Значение 
	                                + мОтчетПФ.Области.ПР2_3.Значение 
									- мОтчетПФ.Области.ПР2_4.Значение;


	мОтчетПФ.Области.КВыпл1.Значение  = мОтчетПФ.Области.КВыпл1_32.Значение; 
	мОтчетПФ.Области.КВыпл2.Значение  = мОтчетПФ.Области.КВыпл1_4.Значение; 
	мОтчетПФ.Области.КВыпл3.Значение  = мОтчетПФ.Области.КВыпл1_42.Значение; 
	мОтчетПФ.Области.КВыпл4.Значение  = мОтчетПФ.Области.КВыпл1_5.Значение;
	мОтчетПФ.Области.КВыпл5.Значение  = мОтчетПФ.Области.КВыпл2_32.Значение;	
	мОтчетПФ.Области.КВыпл6.Значение  = мОтчетПФ.Области.КВыпл2_4.Значение; 
	мОтчетПФ.Области.КВыпл7.Значение  = мОтчетПФ.Области.КВыпл2_42.Значение; 
	мОтчетПФ.Области.КВыпл8.Значение  = мОтчетПФ.Области.КВыпл2_5.Значение;
	мОтчетПФ.Области.КВыпл9.Значение  = мОтчетПФ.Области.КВыпл3_32.Значение;	
	мОтчетПФ.Области.КВыпл10.Значение = мОтчетПФ.Области.КВыпл3_4.Значение; 
	мОтчетПФ.Области.КВыпл11.Значение = мОтчетПФ.Области.КВыпл3_42.Значение; 
	мОтчетПФ.Области.КВыпл12.Значение = мОтчетПФ.Области.КВыпл3_5.Значение;
	мОтчетПФ.Области.КВыпл13.Значение = мОтчетПФ.Области.КВыпл4_32.Значение; 
	мОтчетПФ.Области.КВыпл14.Значение = мОтчетПФ.Области.КВыпл4_4.Значение; 
	мОтчетПФ.Области.КВыпл15.Значение = мОтчетПФ.Области.КВыпл4_42.Значение; 
	мОтчетПФ.Области.КВыпл16.Значение = мОтчетПФ.Области.КВыпл4_5.Значение;
	
	//Одержаний фонд оплати праці у звітному місяці за місяці
	мОтчетПФ.Области.ФОП_Итого.Значение = ОкруглитьЧислоПоФормату(Макс(мОтчетПФ.Области.ФОП1_1.Значение, 
	                                                                   мОтчетПФ.Области.ФОП1_2.Значение,  
																	   мОтчетПФ.Области.ФОП1_3.Значение, 
																	   мОтчетПФ.Области.ФОП1_4.Значение)) 
	                                    + ОкруглитьЧислоПоФормату(Макс(мОтчетПФ.Области.ФОП2_1.Значение, 
										                               мОтчетПФ.Области.ФОП2_2.Значение, 
																	   мОтчетПФ.Области.ФОП2_3.Значение, 
																	   мОтчетПФ.Области.ФОП2_4.Значение)) 
	                                    + ОкруглитьЧислоПоФормату(Макс(мОтчетПФ.Области.ФОП3_1.Значение, 
										                               мОтчетПФ.Области.ФОП3_2.Значение, 
																	   мОтчетПФ.Области.ФОП3_3.Значение, 
																	   мОтчетПФ.Области.ФОП3_4.Значение)) 
	                                    + ОкруглитьЧислоПоФормату(Макс(мОтчетПФ.Области.ФОП4_1.Значение, 
										                               мОтчетПФ.Области.ФОП4_2.Значение, 
																	   мОтчетПФ.Области.ФОП4_3.Значение, 
																	   мОтчетПФ.Области.ФОП4_4.Значение));
	
	мОтчетПФ.Области.КВыпл_Итого.Значение = ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл1.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл2.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл3.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл4.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл5.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл6.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл7.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл8.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл9.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл10.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл11.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл12.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл13.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл14.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл15.Значение) 
	                                      + ОкруглитьЧислоПоФормату(мОтчетПФ.Области.КВыпл16.Значение);
	
КонецПроцедуры // Расчет()

//выпоняет расчет числа застрахованных лиц и лиц, получающих пособие по уходу за ребенком
Процедура РассчитатьЧислоЗастрахованныхЛиц (ТаблицаБазВзносов)
	
	ЗастрЛицоПред = NULL;
	ПредДекретчик = NULL;
	ЗастрЛиц = 0;
	Декретчиков =0;
	
	Для каждого строка из ТаблицаБазВзносов Цикл
		Если (строка.ЗастрЛицо <> ЗастрЛицоПред) и (строка.СтатьяНалоговойДекларации = МассивНужныхСтатей[3]) Тогда
			ЗастрЛиц = ЗастрЛиц + 1;
			ЗастрЛицоПред = строка.ЗастрЛицо;
		КонецЕсли;
		
		Если (строка.ЗастрЛицо <> ПредДекретчик) и (строка.СтатьяНалоговойДекларации = МассивНужныхСтатей[4]) Тогда
			Декретчиков = Декретчиков + 1;
			ЗастрЛицоПред = строка.ЗастрЛицо;
		КонецЕсли;
	КонецЦикла;
	
УстановитьЗначениеПоказателя("ЗастрЛиц", ЗастрЛиц);	
УстановитьЗначениеПоказателя("Декретчиков",Декретчиков);	

КонецПроцедуры

//выполняет расчет начислений за прошлые и будущие периоды
Процедура  РассчитатьНачисленияЗаПрошлыеИБудущиеПериоды()
	БольничныеПредприятие = 0;
	БольничныеФСС = 0;
	
	МаксБазаСведения = РегистрыСведений.СведенияОВзносахВФонды;
	Отбор = Новый Структура("Налог",Справочники.Налоги.ПенсионныйФОТ);

	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		
		ТаблицаНачисленийПрошлБудущ = ТаблицаБазВзносовОтчетногоПериода.Скопировать();
		
		ТаблицаБазВзносовОтчетногоПериода.Свернуть("СтатьяНалоговойДекларации, НалоговыйПериод", "База");
		
		ТаблицаНачисленийПрошлБудущ.Свернуть("ЗастрЛицо,НалоговыйПериод,МесяцДействия,СтатьяНалоговойДекларации", "СуммаНачисления");
		
		тбНачисления = Новый ТаблицаЗначений;
		тбНачисления.Колонки.Добавить("Месяц");
		тбНачисления.Колонки.Добавить("ПрошлаяСумма",ОписаниеТиповЧисло);
		тбНачисления.Колонки.Добавить("БудущаяСумма",ОписаниеТиповЧисло);
		СотрПред = NULL;
		
		Для каждого стр Из ТаблицаНачисленийПрошлБудущ Цикл
			Если (стр.ЗастрЛицо <> СотрПред) или ((стр.ЗастрЛицо = СотрПред) и (стр.СтатьяНалоговойДекларации = СтрокиДекларации.ПФ_Декр)) Тогда
				Если  (стр.МесяцДействия <> NULL) Тогда
					СтруктураМаксБаза = МаксБазаСведения.ПолучитьПоследнее(стр.МесяцДействия,Отбор);
					МаксБаза = СтруктураМаксБаза.Предел;

					Если ((стр.МесяцДействия < мДатаНачалаПериодаОтчета) и (стр.НалоговыйПериод = мДатаНачалаПериодаОтчета)) Тогда 
						НоваяСтрока = тбНачисления.Добавить();
						НоваяСтрока.Месяц = стр.МесяцДействия;
                       	НоваяСтрока.ПрошлаяСумма = Мин(стр.СуммаНачисления,МаксБаза);   
					ИначеЕсли ((стр.МесяцДействия > мДатаКонцаПериодаОтчета) и (стр.НалоговыйПериод = мДатаНачалаПериодаОтчета)) Тогда
						НоваяСтрока = тбНачисления.Добавить();
						НоваяСтрока.Месяц = стр.МесяцДействия;
						НоваяСтрока.БудущаяСумма = Мин(стр.СуммаНачисления,МаксБаза);   
					КонецЕсли;
				КонецЕсли;
				СотрПред = стр.ЗастрЛицо;
			КонецЕсли;
		КонецЦикла; 
		
		БольничныеПредприятие = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет81_5, Счет66_3)
		+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет91, Счет66_3)
		+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет92, Счет66_3)
		+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет93, Счет66_3); 
		
		БольничныеФСС = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет65_2, Счет66_3)
		+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет65_6, Счет66_3); 
		
		
		
	ИначеЕсли (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") или (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП") Тогда
		
		//запросы по больничным, а также всем остальным начислениям, за прошлые или будущие периоды,
		//зарегистрированные в отчетном месяце
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ОсновныеНачисленияРаботников.ВидРасчета КАК ВидРасчета,
		|	ОсновныеНачисленияРаботников.ПериодДействия КАК ПериодДействия,
		|	СУММА(ОсновныеНачисленияРаботников.Результат) КАК Результат
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботников
		|
		|ГДЕ
		|	ОсновныеНачисленияРаботников.Организация = &Организация И
		|	ОсновныеНачисленияРаботников.ПериодРегистрации <= &ДатаКон И
		|	ОсновныеНачисленияРаботников.ПериодРегистрации >= &ДатаНач
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеНачисленияРаботников.ВидРасчета,
		|	ОсновныеНачисленияРаботников.ПериодДействия
		|
		|ИТОГИ ПО
		|	ВидРасчета";
		
		ЗапросНачисленияБольн = Новый Запрос ();
		ЗапросНачисленияБольн.Текст = ТекстЗапроса;
		ЗапросНачисленияБольн.УстановитьПараметр("ДатаНач", мДатаНачалаПериодаОтчета);
		ЗапросНачисленияБольн.УстановитьПараметр("ДатаКон" , мДатаКонцаПериодаОтчета);
		ЗапросНачисленияБольн.УстановитьПараметр("Организация",   Организация);
		ЗапросНачисленияБольн.УстановитьПараметр("БольнПредприятие",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛОрганизации);
		ЗапросНачисленияБольн.УстановитьПараметр("БольнФСС",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ);
		
		РезультатЗапроса = ЗапросНачисленияБольн.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			тбНачисления = Новый ТаблицаЗначений;
			тбНачисления.Колонки.Добавить("Месяц");
			тбНачисления.Колонки.Добавить("ПрошлаяСумма",ОписаниеТиповЧисло);
			тбНачисления.Колонки.Добавить("БудущаяСумма",ОписаниеТиповЧисло);
			ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
			Для каждого стр Из ТаблицаРезультатов Цикл
				Если  (стр.ПериодДействия <> NULL) Тогда
					СтруктураМаксБаза = МаксБазаСведения.ПолучитьПоследнее(стр.ПериодДействия,Отбор);
					МаксБаза = СтруктураМаксБаза.Предел;

					Если  стр.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛОрганизации Тогда 
						БольничныеПредприятие = БольничныеПредприятие + стр.Результат;
					КонецЕсли;
					
					Если  стр.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ Тогда 
						БольничныеФСС = БольничныеФСС + стр.Результат;
					КонецЕсли;
					
					
					Если (стр.ПериодДействия < мДатаНачалаПериодаОтчета) Тогда 
						НоваяСтрока = тбНачисления.Добавить();
						НоваяСтрока.Месяц = стр.ПериодДействия;
						НоваяСтрока.ПрошлаяСумма = Мин(МаксБаза,стр.Результат);   
					ИначеЕсли (стр.ПериодДействия > мДатаКонцаПериодаОтчета) Тогда
						НоваяСтрока = тбНачисления.Добавить();
						НоваяСтрока.Месяц = стр.ПериодДействия;
						НоваяСтрока.БудущаяСумма = Мин(МаксБаза,стр.Результат);   
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;

	тбНачисления.Свернуть("Месяц","ПрошлаяСумма,БудущаяСумма");
	тбНачисления.Сортировать("Месяц Возр");   
		
  		
	// III Раздел 	
	//Суми, нараховані у звітному базовому періоді за минулі та 
	//майбутні місяці, на які нараховуються страхові внески	
	Если тбНачисления.Количество() <> 0 Тогда
		Для каждого стр из  тбНачисления Цикл  
			НомСтр = тбНачисления.Индекс(стр) + 1;
			ИмяЯчейки = "Мес_"  + НомСтр;
			УстановитьЗначениеПоказателя(ИмяЯчейки,Формат(стр.Месяц,"ДФ = 'ММММ';Л = uk_UA"));
			ИмяЯчейки = "СУМП_"  + НомСтр;
			УстановитьЗначениеПоказателя(ИмяЯчейки,стр.ПрошлаяСумма);
			ИмяЯчейки = "СУМБ_"  + НомСтр;
			УстановитьЗначениеПоказателя(ИмяЯчейки,стр.БудущаяСумма);
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры	

Процедура РассчитатьСуммуФактическихЗатратНаОплатуТруда()
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП") Тогда
		//Загальна сума фактичних витрат на оплату праці та інших виплат, пов'язаних з відносинами 
		//трудового найму (Кт 661)
		
		//  по виду взаиморасчетов "заработная плата" начисления гарантированно пройдут 
		//  по кредиту счет 661
		Запрос = Новый Запрос;
		Запрос.Текст = "	
		|ВЫБРАТЬ
		|	Сумма(СуммаНачисленийОборот) КАК КО66	
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Обороты(&ПериодНачало, &ПериодКонец, МЕСЯЦ, ВидВзаиморасчетов = &ВидВзаиморасчетов И Организация = &Организация)	КАК Взаиморасчеты
		|";
		
		Запрос.УстановитьПараметр("ПериодНачало",	мДатаНачалаПериодаОтчета);
		Запрос.УстановитьПараметр("ПериодКонец",	мДатаКонцаПериодаОтчета);
		Запрос.УстановитьПараметр("Организация",	Организация);
		Запрос.УстановитьПараметр("ВидВзаиморасчетов",	Перечисления.ВидыВзаиморасчетовСРаботниками.ЗаработнаяПлата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда	
			Если Выборка.КО66 <> NULL Тогда
				П1_1 = Выборка.КО66;
				УстановитьЗначениеПоказателя("П1_1", П1_1);
			КонецЕсли;
		КонецЕсли;
	Иначе
		П1_1 = КО(Счет66);
		УстановитьЗначениеПоказателя("П1_1", П1_1);
			
	КонецЕсли;	
	
КонецПроцедуры	

//выполняет расчет сальдо взаиомрасчетов с фондом
Процедура РассчитатьСальдоВзаиморасчетовСФондом()
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП") Тогда
		
		//Сальдо розрахунків рахунка 65 "Розрахунки за страхуванням" субрахунка 651 "За пенсійним забезпеченням" на початок 
		//звітного періоду: 
		
		ЗапросРасчетыСФондом = Новый Запрос;
		ЗапросРасчетыСФондом.Текст ="
		|ВЫБРАТЬ
		|	СУММА(РезультатОстаток + НеподтвержденнаяСуммаОстаток)	КАК Результат
		|
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Остатки(&НачДата, Организация = &Организация И СтатьяНалоговойДекларации В (&МассивСтатей))
		|
		|";
		
		ЗапросРасчетыСФондом.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
		ЗапросРасчетыСФондом.УстановитьПараметр("Организация",   Организация);
		
		МассивСтатей = Новый Массив;
		МассивСтатей.Добавить(Справочники.СтатьиНалоговыхДеклараций.ПФ_Орг32);
		МассивСтатей.Добавить(Справочники.СтатьиНалоговыхДеклараций.ПФ_Орг4);
		МассивСтатей.Добавить(Справочники.СтатьиНалоговыхДеклараций.ПФ_Орг42);
		МассивСтатей.Добавить(Справочники.СтатьиНалоговыхДеклараций.ПФ_Сотр15);
		ЗапросРасчетыСФондом.УстановитьПараметр("МассивСтатей",   МассивСтатей);
		
		РезультатЗапроса = ЗапросРасчетыСФондом.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			Если РезультатЗапроса.Результат <> NULL Тогда
				Если РезультатЗапроса.Результат > 0 Тогда
					ПенсНачКт = РезультатЗапроса.Результат;
					УстановитьЗначениеПоказателя("ПенсНачКт",ПенсНачКт);
				Иначе
					ПенсНачДт = -РезультатЗапроса.Результат;
					УстановитьЗначениеПоказателя("ПенсНачДт",ПенсНачДт);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//Сальдо розрахунків рахунка 65 "Розрахунки за страхуванням" субрахунка 651 "За пенсійним забезпеченням" на початок 
		//звітного періоду:
		
		ЗапросРасчетыСФондом.УстановитьПараметр("НачДата", мДатаКонцаПериодаОтчета);
		
		РезультатЗапроса = ЗапросРасчетыСФондом.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			Если РезультатЗапроса.Результат > 0 Тогда
				ПенсКонКт = РезультатЗапроса.Результат;
				УстановитьЗначениеПоказателя("ПенсКонКт",ПенсКонКт);
			Иначе
				ПенсКонДт = -РезультатЗапроса.Результат;
				УстановитьЗначениеПоказателя("ПенсКонДт",ПенсКонДт);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПенсНачДт = СНД(Счет65_1);
		УстановитьЗначениеПоказателя("ПенсНачДт",ПенсНачДт);
		
		ПенсНачКт = СНК(Счет65_1);
		УстановитьЗначениеПоказателя("ПенсНачКт",ПенсНачКт);
		
		//Сальдо розрахунків рахунка 65 "Розрахунки за страхуванням" субрахунка 651 "За пенсійним забезпеченням" на початок 
		//звітного періоду: 
		ПенсКонДт = СКД(Счет65_1);
		УстановитьЗначениеПоказателя("ПенсКонДт",ПенсКонДт);
		
		ПенсКонКт = СКК(Счет65_1);
		УстановитьЗначениеПоказателя("ПенсКонКт",ПенсКонКт);
	КонецЕсли;   
	   
КонецПроцедуры

Процедура РассчитатьСуммыЗадолженностейЗаПериодДо2004();
   //для заполнения Раздела II по выплатам задолженностей за период до 2004 года
 ТекстЗапроса = "
  |ВЫБРАТЬ
  |ВзаиморасчетыПоВзносам.НалоговыйПериод КАК НалоговыйМесяц,
  |ВзаиморасчетыПоВзносам.БазаВзносаРасход КАК База,
  |ВзаиморасчетыПоВзносам.РезультатРасход КАК Результат,
  |ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации КАК СтатьяДекларации,
  |ВспомогательнаяСтруктура.СуммаНачисленоПоФактуВыплаты
  |ИЗ 
  |РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Обороты(&НачДата,&КонДата) КАК ВзаиморасчетыПоВзносам
  | ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
  | ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов,
  | ВзаиморасчетыСРаботниками.СуммаНачисленийРасход КАК СуммаНачисленоПоФактуВыплаты
  |  ИЗ
  | РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Обороты(&НачДата,&КонДата, ,Организация = &парамОрганизация) КАК ВзаиморасчетыСРаботниками) КАК ВспомогательнаяСтруктура
  | ПО ВзаиморасчетыПоВзносам.НалоговыйПериод = ВспомогательнаяСтруктура.ПериодВзаиморасчетов
  |ГДЕ 
  |ВзаиморасчетыПоВзносам.Организация = &парамОрганизация
  |И ВЫБОР КОГДА ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации В (&МассивНужныхСтатей) И
  |ГОД(ВзаиморасчетыПоВзносам.НалоговыйПериод) < 2004 ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ
  |"; 
  
    ЗапросВыплатаЗадолжДо2004 = Новый Запрос;
	ЗапросВыплатаЗадолжДо2004.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
	ЗапросВыплатаЗадолжДо2004.УстановитьПараметр("КонДата" , мДатаКонцаПериодаОтчета);

	ЗапросВыплатаЗадолжДо2004.УстановитьПараметр("МассивНужныхСтатей",  МассивНужныхСтатей);
	ЗапросВыплатаЗадолжДо2004.УстановитьПараметр("парамОрганизация",   Организация);
	ЗапросВыплатаЗадолжДо2004.Текст = ТекстЗапроса;
	
	РезультатЗапроса = ЗапросВыплатаЗадолжДо2004.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаРезультатовЗадолж = РезультатЗапроса.Выгрузить();
		ТаблицаРезультатовЗадолж.Свернуть("СтатьяДекларации,НалоговыйМесяц", "СуммаНачисленоПоФактуВыплаты, База, Результат");	
		ТаблицаРезультатовЗадолж.Сортировать("НалоговыйМесяц Возр");
		счМес = 1; 
		МесяцПред = "";
		Отбор = Новый Структура;
		Для каждого стр из ТаблицаРезультатовЗадолж Цикл
			Месяц = стр.НалоговыйМесяц;
			Если (Месяц <> МесяцПред) и (счМес < 5) Тогда 	
				МесяцСтр = "";
				Взнос32 = 0;Взнос4 = 0;Взнос42 = 0; Взнос15 = 0;
				База32 = 0; База42 = 0; База4 = 0; База15 = 0;
				Коэф32 = 0; Коэф42 = 0; Коэф4 = 0; Коэф15 = 0;
				Начисл32 = 0; Начисл42 = 0;Начисл4 = 0; Начисл15 = 0;
				Отбор.Вставить("НалоговыйМесяц",Месяц);
				НайденныеСтрокиСИнфоЗаМесяц = ТаблицаРезультатовЗадолж.НайтиСтроки(Отбор);
				мОтчетПФ.Области["ФОПП"+счМес+"_1"].Значение  =  стр.СуммаНачисленоПоФактуВыплаты;
				//обходим теперь массив найденных строк и присваиваем нужную информацию 
				//о различных базах и суммах взносов и коэффициенте
				Для i = 0 по НайденныеСтрокиСИнфоЗаМесяц.Количество() - 1 Цикл
					Если (НайденныеСтрокиСИнфоЗаМесяц[i].СтатьяДекларации = СтрокиДекларации.ПФ_Орг32) Тогда
						База32 = НайденныеСтрокиСИнфоЗаМесяц[i].База;
						Взнос32 = НайденныеСтрокиСИнфоЗаМесяц[i].Результат;
					ИначеЕсли(НайденныеСтрокиСИнфоЗаМесяц[i].СтатьяДекларации = СтрокиДекларации.ПФ_Орг42) Тогда
						База42 = НайденныеСтрокиСИнфоЗаМесяц[i].База;
						Взнос42 = НайденныеСтрокиСИнфоЗаМесяц[i].Результат;
					ИначеЕсли(НайденныеСтрокиСИнфоЗаМесяц[i].СтатьяДекларации = СтрокиДекларации.ПФ_Орг4)  Тогда	
						База4 = НайденныеСтрокиСИнфоЗаМесяц[i].База;
						Взнос4 = НайденныеСтрокиСИнфоЗаМесяц[i].Результат;
					ИначеЕсли(НайденныеСтрокиСИнфоЗаМесяц[i].СтатьяДекларации = СтрокиДекларации.ПФ_Сотр15)  Тогда		
						База15 = НайденныеСтрокиСИнфоЗаМесяц[i].База;
						Взнос15 = НайденныеСтрокиСИнфоЗаМесяц[i].Результат;
					КонецЕсли;
				КонецЦикла;	
				//переходим к заполнению ячеек
				МесяцСтр = Формат(Месяц, "ДФ = 'ММММ';Л = uk_UA");
				Префикс = ""+счМес+"_";   
				мОтчетПФ.Области["КВыпл"+Префикс+"32"].Значение  = Взнос32;
				мОтчетПФ.Области["КВыпл"+Префикс+"42"].Значение  = Взнос42;
				мОтчетПФ.Области["КВыпл"+Префикс+"4"]. Значение  = Взнос4;
				мОтчетПФ.Области["КВыпл"+Префикс+"5"]. Значение  = Взнос15;
				
				Для н = 1 по 4 Цикл
					Префикс = ""+счМес+"_" + н;
					мОтчетПФ.Области["Мес"+Префикс].Значение = МесяцСтр;
					Если н = 1 Тогда
						мОтчетПФ.Области["ФОП"+Префикс].Значение  =  База32;
						мОтчетПФ.Области["Коэф"+Префикс].Значение = Коэф32;
					ИначеЕсли н = 2 Тогда
						мОтчетПФ.Области["ФОП"+Префикс].Значение  = База4;
						мОтчетПФ.Области["Коэф"+Префикс].Значение = Коэф4;
					ИначеЕсли н = 3 Тогда	
						мОтчетПФ.Области["ФОП"+Префикс].Значение  = База42;	
						мОтчетПФ.Области["Коэф"+Префикс].Значение = Коэф42;
					Иначе
						мОтчетПФ.Области["ФОП"+Префикс].Значение  = База15;
						мОтчетПФ.Области["Коэф"+Префикс].Значение = Коэф15;
					КонецЕсли;	
				КонецЦикла; 
				МесяцПред = Месяц;
				счМес = счМес + 1;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры	

Процедура ВыполнитьИнициализацию()
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "БП") или (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП")  Тогда
		ПС = ПланыСчетов["Хозрасчетный"];
		Счет65_1      = ПС.РасчетыПоПенсионномуОбеспечению;
		Счет66        = ПС.РасчетыПоОплатеТруда;
		Счет66_1      = ПС.РасчетыПоЗаработнойПлате;
		Счет66_3      = ПС.РасчетыПоДругимВыплатам;
		Счет65_2      = ПС.РасчетыПоСоциальномуСтрахованию;
		Счет65_6      = ПС.РасчетыПоСтрахованиюОтНесчастныхСлучаев;
		Счет81_5      = ПС.ОплатаДругогоНеотработанногоВремени;
		Счет91        = ПС.ОбщепроизводственныеРасходы;
		Счет92        = ПС.АдминистративныеРасходы;
		Счет93        = ПС.РасходыНаСбыт;
		
		// Бухгалтерский итоги по счетам
		мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
		
		// Бухгалтерские итоги по аналитике 
		мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();
		МассивСубконто = Новый Массив;
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Налоги);
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций);
		
		Итоги = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
		|НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
		|КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
		|КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт,
		|ОборотДт, ОборотКт,
		|КорОборотДт, КорОборотКт";
		
		ИтогиРС = "ОборотДт, ОборотКт";
		
		// Бухгалтерские итоги по счетам, без аналитики
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет,КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , , , , , "Организация", Организация);
		
		// Бухгалтерские итоги по счетам, с аналитикой
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет,Субконто1,Субконто2", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета,,"651",,МассивСубконто, , "Организация", Организация);
		
	КонецЕсли;
	
	СтрокиДекларации = Справочники.СтатьиНалоговыхДеклараций;
	
	МассивНужныхСтатей = Новый Массив; 
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ПФ_Орг32);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ПФ_Орг4);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ПФ_Орг42);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ПФ_Сотр15);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ПФ_Декр);
	
КонецПроцедуры	

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто() Экспорт
	////////
	// *** Здесь необходимо написать алгоритм заполнения отчета.***
	//
	// Для присвоения показателям отчета вычисленного значения необходимо
	// использовать процедуру
	//
	//     УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя).
	//
	////////
	мДлинаСуток 		= 86400; // в секундах
	ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	
	ТаблСреднеспЧисленности = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "ССЧ", "МЕСЯЦ", Организация, ""); 
	Сотрудников = ТаблСреднеспЧисленности[0].Средняя;
	УстановитьЗначениеПоказателя("Сотрудников", Сотрудников);
	
	
	// Инициализация
	
	ВыполнитьИнициализацию();
	
	// для заполнения основных показателей по начислениям/удержаниям в течение отчетного месяца	
	// 
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|ВзаиморасчетыПоВзносам.ФизЛицо        КАК ЗастрЛицо,
	|";
	
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") или (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВзаиморасчетыПоВзносам.БазаВзносаПриход        КАК База,
		|ВзаиморасчетыПоВзносам.НалоговыйПериод         КАК НалоговыйПериод,
		|";
	ИначеЕсли (РегламентированнаяОтчетность.ИДКонфигурации() = "БП") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВзаиморасчетыПоВзносам.БазаВзносаПриход          КАК База,
		|ВзаиморасчетыПоВзносам.БазаПриход                КАК СуммаНачисления,
		|ВзаиморасчетыПоВзносам.НалоговыйПериод           КАК НалоговыйПериод,
		|ВзаиморасчетыПоВзносам.ПериодДействия            КАК МесяцДействия,
		|";
	КонецЕсли;	   
	
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации КАК СтатьяНалоговойДекларации
	|	
	|ИЗ РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Обороты(&НачДата,&КонДата) КАК ВзаиморасчетыПоВзносам
	|
	|ГДЕ 
	|	ВзаиморасчетыПоВзносам.Организация = &парамОрганизация
	|    И ВЫБОР КОГДА ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации В (&МассивНужныхСтатей)  ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ
	|";
	
	Запрос = Новый Запрос ();
	Запрос.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонДата" , мДатаКонцаПериодаОтчета);
	
	Запрос.УстановитьПараметр("МассивНужныхСтатей",  МассивНужныхСтатей);
	Запрос.УстановитьПараметр("парамОрганизация",   Организация);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТаблицаБазВзносовОтчетногоПериода = РезультатЗапроса.Выгрузить();
		
		//перед сворачиванием таблицы по статьям по статьям налоговых деклараций и налоговым периодом
		//выполняем расчет числа застрахованных лиц и лиц, получающих пособия по уходу за ребенком
		
		РассчитатьЧислоЗастрахованныхЛиц(ТаблицаБазВзносовОтчетногоПериода);
		
		//перед сворачиванием таблицы по статьям по статьям налоговых деклараций и налоговым периодом
		//сделаем копию таблицы с целью последующего определения начисленных сумм за прошлые/будущие периоды,
		//с которых взимаются сборы в отчетном периоде
		РассчитатьНачисленияЗаПрошлыеИБудущиеПериоды();
		
		
		ТаблицаБазВзносовОтчетногоПериода.Свернуть("СтатьяНалоговойДекларации, НалоговыйПериод", "База");
		
		
		//ищем структуру по месяцу и статье декларации для определения баз
		Отбор = Новый Структура;
		Отбор.Вставить("НалоговыйПериод",мДатаНачалаПериодаОтчета);
		Для   i = 0 по МассивНужныхСтатей.Количество() - 2  Цикл
			Отбор.Вставить("СтатьяНалоговойДекларации",МассивНужныхСтатей[i]);
			НайденныеСтроки = ТаблицаБазВзносовОтчетногоПериода.НайтиСтроки(Отбор);
			Если (НайденныеСтроки.Количество() = 1) Тогда
				Если (i < 3) Тогда
					Ном = i + 1;
					ИмяЯчейки = "П2"+ "_" + Ном;
					УстановитьЗначениеПоказателя(ИмяЯчейки,НайденныеСтроки[0].База);
					ИмяЯчейки = "П3_1"+ "_" + Ном;
					СуммаВзноса = КО_субконто_запрос(Счет65_1,МассивНужныхСтатей[i]);
					УстановитьЗначениеПоказателя(ИмяЯчейки,СуммаВзноса);
				Иначе
					П4 = НайденныеСтроки[0].База;
					УстановитьЗначениеПоказателя("П4", П4);
					П5 = КО_субконто_запрос(Счет65_1,МассивНужныхСтатей[i]);
					УстановитьЗначениеПоказателя("П5",П5);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	//Загальна сума фактичних витрат на оплату праці та інших виплат, пов'язаних з відносинами 
	//трудового найму (Кт 661)
	
	РассчитатьСуммуФактическихЗатратНаОплатуТруда();
	
	//У тому числі:
	//а) сума оплати перших п'яти днів тимчасової непрацездатності
	П1_1_1 = БольничныеПредприятие;
	УстановитьЗначениеПоказателя("П1_1_1", П1_1_1);
	
	//б) сума допомоги у зв'язку з тимчасовою непрацездатністю
	
	П1_1_2 = БольничныеФСС; 
	УстановитьЗначениеПоказателя("П1_1_2", П1_1_2);	
	
	//Сума внесків за осіб, які отримують допомогу по догляду за дитиною 	
	П8 = КО_субконто_запрос(Счет65_1,МассивНужныхСтатей[4]);
	УстановитьЗначениеПоказателя("П8",П8);
	
	//Додаток до розрахунку суми страхових внесків
	//на загальнообов'язкове державне пенсійне 	
	//Сума заборгованості з виплати заробітної плати на початок звітного періоду
	ЗапросСуммаЗадолжНачало = Новый Запрос ("
	|ВЫБРАТЬ
	| СУММА (ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток) КАК Результат
	|  ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&НачДата,Организация = &Организация) КАК ВзаиморасчетыСРаботниками
	| ГДЕ
	| ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов <> &ПрошлыйМесяц  
	|");
	
	ЗапросСуммаЗадолжНачало.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
	ЗапросСуммаЗадолжНачало.УстановитьПараметр("ПрошлыйМесяц",ДобавитьМесяц(мДатаНачалаПериодаОтчета,-1));
	ЗапросСуммаЗадолжНачало.УстановитьПараметр("Организация",   Организация);
	РезультатЗапроса = ЗапросСуммаЗадолжНачало.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаРезультатовЗадолжЗПНач = РезультатЗапроса.Выгрузить();
		ЗадолжНач = ТаблицаРезультатовЗадолжЗПНач[0].Результат;
		УстановитьЗначениеПоказателя("ЗадолжНач",ЗадолжНач);
	КонецЕсли;
	
	//Сума заборгованості з виплати заробітної плати на початок звітного періоду
	ЗапросСуммаЗадолжКонец = Новый Запрос ("
	|ВЫБРАТЬ
	| СУММА (ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток) КАК Результат
	|  ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&НачДата,Организация = &Организация) КАК ВзаиморасчетыСРаботниками
	| ГДЕ
	| ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов <> &НачДата 
	|");
	
	ЗапросСуммаЗадолжКонец.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
	ЗапросСуммаЗадолжКонец.УстановитьПараметр("Организация",   Организация);
	РезультатЗапроса = ЗапросСуммаЗадолжКонец.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаРезультатовЗадолжЗПКон = РезультатЗапроса.Выгрузить();
		ЗадолжКон = ТаблицаРезультатовЗадолжЗПКон[0].Результат;
		УстановитьЗначениеПоказателя("ЗадолжКон",ЗадолжКон);
	КонецЕсли;
	
	//Сальдо розрахунків рахунка 65 "Розрахунки за страхуванням" субрахунка 651 "За пенсійним забезпеченням" на початок 
	//звітного періоду: 
	РассчитатьСальдоВзаиморасчетовСФондом();
	
	РассчитатьСуммыЗадолженностейЗаПериодДо2004();
	
	
	Расчет();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьАвто()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетПФ";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вычисляется автоматически';uk='Значення обчислюється автоматично'");
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");
		КонецЕсли;

		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Печатать сразу';uk='Друкувати відразу'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Показать бланк';uk='Показати бланк'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЛинияСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЛинияПусто = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);

	мМассивТиповЛиний = Новый Массив();
	мМассивТиповЛиний.Вставить(0, ЛинияПусто);
	мМассивТиповЛиний.Вставить(1, ЛинияСнизу);

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	Перем ИсходноеКоличествоСтрокГруппы;

	ЭтаФорма.АвтоЗаголовок = Ложь;

	мОтчетПФ = ЭлементыФормы.ПолеТабличногоДокументаОтчетПФ;
	ТекТабличноеПоле = мОтчетПФ;
	
	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 2;
			
			ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;		
			
			УстановитьФорматВывода();
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();
	мОтчетПФ.ТолькоПросмотр = Истина;

	ЗаполнитьСведенияОбОрганизации();

	УстановитьЦветФонаЯчейки(,,"ОтчетПФ");

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность = Истина Тогда

		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения ?';uk='Дані були змінені. Зберегти зміни ?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;

			мСохраненныйДок.Записать();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	// Заглушка
	//ЗаполнитьДемо();
	
	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		ЭтаФорма.Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

//	мОтчетПФ.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаОтчетПФПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаОтчетПФПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа.
//   Устанавливает признак модифицированности данных в форме, вызывает пересчет
// вычисляемых показателей  табличных полей и обновляет структуру данных
// многострочного раздела.
//
Процедура ПолеТабличногоДокументаОтчетПФПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	Расчет();
	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаОтчетПФПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа.
//
Процедура ПолеВыбораВариантЗаполненияОтчетПФПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки.
//
Процедура ПолеВводаЗначениеКорректировкиОтчетПФПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиПриИзменении

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// "Комментарий" по ячейке, для которой установлен алгоритм автозаполнения 
// [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийОтчетПФПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийПриИзменении()


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       НСтр("ru='в гривнях';uk='у гривнях'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    НСтр("ru='в тысячах гривень';uk='у тисячах гривень'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, НСтр("ru='в миллионах гривень';uk='у мільйонах гривень'"));


// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетПФ.СписокВыбора.Добавить(1, НСтр("ru='не заполнять автоматически';uk='не заповнювати автоматично'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетПФ.СписокВыбора.Добавить(2, НСтр("ru='заполнять автоматически с корректировкой';uk='заповнювати автоматично з коригуванням'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетПФ.СписокВыбора.Добавить(3, НСтр("ru='заполнять автоматически без корректировки';uk='заповнювати автоматично без коригування'"));

ОписаниеТиповЧисло 	= ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));


ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

мСоставПоказателей = "СоставПоказателей";

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
мВерсияФормы = "30/09/2003";
// Код отчета, равен коду по ОКУД
мКодОтчета   = "0710001";

мПечатныеФормы = Новый СписокЗначений;
