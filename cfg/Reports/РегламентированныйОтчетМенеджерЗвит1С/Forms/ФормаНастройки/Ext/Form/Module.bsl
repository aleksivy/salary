////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Вспомогательные переменные для работы с деревом схем
Перем мЦветПервогоУровняДерева;
Перем мЦветВторогоУровняДерева;

Перем мПолноеДеревоСхем;                // Кеш полного дерева схем, обеспечивающий быструю фильтрацию при выводе на форму
Перем мСоответствиеФормИНастроек;    
Перем мДоступностьНастроек;
Перем мТекущаяНастройка;
Перем мИмяФормы;
Перем мФормаНастройкиПолностьюОткрыта;   // Признак того что при открытии формы отработала процедура ПослеОткрытияФормы
Перем мФормаПросмотраСправкиЦеныПромДля; // Вспомогательная переменная хранящая ссылку на форму внешнего отчета ЦеныПром
                                         // Необходима для просмотра справки
Перем мИмяНастройкиДляАктивизации;       // Имя отчета, настроку которого необходимо показать
										 
										 
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Фунция выполняет активизацияю настроки требуемого отчета
//
Процедура АвтивироватьНастройку(ИмяОтчета) Экспорт
	
	Если Не мФормаНастройкиПолностьюОткрыта Тогда
		// Сохраним имя настроки, для последующего использования
		мИмяНастройкиДляАктивизации = ИмяОтчета;
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ИмяОтчета, ВидУзла", ИмяОтчета, "Отчет");
	НайденныеСтроки = ДеревоСхем.Строки.НайтиСтроки(Отбор, Истина);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.ДеревоСхем.ТекущаяСтрока = НайденныеСтроки[0];
	ВывестиТекущуюНастройкуНаФорме();
	
	мИмяНастройкиДляАктивизации = Неопределено;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Устанавливает видимость элементов формы 
//
Процедура УстановитьВидимость()
	
	// 1ДФ
	ЭлементыФормы.ЧислоВыплатыЗП.Доступность = НЕ ВыплатыЗПНеРегулярны;
	Если мИмяФормы = "ФормаОтчета2014Кв1" Тогда
		ЭлементыФормы.ПоказыватьВзносыФОТКакДоход133.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ПоказыватьВзносыФОТКакДоход133.Видимость = Истина;
	КонецЕсли;
	
	//Реестр Налоговых
	Если мИмяФормы = "ФормаОтчета2014Мес" Тогда
		ЭлементыФормы.ИспользоватьВРазделе1Код400000000000.Видимость = Истина;
	Иначе
		ЭлементыФормы.ИспользоватьВРазделе1Код400000000000.Видимость = Ложь;
	КонецЕсли;
	
	// ЕСВ
	ЭтоЕСВ_2011Мес8 = (мТекущаяНастройка = "РегламентированныйОтчетЕдиныйСоциальныйВзнос_2011Мес8");
	ЭтоЕСВ_2013     = (мТекущаяНастройка = "РегламентированныйОтчетЕдиныйСоциальныйВзнос_2013");
	ЭтоЕСВ_2013Мес7 = (мТекущаяНастройка = "РегламентированныйОтчетЕдиныйСоциальныйВзнос_2013Мес9");
	
	ЭлементыФормы.ВыделятьЕСВДляОтпускных.Видимость                  = (ЭтоЕСВ_2013 ИЛИ ЭтоЕСВ_2013Мес7) И НЕ мИмяФормы = "ФормаОтчета2015";
	ЭлементыФормы.УказыватьПериодДляВсехНачислений.Видимость		 = НЕ мИмяФормы = "ФормаОтчета2015";
	
	ЭлементыФормы.РамкаГруппыОтпускОт3До6.Видимость                  = ЭтоЕСВ_2011Мес8 ИЛИ ЭтоЕСВ_2013 ИЛИ ЭтоЕСВ_2013Мес7;
	ЭлементыФормы.КоманднаяПанель5.Видимость                         = ЭтоЕСВ_2011Мес8 ИЛИ ЭтоЕСВ_2013 ИЛИ ЭтоЕСВ_2013Мес7;
	ЭлементыФормы.ТаблицаВРОтпускОт3До6.Видимость                    = ЭтоЕСВ_2011Мес8 ИЛИ ЭтоЕСВ_2013 ИЛИ ЭтоЕСВ_2013Мес7;
	
	ЭлементыФормы.РамкаГруппыОтпускПоБеременностиИРодам.Видимость    = ЭтоЕСВ_2011Мес8 ИЛИ ЭтоЕСВ_2013 ИЛИ ЭтоЕСВ_2013Мес7;
	ЭлементыФормы.КоманднаяПанель6.Видимость                         = ЭтоЕСВ_2011Мес8 ИЛИ ЭтоЕСВ_2013 ИЛИ ЭтоЕСВ_2013Мес7;
	ЭлементыФормы.ТаблицаВРОтпускПоБеременностиИРодам.Видимость      = ЭтоЕСВ_2011Мес8 ИЛИ ЭтоЕСВ_2013 ИЛИ ЭтоЕСВ_2013Мес7;
	
	ЭлементыФормы.РамкаГруппыБезСохраненияЗП.Видимость               = ЭтоЕСВ_2011Мес8 ИЛИ ЭтоЕСВ_2013 ИЛИ ЭтоЕСВ_2013Мес7;
	ЭлементыФормы.КоманднаяПанель7.Видимость                         = ЭтоЕСВ_2011Мес8 ИЛИ ЭтоЕСВ_2013 ИЛИ ЭтоЕСВ_2013Мес7;
	ЭлементыФормы.ТаблицаВРБезСохраненияЗП.Видимость                 = ЭтоЕСВ_2011Мес8 ИЛИ ЭтоЕСВ_2013 ИЛИ ЭтоЕСВ_2013Мес7;
	
	ЭлементыФормы.РамкаГруппыОтпускДо3.Видимость                  = ЭтоЕСВ_2013Мес7;
	ЭлементыФормы.КоманднаяПанельОтпускДо3.Видимость              = ЭтоЕСВ_2013Мес7;
	ЭлементыФормы.ТаблицаВРОтпускДо3.Видимость                    = ЭтоЕСВ_2013Мес7;
	ЭлементыФормы.ИзТаблицаВРОтпускПоБеременностиИРодам_ТаблицаВРОтпускДо3.Видимость = ЭтоЕСВ_2013Мес7;
	ЭлементыФормы.ИзТаблицаВРОтпускДо3_ТаблицаВРОтпускПоБеременностиИРодам.Видимость = ЭтоЕСВ_2013Мес7;
	
	// ЦЕНЫ(ПРОМ)
	ЭлементыФормы.ЦеныПром_КодНПП.Доступность                        = ЦеныПром_ИспользоватьКодНПП;
	ЭлементыФормы.ЦеныПром_КодНПП.АвтоОтметкаНезаполненного          = ЦеныПром_ИспользоватьКодНПП;
	Если Не ЦеныПром_ИспользоватьКодНПП Тогда
		ЭлементыФормы.ЦеныПром_КодНПП.ОтметкаНезаполненного          = Ложь;
	КонецЕсли;
	ЭлементыФормы.ЦеныПром_Создать.Доступность                       = ЦеныПром_ИспользоватьКодНПП И Не ЗначениеЗаполнено(ЦеныПром_КодНПП);
	
	// Отчет об объемах реализованных услуг
	ЭтоУПП = (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП");
	ЭлементыФормы.Панель_РегламентированныйОтчетОбОбъемахРеализованныхУслуг_ПроцентСтавкиНДСВРознице.Свертка = ?(ЭтоУПП, РежимСверткиЭлементаУправления.Верх, РежимСверткиЭлементаУправления.Нет);
	
	ЭлементыФормы.ОтчетОбОбъемахРеализованныхУслуг_КодСКП.Доступность                        = ОтчетОбОбъемахРеализованныхУслуг_ИспользоватьКодСКП;
	ЭлементыФормы.ОтчетОбОбъемахРеализованныхУслуг_КодСКП.АвтоОтметкаНезаполненного          = ОтчетОбОбъемахРеализованныхУслуг_ИспользоватьКодСКП;
	Если Не ОтчетОбОбъемахРеализованныхУслуг_ИспользоватьКодСКП Тогда
		ЭлементыФормы.ОтчетОбОбъемахРеализованныхУслуг_КодСКП.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.ОтчетОбОбъемахРеализованныхУслуг_ВидУслуги.Доступность                      = ОтчетОбОбъемахРеализованныхУслуг_ИспользоватьВидУслуги;
	ЭлементыФормы.ОтчетОбОбъемахРеализованныхУслуг_ВидУслуги.АвтоОтметкаНезаполненного        = ОтчетОбОбъемахРеализованныхУслуг_ИспользоватьВидУслуги;
	Если Не ОтчетОбОбъемахРеализованныхУслуг_ИспользоватьВидУслуги Тогда
		ЭлементыФормы.ОтчетОбОбъемахРеализованныхУслуг_ВидУслуги.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	ВидимостьРеквизитовУслуг = НЕ ((мИмяФормы = "ФормаОтчета2015Кв" ИЛИ мИмяФормы = "ФормаОтчета2017Кв") И мТекущаяНастройка = "РегламентированныйОтчетОбОбъемахРеализованныхУслуг");
	
	ЭлементыФормы.ОтчетОбОбъемахРеализованныхУслуг_ИспользоватьВидУслуги.Видимость = ВидимостьРеквизитовУслуг;
	ЭлементыФормы.ОтчетОбОбъемахРеализованныхУслуг_ВидУслуги.Видимость = ВидимостьРеквизитовУслуг;
	ЭлементыФормы.Надпись4.Видимость = ВидимостьРеквизитовУслуг;
	ЭлементыФормы.ОтчетОбОбъемахРеализованныхУслуг_ИспользоватьКодСКП.Видимость = ВидимостьРеквизитовУслуг;
	ЭлементыФормы.ОтчетОбОбъемахРеализованныхУслуг_КодСКП.Видимость = ВидимостьРеквизитовУслуг;
	ЭлементыФормы.Надпись1.Видимость = ВидимостьРеквизитовУслуг;
	ЭлементыФормы.Надпись21.Видимость = ВидимостьРеквизитовУслуг;
	ЭлементыФормы.КоманднаяПанель9.Видимость = ВидимостьРеквизитовУслуг;
	ЭлементыФормы.КоманднаяПанель8.Видимость = ВидимостьРеквизитовУслуг;
	ЭлементыФормы.ОтчетОбОбъемахРеализованныхУслуг_ТаблицаСтатьиДоходовПоОсновномуВидуДеятельности.Видимость = ВидимостьРеквизитовУслуг;
	ЭлементыФормы.ОтчетОбОбъемахРеализованныхУслуг_ТаблицаСтатьиДоходовПоСдачеВНайм.Видимость = ВидимостьРеквизитовУслуг;
	ЭлементыФормы.Надпись2.Видимость = ВидимостьРеквизитовУслуг;
	ЭлементыФормы.Надпись3.Видимость = ВидимостьРеквизитовУслуг;
	
КонецПроцедуры

// Процедура восстановления значения всех реквизитов
//
Процедура ВосстановитьДанные()
	
	Настройка = мДоступностьНастроек["РегламентированныйОтчетДекларацияНДС_2011Кв1"];
	Если Настройка.Доступность И Не Настройка.ДанныеЗагружены Тогда		
		
		СворачиватьДанныеПоИНН = ВосстановитьЗначение("РегламентированнаяОтчетность_ДекларацияНДС_СворачиватьДанныеПоИНН");
		ОтражатьНулевыеКорректировкиВПриложении1 = ВосстановитьЗначение("РегламентированнаяОтчетность_ДекларацияНДС_ОтражатьНулевыеКорректировкиВПриложении1");
		
		Настройка.ДанныеЗагружены = Истина;
		
	КонецЕсли;
	
	Настройка = мДоступностьНастроек["РегламентированныйОтчетРеестрНалоговыхНакладных_2011"];
	Если Настройка.Доступность И Не Настройка.ДанныеЗагружены Тогда		
		СортироватьВыданныеННТолькоПоНомеру = ВосстановитьЗначение("РегламентированнаяОтчетность_РеестрНН_СортироватьВыданныеННТолькоПоНомеру");
		Если НЕ ЗначениеЗаполнено(СортироватьВыданныеННТолькоПоНомеру)Тогда
			СортироватьВыданныеННТолькоПоНомеру = Ложь;
			Модифицированность = Истина;
		КонецЕсли;
		
		ИспользоватьВРазделе1Код400000000000 = ВосстановитьЗначение("РегламентированнаяОтчетность_РеестрНН_ИспользоватьВРазделе1Код400000000000");
		Если НЕ ЗначениеЗаполнено(ИспользоватьВРазделе1Код400000000000)Тогда
			ИспользоватьВРазделе1Код400000000000 = Ложь;
			Модифицированность = Истина;
		КонецЕсли;
		
		Настройка.ДанныеЗагружены = Истина;
		
	КонецЕсли;		
	
	Настройка = мДоступностьНастроек["РегламентированныйОтчетФорма1ДФ_2011Кв1"];
	Если Настройка.Доступность И Не Настройка.ДанныеЗагружены Тогда		
		мВыплатыЗПНеРегулярны = ВосстановитьЗначение("РегламентированнаяОтчетность_1ДФ_ВыплатыЗПНеРегулярны");
		Если мВыплатыЗПНеРегулярны = Неопределено Тогда
			ВыплатыЗПНеРегулярны = Истина;
			Модифицированность = Истина;
		Иначе
			ВыплатыЗПНеРегулярны = мВыплатыЗПНеРегулярны;
		КонецЕсли;
		ЧислоВыплатыЗП = ВосстановитьЗначение("РегламентированнаяОтчетность_1ДФ_ЧислоВыплатыЗП");
		Если ЧислоВыплатыЗП = Неопределено
		 ИЛИ НЕ (ТипЗнч(ЧислоВыплатыЗП) = Тип("Число"))
		 ИЛИ ЧислоВыплатыЗП = 0 Тогда
			ЧислоВыплатыЗП = 10;
			Модифицированность = Истина;
		КонецЕсли;
		
		мПоказыватьВзносыФОТКакДоход133 = ВосстановитьЗначение("РегламентированнаяОтчетность_1ДФ_ПоказыватьВзносыФОТКакДоход133");
		Если мПоказыватьВзносыФОТКакДоход133 = Неопределено Тогда
			ПоказыватьВзносыФОТКакДоход133 = Истина;
			Модифицированность = Истина;
		Иначе
			ПоказыватьВзносыФОТКакДоход133 = мПоказыватьВзносыФОТКакДоход133;
		КонецЕсли;
		
		Настройка.ДанныеЗагружены = Истина;
		
	КонецЕсли;
	
	Если мДоступностьНастроек.Свойство("РегламентированныйОтчетПоТруду_2011Мес") Тогда
		
		Настройка = мДоступностьНастроек["РегламентированныйОтчетПоТруду_2011Мес"];
		
		Если Настройка.Доступность И Не Настройка.ДанныеЗагружены Тогда		
			КолонкаВР = ТаблицаВРБольничные.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
			ЭлементыФормы.ТаблицаВРБольничных.СоздатьКолонки();
					
			мТаблицаВРБольничные = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничные");	
			Если НЕ мТаблицаВРБольничные = Неопределено Тогда
				ТаблицаВРБольничные.Очистить();
				Для каждого ВР Из мТаблицаВРБольничные Цикл
					СтрокаВР = ТаблицаВРБольничные.Добавить();
					СтрокаВР.ВидРасчета = ВР;
				КонецЦикла;
			КонецЕсли;
			
			Настройка.ДанныеЗагружены = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Для заполнения таблиц ЕСВ значениями по умолчанию, воспользуемся экспортными функциями 
	Попытка
		ФормаОтчетаЕСВ = РегламентированнаяОтчетность.ФормаРеглОтчета("РегламентированныйОтчетЕдиныйСоциальныйВзнос", "ФормаОтчета2013Мес7");
	Исключение
	    ФормаОтчетаЕСВ = Неопределено;
	КонецПопытки;

	Настройка  = мДоступностьНастроек["РегламентированныйОтчетЕдиныйСоциальныйВзнос_2011"]; 
	Настройка1 = мДоступностьНастроек["РегламентированныйОтчетЕдиныйСоциальныйВзнос_2011Мес8"]; 
	Настройка2 = мДоступностьНастроек["РегламентированныйОтчетЕдиныйСоциальныйВзнос_2013"]; 
	Настройка3 = мДоступностьНастроек["РегламентированныйОтчетЕдиныйСоциальныйВзнос_2013Мес9"]; 
	Если (Настройка.Доступность ИЛИ Настройка1.Доступность ИЛИ Настройка2.Доступность ИЛИ Настройка3.Доступность) И (Не Настройка.ДанныеЗагружены)Тогда		
		
		// 1. Настрока колонок
		
		// таблица больничных за счет предприятия
		Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
		    ТаблицаВРБольничныеПредприятие.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"), "",10);
		Иначе	
			ТаблицаВРБольничныеПредприятие.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), "",10);
		КонецЕсли;
		КолонкаВидРасчета 		 = ЭлементыФормы.ТаблицаВРБольничныеПредприятие.Колонки.Вставить(0,НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
		КолонкаВидРасчета.Имя    = "ВидРасчета";
		КолонкаВидРасчета.Данные = "ВидРасчета";
		
		// таблица больничных ФСС
		Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
		    ТаблицаВРБольничныеФСС.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"), "",10);
		Иначе	
			ТаблицаВРБольничныеФСС.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), "",10);
		КонецЕсли;
		КолонкаВидРасчета 		 = ЭлементыФормы.ТаблицаВРБольничныеФСС.Колонки.Вставить(0,НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
		КолонкаВидРасчета.Имя    = "ВидРасчета";
		КолонкаВидРасчета.Данные = "ВидРасчета";
		
		// таблица больничных ФСС несч. случай
		Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
		    ТаблицаВРБольничныеФССНесчСлучай.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"), "",10);
		Иначе	
			ТаблицаВРБольничныеФССНесчСлучай.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), "",10);
		КонецЕсли;
		КолонкаВидРасчета 		 = ЭлементыФормы.ТаблицаВРБольничныеФССНесчСлучай.Колонки.Вставить(0,НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
		КолонкаВидРасчета.Имя    = "ВидРасчета";
		КолонкаВидРасчета.Данные = "ВидРасчета";
		
		Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
			
			ТаблицаВРГПХ.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), "",10);
			КолонкаВидРасчета 		 = ЭлементыФормы.ТаблицаВРГПХ.Колонки.Вставить(0,НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
			КолонкаВидРасчета.Имя    = "ВидРасчета";
			КолонкаВидРасчета.Данные = "ВидРасчета";
			
		Иначе
			
			ЭлементыФормы.РамкаГруппыГПХ.Видимость = Ложь;
			ЭлементыФормы.ТаблицаВРГПХ.Видимость = Ложь;
			ЭлементыФормы.КоманднаяПанельВРГПХ.Видимость = Ложь;
			
		КонецЕсли;
		
		// Отпуск по уходу за ребенком до 3 лет
		Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
			ТаблицаВРОтпускДо3.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"), "",10);
		Иначе	
			ТаблицаВРОтпускДо3.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), "",10);
		КонецЕсли;
		КолонкаВидРасчета 		 = ЭлементыФормы.ТаблицаВРОтпускДо3.Колонки.Вставить(0,НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
		КолонкаВидРасчета.Имя    = "ВидРасчета";
		КолонкаВидРасчета.Данные = "ВидРасчета";
		
		// Отпуск по уходу за ребенком от 3 до 6 лет
		Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
			ТаблицаВРОтпускОт3До6.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"), "",10);
		Иначе	
			ТаблицаВРОтпускОт3До6.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), "",10);
		КонецЕсли;
		КолонкаВидРасчета 		 = ЭлементыФормы.ТаблицаВРОтпускОт3До6.Колонки.Вставить(0,НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
		КолонкаВидРасчета.Имя    = "ВидРасчета";
		КолонкаВидРасчета.Данные = "ВидРасчета";
		
		// Отпуск по беременности и родам
		Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
			ТаблицаВРОтпускПоБеременностиИРодам.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"), "",10);
		Иначе	
			ТаблицаВРОтпускПоБеременностиИРодам.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), "",10);
		КонецЕсли;
		КолонкаВидРасчета 		 = ЭлементыФормы.ТаблицаВРОтпускПоБеременностиИРодам.Колонки.Вставить(0,НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
		КолонкаВидРасчета.Имя    = "ВидРасчета";
		КолонкаВидРасчета.Данные = "ВидРасчета";
		
		// Без сохранения заработной платы
		Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
			ТаблицаВРБезСохраненияЗП.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"), "",10);
		Иначе	
			ТаблицаВРБезСохраненияЗП.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), "",10);
		КонецЕсли;
		КолонкаВидРасчета 		 = ЭлементыФормы.ТаблицаВРБезСохраненияЗП.Колонки.Вставить(0,НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
		КолонкаВидРасчета.Имя    = "ВидРасчета";
		КолонкаВидРасчета.Данные = "ВидРасчета";
		
		// 2. Восстановление данных
		текУказыватьПериодДляВсехНачислений = ВосстановитьЗначение("РегламентированнаяОтчетность_ЕСВ_УказыватьПериодДляВсехНачислений");
		Если текУказыватьПериодДляВсехНачислений = Неопределено Тогда
			УказыватьПериодДляВсехНачислений = Истина;
		Иначе	
			УказыватьПериодДляВсехНачислений = текУказыватьПериодДляВсехНачислений
		КонецЕсли;
		
		текВыделятьЕСВДляОтпускных = ВосстановитьЗначение("РегламентированнаяОтчетность_ЕСВ_ВыделятьЕСВДляОтпускных");
		Если текВыделятьЕСВДляОтпускных = Неопределено Тогда
			ВыделятьЕСВДляОтпускных = Истина;
		Иначе	
		    ВыделятьЕСВДляОтпускных = текВыделятьЕСВДляОтпускных
		КонецЕсли;
		
		// Больничные за счет предприятия
		мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничныеПредприятие");
		Если НЕ мТаблица = Неопределено Тогда
			ТаблицаВРБольничныеПредприятие.Очистить();
			Для каждого ВидРасчета Из мТаблица Цикл
				СтрокаВР = ТаблицаВРБольничныеПредприятие.Добавить();
				СтрокаВР.ВидРасчета = ВидРасчета;
			КонецЦикла;
		КонецЕсли;
		
		// Больничные за счет ФСС
		мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничныеФСС");
		Если НЕ мТаблица = Неопределено Тогда
			ТаблицаВРБольничныеФСС.Очистить();
			Для каждого ВидРасчета Из мТаблица Цикл
				СтрокаВР = ТаблицаВРБольничныеФСС.Добавить();
				СтрокаВР.ВидРасчета = ВидРасчета;
			КонецЦикла;
		КонецЕсли;
		
		// Больничные за счет ФСС несч. случай
		мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничныеФССНесчСлучай");
		Если НЕ мТаблица = Неопределено Тогда
			ТаблицаВРБольничныеФССНесчСлучай.Очистить();
			Для каждого ВидРасчета Из мТаблица Цикл
				СтрокаВР = ТаблицаВРБольничныеФССНесчСлучай.Добавить();
				СтрокаВР.ВидРасчета = ВидРасчета;
			КонецЦикла;
		ИначеЕсли ФормаОтчетаЕСВ <> Неопределено Тогда
			Попытка
				мТаблица = ФормаОтчетаЕСВ.ПолучитьСписокВидовРасчетовПоВидуНалога(Справочники.Налоги.ЕСВБольничные);
				Для каждого ВидРасчета Из мТаблица Цикл
					СтрокаВР = ТаблицаВРБольничныеПредприятие.Добавить();
					СтрокаВР.ВидРасчета = ВидРасчета;
				КонецЦикла;
				Модифицированность = Истина;					 	
			Исключение			 
			КонецПопытки;
		КонецЕсли;
		
		Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
			
			// ГПХ
			мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРГПХ");
			Если НЕ мТаблица = Неопределено Тогда
				ТаблицаВРГПХ.Очистить();
				Для каждого ВидРасчета Из мТаблица Цикл
					СтрокаВР = ТаблицаВРГПХ.Добавить();
					СтрокаВР.ВидРасчета = ВидРасчета;
				КонецЦикла;
			КонецЕсли;

		КонецЕсли;
		
		мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРОтпускДо3");
		Если НЕ мТаблица = Неопределено Тогда
			ТаблицаВРОтпускДо3.Очистить();
			Для каждого ВидРасчета Из мТаблица Цикл
				СтрокаВР = ТаблицаВРОтпускДо3.Добавить();
				СтрокаВР.ВидРасчета = ВидРасчета;
			КонецЦикла;
		ИначеЕсли ФормаОтчетаЕСВ <> Неопределено Тогда	
			Попытка
				мТаблица = ФормаОтчетаЕСВ.ПолучитьСписокПоУходуДо3();
				Для каждого ВидРасчета Из мТаблица Цикл
					СтрокаВР = ТаблицаВРОтпускДо3.Добавить();
					СтрокаВР.ВидРасчета = ВидРасчета;
				КонецЦикла;
				Модифицированность = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРОтпускОт3До6");
		Если НЕ мТаблица = Неопределено Тогда
			ТаблицаВРОтпускОт3До6.Очистить();
			Для каждого ВидРасчета Из мТаблица Цикл
				СтрокаВР = ТаблицаВРОтпускОт3До6.Добавить();
				СтрокаВР.ВидРасчета = ВидРасчета;
			КонецЦикла;
		ИначеЕсли ФормаОтчетаЕСВ <> Неопределено Тогда	
			Попытка
				мТаблица = ФормаОтчетаЕСВ.ПолучитьСписокПоУходу();
				Для каждого ВидРасчета Из мТаблица Цикл
					СтрокаВР = ТаблицаВРОтпускОт3До6.Добавить();
					СтрокаВР.ВидРасчета = ВидРасчета;
				КонецЦикла;
				Модифицированность = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		// Отпуск по беременности и родам
		мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРОтпускПоБеременностиИРодам");
		Если НЕ мТаблица = Неопределено Тогда
			ТаблицаВРОтпускПоБеременностиИРодам.Очистить();
			Для каждого ВидРасчета Из мТаблица Цикл
				СтрокаВР = ТаблицаВРОтпускПоБеременностиИРодам.Добавить();
				СтрокаВР.ВидРасчета = ВидРасчета;
			КонецЦикла;
		ИначеЕсли ФормаОтчетаЕСВ <> Неопределено Тогда	
			Попытка
				мТаблица = ФормаОтчетаЕСВ.ПолучитьСписокДекретные();
				Для каждого ВидРасчета Из мТаблица Цикл
					СтрокаВР = ТаблицаВРОтпускПоБеременностиИРодам.Добавить();
					СтрокаВР.ВидРасчета = ВидРасчета;
				КонецЦикла;
				Модифицированность = Истина;					 	
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		// Без сохранения заработной платы
		мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБезСохраненияЗП");
		Если НЕ мТаблица = Неопределено Тогда
			ТаблицаВРБезСохраненияЗП.Очистить();
			Для каждого ВидРасчета Из мТаблица Цикл
				СтрокаВР = ТаблицаВРБезСохраненияЗП.Добавить();
				СтрокаВР.ВидРасчета = ВидРасчета;
			КонецЦикла;
		ИначеЕсли ФормаОтчетаЕСВ <> Неопределено Тогда	
			Попытка
				мТаблица = ФормаОтчетаЕСВ.ПолучитьСписокБезСохранения();
				Для каждого ВидРасчета Из мТаблица Цикл
					СтрокаВР = ТаблицаВРБезСохраненияЗП.Добавить();
					СтрокаВР.ВидРасчета = ВидРасчета;
				КонецЦикла;
				Модифицированность = Истина;					 	
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Настройка.ДанныеЗагружены = Истина;
		
	КонецЕсли;
	
	Настройка = мДоступностьНастроек["РегламентированныйОтчетНалоговыеДокументы"];
	Если Настройка.Доступность И Не Настройка.ДанныеЗагружены Тогда		
		Звит1С_НалоговыеДокументы_ВыгружатьПоПоследнейАктуальнойСхеме = ВосстановитьЗначение("Звит1С_НалоговыеДокументы_ВыгружатьПоПоследнейАктуальнойСхеме");
		
		Настройка.ДанныеЗагружены = Истина;
		
	КонецЕсли;		
	
	Настройка = мДоступностьНастроек["РегламентированныйОтчетДекларацияОПрибыли_2011Кв2"];
	Если Настройка.Доступность И Не Настройка.ДанныеЗагружены Тогда		
		
		мВсеОПЗ_В_ПриложенииСВ = ВосстановитьЗначение("ДекларацияПоПрибыли_ВсеОПЗ_В_ПриложенииСВ");
		ВсеОПЗ_В_ПриложенииСВ = ?(мВсеОПЗ_В_ПриложенииСВ = Неопределено, Истина, мВсеОПЗ_В_ПриложенииСВ);		
		Если мВсеОПЗ_В_ПриложенииСВ = Неопределено Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
		Настройка.ДанныеЗагружены = Истина;
		
	КонецЕсли;		

	Настройка = мДоступностьНастроек["РегламентированныйОтчетЦеныПром"];
	Если Настройка.Доступность И Не Настройка.ДанныеЗагружены Тогда		
		
		ЦеныПром_ИспользоватьКодНПП = ВосстановитьЗначение("РегламентированныйОтчетЦеныПром_ИспользоватьКодНПП");
		ЦеныПром_КодНПП             = ВосстановитьЗначение("РегламентированныйОтчетЦеныПром_КодНПП");
		ЦеныПром_ТипЦен			    = ВосстановитьЗначение("РегламентированныйОтчетЦеныПром_ТипЦен");
		
		Настройка.ДанныеЗагружены = Истина;
		
	КонецЕсли;		

	Настройка = мДоступностьНастроек["РегламентированныйОтчетОбОбъемахРеализованныхУслуг"];
	Если Настройка.Доступность И Не Настройка.ДанныеЗагружены Тогда		
		
		ОтчетОбОбъемахРеализованныхУслуг_ИспользоватьВидУслуги    = ВосстановитьЗначение("РегламентированныйОтчетОбОбъемахРеализованныхУслуг_ИспользоватьВидУслуги");
		ОтчетОбОбъемахРеализованныхУслуг_ВидУслуги                = ВосстановитьЗначение("РегламентированныйОтчетОбОбъемахРеализованныхУслуг_ВидУслуги");
		ОтчетОбОбъемахРеализованныхУслуг_ИспользоватьКодСКП       = ВосстановитьЗначение("РегламентированныйОтчетОбОбъемахРеализованныхУслуг_ИспользоватьКодСКП");
		ОтчетОбОбъемахРеализованныхУслуг_КодСКП			          = ВосстановитьЗначение("РегламентированныйОтчетОбОбъемахРеализованныхУслуг_КодСКП");
		Если РегламентированнаяОтчетность.ИДКонфигурации() <> "УПП" Тогда
			Значение                                               = ВосстановитьЗначение("РегламентированныйОтчетОбОбъемахРеализованныхУслуг_ПроцентСтавкиНДСВРознице");
			Если Значение = Неопределено Тогда
				Значение = 20;
				Сообщить(НСтр("ru = '""Отчет об объемах реализованных услуг (форма № 1-услуги)"" установлен параметр ""Процент ставки НДС в рознице"" значение ""20,00""'; uk = '""Звіт про обсяги реалізованих послуг (форма №1-послуги)"" встановлено параметр ""Відсоток ставки ПДВ в роздробі"" у значення ""20,00""'"), СтатусСообщения.Информация);			
				Модифицированность = Истина;
			КонецЕсли;
			ОтчетОбОбъемахРеализованныхУслуг_ПроцентСтавкиНДСВРознице  = Значение;
		КонецЕсли;
		
		Таблица_врем = ВосстановитьЗначение("РегламентированныйОтчетОбОбъемахРеализованныхУслуг_ТаблицаСтатьиДоходовПоОсновномуВидуДеятельности");	
		Если Таблица_врем <> Неопределено Тогда
			ОтчетОбОбъемахРеализованныхУслуг_ТаблицаСтатьиДоходовПоОсновномуВидуДеятельности.Очистить();
			Для каждого СД Из Таблица_врем Цикл
				СтрокаСД = ОтчетОбОбъемахРеализованныхУслуг_ТаблицаСтатьиДоходовПоОсновномуВидуДеятельности.Добавить();
				СтрокаСД.СтатьяДоходов = СД;
			КонецЦикла;
		КонецЕсли;

		Таблица_врем = ВосстановитьЗначение("РегламентированныйОтчетОбОбъемахРеализованныхУслуг_ТаблицаСтатьиДоходовПоСдачеВНайм");	
		Если Таблица_врем <> Неопределено Тогда
			ОтчетОбОбъемахРеализованныхУслуг_ТаблицаСтатьиДоходовПоСдачеВНайм.Очистить();
			Для каждого СД Из Таблица_врем Цикл
				СтрокаСД = ОтчетОбОбъемахРеализованныхУслуг_ТаблицаСтатьиДоходовПоСдачеВНайм.Добавить();
				СтрокаСД.СтатьяДоходов = СД;
			КонецЦикла;
		КонецЕсли;

		
		Настройка.ДанныеЗагружены = Истина;
		
	КонецЕсли;		

КонецПроцедуры

// Процедура сохраняет значения всех доступных реквизитов
//
Процедура СохранитьДанные()
	
	Если мДоступностьНастроек["РегламентированныйОтчетДекларацияНДС_2011Кв1"].Доступность Тогда
		СохранитьЗначение("РегламентированнаяОтчетность_ДекларацияНДС_СворачиватьДанныеПоИНН", СворачиватьДанныеПоИНН);
		СохранитьЗначение("РегламентированнаяОтчетность_ДекларацияНДС_ОтражатьНулевыеКорректировкиВПриложении1", ОтражатьНулевыеКорректировкиВПриложении1);
	КонецЕсли;
	
	Если мДоступностьНастроек["РегламентированныйОтчетРеестрНалоговыхНакладных_2011"].Доступность Тогда
		СохранитьЗначение("РегламентированнаяОтчетность_РеестрНН_СортироватьВыданныеННТолькоПоНомеру", СортироватьВыданныеННТолькоПоНомеру);
		СохранитьЗначение("РегламентированнаяОтчетность_РеестрНН_ИспользоватьВРазделе1Код400000000000", ИспользоватьВРазделе1Код400000000000);
	КонецЕсли;
	
	Если мДоступностьНастроек["РегламентированныйОтчетФорма1ДФ_2011Кв1"].Доступность Тогда
		СохранитьЗначение("РегламентированнаяОтчетность_1ДФ_ВыплатыЗПНеРегулярны", ВыплатыЗПНеРегулярны);
		СохранитьЗначение("РегламентированнаяОтчетность_1ДФ_ЧислоВыплатыЗП",       ЧислоВыплатыЗП);
		СохранитьЗначение("РегламентированнаяОтчетность_1ДФ_ПоказыватьВзносыФОТКакДоход133", ПоказыватьВзносыФОТКакДоход133);
	КонецЕсли;
		
	Если мДоступностьНастроек.Свойство("РегламентированныйОтчетПоТруду_2011Мес")
	   И мДоступностьНастроек["РегламентированныйОтчетПоТруду_2011Мес"].Доступность Тогда
		СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничные", ТаблицаВРБольничные.ВыгрузитьКолонку("ВидРасчета"));
	КонецЕсли;	
	
	Если мДоступностьНастроек["РегламентированныйОтчетЕдиныйСоциальныйВзнос_2011"].Доступность
	 ИЛИ мДоступностьНастроек["РегламентированныйОтчетЕдиныйСоциальныйВзнос_2011Мес8"].Доступность 
	 ИЛИ мДоступностьНастроек["РегламентированныйОтчетЕдиныйСоциальныйВзнос_2013"].Доступность 
	 ИЛИ мДоступностьНастроек["РегламентированныйОтчетЕдиныйСоциальныйВзнос_2013Мес9"].Доступность  Тогда
	 
	 	СохранитьЗначение("РегламентированнаяОтчетность_ЕСВ_УказыватьПериодДляВсехНачислений", 	УказыватьПериодДляВсехНачислений);	
		СохранитьЗначение("ВыделятьЕСВДляОтпускныхВыделятьЕСВДляОтпускных", ВыделятьЕСВДляОтпускных);	
		
		СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничныеПредприятие", 	ТаблицаВРБольничныеПредприятие.ВыгрузитьКолонку("ВидРасчета"));	
		СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничныеФСС", 			ТаблицаВРБольничныеФСС.ВыгрузитьКолонку("ВидРасчета"));	
		СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничныеФССНесчСлучай",  ТаблицаВРБольничныеФССНесчСлучай.ВыгрузитьКолонку("ВидРасчета"));	
		Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
			СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРГПХ",                  ТаблицаВРГПХ.ВыгрузитьКолонку("ВидРасчета"));	
		КонецЕсли;
		
		СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРОтпускДо3", 					ТаблицаВРОтпускДо3.ВыгрузитьКолонку("ВидРасчета"));	
		СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРОтпускОт3До6", 				ТаблицаВРОтпускОт3До6.ВыгрузитьКолонку("ВидРасчета"));	
		СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРОтпускПоБеременностиИРодам", 	ТаблицаВРОтпускПоБеременностиИРодам.ВыгрузитьКолонку("ВидРасчета"));	
		СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБезСохраненияЗП",  			ТаблицаВРБезСохраненияЗП.ВыгрузитьКолонку("ВидРасчета"));	
		
	КонецЕсли;	
	
	Если мДоступностьНастроек["РегламентированныйОтчетНалоговыеДокументы"].Доступность Тогда
		СохранитьЗначение("Звит1С_НалоговыеДокументы_ВыгружатьПоПоследнейАктуальнойСхеме", Звит1С_НалоговыеДокументы_ВыгружатьПоПоследнейАктуальнойСхеме);
	КонецЕсли;
	
	Если мДоступностьНастроек["РегламентированныйОтчетДекларацияОПрибыли_2011Кв2"].Доступность Тогда
		СохранитьЗначение("ДекларацияПоПрибыли_ВсеОПЗ_В_ПриложенииСВ", ВсеОПЗ_В_ПриложенииСВ);
	КонецЕсли;
	
	Если мДоступностьНастроек["РегламентированныйОтчетЦеныПром"].Доступность Тогда
		
		ЗаголовокСообщения = НСтр("ru = 'Запись настроек отчета ""№1-Цены(пром)""'; uk = 'Запис настройок звіту ""№1-Ціни(пром)""'");
		
		Если ЦеныПром_ИспользоватьКодНПП Тогда
			Если Не ЗначениеЗаполнено(ЦеныПром_КодНПП) Тогда
				Если ЗначениеЗаполнено(ЗаголовокСообщения) Тогда
					Сообщить(ЗаголовокСообщения, СтатусСообщения.Важное);
					ЗаголовокСообщения = Неопределено;
				КонецЕсли;
				Сообщить(НСтр("ru = 'Не заполнен ""Код НПП""'; uk = 'Не заповнен ""Код НПП""'"), СтатусСообщения.БезСтатуса);
			КонецЕсли;
		Иначе
			ЦеныПром_КодНПП = Неопределено;
		КонецЕсли;
		
		СохранитьЗначение("РегламентированныйОтчетЦеныПром_ИспользоватьКодНПП", ЦеныПром_ИспользоватьКодНПП);
		СохранитьЗначение("РегламентированныйОтчетЦеныПром_КодНПП", ЦеныПром_КодНПП);
		СохранитьЗначение("РегламентированныйОтчетЦеныПром_ТипЦен", ЦеныПром_ТипЦен);
		
	КонецЕсли;
	
	Если мДоступностьНастроек["РегламентированныйОтчетОбОбъемахРеализованныхУслуг"].Доступность Тогда
		
		ЗаголовокСообщения = НСтр("ru = 'Запись настроек отчета ""Отчет об объемах реализованных услуг (форма № 1-услуги)""'; uk = 'Запис настройок звіту ""Звіт про обсяги реалізованих послуг (форма №1-послуги)""'");
		
		Если ОтчетОбОбъемахРеализованныхУслуг_ИспользоватьВидУслуги Тогда
			Если Не ЗначениеЗаполнено(ОтчетОбОбъемахРеализованныхУслуг_ВидУслуги) Тогда
				Если ЗначениеЗаполнено(ЗаголовокСообщения) Тогда
					Сообщить(ЗаголовокСообщения, СтатусСообщения.Важное);
					ЗаголовокСообщения = Неопределено;
				КонецЕсли;
				Сообщить(НСтр("ru = 'Не заполнен ""Вид услуги""'; uk = 'Не заповнен ""Вид послуги""'"), СтатусСообщения.БезСтатуса);
			КонецЕсли;
		Иначе
			ОтчетОбОбъемахРеализованныхУслуг_ВидУслуги = Неопределено;
		КонецЕсли;
		Если ОтчетОбОбъемахРеализованныхУслуг_ИспользоватьКодСКП Тогда
			Если Не ЗначениеЗаполнено(ОтчетОбОбъемахРеализованныхУслуг_КодСКП) Тогда
				Если ЗначениеЗаполнено(ЗаголовокСообщения) Тогда
					Сообщить(ЗаголовокСообщения, СтатусСообщения.Важное);
					ЗаголовокСообщения = Неопределено;
				КонецЕсли;
				Сообщить(НСтр("ru = 'Не заполнен ""Код СКП""'; uk = 'Не заповнен ""Код СКП""'"), СтатусСообщения.БезСтатуса);
			КонецЕсли;
		Иначе
			ОтчетОбОбъемахРеализованныхУслуг_КодСКП = Неопределено;
		КонецЕсли;
		
		СохранитьЗначение("РегламентированныйОтчетОбОбъемахРеализованныхУслуг_ИспользоватьВидУслуги", ОтчетОбОбъемахРеализованныхУслуг_ИспользоватьВидУслуги);
		СохранитьЗначение("РегламентированныйОтчетОбОбъемахРеализованныхУслуг_ВидУслуги",             ОтчетОбОбъемахРеализованныхУслуг_ВидУслуги);
		СохранитьЗначение("РегламентированныйОтчетОбОбъемахРеализованныхУслуг_ИспользоватьКодСКП",    ОтчетОбОбъемахРеализованныхУслуг_ИспользоватьКодСКП);
		СохранитьЗначение("РегламентированныйОтчетОбОбъемахРеализованныхУслуг_КодСКП",                ОтчетОбОбъемахРеализованныхУслуг_КодСКП);
		
		Если РегламентированнаяОтчетность.ИДКонфигурации() <> "УПП" Тогда
	    	СохранитьЗначение("РегламентированныйОтчетОбОбъемахРеализованныхУслуг_ПроцентСтавкиНДСВРознице", ОтчетОбОбъемахРеализованныхУслуг_ПроцентСтавкиНДСВРознице);
		КонецЕсли;
		
		СохранитьЗначение("РегламентированныйОтчетОбОбъемахРеализованныхУслуг_ТаблицаСтатьиДоходовПоОсновномуВидуДеятельности", ОтчетОбОбъемахРеализованныхУслуг_ТаблицаСтатьиДоходовПоОсновномуВидуДеятельности.ВыгрузитьКолонку("СтатьяДоходов"));
		СохранитьЗначение("РегламентированныйОтчетОбОбъемахРеализованныхУслуг_ТаблицаСтатьиДоходовПоСдачеВНайм",                ОтчетОбОбъемахРеализованныхУслуг_ТаблицаСтатьиДоходовПоСдачеВНайм.ВыгрузитьКолонку("СтатьяДоходов"));
	КонецЕсли;

	СохранитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_НастройкаПрозводилась", Истина);
	    
	Модифицированность = Ложь;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧИВАЮЩИЕ РАБОТУ С ДЕРЕВОМ СХЕМ

// Функция возвращает заполнение дерева доступных схем FREDO Звіт
//
Функция ПолучитьДеревоСхем()
	
	ЭлементыФормы.НадписьНетНастройки.Заголовок = НСтр("ru = 'Кеширование поддерживаемых отчетов для ""FREDO Звіт""...'; uk = 'Кешування підтримуваних звітів для ""FREDO Звіт""...'");
	СоответствиеОтчетов = ПолучитьСоответствиеОтчетов();
	
	ЭлементыФормы.НадписьНетНастройки.Заголовок = НСтр("ru = 'Подождие, идет загрузка параметров...'; uk = 'Зачекайте, йде завантаження параметрів...'");
	
	ТекстСостояния = НСтр("ru = 'Построение дерева отчетов ""FREDO Звіт""'; uk = 'Побудова дерева звітів ""FREDO Звіт""'");
	Состояние(ТекстСостояния);
	
	// Заполним вспомогательные переменные
	ТаблицаФормОтчетаПоУмолчанию = Новый ТаблицаЗначений;
	ТаблицаФормОтчетаПоУмолчанию.Колонки.Добавить("ФормаОтчета");
	ТаблицаФормОтчетаПоУмолчанию.Колонки.Добавить("ОписаниеОтчета");
	ТаблицаФормОтчетаПоУмолчанию.Колонки.Добавить("ДатаНачалоДействия");
	ТаблицаФормОтчетаПоУмолчанию.Колонки.Добавить("ДатаКонецДействия");
	
	// По умолчани. все настройки не доступны, пока не появится хотя бы один доступный отчет
	Для каждого КлючИЗначение Из мДоступностьНастроек Цикл
		мДоступностьНастроек[КлючИЗначение.Ключ].Доступность = Ложь;
	КонецЦикла;
		
	КешТаблицыФормОтчета = Новый Соответствие;
	
	// Выполним запрос для получения иерархической структуры
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегламентированныеОтчеты.Ссылка КАК Ссылка,
	|	РегламентированныеОтчеты.ИсточникОтчета КАК ИмяОтчета,
	|	РегламентированныеОтчеты.Наименование КАК Наименование,
	|	РегламентированныеОтчеты.ЭтоГруппа,
	|	РегламентированныеОтчеты.Код КАК Код,
	|	РегламентированныеОтчеты.ПометкаУдаления,
	|	РегламентированныеОтчеты.ВнешнийОтчетИспользовать КАК Внешний,
	|	ВЫБОР
	|		КОГДА РегламентированныеОтчеты.ЭтоГруппа
	|			ТОГДА ""ГруппаОтчетов""
	|		ИНАЧЕ ""Отчет""
	|	КОНЕЦ КАК ВидУзла,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(1024)) КАК Комментарий,
	|	ЛОЖЬ КАК Актуальность,
	|	ЛОЖЬ КАК ЕстьНастройка
	|ИЗ
	|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код ИЕРАРХИЯ";
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
	// Добавим дополнительную колонку для сортировки форм и схем
	Дерево.Колонки.Добавить("ПолеДляСортировки");
	
	// Добавим дополнительную колонку для идентификации формы
	Дерево.Колонки.Добавить("ИмяФормы");
	
	ТекстСостояния = ТекстСостояния+НСтр("ru = '. Обработка строки №'; uk = '. Обробка рядка №'");
	
	// Добавим схемы
	Прогресс = 0;
	ЭлементыФормы.Прогресс.Видимость = Истина;
	ЭлементыФормы.Прогресс.МаксимальноеЗначение = СоответствиеОтчетов.Количество();
	Для каждого Строка Из СоответствиеОтчетов Цикл
		
		Прогресс = Прогресс+1;
		Состояние(ТекстСостояния+Строка(Прогресс)+" ("+Строка.ИмяСхемыЗвит1С+")");

		// 1. Добавим узел отчета, если по каким либо причинам он не попал в выборку запроса
		Отбор = Новый Структура("ИмяОтчета", Строка.ИмяОтчета); // Их может быть несколько, нормально когда один
		МассивОтчетов = Дерево.Строки.НайтиСтроки(Отбор, Истина);
		
		Если МассивОтчетов.Количество() = 0 Тогда
			// На случай если нет информации об отчете
			СтрокаОтчет = Дерево.Строки.Добавить();
			СтрокаОтчет.ИмяОтчета = Строка.ИмяОтчета;
			СтрокаОтчет.Наименование =   "<"+Строка.ИмяОтчета+">";
			СтрокаОтчет.ВидУзла = "Отчет";
			
			МассивОтчетов.Добавить(СтрокаОтчет);
			
		КонецЕсли;
		
		Для каждого СтрокаОтчет Из МассивОтчетов Цикл
			
			// 2. Добавим узел характеризующий форму отчета
			СтрокаФорма = СтрокаОтчет.Строки.Найти(Строка.ИмяФормы, "ИмяФормы");
			Если СтрокаФорма = Неопределено Тогда
				СтрокаФорма = СтрокаОтчет.Строки.Добавить();
				СтрокаФорма.ИмяФормы = Строка.ИмяФормы;
				СтрокаФорма.ВидУзла = "Форма";
				
				// 2.1 Получим более детальную информацию по формам отчета
				ТаблицаФормОтчета = КешТаблицыФормОтчета[Строка.ИмяОтчета];
				ЕстьДоступКОтчету = Ложь;
				
				
				Если ТаблицаФормОтчета = Неопределено Тогда
					
					ПравоДоступаКОтчету = РегламентированнаяОтчетность.ПравоДоступаКРегламентированномуОтчету(Строка.ИмяОтчета);
					Если ПравоДоступаКОтчету = Ложь ИЛИ ПравоДоступаКОтчету = Неопределено Тогда
						ТекОтчет =  Неопределено;
					Иначе
						ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(Строка.ИмяОтчета); // Используем существующий КЭШ	
					КонецЕсли;
					
					Если ТекОтчет <> Неопределено Тогда
						
						ТекОтчетМетаданные = Метаданные.НайтиПоТипу(ТипЗнч(ТекОтчет));
						Если ТекОтчетМетаданные = Неопределено Тогда
							// Если отчет внешний, то возвращается объект типа "Внешний отчет объект"
							ТекОтчетОбъект = ТекОтчет;
						Иначе
							ТекОтчетОбъект = ТекОтчет.Создать();
						КонецЕсли;

						Попытка
							ТаблицаФормОтчета = ТекОтчетОбъект.мТаблицаФормОтчета;
							ЕстьДоступКОтчету = Истина;
						Исключение
							Если ФлагОтладки = Истина Тогда
								Сообщить("FREDO Звіт. Заполнение дерева доступных схем. Не удалось получить таблицу форм отчета """+Строка.ИмяОтчета+"""!", СтатусСообщения.Внимание);
							КонецЕсли;
						КонецПопытки;
						
					Иначе
						Если ФлагОтладки = Истина Тогда
							Сообщить("FREDO Звіт. Заполнение дерева доступных схем. Не удалось получить отчет """+Строка.ИмяОтчета+"""!", СтатусСообщения.Внимание);
						КонецЕсли;
					КонецЕсли;
					
					Если ТаблицаФормОтчета = Неопределено Тогда
						ТаблицаФормОтчета = ТаблицаФормОтчетаПоУмолчанию.Скопировать();
					КонецЕсли;
					
					КешТаблицыФормОтчета[Строка.ИмяОтчета] = ТаблицаФормОтчета;
				Иначе
					ЕстьДоступКОтчету = Истина;
					
				КонецЕсли;
				
				// 2.2 Определим есть ли у формы настроки
				ИмяНастройки = мСоответствиеФормИНастроек[НРег(Строка.ИмяОтчета+"."+Строка.ИмяФормы)];
				СтрокаФорма.ЕстьНастройка = (ИмяНастройки <> Неопределено);	
				
				// 2.3 Заполним служебное соответствие, определяеющее подмножество доступных настроек
				Если ИмяНастройки <> Неопределено И ЕстьДоступКОтчету Тогда
					мДоступностьНастроек[ИмяНастройки].Доступность = Истина;
				КонецЕсли;
				
				// 2.4 Сформируем идентификатор формы отчета
				СтрокаТаблицыФормОтчета = ТаблицаФормОтчета.Найти(Строка.ИмяФормы, "ФормаОтчета");
				Если СтрокаТаблицыФормОтчета <> Неопределено Тогда
					СтрокаФорма.Наименование = НСтр("ru = 'Форма отчета с '; uk = 'Форма звіту з '")+Формат(СтрокаТаблицыФормОтчета.ДатаНачалоДействия, "ДФ=dd.MM.yyyy")+" по ";
					Если ЗначениеЗаполнено(СтрокаТаблицыФормОтчета.ДатаКонецДействия) Тогда
						СтрокаФорма.Наименование = СтрокаФорма.Наименование + Формат(СтрокаТаблицыФормОтчета.ДатаКонецДействия, "ДФ=dd.MM.yyyy");
						СтрокаФорма.Актуальность = Ложь;
					Иначе	
						СтрокаФорма.Наименование = СтрокаФорма.Наименование + НСтр("ru='наст. время';uk='теп. час'");
						СтрокаФорма.Актуальность = Истина;
					КонецЕсли;
					СтрокаФорма.Комментарий = СтрокаТаблицыФормОтчета.ОписаниеОтчета;
					СтрокаФорма.ПолеДляСортировки = СтрокаТаблицыФормОтчета.ДатаНачалоДействия;
				Иначе
					СтрокаФорма.Наименование = "<"+Строка.ИмяФормы+">";
					СтрокаФорма.ПолеДляСортировки = '39991231'; // В конец
					СтрокаФорма.Актуальность = Истина;
				КонецЕсли;
								
			КонецЕсли;
			
			// 3. Добавим узел характеризующий схему отчета
			СтрокаСхема = СтрокаФорма.Строки.Добавить();
			СтрокаСхема.Наименование      = Строка.ИмяСхемыЗвит1С;
			СтрокаСхема.ВидУзла           = "Схема";
			СтрокаСхема.ПолеДляСортировки = Строка.ИмяСхемыЗвит1С;
			
			// Унаследуем от формы часть свойств для отображении дерева (при получении данных)
			СтрокаСхема.ЕстьНастройка = СтрокаФорма.ЕстьНастройка;
			СтрокаСхема.Актуальность  = СтрокаФорма.Актуальность;
						
		КонецЦикла;
	
	КонецЦикла;
	ЭлементыФормы.Прогресс.Видимость = Ложь;
		
	// Удалим отчеты без схем
	ПолучитьДеревоСхем_УдалитьОтчетыБезСхемИОтсортироватьФормыИСхемы(Дерево);
	
	Дерево.Колонки.Удалить("ПолеДляСортировки");
	
	// Загрузим настройки в элементы формы (только те, которые еще не были загружены)
	ВосстановитьДанные();
	
	Возврат Дерево;
	
КонецФункции

// Рекурсивная процедура обеспечивающая финальную обработку дерева
//
Процедура ПолучитьДеревоСхем_УдалитьОтчетыБезСхемИОтсортироватьФормыИСхемы(Дерево)

	МассивСтрокКУдалению = Новый Массив;
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		// Если это ссылка на отчет
		Если СтрокаДерева.ВидУзла = "ГруппаОтчетов"   // а)
		 ИЛИ СтрокаДерева.ВидУзла = "Отчет" Тогда     // б)
		 
		 	Если СтрокаДерева.ВидУзла = "ГруппаОтчетов" Тогда
				ПолучитьДеревоСхем_УдалитьОтчетыБезСхемИОтсортироватьФормыИСхемы(СтрокаДерева);	
			КонецЕсли;
			
			Если СтрокаДерева.Строки.Количество() = 0 Тогда
				// а) Если внутри группы нет отчетов, значит нет и схем. Необходимо удалить группу отчетов из дерева
				// б) Если у отчета нет форм, а значит и схем, то необходимо удалить отчет из дерева
				МассивСтрокКУдалению.Добавить(СтрокаДерева);
			Иначе
				// а) Установим признак актуальности группы отчетов, если есть хотя бы один актуальный отчет или подгруппа
				// б) Установим признак актуальности отчета, если есть хотя бы одна актуальная форма
				Для каждого СтрокаДереваСтрока Из СтрокаДерева.Строки Цикл
					
					Если СтрокаДереваСтрока.Актуальность Тогда
						СтрокаДерева.Актуальность = Истина;
					КонецЕсли;
					
					Если СтрокаДереваСтрока.ЕстьНастройка Тогда
						СтрокаДерева.ЕстьНастройка = Истина;
					КонецЕсли;
					
					Если СтрокаДерева.Актуальность И СтрокаДерева.ЕстьНастройка Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтрокаДерева.ВидУзла = "Отчет" Тогда
					// Отсортируем формы от актуальных к устаревшим
					СтрокаДерева.Строки.Сортировать("ПолеДляСортировки УБЫВ");
					Для каждого СтрокаФорма Из СтрокаДерева.Строки Цикл
						// А имена схем в алфавитном порядке
						СтрокаФорма.Строки.Сортировать("ПолеДляСортировки");
					КонецЦикла;
					
					// Зафиксируем актуальную форму отчета для отображения
					// Сохраним ссылку на форму в поле ИмяФормы. Используем при активизации строки
					СтрокаДерева.ИмяФормы = СтрокаДерева.Строки[0];
				КонецЕсли;
					
			КонецЕсли;
						
		КонецЕсли;					
		
	КонецЦикла; 	
	
	Для каждого СтрокаДерева Из МассивСтрокКУдалению Цикл
		Дерево.Строки.Удалить(СтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выводит дерева доступных схем FREDO Звіт с учетом фильтров
//
Процедура ВывестиДеревоСхемНаФорме(ПолнаяПерезагрузка = Ложь)	
	
	// 1. Сохранение ссылки на текущую строку, пригодится при завершении 
	ТекущаяСтрока = ЭлементыФормы.ДеревоСхем.ТекущаяСтрока;
	
	// Определим переменные для хранения текущего состояния
	ТекущийОтчет = Неопределено; // "Ссылка" для узлов вида "ГруппаОтчетов", "Отчет"
	ТекущаяФорма = Неопределено; // "ИмяФормы" для узла вида "Форма"
	ТекущаяСхема = Неопределено; // "Наименование" для узла вида "Схема" 
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ТекущаяСтрока.ВидУзла = "Схема" Тогда
			ТекущаяСхема = ТекущаяСтрока.Наименование;
			ТекущаяСтрока = ТекущаяСтрока.Родитель;
		КонецЕсли;
		
		Если ТекущаяСтрока.ВидУзла = "Форма" Тогда
			ТекущаяФорма = ТекущаяСтрока.ИмяФормы;
			ТекущаяСтрока = ТекущаяСтрока.Родитель;
		КонецЕсли;
		
		Если ТекущаяСтрока.ВидУзла = "ГруппаОтчетов"
		 ИЛИ ТекущаяСтрока.ВидУзла = "Отчет" Тогда
			ТекущийОтчет = ТекущаяСтрока.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	ТекущаяСтрока = Неопределено; // Удаляем ссылку на строку предыдущее дерево, позволяем сборщику мусора ее удалить
	
	// 2. Загрузка актуального дерева схем
	Если ПолнаяПерезагрузка Тогда
		мПолноеДеревоСхем = ПолучитьДеревоСхем();	
	КонецЕсли;
	
	// 3. Обновим данные элемента формы 
	ДеревоСхем = мПолноеДеревоСхем.Скопировать();
	
	// 4. Пока элемент не перерисовался, отфильтруем узлы которые не должны показываться
	ОтображатьБезНастроек  = ЭлементыФормы.КоманднаяПанельДеревоСхем.Кнопки.Настройка.Кнопки.ОтображатьБезНастроек.Пометка;
	ОтображатьНеАктуальные = ЭлементыФормы.КоманднаяПанельДеревоСхем.Кнопки.Настройка.Кнопки.ОтображатьНеАктуальные.Пометка;
	ОтображатьИменаСхем    = ЭлементыФормы.КоманднаяПанельДеревоСхем.Кнопки.Настройка.Кнопки.ОтображатьИменаСхем.Пометка;
	Если НЕ (ОтображатьБезНастроек И ОтображатьНеАктуальные И ОтображатьИменаСхем) Тогда
		ВывестиДеревоСхемНаФорме_УдалитьЛишниеУзлыДляДереваОтображенногоНаФорме(ДеревоСхем, ОтображатьБезНастроек, ОтображатьНеАктуальные, ОтображатьИменаСхем);		
	КонецЕсли;

	// 5. Сворачиваем все узлы, оставив развернутыми только группы
	РазвернутьДеревоСхемНаФормеПоУмолчанию(ДеревоСхем);
	
	// 6. Восстановим текущую строку дерева, если это возможно после преминения фильтров 
	ТекущаяСтрокаОтчет = Неопределено; ТекущаяСтрокаФормы = Неопределено; ТекущаяСтрокаСхема = Неопределено;
	Если ТекущийОтчет <> Неопределено Тогда
		ТекущаяСтрокаОтчет = ДеревоСхем.Строки.Найти(ТекущийОтчет, "Ссылка", Истина);		
		Если ТекущаяСтрокаОтчет <> Неопределено И ТекущаяФорма <> Неопределено Тогда			
			ТекущаяСтрокаФормы = ТекущаяСтрокаОтчет.Строки.Найти(ТекущаяФорма, "ИмяФормы"); 			
			Если ТекущаяСтрокаФормы <> Неопределено И ТекущаяСхема <> Неопределено Тогда
				ТекущаяСтрокаСхема = ТекущаяСтрокаФормы.Строки.Найти(ТекущаяСхема, "Наименование"); 							
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока = Неопределено;
	Если ТекущаяСтрокаСхема <> Неопределено Тогда
		ТекущаяСтрока = ТекущаяСтрокаСхема;
	ИначеЕсли ТекущаяСтрокаФормы <> Неопределено Тогда
		ТекущаяСтрока = ТекущаяСтрокаФормы;
	ИначеЕсли ТекущаяСтрокаОтчет <> Неопределено Тогда
		ТекущаяСтрока = ТекущаяСтрокаОтчет;		
	Иначе
		// Если не нашли, то пройдем сквозь группы и спозиционируемся на первом отчете
		Если ДеревоСхем.Строки.Количество() > 0 Тогда
			ТекущаяСтрока = ДеревоСхем.Строки[0];
			Пока ТекущаяСтрока.Строки.Количество() > 0 И ТекущаяСтрока.ВидУзла = "ГруппаОтчетов" Цикл
				ТекущаяСтрока = ТекущаяСтрока.Строки[0];
			КонецЦикла;
	 	КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ЭлементыФормы.ДеревоСхем.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;			
	
	// 7. Отобразим настройку связанную с текущей строкой дерева
	ВывестиТекущуюНастройкуНаФорме();	

КонецПроцедуры

// Рекурсивная процедура обеспечивающая финальную обработку дерева на форме включая фильтрацию
//
Процедура ВывестиДеревоСхемНаФорме_УдалитьЛишниеУзлыДляДереваОтображенногоНаФорме(Дерево, ОтображатьБезНастроек, ОтображатьНеАктуальные, ОтображатьИменаСхем)
	
	МассивСтрокКУдалению = Новый Массив;
	
	Для каждого СтрокаДерева Из Дерево.Строки Цикл
		Если Не ОтображатьБезНастроек И Не СтрокаДерева.ЕстьНастройка Тогда
			МассивСтрокКУдалению.Добавить(СтрокаДерева);
			
		ИначеЕсли Не ОтображатьНеАктуальные И Не СтрокаДерева.Актуальность Тогда
			МассивСтрокКУдалению.Добавить(СтрокаДерева);
			
		Иначе
			// Проверять подчиненные имеет смысл для групп отчетов и отчетов, для форм и схем не имет смысла 
			Если СтрокаДерева.ВидУзла = "ГруппаОтчетов"
			 ИЛИ СтрокаДерева.ВидУзла = "Отчет" Тогда
				ВывестиДеревоСхемНаФорме_УдалитьЛишниеУзлыДляДереваОтображенногоНаФорме(СтрокаДерева, ОтображатьБезНастроек, ОтображатьНеАктуальные, ОтображатьИменаСхем);
				
				Если СтрокаДерева.Строки.Количество() = 0 Тогда
					// Все подчиненные узлы были удалены
					МассивСтрокКУдалению.Добавить(СтрокаДерева);
					
				ИначеЕсли СтрокаДерева.Строки.Количество() = 1 И СтрокаДерева.ВидУзла = "Отчет" И Не ОтображатьИменаСхем Тогда 
					// Не отображаем форму, если она единственная
					СтрокаДерева.Строки.Очистить();
				КонецЕсли;
				
			ИначеЕсли Не ОтображатьИменаСхем И СтрокаДерева.ВидУзла = "Форма" Тогда
				СтрокаДерева.Строки.Очистить();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаДерева Из МассивСтрокКУдалению Цикл
		Дерево.Строки.Удалить(СтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выводит настройку соответствующую текущей строке в дереве
//
Процедура ВывестиТекущуюНастройкуНаФорме()
	
	ЭлементыФормы.Комментарий.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
	ЭлементыФормы.ПанельНастройка.Доступность = Истина;
	
	ТекущаяСтрока = ЭлементыФормы.ДеревоСхем.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено                  // Нет данных
	 ИЛИ ТекущаяСтрока.ВидУзла = "ГруппаОтчетов" Тогда // для групп отчетов нечего выводить
	 
		ЭлементыФормы.РамкаОписаниеФормы.Заголовок = НСтр("ru = '  Описание'; uk = '  Опис'");
		ЭлементыФормы.Комментарий.Заголовок = НСтр("ru = 'Для настройки необходимо выбрать отчет'; uk = 'Для настройки необхідно вибрати звіт'");
		ЭлементыФормы.ПанельНастройка.ТекущаяСтраница = ЭлементыФормы.ПанельНастройка.Страницы.НетНастройки;
		Возврат;				
	КонецЕсли;
	
	// Если выделена не форма, то приведем выбранное значение к форме		
	Если ТекущаяСтрока.ВидУзла = "Отчет" Тогда
		// При выборе отчета открываем актуальную форму. 
		// в поле ИмяФормы хранится ссылка на строку с формой
		СтрокаФорма = ТекущаяСтрока.ИмяФормы;
		
	ИначеЕсли ТекущаяСтрока.ВидУзла = "Форма" Тогда
		СтрокаФорма = ТекущаяСтрока;
		
	ИначеЕсли ТекущаяСтрока.ВидУзла = "Схема" Тогда
		// Для схемы, берем настроку формы
		СтрокаФорма = ТекущаяСтрока.Родитель;
		
	КонецЕсли;
	
	// Отобразим описание
	ЭлементыФормы.РамкаОписаниеФормы.Заголовок = НСтр("ru = '  Описание формы действующей '; uk = '  Опис форми діючої '")+	СтрЗаменить(СтрокаФорма.Наименование, НСтр("ru = 'Форма отчета '; uk = 'Форма звіту '"), "");
	ЭлементыФормы.Комментарий.Заголовок = СтрокаФорма.Комментарий;
	
	// Отобразим нужную закладку с параметрами
	мТекущаяНастройка = мСоответствиеФормИНастроек[НРег(СтрокаФорма.Родитель.ИмяОтчета+"."+СтрокаФорма.ИмяФормы)];
	мИмяФормы = СтрокаФорма.ИмяФормы;
	
	Если мТекущаяНастройка = Неопределено Тогда
		ИмяСтраницы = "НетНастройки";	
	ИначеЕсли мТекущаяНастройка = "РегламентированныйОтчетЕдиныйСоциальныйВзнос_2011Мес8" 
		  ИЛИ мТекущаяНастройка = "РегламентированныйОтчетЕдиныйСоциальныйВзнос_2013"
		  ИЛИ мТекущаяНастройка = "РегламентированныйОтчетЕдиныйСоциальныйВзнос_2013Мес9" Тогда
		ИмяСтраницы = "РегламентированныйОтчетЕдиныйСоциальныйВзнос_2011"; 		
    Иначе
		ИмяСтраницы = мТекущаяНастройка;
	КонецЕсли;
	
	Если ЭлементыФормы.ПанельНастройка.ТекущаяСтраница.Имя <> ИмяСтраницы Тогда
		ЭлементыФормы.ПанельНастройка.ТекущаяСтраница = ЭлементыФормы.ПанельНастройка.Страницы[ИмяСтраницы];
	КонецЕсли;	
	
	Если мТекущаяНастройка <> Неопределено И Не мДоступностьНастроек[мТекущаяНастройка].Доступность Тогда
		// Если это форма котокая может быть настроена, но доступа к отчету нет
		ЭлементыФормы.РамкаОписаниеФормы.Заголовок = НСтр("ru = '  Описание формы'; uk = '  Опис форми'");
		ЭлементыФормы.Комментарий.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
		ЭлементыФормы.Комментарий.Заголовок = НСтр("ru = 'Отчет не доступен. Проверьте настройки прав'; uk = 'Звіт не доступний. Перевірте настройки прав'");
		ЭлементыФормы.ПанельНастройка.Доступность = Ложь;	

	КонецЕсли;		
	
	УстановитьВидимость();
		
КонецПроцедуры

// Процедура сворачивает все узлы, за исключением групп отчетов
//
Процедура РазвернутьДеревоСхемНаФормеПоУмолчанию(ДеревоСхем)
	
	Для каждого СтрокаДерева Из ДеревоСхем.Строки Цикл
	
		Если СтрокаДерева.ВидУзла = "ГруппаОтчетов" Тогда
			Если Не ЭлементыФормы.ДеревоСхем.Развернут(СтрокаДерева) Тогда
				ЭлементыФормы.ДеревоСхем.Развернуть(СтрокаДерева);
			КонецЕсли;			
		Иначе
			Если ЭлементыФормы.ДеревоСхем.Развернут(СтрокаДерева) Тогда
				ЭлементыФормы.ДеревоСхем.Свернуть(СтрокаДерева);
			КонецЕсли;
				
		КонецЕсли;
		
		Если СтрокаДерева.ВидУзла <> "Форма" Тогда
			// В узле вида "Форма" только листья, свертка не имеет смысла
			РазвернутьДеревоСхемНаФормеПоУмолчанию(СтрокаДерева);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
		
	Если ФлагОтладкиПакетноеТестирование Тогда
		ПослеОткрытияФормы();
	Иначе
		// Отобразим прогресс заполнения кеша уже на открытой форме
		ПодключитьОбработчикОжидания("ПослеОткрытияФормы", 0.1, Истина);		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеОткрытияФормы" формы
// Эекпортируем для нужд тестирования
//
Процедура ПослеОткрытияФормы()
	
	// Восстановим настройки фильтрации дерева
	КнопкиМенюНастройка = ЭлементыФормы.КоманднаяПанельДеревоСхем.Кнопки.Настройка.Кнопки;	
	
	ОтображатьБезНастроек = ВосстановитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ОтображатьБезНастроек");
	КнопкиМенюНастройка.ОтображатьБезНастроек.Пометка = ?(ОтображатьБезНастроек = Неопределено, Ложь, ОтображатьБезНастроек);
		
	ОтображатьНеАктуальные = ВосстановитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ОтображатьНеАктуальные");
	КнопкиМенюНастройка.ОтображатьНеАктуальные.Пометка = ?(ОтображатьНеАктуальные = Неопределено, Ложь, ОтображатьНеАктуальные);
	
	ОтображатьИменаСхем = ВосстановитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ОтображатьИменаСхем");
	КнопкиМенюНастройка.ОтображатьИменаСхем.Пометка = ?(ОтображатьИменаСхем = Неопределено, Ложь, ОтображатьИменаСхем);
	
	ВывестиДеревоСхемНаФорме(Истина);
	
	// Дальше этот элемент формы будет выполнять иную функцию
	ЭлементыФормы.НадписьНетНастройки.Заголовок = НСтр("ru = 'Данный объект не требует настройки'; uk = 'Даний об''єкт не вимагає настройки'");
	
	УстановитьВидимость();
	
	мФормаНастройкиПолностьюОткрыта = Истина;
	
	// Активируем требуемую настройку
	Если ЗначениеЗаполнено(мИмяНастройкиДляАктивизации) Тогда
		АвтивироватьНастройку(мИмяНастройкиДляАктивизации)
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность И Не ФлагОтладкиПакетноеТестирование Тогда
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'; uk = 'Дані були змінені. Зберегти зміни?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			
			СохранитьДанные();
	
		КонецЕсли;
		
	КонецЕсли;
	
	// Сохнаним настройку открытия формы, независимо от того сохранены ли настройки отчетов
	КнопкиМенюНастройка = ЭлементыФормы.КоманднаяПанельДеревоСхем.Кнопки.Настройка.Кнопки;	
	СохранитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ОтображатьБезНастроек",  КнопкиМенюНастройка.ОтображатьБезНастроек.Пометка);
	СохранитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ОтображатьНеАктуальные", КнопкиМенюНастройка.ОтображатьНеАктуальные.Пометка);
	СохранитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ОтображатьИменаСхем",    КнопкиМенюНастройка.ОтображатьИменаСхем.Пометка);
	
	мФормаНастройкиПолностьюОткрыта = Ложь;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик события "Действие" кнопки "ОК" командной панели формы.
//
Процедура ОсновныеДействияФормыОсновныеДействияФормыОК(Кнопка)

	СохранитьДанные();
	
	Закрыть();
	
КонецПроцедуры

// Обработчик события "Действие" кнопки "Записать" командной панели формы.
//
Процедура ОсновныеДействияФормыЗаписать(Кнопка)
	
	СохранитьДанные();
	
КонецПроцедуры

// Обработчик события "Действие" кнопки "ЗапуститьЗвит1С" командной панели формы.
//
Процедура ОсновныеДействияФормыЗапуститьЗвит1С(Кнопка)
	
	СохранитьДанные();
	
	Закрыть();
	
	ЗапуситьЗвит1С(Истина);
	
КонецПроцедуры

// Обработчик события "Действие" кнопки "РазвернутьВсе" командной панели дерева схем.
//
Процедура КоманднаяПанельДеревоСхемРазвернутьВсе(Кнопка)
	
	ЭлементыФормы.ДеревоСхем.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
КонецПроцедуры

// Обработчик события "Действие" кнопки "СвернутьВсе" командной панели дерева схем.
//
Процедура КоманднаяПанельДеревоСхемСвернутьВсе(Кнопка)
	
	РазвернутьДеревоСхемНаФормеПоУмолчанию(ДеревоСхем);
	
КонецПроцедуры

// Обработчик события "Действие" кнопки "ОбновитьДеревоСхем" командной панели дерева схем.
//
Процедура КоманднаяПанельДеревоСхемОбновитьДеревоСхем(Кнопка)
	
	ВывестиДеревоСхемНаФорме(Истина);
	
КонецПроцедуры

// Обработчик события "Действие" кнопки "ОтображатьБезНастроек" командной панели дерева схем.
//
Процедура КоманднаяПанельДеревоСхемОтображатьБезНастроек(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ВывестиДеревоСхемНаФорме();
	
КонецПроцедуры

// Обработчик события "Действие" кнопки "ОтображатьНеАктуальные" командной панели дерева схем.
//
Процедура КоманднаяПанельДеревоСхемОтображатьНеАктуальные(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ВывестиДеревоСхемНаФорме();
	
КонецПроцедуры

// Обработчик события "Действие" кнопки "ОтображатьИменаСхем" командной панели дерева схем.
//
Процедура КоманднаяПанельДеревоСхемОтображатьИменаСхем(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ВывестиДеревоСхемНаФорме();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриПолученииДанных" табличного поля ДеревоСхем
//
Процедура ДеревоСхемПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		Если ОформлениеСтроки.ДанныеСтроки.ВидУзла = "ГруппаОтчетов"
		 ИЛИ ОформлениеСтроки.ДанныеСтроки.ВидУзла = "Отчет" Тогда
			ОформлениеСтроки.Шрифт = Новый Шрифт(, , ОформлениеСтроки.ДанныеСтроки.ЭтоГруппа, , , ОформлениеСтроки.ДанныеСтроки.ПометкаУдаления);
			ОформлениеСтроки.Ячейки.Наименование.УстановитьТекст(ОформлениеСтроки.ДанныеСтроки.Наименование + ?(ОформлениеСтроки.ДанныеСтроки.Внешний = Истина, НСтр("ru=' (внешний)';uk=' (зовнішній)'"), ""));
			Если ОформлениеСтроки.ДанныеСтроки.Родитель = Неопределено Тогда
				ОформлениеСтроки.ЦветФона = мЦветПервогоУровняДерева;
			Иначе
				ОформлениеСтроки.ЦветФона = мЦветВторогоУровняДерева;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ОформлениеСтроки.ДанныеСтроки.Актуальность Тогда
			ОформлениеСтроки.ЦветТекста = WebЦвета.СветлоСерый;
		КонецЕсли;
		
		ОформлениеСтроки.Ячейки.ЕстьНастройка.ОтображатьТекст = Ложь;
		Если ОформлениеСтроки.ДанныеСтроки.ЕстьНастройка
		   И (ОформлениеСтроки.ДанныеСтроки.ВидУзла = "Отчет"
		  ИЛИ ОформлениеСтроки.ДанныеСтроки.ВидУзла = "Форма") Тогда
			ОформлениеСтроки.Ячейки.ЕстьНастройка.ОтображатьКартинку = Истина;
			ОформлениеСтроки.Ячейки.ЕстьНастройка.Картинка = БиблиотекаКартинок.НастройкиОтчета;
		КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля ДеревоСхем
//
Процедура ДеревоСхемПриАктивизацииСтроки(Элемент)
	
	ВывестиТекущуюНастройкуНаФорме();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ВыплатыЗПНеРегулярны
//
Процедура ВыплатыЗПНеРегулярныПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ЧислоВыплатыЗП
//
Процедура ЧислоВыплатыЗППриИзменении(Элемент)
	
	Если ЧислоВыплатыЗП > 28
	 ИЛИ ЧислоВыплатыЗП < 1 Тогда	
		ЧислоВыплатыЗП = 10;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопок со стрелками
//
Процедура ПеремещениеБольничныхНажатие(Элемент)
	
	ИмяКнопки = Элемент.Имя;
	
	Позиция_ = Найти(ИмяКнопки, "_");
	Если Позиция_ = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТЧИз = Сред(ИмяКнопки, 3, Позиция_ - 3);
	ИмяТЧВ  = Сред(ИмяКнопки, Позиция_ + 1);
	
	СтрокаИЗ = ЭлементыФормы[ИмяТЧИз].ТекущиеДанные;
	
	Если НЕ СтрокаИЗ = Неопределено Тогда
		
		СтрокаВ = ЭтаФорма[ИмяТЧВ].Добавить();
		СтрокаВ.ВидРасчета = СтрокаИЗ.ВидРасчета;
		
		ЭтаФорма[ИмяТЧИз].Удалить(СтрокаИЗ);
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флага ЦеныПром_ИспользоватьКодНПП
//
Процедура ЦеныПром_ИспользоватьКодНПППриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ЦеныПром_ПВХКодНПП
//
Процедура ЦеныПром_ПВХКодНПППриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ЦеныПром_ПВХКодНПП
//
Процедура ЦеныПром_ПВХКодНППНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Форма = ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьФормуВыбора(,Элемент);
	
	Форма.ПланВидовХарактеристикСписок.Отбор.НазначениеСвойства.ВидСравнения = ВидСравнения.Равно;
	Форма.ПланВидовХарактеристикСписок.Отбор.НазначениеСвойства.Значение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
	Форма.ПланВидовХарактеристикСписок.Отбор.НазначениеСвойства.Использование = Истина;
	
    Форма.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки ЦеныПром_Создать
//
Процедура ЦеныПром_СоздатьНажатие(Элемент)
	
	НаименованиеПоУмолчанию = "Код НПП"; // На укр. и рус. языке одинаково
	
	// Попробуем найти уже созданный элемент
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвойстваОбъектов.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|ГДЕ
	|	СвойстваОбъектов.НазначениеСвойства = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура)
	|	И СвойстваОбъектов.Наименование = &НаименованиеПоУмолчанию";
	Запрос.УстановитьПараметр("НаименованиеПоУмолчанию", НаименованиеПоУмолчанию);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Сообщить(НСтр("ru = 'Выбрано существующее свойство(доп.реквизит) с наименованием ""'; uk = 'Обрано існуюча властивість(доп.реквізіт) з найменуванням ""'")+НаименованиеПоУмолчанию+"""", СтатусСообщения.Информация);
		
		ЦеныПром_КодНПП = Выборка.Ссылка;
		
	Иначе
		НовыйЭлемент = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
		НовыйЭлемент.Наименование       = НаименованиеПоУмолчанию;
		НовыйЭлемент.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
		НовыйЭлемент.ТипЗначения        = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)); // "ХХ.ХХ.ХХ.ХХХ"
		Попытка
			НовыйЭлемент.Записать();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
				ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
			КонецЕсли;
			Сообщить(НСтр("ru = 'Ошибка при записи нового свойства'; uk = 'Помилка при записі нового властивості'"), СтатусСообщения.Важное);
			Сообщить(ИнформацияОбОшибке.Описание , СтатусСообщения.БезСтатуса);
			Возврат;
		КонецПопытки;
		
		ЦеныПром_КодНПП = НовыйЭлемент.Ссылка;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" гиперссылки ЦеныПром_Справка
//
Процедура ЦеныПром_СправкаНажатие(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ДеревоСхем.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено                  // Нет данных
	 ИЛИ ТекущаяСтрока.ВидУзла = "ГруппаОтчетов" Тогда // для групп отчетов нечего выводить
		Возврат;				
	КонецЕсли;
	
	Если ТекущаяСтрока.ВидУзла = "Отчет" Тогда
		// При выборе отчета открываем актуальную форму. 
		// в поле ИмяФормы хранится ссылка на строку с формой
		СтрокаФорма = ТекущаяСтрока.ИмяФормы;
		
	ИначеЕсли ТекущаяСтрока.ВидУзла = "Форма" Тогда
		СтрокаФорма = ТекущаяСтрока;
		
	ИначеЕсли ТекущаяСтрока.ВидУзла = "Схема" Тогда
		// Для схемы, берем настроку формы
		СтрокаФорма = ТекущаяСтрока.Родитель;
		
	КонецЕсли;

	мФормаПросмотраСправкиЦеныПромДля = РегламентированнаяОтчетность.ФормаРеглОтчета(СтрокаФорма.Родитель.ИмяОтчета, СтрокаФорма.ИмяФормы, ЭтаФорма, "ТолькоСправка");
	Если мФормаПросмотраСправкиЦеныПромДля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мФормаПросмотраСправкиЦеныПромДля.ОткрытьСправкуФормы();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ЦеныПром_ТипыЦен
//
Процедура ЦеныПром_ТипыЦенПриИзменении(Элемент)
	Если НЕ Метаданные.Справочники.ТипыЦенНоменклатуры.Реквизиты.Найти("Рассчитывается") = Неопределено Тогда
		Если ЦеныПром_ТипЦен.Рассчитывается Тогда
			ТипЦен = Неопределено;
			Сообщить(НСтр("ru = 'Нельзя указывать расчитываемый тип цен!'; uk = 'Неможна вказувати розрахунковий тип цін!'"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ОтчетОбОбъемахРеализованныхУслуг_ИспользоватьВидУслуги
//
Процедура ОтчетОбОбъемахРеализованныхУслуг_ИспользоватьВидУслугиПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ОтчетОбОбъемахРеализованныхУслуг_ИспользоватьКодСКП
//
Процедура ОтчетОбОбъемахРеализованныхУслуг_ИспользоватьКодСКППриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ОтчетОбОбъемахРеализованныхУслуг_ВидУслуги
//
Процедура ОтчетОбОбъемахРеализованныхУслуг_ВидУслугиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Форма = ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьФормуВыбора(,Элемент);
	
	Форма.ПланВидовХарактеристикСписок.Отбор.НазначениеСвойства.ВидСравнения = ВидСравнения.Равно;
	Форма.ПланВидовХарактеристикСписок.Отбор.НазначениеСвойства.Значение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_НоменклатурныеГруппы;
	Форма.ПланВидовХарактеристикСписок.Отбор.НазначениеСвойства.Использование = Истина;
	
	Форма.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ОтчетОбОбъемахРеализованныхУслуг_КодСКП
//
Процедура ОтчетОбОбъемахРеализованныхУслуг_КодСКПНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Форма = ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьФормуВыбора(,Элемент);
	
	Форма.ПланВидовХарактеристикСписок.Отбор.НазначениеСвойства.ВидСравнения = ВидСравнения.Равно;
	Форма.ПланВидовХарактеристикСписок.Отбор.НазначениеСвойства.Значение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_НоменклатурныеГруппы;
	Форма.ПланВидовХарактеристикСписок.Отбор.НазначениеСвойства.Использование = Истина;
	
	Форма.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля ОтчетОбОбъемахРеализованныхУслуг_ТаблицаСтатьиДоходовПоОсновномуВидуДеятельности
//
Процедура ОтчетОбОбъемахРеализованныхУслуг_ТаблицаСтатьиДоходовПоОсновномуВидуДеятельностиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПустыеСтроки = Элемент.Значение.НайтиСтроки(Новый Структура("СтатьяДоходов", Справочники.СтатьиДоходов.ПустаяСсылка()));
	Для каждого Строка Из ПустыеСтроки Цикл
		Элемент.Значение.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля ОтчетОбОбъемахРеализованныхУслуг_ТаблицаСтатьиДоходовПоСдачеВНай
//
Процедура ОтчетОбОбъемахРеализованныхУслуг_ТаблицаСтатьиДоходовПоСдачеВНаймПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПустыеСтроки = Элемент.Значение.НайтиСтроки(Новый Структура("СтатьяДоходов", Справочники.СтатьиДоходов.ПустаяСсылка()));
	Для каждого Строка Из ПустыеСтроки Цикл
		Элемент.Значение.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мФормаНастройкиПолностьюОткрыта = Ложь;

мЦветПервогоУровняДерева = Новый Цвет(242, 253, 252);
мЦветВторогоУровняДерева = Новый Цвет(255, 255, 255);

мСоответствиеФормИНастроек = Новый Соответствие;
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетДекларацияНДС.ФормаОтчета2011Кв1"),              "РегламентированныйОтчетДекларацияНДС_2011Кв1");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетДекларацияНДСПерераб.ФормаОтчета2011Кв1"),       "РегламентированныйОтчетДекларацияНДС_2011Кв1");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетДекларацияНДССокращенная.ФормаОтчета2011Кв1"),   "РегламентированныйОтчетДекларацияНДС_2011Кв1");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетДекларацияНДССпециальная.ФормаОтчета2011Кв1"),   "РегламентированныйОтчетДекларацияНДС_2011Кв1");

мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетДекларацияНДС.ФормаОтчета2012Кв1"),              "РегламентированныйОтчетДекларацияНДС_2011Кв1");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетДекларацияНДСПерераб.ФормаОтчета2012Кв1"),       "РегламентированныйОтчетДекларацияНДС_2011Кв1");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетДекларацияНДССокращенная.ФормаОтчета2012Кв1"),   "РегламентированныйОтчетДекларацияНДС_2011Кв1");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетДекларацияНДССпециальная.ФормаОтчета2012Кв1"),   "РегламентированныйОтчетДекларацияНДС_2011Кв1");

мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетДекларацияНДСПерераб.ФормаОтчета2012Кв2"),       "РегламентированныйОтчетДекларацияНДС_2011Кв1");

мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетДекларацияНДС.ФормаОтчета2013Кв1"),              "РегламентированныйОтчетДекларацияНДС_2011Кв1");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетДекларацияНДС.ФормаОтчета2014"),              	  "РегламентированныйОтчетДекларацияНДС_2011Кв1");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетДекларацияНДС.ФормаОтчета2014Кв2"),              "РегламентированныйОтчетДекларацияНДС_2011Кв1");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетДекларацияНДС.ФормаОтчета2014Мес12"),            "РегламентированныйОтчетДекларацияНДС_2011Кв1");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетДекларацияНДС.ФормаОтчета2015"),           	  "РегламентированныйОтчетДекларацияНДС_2011Кв1");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетДекларацияНДС.ФормаОтчета2016"),           	  "РегламентированныйОтчетДекларацияНДС_2011Кв1");

мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетРеестрНалоговыхНакладных.ФормаОтчета2011МесКв"), "РегламентированныйОтчетРеестрНалоговыхНакладных_2011");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетРеестрНалоговыхНакладных.ФормаОтчета2013Мес"),   "РегламентированныйОтчетРеестрНалоговыхНакладных_2011");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетРеестрНалоговыхНакладных.ФормаОтчета2014Мес"),   "РегламентированныйОтчетРеестрНалоговыхНакладных_2011");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетРеестрНалоговыхНакладных.ФормаОтчета2014Мес12"), "РегламентированныйОтчетРеестрНалоговыхНакладных_2011");

мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетФорма1ДФ.ФормаОтчета2011Кв1"),                   "РегламентированныйОтчетФорма1ДФ_2011Кв1");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетФорма1ДФ.ФормаОтчета2014Кв1"),                   "РегламентированныйОтчетФорма1ДФ_2011Кв1");

Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
	мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетПоТруду.ФормаОтчета2011Мес"),                "РегламентированныйОтчетПоТруду_2011Мес");
	мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетПоТруду.ФормаОтчета2012Мес"),                "РегламентированныйОтчетПоТруду_2011Мес");
КонецЕсли;
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетЕдиныйСоциальныйВзнос.ФормаОтчета2011"),         "РегламентированныйОтчетЕдиныйСоциальныйВзнос_2011");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетЕдиныйСоциальныйВзнос.ФормаОтчета2011Мес8"),     "РегламентированныйОтчетЕдиныйСоциальныйВзнос_2011Мес8");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетЕдиныйСоциальныйВзнос.ФормаОтчета2011Мес12"),    "РегламентированныйОтчетЕдиныйСоциальныйВзнос_2011Мес8");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетЕдиныйСоциальныйВзнос.ФормаОтчета2013"),    	  "РегламентированныйОтчетЕдиныйСоциальныйВзнос_2013");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетЕдиныйСоциальныйВзнос.ФормаОтчета2013Мес7"),     "РегламентированныйОтчетЕдиныйСоциальныйВзнос_2013Мес9");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетЕдиныйСоциальныйВзнос.ФормаОтчета2013Мес9"),     "РегламентированныйОтчетЕдиныйСоциальныйВзнос_2013Мес9");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетЕдиныйСоциальныйВзнос.ФормаОтчета2015"),     	  "РегламентированныйОтчетЕдиныйСоциальныйВзнос_2013Мес9");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетЕдиныйСоциальныйВзнос.ФормаОтчета2016"),     	  "РегламентированныйОтчетЕдиныйСоциальныйВзнос_2013Мес9");

мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетНалоговаяНакладная.ФормаОтчета2011"),            "РегламентированныйОтчетНалоговыеДокументы");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетНалоговаяНакладная.ФормаОтчета2012"),            "РегламентированныйОтчетНалоговыеДокументы");

мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетПриложение2КНалоговойНакладной.ФормаОтчета2011"),"РегламентированныйОтчетНалоговыеДокументы");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетПриложение2КНалоговойНакладной.ФормаОтчета2012"),"РегламентированныйОтчетНалоговыеДокументы");

мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетДекларацияОПрибыли.ФормаОтчета2011Кв2"),         "РегламентированныйОтчетДекларацияОПрибыли_2011Кв2");

мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетЦеныПром.ФормаОтчета2012"),                      "РегламентированныйОтчетЦеныПром");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетЦеныПром.ФормаОтчета2015"),                      "РегламентированныйОтчетЦеныПром");

мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетОбОбъемахРеализованныхУслуг.ФормаОтчета2012Мес"), "РегламентированныйОтчетОбОбъемахРеализованныхУслуг");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетОбОбъемахРеализованныхУслуг.ФормаОтчета2012Год"), "РегламентированныйОтчетОбОбъемахРеализованныхУслуг");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетОбОбъемахРеализованныхУслуг.ФормаОтчета2015Кв"),  "РегламентированныйОтчетОбОбъемахРеализованныхУслуг");
мСоответствиеФормИНастроек.Вставить(НРег("РегламентированныйОтчетОбОбъемахРеализованныхУслуг.ФормаОтчета2017Кв"),  "РегламентированныйОтчетОбОбъемахРеализованныхУслуг");

// Доступность настроек определяется при получении дерева схем.
мДоступностьНастроек = Новый Структура;
Для каждого КлючИЗначение Из мСоответствиеФормИНастроек Цикл
	мДоступностьНастроек.Вставить(КлючИЗначение.Значение, Новый Структура("Доступность, ДанныеЗагружены", Ложь, Ложь));
КонецЦикла;