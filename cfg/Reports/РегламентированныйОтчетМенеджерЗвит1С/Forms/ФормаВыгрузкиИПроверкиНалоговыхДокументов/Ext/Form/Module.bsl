////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
Перем мЭтоИсходящиеНалоговыеДокументы Экспорт; // Флаг управляют режимом работы формы, устанавливается из вне
	  
Перем мПараметрыРаботыЗвит1С;

Перем мНастройкаПериода;                     // Настрока периода, для коректного сохранения вида периода между вызовами
Перем мВалютаРегламентированногоУчета;       // Ссылка на валюту регламентированного учета
Перем мСписокВыбораСпецРежимНалогообложения; // Список спец режимов.
Перем мСписокВыбораТипПричиныНевыдачиПокупателю;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает доступность для элементов формы 
//
Процедура УправлениеДоступностью()
	
	Если мЭтоИсходящиеНалоговыеДокументы Тогда
		Доступность = Ложь;
		ТекущаяСтрока = ЭлементыФормы.ТаблицаДокументов.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено                  // Есть текущая строка
		   И ТекущаяСтрока.Звит1С_Состояние >= 0 Тогда     // Документ выгружен
        	Доступность = Истина;
		КонецЕсли;
	   
		ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ОткрытьВЗвит1С.Доступность = Доступность;

	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость для элементов формы 
//
Процедура УправлениеВидимостью(НачальнаяНастройка = Ложь)
	
	Если мЭтоИсходящиеНалоговыеДокументы Тогда
		ЭтаФорма.Заголовок = НСтр("ru = 'Выгрузка исходящих налоговых документов в ""FREDO Звіт""'; uk = 'Вивантаження вихідних податкових документів в ""FREDO Звіт""'");		
	Иначе
		ЭтаФорма.Заголовок = НСтр("ru = 'Проверка регистрации входящих налоговых документов в ""FREDO Звіт""'; uk = 'Перевірка реєстрації вхідних податкових документів в ""FREDO Звіт""'");		
		
		Кнопки = ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки;
		Кнопки.Удалить(Кнопки.РазделительОткрытьВЗвит1С);
		Кнопки.Удалить(Кнопки.ОткрытьВЗвит1С);
	КонецЕсли;
	
	ЭлементыФормы.РасчетЦеныТочный.Видимость = мЭтоИсходящиеНалоговыеДокументы;
	
	ЭлементыФормы.ОбособленноеПодразделение.Видимость        = мПараметрыРаботыЗвит1С.УчетПоОбособленнымПодразделениям;
	ЭлементыФормы.НадписьОбособленноеПодразделение.Видимость = мПараметрыРаботыЗвит1С.УчетПоОбособленнымПодразделениям;	
	ЭлементыФормы.СпецРежимНалогообложения.СписокВыбора      = мСписокВыбораСпецРежимНалогообложения;     

	Если мЭтоИсходящиеНалоговыеДокументы Тогда
		КолонкаПометкаВыполнить_Текст       = НСтр("ru = 'Выгружать'; uk = 'Вивантажувати'");
		КолонкаПометкаВыполнить_ПолныйТекст = НСтр("ru = 'Отметка, указывает на то что документ будет выгружен в ""FREDO Звіт""'; uk = 'Позначка, вказує на те що документ буде вивантажен в ""FREDO Звіт""'");
		
		ВыполнитьТекст = НСтр("ru = 'Выгрузить налоговые документы в ""FREDO Звіт""'; uk = 'Вивантажити податкові документи в ""FREDO Звіт""'");
		ВыполнитьПолныйТекст = НСтр("ru = 'Выгрузка отмеченных налоговых документов в ""FREDO Звіт""'; uk = 'Вивантажиення позначених податкових документів в ""FREDO Звіт""'");
	Иначе
		КолонкаПометкаВыполнить_Текст       = НСтр("ru = 'Запрос'; uk = 'Запит'");
		КолонкаПометкаВыполнить_ПолныйТекст = НСтр("ru = 'Отметка, указывает на то что для документа будет сформирован и отправлен запрос состояния регистрации в ЕРНН через ""FREDO Звіт""'; uk = 'Позначка, вказує на те що для документа буде сформуван і отправлен запит стану реєстрації в ЄРПН за допомогою  ""FREDO Звіт""'");
		
		ВыполнитьТекст = НСтр("ru = 'Отправить запрос в ЕРНН через ""FREDO Звіт""'; uk = 'Надіслати запит стану в ЄРПН через ""FREDO Звіт""'");
		ВыполнитьПолныйТекст = НСтр("ru = 'Формирование и отправка запроса регистрации выбранных налоговых документов в ЕРНН через ""FREDO Звіт""'; uk = 'Формування і відправка запита що до стану реєстрації обраних податкових документів в ЄРПН за допомогою ""FREDO Звіт""'");
	КонецЕсли;
	Колонки = ЭлементыФормы.ТаблицаДокументов.Колонки;
	
	Колонки.Пометка_Выполнить.ТекстШапки = КолонкаПометкаВыполнить_Текст;
	Колонки.Пометка_Выполнить.ПодсказкаВШапке = КолонкаПометкаВыполнить_ПолныйТекст;

	Колонки.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных.Видимость         = Ложь;
	Колонки.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных.ИзменятьВидимость = мЭтоИсходящиеНалоговыеДокументы;
	Колонки.ВключенаВЕдиныйРеестрНалоговыхНакладных.Видимость                 = мЭтоИсходящиеНалоговыеДокументы;
	Колонки.ВключенаВЕдиныйРеестрНалоговыхНакладных.ИзменятьВидимость         = мЭтоИсходящиеНалоговыеДокументы;
	
	Колонки.ДатаВходящегоДокумента.Видимость                                          = Не мЭтоИсходящиеНалоговыеДокументы;
	Колонки.ДатаВходящегоДокумента.ИзменятьВидимость                                  = Не мЭтоИсходящиеНалоговыеДокументы;
	Колонки.НомерВходящегоДокумента.Видимость                                         = Не мЭтоИсходящиеНалоговыеДокументы;
	Колонки.НомерВходящегоДокумента.ИзменятьВидимость                                 = Не мЭтоИсходящиеНалоговыеДокументы;
	                                               
	Колонки.ТипПричиныНевыдачи.Видимость                                              = мЭтоИсходящиеНалоговыеДокументы;
	
	Колонки.ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных.Видимость         = Ложь;
	Колонки.ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных.ИзменятьВидимость = Не мЭтоИсходящиеНалоговыеДокументы;
	Колонки.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных.Видимость                    = Не мЭтоИсходящиеНалоговыеДокументы;
	Колонки.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных.ИзменятьВидимость            = Не мЭтоИсходящиеНалоговыеДокументы;
	
	Кнопка = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.Выполнить;
	Кнопка.Текст     = ВыполнитьТекст;
	Кнопка.Подсказка = ВыполнитьПолныйТекст;	
	Кнопка.Пояснение = ВыполнитьПолныйТекст;
	
	УправлениеДоступностью();
	
КонецПроцедуры

// Функция открывает форму выбора типа исходящего налогово документа
//
Функция ОткрытьФормуВыбораНалоговогоДокумента(ДляПодбора = Ложь) 
	
	Если мЭтоИсходящиеНалоговыеДокументы Тогда
		СписокТиповДокументов = Новый СписокЗначений;
		СписокТиповДокументов.Добавить("НалоговаяНакладная",             Метаданные.Документы.НалоговаяНакладная.Представление());
		СписокТиповДокументов.Добавить("Приложение2КНалоговойНакладной", Метаданные.Документы.Приложение2КНалоговойНакладной.Представление());
		
		ВыбранноеЗначение = СписокТиповДокументов.ВыбратьЭлемент(НСтр("ru = 'Тип документа'; uk = 'Тип документу'"));
		Если ВыбранноеЗначение = Неопределено Тогда 
			Возврат Ложь;
		КонецЕсли;
		ИмяДокумента = ВыбранноеЗначение.Значение;			
	Иначе
		ИмяДокумента = мПараметрыРаботыЗвит1С.ИмяДокументаЗКП;
	КонецЕсли;
	
	Форма = Документы[ИмяДокумента].ПолучитьФормуВыбора(, ЭлементыФормы.ТаблицаДокументов);
		
	Форма.Отбор.Организация.Значение = Организация;
	Форма.Отбор.Организация.Использование = Истина;
	Попытка
		Форма.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	Исключение КонецПопытки;
	
	Если ДляПодбора Тогда
		Форма.ЗакрыватьПриВыборе = Ложь;
	КонецЕсли;
	
	Форма.МножественныйВыбор = Истина;
	Форма.Открыть();
	
	Возврат Истина;

КонецФункции

// Функция выполняет проверку регистрации в ЕРНН документов
//
Функция ПроверитьСостояниеРегистрации(СтрокиТаблицыДокументов = Неопределено, УстановитьПометки = Истина)
	
	Если СтрокиТаблицыДокументов = Неопределено Тогда
		СтрокиТаблицыДокументов = ТаблицаДокументов;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;	
	
	МассивДокументов = Новый Массив();
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
	КонецЦикла;
	
	РезультатФомирования = ПолучитьСостояниеРегистрацииДокументов(МассивДокументов);
	ОшибкаПодключенияКЗвит1С       = РезультатФомирования.ОшибкаПодключенияКЗвит1С;
	СостоянияРегистрацииДокументов = РезультатФомирования.ТаблицаРезультат;

	ИндексСтроки = 0;
	Для Каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		СтрокаСостоянияРегистрацииДокумента = СостоянияРегистрацииДокументов[ИндексСтроки];
		
     	СтрокаТаблицыДокументов.ДокументКорректен              = СтрокаСостоянияРегистрацииДокумента.ДокументКорректен;
		СтрокаТаблицыДокументов.СостояниеСтр                   = СтрокаСостоянияРегистрацииДокумента.СостояниеСтр;
    	СтрокаТаблицыДокументов.Звит1С_ДокументКорректен       = СтрокаСостоянияРегистрацииДокумента.Звит1С_ДокументКорректен;
 	  	СтрокаТаблицыДокументов.Звит1С_СовпадаютКлючевыеПоля   = СтрокаСостоянияРегистрацииДокумента.Звит1С_СовпадаютКлючевыеПоля;
   		СтрокаТаблицыДокументов.Звит1С_ДокументЗарегистрирован = СтрокаСостоянияРегистрацииДокумента.Звит1С_ДокументЗарегистрирован;
		СтрокаТаблицыДокументов.Звит1С_ДатаРегистрации         = СтрокаСостоянияРегистрацииДокумента.Звит1С_ДатаРегистрации;
		СтрокаТаблицыДокументов.Звит1С_СуммаНДСДокумента       = СтрокаСостоянияРегистрацииДокумента.Звит1С_СуммаНДС;
		СтрокаТаблицыДокументов.Звит1С_Состояние               = СтрокаСостоянияРегистрацииДокумента.Звит1С_Состояние;
		Если мЭтоИсходящиеНалоговыеДокументы = Ложь Тогда
			Если ЗначениеЗаполнено(СтрокаСостоянияРегистрацииДокумента.Звит1С_КтоВыписалНалоговуюНакладную) Тогда
				СтрокаТаблицыДокументов.КтоВыписалНалоговуюНакладную = СтрокаСостоянияРегистрацииДокумента.Звит1С_КтоВыписалНалоговуюНакладную;				
			КонецЕсли;
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки+1;
		
		// Загрузку данных строки завершили, обновим пометки
		Если УстановитьПометки Тогда
			СтрокаТаблицыДокументов.Пометка_Выполнить = Ложь;
			СтрокаТаблицыДокументов.Пометка_Синхронизировать = Ложь;

			Если СтрокаТаблицыДокументов.ДокументКорректен 
			   И СтрокаТаблицыДокументов.Звит1С_ДокументКорректен Тогда
			   
			   	// Пометка_Выполнить
				Если мЭтоИсходящиеНалоговыеДокументы Тогда
					Если (СтрокаТаблицыДокументов.Звит1С_Состояние = -1)    // Не выгружен
					 ИЛИ (СтрокаТаблицыДокументов.Звит1С_Состояние = 0 И Не СтрокаТаблицыДокументов.Звит1С_СовпадаютКлючевыеПоля)   // Выгружен и ключевые поля не совпадают
					 ИЛИ (СтрокаТаблицыДокументов.Звит1С_Состояние = 3) Тогда   // Отклонен
						// Если исходящий документ не выгружен, выгруженн но суммы различаются или отклонен то перевыгрузим
						СтрокаТаблицыДокументов.Пометка_Выполнить = Истина;						
					КонецЕсли;
					
				Иначе 
					Если (СтрокаТаблицыДокументов.Звит1С_Состояние = -1)      // Запит не сформирован
					 ИЛИ (СтрокаТаблицыДокументов.Звит1С_Состояние = 2) Тогда // Вытяг не получен. Статус существует временно до реализации со стороны FREDO Звіт (вместо -1 и 0 возвращается статус 2)
						// Если запит по входящему документу не сформирован
						СтрокаТаблицыДокументов.Пометка_Выполнить = Истина;
					КонецЕсли;
				КонецЕсли;
				
				// Пометка_Синхронизировать
				Если мЭтоИсходящиеНалоговыеДокументы Тогда
					СтрокаТаблицыДокументов.Пометка_Синхронизировать = (СтрокаТаблицыДокументов.ВключенаВЕдиныйРеестрНалоговыхНакладных <> СтрокаТаблицыДокументов.Звит1С_ДокументЗарегистрирован);
					Если НЕ СтрокаТаблицыДокументов.Пометка_Синхронизировать
						И ТипЗнч(СтрокаТаблицыДокументов.Документ) = Тип("ДокументСсылка.Приложение2КНалоговойНакладной")
						И СтрокаТаблицыДокументов.Документ.РегистрируетсяВЕРННПокупателем Тогда
						СтрокаТаблицыДокументов.Пометка_Синхронизировать = (СтрокаТаблицыДокументов.Документ.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных <> СтрокаТаблицыДокументов.Звит1С_ДатаРегистрации);						
					КонецЕсли;
				Иначе
					СтрокаТаблицыДокументов.Пометка_Синхронизировать = (СтрокаТаблицыДокументов.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных <> СтрокаТаблицыДокументов.Звит1С_ДатаРегистрации);
 				КонецЕсли;
 			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат (Не ОшибкаПодключенияКЗвит1С);
	
КонецФункции

// Процедура выполняет заполнение реквизитов табличной части документов
//
Процедура ЗаполнитьРеквизитыДокументов(СтрокиТаблицыДокументов = Неопределено, ПроверитьСостояниеРегистрации = Истина, УстановитьПометки = Истина)

	Если СтрокиТаблицыДокументов = Неопределено Тогда
		СтрокиТаблицыДокументов = ТаблицаДокументов;
		МассивДокументов = ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов = Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если мЭтоИсходящиеНалоговыеДокументы Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента,
		|	ВложенныйЗапрос.Ссылка КАК Документ,
		|	ВложенныйЗапрос.Номер,
		|	ВложенныйЗапрос.Ссылка.СпецРежимНалогообложения КАК СпецРежимНалогообложения,
		|	//#ЕстьОбособленноеПодразделение	ВЫБОР
        |	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
        |	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
        |	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
        |	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП,
		|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП,
		|	ВложенныйЗапрос.ТипПричиныНевыдачиПокупателю КАК ТипПричиныНевыдачиПокупателю, 
		|	ВложенныйЗапрос.Дата КАК Дата,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.ДоговорКонтрагента,
		|	ВложенныйЗапрос.ВалютаДокумента,
		|	ВложенныйЗапрос.СуммаДокумента,
		|	ВложенныйЗапрос.СуммаНДСДокумента,
		|	ВложенныйЗапрос.Ответственный,
		|	ВложенныйЗапрос.КтоВыписалНалоговуюНакладную,
		|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных,
		|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных КАК ВключенаВЕдиныйРеестрНалоговыхНакладных,
		|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных_Флажок,
		|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных КАК ВключенаВЕдиныйРеестрНалоговыхНакладных_Флажок
		|ИЗ
		|	(ВЫБРАТЬ
		|		1 КАК ВидДокумента,
		|		НалоговаяНакладная.Ссылка КАК Ссылка,
		|		НалоговаяНакладная.Номер КАК Номер,
		|		НалоговаяНакладная.Дата КАК Дата,
		|		НалоговаяНакладная.Контрагент КАК Контрагент,
		|		НалоговаяНакладная.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		НалоговаяНакладная.ВалютаДокумента КАК ВалютаДокумента,
		
		|		ВЫБОР КОГДА НалоговаяНакладная.КратностьВзаиморасчетов = 0 ТОГДА НалоговаяНакладная.СуммаДокумента ИНАЧЕ НалоговаяНакладная.СуммаДокумента * НалоговаяНакладная.КурсВзаиморасчетов / НалоговаяНакладная.КратностьВзаиморасчетов КОНЕЦ КАК СуммаДокумента,
		|		ВЫБОР КОГДА НалоговаяНакладная.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента) ТОГДА																					//основная ставка 20%
		|           ВЫБОР КОГДА НалоговаяНакладная.КратностьВзаиморасчетов = 0 ТОГДА НалоговаяНакладная.СуммаНДСДокумента ИНАЧЕ (НалоговаяНакладная.СуммаДокумента - НалоговаяНакладная.СуммаНДСДокумента) * НалоговаяНакладная.КурсВзаиморасчетов / НалоговаяНакладная.КратностьВзаиморасчетов / 5 КОНЕЦ
		|		ИНАЧЕ 
		|			ВЫБОР КОГДА НалоговаяНакладная.КратностьВзаиморасчетов = 0 ТОГДА НалоговаяНакладная.СуммаНДСДокумента ИНАЧЕ НалоговаяНакладная.СуммаНДСДокумента * НалоговаяНакладная.КурсВзаиморасчетов / НалоговаяНакладная.КратностьВзаиморасчетов КОНЕЦ 
		|		КОНЕЦ КАК СуммаНДСДокумента,
		
		|		НалоговаяНакладная.Ответственный КАК Ответственный,
		|		НалоговаяНакладная.КтоВыписалНалоговуюНакладную,
		
		|		ВЫБОР КОГДА (НалоговаяНакладная.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены = Значение(Документ.НалоговаяНакладная.ПустаяСсылка)) ТОГДА НалоговаяНакладная.ТипПричиныНевыдачиПокупателю ИНАЧЕ НалоговаяНакладная.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены.ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены КОНЕЦ  КАК ТипПричиныНевыдачиПокупателю,
		
		|		НалоговаяНакладная.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных,
		|		НалоговаяНакладная.ВключенаВЕдиныйРеестрНалоговыхНакладных КАК ВключенаВЕдиныйРеестрНалоговыхНакладных
		|	ИЗ
		|		Документ.НалоговаяНакладная КАК НалоговаяНакладная
		|	ГДЕ
		|		НалоговаяНакладная.Ссылка В(&МассивДокументов)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		2,
		|		Приложение2КНалоговойНакладной.Ссылка,
		|		Приложение2КНалоговойНакладной.Номер,
		|		Приложение2КНалоговойНакладной.Дата,
		|		Приложение2КНалоговойНакладной.Ссылка.Контрагент,
		|		Приложение2КНалоговойНакладной.ДоговорКонтрагента,
		|		Приложение2КНалоговойНакладной.ВалютаДокумента,
		|		ВЫБОР КОГДА Приложение2КНалоговойНакладной.КратностьВзаиморасчетов = 0 ТОГДА Приложение2КНалоговойНакладной.СуммаДокумента ИНАЧЕ Приложение2КНалоговойНакладной.СуммаДокумента * Приложение2КНалоговойНакладной.КурсВзаиморасчетов / Приложение2КНалоговойНакладной.КратностьВзаиморасчетов КОНЕЦ КАК СуммаДокумента,
		|		ВЫБОР КОГДА Приложение2КНалоговойНакладной.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка) ТОГДА                                                                                                                                                                                 //основная ставка 20%
		|           ВЫБОР КОГДА Приложение2КНалоговойНакладной.КратностьВзаиморасчетов = 0 ТОГДА Приложение2КНалоговойНакладной.СуммаНДСДокумента ИНАЧЕ (Приложение2КНалоговойНакладной.СуммаДокумента - Приложение2КНалоговойНакладной.СуммаНДСДокумента) * Приложение2КНалоговойНакладной.КурсВзаиморасчетов / Приложение2КНалоговойНакладной.КратностьВзаиморасчетов / 5 КОНЕЦ
		|		ИНАЧЕ 
		|			ВЫБОР КОГДА Приложение2КНалоговойНакладной.КратностьВзаиморасчетов = 0 ТОГДА Приложение2КНалоговойНакладной.СуммаНДСДокумента ИНАЧЕ Приложение2КНалоговойНакладной.СуммаНДСДокумента * Приложение2КНалоговойНакладной.КурсВзаиморасчетов / Приложение2КНалоговойНакладной.КратностьВзаиморасчетов КОНЕЦ 
		|		КОНЕЦ КАК СуммаНДСДокумента,
		|		Приложение2КНалоговойНакладной.Ответственный,
		|		Приложение2КНалоговойНакладной.КтоВыписалНалоговуюНакладную,
		
		|		НалоговаяНакладная.ТипПричиныНевыдачиПокупателю КАК ТипПричиныНевыдачиПокупателю,
		
		|		Приложение2КНалоговойНакладной.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных,
		|		Приложение2КНалоговойНакладной.ВключенаВЕдиныйРеестрНалоговыхНакладных
		|	ИЗ
		|		Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
		|	ГДЕ
		|		Приложение2КНалоговойНакладной.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
		
		Если мПараметрыРаботыЗвит1С.УчетПоОбособленнымПодразделениям Тогда
			ТекстЗапроса =  СтрЗаменить(ТекстЗапроса, "//#ЕстьОбособленноеПодразделение", "");	
		Иначе
			ТекстЗапроса =  СтрЗаменить(ТекстЗапроса, "//#НетОбособленноеПодразделение", "");
		КонецЕсли;		
	
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента,
		|	ВложенныйЗапрос.Ссылка КАК Документ,
		|	ВложенныйЗапрос.Номер,
		|	ВложенныйЗапрос.Дата КАК Дата,
		|	ВложенныйЗапрос.ДатаВходящегоДокумента,
		|	ВложенныйЗапрос.НомерВходящегоДокумента,		
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.ДоговорКонтрагента,
		|	ВложенныйЗапрос.СуммаДокумента,
		|	ВложенныйЗапрос.СуммаНДСДокумента,
		|	ВложенныйЗапрос.Ответственный,
		|	ВложенныйЗапрос.ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных,
		|	ВложенныйЗапрос.ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных_Флажок,
		|	ВложенныйЗапрос.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных КАК ДатаВключенияВЕдиныйРеестрНалоговыхНакладных
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ЗКП.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат)
		|					ИЛИ ЗКП.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка)
		|				ТОГДА 2
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ВидДокумента,
		|		ЗКП.Ссылка КАК Ссылка,
		|		ЗКП.Номер КАК Номер,
		|		ЗКП.Дата КАК Дата,
		|		ЗКП.ДатаВходящегоДокумента,
		|		ЗКП.НомерВходящегоДокумента,		
		|		ЗКП.Контрагент КАК Контрагент,
		|		ЗКП.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		ЗКП.СуммаДокумента КАК СуммаДокумента,
		|		ЗКП.СуммаНДСДокумента КАК СуммаНДСДокумента,
		|		ЗКП.Ответственный КАК Ответственный,
		|		ЗКП.ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных,
		|		ЗКП.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных КАК ДатаВключенияВЕдиныйРеестрНалоговыхНакладных
		|	ИЗ
		|		Документ.РегистрацияВходящегоНалоговогоДокумента КАК ЗКП
		|	ГДЕ
		|		ЗКП.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
		
		Если мПараметрыРаботыЗвит1С.ИмяДокументаЗКП <> "РегистрацияВходящегоНалоговогоДокумента" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрацияВходящегоНалоговогоДокумента", мПараметрыРаботыЗвит1С.ИмяДокументаЗКП);
		КонецЕсли;
		
	КонецЕсли;
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",  МассивДокументов);
	РеквизитыДокументов = Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению = Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке = Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента = РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ, "Документ");
		Если РеквизитыДокумента = Неопределено Тогда
			// Документ удален, либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов, РеквизитыДокумента); 
		
		Если мЭтоИсходящиеНалоговыеДокументы
			И НЕ РеквизитыДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета
			И НЕ СтрокаТаблицыДокументов.СуммаНДСДокумента = 0 Тогда
			
				НалоговыйДокументОбъект = РеквизитыДокумента.Документ.ПолучитьОбъект();
				
				ИспользоватьДанныеЗЦ = Ложь;
				Если  РеквизитыДокумента.ВидДокумента = 1
					И ЗначениеЗаполнено(НалоговыйДокументОбъект.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены) Тогда
					НалоговыйДокументОбъект = НалоговыйДокументОбъект.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены.ПолучитьОбъект();	
				    ИспользоватьДанныеЗЦ = Истина;
				КонецЕсли;
				Попытка
					СтруктураПараметров = НалоговыйДокументОбъект.ПечатьДокумента(Истина);
					Если ИспользоватьДанныеЗЦ Тогда
						ДанныеШапки 	= СтруктураПараметров.НалоговыйДокументЗЦ;
					Иначе	
						ДанныеШапки 	= СтруктураПараметров.НалоговыйДокумент;
					КонецЕсли;
					
					Если РеквизитыДокумента.ВидДокумента = 1 Тогда
						Если ДанныеШапки.Свойство("R03G11") Тогда
							СтрокаТаблицыДокументов.СуммаНДСДокумента = ДанныеШапки.R03G11;
						КонецЕсли;
					Иначе	
						Если ДанныеШапки.Свойство("R001G03") Тогда
							СтрокаТаблицыДокументов.СуммаНДСДокумента = ДанныеШапки.R001G03;
						КонецЕсли;
					КонецЕсли;
				Исключение
				КонецПопытки;
		
		КонецЕсли;
		
		
		Если мЭтоИсходящиеНалоговыеДокументы = Ложь Тогда
			СтрокаТаблицыДокументов.КтоВыписалНалоговуюНакладную = НСтр("ru = '<нет информации из ЕРНН>'; uk = '<нема інформації з ЄРПН>'");	
		Иначе
			ТекПричина = мСписокВыбораТипПричиныНевыдачиПокупателю.НайтиПоЗначению(РеквизитыДокумента.ТипПричиныНевыдачиПокупателю);
			Если НЕ ТекПричина = Неопределено Тогда
			    СтрокаТаблицыДокументов.ТипПричиныНевыдачи = ТекПричина.Представление;
			Иначе	
				СтрокаТаблицыДокументов.ТипПричиныНевыдачи = Формат(РеквизитыДокумента.ТипПричиныНевыдачиПокупателю, "ЧЦ=2; ЧДЦ=0; ЧН=' '; ЧВН=");
			КонецЕсли;
		КонецЕсли;
		
		// в номере исходящей налоговой накладной будем показывать оба номера: в начале реальный (тот, что видят получатели),
		// а второй - номер документа, которые не несет существенного смысла
		Если мЭтоИсходящиеНалоговыеДокументы Тогда
			
			ФилиалПрефикс = "";
			СпецРежим = СокрЛП(РеквизитыДокумента.СпецРежимНалогообложения);
			Если ЗначениеЗаполнено(РеквизитыДокумента.СпецРежимНалогообложения)
				И НЕ РеквизитыДокумента.СпецРежимНалогообложения = "0" Тогда
				КодСпецРежима = "" + СпецРежим;
			Иначе
				КодСпецРежима = " ";//как и в реестре
			КонецЕсли;                                             
			Если ЗначениеЗаполнено(РеквизитыДокумента.ПрефиксОП) И СтрокаТаблицыДокументов.Документ.Дата < '2016-04-01' Тогда
				Если РеквизитыДокумента.Дата >= '2014-03-01' Тогда
				    НомерФилиала = "/" + Прав("" + СокрЛП(Формат(Число(РеквизитыДокумента.ПрефиксОП),"ЧЦ=4; ЧГ=0")),4);
				Иначе	
					НомерФилиала = Прав("0000" + СокрЛП(РеквизитыДокумента.ПрефиксОП),4);
				КонецЕсли;
			Иначе
				НомерФилиала = "";	
			КонецЕсли;
			Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
				ФилиалПрефикс = "/" + КодСпецРежима + НомерФилиала;
			КонецЕсли;			
			
			СтрокаТаблицыДокументов.Номер =  ОбщегоНазначения.ПолучитьНомерНаПечать(РеквизитыДокумента.Документ) + ФилиалПрефикс + "    (" + СтрокаТаблицыДокументов.Номер + ")";
		КонецЕсли;
		
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;

	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;

	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); // Отобразим данные перед ожиданием подключения к FREDO Звіт
	
	Если ПроверитьСостояниеРегистрации Тогда
		ПроверитьСостояниеРегистрации(МассивСтрокКПроверке, УстановитьПометки);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Фунция используется для добавления документов из вне
//
Функция ДобавитьНалоговыйДокумент(ДокументСсылка, ФормаДокумента = Неопределено) Экспорт
	
	ОрганизаяВДокументе = ДокументСсылка.Организация;
	Если Не ЗначениеЗаполнено(ОрганизаяВДокументе) Тогда
		ТекстПредупреждения = НСтр("ru = 'В документе не указана организация'; uk = 'У документі не вказана організація'");
		Предупреждение(ТекстПредупреждения);
		Если ФормаДокумента <> Неопределено Тогда
			ФормаДокумента.Активизировать();
		КонецЕсли;
		Возврат Ложь;		
		
	ИначеЕсли ОрганизаяВДокументе <> Организация Тогда
		Если ТаблицаДокументов.Количество() <> 0 Тогда
			ТекстВопроса = НСтр("ru = 'Организация в документе не соответсвует организации 
                                 |указанной в обработке. Табличная часть будет очищена. 
                                 |
                                 |Продолжить?'; uk = 'Організація в документі не відповідає організації
                                 |зазначеної в обробці. Таблична частина буде очищена.
                                 |
                                 |Продовжити?'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
	        Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Если ФормаДокумента <> Неопределено Тогда
					ФормаДокумента.Активизировать();
				КонецЕсли;
				Возврат Ложь;
			КонецЕсли; 
			ТаблицаДокументов.Очистить();
		КонецЕсли;
		
		Организация = ОрганизаяВДокументе;
		
		ОрганиазацияПриИзменении(ЭлементыФормы.Организация); // Чистим договор и обособленное подразделение
		
	КонецЕсли;
	
	ТаблицаДокументовОбработкаВыбора(ЭлементыФормы.ТаблицаДокументов, ДокументСсылка, Истина);
	Если  ДокументСсылка.Дата >= '2015-01-01'
		И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.НалоговаяНакладная")
		И ДокументСсылка.ПродажаНижеОбычнойЦены 
		И ЗначениеЗаполнено(ДокументСсылка.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены) Тогда
		
		ТаблицаДокументовОбработкаВыбора(ЭлементыФормы.ТаблицаДокументов, ДокументСсылка.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены, Истина);
	
	КонецЕсли;
	
	Если ФормаДокумента <> Неопределено Тогда
		// Изменение данных должно производиться из открытой формы обрабоки 
		Если ФормаДокумента.Открыта() Тогда
			ФормаДокумента.Закрыть();
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(мЭтоИсходящиеНалоговыеДокументы) <> Тип("Булево") Тогда
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Данная форма не используется самостоятельно '; uk = 'Дана форма не використовується самостійно'");
		Предупреждение(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// Вызов должен быть осуществлен до открытия формы, т.к. значение в поле СпецРежимНалогообложения может быть не установлено
	УправлениеВидимостью();		

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Суффикс = ?(мЭтоИсходящиеНалоговыеДокументы, "Исходящие", "Входящие");
	НачПериода                                 = ВосстановитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_НачПериода");
	КонПериода                                 = ВосстановитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_КонПериода");	
	Организация                                = ВосстановитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Организация");	
	ПропускатьЗарегистрированныеПоДанным1С     = ВосстановитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_ПропускатьЗарегистрированныеПоДанным1С");	
	Контрагент                                 = ВосстановитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Отбор_Контрагент");
	ДоговорКонтрагента                         = ВосстановитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Отбор_Договор");
	Ответственный                              = ВосстановитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Отбор_Ответственный");
	ОбособленноеПодразделение                  = ВосстановитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Отбор_ОбособленноеПодразделение");
	СпецРежимНалогообложения                   = ВосстановитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Отбор_СпецРежимНалогообложения");
	текРасчетЦеныТочный		                   = ВосстановитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_РасчетЦеныТочный");
	Если текРасчетЦеныТочный = Неопределено Тогда
		РасчетЦеныТочный = Истина;
	Иначе	
		РасчетЦеныТочный = текРасчетЦеныТочный;
	КонецЕсли;
	
	// Если даты не заполнены, то период устанавливается по умолчанию
	Если Не ЗначениеЗаполнено(КонПериода) Тогда
		КонПериода = КонецМесяца(ТекущаяДата());
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НачПериода) ИЛИ (НачПериода > КонПериода) Тогда
		НачПериода = НачалоМесяца(КонПериода);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда		
		Организация = ВосстановитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_Организация");	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	ЭлементыФормы.РасшифровкаСпецРежимНалогообложения.Заголовок = "";
	ТекСпецРежим = мСписокВыбораСпецРежимНалогообложения.НайтиПоЗначению(СпецРежимНалогообложения);
	Если НЕ ТекСпецРежим = Неопределено Тогда
		
		ЭлементыФормы.РасшифровкаСпецРежимНалогообложения.Заголовок = СокрЛП(Сред(ТекСпецРежим.Представление, 2));		
	КонецЕсли;
	
	УправлениеДоступностью();
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы
//
Процедура ПриЗакрытии()
	
	Суффикс = ?(мЭтоИсходящиеНалоговыеДокументы, "Исходящие", "Входящие");
	СохранитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_ПропускатьЗарегистрированныеПоДанным1С", ПропускатьЗарегистрированныеПоДанным1С);
	СохранитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_НачПериода",                             НачПериода);
	СохранитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_КонПериода",	                            КонПериода);
	СохранитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Организация",                            Организация);	
	СохранитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Отбор_Контрагент",                       Контрагент);
	СохранитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Отбор_Договор",                          ДоговорКонтрагента);
	СохранитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Отбор_Ответственный",                    Ответственный);
	СохранитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Отбор_ОбособленноеПодразделение",        ОбособленноеПодразделение);
	СохранитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Отбор_СпецРежимНалогообложения",         СпецРежимНалогообложения);
	СохранитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_РасчетЦеныТочный", РасчетЦеныТочный);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик события "Действие" кнопки "Заполнить" командной панели таблицы документов.
//
Процедура КоманднаяПанельТаблицаДокументовЗаполнить(Кнопка)
	
	Если Не ЗначениеЗаполнено(НачПериода) ИЛИ Не ЗначениеЗаполнено(КонПериода) Тогда
		ТекстСообщения = НСтр("ru = 'Не определен период выборки данных'; uk = 'Не визначений період вибірки даних'");
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана организация'; uk = 'Не вказана організація'");
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Организация.ДатаНачалаИспользованияЗвит1С) Тогда
		ТекстСообщения = НСтр("ru = 'Выгрузка в систему ""FREDO Звіт"" невозможна, ""FREDO Звіт"" не используется для организации'; uk = 'Вивантаження в систему ""FREDO Звіт"" неможливо, ""FREDO Звіт"" не використовується для організації'")
		                     +" """+Строка(Организация)+"""."+Символы.ПС+НСтр("ru = 'Не указана дата начала использования ""FREDO Звіт"" в карточке организации'; uk = 'Не вказана дата початку використання ""FREDO Звіт"" в картці організації'");
		Предупреждение(ТекстСообщения);	
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДокументов.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли; 
		ТаблицаДокументов.Очистить();
	КонецЕсли;

	Если НачПериода < Организация.ДатаНачалаИспользованияЗвит1С Тогда
		ТекстВопроса = (НСтр("ru = 'Дата начала выборки документов меньше даты начала использования ""FREDO Звіт"" для организации """+Строка(Организация)+"""
                             |Продолжить?'; uk = 'Дата початку вибірки документів менше дати початку використання ""FREDO Звіт"" в організації """+Строка(Организация)+"""
                             |Продовжити?'"));	
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			 Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если мЭтоИсходящиеНалоговыеДокументы Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Приложение2КНалоговойНакладной.Ссылка,
		|	Приложение2КНалоговойНакладной.НалоговаяНакладная
		|ПОМЕСТИТЬ Приложение2ТребующиеРегистрации
		|ИЗ
		|	Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
		|ГДЕ
		|	Приложение2КНалоговойНакладной.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И Приложение2КНалоговойНакладной.Организация = &Организация
		|	И Приложение2КНалоговойНакладной.Проведен
		|	И Приложение2КНалоговойНакладной.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		НалоговаяНакладная.Дата КАК Дата,
		|		НалоговаяНакладная.Ссылка КАК Ссылка,
		|		НалоговаяНакладная.Контрагент КАК Контрагент,
		|		НалоговаяНакладная.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		НалоговаяНакладная.Ответственный КАК Ответственный,
		|		НалоговаяНакладная.СпецРежимНалогообложения КАК СпецРежимНалогообложения,
		|		&ОбособленноеПодразделениеНН КАК ОбособленноеПодразделение,
		|		НалоговаяНакладная.ВключенаВЕдиныйРеестрНалоговыхНакладных КАК ВключенаВЕдиныйРеестрНалоговыхНакладных
		|	ИЗ
		|		Документ.НалоговаяНакладная КАК НалоговаяНакладная
		|	ГДЕ
		|		  НалоговаяНакладная.Организация = &Организация
		|		И (НалоговаяНакладная.Проведен ИЛИ (НалоговаяНакладная.Дата >= ДАТАВРЕМЯ(2015,01,01) И ЕстьNULL(НалоговаяНакладная.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены.Проведен, ЛОЖЬ)))
		|		И (     (  НалоговаяНакладная.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных И НалоговаяНакладная.Дата МЕЖДУ &НачПериода И &КонПериода)
		|			    ИЛИ 
		|				(  НалоговаяНакладная.Ссылка В (ВЫБРАТЬ Приложение2ТребующиеРегистрации.НалоговаяНакладная ИЗ Приложение2ТребующиеРегистрации КАК Приложение2ТребующиеРегистрации)
		|				 И НЕ НалоговаяНакладная.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных)
		|	      )
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Приложение2КНалоговойНакладной.Дата,
		|		Приложение2КНалоговойНакладной.Ссылка,
		|		Приложение2КНалоговойНакладной.Контрагент,
		|		Приложение2КНалоговойНакладной.ДоговорКонтрагента,
		|		Приложение2КНалоговойНакладной.Ответственный,
		|		Приложение2КНалоговойНакладной.СпецРежимНалогообложения,
		|		&ОбособленноеПодразделениеП2,
		|		Приложение2КНалоговойНакладной.ВключенаВЕдиныйРеестрНалоговыхНакладных
		|	ИЗ
		|		Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
		|	ГДЕ
		|		Приложение2КНалоговойНакладной.Ссылка В
		|				(ВЫБРАТЬ
		|					Приложение2ТребующиеРегистрации.Ссылка
		|				ИЗ
		|					Приложение2ТребующиеРегистрации КАК Приложение2ТребующиеРегистрации)) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.ДоговорКонтрагента,
		|	ВложенныйЗапрос.Ответственный,
		|	ВложенныйЗапрос.СпецРежимНалогообложения,
		|	ВложенныйЗапрос.ОбособленноеПодразделение,
		|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных}
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Дата,
		|	ВложенныйЗапрос.Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗКП.Дата КАК Дата,
		|		ЗКП.Ссылка КАК Ссылка,
		|		ЗКП.Контрагент КАК Контрагент,
		|		ЗКП.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		ЗКП.Ответственный КАК Ответственный,
		|		ЗКП.СпецРежимНалогообложения КАК СпецРежимНалогообложения,
		|		&ОбособленноеПодразделениеЗКП КАК ОбособленноеПодразделение,
		|		ВЫБОР
		|			КОГДА ЗКП.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК ВключенаВЕдиныйРеестрНалоговыхНакладных
		|	ИЗ
		|		Документ.РегистрацияВходящегоНалоговогоДокумента КАК ЗКП
		|	ГДЕ
		|		ЗКП.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И ЗКП.Организация = &Организация
		|		И ЗКП.Проведен
		|		И ЗКП.ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.ДоговорКонтрагента,
		|	ВложенныйЗапрос.Ответственный,
		|	ВложенныйЗапрос.СпецРежимНалогообложения,
		|	ВложенныйЗапрос.ОбособленноеПодразделение,
		|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных}
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Дата,
		|	ВложенныйЗапрос.Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Если мПараметрыРаботыЗвит1С.ИмяДокументаЗКП <> "РегистрацияВходящегоНалоговогоДокумента" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрацияВходящегоНалоговогоДокумента", мПараметрыРаботыЗвит1С.ИмяДокументаЗКП);
		КонецЕсли;
		
	КонецЕсли;
	
	Если мПараметрыРаботыЗвит1С.УчетПоОбособленнымПодразделениям Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбособленноеПодразделениеНН",  "НалоговаяНакладная.ОбособленноеПодразделение");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбособленноеПодразделениеП2",  "Приложение2КНалоговойНакладной.НалоговаяНакладная.ОбособленноеПодразделение");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбособленноеПодразделениеЗКП", "ЗКП.ОбособленноеПодразделение");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбособленноеПодразделениеНН",  "NULL");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбособленноеПодразделениеП2",  "NULL");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбособленноеПодразделениеЗКП", "NULL");
	КонецЕсли;		
	
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса);

	ПостроительЗапроса.ЗаполнитьНастройки();
	
	ПостроительЗапроса.Параметры.Вставить("НачПериода",  НачалоДня(НачПериода));
	ПостроительЗапроса.Параметры.Вставить("КонПериода",  КонецДня(КонПериода));
	ПостроительЗапроса.Параметры.Вставить("Организация", Организация);
	
	Отбор = ПостроительЗапроса.Отбор;
	Если ПропускатьЗарегистрированныеПоДанным1С Тогда
		ЭлементОтбора = Отбор.Добавить("ВключенаВЕдиныйРеестрНалоговыхНакладных");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = Ложь;
		ЭлементОтбора.ВидСравнения  = ВидСравнения.Равно 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ЭлементОтбора = Отбор.Добавить("Контрагент");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = Контрагент;
		ЭлементОтбора.ВидСравнения  = ?(Контрагент.ЭтоГруппа, ВидСравнения.ВСпискеПоИерархии, ВидСравнения.Равно);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ЭлементОтбора = Отбор.Добавить("ДоговорКонтрагента");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = ДоговорКонтрагента;
		ЭлементОтбора.ВидСравнения  = ?(ДоговорКонтрагента.ЭтоГруппа, ВидСравнения.ВСпискеПоИерархии, ВидСравнения.Равно);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ответственный) Тогда
		ЭлементОтбора = Отбор.Добавить("Ответственный");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = Ответственный;
		ЭлементОтбора.ВидСравнения  = ?(Ответственный.ЭтоГруппа, ВидСравнения.ВСпискеПоИерархии, ВидСравнения.Равно);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
		ЭлементОтбора = Отбор.Добавить("ОбособленноеПодразделение");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = ОбособленноеПодразделение;
		ЭлементОтбора.ВидСравнения  = ?(ОбособленноеПодразделение.ЭтоГруппа, ВидСравнения.ВСпискеПоИерархии, ВидСравнения.Равно);
	КонецЕсли;
	
	Если СпецРежимНалогообложения <> Неопределено Тогда
		ЭлементОтбора = Отбор.Добавить("СпецРежимНалогообложения");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = СпецРежимНалогообложения;
		ЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
	КонецЕсли;
	
	ПостроительЗапроса.Выполнить();
	ПодобранныеДокументы = ПостроительЗапроса.Результат.Выгрузить();
	
	Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
		НоваяСтрока = ТаблицаДокументов.Добавить();
		НоваяСтрока.Документ = ПодобранныйДокумент.Документ;
	КонецЦикла; 
	
	ЗаполнитьРеквизитыДокументов();
		
КонецПроцедуры

// Обработчик события "Действие" кнопки "Проверить" командной панели таблицы документов.
//
Процедура КоманднаяПанельТаблицаДокументовДействиеПодбор(Кнопка)
	
	ОткрытьФормуВыбораНалоговогоДокумента(Истина);
	
КонецПроцедуры

// Обработчик события "Действие" кнопки "Обновить" командной панели таблицы документов.
//
Процедура КоманднаяПанельТаблицаДокументовОбновить(Кнопка)
	
	ЗаполнитьРеквизитыДокументов();
	
КонецПроцедуры

// Обработчик события "Действие" кнопки "Выполнить" командной панели формы.
//
Процедура КоманднаяПанельДействийВыполнить(Кнопка)
	
	МассивСтрокДокументов = ТаблицаДокументов.НайтиСтроки(Новый Структура("Пометка_Выполнить", Истина));
	
	Если МассивСтрокДокументов.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбраны документы для '; uk = 'Не вибрані документи для '");
		Если мЭтоИсходящиеНалоговыеДокументы Тогда
			ТекстПредупреждения = ТекстПредупреждения+НСтр("ru = 'выгрузки'; uk = 'вивантаження'");
		Иначе
			ТекстПредупреждения = ТекстПредупреждения+НСтр("ru = 'формирования запроса'; uk = 'формування запиту'");
		КонецЕсли;
		
		// Обращаем внимане на колонку "Пометка" 
		Колонка = ЭлементыФормы.ТаблицаДокументов.Колонки.Пометка_Выполнить;
		ЭлементыФормы.ТаблицаДокументов.ТекущаяКолонка = Колонка;
		СтарыйЦвет = Колонка.ЦветФонаШапки;	
		Колонка.ЦветФонаШапки = ЦветаСтиля.ЦветОсобогоТекста;
		
		Предупреждение(ТекстПредупреждения);
		
		Колонка.ЦветФонаШапки = СтарыйЦвет;
		Возврат;
	КонецЕсли;

	// Обновим состояние регистрации в FREDO Звіт. Обеспечим запущенную 
	// сессию FREDO Звіт для дальнейшей работы (Когда это исходящие налоговые документы)
	Если Не ПроверитьСостояниеРегистрации(, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	БылиОшибки = Ложь;
	БылиФатальныеОшибки = Ложь;
	ДополнительныйТекстСообщения = "";
	Если мЭтоИсходящиеНалоговыеДокументы Тогда 
			
		Для каждого СтрокаТаблицыДокументов Из МассивСтрокДокументов Цикл
			
			ОбработкаПрерыванияПользователя();
			
			ДокументСсылка = СтрокаТаблицыДокументов.Документ;
			
			//РезультатВыгрузки = ВыгрузитьДокументВЗвит1С(ДокументСсылка);
			РезультатВыгрузки = ВыгрузитьДокументВЗвит1С(ДокументСсылка, Новый Структура("РасчетЦеныТочный", РасчетЦеныТочный));
			
			Если Не РезультатВыгрузки.ВыгрузкаПрошлаУспешно Тогда
				БылиОшибки = Истина;			
				Если РезультатВыгрузки.ПроизошлаФатальнаяОшибка Тогда
					БылиФатальныеОшибки = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РезультатВыгрузки.Описание) Тогда
				Если РезультатВыгрузки.ВыгрузкаПрошлаУспешно Тогда
					СтатусСообщенияПриВыгрузке = СтатусСообщения.Информация;
				ИначеЕсли РезультатВыгрузки.ПроизошлаФатальнаяОшибка Тогда
					СтатусСообщенияПриВыгрузке = СтатусСообщения.ОченьВажное;
				Иначе
					СтатусСообщенияПриВыгрузке = СтатусСообщения.Важное;					
				КонецЕсли;
				
				НомерСтроки = ТаблицаДокументов.Индекс(СтрокаТаблицыДокументов)+1;
				Сообщить("Строка №"+Строка(НомерСтроки)+" "+Строка(ДокументСсылка)+" - "+РезультатВыгрузки.Описание, СтатусСообщенияПриВыгрузке);
			КонецЕсли;
			
			Если БылиФатальныеОшибки Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		МассивДокументов = Новый Массив();
		Для каждого СтрокаТаблицыДокументов Из МассивСтрокДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
		
		РезультатФомирования = СформироватьЗапросСостоянияРегистрацииДокументов(МассивДокументов);
		
		ТаблицаРезультат             = РезультатФомирования.ТаблицаРезультат;
		РезультатВыполненияОперации  = РезультатФомирования.РезультатВыполненияОперации;
		ДополнительныйТекстСообщения = РезультатФомирования.ТекстОшибки;
		
		Если РезультатВыполненияОперации = Ложь Тогда
			БылиФатальныеОшибки = Истина;
			// Текст сообщения в переменной ДополнительныйТекстСообщения
		Иначе
			// Отобразим найденные ошибки
			ИндексСтроки = 0;
			Для Каждого СтрокаТаблицыДокументов Из МассивСтрокДокументов Цикл
				СтрокаТаблицыРезультат = ТаблицаРезультат[ИндексСтроки];
				Если Не СтрокаТаблицыРезультат.ДокументКорректен Тогда
					НомерСтроки = ТаблицаДокументов.Индекс(СтрокаТаблицыДокументов)+1;
					СтрокаСообщения = "Строка №"+Строка(НомерСтроки)+" "+Строка(СтрокаТаблицыДокументов.Документ)+" - "+НСтр("ru = 'Документ пропущен '; uk = 'документ пропущений '");
					Если ЗначениеЗаполнено(СтрокаТаблицыРезультат.СостояниеСтр) Тогда
						СтрокаСообщения = СтрокаСообщения + СтрокаТаблицыРезультат.СостояниеСтр;
					КонецЕсли;
					Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
	                БылиОшибки = Истина;
				КонецЕсли;
				
				ИндексСтроки = ИндексСтроки+1;
			КонецЦикла;					
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьСостояниеРегистрации(МассивСтрокДокументов); // Обновляем статус и пометки
		
	Если мЭтоИсходящиеНалоговыеДокументы Тогда
		Если БылиФатальныеОшибки Тогда
			ТекстСообщения = НСтр("ru = 'Выгрузка прервана с ошибками'; uk = 'Вивантаження перервано з помилками'");
		ИначеЕсли БылиОшибки Тогда
			ТекстСообщения = НСтр("ru = 'Выгрузка завершена с ошибками'; uk = 'Вивантаження завершено з помилками'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Выгрузка успешно завершена'; uk = 'Вивантаження успішно завершено'");
		КонецЕсли;	
	Иначе	
		Если БылиФатальныеОшибки Тогда
			ТекстСообщения = НСтр("ru = 'Формирование и отправка запроса состояния прервано с ошибками'; uk = 'Формування та відправлення запиту перервано з помилками'");
		ИначеЕсли БылиОшибки Тогда
			ТекстСообщения = НСтр("ru = 'Формирование и отправка запроса состояния завершено с ошибками'; uk = 'Формування та відправлення запиту  завершено з помилками'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Формирование и отправка запроса состояния успешно завершено'; uk = 'Формування та відправлення запиту успішно завершено'");
		КонецЕсли;	
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДополнительныйТекстСообщения) Тогда
		ТекстСообщения = ТекстСообщения+Символы.ПС+Символы.ПС+ДополнительныйТекстСообщения;
	КонецЕсли;
	
	Предупреждение(ТекстСообщения);		
	
КонецПроцедуры

// Обработчик события "Действие" кнопки "ЗафиксироватьСостояниеРегистрацииВ1С" командной панели формы.
//
Процедура КоманднаяПанельДействийЗафиксироватьСостояниеРегистрацииВ1С(Кнопка)
	
	МассивСтрокДокументов = ТаблицаДокументов.НайтиСтроки(Новый Структура("Пометка_Синхронизировать", Истина));
	
	// Выгрузка налоговых документов
	Если МассивСтрокДокументов.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбраны документы для обновления статуса'; uk = 'Не вибрані документи для оновлення статусу'");
		
		// Обращаем внимане на колонку "Пометка" 
		Колонка = ЭлементыФормы.ТаблицаДокументов.Колонки.Пометка_Синхронизировать;
		ЭлементыФормы.ТаблицаДокументов.ТекущаяКолонка = Колонка;
		СтарыйЦвет = Колонка.ЦветФонаШапки;	
		Колонка.ЦветФонаШапки = ЦветаСтиля.ЦветОсобогоТекста;
		
		Предупреждение(ТекстПредупреждения);
		
		Колонка.ЦветФонаШапки = СтарыйЦвет;
		Возврат;
	КонецЕсли;
	
	// Заполним основываясь на значениях реквизитов в табличной части
	ЗаполнитьРеквизитыДокументов(МассивСтрокДокументов, Ложь, Ложь);	
		
	БылиОшибки = Ложь;
	БылиФатальныеОшибки = Ложь;
	Для каждого СтрокаТаблицыДокументов Из МассивСтрокДокументов Цикл
		
		ОбработкаПрерыванияПользователя();		
		ДокументСсылка = СтрокаТаблицыДокументов.Документ;
		НомерСтроки = ТаблицаДокументов.Индекс(СтрокаТаблицыДокументов)+1;
		
		Если Не СтрокаТаблицыДокументов.ДокументКорректен 
		 ИЛИ Не СтрокаТаблицыДокументов.Звит1С_ДокументКорректен Тогда
			ТекстСообщения = НСтр("ru = 'Документ пропущен, состояние регистрации в ЕРНН не определено'; uk = 'Документ пропущений, стан реєстрації в ЄРПН не визначено'");
			Сообщить("Строка №"+Строка(НомерСтроки)+" "+Строка(ДокументСсылка)+" - "+ТекстСообщения, СтатусСообщения.Информация);			
			БылиОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		Если мЭтоИсходящиеНалоговыеДокументы Тогда
			Если ДокументСсылка.ВключенаВЕдиныйРеестрНалоговыхНакладных = СтрокаТаблицыДокументов.Звит1С_ДокументЗарегистрирован Тогда
				Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Приложение2КНалоговойНакладной") Тогда
					Если ДокументСсылка.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = СтрокаТаблицыДокументов.Звит1С_ДатаРегистрации Тогда
						Продолжить;
					КонецЕсли;
				Иначе	
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если СтрокаТаблицыДокументов.Звит1С_ДокументЗарегистрирован 
			   И Не ЗначениеЗаполнено(СтрокаТаблицыДокументов.Звит1С_ДатаРегистрации) Тогда
				ТекстСообщения = НСтр("ru = 'Документ пропущен, дата регистрации в ЕРНН не определена'; uk = 'Документ пропущений, дата реєстрації в ЄРПН не визначена'");
				Сообщить("Строка №"+Строка(НомерСтроки)+" "+Строка(ДокументСсылка)+" - "+ТекстСообщения, СтатусСообщения.Информация);
				БылиОшибки = Истина; // Ошибка в работе компоненты FREDO Звіт
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицыДокументов.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = СтрокаТаблицыДокументов.Звит1С_ДатаРегистрации Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			Если мЭтоИсходящиеНалоговыеДокументы Тогда
				ДокументОбъект.ВключенаВЕдиныйРеестрНалоговыхНакладных = СтрокаТаблицыДокументов.Звит1С_ДокументЗарегистрирован;
				Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.Приложение2КНалоговойНакладной") Тогда				
					ДокументОбъект.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = СтрокаТаблицыДокументов.Звит1С_ДатаРегистрации;
				КонецЕсли;
			Иначе
				ДокументОбъект.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = СтрокаТаблицыДокументов.Звит1С_ДатаРегистрации;
			КонецЕсли;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
				ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
			КонецЕсли;
			ТекстСообщения = НСтр("ru = 'Ошибка записи документа'; uk = 'Помилка запису документа'");
			Сообщить("Строка №"+Строка(НомерСтроки)+" "+Строка(ДокументСсылка)+" - "+ТекстСообщения, СтатусСообщения.Важное);			
			Сообщить(ИнформацияОбОшибке.Описание , СтатусСообщения.БезСтатуса);			
			БылиОшибки = Истина;
			Продолжить;
		
		КонецПопытки;
		
		Если БылиФатальныеОшибки Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьРеквизитыДокументов(МассивСтрокДокументов); // Обновляем статус и пометки
	
	Если БылиФатальныеОшибки Тогда
		ТекстСообщения = НСтр("ru = 'Синхронизация прервана с ошибками'; uk = 'Синхронізація перервана з помилками'");
	ИначеЕсли БылиОшибки Тогда
		ТекстСообщения = НСтр("ru = 'Синхронизация завершена с ошибками'; uk = 'Синхронізація завершена з помилками'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Синхронизация успешно завершена'; uk = 'Синхронізація успішно завершена'");
	КонецЕсли;	
	Предупреждение(ТекстСообщения);
	
КонецПроцедуры

// Обработчик события "Действие" кнопки "ОткрытьВЗвит1С" командной панели формы.
//
Процедура КоманднаяПанельТаблицаДокументовОткрытьВЗвит1С(Кнопка)
	
	// кнопка доступна только в случае если документ выгружен
	ТекущаяСтрока = ЭлементыФормы.ТаблицаДокументов.ТекущаяСтрока;
	
	ОткрытьДокументВЗвит1С(ТекущаяСтрока.Документ);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "Нажатие" кнопки НастройкаПериода
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	мНастройкаПериода.УстановитьПериод(НачПериода, КонПериода);

	Если мНастройкаПериода.Редактировать() Тогда

		НачПериода = мНастройкаПериода.ПолучитьДатуНачала();
		КонПериода = мНастройкаПериода.ПолучитьДатуОкончания();

	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

// Процедура - обработчик события "ПриИзменении" поля ввода Органиазация
//
Процедура ОрганиазацияПриИзменении(Элемент)
	
	Если ТаблицаДокументов.Количество() > 0 Тогда
		ТаблицаДокументов.Очистить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.Организация <> Организация Тогда
		ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбособленноеПодразделение) И ОбособленноеПодразделение.Владелец <> Организация Тогда
		ОбособленноеПодразделение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Контрагент
//
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.Владелец <> Контрагент Тогда
		ДоговорКонтрагента = Неопределено;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Организация) ИЛИ Не ЗначениеЗаполнено(Контрагент) Тогда
		Предупреждение(НСтр("ru = 'Не указана организация или контрагент'; uk = 'Не вказана організація або контрагент'"));
		Возврат;
	КонецЕсли;
	
	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,Элемент, ЭтаФорма);

	ФормаВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	ФормаВыбора.СправочникСписок.Отбор.Организация.Значение                            = Организация;
	ФормаВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
	ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;


	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ДоговорКонтрагента;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ОбособленноеПодразделение
//
Процедура ОбособленноеПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение(НСтр("ru = 'Не указана организация'; uk = 'Не вказана організація'"));
		Возврат;
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧИВАЮЩИЕ РАБОТУ С ТАБЛИЦЕЙ ДОКУМЕНТОВ

// Процедура - обработчик события "Выбор" таблицы документов
//
Процедура ТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Документ = ВыбраннаяСтрока.Документ;
	Форма  = Документ.ПолучитьФорму();
	Если Форма.Открыта() Тогда
		ТекстПредупреждения = НСтр("ru = 'Данный документ уже открыт, для модификации данных налоговых
                                    |документов рекомендуется открывать документы из данной обработки.
                                    |Для продолжения закройте документ.'; uk = 'Даний документ вже відкрито, для модифікації даних податкових
                                    |документів рекомендується відкривати документи з даної обробки.
                                    |Для продовження закрийте документ.'");
		Предупреждение(ТекстПредупреждения);
		Форма.Активизировать();
		Возврат;
	КонецЕсли;
	
	Форма.ОткрытьМодально();
	
	СтрокиТаблицыДокументов = Новый Массив;
	СтрокиТаблицыДокументов.Добавить(ВыбраннаяСтрока);
	
	ЗаполнитьРеквизитыДокументов(СтрокиТаблицыДокументов);
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы документов
//
Процедура ТаблицаДокументовПриАктивизацииСтроки(Элемент)
	
	УправлениеДоступностью();
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" таблицы документов
//
Процедура ТаблицаДокументовПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	ОткрытьФормуВыбораНалоговогоДокумента();
			
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" таблицы документов
//
Процедура ТаблицаДокументовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		МассивДокументов = ВыбранноеЗначение;
	Иначе
		МассивДокументов = Новый Массив(1);
		МассивДокументов[0] = ВыбранноеЗначение;
	КонецЕсли;
	
	ДобавленныеСтрокиТаблицыДокументов = Новый Массив;
	СтрокаТаблицыДокументов = Неопределено;
	Для каждого Документ Из МассивДокументов Цикл
		ДокументСоответсвуетРежиму = ((мЭтоИсходящиеНалоговыеДокументы) И (ТипЗнч(Документ) = Тип("ДокументСсылка.НалоговаяНакладная") ИЛИ 
		                                                   ТипЗнч(Документ) = Тип("ДокументСсылка.Приложение2КНалоговойНакладной")))
							     ИЛИ ((Не мЭтоИсходящиеНалоговыеДокументы) И (ТипЗнч(Документ) = Тип("ДокументСсылка."+мПараметрыРаботыЗвит1С.ИмяДокументаЗКП)));
		Если Не ДокументСоответсвуетРежиму Тогда
			Сообщить(НСтр("ru = 'Выбор документов данного типа не поддерживается'; uk = 'Вибір документів даного типу не підтримується'"), СтатусСообщения.Информация); 						 
			Продолжить;	
		КонецЕсли;
		
		СтрокаТаблицыДокументов = ТаблицаДокументов.Найти(Документ, "Документ");
		Если СтрокаТаблицыДокументов = Неопределено Тогда
			СтрокаТаблицыДокументов = ТаблицаДокументов.Добавить();
			СтрокаТаблицыДокументов.Документ = Документ;
		КонецЕсли;
		
		ДобавленныеСтрокиТаблицыДокументов.Добавить(СтрокаТаблицыДокументов);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаТаблицыДокументов) Тогда
		ЭлементыФормы.ТаблицаДокументов.ТекущаяСтрока = СтрокаТаблицыДокументов;
	КонецЕсли;
	
	ЗаполнитьРеквизитыДокументов(ДобавленныеСтрокиТаблицыДокументов);
	
КонецПроцедуры

// Процедура - обработчик события "ПриПолученииДанных" таблицы документов
//
Процедура ТаблицаДокументовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	СоответствиеИмен = Новый Соответствие;
	СоответствиеИмен[1] = НСтр("ru = 'ПН'; uk = 'ПН'"); // Выводим только на украинском языке
	СоответствиеИмен[2] = НСтр("ru = 'РК'; uk = 'РК'");
	
	ВалютаРегламентированногоУчетаТекст = Строка(мВалютаРегламентированногоУчета);
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		ОформлениеСтроки.Ячейки.НомерСтроки.УстановитьТекст(Строка(ТаблицаДокументов.Индекс(ДанныеСтроки)+1));
		ОформлениеСтроки.Ячейки.ВидДокумента.УстановитьТекст(СоответствиеИмен[ДанныеСтроки.ВидДокумента]);
		ОформлениеСтроки.Ячейки.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных.ОтображатьТекст = Ложь;
		ОформлениеСтроки.Ячейки.ВключенаВЕдиныйРеестрНалоговыхНакладных.ОтображатьТекст = Ложь;
		
		// Статус документа должен быть выделен
		Если Не ДанныеСтроки.ДокументКорректен ИЛИ Не ДанныеСтроки.Звит1С_ДокументКорректен Тогда
			// Документ задублирован или отклонен
			ОформлениеСтроки.Ячейки.СостояниеСтр.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
			Продолжить; // Дальнейшая  подсветка не имеет смысла
		КонецЕсли;
		
		Если ДанныеСтроки.Звит1С_Состояние > -1 Тогда // Документ выгружен в Звит
			// В документе проставлен статус что он включен в ЕРНН, по данным из FREDO Звіт это не так
			Если мЭтоИсходящиеНалоговыеДокументы Тогда
				
				Если Не ДанныеСтроки.Звит1С_СовпадаютКлючевыеПоля Тогда
					ОформлениеСтроки.Ячейки.СостояниеСтр.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
				КонецЕсли;
				
				Если ДанныеСтроки.ВключенаВЕдиныйРеестрНалоговыхНакладных
				   И Не ЗначениеЗаполнено(ДанныеСтроки.Звит1С_ДатаРегистрации) Тогда
					
					ОформлениеСтроки.Ячейки.ВключенаВЕдиныйРеестрНалоговыхНакладных.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
					
				КонецЕсли;
				
			Иначе
				
				ОформлениеСтроки.Ячейки.ВалютаДокумента.УстановитьТекст(ВалютаРегламентированногоУчетаТекст);
				
				Если ДанныеСтроки.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных <> ДанныеСтроки.Звит1С_ДатаРегистрации Тогда
					
					ОформлениеСтроки.Ячейки.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
					
				КонецЕсли;
			КонецЕсли;
			
			// Есть расхождения по сумме НДС
			Если ДанныеСтроки.Звит1С_СуммаНДСДокумента <> 0 
			   И ДанныеСтроки.Звит1С_СуммаНДСДокумента <> ДанныеСтроки.СуммаНДСДокумента Тогда
				ОформлениеСтроки.Ячейки.СуммаНДСДокумента.ЦветТекста        = ЦветаСтиля.ТекстПредупреждающейНадписи;
				ОформлениеСтроки.Ячейки.Звит1С_СуммаНДСДокумента.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;		
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ОСНОВНОЙ ПРОГРАММЫ

мПараметрыРаботыЗвит1С = ПолучитьПараметрыРаботыЗвит1С();

мНастройкаПериода = Новый НастройкаПериода;
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мСписокВыбораСпецРежимНалогообложения = Новый СписокЗначений();
мСписокВыбораСпецРежимНалогообложения.Добавить(Неопределено, "     "+НСтр("ru = 'без отбора по спец.режиму'; uk = 'без відбіру по спец. режиму'"));
мСписокВыбораСпецРежимНалогообложения.Добавить("0", "0   спец. режим не застосовується");
мСписокВыбораСпецРежимНалогообложения.Добавить("2", "2   сільськогосподарські підприємства, які застосовують 
													|спеціальний режим оподаткування діяльності у сфері сільського та 
													|лісового господарства, а також рибальства відповідно до статті 209 Кодексу");
мСписокВыбораСпецРежимНалогообложения.Добавить("3", "3   сільськогосподарські підприємства усіх форм власності, 
													|які відповідають критеріям, визначеним статтею 209 Кодексу ,
													|але які не обрали спеціальний режим оподаткування 
													|діяльності у сфері сільського, лісового господарства та рибальства 
													|та реалізують молоко, худобу, птицю, вовну власного виробництва, а 
													|також молочні продукти, молочну сировину та м'ясопродукти, 
													|вироблені у власних переробних цехах");
мСписокВыбораСпецРежимНалогообложения.Добавить("4", "4 (до 01.01.2015) переробні підприємства усіх форм власності, які згідно з 
													|пунктом 1 підрозділу 2 розділу XX Кодексу за 
													|реалізовані ними молоко, молочну сировину та молочні продукти, 
													|м'ясо та м'ясопродукти, іншу продукцію переробних тварин, 
													|закуплених у живій вазі (шкури, субпродукти, м'ясо-кісткове 
													|борошно), у повному обсязі спрямовують суми податку на додану 
													|вартість до спеціального фонду державного бюджету");
													
													
мСписокВыбораТипПричиныНевыдачиПокупателю = Новый СписокЗначений();
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(0, "");
//мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(1, "01-Виписана на суму перевищення звичайної ціни над фактичною");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(1, "01-Складена на суму збільшення компенсації вартості поставлених товарів/послуг (для податкових накладних, особливості заповнення яких викладені в пункті 13 цього Порядку)");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(2, "02-Постачання неплатнику податку");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(3, "03-Натуральна виплата в рахунок оплати праці фізичним особам");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(4, "04-Постачання у межах балансу для невиробничого використання");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(5, "05-Ліквідація основних фондів за самостійним рішенням платника податку");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(6, "06-Переведення основних фондів до складу невиробничих");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(7, "07-Експортні постачання");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(8, "08-Постачання для операцій, які не є об'єктом оподаткування податком на додану вартість");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(9, "09-Постачання для операцій, які звільнені від оподаткування податком на додану вартість");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(10, "10-Визнання умовного постачання товарних залишків та/або основних фондів, що перебувають 
													   	|в обліку платника податку на день анулювання його реєстрації як платника податку на додану вартість,
													  	|щодо яких був нарахований податковий кредит у минулих або поточному податкових періодах
														|при анулюванні реєстрації платника податку на додану вартість");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(11, "11-Виписана за щоденними підсумками операцій"); 
//мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(12, "12-Виписана на вартість безоплатно поставлених товарів/послуг, обчислену виходячи з рівня звичайних цін"); 
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(12, "12-Складена на постачання неплатнику, в якій зазначається назва покупця (для податкових накладних, особливості заповнення яких викладені в пункті 10 цього Порядку)");
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(13, "13-Використання виробничих або невиробничих засобів, інших товарів/послуг не у господарській діяльності"); 
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(14, "14-Виписана покупцем (отримувачем) послуг від нерезидента"); 
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(15, "15-Складена на суму перевищення ціни придбання товарів/послуг над фактичною ціною їх постачання"); 
мСписокВыбораТипПричиныНевыдачиПокупателю.Добавить(16, "16-Складена на суму перевищення балансової (залишкової) вартості необоротних активів над фактичною ціною їх постачання"); 
													