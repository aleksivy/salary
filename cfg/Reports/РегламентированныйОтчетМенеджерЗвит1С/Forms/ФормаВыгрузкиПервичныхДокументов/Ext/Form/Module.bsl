////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мНастройкаПериода;                     // Настрока периода, для коректного сохранения вида периода между вызовами
Перем мВалютаРегламентированногоУчета;       // Ссылка на валюту регламентированного учета


Перем ПредставлениеСостоянийДокументов;

Перем ИдКонфигурации;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


Процедура ОткрытьФормуВыбораПервичногоДокумента(ДляПодбора = Ложь) 
	
	ИмяДокумента = ОпределитьИмяДокументаПоВидуПервичногоДокументаЗвит1С();
	Если ИмяДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Документы[ИмяДокумента].ПолучитьФормуВыбора(, ЭлементыФормы.ТаблицаДокументов);
		
	Если ЗначениеЗаполнено(Организация) Тогда
	
		Форма.Отбор.Организация.Значение 	  = Организация;
		Форма.Отбор.Организация.Использование = Истина;
		Попытка
			Форма.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
		Исключение КонецПопытки;
	
	КонецЕсли;
	
	Если ДляПодбора Тогда
		Форма.ЗакрыватьПриВыборе = Ложь;
	КонецЕсли;
	
	Форма.МножественныйВыбор = Истина;
	Форма.Открыть();
	
КонецПроцедуры

Функция ПроверитьСостояниеРегистрации(СтрокиТаблицыДокументов = Неопределено, УстановитьПометки = Истина)
	
	Если СтрокиТаблицыДокументов = Неопределено Тогда
		СтрокиТаблицыДокументов = ТаблицаДокументов;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;	
	
	МассивДокументов = Новый Массив();
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
	КонецЦикла;

	РезультатФомирования = ПолучитьСостояниеРегистрацииПервичныхДокументов(МассивДокументов);
	
	ОшибкаПодключенияКЗвит1С       = РезультатФомирования.ОшибкаПодключенияКЗвит1С;
	СостоянияРегистрацииДокументов = РезультатФомирования.ТаблицаРезультат;

	ИндексСтроки = 0;
	Для Каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		СтрокаСостоянияРегистрацииДокумента = СостоянияРегистрацииДокументов[ИндексСтроки];
	
     	СтрокаТаблицыДокументов.ДокументКорректен              = СтрокаСостоянияРегистрацииДокумента.ДокументКорректен;
		СтрокаТаблицыДокументов.Звит1С_Состояние			   = СтрокаСостоянияРегистрацииДокумента.Звит1С_Состояние;
		СтрокаТаблицыДокументов.СостояниеСтр                   = СтрокаСостоянияРегистрацииДокумента.СостояниеСтр;
    	СтрокаТаблицыДокументов.Звит1С_ДокументКорректен       = СтрокаСостоянияРегистрацииДокумента.Звит1С_ДокументКорректен;
 	  	СтрокаТаблицыДокументов.Звит1С_СовпадаютКлючевыеПоля   = СтрокаСостоянияРегистрацииДокумента.Звит1С_СовпадаютКлючевыеПоля;
    	СтрокаТаблицыДокументов.Звит1С_СуммаДокумента	       = СтрокаСостоянияРегистрацииДокумента.Звит1С_СуммаДокумента;
		СтрокаТаблицыДокументов.Звит1С_СуммаНДСДокумента       = СтрокаСостоянияРегистрацииДокумента.Звит1С_СуммаНДСДокумента;
		
		ИндексСтроки = ИндексСтроки+1;
		
		// Загрузку данных строки завершили, обновим пометки
		Если УстановитьПометки Тогда
			
			СтрокаТаблицыДокументов.Пометка_Выполнить = Ложь;

			Если СтрокаТаблицыДокументов.ДокументКорректен 
			   И СтрокаТаблицыДокументов.Звит1С_ДокументКорректен Тогда
			   
			   	// Пометка_Выполнить
				Если (СтрокаТаблицыДокументов.Звит1С_Состояние = -1)    // Не выгружен
				 ИЛИ (СтрокаТаблицыДокументов.Звит1С_Состояние = 0 И Не СтрокаТаблицыДокументов.Звит1С_СовпадаютКлючевыеПоля) Тогда
					// Если исходящий документ не выгружен, выгруженн но суммы различаются или отклонен то перевыгрузим
					СтрокаТаблицыДокументов.Пометка_Выполнить = Истина;						
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат (Не ОшибкаПодключенияКЗвит1С);

КонецФункции

Функция ПолучитьУникальныйИдентификаторДокумента(ДокументСсылка) 
	Возврат СтрЗаменить(Строка(ДокументСсылка.УникальныйИдентификатор()), "-", "");
КонецФункции

Функция СформироватьТаблицыДляЗапросаСостоянияРегистрации(МассивДокументов)
	
	РезультатФомирования = Новый Структура("ОшибкаПодключенияКЗвит1С, ТаблицаРезультат");
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("ТипДокумента");
	ТаблицаРезультат.Колонки.Добавить("Документ");
	ТаблицаРезультат.Колонки.Добавить("ДокументКорректен");             
	ТаблицаРезультат.Колонки.Добавить("СостояниеСтр");                  
	ТаблицаРезультат.Колонки.Добавить("ИДДокумента");
	ТаблицаРезультат.Колонки.Добавить("_1С_Документ_Контрагент_ЕДРПОУ");
	ТаблицаРезультат.Колонки.Добавить("_1С_Документ_Организация_ЕДРПОУ");
 	ТаблицаРезультат.Колонки.Добавить("_1С_Документ_Номер");
 	ТаблицаРезультат.Колонки.Добавить("_1С_Документ_Дата", Новый ОписаниеТипов("Дата"));
 	ТаблицаРезультат.Колонки.Добавить("_1С_СуммаДокумента");
	ТаблицаРезультат.Колонки.Добавить("_1С_СуммаНДСДокумента");
	
	РезультатФомирования.ТаблицаРезультат = ТаблицаРезультат;
	
	Если МассивДокументов.Количество() = 0 Тогда
		РезультатФомирования.ОшибкаПодключенияКЗвит1С = Ложь; // Подключение не нужно
		Возврат РезультатФомирования;
	КонецЕсли;
		
	ЕстьПодключениеКЗвит1С = Неопределено;	
	РеквизитыОрганизаций  = Новый Соответствие;
	РеквизитыКонтрагентов = Новый Соответствие;
	Для каждого Документ Из МассивДокументов Цикл
		СтрокаРезультат = ТаблицаРезультат.Добавить();
		СтрокаРезультат.Документ = Документ;
		СтрокаРезультат.ДокументКорректен = Ложь; // Данные документа еще не проверены
		СтрокаРезультат._1С_Документ_Дата = Документ.Дата;
		
		// 2. Проверим организацию
		МетаданныеДокумента = Документ.Метаданные();
		Если МетаданныеДокумента.Реквизиты.Найти("Организация") = Неопределено
		 ИЛИ Не ЗначениеЗаполнено(Документ.Организация) Тогда		
			СтрокаРезультат.СостояниеСтр = НСтр("ru = 'Организация не определена'; uk = 'Організація не визначена'");
			Продолжить;
		КонецЕсли;

		Организация = Документ.Организация;

		Если Не ЗначениеЗаполнено(Организация.ДатаНачалаИспользованияЗвит1С) Тогда
			СтрокаРезультат.СостояниеСтр = НСтр("ru = '""FREDO ДокМен"" не используется для организации ""'; uk = '""FREDO ДокМен"" не використовується для організації ""'")+Строка(Организация)+"""."+Символы.ПС+
			                               НСтр("ru = 'В карточке организации не указана дата начала использования ""FREDO ДокМен""'; uk = 'В картці організації не вказана дата початку використання ""FREDO ДокМен""'");
			Продолжить;
		КонецЕсли;
		
		РеквизитыОрганизации = РеквизитыОрганизаций[Организация];
		Если РеквизитыОрганизации = Неопределено Тогда
			СписокПоказателей = Новый СписокЗначений;
			СписокПоказателей.Добавить("","КодПоЕДРПОУ");	
			Сведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, КонецДня(Документ.Дата), СписокПоказателей);
			
			РеквизитыОрганизации  = Новый Структура("КодПоЕДРПОУ", СокрЛП(Сведения.КодПоЕДРПОУ));
			РеквизитыОрганизаций[Организация] = РеквизитыОрганизации;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РеквизитыОрганизации.КодПоЕДРПОУ) Тогда
			СтрокаРезультат.СостояниеСтр = НСтр("ru = 'В карточке организации не заполнен код ЕДРПОУ'; uk = 'У картці організації не заповнений код ЄДРПОУ'");
			Если РегламентированнаяОтчетность.ИДКонфигурации() <> "УТ" Тогда
				СтрокаРезультат.СостояниеСтр = СтрокаРезультат.СостояниеСтр+" на "+Формат(Документ.Дата, """ДФ=dd.MM.yyyy");
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		// 3. Проверим Контрагента
		Если МетаданныеДокумента.Реквизиты.Найти("Контрагент") = Неопределено
		 ИЛИ Не ЗначениеЗаполнено(Документ.Контрагент) Тогда		
			СтрокаРезультат.СостояниеСтр = НСтр("ru = 'Контрагент не определен'; uk = 'Контрагент не визначен'");
			Продолжить;
		КонецЕсли;
		
		ТекКонтрагент  = Документ.Контрагент;
		РеквизитыКонтрагента = РеквизитыКонтрагентов[Контрагент];
		Если РеквизитыКонтрагента = Неопределено Тогда
			КодПоЕдрпоу = "";
			Если ЗначениеЗаполнено(ТекКонтрагент) Тогда
				КодПоЕдрпоу = СокрЛП(ТекКонтрагент.КодПоЕдрпоу);
			КонецЕсли;
			РеквизитыКонтрагента  = Новый Структура("КодПоЕдрпоу", КодПоЕдрпоу);
			РеквизитыКонтрагентов[ТекКонтрагент] = РеквизитыКонтрагента;
		КонецЕсли;
		
		Если   Не ЗначениеЗаполнено(РеквизитыКонтрагента.КодПоЕдрпоу) Тогда
			СтрокаРезультат.СостояниеСтр = НСтр("ru = 'В карточке контрагента не заполнен Код по ЕДПОУ(ДРФО)'; uk = 'У картці контрагента не заповнений Код за ЄДРПОУ (ДРФО)'");
			Продолжить;
		КонецЕсли;

		Если  НЕ Документ.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			СтрокаРезультат.СостояниеСтр = НСтр("ru = 'Выгрузка документов в валюте не предусмотрена!'; uk = 'Вивантаження документів у валюті не передбачено!'");
			Продолжить;
		КонецЕсли;
		
		// 5. Попробуем запустить FREDO Звіт или выведем причины отказа (не установлен, не используется в этой ИБ)
		// один раз в цикле
		Если ЕстьПодключениеКЗвит1С = Неопределено Тогда
			ЕстьПодключениеКЗвит1С = глМенеджерЗвит1С.ЗапуситьЗвит1С(Ложь, Организация);
		КонецЕсли;
		
		Если Не ЕстьПодключениеКЗвит1С Тогда
			СтрокаРезультат.СостояниеСтр = НСтр("ru = '<Ошибка взаимодействия с ""FREDO ДокМен"">'; uk = '<Помилка взаємодії з ""FREDO ДокМен"">'");
			Продолжить;
		КонецЕсли;		
		
		СтрокаРезультат.ДокументКорректен = Истина;
		
		СтрокаРезультат.ТипДокумента = глМенеджерЗвит1С.ОпределитьТипДокументаПоСсылке(Документ);
		
		СтрокаРезультат.ИдДокумента  					= ПолучитьУникальныйИдентификаторДокумента(Документ);
		СтрокаРезультат._1С_Документ_Контрагент_ЕДРПОУ  = РеквизитыКонтрагента.КодПоЕДРПОУ;
	 	СтрокаРезультат._1С_Документ_Организация_ЕДРПОУ = РеквизитыОрганизации.КодПоЕДРПОУ;
	 	СтрокаРезультат._1С_Документ_Номер              = СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(Документ));
	 	//СтрокаРезультат._1С_Документ_Дата               = Документ.Дата;
		СтрокаРезультат._1С_СуммаДокумента              = Документ.СуммаДокумента;			
		Если ИдКонфигурации = "БП" Тогда
			Выполнить("СтрокаРезультат._1С_СуммаНДСДокумента = УчетНДС.ПолучитьНДСДокумента(Документ);");
		ИначеЕсли ИдКонфигурации = "УТП" Тогда
			Выполнить("СтрокаРезультат._1С_СуммаНДСДокумента = УчетНДС.ПолучитьНДСДокумента(Документ);");
		ИначеЕсли ИдКонфигурации = "УПП" Тогда
			Выполнить("СтрокаРезультат._1С_СуммаНДСДокумента = Ценообразование.ПолучитьНДСДокумента(Документ);");
		ИначеЕсли ИдКонфигурации = "УТ" Тогда
			Выполнить("СтрокаРезультат._1С_СуммаНДСДокумента = НалоговыйУчет.ПолучитьНДСДокумента(Документ);");
		КонецЕсли;
					
	КонецЦикла;
	
	Если ЕстьПодключениеКЗвит1С = Неопределено Тогда
		РезультатФомирования.ОшибкаПодключенияКЗвит1С = Ложь; // Попытка подключения не выполнялась
	Иначе
		РезультатФомирования.ОшибкаПодключенияКЗвит1С = Не ЕстьПодключениеКЗвит1С;
	КонецЕсли;
	
	Возврат РезультатФомирования;
	
КонецФункции

// Функция возвращает состояние для переданного списка документов
// 
Функция ПолучитьСостояниеРегистрацииПервичныхДокументов(МассивДокументов) 
	
	РезультатФомирования = СформироватьТаблицыДляЗапросаСостоянияРегистрации(МассивДокументов);
	
	ОшибкаПодключенияКЗвит1С = РезультатФомирования.ОшибкаПодключенияКЗвит1С;
	ТаблицаРезультат         = РезультатФомирования.ТаблицаРезультат;
	
	ТаблицаРезультат.Колонки.Добавить("Звит1С_ДокументКорректен");               // Булево - ложь в случае когда документ не может быть однозначно определен 
	ТаблицаРезультат.Колонки.Добавить("Звит1С_СовпадаютКлючевыеПоля");           // только исх. Если документ не выгружен то Неопределено, иначе Булево - ложь в случае когда документ выгружен из 1С и в FREDO Звіт различаются ключевые поля
	ТаблицаРезультат.Колонки.Добавить("Звит1С_СуммаДокумента", 					 Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));                        // Сумма по данным FREDO Звіт
	ТаблицаРезультат.Колонки.Добавить("Звит1С_СуммаНДСДокумента", 				 Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));                        // Сумма НДС по данным FREDO Звіт
	ТаблицаРезультат.Колонки.Добавить("Звит1С_Состояние");                       // Если ошибка в 1С, то Звит1С_Состояние = Неопределено, иначе число возвращенное из FREDO Звіт
	
	РезультатФомирования = Новый Структура("ОшибкаПодключенияКЗвит1С, ТаблицаРезультат", ОшибкаПодключенияКЗвит1С, ТаблицаРезультат);

	Если ОшибкаПодключенияКЗвит1С ИЛИ ТаблицаРезультат.Найти(Истина, "ДокументКорректен") = Неопределено Тогда
		// Если к звиту не удалось подключиться или все документы некорректны
		Возврат РезультатФомирования;
	КонецЕсли;
	
	Для каждого СтрокаТаблицыРезультат Из ТаблицаРезультат Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыРезультат.СостояниеСтр) Тогда
			СтрокаТаблицыРезультат.Звит1С_ДокументКорректен = Истина;
			СтрокаТаблицыРезультат.Звит1С_СовпадаютКлючевыеПоля = Истина;
			СтрокаТаблицыРезультат.Звит1С_Состояние = -1;
			СтрокаТаблицыРезультат.СостояниеСтр = ПредставлениеСостоянийДокументов[-1];
		КонецЕсли;	
	КонецЦикла;
	
	КопияТаблицы = ТаблицаРезультат.Скопировать(, "_1С_Документ_Дата");
	КопияТаблицы.Сортировать("_1С_Документ_Дата");
	НачДатаЗапроса = НачПериода;
	КонДатаЗапроса = КонецДня(НачДатаЗапроса);
	Если КопияТаблицы.Количество() > 0 Тогда
		НачДатаЗапроса = НачалоДня(КопияТаблицы[0]._1С_Документ_Дата);
		КонДатаЗапроса = КонецДня(КопияТаблицы[КопияТаблицы.Количество()-1]._1С_Документ_Дата);
	КонецЕсли;
	
	ОбработатьТипДокумента(ТаблицаРезультат, 10103, НачДатаЗапроса, КонДатаЗапроса);
	ОбработатьТипДокумента(ТаблицаРезультат, 10104, НачДатаЗапроса, КонДатаЗапроса);
	ОбработатьТипДокумента(ТаблицаРезультат, 10105, НачДатаЗапроса, КонДатаЗапроса);
	
	// 3. Обработка запроса
	Возврат РезультатФомирования;
	
КонецФункции

Процедура ОбработатьТипДокумента(ТаблицаРезультат, docType, НачДатаЗапроса, КонДатаЗапроса)

	ТаблицаДокЗвит1С = глМенеджерЗвит1С.Компонента.GetPrimaryReestr(docType, 1, НачДатаЗапроса, КонДатаЗапроса);
	Если ТаблицаДокЗвит1С = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДокЗвит1С.First("MAIN") Тогда
		ВнестиДанныеЗвит1С(ТаблицаДокЗвит1С, ТаблицаРезультат);
		Пока ТаблицаДокЗвит1С.Next("MAIN") Цикл
			ВнестиДанныеЗвит1С(ТаблицаДокЗвит1С, ТаблицаРезультат);
		КонецЦикла;
	КонецЕсли;	

КонецПроцедуры

Процедура ВнестиДанныеЗвит1С(ТаблицаДокЗвит1С, ТаблицаРезультат)
	
	СтрокиТаблицыРезультатов = ТаблицаРезультат.НайтиСтроки(Новый Структура("ИДДокумента",  ТаблицаДокЗвит1С.GetValue("MAIN", "DOC_ID")));
	
	Если СтрокиТаблицыРезультатов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаРезультат Из СтрокиТаблицыРезультатов Цикл
		
		Если СтрокаРезультат.ДокументКорректен = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРезультат.Звит1С_Состояние = ТаблицаДокЗвит1С.GetValue("MAIN", "STATUS");		
		СтрокаРезультат.СостояниеСтр 	 = ПредставлениеСостоянийДокументов[СтрокаРезультат.Звит1С_Состояние];			
		
		СтрокаРезультат.Звит1С_ДокументКорректен = (СтрокаРезультат.Звит1С_Состояние > -2);
		Если Не СтрокаРезультат.Звит1С_ДокументКорректен Тогда
			Продолжить; // Документ не может быть идентифицирован. Продолжнение бессмысленно
		КонецЕсли;
		
		СтрокаРезультат.Звит1С_СуммаНДСДокумента = ТаблицаДокЗвит1С.GetValue("MAIN", "Vatsum");		
		СтрокаРезультат.Звит1С_СуммаДокумента = ТаблицаДокЗвит1С.GetValue("MAIN", "DOCSUM");		
		
		// Дополнительно проверим ключевые поля исходящих документов
		Если СтрокаРезультат.Звит1С_Состояние > -1 Тогда	// Документ выгружен	
			ДанныеДокументаЗвит1С = Новый Структура();
			ДанныеДокументаЗвит1С.Вставить("Контрагент_ЕДРПОУ",  ТаблицаДокЗвит1С.GetValue("MAIN", "Partner_EDRPOU"));
			ДанныеДокументаЗвит1С.Вставить("Организация_ЕДРПОУ", ТаблицаДокЗвит1С.GetValue("MAIN", "FIRM_EDRPOU"));
			ДанныеДокументаЗвит1С.Вставить("Номер",              ТаблицаДокЗвит1С.GetValue("MAIN", "DOC_NUM"));
			ДанныеДокументаЗвит1С.Вставить("Дата",               ТаблицаДокЗвит1С.GetValue("MAIN", "DOC_DATE"));			
			
			ТекстОшибки = "";
			Если СОКРЛП(СтрокаРезультат._1С_Документ_Контрагент_ЕДРПОУ) <> СОКРЛП(ДанныеДокументаЗвит1С.Контрагент_ЕДРПОУ) Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru = 'Код контрагента'; uk = 'Код контрагента'")+", ";
			КонецЕсли;
			Если СОКРЛП(СтрокаРезультат._1С_Документ_Организация_ЕДРПОУ) <> СОКРЛП(ДанныеДокументаЗвит1С.Организация_ЕДРПОУ) Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru = 'ЕДРПОУ организации'; uk = 'ЄДРПОУ організації'")+", ";
			КонецЕсли;
			Если СОКРЛП(СтрокаРезультат._1С_Документ_Номер) <> СОКРЛП(ДанныеДокументаЗвит1С.Номер) Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru = 'номер'; uk = 'номер'")+", ";
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеДокументаЗвит1С.Дата)
				И НачалоДня(СтрокаРезультат._1С_Документ_Дата) <> НачалоДня(ДанныеДокументаЗвит1С.Дата) Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru = 'дата'; uk = 'дата'")+", ";
			КонецЕсли;
			Если СтрокаРезультат._1С_СуммаДокумента <> СтрокаРезультат.Звит1С_СуммаДокумента Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru = 'сумма документа'; uk = 'сума документа'")+", ";
			КонецЕсли;
			Если СтрокаРезультат._1С_СуммаНДСДокумента <> СтрокаРезультат.Звит1С_СуммаНДСДокумента Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru = 'сумма НДС документа'; uk = 'сума ПДВ документа'")+", ";
			КонецЕсли;
			
			Если ПустаяСтрока(ТекстОшибки) Тогда
				СтрокаРезультат.Звит1С_СовпадаютКлючевыеПоля = Истина;
			Иначе
				СтрокаРезультат.Звит1С_СовпадаютКлючевыеПоля = Ложь;
				СтрокаРезультат.СостояниеСтр = "" + СтрокаРезультат.СостояниеСтр + НСтр("ru = '. Не совпадают ключевые поля: '; uk = '. Не збігаються ключові поля: '")+
				                               Лев(ТекстОшибки, СтрДлина(ТекстОшибки) - СтрДлина(", "));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
		
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументов(СтрокиТаблицыДокументов = Неопределено, ПроверитьСостояниеРегистрации = Истина)

	Если СтрокиТаблицыДокументов = Неопределено Тогда
		СтрокиТаблицыДокументов = ТаблицаДокументов;
		МассивДокументов = ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов = Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ТЧДок.СуммаНДС) КАК СуммаНДС,
	|	ТЧДок.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТЧДок
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК ТЧДок
	|ГДЕ
	|	ТЧДок.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧДок.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ТЧДок.СуммаНДС),
	|	ТЧДок.Ссылка
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК ТЧДок
	|ГДЕ
	|	ТЧДок.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧДок.Ссылка
	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ТЧДок.СуммаНДС),
	|	ТЧДок.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК ТЧДок
	|ГДЕ
	|	ТЧДок.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧДок.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ТЧДок.СуммаНДС),
	|	ТЧДок.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТЧДок
	|ГДЕ
	|	ТЧДок.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧДок.Ссылка
	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ  РАЗРЕШЕННЫЕ
	|	ПервичныйДокументНДС.Ссылка,
	|	СУММА(ПервичныйДокументНДС.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ПервичныйДокументНДС
	|ИЗ
	|	ТЧДок КАК ПервичныйДокументНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ПервичныйДокументНДС.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервичныйДокумент.Организация КАК Организация,
	|	ПервичныйДокумент.Ссылка КАК Документ,
	|	ПервичныйДокумент.Номер КАК Номер,
	|	ПервичныйДокумент.Дата КАК Дата,
	|	ПервичныйДокумент.Контрагент КАК Контрагент,
	|	ПервичныйДокумент.Контрагент.КодПоЕДРПОУ КАК КонтрагентКод,
	|	ПервичныйДокумент.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПервичныйДокумент.ВалютаДокумента КАК ВалютаДокумента,
	|	ПервичныйДокумент.СуммаДокумента КАК СуммаДокумента,
	|	ПервичныйДокументНДС.СуммаНДС КАК СуммаНДСДокумента,
	|	ПервичныйДокумент.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК ПервичныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервичныйДокументНДС КАК ПервичныйДокументНДС
	|		ПО (ПервичныйДокументНДС.Ссылка = ПервичныйДокумент.Ссылка)
	|ГДЕ
	|	ПервичныйДокумент.Ссылка В(&МассивДокументов) 	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПервичныйДокумент.Организация КАК Организация,
	|	ПервичныйДокумент.Ссылка КАК Документ,
	|	ПервичныйДокумент.Номер КАК Номер,
	|	ПервичныйДокумент.Дата КАК Дата,
	|	ПервичныйДокумент.Контрагент КАК Контрагент,
	|	ПервичныйДокумент.Контрагент.КодПоЕДРПОУ КАК КонтрагентКод,
	|	ПервичныйДокумент.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПервичныйДокумент.ВалютаДокумента КАК ВалютаДокумента,
	|	ПервичныйДокумент.СуммаДокумента КАК СуммаДокумента,
	|	ПервичныйДокументНДС.СуммаНДС КАК СуммаНДСДокумента,
	|	ПервичныйДокумент.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ПервичныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервичныйДокументНДС КАК ПервичныйДокументНДС
	|		ПО (ПервичныйДокументНДС.Ссылка = ПервичныйДокумент.Ссылка)
	|ГДЕ
	|	ПервичныйДокумент.Ссылка В(&МассивДокументов) 	
	|";

		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",  МассивДокументов);
	РеквизитыДокументов = Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению = Новый Массив();
	МассивСтрокКПроверке = Новый Массив();
	
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента = РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ, "Документ");
		Если РеквизитыДокумента = Неопределено Тогда
			// Документ удален, либо RLS закрыл к нему доступ
			МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов, РеквизитыДокумента); 
		
		СтрокаТаблицыДокументов.Номер 		 = ОбщегоНазначения.ПолучитьНомерНаПечать(СтрокаТаблицыДокументов.Документ);
		СтрокаТаблицыДокументов.ТипДокумента = глМенеджерЗвит1С.ОпределитьТипДокументаПоСсылке(СтрокаТаблицыДокументов.Документ);
		
		МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);

	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;

	ЭлементыФормы.ТаблицаДокументов.ОбновитьСтроки(); // Отобразим данные перед ожиданием подключения к FREDO Звіт
	
	ПроверитьСостояниеРегистрации(МассивСтрокКПроверке, ПроверитьСостояниеРегистрации);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


// Фунция используется для добавления документов из вне
//
Функция ДобавитьПервичныйДокумент(ДокументСсылка, ФормаДокумента = Неопределено) Экспорт
	
	ОрганизаяВДокументе = ДокументСсылка.Организация;
	
	Если Не ЗначениеЗаполнено(ОрганизаяВДокументе) Тогда
		ТекстПредупреждения = НСтр("ru = 'В документе не указана организация'; uk = 'У документі не вказана організація'");
		Предупреждение(ТекстПредупреждения);
		Если ФормаДокумента <> Неопределено Тогда
			ФормаДокумента.Активизировать();
		КонецЕсли;
		Возврат Ложь;		
		
	ИначеЕсли ОрганизаяВДокументе <> Организация Тогда
		
		Если ТаблицаДокументов.Количество() <> 0 Тогда
			ТекстВопроса = НСтр("ru = 'Организация в документе не соответсвует организации 
                                 |указанной в обработке. Табличная часть будет очищена. 
                                 |
                                 |Продолжить?'; uk = 'Організація в документі не відповідає організації
                                 |зазначеної в обробці. Таблична частина буде очищена.
                                 |
                                 |Продовжити?'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
	        Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Если ФормаДокумента <> Неопределено Тогда
					ФормаДокумента.Активизировать();
				КонецЕсли;
				Возврат Ложь;
			КонецЕсли; 
			ТаблицаДокументов.Очистить();
		КонецЕсли;
		
		Организация = ОрганизаяВДокументе;
		
	КонецЕсли;
	
	ТаблицаДокументовОбработкаВыбора(ЭлементыФормы.ТаблицаДокументов, ДокументСсылка, Истина);
	
	Если ФормаДокумента <> Неопределено Тогда
		// Изменение данных должно производиться из открытой формы обрабоки 
		Если ФормаДокумента.Открыта() Тогда
			ФормаДокумента.Закрыть();
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции


Процедура ПриОткрытии()

	НачПериода  = ТекущаяДата();
	КонПериода  = ТекущаяДата();	
	Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяОрганизация");	
	
	РегламентированнаяОтчетность.ДобавитьНадписьВнешнийОтчет(ЭтаФорма);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ


Процедура КоманднаяПанельТаблицаДокументовЗаполнить(Кнопка)
	
	Если Не ЗначениеЗаполнено(НачПериода) ИЛИ Не ЗначениеЗаполнено(КонПериода) Тогда
		ТекстСообщения = НСтр("ru = 'Не определен период выборки данных'; uk = 'Не визначений період вибірки даних'");
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана организация'; uk = 'Не вказана організація'");
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация.ДатаНачалаИспользованияЗвит1С) Тогда
		ТекстСообщения = НСтр("ru = 'Выгрузка в систему ""FREDO ДокМен"" невозможна, ""FREDO ДокМен"" не используется для организации'; uk = 'Вивантаження в систему ""FREDO ДокМен"" неможливо, ""FREDO ДокМен"" не використовується для організації'")
		                     +" """+Строка(Организация)+"""."+Символы.ПС+НСтр("ru = 'Не указана дата начала использования ""FREDO ДокМен"" в карточке организации'; uk = 'Не вказана дата початку використання ""FREDO ДокМен"" в картці організації'");
		Предупреждение(ТекстСообщения);	
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДокументов.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли; 
		ТаблицаДокументов.Очистить();
	КонецЕсли;

	Если НачПериода < Организация.ДатаНачалаИспользованияЗвит1С Тогда
		ТекстВопроса = (НСтр("ru = 'Дата начала выборки документов меньше даты начала использования ""FREDO ДокМен"" для организации """+Строка(Организация)+"""
                             |Продолжить?'; uk = 'Дата початку вибірки документів менше дати початку використання ""FREDO ДокМен"" в організації """+Строка(Организация)+"""
                             |Продовжити?'"));	
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			 Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		СчетНаОплатуПокупателю.Дата КАК Дата,
		|		СчетНаОплатуПокупателю.Ссылка КАК Ссылка,
		|		СчетНаОплатуПокупателю.Контрагент КАК Контрагент,
		|		СчетНаОплатуПокупателю.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		СчетНаОплатуПокупателю.Ответственный КАК Ответственный
		|	ИЗ
		|		Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|	ГДЕ
		|		  СчетНаОплатуПокупателю.Организация = &Организация
		|		И СчетНаОплатуПокупателю.Дата МЕЖДУ &НачПериода И &КонПериода 
		|		И НЕ СчетНаОплатуПокупателю.ПометкаУдаления
		|		И СчетНаОплатуПокупателю.Контрагент.ИспользоватьЭДО1СЗвит
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Дата КАК Дата,
		|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|		РеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|		РеализацияТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		РеализацияТоваровУслуг.Ответственный КАК Ответственный
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|	ГДЕ
		|		  РеализацияТоваровУслуг.Организация = &Организация
		|		И РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода 
		|		И НЕ РеализацияТоваровУслуг.ПометкаУдаления
		|		И РеализацияТоваровУслуг.Контрагент.ИспользоватьЭДО1СЗвит
		|	) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.ДоговорКонтрагента,
		|	ВложенныйЗапрос.Ответственный}
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Дата,
		|	ВложенныйЗапрос.Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса);

	ПостроительЗапроса.ЗаполнитьНастройки();
	
	ПостроительЗапроса.Параметры.Вставить("НачПериода",  НачалоДня(НачПериода));
	ПостроительЗапроса.Параметры.Вставить("КонПериода",  КонецДня(КонПериода));
	ПостроительЗапроса.Параметры.Вставить("Организация", Организация);
	
	Отбор = ПостроительЗапроса.Отбор;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ЭлементОтбора = Отбор.Добавить("Контрагент");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = Контрагент;
		ЭлементОтбора.ВидСравнения  = ?(Контрагент.ЭтоГруппа, ВидСравнения.ВСпискеПоИерархии, ВидСравнения.Равно);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ЭлементОтбора = Отбор.Добавить("ДоговорКонтрагента");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = ДоговорКонтрагента;
		ЭлементОтбора.ВидСравнения  = ?(ДоговорКонтрагента.ЭтоГруппа, ВидСравнения.ВСпискеПоИерархии, ВидСравнения.Равно);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ответственный) Тогда
		ЭлементОтбора = Отбор.Добавить("Ответственный");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = Ответственный;
		ЭлементОтбора.ВидСравнения  = ?(Ответственный.ЭтоГруппа, ВидСравнения.ВСпискеПоИерархии, ВидСравнения.Равно);
	КонецЕсли;
	
	ПостроительЗапроса.Выполнить();
	ПодобранныеДокументы = ПостроительЗапроса.Результат.Выгрузить();
	
	Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
		
		Если       ЗначениеЗаполнено(ТипДокумента)
			 И НЕ ТипДокумента = глМенеджерЗвит1С.ОпределитьТипДокументаПоСсылке(ПодобранныйДокумент.Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДокументов.Добавить();
		НоваяСтрока.Документ = ПодобранныйДокумент.Документ;
	КонецЦикла; 
	
	ЗаполнитьРеквизитыДокументов();
		
КонецПроцедуры


Процедура КоманднаяПанельТаблицаДокументовДействиеПодбор(Кнопка)
	
	ОткрытьФормуВыбораПервичногоДокумента(Истина);
	
КонецПроцедуры


Процедура КоманднаяПанельТаблицаДокументовОбновить(Кнопка)
	
	ЗаполнитьРеквизитыДокументов();
	
КонецПроцедуры

Процедура КоманднаяПанельДействийВыполнить(Кнопка)
	
	МассивСтрокДокументов = ТаблицаДокументов.НайтиСтроки(Новый Структура("Пометка_Выполнить", Истина));
	
	Если МассивСтрокДокументов.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбраны документы для '; uk = 'Не вибрані документи для '");
		ТекстПредупреждения = ТекстПредупреждения+НСтр("ru = 'выгрузки'; uk = 'вивантаження'");
		
		// Обращаем внимане на колонку "Пометка" 
		Колонка = ЭлементыФормы.ТаблицаДокументов.Колонки.Пометка_Выполнить;
		ЭлементыФормы.ТаблицаДокументов.ТекущаяКолонка = Колонка;
		СтарыйЦвет = Колонка.ЦветФонаШапки;	
		Колонка.ЦветФонаШапки = ЦветаСтиля.ЦветОсобогоТекста;
		
		Предупреждение(ТекстПредупреждения);
		
		Колонка.ЦветФонаШапки = СтарыйЦвет;
		Возврат;
		
	КонецЕсли;

	// Обновим состояние регистрации в FREDO Звіт. Обеспечим запущенную 
	// сессию FREDO Звіт для дальнейшей работы (Когда это исходящие налоговые документы)
	Если Не ПроверитьСостояниеРегистрации(, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	БылиОшибки = Ложь;
	БылиФатальныеОшибки = Ложь;
	ДополнительныйТекстСообщения = "";
		
	Для каждого СтрокаТаблицыДокументов Из МассивСтрокДокументов Цикл
		
		ОбработкаПрерыванияПользователя();
		
		ДокументСсылка = СтрокаТаблицыДокументов.Документ;
		
		Если НЕ СтрокаТаблицыДокументов.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			РезультатВыгрузки = глМенеджерЗвит1С.ВыгрузитьПервичныйДокументВЗвит1С(ДокументСсылка);
		Исключение	
			РезультатВыгрузки = Ложь;
		КонецПопытки;
		
		Если Не РезультатВыгрузки.ВыгрузкаПрошлаУспешно Тогда
			БылиОшибки = Истина;			
			Если РезультатВыгрузки.ПроизошлаФатальнаяОшибка Тогда
				БылиФатальныеОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатВыгрузки.Описание) Тогда
			Если РезультатВыгрузки.ВыгрузкаПрошлаУспешно Тогда
				СтатусСообщенияПриВыгрузке = СтатусСообщения.Информация;
			ИначеЕсли РезультатВыгрузки.ПроизошлаФатальнаяОшибка Тогда
				СтатусСообщенияПриВыгрузке = СтатусСообщения.ОченьВажное;
			Иначе
				СтатусСообщенияПриВыгрузке = СтатусСообщения.Важное;					
			КонецЕсли;
			
			НомерСтроки = ТаблицаДокументов.Индекс(СтрокаТаблицыДокументов)+1;
			Сообщить("Строка №"+Строка(НомерСтроки)+" "+Строка(ДокументСсылка)+" - "+РезультатВыгрузки.Описание, СтатусСообщенияПриВыгрузке);
		КонецЕсли;
		
		Если БылиФатальныеОшибки Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	ПроверитьСостояниеРегистрации(МассивСтрокДокументов); // Обновляем статус и пометки
		
	Если БылиФатальныеОшибки Тогда
		ТекстСообщения = НСтр("ru = 'Выгрузка прервана с ошибками'; uk = 'Вивантаження перервано з помилками'");
	ИначеЕсли БылиОшибки Тогда
		ТекстСообщения = НСтр("ru = 'Выгрузка завершена с ошибками'; uk = 'Вивантаження завершено з помилками'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Выгрузка успешно завершена'; uk = 'Вивантаження успішно завершено'");
	КонецЕсли;	
	
	Если Не ПустаяСтрока(ДополнительныйТекстСообщения) Тогда
		ТекстСообщения = ТекстСообщения+Символы.ПС+Символы.ПС+ДополнительныйТекстСообщения;
	КонецЕсли;
	
	Предупреждение(ТекстСообщения);		
	
КонецПроцедуры


Процедура КоманднаяПанельТаблицаДокументовОткрытьВЗвит1С(Кнопка)
	
	// кнопка доступна только в случае если документ выгружен
	ТекущаяСтрока = ЭлементыФормы.ТаблицаДокументов.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	глМенеджерЗвит1С.ОткрытьДокументВЗвит1С(ТекущаяСтрока.Документ);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ


Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	мНастройкаПериода.УстановитьПериод(НачПериода, КонПериода);

	Если мНастройкаПериода.Редактировать() Тогда

		НачПериода = мНастройкаПериода.ПолучитьДатуНачала();
		КонПериода = мНастройкаПериода.ПолучитьДатуОкончания();

	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ТаблицаДокументов.Количество() > 0 Тогда
		
		Ответ = Вопрос(НСтр("ru = 'При изменении Организации табличная часть будет очищена. Продолжить?'; uk = 'При зміні Організації таблична частина буде очищена. Продовжити?'"),РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.ОК,НСтр("ru = 'Изменение Организации'; uk = 'Зміна Організації'"));	
		Если НЕ Ответ = КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаДокументов.Очистить();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.Организация <> Организация Тогда
		ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.Владелец <> Контрагент Тогда
		ДоговорКонтрагента = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Организация) ИЛИ Не ЗначениеЗаполнено(Контрагент) Тогда
		Предупреждение(НСтр("ru = 'Не указана организация или контрагент'; uk = 'Не вказана організація або контрагент'"));
		Возврат;
	КонецЕсли;
	
	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,Элемент, ЭтаФорма);

	ФормаВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	ФормаВыбора.СправочникСписок.Отбор.Организация.Значение                            = Организация;
	ФормаВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
	ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;


	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ДоговорКонтрагента;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Открыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧИВАЮЩИЕ РАБОТУ С ТАБЛИЦЕЙ ДОКУМЕНТОВ

Процедура ТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Документ = ВыбраннаяСтрока.Документ;
	Форма  = Документ.ПолучитьФорму();
	Если Форма.Открыта() Тогда
		ТекстПредупреждения = НСтр("ru = 'Данный документ уже открыт, для модификации данных первичных
                                    |документов рекомендуется открывать документы из данной обработки.
                                    |Для продолжения закройте документ.'; uk = 'Даний документ вже відкрито, для модифікації даних первинних
                                    |документів рекомендується відкривати документи з даної обробки.
                                    |Для продовження закрийте документ.'");
		Предупреждение(ТекстПредупреждения);
		Форма.Активизировать();
		Возврат;
	КонецЕсли;
	
	Форма.ОткрытьМодально();
	
	СтрокиТаблицыДокументов = Новый Массив;
	СтрокиТаблицыДокументов.Добавить(ВыбраннаяСтрока);
	
	ЗаполнитьРеквизитыДокументов(СтрокиТаблицыДокументов);
	
КонецПроцедуры

Процедура ТаблицаДокументовПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	ОткрытьФормуВыбораПервичногоДокумента();
			
КонецПроцедуры

Процедура ТаблицаДокументовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		МассивДокументов = ВыбранноеЗначение;
	Иначе
		МассивДокументов = Новый Массив(1);
		МассивДокументов[0] = ВыбранноеЗначение;
	КонецЕсли;
	
	ДобавленныеСтрокиТаблицыДокументов = Новый Массив;
	СтрокаТаблицыДокументов = Неопределено;
	Для каждого Документ Из МассивДокументов Цикл
		
		Если ЗначениеЗаполнено(ТипДокумента)
			И НЕ глМенеджерЗвит1С.ОпределитьТипДокументаПоСсылке(Документ) = ТипДокумента Тогда
			Сообщить(Нстр("ru = 'Документ не соответствует типу выгружаемых документов'; uk = 'Документ не відповідає типу вивантажуваних документів'"));
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыДокументов = ТаблицаДокументов.Найти(Документ, "Документ");
		Если СтрокаТаблицыДокументов = Неопределено Тогда
			СтрокаТаблицыДокументов = ТаблицаДокументов.Добавить();
			СтрокаТаблицыДокументов.Документ = Документ;
		КонецЕсли;
		
		ДобавленныеСтрокиТаблицыДокументов.Добавить(СтрокаТаблицыДокументов);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаТаблицыДокументов) Тогда
		ЭлементыФормы.ТаблицаДокументов.ТекущаяСтрока = СтрокаТаблицыДокументов;
	КонецЕсли;
	
	ЗаполнитьРеквизитыДокументов(ДобавленныеСтрокиТаблицыДокументов);
	
КонецПроцедуры

Процедура ТаблицаДокументовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		ОформлениеСтроки.Ячейки.НомерСтроки.УстановитьТекст(Строка(ТаблицаДокументов.Индекс(ДанныеСтроки)+1));
		ОформлениеСтроки.Ячейки.ТипДокумента.УстановитьТекст(ДанныеСтроки.ТипДокумента + " (" +ТипЗнч(ДанныеСтроки.Документ)+")");
		
		Если ДанныеСтроки.Звит1С_Состояние > -1 Тогда // Документ выгружен в Звит
			Если Не ДанныеСтроки.Звит1С_СовпадаютКлючевыеПоля Тогда
				ОформлениеСтроки.Ячейки.СостояниеСтр.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
			КонецЕсли;
			Если ДанныеСтроки.Звит1С_СуммаДокумента <> ДанныеСтроки.СуммаДокумента Тогда
				ОформлениеСтроки.Ячейки.СуммаДокумента.ЦветТекста     = ЦветаСтиля.ТекстПредупреждающейНадписи;
			КонецЕсли;
			Если ДанныеСтроки.Звит1С_СуммаНДСДокумента <> ДанныеСтроки.СуммаНДСДокумента Тогда
				ОформлениеСтроки.Ячейки.СуммаНДСДокумента.ЦветТекста  = ЦветаСтиля.ТекстПредупреждающейНадписи;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьИмяДокументаПоВидуПервичногоДокументаЗвит1С()

	СписокТиповДокументов = Новый СписокЗначений;
	
	Если ТипДокумента = "Рахунок" ИЛИ НЕ ЗначениеЗаполнено(ТипДокумента) Тогда
		СписокТиповДокументов.Добавить("СчетНаОплатуПокупателю", Метаданные.Документы.СчетНаОплатуПокупателю.Представление());
	КонецЕсли;
	Если ТипДокумента = "Акт" ИЛИ ТипДокумента = "Накладна" ИЛИ НЕ ЗначениеЗаполнено(ТипДокумента) Тогда
		СписокТиповДокументов.Добавить("РеализацияТоваровУслуг", Метаданные.Документы.РеализацияТоваровУслуг.Представление());
	КонецЕсли;	

	Если СписокТиповДокументов.Количество() = 0 Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли СписокТиповДокументов.Количество() = 1 Тогда
		
		Возврат СписокТиповДокументов[0].Значение;	
		
	Иначе		
		
		ВыбранноеЗначение = СписокТиповДокументов.ВыбратьЭлемент(НСтр("ru = 'Вид документа'; uk = 'Вид документу'"));
		Если ВыбранноеЗначение = Неопределено Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат ВыбранноеЗначение.Значение;			
		
	КонецЕсли;
	
КонецФункции

Процедура ТипДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	Отказ = Истина;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ОСНОВНОЙ ПРОГРАММЫ

мНастройкаПериода = Новый НастройкаПериода;
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

ЭлементыФормы.ТипДокумента.СписокВыбора.Добавить("Рахунок");
ЭлементыФормы.ТипДокумента.СписокВыбора.Добавить("Акт");
ЭлементыФормы.ТипДокумента.СписокВыбора.Добавить("Накладна");
ТипДокумента = ЭлементыФормы.ТипДокумента.СписокВыбора[0].Значение;

ПредставлениеСостоянийДокументов = Новый Соответствие;
ПредставлениеСостоянийДокументов.Вставить(-1, НСтр("ru = 'Не выгружен в ""FREDO ДокМен""'; uk = 'Не вивантажен в ""FREDO ДокМен""'"));
ПредставлениеСостоянийДокументов.Вставить( 0, НСтр("ru = 'Выгружен в ""FREDO ДокМен""'; uk = 'Вивантажен в ""FREDO ДокМен""'"));
ПредставлениеСостоянийДокументов.Вставить( 5, НСтр("ru = 'Отправлено контрагенту'; uk = 'Відправлено контрагенту'"));		
ПредставлениеСостоянийДокументов.Вставить( 6, НСтр("ru = 'Доставлено контрагенту'; uk = 'Доставлено контрагенту'"));		
ПредставлениеСостоянийДокументов.Вставить( 7, НСтр("ru = 'Утверждено контрагентом'; uk = 'Затверджено контрагентом'"));		
ПредставлениеСостоянийДокументов.Вставить( 8, НСтр("ru = 'Получено контрагентом'; uk = 'Отриманий контрагентом'"));		
ПредставлениеСостоянийДокументов.Вставить( 9, НСтр("ru = 'Отклонено контрагентом'; uk = 'Відхилено контрагентом'"));		

ИдКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();