Перем мНастройкаПериода;                    
Перем мВалютаРегламентированногоУчета;
Перем ИдКонфигурации;

Процедура КнопкаЗагрузитьНажатие(Кнопка)
	
	// получим данные по номенклатуре контрагентов
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Контрагент", ДокументыЗвит1С.ВыгрузитьКолонку("Контрагент"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураКонтрагентов.Контрагент,
	               |	НоменклатураКонтрагентов.Номенклатура,
	               |//НеБП	НоменклатураКонтрагентов.ХарактеристикаНоменклатуры,
	               |	НоменклатураКонтрагентов.КодНоменклатурыКонтрагента,
	               |	НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента,
				   |	НоменклатураКонтрагентов.НаименованиеНоменклатурыКонтрагента
	               |ИЗ
	               |	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	               |ГДЕ
	               |	НоменклатураКонтрагентов.Контрагент В(&Контрагент)";
				   
	Если НЕ ИдКонфигурации = "БП" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//НеБП", "");	
	КонецЕсли;				   
				   
	ДанныеПоНоменклатуреКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка Из ДокументыЗвит1С Цикл
	
		Если НЕ Строка.Флаг Тогда                      
			Продолжить;
		КонецЕсли;	
		
		Если    Строка.ТипДокумента = "Рахунок"
			ИЛИ Строка.ТипДокумента = "Акт"
			ИЛИ Строка.ТипДокумента = "Накладна" Тогда
			
			Если Не ЗначениеЗаполнено(Строка.Ссылка) Тогда
				
				Если    Строка.ТипДокумента = "Рахунок" Тогда
					ПервДок = Документы["СчетНаОплатуПоставщика"].СоздатьДокумент();	
				ИначеЕсли Строка.ТипДокумента = "Акт"
					  ИЛИ Строка.ТипДокумента = "Накладна" Тогда
					ПервДок = Документы["ПоступлениеТоваровУслуг"].СоздатьДокумент();
				КонецЕсли;
				
			Иначе
				
				ПервДок = Строка.Ссылка.ПолучитьОбъект();
				ПервДок.Товары.Очистить();
				ПервДок.Услуги.Очистить();
				ПервДок.ВозвратнаяТара.Очистить();
				Если ИдКонфигурации <> "УТ" Тогда
					ПервДок.Оборудование.Очистить();
					Если ИдКонфигурации <> "УПП"  И Строка.ТипДокумента = "Рахунок" Тогда
						ПервДок.ОбъектыСтроительства.Очистить();
					КонецЕсли;
					Если Строка.ТипДокумента = "Рахунок" Тогда
						ПервДок.НематериальныеАктивы.Очистить();
					ИначеЕсли Строка.ТипДокумента = "Акт"
						  ИЛИ Строка.ТипДокумента = "Накладна" Тогда
						ПервДок.БланкиСтрогогоУчета.Очистить();
						ПервДок.ОбъектыСтроительства.Очистить();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если  ИдКонфигурации = "БП"  Тогда
			Выполнить("ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ПервДок, глЗначениеПеременной(""глТекущийПользователь""), мВалютаРегламентированногоУчета)");
			Выполнить("ЗаполнениеДокументов.ЗаполнитьОбязательныеРеквизитыШапкиНовогоДокумента(ЭтотОбъект, глЗначениеПеременной(""глТекущийПользователь""))");
		ИначеЕсли ИдКонфигурации = "УТП" Тогда
			Выполнить("ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ПервДок, глЗначениеПеременной(""глТекущийПользователь""), мВалютаРегламентированногоУчета, ""Продажа"")");	
			Выполнить("ОбщегоНазначения.ЗаполнитьОбязательныеРеквизитыШапкиНовогоДокумента(ЭтотОбъект, глЗначениеПеременной(""глТекущийПользователь""));");
		ИначеЕсли ИдКонфигурации = "УТ" Тогда
			Выполнить("ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ПервДок, глЗначениеПеременной(""глТекущийПользователь""), мВалютаРегламентированногоУчета)");
		ИначеЕсли ИдКонфигурации = "УПП" Тогда
			Выполнить("ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ПервДок)");	
		КонецЕсли;
		
		Если    Строка.ТипДокумента = "Акт"
			ИЛИ Строка.ТипДокумента = "Накладна" Тогда
			
			Если ИдКонфигурации = "БП" Тогда
				ПервДок.ЗаполнитьСчетаУчетаРасчетов();
			ИначеЕсли  ИдКонфигурации = "УТП" Тогда
				СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(ПервДок.Организация, ПервДок.Контрагент, ПервДок.ДоговорКонтрагента);
				ПервДок.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
				ПервДок.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
				Если ПервДок.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
					ПервДок.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПриБартере;
					ПервДок.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПриБартере;
				КонецЕсли;	
				ПервДок.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТары;
				ПервДок.СчетУчетаРасчетовПоТареПоАвансам = СчетаУчета.СчетАвансовПоТаре;			
				ПервДок.СчетУчетаНДС 				= СчетаУчета.СчетУчетаНДСПриобретений;
				ПервДок.СчетУчетаНДСПодтвержденный  = СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный;
			ИначеЕсли  ИдКонфигурации = "УПП" Тогда
			    ЗаполнитьЗначенияСвойств(ПервДок, ПервДок.ЗаполнитьСтруктуруСчетовУчетаШапки());
			КонецЕсли;
		КонецЕсли;
		
		ПервДок.Дата 		= НачалоДня(РабочаяДата);
		Если СоздаватьДокументыДатойВыпискиКонтрагентом = Истина Тогда
			ПервДок.Дата    = НачалоДня(Строка.ДатаДокумента);
		КонецЕсли;
		
		ПервДок.Организация = Строка.Организация;
		ПервДок.Контрагент  = Строка.Контрагент;
		
		Если  (ИдКонфигурации = "БП" ИЛИ ИдКонфигурации = "УТП") 
			И (Строка.ТипДокумента = "Рахунок") Тогда
			
			ПервДок.ВидОперации = Перечисления.ВидыОперацийСчетНаОплатуПоставщика.ПокупкаКомиссия;
			
		ИначеЕсли НЕ ИдКонфигурации = "УТ"
			      И (Строка.ТипДокумента = "Акт" ИЛИ Строка.ТипДокумента = "Накладна") Тогда
				  
			ПервДок.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
				  
		КонецЕсли;
		
		ПервДок.НомерВходящегоДокумента = Строка.Номер;
		ПервДок.ДатаВходящегоДокумента  = Строка.ДатаДокумента;
		
		ПервДок.Звит1С_DOC_ID   = Строка.DOC_ID;
				
		// договор контрагента
		ДоговорКонтрагентаДата  = Строка.ДоговорДата;
		ДоговорКонтрагентаНомер = Строка.ДоговорНомер;
		
		Если  ЗначениеЗаполнено(ПервДок.Контрагент)
			И ЗначениеЗаполнено(ДоговорКонтрагентаДата)
			И ЗначениеЗаполнено(ДоговорКонтрагентаНомер) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
		               |	Спр.Ссылка
		               |ИЗ
		               |	Справочник.ДоговорыКонтрагентов КАК Спр
		               |ГДЕ
					   |	Спр.Владелец = &Контрагент
					   |	И Спр.Дата 	 = &ДоговорКонтрагентаДата
					   |	И Спр.Номер  = &ДоговорКонтрагентаНомер
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Спр.Код УБЫВ";
					   
			Запрос.УстановитьПараметр("Контрагент", 			 ПервДок.Контрагент);				   
			Запрос.УстановитьПараметр("ДоговорКонтрагентаДата",  ДоговорКонтрагентаДата);
			Запрос.УстановитьПараметр("ДоговорКонтрагентаНомер", ДоговорКонтрагентаНомер);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПервДок.ДоговорКонтрагента = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		РезультатОткрытия = Неопределено;
		Попытка
			
			Результат = Компонента.OpenReport(Строка.DOC_ID);
			РезультатОткрытия = Результат.CreateResult;
			
		Исключение
			Если глМенеджерЗвит1С.ФлагОтладки Тогда
				Сообщить( НСтр("ru='Ошибка загрузки. Заполнение ТЧ док в информационной базе. При получении документа ID=';uk='Помилка завантаження. Заповнення ТЧ док в інформаційній базі. При отриманні документа ID='") + Строка.DOC_ID + " :" +  ОписаниеОшибки());
			КонецЕсли;
		КонецПопытки;	
		
		Если РезультатОткрытия = 1 Тогда
			
			Если Строка.ТипДокумента = "Рахунок" Тогда
				
				ПервДок.ВалютаДокумента  = мВалютаРегламентированногоУчета;
				ПервДок.КратностьВзаиморасчетов = 1; 
				ПервДок.КурсВзаиморасчетов = 1;
				
				// загрузку ТЧ мы обеспечиваем лишь для определенных типов шаблонов Звита
				Если ВРЕГ(ЛЕВ(Строка.charCode,5)) = "1CPAX" Тогда
					// шаблон обмена ЭДО FREDO Звіт
					
					ПервДок.УчитыватьНДС     = (Строка.charCode <> "1CPAXB");
					ПервДок.СуммаВключаетНДС = (Строка.charCode = "1CPAX");
					
					ТипКода = Результат.GetValue("MAIN", "FIELD");
					
					СтрокаСМаксимальнымНДС = Неопределено;
					
					// заполняем табличную часть
					ЕстьСтрока = Результат.First("TAB1"); 
					Пока ЕстьСтрока Цикл
					
						
						НоменклатураПоставщика =Результат.GetValue( "TAB1", "TAB1_NOMENKLATURA_NAME1");
						КодАртикул	 	= 		Результат.GetValue( "TAB1", "TAB1_A2");
						
						ТипНоменклатуры = 		Результат.GetValue( "TAB1", "TAB1_T");
						
						ЕдиницаИзмерения = 		Результат.GetValue( "TAB1", "TAB1_NOMENKLATURA_CHARCODEUMEASURE");
						ЕдиницаИзмеренияКод = 	Результат.GetValue( "TAB1", "TAB1_NOMENKLATURA_NUMHBUMEASURE");
						Количество = 			Результат.GetValue( "TAB1", "TAB1_A3");
						Цена = 					Результат.GetValue( "TAB1", "TAB1_A5");
						Сумма = 				Результат.GetValue( "TAB1", "TAB1_A6");
						СуммаБезСкидки = 		Результат.GetValue( "TAB1", "TAB1_FIELD8");
						СуммаСкидки = 			Результат.GetValue( "TAB1", "TAB1_A4");
						
						ЕдиницаИзмерения1С = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(СокрЛП(ЕдиницаИзмеренияКод));						
						Если    НЕ ЗначениеЗаполнено(ЕдиницаИзмерения1С) 
							ИЛИ НЕ ИдКонфигурации = "БП" Тогда
							НоменклатураПоставщика = "" + НоменклатураПоставщика + " (од. виміру: " + ЕдиницаИзмерения + ")";	
						КонецЕсли;
						Если ЗначениеЗаполнено(КодАртикул) Тогда                                                    
							НоменклатураПоставщика = "" + НоменклатураПоставщика + " (" + Нрег(ТипКода) +  ": " + КодАртикул + ")";	
						КонецЕсли;
						
						Если ВРЕГ(Лев(ТипНоменклатуры,1)) = "Т" Тогда
							СтрокаПервДок = ПервДок.Товары.Добавить();
							СтрокаПервДок.НаименованиеПоставщика = НоменклатураПоставщика;
							Если ИдКонфигурации = "БП" Тогда
								СтрокаПервДок.ЕдиницаИзмерения = ЕдиницаИзмерения1С;
							КонецЕсли;
						Иначе	
							// все остальное заносим в ТЧ услуги
							СтрокаПервДок = ПервДок.Услуги.Добавить();
							СтрокаПервДок.Содержание = НоменклатураПоставщика;
						КонецЕсли;
						
						СтруктураПоискаНоменклатуры = Новый Структура("Контрагент", Строка.Контрагент);
						СтруктураПоискаНоменклатуры.Вставить("НаименованиеНоменклатурыКонтрагента", НоменклатураПоставщика);
						НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
						
						Если НайденнаяНоменклатураПоставщика.Количество() = 0 Тогда
							СтруктураПоискаНоменклатуры.Удалить("НаименованиеНоменклатурыКонтрагента");
							Если Нрег(ТипКода) = "код" Тогда
								СтруктураПоискаНоменклатуры.Вставить("КодНоменклатурыКонтрагента", КодАртикул);
								НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
							ИначеЕсли Нрег(ТипКода) = "артикул" Тогда	
							    СтруктураПоискаНоменклатуры.Вставить("АртикулНоменклатурыКонтрагента", КодАртикул);
								НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
							КонецЕсли;
						КонецЕсли;
						
						Если НайденнаяНоменклатураПоставщика.Количество() > 0 Тогда
							СтрокаПервДок.Номенклатура 		= НайденнаяНоменклатураПоставщика[0].Номенклатура;
							Если ВРЕГ(Лев(ТипНоменклатуры,1)) = "Т" Тогда
								Если ИдКонфигурации = "БП" Тогда
									ДанныеПоЕдиницеИзмерения = СтрокаПервДок.Номенклатура.ЕдиницыИзмерения.Найти(СтрокаПервДок.ЕдиницаИзмерения);
									Если НЕ ДанныеПоЕдиницеИзмерения = Неопределено Тогда
										СтрокаПервДок.Коэффициент 		= ДанныеПоЕдиницеИзмерения.Коэффициент;
									КонецЕсли;
								Иначе
									СтрокаПервДок.ХарактеристикаНоменклатуры = НайденнаяНоменклатураПоставщика[0].ХарактеристикаНоменклатуры;	
									
									Единицы = Справочники.ЕдиницыИзмерения.Выбрать(,СтрокаПервДок.Номенклатура);
									Пока Единицы.Следующий() Цикл
										Если Единицы.ЕдиницаПоКлассификатору = ЕдиницаИзмерения1С Тогда
											СтрокаПервДок.ЕдиницаИзмерения 	= Единицы.Ссылка;
											СтрокаПервДок.Коэффициент 		= Единицы.Коэффициент;
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						СтрокаПервДок.Количество = Количество;
						СтрокаПервДок.Цена  	 = Цена;
						СтрокаПервДок.Сумма		 = Сумма;
						
						Если ПервДок.УчитыватьНДС Тогда
												
							СтавкаНДС = Результат.GetValue( "TAB1", "T1_F2");
							
							Если СтавкаНДС  = "20" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;	
								Если ПервДок.СуммаВключаетНДС Тогда
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма / 1.2 * 0.2;
								Иначе
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма * 0.2;
								КонецЕсли;
							ИначеЕсли СтавкаНДС  = "7" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС7;	
								Если ПервДок.СуммаВключаетНДС Тогда
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма / 1.07 * 0.07;
								Иначе
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма * 0.07;
								КонецЕсли;
							ИначеЕсли СтавкаНДС  = "0" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;		
							ИначеЕсли СтавкаНДС  = "Б" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;		
							ИначеЕсли СтавкаНДС  = "Н" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;		
							КонецЕсли;
							
							Если СтрокаСМаксимальнымНДС = Неопределено Тогда
								СтрокаСМаксимальнымНДС = СтрокаПервДок;
							ИначеЕсли СтрокаСМаксимальнымНДС.СуммаНДС < СтрокаПервДок.СуммаНДС Тогда
							    СтрокаСМаксимальнымНДС = СтрокаПервДок;
							КонецЕсли;
							
						Иначе	
							СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
						КонецЕсли;
						
						ЕстьСтрока = Результат.Next("TAB1");
						
					КонецЦикла;
					
					ОшибкаОкругленияНДС = Строка.СуммаНДС - ПервДок.Товары.Итог("СуммаНДС") - ПервДок.Услуги.Итог("СуммаНДС");
					Если  НЕ ОшибкаОкругленияНДС = 0
						И НЕ СтрокаСМаксимальнымНДС = Неопределено Тогда
						СтрокаСМаксимальнымНДС.СуммаНДС = СтрокаСМаксимальнымНДС.СуммаНДС + ОшибкаОкругленияНДС;
					КонецЕсли;
					
					
				// Водоканал 	
				//ИначеЕсли Строка.charCode = "801" Тогда
				//
				//	
				Иначе
					
					Сообщить("Завантаження табличних частин для рахунків """ + Строка.charCode + """ не передбачено!");
					
					СтрокаПервДок = ПервДок.Товары.Добавить();
					СтрокаПервДок.НаименованиеПоставщика = "Загальна сума рахунку до оплати (завантаження табличних частин рахунків """  + Строка.charCode + """ не передбачено)";
					
					СтрокаПервДок.Сумма = Строка.СуммаДокумента;
					Если Строка.СуммаНДС > 0 Тогда
						СтрокаПервДок.СуммаНДС = Строка.СуммаНДС;
						ПервДок.УчитыватьНДС 	 = Истина;
						ПервДок.СуммаВключаетНДС = Истина;
					КонецЕсли;
					
				КонецЕсли;	
				
			ИначеЕсли Строка.ТипДокумента = "Акт" Тогда
				
				ПервДок.ВалютаДокумента  = мВалютаРегламентированногоУчета;
				ПервДок.КратностьВзаиморасчетов = 1; 
				ПервДок.КурсВзаиморасчетов = 1;
				
				// загрузку ТЧ мы обеспечиваем лишь для определенных типов шаблонов Звита
				Если ВРЕГ(ЛЕВ(Строка.charCode,5)) = "AKT1C" Тогда
					// шаблон обмена ЭДО FREDO Звіт
					
					ПервДок.УчитыватьНДС     = (Строка.charCode <> "AKT1CB");
					ПервДок.СуммаВключаетНДС = (Строка.charCode = "AKT1C");
					
					ТипКода = Результат.GetValue("MAIN", "FIELD");
					
					СтрокаСМаксимальнымНДС = Неопределено;
					
					// заполняем табличную часть
					ЕстьСтрока = Результат.First("TAB1"); 
					Пока ЕстьСтрока Цикл
						
						НоменклатураПоставщика =Результат.GetValue( "TAB1", "TAB1_NOMENKLATURA_NAME1");
						КодАртикул	 	= 		Результат.GetValue( "TAB1", "TAB1_A2");
						
						ЕдиницаИзмерения = 		Результат.GetValue( "TAB1", "TAB1_NOMENKLATURA_CHARCODEUMEASURE");
						ЕдиницаИзмеренияКод = 	Результат.GetValue( "TAB1", "TAB1_NOMENKLATURA_NUMHBUMEASURE");
						Количество = 			Результат.GetValue( "TAB1", "TAB1_A3");
						Цена = 					Результат.GetValue( "TAB1", "TAB1_A5");
						Сумма = 				Результат.GetValue( "TAB1", "TAB1_A6");
						СуммаБезСкидки = 		Результат.GetValue( "TAB1", "TAB1_FIELD8");
						СуммаСкидки = 			Результат.GetValue( "TAB1", "TAB1_A4");
						
						ЕдиницаИзмерения1С = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(СокрЛП(ЕдиницаИзмеренияКод));						
						Если Не ЗначениеЗаполнено(ЕдиницаИзмерения1С) Тогда
							НоменклатураПоставщика = "" + НоменклатураПоставщика + " (од. виміру: " + ЕдиницаИзмерения + ")";	
						КонецЕсли;
						Если ЗначениеЗаполнено(КодАртикул) Тогда                                                    
							НоменклатураПоставщика = "" + НоменклатураПоставщика + " (" + Нрег(ТипКода) +  ": " + КодАртикул + ")";	
						КонецЕсли;
						
						СтруктураПоискаНоменклатуры = Новый Структура("Контрагент", Строка.Контрагент);
						СтруктураПоискаНоменклатуры.Вставить("НаименованиеНоменклатурыКонтрагента", НоменклатураПоставщика);
						НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
						
						Если НайденнаяНоменклатураПоставщика.Количество() = 0 Тогда
							СтруктураПоискаНоменклатуры.Удалить("НаименованиеНоменклатурыКонтрагента");
							Если Нрег(ТипКода) = "код" Тогда
								СтруктураПоискаНоменклатуры.Вставить("КодНоменклатурыКонтрагента", КодАртикул);
								НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
							ИначеЕсли Нрег(ТипКода) = "артикул" Тогда	
							    СтруктураПоискаНоменклатуры.Вставить("АртикулНоменклатурыКонтрагента", КодАртикул);
								НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
							КонецЕсли;
						КонецЕсли;
						
						// все остальное заносим в ТЧ услуги
						СтрокаПервДок = ПервДок.Услуги.Добавить();
						СтрокаПервДок.Содержание = НоменклатураПоставщика;
						
						Если НайденнаяНоменклатураПоставщика.Количество() > 0 Тогда
							СтрокаПервДок.Номенклатура = НайденнаяНоменклатураПоставщика[0].Номенклатура;
						КонецЕсли;
						
						СтрокаПервДок.Количество = Количество;
						СтрокаПервДок.Цена  	 = Цена;
						СтрокаПервДок.Сумма		 = Сумма;
						
						Если ПервДок.УчитыватьНДС Тогда
							
							Попытка
								СтавкаНДС = Результат.GetValue( "TAB1", "TAB1_ST_PDV");
							Исключение
								СтавкаНДС = Результат.GetValue( "TAB1", "T1_F2");
							КонецПопытки;
												
							Если СтавкаНДС  = "20" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;	
								Если ПервДок.СуммаВключаетНДС Тогда
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма / 1.2 * 0.2;
								Иначе
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма * 0.2;
								КонецЕсли;
							ИначеЕсли СтавкаНДС  = "7" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС7;	
								Если ПервДок.СуммаВключаетНДС Тогда
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма / 1.07 * 0.07;
								Иначе
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма * 0.07;
								КонецЕсли;
							ИначеЕсли СтавкаНДС  = "0" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;		
							ИначеЕсли СтавкаНДС  = "Б" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;		
							ИначеЕсли СтавкаНДС  = "Н" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;		
							КонецЕсли;
							
							Если СтрокаСМаксимальнымНДС = Неопределено Тогда
								СтрокаСМаксимальнымНДС = СтрокаПервДок;
							ИначеЕсли СтрокаСМаксимальнымНДС.СуммаНДС < СтрокаПервДок.СуммаНДС Тогда
							    СтрокаСМаксимальнымНДС = СтрокаПервДок;
							КонецЕсли;
							
						Иначе	
							СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
						КонецЕсли;
						
						Если ИдКонфигурации = "БП" Тогда
							ПервДок.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаПервДок, "Услуги", Истина, Истина);
						ИначеЕсли ИдКонфигурации = "УТП" Тогда
							ПервДок.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаПервДок, "Услуги", Истина, Истина)	
						ИначеЕсли ИдКонфигурации = "УПП" Тогда
							ПервДок.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаПервДок, "Услуги", Истина);
						КонецЕсли;
						
						ЕстьСтрока = Результат.Next("TAB1");
						
					КонецЦикла;
					
					ОшибкаОкругленияНДС = Строка.СуммаНДС - ПервДок.Услуги.Итог("СуммаНДС");
					Если  НЕ ОшибкаОкругленияНДС = 0
						И НЕ СтрокаСМаксимальнымНДС = Неопределено Тогда
						СтрокаСМаксимальнымНДС.СуммаНДС = СтрокаСМаксимальнымНДС.СуммаНДС + ОшибкаОкругленияНДС;
					КонецЕсли;
					
				//ИначеЕсли	
					
				Иначе
					
					Сообщить("Завантаження табличних частин для Актів виконаних робіт """ + Строка.charCode + """ не передбачено!");
					
					СтрокаПервДок = ПервДок.Услуги.Добавить();
					СтрокаПервДок.Содержание = "Загальна сума акта (завантаження табличних частин актів """  + Строка.charCode + """ не передбачено)";
					
					СтрокаПервДок.Сумма = Строка.СуммаДокумента;
					Если Строка.СуммаНДС > 0 Тогда
						СтрокаПервДок.СуммаНДС = Строка.СуммаНДС;
						ПервДок.УчитыватьНДС 	 = Истина;
						ПервДок.СуммаВключаетНДС = Истина;
					КонецЕсли;
					
				КонецЕсли;	
				
			ИначеЕсли Строка.ТипДокумента = "Накладна" Тогда
				
				ПервДок.ВалютаДокумента  = мВалютаРегламентированногоУчета;
				ПервДок.КратностьВзаиморасчетов = 1; 
				ПервДок.КурсВзаиморасчетов = 1;
				
				// загрузку ТЧ мы обеспечиваем лишь для определенных типов шаблонов Звита
				Если ВРЕГ(ЛЕВ(Строка.charCode,4)) = "1CBH" Тогда
					// шаблон обмена ЭДО FREDO Звіт
					
					ПервДок.УчитыватьНДС     = (Строка.charCode <> "1CBHB");
					ПервДок.СуммаВключаетНДС = (Строка.charCode = "1CBH");
					
					ТипКода = Результат.GetValue("MAIN", "FIELD");
					
					СтрокаСМаксимальнымНДС = Неопределено;
					
					// заполняем табличную часть
					ЕстьСтрока = Результат.First("TAB1"); 
					Пока ЕстьСтрока Цикл
						
						НоменклатураПоставщика =Результат.GetValue( "TAB1", "TAB1_NOMENKLATURA_NAME1");
						КодАртикул	 	= 		Результат.GetValue( "TAB1", "TAB1_A2");
						
						ТипНоменклатуры = 		Результат.GetValue( "TAB1", "TAB1_T");
						
						ЕдиницаИзмерения = 		Результат.GetValue( "TAB1", "TAB1_NOMENKLATURA_CHARCODEUMEASURE");
						ЕдиницаИзмеренияКод = 	Результат.GetValue( "TAB1", "TAB1_NOMENKLATURA_NUMHBUMEASURE");
						Количество = 			Результат.GetValue( "TAB1", "TAB1_A3");
						Цена = 					Результат.GetValue( "TAB1", "TAB1_A5");
						Сумма = 				Результат.GetValue( "TAB1", "TAB1_A6");
						СуммаБезСкидки = 		Результат.GetValue( "TAB1", "TAB1_FIELD8");
						СуммаСкидки = 			Результат.GetValue( "TAB1", "TAB1_A4");
						
						ЕдиницаИзмерения1С = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(СокрЛП(ЕдиницаИзмеренияКод));						
						Если    НЕ ЗначениеЗаполнено(ЕдиницаИзмерения1С) 
							ИЛИ НЕ ИдКонфигурации = "БП" Тогда
							НоменклатураПоставщика = "" + НоменклатураПоставщика + " (од. виміру: " + ЕдиницаИзмерения + ")";	
						КонецЕсли;

						Если ЗначениеЗаполнено(КодАртикул) Тогда                                                    
							НоменклатураПоставщика = "" + НоменклатураПоставщика + " (" + Нрег(ТипКода) +  ": " + КодАртикул + ")";	
						КонецЕсли;
						
						ИмяТЧ = "Товары";
						Если ВРЕГ(Лев(ТипНоменклатуры,1)) = "Т" Тогда
							ИмяТЧ = "Товары";
							СтрокаПервДок = ПервДок[ИмяТЧ].Добавить();
							СтрокаПервДок.НаименованиеПоставщика = НоменклатураПоставщика;
							Если ИдКонфигурации = "БП" Тогда
								СтрокаПервДок.ЕдиницаИзмерения = ЕдиницаИзмерения1С;
							КонецЕсли;
						Иначе	
							// все остальное заносим в ТЧ услуги
							ИмяТЧ = "Услуги";
							СтрокаПервДок = ПервДок[ИмяТЧ].Добавить();
							СтрокаПервДок.Содержание = НоменклатураПоставщика;
						КонецЕсли;
						
						СтруктураПоискаНоменклатуры = Новый Структура("Контрагент", Строка.Контрагент);
						СтруктураПоискаНоменклатуры.Вставить("НаименованиеНоменклатурыКонтрагента", НоменклатураПоставщика);
						НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
						
						Если НайденнаяНоменклатураПоставщика.Количество() = 0 Тогда
							СтруктураПоискаНоменклатуры.Удалить("НаименованиеНоменклатурыКонтрагента");
							Если Нрег(ТипКода) = "код" Тогда
								СтруктураПоискаНоменклатуры.Вставить("КодНоменклатурыКонтрагента", КодАртикул);
								НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
							ИначеЕсли Нрег(ТипКода) = "артикул" Тогда	
							    СтруктураПоискаНоменклатуры.Вставить("АртикулНоменклатурыКонтрагента", КодАртикул);
								НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
							КонецЕсли;
						КонецЕсли;
						
						Если НайденнаяНоменклатураПоставщика.Количество() > 0 Тогда
							СтрокаПервДок.Номенклатура 		= НайденнаяНоменклатураПоставщика[0].Номенклатура;
							Если ВРЕГ(Лев(ТипНоменклатуры,1)) = "Т" Тогда
								Если ИдКонфигурации = "БП" Тогда
									ДанныеПоЕдиницеИзмерения = СтрокаПервДок.Номенклатура.ЕдиницыИзмерения.Найти(СтрокаПервДок.ЕдиницаИзмерения);
									Если НЕ ДанныеПоЕдиницеИзмерения = Неопределено Тогда
										СтрокаПервДок.Коэффициент 		= ДанныеПоЕдиницеИзмерения.Коэффициент;
									КонецЕсли;
								Иначе
									СтрокаПервДок.ХарактеристикаНоменклатуры = НайденнаяНоменклатураПоставщика[0].ХарактеристикаНоменклатуры;	
									
									Единицы = Справочники.ЕдиницыИзмерения.Выбрать(,СтрокаПервДок.Номенклатура);
									Пока Единицы.Следующий() Цикл
										Если Единицы.ЕдиницаПоКлассификатору = ЕдиницаИзмерения1С Тогда
											СтрокаПервДок.ЕдиницаИзмерения 	= Единицы.Ссылка;
											СтрокаПервДок.Коэффициент 		= Единицы.Коэффициент;
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						СтрокаПервДок.Количество = Количество;
						СтрокаПервДок.Цена  	 = Цена;
						СтрокаПервДок.Сумма		 = Сумма;
						
						Если ПервДок.УчитыватьНДС Тогда
												
							СтавкаНДС = Результат.GetValue( "TAB1", "T1_F2");
							
							Если СтавкаНДС  = "20" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;	
								Если ПервДок.СуммаВключаетНДС Тогда
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма / 1.2 * 0.2;
								Иначе
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма * 0.2;
								КонецЕсли;
							ИначеЕсли СтавкаНДС  = "7" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС7;	
								Если ПервДок.СуммаВключаетНДС Тогда
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма / 1.07 * 0.07;
								Иначе
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма * 0.07;
								КонецЕсли;
							ИначеЕсли СтавкаНДС  = "0" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;		
							ИначеЕсли СтавкаНДС  = "Б" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;		
							ИначеЕсли СтавкаНДС  = "Н" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;		
							КонецЕсли;
							
							Если СтрокаСМаксимальнымНДС = Неопределено Тогда
								СтрокаСМаксимальнымНДС = СтрокаПервДок;
							ИначеЕсли СтрокаСМаксимальнымНДС.СуммаНДС < СтрокаПервДок.СуммаНДС Тогда
							    СтрокаСМаксимальнымНДС = СтрокаПервДок;
							КонецЕсли;
							
						Иначе	
							СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
						КонецЕсли;
						
						Если ИдКонфигурации = "БП" Тогда
							ПервДок.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаПервДок, ИмяТЧ, Истина, Истина);
						ИначеЕсли ИдКонфигурации = "УТП" Тогда
							ПервДок.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаПервДок, ИмяТЧ, Истина, Истина)	
						ИначеЕсли ИдКонфигурации = "УПП" Тогда
							ПервДок.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаПервДок, ИмяТЧ, Истина);
						КонецЕсли;
						
						ЕстьСтрока = Результат.Next("TAB1");
						
					КонецЦикла;
					
					ОшибкаОкругленияНДС = Строка.СуммаНДС - ПервДок.Товары.Итог("СуммаНДС") - ПервДок.Услуги.Итог("СуммаНДС");
					Если  НЕ ОшибкаОкругленияНДС = 0
						И НЕ СтрокаСМаксимальнымНДС = Неопределено Тогда
						СтрокаСМаксимальнымНДС.СуммаНДС = СтрокаСМаксимальнымНДС.СуммаНДС + ОшибкаОкругленияНДС;
					КонецЕсли;
					
				//ИначеЕсли	
					
				Иначе
					
					Сообщить("Завантаження табличних частин для накладних """ + Строка.charCode + """ не передбачено!");
					
					СтрокаПервДок = ПервДок.Товары.Добавить();
					СтрокаПервДок.НаименованиеПоставщика = "Загальна сума накладної до оплати (завантаження табличних частин рахунків """  + Строка.charCode + """ не передбачено)";
					
					СтрокаПервДок.Сумма = Строка.СуммаДокумента;
					Если Строка.СуммаНДС > 0 Тогда
						СтрокаПервДок.СуммаНДС = Строка.СуммаНДС;
						ПервДок.УчитыватьНДС 	 = Истина;
						ПервДок.СуммаВключаетНДС = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Сообщить("Не вдалося завантажити табличні частини в документ: " + ПервДок);
		КонецЕсли;
		
		ПервДок.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
		
		ПервДок.УстановитьНовыйНомер();
		ПервДок.Записать();
		
		Строка.Ссылка = ПервДок.Ссылка;
		
		Строка.Флаг = Ложь;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСписок()

	Перем КодОрганизации, ЕДРПОУКонтрагента; 
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если    НачПериода = '00010101'
		ИЛИ НачПериода = '00010101' Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗапуситьЗвит1С(Ложь, Организация) Тогда
		Предупреждение(НСтр("ru = 'Не удалось запустить ""FREDO ДокМен""'; uk = 'Не вдалося запустити ""FREDO ДокМен""'"));
		Возврат;
	КонецЕсли;
	
	ДокументыЗвит1С.Очистить();

	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	КодОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, КонПериода, СписокПоказателей).КодПоЕДРПОУ;
	КодОрганизации = СокрЛП(КодОрганизации); 
	
	
	// проверим, та ли организация открыта в Звите. Иначе никакого действия не произойдет
	Попытка
		ТекстОшибки = "";
		
		РезультатСоздания = Компонента.OpenCreateRTFReport(КодОрганизации,"1CPAX", 0, 1, 2017,""+Новый УникальныйИдентификатор).CreateResult;
	
		Если РезультатСоздания = -3 Тогда
			ТекстОшибки = НСтр("ru = 'ЕДРПОУ организации указанной в обработке не совпадает с текущем ЕДРПОУ в ""FREDO ДокМен""
	                            |Переключите текущую организацию в ""FREDO ДокМен"" и повторите операцию еще раз'; uk = 'ЄДРПОУ організації зазначеної в обробці не збігається з поточним ЄДРПОУ в ""FREDO ДокМен""
	                            |Переключіть поточну організацію в ""FREDO ДокМен"" і повторіть операцію ще раз'");
		ИначеЕсли РезультатСоздания = -6 Тогда	
	        ТекстОшибки = НСтр("ru = 'Отсутствует лицензия ""FREDO ДокМен""'; uk = 'Відсутня ліцензія в ""FREDO ДокМен""'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Сообщить(ТекстОшибки);
			Возврат;
		КонецЕсли;
	Исключение
		ТекстОшибкиДляОтладки = ОписаниеОшибки();
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ЕДРПОУКонтрагента = СокрЛП(Контрагент.КодПоЕДРПОУ);
	КонецЕсли;
	
	Если ТипДокумента = "Рахунок" ИЛИ НЕ ЗначениеЗаполнено(ТипДокумента) Тогда
		docType = 10103;
		ТаблицаДокЗвит1С = Компонента.GetPrimaryReestr(docType, 2, НачПериода, КонецДня(КонПериода));
		Если НЕ ТаблицаДокЗвит1С = Неопределено Тогда
			ЕстьСтрока = ТаблицаДокЗвит1С.First("MAIN");
			Пока ЕстьСтрока Цикл
				ВнестиДанныеЗвит1С(ТаблицаДокЗвит1С, КодОрганизации, ЕДРПОУКонтрагента, "Рахунок");
				ЕстьСтрока = ТаблицаДокЗвит1С.Next("MAIN");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	
	Если ТипДокумента = "Акт" ИЛИ НЕ ЗначениеЗаполнено(ТипДокумента) Тогда
		docType = 10104;
		ТаблицаДокЗвит1С = Компонента.GetPrimaryReestr(docType, 2, НачПериода, КонецДня(КонПериода));
		Если НЕ ТаблицаДокЗвит1С = Неопределено Тогда
			ЕстьСтрока = ТаблицаДокЗвит1С.First("MAIN");
			Пока ЕстьСтрока Цикл
				ВнестиДанныеЗвит1С(ТаблицаДокЗвит1С, КодОрганизации, ЕДРПОУКонтрагента, "Акт");
				ЕстьСтрока = ТаблицаДокЗвит1С.Next("MAIN");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипДокумента = "Накладна" ИЛИ НЕ ЗначениеЗаполнено(ТипДокумента) Тогда
		docType = 10105;
		ТаблицаДокЗвит1С = Компонента.GetPrimaryReestr(docType, 2, НачПериода, КонецДня(КонПериода));
		Если НЕ ТаблицаДокЗвит1С = Неопределено Тогда
			ЕстьСтрока = ТаблицаДокЗвит1С.First("MAIN");
			Пока ЕстьСтрока Цикл
				ВнестиДанныеЗвит1С(ТаблицаДокЗвит1С, КодОрганизации, ЕДРПОУКонтрагента, "Накладна");
				ЕстьСтрока = ТаблицаДокЗвит1С.Next("MAIN");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	
	// заполняем ссылки существующих документов (и контрагентов из документов) по ID
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	Док.Ссылка,
				   |	Док.Организация,
	               |	Док.Контрагент,
	               |	Док.Контрагент,
	               |	Док.Контрагент.КодПоЕДРПОУ КАК КонтрагентЕДРПОУ,
				   |	Док.Контрагент.КодФилиала КАК КонтрагентКодФилиала,
	               |	Док.НомерВходящегоДокумента,
	               |	Док.ДатаВходящегоДокумента,
				   |	//ВидОперации,
	               |	Док.Звит1С_DOC_ID КАК DOC_ID,
				   |	Док.СуммаДокумента КАК СуммаДокумента
	               |ИЗ
	               |	Документ.СчетНаОплатуПоставщика КАК Док
	               |ГДЕ
	               |	  Док.ДатаВходящегоДокумента >= &НачДата
	               |	И Док.ДатаВходящегоДокумента <= &КонДата
				   |	И Док.Организация = &Организация
				   |
				   | ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	Док.Ссылка,
				   |	Док.Организация,
	               |	Док.Контрагент,
	               |	Док.Контрагент,
	               |	Док.Контрагент.КодПоЕДРПОУ КАК КонтрагентЕДРПОУ,
				   |	Док.Контрагент.КодФилиала КАК КонтрагентКодФилиала,
	               |	Док.НомерВходящегоДокумента,
	               |	Док.ДатаВходящегоДокумента,
				   |	//ВидОпПоступлениеТоваровУслуг,
	               |	Док.Звит1С_DOC_ID КАК DOC_ID,
				   |	Док.СуммаДокумента КАК СуммаДокумента
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг КАК Док
	               |ГДЕ
	               |	  Док.ДатаВходящегоДокумента >= &НачДата
	               |	И Док.ДатаВходящегоДокумента <= &КонДата
				   |	И Док.Организация = &Организация				   
				   |УПОРЯДОЧИТЬ ПО
	               |	Док.Звит1С_DOC_ID УБЫВ";
				   
		
	Если ДокументыЗвит1С.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдКонфигурации = "БП" ИЛИ ИдКонфигурации = "УТП" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ВидОперации", "Док.ВидОперации");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ВидОперации", "NULL");
	КонецЕсли;
	
	Если ИдКонфигурации = "УТ" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ВидОпПоступлениеТоваровУслуг", "NULL");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ВидОпПоступлениеТоваровУслуг", "Док.ВидОперации");
	КонецЕсли;
	
	ТабДат = ДокументыЗвит1С.Скопировать(, "ДатаДокумента");ТабДат.Сортировать("ДатаДокумента");
	
	Запрос.УстановитьПараметр("НачДата", НачалоДня(ТабДат[0].ДатаДокумента));
	Запрос.УстановитьПараметр("КонДата", КонецДня(ТабДат[ТабДат.Количество()-1].ДатаДокумента));
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура;
		
		ТекТипДокумента = глМенеджерЗвит1С.ОпределитьТипДокументаПоСсылке(Выборка.Ссылка);
		
		СтруктураПоиска.Вставить("ТипДокумента", ТекТипДокумента);
		
		СтруктураПоиска.Вставить("КонтрагентЕДРПОУ",СокрЛП(Выборка.КонтрагентЕДРПОУ));
		СтруктураПоиска.Вставить("КонтрагентКодФилиала", СокрЛП(Выборка.КонтрагентКодФилиала)); 
		СтруктураПоиска.Вставить("Номер",			СокрЛП(Выборка.НомерВходящегоДокумента));
		СтруктураПоиска.Вставить("ДатаДокумента",	Выборка.ДатаВходящегоДокумента);
		
		СуществующиеДокБезСвязиСоЗвит = ДокументыЗвит1С.НайтиСтроки(СтруктураПоиска);
		Для каждого Строка Из СуществующиеДокБезСвязиСоЗвит Цикл
			
			Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
				Строка.Комментарий = Строка.Комментарий + НСтр("ru='Имеются дубли документов в информационной базе: ';uk='Є дублі документів в інформаційній базі: '") + "(" + Выборка.Ссылка+") ";
				Продолжить;
			КонецЕсли;
			
			Строка.Контрагент = Выборка.Контрагент;
			Строка.Ссылка 	  = Выборка.Ссылка;
			
			Если Строка.СуммаДокумента <> Выборка.СуммаДокумента Тогда
				Строка.Комментарий = Строка.Комментарий + НСтр("ru='Имеется расхождение в сумме документа! ';uk='Є розбіжність у сумі документа! '");
			КонецЕсли;
			Если    Строка.ТипДокумента = "Рахунок"
				ИЛИ Строка.ТипДокумента = "Акт"
				ИЛИ Строка.ТипДокумента = "Накладна" Тогда
				
				СуммаНДС = 0;
				Если ИдКонфигурации = "БП" Тогда
					Выполнить("СуммаНДС = УчетНДС.ПолучитьНДСДокумента(Выборка.Ссылка);");
				ИначеЕсли ИдКонфигурации = "УТП" Тогда
					Выполнить("СуммаНДС = УчетНДС.ПолучитьНДСДокумента(Выборка.Ссылка);");
				ИначеЕсли ИдКонфигурации = "УТ" Тогда
					Выполнить("СуммаНДС = НалоговыйУчет.ПолучитьНДСДокумента(Выборка.Ссылка);");
				ИначеЕсли ИдКонфигурации = "УПП" Тогда
					Выполнить("СуммаНДС = Ценообразование.ПолучитьНДСДокумента(Выборка.Ссылка);");
				КонецЕсли;
				
				Если Строка.СуммаНДС <> СуммаНДС Тогда
					Строка.Комментарий = Строка.Комментарий + НСтр("ru='Имеется расхождение в сумме НДС документа! ';uk='Є розбіжність у сумі ПДВ документа! '");
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.DOC_ID = Строка.DOC_ID Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				
				ПервДок = Выборка.Ссылка.ПолучитьОбъект();
				ПервДок.Звит1С_DOC_ID  = Строка.DOC_ID;
				ПервДок.Записать();			
				
			Исключение
				Строка.Комментарий = НСТР("ru='Для документа информационной базы не установлена связь с документом из ""FREDO ДокМен"". 
										   |Необходимо загрузить XML в документ информационную базу.';uk='Для документа інформаційної бази не встановлений зв''язок з документом із ""FREDO ДокМен"". 
										   |Необхідно завантажити XML до документу інформаційної бази.'");
				Строка.Флаг = Истина;
				
			КонецПопытки;
		
		КонецЦикла;
			
	КонецЦикла;
	
	// ищем подходящих контрагентов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Спр.Ссылка,
				   |	Спр.КодФилиала КАК КонтрагентКодФилиала,
	               |	Спр.КодПоЕДРПОУ КАК КонтрагентЕДРПОУ
	               |ИЗ
	               |	Справочник.Контрагенты КАК Спр
	               |ГДЕ
	               |	Спр.КодПоЕДРПОУ В(&МассивЕДРПОУ)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Спр.Код УБЫВ";
				   
	МассивЕДРПОУ    = Новый Массив();
	Для каждого Строка Из ДокументыЗвит1С Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Контрагент) Тогда
			МассивЕДРПОУ.ДОбавить(Строка.КонтрагентЕДРПОУ);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("МассивЕДРПОУ", МассивЕДРПОУ);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Для каждого Строка Из ДокументыЗвит1С.НайтиСтроки(Новый Структура("Контрагент, КонтрагентЕДРПОУ, КонтрагентКодФилиала", Справочники.Контрагенты.ПустаяСсылка(), СокрЛП(Выборка.КонтрагентЕДРПОУ), Лев(СокрЛП(Выборка.КонтрагентКодФилиала), 4))) Цикл
			Строка.Контрагент = Выборка.Ссылка;
		КонецЦикла;
		
	КонецЦикла;	
	
	// проставляем флажки для загрузки документов
	Для каждого Строка Из ДокументыЗвит1С Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			Строка.Флаг = Истина;
			
			Если Строка.Контрагент.Пустая() Тогда
				Строка.Флаг = Ложь;
				Строка.Комментарий = НСтр("ru='В информационной базе не обнаружен контрагент с Кодом (ЕДРПОУ/ДРФО): ';uk='В інформаційній базі не виявлений контрагент з Кодом (ЕДРПОУ/ДРФО):'") + Строка.КонтрагентЕДРПОУ +
									 ?(ЗначениеЗаполнено(Строка.КонтрагентКодФилиала), НСтр("ru=' и кодом филиала: ';uk='  та кодом філії:'") + Строка.КонтрагентКодФилиала, " ");
			КонецЕсли; 
			
		ИначеЕсли НЕ ПустаяСтрока(Строка.Комментарий) Тогда
			
			Строка.Флаг = Истина;	
			
		КонецЕсли;	
		
	КонецЦикла;
	
	ДокументыЗвит1С.Сортировать("ДатаДокумента, Контрагент, ТипДокумента");

КонецПроцедуры

Процедура ВнестиДанныеЗвит1С(ТаблицаДокЗвит1С, КодОрганизации, ЕДРПОУКонтрагента, ТекТипДокумента)
	
	КодОрганизацииЗвит1С  	= ТаблицаДокЗвит1С.GetValue( "MAIN", "FIRM_EDRPOU" );
	Если НЕ   КодОрганизацииЗвит1С = КодОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСхемыЗвит1С = ТаблицаДокЗвит1С.GetValue( "MAIN", "CharCode" );
	
	Если Лев(ИмяСхемыЗвит1С, 5) = "1CPAX" Тогда
		ТекТипДокумента = "Рахунок";
	ИначеЕсли Лев(ИмяСхемыЗвит1С, 5) = "AKT1C" Тогда
		ТекТипДокумента = "Акт";
	ИначеЕсли Лев(ИмяСхемыЗвит1С, 4) = "1CBH" Тогда
		ТекТипДокумента = "Накладна";
	КонецЕсли;
	
	ЕДРПОУКонтрагентаЗвит1С = ТаблицаДокЗвит1С.GetValue( "MAIN", "Partner_EDRPOU" );

	Если ЗначениеЗаполнено(ЕДРПОУКонтрагента) И НЕ (ЕДРПОУКонтрагентаЗвит1С = ЕДРПОУКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ДокументыЗвит1С.Добавить();
	
	НоваяСтрока.ТипДокумента = ТекТипДокумента;
	НоваяСтрока.Организация = Организация;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		НоваяСтрока.Контрагент = Контрагент;
	КонецЕсли;
	
	НоваяСтрока.КонтрагентЕДРПОУ = ЕДРПОУКонтрагентаЗвит1С;
	
	НоваяСтрока.ДатаДокумента  	 = ТаблицаДокЗвит1С.GetValue("MAIN", "DOC_DATE");
	НоваяСтрока.Номер 			 = ТаблицаДокЗвит1С.GetValue("MAIN", "DOC_NUM");
	
	НоваяСтрока.СуммаНДС 	   = ТаблицаДокЗвит1С.GetValue("MAIN", "VATSUM");
	НоваяСтрока.СуммаДокумента = ТаблицаДокЗвит1С.GetValue( "MAIN", "DOCSUM");
	
	НоваяСтрока.DOC_ID   = ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_ID" );
	НоваяСтрока.CharCode = ИмяСхемыЗвит1С;
	
	РезультатОткрытия = Неопределено;
	Попытка
		Результат = Компонента.OpenReport(НоваяСтрока.DOC_ID);		
		РезультатОткрытия = Результат.CreateResult;
	Исключение
		Если глМенеджерЗвит1С.ФлагОтладки Тогда
			Сообщить("Ошибка загрузки. При получении документа ID=" + НоваяСтрока.DOC_ID + " :" + ОписаниеОшибки());
		КонецЕсли;
	КонецПопытки;
	
	Если РезультатОткрытия = 1 Тогда
		
		Если    ВРЕГ(ЛЕВ(ИмяСхемыЗвит1С,5)) = "1CPAX"
			ИЛИ ВРЕГ(ЛЕВ(ИмяСхемыЗвит1С,5)) = "AKT1C"
			ИЛИ ВРЕГ(ЛЕВ(ИмяСхемыЗвит1С,4)) = "1CBH" Тогда
			// дата и номер договора
			НоваяСтрока.ДоговорНомер = Результат.GetValue( "MAIN", "DOG_NUM");	
			НоваяСтрока.ДоговорДата  = Результат.GetValue( "MAIN", "DOG_DATE");
			НоваяСтрока.КонтрагентКодФилиала = Результат.GetValue( "MAIN", "FIRM_DEPT" );
		КонецЕсли;                          
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки НастройкаПериода
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	мНастройкаПериода.УстановитьПериод(НачПериода, КонПериода);

	Если мНастройкаПериода.Редактировать() Тогда

		НачПериода = мНастройкаПериода.ПолучитьДатуНачала();
		КонПериода = мНастройкаПериода.ПолучитьДатуОкончания();

	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

Процедура ПриОткрытии()
	
	Если Не ЗначениеЗаполнено(Организация) Тогда		
		Если НЕ ИдКонфигурации = "УТ" Тогда
			Организация = глЗначениеПеременной("ОсновнаяОрганизация");
		Иначе
		   Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НачПериода) Тогда
		НачПериода = ТекущаяДата();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонПериода) Тогда
		КонПериода = ТекущаяДата();
	КонецЕсли;

	Если НачПериода > КонПериода Тогда
		НачПериода = КонПериода;
	КонецЕсли;
	
	ОбновитьСписок();
	
КонецПроцедуры

Процедура КоманднаяПанельДокументыЗвит1СОбновитьСписок(Кнопка)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Предупреждение(Нстр("ru='Укажите организацию!';uk='Укажіть організацію!'"));
		Возврат;
	КонецЕсли;
	
	Если    НачПериода = '00010101'
		ИЛИ НачПериода = '00010101' Тогда
		Предупреждение(Нстр("ru='Укажите период выписки!';uk='Вкажіть період виписки!'"));
		Возврат;
	КонецЕсли;
	
	ОбновитьСписок();
	
КонецПроцедуры

Процедура ДокументыЗвит1СКонтрагентПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ДокументыЗвит1С.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Контрагент) Тогда
		ТекущаяСтрока.Флаг = Ложь;
		Возврат;
	КонецЕсли;
	
	Если    СокрЛП(ТекущаяСтрока.Контрагент.КодПоЕДРПОУ)  <> ТекущаяСтрока.КонтрагентЕДРПОУ Тогда
		
		Сообщить(НСТр("ru='У контрагента не совпадает Код (ЕДРПОУ/ДРФО)!';uk='У контрагента не збігається Код (ЕДРПОУ/ДРФО)!'"));
		ТекущаяСтрока.Контрагент = "";
	    ТекущаяСтрока.Флаг = Ложь;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Ссылка) Тогда
		ТекущаяСтрока.Флаг = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыЗвит1СПриИзмененииФлажка(Элемент, Колонка)
	
	ТекущаяСтрока = ЭлементыФормы.ДокументыЗвит1С.ТекущиеДанные;
	Если ТекущаяСтрока= Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.Контрагент.Пустая() И ТекущаяСтрока.Флаг Тогда
		
		ТекущаяСтрока.Флаг = Ложь;
		Сообщить(НСтр("ru='Необходимо указать контрагента!';uk='Необхідно зазначити контрагента!'"));	
	
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельДокументыЗвит1СXMLОткрытьВЗвит1С(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ДокументыЗвит1С.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗапуситьЗвит1С(Ложь, Организация) Тогда
		Предупреждение(НСтр("ru = 'Не удалось запустить ""FREDO ДокМен""'; uk = 'Не вдалося запустити ""FREDO ДокМен""'"));
		Возврат;
	КонецЕсли;
	      
	Результат = глМенеджерЗвит1С.Компонента.ShowReport(ТекущаяСтрока.DOC_ID);
	
	Если Результат = 0 Тогда
		глМенеджерЗвит1С.Компонента.Bring1CToFront();		
		Возврат;
	КонецЕсли;

	глМенеджерЗвит1С.Компонента.BringZvitToFront();
	
КонецПроцедуры

Процедура ДокументыЗвит1СПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтрок  Из ОформленияСтрок Цикл
	
	КонецЦикла;
	
КонецПроцедуры

мНастройкаПериода = Новый НастройкаПериода;
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
ИдКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
СоздаватьДокументыДатойВыпискиКонтрагентом = Истина;

ЭлементыФормы.ТипДокумента.СписокВыбора.Добавить("Рахунок");
ЭлементыФормы.ТипДокумента.СписокВыбора.Добавить("Акт");
ЭлементыФормы.ТипДокумента.СписокВыбора.Добавить("Накладна");
ТипДокумента = ЭлементыФормы.ТипДокумента.СписокВыбора[0].Значение;