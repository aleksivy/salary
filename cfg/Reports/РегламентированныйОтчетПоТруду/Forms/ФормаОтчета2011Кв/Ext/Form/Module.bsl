////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
//каждая закладка отчета - это объект ПолеТабличногоДокумента
Перем мОтчетПоТруду;

Перем мСоставПоказателей Экспорт;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранят структуру многострочных разделов
//Перем мСтруктураМногострочныхРазделов;
//Перем мСтруктураИсхКолвоСтрокРазделов;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы;

Перем МассивЖенщин,МассивСовм,МассивШтПоследнийМес,МассивГПХ;

Перем мПечатныеФормы Экспорт;
Перем ЕстьДуплекс;

Перем Счет661;
Перем СтрокиДекларации;
Перем ПрожиточныйМинимум;
Перем МинОплатаТруда;

Перем мМенеджерЗвит1С Экспорт;

Процедура ЗаполнитьНачальныеНастройки(Макет = "СоставПоказателей2011Кв") Экспорт
	
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(Макет);
	
	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
			
			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;
		
	КонецЦикла;
	
	ЭлементыФормы.ПолеТабличногоДокументаОтчетПоТруду.ОбластьПечати = ЭлементыФормы.ПолеТабличногоДокументаОтчетПоТруду.Области.Найти("ПредупреждениеОПечати");
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)
	
	СтруктураПоказателейВнутрСвязи = Новый Структура;
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		Если НЕ (ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента")) Тогда
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;
		
		//Если ТекущаяОбласть.Защита Тогда
		//	Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;
		
		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		
		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;
			
			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице
			
			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
			
			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
			
			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
			
			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
			
			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
			
			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");
			
			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
				
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;
					
					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;
					
					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;
					
					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
					
					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаВариантыЗаполнения;
	
КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;
	
	ЕстьИзменения = Ложь;
	
	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц
	
	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2011Кв");
	
	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	
	ЕстьИзменения = Ложь;
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
			
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку
				
				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
				
				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
				
				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий параметры автозаполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);
				
				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки параметров автозаполнения текущей страницы.
				
				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						
						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;
						
						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии формы для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя, а в текущей - отключено.
							// В этом случае удаляем ячейку из таблицы пользовательских настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);
							
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции // ОбновитьВариантыЗаполнения()

// Процедура управляет показом в форме периода построения отчета,
Процедура ПоказатьПериод()
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоГода(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "Л = uk_UA; ФП = Истина" );
	
	// Период в заголовке отчета
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
	
КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
// пока не прописаны коды - вернуться
Процедура ЗаполнитьСведенияОбОрганизации()
	
	ОргНазв = Организация.НаименованиеПолное;
	мОтчетПоТруду.Области.ОргНазв.Значение = ОргНазв;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	
	ФИОДиректора       = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФИОРук;
	КодЕДРПОУ          = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодПоЕДРПОУ;
	
	Для НомЯчейки = 1 По 8 Цикл
		ЭлементыФормы["ПолеТабличногоДокументаОтчетПоТруду"].Области["ЕДРПОУ" + НомЯчейки].Значение = Сред(Строка(КодЕДРПОУ), НомЯчейки, 1);
	КонецЦикла;
	
	мОтчетПоТруду.Области.ОргДиректор.Значение = ФИОДиректора;
	мОтчетПоТруду.Области.ОргЮрАдрес.Значение  = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
	мОтчетПоТруду.Области.ОргАдрес.Значение    = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Фактический");
	
	мОтчетПоТруду.Области.Телефон.Значение = УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	мОтчетПоТруду.Области.Факс.Значение    = УправлениеКонтактнойИнформацией.ПолучитьФаксИзКонтактнойИнформации(Организация);
	мОтчетПоТруду.Области.ЕлПочта.Значение = УправлениеКонтактнойИнформацией.ПолучитьEmailИзКонтактнойИнформации(Организация);

	мОтчетПоТруду.Области.ПериодОтчета.Значение = "Січень - " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг';Л = uk_UA") + " р.";
	мОтчетПоТруду.Области.ДатаРаздел4.Значение   =  "за " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг';Л = uk_UA") + " р.";
	Если     Месяц(мДатаКонцаПериодаОтчета) = 3 Тогда
		мОтчетПоТруду.Области.ДатаРаздел6.Значение   =  " березня " + Формат(Год(мДатаКонцаПериодаОтчета), "ЧДЦ=0; ЧГ=0") + " р.";
	ИначеЕсли Месяц(мДатаКонцаПериодаОтчета) = 12  Тогда
		мОтчетПоТруду.Области.ДатаРаздел6.Значение   =  " грудня " + Формат(Год(мДатаКонцаПериодаОтчета), "ЧДЦ=0; ЧГ=0") + " р.";
	КонецЕсли;
	           
	мОтчетПоТруду.Области.КодПодразделения3.Значение = 1;
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		
		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(НСтр("ru='Отчет по труду: при выводе сумм в гривнях точность не может превышать 2 знака';uk='Звіт з праці: при виведенні сум у гривнях точність не може перевищувати 2 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		
		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(НСтр("ru='Отчет по труду: при выводе сумм в тысячах гривень точность не может превышать 3 знака';uk='Звіт з праці: при виведенні сум у тисячах гривень точність не може перевищувати 3 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		
		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(НСтр("ru='Отчет по труду: при выводе сумм в миллионах гривень точность не может превышать 6 знаков';uk='Звіт з праці: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;
		
	КонецЕсли;
	
	Сообщить(НСтр("ru='После изменения формата вывода значений, для корректного расчета итогов необходимо перезаполнить отчет!';uk='Після зміни формату виводу значень, для корректного розрахунку підсумків треба перезаполвнити звіт!'"), СтатусСообщения.Внимание);	
	
КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";
		
	КонецЕсли;
	
	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл
		
		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;
		
		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);
		
		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;
		
		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		
		Если ТипДанныхПоказателя = "Е" Тогда
			
			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];
			
			Если ПризнМногострочность <> "/" Тогда     
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			КонецЕсли;                                        
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "ОтчетПоТруду";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;
		
		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		
	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы
		
		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Коммент           = Строка.Комментарий;
			
			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Коммент)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Коммент;
			КонецЕсли;
			
			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
			
			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦветФонаЯчейки()


// Обновляет пользовательские настройки при изменении версии формы.
// унифицирована, однако использование пока ... вопрос
Процедура ОбновитьПользовательскиеНастройки()
	
	Сообщить(НСтр("ru='Измененилась версия формы отчета."
	"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
	"Виконується відновлення користувальницьких настройок.'"), СтатусСообщения.Информация);
	
	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();
	
	Если ЕстьИзмененияВариантыЗаполнения Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;
		
		Сообщить(НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Оновлення користувальницьких настройок успішно завершене!'"));
		
	Иначе
		
		Сообщить(НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі користувальницьких настройок не виявлені!'"));
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПользовательскиеНастройки()


// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()
	
	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетПоТруду";
	
	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;
	
	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	
	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
		
		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
			
			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)
	
	ИмяПоказателя = ТекущаяЯчейка.Имя;
	
	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяЯчейка) <> Тип("РисунокТабличногоДокумента") Тогда
		
		Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
			Возврат;
		КонецЕсли;
		
		Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
			ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
			Возврат;
		КонецЕсли;
		
		Если ТекущаяЯчейка.Защита Тогда
			ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетПоТруду";
	
	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;
	
	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Коммент           = НайденнаяСтрока.Комментарий;
	
	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Коммент;
	
	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);
	
КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)
	
	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетПоТруду";
	
	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;
	
	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;
	
	Если НовыйВариант = 1 Тогда
		
		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		
	ИначеЕсли НовыйВариант = 2 Тогда
		
		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет();
		КонецЕсли;
		
		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
		
		НайденнаяСтрока.Дельта = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		
	ИначеЕсли НовыйВариант = 3 Тогда
		
		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;
		
		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";
		
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		
		// Очищаем комментарий редактируемой ячейки
		ТекущаяОбласть.Примечание.Текст = "";
		
	КонецЕсли;
	
	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);
	
КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)
	
	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетПоТруду";
	
	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;
	
	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;
		
		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Коммент)
	
	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетПоТруду";
	
	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;
	
	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Коммент;
	КонецЕсли;
	
	ТекущаяОбласть.Примечание.Текст = Коммент;
	
КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)
	
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		Если Тип ("РисунокТабличногоДокумента") <> ТипЗнч (ТекущаяОбласть) Тогда
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ТекущаяОбласть.СодержитЗначение Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяОбласть.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить()
	
	// Очищаем содержимое ячеек поля табличного документа
	ТекТабличноеПоле = мОтчетПоТруду;
	
	СохранитьГраницыРаспределенияРаздел3();
	ОчиститьТабличноеПоле(ТекТабличноеПоле);
	ВосстановитьГраницыРаспределенияРаздел3();
	
	ПоказатьПериод();
	// Выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();
	
	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;
	ЗаполнитьСведенияОбОрганизации();
	
КонецПроцедуры // Очистить()

Процедура РазбитьПечатнуюФорму(ПечФорма)
	
	ИмяФормы = "ОтчетПоТруду";
	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = Истина;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	Если ЕстьДуплекс Тогда
		НовТаблДок = Новый ТабличныйДокумент();
	КонецЕсли;
	
	Для Сч = 1 По ПечФорма.ВысотаТаблицы Цикл
		
		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			// проверим, не должна ли предпоследняя строка печататься вместе со текущей ("не влезшей") строкой.
			// если так, то "откатимся" вверх
			Пока ПослВерх < Сч-1 И ПечФорма.ПолучитьОбласть(Сч-1, , Сч-1, ).Область().ВместеСоСледующим Цикл
				Сч = Сч - 1;
			КонецЦикла; 
			
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		Если НЕ ЕстьДуплекс Тогда
			НовТаблДок = Новый ТабличныйДокумент();
		КонецЕсли;
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = Истина;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		Если НЕ ЕстьДуплекс Тогда
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
		КонецЕсли;
	КонецЕсли;
	Если ЕстьДуплекс Тогда
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати)
	мПечатныеФормы.Очистить();
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ОбластьПечати = мОтчетПоТруду.ПолучитьОбласть("Шапка");
	ПечатнаяФорма.Вывести(ОбластьПечати);
	
	ОбластьПечати = мОтчетПоТруду.ПолучитьОбласть("Отчет");
	ПечатнаяФорма.Вывести(ОбластьПечати);
	
	ОбластьПечати = мОтчетПоТруду.ПолучитьОбласть("Отчет2");
	ПечатнаяФорма.Вывести(ОбластьПечати);
	
	ОбластьПечати = мОтчетПоТруду.ПолучитьОбласть("Подвал");
	ПечатнаяФорма.Вывести(ОбластьПечати);
	
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
	
	РазбитьПечатнуюФорму(ПечатнаяФорма);
	
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	
КонецПроцедуры // Печать()


// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция  Сохранить()  Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.
		
		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;
		
		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаОтчетПоТруду";
	
	ТекТабличноеПоле        = мОтчетПоТруду;
	
	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// Сохраняем выбранные листы для печати в хранилище
	ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
	мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Расшифровка;
	
	// восстанавливаем реквизиты отчета
	Организация              = мСохраненныйДок.Организация;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;
	
	ЭлементыФормы.НазваниеОрганизации.Заголовок= Организация.Наименование;
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;
	
	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			
			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьФорматВывода();
	Расчет();
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()
	
	мОтчетПоТруду.Области.П4040_1.Значение =  мОтчетПоТруду.Области.П4050_1.Значение
											+ мОтчетПоТруду.Области.П4060_1.Значение
											+ мОтчетПоТруду.Области.П4070_1.Значение
											+ мОтчетПоТруду.Области.П4080_1.Значение
											+ мОтчетПоТруду.Области.П4090_1.Значение
											+ мОтчетПоТруду.Области.П4100_1.Значение
											+ мОтчетПоТруду.Области.П4110_1.Значение;
	
	мОтчетПоТруду.Области.П4010_1.Значение =  мОтчетПоТруду.Области.П4020_1.Значение
											+ мОтчетПоТруду.Области.П4040_1.Значение;
	
	
	мОтчетПоТруду.Области.П5010_1.Значение = мОтчетПоТруду.Области.П5020_1.Значение
											+ мОтчетПоТруду.Области.П5030_1.Значение
											+ мОтчетПоТруду.Области.П5060_1.Значение;
	
	мОтчетПоТруду.Области.П6010_1.Значение = мОтчетПоТруду.Области.П6020_1.Значение
											+ мОтчетПоТруду.Области.П6030_1.Значение
											+ мОтчетПоТруду.Области.П6040_1.Значение
											+ мОтчетПоТруду.Области.П6050_1.Значение
											+ мОтчетПоТруду.Области.П6060_1.Значение
											+ мОтчетПоТруду.Области.П6070_1.Значение
											+ мОтчетПоТруду.Области.П6080_1.Значение
											+ мОтчетПоТруду.Области.П6090_1.Значение
											+ мОтчетПоТруду.Области.П6100_1.Значение
											+ мОтчетПоТруду.Области.П6110_1.Значение
											+ мОтчетПоТруду.Области.П6120_1.Значение;
	
КонецПроцедуры // Расчет()

Функция СформироватьМассивЛиц(ИмяМассиваИсх,ТолькоЖенщины)
	ИмяМассиваРезультат = Новый Массив;
	Для каждого эл из ИмяМассиваИсх Цикл
		Если ТолькоЖенщины Тогда
			Если эл.Сотрудник.ФизЛицо.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
				ИмяМассиваРезультат.Добавить(эл.Сотрудник);
			КонецЕсли;
		Иначе
			ИмяМассиваРезультат.Добавить(эл.Сотрудник);
		КонецЕсли
	КонецЦикла;	
	Возврат(ИмяМассиваРезультат);
КонецФункции

Функция ОбработатьТаблицу(РезультатЗапроса)
	Если Не РезультатЗапроса.Пустой() Тогда
		ТаблицаНачислено = РезультатЗапроса.Выгрузить();
		Если ТаблицаНачислено[0].Результат<>NULL Тогда
			Сумма = ТаблицаНачислено[0].Результат;	
		Иначе
			Сумма = 0;	
		КонецЕсли;
	КонецЕсли; 
	Возврат (Сумма);
КонецФункции

Процедура СформироватьМассивыРазличныхКатегорийРаботников()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизаций.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	РаботникиОрганизаций.Сотрудник.ФизЛицо.Пол  КАК Пол
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций	КАК РаботникиОрганизаций
	|ГДЕ
	|	  РаботникиОрганизаций.Период МЕЖДУ &ДатаНач И &ДатаКон
	|   И РаботникиОрганизаций.Организация = &Организация
	|   И РаботникиОрганизаций.ЗанимаемыхСтавок > 0
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизаций.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	РаботникиОрганизаций.Сотрудник.ФизЛицо.Пол  КАК Пол
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНач,Организация = &Организация) КАК РаботникиОрганизаций
	|ГДЕ
	|   РаботникиОрганизаций.ЗанимаемыхСтавок > 0
	|";
	
	//получаем число женщин штатного состава и число внешних совместителей за период
	ЗапросПоШтатнымСовм = Новый Запрос();
	ЗапросПоШтатнымСовм.Текст = ТекстЗапроса;
	ЗапросПоШтатнымСовм.УстановитьПараметр("Организация", Организация);
	ЗапросПоШтатнымСовм.УстановитьПараметр("ДатаНач",НачалоГода(мДатаНачалаПериодаОтчета));
	ЗапросПоШтатнымСовм.УстановитьПараметр("ДатаКон",мДатаКонцаПериодаОтчета);
	
	ТаблицаШтатныхСовместителей = ЗапросПоШтатнымСовм.Выполнить().Выгрузить();
	
	СтрокиШтатных 		= ТаблицаШтатныхСовместителей.НайтиСтроки(Новый Структура("ВидЗанятости",Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы));
	МассивЖенщин 		= СформироватьМассивЛиц(СтрокиШтатных,Истина);
	
	СтрокиСовместителей = ТаблицаШтатныхСовместителей.НайтиСтроки(Новый Структура("ВидЗанятости",Перечисления.ВидыЗанятостиВОрганизации.Совместительство));
	МассивСовм 			= СформироватьМассивЛиц(СтрокиСовместителей,Ложь);
	
	// получим список штатников только за последний месяц
	ЗапросПоШтатнымСовм.УстановитьПараметр("ДатаНач",НачалоМесяца(мДатаКонцаПериодаОтчета));
	ЗапросПоШтатнымСовм.УстановитьПараметр("ДатаКон",мДатаКонцаПериодаОтчета);
	
	ТаблицаШтатныхСовместителей = ЗапросПоШтатнымСовм.Выполнить().Выгрузить();
	СтрокиШтатных 		= ТаблицаШтатныхСовместителей.НайтиСтроки(Новый Структура("ВидЗанятости",Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы));
	МассивШтПоследнийМес= СформироватьМассивЛиц(СтрокиШтатных,Ложь);
	
	// получим список работников по ГПХ
	Если    (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП") 
		ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") 
		ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "УТП") Тогда
		
		ТекстЗапросаГПХ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудник КАК Сотрудник
		|ИЗ
		|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК Работники
		|ГДЕ
		|	  Работники.Проведен
		|	И Работники.ДатаНачала <= &парамКонец
		|	И Работники.ДатаОкончания >= &парамНачало
		|	И Работники.Организация = &Организация";
		
		ЗапросПоГПХ = Новый Запрос();
		ЗапросПоГПХ.УстановитьПараметр("Организация", Организация);
		ЗапросПоГПХ.УстановитьПараметр("парамНачало", НачалоГода(мДатаНачалаПериодаОтчета));
		ЗапросПоГПХ.УстановитьПараметр("парамКонец",  мДатаКонцаПериодаОтчета);
		ЗапросПоГПХ.Текст = ТекстЗапросаГПХ; 
		ТаблицаГПХ = ЗапросПоГПХ.Выполнить().Выгрузить();
		
		МассивГПХ = СформироватьМассивЛиц(ТаблицаГПХ,Ложь);
		
	КонецЕсли;	
	
КонецПроцедуры	
     
Процедура РасчетНачисленийПоКатегориямРаботников()
	
	//начисления работников без разбиения - за весь отчетный период
	//ФОТ штатных работников
	ТекстЗапроса = "
	|ВЫБРАТЬ
	| СУММА(ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовПриход) КАК Результат
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Обороты(&НачДата,&КонДата,, Организация = &Организация
	|																					 И СчетУчета = &парамСчет
	| 																					 И Сотрудник В (&МассЛиц)) КАК ВзаиморасчетыСРаботниками
	|";
	
	ЗапросНачислено = Новый Запрос();
	ЗапросНачислено.Текст = ТекстЗапроса;
	ЗапросНачислено.УстановитьПараметр("НачДата", НачалоГода(мДатаНачалаПериодаОтчета));
	ЗапросНачислено.УстановитьПараметр("КонДата" ,мДатаКонцаПериодаОтчета);
	ЗапросНачислено.УстановитьПараметр("парамСчет", Счет661);
	ЗапросНачислено.УстановитьПараметр("Организация", Организация);
	
	ЗапросНачислено.УстановитьПараметр("МассЛиц", МассивЖенщин);
	РезультатЗапроса = ЗапросНачислено.Выполнить();
	мОтчетПоТруду.Области.П7010_2.Значение = ОбработатьТаблицу(РезультатЗапроса);
	
	ЗапросНачислено.УстановитьПараметр("МассЛиц", МассивСовм);
	РезультатЗапроса = ЗапросНачислено.Выполнить();
	мОтчетПоТруду.Области.П7030_2.Значение = ОбработатьТаблицу(РезультатЗапроса);
	
	ЗапросНачислено.УстановитьПараметр("МассЛиц", МассивГПХ);
	РезультатЗапроса = ЗапросНачислено.Выполнить();
	мОтчетПоТруду.Области.П7040_2.Значение = ОбработатьТаблицу(РезультатЗапроса);	
	
	// количестов отработанных чел-час для женщин.
	Если РегламентированнаяОтчетность.ИДКонфигурации() ="УПП" 
	 ИЛИ РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП" Тогда
		ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций";
	Иначе
		ИмяРегистра = "Начисления";
	КонецЕсли;
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СУММА( ВЫБОР
	|				КОГДА Рег.Сторно
	|				ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ * Рег.ОтработаноЧасов) КАК Результат
	|ИЗ
	|	РегистрРасчета."+ИмяРегистра+" КАК Рег
	|ГДЕ
	|	  Рег.ПериодРегистрации МЕЖДУ &НачДата И &КонДата
	|	И Рег.Организация = &Организация
	|	И Рег.Активность
	|	И Сотрудник В (&МассЛиц);
	|";
	ЗапросОтработано = Новый Запрос();
	ЗапросОтработано.Текст = ТекстЗапроса;
	ЗапросОтработано.УстановитьПараметр("НачДата", НачалоГода(мДатаНачалаПериодаОтчета));
	ЗапросОтработано.УстановитьПараметр("КонДата" ,мДатаКонцаПериодаОтчета);
	ЗапросОтработано.УстановитьПараметр("Организация", Организация);
	ЗапросОтработано.УстановитьПараметр("МассЛиц", МассивЖенщин);
	РезультатЗапроса = ЗапросОтработано.Выполнить();
	мОтчетПоТруду.Области.П7010_3.Значение = ОбработатьТаблицу(РезультатЗапроса);
	
КонецПроцедуры	

Процедура РазбитьНачисленияПоШкале(ТаблицаНачислений)
	
	Для каждого стр Из ТаблицаНачислений Цикл
		Если (стр.Результат <= мОтчетПоТруду.Области.Пр100.Значение) Тогда 
			мОтчетПоТруду.Области.П6020_1.Значение = мОтчетПоТруду.Области.П6020_1.Значение + 1;
			
		ИначеЕсли (стр.Результат >= мОтчетПоТруду.Области.Пр2.Значение) и (стр.Результат <= мОтчетПоТруду.Области.Пр200.Значение) Тогда 
			мОтчетПоТруду.Области.П6030_1.Значение = мОтчетПоТруду.Области.П6030_1.Значение + 1;
			
		ИначеЕсли (стр.Результат >= мОтчетПоТруду.Области.Пр3.Значение) и (стр.Результат <= мОтчетПоТруду.Области.Пр300.Значение) Тогда 
			мОтчетПоТруду.Области.П6040_1.Значение = мОтчетПоТруду.Области.П6040_1.Значение + 1;
			
		ИначеЕсли (стр.Результат >= мОтчетПоТруду.Области.Пр4.Значение) и (стр.Результат <= мОтчетПоТруду.Области.Пр400.Значение) Тогда 
			мОтчетПоТруду.Области.П6050_1.Значение = мОтчетПоТруду.Области.П6050_1.Значение + 1;
			
		ИначеЕсли (стр.Результат >= мОтчетПоТруду.Области.Пр5.Значение) и (стр.Результат <= мОтчетПоТруду.Области.Пр500.Значение) Тогда 	
			мОтчетПоТруду.Области.П6060_1.Значение = мОтчетПоТруду.Области.П6060_1.Значение + 1;
			
		ИначеЕсли (стр.Результат >= мОтчетПоТруду.Области.Пр6.Значение) и (стр.Результат <= мОтчетПоТруду.Области.Пр600.Значение) Тогда 	
			мОтчетПоТруду.Области.П6070_1.Значение = мОтчетПоТруду.Области.П6070_1.Значение + 1;
			
		ИначеЕсли (стр.Результат >= мОтчетПоТруду.Области.Пр7.Значение) и (стр.Результат <= мОтчетПоТруду.Области.Пр700.Значение) Тогда 
			мОтчетПоТруду.Области.П6080_1.Значение = мОтчетПоТруду.Области.П6080_1.Значение + 1;
			
		ИначеЕсли (стр.Результат >= мОтчетПоТруду.Области.Пр8.Значение) и (стр.Результат <= мОтчетПоТруду.Области.Пр800.Значение) Тогда 
			мОтчетПоТруду.Области.П6090_1.Значение = мОтчетПоТруду.Области.П6090_1.Значение + 1;
			
		ИначеЕсли (стр.Результат >= мОтчетПоТруду.Области.Пр9.Значение) и (стр.Результат <= мОтчетПоТруду.Области.Пр900.Значение) Тогда 
			мОтчетПоТруду.Области.П6100_1.Значение = мОтчетПоТруду.Области.П6100_1.Значение + 1;
			
		ИначеЕсли (стр.Результат >= мОтчетПоТруду.Области.Пр10.Значение) и (стр.Результат <= мОтчетПоТруду.Области.Пр1000.Значение) Тогда 
			мОтчетПоТруду.Области.П6110_1.Значение = мОтчетПоТруду.Области.П6110_1.Значение + 1;
			
		Иначе
			мОтчетПоТруду.Области.П6120_1.Значение = мОтчетПоТруду.Области.П6120_1.Значение + 1;
		КонецЕсли;	
		
	КонецЦикла; 
	
КонецПроцедуры	

Функция ДатаНачалаНачисленийТекПериода(НачДата, КонДата, Организация, ИмяРегистра)

	НачДатаПрошлыеОтпуска = мДатаНачалаПериодаОтчета;
	ЗапросПериода = Новый Запрос;
	ЗапросПериода.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	НАЧАЛОПЕРИОДА(РегистрДанных.Период, МЕСЯЦ) КАК НачДатаПрошлыеОтпуска
	                      |ИЗ
	                      |	РегистрНакопления."+ИмяРегистра+".Обороты(,&КонДата,МЕСЯЦ,
	                      |				  Организация = &Организация
	                      |				И ПериодВзаиморасчетов >= &НачДата
	                      |				И ПериодВзаиморасчетов <= &КонДата) КАК РегистрДанных
	                      |ГДЕ
	                      |	Период < &НачДата
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НачДатаПрошлыеОтпуска";
						  
	ЗапросПериода.УстановитьПараметр("НачДата", НачДата);
	ЗапросПериода.УстановитьПараметр("КонДата" ,КонДата);
	ЗапросПериода.УстановитьПараметр("Организация" ,Организация);
	Выборка = ЗапросПериода.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НачДатаПрошлыеОтпуска;
	Иначе
		Возврат НачДата;
	КонецЕсли;
	
КонецФункции

Процедура РасчетНачисленийШтатныхРаботников()
	
	//начисления штатных работников для разбиения
	ЗапросОбшийФОТ = Новый Запрос;
	ЗапросОбшийФОТ.УстановитьПараметр("парамСчет", Счет661);
	ЗапросОбшийФОТ.Текст = "
	|ВЫБРАТЬ
	|  СУММА(СуммаВзаиморасчетовПриход) КАК Результат,
	|  Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Обороты(&ДатаНачалаНачислений,&КонДата,МЕСЯЦ,Организация = &Организация
	|																					  И ПериодВзаиморасчетов >= &НачДата
	|																					  И ПериодВзаиморасчетов <= &КонДата
	|	                                                                                  И Сотрудник В(&МассивШтПоследнийМес)
	|																					  И СчетУчета = &парамСчет) КАК ВзаиморасчетыСРаботниками
	|ГДЕ 
	|	ПериодВзаиморасчетов МЕЖДУ &НачДата И &КонДата
	|СГРУППИРОВАТЬ ПО 
	|	Сотрудник	 
	|";
	
	ЗапросОбшийФОТ.УстановитьПараметр("НачДата", НачалоМесяца(мДатаКонцаПериодаОтчета));
	ЗапросОбшийФОТ.УстановитьПараметр("КонДата", мДатаКонцаПериодаОтчета);
	ЗапросОбшийФОТ.УстановитьПараметр("ДатаНачалаНачислений", ДатаНачалаНачисленийТекПериода(НачалоМесяца(мДатаКонцаПериодаОтчета), мДатаКонцаПериодаОтчета, Организация, "ВзаиморасчетыСРаботникамиОрганизаций"));
	ЗапросОбшийФОТ.УстановитьПараметр("Организация",   Организация);
	ЗапросОбшийФОТ.УстановитьПараметр("МассивШтПоследнийМес",МассивШтПоследнийМес); 
	ТаблицаШтатМесНачисления = ЗапросОбшийФОТ.Выполнить().Выгрузить();
	
	РазбитьНачисленияПоШкале(ТаблицаШтатМесНачисления);
	
КонецПроцедуры	

Процедура РасчетПоказателейКоличестваРаботников()
	
	ТаблСреднеспЧисленности = ПроведениеРасчетов.ПолучитьСреднююЧисленность(НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета, "ССЧ", "МЕСЯЦСНАЧАЛАГОДА", Организация, "Штат"); 
	мОтчетПоТруду.Области.П3010_1.Значение = ТаблСреднеспЧисленности[0].Средняя;
	
	//получения числа принятых/уволенных
	ЗапросПриемУвольнение = Новый Запрос;
	ЗапросПриемУвольнение.УстановитьПараметр("ДатаНач", НачалоГода(мДатаНачалаПериодаОтчета));
	ЗапросПриемУвольнение.УстановитьПараметр("ДатаКон", мДатаКонцаПериодаОтчета + 1);
	ЗапросПриемУвольнение.УстановитьПараметр("Организация", Организация);
	ЗапросПриемУвольнение.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	ЗапросПриемУвольнение.УстановитьПараметр("ПриемНаРаботу", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	ЗапросПриемУвольнение.УстановитьПараметр("Увольнение",Перечисления.ПричиныИзмененияСостояния.Увольнение);
	
	ЗапросПриемУвольнение.Текст = "
	|ВЫБРАТЬ Различные
	|РаботникиОрганизаций.Сотрудник					КАК Сотрудник,
	|РаботникиОрганизаций.Сотрудник.ФизЛицо.Пол     КАК Пол,
	|РаботникиОрганизаций.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния
	|
	|ИЗ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ РаботникиОрганизаций.Период МЕЖДУ &ДатаНач И &ДатаКон 
	|И (РаботникиОрганизаций.Организация = &Организация)
	|И НЕ (РаботникиОрганизаций.Сотрудник.ВидЗанятости = &ВнутреннееСовместительство)
	|И (РаботникиОрганизаций.ПричинаИзмененияСостояния = &ПриемНаРаботу    ИЛИ РаботникиОрганизаций.ПричинаИзмененияСостояния = &Увольнение)
	|И НЕ (РаботникиОрганизаций.ПричинаИзмененияСостояния = &ПриемНаРаботу И   РаботникиОрганизаций.Период = &ДатаКон)";
	
	ТаблицаПриемУвольнение = ЗапросПриемУвольнение.Выполнить().Выгрузить();
	
	ПараметрыОтбора = Новый Структура();
	// принятые все
	ПараметрыОтбора.Вставить("ПричинаИзмененияСостояния",Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	мОтчетПоТруду.Области.П3020_1.Значение =  ТаблицаПриемУвольнение.НайтиСтроки(ПараметрыОтбора).Количество();
	// принятые женщины
	ПараметрыОтбора.Вставить("Пол",Перечисления.ПолФизическихЛиц.Женский);
	мОтчетПоТруду.Области.П3020_2.Значение =  ТаблицаПриемУвольнение.НайтиСтроки(ПараметрыОтбора).Количество();
	// уволенные женщины
	ПараметрыОтбора.Вставить("ПричинаИзмененияСостояния",Перечисления.ПричиныИзмененияСостояния.Увольнение);
	мОтчетПоТруду.Области.П3040_2.Значение =  ТаблицаПриемУвольнение.НайтиСтроки(ПараметрыОтбора).Количество();
	// уволенные все
	ПараметрыОтбора.Удалить("Пол");
	мОтчетПоТруду.Области.П3040_1.Значение =  ТаблицаПриемУвольнение.НайтиСтроки(ПараметрыОтбора).Количество();
	
	//число штатных на конец месяца	
	ЗапросПоШтатным = Новый Запрос();
	ЗапросПоШтатным.УстановитьПараметр("Организация",         Организация);
	ЗапросПоШтатным.УстановитьПараметр("ОсновноеМестоРаботы", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	ЗапросПоШтатным.УстановитьПараметр("ДатаКон",  			  мДатаКонцаПериодаОтчета);
	ЗапросПоШтатным.Текст = "
	|ВЫБРАТЬ 
	|	Количество(Сотрудник) КАК КоличествоВсего,
	|	Количество(ВЫБОР КОГДА Сотрудник.ФизЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский) ТОГДА 1 ИНАЧЕ NULL КОНЕЦ) КАК КоличествоЖенщин
	|
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаКон, Организация = &Организация 
	|																  И Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы)	КАК РаботникиОрганизаций
	|
	|ГДЕ 	
	|	ЗанимаемыхСтавок > 0
	|";
	Результат = ЗапросПоШтатным.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		мОтчетПоТруду.Области.П3070_1.Значение = Результат.КоличествоВсего;
		мОтчетПоТруду.Области.П3070_2.Значение = Результат.КоличествоЖенщин;		
	КонецЕсли;
	
КонецПроцедуры	

Процедура РасчетИспользованиеРабочегоВремениШтатныхРаботников()
	
	Запрос = Новый Запрос;
	
	Если    РегламентированнаяОтчетность.ИДКонфигурации()= "УТП" 
		ИЛИ РегламентированнаяОтчетность.ИДКонфигурации() = "БП"  Тогда 
		ИмяРегистра = "Начисления" 
	Иначе
		ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций"
	КонецЕсли;	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.ВидИспользованияРабочегоВремени КАК СтатьяДекларации,
	|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
	|	СУММА(ВЫБОР
	|				КОГДА ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов = 0
	|						ТОГДА ОсновныеНачисленияРаботниковОрганизации.НормаЧасов
	|				ИНАЧЕ ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов
	|				КОНЕЦ)  КАК КвоЧасов
	|ИЗ РегистрРасчета." + ИмяРегистра + " КАК ОсновныеНачисленияРаботниковОрганизации
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОсновныеНачисленияРаботниковОрганизации.Организация = &парамОрганизация
	|	И ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ВидЗанятости = &ВидЗанятости
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.ВидИспользованияРабочегоВремени,
	|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода" ,мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("парамОрганизация",  Организация);
	Запрос.УстановитьПараметр("ВидЗанятости",Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
		
		НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_Отработано;
		РасчетПоСтатьеРаздел2(ТаблицаРезультатов, НужнаяСтатья,"П4020_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_ОтработаноСверхурочно;
		////РасчетПоСтатьеРаздел2(ТаблицаРезультатов, НужнаяСтатья,"П4030_1");
		РасчетПоСтатьеРаздел2(ТаблицаРезультатов, НужнаяСтатья,"П4020_1"); //в том числе
		
		НужнаяСтатья = Новый Массив();
		НужнаяСтатья.Добавить(СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноЕжегодныеОтпуска);
		НужнаяСтатья.Добавить(СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноУчебныеОтпуска);
		РасчетПоСтатьеРаздел2(ТаблицаРезультатов, НужнаяСтатья,"П4050_1","П4050_2");
		
		
		НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноВременнаяНетрудоспособность;
		РасчетПоСтатьеРаздел2(ТаблицаРезультатов, НужнаяСтатья,"П4060_1","П4060_2");
		
		НужнаяСтатья = Новый Массив();
		НужнаяСтатья.Добавить(СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноНеявкаСРазрешенияАдминистрации);
		НужнаяСтатья.Добавить(СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноОтпускПоИнициативеАдминистрации);
		РасчетПоСтатьеРаздел2(ТаблицаРезультатов, НужнаяСтатья,"П4070_1", "П4070_2"); 
		
		
		НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноПростои;
		РасчетПоСтатьеРаздел2(ТаблицаРезультатов, НужнаяСтатья,"П4080_1", "П4080_2"); 
		
		
		НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноНеявкаСвязаннаяСПереводомНаСокращенныйГрафик;
		РасчетПоСтатьеРаздел2(ТаблицаРезультатов, НужнаяСтатья,"П4090_1", "П4090_2"); 
		
		
		НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноМасовыйНеВыход;
		РасчетПоСтатьеРаздел2(ТаблицаРезультатов, НужнаяСтатья,"П4100_1", "П4100_2"); 
		
		
		НужнаяСтатья = Новый Массив();
		НужнаяСтатья.Добавить(СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноДругиеПричины);
		НужнаяСтатья.Добавить(СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноВСвязиСРаботойНаДругомПредприятии);
		РасчетПоСтатьеРаздел2(ТаблицаРезультатов, НужнаяСтатья,"П4110_1"); 

	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетПоСтатьеРаздел2(ТаблицаРезультатов, СтатьяПоиска, ИмяПоказателяГрафыКвоЧасов="",ИмяПоказателяГрафыКвоРаботников="")
	
	спРаботники = Новый Массив();
	
	ПоказательКвоЧасов = 0;
	ПоказательКвоРаботников = 0;
	Если ТипЗнч(СтатьяПоиска) = Тип("Массив") Тогда
	
		МассивСтатей = СтатьяПоиска;	
		
	Иначе
		
		МассивСтатей = Новый Массив();
		МассивСтатей.Добавить(СтатьяПоиска);
		
	КонецЕсли;
	
	Для каждого ТекСтатьяПоиска Из МассивСтатей Цикл
	
		НайденныеСтроки = ТаблицаРезультатов.НайтиСтроки(Новый Структура("СтатьяДекларации", ТекСтатьяПоиска));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
				Если ИмяПоказателяГрафыКвоЧасов<>"" Тогда
					ПоказательКвоЧасов = ПоказательКвоЧасов+СтрокаТЗ.КвоЧасов;
				КонецЕсли;
				Если ИмяПоказателяГрафыКвоРаботников<>"" Тогда
					Если спРаботники.Найти(СтрокаТЗ.Сотрудник)= Неопределено Тогда
						спРаботники.Добавить(СтрокаТЗ.Сотрудник);
						ПоказательКвоРаботников = ПоказательКвоРаботников+1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
	
	КонецЦикла;
	
	Если ИмяПоказателяГрафыКвоЧасов<>"" Тогда
		мОтчетПоТруду.Области[ИмяПоказателяГрафыКвоЧасов].Значение = мОтчетПоТруду.Области[ИмяПоказателяГрафыКвоЧасов].Значение + ПоказательКвоЧасов;
	КонецЕсли;
	Если ИмяПоказателяГрафыКвоРаботников<>"" Тогда
		мОтчетПоТруду.Области[ИмяПоказателяГрафыКвоРаботников].Значение = мОтчетПоТруду.Области[ИмяПоказателяГрафыКвоРаботников].Значение + ПоказательКвоРаботников;
	КонецЕсли;
	
КонецПроцедуры

Процедура  РасчетФОТиПрочихВыплат()
	
	Если    РегламентированнаяОтчетность.ИДКонфигурации() = "УПП" 
		ИЛИ РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП" Тогда 
		ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций";
	Иначе 
		ИмяРегистра = "Начисления";
	КонецЕсли;
	ТекстЗапроса =  "ВЫБРАТЬ
					|	СУММА(Начисления.Результат) КАК Сумма,
					|	Начисления.ВидРасчета.ПоказателиВидовОплатыТруда КАК СтатьяДекларации
					|ИЗ
					|	РегистрРасчета."+ИмяРегистра+" КАК Начисления
					|ГДЕ
					|	  Начисления.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
					|	И Начисления.Организация = &парамОрганизация
					|	И Начисления.Сотрудник.ВидЗанятости = &ВидЗанятости
					|
					|СГРУППИРОВАТЬ ПО
					|	ВидРасчета.ПоказателиВидовОплатыТруда";
		
	Запрос = Новый Запрос ();
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода" , мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("парамОрганизация",  Организация);
	Запрос.УстановитьПараметр("ВидЗанятости",Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
		
		НужнаяСтатья =  СтрокиДекларации.ОтчетПоТруду_ФОТ;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5020_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_ФОТ_ДополнЗП;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5030_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_НадбавкиКОкладам;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5040_1","П5030_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_Премии;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5050_1","П5030_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_КомпенНевыплачЗП;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5030_1"); 
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_КомпенРостЦен;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5030_1"); 
		
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_ФОТ_Компенсация;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5060_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_МатПомощь;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5070_1","П5060_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_СоцЛьготы;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5080_1","П5060_1");
		
		
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_ФОТ_НеотработанноеВремя;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5090_1","П5060_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_Отпуск;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5090_1","П5030_1");
		
		// Рядки 4120 - 4150 заповнюються у звіті за січень - грудень
		Если Месяц(мДатаКонцаПериодаОтчета) = 12 Тогда
			
			НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_Соцстрах;
			РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5100_1");
			
			НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_БольничныеПредприятие;
			//РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5110","П5100_1");
			РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5110_1","П5100_1");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетПоСтатьеРаздел3(ТаблицаРезультатов, СтатьяПоиска, ИмяПоказателяГрафы="", ИмяПоказателяГрафыИзКоторойЭтаВТомЧисле="")
	
	Перем НайденнаяСтрока, ПоказательГрафы;
	НайденнаяСтрока = ТаблицаРезультатов.Найти (СтатьяПоиска,"СтатьяДекларации" ); 
	Если (НайденнаяСтрока <> Неопределено ) Тогда
		ПоказательГрафы = НайденнаяСтрока.Сумма;
	Иначе
		ПоказательГрафы = 0;
	КонецЕсли;
	мОтчетПоТруду.Области[ИмяПоказателяГрафы].Значение = мОтчетПоТруду.Области[ИмяПоказателяГрафы].Значение + ПоказательГрафы;
	Если ЗначениеЗаполнено(ИмяПоказателяГрафыИзКоторойЭтаВТомЧисле) Тогда
		мОтчетПоТруду.Области[ИмяПоказателяГрафыИзКоторойЭтаВТомЧисле].Значение = мОтчетПоТруду.Области[ИмяПоказателяГрафыИзКоторойЭтаВТомЧисле].Значение + ПоказательГрафы;
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределениеРаботниковПоРазмеруЗП()
	
	//расчета показателей раздела IV
	Если ПроверитьГраницыРаспределенияРаздел4() Тогда
		РасчетНачисленийШтатныхРаботников();
	КонецЕсли;
	
	//Заполнение  строк 6130..6150 
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УПП" 
	 ИЛИ РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП" Тогда
	     ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций";
	Иначе
	     ИмяРегистра = "Начисления";
	КонецЕсли;
	 
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник,
	|	СУММА(Начисления.Результат) КАК Результат
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Месяц,Организация = &Организация И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)) КАК РаботникиОрганизаций
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрРасчета."+ИмяРегистра+" КАК Начисления
	|	По Начисления.Сотрудник = РаботникиОрганизаций.Сотрудник
	|
	|ГДЕ
	|	  Начисления.ПериодРегистрации = &Месяц
	|	И Начисления.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО 
	|	РаботникиОрганизаций.Сотрудник
	|ИМЕЮЩИЕ 
	|	  СУММА(Начисления.НормаДней) = СУММА(Начисления.ОтработаноДней)
	|	И СУММА(Начисления.НормаДней) > 0
	|	И СУММА(Начисления.Результат) > 0";
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Месяц",НачалоМесяца(мДатаКонцаПериодаОтчета));
	Выборка = Запрос.Выполнить().Выбрать();
	
	мОтчетПоТруду.Области.П6130_1.Значение = Выборка.Количество(); 
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Результат <= МинОплатаТруда Тогда
			мОтчетПоТруду.Области.П6140_1.Значение = мОтчетПоТруду.Области.П6140_1.Значение + 1;
		КонецЕсли;	
	КонецЦикла;
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
	    УсловиеЭтоОклад = "ВидРасчетаИзмерение.ЭтоОклад";
	Иначе	
		УсловиеЭтоОклад = "ВидРасчетаИзмерение = &ПустоеЗначениеВР"
	КонецЕсли;
	
	Если  РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
	    Размер = "Размер";
	Иначе	
		Размер  = "Показатель1";
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНач,Организация = &Организация И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)) КАК РаботникиОрганизаций
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&ДатаНач,  Организация = &Организация
	|																				   И "+ УсловиеЭтоОклад+ ") КАК Начисления
	|ПО Начисления.Сотрудник = РаботникиОрганизаций.Сотрудник
	|
	|ГДЕ
	|	   Начисления."+Размер+" <= &ПрожиточныйМинимум
	|	 И РаботникиОрганизаций.ЗанимаемыхСтавок > 0
	|";
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ДатаНач",мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ПрожиточныйМинимум",ПрожиточныйМинимум);
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
		Запрос.УстановитьПараметр("ПустоеЗначениеВР",ПланыВидовРасчета.Начисления.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("ПустоеЗначениеВР",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка());
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	мОтчетПоТруду.Области.П6150_1.Значение = Выборка.Количество();

КонецПроцедуры
	
Процедура РасчетКоличестваИФОПКатегорийРаботников()	
	
	ТаблЧисленностиССЧЖ = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "ССЧ", "КВАРТАЛСНАЧАЛАГОДА", Организация, "ЖШТАТ"); 
	мОтчетПоТруду.Области.П7010_1.Значение = ТаблЧисленностиССЧЖ[0].Средняя;
	
	ТаблЧисленностиСовм = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "ССЧ", "КВАРТАЛСНАЧАЛАГОДА", Организация, "СОВМ"); 
	мОтчетПоТруду.Области.П7030_1.Значение = ТаблЧисленностиСовм[0].Средняя;
	
	ТаблЧисленностиССЧГПХ = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "ССЧ", "КВАРТАЛСНАЧАЛАГОДА", Организация, "ГПХ"); 
	мОтчетПоТруду.Области.П7040_1.Значение = ТаблЧисленностиССЧГПХ[0].Средняя;
	
	СформироватьМассивыРазличныхКатегорийРаботников();
	РасчетНачисленийПоКатегориямРаботников();
	
КонецПроцедуры	

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто()  Экспорт
	
	// заполним глоб переменные
	МинОплатаТруда = 0;
	ЗапросЗначениеМинЗарплаты = Новый Запрос;
	ЗапросЗначениеМинЗарплаты.УстановитьПараметр("Дата", НачалоМесяца(мДатаКонцаПериодаОтчета));
	ЗапросЗначениеМинЗарплаты.Текст = "
	|ВЫБРАТЬ 
	|   ЕстьNULL(Размер,0) КАК Размер
	|ИЗ
	|	РегистрСведений.МинимальнаяОплатаТруда.СрезПоследних (&Дата) 
	|";
	РезультатЗапроса = ЗапросЗначениеМинЗарплаты.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		МинОплатаТруда = РезультатЗапроса.Размер;
	КонецЕсли;

	ПрожиточныйМинимум = 0;
	ЗапросЗначениеПрожиточногоМинимума = Новый Запрос;
	ЗапросЗначениеПрожиточногоМинимума.УстановитьПараметр("Дата", НачалоМесяца(мДатаКонцаПериодаОтчета));
	ЗапросЗначениеПрожиточногоМинимума.УстановитьПараметр("Трудящиеся", Перечисления.СоциальныеГруппыНаселения.Трудоспособные);
	ЗапросЗначениеПрожиточногоМинимума.Текст = "
	|ВЫБРАТЬ 
	|   ЕстьNULL(Размер,0) КАК Размер
	|ИЗ
	|	РегистрСведений.ПрожиточныеМинимумы.СрезПоследних (&Дата,СоциальнаяГруппа = &Трудящиеся) 
	|";
	РезультатЗапроса = ЗапросЗначениеПрожиточногоМинимума.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ПрожиточныйМинимум = РезультатЗапроса.Размер;
	КонецЕсли;
	
	СтрокиДекларации = Справочники.СтатьиНалоговыхДеклараций;
	Счет661 = ПланыСчетов["Хозрасчетный"].РасчетыПоЗаработнойПлате;
	
	//Раздел I Количество работников
	РасчетПоказателейКоличестваРаботников();
	
	//Раздел II Использование рабочего времени штатных работников
	РасчетИспользованиеРабочегоВремениШтатныхРаботников();
	
	//Расчет показателей раздела III состав ФОТ и прочих выплат
	РасчетФОТиПрочихВыплат();

	//Расчет показателей раздела IV Распределение работников по размерам заработной платы
	РаспределениеРаботниковПоРазмеруЗП();
	
	// Расчет показателей раздела V
	РасчетКоличестваИФОПКатегорийРаботников();
	
	Расчет();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьАвто()

Функция ПроверитьГраницыРаспределенияРаздел4()

	Результат = Истина;
	
	Если мОтчетПоТруду.Области.Пр100.Значение <= 0 Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Для Сч = 2 По 10 Цикл
		Если    мОтчетПоТруду.Области["Пр"+(Сч-1)+"00"].Значение >= мОтчетПоТруду.Области["Пр"+Сч].Значение
			ИЛИ мОтчетПоТруду.Области["Пр"+Сч].Значение >= мОтчетПоТруду.Области["Пр"+Сч+"00"].Значение Тогда
			    Результат = Ложь;
				Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если мОтчетПоТруду.Области.Пр11.Значение <> мОтчетПоТруду.Области.Пр1000.Значение Тогда
	    Результат = Ложь;
	КонецЕсли;

	Если Результат = Ложь И (мМенеджерЗвит1С = Неопределено ИЛИ Не мМенеджерЗвит1С.ФлагОтладкиПакетноеТестирование) Тогда	
		// Не отображаем сообщения при пакетном тестировании
		Сообщить(НСтр("ru = 'Не заполнены (или не правильно заполнены) параметры распределения размера заработной платы в разделе IV.
                       |Строки 6020...6120 заполнены не будут!'; uk = 'Не заповнені (або заповнені некоректно) параметри розподілу розміру зарабітної плати в разділі IV.
                       |Рядки 6020...6120 заповнені не будуть!'"));	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетПоТруду";
	
	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;
	
	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если Тип ("РисунокТабличногоДокумента") <> ТипЗнч (ТекущаяОбласть) Тогда
			
			ОписаниеЯчейки = "";
			Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
				ОписаниеЯчейки    = НСтр("ru='Значение вычисляется автоматически';uk='Значення обчислюється автоматично'");
			ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
				ОписаниеЯчейки    = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");
			КонецЕсли;
			
			ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
			ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;
			
		КонецЕсли;
	КонецЕсли;
	
	
	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;
	
КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;
	
	Если ЭлементМеню.Кнопки.Количество() = 0 Тогда
		ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
		НСтр("ru='Печатать сразу';uk='Друкувати відразу'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
		
		ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
		                            НСтр("ru='Предварительный просмотр';uk='Попередній перегляд'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
									
		ЭлементМеню.Кнопки.Добавить("Разделитель1", ТипКнопкиКоманднойПанели.Разделитель);

		ЭлементМеню.Кнопки.Добавить("ЕстьДуплекс", ТипКнопкиКоманднойПанели.Действие,
		                            НСтр("ru='Принтер поддерживает автом. дуплекс';uk='Принтер підтримує автом. дуплекс'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
									
		ЭлементМеню.Кнопки.ЕстьДуплекс.Пометка = ЕстьДуплекс;
	КонецЕсли;							
	
	ЛинияСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЛинияПусто = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	
	мМассивТиповЛиний = Новый Массив();
	мМассивТиповЛиний.Вставить(0, ЛинияПусто);
	мМассивТиповЛиний.Вставить(1, ЛинияСнизу);
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	ЭтаФорма.АвтоЗаголовок = Ложь;
	
	мОтчетПоТруду = ЭлементыФормы.ПолеТабличногоДокументаОтчетПоТруду;
	ТекТабличноеПоле = мОтчетПоТруду;
	
	Если мСохраненныйДок = Неопределено Тогда
		
		
		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			ТочностьЕдиницыИзмерения = 1;
			УстановитьФорматВывода();
			
			ЭлементыФормы.НазваниеОрганизации.Заголовок= Организация.Наименование;
		КонецЕсли;
		
		ЗаполнитьСведенияОбОрганизации();
		ВосстановитьГраницыРаспределенияРаздел3();                      
		
	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
	КонецЕсли;
	
	ПоказатьПериод();
	мОтчетПоТруду.ТолькоПросмотр = Истина;
	
	УстановитьЦветФонаЯчейки(,,"ОтчетПоТруду");
	
КонецПроцедуры // ПриОткрытии()

Процедура ВосстановитьГраницыРаспределенияРаздел3()

	мОтчетПоТруду.Области.Пр3.Значение    = 1500.01;
	мОтчетПоТруду.Области.Пр4.Значение    = 2000.01;
	мОтчетПоТруду.Области.Пр5.Значение    = 2500.01;
	мОтчетПоТруду.Области.Пр6.Значение    = 3000.01;
	мОтчетПоТруду.Области.Пр7.Значение    = 3500.01;
	мОтчетПоТруду.Области.Пр8.Значение    = 3750.01;
	мОтчетПоТруду.Области.Пр9.Значение    = 4000.01;
	мОтчетПоТруду.Области.Пр10.Значение   = 4500.01;
	мОтчетПоТруду.Области.Пр11.Значение   = 5000.00;
	
	мОтчетПоТруду.Области.Пр200.Значение  = 1500.00;
	мОтчетПоТруду.Области.Пр300.Значение  = 2000.00;
	мОтчетПоТруду.Области.Пр400.Значение  = 2500.00;
	мОтчетПоТруду.Области.Пр500.Значение  = 3000.00;
	мОтчетПоТруду.Области.Пр600.Значение  = 3500.00;
	мОтчетПоТруду.Области.Пр700.Значение  = 3750.00;
	мОтчетПоТруду.Области.Пр800.Значение  = 4000.00;
	мОтчетПоТруду.Области.Пр900.Значение  = 4500.00;
	мОтчетПоТруду.Области.Пр1000.Значение = 5000.00;
	
	// не заданы в эталонной форме форме
	мОтчетПоТруду.Области.Пр2.Значение    = ВосстановитьЗначение("РегламентированнаяОтчетность_ОтчетПоТруду_Пр2");
	мОтчетПоТруду.Области.Пр100.Значение  = ВосстановитьЗначение("РегламентированнаяОтчетность_ОтчетПоТруду_Пр100");
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность = Истина Тогда
		
		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения ?';uk='Дані були змінені. Зберегти зміни ?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;  

		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
    СохранитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс", ЕстьДуплекс);
	
КонецПроцедуры // ПередЗакрытием()



Процедура СохранитьГраницыРаспределенияРаздел3()

	СохранитьЗначение("РегламентированнаяОтчетность_ОтчетПоТруду_Пр2", мОтчетПоТруду.Области.Пр2.Значение);
	СохранитьЗначение("РегламентированнаяОтчетность_ОтчетПоТруду_Пр100", мОтчетПоТруду.Области.Пр100.Значение);
	
КонецПроцедуры

Функция СформироватьДанныеДляЗвит1С() Экспорт 
	
	мСохраненныйДок   = Неопределено;	
	мСкопированаФорма = Неопределено;
	
	ПередОткрытием(Ложь, Истина);
	ПриОткрытии();
	
	Очистить();
	ЗаполнитьСведенияОбОрганизации();
	ЗаполнитьАвто();
	
	Если мМенеджерЗвит1С.ФлагОтладки Тогда
		ЭтаФорма.ОткрытьМодально();
	КонецЕсли;
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	// расшифровка
	Попытка
		ВЫПОЛНИТЬ("СписокСохранения.Вставить(""РасшифровкаОтчета"", СпП);");
	Исключение КонецПопытки;
	
	ПоказателиОтчета = Новый Структура();
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	КонецЦикла;

	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	
	Очистить();
	
	ЗаполнитьСведенияОбОрганизации();
	
	ЗаполнитьАвто();
	
КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)
	
	Очистить();
	
КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)
	
	Если Кнопка <> Неопределено Тогда
		Если Найти(Кнопка.Имя, "Дуплекс") >0 Тогда
		     ЕстьДуплекс    = НЕ Кнопка.Пометка;
			 Кнопка.Пометка = НЕ Кнопка.Пометка;
		Иначе
			 Печать(Кнопка.Имя);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)
	
	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

		
КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)
	
	Сохранить();  

	
КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)
	
	ПроверитьТочность();
	УстановитьФорматВывода();
	
	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)
	
	ПроверитьТочность();
	УстановитьФорматВывода();
	
	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаОтчетПоТрудуПриАктивизацииОбласти(Элемент)
	
	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры // ПолеТабличногоДокументаБалансПриАктивизацииОбласти()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа.
//
Процедура ПолеВыбораВариантЗаполненияОтчетПоТрудуПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки.
//
Процедура ПолеВводаЗначениеКорректировкиОтчетПоТрудуПриИзменении(Элемент)
	
	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеВводаЗначениеКорректировкиПриИзменении

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// "Комментарий" по ячейке, для которой установлен алгоритм автозаполнения 
// [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийОтчетПоТрудуПриИзменении(Элемент)
	
	Коммент = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Коммент);
	
КонецПроцедуры // ПолеВводаКомментарийПриИзменении()

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура РаспределениеОтПриИзменении(Элемент)
	
	ИмяТекущейСтраницыПанели  = "ОтчетПоТруду";
	ТекущаяОбласть  = ЭлементыФормы.ПолеТабличногоДокументаОтчетПоТруду.ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;
	ЗначениеПоказателя 				= ТекущаяОбласть.Значение;
	
	ЗначениеИзменяемогоПоказателя   =  ЗначениеПоказателя - 0.01;
	ИмяИзменяемогоПоказателя = "Пр" + (Число(Сред(ИмяПоказателя, 3,1))-1) + "00";
	
	ЭлементыФормы.ПолеТабличногоДокументаОтчетПоТруду.Области[ИмяИзменяемогоПоказателя].Значение = ЗначениеИзменяемогоПоказателя;
	
КонецПроцедуры

Процедура РаспределениеДоПриИзменении(Элемент)
	
	ИмяТекущейСтраницыПанели  = "ОтчетПоТруду";
	ТекущаяОбласть  = ЭлементыФормы.ПолеТабличногоДокументаОтчетПоТруду.ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;
	ЗначениеПоказателя 				= ТекущаяОбласть.Значение;
	
	ЗначениеИзменяемогоПоказателя   =  ЗначениеПоказателя + 0.01;
	ИмяИзменяемогоПоказателя = "Пр" + (Число(Сред(ИмяПоказателя, 3,1))+1);
	
	ЭлементыФормы.ПолеТабличногоДокументаОтчетПоТруду.Области[ИмяИзменяемогоПоказателя].Значение = ЗначениеИзменяемогоПоказателя;
	
	ЭлементыФормы.ПолеТабличногоДокументаОтчетПоТруду.ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаОтчетПоТруду.Область("Пр" + (Число(Сред(ИмяПоказателя, 3,1))+ 1) + "00");
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаОтчетПоТрудуПр1000ПриИзменении(Элемент)
	
	ЭлементыФормы.ПолеТабличногоДокументаОтчетПоТруду.Области.пр11.Значение = ЭлементыФормы.ПолеТабличногоДокументаОтчетПоТруду.Области.пр1000.Значение;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаОтчетПоТрудуПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Расчет();
	ОбновитьПараметрыАвтозаполненияЯчейки();
	
	Модифицированность = Истина;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       НСтр("ru='в гривнях';uk='у гривнях'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    НСтр("ru='в тысячах гривень';uk='у тисячах гривень'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, НСтр("ru='в миллионах гривень';uk='у мільйонах гривень'"));


// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетПоТруду.СписокВыбора.Добавить(1, НСтр("ru='не заполнять автоматически';uk='не заповнювати автоматично'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетПоТруду.СписокВыбора.Добавить(2, НСтр("ru='заполнять автоматически с корректировкой';uk='заповнювати автоматично з коригуванням'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетПоТруду.СписокВыбора.Добавить(3, НСтр("ru='заполнять автоматически без корректировки';uk='заповнювати автоматично без коригування'"));

ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));


ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

мСоставПоказателей = "СоставПоказателей2011Кв";

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
мВерсияФормы = "01/01/2011";

мПечатныеФормы = Новый СписокЗначений;

ЕстьДуплекс = ВосстановитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс");
Если НЕ ТипЗнч(ЕстьДуплекс) = Тип("Булево") Тогда
	ЕстьДуплекс = Ложь;	
КонецЕсли;
