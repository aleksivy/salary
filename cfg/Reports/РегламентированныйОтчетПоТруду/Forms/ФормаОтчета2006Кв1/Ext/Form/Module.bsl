////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
//каждая закладка отчета - это объект ПолеТабличногоДокумента
Перем мОтчетПоТруду;

Перем мСоставПоказателей Экспорт;

// переменный для хранения бухгалтерских итогов
Перем мБухИтоги, мБухИтогиРС, мБухИтоги22;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранят структуру многострочных разделов
//Перем мСтруктураМногострочныхРазделов;
//Перем мСтруктураИсхКолвоСтрокРазделов;

// хранит код отчета по КНД
Перем мКодОтчета;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы;

Перем ТаблицаРезультатов;

Перем МассивЖенщин,МассивСовм,МассивШт,МассивГПХ;

Перем мПечатныеФормы Экспорт;

Перем МинОплатаТруда;

Перем Счет661;

Процедура ЗаполнитьНачальныеНастройки(Макет = "СоставПоказателейКв") Экспорт
	
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(Макет);
	
	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	//ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()


// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураПоказателейВнутрСвязи = Новый Структура;

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		Если НЕ (ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента")) Тогда
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателейКв");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий параметры автозаполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки параметров автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии формы для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя, а в текущей - отключено.
							// В этом случае удаляем ячейку из таблицы пользовательских настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Процедура управляет показом в форме периода построения отчета,
Процедура ПоказатьПериод()

	СтрПериодОтчета = ПредставлениеПериода(НачалоГода(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "Л = uk_UA; ФП = Истина" );

// Период в заголовке отчета
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
    мОтчетПоТруду.Области.ПериодОтчета.Значение =  СтрПериодОтчета;
	
	мОтчетПоТруду.Области.ПериодОтчета2.Значение   =  Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг р.';Л = uk_UA");

КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
// пока не прописаны коды - вернуться
Процедура ЗаполнитьСведенияОбОрганизации()

	
	ОргНазв = Организация.НаименованиеПолное;
	мОтчетПоТруду.Области.ОргНазв.Значение = ОргНазв;

	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","КодКОАТУУ");
	СписокПоказателей.Добавить("","КодКФВ");
	СписокПоказателей.Добавить("","КодКВЕД");
	СписокПоказателей.Добавить("","Территория");
	СписокПоказателей.Добавить("","ОрганГУ");
	СписокПоказателей.Добавить("","КодОПФГ");

      
	ФИОДиректора       = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФИОРук;
	ФИОГлавБуха        = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФИОБух;
	КодЕДРПОУ          = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодПоЕДРПОУ;
	КодКОАТУУ          = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодКОАТУУ;
	КодКФВ             = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодКФВ;
    КодКВЕД            = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодКВЕД;
	ОрганГУ            = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ОрганГУ;
	КодОПФГ    	       = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодОПФГ;
	мОтчетПоТруду.Области.ОргБухгалтер.Значение          = ФИОГлавБуха; 
	мОтчетПоТруду.Области.ОргДиректор.Значение           = ФИОДиректора;
	мОтчетПоТруду.Области.КодКОАТУУ.Значение             = КодКОАТУУ;
	мОтчетПоТруду.Области.КодКФВ.Значение                = КодКФВ;
	мОтчетПоТруду.Области.КодКВЕД.Значение               = КодКВЕД;
	мОтчетПоТруду.Области.ОрганГУ.Значение               = ОрганГУ;
	мОтчетПоТруду.Области.КодЕДРПОУ.Значение             = КодЕДРПОУ;
	мОтчетПоТруду.Области.КодКОПФГ.Значение              = КодОПФГ;
	Для НомЯчейки = 1 По 8 Цикл
			ЭлементыФормы["ПолеТабличногоДокументаОтчетПоТруду"].Области["ЕДРПОУ" + НомЯчейки].Значение = Сред(Строка(КодЕДРПОУ), НомЯчейки, 1);
	КонецЦикла;
    	
	мОтчетПоТруду.Области.ОргПочтАдрес.Значение = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
	
	МинОплатаТруда = 0;
	
	ЗапросЗначениеМинЗарплаты = Новый Запрос;
	ЗапросЗначениеМинЗарплаты.УстановитьПараметр("Дата", ДобавитьМесяц(мДатаНачалаПериодаОтчета,2));
	
	ЗапросЗначениеМинЗарплаты.Текст = "
	|ВЫБРАТЬ 
	|   Размер
	|ИЗ
	|	РегистрСведений.МинимальнаяОплатаТруда.СрезПоследних (&Дата) 
	|";
	
	РезультатЗапроса = ЗапросЗначениеМинЗарплаты.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить();
		МинОплатаТруда = Результат[0].Размер;
	КонецЕсли;
	
	
	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	
	мОтчетПоТруду.Области.ДеньДаты.Значение 	= ЧастиДатыПодписи.День;
	мОтчетПоТруду.Области.МесяцДаты.Значение 	= ЧастиДатыПодписи.Месяц;
	мОтчетПоТруду.Области.ГодДаты.Значение 		= ЧастиДатыПодписи.ПоследняяЦифраГода;
 		    
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

Процедура ВычислитьЛевуюГраницу()
	
	Для i = 2 по 10 Цикл
	   НомПред = i - 1;
	   ИмяЯчейкиРезультата = "Пр" + Строка(i);
	   ИмяЯчейки = "Пр" + Строка(НомПред) + "00";
	   мОтчетПоТруду.Области[ИмяЯчейкиРезультата].Значение = мОтчетПоТруду.Области[ИмяЯчейки].Значение + 0.01; 	
	КонецЦикла;	
	
КонецПроцедуры	

//процедура заполняет параметры раздела III - границы  распределения заработной платы 
//работников
Процедура ЗаполнитьПараметрыГраницРаспределения()
	ПрожиточныйМинимум = 0;
	
	ЗапросЗначениеПрожиточногоМинимума = Новый Запрос;
	ЗапросЗначениеПрожиточногоМинимума.УстановитьПараметр("Дата", ДобавитьМесяц(мДатаНачалаПериодаОтчета,2));
	ЗапросЗначениеПрожиточногоМинимума.УстановитьПараметр("Трудящиеся", Перечисления.СоциальныеГруппыНаселения.Трудоспособные);
	
	ЗапросЗначениеПрожиточногоМинимума.Текст = "
	|ВЫБРАТЬ 
	|   Размер
	|ИЗ
	|	РегистрСведений.ПрожиточныеМинимумы.СрезПоследних (&Дата,СоциальнаяГруппа = &Трудящиеся) 
	|";
	
	РезультатЗапроса = ЗапросЗначениеПрожиточногоМинимума.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Результат = РезультатЗапроса.Выгрузить();
		
		ПрожиточныйМинимум = Результат[0].Размер;
		
	КонецЕсли;
	
	Пр1 = ПрожиточныйМинимум;
	
//	мОтчетПоТруду.Области.Пр1.Значение = ?(МинОплатаТруда < ПрожиточныйМинимум,МинОплатаТруда,ПрожиточныйМинимум);

	мОтчетПоТруду.Области.Пр100.Значение = Цел(Пр1/100)*100;
	
	мОтчетПоТруду.Области.Пр200.Значение = ?(ПрожиточныйМинимум<МинОплатаТруда,МинОплатаТруда,ПрожиточныйМинимум);
	
	мОтчетПоТруду.Области.Пр300.Значение = Цел(мОтчетПоТруду.Области.Пр200.Значение/100)*100 + 100;
	
	мОтчетПоТруду.Области.Пр400.Значение = Цел(мОтчетПоТруду.Области.Пр300.Значение/100)*100 + 100;
	
	мОтчетПоТруду.Области.Пр500.Значение = Цел(мОтчетПоТруду.Области.Пр400.Значение/100)*100 + 150;
	
	мОтчетПоТруду.Области.Пр600.Значение = Цел(мОтчетПоТруду.Области.Пр500.Значение/100)*100 + 200;
	
	мОтчетПоТруду.Области.Пр700.Значение = Цел(мОтчетПоТруду.Области.Пр600.Значение/100)*100 + 100;
	
	мОтчетПоТруду.Области.Пр800.Значение = Цел(мОтчетПоТруду.Области.Пр700.Значение/100)*100 + 350;
	
	мОтчетПоТруду.Области.Пр900.Значение = Цел(мОтчетПоТруду.Области.Пр800.Значение/100)*100 + 700;
		
	ВычислитьЛевуюГраницу();
		
КонецПроцедуры // ЗаполнитьПараметрыГраницРаспределения()
	

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(НСтр("ru='Отчет по труду: при выводе сумм в гривнях точность не может превышать 2 знака';uk='Звіт з праці: при виведенні сум у гривнях точність не може перевищувати 2 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(НСтр("ru='Отчет по труду: при выводе сумм в тысячах гривень точность не может превышать 3 знака';uk='Звіт з праці: при виведенні сум у тисячах гривень точність не може перевищувати 3 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(НСтр("ru='Отчет по труду: при выводе сумм в миллионах гривень точность не может превышать 6 знаков';uk='Звіт з праці: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

	Сообщить(НСтр("ru='После изменения формата вывода значений, для корректного расчета итогов необходимо перезаполнить отчет!';uk='Після зміни формату виводу значень, для корректного розрахунку підсумків треба перезаполвнити звіт!'"), СтатусСообщения.Внимание);	
	
КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";

	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "ОтчетПоТруду";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()


// Обновляет пользовательские настройки при изменении версии формы.
// унифицирована, однако использование пока ... вопрос
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить(НСтр("ru='Измененилась версия формы отчета."
"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
"Виконується відновлення користувальницьких настройок.'"), СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	Если ЕстьИзмененияВариантыЗаполнения Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить(НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Оновлення користувальницьких настройок успішно завершене!'"));

	Иначе

		Сообщить(НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі користувальницьких настройок не виявлені!'"));

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()


// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетПоТруду";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяЯчейка) <> Тип("РисунокТабличногоДокумента") Тогда

		Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
			Возврат;
		КонецЕсли;

		Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
			ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
			Возврат;
		КонецЕсли;

		Если ТекущаяЯчейка.Защита Тогда
			ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетПоТруду";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетПоТруду";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет();
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		
		// Очищаем комментарий редактируемой ячейки
		ТекущаяОбласть.Примечание.Текст = "";

	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетПоТруду";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетПоТруду";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		Если Тип ("РисунокТабличногоДокумента") <> ТипЗнч (ТекущаяОбласть) Тогда
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ТекущаяОбласть.СодержитЗначение Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяОбласть.Очистить();
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить()

	// Очищаем содержимое ячеек поля табличного документа
	ТекТабличноеПоле = мОтчетПоТруду;
	ОчиститьТабличноеПоле(ТекТабличноеПоле);

	// Выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();
	
	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

КонецПроцедуры // Очистить()

Процедура РазбитьПечатнуюФорму(ПечФорма)
	
	ИмяФормы = "ОтчетПоТруду";
	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = Истина;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	
	Для Сч = 1 По ПечФорма.ВысотаТаблицы Цикл
		
		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		НовТаблДок = Новый ТабличныйДокумент();
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = Истина;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати)
	мПечатныеФормы.Очистить();

	ПечатнаяФорма = Новый ТабличныйДокумент();

	ОбластьПечати = мОтчетПоТруду.ПолучитьОбласть("Шапка");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ОбластьПечати = мОтчетПоТруду.ПолучитьОбласть("Отчет");
	ПечатнаяФорма.Вывести(ОбластьПечати);
	
	ОбластьПечати = мОтчетПоТруду.ПолучитьОбласть("Подвал");
	ПечатнаяФорма.Вывести(ОбластьПечати);
	
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();


	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;

//	Если ВидПечати = "ПоказатьБланк" Тогда
//		ПечатнаяФорма.Показать(СокрП(ЭтаФорма.Заголовок));
//	ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
//		ПечатнаяФорма.Напечатать();
//	КонецЕсли;

	РазбитьПечатнуюФорму(ПечатнаяФорма);
	
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()


// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить()  Экспорт

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.

		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;

		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();

	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаОтчетПоТруду";

	ТекТабличноеПоле        = мОтчетПоТруду;

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	Модифицированность = Ложь;

	Возврат Истина;
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Расшифровка;

	// восстанавливаем реквизиты отчета
	Организация              = мСохраненныйДок.Организация;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;

	ЭлементыФормы.НазваниеОрганизации.Заголовок= Организация.Наименование;
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();


	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьФорматВывода();
	Расчет();

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()
	//Фонд оплати праці штатних прцівників
	мОтчетПоТруду.Области.П4010_1.Значение = мОтчетПоТруду.Области.П4020_1.Значение
									       + мОтчетПоТруду.Области.П4030_1.Значение
									       + мОтчетПоТруду.Области.П4080_1.Значение;
										   
	мОтчетПоТруду.Области.П8010_1.Значение = мОтчетПоТруду.Области.П8020_1.Значение
										   + мОтчетПоТруду.Области.П8030_1.Значение
										   + мОтчетПоТруду.Области.П8040_1.Значение
										   + мОтчетПоТруду.Области.П8050_1.Значение
										   + мОтчетПоТруду.Области.П8060_1.Значение
										   + мОтчетПоТруду.Области.П8070_1.Значение
										   + мОтчетПоТруду.Области.П8080_1.Значение
										   + мОтчетПоТруду.Области.П8090_1.Значение
										   + мОтчетПоТруду.Области.П8100_1.Значение
										   + мОтчетПоТруду.Области.П8110_1.Значение
										   + мОтчетПоТруду.Области.П8120_1.Значение;

										   

КонецПроцедуры // Расчет()

Функция СформироватьМассивЛиц(ИмяМассиваИсх,ЕстьУсловие)
	
	ИмяМассиваРезультат = Новый Массив;
	Если Не РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда 

		Для каждого эл из ИмяМассиваИсх Цикл
			Если ЕстьУсловие Тогда
				Если эл.Сотрудник.ФизЛицо.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
					ИмяМассиваРезультат.Добавить(эл.Сотрудник);
				КонецЕсли;
			Иначе
				ИмяМассиваРезультат.Добавить(эл.Сотрудник);
			КонецЕсли
		КонецЦикла;	
	Иначе
		Для каждого эл из ИмяМассиваИсх Цикл
			Если ЕстьУсловие Тогда
				Если эл.ФизЛицо.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
					ИмяМассиваРезультат.Добавить(эл.ФизЛицо);
				КонецЕсли;
			Иначе
				ИмяМассиваРезультат.Добавить(эл.ФизЛицо);
			КонецЕсли
		КонецЦикла;	
	КонецЕсли;

	Возврат(ИмяМассиваРезультат);
КонецФункции

Функция ОбработатьТаблицу(РезультатЗапроса);
	Если Не РезультатЗапроса.Пустой() Тогда
		ТаблицаНачислено = РезультатЗапроса.Выгрузить();
		Если ТаблицаНачислено[0].Результат<>NULL Тогда
			Сумма = ТаблицаНачислено[0].Результат;	
		Иначе
			Сумма = 0;	
		КонецЕсли;
		КонецЕсли; 
	Возврат (Сумма);
 КонецФункции

//Процедура выполняет поиск нужных строк в таблице результатов запроса
//по регистру "ФОТДляОтчетаПоТруду" 
// Параметры:
//  СтатьяПоиска - значение типа Справочник.СтатьиНалоговыхДеклараций - статья, для которого требуется
//                 получить итог.
//  ПоказательГрафы    - наименование показателя графы  формы отчета.

Процедура РасчетПоСтатье(СтатьяПоиска,ИмяПоказателяГрафы="",ИмяПоказателяГрафыР="")
	Перем НайденнаяСтрока, ПоказательГрафы;
	НайденнаяСтрока = ТаблицаРезультатов.Найти (СтатьяПоиска,"СтатьяДекларации" ); 
	Если (НайденнаяСтрока <> Неопределено ) Тогда
		ПоказательГрафы = НайденнаяСтрока.Сумма;
	Иначе
		ПоказательГрафы = 0;
	КонецЕсли;
	мОтчетПоТруду.Области[ИмяПоказателяГрафы].Значение = ПоказательГрафы;
	Если СтрДлина (ИмяПоказателяГрафыР) > 0 Тогда
		мОтчетПоТруду.Области[ИмяПоказателяГрафыР].Значение = мОтчетПоТруду.Области[ИмяПоказателяГрафыР].Значение + ПоказательГрафы;
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьМассивыРазличныхКатегорийРаботников()
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда 
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.ФизЛицо КАК ФизЛицо,
		|	РаботникиОрганизаций.Приказ.ВидЗанятости  КАК ВидЗанятости
		|
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций	КАК РаботникиОрганизаций
		|
		|ГДЕ
		|	(РаботникиОрганизаций.Период МЕЖДУ &ДатаНач1 И &ДатаКон) И 
		|   (РаботникиОрганизаций.Приказ.Организация = &Организация)
		|ОБЪЕДИНИТЬ ВСЕ
 	    |ВЫБРАТЬ
		|РаботникиОрганизацийСрезПоследних.Физлицо,
		|РаботникиОрганизацийСрезПоследних.Приказ.ВидЗанятости
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНач,Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
	  	|";

	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.ВидЗанятости  КАК ВидЗанятости
		|
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций	КАК РаботникиОрганизаций
		|
		|ГДЕ
		|	(РаботникиОрганизаций.Период МЕЖДУ &ДатаНач1 И &ДатаКон) И 
		|   (РаботникиОрганизаций.Организация = &Организация)
		|ОБЪЕДИНИТЬ ВСЕ
 	    |ВЫБРАТЬ
		|РаботникиОрганизацийСрезПоследних.Сотрудник,
		|РаботникиОрганизацийСрезПоследних.Сотрудник.ВидЗанятости
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНач,Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
	  	|"
	КонецЕсли;

	//получаем число женщин штатного состава и число внешних совместителей за период
	ЗапросПоШтатнымСовм = Новый Запрос();
	ЗапросПоШтатнымСовм.УстановитьПараметр("Организация",         Организация);
	ЗапросПоШтатнымСовм.Текст = ТекстЗапроса;
	
	СледующийДень = КонецДня(мДатаНачалаПериодаОтчета) + 1;
	ЗапросПоШтатнымСовм.УстановитьПараметр("ДатаНач",мДатаНачалаПериодаОтчета);
	ЗапросПоШтатнымСовм.УстановитьПараметр("ДатаНач1",СледующийДень);
	ЗапросПоШтатнымСовм.УстановитьПараметр("ДатаКон",мДатаКонцаПериодаОтчета);
	
	РезультатЗапросПоШтатнымСовм = ЗапросПоШтатнымСовм.Выполнить();
	ТаблицаШтатныхСовместителей = РезультатЗапросПоШтатнымСовм.Выгрузить();
	
	ОтборШтатных = Новый Структура("ВидЗанятости",Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	МассивШтатных = ТаблицаШтатныхСовместителей.НайтиСтроки(ОтборШтатных);
		
	МассивЖенщин = СформироватьМассивЛиц(МассивШтатных,Истина);

	ОтборСовместителей = Новый Структура("ВидЗанятости",Перечисления.ВидыЗанятостиВОрганизации.Совместительство);
	МассивСовместителей = ТаблицаШтатныхСовместителей.НайтиСтроки(ОтборСовместителей);
	
	МассивСовм = СформироватьМассивЛиц(МассивСовместителей,Ложь);
	
		
	//теперь запрос о числе штатных именно за последний месяц квартала
	
	ЗапросПоШтатнымСовм.УстановитьПараметр("ДатаНач",ДобавитьМесяц(мДатаНачалаПериодаОтчета,2));
	ЗапросПоШтатнымСовм.УстановитьПараметр("ДатаНач1",КонецДня(ДобавитьМесяц(мДатаНачалаПериодаОтчета,2)) + 1);
	ЗапросПоШтатнымСовм.УстановитьПараметр("ДатаКон",мДатаКонцаПериодаОтчета);
	
	РезультатЗапросПоШтатнымСовм = ЗапросПоШтатнымСовм.Выполнить();
	ТаблицаШтатныхСовместителей = РезультатЗапросПоШтатнымСовм.Выгрузить();
	
	ОтборШтатных = Новый Структура("ВидЗанятости",Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	МассивШтатных = ТаблицаШтатныхСовместителей.НайтиСтроки(ОтборШтатных);
	
	МассивШт = СформироватьМассивЛиц(МассивШтатных,Ложь);
	
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП") Тогда
		//запрос на предемет работающих по ГПХ
		ТекстЗапросаГПХ = "
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДоговорникиОрганизаций.Физлицо КАК Физлицо
		|	ИЗ
		|		РегистрСведений.ДоговорникиОрганизаций КАК ДоговорникиОрганизаций
		|	
		|	ГДЕ
		|		ДоговорникиОрганизаций.ДатаОкончания >= &парамНачало
		|		И ДоговорникиОрганизаций.ДатаНачала <= &парамКонец
		|		И ДоговорникиОрганизаций.Организация = &Организация
		|";
		
		ЗапросПоГПХ = Новый Запрос();
		ЗапросПоГПХ.УстановитьПараметр("Организация", Организация);
		ЗапросПоГПХ.УстановитьПараметр("парамНачало", мДатаНачалаПериодаОтчета);
		ЗапросПоГПХ.УстановитьПараметр("парамКонец",  мДатаКонцаПериодаОтчета);
		ЗапросПоГПХ.Текст = ТекстЗапросаГПХ; 
		ТаблицаГПХ = ЗапросПоГПХ.Выполнить().Выгрузить();
		
		МассивГПХ = СформироватьМассивЛиц(ТаблицаГПХ,Ложь);
		
	КонецЕсли;	

КонецПроцедуры	

Процедура РасчетНачисленийПоКатегориямРаботников()
	
	//начисления работников без разбиения - за весь отчетный период
	//ФОТ штатных работников
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда 
		ТекстЗапроса = "
		|ВЫБРАТЬ
		| СУММА (ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовПриход) КАК Результат
		|  ИЗ
		|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Обороты(&НачДата,&КонДата,,Организация = &Организация) КАК ВзаиморасчетыСРаботниками
		| ГДЕ
		|	ВзаиморасчетыСРаботниками.ВидВзаиморасчетов = &ВидВзаиморасчетов
		|	И ВЫБОР
		|			КОГДА ВзаиморасчетыСРаботниками.ФизЛицо В (&МассЛиц)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|";
       	ЗапросНачислено = Новый Запрос();
		ЗапросНачислено.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
		ЗапросНачислено.УстановитьПараметр("КонДата" ,мДатаКонцаПериодаОтчета);
		ЗапросНачислено.УстановитьПараметр("ВидВзаиморасчетов", Перечисления.ВидыВзаиморасчетовСРаботниками.ЗаработнаяПлата);

    Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ
		| СУММА (ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовПриход) КАК Результат
		|  ИЗ
		|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Обороты(&НачДата,&КонДата,,Организация = &Организация) КАК ВзаиморасчетыСРаботниками
		| ГДЕ
		|	ВзаиморасчетыСРаботниками.СчетУчета = &парамСчет
		|	И ВЫБОР
		|			КОГДА ВзаиморасчетыСРаботниками.Сотрудник В (&МассЛиц)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|";
		
		ЗапросНачислено = Новый Запрос();
		ЗапросНачислено.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
		ЗапросНачислено.УстановитьПараметр("КонДата" ,мДатаКонцаПериодаОтчета);
		ЗапросНачислено.УстановитьПараметр("парамСчет", Счет661)

	КонецЕсли;
	
	//ЗапросНачислено = Новый Запрос();
	//ЗапросНачислено.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
	//ЗапросНачислено.УстановитьПараметр("КонДата" ,мДатаКонцаПериодаОтчета);
	//ЗапросНачислено.УстановитьПараметр("парамСчет", Счет661);

	ЗапросНачислено.УстановитьПараметр("Организация", Организация);
	ЗапросНачислено.Текст = ТекстЗапроса;
	
	ЗапросНачислено.УстановитьПараметр("МассЛиц", МассивЖенщин);
	
	РезультатЗапроса = ЗапросНачислено.Выполнить();
	
	мОтчетПоТруду.Области.П7010_2.Значение = ОбработатьТаблицу(РезультатЗапроса);
		
	ЗапросНачислено.УстановитьПараметр("МассЛиц", МассивСовм);
	
	РезультатЗапроса = ЗапросНачислено.Выполнить();
	
	мОтчетПоТруду.Области.П7030_2.Значение = ОбработатьТаблицу(РезультатЗапроса);
	
	ЗапросНачислено.УстановитьПараметр("МассЛиц", МассивГПХ);
	
	РезультатЗапроса = ЗапросНачислено.Выполнить();
	
	мОтчетПоТруду.Области.П7040_2.Значение = ОбработатьТаблицу(РезультатЗапроса);	

	 
КонецПроцедуры	

Процедура РазбитьНачисленияПоШкале(ТаблицаНачислений)
   	
  	Для каждого стр Из ТаблицаНачислений Цикл
	    Если (стр.Результат <= мОтчетПоТруду.Области.Пр100.Значение) Тогда 
			мОтчетПоТруду.Области.П8020_1.Значение = мОтчетПоТруду.Области.П8020_1.Значение + 1;
			
		ИначеЕсли (стр.Результат >= мОтчетПоТруду.Области.Пр2.Значение) и (стр.Результат <= мОтчетПоТруду.Области.Пр200.Значение) Тогда 
			мОтчетПоТруду.Области.П8030_1.Значение = мОтчетПоТруду.Области.П8030_1.Значение + 1;
			
		ИначеЕсли (стр.Результат >= мОтчетПоТруду.Области.Пр3.Значение) и (стр.Результат <= мОтчетПоТруду.Области.Пр300.Значение) Тогда 
			мОтчетПоТруду.Области.П8040_1.Значение = мОтчетПоТруду.Области.П8040_1.Значение + 1;
			
		ИначеЕсли (стр.Результат >= мОтчетПоТруду.Области.Пр4.Значение) и (стр.Результат <= мОтчетПоТруду.Области.Пр400.Значение) Тогда 
			мОтчетПоТруду.Области.П8050_1.Значение = мОтчетПоТруду.Области.П8050_1.Значение + 1;
			
		ИначеЕсли (стр.Результат >= мОтчетПоТруду.Области.Пр5.Значение) и (стр.Результат <= мОтчетПоТруду.Области.Пр500.Значение) Тогда 	
			мОтчетПоТруду.Области.П8060_1.Значение = мОтчетПоТруду.Области.П8060_1.Значение + 1;
			
		ИначеЕсли (стр.Результат >= мОтчетПоТруду.Области.Пр6.Значение) и (стр.Результат <= мОтчетПоТруду.Области.Пр600.Значение) Тогда 	
			мОтчетПоТруду.Области.П8070_1.Значение = мОтчетПоТруду.Области.П8070_1.Значение + 1;
			
		ИначеЕсли (стр.Результат >= мОтчетПоТруду.Области.Пр7.Значение) и (стр.Результат <= мОтчетПоТруду.Области.Пр700.Значение) Тогда 
			 мОтчетПоТруду.Области.П8080_1.Значение = мОтчетПоТруду.Области.П8080_1.Значение + 1;
			 
		ИначеЕсли (стр.Результат >= мОтчетПоТруду.Области.Пр8.Значение) и (стр.Результат <= мОтчетПоТруду.Области.Пр800.Значение) Тогда 
			 мОтчетПоТруду.Области.П8090_1.Значение = мОтчетПоТруду.Области.П8090_1.Значение + 1;
				
		ИначеЕсли (стр.Результат >= мОтчетПоТруду.Области.Пр9.Значение) и (стр.Результат <= мОтчетПоТруду.Области.Пр900.Значение) Тогда 
			 мОтчетПоТруду.Области.П8100_1.Значение = мОтчетПоТруду.Области.П8100_1.Значение + 1;
			
		ИначеЕсли (стр.Результат >= мОтчетПоТруду.Области.Пр10.Значение) и (стр.Результат <= мОтчетПоТруду.Области.Пр1000.Значение) Тогда 
			 мОтчетПоТруду.Области.П8110_1.Значение = мОтчетПоТруду.Области.П8110_1.Значение + 1;
			
 
	    ИначеЕсли (стр.Результат <= МинОплатаТруда) Тогда 
			 мОтчетПоТруду.Области.П8170_1.Значение = мОтчетПоТруду.Области.П8170_1.Значение + 1;
		 КонецЕсли;
		 
	КонецЦикла; 
	
КонецПроцедуры	

Процедура РасчетНачисленийШтатныхРаботников()
//начисления штатных работников для разбиения

	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда 
		ТекстЗапроса = "
		|ВЫБРАТЬ
		| ВзаиморасчетыСРаботниками.ФизЛицо КАК Сотрудник,
		| ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовПриход КАК Результат
		|  ИЗ
		|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Обороты(&НачДата,&КонДата,,Организация = &Организация) КАК ВзаиморасчетыСРаботниками
		| ГДЕ
		|	ВзаиморасчетыСРаботниками.ВидВзаиморасчетов = &ВидВзаиморасчетов
		|	И ВЫБОР
		|			КОГДА ВзаиморасчетыСРаботниками.ФизЛицо В (&МассШтатных)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|";
       	ЗапросШтатНачисления = Новый Запрос;
		ЗапросШтатНачисления.УстановитьПараметр("Организация",   Организация);
	
		ДатаСреза = ДобавитьМесяц(мДатаНачалаПериодаОтчета,2);
		
		ЗапросШтатНачисления.УстановитьПараметр("НачДата", НачалоМесяца(ДатаСреза));
		ЗапросШтатНачисления.УстановитьПараметр("КонДата" ,КонецМесяца(ДатаСреза));
		
		ЗапросШтатНачисления.УстановитьПараметр("МассШтатных", МассивШт);
		ЗапросШтатНачисления.УстановитьПараметр("ВидВзаиморасчетов", Перечисления.ВидыВзаиморасчетовСРаботниками.ЗаработнаяПлата);

 	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ
		| ВзаиморасчетыСРаботниками.Сотрудник КАК Сотрудник,
		| ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовПриход КАК Результат
		|  ИЗ
		|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Обороты(&НачДата,&КонДата,,Организация = &Организация) КАК ВзаиморасчетыСРаботниками
		| ГДЕ
		|	ВзаиморасчетыСРаботниками.СчетУчета = &парамСчет
		|	И ВЫБОР
		|			КОГДА ВзаиморасчетыСРаботниками.Сотрудник В (&МассШтатных)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|";
		ЗапросШтатНачисления = Новый Запрос;
		ЗапросШтатНачисления.УстановитьПараметр("Организация",   Организация);
	
		ДатаСреза = ДобавитьМесяц(мДатаНачалаПериодаОтчета,2);
		
		ЗапросШтатНачисления.УстановитьПараметр("НачДата", НачалоМесяца(ДатаСреза));
		ЗапросШтатНачисления.УстановитьПараметр("КонДата" ,КонецМесяца(ДатаСреза));
		
		ЗапросШтатНачисления.УстановитьПараметр("МассШтатных", МассивШт);
		ЗапросШтатНачисления.УстановитьПараметр("парамСчет", Счет661);

	КонецЕсли;
	//ЗапросШтатНачисления = Новый Запрос;
	//ЗапросШтатНачисления.УстановитьПараметр("Организация",   Организация);
	
	//ДатаСреза = ДобавитьМесяц(мДатаНачалаПериодаОтчета,2);
		
	//ЗапросШтатНачисления.УстановитьПараметр("НачДата", НачалоМесяца(ДатаСреза));
	//ЗапросШтатНачисления.УстановитьПараметр("КонДата" ,КонецМесяца(ДатаСреза));
		
	//ЗапросШтатНачисления.УстановитьПараметр("МассШтатных", МассивШт);
	//ЗапросШтатНачисления.УстановитьПараметр("парамСчет", Счет661);
		
	ЗапросШтатНачисления.Текст = ТекстЗапроса;
		
	РезультатЗапросаШтатМесНачисления = ЗапросШтатНачисления.Выполнить();
		
	Если Не РезультатЗапросаШтатМесНачисления.Пустой() Тогда
		ТаблицаШтатМесНачисления = РезультатЗапросаШтатМесНачисления.Выгрузить();
		РазбитьНачисленияПоШкале(ТаблицаШтатМесНачисления);
	КонецЕсли; 
КонецПроцедуры	

Процедура РасчетПоказателейРазделаПоДвижениюРабочейСилы()
	//получения числа принятых/уволенных
	ЗапросПриемУвольнение = Новый Запрос;
    ЗапросПриемУвольнение.УстановитьПараметр("ДатаНач", НачалоГода(мДатаНачалаПериодаОтчета));
	ЗапросПриемУвольнение.УстановитьПараметр("ДатаКон", мДатаКонцаПериодаОтчета);
	ЗапросПриемУвольнение.УстановитьПараметр("Организация", Организация);
	ЗапросПриемУвольнение.УстановитьПараметр("ОсновноеМестоРаботы", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	ЗапросПриемУвольнение.УстановитьПараметр("НеЗаполнено", NULL);
	ЗапросПриемУвольнение.УстановитьПараметр("ПриемНаРаботу", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	ЗапросПриемУвольнение.УстановитьПараметр("Увольнение",Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда 
		ЗапросПриемУвольнение.Текст = "
		|ВЫБРАТЬ
		|РаботникиОрганизаций.Физлицо,
		|РаботникиОрганизаций.Период,
		|РаботникиОрганизаций.Приказ.ВидЗанятости,
		|РаботникиОрганизаций.ПричинаИзмененияСостояния
		|
		|ИЗ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ РаботникиОрганизаций.Период >= &ДатаНач 
		|И РаботникиОрганизаций.Период <= &ДатаКон 
		|И РаботникиОрганизаций.Организация = &Организация
		|И (РаботникиОрганизаций.Приказ.ВидЗанятости = &ОсновноеМестоРаботы
		|ИЛИ РаботникиОрганизаций.Приказ.ВидЗанятости = &НеЗаполнено)
		|И (РаботникиОрганизаций.ПричинаИзмененияСостояния = &ПриемНаРаботу
		|ИЛИ РаботникиОрганизаций.ПричинаИзмененияСостояния = &Увольнение)
	    |";

	Иначе
        ЗапросПриемУвольнение.Текст = "
		|ВЫБРАТЬ
		|РаботникиОрганизаций.Сотрудник,
		|РаботникиОрганизаций.Период,
		|РаботникиОрганизаций.Сотрудник.ВидЗанятости,
		|РаботникиОрганизаций.ПричинаИзмененияСостояния
		|
		|ИЗ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ РаботникиОрганизаций.Период >= &ДатаНач 
		|И РаботникиОрганизаций.Период <= &ДатаКон 
		|И (РаботникиОрганизаций.Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы
		|ИЛИ РаботникиОрганизаций.Сотрудник.ВидЗанятости = &НеЗаполнено)
		|И (РаботникиОрганизаций.ПричинаИзмененияСостояния = &ПриемНаРаботу
		|ИЛИ РаботникиОрганизаций.ПричинаИзмененияСостояния = &Увольнение)
	    |";
	КонецЕсли;
	
	РезультатЗапросаПриемУвольнение = ЗапросПриемУвольнение.Выполнить();
	ТаблицаПриемУвольнение = РезультатЗапросаПриемУвольнение.Выгрузить();
	
	ПараметрыОтбора = Новый Структура("ПричинаИзмененияСостояния");
	ПараметрыОтбора.Вставить("ПричинаИзмененияСостояния",Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Массив = ТаблицаПриемУвольнение.НайтиСтроки(ПараметрыОтбора);
	мОтчетПоТруду.Области.П5010_1.Значение =  Массив.Количество();
	
	МассивЖенщин.Очистить();	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда 
		Для каждого эл из Массив Цикл
			Если эл.ФизЛицо.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
				МассивЖенщин.Добавить(эл.ФизЛицо);
			КонецЕсли;	
		КонецЦикла;	
    Иначе
		Для каждого эл из Массив Цикл
			Если эл.Сотрудник.ФизЛицо.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
				МассивЖенщин.Добавить(эл.Сотрудник);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
    мОтчетПоТруду.Области.П5010_2.Значение =  МассивЖенщин.Количество();
	
	ПараметрыОтбора.Вставить("ПричинаИзмененияСостояния",Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Массив = ТаблицаПриемУвольнение.НайтиСтроки(ПараметрыОтбора);
	мОтчетПоТруду.Области.П5020_1.Значение =  Массив.Количество();
	МассивЖенщин.Очистить();	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда 
		Для каждого эл из Массив Цикл
			Если эл.ФизЛицо.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
				МассивЖенщин.Добавить(эл.ФизЛицо);
			КонецЕсли;	
		КонецЦикла;		
	Иначе
		Для каждого эл из Массив Цикл
			Если эл.Сотрудник.ФизЛицо.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
				МассивЖенщин.Добавить(эл.Сотрудник);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
    мОтчетПоТруду.Области.П5020_2.Значение =  МассивЖенщин.Количество();
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП" Тогда 
		ЗапросПоСтавкам = Новый Запрос();
		ЗапросПоСтавкам.УстановитьПараметр("Организация", Организация);
		ЗапросПоСтавкам.УстановитьПараметр("ДатаКон",  мДатаКонцаПериодаОтчета);
		
		//через чило занимаемых ставок на конец периода и число ставок вообще
		//по штатному расписанию
		ТекстЗапроса = "
		|ВЫБРАТЬ 
		|СУММА (РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок) КАК Результат
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаКон,(Организация = &Организация)) КАК РаботникиОрганизацийСрезПоследних
		|";
		
		ЗапросПоСтавкам.Текст = ТекстЗапроса;
		РезультатЗапросПоСтавкам = ЗапросПоСтавкам.Выполнить();
		Если Не РезультатЗапросПоСтавкам.Пустой() Тогда
			ТаблицаЗапросПоСтавкам = РезультатЗапросПоСтавкам.Выгрузить();
			КвоЗанятыхСтавок = ?(ТаблицаЗапросПоСтавкам[0].Результат = NULL, 0,  ТаблицаЗапросПоСтавкам[0].Результат);
		КонецЕсли;
		
		ЗапросКвоСтавок = Новый Запрос();
		ЗапросКвоСтавок.УстановитьПараметр("Организация", Организация);
		ЗапросКвоСтавок.УстановитьПараметр("ДатаКон",  мДатаКонцаПериодаОтчета);
		
		
		ТекстЗапроса = "
		|ВЫБРАТЬ 
		|СУММА (ШтатноеРасписаниеСрезПоследних.КоличествоСтавок) КАК Результат
		|ИЗ
		|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(&ДатаКон,ПодразделениеОрганизации.Владелец = &Организация) КАК ШтатноеРасписаниеСрезПоследних
		|";
		
		ЗапросКвоСтавок.Текст = ТекстЗапроса;
		Результат = ЗапросКвоСтавок.Выполнить();
		Если Не Результат.Пустой() Тогда
			ТаблицаЗапросКвоСтавок = Результат.Выгрузить();
			КвоСтавок = ?(ТаблицаЗапросКвоСтавок[0].Результат = NULL, 0, ТаблицаЗапросКвоСтавок[0].Результат);
		КонецЕсли;
		
		мОтчетПоТруду.Области.П5061_1.Значение = КвоСтавок - КвоЗанятыхСтавок;
		
	КонецЕсли;	
	
	
	//число штатных на конец месяца	
	ЗапросПоШтатным = Новый Запрос();
	ЗапросПоШтатным.УстановитьПараметр("Организация",         Организация);
	ЗапросПоШтатным.УстановитьПараметр("ОсновноеМестоРаботы", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	ЗапросПоШтатным.УстановитьПараметр("ДатаСреза",  мДатаКонцаПериодаОтчета);
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда 
				ЗапросПоШтатным.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РаботникиОрганизаций.ФизЛицо,
		|	РаботникиОрганизаций.Приказ.ВидЗанятости						КАК ВидЗанятости
		|
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаСреза)	КАК РаботникиОрганизаций
		|
		|ГДЕ
		|    (РаботникиОрганизаций.Приказ.ВидЗанятости = &ОсновноеМестоРаботы)
		|  И (РаботникиОрганизаций.Приказ.Организация = &Организация)
		|
		|";

	Иначе
		ЗапросПоШтатным.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.ВидЗанятости						КАК ВидЗанятости
		|
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаСреза)	КАК РаботникиОрганизаций
		|
		|ГДЕ
		|    (РаботникиОрганизаций.Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы)
		|  И (РаботникиОрганизаций.Организация = &Организация)
		|
		|";
	КонецЕсли;
		
	Результат = ЗапросПоШтатным.Выполнить();
	Если Не Результат.Пустой() Тогда
		ТаблицаЗапросШтатных = Результат.Выгрузить();
		Штатных = ТаблицаЗапросШтатных.Количество();
		мОтчетПоТруду.Области.П5050_1.Значение = Штатных;
	КонецЕсли;

	
КонецПроцедуры	

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто()  Экспорт

  	СтрокиДекларации = Справочники.СтатьиНалоговыхДеклараций;
  	ПС = ПланыСчетов["Хозрасчетный"];
  	Счет661 = ПС.РасчетыПоЗаработнойПлате;

	
   	//Расчет показателей раздела II
   	ТекстЗапроса = 
	   "ВЫБРАТЬ
	   |	ОтчетПоТруду.ПоказателиВидовОплатыТруда КАК СтатьяДекларации,
	   |	СУММА(ОтчетПоТруду.СуммаОборот) КАК Сумма
	   |ИЗ
	   |	РегистрНакопления.ФОТДляОтчетаПоТруду.Обороты(&НачДата, &КонДата, , ) КАК ОтчетПоТруду
	   |ГДЕ
	   |	ОтчетПоТруду.Организация = &парамОрганизация
	   |СГРУППИРОВАТЬ ПО
	   |	ОтчетПоТруду.ПоказателиВидовОплатыТруда";
   
	Запрос = Новый Запрос ();
	Запрос.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонДата" ,мДатаКонцаПериодаОтчета);
 	Запрос.УстановитьПараметр("парамОрганизация",  Организация);
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
		
		НужнаяСтатья =  СтрокиДекларации.ОтчетПоТруду_ФОТ;
		РасчетПоСтатье(НужнаяСтатья,"П4020_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_ФОТ_ДополнЗП;
		РасчетПоСтатье(НужнаяСтатья,"П4030_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_НадбавкиКОкладам;
		РасчетПоСтатье(НужнаяСтатья,"П4040_1","П4030_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_Премии;
		РасчетПоСтатье(НужнаяСтатья,"П4050_1","П4030_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_КомпенНевыплачЗП;
		РасчетПоСтатье(НужнаяСтатья,"П4060_1","П4030_1"); 
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_КомпенРостЦен;
		РасчетПоСтатье(НужнаяСтатья,"П4070_1","П4030_1"); 

	
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_ФОТ_Компенсация;
		РасчетПоСтатье(НужнаяСтатья,"П4080_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_МатПомощь;
		РасчетПоСтатье(НужнаяСтатья,"П4090_1","П4080_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_СоцЛьготы;
		РасчетПоСтатье(НужнаяСтатья,"П4100_1","П4080_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_ФОТ_НеотработанноеВремя;
		РасчетПоСтатье(НужнаяСтатья,"П4110_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_Отпуск;
		РасчетПоСтатье(НужнаяСтатья,"П4111_1","П4110_1");
		
		Если (Месяц(мДатаКонцаПериодаОтчета) = 12) И (РегламентированнаяОтчетность.ИДКонфигурации() <> "БП") Тогда
			НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_ДивидендыШтатн;
			РасчетПоСтатье(НужнаяСтатья,"П4130_1");
			
			НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_ДивидендыНеШтатн;
			РасчетПоСтатье(НужнаяСтатья,"П4140_1");
			
			НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_Соцстрах;
			РасчетПоСтатье(НужнаяСтатья,"П4144_1");
			
			НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_БольничныеПредприятие;
			РасчетПоСтатье(НужнаяСтатья,"П4145_1","П4144_1");
			
		КонецЕсли;
		
	КонецЕсли;
	
	//для расчета показателей раздела II
	ТаблЧисленностиССЧЖ = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "ССЧ", "КВАРТАЛ", Организация, "Ж"); 
	мОтчетПоТруду.Области.П7010_1.Значение = ТаблЧисленностиССЧЖ[0].Средняя;
	
	ТаблЧисленностиССЧГПХ = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "ССЧ", "КВАРТАЛ", Организация, "ГПХ"); 
	мОтчетПоТруду.Области.П7040_1.Значение = ТаблЧисленностиССЧГПХ[0].Средняя;
	
	СформироватьМассивыРазличныхКатегорийРаботников();

	СформироватьМассивыРазличныхКатегорийРаботников();

	//расчета показателей раздела II
	РасчетНачисленийПоКатегориямРаботников();
	
	//расчета показателей раздела III
	РасчетНачисленийШтатныхРаботников();
	
 	//расчета показателей раздела IV	
 	 РасчетПоказателейРазделаПоДвижениюРабочейСилы();

	Расчет();
	
	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	мОтчетПоТруду.Области.ДеньДаты.Значение 	= ЧастиДатыПодписи.День;
	мОтчетПоТруду.Области.МесяцДаты.Значение 	= ЧастиДатыПодписи.Месяц;
	мОтчетПоТруду.Области.ГодДаты.Значение 		= ЧастиДатыПодписи.ПоследняяЦифраГода;

	Модифицированность = Истина;
	
  КонецПроцедуры // ЗаполнитьАвто()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетПоТруду";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		Если Тип ("РисунокТабличногоДокумента") <> ТипЗнч (ТекущаяОбласть) Тогда
			
			ОписаниеЯчейки = "";
			Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
				ОписаниеЯчейки    = НСтр("ru='Значение вычисляется автоматически';uk='Значення обчислюється автоматично'");
			ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
				ОписаниеЯчейки    = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");
			КонецЕсли;
			
			ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
			ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;
			
		КонецЕсли;
	КонецЕсли;


	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Печатать сразу';uk='Друкувати відразу'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Показать бланк';uk='Показати бланк'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЛинияСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЛинияПусто = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);

	мМассивТиповЛиний = Новый Массив();
	мМассивТиповЛиний.Вставить(0, ЛинияПусто);
	мМассивТиповЛиний.Вставить(1, ЛинияСнизу);

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	ЭтаФорма.АвтоЗаголовок = Ложь;

	мОтчетПоТруду = ЭлементыФормы.ПолеТабличногоДокументаОтчетПоТруду;
	ТекТабличноеПоле = мОтчетПоТруду;
	
	Если мСохраненныйДок = Неопределено Тогда


		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 1;
			УстановитьФорматВывода();
			
			ЭлементыФормы.НазваниеОрганизации.Заголовок= Организация.Наименование;
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();
	мОтчетПоТруду.ТолькоПросмотр = Истина;

	ЗаполнитьСведенияОбОрганизации();
	
//	мОтчетПоТруду.Области.Пр1.Значение = ВосстановитьЗначение("Пр1");
	
	мОтчетПоТруду.Области.Пр2.Значение    = ВосстановитьЗначение("Пр2");
	мОтчетПоТруду.Области.Пр3.Значение    = ВосстановитьЗначение("Пр3");
    мОтчетПоТруду.Области.Пр4.Значение    = ВосстановитьЗначение("Пр4");
	мОтчетПоТруду.Области.Пр5.Значение    = ВосстановитьЗначение("Пр5");
	мОтчетПоТруду.Области.Пр6.Значение    = ВосстановитьЗначение("Пр6");
	мОтчетПоТруду.Области.Пр7.Значение    = ВосстановитьЗначение("Пр7");
    мОтчетПоТруду.Области.Пр8.Значение    = ВосстановитьЗначение("Пр8");
	мОтчетПоТруду.Области.Пр9.Значение    = ВосстановитьЗначение("Пр9");
	мОтчетПоТруду.Области.Пр10.Значение   = ВосстановитьЗначение("Пр10");
	мОтчетПоТруду.Области.Пр11.Значение   = ВосстановитьЗначение("Пр11");
	
	мОтчетПоТруду.Области.Пр100.Значение  = ВосстановитьЗначение("Пр100");
	мОтчетПоТруду.Области.Пр200.Значение  = ВосстановитьЗначение("Пр200");
	мОтчетПоТруду.Области.Пр300.Значение  = ВосстановитьЗначение("Пр300");
    мОтчетПоТруду.Области.Пр400.Значение  = ВосстановитьЗначение("Пр400");
	мОтчетПоТруду.Области.Пр500.Значение  = ВосстановитьЗначение("Пр500");
	мОтчетПоТруду.Области.Пр600.Значение  = ВосстановитьЗначение("Пр600");
	мОтчетПоТруду.Области.Пр700.Значение  = ВосстановитьЗначение("Пр700");
    мОтчетПоТруду.Области.Пр800.Значение  = ВосстановитьЗначение("Пр800");
	мОтчетПоТруду.Области.Пр900.Значение  = ВосстановитьЗначение("Пр900");
	мОтчетПоТруду.Области.Пр1000.Значение = ВосстановитьЗначение("Пр1000");
	мОтчетПоТруду.Области.Пр1100.Значение = ВосстановитьЗначение("Пр1100");

	
//	Если (мОтчетПоТруду.Области.Пр100.Значение = Неопределено) 
//	или  (мОтчетПоТруду.Области.Пр2.Значение = Неопределено) или (мОтчетПоТруду.Области.Пр2.Значение = 0) Тогда

		ЗаполнитьПараметрыГраницРаспределения();
		
//	КонецЕсли;

	УстановитьЦветФонаЯчейки(,,"ОтчетПоТруду");

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность = Истина Тогда

		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения ?';uk='Дані були змінені. Зберегти зміни ?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;

			мСохраненныйДок.Записать();
		КонецЕсли;

	КонецЕсли;
	
//	СохранитьЗначение("Пр1", мОтчетПоТруду.Области.Пр1.Значение);
	СохранитьЗначение("Пр2", мОтчетПоТруду.Области.Пр2.Значение);
	СохранитьЗначение("Пр3", мОтчетПоТруду.Области.Пр3.Значение);
    СохранитьЗначение("Пр4", мОтчетПоТруду.Области.Пр4.Значение);
	СохранитьЗначение("Пр5", мОтчетПоТруду.Области.Пр5.Значение);
	СохранитьЗначение("Пр6", мОтчетПоТруду.Области.Пр6.Значение);
	СохранитьЗначение("Пр7", мОтчетПоТруду.Области.Пр7.Значение);
    СохранитьЗначение("Пр8", мОтчетПоТруду.Области.Пр8.Значение);
	СохранитьЗначение("Пр9", мОтчетПоТруду.Области.Пр9.Значение);
	СохранитьЗначение("Пр10", мОтчетПоТруду.Области.Пр10.Значение);
	СохранитьЗначение("Пр11", мОтчетПоТруду.Области.Пр11.Значение);
	
	СохранитьЗначение("Пр100", мОтчетПоТруду.Области.Пр100.Значение);
	СохранитьЗначение("Пр200", мОтчетПоТруду.Области.Пр200.Значение);
	СохранитьЗначение("Пр300", мОтчетПоТруду.Области.Пр300.Значение);
    СохранитьЗначение("Пр400", мОтчетПоТруду.Области.Пр400.Значение);
	СохранитьЗначение("Пр500", мОтчетПоТруду.Области.Пр500.Значение);
	СохранитьЗначение("Пр600", мОтчетПоТруду.Области.Пр600.Значение);
	СохранитьЗначение("Пр700", мОтчетПоТруду.Области.Пр700.Значение);
    СохранитьЗначение("Пр800", мОтчетПоТруду.Области.Пр800.Значение);
	СохранитьЗначение("Пр900", мОтчетПоТруду.Области.Пр900.Значение);
	СохранитьЗначение("Пр1000", мОтчетПоТруду.Области.Пр1000.Значение);
	СохранитьЗначение("Пр1100", мОтчетПоТруду.Области.Пр1100.Значение);

КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	// Заглушка
	//ЗаполнитьДемо();
	
	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить() ;

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)


	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	
	мОтчетПоТруду.Области.ДеньДаты.Значение 	= ЧастиДатыПодписи.День;
	мОтчетПоТруду.Области.МесяцДаты.Значение = ЧастиДатыПодписи.Месяц;
	мОтчетПоТруду.Области.ГодДаты.Значение 	= ЧастиДатыПодписи.ПоследняяЦифраГода;
	
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаОтчетПоТрудуПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаБалансПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа.
//   Устанавливает признак модифицированности данных в форме, вызывает пересчет
// вычисляемых показателей  табличных полей и обновляет структуру данных
// многострочного раздела.
//
Процедура ПолеТабличногоДокументаОтчетПоТрудуПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	Расчет();
	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаОтчетПоТрудуПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа.
//
Процедура ПолеВыбораВариантЗаполненияОтчетПоТрудуПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки.
//
Процедура ПолеВводаЗначениеКорректировкиОтчетПоТрудуПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиПриИзменении

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// "Комментарий" по ячейке, для которой установлен алгоритм автозаполнения 
// [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийОтчетПоТрудуПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийПриИзменении()

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       НСтр("ru='в гривнях';uk='у гривнях'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    НСтр("ru='в тысячах гривень';uk='у тисячах гривень'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, НСтр("ru='в миллионах гривень';uk='у мільйонах гривень'"));


// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетПоТруду.СписокВыбора.Добавить(1, НСтр("ru='не заполнять автоматически';uk='не заповнювати автоматично'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетПоТруду.СписокВыбора.Добавить(2, НСтр("ru='заполнять автоматически с корректировкой';uk='заповнювати автоматично з коригуванням'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетПоТруду.СписокВыбора.Добавить(3, НСтр("ru='заполнять автоматически без корректировки';uk='заповнювати автоматично без коригування'"));

ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));


ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

мСоставПоказателей = "СоставПоказателейКв";

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
мВерсияФормы = "30/09/2003";
// Код отчета, равен коду по ОКУД
мКодОтчета   = "0710001";

мПечатныеФормы = Новый СписокЗначений;

