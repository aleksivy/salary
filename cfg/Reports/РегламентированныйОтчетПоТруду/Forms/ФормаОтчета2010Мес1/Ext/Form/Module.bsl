////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
//каждая закладка отчета - это объект ПолеТабличногоДокумента
Перем мОтчетПоТруду;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

Перем мСоставПоказателей Экспорт;

// хранят структуру многострочных разделов
//Перем мСтруктураМногострочныхРазделов;
//Перем мСтруктураИсхКолвоСтрокРазделов;

Перем МассивШтатных;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы;
Перем мПечатныеФормы Экспорт;
Перем ЕстьДуплекс;

перем Счет661;

Перем мМенеджерЗвит1С Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки(Макет = "СоставПоказателей2010Мес1") Экспорт
	
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(Макет);
	
	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
			
			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;
		
	КонецЦикла;
	
	ЭлементыФормы.ПолеТабличногоДокументаОтчетПоТрудуМес.ОбластьПечати = ЭлементыФормы.ПолеТабличногоДокументаОтчетПоТрудуМес.Области.Найти("ПредупреждениеОПечати");
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()


// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)
	
	СтруктураПоказателейВнутрСвязи = Новый Структура;
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		Если НЕ (ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента")) Тогда
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;
		//
		//Если ТекущаяОбласть.Защита Тогда
		//	Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;
		//
		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		
		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;
			
			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице
			
			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
			
			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
			
			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
			
			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
			
			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
			
			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2010Мес1");
			
			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
				
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;
					
					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;
					
					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;
					
					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
					
					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаВариантыЗаполнения;
	
КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;
	
	ЕстьИзменения = Ложь;
	
	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц
	
	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2010Мес1");
	
	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	
	ЕстьИзменения = Ложь;
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
			
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку
				
				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
				
				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
				
				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий параметры автозаполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);
				
				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки параметров автозаполнения текущей страницы.
				
				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						
						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;
						
						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии формы для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя, а в текущей - отключено.
							// В этом случае удаляем ячейку из таблицы пользовательских настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);
							
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции // ОбновитьВариантыЗаполнения()

// Процедура управляет показом в форме периода построения отчета,
Процедура ПоказатьПериод()
	
	ПериодОтчета = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг';Л = uk_UA") + " р.";
	
	мОтчетПоТруду.Области.ПериодОтчета.Значение = "Січень - " + ПериодОтчета;
	
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (на " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг';Л = uk_UA") + " року )" ;
	
	МесяцРасчета = Месяц(мДатаНачалаПериодаОтчета);
	МесяцЗадол = ДобавитьМесяц(мДатаКонцаПериодаОтчета,1);
	
	МесяцОтчетаСтр= Формат(МесяцЗадол, "ДФ = 'дд ММММ ';Л = uk_UA");
	ЧислоСимволов = СтрДлина(МесяцОтчетаСтр) - 3;
	
    мОтчетПоТруду.Области.МесяцОтчета.Значение = Сред(МесяцОтчетаСтр,3,ЧислоСимволов);
	ГодОтчета = Год (МесяцЗадол); 
	
	мОтчетПоТруду.Области.ГодОтчета.Значение = Прав (ГодОтчета,2);
	
КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
// пока не прописаны коды - вернуться
Процедура ЗаполнитьСведенияОбОрганизации()
	
	ОргНазв = Организация.НаименованиеПолное;
	мОтчетПоТруду.Области.ОргНазв.Значение = ОргНазв;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","КодКОАТУУ");
	СписокПоказателей.Добавить("","КодКФВ");
	СписокПоказателей.Добавить("","КодКВЕД");
	СписокПоказателей.Добавить("","Территория");
	СписокПоказателей.Добавить("","ОрганГУ");
	СписокПоказателей.Добавить("","КодОПФГ");
	
	ФИОДиректора       = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФИОРук;
	ФИОГлавБуха        = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФИОБух;
	КодЕДРПОУ          = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодПоЕДРПОУ;
	КодКОАТУУ          = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодКОАТУУ;
	КодКФВ             = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодКФВ;
	КодКВЕД            = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодКВЕД;
	ОрганГУ            = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ОрганГУ;
	КодОПФГ            = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодОПФГ; 
	
	мОтчетПоТруду.Области.Телефон.Значение = УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	мОтчетПоТруду.Области.Факс.Значение    = УправлениеКонтактнойИнформацией.ПолучитьФаксИзКонтактнойИнформации(Организация);
	мОтчетПоТруду.Области.ЕлПочта.Значение = УправлениеКонтактнойИнформацией.ПолучитьEmailИзКонтактнойИнформации(Организация);
	
	мОтчетПоТруду.Области.ОргДиректор.Значение           = ФИОДиректора;
	
	Для НомЯчейки = 1 По 8 Цикл
		ЭлементыФормы["ПолеТабличногоДокументаОтчетПоТрудуМес"].Области["ЕДРПОУ" + НомЯчейки].Значение = Сред(Строка(КодЕДРПОУ), НомЯчейки, 1);
	КонецЦикла;
	
	//ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	мОтчетПоТруду.Области.ОргЮрАдрес.Значение  = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
	мОтчетПоТруду.Области.ОргАдрес.Значение    = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Фактический");
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		
		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(НСтр("ru='Отчет по труду: при выводе сумм в гривнях точность не может превышать 2 знака';uk='Звіт з праці: при виведенні сум у гривнях точність не може перевищувати 2 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		
		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(НСтр("ru='Отчет по труду: при выводе сумм в тысячах гривень точность не может превышать 3 знака';uk='Звіт з праці: при виведенні сум у тисячах гривень точність не може перевищувати 3 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		
		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(НСтр("ru='Отчет по труду: при выводе сумм в миллионах гривень точность не может превышать 6 знаков';uk='Звіт з праці: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;
		
	КонецЕсли;
	
	Сообщить(НСтр("ru='После изменения формата вывода значений, для корректного расчета итогов необходимо перезаполнить отчет!';uk='Після зміни формату виводу значень, для корректного розрахунку підсумків треба перезаполвнити звіт!'"), СтатусСообщения.Внимание);	
	
КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";
		
	КонецЕсли;
	
	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл
		
		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;
		
		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);
		
		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;
		
		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		
		Если ТипДанныхПоказателя = "Е" Тогда
			
			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];
			
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "ОтчетПоТрудуМес";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;
		
		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		
	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы
		
		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Коммент           = Строка.Комментарий;
			
			Попытка
				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Исключение
				Продолжить;
			КонецПопытки;
			Если (Не ПустаяСтрока(Коммент)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Коммент;
			КонецЕсли;
			
			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
			
			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦветФонаЯчейки()


// Обновляет пользовательские настройки при изменении версии формы.
// унифицирована, однако использование пока ... вопрос
Процедура ОбновитьПользовательскиеНастройки(СписокСохранения)
	Перем ПоказателиОтчета;
	
	Сообщить(НСтр("ru='Измененилась версия формы отчета."
	"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
	"Виконується відновлення користувальницьких настройок.'"), СтатусСообщения.Информация);
	
	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();
	
	ВерсияФормы = СписокСохранения.ВерсияФормы;
	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ВерсияФормы = "30/09/2003" Тогда
		
		Если  ВерсияФормы = "30/09/2003" Тогда
			Если СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета) Тогда
				Для Каждого ЭлементСтруктуры Из ПоказателиОтчета Цикл
					ИмяГруппы       = ЭлементСтруктуры.Ключ;
					СписокПоказателей = ЭлементСтруктуры.Значение;
					
					Если ИмяГруппы = "ПолеТабличногоДокументаОтчетПоТрудуМес" Тогда
						Для каждого Показатель Из СписокПоказателей Цикл
							Если Показатель.Ключ = "ГодОтчета" Тогда
									СписокПоказателей.Вставить(Показатель.Ключ, Формат(ДатаПодписи, "ДФ=yy"));
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				СписокСохранения.ПоказателиОтчета =  ПоказателиОтчета;
			КонецЕсли;
		КонецЕсли;
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;
		
		Сообщить(НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Оновлення користувальницьких настройок успішно завершене!'"));
		
	Иначе
		
		Сообщить(НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі користувальницьких настройок не виявлені!'"));
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПользовательскиеНастройки()


// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)
	
	ИмяПоказателя = ТекущаяЯчейка.Имя;
	
	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяЯчейка) <> Тип("РисунокТабличногоДокумента") Тогда
		
		Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
			Возврат;
		КонецЕсли;
		
		Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
			ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
			Возврат;
		КонецЕсли;
		
		Если ТекущаяЯчейка.Защита Тогда
			ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетПоТрудуМес";
	
	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;
	
	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Коммент           = НайденнаяСтрока.Комментарий;
	
	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Коммент;
	
	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);
	
КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)
	
	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетПоТрудуМес";
	
	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;
	
	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;
	
	Если НовыйВариант = 1 Тогда
		
		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		
	ИначеЕсли НовыйВариант = 2 Тогда
		
		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет();
		КонецЕсли;
		
		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
		
		НайденнаяСтрока.Дельта = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		
	ИначеЕсли НовыйВариант = 3 Тогда
		
		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;
		
		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";
		
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		
		// Очищаем комментарий редактируемой ячейки
		ТекущаяОбласть.Примечание.Текст = "";
		
	КонецЕсли;
	
	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);
	
КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)
	
	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетПоТрудуМес";
	
	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;
	
	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;
		
		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Коммент)
	
	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетПоТрудуМес";
	
	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;
	
	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Коммент;
	КонецЕсли;
	
	ТекущаяОбласть.Примечание.Текст = Коммент;
	
КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя)
	
	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("ОтчетПоТруду2008Мес");
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда
		
		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;
			
			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	мОтчетПоТруду.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
	
КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)
	
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		Если Тип ("РисунокТабличногоДокумента") <> ТипЗнч (ТекущаяОбласть) Тогда
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ТекущаяОбласть.СодержитЗначение Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяОбласть.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить()
	
	// Очищаем содержимое ячеек поля табличного документа
	ТекТабличноеПоле = мОтчетПоТруду;
	ОчиститьТабличноеПоле(ТекТабличноеПоле);
	
	// Выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();
	
	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;
	
	ЗаполнитьСведенияОбОрганизации();
	ПоказатьПериод();
КонецПроцедуры // Очистить()

Процедура РазбитьПечатнуюФорму(ПечФорма)
	
	ИмяФормы = "ОтчетПоТрудуМес";
	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = Истина;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	Если ЕстьДуплекс Тогда
		НовТаблДок = Новый ТабличныйДокумент();
	КонецЕсли;
	
	Сч = 0;
	Пока Сч < ПечФорма.ВысотаТаблицы Цикл
		 Сч = Сч + 1;
		 
		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			
			// проверим, не должна ли предпоследняя строка печататься вместе со текущей ("не влезшей") строкой.
			// если так, то "откатимся" вверх
			Пока ПослВерх < Сч-1 И ПечФорма.ПолучитьОбласть(Сч-1, , Сч-1, ).Область().ВместеСоСледующим Цикл
			  Сч = Сч - 1;
			КонецЦикла; 
			
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		Если НЕ ЕстьДуплекс Тогда
			НовТаблДок = Новый ТабличныйДокумент();
		КонецЕсли;
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = Истина;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		Если НЕ ЕстьДуплекс Тогда
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
		КонецЕсли;
	КонецЕсли;
	Если ЕстьДуплекс Тогда
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;

	
КонецПроцедуры

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати)
	мПечатныеФормы.Очистить();
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ОбластьПечати = мОтчетПоТруду.ПолучитьОбласть("Шапка");
	ПечатнаяФорма.Вывести(ОбластьПечати);
	
	ПечатнаяФорма.ВывестиВертикальныйРазделительСтраниц();
	
	ОбластьПечати = мОтчетПоТруду.ПолучитьОбласть("Отчет");
	ПечатнаяФорма.Вывести(ОбластьПечати);
	
	ОбластьПечати = мОтчетПоТруду.ПолучитьОбласть("Подвал");
	ПечатнаяФорма.Вывести(ОбластьПечати);
			
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Ложь;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	
	//	Если ВидПечати = "ПоказатьБланк" Тогда
	//		ПечатнаяФорма.Показать(СокрП(ЭтаФорма.Заголовок));
	//	ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
	//		ПечатнаяФорма.Напечатать();
	//	КонецЕсли;
	
	РазбитьПечатнуюФорму(ПечатнаяФорма);
	
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	
КонецПроцедуры // Печать()


// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить()   Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;

	
	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.
		
		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;
		
		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.Периодичность			   = Периодичность;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	
	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	//Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
	
	//	ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
	//	ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
	
	//	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	//	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	
	//КонецЦикла;
	
	//ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаОтчетПоТрудуМес";
	//ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекТабличноеПоле        = мОтчетПоТруду;
	
	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		СписокСохранения.Вставить("ТаблицаВРБольничные", ТаблицаВРБольничные.ВыгрузитьКолонку("ВидРасчета"));
		СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничные", ТаблицаВРБольничные.ВыгрузитьКолонку("ВидРасчета"));	
	КонецЕсли;
	
	// Сохраняем выбранные листы для печати в хранилище
	ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
	мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Расшифровка;
	
	// восстанавливаем реквизиты отчета
	Организация              = мСохраненныйДок.Организация;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;
	
	ЭлементыФормы.НазваниеОрганизации.Заголовок= Организация.Наименование;
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;
	
	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			//	Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки(СписокСохранения);
		КонецЕсли;
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			
			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
    Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		// только для бухгалтерии
		мТаблицаВРБольничные = Неопределено;
		СписокСохранения.Свойство("ТаблицаВРБольничные", мТаблицаВРБольничные);
		
		Если мТаблицаВРБольничные = Неопределено Тогда
			// попробуем поднять значение общее для регл. отчетности
			мТаблицаВРБольничные = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничные");	
		КонецЕсли;
		Если НЕ мТаблицаВРБольничные = Неопределено Тогда
			ТаблицаВРБольничные.Очистить();
			Для каждого ВР Из мТаблицаВРБольничные Цикл
				СтрокаВР = ТаблицаВРБольничные.Добавить();
				СтрокаВР.ВидРасчета = ВР;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьФорматВывода();
	Расчет();
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()
	
КонецПроцедуры // Расчет()

Функция ДатаНачалаНачисленийТекПериода(НачДата, КонДата, Организация, ИмяРегистра)

	НачДатаПрошлыеОтпуска = мДатаНачалаПериодаОтчета;
	ЗапросПериода = Новый Запрос;
	ЗапросПериода.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	НАЧАЛОПЕРИОДА(РегистрДанных.Период, МЕСЯЦ) КАК НачДатаПрошлыеОтпуска
	                      |ИЗ
	                      |	РегистрНакопления."+ИмяРегистра+".Обороты(,&КонДата,МЕСЯЦ,
	                      |				  Организация = &Организация
	                      |				И ПериодВзаиморасчетов >= &НачДата
	                      |				И ПериодВзаиморасчетов <= &КонДата) КАК РегистрДанных
	                      |ГДЕ
	                      |	Период < &НачДата
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НачДатаПрошлыеОтпуска";
						  
	ЗапросПериода.УстановитьПараметр("НачДата", НачДата);
	ЗапросПериода.УстановитьПараметр("КонДата" ,КонДата);
	ЗапросПериода.УстановитьПараметр("Организация" ,Организация);
	Выборка = ЗапросПериода.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НачДатаПрошлыеОтпуска;
	Иначе
		Возврат НачДата;
	КонецЕсли;
	
КонецФункции

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто()   Экспорт
	
	////////
	// *** Здесь необходимо написать алгоритм заполнения отчета.***
	//
	// Для присвоения показателям отчета вычисленного значения необходимо
	// использовать процедуру
	//
	//     УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя).
	//
	////////
	ПС = ПланыСчетов["Хозрасчетный"];
	Счет661 = ПС.РасчетыПоЗаработнойПлате;
	
	
	////////////////////////////////
	ТаблЧисленностиЭПЗ = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "ЭПЗ", "МЕСЯЦ", Организация, ""); 
	Ном = ТаблЧисленностиЭПЗ.Количество() - 1;
	УстановитьЗначениеПоказателя("П1010_1",ТаблЧисленностиЭПЗ[Ном].Средняя);
	
	ТаблЧисленностиЭПЗ = ПроведениеРасчетов.ПолучитьСреднююЧисленность(НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета, "ЭПЗ", "МЕСЯЦСНАЧАЛАГОДА", Организация, ""); 
	Ном = ТаблЧисленностиЭПЗ.Количество() - 1;
	УстановитьЗначениеПоказателя("П1010_2",ТаблЧисленностиЭПЗ[Ном].Средняя);
	
	
	////////////////////////////////
	//ФОТ всех работников и  ФОТ штатных работников
	// Определим ФОТ по запросу к РР Начисления, определяя его по параметру ФОТ-НеФОТ для отчета по труду.
	// одновременно рассчитываем к какому виду НДФЛ они относятся.
	Если    РегламентированнаяОтчетность.ИДКонфигурации() = "УПП" 
		ИЛИ РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП" Тогда 
		ИмяРегистра   = "ОсновныеНачисленияРаботниковОрганизаций";
		УсловиеПериод = "ПериодДействия"
	ИначеЕсли РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
		ИмяРегистра = "Начисления";
		УсловиеПериод = "ПериодДействия";
	Иначе	
		ИмяРегистра = "Начисления";	
		УсловиеПериод = "ДатаНачала";
	КонецЕсли;
	
	Запрос = Новый Запрос ();
	Запрос.Текст = "ВЫБРАТЬ
	                |	Начисления.Результат КАК Сумма,
					|	ВЫБОР
					|		КОГДА Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы) 
					|         ТОГДА Начисления.Результат
					|		  ИНАЧЕ 0
					|   КОНЕЦ КАК СуммаШтат,
					|	ВЫБОР
	                |		КОГДА Начисления.ВидРасчета.ПоказателиВидовОплатыТруда В ИЕРАРХИИ (&НеФОТ)
	                |				ИЛИ Начисления.ВидРасчета.ПоказателиВидовОплатыТруда = &НеФОТ
	                |			ТОГДА ЛОЖЬ
	                |		ИНАЧЕ ИСТИНА
	                |	КОНЕЦ КАК ЭтоФОТ,
					|	ВЫБОР
	                |		КОГДА Начисления.ВидРасчета.ПоказателиВидовОплатыТруда В ИЕРАРХИИ (&НеФОТ)
	                |				ИЛИ Начисления.ВидРасчета.ПоказателиВидовОплатыТруда = &НеФОТ
	                |			ТОГДА 0
	                |		ИНАЧЕ Начисления.Результат
	                |	КОНЕЦ КАК СуммаФОТ,
					|	Начисления.ВидРасчета.ДоходНДФЛ КАК КодНДФЛ
	                |ПОМЕСТИТЬ ВремТаблица
	                |ИЗ
	                |	РегистрРасчета."+ИмяРегистра+" КАК Начисления
	                |ГДЕ
					|	Начисления."+УсловиеПериод+" МЕЖДУ &НачалоПериода И &КонецПериода
	                |	И Начисления.Организация = &парамОрганизация
	                |;
	                |
	                |ВЫБРАТЬ
	                |	СУММА(ВремТаблица.Сумма) КАК Сумма,
	                |	СУММА(ВремТаблица.СуммаФОТ) КАК СуммаФОТ,
	                |	СУММА(ВремТаблица.СуммаШтат) КАК СуммаШтат,
	                |	ВремТаблица.ЭтоФОТ,
	                |	ВремТаблица.КодНДФЛ
	                |ИЗ
	                |	ВремТаблица КАК ВремТаблица
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ВремТаблица.ЭтоФОТ,
	                |	ВремТаблица.КодНДФЛ";
		
	Запрос.УстановитьПараметр("НачалоПериода", мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода" , мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода" , мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("парамОрганизация" , Организация);
	Запрос.УстановитьПараметр("НеФОТ",  	   Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_НеФОТ);
	НачисленияЗаМесяц = Запрос.Выполнить().Выгрузить();
	П1020_1 = 0;
	П1070_1 = 0;
	СтрокиФОТ = НачисленияЗаМесяц.НайтиСтроки(Новый Структура("ЭтоФОТ", Истина));
	Для каждого СтрокаФОТ Из СтрокиФОТ Цикл
		П1020_1 = П1020_1 + СтрокаФОТ.Сумма;	
		П1070_1 = П1070_1 + СтрокаФОТ.СуммаШтат;	
	КонецЦикла;
	УстановитьЗначениеПоказателя("П1020_1",П1020_1);
	УстановитьЗначениеПоказателя("П1070_1",П1070_1);
	НачисленияЗаМесяц.Свернуть("КодНДФЛ","Сумма,СуммаФОТ");
	НачисленияЗаМесяц.Колонки.Добавить("КоэфНДФЛ");
	Для каждого СтрокаНачислений Из НачисленияЗаМесяц Цикл
		Если СтрокаНачислений.Сумма = 0 Тогда
			СтрокаНачислений.КоэфНДФЛ = 0;
		Иначе
			СтрокаНачислений.КоэфНДФЛ = СтрокаНачислений.СуммаФОТ / СтрокаНачислений.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода" , мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("парамОрганизация",  Организация);
	НачисленияСНачалаГода = Запрос.Выполнить().Выгрузить();
	П1020_2 = 0;
	П1070_2 = 0;
	СтрокиФОТ = НачисленияСНачалаГода.НайтиСтроки(Новый Структура("ЭтоФОТ", Истина));
	Для каждого СтрокаФОТ Из СтрокиФОТ Цикл
		П1020_2 = П1020_2 + СтрокаФОТ.Сумма;	
		П1070_2 = П1070_2 + СтрокаФОТ.СуммаШтат;	
	КонецЦикла;
	УстановитьЗначениеПоказателя("П1020_2",П1020_2);
	УстановитьЗначениеПоказателя("П1070_2",П1070_2);
	НачисленияСНачалаГода.Свернуть("КодНДФЛ","Сумма,СуммаФОТ");
	НачисленияСНачалаГода.Колонки.Добавить("КоэфНДФЛ");
	Для каждого СтрокаНачислений Из НачисленияСНачалаГода Цикл
		Если СтрокаНачислений.Сумма = 0 Тогда
			СтрокаНачислений.КоэфНДФЛ = 0;
		Иначе
			СтрокаНачислений.КоэфНДФЛ = СтрокаНачислений.СуммаФОТ / СтрокаНачислений.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	////////////////////////////////
	//НДФЛ, отчисленный с ФОТ (пропорционально суммам ФОТ в облагаеых доходах
	ЗапросНДФЛ = Новый Запрос;
	ЗапросНДФЛ.Текст = "
	|ВЫБРАТЬ
	|  Сумма(ВзаиморасчетыПоНДФЛОбороты.НалогПриход) КАК Результат,
	|  ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ 		 КАК КодНДФЛ
	|ИЗ                                                                                                  
	|   РегистрНакопления.ВзаиморасчетыПоНДФЛ.Обороты(&ДатаНачалаНачислений, &КонДата,МЕСЯЦ , Организация = &Организация 
	|																				    И ПериодВзаиморасчетов >= &НачДата
	|																	  			    И ПериодВзаиморасчетов <= &КонДата) КАК ВзаиморасчетыПоНДФЛОбороты
	|ГДЕ
	|   ПериодВзаиморасчетов МЕЖДУ &НачДата И &КонДата
	|
	|СГРУППИРОВАТЬ ПО
	|	 ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ
	|";
	
	ЗапросНДФЛ.УстановитьПараметр("Организация", Организация);
	
	ЗапросНДФЛ.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
	ЗапросНДФЛ.УстановитьПараметр("КонДата", мДатаКонцаПериодаОтчета);
	ЗапросНДФЛ.УстановитьПараметр("ДатаНачалаНачислений", ДатаНачалаНачисленийТекПериода(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, Организация, "ВзаиморасчетыПоНДФЛ"));
	
	ТаблицаНДФЛ =  ЗапросНДФЛ.Выполнить().Выгрузить();
	СуммаНДФЛ = 0;
	Для каждого СтрокаНДФЛ Из ТаблицаНДФЛ Цикл
		СтрокаНачислений = НачисленияЗаМесяц.Найти(СтрокаНДФЛ.КодНДФЛ);
		Если НЕ СтрокаНачислений = Неопределено Тогда
			СуммаНДФЛ = СуммаНДФЛ + СтрокаНДФЛ.Результат * СтрокаНачислений.КоэфНДФЛ
		КонецЕсли;
	КонецЦикла;
	УстановитьЗначениеПоказателя("П1030_1", СуммаНДФЛ);
	
	ЗапросНДФЛ.УстановитьПараметр("НачДата", НачалоГода(мДатаНачалаПериодаОтчета));
	ЗапросНДФЛ.УстановитьПараметр("КонДата", мДатаКонцаПериодаОтчета);
	ЗапросНДФЛ.УстановитьПараметр("ДатаНачалаНачислений", ДатаНачалаНачисленийТекПериода(НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета, Организация, "ВзаиморасчетыПоНДФЛ"));
	
	ТаблицаНДФЛ = ЗапросНДФЛ.Выполнить().Выгрузить();
	СуммаНДФЛ = 0;
	Для каждого СтрокаНДФЛ Из ТаблицаНДФЛ Цикл
		СтрокаНачислений = НачисленияСНачалаГода.Найти(СтрокаНДФЛ.КодНДФЛ);
		Если НЕ СтрокаНачислений = Неопределено Тогда
			СуммаНДФЛ = СуммаНДФЛ + СтрокаНДФЛ.Результат * СтрокаНачислений.КоэфНДФЛ
		КонецЕсли;
	КонецЦикла;
	УстановитьЗначениеПоказателя("П1030_2", СуммаНДФЛ);	
	
	////////////////////////////////	
	ТаблСреднеспЧисленности = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "ССЧ", "МЕСЯЦ", Организация, "Штат"); 
	СреднеспКво = ТаблСреднеспЧисленности[0].Средняя;
	
	УстановитьЗначениеПоказателя("П1040_1", СреднеспКво);
	
	ТаблСреднеспЧисленности = ПроведениеРасчетов.ПолучитьСреднююЧисленность(НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета, "ССЧ", "МЕСЯЦСНАЧАЛАГОДА", Организация, "Штат"); 
	СреднеспКво = ТаблСреднеспЧисленности[0].Средняя;
	УстановитьЗначениеПоказателя("П1040_2", СреднеспКво);
	
	////////////////////////////////	
	ИмяРегистраРасчета = "Начисления";
	Если     РегламентированнаяОтчетность.ИДКонфигурации()="ЗУП" 
		ИЛИ  РегламентированнаяОтчетность.ИДКонфигурации()="УПП" Тогда 
		ИмяРегистраРасчета = "ОсновныеНачисленияРаботниковОрганизаций";	
	КонецЕсли;
	
	РабочееВремя = Новый Запрос;
	РабочееВремя.Текст = "ВЫБРАТЬ
						 |	ЕстьNULL(СУММА(ВЫБОР
						 |			КОГДА НАЧАЛОПЕРИОДА(Рег.ПериодРегистрации, МЕСЯЦ) = &парамМесяцОтчета
						 |					И (НЕ Рег.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство))
						 |				ТОГДА ВЫБОР
						 |						КОГДА Рег.Сторно
						 |							ТОГДА -1
						 |						ИНАЧЕ 1
						 |					КОНЕЦ * Рег.ОтработаноЧасов
						 |			ИНАЧЕ 0
						 |		КОНЕЦ),0) КАК ОтработаноЧасовЗаМесяц,
						 |	ЕстьNULL(СУММА(ВЫБОР
						 |			КОГДА (НЕ Рег.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство))
						 |				ТОГДА ВЫБОР
						 |						КОГДА Рег.Сторно
						 |							ТОГДА -1
						 |						ИНАЧЕ 1
						 |					КОНЕЦ * Рег.ОтработаноЧасов
						 |			ИНАЧЕ 0
						 |		КОНЕЦ),0) КАК ОтработаноЧасовСНачалаГода,
						 |	ЕстьNULL(СУММА(ВЫБОР
						 |			КОГДА НАЧАЛОПЕРИОДА(Рег.ПериодРегистрации, МЕСЯЦ) = &парамМесяцОтчета
						 |					И (НЕ Рег.ВидРасчета В (&Больничные))
						 |					И Рег.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
						 |				ТОГДА ВЫБОР
						 |						КОГДА Рег.Сторно
						 |							ТОГДА -1
						 |						ИНАЧЕ 1
						 |					КОНЕЦ * Рег.ОтработаноЧасов
						 |			ИНАЧЕ 0
						 |		КОНЕЦ),0) КАК ОплаченоИОтработаноЧасовЗаМесяц,
						 |	ЕстьNULL(СУММА(ВЫБОР
						 |			КОГДА Рег.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
						 |					И (НЕ Рег.ВидРасчета В (&Больничные))
						 |				ТОГДА ВЫБОР
						 |						КОГДА Рег.Сторно
						 |							ТОГДА -1
						 |						ИНАЧЕ 1
						 |					КОНЕЦ * Рег.ОтработаноЧасов
						 |			ИНАЧЕ 0
						 |		КОНЕЦ),0) КАК ОплаченоИОтработаноЧасовСНачалаГода,
						 |	ЕстьNULL(СУММА(ВЫБОР
						 |			КОГДА НАЧАЛОПЕРИОДА(Рег.ПериодРегистрации, МЕСЯЦ) = &парамМесяцОтчета
						 |					И (НЕ Рег.ВидРасчета В (&Больничные))
						 |					И Рег.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
						 |					И Рег.ОтработаноЧасов = 0
						 |					И Рег.НормаЧасов > 0
						 |					И Рег.Результат <> 0
						 |				ТОГДА ВЫБОР
						 |						КОГДА Рег.Сторно
						 |							ТОГДА -1
						 |						ИНАЧЕ 1
						 |					КОНЕЦ * Рег.НормаЧасов
						 |			ИНАЧЕ 0
						 |		КОНЕЦ),0) КАК ОплаченоИНЕОтработаноЧасовЗаМесяц,
						 |	ЕстьNULL(СУММА(ВЫБОР
						 |			КОГДА Рег.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
						 |					И (НЕ Рег.ВидРасчета В (&Больничные))
						 |					И Рег.ОтработаноЧасов = 0
						 |					И Рег.НормаЧасов > 0
						 |					И Рег.Результат <> 0
						 |				ТОГДА ВЫБОР
						 |						КОГДА Рег.Сторно
						 |							ТОГДА -1
						 |						ИНАЧЕ 1
						 |					КОНЕЦ * Рег.НормаЧасов
						 |			ИНАЧЕ 0
						 |		КОНЕЦ),0) КАК ОплаченоИНЕОтработаноЧасовСНачалаГода
						 |ИЗ
						 |	РегистрРасчета."+ИмяРегистраРасчета+" КАК Рег
						 |ГДЕ
						 |	  Рег.ПериодРегистрации МЕЖДУ &парамНачалоГода И &парамПериод
						 |	И Рег.Организация = &парамОрганизация
						 |	И Рег.Активность";
	
	РабочееВремя.УстановитьПараметр("парамНачалоГода",	НачалоГода(мДатаНачалаПериодаОтчета));
	РабочееВремя.УстановитьПараметр("парамПериод",		КонецМесяца(мДатаНачалаПериодаОтчета));
	РабочееВремя.УстановитьПараметр("парамМесяцОтчета",	НачалоМесяца(мДатаНачалаПериодаОтчета));
	РабочееВремя.УстановитьПараметр("парамОрганизация",	Организация);
	МассивБольничных = Новый Массив();
	Если     РегламентированнаяОтчетность.ИДКонфигурации()="ЗУП" 
		ИЛИ  РегламентированнаяОтчетность.ИДКонфигурации()="УПП" Тогда 
		МассивБольничных.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ);
		МассивБольничных.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛОрганизации);
		МассивБольничных.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве);
	ИначеЕсли РегламентированнаяОтчетность.ИДКонфигурации()="УТП" Тогда
		МассивБольничных.Добавить(ПланыВидовРасчета.Начисления.ОплатаПоСреднемуБЛ);
		МассивБольничных.Добавить(ПланыВидовРасчета.Начисления.ОплатаПоСреднемуБЛОрганизации);
		МассивБольничных.Добавить(ПланыВидовРасчета.Начисления.ОплатаПоСреднемуБЛТравмаНаПроизводстве);
	Иначе// БП
		МассивБольничных = ТаблицаВРБольничные.ВыгрузитьКолонку("ВидРасчета");
	КонецЕсли;
	РабочееВремя.УстановитьПараметр("Больничные",	МассивБольничных);
	
	Результат = РабочееВремя.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		УстановитьЗначениеПоказателя("П1050_1",Результат.ОплаченоИОтработаноЧасовЗаМесяц 	 + Результат.ОплаченоИНЕОтработаноЧасовЗаМесяц);
		УстановитьЗначениеПоказателя("П1050_2",Результат.ОплаченоИОтработаноЧасовСНачалаГода + Результат.ОплаченоИНЕОтработаноЧасовСНачалаГода);
		
		УстановитьЗначениеПоказателя("П1060_1",Результат.ОтработаноЧасовЗаМесяц);
		УстановитьЗначениеПоказателя("П1060_2",Результат.ОтработаноЧасовСНачалаГода);
	КонецЦикла;
	
	//////////////////////////////////////////////////////
	//Сума заборгованості з виплати заробітної плати на початок звітного періоду
	Сообщить(НСтр("ru='Невозможно автоматически исключать из состава строк 2010 и 2020 сумму задолженности по больничному!';uk='Неможливо автоматично виключати зі складу рядків 2010 та 2030 суму заборгованості по лікарняним!'"));
	ЗапросСуммаЗадолжКонец = Новый Запрос;
	ЗапросСуммаЗадолжКонец.Текст = "
	|ВЫБРАТЬ
	|	Сумма(СуммаВзаиморасчетовОстаток) КАК Результат,
	|	Сумма(ВЫБОР КОГДА ПериодВзаиморасчетов < &ПериодЗадолженностиПрошлыхЛет Тогда СуммаВзаиморасчетовОстаток ИНАЧЕ 0 КОНЕЦ) КАК РезультатПрошлыхЛет,
	|	Количество(Различные Сотрудник.ФизЛицо ) КАК РезультатКоличество
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&НачДата,Организация = &Организация И СчетУчета = &парамСчет И ПериодВзаиморасчетов < &ПериодЗадолженности) КАК ВзаиморасчетыСРаботниками
	|ГДЕ
	|	ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток > 0
	|";
	
	НачДата = мДатаКонцаПериодаОтчета + 1;
	ЗапросСуммаЗадолжКонец.УстановитьПараметр("НачДата", НачДата);
	ЗапросСуммаЗадолжКонец.УстановитьПараметр("ПериодЗадолженности", ДобавитьМесяц(НачДата,-1));
	ЗапросСуммаЗадолжКонец.УстановитьПараметр("ПериодЗадолженностиПрошлыхЛет", ?(НачДата = НачалоГода(НачДата), ДобавитьМесяц(НачДата, -12), НачалоГода(НачДата)));
	ЗапросСуммаЗадолжКонец.УстановитьПараметр("Организация",   Организация);
	ЗапросСуммаЗадолжКонец.УстановитьПараметр("парамСчет", Счет661);
	РезультатЗапроса = ЗапросСуммаЗадолжКонец.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		УстановитьЗначениеПоказателя("П2010_1",РезультатЗапроса.Результат);
		УстановитьЗначениеПоказателя("П2020_1",РезультатЗапроса.РезультатПрошлыхЛет);
		УстановитьЗначениеПоказателя("П2030_1",РезультатЗапроса.РезультатКоличество);
	КонецЕсли;
	
	Расчет();
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьАвто()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетПоТрудуМес";
	
	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;
	
	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ОписаниеЯчейки = "";
		
		Если ТипЗНч(ТекущаяОбласть )= Тип("РисунокТабличногоДокумента") Тогда 
			Возврат;
		КонецЕсли;	
		
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вычисляется автоматически';uk='Значення обчислюється автоматично'");
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");
		КонецЕсли;
		
		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;
		
	КонецЕсли;
	
	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;
	
КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	 
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;
	
	Если ЭлементМеню.Кнопки.Количество() = 0 Тогда
		ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
		НСтр("ru='Печатать сразу';uk='Друкувати відразу'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
		
		ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
		                            НСтр("ru='Предварительный просмотр';uk='Попередній перегляд'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
									
		ЭлементМеню.Кнопки.Добавить("Разделитель1", ТипКнопкиКоманднойПанели.Разделитель);

		ЭлементМеню.Кнопки.Добавить("ЕстьДуплекс", ТипКнопкиКоманднойПанели.Действие,
		                            НСтр("ru='Принтер поддерживает автом. дуплекс';uk='Принтер підтримує автом. дуплекс'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
									
		ЭлементМеню.Кнопки.ЕстьДуплекс.Пометка = ЕстьДуплекс;
	КонецЕсли;							
	
	ЛинияСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЛинияПусто = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	
	мМассивТиповЛиний = Новый Массив();
	мМассивТиповЛиний.Вставить(0, ЛинияПусто);
	мМассивТиповЛиний.Вставить(1, ЛинияСнизу);
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		КолонкаВР = ТаблицаВРБольничные.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
		ЭлементыФормы.ТаблицаВРБольничных.СоздатьКолонки();
	Иначе	
		ЭлементыФормы.ПанельВРБольничные.Свертка = РежимСверткиЭлементаУправления.Лево;
		ЭлементыФормы.Разделитель1.Лево 		 = 0;
		ЭлементыФормы.Разделитель1.Ширина		 = 0;
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	Перем ИсходноеКоличествоСтрокГруппы;
	
	ЭтаФорма.АвтоЗаголовок = Ложь;
	
	мОтчетПоТруду = ЭлементыФормы.ПолеТабличногоДокументаОтчетПоТрудуМес;
	ТекТабличноеПоле = мОтчетПоТруду;
	
	Если мСохраненныйДок = Неопределено Тогда
		
		
		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			ТочностьЕдиницыИзмерения = 1;
			
			ЭлементыФормы.НазваниеОрганизации.Заголовок= Организация.Наименование;
			
			УстановитьФорматВывода();
			
		    Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
				// только для бухгалтерии
				мТаблицаВРБольничные = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничные");	
				Если НЕ мТаблицаВРБольничные = Неопределено Тогда
					ТаблицаВРБольничные.Очистить();
					Для каждого ВР Из мТаблицаВРБольничные Цикл
						СтрокаВР = ТаблицаВРБольничные.Добавить();
						СтрокаВР.ВидРасчета = ВР;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
		ЗаполнитьСведенияОбОрганизации();
		
	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
	КонецЕсли;
	
	ПоказатьПериод();
	мОтчетПоТруду.ТолькоПросмотр = Истина;
	
	
	УстановитьЦветФонаЯчейки(,,"ОтчетПоТрудуМес");
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность = Истина Тогда
		
		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения ?';uk='Дані були змінені. Зберегти зміни ?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;

		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
    СохранитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс", ЕстьДуплекс);
	
КонецПроцедуры // ПередЗакрытием()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	
	// Заглушка
	//ЗаполнитьДемо();
	Очистить();
	ЗаполнитьСведенияОбОрганизации();
	
	ЗаполнитьАвто();
	
КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)
	
	Очистить();
	
КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)
	
	Если Кнопка <> Неопределено Тогда
		Если Найти(Кнопка.Имя, "Дуплекс") >0 Тогда
		     ЕстьДуплекс    = НЕ Кнопка.Пометка;
			 Кнопка.Пометка = НЕ Кнопка.Пометка;
		Иначе
			 Печать(Кнопка.Имя);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)
	
	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;
 	
КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)
	
	 Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)
	
	//	мОтчетПоТруду.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	//ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	//мОтчетПоТруду.Области.ДеньДаты.Значение 	= ЧастиДатыПодписи.День;
	//мОтчетПоТруду.Области.МесяцДаты.Значение 	= ЧастиДатыПодписи.Месяц;
	//мОтчетПоТруду.Области.ГодДаты.Значение 		= ЧастиДатыПодписи.ПоследняяЦифраГода;
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)
	
	ПроверитьТочность();
	УстановитьФорматВывода();
	
	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)
	
	ПроверитьТочность();
	УстановитьФорматВывода();
	
	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаОтчетПоТрудуМесПриАктивизацииОбласти(Элемент)
	
	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры // ПолеТабличногоДокументаБалансПриАктивизацииОбласти()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа.
//
Процедура ПолеВыбораВариантЗаполненияОтчетПоТрудуПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки.
//
Процедура ПолеВводаЗначениеКорректировкиОтчетПоТрудуПриИзменении(Элемент)
	
	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеВводаЗначениеКорректировкиПриИзменении

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// "Комментарий" по ячейке, для которой установлен алгоритм автозаполнения 
// [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийОтчетПоТрудуПриИзменении(Элемент)
	
	Коммент = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Коммент);
	
КонецПроцедуры // ПолеВводаКомментарийПриИзменении()

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Функция СформироватьДанныеДляЗвит1С() Экспорт 
	
	мСохраненныйДок   = Неопределено;	
	мСкопированаФорма = Неопределено;
	
	ПередОткрытием(Ложь, Истина);
	ПриОткрытии();
	
	Очистить();
	ЗаполнитьСведенияОбОрганизации();
	ЗаполнитьАвто();
	
	Если мМенеджерЗвит1С.ФлагОтладки Тогда
		ЭтаФорма.ОткрытьМодально();
	КонецЕсли;
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	// расшифровка
	Попытка
		ВЫПОЛНИТЬ("СписокСохранения.Вставить(""РасшифровкаОтчета"", СпП);");
	Исключение КонецПопытки;
	
	ПоказателиОтчета = Новый Структура();
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	КонецЦикла;

	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       НСтр("ru='в гривнях';uk='у гривнях'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    НСтр("ru='в тысячах гривень';uk='у тисячах гривень'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, НСтр("ru='в миллионах гривень';uk='у мільйонах гривень'"));


// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетПоТрудуМес.СписокВыбора.Добавить(1, НСтр("ru='не заполнять автоматически';uk='не заповнювати автоматично'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетПоТрудуМес.СписокВыбора.Добавить(2, НСтр("ru='заполнять автоматически с корректировкой';uk='заповнювати автоматично з коригуванням'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетПоТрудуМЕс.СписокВыбора.Добавить(3, НСтр("ru='заполнять автоматически без корректировки';uk='заповнювати автоматично без коригування'"));

ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));


ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

мСоставПоказателей = "СоставПоказателей2010Мес1";

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
мВерсияФормы = "01/01/2010";

мПечатныеФормы = Новый СписокЗначений;

ЕстьДуплекс = ВосстановитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс");
Если НЕ ТипЗнч(ЕстьДуплекс) = Тип("Булево") Тогда
	ЕстьДуплекс = Ложь;	
КонецЕсли;
