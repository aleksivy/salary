////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Форма выбора основного поля группировки
Перем мФормаВыбораГруппировки;
// Форма выбора основного поля группировки из списка
Перем мФормаВыбораГруппировкиСписок;
// Форма выбора показателя
Перем мФормаВыбораПоказатели;
// Форма выбора показателя группировки из списка
Перем мФормаВыбораПоказателиСписок;
// Список вариантов сортировки, предлагаемый пользователям
Перем мСписокСортировки Экспорт;	   
// Форма выбора фильтра
Перем мФормаВыбораУсловий;          

// описание типов переменных
Перем ОписаниеТиповСтрока;
Перем ОписаниеТиповЧисло;
Перем ОписаниеТиповБулево;
Перем ОписаниеТиповТаблицаЗначений;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Определяет значение владельца для поля со значением - подчиненным справочником
// по существующим значениям или выбором. Используется для определения владельца 
// полей колонок Значение табличного поля ТабличноеПолеСписокФильтров
// 
//
// Параметры: 
//	ИмяПоляОтбора - строка
//  ТаблицаЗаданныхОтборов - таблица значений с указанными пользователем отборами
//  ТаблицаОписанияОтборов - таблица значений с описанием всех возможных отборов
//
// Возвращаемое значение:
//	Владелец справочника, или Неопределено, если владельца нет или не выбран.
//
Функция ОпределитьВладельца(ИмяПоляОтбора,ТаблицаЗаданныхОтборов,ТаблицаОписанияОтборов) Экспорт

	Владелец = Неопределено;

	НайдСтрОписаниеОтбора = ТаблицаОписанияОтборов.Найти(ИмяПоляОтбора, "ИмяПоля");
	
	Если НайдСтрОписаниеОтбора = Неопределено Тогда
		Возврат Владелец;
	КонецЕсли;	

	ИмяПоляВладелец = НайдСтрОписаниеОтбора.ИмяПоляВладелец;

	Если Не ПустаяСтрока(ИмяПоляВладелец) Тогда

		
		НайдСтр = ТаблицаЗаданныхОтборов.Найти(ИмяПоляВладелец, "ИмяОтбора");

		//Если в таблице отборов есть фильтр на владельца, то список элементов владельцев определён
		Если НайдСтр <> Неопределено Тогда

			Если ВидСравненияПринадлежитГруппе(НайдСтр.ВидСравнения,"Списковые") тогда
				Если НайдСтр.Значение.Количество() = 1 Тогда
					Владелец = НайдСтр.Значение[0].Значение;

				ИначеЕсли НайдСтр.Значение.Количество() > 0 Тогда
					СписокВладельцев = Новый СписокЗначений;
					Для Каждого Строка Из НайдСтр.Значение Цикл
						СписокВладельцев.Добавить(Строка.Значение);
					КонецЦикла;
					Выбор = СписокВладельцев.ВыбратьЭлемент("Выберите владельца");
					Если Выбор <> Неопределено Тогда
						Владелец = Выбор.Значение;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Владелец = НайдСтр.Значение;
			КонецЕсли;	 

		КонецЕсли;

		//Предложим выбрать элемент-владелец из справочника
		Если Владелец = Неопределено Тогда

			НайдСтр = ТаблицаОписанияОтборов.Найти(ИмяПоляВладелец, "ИмяПоля");

			Если НайдСтр <> Неопределено Тогда

				Типы = НайдСтр.ОписаниеТипов.Типы();

				Если Типы.Количество() = 1 Тогда
					ВвестиЗначение(Владелец, "Выберите владельца", Типы[0]);
				Иначе

					СписокВладельцев = Новый СписокЗначений;
					СписокВладельцев.ЗагрузитьЗначения(Типы);
					Выбор = СписокВладельцев.ВыбратьЭлемент("Выберите владельца");

					Если Выбор <> Неопределено Тогда

						ТипВладельца = Выбор.Значение;

						Если ТипВладельца <> Неопределено Тогда
							ВвестиЗначение(Владелец, "Выберите владельца", ТипВладельца);
						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	Возврат Владелец;
	
КонецФункции

// Функция предназначена для определения списка возможных видов сравнения, для определенных типов.
//
// Параметры:
//  ОписаниеТипов - массив, содержащий типы значений.
//  
// Возвращаемое значение:
//  Список доступных видов сравнения.
//
Функция ОпределитьСписокВозможныхВидовСравненияПоТипу(ОписаниеТипов) Экспорт

	// Для строк неограниченной длины допустим только вид сравнения "Содержит" и "Не соднржит"
	Если (ОписаниеТипов.СодержитТип(Тип("Строка"))) И (ОписаниеТипов.КвалификаторыСтроки.Длина =0) Тогда
		СписокВидов = Новый СписокЗначений;
		СписокВидов.Добавить(ВидСравнения.Содержит);
		СписокВидов.Добавить(ВидСравнения.НеСодержит);
		Возврат СписокВидов;
	КонецЕсли; 
	
	ДобавитьИнтервалы = Ложь;
    ДобавитьСодержит  = Ложь;
	ДобавитьСписки    = Ложь;
	ДобавитьКатегорию = Ложь;

	МассивТипов = ОписаниеТипов.Типы();
	Для Каждого ЭлементТипа Из МассивТипов Цикл
		Если ЭлементТипа = Тип("Число")	ИЛИ ЭлементТипа = Тип("Дата") Тогда
			ДобавитьИнтервалы  = Истина;
			ДобавитьСписки = 1;
		ИначеЕсли ЭлементТипа = Тип("Строка") Тогда
            ДобавитьСодержит  = Истина;
			ДобавитьСписки = 1;
		ИначеЕсли ЭлементТипа = Тип("Булево") Тогда
		Иначе
			ДобавитьСписки = 1;
		КонецЕсли;
		Если ЭлементТипа = Тип("СправочникСсылка.КатегорииОбъектов") Тогда
            ДобавитьКатегорию = Истина
		КонецЕсли;	
	КонецЦикла;

	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить(ВидСравнения.Равно);
	СписокВидов.Добавить(ВидСравнения.НеРавно);

	Если ДобавитьСодержит Тогда
		СписокВидов.Добавить(ВидСравнения.Содержит);
		СписокВидов.Добавить(ВидСравнения.НеСодержит);
	КонецЕсли;	 
	
	Если ДобавитьСписки Тогда
		СписокВидов.Добавить(ВидСравнения.ВСписке);
		//СписокВидов.Добавить(ВидСравнения.ВСпискеПоИерархии);
		СписокВидов.Добавить(ВидСравнения.НеВСписке);
		//СписокВидов.Добавить(ВидСравнения.НеВСпискеПоИерархии);
	КонецЕсли;	 

	Если ДобавитьИнтервалы Тогда
		СписокВидов.Добавить(ВидСравнения.Меньше);
		СписокВидов.Добавить(ВидСравнения.МеньшеИлиРавно);
		СписокВидов.Добавить(ВидСравнения.Больше);
		СписокВидов.Добавить(ВидСравнения.БольшеИлиРавно);
		СписокВидов.Добавить(ВидСравнения.Интервал);
		СписокВидов.Добавить(ВидСравнения.ИнтервалВключаяГраницы);
		СписокВидов.Добавить(ВидСравнения.ИнтервалВключаяНачало);
		СписокВидов.Добавить(ВидСравнения.ИнтервалВключаяОкончание);
	КонецЕсли;	 

	Если ДобавитьКатегорию Тогда
		СписокВидов.Добавить("Все из");
	КонецЕсли;	 
	
	Возврат СписокВидов;
	
КонецФункции // ОпределитьСписокВозможныхВидовСравненияПоТипу()

//Инициирует состав колонок таблицы значений интервалов для переданной строки таблицы группировок
Процедура ИнициироватьТаблицуИнтерваловДляГруппировки(СтрокаТаблицыГруппировок)

	мОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(500);
	
	ПредставлениеПоказателя = Лев(СтрокаТаблицыГруппировок.ПредставлениеГруппировки,Найти(СтрокаТаблицыГруппировок.ПредставлениеГруппировки,": по интервалам")-1);
	ОписаниеТиповПоля = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3);
	СтрокаТаблицыГруппировок.ТаблицаИнтервалов.Колонки.Очистить();
	СтрокаТаблицыГруппировок.ТаблицаИнтервалов.Колонки.Добавить("ИмяИнтервала",мОписаниеТиповСтрока);
	СтрокаТаблицыГруппировок.ТаблицаИнтервалов.Колонки.Добавить("ЗначениеС",ОписаниеТиповПоля);
	СтрокаТаблицыГруппировок.ТаблицаИнтервалов.Колонки.Добавить("ЗначениеПо",ОписаниеТиповПоля);
	НоваяСтрока = СтрокаТаблицыГруппировок.ТаблицаИнтервалов.Добавить();
	НоваяСтрока.ИмяИнтервала = ПредставлениеПоказателя + " от 0 до 100000";
	НоваяСтрока.ЗначениеС = 0;
	НоваяСтрока.ЗначениеПО = 100000;

КонецПроцедуры

// Заполняет таблицы формы настройки отчета на основании данных объекта Отчет
Процедура ЗаполнитьРеквизитыФормыНастройкиОтчета(Отчет, ТаблицаГруппировкиОтчета, ТаблицаСписокПоказателей, ТаблицаСписокФильтров)

	мОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(500);
	
	// Заполняем таблицу показателей
	ТаблицаСписокПоказателей.Очистить();
	Для Каждого СтрокаТаблицы Из Отчет.ПоказателиОтчета Цикл
		НоваяСтрока = ТаблицаСписокПоказателей.Добавить();
		НоваяСтрока.ИмяПоказателя			= СтрокаТаблицы.ИмяПоказателя;
		НоваяСтрока.ПредставлениеПоказателя = СтрокаТаблицы.ПредставлениеПоказателя;
		НоваяСтрока.ОписаниеПоказателя		= СтрокаТаблицы.ОписаниеПоказателя;
		НоваяСтрока.Сортировка				= СтрокаТаблицы.Сортировка;
		НоваяСтрока.ИтоговоеПоле			= СтрокаТаблицы.ИтоговоеПоле;
	КонецЦикла;

	
	// Заполняем таблицу полей группировок
	ТаблицаГруппировкиОтчета.Очистить();

    НоваяСтрока = Неопределено;
	
	Для Каждого СтрокаТаблицы Из Отчет.ГруппировкиОтчета Цикл

		НоваяСтрока = ТаблицаГруппировкиОтчета.Добавить();
		НоваяСтрока.ИмяГруппировки           = СтрокаТаблицы.ИмяГруппировки;
		НоваяСтрока.ПредставлениеГруппировки = СтрокаТаблицы.ПредставлениеГруппировки;
		НоваяСтрока.ОписаниеГруппировки      = СтрокаТаблицы.ОписаниеГруппировки;

		Если Найти(СтрокаТаблицы.ПредставлениеГруппировки,": по интервалам")<>0 тогда

			НоваяСтрока.ПредставлениеИнтервалов = "<интервалы>";
			ОписаниеТиповПоля = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3);
			НоваяСтрока.ТаблицаИнтервалов.Колонки.Очистить();

			НоваяСтрока.ТаблицаИнтервалов.Колонки.Добавить("ИмяИнтервала",мОписаниеТиповСтрока);
			НоваяСтрока.ТаблицаИнтервалов.Колонки.Добавить("ЗначениеС",ОписаниеТиповПоля);
			НоваяСтрока.ТаблицаИнтервалов.Колонки.Добавить("ЗначениеПо",ОписаниеТиповПоля);

			СтруктураПоискаИнтервалов = Новый Структура;
			СтруктураПоискаИнтервалов.Вставить("ИмяГруппировки",СтрокаТаблицы.ИмяГруппировки);
            НайдСтрокиИнтервалов = Отчет.ИнтервалыГруппировокОтчета.НайтиСтроки(СтруктураПоискаИнтервалов);
			
			Для Каждого СтрокаИнтервал Из НайдСтрокиИнтервалов Цикл
				
				НоваяСтрокаИнтервал = НоваяСтрока.ТаблицаИнтервалов.Добавить();
				
				НоваяСтрокаИнтервал.ИмяИнтервала   = СтрокаИнтервал.ИмяИнтервала;
				НоваяСтрокаИнтервал.ЗначениеС 	   = СтрокаИнтервал.ЗначениеС;
				НоваяСтрокаИнтервал.ЗначениеПо 	   = СтрокаИнтервал.ЗначениеПо;
				
			КонецЦикла;

		КонецЕсли;	 
		
	КонецЦикла;

	// Заполним таблицу условий
	ТаблицаСписокФильтров.Очистить();

	ТаблицаСписокВсехФильтров = Отчет.ОтборыОтчета.Выгрузить();
	ТаблицаСписокВсехФильтров.Свернуть("ИмяОтбора",);

	СтруктураПоиска = Новый Структура("ИмяОтбора");

	Для Каждого Фильтр Из ТаблицаСписокВсехФильтров Цикл
		
		НоваяСтрока = ТаблицаСписокФильтров.Добавить();
		
		СтруктураПоиска.ИмяОтбора = Фильтр.ИмяОтбора;
		НайденныеСтроки = Отчет.ОтборыОтчета.НайтиСтроки(СтруктураПоиска);

		// Общие данные берем из первой строки: строки с одинаковым именем фильтра
		// должны содержать одинаковые значения ОписаниеФильтра, ПредставлениеОтбора
		НоваяСтрока.ИмяОтбора		 	 = Фильтр.ИмяОтбора;
		НоваяСтрока.ОписаниеФильтра 	 = НайденныеСтроки[0].ОписаниеФильтра;
		НоваяСтрока.ПредставлениеОтбора  = НайденныеСтроки[0].ПредставлениеОтбора;
		НоваяСтрока.ВидСравнения         = НайденныеСтроки[0].ВидСравнения;
		
		Если НЕ ВидСравненияПринадлежитГруппе(НайденныеСтроки[0].ВидСравнения,"Списковые") Тогда

			// Одиночный фильтр
			НоваяСтрока.Значение = НайденныеСтроки[0].Значение;
			НоваяСтрока.ЗначениеС 		 = НайденныеСтроки[0].ЗначениеС;
			НоваяСтрока.ЗначениеПо 		 = НайденныеСтроки[0].ЗначениеПо;

		Иначе
            // Фильтр на список значений
			НоваяСтрока.Значение = Новый СписокЗначений;

			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НоваяСтрока.Значение.Добавить(НайденнаяСтрока.Значение);
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры	

// вызывает форму ввода/редактирования интервалов "с", "по" для текущей "интервальной" группировки 
//
// Параметры: 
//  СтрокаТаблицыГруппировки - строка табличного поля ТабличноеПолеГруппировкиОтчета
//
// Возвращаемое значение:
//  Нет.
//
Процедура ОткрытьФормуРедактированияИнтервалов(СтрокаТаблицыГруппировки)
	
	Форма = ПолучитьФорму("ФормаРедактированияИнтерваловПоказателяОтчета", ЭтаФорма, "дляФормаРедактированияИнтерваловПоказателя");

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос(НСтр("ru='Предыдущая операция задания интервалов значений показателя не завершена."
"Завершить?';uk='Попередня операція задання інтервалу значень показника не завершена."
"Завершити?'"),РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;	

	СтруктураПараметров = Новый Структура;
	ИмяПоказателя = Лев(СтрокаТаблицыГруппировки.ПредставлениеГруппировки,Найти(СтрокаТаблицыГруппировки.ПредставлениеГруппировки,": по интервалам")-1);
	СтруктураПараметров.Вставить("ИмяПоказателя",ИмяПоказателя);
	СтруктураПараметров.Вставить("ТаблицаИнтервалов",СтрокаТаблицыГруппировки.ТаблицаИнтервалов);

	// Передача параметров в форму
	Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
	Форма.РежимВыбора = Истина;
	Форма.Открыть();
	ФормаРедактированияИнтерваловПоказателя = Форма;
	
КонецПроцедуры // ОткрытьФормуРедактированияИнтервалов	 

// Заполнение реквизитов формы. 
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьРеквизиты(ОтчетОбъект)

	Если ЭлементыФормы.ПанельРеквизитыОтчета.ТекущаяСтраница = ЭлементыФормы.ПанельРеквизитыОтчета.Страницы.СтраницаСДатойАктуальности Тогда
		ДатаАктуальности = ОтчетОбъект.ДатаАктуальности;
	Иначе	
		ДатаНачала = ОтчетОбъект.ДатаНачала;
		ДатаОкончания = ОтчетОбъект.ДатаОкончания;
	КонецЕсли; 
    
	ЭлементыФормы.ПолеВыбораВариантОтображенияСтраницыСДатойАктуальности.СписокВыбора.Добавить(ОтчетОбъект.ВариантОтображения);
	ЭлементыФормы.ПолеВыбораВариантОтображенияСтраницыСПериодом.СписокВыбора.Добавить(ОтчетОбъект.ВариантОтображения);
	ВариантОтображения = ОтчетОбъект.ВариантОтображения;

	ВидОтчета = ОтчетОбъект.ВидОтчета;
	
	ЗаполнитьРеквизитыФормыНастройкиОтчета(ОтчетОбъект, ТаблицаГруппировкиОтчета, ТаблицаСписокПоказателей, ТаблицаСписокФильтров);
	
КонецПроцедуры // ЗаполнитьРеквизиты

// формирует список возможных вариантов отображения отчета в зависимости от состава показателей и вида отчета
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//   список значений - возможные варианты отображения отчета 
//
Функция ПолучитьСписокВариантовОтображения()

	СписокВариантовОтображения = Новый СписокЗначений;
	СписокВариантовОтображения.Добавить(Перечисления.ВариантыОтображенияОтчетов.Таблица, "Таблица");
	Если ВидОтчета <> "Штатная расстановка организации" и ВидОтчета <> "Штатная расстановка" Тогда
		Если ТаблицаСписокПоказателей.Найти(Истина,"ИтоговоеПоле") <> Неопределено Тогда
			СписокВариантовОтображения.Добавить(Перечисления.ВариантыОтображенияОтчетов.Диаграмма, "Диаграмма");
			СписокВариантовОтображения.Добавить(Перечисления.ВариантыОтображенияОтчетов.СводнаяТаблица, "Сводная таблица");
		КонецЕсли;
	КонецЕсли;

	Возврат СписокВариантовОтображения
	
КонецФункции // ()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

    // для отчетов, которые в принципе имеют только один способ отображения (таблица),
	// будем скрывать поля выбора варианта отображения - подсмотрев, есть ли в командной панели
	// этого отчета такое подменю (мы приняли соглашение о том, что оно всегда называется "Отображение")
	ВидимостьСпискаВариантовОтображения = ВладелецФормы.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Найти("Отображение") <> Неопределено;

	Если ОтчетОбъект.РеквизитыПредустановлены Тогда
		
		// Делаем невидимой панель "ПанельНеобязательныеРеквизиты"
		ЭлементыФормы.ПанельНеобязательныеРеквизиты.Свертка = РежимСверткиЭлементаУправления.Верх;

		Если ВидОтчета  = "Штатная расстановка организации" или ВидОтчета  = "Штатная расстановка" Тогда
            // для этих видов 
			ВидимостьСпискаВариантовОтображения = Ложь;
		КонецЕсли;
		
	Иначе
		
        //Настройка списка видов отчета
		СписокВидовОтчета = Новый СписокЗначений;
		Для каждого Элемент Из ОтчетОбъект.мМассивВидыОтчета Цикл
			СписокВидовОтчета.Добавить(Элемент, Элемент);
		КонецЦикла; 
		ЭлементыФормы.ПолеВыбораВидОтчета.СписокВыбора = СписокВидовОтчета;
		ЭлементыФормы.ПолеВыбораВидОтчета.Значение = ВидОтчета;

	КонецЕсли;

	ЭлементыФормы.ПолеВыбораВариантОтображенияСтраницыСДатойАктуальности.Видимость = ВидимостьСпискаВариантовОтображения;
	ЭлементыФормы.ПолеВыбораВариантОтображенияСтраницыСПериодом.Видимость = ВидимостьСпискаВариантовОтображения;
	ЭлементыФормы.Надпись8.Видимость = ВидимостьСпискаВариантовОтображения;
	ЭлементыФормы.Надпись12.Видимость = ВидимостьСпискаВариантовОтображения;

	//Установка текущей страницы панели "ПанельРеквизитыОтчета"
	Если ОтчетОбъект.Метаданные().Реквизиты.Найти("ДатаАктуальности") <> Неопределено Тогда
		ЭлементыФормы.ПанельРеквизитыОтчета.ТекущаяСтраница = ЭлементыФормы.ПанельРеквизитыОтчета.Страницы.СтраницаСДатойАктуальности;
	Иначе
		ЭлементыФормы.ПанельРеквизитыОтчета.ТекущаяСтраница = ЭлементыФормы.ПанельРеквизитыОтчета.Страницы.СтраницаСПериодом;
	КонецЕсли; 

	// Заполнение основных реквизитов формы данными отчета
	ЗаполнитьРеквизиты(ОтчетОбъект);

	//Настройка доступности полей таблицы условий: ЗначениеС и ЗначениеПо
	ВидимостьИнтервальныхФильтров = Ложь;
	Для каждого СтрФильтр  Из ОтчетОбъект.мТаблицаФильтры Цикл
		ОписаниеТиповФильтра = СтрФильтр.ОписаниеТипов;
        Если ОписаниеТиповФильтра.СодержитТип(Тип("Число")) или (ОписаниеТиповФильтра.СодержитТип(Тип("Дата"))) Тогда
			ВидимостьИнтервальныхФильтров = Истина;
			Прервать;
		КонецЕсли; 	
	КонецЦикла; 

	ЭлементыФормы.ТабличноеПолеСписокФильтров.Колонки.ЗначениеС.ОтображатьВШапке = ВидимостьИнтервальныхФильтров;
	ЭлементыФормы.ТабличноеПолеСписокФильтров.Колонки.ЗначениеПо.ОтображатьВШапке = ВидимостьИнтервальныхФильтров;

	// Если есть сортировка, нажмем кнопку Сортировка и покажем колонку сортировки
	Если ТаблицаСписокПоказателей.Найти(1, "Сортировка") <> Неопределено 
		ИЛИ ТаблицаСписокПоказателей.Найти(2, "Сортировка") <> Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельСписокПоказателей.Кнопки.Сортировка.Пометка = Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельСписокПоказателей.Кнопки.Сортировка.Пометка = Ложь;
	КонецЕсли;

	ЭлементыФормы.ТабличноеПолеСписокПоказателей.Колонки.Сортировка.Видимость = ЭлементыФормы.КоманднаяПанельСписокПоказателей.Кнопки.Сортировка.Пометка;	

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Если Источник=мФормаВыбораГруппировки Тогда

		Если ЭлементыФормы.ТабличноеПолеГруппировкиОтчета.ТекущаяСтрока  = Неопределено Тогда
			Возврат;
		КонецЕсли;

		РедактируемаяСтрока = ТаблицаГруппировкиОтчета[ТаблицаГруппировкиОтчета.Индекс(ЭлементыФормы.ТабличноеПолеГруппировкиОтчета.ТекущаяСтрока)];

		Если Источник = мФормаВыбораГруппировки Тогда
			Для Каждого Строка Из ЗначениеВыбора Цикл 
				РедактируемаяСтрока.ИмяГруппировки = Строка.ИмяГруппировки;
				РедактируемаяСтрока.ПредставлениеГруппировки = Строка.ПредставлениеГруппировки;
				РедактируемаяСтрока.ОписаниеГруппировки = Строка.ОписаниеГруппировки;
				
				//Если группировкой является интервальный показатель, то инициируем таблицу интервалов значений
				Если Найти(РедактируемаяСтрока.ПредставлениеГруппировки,": по интервалам")<>0 тогда
					РедактируемаяСтрока.ПредставлениеИнтервалов = "<интервалы>";
					ИнициироватьТаблицуИнтерваловДляГруппировки(РедактируемаяСтрока);
					ОткрытьФормуРедактированияИнтервалов(РедактируемаяСтрока);
				Иначе	
					РедактируемаяСтрока.ПредставлениеИнтервалов = "";
				КонецЕсли;	

			КонецЦикла;
		КонецЕсли;

	ИначеЕсли Источник = мФормаВыбораГруппировкиСписок тогда

		Для Каждого Строка Из ЗначениеВыбора Цикл

			НайденнаяСтрока = ТаблицаГруппировкиОтчета.Найти(Строка.ИмяГруппировки, "ИмяГруппировки");
			Если НайденнаяСтрока  = Неопределено  Тогда
				Если Строка.Пометка Тогда
					Группировка = ТаблицаГруппировкиОтчета.Добавить();
					Группировка.ИмяГруппировки = Строка.ИмяГруппировки;
					Группировка.ПредставлениеГруппировки = Строка.ПредставлениеГруппировки;
					Группировка.ОписаниеГруппировки = Строка.ОписаниеГруппировки;

					//Если группировкой является интервальный показатель, то инициируем таблицу интервалов значений
					Если Найти(Группировка.ПредставлениеГруппировки,": по интервалам")<>0 тогда
						Группировка.ПредставлениеИнтервалов = "<интервалы>";
						ИнициироватьТаблицуИнтерваловДляГруппировки(Группировка);
					КонецЕсли;	
					
				КонецЕсли;	
			Иначе
				Если НЕ Строка.Пометка Тогда
					ТаблицаГруппировкиОтчета.Удалить(ТаблицаГруппировкиОтчета.Индекс(НайденнаяСтрока));
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

 	ИначеЕсли Источник = мФормаВыбораПоказатели тогда

		РедактируемаяСтрока = ТаблицаСписокПоказателей[ТаблицаСписокПоказателей.Индекс(ЭлементыФормы.ТабличноеПолеСписокПоказателей.ТекущаяСтрока)];

		Для Каждого Строка Из ЗначениеВыбора Цикл 

			РедактируемаяСтрока.ИмяПоказателя = Строка.ИмяПоказателя;
			РедактируемаяСтрока.ПредставлениеПоказателя = Строка.ПредставлениеПоказателя;
			РедактируемаяСтрока.ОписаниеПоказателя = Строка.ОписаниеПоказателя;
 			РедактируемаяСтрока.ИтоговоеПоле = Строка.ИтоговоеПоле;

		КонецЦикла;

	ИначеЕсли Источник = мФормаВыбораПоказателиСписок тогда

		Для Каждого Строка Из ЗначениеВыбора Цикл

			НайденнаяСтрока = ТаблицаСписокПоказателей.Найти(Строка.ИмяПоказателя, "ИмяПоказателя");

			Если НайденнаяСтрока  = Неопределено  Тогда
				Если Строка.Пометка Тогда
					Показатель = ТаблицаСписокПоказателей.Добавить();
					Показатель.ИмяПоказателя = Строка.ИмяПоказателя;
					Показатель.ПредставлениеПоказателя = Строка.ПредставлениеПоказателя;
					Показатель.ОписаниеПоказателя = Строка.ОписаниеПоказателя;
					Показатель.ИтоговоеПоле = Строка.ИтоговоеПоле;
				КонецЕсли;	
			Иначе
				Если НЕ Строка.Пометка Тогда
					ТаблицаСписокПоказателей.Удалить(ТаблицаСписокПоказателей.Индекс(НайденнаяСтрока));
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

	ИначеЕсли Источник = мФормаВыбораУсловий Тогда

		Если ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока  = Неопределено Тогда
			Возврат;
		КонецЕсли;

		РедактируемаяСтрока = ТаблицаСписокФильтров[ТаблицаСписокФильтров.Индекс(ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока)];

		Для Каждого Строка Из ЗначениеВыбора Цикл // должно содержать не более одной строки
			
			РедактируемаяСтрока.ИмяОтбора			 = Строка.ИмяОтбора;
			РедактируемаяСтрока.ПредставлениеОтбора = Строка.ПредставлениеОтбора;
			РедактируемаяСтрока.ОписаниеФильтра		 = Строка.ОписаниеФильтра;

			СписокДоступныхВидовСравнения = ОпределитьСписокВозможныхВидовСравненияПоТипу(Строка.ОписаниеТипов);
			РедактируемаяСтрока.ВидСравнения 		 = СписокДоступныхВидовСравнения[0];

			ТипыЗначения = Строка.ОписаниеТипов.Типы();

			// Если тип единичный, то присвоим пустое значение этого типа			
			Если ТипыЗначения.Количество() = 1 Тогда
				РедактируемаяСтрока.Значение = ОбщегоНазначения.ПустоеЗначениеТипа(ТипыЗначения[0]);
				РедактируемаяСтрока.ЗначениеС = ОбщегоНазначения.ПустоеЗначениеТипа(ТипыЗначения[0]);
				РедактируемаяСтрока.ЗначениеПо = ОбщегоНазначения.ПустоеЗначениеТипа(ТипыЗначения[0]);
			Иначе
				РедактируемаяСтрока.Значение = Неопределено;
				РедактируемаяСтрока.ЗначениеС = "";
				РедактируемаяСтрока.ЗначениеПо = "";
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ОсновныеДействияФормыВыбрать(Элемент)

	Если ОтчетОбъект.ВидОтчета <> ВидОтчета Тогда
		ОтчетОбъект.ВидОтчета = ВидОтчета;
		ОтчетОбъект.ЗаполнитьНачальныеНастройки(Истина);
		ОбработатьПоляБыстрогоОтбораНаФорме(ВладелецФормы.мМассивТипов,ВладелецФормы.ЭлементыФормы,ВладелецФормы.СтруктураСвязиЭлементовСДанными,ОтчетОбъект.мТаблицаФильтры);
	КонецЕсли;
	
	// Добавим показатели
	Таблица = ЭлементыФормы.ТабличноеПолеСписокПоказателей.Значение;
	КопияПоказателиОтчета = ОтчетОбъект.ПоказателиОтчета.Выгрузить();
	ОтчетОбъект.ПоказателиОтчета.Очистить();
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИмяПоказателя) Тогда
			Предупреждение(НСтр("ru='Не указано имя показателя!';uk=""Не вказано ім'я показника!"""), 60);
			ОтчетОбъект.ПоказателиОтчета.Загрузить(КопияПоказателиОтчета);
			Возврат;
		КонецЕсли;
		НоваяСтрока = ОтчетОбъект.ПоказателиОтчета.Добавить();
		НоваяСтрока.ИмяПоказателя			= СтрокаТаблицы.ИмяПоказателя;
		НоваяСтрока.ПредставлениеПоказателя = СтрокаТаблицы.ПредставлениеПоказателя;
		НоваяСтрока.ОписаниеПоказателя		= СтрокаТаблицы.ОписаниеПоказателя;
		НоваяСтрока.Сортировка				= СтрокаТаблицы.Сортировка;
		НоваяСтрока.ИтоговоеПоле			= СтрокаТаблицы.ИтоговоеПоле;
	КонецЦикла;

	Таблица = ЭлементыФормы.ТабличноеПолеГруппировкиОтчета.Значение;
	КопияГруппировкиОтчета = ОтчетОбъект.ГруппировкиОтчета.Выгрузить();
	ОтчетОбъект.ГруппировкиОтчета.Очистить();
	ОтчетОбъект.ИнтервалыГруппировокОтчета.Очистить();
	// Добавим группировки	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИмяГруппировки) Тогда
			Предупреждение(НСтр("ru='Не указано имя группировки!';uk=""Не вказано ім'я групування!"""), 60);
			ОтчетОбъект.ГруппировкиОтчета.Загрузить(КопияГруппировкиОтчета);
			Возврат;
		КонецЕсли;
		НоваяСтрока = ОтчетОбъект.ГруппировкиОтчета.Добавить();
		НоваяСтрока.ИмяГруппировки           = СтрокаТаблицы.ИмяГруппировки;
		НоваяСтрока.ПредставлениеГруппировки = СтрокаТаблицы.ПредставлениеГруппировки;
		НоваяСтрока.ОписаниеГруппировки      = СтрокаТаблицы.ОписаниеГруппировки;

		Для Каждого СтрокаИнтервал Из СтрокаТаблицы.ТаблицаИнтервалов Цикл
			
			НоваяСтрокаИнтервал = ОтчетОбъект.ИнтервалыГруппировокОтчета.Добавить();
			НоваяСтрокаИнтервал.ИмяГруппировки = СтрокаТаблицы.ИмяГруппировки;
			НоваяСтрокаИнтервал.ИмяИнтервала   = СтрокаИнтервал.ИмяИнтервала;
			НоваяСтрокаИнтервал.ЗначениеС      = СтрокаИнтервал.ЗначениеС;
			НоваяСтрокаИнтервал.ЗначениеПо     = СтрокаИнтервал.ЗначениеПо;
			
		КонецЦикла;
		
	КонецЦикла;

	Таблица = ЭлементыФормы.ТабличноеПолеСписокФильтров.Значение;
	КопияОтборыОтчета = ОтчетОбъект.ОтборыОтчета.Выгрузить();
	ОтчетОбъект.ОтборыОтчета.Очистить();
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИмяОтбора) Тогда
			
			Предупреждение(НСтр("ru='Не указано имя отбора!';uk=""Не вказано ім'я відбору!"""), 60);
			ОтчетОбъект.ОтборыОтчета.Загрузить(КопияОтборыОтчета);
			Возврат;
			
		КонецЕсли;
		
		Если НЕ ВидСравненияПринадлежитГруппе(СтрокаТаблицы.ВидСравнения,"Списковые") Тогда		

			НоваяСтрока = ОтчетОбъект.ОтборыОтчета.Добавить();
			НоваяСтрока.ИмяОтбора				= СтрокаТаблицы.ИмяОтбора;
			НоваяСтрока.ПредставлениеОтбора 	= СтрокаТаблицы.ПредставлениеОтбора;
			НоваяСтрока.Значение      			= СтрокаТаблицы.Значение;
			НоваяСтрока.ОписаниеФильтра      	= СтрокаТаблицы.ОписаниеФильтра;
			НоваяСтрока.ВидСравнения         	= СтрокаТаблицы.ВидСравнения;
			НоваяСтрока.ЗначениеС		     	= СтрокаТаблицы.ЗначениеС;
			НоваяСтрока.ЗначениеПо		     	= СтрокаТаблицы.ЗначениеПо;
			
		Иначе
			
			Для Каждого Условие Из СтрокаТаблицы.Значение Цикл

				НоваяСтрока = ОтчетОбъект.ОтборыОтчета.Добавить();
				НоваяСтрока.ИмяОтбора           = СтрокаТаблицы.ИмяОтбора;
				НоваяСтрока.ПредставлениеОтбора = СтрокаТаблицы.ПредставлениеОтбора;
				НоваяСтрока.Значение      		= Условие.Значение;
				НоваяСтрока.ОписаниеФильтра     = СтрокаТаблицы.ОписаниеФильтра;
				НоваяСтрока.ВидСравнения        = СтрокаТаблицы.ВидСравнения;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	Если ЭлементыФормы.ПанельРеквизитыОтчета.ТекущаяСтраница = ЭлементыФормы.ПанельРеквизитыОтчета.Страницы.СтраницаСДатойАктуальности Тогда
		ОтчетОбъект.ДатаАктуальности = ДатаАктуальности;
	Иначе
		ОтчетОбъект.ДатаНачала = ДатаНачала;
		ОтчетОбъект.ДатаОкончания = ДатаОкончания;
	КонецЕсли;
	
	СписокВариантовОтображения = ПолучитьСписокВариантовОтображения();
	Если СписокВариантовОтображения.НайтиПоЗначению(ВариантОтображения) = Неопределено Тогда
		ВариантОтображения = СписокВариантовОтображения[0].Значение;
	КонецЕсли;
	ОтчетОбъект.ВариантОтображения = ВариантОтображения;

	Закрыть("ОбновитьОтчет");

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Из списка" командной панели 
// табличного поля "Группировки отчета", вызывает сервисный механизм для
// заполнения табличной части методом подбора группировок из списка
//
Процедура КоманднаяПанельГруппировкиСписок(Кнопка)

	Форма = ПолучитьФорму("ФормаВыбораОтчетов", ЭтаФорма, "дляФормаФильтра");
	Форма.ОтчетОбъект = ОтчетОбъект;
    Форма.ТаблицаГруппировки = ОтчетОбъект.мТаблицаГруппировки;
    Форма.ТаблицаПоказатели = ОтчетОбъект.мТаблицаПоказатели;
    Форма.ТаблицаФильтры = ОтчетОбъект.мТаблицаФильтры;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МножественныйВыбор", Истина);
	СтруктураПараметров.Вставить("ИсходнаяТаблица", "СписокГруппировокСписок");

	СтруктураДополнительныеЗначения = Новый Структура;
	СтруктураНеиспользуемыеЗначения = Новый Структура;
	
	Для Каждого Строка Из ТаблицаГруппировкиОтчета Цикл

		СтруктураНеиспользуемыеЗначения.Вставить(Строка.ИмяГруппировки);		
		Для Каждого СтрокаСтрока Из Строка.СписокДопПолей Цикл
			СтруктураДополнительныеЗначения.Вставить(СтрокаСтрока.ИмяГруппировки);
		КонецЦикла;

	КонецЦикла;
	
	СтруктураПараметров.Вставить("СтруктураНеиспользуемыеЗначения", СтруктураНеиспользуемыеЗначения);
	СтруктураПараметров.Вставить("СтруктураДополнительныеЗначения", СтруктураДополнительныеЗначения);

	// передача параметров в форму
	Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
	Форма.РежимВыбора = Истина;
	Форма.Открыть();
	мФормаВыбораГруппировкиСписок = Форма;

КонецПроцедуры // КоманднаяПанельГруппировкиСписок()

// Процедура вызывается при нажатии кнопки "Из списка" командной панели 
// табличного поля "Показатели отчета", вызывает сервисный механизм для
// заполнения табличной части методом подбора показателей из списка
//
Процедура КоманднаяПанельСписокПоказателейСписокПоказатели(Кнопка)

	Форма = ПолучитьФорму("ФормаВыбораОтчетов", ЭтаФорма, "дляФормаФильтра");
	Форма.ОтчетОбъект = ОтчетОбъект;
    Форма.ТаблицаГруппировки = ОтчетОбъект.мТаблицаГруппировки;
    Форма.ТаблицаПоказатели = ОтчетОбъект.мТаблицаПоказатели;
    Форма.ТаблицаФильтры = ОтчетОбъект.мТаблицаФильтры;

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос(НСтр("ru='Предыдущая операция выбора показателей из списка не завершена."
"Завершить?';uk='Попередня операція вибору показників зі списку не завершена."
"Завершити?'"),РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;	

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МножественныйВыбор", Истина);
	СтруктураПараметров.Вставить("ИсходнаяТаблица", "СписокПоказателиСписок");

	СтруктураСуществующиеЗначения = Новый Структура;
	СтруктураНеиспользуемыеЗначения = Новый Структура;

	Для Каждого Строка Из ТаблицаСписокПоказателей Цикл

		Если ПустаяСтрока(Строка.ИмяПоказателя) Тогда
			Продолжить;
		КонецЕсли;

		СтруктураНеиспользуемыеЗначения.Вставить(Строка.ИмяПоказателя);

	КонецЦикла;

	СтруктураПараметров.Вставить("СтруктураНеиспользуемыеЗначения", СтруктураНеиспользуемыеЗначения);
	СтруктураПараметров.Вставить("СтруктураСуществующиеЗначения", СтруктураСуществующиеЗначения);

	// передача параметров в форму
	Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
	Форма.РежимВыбора = Истина;
	Форма.Открыть();
	мФормаВыбораПоказателиСписок = Форма;

КонецПроцедуры // КоманднаяПанельСписокПоказателейСписокПоказатели()

// Процедура вызывается при нажатии кнопки "Сортировка показателей" командной 
// панели табличного поля "Показатели отчета", управляет видимостью колонки
// "Сортировка" табличного поля.
Процедура КоманднаяПанельСписокПоказателейСортировка(Кнопка)

	ЭлементыФормы.КоманднаяПанельСписокПоказателей.Кнопки.Сортировка.Пометка = Не ЭлементыФормы.КоманднаяПанельСписокПоказателей.Кнопки.Сортировка.Пометка;

	ЭлементыФормы.ТабличноеПолеСписокПоказателей.Колонки.Сортировка.Видимость = ЭлементыФормы.КоманднаяПанельСписокПоказателей.Кнопки.Сортировка.Пометка;

	// Если сортировка отключена, то очистим сортировку
	Если Не ЭлементыФормы.КоманднаяПанельСписокПоказателей.Кнопки.Сортировка.Пометка Тогда
		ТаблицаСписокПоказателей.ЗаполнитьЗначения(0, "Сортировка");
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельСписокПоказателейСортировка()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик события "НачалоВыбораИзСписка" для отображения
Процедура ПолеВыбораВариантОтображенияСтраницыСДатойАктуальностиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора = ПолучитьСписокВариантовОтображения();
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" для отображения
Процедура ПолеВыбораВариантОтображенияСтраницыСПериодомНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора = ПолучитьСписокВариантовОтображения();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" вида отчета
Процедура ПолеВыбораВидОтчетаПриИзменении(Элемент)
	
	НовыйОтчет = Отчеты[ОтчетОбъект.мИмяОтчета].Создать();
	НовыйОтчет.ВидОтчета = Элемент.Значение;
	Состояние(НСтр("ru='Заполнение по умолчанию';uk='Заповнення по умовчанню'"));
	НовыйОтчет.ЗаполнитьНачальныеНастройки();
	ЗаполнитьРеквизиты(НовыйОтчет);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки настройки периода.
Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаНачала, ?(ДатаОкончания='0001-01-01', ДатаОкончания, КонецДня(ДатаОкончания)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.Редактировать();
	ДатаНачала = НастройкаПериода.ПолучитьДатуНачала();
	ДатаОкончания = НастройкаПериода.ПолучитьДатуОкончания();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ТабличноеПолеГруппировкиОтчета

// Процедура - обработчик вывода строки таблицы группировок отчета.
Процедура ТабличноеПолеГруппировкиОтчетаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если Найти(ДанныеСтроки.ПредставлениеГруппировки,": по интервалам")<>0 тогда
		ОформлениеСтроки.Ячейки.ПредставлениеИнтервалов.ТолькоПросмотр = ЛОЖЬ;
	Иначе
		ОформлениеСтроки.Ячейки.ПредставлениеИнтервалов.ТолькоПросмотр = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик окончания редактирования строки таблицы группировок отчета.
Процедура ТабличноеПолеГруппировкиОтчетаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	Если (ПустаяСтрока(Элемент.ТекущиеДанные.ПредставлениеГруппировки)) и (НЕ ОтменаРедактирования) Тогда
		Предупреждение(НСтр("ru='Не выбрана группировка!';uk='Не обрано групування!'"),60);
		Отказ=Истина;
	КонецЕсли;

КонецПроцедуры // ТабличноеПолеГруппировкиОтчетаПередОкончаниемРедактирования()

// Процедура - обработчик начала выбора значения в поле "Группировки" строки таблицы группировок отчета.
Процедура ТабличноеПолеГруппировкиОтчетаГруппировкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	Форма = ПолучитьФорму("ФормаВыбораОтчетов", ЭтаФорма, "дляФормаФильтра");
	Форма.ОтчетОбъект = ОтчетОбъект;
    Форма.ТаблицаГруппировки = ОтчетОбъект.мТаблицаГруппировки;
    Форма.ТаблицаПоказатели = ОтчетОбъект.мТаблицаПоказатели;
    Форма.ТаблицаФильтры = ОтчетОбъект.мТаблицаФильтры;

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос(НСтр("ru='Предыдущая операция выбора группировки не завершена."
"Завершить?';uk='Попередня операція вибору групування не завершена."
"Завершити?'"),РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИсходнаяТаблица", "СписокГруппировок");

	СтруктураСуществующиеЗначения = Новый Структура;
	СтруктураНеиспользуемыеЗначения = Новый Структура;
	
	Для Каждого Строка Из ТаблицаГруппировкиОтчета Цикл

		Если ПустаяСтрока(Строка.ИмяГруппировки) Тогда
            Продолжить;
		КонецЕсли;
			
		// Кроме этой строки
		Если ТаблицаГруппировкиОтчета.Индекс(Строка) <> ТаблицаГруппировкиОтчета.Индекс(ЭлементыФормы.ТабличноеПолеГруппировкиОтчета.ТекущаяСтрока) Тогда
			СтруктураНеиспользуемыеЗначения.Вставить(Строка.ИмяГруппировки);
		КонецЕсли;
		
		Для Каждого СтрокаСтрока Из Строка.СписокДопПолей Цикл
			СтруктураНеиспользуемыеЗначения.Вставить(СтрокаСтрока.ИмяГруппировки);
		КонецЦикла;
	КонецЦикла;

	Если Не ПустаяСтрока(ЭлементыФормы.ТабличноеПолеГруппировкиОтчета.ТекущиеДанные.ИмяГруппировки) Тогда
		СтруктураСуществующиеЗначения.Вставить(ЭлементыФормы.ТабличноеПолеГруппировкиОтчета.ТекущиеДанные.ИмяГруппировки);
	КонецЕсли;

	
	СтруктураПараметров.Вставить("СтруктураНеиспользуемыеЗначения", СтруктураНеиспользуемыеЗначения);
	СтруктураПараметров.Вставить("СтруктураСуществующиеЗначения", СтруктураСуществующиеЗначения);

	// Передача параметров в форму
	Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
	Форма.РежимВыбора = Истина;
	Форма.Открыть();
	мФормаВыбораГруппировки = Форма;
	
КонецПроцедуры // ТабличноеПолеГруппировкиОтчетаГруппировкаНачалоВыбора()

Процедура ТабличноеПолеГруппировкиОтчетаПредставлениеИнтерваловОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактированияИнтервалов(ЭлементыФормы.ТабличноеПолеГруппировкиОтчета.ТекущаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ТабличноеПолеСписокПоказателей

// Процедура - обработчик начала выбора значения в поле "Показатель" строки таблицы показателей отчета.
Процедура ТабличноеПолеСписокПоказателейПредставлениеПоказателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	Форма = ПолучитьФорму("ФормаВыбораОтчетов", ЭтаФорма, "дляФормаФильтра");
	Форма.ОтчетОбъект = ОтчетОбъект;
    Форма.ТаблицаГруппировки = ОтчетОбъект.мТаблицаГруппировки;
    Форма.ТаблицаПоказатели = ОтчетОбъект.мТаблицаПоказатели;
    Форма.ТаблицаФильтры = ОтчетОбъект.мТаблицаФильтры;

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос(НСтр("ru='Предыдущая операция выбора показателя не завершена."
"Завершить?';uk='Попередня операція вибору показника не завершена."
"Завершити?'"),РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;	

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИсходнаяТаблица", "СписокПоказатели");

	СтруктураСуществующиеЗначения = Новый Структура;
	СтруктураНеиспользуемыеЗначения = Новый Структура;

	Для Каждого Строка Из ТаблицаСписокПоказателей Цикл

		Если ПустаяСтрока(Строка.ИмяПоказателя) Тогда
			Продолжить;
		КонецЕсли;

		// Кроме этой строки
		Если ТаблицаСписокПоказателей.Индекс(Строка) <> ТаблицаСписокПоказателей.Индекс(ЭлементыФормы.ТабличноеПолеСписокПоказателей.ТекущаяСтрока) Тогда
			СтруктураНеиспользуемыеЗначения.Вставить(Строка.ИмяПоказателя);
		КонецЕсли;

	КонецЦикла;

	Если Не ПустаяСтрока(ЭлементыФормы.ТабличноеПолеСписокПоказателей.ТекущиеДанные.ИмяПоказателя) Тогда
		СтруктураСуществующиеЗначения.Вставить(ЭлементыФормы.ТабличноеПолеСписокПоказателей.ТекущиеДанные.ИмяПоказателя);
	КонецЕсли;


	СтруктураПараметров.Вставить("СтруктураНеиспользуемыеЗначения", СтруктураНеиспользуемыеЗначения);
	СтруктураПараметров.Вставить("СтруктураСуществующиеЗначения", СтруктураСуществующиеЗначения);

	// передача параметров в форму
	Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
	Форма.РежимВыбора = Истина;
	Форма.Открыть();
	мФормаВыбораПоказатели = Форма;

КонецПроцедуры // ТабличноеПолеСписокПоказателейПредставлениеПоказателяНачалоВыбора()

// Процедура - обработчик начала выбора значения из списка в поле "Сортировка" строки таблицы показателей отчета.
Процедура ТабличноеПолеСписокПоказателейСортировкаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора = мСписокСортировки;
	Элемент.ВысотаСпискаВыбора = мСписокСортировки.Количество();
	
КонецПроцедуры // ТабличноеПолеСписокПоказателейСортировкаНачалоВыбораИзСписка()

// Процедура - обработчик выбора значения из списка в поле "Сортировка" строки таблицы показателей отчета.
Процедура ТабличноеПолеСписокПоказателейСортировкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ЭлементыФормы.ТабличноеПолеСписокПоказателей.ТекущиеДанные.Сортировка = Число(Лев(ВыбранноеЗначение,1));
	
КонецПроцедуры // ТабличноеПолеСписокПоказателейСортировкаОбработкаВыбора()

// Процедура - обработчик события окончания редактирования строки
Процедура ТабличноеПолеСписокПоказателейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если (ПустаяСтрока(Элемент.ТекущиеДанные.ПредставлениеПоказателя)) и (НЕ ОтменаРедактирования) Тогда
		Предупреждение(НСтр("ru='Не выбран показатель!';uk='Не вибраний показник!'"),60);
		Отказ=Истина;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ТабличноеПолеСписокФильтров

// Процедура - обработчик активизации строки отбора
Процедура ТабличноеПолеСписокФильтровПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущаяСтрока <> Неопределено тогда
		Если ТипЗнч(Элемент.ТекущаяСтрока.Значение) = Тип("СписокЗначений") тогда
			ЭлементыФормы.СписокЗначенийОтбора.Значение = Элемент.ТекущаяСтрока.Значение.Скопировать();
		Иначе
			ЭлементыФормы.СписокЗначенийОтбора.Значение.Очистить()
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

// Процедура - обработчик события удаления строки отбора
Процедура ТабличноеПолеСписокФильтровПослеУдаления(Элемент)
	Если Элемент.Значение.Количество()=0 тогда
		ЭлементыФормы.СписокЗначенийОтбора.Значение.Очистить();
	КонецЕсли;	 
КонецПроцедуры

// Процедура - обработчик события окончания редактирования строки
Процедура ТабличноеПолеСписокФильтровПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
	    Возврат;
	КонецЕсли; 

	Если ПустаяСтрока(Элемент.ТекущиеДанные.ПредставлениеОтбора)Тогда
		Предупреждение(НСтр("ru='Не выбрано поле для отбора!';uk='Не вибрано поле для відбору!'"),60);
		Отказ=Истина;
		Возврат;
	КонецЕсли;

	Если Элемент.ТекущиеДанные.ВидСравнения = Неопределено Тогда
		Предупреждение(НСтр("ru='Не выбран вид сравнения!';uk='Не вибраний вид порівняння!'"),60);
		Отказ=Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик вывода строки таблицы фильтров отчета.
Процедура ТабличноеПолеСписокФильтровПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	//Управляем доступностью колонок отдельных строк таблицы отбора
	ВидСравненияИнтервальный = ВидСравненияПринадлежитГруппе(ДанныеСтроки.ВидСравнения,"Интервальные");
	ВидСравненияСписковый    = ВидСравненияПринадлежитГруппе(ДанныеСтроки.ВидСравнения,"Списковые");

	//ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = ВидСравненияСписковый;
	ОформлениеСтроки.Ячейки.Значение.Видимость = НЕ ВидСравненияИнтервальный;
	ОформлениеСтроки.Ячейки.ЗначениеС.Видимость = ВидСравненияИнтервальный;
	ОформлениеСтроки.Ячейки.ЗначениеПО.Видимость = ВидСравненияИнтервальный;
	
КонецПроцедуры

// Процедура - обработчик начала выбора значения в поле "Отбор" строки таблицы фильтров отчета.
Процедура ТабличноеПолеСписокФильтровПредставлениеФильтраНачалоВыбора(Элемент, СтандартнаяОбработка)

	Форма = ПолучитьФорму("ФормаВыбораОтчетов", ЭтаФорма, "дляФормаФильтра");
	Форма.ОтчетОбъект = ОтчетОбъект;
    Форма.ТаблицаГруппировки = ОтчетОбъект.мТаблицаГруппировки;
	Форма.ТаблицаПоказатели = ОтчетОбъект.мТаблицаПоказатели;
	Форма.ТаблицаФильтры = ОтчетОбъект.мТаблицаФильтры;

	Если Форма.Открыта() Тогда
		
		Форма.Активизировать();
		
		Если Вопрос(НСтр("ru='Предыдущая операция выбора фильтра не завершена."
"Завершить?';uk='Попередня операція вибору фільтра не завершена."
"Завершити?'"),РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
		
	КонецЕсли;	

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИсходнаяТаблица", "СписокФильтров");

	СтруктураСуществующиеЗначения   = Новый Структура;
	СтруктураНеиспользуемыеЗначения = Новый Структура;

	Для Каждого Строка Из ТаблицаСписокФильтров Цикл
		
		// Кроме этой строки
		Если ТаблицаСписокФильтров.Индекс(Строка) <> ТаблицаСписокФильтров.Индекс(ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока) Тогда
			СтруктураНеиспользуемыеЗначения.Вставить(Строка.ИмяОтбора);
		КонецЕсли;

	КонецЦикла;

	Если Не ПустаяСтрока(ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущиеДанные.ИмяОтбора) Тогда
		СтруктураСуществующиеЗначения.Вставить(ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущиеДанные.ИмяОтбора);
	КонецЕсли;

	СтруктураПараметров.Вставить("СтруктураНеиспользуемыеЗначения", СтруктураНеиспользуемыеЗначения);
	СтруктураПараметров.Вставить("СтруктураСуществующиеЗначения", СтруктураСуществующиеЗначения);

	// Передача параметров в форму
	Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
	Форма.РежимВыбора = Истина;
	Форма.Открыть();
	мФормаВыбораУсловий = Форма;

КонецПроцедуры // ТабличноеПолеСписокФильтровПредставлениеФильтраНачалоВыбора()

// Процедура - обработчик начала выбора из списка в поле "Тип сравнения" 
Процедура ТабличноеПолеСписокФильтровВидСравненияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	//Установим необходимый список видов сравнений для типа значения текущего фильтра
	ВидФильтра=ОтчетОбъект.мТаблицаФильтры.Найти(ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущиеДанные.ИмяОтбора,"ИмяПоля");
	
	Если ВидФильтра <> Неопределено Тогда
		ОписаниеТиповФильтра = ВидФильтра.ОписаниеТипов;
	Иначе
		ОписаниеТиповФильтра = ОписаниеТиповСтрока
	КонецЕсли;
	
	СписокВыбораВидовСравнения = ОпределитьСписокВозможныхВидовСравненияПоТипу(ОписаниеТиповФильтра);
	
	Если ВидФильтра <> Неопределено и ЕстьИерархия(ВидФильтра.ИмяПоля,ОтчетОбъект.мТаблицаФильтры) Тогда
		
        СписокВыбораВидовСравнения.Добавить(ВидСравнения.ВСпискеПоИерархии);
		СписокВыбораВидовСравнения.Добавить(ВидСравнения.НеВСпискеПоИерархии);
		
	КонецЕсли;
	
	ЭлементыФормы.ТабличноеПолеСписокФильтров.Колонки.ВидСравнения.ЭлементУправления.СписокВыбора = СписокВыбораВидовСравнения;
	
КонецПроцедуры

// Процедура - обработчик изменения значения в поле "Тип сравнения" 
Процедура ТабличноеПолеСписокФильтровВидСравненияПриИзменении(Элемент)
	
	ТекущаяСтрокаТаблицыОтборов = ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущиеДанные;
	ВидСравненияИнтервальный 	= ВидСравненияПринадлежитГруппе(ТекущаяСтрокаТаблицыОтборов.ВидСравнения,"Интервальные");
	ВидСравненияСписковый 		= ВидСравненияПринадлежитГруппе(ТекущаяСтрокаТаблицыОтборов.ВидСравнения,"Списковые");

    //Определим пустое значения для отбора
	ПустоеЗначениеОтбора = Неопределено;
	НайдСтр = ОтчетОбъект.мТаблицаФильтры.Найти(ТекущаяСтрокаТаблицыОтборов.ИмяОтбора, "ИмяПоля");
	
	Если НайдСтр <> Неопределено Тогда
		
		ТипыЗначения = НайдСтр.ОписаниеТипов.Типы();
		
		// Если тип единичный, то присвоим пустое значение этого типа			
		Если ТипыЗначения.Количество() = 1 Тогда
			ПустоеЗначениеОтбора = ОбщегоНазначения.ПустоеЗначениеТипа(ТипыЗначения[0]);
		Иначе
			ПустоеЗначениеОтбора = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидСравненияИнтервальный тогда
		ТекущаяСтрокаТаблицыОтборов.Значение = ПустоеЗначениеОтбора;		
	Иначе
		
		ТекущаяСтрокаТаблицыОтборов.ЗначениеС  = ПустоеЗначениеОтбора;
		ТекущаяСтрокаТаблицыОтборов.ЗначениеПО = ПустоеЗначениеОтбора;
		
	КонецЕсли;	 
	
КонецПроцедуры

// Процедура - обработчик выбора из списка в поле "Тип сравнения" 
Процедура ТабличноеПолеСписокФильтровВидСравненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ЗначениеОтбораТекущейСтроки = ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока.Значение;
	
	Если НЕ ВидСравненияПринадлежитГруппе(ВыбранноеЗначение,"Списковые") Тогда

		ЭлементыФормы.СписокЗначенийОтбора.Значение.Очистить();
		
		Элемент.АвтопереносСтрок = Ложь;
		
		Если ТипЗнч(ЗначениеОтбораТекущейСтроки) = Тип("СписокЗначений") Тогда
			
			Если ЗначениеОтбораТекущейСтроки.Количество() > 0 тогда
				ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока.Значение = ЗначениеОтбораТекущейСтроки[0].Значение;
			КонецЕсли;

		КонецЕсли;
		
	Иначе
		
		Элемент.АвтопереносСтрок= Истина;
		
		Если ТипЗнч(ЗначениеОтбораТекущейСтроки) <> Тип("СписокЗначений") Тогда
			
			СтароеЗначение = ЗначениеОтбораТекущейСтроки;
			ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока.Значение = Новый СписокЗначений;
			
			Если СтароеЗначение <> Неопределено Тогда
				ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока.Значение.Добавить(СтароеЗначение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик начала выбора значения в поле "Значение" 
Процедура ТабличноеПолеСписокФильтровЗначениеФильтраНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ПустаяСтрока(ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока.ПредставлениеОтбора) Тогда
		
		Предупреждение(НСтр("ru='Выберите отбор!';uk='Виберіть відбір!'"),60);
		СтандартнаяОбработка=Ложь;
		Возврат;
		
	КонецЕсли;

	Фильтр  = ЭлементыФормы.ТабличноеПолеСписокФильтров.ТекущаяСтрока;
	НайдСтрФильтр = ОтчетОбъект.мТаблицаФильтры.Найти(Фильтр.ИмяОтбора, "ИмяПоля");
	
	Если НайдСтрФильтр <> Неопределено Тогда
		ТипыФильтра = НайдСтрФильтр.ОписаниеТипов;
	КонецЕсли;

	// Определение владельца для поля вида подчиненный справочник
	Владелец = ОпределитьВладельца(Фильтр.ИмяОтбора,ЭлементыФормы.ТабличноеПолеСписокФильтров.Значение,ОтчетОбъект.мТаблицаФильтры);

	Если Владелец <> Неопределено Тогда
		Элемент.ВыборПоВладельцу = Владелец;
	КонецЕсли;

	Если  НЕ ВидСравненияПринадлежитГруппе(Фильтр.ВидСравнения,"Списковые") тогда

		МассивТипов = ТипыФильтра.Типы();

		Если МассивТипов.Количество() = 1 Тогда

			Если МассивТипов[0]=Тип("Число") Тогда
				Элемент.Значение=0;
			ИначеЕсли МассивТипов[0]=Тип("Строка") Тогда
				Элемент.Значение="";
			ИначеЕсли МассивТипов[0]=Тип("Дата") Тогда
				Элемент.Значение= ДатаАктуальности;
			ИначеЕсли МассивТипов[0]=Тип("Булево") Тогда
				Элемент.Значение=Истина;
			Иначе
				Элемент.Значение = Новый(МассивТипов[0]);
			КонецЕсли;

			Элемент.ВыбиратьТип = Ложь;

		Иначе
			Элемент.ОграничениеТипа = ТипыФильтра;
			Элемент.ВыбиратьТип = Истина;    
		КонецЕсли;

		Если МассивТипов[0] = Тип("СправочникСсылка.КатегорииОбъектов") Тогда

			СтандартнаяОбработка=Ложь;
			ФормаВыбораКатегории= Справочники["КатегорииОбъектов"].ПолучитьФормуВыбора(, Элемент,);
			ФормаВыбораКатегории.РежимВыбора = Истина;
			ФормаВыбораКатегории.Отбор.НазначениеКатегории.Значение      = НайдСтрФильтр.Свойство;
			ФормаВыбораКатегории.Отбор.НазначениеКатегории.Использование = Истина;
			ФормаВыбораКатегории.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
			ФормаВыбораКатегории.Открыть();

		КонецЕсли;

	Иначе

		МассивТипов = Новый Массив;
		МассивТипов.Добавить("СписокЗначений");
		ОписаниеТиповСписокЗначений = Новый ОписаниеТипов(МассивТипов);
		Элемент.ОграничениеТипа = ОписаниеТиповСписокЗначений;
		
		Если  Элемент.Значение = Неопределено Тогда
            Элемент.Значение = Новый СписокЗначений
		КонецЕсли;
		
		Элемент.Значение.ТипЗначения = ТипыФильтра;
		Элемент.ВыбиратьТип = Ложь;

	КонецЕсли;

КонецПроцедуры // ТабличноеПолеСписокФильтровЗначениеФильтраНачалоВыбора()

// Процедура - обработчик очистки значения в поле "Значение" 
Процедура ТабличноеПолеСписокФильтровЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.Значение = ОбщегоНазначения.ПустоеЗначениеТипа(ТипЗнч(Элемент.Значение));
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

// Процедура - обработчик события изменения значения отбора
Процедура ТабличноеПолеСписокФильтровЗначениеПриИзменении(Элемент)
	Если ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") тогда
		ЭлементыФормы.СписокЗначенийОтбора.Значение = Элемент.Значение.Скопировать();
	Иначе
		ЭлементыФормы.СписокЗначенийОтбора.Значение.Очистить()
	КонецЕсли;	 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(500);
ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

МассивТаблицаЗначений = Новый Массив;
МассивТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТаблицаЗначений);

ТаблицаСписокПоказателей.Колонки.Добавить("ИмяПоказателя",ОписаниеТиповСтрока);
ТаблицаСписокПоказателей.Колонки.Добавить("ОписаниеПоказателя",ОписаниеТиповСтрока);
ТаблицаСписокПоказателей.Колонки.Добавить("ИтоговоеПоле",ОписаниеТиповБулево);
ТаблицаСписокПоказателей.Индексы.Добавить("ИтоговоеПоле");
ТаблицаСписокПоказателей.Индексы.Добавить("ИмяПоказателя");
ТаблицаСписокПоказателей.Индексы.Добавить("Сортировка");

ТаблицаГруппировкиОтчета.Колонки.Добавить("ИмяГруппировки",ОписаниеТиповСтрока);
ТаблицаГруппировкиОтчета.Колонки.Добавить("ОписаниеГруппировки",ОписаниеТиповСтрока);
ТаблицаГруппировкиОтчета.Колонки.Добавить("СписокДопПолей", ОписаниеТиповТаблицаЗначений);
ТаблицаГруппировкиОтчета.Колонки.Добавить("ТаблицаИнтервалов", ОписаниеТиповТаблицаЗначений);
ТаблицаГруппировкиОтчета.Индексы.Добавить("ИмяГруппировки");

ТаблицаСписокФильтров.Колонки.Добавить("ИмяОтбора", ОписаниеТиповСтрока);
ТаблицаСписокФильтров.Колонки.Добавить("ОписаниеФильтра");
ТаблицаСписокФильтров.Индексы.Добавить("ИмяОтбора");

мСписокСортировки=Новый СписокЗначений;
мСписокСортировки.Добавить("0","Без сортировки",,);
мСписокСортировки.Добавить("1","По возрастанию",,БиблиотекаКартинок.ПереместитьВниз);
мСписокСортировки.Добавить("2","По убыванию",,БиблиотекаКартинок.ПереместитьВверх);
