////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
//каждая закладка отчета - это объект ПолеТабличногоДокумента
Перем мОтчетОПринятыхНаРаботу;

Перем ЕДРПОУ, КВЕД, Инд;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы;

//вспомогательные переменные
Перем ТаблицаРезультатов;

// хранят имена многострочных разделов
Перем мИдГруппы1;

// хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов;
Перем мСтруктураИсхКолвоСтрокРазделов;
Перем спПараметрыСтраницы;

Перем мПечатныеФормы Экспорт;

// Хранит название макета состава показателей
Перем мСоставПоказателей Экспорт;

Перем ЕстьДуплекс;

Перем мМенеджерЗвит1С Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)
	
	СтруктураПоказателейВнутрСвязи = Новый Структура;
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		Если Тип ("РисунокТабличногоДокумента") <> ТипЗнч (ТекущаяОбласть) Тогда
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если (ТекущаяОбласть.Имя <> "Подвал" И ТекущаяОбласть.Имя <> "Расчет" И ТекущаяОбласть.Имя <> "Шапка") Тогда
			Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
				Продолжить;
			КонецЕсли;
			
			//Если (ТекущаяОбласть.Защита)Тогда
			//	Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
			//		Продолжить;
			//	КонецЕсли;
			//КонецЕсли;
			
			ИмяПоказателя      = ТекущаяОбласть.Имя;
			ЗначениеПоказателя = ТекущаяОбласть.Значение;
			СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		
		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;
			
			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице
			
			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
			
			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
			
			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
			
			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
			
			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
			
			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");
			
			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
				
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;
					
					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;
					
					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;
					
					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
					
					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаВариантыЗаполнения;
	
КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;
	
	ЕстьИзменения = Ложь;
	
	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц
	
	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");
	
	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	
	ЕстьИзменения = Ложь;
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
			
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку
				
				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
				
				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
				
				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий параметры автозаполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);
				
				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки параметров автозаполнения текущей страницы.
				
				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						
						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;
						
						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии формы для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя, а в текущей - отключено.
							// В этом случае удаляем ячейку из таблицы пользовательских настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);
							
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции // ОбновитьВариантыЗаполнения()

// Процедура управляет показом в форме периода построения отчета,
Процедура ПоказатьПериод()
	СтрПериодОтчета = ПредставлениеПериода(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "Л = uk_UA; ФП = Истина" );
	мОтчетОПринятыхНаРаботу.Области.ДАТАОТЧЕТА.Значение = "з "+ Формат(мДатаНачалаПериодаОтчета,"ДЛФ=ДД;Л = uk_UA")+ " до " +Формат(мДатаКонцаПериодаОтчета,"ДЛФ=ДД;Л = uk_UA");
	
	// Период в заголовке отчета
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";	
КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
// пока не прописаны коды - вернуться
Процедура ЗаполнитьСведенияОбОрганизации()
	
	ОргНазв = Организация.НаименованиеПолное;
	мОтчетОПринятыхНаРаботу.Области.ОргНазв.Значение      = ОргНазв;	
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");		
	СписокПоказателей.Добавить("","ФондЗанятости");
	
	// Коды
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");	
	СписокПоказателей.Добавить("","КодКОАТУУ");
	СписокПоказателей.Добавить("","КодКВЕД");
	СписокПоказателей.Добавить("","КодКФВ");
	СписокПоказателей.Добавить("","КодОПФГ");
	СписокПоказателей.Добавить("","КодСПОДУ");			
	
	ФИОДиректора    = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФИОРук;		
	Фонд	   		= РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФондЗанятости;	
	
	Если ЗначениеЗаполнено(Фонд) Тогда
		мОтчетОПринятыхНаРаботу.Области.КОМУ.Значение    = Фонд.НаименованиеПолное + " " + Фонд.Адрес;	
	КонецЕсли;		
	
	мОтчетОПринятыхНаРаботу.Области.ЕДРПОУ.Значение   = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодПоЕДРПОУ;	
	мОтчетОПринятыхНаРаботу.Области.КОАТУУ.Значение   = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодКОАТУУ;
	мОтчетОПринятыхНаРаботу.Области.КВЕД.Значение     = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодКВЕД;	
	мОтчетОПринятыхНаРаботу.Области.КФВ.Значение      = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодКФВ;
	мОтчетОПринятыхНаРаботу.Области.КОПФГ.Значение    = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодОПФГ;
	мОтчетОПринятыхНаРаботу.Области.КОДУ.Значение     = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодСПОДУ;			
	
	мОтчетОПринятыхНаРаботу.Области.АДРЕС.Значение  = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
	мОтчетОПринятыхНаРаботу.Области.ТЕЛЕФОНЫ.Значение 	    = УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация);		
	РСЧЕТ = Организация.ОсновнойБанковскийСчет;	
	мОтчетОПринятыхНаРаботу.Области.РСЧЕТ.Значение = РСЧЕТ.НомерСчета;
	мОтчетОПринятыхНаРаботу.Области.МФО.Значение   = РСЧЕТ.Банк.Код;
	мОтчетОПринятыхНаРаботу.Области.БАНК.Значение  = РСЧЕТ.Банк.Наименование;		
	
	
	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	
	мОтчетОПринятыхНаРаботу.Области.ДеньДаты.Значение 	= ЧастиДатыПодписи.День;
	мОтчетОПринятыхНаРаботу.Области.МесяцДаты.Значение 	= ЧастиДатыПодписи.Месяц;
	Если ЧастиДатыПодписи.Свойство("ДвеПоследниеЦифрыГода") Тогда
		мОтчетОПринятыхНаРаботу.Области.ГодДаты.Значение 	= ЧастиДатыПодписи.ДвеПоследниеЦифрыГода;
	Иначе
		мОтчетОПринятыхНаРаботу.Области.ГодДаты.Значение 	= Формат(ДатаПодписи, "ДФ=yy");
	Конецесли;
	
	мОтчетОПринятыхНаРаботу.Области.РУКОВОДИТЕЛЬ.Значение   = ФИОДиректора;						
	//мОтчетОПринятыхНаРаботу.Области.ИСПОЛНИТЕЛЬ.Значение    = глЗначениеПеременной("глТекущийПользователь");	
	ДанныеФИО = Новый Структура("ФизЛицо",глЗначениеПеременной("глТекущийПользователь").ФизЛицо);
	ФИОСрез = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(мДатаКонцаПериодаОтчета, ДанныеФИО);
	мОтчетОПринятыхНаРаботу.Области.ИСПОЛНИТЕЛЬ.Значение = СокрЛП(ФИОСрез.Фамилия) + " " + Лев(СокрЛ(ФИОСрез.Имя), 1) + "." + Лев(СокрЛ(ФИОСрез.Отчество), 1) + ".";
	
	
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()


// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";
		
	КонецЕсли;
	
	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл
		
		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;
		
		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);
		
		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;
		
		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		
		Если ТипДанныхПоказателя = "Е" Тогда
			
			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];
			
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "ОтчетОПринятыхРаботниках";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;
		
		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		
	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы
		
		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Коммент       = Строка.Комментарий;
			
			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Коммент)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Коммент;
			КонецЕсли;
			
			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
			
			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет пользовательские настройки при изменении версии формы.
// унифицирована, однако использование пока ... вопрос
Процедура ОбновитьПользовательскиеНастройки(СписокСохранения)
	Перем ПоказателиОтчета;
	
	Сообщить(НСтр("ru='Измененилась версия формы отчета."
	"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
	"Виконується відновлення користувальницьких настройок.'"), СтатусСообщения.Информация);
	
	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();
	
	ВерсияФормы = СписокСохранения.ВерсияФормы;
	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ВерсияФормы = "01/01/2005" Тогда
		
		Если  ВерсияФормы = "01/01/2005" Тогда
			ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
			Если СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета) Тогда
				Для Каждого ЭлементСтруктуры Из ПоказателиОтчета Цикл
					ИмяГруппы       = ЭлементСтруктуры.Ключ;
					СписокПоказателей = ЭлементСтруктуры.Значение;
					
					Если ИмяГруппы = "ПолеТабличногоДокументаОтчетОПринятыхРаботниках" Тогда
						Для каждого Показатель Из СписокПоказателей Цикл
							Если Показатель.Ключ = "ГодДаты" Тогда
									СписокПоказателей.Вставить(Показатель.Ключ, Формат(ДатаПодписи, "ДФ=yy"));
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				СписокСохранения.ПоказателиОтчета =  ПоказателиОтчета;
			КонецЕсли;
		КонецЕсли;
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;
		
		Сообщить(НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Оновлення користувальницьких настройок успішно завершене!'"));
		
	Иначе
		
		Сообщить(НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі користувальницьких настройок не виявлені!'"));
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)
	
	ИмяПоказателя = ТекущаяЯчейка.Имя;
	
	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;
	
	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;
	
	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетОПринятыхРаботниках";
	
	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;
	
	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Коммент           = НайденнаяСтрока.Комментарий;
	
	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Коммент;
	
	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);
	
КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)
	
	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетОПринятыхРаботниках";
	
	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;
	
	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;
	
	Если НовыйВариант = 1 Тогда
		
		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		
	ИначеЕсли НовыйВариант = 2 Тогда
		
		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет();
		КонецЕсли;
		
		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
		
		НайденнаяСтрока.Дельта = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		
	ИначеЕсли НовыйВариант = 3 Тогда
		
		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;
		
		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";
		
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		
		// Очищаем комментарий редактируемой ячейки
		ТекущаяОбласть.Примечание.Текст = "";
		
	КонецЕсли;
	
	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);
	
КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)
	
	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетОПринятыхРаботниках";
	
	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;
	
	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;
		
		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Коммент)
	
	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетОПринятыхРаботниках";
	
	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;
	
	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Коммент;
	КонецЕсли;
	
	ТекущаяОбласть.Примечание.Текст = Коммент;
	
КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)
	
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		
		Если Тип ("РисунокТабличногоДокумента") = ТипЗнч (ТекущаяОбласть) Тогда
			ТекущаяОбласть.Значение = ""; 
		Иначе	
			
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ТекущаяОбласть.СодержитЗначение Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяОбласть.Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить()
	
	// Очищаем содержимое ячеек поля табличного документа
	ТекТабличноеПоле = мОтчетОПринятыхНаРаботу;
	ОчиститьТабличноеПоле(ТекТабличноеПоле);
	
	// Выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();
	
	// Удалим добавленные строки многострочной области
	УдалитьДополнительнуюСтроку(Истина);
	
	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;
 	ЗаполнитьСведенияОбОрганизации();
КонецПроцедуры // Очистить()

Процедура РазбитьПечатнуюФорму(ПечФорма)
	
	ИмяФормы = "ОтчетОПринятыхРаботниках";
	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = Истина;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	Если ЕстьДуплекс Тогда
		НовТаблДок = Новый ТабличныйДокумент();
	КонецЕсли;
	
	Для Сч = 1 По ПечФорма.ВысотаТаблицы Цикл
		
		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			// проверим, не должна ли предпоследняя строка печататься вместе со текущей ("не влезшей") строкой.
			// если так, то "откатимся" вверх
			Пока ПослВерх < Сч-1 И ПечФорма.ПолучитьОбласть(Сч-1, , Сч-1, ).Область().ВместеСоСледующим Цикл
			  Сч = Сч - 1;
			КонецЦикла; 
			
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		Если НЕ ЕстьДуплекс Тогда
			НовТаблДок = Новый ТабличныйДокумент();
		КонецЕсли;
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = Истина;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		Если НЕ ЕстьДуплекс Тогда
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
		КонецЕсли;
	КонецЕсли;
	Если ЕстьДуплекс Тогда
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати)
	мПечатныеФормы.Очистить();
	
	ОбновитьСтруктуруМногострочныхРазделов();
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ОбластьПечати = мОтчетОПринятыхНаРаботу.ПолучитьОбласть("Лист1");
	ПечатнаяФорма.Вывести(ОбластьПечати);
	
	ОбластьПечати = мОтчетОПринятыхНаРаботу.ПолучитьОбласть("Лист2");
	ПечатнаяФорма.Вывести(ОбластьПечати);	
	
	РазбитьПечатнуюФорму(ПечатнаяФорма);
	
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	
КонецПроцедуры // Печать()


// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить() Экспорт
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.
		
		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;
		
		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	
	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаОтчетОПринятыхРаботниках";
	
	ТекТабличноеПоле        = мОтчетОПринятыхНаРаботу;
	
	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// Сохраняем выбранные листы для печати в хранилище
	ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
	мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
	
	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	Модифицированность = Ложь;
	
	Возврат Истина;	
	
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	
	// восстанавливаем реквизиты отчета
	Организация              = мСохраненныйДок.Организация;
	
	ЭтаФорма.ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
	
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;
		
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			
			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;
	
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;
	
	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки(СписокСохранения);
		КонецЕсли;
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			
			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьФорматВывода();
	Расчет();
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()	
КонецПроцедуры // Расчет()

Функция ПолучитьОбластьМногострочногоРаздела(ИдГруппы, Колонка)
	Перем СтруктураГруппы;
	
	мСтруктураМногострочныхРазделов.Свойство(ИдГруппы, СтруктураГруппы);
	КолСтрок = СтруктураГруппы.Количество();
	Префикс = ПолучитьПрефикс(КолСтрок);	
	
	КодКолонки = Колонка - 1;
	ИмяНужнойЯчейки = Сред(СтруктураГруппы.Колонки[КодКолонки].Имя,1,1) + Префикс + КолСтрок + Сред(СтруктураГруппы.Колонки[КодКолонки].Имя,2,СтрДлина(СтруктураГруппы.Колонки[КодКолонки].Имя)-1);	
	Возврат мОтчетОПринятыхНаРаботу.Области[ИмяНужнойЯчейки];
КонецФункции	

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто() Экспорт     
	
	КвоСтрок = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|РаботникиОрганизаций.Сотрудник.Физлицо.Ссылка КАК ФизЛицо,
	|РаботникиОрганизаций.Сотрудник.Физлицо.Наименование КАК ФИО,
	|РаботникиОрганизаций.Сотрудник.Физлицо.КодПоДРФО КАК ИНН,
	|РаботникиОрганизаций.Должность.Наименование КАК Должность,
	|РаботникиОрганизаций.Должность.КодКП КАК КодДолжности,
	|РаботникиОрганизаций.Регистратор.Номер КАК НомерПриказа,
	|РаботникиОрганизаций.Регистратор.Дата  КАК ДатаПриказа,
	| КонтактнаяИнформацияАдрес.Представление  КАК Адрес,
	| КонтактнаяИнформацияТелефон.Представление  КАК Телефон
	|ИЗ
	| РегистрСведений.РаботникиОрганизаций.СрезПервых(,Организация = &Организация) КАК РаботникиОрганизаций
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияАдрес
	|ПО РаботникиОрганизаций.Сотрудник.ФизЛицо = КонтактнаяИнформацияАдрес.Объект
	| И КонтактнаяИнформацияАдрес.Тип = &ТипКонтактнойИнформацииАдрес
	| И КонтактнаяИнформацияАдрес.Вид = &ВидКонтактнойИнформацииАдрес
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияТелефон
	|ПО РаботникиОрганизаций.Сотрудник.ФизЛицо = КонтактнаяИнформацияТелефон.Объект
	| И КонтактнаяИнформацияТелефон.Тип = &ТипКонтактнойИнформацииТелефон
	| И КонтактнаяИнформацияТелефон.Вид = &ВидКонтактнойИнформацииТелефон
	|
	|ГДЕ
	| РаботникиОрганизаций.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	| И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> &ВидЗанятостиВнутрСовместитель
	|";
	
	
	Запрос.УстановитьПараметр("ДатаНачала",    мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТипКонтактнойИнформацииАдрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ВидКонтактнойИнформацииАдрес", Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица);
	Запрос.УстановитьПараметр("ТипКонтактнойИнформацииТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Если    РегламентированнаяОтчетность.ИДКонфигурации() = "БП"
		ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" И РегламентированнаяОтчетность.РедакцияКонфигурации() = "1.0") Тогда 
		Запрос.УстановитьПараметр("ВидКонтактнойИнформацииТелефон", Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
	Иначе
  	    Запрос.УстановитьПараметр("ВидКонтактнойИнформацииТелефон", Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаСлужебный);
	КонецЕсли;

	Запрос.УстановитьПараметр("ВидЗанятостиВнутрСовместитель", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Результат = РезультатЗапроса.Выбрать();
		
		Пока Результат.Следующий() Цикл
			Если КвоСтрок > 0 Тогда
				ВставитьДополнительнуюСтроку(мИдГруппы1); 		
			КонецЕсли;
			КвоСтрок = КвоСтрок + 1;
			
			ОбластьЯчейки = ПолучитьОбластьМногострочногоРаздела(мИдГруппы1, 1);
			ОбластьЯчейки.Значение = КвоСтрок;      		   
			
			ОбластьЯчейки = ПолучитьОбластьМногострочногоРаздела(мИдГруппы1, 2);	   
			ОбластьЯчейки.Значение = Результат.ФИО;      		   
			
			ОбластьЯчейки = ПолучитьОбластьМногострочногоРаздела(мИдГруппы1, 3);
			ОбластьЯчейки.Значение = Результат.ИНН;
			
			ОбластьЯчейки = ПолучитьОбластьМногострочногоРаздела(мИдГруппы1, 4);
			ОбластьЯчейки.Значение = Результат.Должность;
			
			ОбластьЯчейки = ПолучитьОбластьМногострочногоРаздела(мИдГруппы1, 5);
			ОбластьЯчейки.Значение = Результат.КодДолжности;
			
			ОбластьЯчейки = ПолучитьОбластьМногострочногоРаздела(мИдГруппы1, 6);
			ОбластьЯчейки.Значение = "№"+Строка(Результат.НомерПриказа)+" від "+Формат(Результат.ДатаПриказа,"ДЛФ=Д");
			
			ОбластьЯчейки = ПолучитьОбластьМногострочногоРаздела(мИдГруппы1, 10);
			ОбластьЯчейки.Значение = "";
			Если  Результат.Адрес <> NULL Тогда
				ОбластьЯчейки.Значение = Результат.Адрес;
			КонецЕсли;
			
			Если Результат.Телефон <> NULL Тогда
				ОбластьЯчейки.Значение = ОбластьЯчейки.Значение + ",  " + Результат.Телефон;
			КонецЕсли;
			
		КонецЦикла;   
		
	КонецЕсли;
	
	ОбновитьСтруктуруМногострочныхРазделов();	
	
	Расчет();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьАвто()

Процедура ЗаполнитьНачальныеНастройки(СоставПоказателей) Экспорт
	
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(СоставПоказателей);
	
	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
			
			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;
		
	КонецЦикла;
	
	ЭлементыФормы.ПолеТабличногоДокументаОтчетОПринятыхРаботниках.ОбластьПечати = ЭлементыФормы.ПолеТабличногоДокументаОтчетОПринятыхРаботниках.Области.Найти("ПредупреждениеОПечати");
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетОПринятыхРаботниках";
	
	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;
	
	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вычисляется автоматически';uk='Значення обчислюється автоматично'");
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");
		КонецЕсли;
		
		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;
		
	КонецЕсли;
	
	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;
	
КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
		
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки("СоставПоказателей");
	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;
	Если ЭлементМеню.Кнопки.Количество() = 0 Тогда
		ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
		НСтр("ru='Печатать сразу';uk='Друкувати відразу'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
		
		ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Предварительный просмотр';uk='Попередній перегляд'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
								
		ЭлементМеню.Кнопки.Добавить("Разделитель1", ТипКнопкиКоманднойПанели.Разделитель);

		ЭлементМеню.Кнопки.Добавить("ЕстьДуплекс", ТипКнопкиКоманднойПанели.Действие,
		                            НСтр("ru='Принтер поддерживает автом. дуплекс';uk='Принтер підтримує автом. дуплекс'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
									
		ЭлементМеню.Кнопки.ЕстьДуплекс.Пометка = ЕстьДуплекс;
	КонецЕсли;							
	
	ЛинияСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЛинияПусто = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	ЭтаФорма.ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
	
	мМассивТиповЛиний = Новый Массив();
	мМассивТиповЛиний.Вставить(0, ЛинияПусто);
	мМассивТиповЛиний.Вставить(1, ЛинияСнизу);
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	Перем ИсходноеКоличествоСтрокГруппы;
	
	ЭтаФорма.АвтоЗаголовок = истина;
	
	мОтчетОПринятыхНаРаботу = ЭлементыФормы.ПолеТабличногоДокументаОтчетОПринятыхРаботниках;			
	
	ТекТабличноеПоле = мОтчетОПринятыхНаРаботу;
	
	Если мСохраненныйДок = Неопределено Тогда
		
		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			ТекТабличноеПоле = мОтчетОПринятыхНаРаботу;
			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл
				СтрокаГруппы = СтруктураГруппы.Добавить();
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяКолонки    = Колонка.Имя;
					Префикс = ПолучитьПрефикс(Нстр);
					КодПоказателя    = Сред (ИмяКолонки,1,1) + Префикс + НСтр + Сред (ИмяКолонки,2,СтрДлина(ИмяКолонки)-1);
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];
					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;
					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
			
			ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок =Организация.Наименование;
			
			ЗаполнитьСведенияОбОрганизации();
			
			УстановитьФорматВывода();
		КонецЕсли;
		
	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
	КонецЕсли;
	
	ПоказатьПериод();
	мОтчетОПринятыхНаРаботу.ТолькоПросмотр = Истина;			
	
	УстановитьЦветФонаЯчейки(,,"ОтчетОПринятыхРаботниках");		
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность = Истина Тогда
		
		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения ?';uk='Дані були змінені. Зберегти зміни ?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
    СохранитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс", ЕстьДуплекс);
	
КонецПроцедуры // ПередЗакрытием()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	
	Очистить();
	
	ЗаполнитьСведенияОбОрганизации();
	
	// Удалим добавленные строки многострочной области
	УдалитьДополнительнуюСтроку(Истина);
	
	ЗаполнитьАвто();
	
КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)
	
	Очистить();
	
КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)
	
	Если Кнопка <> Неопределено Тогда
		Если Найти(Кнопка.Имя, "Дуплекс") >0 Тогда
		     ЕстьДуплекс    = НЕ Кнопка.Пометка;
			 Кнопка.Пометка = НЕ Кнопка.Пометка;
		Иначе
			 Печать(Кнопка.Имя);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)
	
	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)
	
	Сохранить();
	
КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)
	
	
	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	
	мОтчетОПринятыхНаРаботу.Области.ДеньДаты.Значение 	= ЧастиДатыПодписи.День;
	мОтчетОПринятыхНаРаботу.Области.МесяцДаты.Значение 	= ЧастиДатыПодписи.Месяц;
	Если ЧастиДатыПодписи.Свойство("ДвеПоследниеЦифрыГода") Тогда
		мОтчетОПринятыхНаРаботу.Области.ГодДаты.Значение 	= ЧастиДатыПодписи.ДвеПоследниеЦифрыГода;
	Иначе
		мОтчетОПринятыхНаРаботу.Области.ГодДаты.Значение 	= Формат(ДатаПодписи, "ДФ=yy");
	Конецесли;
	
	//	мОтчетФССУтратаТрудосп.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаОтчетОПринятыхРаботникахПриАктивизацииОбласти(Элемент)
	
	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры // ПолеТабличногоДокументаОтчетПринятыхРаботникахПриАктивизацииОбласти()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки.
//
Процедура ПолеВводаЗначениеКорректировкиОтчетОПринятыхРаботникахПриИзменении(Элемент)
	
	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеВводаЗначениеКорректировкиПриИзменении

Функция ПолучитьПрефикс(ТекущееЧисло)
	Если ТекущееЧисло < 10 Тогда
		Префикс = "000";
	Иначе
		Префикс = "00";
	КонецЕсли;
	Возврат(Префикс)
КонецФункции

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
// похоже унифицирована и актуальна только при наличии таких разделов
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;
		ТекТабличноеПоле = мОтчетОПринятыхНаРаботу;		
		
		Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
			Префикс = ПолучитьПрефикс(НСтр);
			НСтрНов = НСтр + 1;
			ПрефиксНов = ПолучитьПрефикс(НСтрНов);
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				ИмяКолонки    = Колонка.Имя;
				ИмяЯчейки    = Сред (ИмяКолонки,1,1) + Префикс + НСтр + Сред (ИмяКолонки,2,СтрДлина(ИмяКолонки)-1);
				ИмяНовОбластиЯчейки = Сред (ИмяКолонки,1,5) + ПрефиксНов + НСтрНов + Сред (ИмяКолонки,2,СтрДлина(ИмяКолонки)-1);
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	спПараметрыСтраницы.Добавить(СтруктураГруппы.Количество(),"КвоСтрокТаблицы");
	
КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

Процедура ВставитьДополнительнуюСтроку(ИмяГруппы)
	Перем СтруктураГруппы;	
	
	ТекТабличноеПоле = мОтчетОПринятыхНаРаботу;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	Префикс = ПолучитьПрефикс(КолСтрок);
	ИмяПервойЯчейкиПоследнейСтроки = Сред(СтруктураГруппы.Колонки[0].Имя,1,1) + Префикс + КолСтрок + Сред(СтруктураГруппы.Колонки[0].Имя,2,3);
	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	
	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );
	КолСтрокНов = КолСтрок + 1;
	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = Сред (ИмяКолонки,1,1) + Префикс + КолСтрок + Сред (ИмяКолонки,2,СтрДлина(ИмяКолонки)-1);
		ПрефиксНов = ПолучитьПрефикс(КолСтрокНов);
		ИмяНовОбластиЯчейки = Сред (ИмяКолонки,1,1) + ПрефиксНов + (КолСтрокНов) + Сред (ИмяКолонки,2,СтрДлина(ИмяКолонки)-1);
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
		
		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
		
		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
		
		// очищаем значения ячеек вставленной области
		Если (ОбластьЯчейки.СодержитЗначение)  Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число(ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;
			ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
		КонецЕсли;
	КонецЦикла;
	Если (ИмяГруппы = мИдГруппы1) Тогда 
		ОбластьТекстовыйНомер = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх,2,ОбластьЯчейки.Верх,2 );
		//	ОбластьТекстовыйНомер.Текст = Строка(КолСтрок + 1);
	КонецЕсли;
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	
	ИмяТекущейОбласти = Сред (СтруктураГруппы.Колонки[0].Имя,1,1) + ПрефиксНов + (КолСтрокНов) + Сред (СтруктураГруппы.Колонки[0].Имя,2,3);
	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;
	
	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();	
	Модифицированность = Истина;
КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку(Очистка = Ложь)
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = мИдГруппы1;
	
	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ТекТабличноеПоле = мОтчетОПринятыхНаРаботу;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить(НСтр("ru='Не выбрана удаляемая строка многострочного раздела.';uk='Не обрано строку багаторядкового розділу, що видаляється'"), СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = СтруктураГруппы.Количество();
	
	Если Очистка Тогда
		Пока НомУдаляемойСтроки > 1 Цикл
			НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля    
			
			Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
				// удаляется добавленная строка
				Префикс = ПолучитьПрефикс(СтруктураГруппы.Количество());
				ИмяПервойЯчейкиУдаляемойСтроки = Сред(СтруктураГруппы.Колонки[0].Имя,1,1) + Префикс + НомУдаляемойСтроки + Сред(СтруктураГруппы.Колонки[0].Имя,2,СтрДлина(СтруктураГруппы.Колонки[0].Имя)-1);
				
				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
				
				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
				
				// Определим область удаляемой строки
				УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
				
				// непосредственно удаляем область строки табличного документа
				ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
				
				КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
				
				// обновим имена ячеек сдвинутых строк
				Если КолвоСдвигаемыхСтрок > 0 Тогда
					Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
						ТекСтрока = СтруктураГруппы[НСтр-1];
						НСтрНов = НСтр - 1;
						Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
							ПрефиксНов = ПолучитьПрефикс(НСтрНов);
							ИмяСдвинутойЯчейки    = Сред (Колонка.Имя,1,1) + Префикс + НСтр + Сред (Колонка.Имя,2,СтрДлина(Колонка.Имя)-1);
							НовоеИмяСдвинутойЯчейки = Сред (Колонка.Имя,1,1) + ПрефиксНов + (НСтрНов) + Сред (Колонка.Имя,2,СтрДлина(Колонка.Имя)-1);
							ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
							ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
							
							Если НЕ(ОбластьСдвинутойЯчейки.СодержитЗначение) Тогда
								// обновляем порядковый номер строки
								СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								// обновляем значение элемента таблицы значений
								ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				
				// обновляем структуру многострочного раздела
				СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
			Иначе
				// строка не удаляется в форме табличного документа,
				// а должна осуществляться сдвиг строк
				
				// обновляем структуру многострочного раздела
				// методом удаления выбранной строки и добавления пустой строки
				СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
				ДобавляемаяСтрока = СтруктураГруппы.Добавить();
				
				// обновляем порядковые номера строк, выводимых в табличный документ
				Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
					Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
						
						НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
						НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
						Префикс = ПолучитьПрефикс(НомерСтрокиВФормеТаблицы);
						ИмяЯчейки    = Сред (КолонкаТаблицы.Имя,1,1) + Префикс + НомерСтрокиВФормеТаблицы + Сред(КолонкаТаблицы.Имя,2,СтрДлина(КолонкаТаблицы.Имя)-1);
						ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
						
						Если НЕ(ОбластьЯчейкиТаблицы.СодержитЗначение) Тогда
							ПервыйНомерВГруппе = 1;
							// обновляем порядковый номер строки
							НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
							СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				// Обновляем экранную форму табличного документа
				ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
			КонецЕсли;
			
			// назначим текущей областью таблицы первую редактируемую ячейку
			// удаленной строки, если ее порядковый номер меньше кол-ва строк
			// многострочного раздела, или последней строки раздела в противном случае
			
			// определяем текущую область таблицы
			НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
			Префикс = ПолучитьПрефикс(НомТекущейСтроки);
			ИмяТекущейОбласти    = Сред (СтруктураГруппы.Колонки[0].Имя,1,1) + Префикс + НомТекущейСтроки + Сред (СтруктураГруппы.Колонки[0].Имя,2,СтрДлина(СтруктураГруппы.Колонки[0].Имя)-1);
			
			ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
			
			// установим фокус на поле табличн. документа
			ТекущийЭлемент = ТекТабличноеПоле;
			
			НомУдаляемойСтроки = СтруктураГруппы.Количество();
			
			Модифицированность = Истина;
			
		КонецЦикла;		
	Иначе
		
		НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля    
		
		Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
			// удаляется добавленная строка
			Префикс = ПолучитьПрефикс(СтруктураГруппы.Количество());
			ИмяПервойЯчейкиУдаляемойСтроки = Сред(СтруктураГруппы.Колонки[0].Имя,1,1) + Префикс + НомУдаляемойСтроки + Сред(СтруктураГруппы.Колонки[0].Имя,2,СтрДлина(СтруктураГруппы.Колонки[0].Имя)-1);
			
			// область первой ячейки удаляемой строки многострочного раздела
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
			
			// номера строк удаляемой области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
			
			// Определим область удаляемой строки
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
			
			// непосредственно удаляем область строки табличного документа
			ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
			
			КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
			
			// обновим имена ячеек сдвинутых строк
			Если КолвоСдвигаемыхСтрок > 0 Тогда
				Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
					ТекСтрока = СтруктураГруппы[НСтр-1];
					НСтрНов = НСтр - 1;
					Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
						ПрефиксНов = ПолучитьПрефикс(НСтрНов);
						ИмяСдвинутойЯчейки    = Сред (Колонка.Имя,1,1) + Префикс + НСтр + Сред (Колонка.Имя,2,СтрДлина(Колонка.Имя)-1);
						НовоеИмяСдвинутойЯчейки = Сред (Колонка.Имя,1,1) + ПрефиксНов + (НСтрНов) + Сред (Колонка.Имя,2,СтрДлина(Колонка.Имя)-1);
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НЕ(ОбластьСдвинутойЯчейки.СодержитЗначение) Тогда
							// обновляем порядковый номер строки
							СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
							// обновляем значение элемента таблицы значений
							ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			// обновляем структуру многострочного раздела
			СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		Иначе
			// строка не удаляется в форме табличного документа,
			// а должна осуществляться сдвиг строк
			
			// обновляем структуру многострочного раздела
			// методом удаления выбранной строки и добавления пустой строки
			СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
			ДобавляемаяСтрока = СтруктураГруппы.Добавить();
			
			// обновляем порядковые номера строк, выводимых в табличный документ
			Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
				Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
					
					НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
					НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
					Префикс = ПолучитьПрефикс(НомерСтрокиВФормеТаблицы);
					ИмяЯчейки    = Сред (КолонкаТаблицы.Имя,1,1) + Префикс + НомерСтрокиВФормеТаблицы + Сред(КолонкаТаблицы.Имя,2,СтрДлина(КолонкаТаблицы.Имя)-1);
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если НЕ(ОбластьЯчейкиТаблицы.СодержитЗначение) Тогда
						ПервыйНомерВГруппе = 1;
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			// Обновляем экранную форму табличного документа
			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЕсли;
		
		// назначим текущей областью таблицы первую редактируемую ячейку
		// удаленной строки, если ее порядковый номер меньше кол-ва строк
		// многострочного раздела, или последней строки раздела в противном случае
		
		// определяем текущую область таблицы
		НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
		Префикс = ПолучитьПрефикс(НомТекущейСтроки);
		ИмяТекущейОбласти    = Сред (СтруктураГруппы.Колонки[0].Имя,1,1) + Префикс + НомТекущейСтроки + Сред (СтруктураГруппы.Колонки[0].Имя,2,СтрДлина(СтруктураГруппы.Колонки[0].Имя)-1);
		
		ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
		
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = ТекТабличноеПоле;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры // УдалитьДополнительнуюСтроку()	

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	ТекТабличноеПоле = мОтчетОПринятыхНаРаботу;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл
			НомИсходнойСтроки = НомНовойСтроки - 1;
			Префикс = ПолучитьПрефикс(НомИсходнойСтроки);
			ПрефиксНов = ПолучитьПрефикс(НомНовойСтроки);
			
			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = Сред(СтруктураГруппы.Колонки[0].Имя,1,1) + Префикс + НомИсходнойСтроки + Сред(СтруктураГруппы.Колонки[0].Имя,2,СтрДлина(СтруктураГруппы.Колонки[0].Имя)-1);
			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );
			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = Сред (ИмяКолонки,1,1) + Префикс + НомИсходнойСтроки + Сред (ИмяКолонки,2,СтрДлина(ИмяКолонки)-1);
				ИмяНовОбластиЯчейки = Сред (ИмяКолонки,1,1) + ПрефиксНов + НомНовойСтроки + Сред (ИмяКолонки,2,СтрДлина(ИмяКолонки)-1);
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядековый номер последней строки перед вставкой
					ИсходныйНомер        = Число(ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;
					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	//  выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			Префикс = ПолучитьПрефикс(НомерСтрокиВФормеТаблицы);
			ИмяКолонки = КолонкаТаблицы.Имя;
			ИмяЯчейки    = Сред (ИмяКолонки,1,1) + Префикс + НомерСтрокиВФормеТаблицы + Сред (ИмяКолонки,2,СтрДлина(ИмяКолонки)-1);
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];
			
			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

Процедура КнопкаДобавитьДопСтрокиПолеВводаЗначениеКорректировкиОтчетОПринятыхРаботникахПриИзмененииНажатие(Элемент)
	ВставитьДополнительнуюСтроку(мИдГруппы1);
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиОтчетПолеВводаЗначениеКорректировкиОтчетОПринятыхРаботникахПриИзмененииНажатие(Элемент)
	Ответ = Вопрос(НСтр("ru='Удалить выбранную строку?"
	"(Внимание! данная операция необратима)';uk='Видалити обраний рядок?"
	"(Увага! дана операція необоротна)'"), РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Да);
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	УдалитьДополнительнуюСтроку();
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияОтчетОПринятыхРаботникахПриИзменении(Элемент)
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
КонецПроцедуры

Процедура ПолеВводаКомментарийОтчетОПринятыхРаботникахПриИзменении(Элемент)
	Коммент = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Коммент);
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Функция СформироватьДанныеДляЗвит1С() Экспорт 
	
	мСохраненныйДок   = Неопределено;	
	мСкопированаФорма = Неопределено;
	
	ПередОткрытием(Ложь, Истина);
	ПриОткрытии();
	
	Очистить();
	ЗаполнитьСведенияОбОрганизации();
	ЗаполнитьАвто();
	
	Если мМенеджерЗвит1С.ФлагОтладки Тогда
		ЭтаФорма.ОткрытьМодально();
	КонецЕсли;
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	// расшифровка
	Попытка
		ВЫПОЛНИТЬ("СписокСохранения.Вставить(""РасшифровкаОтчета"", СпП);");
	Исключение КонецПопытки;
	
	ПоказателиОтчета = Новый Структура();
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	КонецЦикла;
	
	ПоказателиОтчета.Вставить("СлужебныеДанные", Новый Структура("мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета",
	                                                              мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета));

	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповЧисло2 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(2,0);

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

мСтруктураМногострочныхРазделов = Новый Структура;

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
//мВерсияФормы = "01/01/2005";
мВерсияФормы = "01/10/2009";

мПечатныеФормы = Новый СписокЗначений;

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1 = "R";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
//нужна редакция в зависимости от структуры многострочных групп приложений декларации

КолИсхСтрокИдГруппы1 = 1;

СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("RGA", ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("RG1", ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("RG2", ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("RG3", ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("RG4", ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("RG5", ОписаниеТиповДата);
СтруктураГруппы1.Колонки.Добавить("RG6", ОписаниеТиповДата);
СтруктураГруппы1.Колонки.Добавить("RG7", ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("RG8", ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("RG9", ОписаниеТиповСтрока);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);

//списрк значений для разбиения по страницам многострочной части отчета
//при его печати
спПараметрыСтраницы = Новый СписокЗначений;
спПараметрыСтраницы.Добавить(52, "КвоСтрокНаСтранице");
спПараметрыСтраницы.Добавить(3, "ВысотаОснШапки");
спПараметрыСтраницы.Добавить(1,"ВысотаДопШапки");
спПараметрыСтраницы.Добавить(14, "ВысотаПодвала");


// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетОПринятыхРаботниках.СписокВыбора.Добавить(1, НСтр("ru='не заполнять автоматически';uk='не заповнювати автоматично'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетОПринятыхРаботниках.СписокВыбора.Добавить(2, НСтр("ru='заполнять автоматически с корректировкой';uk='заповнювати автоматично з коригуванням'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетОПринятыхРаботниках.СписокВыбора.Добавить(3, НСтр("ru='заполнять автоматически без корректировки';uk='заповнювати автоматично без коригування'"));

мСоставПоказателей = "СоставПоказателей";

ЕстьДуплекс = ВосстановитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс");
Если НЕ ТипЗнч(ЕстьДуплекс) = Тип("Булево") Тогда
	ЕстьДуплекс = Ложь;	
КонецЕсли;
