////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поля табличного документа
//аккуратно переименовать в зависимости наименований ПолейТабличногоДокумента,
//которые повторяют названия приложени1 самой декларации
Перем мИндВедомости;
Перем мСписокЛиц;
Перем мСписокЛьготников;
Перем мРаботодатель;
Перем мЯрлык;
Перем мОписаниеПакета;
Перем ЧастноеЛицо;
Перем РаботникиОрганизации;
// сведения о должностных лицах
//лишнее для декларации закомментировано
Перем ИННДиректора;
Перем ИННБухгалтера;
// хранят имена многострочных разделов

Перем мИдГруппы1;
Перем мИдГруппы2;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Настройка св-в листов
Перем мСвойстваРазделовДекларации Экспорт;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;
Перем КолАвтоСтрок;

// хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц;


//хранит массив панелей формы
Перем МассивПанелей;

// хранит код отчета по КНД
Перем мКодОтчета;

Перем мСтараяВерсияФормы;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы;

Перем ЭкспортВДБФ, КаталогДанных;

Перем КодЕДРПОУ Экспорт;
Перем КодКВЕД, ВЭД,НомерРегистрацииПФ,ДатаРегистрации Экспорт;
Перем ФИОДиректора,ФИОГлавБуха Экспорт;

Перем мПечатныеФормы Экспорт;

// Хранит название макета состава показателей
Перем мСоставПоказателей Экспорт;

Перем мПечатаемыеРазделы Экспорт;

Перем ВидПечати;

Перем ТбСхемыАрмЗс;

Перем мСтруктураАвтоЯрлыков;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Нужно вставлять в каждую декларацию, компилировать, делать проверку и удалять не требующиеся функции

// *****************************************************
// Общие стандартные процедуры

////////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////



// ВставитьДополнительнуюСтраницу
// Создает дополнительную страницу многостраничного раздела формы.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//            в табличное поле которой вставляется дополнительная страница.
//
// ВставитьДополнительнуюСтраницу
// Создает дополнительную страницу многостраничного раздела формы.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//            в табличное поле которой вставляется дополнительная страница.
//
Процедура ВставитьДополнительнуюСтраницу( ИмяТекущейСтраницыПанели = Неопределено )
	
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // ВставитьДополнительнуюСтраницу()

// ОбновитьСтруктуруМногостраничныхРазделов
// Обновляет структуру многостраничных разделов формы.
// После обновления структуры выводит в табличный документ
// данные первой страницы из набора страниц.
//
Процедура ОбновитьСтруктуруМногостраничныхРазделов(ИмяСтраницы = Неопределено)
	
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, имяСтраницы);
	
КонецПроцедуры // ОбновитьСтруктуруМногостраничныхРазделов()

// ОткрытьФормуСпискаДопСтраниц
// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
//
Процедура ОткрытьФормуСпискаДопСтраниц()
	
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтотОбъект,ЭтаФорма, "ИндВедомости");
	
КонецПроцедуры // ОткрытьФормуСпискаДопСтраниц()

// ПоказатьСтатикРаздела
//
// Отображает на странице основной панели формы, содержащей многостраничный раздел,
// порядковый номер текущей страницы из набора страниц.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащей многостраничный раздел.
//
Процедура ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели)
	
	РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // ПоказатьСтатикСтраницРаздела()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь)
	
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении
// Вывод необходимого номера страницы
// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
// Шаг                      - число,  номер страницы, на которую необходимо перейти;
// ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
// УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
//
Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)
	
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПолучитьСвойствоРаздела
// Получает из дерево св-в необходимый параметр
// Параметры
// ИмяСтраница - название страницы, для которой необходимо получить св-во
// ИмяСвойства - имя настройки
//
Функция ПолучитьСвойствоРаздела(Знач ИмяСтраницы, Знач ИмяСвойства)
	
	Возврат РегламентированнаяОтчетность.роПолучитьСвойствоРаздела( ЭтаФорма, ИмяСтраницы, ИмяСвойства);
	
КонецФункции // ПолучитьСвойствоРаздела

// СохранитьДанныеМногостраничногоРазделаВактивнойСтранице
// сохраняет данные в актвном листе
// Особенность:
// Процедура только сохраняет данные, не передвигая страница на начальную
// или какую либу другую часть многостраничного раздела
// Используется в следующих частях:
// 1. ОбновитьСтруктуруМногостраничныхРазделов
// 2. ПоказатьСтраницуМногостраничногоРаздела
// 3. ВставитьДополнительнуюСтраницу
// 4. ОткрытьФормуСпискаДопСтраниц
//
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ИмяТекущейСтраницы, ОчищатьРазделЕслиЕстьМногострочность)
	
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницы, ОчищатьРазделЕслиЕстьМногострочность);
	
КонецПроцедуры // СохранитьДанныеМногостраничногоРазделаВактивнойСтранице

// УдалитьДополнительнуюСтраницу
// Удаляет текущую страницу многостраничного раздела формы.
// Программа стандартизации процедур 10.05.2005
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//              в табличном поле которой удаляется дополнительная страница.
//
Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)
	
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УдалитьДополнительнуюСтраницу()

Процедура ЗаполнитьНачальныеНастройки(Макет = "СоставПоказателей") Экспорт
	
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(Макет);
	
	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока16  = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(16, ДопустимаяДлина.Переменная));
	
	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока16  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
			
			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;
		
	КонецЦикла;
	
	ФормироватьСтруктуруСтраницОтчета();
	
	УстановитьСистемуюОбластьПечатиОтчета();
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Функция проверяет вхождение области ячеек табличного документа 
// в многострочный раздел.
//
// Параметры:
//  ТекущаяОбласть - область ячеек табличного документа;
//
// Возвращаемое значение:
//  строка, имя раздела, содержащего искомую область ячеек.
//  В случае, когда область не входит ни в какой многострочный раздел,
//  возвращает Неопределено.
//  актуальна только для случая наличия таких разделов в отчете
//  для декларации - нужна, походе что коррекция не требуется
Функция РазделТекущейОбласти(ИмяСтраницы)
	
	//Если ТекущаяОбласть = Неопределено Тогда
	//	Возврат Неопределено; // отсутствует активная область табличного документа
	//КонецЕсли;
	
	Если (ИмяСтраницы = "СписокЛиц") или (ИмяСтраницы = "СписокЛьготников") Тогда
		Возврат ИмяСтраницы
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // РазделТекущейОбласти()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//  актуально только для отчетов, содержащих многострочные разделы
//  похоже а ее унифицированность
//вернуться с многострочніми разделами - приложения К1/2
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы)
	Перем ТекТабличноеПоле;
	
	Если (ИдГруппы = мИдГруппы1)   Тогда
		ТекТабличноеПоле = мСписокЛиц;
	ИначеЕсли (ИдГруппы = мИдГруппы2) Тогда	
		ТекТабличноеПоле = мСписокЛьготников;
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
// актуально только для отчетов, содержащих многострочные разделы
//  похоже а ее унифицированность
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()
	Перем ИмяГруппы;
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;
	
	Если ИмяТекущейСтраницыПанели = "СписокЛиц" Тогда
		ТекТабличноеПоле = мСписокЛиц;
		ИмяГруппы = мИдГруппы1;
	ИначеЕсли  ИмяТекущейСтраницыПанели = "СписокЛьготников" Тогда
		ТекТабличноеПоле = мСписокЛьготников;
		ИмяГруппы = мИдГруппы2;	
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	ИзмененияПроизошли = Ложь;
	
	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;
	
	Если ИмяПоказателя = "ДатаРождСлиста" Тогда
		мДатаРождСлиста = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДатаДок" Тогда
		мДатаДок = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФизЛицИнд" Тогда
		мФизЛицИнд = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КодПлательщикаРаздел1" Тогда
		мКодПлательщикаРаздел1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОКАТОРаздел1" Тогда
		мОКАТОРаздел1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел1_1" Тогда
		мКБКРаздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел1_2" Тогда
		мКБКРаздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел1_3" Тогда
		мКБКРаздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел1_4" Тогда
		мКБКРаздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес1Раздел1_1" Тогда
		мСуммаМес1Раздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес1Раздел1_2" Тогда
		мСуммаМес1Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес1Раздел1_3" Тогда
		мСуммаМес1Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес1Раздел1_4" Тогда
		мСуммаМес1Раздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес2Раздел1_1" Тогда
		мСуммаМес2Раздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес2Раздел1_2" Тогда
		мСуммаМес2Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес2Раздел1_3" Тогда
		мСуммаМес2Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес2Раздел1_4" Тогда
		мСуммаМес2Раздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес3Раздел1_1" Тогда
		мСуммаМес3Раздел1_1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес3Раздел1_2" Тогда
		мСуммаМес3Раздел1_2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес3Раздел1_3" Тогда
		мСуммаМес3Раздел1_3 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СуммаМес3Раздел1_4" Тогда
		мСуммаМес3Раздел1_4 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;
	
	Возврат ИзмененияПроизошли;
	
КонецФункции // ОбновитьПеременныеМодуля

//Процедура для вывода целых чисел в массив "клеток" в "шапке" и "дне" отчета 
Процедура ЗначениеВКлетку(Знач Значение, Знач Нули, Размер,ИмяПараметра,ТекущаяОбластьМакета)
	Если (Значение <> 0) или (Прав(ИмяПараметра,3) = "Грн") или (Прав(ИмяПараметра,3) = "Коп") Тогда
		Пустышка = ?(Нули = 1, "0", " ");
	Иначе
		Возврат;
	КонецЕсли;
	ЗначСтр = "";
	ЗначСтр = Строка(Значение);
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		ЗначСтр = Формат(Значение, "ЧГ=");
	КонецЕсли;
	ДлинаЗнач = СтрДлина(ЗначСтр);
	Пока ДлинаЗнач < Размер Цикл
		Если (Размер = 27) или (Размер = 25) или (Размер = 18) или (Размер = 16) или (Размер = 15) или (Размер = 17)  Тогда
			ЗначСтр = ЗначСтр + Пустышка;
		Иначе  
			// дозаполним значение пустышками (слева!!!)
			ЗначСтр = Пустышка + ЗначСтр;
		КонецЕсли;
		ДлинаЗнач = ДлинаЗнач + 1;
	КонецЦикла;
	// заполним массив
	Для Инд = 1 По Размер Цикл
		Ном = Размер - Инд + 1;
		ТекущаяОбластьМакета.Параметры[ИмяПараметра + Строка(Ном)] = Сред(ЗначСтр,Инд,1) 
	КонецЦикла;
КонецПроцедуры

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
// унифицирована, используется как при работе с многостраничными разделами, так и при сохранении
// данных отчета
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле,ПризнакВключенияИтоговыхПоказателей) Экспорт
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		//пропускаем рисунки табличного документа
		Если ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ТекущаяОбласть.Защита) и (ПризнакВключенияИтоговыхПоказателей = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция суммирует значения показателя по всему набору страниц многостраничного раздела.
//
// Параметры:
//   ИмяПоказателя        - строка, имя показателя;
//   ИмяПоказателяУсловие - строка, имя показателя, по которому строится условие суммирования;
//   Условие              - булево, накладываемое условие
//   ПарамЗначение        - значение параметра при выполнении условия.
//
// Возвращаемое значение:
//   число, сумма значений искомого показателя по всем страницам многостраничного раздела.
//  акутальна только для отчетов, содержащих многтстраничные разделы, т.е. верный кандидат
//  на удаление в противном случае

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//  унифицирована, редакции не требуется
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		
		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;
			
			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице
			
			МассивТипов = Новый Массив; 
			МассивТипов.Добавить(Тип("Строка"));
			ОписаниеТиповСтрока15  = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(15, ДопустимаяДлина.Переменная));
			
			МассивТипов = Новый Массив; 
			МассивТипов.Добавить(Тип("Строка"));
			ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Число"));
			ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Число"));
			ОписаниеТиповЧисло15   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));
			
			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
			
			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");
			
			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
				
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;
					
					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;
					
					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;
					
					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
					
					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаВариантыЗаполнения;
	
КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;
	
	ЕстьИзменения = Ложь;
	
	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц
	
	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");
	
	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(15, ДопустимаяДлина.Переменная));
	
	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));
	
	ЕстьИзменения = Ложь;
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
			
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку.
				
				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
				
				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
				
				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);
				
				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.
				
				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						
						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;
						
						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,а в текущей
							// версии - отключено. В этом случае удаляем эту ячейку из таблицы пользовательских
							// настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);
							
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()
	
	ЕстьИзменения = Ложь;
	
	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();
	
	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();
	
	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл
		
		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);
			
			ЕстьИзменения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл
		
		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));
			
			ЕстьИзменения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда
		
		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();
		
		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета.Строки Цикл
			
			Если мПользовательскиеНастройкиСтраниц.Строки.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда
				
				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
					
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
					
				КонецЦикла;
				
			КонецЕсли;
			
			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда
				
				Для каждого Строка2 Из Строка.Строки Цикл
					
					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда
						
						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
							
							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла; 
				
			КонецЕсли; 
			
		КонецЦикла;
		
		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц.Строки Цикл
			
			Если мДеревоСтраницОтчета.Строки.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда
				
				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл
		
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();
	
	Возврат ЕстьИзменения;
	
КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура присваивает дополнительным страницам многостраничных разделов
// уникальные имена (идентификаторы).
//

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()
	
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина" );
	
	//  Период в заголовке отчета
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
	
	ИзмШапкаПериода();
	
КонецПроцедуры // ПоказатьПериод()
// Процедура устанавливает границы периода построения отчета.
//
// Параметры:
//  Шаг          - число, количество стандартных периодов, на которое необходимо
//                 сдвигать период построения отчета;
//

// Процедура управляет выводом даты представления отчета в соответствующие
// ячейки табличного документа.
// нужно существенная коррекция в зависимости от формы отчета
Процедура ЗаполнитьДатуВЯчейках() Экспорт
	
	ДатаПодписиРук = "";
	ДатаПодписиБух = "";
	ДатаПодписиУпП = "";
	ДатаПодписиФЛ  = "";
	ДатаПодписиПФЛ = "";
	
	
КонецПроцедуры // ЗаполнитьДатуВЯчейках()

//===========================================
Процедура ИзмШапкаПериода()  
	//дата подачи отчета в деларации и во всех приложниях 
	
КонецПроцедуры 	


// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации()
	
	//сначала все постоянные сведения из справочника "Организации"
	ОргНазв   = Организация.НаименованиеПолное;
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ИННРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","ИННБух");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","НомерРегистрацииПФ");
	СписокПоказателей.Добавить("","КодКВЕД");
	СписокПоказателей.Добавить("","ВЭД");
	СписокПоказателей.Добавить("","ДатаРегистрации");
	
	ФИОДиректора          = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СписокПоказателей).ФИОРук;
	ИННДиректора          = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СписокПоказателей).ИННРук;
	ФИОГлавБуха           = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СписокПоказателей).ФИОБух;
	ИННБухгалтера         = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СписокПоказателей).ИННБух;
	
	КодЕДРПОУ             = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодПоЕДРПОУ;
	НомерРегистрацииПФ    = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).НомерРегистрацииПФ;
	КодКВЕД               = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодКВЕД;
	ВЭД                   = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ВЭД;
	ДатаРегистрации       = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ДатаРегистрации;
	
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		
		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(НСтр("ru='Отчет Персонифицированные формы ПФ: при выводе сумм в гривнях точность не может превышать 2 знака';uk='Звіт Персоніфіковані форми ПФ: при виведенні сум у гривнях точність не може перевищувати 2 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;
  	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		
		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(НСтр("ru='Отчет Персонифицированные формы ПФ: при выводе сумм в тысячах гривень точность не может превышать 3 знака';uk='Звіт Персоніфіковані форми ПФ: при виведенні сум у тисячах гривень точність не може перевищувати 3 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		
		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(НСтр("ru='Отчет Персонифицированные формы ПФ: при выводе сумм в миллионах гривень точность не может превышать 6 знаков';uk='Звіт Персоніфіковані форми ПФ: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;
		
	КонецЕсли;
	
	Сообщить(НСтр("ru='После изменения формата вывода значений, для корректного расчета итогов необходимо перезаполнить отчет!';uk='Після зміни формату виводу значень, для корректного розрахунку підсумків треба перезаполвнити звіт!'"), СтатусСообщения.Внимание);	
	
КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;
	
	//формирование строки формата для присваивания ее полю "Формат" в свойствах ячейки
	//формат зависит от выбранной на форме отчета единицы измерения (представления) его показателей
	//присвоение форма происходит только для тех показателей. для которых установлен признак "Е",
	//т.е. признак денежного формата с регулируемой точностью
	//вообще в макете еще можно задать числовой формат с неизменяемой точностью "Ч", форма строки "С"
	//и даты "Д"
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		мДелитель = 1;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		мДелитель = 1000;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		мДелитель = 1000000;
		
	КонецЕсли;
	
	
	//таблица мТаблицаСоставПоказателей формируется по макету показателейц отчета
	//в модуле самого объекта, т.е. отчета
	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл
		
		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;
		
		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);
		
		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;
		
		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		
		// только для денежных показателей с регулируемой
		Если ТипДанныхПоказателя = "Е" Тогда
			
			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];
			
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			Иначе
				// определяем колво строк многострочного раздела
				// и прменяем процедуру форматирования к данной графе
				// по всем строкам
				
				ИмяГруппы = Лев(ИмяПоказателя, 3);
				
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					Если (ТекТабличноеПоле = мСписокЛиц) Тогда
						ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;")];
					КонецЕсли;
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьФорматВывода()

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку()
	Перем СтруктураГруппы;
	
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	
	Если ИмяГруппы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	
	Если (ТекТабличноеПоле = мСписокЛиц) Тогда
		ИмяПоследнейЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[2].Имя + Формат(КолСтрок,"ЧЦ=4;ЧВН=0;ЧГ=;");
		ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + Формат(КолСтрок,"ЧЦ=4;ЧВН=0;ЧГ=;");
	ИначеЕсли (ТекТабличноеПоле = мСписокЛьготников) Тогда	
		ИмяПоследнейЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[8].Имя + Формат(КолСтрок,"ЧЦ=4;ЧВН=0;ЧГ=;");
		ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + Формат(КолСтрок,"ЧЦ=4;ЧВН=0;ЧГ=;");
	КонецЕсли;
	
	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейкиНиз = ТекТабличноеПоле.Области[ИмяПоследнейЯчейкиПоследнейСтроки];
	НомерНижнЯчейкиОбласти = ОбластьЯчейкиНиз.Низ;
	
	ОбластьЯчейкиВерх = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	НомерВерхЯчейкиОбласти = ОбластьЯчейкиВерх.Верх;
	
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	
	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );
	КолСтрокНов = КолСтрок + 1;
	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл                    
		ИмяКолонки          = Колонка.Имя;
		
		Если (ИмяКолонки <> "ДатаРожд") и (ИмяКолонки <> "Пол") И (ИмяКолонки <> "ДатаПриема") И (ИмяКолонки <> "ДатаУвольнения") Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + Формат(КолСтрок,"ЧЦ=4;ЧВН=0;ЧГ=;");
			ИмяНовОбластиЯчейки = ИмяКолонки + Формат(КолСтрокНов,"ЧЦ=4;ЧВН=0;ЧГ=;");
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// очищаем значения ячеек вставленной области
			Если (ОбластьЯчейки.СодержитЗначение)  Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если	(ИмяГруппы = мИдГруппы1)  Тогда 
		ОбластьТекстовыйНомер = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти,1,НомерНижнЯчейкиНовойОбласти,2);
	ИначеЕсли (ИмяГруппы = мИдГруппы2) Тогда 
		ОбластьТекстовыйНомер = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти,1,НомерНижнЯчейкиНовойОбласти,1);
	КонецЕсли;
	
	ОбластьТекстовыйНомер.Значение = Строка(КолСтрок + 1);
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	Если(ТекТабличноеПоле = мСписокЛиц) Тогда	
		ИмяТекущейОбласти = СтруктураГруппы.Колонки[2].Имя + Формат(КолСтрокНов,"ЧЦ=4;ЧВН=0;ЧГ=;");
	ИначеЕсли (ТекТабличноеПоле = мСписокЛьготников) Тогда	
		ИмяТекущейОбласти = СтруктураГруппы.Колонки[3].Имя + Формат(КолСтрокНов,"ЧЦ=4;ЧВН=0;ЧГ=;");
	КонецЕсли;
	
	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;
	
	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	//	Расчет(ТекТабличноеПоле);
	
	Модифицированность = Истина;
	
КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку(Очистка = Ложь, ЗадаватьВопрос = Истина, ИмяГруппы = Неопределено)
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	Если Не Очистка Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	КонецЕсли;
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить(НСтр("ru='Не выбрана удаляемая строка многострочного раздела.';uk='Не обрано строку багаторядкового розділу, що видаляється'"), СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	Если ЗадаватьВопрос Тогда
		
		Ответ = Вопрос(НСтр("ru='Удалить выбранную строку?"
		"(Внимание! данная операция необратима)';uk='Видалити обраний рядок?"
		"(Увага! дана операція необоротна)'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();
	
	Если Очистка Тогда
		НомУдаляемойСтроки = СтруктураГруппы.Количество();
		Пока НомУдаляемойСтроки > 1 Цикл
			НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля 
			
			Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
				// удаляется добавленная строка
				Если (ТекТабличноеПоле = мСписокЛиц) Тогда
					ИмяПоследнейЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[2].Имя + Формат(СтруктураГруппы.Количество(),"ЧЦ=4;ЧВН=0;ЧГ=;");
					ИмяПервойЯчейкиУдаляемойСтроки    = СтруктураГруппы.Колонки[0].Имя + Формат(СтруктураГруппы.Количество(),"ЧЦ=4;ЧВН=0;ЧГ=;");
				ИначеЕсли (ТекТабличноеПоле = мСписокЛьготников) Тогда
					ИмяПоследнейЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[8].Имя + Формат(СтруктураГруппы.Количество(),"ЧЦ=4;ЧВН=0;ЧГ=;");
					ИмяПервойЯчейкиУдаляемойСтроки    = СтруктураГруппы.Колонки[0].Имя + Формат(СтруктураГруппы.Количество(),"ЧЦ=4;ЧВН=0;ЧГ=;");	
				КонецЕсли;
				
				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейкиВерх = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
				ОбластьЯчейкиНиз  = ТекТабличноеПоле.Области[ИмяПоследнейЯчейкиУдаляемойСтроки];
				
				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейкиВерх.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейкиНиз.Низ;
				
				// Определим область удаляемой строки
				УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
				
				// непосредственно удаляем область строки табличного документа
				ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
				
				КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
				
				// обновим имена ячеек сдвинутых строк
				Если КолвоСдвигаемыхСтрок > 0 Тогда
					
					Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() - 1 Цикл
						
						ТекСтрока = СтруктураГруппы[НСтр-1];
						НСтрНов = НСтр - 1;
						Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
							Если (Колонка.Имя <> "ДатаРожд") И (Колонка.Имя <> "Пол") И (Колонка.Имя <> "ДатаПриема") И (Колонка.Имя <> "ДатаУвольнения") Тогда
								
								ИмяСдвинутойЯчейки    = Колонка.Имя + Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;");
								НовоеИмяСдвинутойЯчейки = Колонка.Имя + Формат(НСтрНов,"ЧЦ=4;ЧВН=0;ЧГ=;");
								
								ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
								ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
								
								Если НЕ(ОбластьСдвинутойЯчейки.СодержитЗначение) Тогда
									// обновляем порядковый номер строки
									СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
									НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
									ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
									
									// обновляем значение элемента таблицы значений
									ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					
				КонецЕсли;
				
				// обновляем структуру многострочного раздела
				СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
				
			Иначе
				// строка не удаляется в форме табличного документа,
				// а должна осуществляться сдвиг строк
				
				// обновляем структуру многострочного раздела
				// методом удаления выбранной строки и добавления пустой строки
				СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
				
				ДобавляемаяСтрока = СтруктураГруппы.Добавить();
				
				// обновляем порядковые номера строк, выводимых в табличный документ
				Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
					Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
						
						НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
						НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
						
						ИмяЯчейки    = КолонкаТаблицы.Имя + Формат(НомерСтрокиВФормеТаблицы,"ЧЦ=4;ЧВН=0;ЧГ=;");
						
						ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
						
						Если НЕ(ОбластьЯчейкиТаблицы.СодержитЗначение) Тогда
							ПервыйНомерВГруппе = 1;
							// обновляем порядковый номер строки
							НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
							СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				// Обновляем экранную форму табличного документа
				ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
				
			КонецЕсли;
			
			// назначим текущей областью таблицы первую редактируемую ячейку
			// удаленной строки, если ее порядковый номер меньше кол-ва строк
			// многострочного раздела, или последней строки раздела в противном случае
			
			// определяем текущую область таблицы
			НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
			
			ИмяТекущейОбласти    = СтруктураГруппы.Колонки[0].Имя + Формат(НомТекущейСтроки,"ЧЦ=4;ЧВН=0;ЧГ=;") +  Сред(СтруктураГруппы.Колонки[0].Имя,4,3);
			
			ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
			
			// установим фокус на поле табличн. документа
			ТекущийЭлемент = ТекТабличноеПоле;
			НомУдаляемойСтроки = СтруктураГруппы.Количество();
		КонецЦикла; //Очистка
		
	Иначе
		
		// номер строки многострочного раздела определим
		// по имени выделенной ячейки
		Попытка
			НомУдаляемойСтроки = Число( Прав( ИмяЯчейки, 4));
		Исключение
			Сообщить(НСтр("ru='Не выбрана удаляемая строка многострочного раздела.';uk='Не обрано строку багаторядкового розділу, що видаляється'"), СтатусСообщения.Внимание);
			Возврат;	
		КонецПопытки;
		//   НомУдаляемойСтроки = СтруктураГруппы.Количество();
		НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
		
		
		Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
			// удаляется добавленная строка
			Если (ТекТабличноеПоле = мСписокЛиц) Тогда
				ИмяПоследнейЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[2].Имя + Формат(НомерСтрокиТаблицы+1,"ЧЦ=4;ЧДЦ=0;ЧН=0000;ЧГ=;ЧВН=;");//Формат(СтруктураГруппы.Количество(),"ЧЦ=4;ЧВН=0;ЧГ=;");
				ИмяПервойЯчейкиУдаляемойСтроки    = СтруктураГруппы.Колонки[0].Имя + Формат(НомерСтрокиТаблицы+1,"ЧЦ=4;ЧДЦ=0;ЧН=0000;ЧГ=;ЧВН=;");;//Формат(СтруктураГруппы.Количество(),"ЧЦ=4;ЧВН=0;ЧГ=;");
			ИначеЕсли (ТекТабличноеПоле = мСписокЛьготников) Тогда
				ИмяПоследнейЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[8].Имя + Формат(НомерСтрокиТаблицы+1,"ЧЦ=4;ЧДЦ=0;ЧН=0000;ЧГ=;ЧВН=;");;//Формат(СтруктураГруппы.Количество(),"ЧЦ=4;ЧВН=0;ЧГ=;");
				ИмяПервойЯчейкиУдаляемойСтроки    = СтруктураГруппы.Колонки[0].Имя + Формат(НомерСтрокиТаблицы+1,"ЧЦ=4;ЧДЦ=0;ЧН=0000;ЧГ=;ЧВН=;");;//Формат(СтруктураГруппы.Количество(),"ЧЦ=4;ЧВН=0;ЧГ=;");	
			КонецЕсли;
			
			// область первой ячейки удаляемой строки многострочного раздела
			ОбластьЯчейкиВерх = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
			ОбластьЯчейкиНиз  = ТекТабличноеПоле.Области[ИмяПоследнейЯчейкиУдаляемойСтроки];
			
			// номера строк удаляемой области
			НомерВерхЯчейкиОбласти = ОбластьЯчейкиВерх.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейкиНиз.Низ;
			
			// Определим область удаляемой строки
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
			
			// непосредственно удаляем область строки табличного документа
			ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
			
			КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
			
			// обновим имена ячеек сдвинутых строк
			Если КолвоСдвигаемыхСтрок > 0 Тогда
				
				Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
					
					//
					// определяем последнюю строку многострочной группы
					КолСтрок = СтруктураГруппы.Количество();
					Если (ТекТабличноеПоле = мСписокЛиц) Тогда
						ИмяПоследнейЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[2].Имя + Формат(НСтр,"ЧЦ=4;ЧДЦ=0;ЧН=0000;ЧГ=;ЧВН=;");
						ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + Формат(НСтр,"ЧЦ=4;ЧДЦ=0;ЧН=0000;ЧГ=;ЧВН=;");
					ИначеЕсли (ТекТабличноеПоле = мСписокЛьготников) Тогда	
						ИмяПоследнейЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[7].Имя + Формат(НСтр,"ЧЦ=4;ЧДЦ=0;ЧН=0000;ЧГ=;ЧВН=;");
						ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + Формат(НСтр,"ЧЦ=4;ЧДЦ=0;ЧН=0000;ЧГ=;ЧВН=;");
					КонецЕсли;
					
					// область первой ячейки последней строки многострочного раздела
					ОбластьЯчейкиНиз = ТекТабличноеПоле.Области[ИмяПоследнейЯчейкиПоследнейСтроки];
					НомерНижнЯчейкиОбласти = ОбластьЯчейкиНиз.Низ;
					
					ОбластьЯчейкиВерх = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
					НомерВерхЯчейкиОбласти = ОбластьЯчейкиВерх.Верх;
					
					СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
					
					// номера строк вставляемой области
					НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти;
					НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти;
					
					Если	(ИмяГруппы = мИдГруппы1)  Тогда 
						ОбластьТекстовыйНомер = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти,1,НомерНижнЯчейкиНовойОбласти,2);
					ИначеЕсли (ИмяГруппы = мИдГруппы2) Тогда 
						ОбластьТекстовыйНомер = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти,1,НомерНижнЯчейкиНовойОбласти,1);
					КонецЕсли;
					
					ОбластьТекстовыйНомер.Значение = ОбластьТекстовыйНомер.Значение - 1;
					//
					
					ТекСтрока = СтруктураГруппы[НСтр-1];
					НСтрНов = НСтр - 1;
					Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
						Если  (Колонка.Имя <> "ДатаРожд")
							и (Колонка.Имя <> "Пол")
							и (Колонка.Имя <> "ДатаПриема")
							и (Колонка.Имя <> "ДатаУвольнения")
							Тогда
							
							ИмяСдвинутойЯчейки    = Колонка.Имя + Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;");
							НовоеИмяСдвинутойЯчейки = Колонка.Имя + Формат(НСтрНов,"ЧЦ=4;ЧВН=0;ЧГ=;");
							
							ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
							ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
							
							Если НЕ(ОбластьСдвинутойЯчейки.СодержитЗначение) Тогда
								// обновляем порядковый номер строки
								СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								
								// обновляем значение элемента таблицы значений
								ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			КонецЕсли;
			
			// обновляем структуру многострочного раздела
			СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
			
		Иначе
			// строка не удаляется в форме табличного документа,
			// а должна осуществляться сдвиг строк
			
			// обновляем структуру многострочного раздела
			// методом удаления выбранной строки и добавления пустой строки
			СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
			
			ДобавляемаяСтрока = СтруктураГруппы.Добавить();
			
			// обновляем порядковые номера строк, выводимых в табличный документ
			Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
				Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
					Если    (КолонкаТаблицы.Имя = "ДатаРожд") 
						ИЛИ (КолонкаТаблицы.Имя = "Пол")
						ИЛИ (КолонкаТаблицы.Имя = "ДатаПриема")
						ИЛИ (КолонкаТаблицы.Имя = "ДатаУвольнения") Тогда
						Продолжить;
					КонецЕсли;
					
					НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
					НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
					
					ИмяЯчейки    = КолонкаТаблицы.Имя + Формат(НомерСтрокиВФормеТаблицы,"ЧЦ=4;ЧВН=0;ЧГ=;");
					
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если НЕ(ОбластьЯчейкиТаблицы.СодержитЗначение) Тогда
						ПервыйНомерВГруппе = 1;
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			// Обновляем экранную форму табличного документа
			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
			
		КонецЕсли;
		
		// назначим текущей областью таблицы первую редактируемую ячейку
		// удаленной строки, если ее порядковый номер меньше кол-ва строк
		// многострочного раздела, или последней строки раздела в противном случае
		
		// определяем текущую область таблицы
		НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
		
		ИмяТекущейОбласти    = СтруктураГруппы.Колонки[0].Имя + Формат(НомТекущейСтроки,"ЧЦ=4;ЧВН=0;ЧГ=;") +  Сред(СтруктураГруппы.Колонки[0].Имя,4,3);
		
		ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
		
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = ТекТабличноеПоле;
		
		//	Расчет(ТекТабличноеПоле);
		
	КонецЕсли; // Если Очистка
	
	Модифицированность = Истина;
	
КонецПроцедуры // УдалитьДополнительнуюСтроку()	

// Обновляет пользовательские настройки при изменении версии формы.
// похоже, что актуальна только для отчетов, в которых присутствуют
// реквизиты, с помощью которых пользователь может сам корректировать
// формат вывода для каждого конретного показателя (с помощью наличия соотв реквизитов на форме
// отчета, указывать, можно ли заполнять автоматом, а также ввод суммы корректировки), 
// пока такой сервис был доступен только для отчетов по МСФО 
Процедура ОбновитьПользовательскиеНастройки(СписокСохранения)
	
	Сообщить(НСтр("ru='Измененилась версия формы отчета."
	"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
	"Виконується відновлення параметрів користувача.'"), СтатусСообщения.Информация);
	
	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();
	
	ВерсияФормы = СписокСохранения.ВерсияФормы;
	Если ВерсияФормы = "03/07/2004" Тогда
		
		Если мДеревоСтраницОтчета.Колонки.Найти("ВыгрузитьСтраницу") = Неопределено Тогда
		
			мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1));		
		
		КонецЕсли;
		
		Если мДеревоСтраницОтчета.Колонки.Найти("НеДоступностьВыбораПечати") = Неопределено Тогда
		
			мДеревоСтраницОтчета.Колонки.Добавить("НеДоступностьВыбораПечати",  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1));		
	
			СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
			СтрокаУровня1.ИмяСтраницы              = "ОписаниеПакета";
			СтрокаУровня1.Представление            = НСтр("ru = 'Описание пакета (бланк)'; uk = 'Опис пакета (бланк)'");
			СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаОписаниеПакета";
			СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
			СтрокаУровня1.ВыводНаПечать            = 0;
			СтрокаУровня1.ПоказатьСтраницу         = 1;
			СтрокаУровня1.НеДоступностьВыбораПечати= 1;
			
			СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
			СтрокаУровня1.ИмяСтраницы              = "Ярлык";
			СтрокаУровня1.Представление            = НСтр("ru = 'Ярлык пачки (бланк)'; uk = 'Ярлик пачки (бланк)'");
			СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЯрлык";
			СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
			СтрокаУровня1.ВыводНаПечать            = 0;
			СтрокаУровня1.ПоказатьСтраницу         = 1;
			СтрокаУровня1.НеДоступностьВыбораПечати= 1;
		
		КонецЕсли;
			
		СписокСохранения.ВерсияФормы = "01/06/2008";
		Модифицированность = Истина;
		
	КонецЕсли;
	
	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();
	
	//ВерсияФормы = СписокСохранения.ВерсияФормы;
	//Если ВерсияФормы = "01/06/2008" Тогда
	//
	//	СписокСохранения.ВерсияФормы = "../../...."
	//КонецЕсли;
	
	Если Модифицированность ИЛИ ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;
		
		Сообщить(НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Відновлення параметрів користувача успішно завершене!'"));
		
	Иначе
		
		Сообщить(НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі параметрів користувача не виявлені!'"));
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПользовательскиеНастройки()

Процедура ДополнитьСтруктураМногострочныхРазделов()
		
	ФизическиеЛица = Справочники.ФизическиеЛица;

	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			
			ИмяГруппы 	    = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			
			Количество = СтруктураГруппы.Количество();	
			
			Если ИмяГруппы = МиДГруппы1 Тогда
				
				Для НСтр = 1 По Количество Цикл
					ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
					Значение = ТекСтрокаТаблицы.ИНН;
					Если Значение = "" Тогда 
						Продолжить;
					Иначе
						Запрос = Новый Запрос;
						Запрос.Текст="ВЫБРАТЬ
						|	ФизическиеЛица.Пол,
						|	ФизическиеЛица.ДатаРождения
						|ИЗ
						|	Справочник.ФизическиеЛица КАК ФизическиеЛица
						|ГДЕ
						|	ФизическиеЛица.КодПоДРФО = &Парам"; 
						Запрос.УстановитьПараметр("Парам",Значение);
						Выборка =  Запрос.Выполнить().Выгрузить();
						Если Выборка.Количество()>0 Тогда
							Для НомерСтр = 1 По  Выборка.Количество()Цикл 
								Пол = Выборка[НомерСтр-1].Пол;
								Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда 
									ТекСтрокаТаблицы.Пол = "Чоловічий" ;
								ИначеЕсли Пол= Перечисления.ПолФизическихЛиц.Женский Тогда
									ТекСтрокаТаблицы.Пол = "Жіночий" ;  
								КонецЕсли; 
								ТекСтрокаТаблицы.ДатаРожд = Выборка[НомерСтр-1].ДатаРождения;
							КонецЦикла;
						Иначе
							Сообщить(НСтр("ru='Неправильно введен ИНН сотрудника!!!Такого ИННа нет в списке сотрудников';uk='Не вірно введен ІНН співробітника!!! Такого ІННа немає у списку співробітників'" + Значение), СтатусСообщения.Внимание);
						КонецЕсли;
						
						Запрос = Новый Запрос;
						
						Запрос.Текст = "ВЫБРАТЬ
						|	РаботникиОрганизаций.Период КАК Период ,
						|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
						|	РаботникиОрганизаций.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния
						|ИЗ
						|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
						|  ГДЕ
						|	РаботникиОрганизаций.Сотрудник.ФизЛицо.КодПоДРФО = &ИНН И РаботникиОрганизаций.Сотрудник.ВидЗанятости<>&Парам";
						
						
						Запрос.УстановитьПараметр("ИНН",Значение);
						Запрос.УстановитьПараметр("Парам",Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
						
						Выборка = Запрос.Выполнить().Выбрать();
						
						Пока  Выборка.Следующий()  Цикл
							Если Выборка.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
								ДатаУвольнения= Выборка.Период;
								ТекСтрокаТаблицы.ДатаУвольнения = ДатаУвольнения;
							Конецесли;
							
							Если Выборка.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу Тогда
								ДатаПриема = Выборка.Период;
								ТекСтрокаТаблицы.ДатаПриема = ДатаПриема;
							КонецЕсли;                               
							Сотрудник = Выборка.Сотрудник;
						КонецЦикла;	   
						
					КонецЕсли;					
				КонецЦикла;
				
			КонецЕсли;					
		КонецЦикла;
	
КонецПроцедуры


// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
// похоже унифицирована и актуальна только при наличии таких разделов
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;
		
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
		
		Количество = СтруктураГруппы.Количество();	
		
		Для НСтр = 1 По Количество Цикл
			
			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
			
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				ИмяКолонки    = Колонка.Имя;
				Если  (ИмяКолонки <> "ДатаРожд") 
					И (ИмяКолонки <> "Пол") 
					И (ИмяКолонки <> "ДатаПриема") 
					И (ИмяКолонки <> "ДатаУвольнения") Тогда	
					
					ИмяЯчейки    = ИмяКолонки + Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;");
					
					ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;
					
					ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
					
				КонецЕсли;
			КонецЦикла; 						     		
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Открывает форму документа ФормаНастройкиСтраниц с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//  унифицирована и актуальна только при наличии таких разделов
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	ФормаНастройкиСтраниц = ПолучитьФорму("ФормаНастройкиСтраниц", ЭтаФорма, "дляВыбораСтраницОтчета");
	
	Если ФормаНастройкиСтраниц.Открыта() Тогда
		ФормаНастройкиСтраниц.Активизировать();
		Если Вопрос(НСтр("ru='Предыдущая операция выбора листов не завершена."
			"Завершить?';uk='Попередня операція вибору аркушів не завершена."
			"Завершити?'"),РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиСтраниц.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	мДеревоВыбранныхСтраниц = "";
	
	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();
	
	// удалим из списка страницы, которые формируются автоматически
	ФормаНастройкиСтраниц.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиСтраниц.мВариантВыбора          = ВариантВыбора;
	
	ВыбранноеЗначение = ФормаНастройкиСтраниц.ОткрытьМодально();
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = ВыбранноеЗначение;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

Процедура РазбитьПечатнуюФорму(ПечФорма,ИмяФормы)
	
	УчитыватьАвтомасштаб = (Сред(ИмяФормы,1,6) = "ІНДАНІ");

	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать 	 = Ложь;
	ПустойТаблДок.ЧерноБелыйПросмотр = Ложь;
	ПослВерх = 1;
	
	Сч = 0;
	Пока Сч < ПечФорма.ВысотаТаблицы Цикл
		 Сч = Сч + 1;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Ложь;
			НовТаблДок.ЧерноБелыйПросмотр = Ложь;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч + 1;
		КонецЕсли;

		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			
			// проверим, не должна ли предпоследняя строка печататься вместе со текущей ("не влезшей") строкой.
			// если так, то "откатимся" вверх
			Пока ПослВерх < Сч-1 И ПечФорма.ПолучитьОбласть(Сч-1, , Сч-1, ).Область().ВместеСоСледующим Цикл
			  Сч = Сч - 1;
			КонецЦикла; 
			
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Ложь;
			НовТаблДок.ЧерноБелыйПросмотр = Ложь;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		НовТаблДок = Новый ТабличныйДокумент();
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Ложь;
		НовТаблДок.ЧерноБелыйПросмотр = Ложь;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
// унифицирована, но актуально только для отчетов с наличием таких многостраничных разделов

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//  процедура унифицирована
Процедура ВывестиНаПечатьЛист(СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем ИНН, Фамилия, Имя, Отчество;
	Перем СтруктураГруппы;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	ОбновитьСтруктуруМногострочныхРазделов();
	
	Если ИмяТабличногоПоля = "ПолеТабличногоДокументаСписокЛиц" Тогда
		
		ТабДокумент  = Новый ТабличныйДокумент;
		Макет        = ПолучитьМакет("СписокРаботников");
		
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы);

		НомерЗаписиНаЛисте = 1;
		НомерЛистаВПачке   = 1;
		
		КоличествоСтрокКратноеСтранице = ?(СтруктураГруппы.Количество()%10 = 0, СтруктураГруппы.Количество(), (Цел(СтруктураГруппы.Количество()/10)+1)*10);
		
		
		Для НСтр = 1 По КоличествоСтрокКратноеСтранице Цикл
			
			Если НомерЗаписиНаЛисте = 11 Тогда
				НомерЗаписиНаЛисте = 1;
				
				// увеличим номер листа в пачке
				Если НомерЛистаВПачке = 4 Тогда
				    НомерЛистаВПачке = 1;
				Иначе
					НомерЛистаВПачке = НомерЛистаВПачке + 1;
				КонецЕсли;		
				
			КонецЕсли;
			
			Если НомерЗаписиНаЛисте = 1 Тогда
				
				Если НомерЛистаВПачке = 1 Тогда
					
					// выведем группу листов.
					Если НСтр > 1 Тогда
						РазбитьПечатнуюФорму(ТабДокумент,"СП (список робітників)");
						РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
						ТабДокумент  = Новый ТабличныйДокумент;
					КонецЕсли;
					
					// сформируем Ярлык					
					Если ЯрлыкиФормироватьАвтоматически Тогда
						
						СтрокаАвто = мСтруктураАвтоЯрлыков.СтруктураЯрлыка;
						
						ИмяСтраницыПанели  = СтрокаАвто.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаАвто.Представление;
						ОриентацияЛиста    = СтрокаАвто.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаАвто.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаАвто.ИмяОбластиТабличногоПоля;
						
						СтруктураПараметров = Новый Структура();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          СтруктураПараметровЛиста.ВидПечати);
						
						
						ЗначенияПараметровЛиста = Новый Структура();
						ЗначенияПараметровЛиста.Вставить("КодОтправителя",		мСписокЛиц.Области.КодСтрахователя.Значение);
						ЗначенияПараметровЛиста.Вставить("КодФилиала",			мСписокЛиц.Области.КодФилиала.Значение);
						ЗначенияПараметровЛиста.Вставить("НазваниеОтправителя", мСписокЛиц.Области.Организация.Значение);
						
						ЗначенияПараметровЛиста.Вставить("СП", "X");
						
						ЗначенияПараметровЛиста.Вставить("НомерПачкиОтправителя", мСтруктураАвтоЯрлыков.текНомерПачки);
						
						КоличествоЗаписейВПачке = МИН(40, СтруктураГруппы.Количество() - НСтр + 1);
						КоличествоЛистовВПачке  = Цел(КоличествоЗаписейВПачке/10) + ?(КоличествоЗаписейВПачке%10 = 0, 0, 1);
						
						ЗначенияПараметровЛиста.Вставить("КолЗаписейВПачке", КоличествоЗаписейВПачке);
						ЗначенияПараметровЛиста.Вставить("КолЛистовВПачке",  КоличествоЛистовВПачке);
						
						ЗначенияПараметровЛиста.Вставить("КодОтветстЗаФормир", ИННБухгалтера);
						ЗначенияПараметровЛиста.Вставить("ФамОтвтствФормир",   ФИОГлавБуха);								
						
						ЗначенияПараметровЛиста.Вставить("ДД",	мСписокЛиц.Области.ДД.Значение);
						ЗначенияПараметровЛиста.Вставить("ММ",	мСписокЛиц.Области.ММ.Значение);
						ЗначенияПараметровЛиста.Вставить("ГГГГ",мСписокЛиц.Области.ГГГГ.Значение);
						
						СтруктураПараметров.Вставить("ЗначенияПараметровЛиста", ЗначенияПараметровЛиста);
						
						ВывестиНаПечатьЛист(СтруктураПараметров);

					КонецЕсли;
					
					// увеличим номер пачки
					мСтруктураАвтоЯрлыков.текНомерПачки = мСтруктураАвтоЯрлыков.текНомерПачки + 1;
					
				КонецЕсли;				
				
				// выведем шапку
				ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
				
				ЗначениеВКлетку(мСписокЛиц.Области.КодСтрахователя.Значение, 0, 12,"КодОтправителя",ОбластьМакета);
				ЗначениеВКлетку(мСписокЛиц.Области.КодФилиала.Значение, 0, 2,"КодФилиала",ОбластьМакета);
				ОбластьМакета.Параметры.Организация = мСписокЛиц.Области.Организация.Значение; 
				
				// наконец вывод на печать именованной области макета
				ТабДокумент.Вывести(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("ИменаСтолбцов");
				ТабДокумент.Вывести(ОбластьМакета);

			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.НомЗап = НомерЗаписиНаЛисте; 
			
			Если НСтр <= СтруктураГруппы.Количество() Тогда
				
				ИмяНужнойЯчейки = СтруктураГруппы.Колонки[0].Имя + Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;");
				ИНН = Формат(мСписокЛиц.Области[ИмяНужнойЯчейки].Значение, "ЧГ=");
				ЗначениеВКлетку(ИНН, 0, 10,"ИНН",ОбластьМакета);
				
				ИмяНужнойЯчейки = СтруктураГруппы.Колонки[1].Имя + Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;");
				Фамилия = мСписокЛиц.Области[ИмяНужнойЯчейки].Значение;
				ЗначениеВКлетку(Фамилия, 0, 25,"ФамСп",ОбластьМакета);
				
				ИмяНужнойЯчейки = СтруктураГруппы.Колонки[2].Имя + Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;");
				Имя = мСписокЛиц.Области[ИмяНужнойЯчейки].Значение;
				ЗначениеВКлетку(Имя, 0, 16,"ИмяСп",ОбластьМакета);
				
				ИмяНужнойЯчейки = СтруктураГруппы.Колонки[3].Имя + Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;");
				Отчество = мСписокЛиц.Области[ИмяНужнойЯчейки].Значение;
				ЗначениеВКлетку(Отчество, 0, 18,"ОтчСп",ОбластьМакета);
				
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			Если НомерЗаписиНаЛисте = 10 Тогда
				// выведем Дно
				ОбластьМакета = Макет.ПолучитьОбласть("Дно");
				
				ЗначениеВКлетку(?(НСтр > СтруктураГруппы.Количество(), СтруктураГруппы.Количество()%10, НомерЗаписиНаЛисте), 1, 2,"КвоЗап",ОбластьМакета);
				ЗначениеВКлетку(НомерЛистаВПачке, 1, 3,"НомЛис",ОбластьМакета);
				ЗначениеВКлетку(мСтруктураАвтоЯрлыков.текНомерПачки - 1, 1, 6,"РегНомерПачкиРаботодат",ОбластьМакета);
				
				ЗначениеВКлетку(мСписокЛиц.Области.ДД.Значение, 1, 2,"ДатДен",ОбластьМакета);
				ЗначениеВКлетку(мСписокЛиц.Области.ММ.Значение, 1, 2,"ДатМес",ОбластьМакета);
				ЗначениеВКлетку(мСписокЛиц.Области.ГГГГ.Значение, 1, 4,"ДатГод",ОбластьМакета);
				
				ОбластьМакета.Параметры.Директор = мСписокЛиц.Области.ОргДиректор.Значение;
				
				ТабДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			НомерЗаписиНаЛисте = НомерЗаписиНаЛисте + 1;
			
		КонецЦикла;			
		
		РазбитьПечатнуюФорму(ТабДокумент,"СП (список робітників)");
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
		
	ИначеЕсли ИмяТабличногоПоля = "ПолеТабличногоДокументаСписокЛьготников" Тогда	
		
		ТабДокумент  = Новый ТабличныйДокумент;
		Макет        = ПолучитьМакет("СписокЛьготников");
		
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2, СтруктураГруппы);

		НомерЗаписиНаЛисте = 1;
		НомерЛистаВПачке   = 1;
		
		КоличествоСтрокКратноеСтранице = ?(СтруктураГруппы.Количество()%12 = 0, СтруктураГруппы.Количество(), (Цел(СтруктураГруппы.Количество()/12)+1)*12);
		
		Для НСтр = 1 По КоличествоСтрокКратноеСтранице Цикл
			
			Если НомерЗаписиНаЛисте = 13 Тогда
				НомерЗаписиНаЛисте = 1;
				
				// увеличим номер листа в пачке
				Если НомерЛистаВПачке = 4 Тогда
				    НомерЛистаВПачке = 1;
				Иначе
					НомерЛистаВПачке = НомерЛистаВПачке + 1;
				КонецЕсли;		
				
			КонецЕсли;
			
			Если НомерЗаписиНаЛисте = 1 Тогда
				
				Если НомерЛистаВПачке = 1 Тогда
					
					// выведем группу листов.
					Если НСтр > 1 Тогда
						РазбитьПечатнуюФорму(ТабДокумент,"БСВ (список пільговиків)");
						РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
						ТабДокумент  = Новый ТабличныйДокумент;
					КонецЕсли;
					
					// сформируем Ярлык					
					Если ЯрлыкиФормироватьАвтоматически Тогда
						
						СтрокаАвто = мСтруктураАвтоЯрлыков.СтруктураЯрлыка;
						
						ИмяСтраницыПанели  = СтрокаАвто.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаАвто.Представление;
						ОриентацияЛиста    = СтрокаАвто.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаАвто.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаАвто.ИмяОбластиТабличногоПоля;
						
						СтруктураПараметров = Новый Структура();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          СтруктураПараметровЛиста.ВидПечати);
						
						
						ЗначенияПараметровЛиста = Новый Структура();
						ЗначенияПараметровЛиста.Вставить("КодОтправителя",		мСписокЛиц.Области.КодСтрахователя.Значение);
						ЗначенияПараметровЛиста.Вставить("КодФилиала",			мСписокЛиц.Области.КодФилиала.Значение);
						ЗначенияПараметровЛиста.Вставить("НазваниеОтправителя", мСписокЛиц.Области.Организация.Значение);
						
						ЗначенияПараметровЛиста.Вставить("БСВ", "X");
						
						ЗначенияПараметровЛиста.Вставить("НомерПачкиОтправителя", мСтруктураАвтоЯрлыков.текНомерПачки);
						
						КоличествоЗаписейВПачке = МИН(48, СтруктураГруппы.Количество() - НСтр + 1);
						КоличествоЛистовВПачке  = Цел(КоличествоЗаписейВПачке/12) + ?(КоличествоЗаписейВПачке%12 = 0, 0, 1);
						
						ЗначенияПараметровЛиста.Вставить("КолЗаписейВПачке", КоличествоЗаписейВПачке);
						ЗначенияПараметровЛиста.Вставить("КолЛистовВПачке",  КоличествоЛистовВПачке);
						
						ЗначенияПараметровЛиста.Вставить("КодОтветстЗаФормир", ИННБухгалтера);
						ЗначенияПараметровЛиста.Вставить("ФамОтвтствФормир",   ФИОГлавБуха);								
						
						ЗначенияПараметровЛиста.Вставить("ДД",	мСписокЛиц.Области.ДД.Значение);
						ЗначенияПараметровЛиста.Вставить("ММ",	мСписокЛиц.Области.ММ.Значение);
						ЗначенияПараметровЛиста.Вставить("ГГГГ",мСписокЛиц.Области.ГГГГ.Значение);
						
						СтруктураПараметров.Вставить("ЗначенияПараметровЛиста", ЗначенияПараметровЛиста);
						
						ВывестиНаПечатьЛист(СтруктураПараметров);

					КонецЕсли;
					
					// увеличим номер пачки
					мСтруктураАвтоЯрлыков.текНомерПачки = мСтруктураАвтоЯрлыков.текНомерПачки + 1;
				КонецЕсли;				
				
				// выведем шапку
				ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
				
				ОбластьМакета.Параметры.Н = мСписокЛьготников.Области.Н.Значение;
				ОбластьМакета.Параметры.К = мСписокЛьготников.Области.К.Значение;
				ОбластьМакета.Параметры.О = мСписокЛьготников.Области.О.Значение;
				ОбластьМакета.Параметры.НП = мСписокЛьготников.Области.НП.Значение;
				
				ЗначениеВКлетку(мСписокЛьготников.Области.КодСтрахователя.Значение, 0, 12,"КодОтправителя",ОбластьМакета);
				ЗначениеВКлетку(мСписокЛьготников.Области.КодФилиала.Значение, 0, 2,"КодФилиала",ОбластьМакета);
				ЗначениеВКлетку(мСписокЛьготников.Области.ГодОтчета.Значение, 0, 4,"ГГ",ОбластьМакета);
				ОбластьМакета.Параметры.Организация = мСписокЛьготников.Области.Организация.Значение; 
				
				// наконец вывод на печать именованной области макета
				ТабДокумент.Вывести(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("ИменаСтолбцов");
				ТабДокумент.Вывести(ОбластьМакета);

			КонецЕсли;
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.НомЗап = НомерЗаписиНаЛисте; 
			Если НСтр <= СтруктураГруппы.Количество() Тогда
				ИмяНужнойЯчейки = "ИНН" + Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;");
				ИНН = Формат(мСписокЛьготников.Области[ИмяНужнойЯчейки].Значение, "ЧГ=");
				ЗначениеВКлетку(ИНН, 0, 10,"ИНН",ОбластьМакета);
				
				ИмяНужнойЯчейки = "Закон" + Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;");
				Закон = мСписокЛьготников.Области[ИмяНужнойЯчейки].Значение;
				ЗначениеВКлетку(Закон, 0, 3,"Закон",ОбластьМакета);
				
				ИмяНужнойЯчейки = "Статья" + Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;");
				Статья = мСписокЛьготников.Области[ИмяНужнойЯчейки].Значение;
				ЗначениеВКлетку(Статья, 0, 3,"Статья",ОбластьМакета);
				
				ИмяНужнойЯчейки = "СтажМес" + Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;");
				СтажМес = мСписокЛьготников.Области[ИмяНужнойЯчейки].Значение;
				ЗначениеВКлетку(СтажМес, 0, 2,"СтажМес",ОбластьМакета);
				
				ИмяНужнойЯчейки = "СтажДень" + Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;");
				СтажДень = мСписокЛьготников.Области[ИмяНужнойЯчейки].Значение;
				ЗначениеВКлетку(СтажДень, 0, 2,"СтажДень",ОбластьМакета);
				
				ОбластьМакета.Параметры.Пункт   = мСписокЛьготников.Области["Пункт"+Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;")].Значение;
				ОбластьМакета.Параметры.Часть   = мСписокЛьготников.Области["Часть"+Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;")].Значение;
				
				ИмяНужнойЯчейки = "Фамилия" + Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;");
				Фамилия = мСписокЛьготников.Области[ИмяНужнойЯчейки].Значение;
				ЗначениеВКлетку(Фамилия, 0, 17,"ФамВед",ОбластьМакета);
				
				ИмяНужнойЯчейки = "Имя" + Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;");
				Имя = мСписокЛьготников.Области[ИмяНужнойЯчейки].Значение;
				ЗначениеВКлетку(Имя, 0, 15,"ИмяВед",ОбластьМакета);
				
				ИмяНужнойЯчейки = "Отчество" + Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;");
				Отчество = мСписокЛьготников.Области[ИмяНужнойЯчейки].Значение;
				ЗначениеВКлетку(Отчество, 0, 17,"ОтчВед",ОбластьМакета);
				
			КонецЕсли;

			ТабДокумент.Вывести(ОбластьМакета);
			
			Если НомерЗаписиНаЛисте = 12 Тогда
				// выведем Дно
				ОбластьМакета = Макет.ПолучитьОбласть("Дно");
				
				ЗначениеВКлетку(?(НСтр > СтруктураГруппы.Количество(), СтруктураГруппы.Количество()%12, НомерЗаписиНаЛисте), 1, 2,"КвоЗап",ОбластьМакета);
				ЗначениеВКлетку(НомерЛистаВПачке, 1, 3,"НомЛис",ОбластьМакета);
				ЗначениеВКлетку(мСтруктураАвтоЯрлыков.текНомерПачки - 1, 1, 6,"РегНомерПачкиРаботодат",ОбластьМакета);
				
				ЗначениеВКлетку(мСписокЛьготников.Области.ДД.Значение, 1, 2,"ДатДен",ОбластьМакета);
				ЗначениеВКлетку(мСписокЛьготников.Области.ММ.Значение, 1, 2,"ДатМес",ОбластьМакета);
				ЗначениеВКлетку(мСписокЛьготников.Области.ГГГГ.Значение, 1, 4,"ДатГод",ОбластьМакета);
				
				ОбластьМакета.Параметры.Директор = мСписокЛьготников.Области.ОргДиректор.Значение;
				
				ТабДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			НомерЗаписиНаЛисте = НомерЗаписиНаЛисте + 1;
			
		КонецЦикла;			
		
		РазбитьПечатнуюФорму(ТабДокумент,"БСВ (список пільговиків)");
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
		
	ИначеЕсли ИмяТабличногоПоля = "ПолеТабличногоДокументаРаботодатель" Тогда	
		
		ТабДокумент  = Новый ТабличныйДокумент;
		Макет        = ПолучитьМакет("Работодатель");
		
		//  По такому образцу заполняем все параметры именованных областей макет
		ОбластьМакета = Макет.ПолучитьОбласть("Работодатель");
		
		ЗначениеВКлетку(мРаботодатель.Области.ЕДРПОУ.Значение, 0, 12,"ОКПО",ОбластьМакета);
		ЗначениеВКлетку(мРаботодатель.Области.КодПФ.Значение, 0, 10,"ПФ4",ОбластьМакета);
		КВЕД = СтрЗаменить(мРаботодатель.Области.КВЕД.Значение, ".", "");
		ЗначениеВКлетку(КВЕД, 0, 5,"КВЕД",ОбластьМакета);
		ЗначениеВКлетку(мРаботодатель.Области.КодФил.Значение, 0, 2,"КодФ",ОбластьМакета);
		
		ОбластьМакета.Параметры.КодКатегорииПлательщика = мРаботодатель.Области.КодКатегории.Значение; 
		
		ОбластьМакета.Параметры.Отрасль = мРаботодатель.Области.ВЭД.Значение;
		
		ОбластьМакета.Параметры.Организация = мРаботодатель.Области.ОргПолное.Значение; 
		ОбластьМакета.Параметры.ОрганизацияСокр = мРаботодатель.Области.ОргСокр.Значение; 
		ОбластьМакета.Параметры.Аббревиатура = мРаботодатель.Области.Аббревиатура.Значение; 
		
		ЗначениеВКлетку(мРаботодатель.Области.Индекс.Значение, 0, 5,"Инд",ОбластьМакета);
		ОбластьМакета.Параметры.Регион = мРаботодатель.Области.Регион.Значение; 
		
		ЗначениеВКлетку(мРаботодатель.Области.КодПФУ.Значение, 0, 5,"ОтдПФУ",ОбластьМакета);
		
		ОбластьМакета.Параметры.Район = мРаботодатель.Области.Район.Значение; 
		ЗначениеВКлетку(мРаботодатель.Области.Пункт.Значение, 0, 15,"НасПункт",ОбластьМакета);
		
		ЗначениеВКлетку(мРаботодатель.Области.Улица.Значение, 0, 15,"Ул",ОбластьМакета);
		
		ЗначениеВКлетку(мРаботодатель.Области.Дом.Значение, 0, 3,"Дом",ОбластьМакета);
		ЗначениеВКлетку(мРаботодатель.Области.Корпус.Значение, 0, 3,"Корп",ОбластьМакета);
		ЗначениеВКлетку(мРаботодатель.Области.Квартира.Значение, 0, 3,"Кварт",ОбластьМакета);
		
		ЗначениеВКлетку(мРаботодатель.Области.Телефон.Значение, 0, 15,"Тел",ОбластьМакета);
		ЗначениеВКлетку(мРаботодатель.Области.Факс.Значение, 0, 15,"Факс",ОбластьМакета);
		ЗначениеВКлетку(мРаботодатель.Области.Инет.Значение, 0, 15,"Интернет",ОбластьМакета);
		
		ОбластьМакета.Параметры.КвоСотрудников = мРаботодатель.Области.ЧислоР.Значение; 
		ОбластьМакета.Параметры.Льг = мРаботодатель.Области.Пр.Значение; 
		
		ОбластьМакета.Параметры.ДД1 = мРаботодатель.Области.ДД1.Значение;
		ОбластьМакета.Параметры.ММ1 = мРаботодатель.Области.ММ1.Значение;
		ОбластьМакета.Параметры.ГГГГ1 = мРаботодатель.Области.ГГГГ1.Значение;
		
		ОбластьМакета.Параметры.Директор = мРаботодатель.Области.Директор.Значение;
		
		ЗначениеВКлетку(мРаботодатель.Области.ДД.Значение, 1, 2,"ДатДен",ОбластьМакета);
		ЗначениеВКлетку(мРаботодатель.Области.ММ.Значение, 1, 2,"ДатМес",ОбластьМакета);
		ЗначениеВКлетку(мРаботодатель.Области.ГГГГ.Значение, 1, 4,"ДатГод",ОбластьМакета);
		
		
		// наконец вывод на печать именованной области макета
		ТабДокумент.Вывести(ОбластьМакета);
		
		РазбитьПечатнуюФорму(ТабДокумент,"Відомості про роботодавця");
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
		
	ИначеЕсли ИмяТабличногоПоля = "ПолеТабличногоДокументаЯрлык" Тогда	
		
		ТабДокумент  = Новый ТабличныйДокумент;
		Макет        = ПолучитьМакет("Ярлык");
		
		// возможно ярлык печатается автоматически. В этом случае
		// данные для заполнения нужно брать из переданных параметров
		// иначе - данные возьмем из табличного поля
		ЗначенияПараметровЛиста = Неопределено;
		ДанныеСтраницы = СобратьДанныеТекущегоТаблПоля(ЭлементыФормы[ИмяТабличногоПоля],Истина);
		СтруктураПараметровЛиста.Свойство("ЗначенияПараметровЛиста", ЗначенияПараметровЛиста);
		Если ЗначенияПараметровЛиста = Неопределено Тогда
			
			ЗначенияПараметровЛиста = ДанныеСтраницы;
			
		Иначе
			
			// добавим в переданную структур все упущенные параметры (пустые)
			Для каждого Параметр Из ДанныеСтраницы Цикл
				Если НЕ ЗначенияПараметровЛиста.Свойство(Параметр.Ключ) Тогда
					ЗначенияПараметровЛиста.Вставить(Параметр.Ключ);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		//  По такому образцу заполняем все параметры именованных областей макет
		ОбластьМакета = Макет.ПолучитьОбласть("Ярлык");
		
		ЗначениеВКлетку(ЗначенияПараметровЛиста.КодОтправителя, 0, 12,"КодОтправителя",ОбластьМакета);
		ЗначениеВКлетку(ЗначенияПараметровЛиста.КодФилиала, 0, 2,"КодФилиала",ОбластьМакета);
		
		ОбластьМакета.Параметры.НазваниеОтправителя = ЗначенияПараметровЛиста.НазваниеОтправителя;
		
		ОбластьМакета.Параметры.СП 		= ЗначенияПараметровЛиста.СП; 
		ОбластьМакета.Параметры.СПП 	= ЗначенияПараметровЛиста.СПП; 
		ОбластьМакета.Параметры.ИНДАНИ 	= ЗначенияПараметровЛиста.ИНДАНИ; 
		ОбластьМакета.Параметры.БСВ 	= ЗначенияПараметровЛиста.БСВ; 
		ОбластьМакета.Параметры.АНКЕТА 	= ЗначенияПараметровЛиста.АНКЕТА; 
		
		Если ЗначениеЗаполнено(ЗначенияПараметровЛиста.ИНДАНИ) Тогда
		
			ЗначениеВКлетку(Цел(ЗначенияПараметровЛиста.НачислГрн), 0, 7,"НачислГрн",ОбластьМакета);
			ЗначениеВКлетку((ЗначенияПараметровЛиста.НачислГрн - Цел(ЗначенияПараметровЛиста.НачислГрн))*100, 1, 2,"НачислКоп",ОбластьМакета);
			ЗначениеВКлетку(Цел(ЗначенияПараметровЛиста.ОтчислГрн), 0, 7,"ОтчислГрн",ОбластьМакета);
			ЗначениеВКлетку((ЗначенияПараметровЛиста.ОтчислГрн - Цел(ЗначенияПараметровЛиста.ОтчислГрн))*100, 1, 2,"ОтчислКоп",ОбластьМакета);
			
			Если ЗначенияПараметровЛиста.БольГрн > 0 Тогда
				ЗначениеВКлетку(Цел(ЗначенияПараметровЛиста.БольГрн),   0, 7,"БольГрн",ОбластьМакета);
				ЗначениеВКлетку((ЗначенияПараметровЛиста.БольГрн - Цел(ЗначенияПараметровЛиста.БольГрн))*100,   1, 2,"БольКоп",ОбластьМакета);
			КонецЕсли;
			
			ЗначениеВКлетку(Цел(ЗначенияПараметровЛиста.ИтогГрн),   0, 10,"ИтогГрн",ОбластьМакета);
			ЗначениеВКлетку((ЗначенияПараметровЛиста.ИтогГрн - Цел(ЗначенияПараметровЛиста.ИтогГрн))*100,   1,  2,"ИтогКоп",ОбластьМакета);
			ЗначениеВКлетку(Цел(ЗначенияПараметровЛиста.БазаГрн),   0, 10,"БазаГрн",ОбластьМакета);
			ЗначениеВКлетку((ЗначенияПараметровЛиста.БазаГрн - Цел(ЗначенияПараметровЛиста.БазаГрн))*100,   1,  2,"БазаКоп",ОбластьМакета);
			
		КонецЕсли;

		ЗначениеВКлетку(ЗначенияПараметровЛиста.НомерПачкиОтправителя, 0, 6,"НомерПачкиОтправителя",ОбластьМакета);           
		ЗначениеВКлетку(ЗначенияПараметровЛиста.КолЗаписейВПачке,	   0, 3,"КолЗаписейВПачке",ОбластьМакета);           
		ЗначениеВКлетку(ЗначенияПараметровЛиста.КолЛистовВПачке, 	   0, 2,"КолЛистовВПачке",ОбластьМакета);           
		
		ЗначениеВКлетку(ЗначенияПараметровЛиста.КодОтветстЗаФормир,    0, 10,"КодОтветстЗаФормир",ОбластьМакета);           
		ОбластьМакета.Параметры.ФамОтвтствФормир = ЗначенияПараметровЛиста.ФамОтвтствФормир;

		ЗначениеВКлетку(ЗначенияПараметровЛиста.ДД, 1, 2,"День",ОбластьМакета);
		ЗначениеВКлетку(ЗначенияПараметровЛиста.ММ, 1, 2,"Месяц",ОбластьМакета);
		ЗначениеВКлетку(ЗначенияПараметровЛиста.ГГГГ, 1, 4,"Год",ОбластьМакета);
		
		// наконец вывод на печать именованной области макета
		ТабДокумент.Вывести(ОбластьМакета);
		
		РазбитьПечатнуюФорму(ТабДокумент,"Ярлик");
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);	
		
	ИначеЕсли ИмяТабличногоПоля = "ПолеТабличногоДокументаОписаниеПакета" Тогда	
		
		ТабДокумент  = Новый ТабличныйДокумент;
		Макет        = ПолучитьМакет("ОписаниеПакета");
		
		// возможно ярлык печатается автоматически. В этом случае
		// данные для заполнения нужно брать из переданных параметров
		// иначе - данные возьмем из табличного поля
		ЗначенияПараметровЛиста = Неопределено;
		ДанныеСтраницы = СобратьДанныеТекущегоТаблПоля(ЭлементыФормы[ИмяТабличногоПоля],Истина);
		//СтруктураПараметровЛиста.Свойство("ЗначенияПараметровЛиста", ЗначенияПараметровЛиста);
		//Если ЗначенияПараметровЛиста = Неопределено Тогда
		//	
		ЗначенияПараметровЛиста = ДанныеСтраницы;
		//	
		//Иначе
		//	
		//	// добавим в переданную структур все упущенные параметры (пустые)
		//	Для каждого Параметр Из ДанныеСтраницы Цикл
		//		Если НЕ ЗначенияПараметровЛиста.Свойство(Параметр.Ключ) Тогда
		//			ЗначенияПараметровЛиста.Вставить(Параметр.Ключ);
		//		КонецЕсли;
		//	КонецЦикла;
		//	
		//КонецЕсли;
		
		// два экземпляра!
		Для Сч = 1 По 2 Цикл
			
			//  По такому образцу заполняем все параметры именованных областей макет
			ОбластьМакета = Макет.ПолучитьОбласть("ОписаниеПакета");
			
			Если Сч = 1 Тогда
			     ОбластьМакета.Параметры.ЭкземплярПФ = "X";
			Иначе	
			     ОбластьМакета.Параметры.ЭкземплярОрг = "X";
			КонецЕсли;
			
			ЗначениеВКлетку(ЗначенияПараметровЛиста.КодОтправителя, 0, 12,"КодОтправителя",ОбластьМакета);
			ЗначениеВКлетку(ЗначенияПараметровЛиста.КодФилиала, 0, 2,"КодФилиала",ОбластьМакета);
			
			ЗначениеВКлетку(Лев(ЗначенияПараметровЛиста.НазваниеОтправителя + "                                ", 33),0, 33,"НазваниеОтправителя",ОбластьМакета); 
			
			Если ЗначениеЗаполнено(ЗначенияПараметровЛиста.КолПачекИнд)
				И ЗначенияПараметровЛиста.КолПачекИнд > 0 Тогда
			
				ЗначениеВКлетку(Цел(ЗначенияПараметровЛиста.НачислГрн), 0, 7,"НачислГрн",ОбластьМакета);
				ЗначениеВКлетку((ЗначенияПараметровЛиста.НачислГрн - Цел(ЗначенияПараметровЛиста.НачислГрн))*100, 1, 2,"НачислКоп",ОбластьМакета);
				ЗначениеВКлетку(Цел(ЗначенияПараметровЛиста.ОтчислГрн), 0, 7,"ОтчислГрн",ОбластьМакета);
				ЗначениеВКлетку((ЗначенияПараметровЛиста.ОтчислГрн - Цел(ЗначенияПараметровЛиста.ОтчислГрн))*100, 1, 2,"ОтчислКоп",ОбластьМакета);
				Если ЗначенияПараметровЛиста.БольГрн > 0 Тогда
					ЗначениеВКлетку(Цел(ЗначенияПараметровЛиста.БольГрн),   0, 7,"БольГрн",ОбластьМакета);
					ЗначениеВКлетку((ЗначенияПараметровЛиста.БольГрн - Цел(ЗначенияПараметровЛиста.БольГрн))*100,   1, 2,"БольКоп",ОбластьМакета);
				КонецЕсли;
				ЗначениеВКлетку(Цел(ЗначенияПараметровЛиста.ИтогГрн),   0, 10,"ИтогГрн",ОбластьМакета);
				ЗначениеВКлетку((ЗначенияПараметровЛиста.ИтогГрн - Цел(ЗначенияПараметровЛиста.ИтогГрн))*100,   1,  2,"ИтогКоп",ОбластьМакета);
				ЗначениеВКлетку(Цел(ЗначенияПараметровЛиста.БазаГрн),   0, 10,"БазаГрн",ОбластьМакета);
				ЗначениеВКлетку((ЗначенияПараметровЛиста.БазаГрн - Цел(ЗначенияПараметровЛиста.БазаГрн))*100,   1,  2,"БазаКоп",ОбластьМакета);
				
			КонецЕсли;

			ЗначениеВКлетку(ЗначенияПараметровЛиста.КолЛистовЗаяв, 0, 7,"КолЛистовЗаяв",ОбластьМакета);           
			ЗначениеВКлетку(ЗначенияПараметровЛиста.КолЛистовИнд, 0, 7,"КолЛистовИнд",ОбластьМакета);           
			ЗначениеВКлетку(ЗначенияПараметровЛиста.КолЛистовСП, 0, 7,"КолЛистовСП",ОбластьМакета);           
			ЗначениеВКлетку(ЗначенияПараметровЛиста.КолЛистовСПП, 0, 7,"КолЛистовСПП",ОбластьМакета);           
			ЗначениеВКлетку(ЗначенияПараметровЛиста.КолЛистовБСВ, 0, 7,"КолЛистовБСВ",ОбластьМакета);           
			ЗначениеВКлетку(ЗначенияПараметровЛиста.КолЛистовАнкет, 0, 7,"КолЛистовАнкет",ОбластьМакета);           
			ЗначениеВКлетку(ЗначенияПараметровЛиста.КолЛистовВсего, 0, 7,"КолЛистовВсего",ОбластьМакета);           
			
			ЗначениеВКлетку(ЗначенияПараметровЛиста.КолПачекИнд, 0, 5,"КолПачекИнд",ОбластьМакета);           
			ЗначениеВКлетку(ЗначенияПараметровЛиста.КолПачекСП, 0, 5,"КолПачекСП",ОбластьМакета);           
			ЗначениеВКлетку(ЗначенияПараметровЛиста.КолПачекСПП, 0, 5,"КолПачекСПП",ОбластьМакета);           
			ЗначениеВКлетку(ЗначенияПараметровЛиста.КолПачекБСВ, 0, 5,"КолПачекБСВ",ОбластьМакета);           
			ЗначениеВКлетку(ЗначенияПараметровЛиста.КолПачекАнкет, 0, 5,"КолПачекАнкет",ОбластьМакета);           
			ЗначениеВКлетку(ЗначенияПараметровЛиста.КолПачекВсего, 0, 5,"КолПачекВсего",ОбластьМакета); 		
			
			ЗначениеВКлетку(ЗначенияПараметровЛиста.КодОтветстЗаФормир,    0, 10,"КодОтветстЗаФормир",ОбластьМакета);           
			ОбластьМакета.Параметры.ФамОтвтствФормир = ЗначенияПараметровЛиста.ФамОтвтствФормир;
			ОбластьМакета.Параметры.Директор 		 = ЗначенияПараметровЛиста.Директор;

			ЗначениеВКлетку(ЗначенияПараметровЛиста.ДД, 1, 2,"День",ОбластьМакета);
			ЗначениеВКлетку(ЗначенияПараметровЛиста.ММ, 1, 2,"Месяц",ОбластьМакета);
			ЗначениеВКлетку(ЗначенияПараметровЛиста.ГГГГ, 1, 4,"Год",ОбластьМакета);
			
			ОбластьМакета.Параметры.НазваниеПолучателя = ЗначенияПараметровЛиста.НазваниеПолучателя;
			ЗначениеВКлетку(ЗначенияПараметровЛиста.КодПолучателя,  0, 5,"КодПолучателя",ОбластьМакета);           
			
			// наконец вывод на печать именованной области макета
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		РазбитьПечатнуюФорму(ТабДокумент,"Опис пакета");
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);	
		
	КонецЕсли;	
	
	
КонецПроцедуры // ВывестиНаПечатьЛист()

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	Перем ИНН, Фам, Имя, Отч,КодКатегории,КодОбъекта,НазвКатегории,НазвОбъектаНачислВзносов;
	Перем Н, К, С, Пр, НП,РазмерСтавкиНач,РазмерСтавкиУдерж,СуммаНач,СуммаУдерж;
	Перем Всего, Пенс, Больн, Удерж, Дней, ПолнДен;
	Перем Итог,База,ДнейВсего, НачДень, НачМес, НачГод,КонДень,КонМес,КонГод; 
	Перем П26, П27,П28м, П28дн,П28трд, П28ч, П28мин, П28нсм, П29, П30, П31,П32, ДатДен,ДатМес,ДатГод;
	Перем Бухгалтер, Директор,ГодОтчета;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	// выводим на печать каждую страницу многостраничного раздела
	ТабДокумент  = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ИНДАНИ");
	НомерЛистаВПачке   = 0;
	
	//Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
	Для НСтр = 1 По ТаблицаСтраницРаздела.Количество() Цикл	
		
		Страница = ТаблицаСтраницРаздела[НСтр-1];
		
		НомерЛистаВПачке = НомерЛистаВПачке + 1;

		// увеличим номер листа в пачке
		Если НомерЛистаВПачке = 26 Тогда
			НомерЛистаВПачке = 1;
		КонецЕсли;		
		
		Если НомерЛистаВПачке = 1 Тогда
			// выведем группу листов.
			Если НСтр > 1 Тогда
				РазбитьПечатнуюФорму(ТабДокумент,"ІНДАНІ");
				РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
				ТабДокумент  = Новый ТабличныйДокумент;
			КонецЕсли;
		
			// сформируем Ярлык					
			Если ЯрлыкиФормироватьАвтоматически Тогда
				
				СтрокаАвто = мСтруктураАвтоЯрлыков.СтруктураЯрлыка;
				
				ИмяСтраницыПанели  = СтрокаАвто.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаАвто.Представление;
				ОриентацияЛиста    = СтрокаАвто.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаАвто.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаАвто.ИмяОбластиТабличногоПоля;
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				
				
				ЗначенияПараметровЛиста = Новый Структура();
				ЗначенияПараметровЛиста.Вставить("КодОтправителя",		КодЕДРПОУ);
				// код филиала взять просто неоткуда...
				ЗначенияПараметровЛиста.Вставить("КодФилиала",			мСписокЛиц.Области.КодФилиала.Значение);
				ЗначенияПараметровЛиста.Вставить("НазваниеОтправителя", Организация.НаименованиеПолное);
				
				ЗначенияПараметровЛиста.Вставить("ИНДАНИ", "X");
				
				// Подсчитаем итоговые суммы
				НачислГрн = 0;
				ОтчислГрн = 0;
				БольГрн = 0;
				ИтогГрн = 0;
				БазаГрн = 0;
				
				Для Инд = НСтр ПО МИН(НСтр + 25-1, ТаблицаСтраницРаздела.Количество()) Цикл
					СтрокаТаблицыСтраниц = ТаблицаСтраницРаздела[Инд - 1];
					Если НЕ СтрокаТаблицыСтраниц.Данные = Неопределено Тогда
						НачислГрн 	= НачислГрн + СтрокаТаблицыСтраниц.Данные.СуммаНач;
						ОтчислГрн 	= ОтчислГрн + СтрокаТаблицыСтраниц.Данные.СуммаУдерж;
						БольГрн 	= БольГрн   + СтрокаТаблицыСтраниц.Данные.БольнВсего;
						ИтогГрн 	= ИтогГрн   + СтрокаТаблицыСтраниц.Данные.ИтогВсего;
						БазаГрн 	= БазаГрн   + СтрокаТаблицыСтраниц.Данные.ПенсВсего;
					КонецЕсли;
				КонецЦикла;	
				
				ЗначенияПараметровЛиста.Вставить("НачислГрн",НачислГрн);
				ЗначенияПараметровЛиста.Вставить("ОтчислГрн",ОтчислГрн);
				ЗначенияПараметровЛиста.Вставить("БольГрн",БольГрн);
				ЗначенияПараметровЛиста.Вставить("ИтогГрн",ИтогГрн);
				ЗначенияПараметровЛиста.Вставить("БазаГрн",БазаГрн);				
				
				ЗначенияПараметровЛиста.Вставить("НомерПачкиОтправителя", мСтруктураАвтоЯрлыков.текНомерПачки);
				
				КоличествоЗаписейВПачке = МИН(25, ТаблицаСтраницРаздела.Количество() - НСтр + 1);
				КоличествоЛистовВПачке  = КоличествоЗаписейВПачке;
				
				ЗначенияПараметровЛиста.Вставить("КолЗаписейВПачке", КоличествоЗаписейВПачке);
				ЗначенияПараметровЛиста.Вставить("КолЛистовВПачке",  КоличествоЛистовВПачке);
				
				ЗначенияПараметровЛиста.Вставить("КодОтветстЗаФормир", ИННБухгалтера);
				ЗначенияПараметровЛиста.Вставить("ФамОтвтствФормир",   ФИОГлавБуха);								
				
				ЗначенияПараметровЛиста.Вставить("ДД",	мСписокЛиц.Области.ДД.Значение);
				ЗначенияПараметровЛиста.Вставить("ММ",	мСписокЛиц.Области.ММ.Значение);
				ЗначенияПараметровЛиста.Вставить("ГГГГ",мСписокЛиц.Области.ГГГГ.Значение);
				
				СтруктураПараметров.Вставить("ЗначенияПараметровЛиста", ЗначенияПараметровЛиста);
				
				ВывестиНаПечатьЛист(СтруктураПараметров);

			КонецЕсли;
			
			// увеличим номер пачки
			мСтруктураАвтоЯрлыков.текНомерПачки = мСтруктураАвтоЯрлыков.текНомерПачки + 1;

		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИндВедомости");
		
		ДанныеСтраницы = Страница.Данные;
		Если Страница.Данные = Неопределено  Тогда
			Продолжить;
		Иначе  
			Если ДанныеСтраницы.Свойство("ИНН",ИНН) Тогда 
				ЗначениеВКлетку(ИНН, 0, 10,"ИНН",ОбластьМакета)
			КонецЕсли;	 
			Если ДанныеСтраницы.Свойство("ГодОтчета",ГодОтчета) Тогда 
				ЗначениеВКлетку(ГодОтчета, 0, 4,"ГодОтч",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("Фамилия",Фам) Тогда 
				ЗначениеВКлетку(Фам, "", 27,"Фам",ОбластьМакета);
			КонецЕсли;	 
			
			Если ДанныеСтраницы.Свойство("Имя",Имя) Тогда 
				ЗначениеВКлетку(Имя, "", 27,"Имя",ОбластьМакета);
			КонецЕсли;	
			
			Если ДанныеСтраницы.Свойство("Отч",Отч) Тогда 
				ЗначениеВКлетку(Отч, "", 27,"Отч",ОбластьМакета);
			КонецЕсли;	 
			
			Если ДанныеСтраницы.Свойство("Н",Н) Тогда 
				ОбластьМакета.Параметры.Н = Н;
			КонецЕсли;	 
			
			Если ДанныеСтраницы.Свойство("К",К) Тогда 
				ОбластьМакета.Параметры.К = К;
			КонецЕсли;	 
			
			Если ДанныеСтраницы.Свойство("Пр",Пр) Тогда 
				ОбластьМакета.Параметры.Пр = Пр;
			КонецЕсли;	 
			
			Если ДанныеСтраницы.Свойство("НП",НП) Тогда 
				ОбластьМакета.Параметры.НП = НП;
			КонецЕсли;	
			
			ОбластьМакета.Параметры.Организация = Организация;
			
			Если ДанныеСтраницы.Свойство("КодКатегории",КодКатегории) Тогда 
				ЗначениеВКлетку(КодКатегории, "", 2,"КодКатегории",ОбластьМакета);
			КонецЕсли;	 
			
			Если ДанныеСтраницы.Свойство("КодОбъекта",КодОбъекта) Тогда 
				ЗначениеВКлетку(КодОбъекта, "", 2,"КодОбъектаНачисленияВзносов",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("НазваниеКатегории",НазвКатегории) Тогда 
				ОбластьМакета.Параметры.КраткоеНазваниеКатегории = НазвКатегории;
			КонецЕсли;	
			
			Если ДанныеСтраницы.Свойство("НазваниеОбъектаНачисленияВзносов",НазвОбъектаНачислВзносов) Тогда 
				ОбластьМакета.Параметры.КраткоеНазваниеОбъектаНачисленияВзносов = НазвОбъектаНачислВзносов;
			КонецЕсли;	
			
			Если ДанныеСтраницы.Свойство("РазмерСтавкиНач",РазмерСтавкиНач) Тогда 
				ЗначениеВКлетку(РазмерСтавкиНач , "", 4,"СтавкаНаЗП",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("РазмерСтавкиУдерж",РазмерСтавкиУдерж) Тогда 
				ЗначениеВКлетку(РазмерСтавкиУдерж, "", 5,"СтавкаИзЗП",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("СуммаНач",СуммаНач) Тогда 
				ЗначениеВКлетку(Формат(Цел(СуммаНач), "ЧГ=; ЧРД=.; ЧН="), 0 , 5,"НачислГрн",ОбластьМакета);
				ЗначениеВКлетку((СуммаНач - Цел(СуммаНач))*100,1,2,"НачислКоп",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("СуммаНач",СуммаНач) Тогда 
				ЗначениеВКлетку(Формат(Цел(СуммаНач), "ЧГ=; ЧРД=.; ЧН="), 0 , 5,"НачислГрн",ОбластьМакета);
				ЗначениеВКлетку((СуммаНач - Цел(СуммаНач))*100,1,2,"НачислКоп",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("СуммаУдерж",СуммаУдерж) Тогда 
				ЗначениеВКлетку(Формат(Цел(СуммаУдерж), "ЧГ=; ЧРД=.; ЧН="), 0 , 5,"ОтчислГрн",ОбластьМакета);
				ЗначениеВКлетку((СуммаУдерж - Цел(СуммаУдерж))*100,1,2,"ОтчислКоп",ОбластьМакета);
			КонецЕсли;
			
			Для мес = 1 по 12 Цикл
				Преф = "Мес" + Строка(мес);
				
				ОбластьМакета.Параметры[Преф] = Строка(мес);
				
				
				Имя = Преф + "Всего";
				Если ДанныеСтраницы.Свойство(Имя,Всего) Тогда 
					ЗначениеВКлетку(Формат(Цел(Всего), "ЧГ=; ЧРД=.; ЧН="), 0 , 7,Преф + "ИтогГрн",ОбластьМакета);
					ЗначениеВКлетку((Всего - Цел(Всего))*100,1,2,Преф + "ИтогКоп",ОбластьМакета);
				КонецЕсли;
				
				Имя = Преф + "Пенс";
				Если ДанныеСтраницы.Свойство(Имя,Пенс) Тогда 
					ЗначениеВКлетку(Формат(Цел(Пенс), "ЧГ=; ЧРД=.; ЧН="), 0 , 6,Преф + "БазаГрн",ОбластьМакета);
					ЗначениеВКлетку((Пенс - Цел(Пенс))*100,1,2,Преф + "БазаКоп",ОбластьМакета);
				КонецЕсли;
				
				Имя = Преф + "Больн";
				Если ДанныеСтраницы.Свойство(Имя,Больн) Тогда 
					ЗначениеВКлетку(Формат(Цел(Больн), "ЧГ=; ЧРД=.; ЧН="), 0 , 5,Преф + "БольГрн",ОбластьМакета);
					ЗначениеВКлетку((Больн - Цел(Больн))*100,1,2, Преф + "БольКоп",ОбластьМакета);
				КонецЕсли;
				
				Имя = Преф + "Удерж";
				Если ДанныеСтраницы.Свойство(Имя,Удерж) Тогда 
					ЗначениеВКлетку(Формат(Цел(Удерж), "ЧГ=; ЧРД=.; ЧН="), 0 , 4, Преф + "ВзноГрн",ОбластьМакета);
					ЗначениеВКлетку((Удерж - Цел(Удерж))*100,1,2,Преф + "ВзноКоп",ОбластьМакета);
				КонецЕсли;
				
				Имя = Преф + "Дней";
				Если ДанныеСтраницы.Свойство(Имя,Дней) Тогда 
					ЗначениеВКлетку(Формат(Цел(Дней), "ЧГ=; ЧРД=.; ЧН="), 0 , 3,Преф + "Дней",ОбластьМакета);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ДанныеСтраницы.Свойство("ИтогВсего",Итог) Тогда 
				ЗначениеВКлетку(Формат(Цел(Итог), "ЧГ=; ЧРД=.; ЧН="), 0 , 7, "ИтогГрн",ОбластьМакета);
				ЗначениеВКлетку((Итог - Цел(Итог))*100,1,2,"ИтогКоп",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("ПенсВсего",База) Тогда 
				ЗначениеВКлетку(Формат(Цел(База), "ЧГ=; ЧРД=.; ЧН="), 0 , 6, "БазаГрн",ОбластьМакета);
				ЗначениеВКлетку((База - Цел(База))*100,1,2,"БазаКоп",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("БольнВсего",Больн) Тогда 
				ЗначениеВКлетку(Формат(Цел(Больн), "ЧГ=; ЧРД=.; ЧН="), 0 , 5, "БольГрн",ОбластьМакета);
				ЗначениеВКлетку((Больн - Цел(Больн))*100,1,2,"БольКоп",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("УдержВсего",Удерж) Тогда 
				ЗначениеВКлетку(Формат(Цел(Удерж), "ЧГ=; ЧРД=.; ЧН="), 0 , 4, "ВзноГрн",ОбластьМакета);
				ЗначениеВКлетку((Удерж - Цел(Удерж))*100,1,2,"ВзноКоп",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("ДнейВсего",ДнейВсего) Тогда 
				ЗначениеВКлетку(Формат(Цел(ДнейВсего), "ЧГ=; ЧРД=.; ЧН="), 0 , 3,"Дней",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("Днач",НачДень) Тогда 
				ЗначениеВКлетку(НачДень, 1, 2,"НачДень",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("МесНач",НачМес) Тогда 
				ЗначениеВКлетку(НачМес, 1, 2,"НачМес",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("ГодНач",НачГод) Тогда 
				ЗначениеВКлетку(Формат(НачГод, "ЧГ=; ЧН="), 0, 4,"НачГод",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("Дкон",КонДень) Тогда 
				ЗначениеВКлетку(КонДень, 1, 2,"КонДень",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("Мескон",КонМес) Тогда 
				ЗначениеВКлетку(КонМес, 1, 2,"КонМес",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("ГодКон",КонГод) Тогда 
				ЗначениеВКлетку(КонГод, 0, 4,Формат("КонГод","ЧГ=; ЧН="),ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("Мес",Мес) Тогда 
				ЗначениеВКлетку(Мес, 1, 2,"ПолнМес",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("Дней",ПолнДен) Тогда 
				ЗначениеВКлетку(ПолнДен, 1, 2,"ПолнДен",ОбластьМакета);
			КонецЕсли;
			
			
			Для стр = 1 по 4 Цикл
				имя = "П26_" + Строка(стр);
				
				Если ДанныеСтраницы.Свойство(имя,П26) Тогда 
					ЗначениеВКлетку(П26, 0, 5,"Код" + Строка(стр)+"СС",ОбластьМакета);
				КонецЕсли;
				
				имя = "П27_" + Строка(стр); 
				
				Если ДанныеСтраницы.Свойство(имя,П27) Тогда 
					ЗначениеВКлетку(П27, 1, 2,"П27_м" + Строка(стр),ОбластьМакета);
				КонецЕсли;
				
				имя = "П28м_" + Строка(стр);
				
				Если ДанныеСтраницы.Свойство(имя,П28м) Тогда 
					ЗначениеВКлетку(П28м, 1, 2,"П28_м" + Строка(стр),ОбластьМакета);
				КонецЕсли;
				
				имя = "П28дн_" + Строка(стр);
				
				Если ДанныеСтраницы.Свойство(имя,П28дн) Тогда 
					ЗначениеВКлетку(П28дн, 1, 2,"П28_дн" + Строка(стр),ОбластьМакета);
				КонецЕсли;
				
				имя = "П28трд_" + Строка(стр);
				
				Если ДанныеСтраницы.Свойство(имя,П28трд) Тогда 
					ЗначениеВКлетку(П28трд, 1, 3,"П28_трд" + Строка(стр),ОбластьМакета);
				КонецЕсли;
				
				имя = "П28ч_" + Строка(стр);
				
				Если ДанныеСтраницы.Свойство(имя,П28ч) Тогда 
					ЗначениеВКлетку(П28ч, 1, 3,"П28_ч" + Строка(стр),ОбластьМакета);
				КонецЕсли;
				
				имя = "П28мин_" + Строка(стр);
				
				Если ДанныеСтраницы.Свойство(имя,П28мин) Тогда 
					ЗначениеВКлетку(П28мин, 1, 2,"П28_мин" + Строка(стр),ОбластьМакета);
				КонецЕсли;
				
				имя = "П28нсм_" + Строка(стр);
				Если ДанныеСтраницы.Свойство(имя,П28нсм) Тогда 
					ЗначениеВКлетку(П28нсм, 0, 3,"П28_нсм" + Строка(стр),ОбластьМакета);
				КонецЕсли;
				
				имя = "П29_" + Строка(стр);
				Если ДанныеСтраницы.Свойство(имя,П29) Тогда 
					ЗначениеВКлетку(П29, 0, 7,"П29_" + Строка(стр),ОбластьМакета);
				КонецЕсли;
				
				имя = "П30_" + Строка(стр);
				Если ДанныеСтраницы.Свойство(имя,П30) Тогда 
					ЗначениеВКлетку(П30, 0, 1,"П30_" + Строка(стр),ОбластьМакета);
				КонецЕсли;
				
			КонецЦикла;	
			
			ЗначениеВКлетку( мСтруктураАвтоЯрлыков.текНомерПачки, 0, 6,"РегНомерПачкиРаботодат",ОбластьМакета);
			ЗначениеВКлетку(НомерЛистаВПачке, 0, 3,"СтрВПачкеМас",ОбластьМакета);
			
			Если ДанныеСтраницы.Свойство("ДД",ДатДен) Тогда 
				ЗначениеВКлетку(ДатДен, 0, 2,"ДатДен",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("ММ",ДатМес) Тогда 
				ЗначениеВКлетку(ДатМес, 0, 2,"ДатМес",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("ГГГГ",ДатГод) Тогда 
				ЗначениеВКлетку(ДатГод, 0, 4,"ДатГод",ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("ОргБухгалтер",Бухгалтер) Тогда 
				ОбластьМакета.Параметры.Бухгалтер = Бухгалтер;
			КонецЕсли;
			
			Если ДанныеСтраницы.Свойство("ОргДиректор",Директор) Тогда 
				ОбластьМакета.Параметры.Директор = Директор;
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли
		
	КонецЦикла;
	
	РазбитьПечатнуюФорму(ТабДокумент,"ІНДАНІ");
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  похоже унифицирована, используется при  восстановлении сохраненных данных
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	КолСтрок = 1;
	
	
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл
			
			НомИсходнойСтроки = НомНовойСтроки - 1;
			
			Если (ТекТабличноеПоле = мСписокЛиц) Тогда
				ИмяПоследнейЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[2].Имя + Формат(НомИсходнойСтроки,"ЧЦ=4;ЧВН=0;ЧГ=;");
				ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + Формат(НомИсходнойСтроки,"ЧЦ=4;ЧВН=0;ЧГ=;");
			ИначеЕсли (ТекТабличноеПоле = мСписокЛьготников) Тогда	
				ИмяПоследнейЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[7].Имя + Формат(НомИсходнойСтроки,"ЧЦ=4;ЧВН=0;ЧГ=;");
				ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + Формат(НомИсходнойСтроки,"ЧЦ=4;ЧВН=0;ЧГ=;");
			КонецЕсли;
			
			// область первой ячейки последней строки многострочного раздела
			ОбластьЯчейкиНиз = ТекТабличноеПоле.Области[ИмяПоследнейЯчейкиПоследнейСтроки];
			НомерНижнЯчейкиОбласти = ОбластьЯчейкиНиз.Низ;
			
			ОбластьЯчейкиВерх = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
			НомерВерхЯчейкиОбласти = ОбластьЯчейкиВерх.Верх;
			
			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
			
			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
			
			
			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
			
			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );
			
			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл                    
				ИмяКолонки          = Колонка.Имя;
				
				Если (ИмяКолонки <> "ДатаРожд")
				   и (ИмяКолонки <> "Пол") 
				   И (ИмяКолонки <> "ДатаПриема")
				   и (ИмяКолонки <> "ДатаУвольнения") Тогда
					
					ИмяОбластиЯчейки    = ИмяКолонки + Формат(НомИсходнойСтроки,"ЧЦ=4;ЧВН=0;ЧГ=;");
					ИмяНовОбластиЯчейки = ИмяКолонки + Формат(НомНовойСтроки,"ЧЦ=4;ЧВН=0;ЧГ=;");
					
					ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
					ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
					
					// определяем границы ячейки исходной области
					НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
					НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
					НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
					НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
					
					// Назначаем имя ячейки исходной области,
					// (т.к. в результате вставки новой области оно было очищено)
					ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
					ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
					
					// очищаем значения ячеек вставленной области
					Если (ОбластьЯчейки.СодержитЗначение)  Тогда
						ОбластьЯчейки.Очистить();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если	(ИмяГруппы = мИдГруппы1)  Тогда 
				ОбластьТекстовыйНомер = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти,1,НомерНижнЯчейкиНовойОбласти,2);
			ИначеЕсли (ИмяГруппы = мИдГруппы2) Тогда 
				ОбластьТекстовыйНомер = ТекТабличноеПоле.Область(НомерВерхЯчейкиНовойОбласти,1,НомерНижнЯчейкиНовойОбласти,1);
			КонецЕсли;   			
			ОбластьТекстовыйНомер.Значение = Строка(КолСтрок + 1);
			КолСтрок = КолСтрок + 1; 
		КонецЦикла;
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
			ИмяКолонки          = КолонкаТаблицы.Имя;
			Если (ИмяКолонки <> "ДатаРожд") 
			   И (ИмяКолонки <> "Пол")
			   И (ИмяКолонки <> "ДатаПриема")
			   И (ИмяКолонки <> "ДатаУвольнения")  Тогда
				
				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				
				ИмяЯчейки    = ИмяКолонки + Формат(НомерСтрокиВФормеТаблицы,"ЧЦ=4;ЧВН=0;ЧГ=;");
				
				
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
					// задаем значение ячейки
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
					
				Иначе
					// устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, НазваниеЛиста = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	Если НазваниеЛиста = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = НазваниеЛиста;
	КонецЕсли;
	
	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	НомерТекущейСтраницы = 1;
	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;
	
	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа
		
		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		
		// Добавляем в массив таблицу значений, содержащей варианты заполнения
		// для добавленной страницы.
		МассивВариантовЗаполненияСтраниц.Добавить(НоваяТаблицаВариантыЗаполнения);
		
	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа
		
		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// Процедура очищает содержимое редактируемых (для которых не установлен флажок "защита" в свойствах) 
//и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//  унифицирована для всех отчетов
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле )  Экспорт
	
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		
		Если Тип ("РисунокТабличногоДокумента") <> ТипЗнч (ТекущаяОбласть) Тогда
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ТекущаяОбласть.СодержитЗначение Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяОбласть.Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
// унифицирована для всех отчетов
Процедура Очистить()
	
	РегламентированнаяОтчетность.роОчистить(ЭтаФорма);
	
	УдалитьДополнительнуюСтроку(Истина, Ложь, мИдГруппы1);
	УдалитьДополнительнуюСтроку(Истина, Ложь, мИдГруппы2);
	
	ОбновитьТаблицуСтраницИндведомости();
	
КонецПроцедуры // Очистить()

// Обрабатывает полученный из формы ФормаНастройкиСтраниц дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати) Экспорт 
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	мСтруктураАвтоЯрлыков.текНомерПачки = ПервыйНомерПачки;
	СтруктураПараметров = Новый Структура;
	
	мПечатныеФормы.Очистить();
	
	// добавим описание пакета
	Если ОписаниеПакетаФормироватьАвтоматически Тогда
		
		ОчиститьТабличноеПоле(ЭлементыФормы.ПолеТабличногоДокументаОписаниеПакета);
		СформироватьОписаниеПакета();
		
		СтрокаАвто = мСтруктураАвтоЯрлыков.СтруктураПакета;
		
		ИмяСтраницыПанели  = СтрокаАвто.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаАвто.Представление;
		ОриентацияЛиста    = СтрокаАвто.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаАвто.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаАвто.ИмяОбластиТабличногоПоля;
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		ВывестиНаПечатьЛист(СтруктураПараметров);
	
	КонецЕсли;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1);
		
		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;
		
		Если СтрокаУровня1.Строки.Количество() > 0 Тогда
			
			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2);
				
				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;
				
				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл
						
						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3);
						Если Пометка = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;
						
						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						
						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
				
				Если Пометка = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				
				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			//на печать выводятся обычные листы отчета, в том числе многострочные
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;
	
	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	
КонецПроцедуры // Печать()

// Управляет видимостью страниц основной панели формы.
//
Процедура ПоказатьСтраницыОтчета()
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ИмеютсяСкрытые      = Ложь;
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		
		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		ПоказатьСтраницу   = СтрокаУровня1.ПоказатьСтраницу;
		
		Если ПоказатьСтраницу = 0 Тогда
			ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Ложь;
			ИмеютсяСкрытые = Истина;
		Иначе
			ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Истина;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	
	КнопкиНастройки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаНастройкаСтраниц;
	ИсходныйТекст   = НСтр("ru='Настройка страниц';uk='Настройка сторінок'");
	
	КнопкиНастройки.Текст = ИсходныйТекст;
	
	Если ИмеютсяСкрытые Тогда
		// Выводим в названии кнопки "Настройка страниц" доп. сммвол '*'.
		КнопкиНастройки.Текст = ИсходныйТекст + " (*)";
	КонецЕсли;
	
КонецПроцедуры // ПоказатьСтраницыОтчета()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт 
	
	Перем ТаблицаСтраниц;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма) Тогда
		Возврат  Ложь;
	КонецЕсли;
	
	
	
	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.
		
		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;
		
		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	
	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();
	ОбновитьСтруктуруМногостраничныхРазделов();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
			
			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле,1);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;
		
	КонецЦикла;
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);
	
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
    Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		СписокСохранения.Вставить("ТаблицаВРБольничные", ТаблицаВРБольничные.ВыгрузитьКолонку("ВидРасчета"));
		СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничные", ТаблицаВРБольничные.ВыгрузитьКолонку("ВидРасчета"));	
	КонецЕсли;
	
	СписокСохранения.Вставить("КонтролироватьСтаж", КонтролироватьСтаж);
	СписокСохранения.Вставить("ЯрлыкиФормироватьАвтоматически", ЯрлыкиФормироватьАвтоматически);
	СписокСохранения.Вставить("ОписаниеПакетаФормироватьАвтоматически", ОписаниеПакетаФормироватьАвтоматически);
	СписокСохранения.Вставить("ПервыйНомерПачки", ПервыйНомерПачки);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	СохранитьДеревоСтраницОтчета();
	
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;
	Возврат Истина;
	
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	// восстанавливаем реквизиты отчета
	Организация              = мСохраненныйДок.Организация;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	мДатаКонцаПериодаОтчета  = мСохраненныйДок.ДатаОкончания ;
	ГодЗаполненияОтчета      = Год(мДатаКонцаПериодаОтчета);
	Комментарий              = мСохраненныйДок.Комментарий;
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();
	
	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки(СписокСохранения);
			мСтараяВерсияФормы = ВерсияФормы;
		КонецЕсли;
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;
		ОписаниеТиповДата      = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			
			Если ИмяГруппы = мИдГруппы1 Тогда 
				СтруктураГруппы.Колонки[4].Имя = "ДатаРожд" ;
				Если СтруктураГруппы.Колонки.Найти("ДатаПриема")= Неопределено Тогда
					СтруктураГруппы.Колонки.Добавить("ДатаПриема",ОписаниеТиповДата);
					
				КонецЕсли;
                Если СтруктураГруппы.Колонки.Найти("ДатаУвольнения")= Неопределено Тогда
					СтруктураГруппы.Колонки.Добавить("ДатаУвольнения",ОписаниеТиповДата);
				КонецЕсли;

			КонецЕсли;	
			Если ИмяГруппы = мИдГруппы2 Тогда 
				Если СтруктураГруппы.Колонки.Найти("СтажМес")= Неопределено Тогда
					СтруктураГруппы.Колонки[3].Имя = "СтажМес" ;
				КонецЕсли
			КонецЕсли;
			
			//пока только одна группа
			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;
		
		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			
			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
		
		ПредставлениеДанных = ПолучитьСвойствоРаздела(ИмяТекТабличноеПоле, "ПредставлениеДанных");
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			
			Если Сред(ИмяПоказателя,1,4) = "ДлСт" Тогда 
				ИмяПоказателя = "СтажМес" + Сред(ИмяПоказателя,5,4);	
			КонецЕсли;	
			
			Если ПредставлениеДанных = Истина Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить; // Пропустим цикл
				КонецЕсли;
			КонецЕсли;
			
			Если мСтараяВерсияФормы <> мВерсияФормы Тогда
				// Старая версия формы, нужно по позможности собрать данные
				
				Попытка
					ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				Исключение
					
				КонецПопытки;
				
			Иначе
				Попытка
					ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				Исключение
				КонецПопытки;	
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
    Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		// только для бухгалтерии
		мТаблицаВРБольничные = Неопределено;
		СписокСохранения.Свойство("ТаблицаВРБольничные", мТаблицаВРБольничные);
		
		Если мТаблицаВРБольничные = Неопределено Тогда
			// попробуем поднять значение общее для регл. отчетности
			мТаблицаВРБольничные = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничные");	
		КонецЕсли;
		Если НЕ мТаблицаВРБольничные = Неопределено Тогда
			ТаблицаВРБольничные.Очистить();
			Для каждого ВР Из мТаблицаВРБольничные Цикл
				СтрокаВР = ТаблицаВРБольничные.Добавить();
				СтрокаВР.ВидРасчета = ВР;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СписокСохранения.Свойство("КонтролироватьСтаж", КонтролироватьСтаж);
	СписокСохранения.Свойство("ПервыйНомерПачки", ПервыйНомерПачки);
	Если ПервыйНомерПачки = 0 Тогда
		ПервыйНомерПачки = 1;
	КонецЕсли;
	
	мФлаг = Неопределено;
	СписокСохранения.Свойство("ЯрлыкиФормироватьАвтоматически", мФлаг);
	Если мФлаг = Неопределено Тогда
		мФлаг = Истина;
	КонецЕсли;
	ЯрлыкиФормироватьАвтоматически = мФлаг;
	
	мФлаг = Неопределено;
	СписокСохранения.Свойство("ОписаниеПакетаФормироватьАвтоматически", мФлаг);
	Если мФлаг = Неопределено Тогда
		мФлаг = Истина;
	КонецЕсли;
	ОписаниеПакетаФормироватьАвтоматически = мФлаг;
	
	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	
	// Выводим дату подписания отчета
	ЗаполнитьДатуВЯчейках();
	
	УстановитьФорматВывода();
	
	ПоказатьСтраницыОтчета();
	
	Модифицированность = Ложь;
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//  уникальна для каждого отчета  , требуется соотв редакция
Процедура Расчет(ИмяТекущейСтраницыПанели = Неопределено)     Экспорт
	Перем СтруктураГруппы1,СтруктураГруппы2;
	Перем ТаблицаСтраницРаздела;
	
	//мСтруктураМногостраничныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);
	//мСтруктураМногостраничныхРазделов.Свойство(мИдГруппы2, СтруктураГруппы2);
	
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2, СтруктураГруппы2);
	
	КолСтрокСписокЛиц = СтруктураГруппы1.Количество();
	КолСтрокСписокЛьготников = СтруктураГруппы2.Количество();
	
	мСписокЛиц.Области.КвоЗап.Значение = КолСтрокСписокЛиц;
	мСписокЛьготников.Области.КвоЗап.Значение = КолСтрокСписокЛьготников;
	
	мСтруктураМногостраничныхРазделов.Свойство("ИндВедомости", ТаблицаСтраницРаздела);
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	
	ТекСтраница = СтрТаблицаСтраницы.Данные;
	 
	Если НЕ ТекСтраница = Неопределено Тогда
	
		ТекСтраница.ИтогВсего = 	  ТекСтраница.Мес1Всего 
		+ ТекСтраница.Мес2Всего 
		+ ТекСтраница.Мес3Всего 
		+ ТекСтраница.Мес4Всего 
		+ ТекСтраница.Мес5Всего 
		+ ТекСтраница.Мес6Всего
		+ ТекСтраница.Мес7Всего 
		+ ТекСтраница.Мес8Всего 
		+ ТекСтраница.Мес9Всего 
		+ ТекСтраница.Мес10Всего 
		+ ТекСтраница.Мес11Всего 
		+ ТекСтраница.Мес12Всего;
		
		ТекСтраница.ПенсВсего = 	  ТекСтраница.Мес1Пенс 
		+ ТекСтраница.Мес2Пенс 
		+ ТекСтраница.Мес3Пенс 
		+ ТекСтраница.Мес4Пенс 
		+ ТекСтраница.Мес5Пенс 
		+ ТекСтраница.Мес6Пенс
		+ ТекСтраница.Мес7Пенс 
		+ ТекСтраница.Мес8Пенс 
		+ ТекСтраница.Мес9Пенс 
		+ ТекСтраница.Мес10Пенс 
		+ ТекСтраница.Мес11Пенс 
		+ ТекСтраница.Мес12Пенс;
		
		ТекСтраница.БольнВсего = 	  ТекСтраница.Мес1Больн 
		+ ТекСтраница.Мес2Больн 
		+ ТекСтраница.Мес3Больн 
		+ ТекСтраница.Мес4Больн 
		+ ТекСтраница.Мес5Больн 
		+ ТекСтраница.Мес6Больн
		+ ТекСтраница.Мес7Больн 
		+ ТекСтраница.Мес8Больн 
		+ ТекСтраница.Мес9Больн 
		+ ТекСтраница.Мес10Больн 
		+ ТекСтраница.Мес11Больн 
		+ ТекСтраница.Мес12Больн;
		
		ТекСтраница.УдержВсего = 	  ТекСтраница.Мес1Удерж 
		+ ТекСтраница.Мес2Удерж 
		+ ТекСтраница.Мес3Удерж 
		+ ТекСтраница.Мес4Удерж 
		+ ТекСтраница.Мес5Удерж 
		+ ТекСтраница.Мес6Удерж
		+ ТекСтраница.Мес7Удерж 
		+ ТекСтраница.Мес8Удерж 
		+ ТекСтраница.Мес9Удерж 
		+ ТекСтраница.Мес10Удерж 
		+ ТекСтраница.Мес11Удерж 
		+ ТекСтраница.Мес12Удерж;
		
		ТекСтраница.ДнейВсего = 	  ТекСтраница.Мес1Дней 
		+ ТекСтраница.Мес2Дней 
		+ ТекСтраница.Мес3Дней 
		+ ТекСтраница.Мес4Дней 
		+ ТекСтраница.Мес5Дней 
		+ ТекСтраница.Мес6Дней
		+ ТекСтраница.Мес7Дней 
		+ ТекСтраница.Мес8Дней 
		+ ТекСтраница.Мес9Дней 
		+ ТекСтраница.Мес10Дней 
		+ ТекСтраница.Мес11Дней 
		+ ТекСтраница.Мес12Дней;
		
		ЭлементыФормы.ПолеТабличногоДокументаИндВедомости.Области["ИтогВсего"].Значение = ТекСтраница.ИтогВсего;
		ЭлементыФормы.ПолеТабличногоДокументаИндВедомости.Области["ПенсВсего"].Значение = ТекСтраница.ПенсВсего;
		ЭлементыФормы.ПолеТабличногоДокументаИндВедомости.Области["БольнВсего"].Значение = ТекСтраница.БольнВсего;
		ЭлементыФормы.ПолеТабличногоДокументаИндВедомости.Области["УдержВсего"].Значение = ТекСтраница.УдержВсего;
		ЭлементыФормы.ПолеТабличногоДокументаИндВедомости.Области["ДнейВсего"].Значение = ТекСтраница.ДнейВсего;
		
	КонецЕсли;	

	мОписаниеПакета.Области.КолЛистовВсего.Значение =   мОписаниеПакета.Области.КолЛистовЗаяв.Значение
											 + мОписаниеПакета.Области.КолЛистовИнд.Значение
											 + мОписаниеПакета.Области.КолЛистовСП.Значение
											 + мОписаниеПакета.Области.КолЛистовСПП.Значение
											 + мОписаниеПакета.Области.КолЛистовБСВ.Значение
											 + мОписаниеПакета.Области.КолЛистовАнкет.Значение;
	
	мОписаниеПакета.Области.КолПачекВсего.Значение =  
											 + мОписаниеПакета.Области.КолПачекИнд.Значение
											 + мОписаниеПакета.Области.КолПачекСП.Значение
											 + мОписаниеПакета.Области.КолПачекСПП.Значение
											 + мОписаниеПакета.Области.КолПачекБСВ.Значение
											 + мОписаниеПакета.Области.КолПачекАнкет.Значение;
	
	
КонецПроцедуры // Расчет()    

Функция ПолучитьМинимальнуюЗарплату()

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	&ПарамНач КАК Период,
	               |	МинимальнаяОплатаТрудаСрезПоследних.Размер КАК Размер
	               |ИЗ
	               |	РегистрСведений.МинимальнаяОплатаТруда.СрезПоследних(&ПарамНач, ) КАК МинимальнаяОплатаТрудаСрезПоследних
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	МинимальнаяОплатаТруда.Период,
	               |	МинимальнаяОплатаТруда.Размер
	               |ИЗ
	               |	РегистрСведений.МинимальнаяОплатаТруда КАК МинимальнаяОплатаТруда
	               |ГДЕ
	               |	МинимальнаяОплатаТруда.Период МЕЖДУ &ПарамНач И &ПарамКон
				   |УПОРЯДОЧИТЬ ПО Период
				   |";
				   
	Запрос.Параметры.Вставить("ПарамНач",мДатаНачалаПериодаОтчета);				   	
	Запрос.Параметры.Вставить("ПарамКон",мДатаКонцаПериодаОтчета);				   	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Таблица = новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Период");
	Таблица.Колонки.Добавить("Размер");
	
	ТекМесяц = НачалоМесяца(мДатаНачалаПериодаОтчета);
	ТекРазмер = 0;
	Пока Выборка.Следующий() Цикл
		
		Пока ТекМесяц <= Выборка.Период Цикл
		
			СтрокаТаблицы 		 = Таблица.Добавить();
			СтрокаТаблицы.Период = ТекМесяц;
			Если ТекМесяц = Выборка.Период Тогда
				 ТекРазмер = Выборка.Размер;
			КонецЕсли;
			СтрокаТаблицы.Размер = ТекРазмер;
			
			ТекМесяц = ДобавитьМесяц(ТекМесяц, 1);
			
		КонецЦикла;
	
	КонецЦикла; 	

	Пока ТекМесяц <= НачалоМесяца(мДатаКонцаПериодаОтчета) Цикл
	
		СтрокаТаблицы 		 = Таблица.Добавить();
		СтрокаТаблицы.Период = ТекМесяц;
		СтрокаТаблицы.Размер = ТекРазмер;
		
		ТекМесяц = ДобавитьМесяц(ТекМесяц, 1);
		
	КонецЦикла;
	
	Возврат Таблица
	
КонецФункции // ()

Функция  ПолучитьСписокЛиц(ТолькоПринятые = Ложь)
	// Текст запроса: работники организации за период 
	Запрос = Новый Запрос;
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДатаНач",мДатаНачалаПериодаОтчета-1);
	Запрос.УстановитьПараметр("ДатаКон",мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация" , Организация);
	
	ТекстЗапросаРаботавшие =
	"ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо,
	|	1 КАК РаботалНаНачало
	|ПОМЕСТИТЬ СписокФизЛиц
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНач, Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник.Физлицо,
	|	0
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И РаботникиОрганизаций.ЗанимаемыхСтавок > 0
	|	И РаботникиОрганизаций.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизаций.Сотрудник.Физлицо";
	
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") 
	 ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП") Тогда
		
			ТекстЗапросаРаботавшие = ТекстЗапросаРаботавшие + "
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ 
			|	 Работники.Сотрудник.ФизЛицо КАК Сотрудник,
			|	 0
			|ИЗ  Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК Работники
			|ГДЕ 
			| 	Работники.Проведен
			| И Работники.ДатаОкончания >= &ДатаНач
			| И Работники.ДатаНачала <= &ДатаКон
			| И Работники.Организация = &Организация
			|
			|СГРУППИРОВАТЬ ПО
			|	Работники.Сотрудник.Физлицо";
			
	КонецЕсли;	
	
	ТекстЗапросаРаботавшие = ТекстЗапросаРаботавшие + "
	|;
	|
	|ВЫБРАТЬ 
	|	РаботникиОрганизаций.ФизЛицо КАК ФизЛицо,
	|	СУММА(РаботалНаНачало) КАК РаботалНаНачало
	|
	|ПОМЕСТИТЬ СписокФизЛиц1
	|
	|ИЗ
	|	СписокФизЛиц КАК РаботникиОрганизаций
	|СГРУППИРОВАТЬ ПО РаботникиОрганизаций.ФизЛицо
	|
	|;
	|
	|ВЫБРАТЬ 
	|	РаботникиОрганизаций.ФизЛицо    КАК ФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия  КАК Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя 	    КАК Имя,
	|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
	|ИЗ
	|	СписокФизЛиц1 КАК РаботникиОрганизаций
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаКон) КАК ФИОФизЛицСрезПоследних
	|			ПО РаботникиОрганизаций.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|" + ?(ТолькоПринятые,"
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаНач) КАК ФИОФизЛицСрезНач
	|			ПО РаботникиОрганизаций.Физлицо = ФИОФизЛицСрезНач.ФизЛицо
	|
	|ГДЕ    РаботникиОрганизаций.РаботалНаНачало < 1
	|     ИЛИ НЕ ФИОФизЛицСрезПоследних.Фамилия = ФИОФизЛицСрезНач.Фамилия
	|     ИЛИ НЕ ФИОФизЛицСрезПоследних.Имя = ФИОФизЛицСрезНач.Имя
	|     ИЛИ НЕ ФИОФизЛицСрезПоследних.Отчество = ФИОФизЛицСрезНач.Отчество","");
	
	
	Запрос.Текст = ТекстЗапросаРаботавшие;
	
	РаботавшиеВОрганизации = Запрос.Выполнить().Выгрузить();
	РаботавшиеВОрганизации.Сортировать("Физлицо");
	Возврат РаботавшиеВОрганизации;
	
КонецФункции	

// Заполняет табличную часть РаботникиОрганизации, всеми физ лицами, которые числятся на конец периода по указанным координатам, 
// их дыижения и внутреннее совместительство 
// Всех не уволенных на конец ПериодаРасчета документа
//
Функция ЗаполнениеРаботникиОрганизации(ОбъектЗаполнения) 
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамНачало",мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("парамКонец" , мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("парамОбъектЗаполнения" , ОбъектЗаполнения);
	Запрос.УстановитьПараметр("парамОрганизация" , Организация);
	
	// Описание условий	
	Если ТипЗнч(ОбъектЗаполнения) = Тип("СправочникСсылка.Организации") Тогда
		УсловиеНаПодразделение    = "ПодразделениеОрганизации.Владелец = &парамОбъектЗаполнения";
		УсловиеНаПодразделениеГПХ = "";
	Иначе
		УсловиеНаПодразделение    = "ПодразделениеОрганизации В ИЕРАРХИИ (&парамОбъектЗаполнения)";
		УсловиеНаПодразделениеГПХ = "И Работники.ПодразделениеОрганизации В ИЕРАРХИИ (&парамОбъектЗаполнения)";
	КонецЕсли;
	
	// Текст запроса: срез работников на конец месяца
	ТекстЗапросаАвтозаполнениеРаботники = "
	|ВЫБРАТЬ
	|Работники.Сотрудник.Физлицо КАК Физлицо
	|
	|ИЗ
	|РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамКонец, Организация = &парамОрганизация) КАК Работники
	|	
	|ГДЕ 
	|Работники.ЗанимаемыхСтавок > 0
	|	И Работники."+УсловиеНаПодразделение+"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Работники.Сотрудник.Физлицо КАК Физлицо
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамНачало, Организация = &парамОрганизация) КАК Работники
	|		
	|ГДЕ 
	|	Работники.ЗанимаемыхСтавок > 0
	|	И Организация = &парамОрганизация 
	|	И Работники."+УсловиеНаПодразделение+"
	|
	|	
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Работники.Сотрудник.Физлицо КАК Физлицо
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций	КАК Работники
	|ГДЕ
	|	 Работники.Период >= &парамНачало
	|  И Работники.Период <=	&парамКонец
	|  И Работники.ЗанимаемыхСтавок > 0
	|  И Работники."+УсловиеНаПодразделение+"
	|
	| ";
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП")
	 ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП")
	 ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "УТП") Тогда
		
			ТекстЗапросаАвтозаполнениеРаботники = ТекстЗапросаАвтозаполнениеРаботники + "
			|ОБЪЕДИНИТЬ
			|ВЫБРАТЬ 
			|	 Работники.Сотрудник.ФизЛицо КАК Сотрудник
			|ИЗ  Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК Работники
			|ГДЕ 
			| 	Работники.Проведен
			| И Работники.ДатаОкончания >= &парамНачало
			| И Работники.ДатаНачала <= &парамКонец
			| И Работники.Организация = &парамОрганизация
			| " + УсловиеНаПодразделениеГПХ + "
 			|";	
			
	КонецЕсли;	
	
	Запрос.Текст = ТекстЗапросаАвтозаполнениеРаботники;
	
	РаботникиВыбраннойОрганизации = Запрос.Выполнить().Выгрузить();
	
	Возврат РаботникиВыбраннойОрганизации;
	
КонецФункции // ЗаполнениеРаботникиОрганизации()

//Процедура сформироватьДанныеОРаботодателе
Процедура СформироватьДанныеОРаботодателе()
	
	мРаботодатель.Области.ЕДРПОУ.Значение = КодЕДРПОУ;
	мРаботодатель.Области.КодПФ.Значение = НомерРегистрацииПФ;
	мРаботодатель.Области.КВЕД.Значение = КодКВЕД;
	мРаботодатель.Области.ВЭД.Значение = ВЭД;
	мРаботодатель.Области.ОргПолное.Значение = Организация.НаименованиеПолное;
	мРаботодатель.Области.ОргСокр.Значение = Организация;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
		Если    Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо 
			ИЛИ РегламентированнаяОтчетность.ИдКонфигурации() = "ЗУП" Тогда
			
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
			Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
			
			Запрос.УстановитьПараметр("Объект", Организация);
			
		Иначе
			
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица;
			Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
			
			Запрос.УстановитьПараметр("Объект", Организация.ИндивидуальныйПредприниматель);
			
		КонецЕсли;
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	КонтактнаяИнформация.Поле1,
		|	КонтактнаяИнформация.Поле2,
		|	КонтактнаяИнформация.Поле3,
		|	КонтактнаяИнформация.Поле4,
		|	КонтактнаяИнформация.Поле5,
		|	КонтактнаяИнформация.Поле6,
		|	КонтактнаяИнформация.Поле7,
		|	КонтактнаяИнформация.Поле8,
		|	КонтактнаяИнформация.Поле9
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И
		|	КонтактнаяИнформация.Тип = &Тип
		|	И
		|	КонтактнаяИнформация.Вид = &Вид
		|";
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Если РезультатЗапроса.Количество() > 0 Тогда
			Индекс = РезультатЗапроса[0].Поле1;
			Регион = РезультатЗапроса[0].Поле2;
			Район =  РезультатЗапроса[0].Поле3;
			Город =  РезультатЗапроса[0].Поле4;
			НаселенныйПункт = РезультатЗапроса[0].Поле5;
			Улица =  РезультатЗапроса[0].Поле6;
			Дом   =  РезультатЗапроса[0].Поле7;
			Корпус = РезультатЗапроса[0].Поле8;
			Квартира = РезультатЗапроса[0].Поле9;
		КонецЕсли;
	КонецЕсли;
	
	мРаботодатель.Области.Индекс.Значение   = Индекс;
	мРаботодатель.Области.Регион.Значение   = Регион;
	мРаботодатель.Области.Район.Значение    = Район;
	мРаботодатель.Области.Пункт.Значение    = НаселенныйПункт;
	мРаботодатель.Области.Улица.Значение    = Улица;
	мРаботодатель.Области.Дом.Значение 	    = Дом;
	мРаботодатель.Области.Корпус.Значение   = Корпус;
	мРаботодатель.Области.Квартира.Значение = Квартира;
	
	мРаботодатель.Области.Телефон.Значение = УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Организация);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И
	|	КонтактнаяИнформация.Тип = &Тип
	|";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		Инет =  РезультатЗапроса[0].Представление;
		мРаботодатель.Области.Инет.Значение = Инет;
	КонецЕсли;
	
	мРаботодатель.Области.Директор.Значение = ФИОДиректора;
	
	ТаблСреднеспЧисленности = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "ССЧ", "КВАРТАЛ", Организация, ""); 
	СреднеспКво = ТаблСреднеспЧисленности[0].Средняя;
	мРаботодатель.Области.ЧислоР.Значение = СреднеспКво;
	
	мРаботодатель.Области.ЧислоР.Значение = СреднеспКво;
	
	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	
	мРаботодатель.Области.ДД.Значение 	= ЧастиДатыПодписи.День;
	мРаботодатель.Области.ММ.Значение 	= ЧастиДатыПодписи.МесяцЦифрой;
	мРаботодатель.Области.ГГГГ.Значение = ЧастиДатыПодписи.Год;
	
	Если ДатаРегистрации <> Неопределено Тогда
		ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаРегистрации,"uk_UA");
		
		мРаботодатель.Области.ДД1.Значение 	 = ЧастиДатыПодписи.День;
		мРаботодатель.Области.ММ1.Значение 	 = ЧастиДатыПодписи.МесяцЦифрой;
		мРаботодатель.Области.ГГГГ1.Значение = ЧастиДатыПодписи.Год;
	КонецЕсли;
	
	
КонецПроцедуры // СформироватьДанныеОРаботодателе()

Процедура СформироватьЯрлык()
	Перем ТаблицаСтраницРаздела;
	
	мЯрлык.Области.КодОтправителя.Значение = КодЕДРПОУ;
	мЯрлык.Области.НазваниеОтправителя.Значение = Организация.НаименованиеПолное;
	
	мЯрлык.Области.ИНДАНИ.Значение = "X"; 
	
	мЯрлык.Области.НомерПачкиОтправителя.Значение = ПервыйНомерПачки;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство("ИндВедомости", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоВПачке = Мин(ТаблицаСтраницРаздела.Количество(), 25);
	
	мЯрлык.Области.КолЗаписейВПачке.Значение 	  = КоличествоВПачке;
	мЯрлык.Области.КолЛистовВПачке.Значение		  = КоличествоВПачке;
	мЯрлык.Области.НомерПачкиОтправителя.Значение = ПервыйНомерПачки;

	НачислГрн = 0;
	ОтчислГрн = 0;
	БольГрн = 0;
	ИтогГрн = 0;
	БазаГрн = 0;
	
	Для Инд = 1 ПО КоличествоВПачке Цикл
		СтрокаТаблицыСтраниц = ТаблицаСтраницРаздела[Инд - 1];
		Если НЕ СтрокаТаблицыСтраниц.Данные = Неопределено Тогда
			НачислГрн 	= НачислГрн + СтрокаТаблицыСтраниц.Данные.СуммаНач;
			ОтчислГрн 	= ОтчислГрн + СтрокаТаблицыСтраниц.Данные.СуммаУдерж;
			БольГрн 	= БольГрн   + СтрокаТаблицыСтраниц.Данные.БольнВсего;
			ИтогГрн 	= ИтогГрн   + СтрокаТаблицыСтраниц.Данные.ИтогВсего;
			БазаГрн 	= БазаГрн   + СтрокаТаблицыСтраниц.Данные.ПенсВсего;
		КонецЕсли;
	КонецЦикла;	
	
	мЯрлык.Области.НачислГрн.Значение 	  = НачислГрн;
	мЯрлык.Области.ОтчислГрн.Значение 	  = ОтчислГрн;
	мЯрлык.Области.БольГрн.Значение 	  = БольГрн;
	мЯрлык.Области.ИтогГрн.Значение 	  = ИтогГрн;
	мЯрлык.Области.БазаГрн.Значение 	  = БазаГрн;
	
	мЯрлык.Области.ФамОтвтствФормир.Значение 	  = ФИОГлавБуха;
	мЯрлык.Области.КодОтветстЗаФормир.Значение = ИННБухгалтера;	
	
	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	мЯрлык.Области.ДД.Значение 	= ЧастиДатыПодписи.День;
	мЯрлык.Области.ММ.Значение 	= ЧастиДатыПодписи.МесяцЦифрой;
	мЯрлык.Области.ГГГГ.Значение = ЧастиДатыПодписи.Год;
	
КонецПроцедуры

Процедура СформироватьОписаниеПакета()

	Перем ТаблицаСтраницРаздела;
	
	мОписаниеПакета.Области.ЭкземплярПФ.Значение = "X"; 
	
	мОписаниеПакета.Области.КодОтправителя.Значение = КодЕДРПОУ;
	мОписаниеПакета.Области.НазваниеОтправителя.Значение = Организация.Наименование;
	
	СтрокаИНДАНИ = мДеревоСтраницОтчета.Строки.Найти("ИндВедомости");
	Если СтрокаИНДАНИ = Неопределено Тогда
		ПечатаемИНДАНИ = Ложь;
	Иначе
		ПечатаемИНДАНИ = СтрокаИНДАНИ.ВыводНаПечать;
	КонецЕсли;
	
	СтрокаСП = мДеревоСтраницОтчета.Строки.Найти("СписокЛиц");
	Если СтрокаСП = Неопределено Тогда
		ПечатаемСП = Ложь;
	Иначе
		ПечатаемСП = СтрокаСП.ВыводНаПечать;
	КонецЕсли;
	
	СтрокаБСВ = мДеревоСтраницОтчета.Строки.Найти("СписокЛьготников");
	Если СтрокаБСВ = Неопределено Тогда
		ПечатаемБСВ = Ложь;
	Иначе
		ПечатаемБСВ = СтрокаБСВ.ВыводНаПечать;
	КонецЕсли;

	Если ПечатаемИНДАНИ Тогда
		
		Если Не мСтруктураМногостраничныхРазделов.Свойство("ИндВедомости", ТаблицаСтраницРаздела) Тогда
			Возврат;
		КонецЕсли;
	
		КоличествоВсегоИНДАНИ = ТаблицаСтраницРаздела.Количество();
		НачислГрн = 0;
		ОтчислГрн = 0;
		БольГрн = 0;
		ИтогГрн = 0;
		БазаГрн = 0;
		Для Инд = 1 ПО КоличествоВсегоИНДАНИ Цикл
			СтрокаТаблицыСтраниц = ТаблицаСтраницРаздела[Инд - 1];
			Если НЕ СтрокаТаблицыСтраниц.Данные = Неопределено Тогда
				НачислГрн 	= НачислГрн + СтрокаТаблицыСтраниц.Данные.СуммаНач;
				ОтчислГрн 	= ОтчислГрн + СтрокаТаблицыСтраниц.Данные.СуммаУдерж;
				БольГрн 	= БольГрн   + СтрокаТаблицыСтраниц.Данные.БольнВсего;
				ИтогГрн 	= ИтогГрн   + СтрокаТаблицыСтраниц.Данные.ИтогВсего;
				БазаГрн 	= БазаГрн   + СтрокаТаблицыСтраниц.Данные.ПенсВсего;
			КонецЕсли;
		КонецЦикла;	
		
		мОписаниеПакета.Области.НачислГрн.Значение 	  = НачислГрн;
		мОписаниеПакета.Области.ОтчислГрн.Значение 	  = ОтчислГрн;
		мОписаниеПакета.Области.БольГрн.Значение 	  = БольГрн;
		мОписаниеПакета.Области.ИтогГрн.Значение 	  = ИтогГрн;
		мОписаниеПакета.Области.БазаГрн.Значение 	  = БазаГрн;
	
		// 1*25 на пачку
		КоличествоПачекИНДАИ = Цел(КоличествоВсегоИНДАНИ/25) + ?(КоличествоВсегоИНДАНИ%25 = 0, 0, 1);
		мОписаниеПакета.Области.КолЛистовИнд.Значение =  КоличествоВсегоИНДАНИ + КоличествоПачекИНДАИ;	
		мОписаниеПакета.Области.КолПачекИнд.Значение  =  КоличествоПачекИНДАИ;	
	
	КонецЕсли;
	
	Если ПечатаемСП Тогда
	
		// 10*4 на пачку
		СтруктураГруппыСП = "";
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппыСП);
		КоличествоВсегоСП = СтруктураГруппыСП.Количество();
		КоличествоПачекСП = Цел(КоличествоВсегоСП/40) + ?(КоличествоВсегоСП%40 = 0, 0, 1);
		КоличествоЛистовСП = Цел(КоличествоВсегоСП/10) + ?(КоличествоВсегоСП%10 = 0, 0, 1);
		мОписаниеПакета.Области.КолЛистовСП.Значение =  КоличествоЛистовСП + КоличествоПачекСП;	
		мОписаниеПакета.Области.КолПачекСП.Значение  =  КоличествоПачекСП;	
	
	КонецЕсли;
	
	Если ПечатаемБСВ Тогда
		// 12*4 на пачку
		СтруктураГруппыБСВ = "";
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2, СтруктураГруппыБСВ);
		КоличествоВсегоБСВ = СтруктураГруппыБСВ.Количество();
		КоличествоПачекБСВ = Цел(КоличествоВсегоБСВ/48) + ?(КоличествоВсегоБСВ%48 = 0, 0, 1);
		КоличествоЛистовБСВ = Цел(КоличествоВсегоБСВ/12) + ?(КоличествоВсегоБСВ%12 = 0, 0, 1);
		мОписаниеПакета.Области.КолЛистовБСВ.Значение = КоличествоЛистовБСВ + КоличествоПачекБСВ;	
		мОписаниеПакета.Области.КолПачекБСВ.Значение  =  КоличествоПачекБСВ;	
		
	КонецЕсли;
		
	мОписаниеПакета.Области.ФамОтвтствФормир.Значение 	   = ФИОГлавБуха;
	мОписаниеПакета.Области.КодОтветстЗаФормир.Значение = ИННБухгалтера;
	
	мОписаниеПакета.Области.Директор.Значение 	           = ФИОДиректора;
	
	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	мОписаниеПакета.Области.ДД.Значение 	= ЧастиДатыПодписи.День;
	мОписаниеПакета.Области.ММ.Значение 	= ЧастиДатыПодписи.МесяцЦифрой;
	мОписаниеПакета.Области.ГГГГ.Значение 	= ЧастиДатыПодписи.Год;

	Расчет();
	
КонецПроцедуры

//Процедура сформироватьСписокЛьготников
//автозаполнение временно не реализовано в связи с отсутствием спецобъектов по учету стаха в ПФ
//без уплаты взносов
Процедура СформироватьСписокЛьготников()
	
	мСписокЛьготников.Области.КодСтрахователя.Значение = КодЕДРПОУ;
	мСписокЛьготников.Области.Организация.Значение = Организация.НаименованиеПолное;
	мСписокЛьготников.Области.ОргДиректор.Значение = ФИОДиректора;
	мСписокЛьготников.Области.ГодОтчета.Значение = Формат(Год(мДатаНачалаПериодаОтчета), "ЧГ=");
	
	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	
	мСписокЛьготников.Области.ДД.Значение 	= ЧастиДатыПодписи.День;
	мСписокЛьготников.Области.ММ.Значение 	= ЧастиДатыПодписи.МесяцЦифрой;
	мСписокЛьготников.Области.ГГГГ.Значение = ЧастиДатыПодписи.Год;
	
	мСписокЛьготников.Области.Н.Значение = "Х";
	
КонецПроцедуры // СформироватьСписокЛьготников()

//Процедура СформироватьСписокРаботавших
Процедура  СформироватьСписокРаботавших(ТолькоПринятые = Ложь)
	перем Работавшие, СтруктураГруппы;
	
	Работавшие = ПолучитьСписокЛиц(ТолькоПринятые);
	Номер = 0;
	КвоЗап = 1;
	ФизЛицоПред = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	мСписокЛиц.Области.КодСтрахователя.Значение = КодЕДРПОУ;
	мСписокЛиц.Области.Организация.Значение = Организация.НаименованиеПолное;
	мСписокЛиц.Области.ОргДиректор.Значение = ФИОДиректора;
	
	
	Для Каждого стр ИЗ Работавшие Цикл
		Если стр.Физлицо <> ФизЛицоПред Тогда
			Если (Номер > 0) Тогда
				ВставитьДополнительнуюСтроку();
				КвоЗап = КвоЗап + 1;
			Иначе
				Попытка
					мСписокЛиц.Области.Ном.Значение = 1;
				Исключение
				КонецПопытки;
			КонецЕсли;
			мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы);
			КолСтрок = СтруктураГруппы.Количество();
			ИмяНужнойЯчейкиНовойСтроки = СтруктураГруппы.Колонки[0].Имя + Формат(КолСтрок,"ЧЦ=4;ЧВН=0;ЧГ=;");
			// область первой ячейки последней строки многострочного раздела
			ОбластьЯчейки = мСписокЛиц.Области[ИмяНужнойЯчейкиНовойСтроки];
			
			ОбластьЯчейки.Значение = стр.ФизЛицо.КодПоДРФО;
			
			
			ИмяНужнойЯчейкиНовойСтроки = СтруктураГруппы.Колонки[1].Имя + Формат(КолСтрок,"ЧЦ=4;ЧВН=0;ЧГ=;");
			ОбластьЯчейки = мСписокЛиц.Области[ИмяНужнойЯчейкиНовойСтроки];
			ОбластьЯчейки.Значение = стр.Фамилия;
			
			ИмяНужнойЯчейкиНовойСтроки = СтруктураГруппы.Колонки[2].Имя + Формат(КолСтрок,"ЧЦ=4;ЧВН=0;ЧГ=;");
			ОбластьЯчейки = мСписокЛиц.Области[ИмяНужнойЯчейкиНовойСтроки];
			ОбластьЯчейки.Значение = стр.Имя;
			
			ИмяНужнойЯчейкиНовойСтроки = СтруктураГруппы.Колонки[3].Имя + Формат(КолСтрок,"ЧЦ=4;ЧВН=0;ЧГ=;");
			ОбластьЯчейки = мСписокЛиц.Области[ИмяНужнойЯчейкиНовойСтроки];
			ОбластьЯчейки.Значение = стр.Отчество;
			
			Если Не Стр.ФизЛицо.ДатаРождения = '00010101' Тогда 
				СтруктураГруппы[КолСтрок - 1]["ДатаРожд"] = стр.Физлицо.ДатаРождения;
			Иначе
				Сообщить(Нстр("ru='Для Сотрудника';uk='Для співробітника'")+ стр.Фамилия +" "+ стр.Имя + " " + стр.Отчество + Нстр("ru=' не заполнена Дата рождения в справочнике ""ФизическиеЛица"" ';uk=' не заповнена дата народження у довіднику ""Фізичні Особи""'") ,СтатусСообщения.ОченьВажное);				
			КонецЕсли;	 
			Если Стр.ФизЛицо.Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
				СтруктураГруппы[КолСтрок - 1]["Пол"] = "Чоловічий";
			ИначеЕсли Стр.ФизЛицо.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
				СтруктураГруппы[КолСтрок - 1]["Пол"]  = "Жіночий";
			Иначе 
				Сообщить(Нстр("ru='Для Сотрудника';uk='Для співробітника'") + стр.Фамилия +" "+ стр.Имя + " " + стр.Отчество + Нстр("ru=' не заполнен Пол в справочнике ""ФизическиеЛица"" ';uk=' не заповнена стать у довіднику ""Фізичні Особи""'" ),СтатусСообщения.ОченьВажное);				
			КонецЕсли;	
			
			Запрос = Новый Запрос;			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			 |	РаботникиОрганизаций.Период КАК Период ,
			 |	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
			 |	РаботникиОрганизаций.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния
			 |ИЗ
			 |	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			 |  ГДЕ
			 |	РаботникиОрганизаций.Сотрудник.ФизЛицо = &ФизЛицо И РаботникиОрганизаций.Сотрудник.ВидЗанятости<>&Парам";

			Запрос.УстановитьПараметр("ФизЛицо",Стр.ФизЛицо);
			Запрос.УстановитьПараметр("Парам",Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
						
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
					ДатаУвольнения = Выборка.Период;
					СтруктураГруппы[КолСтрок - 1]["ДатаУвольнения"]= ДатаУвольнения;
				Конецесли;
				
				Если Выборка.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу Тогда
					ДатаПриема = Выборка.Период;
					СтруктураГруппы[КолСтрок - 1]["ДатаПриема"]= ДатаПриема;
				КонецЕсли;                               
				
			КонецЦикла;	   	
			
			ФизЛицоПред = стр.ФизЛицо;
			
			Номер = Номер + 1;
		Иначе	
			Продолжить;
		КонецЕсли;	 
		
	КонецЦикла;
	
	ОбновитьСтруктуруМногострочныхРазделов();	
	
	мСписокЛиц.Области.КвоЗап.Значение = КвоЗап;
	
	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	
	мСписокЛиц.Области.ДД.Значение 		= ЧастиДатыПодписи.День;
	мСписокЛиц.Области.ММ.Значение 		= ЧастиДатыПодписи.МесяцЦифрой;
	мСписокЛиц.Области.ГГГГ.Значение 	= ЧастиДатыПодписи.Год;
	
КонецПроцедуры	

Процедура СформироватьИндивВедомости(ОбъектЗаполнения, ИспользоватьТекущуюСтраницу = Ложь)
	
	перем ТаблицаСтраницРаздела;
	перем ставкаФОТ;
	перем ставкаСотр;
	
	мСтруктураМногостраничныхРазделов.Свойство("ИндВедомости", ТаблицаСтраницРаздела);
	
	//определяем размер ставки на ФОТ
	//с 2006 года - она одна для всех категорий застр. лиц
	СпрНалоги = Справочники.Налоги;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|НалогиОсн.Налог  КАК Налог, 
	|НалогиОсн.Ставка КАК Ставка
	|ИЗ
	|РегистрСведений.ШкалаСтавокНалогов.СрезПоследних (&Дата) КАК НалогиОсн
	|ГДЕ 
	|(НалогиОсн.Налог = &ФЗППенс Или НалогиОсн.Налог = &ФЗППенсИнв )
	|";
	
	ЗапросЗначенияСтавок = Новый Запрос;
	ЗапросЗначенияСтавок.Текст = ТекстЗапроса;
	ЗапросЗначенияСтавок.УстановитьПараметр("Организация",Организация);
	ЗапросЗначенияСтавок.УстановитьПараметр("Дата", мДатаНачалаПериодаОтчета);
	ЗапросЗначенияСтавок.УстановитьПараметр("ФЗППенс",СпрНалоги.ПенсионныйФОТ);
	ЗапросЗначенияСтавок.УстановитьПараметр("ФЗППенсИнв",СпрНалоги.ПенсионныйФОТИнв);
	
	РезультатЗапроса = ЗапросЗначенияСтавок.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаСтавок = РезультатЗапроса.Выгрузить();
		НайденнаяСтрока = ТаблицаСтавок.Найти (СпрНалоги.ПенсионныйФОТ,"Налог" ); 
		ставкаФОТ = НайденнаяСтрока.Ставка;
	КонецЕсли;
	
	Если Год(мДатаНачалаПериодаОтчета) < 2007 Тогда
		ставкаСотр = "1-5";
	Иначе
		ставкаСотр = "0,5-5";
	КонецЕсли;
	
	МинЗП = ПолучитьМинимальнуюЗарплату();
	
	масФизЛицо = Новый Массив;
	
	Если ТипЗнч(ОбъектЗаполнения) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		масФизЛицо.Добавить(ОбъектЗаполнения);
		
	Иначе	
		
		РаботникиОрганизации = ЗаполнениеРаботникиОрганизации(ОбъектЗаполнения);
		
		Для каждого СтрокаРаботники Из РаботникиОрганизации Цикл
			масФизЛицо.Добавить(СтрокаРаботники.ФизЛицо);
		КонецЦикла; 
		
	КонецЕсли;
	ЗапросПриемУвольнение = Новый Запрос;
	ЗапросПриемУвольнение.Текст = "ВЫБРАТЬ
	                              |	ЕСТЬNULL(Прием.ФизЛицо, Увольнение.ФизЛицо) КАК ФизЛицо,
	                              |	Прием.ДатаПриема КАК ДатаПриема,
	                              |	Увольнение.ДатаУвольнения КАК ДатаУвольнения
	                              |ИЗ
	                              |	(ВЫБРАТЬ
	                              |		Прием.Сотрудник.Физлицо КАК ФизЛицо,
	                              |		МИНИМУМ(Прием.ДатаПриема) КАК ДатаПриема
	                              |	ИЗ
	                              |		Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Прием
	                              |	ГДЕ
	                              |		Прием.Сотрудник.Физлицо В(&парамФизлицо)
	                              |		И Прием.Ссылка.Организация = &парамОрганизация
	                              |		И (НЕ Прием.Сотрудник.ВидЗанятости = &ВнутреннееСовместительство)
	                              |		И Прием.ДатаПриема МЕЖДУ &парамНачало И &парамКонец
	                              |		И Прием.Ссылка.Проведен
	                              |	
	                              |	СГРУППИРОВАТЬ ПО
	                              |		Прием.Сотрудник.Физлицо) КАК Прием
	                              |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |			Увольнение.Сотрудник.Физлицо КАК ФизЛицо,
	                              |			МАКСИМУМ(Увольнение.ДатаУвольнения) КАК ДатаУвольнения
	                              |		ИЗ
	                              |			Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Увольнение
	                              |		ГДЕ
	                              |			Увольнение.Сотрудник.Физлицо В(&парамФизлицо)
	                              |			И Увольнение.Ссылка.Организация = &парамОрганизация
	                              |			И (НЕ Увольнение.Сотрудник.ВидЗанятости = &ВнутреннееСовместительство)
	                              |			И Увольнение.ДатаУвольнения МЕЖДУ &парамНачало И &парамКонец
	                              |			И Увольнение.Ссылка.Проведен
	                              |		
	                              |		СГРУППИРОВАТЬ ПО
	                              |			Увольнение.Сотрудник.Физлицо) КАК Увольнение
	                              |		ПО (Увольнение.ФизЛицо = Прием.ФизЛицо)";
	
	ЗапросПриемУвольнение.УстановитьПараметр("парамНачало", 	мДатаНачалаПериодаОтчета );
	ЗапросПриемУвольнение.УстановитьПараметр("парамКонец",  	мДатаКонцаПериодаОтчета  );
	ЗапросПриемУвольнение.УстановитьПараметр("парамФизлицо", 	масФизЛицо);
	ЗапросПриемУвольнение.УстановитьПараметр("парамОрганизация",Организация );	
	ЗапросПриемУвольнение.УстановитьПараметр("ВнутреннееСовместительство",Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);	
   	РаботникиПриемУвольнение = ЗапросПриемУвольнение.Выполнить().Выгрузить();
	
	ЗапросРаботникиНаНачало = Новый Запрос;
	ЗапросРаботникиНаНачало.УстановитьПараметр("ДатаНач", Новый Граница(мДатаНачалаПериодаОтчета-1,ВидГраницы.Включая));
	ЗапросРаботникиНаНачало.УстановитьПараметр("парамФизлицо", 	масФизЛицо);
	ЗапросРаботникиНаНачало.УстановитьПараметр("Организация", Организация);
	ЗапросРаботникиНаНачало.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Сотрудник,
	                                |	ВЫБОР
	                                |		КОГДА СУММА(РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок) > 0
	                                |			ТОГДА ИСТИНА
	                                |		ИНАЧЕ ЛОЖЬ
	                                |	КОНЕЦ КАК Работал
	                                |ИЗ
	                                |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	                                |			&ДатаНач,
	                                |			Организация = &Организация
	                                |				И Сотрудник.Физлицо В (&парамФизлицо)) КАК РаботникиОрганизацийСрезПоследних
	                                |
	                                |СГРУППИРОВАТЬ ПО
	                                |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо";
	РаботникиНаНачало = ЗапросРаботникиНаНачало.Выполнить().Выгрузить();
	
	ЗапросРаботникиНаКонец = Новый Запрос;
	ЗапросРаботникиНаКонец.УстановитьПараметр("ДатаКон", Новый Граница(мДатаКонцаПериодаОтчета+1,ВидГраницы.Включая));
	ЗапросРаботникиНаКонец.УстановитьПараметр("Организация", Организация);
	ЗапросРаботникиНаКонец.УстановитьПараметр("парамФизлицо", 	масФизЛицо);
	ЗапросРаботникиНаКонец.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                               |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо,
	                               |	ВЫБОР
	                               |		КОГДА СУММА(РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок) > 0
	                               |			ТОГДА ИСТИНА
	                               |		ИНАЧЕ ЛОЖЬ
	                               |	КОНЕЦ КАК Работал
	                               |ИЗ
	                               |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	                               |			&ДатаКон,
	                               |			Организация = &Организация
	                               |				И Сотрудник.Физлицо В (&парамФизлицо)) КАК РаботникиОрганизацийСрезПоследних
	                               |
	                               |СГРУППИРОВАТЬ ПО
	                               |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо";
	РаботникиНаКонец = ЗапросРаботникиНаКонец.Выполнить().Выгрузить();

	ЗапросОсновноеМестоРаботы = Новый Запрос;
	ЗапросОсновноеМестоРаботы.УстановитьПараметр("ДатаКон", Новый Граница(мДатаКонцаПериодаОтчета+1,ВидГраницы.Включая));
	ЗапросОсновноеМестоРаботы.УстановитьПараметр("Организация", Организация);
	ЗапросОсновноеМестоРаботы.УстановитьПараметр("парамФизлицо", 	масФизЛицо);
	ЗапросОсновноеМестоРаботы.УстановитьПараметр("парамОсновноеМестоРаботы", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	
	ЗапросОсновноеМестоРаботы.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                  |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо
	                                  |ИЗ
	                                  |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	                                  |			&ДатаКон,
	                                  |			Организация = &Организация
	                                  |				И Сотрудник.Физлицо В (&парамФизлицо)
	                                  |				И Сотрудник.ВидЗанятости = &парамОсновноеМестоРаботы) КАК РаботникиОрганизацийСрезПоследних
	                                  |ГДЕ
	                                  |	РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок > 0";
	ТаблицаОсновноеМестоРаботы = ЗапросОсновноеМестоРаботы.Выполнить().Выгрузить();
	
	
	ЗапросИнвалидыТекст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	Инвалиды.Физлицо КАК ФизЛицо,
	                      |	Инвалиды.Период КАК Период,
	                      |	Инвалиды.Инвалидность КАК Инвалид
	                      |ИЗ
	                      |	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&парамКонец, ) КАК Инвалиды
	                      |ГДЕ
	                      |	Инвалиды.Инвалидность";
	
	ЗапросИнвалиды = Новый Запрос(ЗапросИнвалидыТекст);
	ЗапросИнвалиды.УстановитьПараметр("парамКонец",мДатаКонцаПериодаОтчета);
	ИнвалидыТабл = ЗапросИнвалиды.Выполнить().Выгрузить();
	
	ЗапросТекст = "ВЫБРАТЬ
	|	НачалоПериода(ВзносыВФонды.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
	|	ВзносыВФонды.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	СУММА(ВЫБОР
	|			КОГДА (ВзносыВФонды.ВидРасчета = &ПенсионныйСотрудник ИЛИ ВзносыВФонды.ВидРасчета = &ПенсионныйСотрудник2007)
	|				ТОГДА ВзносыВФонды.База
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК БазаСотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ВзносыВФонды.ВидРасчета = &ПенсионныйФОТ
	|					ИЛИ ВзносыВФонды.ВидРасчета = &ПенсионныйФОТДекрет
	|				ТОГДА ВзносыВФонды.База
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК БазаФОТ,
	|	СУММА(ВЫБОР
	|			КОГДА (ВзносыВФонды.ВидРасчета = &ПенсионныйСотрудник ИЛИ ВзносыВФонды.ВидРасчета = &ПенсионныйСотрудник2007)
	|				ТОГДА ВзносыВФонды.БазаВзноса
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК БазаВзносаСотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ВзносыВФонды.ВидРасчета = &ПенсионныйФОТ
	|					ИЛИ ВзносыВФонды.ВидРасчета = &ПенсионныйФОТДекрет
	|				ТОГДА ВзносыВФонды.БазаВзноса
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК БазаВзносаФОТ,
	|	СУММА(ВЫБОР
	|			КОГДА (ВзносыВФонды.ВидРасчета = &ПенсионныйСотрудник ИЛИ ВзносыВФонды.ВидРасчета = &ПенсионныйСотрудник2007)
	|				ТОГДА ВзносыВФонды.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РезультатСотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ВзносыВФонды.ВидРасчета = &ПенсионныйФОТ
	|					ИЛИ ВзносыВФонды.ВидРасчета = &ПенсионныйФОТДекрет
	|				ТОГДА ВзносыВФонды.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РезультатФОТ
	|ИЗ
	|	РегистрРасчета.ВзносыВФонды КАК ВзносыВФонды
	|ГДЕ
	|	ВзносыВФонды.ДатаНачала МЕЖДУ &начПериод И &конПериод
	|	И (ВзносыВФонды.ВидРасчета = &ПенсионныйСотрудник
	|			ИЛИ ВзносыВФонды.ВидРасчета = &ПенсионныйСотрудник2007
	|			ИЛИ ВзносыВФонды.ВидРасчета = &ПенсионныйФОТ
	|			ИЛИ ВзносыВФонды.ВидРасчета = &ПенсионныйФОТДекрет)
	|	И ВзносыВФонды.Сотрудник.ФизЛицо В(&парамФизЛицо)
	//|	И ВзносыВФонды.Результат <> 0
	| И ВзносыВФонды.Организация = &парамОрганизация
	|
	|СГРУППИРОВАТЬ ПО
	|	НачалоПериода(ВзносыВФонды.ДатаНачала, МЕСЯЦ),
	|	ВзносыВФонды.Сотрудник.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВзносыВФонды.Сотрудник.ФизЛицо.Наименование,
	|	НачалоПериода(ВзносыВФонды.ДатаНачала, МЕСЯЦ)
	|ИТОГИ
	|	СУММА(БазаСотрудник),
	|	СУММА(БазаФОТ),
	|	СУММА(БазаВзносаСотрудник),
	|	СУММА(БазаВзносаФОТ),
	|	СУММА(РезультатСотрудник),
	|	СУММА(РезультатФОТ)
	|ПО
	|	ФизЛицо";
	
	ЗапросФонды = Новый Запрос(ЗапросТекст);
	ЗапросФонды.УстановитьПараметр("начПериод",					НачалоДня(мДатаНачалаПериодаОтчета));
	ЗапросФонды.УстановитьПараметр("конПериод" , 				КонецДня(мДатаКонцаПериодаОтчета));
	ЗапросФонды.УстановитьПараметр("ПенсионныйФОТ", 			ПланыВидовРасчета.ВзносыВФонды.ПенсионныйФОТ20050101);
	ЗапросФонды.УстановитьПараметр("ПенсионныйФОТДекрет", 		ПланыВидовРасчета.ВзносыВФонды.ПенсионныйСДекретных20050101);
	ЗапросФонды.УстановитьПараметр("ПенсионныйСотрудник", 		ПланыВидовРасчета.ВзносыВФонды.Пенсионный20050101);
	ЗапросФонды.УстановитьПараметр("ПенсионныйСотрудник2007", 	ПланыВидовРасчета.ВзносыВФонды.Пенсионный20070101);
	ЗапросФонды.УстановитьПараметр("парамФизЛицо", 				масФизЛицо);
	ЗапросФонды.УстановитьПараметр("парамОрганизация", 			Организация);
	
	ТаблицаФондов = ЗапросФонды.Выполнить().Выгрузить();
	
	ЗапросТекст = "ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизации.ПериодДействия 					КАК ПериодДействия,
	|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо 				КАК ФизЛицо,
	|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо.КодПоДРФО 	КАК КодПоДРФО,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо.Пол = &Мужчина
	|			ТОГДА ""Ч""
	|		ИНАЧЕ ""Ж""
	|	КОНЕЦ) КАК Пол,
	|	СУММА(ВЫБОР
	|			КОГДА   ОсновныеНачисленияРаботниковОрганизации.ВидРасчета = &ВРБольничные1
	|				ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета = &ВРБольничные2
	|				ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета = &ВРБольничные3
	|				ТОГДА ОсновныеНачисленияРаботниковОрганизации.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБольничные,
	|	МИНИМУМ(ОсновныеНачисленияРаботниковОрганизации.ПериодДействияНачало) КАК ДатаПриема,
	|	МАКСИМУМ(ОсновныеНачисленияРаботниковОрганизации.ПериодДействияКонец) КАК ДатаУвольнения,
	|	МИНИМУМ(ВЫБОР 
	|				КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета = &ВРБеременностьИРоды 
	|					ТОГДА ОсновныеНачисленияРаботниковОрганизации.ПериодДействияНачало
	|				ИНАЧЕ
	|					NULL
	|				КОНЕЦ) КАК ДатаНачалаБиР,
	|	МАКСИМУМ(ВЫБОР 
	|				КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета = &ВРБеременностьИРоды 
	|					ТОГДА ОсновныеНачисленияРаботниковОрганизации.ПериодДействияКонец
	|				ИНАЧЕ
	|					NULL
	|				КОНЕЦ) КАК ДатаОкончанияБиР,
	|	МАКСИМУМ(ФИОФизЛицСрезПоследних.Фамилия) КАК Фамилия,
	|	МАКСИМУМ(ФИОФизЛицСрезПоследних.Имя) КАК Имя,
	|	МАКСИМУМ(ФИОФизЛицСрезПоследних.Отчество) КАК Отчество,
	|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо.ДатаРождения КАК ДатаРождения
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&конПериод) КАК ФИОФизЛицСрезПоследних
	|		ПО ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизации.ПериодДействия МЕЖДУ &начПериод И &конПериод
	|	И ОсновныеНачисленияРаботниковОрганизации.Результат <> 0
	|	И ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо В(&парамФизЛицо)
	|	И ОсновныеНачисленияРаботниковОрганизации.ВидРасчета <> &ВидРасчетаПособие
	|	И ОсновныеНачисленияРаботниковОрганизации.Организация = &парамОрганизация
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисленияРаботниковОрганизации.ПериодДействия,
	|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо.Наименование,
	|	ПериодДействия
	|ИТОГИ
	|	СУММА(СуммаБольничные),
	|	МИНИМУМ(ДатаНачалаБиР),
	|	МАКСИМУМ(ДатаОкончанияБиР),
	|	МИНИМУМ(ДатаПриема),
	|	МАКСИМУМ(ДатаУвольнения)
	|ПО
	|	ФизЛицо";
	
	Запрос = Новый Запрос(ЗапросТекст);
	Запрос.УстановитьПараметр("начПериод",НачалоДня(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("конПериод" , КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамФизЛицо", масФизЛицо);
	Запрос.УстановитьПараметр("ВРБольничные1", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ);
	Запрос.УстановитьПараметр("ВРБольничные2", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛОрганизации);
	Запрос.УстановитьПараметр("ВРБольничные3", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве);
	Запрос.УстановитьПараметр("ВРБеременностьИРоды", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам);
	Запрос.УстановитьПараметр("Мужчина", Перечисления.ПолФизическихЛиц.Мужской);
	Запрос.УстановитьПараметр("ВидРасчетаПособие", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоФизЛицам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоФизЛицам.Следующий() Цикл
		ПолнаяБазаСотрудник = 0;
		ПолнаяДнейДляСтажа  = 0;
		
		Состояние(ВыборкаПоФизЛицам.Физлицо);
		ОбработкаПрерыванияПользователя();
		
		Первый = Истина;

		// итоговая строка по ФизЛицу
		НайденнаяСтрока = ТаблицаФондов.НайтиСтроки(Новый Структура("ФизЛицо, ПериодДействия", ВыборкаПоФизЛицам.ФизЛицо.Ссылка, Null));
		Если НайденнаяСтрока.Количество() < 1 Тогда
			сообщить(НСтр("ru='Отсутствуют данные по ';uk='Відсутні дані по '") + ВыборкаПоФизЛицам.ФизЛицо);
			Продолжить;
		Иначе	
			СуммаФОТ 			= НайденнаяСтрока[0].РезультатФОТ;
			СуммаСотрудник 		= НайденнаяСтрока[0].РезультатСотрудник;
			БазаСотрудник 		= НайденнаяСтрока[0].БазаСотрудник;
			БазаВзносаСотрудник = НайденнаяСтрока[0].БазаВзносаСотрудник;
			НайдСтрока = ИнвалидыТабл.НайтиСтроки(Новый Структура("ФизЛицо", ВыборкаПоФизЛицам.ФизЛицо.Ссылка));
			Если НайдСтрока.Количество() < 1 Тогда
				КодКатегории = "1"; 
				НазвКатегории = "Найманий працівник на заг.підставах";
				НайденнаяСтрока = ТаблицаСтавок.Найти (СпрНалоги.ПенсионныйФОТ,"Налог" ); 
				ставкаФОТ = НайденнаяСтрока.Ставка;
			Иначе	
				КодКатегории = "2";
				НазвКатегории = "Працюючий інвалід";
				НайденнаяСтрока = ТаблицаСтавок.Найти (СпрНалоги.ПенсионныйФОТИнв,"Налог" ); 
				ставкаФОТ = НайденнаяСтрока.Ставка;  
			КонецЕсли;
		КонецЕсли;
		
		// даты приема/увольнения
		ДатаПриема 	   = мДатаНачалаПериодаОтчета;
		ДатаУвольнения = мДатаКонцаПериодаОтчета;
		ДанныеНаНачало = РаботникиНаНачало.Найти(ВыборкаПоФизЛицам.Физлицо);
		ПриемУвольнениеВПериоде  = РаботникиПриемУвольнение.Найти(ВыборкаПоФизЛицам.Физлицо);
		ДанныеНаКонец  = РаботникиНаКонец.Найти(ВыборкаПоФизЛицам.Физлицо);
		Если    ДанныеНаНачало = Неопределено
			ИЛИ ДанныеНаНачало.Работал = Ложь Тогда
		
			Если НЕ ПриемУвольнениеВПериоде = Неопределено Тогда
				ДатаПриема = ПриемУвольнениеВПериоде.ДатаПриема;	
			КонецЕсли;			
		
		КонецЕсли; 
		Если    ДанныеНаКонец = Неопределено
			ИЛИ ДанныеНаКонец.Работал = Ложь Тогда
		
			Если НЕ ПриемУвольнениеВПериоде = Неопределено Тогда
				ДатаУвольнения = ПриемУвольнениеВПериоде.ДатаУвольнения;	
			КонецЕсли;			
		
		КонецЕсли; 
		ДатПриема 	  = формат(ДатаПриема, 	   "ДФ=yyyyMMdd");
		ДатУвольнения = формат(ДатаУвольнения, "ДФ=yyyyMMdd");         		
		
		ПолныхМесяцев 	= 0; 
		ПолныхДней 		= 0;
		
		Выборка = ВыборкаПоФизЛицам.Выбрать();
		Выборка.Следующий();
		
		Для НомМесяца = 1 По 12 Цикл
			
			ТекМесяц = НачалоМесяца(ДобавитьМесяц(мДатаНачалаПериодаОтчета, НомМесяца -1));
			
			Если Первый Тогда
				
				Если ИспользоватьТекущуюСтраницу Тогда
					ИспользоватьТекущуюСтраницу = Ложь;
				Иначе
					ИзменитьТаблицуПараметровАвтозаполнения(1);
					ВставитьДополнительнуюСтраницу("ИндВедомости");	
				КонецЕсли;
				
				мИндВедомости.Области.ИНН.Значение = Выборка.КодПоДРФО;
				мИндВедомости.Области.Фамилия.Значение = Выборка.Фамилия;
				мИндВедомости.Области.Имя.Значение = Выборка.Имя;
				мИндВедомости.Области.Отч.Значение = Выборка.Отчество;
				мИндВедомости.Области.РазмерСтавкиНач.Значение = ставкаФОТ * 100;
				мИндВедомости.Области.РазмерСтавкиУдерж.Значение = ставкаСотр;
				мИндВедомости.Области.КодКатегории.Значение = КодКатегории;
				мИндВедомости.Области.НазваниеКатегории.Значение = НазвКатегории;
				мИндВедомости.Области.КодОбъекта.Значение = "1";
				мИндВедомости.Области.НазваниеОбъектаНачисленияВзносов.Значение = "Оплата праці та лікарняні";
				мИндВедомости.Области.СуммаНач.Значение = СуммаФОТ;
				мИндВедомости.Области.СуммаУдерж.Значение = СуммаСотрудник;
				мИндВедомости.Области.Организация.Значение = Организация.НаименованиеПолное;
				мИндВедомости.Области.П32.Значение = ТаблицаСтраницРаздела.Количество();
					
				Первый = Ложь;
				
			КонецЕсли;
				
			НайденнаяСтрока = ТаблицаФондов.НайтиСтроки(Новый Структура("ФизЛицо, ПериодДействия", ВыборкаПоФизЛицам.ФизЛицо.Ссылка, ТекМесяц));
			Префикс = "" + Месяц(ТекМесяц);
			Если НайденнаяСтрока.Количество() > 0 Тогда
				//НайденнаяСтрока[0].
				мИндВедомости.Области["Мес"+Префикс+"Всего"].Значение = формат(НайденнаяСтрока[0].БазаСотрудник, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
				мИндВедомости.Области["Мес"+Префикс+"Пенс"].Значение  = формат(НайденнаяСтрока[0].БазаВзносаСотрудник, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
				мИндВедомости.Области["Мес"+Префикс+"Удерж"].Значение = формат(НайденнаяСтрока[0].РезультатСотрудник, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
				
				ПолнаяБазаСотрудник = ПолнаяБазаСотрудник + НайденнаяСтрока[0].БазаСотрудник;
				
			КонецЕсли;
			
			КоличествоДней = 0;
			Выборка.Сбросить();
			Если Выборка.НайтиСледующий(ТекМесяц, "ПериодДействия") Тогда
				
				мИндВедомости.Области["Мес"+Префикс+"Больн"].Значение = формат(Выборка.СуммаБольничные, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
				
				КоличествоДней = (НачалоДня(Выборка.ДатаУвольнения) - НачалоДня(Выборка.ДатаПриема))/86400 + 1;
				
								
				// исключим из стажа время нахождения в отпуске по беременности и родам
				Если  НЕ Выборка.ДатаНачалаБиР = NULL 
					И НЕ Выборка.ДатаОкончанияБиР = NULL Тогда
					
					КоличествоДнейБиР = (НачалоДня(Выборка.ДатаОкончанияБиР) - НачалоДня(Выборка.ДатаНачалаБиР))/86400 + 1;
				    КоличествоДней = Макс(0, КоличествоДней - КоличествоДнейБиР);
					
				ИначеЕсли КонтролироватьСтаж И День(КонецМесяца(ТекМесяц)) = КоличествоДней  Тогда
					// Проверим, что сумма отчислений в ПФ больше чем от минимальной ЗП
					// иначе уменьшим стаж.
					
					Если  МинЗП.Найти(ТекМесяц).Размер > НайденнаяСтрока[0].БазаСотрудник Тогда
						// будем считать, что сотруднику незаконо платят меньш минимальной ЗП.
						// уменьшим стаж
						// более тонкие случаи не рассматриваем
						КоличествоДней = КоличествоДней 
										 *(НайденнаяСтрока[0].БазаСотрудник * ставкаФОТ) 
	                                     /(МинЗП.Найти(ТекМесяц).Размер 	* ставкаФОТ);
						Сообщить("" + Выборка.Физлицо + " ("+Формат(ТекМесяц,"ДФ=MM.yyyy")+"): " + НСтр("ru = 'сумма начислений меньше минимальной ЗП! Стаж за месяц был уменьшен! '; uk = 'сума нарахувань за місяц менше ніж з мін. ЗП. Стаж за місяц був зменшений!'"));				
					КонецЕсли;
					
				КонецЕсли;
				
				
				мИндВедомости.Области["Мес"+Префикс+"Дней"].Значение  = формат(КоличествоДней, "ЧГ=0; ЧН=");
			
			КонецЕсли;
			
			Если День(КонецМесяца(ТекМесяц)) = КоличествоДней Тогда
				ПолныхМесяцев = ПолныхМесяцев + 1;
			Иначе
				ПолныхДней = ПолныхДней + КоличествоДней;
			КонецЕсли;
			ПолнаяДнейДляСтажа = ПолнаяДнейДляСтажа + КоличествоДней;
			
		КонецЦикла;
		
		Если ПолныхДней > 30 Тогда 
			ПолныхМесяцев = ПолныхМесяцев + Цел(ПолныхДней/30); 
		    ПолныхДней    = ПолныхДней % 30;			 
		КонецЕсли; 
		
		Если НЕ ТаблицаОсновноеМестоРаботы.Найти(ВыборкаПоФизЛицам.Физлицо) = Неопределено Тогда
			мИндВедомости.Области.Пр.Значение	  = "Х";	
		КонецЕсли;
		
		мИндВедомости.Области.Н.Значение = "Х";
		
		мИндВедомости.Области.ИтогВсего.Значение  = формат(ПолнаяБазаСотрудник, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
		мИндВедомости.Области.ПенсВсего.Значение  = формат(БазаВзносаСотрудник, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
		мИндВедомости.Области.БольнВсего.Значение = формат(ВыборкаПоФизЛицам.СуммаБольничные, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
		мИндВедомости.Области.УдержВсего.Значение = формат(СуммаСотрудник, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
		мИндВедомости.Области.ДнейВсего.Значение  = ПолнаяДнейДляСтажа;
		
		ДатПриема     = формат(ДатаПриема, "ДФ=yyyyMMdd");
		ДатУвольнения = формат(ДатаУвольнения, "ДФ=yyyyMMdd");
	
		мИндВедомости.Области.Днач.Значение   = Сред(ДатПриема, 7,2);
		мИндВедомости.Области.МесНач.Значение = Сред(ДатПриема, 5,2);
		мИндВедомости.Области.ГодНач.Значение = Сред(ДатПриема, 1,4);
		
		мИндВедомости.Области.Дкон.Значение   = Сред(ДатУвольнения, 7,2);
		мИндВедомости.Области.МесКон.Значение = Сред(ДатУвольнения, 5,2);
		мИндВедомости.Области.ГодКон.Значение = Сред(ДатУвольнения, 1,4);
		
		мИндВедомости.Области.Мес.Значение  = формат(ПолныхМесяцев, "ЧГ=0; ЧН=");
		мИндВедомости.Области.Дней.Значение = формат(ПолныхДней, "ЧГ=0; ЧН=");
		
		ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
		
		мИндВедомости.Области.ДД.Значение 	= ЧастиДатыПодписи.День;
		мИндВедомости.Области.ММ.Значение 	= ЧастиДатыПодписи.МесяцЦифрой;
		мИндВедомости.Области.ГГГГ.Значение = ЧастиДатыПодписи.Год;
		
		ОбновитьСтруктуруМногостраничныхРазделов();
		
		мИндВедомости.Области.ГодОтчета.Значение = Формат(Год(мДатаНачалаПериодаОтчета),"ЧГ=");
		мИндВедомости.Области.ОргДиректор.Значение = ФИОДиректора;
		мИндВедомости.Области.ОргБухгалтер.Значение = ФИОГлавБуха;
		
	КонецЦикла;
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтранице("ИндВедомости", Ложь);
	
КонецПроцедуры	

//Процедура СформироватьИндивВедомостиБП()
//Формирует Индивидуальные ведломости аналогично СформироватьИндивВедомости() но для случая
//запуска в Бухгалтерии Предприятия
Процедура СформироватьИндивВедомостиБП(ОбъектЗаполнения,ИспользоватьТекущуюСтраницу = Ложь)
	перем ТаблицаСтраницРаздела;
	перем ставкаФОТ;
	перем ставкаСотр;
	
	мСтруктураМногостраничныхРазделов.Свойство("ИндВедомости", ТаблицаСтраницРаздела);	
	
	//определяем размер ставки на ФОТ
	//с 2006 года - она одна для всех категорий застр. лиц
	СпрНалоги = Справочники.Налоги;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|НалогиОсн.Налог  КАК Налог, 
	|НалогиОсн.Ставка КАК Ставка
	|ИЗ
	|РегистрСведений.ШкалаСтавокНалогов.СрезПоследних (&Дата) КАК НалогиОсн
	|ГДЕ 
	|(НалогиОсн.Налог = &ФЗППенс) ИЛИ (НалогиОсн.Налог = &ФЗППенсИнв)  
	|";
	
	ЗапросЗначенияСтавок = Новый Запрос;
	ЗапросЗначенияСтавок.Текст = ТекстЗапроса;
	ЗапросЗначенияСтавок.УстановитьПараметр("Организация",Организация);
	ЗапросЗначенияСтавок.УстановитьПараметр("Дата", мДатаНачалаПериодаОтчета);
	ЗапросЗначенияСтавок.УстановитьПараметр("ФЗППенс",СпрНалоги.ПенсионныйФОТ);
	ЗапросЗначенияСтавок.УстановитьПараметр("ФЗППенсИнв",СпрНалоги.ПенсионныйФОТИнв);

	РезультатЗапроса = ЗапросЗначенияСтавок.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаСтавок = РезультатЗапроса.Выгрузить();
		НайденнаяСтрока = ТаблицаСтавок.Найти (СпрНалоги.ПенсионныйФОТ,"Налог" ); 
		ставкаФОТ = НайденнаяСтрока.Ставка;
	КонецЕсли;
	
	Если Год(мДатаНачалаПериодаОтчета) < 2007 Тогда
		ставкаСотр = "1-5";
	Иначе
		ставкаСотр = "0,5-5";
	КонецЕсли;
	
	МинЗП = ПолучитьМинимальнуюЗарплату();
	
	масФизЛицо = Новый Массив;
	
	Если ТипЗнч(ОбъектЗаполнения) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		масФизЛицо.Добавить(ОбъектЗаполнения);
		
	Иначе	
		
		РаботникиОрганизации = ЗаполнениеРаботникиОрганизации(ОбъектЗаполнения);
		
		Для каждого СтрокаРаботники Из РаботникиОрганизации Цикл
			масФизЛицо.Добавить(СтрокаРаботники.ФизЛицо);
		КонецЦикла; 
		
	КонецЕсли;
	
	ЗапросИнвалидыТекст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	Инвалиды.Физлицо КАК ФизЛицо,
	                      |	Инвалиды.Период КАК Период,
	                      |	Инвалиды.Инвалидность КАК Инвалид
	                      |ИЗ
	                      |	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&парамКонец, ) КАК Инвалиды
	                      |ГДЕ
	                      |	Инвалиды.Инвалидность";
	
	ЗапросИнвалиды = Новый Запрос(ЗапросИнвалидыТекст);
	ЗапросИнвалиды.УстановитьПараметр("парамКонец",мДатаКонцаПериодаОтчета);
	ИнвалидыТабл = ЗапросИнвалиды.Выполнить().Выгрузить();
	
	ЗапросТекст = "ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВзносыВФонды.ДатаНачала, МЕСЯЦ) 					        КАК ПериодДействия,
	|	ВзносыВФонды.Сотрудник.ФизЛицо 											КАК ФизЛицо,
	|	ВзносыВФонды.ДатаОкончания                               				КАК ДатаКонца,
	|	ВзносыВФонды.ДатаНачала													КАК ДатаНачала,
	|	0 						 		КАК Больничные,
	|	СУММА(ВзносыВФонды.База) 		КАК БазаСотрудник,
	|	0 						 		КАК БазаФОТ,
	|	СУММА(ВзносыВФонды.БазаВзноса) 	КАК БазаВзносаСотрудник,
	|	0 						 		КАК БазаВзносаФОТ,
	|	СУММА(ВзносыВФонды.Результат)	КАК РезультатСотрудник,
	|	0 						 		КАК РезультатФОТ
	|ИЗ
	|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Взносы КАК ВзносыВФонды
	|ГДЕ
	|	ВзносыВФонды.ДатаНачала МЕЖДУ &начПериод И &конПериод
	|	И (     ВзносыВФонды.ВидРасчета = &ПенсионныйСотрудник
	|		ИЛИ ВзносыВФонды.ВидРасчета = &ПенсионныйСотрудник2007)
	//|	И ВзносыВФонды.Результат <> 0
	|   И ВзносыВФонды.Ссылка.Проведен = Истина
	|   И ВзносыВФонды.Ссылка.ПометкаУдаления = Ложь
	|	И ВзносыВФонды.Ссылка.Организация = &парамОрганизация  
	|
	|СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(ВзносыВФонды.ДатаНачала, МЕСЯЦ),
	|		ВзносыВФонды.Сотрудник.ФизЛицо,
	|		ВзносыВФонды.ДатаОкончания,
	|		ВзносыВФонды.ДатаНачала
	/////////////////////////////////////////////////////////////////
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВзносыВФонды.ДатаНачала, МЕСЯЦ) 				КАК ПериодДействия,
	|	ВзносыВФонды.Сотрудник.ФизЛицо						    	КАК ФизЛицо,
	|	ВзносыВФонды.ДатаОкончания                          	    КАК ДатаКонца,
	|	ВзносыВФонды.ДатаНачала										КАК ДатаНачала,
	|	0 								КАК Больничные,
	|	0 								КАК БазаСотрудник,
	|	СУММА(ВзносыВФонды.База) 		КАК БазаФОТ,
	|	0 								КАК БазаВзносаСотрудник,
	|	СУММА(ВзносыВФонды.БазаВзноса) 	КАК БазаВзносаФОТ,
	|	0								КАК РезультатСотрудник,
	|	СУММА(ВзносыВФонды.Результат) 	КАК РезультатФОТ
	|ИЗ
	|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ВзносыФОТ КАК ВзносыВФонды
	|ГДЕ
	|	ВзносыВФонды.ДатаНачала МЕЖДУ &начПериод И &конПериод
	|	И (    ВзносыВФонды.ВидРасчета = &ПенсионныйФОТ
	|	   ИЛИ ВзносыВФонды.ВидРасчета = &ПенсионныйФОТДекрет)
	//| И ВзносыВФонды.Результат <> 0
	| И ВзносыВФонды.Ссылка.Проведен = Истина
	| И ВзносыВФонды.Ссылка.ПометкаУдаления = Ложь
	|	И ВзносыВФонды.Ссылка.Организация = &парамОрганизация
	|СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(ВзносыВФонды.ДатаНачала, МЕСЯЦ),
	|		ВзносыВФонды.Сотрудник.ФизЛицо,
	|		ВзносыВФонды.ДатаОкончания,
	|		ВзносыВФонды.ДатаНачала
	/////////////////////////////////////////////////////////////////
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ) 				КАК ПериодДействия,
	|	Начисления.Сотрудник.ФизЛицо						    	КАК ФизЛицо,
	|	Начисления.ДатаОкончания                          	    	КАК ДатаКонца,
	|	Начисления.ДатаНачала										КАК ДатаНачала,
	|	СУММА(Начисления.Результат)	КАК Больничные,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
	|ГДЕ
	|	  Начисления.ДатаНачала МЕЖДУ &начПериод И &конПериод
	|	И Начисления.ВидРасчета В (&Больничные)
	|   И Начисления.Ссылка.Проведен = Истина
	|   И Начисления.Ссылка.ПометкаУдаления = Ложь
	|	И Начисления.Ссылка.Организация = &парамОрганизация
	|СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ),
	|		Начисления.Сотрудник.ФизЛицо,
	|		Начисления.ДатаОкончания,
	|		Начисления.ДатаНачала
	/////////////////////////////////////////////////////////////////
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВзносыВФонды.Сотрудник.ФизЛицо
	|ИТОГИ
	|	СУММА(Больничные),
	|	СУММА(БазаСотрудник),
	|	СУММА(БазаФОТ),
	|	СУММА(БазаВзносаСотрудник),
	|	СУММА(БазаВзносаФОТ),
	|	СУММА(РезультатСотрудник),
	|	СУММА(РезультатФОТ)
	|ПО
	|	ФизЛицо
	|";
	
	ЗапросФонды = Новый Запрос(ЗапросТекст);
	ЗапросФонды.УстановитьПараметр("начПериод",НачалоДня(мДатаНачалаПериодаОтчета));
	ЗапросФонды.УстановитьПараметр("конПериод" , КонецДня(мДатаКонцаПериодаОтчета));
	ЗапросФонды.УстановитьПараметр("ПенсионныйФОТ", 			ПланыВидовРасчета.ВзносыВФонды.ПенсионныйФОТ20050101);
	ЗапросФонды.УстановитьПараметр("ПенсионныйФОТДекрет", 		ПланыВидовРасчета.ВзносыВФонды.ПенсионныйСДекретных20050101);
	ЗапросФонды.УстановитьПараметр("ПенсионныйСотрудник", 		ПланыВидовРасчета.ВзносыВФонды.Пенсионный20050101);
	ЗапросФонды.УстановитьПараметр("ПенсионныйСотрудник2007", 	ПланыВидовРасчета.ВзносыВФонды.Пенсионный20070101);
	ЗапросФонды.УстановитьПараметр("Больничные", 				ТаблицаВРБольничные.ВыгрузитьКолонку("ВидРасчета"));
	ЗапросФонды.УстановитьПараметр("парамОрганизация", 			Организация);
	
	ТаблицаФондов = ЗапросФонды.Выполнить().Выгрузить();

	ЗапросОсновноеМестоРаботы = Новый Запрос;
	ЗапросОсновноеМестоРаботы.УстановитьПараметр("ДатаКон", Новый Граница(мДатаКонцаПериодаОтчета+1,ВидГраницы.Включая));
	ЗапросОсновноеМестоРаботы.УстановитьПараметр("Организация", Организация);
	ЗапросОсновноеМестоРаботы.УстановитьПараметр("парамФизлицо", 	масФизЛицо);
	ЗапросОсновноеМестоРаботы.УстановитьПараметр("парамОсновноеМестоРаботы", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	
	ЗапросОсновноеМестоРаботы.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                  |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо
	                                  |ИЗ
	                                  |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	                                  |			&ДатаКон,
	                                  |			Организация = &Организация
	                                  |				И Сотрудник.Физлицо В (&парамФизлицо)
	                                  |				И Сотрудник.ВидЗанятости = &парамОсновноеМестоРаботы) КАК РаботникиОрганизацийСрезПоследних
	                                  |ГДЕ
	                                  |	РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок > 0";
	ТаблицаОсновноеМестоРаботы = ЗапросОсновноеМестоРаботы.Выполнить().Выгрузить();

	ЗапросПриемУвольнение = Новый Запрос;
	ЗапросПриемУвольнение.Текст = "ВЫБРАТЬ
	                              |	ЕСТЬNULL(Прием.ФизЛицо, Увольнение.ФизЛицо) КАК ФизЛицо,
	                              |	Прием.ДатаПриема КАК ДатаПриема,
	                              |	Увольнение.ДатаУвольнения КАК ДатаУвольнения
	                              |ИЗ
	                              |	(ВЫБРАТЬ
	                              |		Прием.Сотрудник.Физлицо КАК ФизЛицо,
	                              |		МИНИМУМ(Прием.ДатаПриема) КАК ДатаПриема
	                              |	ИЗ
	                              |		Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Прием
	                              |	ГДЕ
	                              |		Прием.Сотрудник.Физлицо В(&парамФизлицо)
	                              |		И Прием.Ссылка.Организация = &парамОрганизация
	                              |		И (НЕ Прием.Сотрудник.ВидЗанятости = &ВнутреннееСовместительство)
	                              |		И Прием.ДатаПриема МЕЖДУ &парамНачало И &парамКонец
	                              |		И Прием.Ссылка.Проведен
	                              |	
	                              |	СГРУППИРОВАТЬ ПО
	                              |		Прием.Сотрудник.Физлицо) КАК Прием
	                              |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |			Увольнение.Сотрудник.Физлицо КАК ФизЛицо,
	                              |			МАКСИМУМ(Увольнение.ДатаУвольнения) КАК ДатаУвольнения
	                              |		ИЗ
	                              |			Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Увольнение
	                              |		ГДЕ
	                              |			Увольнение.Сотрудник.Физлицо В(&парамФизлицо)
	                              |			И Увольнение.Ссылка.Организация = &парамОрганизация
	                              |			И (НЕ Увольнение.Сотрудник.ВидЗанятости = &ВнутреннееСовместительство)
	                              |			И Увольнение.ДатаУвольнения МЕЖДУ &парамНачало И &парамКонец
	                              |			И Увольнение.Ссылка.Проведен
	                              |		
	                              |		СГРУППИРОВАТЬ ПО
	                              |			Увольнение.Сотрудник.Физлицо) КАК Увольнение
	                              |		ПО (Увольнение.ФизЛицо = Прием.ФизЛицо)";
	
	ЗапросПриемУвольнение.УстановитьПараметр("парамНачало", 	мДатаНачалаПериодаОтчета );
	ЗапросПриемУвольнение.УстановитьПараметр("парамКонец",  	мДатаКонцаПериодаОтчета  );
	ЗапросПриемУвольнение.УстановитьПараметр("парамФизлицо", 	масФизЛицо);
	ЗапросПриемУвольнение.УстановитьПараметр("парамОрганизация",Организация );	
	ЗапросПриемУвольнение.УстановитьПараметр("ВнутреннееСовместительство",Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);	
   	РаботникиПриемУвольнение = ЗапросПриемУвольнение.Выполнить().Выгрузить();
	
	ЗапросРаботникиНаНачало = Новый Запрос;
	ЗапросРаботникиНаНачало.УстановитьПараметр("ДатаНач", Новый Граница(мДатаНачалаПериодаОтчета-1,ВидГраницы.Включая));
	ЗапросРаботникиНаНачало.УстановитьПараметр("парамФизлицо", 	масФизЛицо);
	ЗапросРаботникиНаНачало.УстановитьПараметр("Организация", Организация);
	ЗапросРаботникиНаНачало.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Сотрудник,
	                                |	ВЫБОР
	                                |		КОГДА СУММА(РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок) > 0
	                                |			ТОГДА ИСТИНА
	                                |		ИНАЧЕ ЛОЖЬ
	                                |	КОНЕЦ КАК Работал
	                                |ИЗ
	                                |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	                                |			&ДатаНач,
	                                |			Организация = &Организация
	                                |				И Сотрудник.Физлицо В (&парамФизлицо)) КАК РаботникиОрганизацийСрезПоследних
	                                |
	                                |СГРУППИРОВАТЬ ПО
	                                |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо";
	РаботникиНаНачало = ЗапросРаботникиНаНачало.Выполнить().Выгрузить();
	
	ЗапросРаботникиНаКонец = Новый Запрос;
	ЗапросРаботникиНаКонец.УстановитьПараметр("ДатаКон", Новый Граница(мДатаКонцаПериодаОтчета+1,ВидГраницы.Включая));
	ЗапросРаботникиНаКонец.УстановитьПараметр("Организация", Организация);
	ЗапросРаботникиНаКонец.УстановитьПараметр("парамФизлицо", 	масФизЛицо);
	ЗапросРаботникиНаКонец.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                               |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо,
	                               |	ВЫБОР
	                               |		КОГДА СУММА(РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок) > 0
	                               |			ТОГДА ИСТИНА
	                               |		ИНАЧЕ ЛОЖЬ
	                               |	КОНЕЦ КАК Работал
	                               |ИЗ
	                               |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	                               |			&ДатаКон,
	                               |			Организация = &Организация
	                               |				И Сотрудник.Физлицо В (&парамФизлицо)) КАК РаботникиОрганизацийСрезПоследних
	                               |
	                               |СГРУППИРОВАТЬ ПО
	                               |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо";
	РаботникиНаКонец = ЗапросРаботникиНаКонец.Выполнить().Выгрузить();

	ЗапросТекст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо 						КАК ФизЛицо,
	|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо.КодПоДРФО 			КАК КодПоДРФО,
	|   ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ВидЗанятости					КАК ВидЗанятости,
	|	ВЫБОР                                                            	
	|		КОГДА ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо.Пол = &Мужчина
	|			ТОГДА ""Ч""
	|		ИНАЧЕ ""Ж""
	|	КОНЕЦ КАК Пол,
	|	ФИОФизЛицСрезПоследних.Фамилия,                                        	
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо.ДатаРождения 			КАК ДатаРождения
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ОсновныеНачисленияРаботниковОрганизации  
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&конПериод) КАК ФИОФизЛицСрезПоследних
	|		ПО ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизации.ПериодВзаиморасчетов МЕЖДУ &начПериод И &конПериод
	|	И ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо В(&парамФизЛицо)
	|   И ОсновныеНачисленияРаботниковОрганизации.Организация = &парамОрганизация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо.Наименование
	|ИТОГИ
	|	МАКСИМУМ(ВидЗанятости)
	|ПО
	|	ФизЛицо";
	
	Запрос = Новый Запрос(ЗапросТекст);
	Запрос.УстановитьПараметр("начПериод",НачалоДня(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("конПериод" , КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамФизЛицо", масФизЛицо);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("Мужчина", Перечисления.ПолФизическихЛиц.Мужской);
	ВыборкаПоФизЛицам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоФизЛицам.Следующий() Цикл 
		
		Состояние(ВыборкаПоФизЛицам.Физлицо);
		
		ОбработкаПрерыванияПользователя();
		
		Первый = Истина;

		НайденнаяСтрока = ТаблицаФондов.НайтиСтроки(Новый Структура("ФизЛицо, ПериодДействия", ВыборкаПоФизЛицам.ФизЛицо.Ссылка, Null));
		
		Если НайденнаяСтрока.Количество() < 1 Тогда
			сообщить(НСтр("ru='Отсутствуют данные по ';uk='Відсутні дані по '") + ВыборкаПоФизЛицам.ФизЛицо);
			Продолжить;
			
		Иначе	
			
			СуммаФОТ 			= НайденнаяСтрока[0].РезультатФОТ;
			СуммаСотрудник 		= НайденнаяСтрока[0].РезультатСотрудник;
			
			ИтогВсего  = НайденнаяСтрока[0].БазаСотрудник;
			ПенсВсего  = НайденнаяСтрока[0].БазаВзносаСотрудник;
			УдержВсего = НайденнаяСтрока[0].РезультатСотрудник;
			БольнВсего = НайденнаяСтрока[0].Больничные;
			
			НайдСтрока = ИнвалидыТабл.НайтиСтроки(Новый Структура("ФизЛицо", ВыборкаПоФизЛицам.ФизЛицо.Ссылка));
			Если НайдСтрока.Количество() < 1 Тогда
				КодКатегории = "1"; 
				НазвКатегории = "Найманий працівник на заг.підставах";
				НайденнаяСтрока = ТаблицаСтавок.Найти (СпрНалоги.ПенсионныйФОТ,"Налог" ); 
				ставкаФОТ = НайденнаяСтрока.Ставка;
			Иначе	
				КодКатегории = "2";
				НазвКатегории = "Працюючий інвалід";
				НайденнаяСтрока = ТаблицаСтавок.Найти (СпрНалоги.ПенсионныйФОТИнв,"Налог" ); 
				ставкаФОТ = НайденнаяСтрока.Ставка;  
			КонецЕсли;
			
		КонецЕсли;
		
		// даты приема/увольнения
		ДатаПриема 	   = мДатаНачалаПериодаОтчета;
		ДатаУвольнения = мДатаКонцаПериодаОтчета;
		ДанныеНаНачало = РаботникиНаНачало.Найти(ВыборкаПоФизЛицам.Физлицо);
		ПриемУвольнениеВПериоде  = РаботникиПриемУвольнение.Найти(ВыборкаПоФизЛицам.Физлицо);
		ДанныеНаКонец  = РаботникиНаКонец.Найти(ВыборкаПоФизЛицам.Физлицо);
		Если    ДанныеНаНачало = Неопределено
			ИЛИ ДанныеНаНачало.Работал = Ложь Тогда
		
			Если НЕ ПриемУвольнениеВПериоде = Неопределено Тогда
				ДатаПриема = ПриемУвольнениеВПериоде.ДатаПриема;	
			КонецЕсли;			
		
		КонецЕсли; 
		Если    ДанныеНаКонец = Неопределено
			ИЛИ ДанныеНаКонец.Работал = Ложь Тогда
		
			Если НЕ ПриемУвольнениеВПериоде = Неопределено Тогда
				ДатаУвольнения = ПриемУвольнениеВПериоде.ДатаУвольнения;	
			КонецЕсли;			
		
		КонецЕсли; 
		ДатПриема 	  = формат(ДатаПриема, 	   "ДФ=yyyyMMdd");
		ДатУвольнения = формат(ДатаУвольнения, "ДФ=yyyyMMdd");         		
		
		ПолныхМесяцев  	= 0; 
		ПолныхДней 		= 0; 
		ВсегоДляСтажа	= 0;
		
		Выборка = ВыборкаПоФизЛицам.Выбрать();
		Выборка.Следующий();
		
		Для НомМесяца = 1 По 12 Цикл
			
			ТекМесяц = НачалоМесяца(ДобавитьМесяц(мДатаНачалаПериодаОтчета, НомМесяца -1));
			
			Если Первый Тогда
			
				Если ИспользоватьТекущуюСтраницу Тогда
				   ИспользоватьТекущуюСтраницу = Ложь;
				Иначе
					ИзменитьТаблицуПараметровАвтозаполнения(1);
					ВставитьДополнительнуюСтраницу("ИндВедомости");	
				КонецЕсли;
				
				мИндВедомости.Области.ИНН.Значение		= Выборка.КодПоДРФО;
				мИндВедомости.Области.Фамилия.Значение 	= Выборка.Фамилия;
				мИндВедомости.Области.Имя.Значение 		= Выборка.Имя;
				мИндВедомости.Области.Отч.Значение 		= Выборка.Отчество;
				мИндВедомости.Области.РазмерСтавкиНач.Значение 		= ставкаФОТ * 100;
				мИндВедомости.Области.РазмерСтавкиУдерж.Значение 	= ставкаСотр;
				мИндВедомости.Области.КодКатегории.Значение 		= КодКатегории;
				мИндВедомости.Области.НазваниеКатегории.Значение 	= НазвКатегории;
				мИндВедомости.Области.КодОбъекта.Значение 			= "1";
				мИндВедомости.Области.НазваниеОбъектаНачисленияВзносов.Значение = "Оплата праці та лікарняні";
				мИндВедомости.Области.СуммаНач.Значение 	= СуммаФОТ;
				мИндВедомости.Области.СуммаУдерж.Значение 	= СуммаСотрудник;
				мИндВедомости.Области.Организация.Значение 			= Организация.НаименованиеПолное;
				мИндВедомости.Области.П32.Значение 					= ТаблицаСтраницРаздела.Количество();
					
				Первый = Ложь;
				
			КонецЕсли;
			
			НайденнаяСтрока = ТаблицаФондов.НайтиСтроки(Новый Структура("ФизЛицо, ПериодДействия", ВыборкаПоФизЛицам.ФизЛицо.Ссылка, ТекМесяц));
			Префикс = "" + Месяц(ТекМесяц);
			
			КоличествоДней = 0;
			Если НайденнаяСтрока.Количество() > 0 Тогда
				БазаСотрудник 		  = 0;
				БазаВзносаСотрудник   = 0;
				РезультатСотрудник 	  = 0;
				Больничные 			  = 0;
				ДатаКонца		  	  =	НачалоМесяца(ТекМесяц);
				ДатаНачала			  = КонецМесяца(ТекМесяц);
				
				Для i=0 По НайденнаяСтрока.Количество()-1 Цикл
					БазаСотрудник 		= БазаСотрудник 		+ НайденнаяСтрока[i].БазаСотрудник;
					БазаВзносаСотрудник = БазаВзносаСотрудник 	+ НайденнаяСтрока[i].БазаВзносаСотрудник;
					РезультатСотрудник 	= РезультатСотрудник 	+ НайденнаяСтрока[i].РезультатСотрудник;
					Больничные   	 	= Больничные			+ НайденнаяСтрока[i].Больничные;
					
					Если НайденнаяСтрока[0].ДатаКонца > ДатаКонца Тогда
						ДатаКонца = НайденнаяСтрока[0].ДатаКонца;
					КонецЕсли;
					
					Если НайденнаяСтрока[0].ДатаНачала < ДатаНачала Тогда
						ДатаНачала = НайденнаяСтрока[0].ДатаНачала;
					КонецЕсли;
					
				КонецЦикла;
				
				мИндВедомости.Области["Мес"+Префикс+"Всего"].Значение = формат(БазаСотрудник, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
				мИндВедомости.Области["Мес"+Префикс+"Пенс"].Значение  = формат(БазаВзносаСотрудник, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
				мИндВедомости.Области["Мес"+Префикс+"Больн"].Значение = формат(Больничные, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
				мИндВедомости.Области["Мес"+Префикс+"Удерж"].Значение = формат(РезультатСотрудник, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
				
				КоличествоДней = (НачалоДня(ДатаКонца) - НачалоДня(ДатаНачала))/86400 + 1;
				
				Если КонтролироватьСтаж И День(КонецМесяца(ТекМесяц)) = КоличествоДней  Тогда
					// Проверим, что сумма отчислений в ПФ больше чем от минимальной ЗП
					// иначе уменьшим стаж.
					
					Если  МинЗП.Найти(ТекМесяц).Размер  > БазаСотрудник Тогда
						// будем считать, что сотруднику незаконо платят меньш минимальной ЗП.
						// уменьшим стаж
						// более тонкие случаи не рассматриваем
						КоличествоДней = КоличествоДней 
										 *(БазаСотрудник * ставкаФОТ) 
	                                     /(МинЗП.Найти(ТекМесяц).Размер * ставкаФОТ);
						Сообщить("" + Выборка.Физлицо + " ("+Формат(ТекМесяц,"ДФ=MM.yyyy")+"): " + НСтр("ru = 'сумма начислений меньше минимальной ЗП! Стаж за месяц был уменьшен! '; uk = 'сума нарахувань за місяц менше ніж з мін. ЗП. Стаж за місяц був зменшений!'"));				
					КонецЕсли;
					
				КонецЕсли;

				ВсегоДляСтажа  = ВсегоДляСтажа + КоличествоДней;
				мИндВедомости.Области["Мес"+Префикс+"Дней"].Значение  = формат(КоличествоДней, "ЧГ=0; ЧН=; ЧДЦ=0");
				
			КонецЕсли;
			
			Если КоличествоДней > 0 Тогда
			
				Если КоличествоДней = День(КонецМесяца(ТекМесяц)) Тогда
				    ПолныхМесяцев = ПолныхМесяцев + 1;
				Иначе	
					ПолныхДней = ПолныхДней + КоличествоДней;
				КонецЕсли;
			
			КонецЕсли;
				
		КонецЦикла;
		
		Если ПолныхДней > 30 Тогда 
			ПолныхМесяцев = ПолныхМесяцев + Цел(ПолныхДней/30); 
		    ПолныхДней    = ПолныхДней % 30;			 
		КонецЕсли; 
		
		Если НЕ ТаблицаОсновноеМестоРаботы.Найти(ВыборкаПоФизЛицам.Физлицо) = Неопределено Тогда
			мИндВедомости.Области.Пр.Значение	  = "Х";	
		КонецЕсли;
		
		мИндВедомости.Области.Н.Значение = "Х";
		
		мИндВедомости.Области.ИтогВсего.Значение  = формат(ИтогВсего, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
		мИндВедомости.Области.ПенсВсего.Значение  = формат(ПенсВсего, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
		мИндВедомости.Области.БольнВсего.Значение = формат(БольнВсего,  "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
		мИндВедомости.Области.УдержВсего.Значение = формат(УдержВсего, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
		мИндВедомости.Области.ДнейВсего.Значение  = ВсегоДляСтажа;
		
		мИндВедомости.Области.Днач.Значение = Сред(ДатПриема, 7,2);
		мИндВедомости.Области.МесНач.Значение = Сред(ДатПриема, 5,2);
		мИндВедомости.Области.ГодНач.Значение = Сред(ДатПриема, 1,4);
		
		мИндВедомости.Области.Дкон.Значение   = Сред(ДатУвольнения, 7,2);
		мИндВедомости.Области.МесКон.Значение = Сред(ДатУвольнения, 5,2);
		мИндВедомости.Области.ГодКон.Значение = Сред(ДатУвольнения, 1,4);
		
		мИндВедомости.Области.Мес.Значение  = формат(ПолныхМесяцев, "ЧГ=0; ЧН=");
		мИндВедомости.Области.Дней.Значение = формат(ПолныхДней, "ЧГ=0; ЧН=");
		
		ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
		
		мИндВедомости.Области.ДД.Значение 	= ЧастиДатыПодписи.День;
		мИндВедомости.Области.ММ.Значение 	= ЧастиДатыПодписи.МесяцЦифрой;
		мИндВедомости.Области.ГГГГ.Значение = ЧастиДатыПодписи.Год;
		
		ОбновитьСтруктуруМногостраничныхРазделов();
		мИндВедомости.Области.ГодОтчета.Значение = Формат(Год(мДатаНачалаПериодаОтчета),"ЧГ=");
		мИндВедомости.Области.ОргДиректор.Значение = ФИОДиректора;
		мИндВедомости.Области.ОргБухгалтер.Значение = ФИОГлавБуха;
		
	КонецЦикла;
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтранице("ИндВедомости", Ложь);
	
КонецПроцедуры

//Процедура СформироватьИндивВедомостиУТП()
//Формирует Индивидуальные ведломости аналогично СформироватьИндивВедомости() но для случая
//запуска в Управлении Торговым Предприятием 
Процедура СформироватьИндивВедомостиУТП(ОбъектЗаполнения, ИспользоватьТекущуюСтраницу = Ложь)
	перем ТаблицаСтраницРаздела;
	перем ставкаФОТ;
	перем ставкаСотр;
	
	мСтруктураМногостраничныхРазделов.Свойство("ИндВедомости", ТаблицаСтраницРаздела);	
	
	//определяем размер ставки на ФОТ
	//с 2006 года - она одна для всех категорий застр. лиц
	СпрНалоги = Справочники.Налоги;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|НалогиОсн.Налог  КАК Налог, 
	|НалогиОсн.Ставка КАК Ставка
	|ИЗ
	|РегистрСведений.ШкалаСтавокНалогов.СрезПоследних (&Дата) КАК НалогиОсн
	|ГДЕ 
	|(НалогиОсн.Налог = &ФЗППенс) ИЛИ (НалогиОсн.Налог = &ФЗППенсИнв)  
	|";
	
	ЗапросЗначенияСтавок = Новый Запрос;
	ЗапросЗначенияСтавок.Текст = ТекстЗапроса;
	ЗапросЗначенияСтавок.УстановитьПараметр("Организация",Организация);
	ЗапросЗначенияСтавок.УстановитьПараметр("Дата", мДатаНачалаПериодаОтчета);
	ЗапросЗначенияСтавок.УстановитьПараметр("ФЗППенс",СпрНалоги.ПенсионныйФОТ);
	ЗапросЗначенияСтавок.УстановитьПараметр("ФЗППенсИнв",СпрНалоги.ПенсионныйФОТИнв);

	РезультатЗапроса = ЗапросЗначенияСтавок.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаСтавок = РезультатЗапроса.Выгрузить();
		НайденнаяСтрока = ТаблицаСтавок.Найти (СпрНалоги.ПенсионныйФОТ,"Налог" ); 
		ставкаФОТ = НайденнаяСтрока.Ставка;
	КонецЕсли;
	
	Если Год(мДатаНачалаПериодаОтчета) < 2007 Тогда
		ставкаСотр = "1-5";
	Иначе
		ставкаСотр = "0,5-5";
	КонецЕсли;
	
	МинЗП = ПолучитьМинимальнуюЗарплату();

	масФизЛицо = Новый Массив;
	
	Если ТипЗнч(ОбъектЗаполнения) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		масФизЛицо.Добавить(ОбъектЗаполнения);
		
	Иначе	
		
		РаботникиОрганизации = ЗаполнениеРаботникиОрганизации(ОбъектЗаполнения);
		
		Для каждого СтрокаРаботники Из РаботникиОрганизации Цикл
			масФизЛицо.Добавить(СтрокаРаботники.ФизЛицо);
		КонецЦикла; 
		
	КонецЕсли;
	
	ЗапросИнвалидыТекст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	Инвалиды.Физлицо КАК ФизЛицо,
	                      |	Инвалиды.Период КАК Период,
	                      |	Инвалиды.Инвалидность КАК Инвалид
	                      |ИЗ
	                      |	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&парамКонец, ) КАК Инвалиды
	                      |ГДЕ
	                      |	Инвалиды.Инвалидность";
	
	ЗапросИнвалиды = Новый Запрос(ЗапросИнвалидыТекст);
	ЗапросИнвалиды.УстановитьПараметр("парамКонец",мДатаКонцаПериодаОтчета);
	ИнвалидыТабл = ЗапросИнвалиды.Выполнить().Выгрузить();
	

	ЗапросОсновноеМестоРаботы = Новый Запрос;
	ЗапросОсновноеМестоРаботы.УстановитьПараметр("ДатаКон", Новый Граница(мДатаКонцаПериодаОтчета+1,ВидГраницы.Включая));
	ЗапросОсновноеМестоРаботы.УстановитьПараметр("Организация", Организация);
	ЗапросОсновноеМестоРаботы.УстановитьПараметр("парамФизлицо", 	масФизЛицо);
	ЗапросОсновноеМестоРаботы.УстановитьПараметр("парамОсновноеМестоРаботы", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	
	ЗапросОсновноеМестоРаботы.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                  |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо
	                                  |ИЗ
	                                  |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	                                  |			&ДатаКон,
	                                  |			Организация = &Организация
	                                  |				И Сотрудник.Физлицо В (&парамФизлицо)
	                                  |				И Сотрудник.ВидЗанятости = &парамОсновноеМестоРаботы) КАК РаботникиОрганизацийСрезПоследних
	                                  |ГДЕ
	                                  |	РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок > 0";
	ТаблицаОсновноеМестоРаботы = ЗапросОсновноеМестоРаботы.Выполнить().Выгрузить();

	ЗапросПриемУвольнение = Новый Запрос;
	ЗапросПриемУвольнение.Текст = "ВЫБРАТЬ
	                              |	ЕСТЬNULL(Прием.ФизЛицо, Увольнение.ФизЛицо) КАК ФизЛицо,
	                              |	Прием.ДатаПриема КАК ДатаПриема,
	                              |	Увольнение.ДатаУвольнения КАК ДатаУвольнения
	                              |ИЗ
	                              |	(ВЫБРАТЬ
	                              |		Прием.Сотрудник.Физлицо КАК ФизЛицо,
	                              |		МИНИМУМ(Прием.ДатаПриема) КАК ДатаПриема
	                              |	ИЗ
	                              |		Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Прием
	                              |	ГДЕ
	                              |		Прием.Сотрудник.Физлицо В(&парамФизлицо)
								  |		И Прием.Ссылка.ОтражатьВРеглУчете
								  |		И Прием.Ссылка.Организация = &парамОрганизация
	                              |		И (НЕ Прием.Сотрудник.ВидЗанятости = &ВнутреннееСовместительство)
	                              |		И Прием.ДатаПриема МЕЖДУ &парамНачало И &парамКонец
	                              |		И Прием.Ссылка.Проведен
	                              |	
	                              |	СГРУППИРОВАТЬ ПО
	                              |		Прием.Сотрудник.Физлицо) КАК Прием
	                              |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |			Увольнение.Сотрудник.Физлицо КАК ФизЛицо,
	                              |			МАКСИМУМ(Увольнение.ДатаУвольнения) КАК ДатаУвольнения
	                              |		ИЗ
	                              |			Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Увольнение
	                              |		ГДЕ
	                              |			Увольнение.Сотрудник.Физлицо В(&парамФизлицо)
								  |			И Увольнение.Ссылка.ОтражатьВРеглУчете
	                              |			И Увольнение.Ссылка.Организация = &парамОрганизация
	                              |			И (НЕ Увольнение.Сотрудник.ВидЗанятости = &ВнутреннееСовместительство)
	                              |			И Увольнение.ДатаУвольнения МЕЖДУ &парамНачало И &парамКонец
	                              |			И Увольнение.Ссылка.Проведен
	                              |		
	                              |		СГРУППИРОВАТЬ ПО
	                              |			Увольнение.Сотрудник.Физлицо) КАК Увольнение
	                              |		ПО (Увольнение.ФизЛицо = Прием.ФизЛицо)";
	
	ЗапросПриемУвольнение.УстановитьПараметр("парамНачало", 	мДатаНачалаПериодаОтчета );
	ЗапросПриемУвольнение.УстановитьПараметр("парамКонец",  	мДатаКонцаПериодаОтчета  );
	ЗапросПриемУвольнение.УстановитьПараметр("парамФизлицо", 	масФизЛицо);
	ЗапросПриемУвольнение.УстановитьПараметр("парамОрганизация",Организация );	
	ЗапросПриемУвольнение.УстановитьПараметр("ВнутреннееСовместительство",Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);	
   	РаботникиПриемУвольнение = ЗапросПриемУвольнение.Выполнить().Выгрузить();
	
	ЗапросРаботникиНаНачало = Новый Запрос;
	ЗапросРаботникиНаНачало.УстановитьПараметр("ДатаНач", Новый Граница(мДатаНачалаПериодаОтчета-1,ВидГраницы.Включая));
	ЗапросРаботникиНаНачало.УстановитьПараметр("парамФизлицо", 	масФизЛицо);
	ЗапросРаботникиНаНачало.УстановитьПараметр("Организация", Организация);
	ЗапросРаботникиНаНачало.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Сотрудник,
	                                |	ВЫБОР
	                                |		КОГДА СУММА(РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок) > 0
	                                |			ТОГДА ИСТИНА
	                                |		ИНАЧЕ ЛОЖЬ
	                                |	КОНЕЦ КАК Работал
	                                |ИЗ
	                                |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	                                |			&ДатаНач,
	                                |			Организация = &Организация
	                                |				И Сотрудник.Физлицо В (&парамФизлицо)) КАК РаботникиОрганизацийСрезПоследних
	                                |
	                                |СГРУППИРОВАТЬ ПО
	                                |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо";
	РаботникиНаНачало = ЗапросРаботникиНаНачало.Выполнить().Выгрузить();
	
	ЗапросРаботникиНаКонец = Новый Запрос;
	ЗапросРаботникиНаКонец.УстановитьПараметр("ДатаКон", Новый Граница(мДатаКонцаПериодаОтчета,ВидГраницы.Включая));
	ЗапросРаботникиНаКонец.УстановитьПараметр("Организация", Организация);
	ЗапросРаботникиНаКонец.УстановитьПараметр("парамФизлицо", 	масФизЛицо);
	ЗапросРаботникиНаКонец.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                               |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо,
	                               |	ВЫБОР
	                               |		КОГДА СУММА(РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок) > 0
	                               |			ТОГДА ИСТИНА
	                               |		ИНАЧЕ ЛОЖЬ
	                               |	КОНЕЦ КАК Работал
	                               |ИЗ
	                               |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	                               |			&ДатаКон,
	                               |			Организация = &Организация
	                               |				И Сотрудник.Физлицо В (&парамФизлицо)) КАК РаботникиОрганизацийСрезПоследних
	                               |
	                               |СГРУППИРОВАТЬ ПО
	                               |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо";
	РаботникиНаКонец = ЗапросРаботникиНаКонец.Выполнить().Выгрузить();
	
	ЗапросТекст = "ВЫБРАТЬ
	|НАЧАЛОПЕРИОДА(ВзносыВФонды.ДатаНачала,МЕСЯЦ) КАК ПериодДействия,
	|ВзносыВФонды.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	СУММА(ВЫБОР
	|			КОГДА (ВзносыВФонды.ВидРасчета = &ПенсионныйСотрудник ИЛИ ВзносыВФонды.ВидРасчета = &ПенсионныйСотрудник2007)
	|				ТОГДА ВзносыВФонды.База
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК БазаСотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ВзносыВФонды.ВидРасчета = &ПенсионныйФОТ
	|				ТОГДА ВзносыВФонды.База
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК БазаФОТ,
	|	СУММА(ВЫБОР
	|			КОГДА (ВзносыВФонды.ВидРасчета = &ПенсионныйСотрудник ИЛИ ВзносыВФонды.ВидРасчета = &ПенсионныйСотрудник2007)
	|				ТОГДА ВзносыВФонды.БазаВзноса
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК БазаВзносаСотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ВзносыВФонды.ВидРасчета = &ПенсионныйФОТ
	|				ТОГДА ВзносыВФонды.БазаВзноса
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК БазаВзносаФОТ,
	|	СУММА(ВЫБОР
	|			КОГДА (ВзносыВФонды.ВидРасчета = &ПенсионныйСотрудник ИЛИ ВзносыВФонды.ВидРасчета = &ПенсионныйСотрудник2007)
	|				ТОГДА ВзносыВФонды.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РезультатСотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ВзносыВФонды.ВидРасчета = &ПенсионныйФОТ
	|				ТОГДА ВзносыВФонды.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РезультатФОТ
	|ИЗ
	|	РегистрРасчета.ВзносыВФонды КАК ВзносыВФонды
	|ГДЕ
	|	ВзносыВФонды.ДатаНачала МЕЖДУ &начПериод И &конПериод
	|	И (ВзносыВФонды.ВидРасчета = &ПенсионныйСотрудник
	|			ИЛИ ВзносыВФонды.ВидРасчета = &ПенсионныйСотрудник2007
	|			ИЛИ ВзносыВФонды.ВидРасчета = &ПенсионныйФОТ)
	|	И ВзносыВФонды.Сотрудник.ФизЛицо В(&парамФизЛицо)
	//|	И ВзносыВФонды.Результат <> 0
	| И ВзносыВФонды.Организация = &парамОрганизация
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВзносыВФонды.ДатаНачала,МЕСЯЦ),
	|	ВзносыВФонды.Сотрудник.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВзносыВФонды.Сотрудник.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВзносыВФонды.ДатаНачала,МЕСЯЦ)
	|ИТОГИ
	|	СУММА(БазаСотрудник),
	|	СУММА(БазаФОТ),
	|	СУММА(БазаВзносаСотрудник),
	|	СУММА(БазаВзносаФОТ),
	|	СУММА(РезультатСотрудник),
	|	СУММА(РезультатФОТ)
	|ПО
	|	ФизЛицо";
	
	ЗапросФонды = Новый Запрос(ЗапросТекст);
	ЗапросФонды.УстановитьПараметр("начПериод",					НачалоДня(мДатаНачалаПериодаОтчета));
	ЗапросФонды.УстановитьПараметр("конПериод" , 				КонецДня(мДатаКонцаПериодаОтчета));
	ЗапросФонды.УстановитьПараметр("ПенсионныйФОТ", 			ПланыВидовРасчета.ВзносыВФонды.ПенсионныйФОТ20050101);
	ЗапросФонды.УстановитьПараметр("ПенсионныйСотрудник", 		ПланыВидовРасчета.ВзносыВФонды.Пенсионный20050101);
	ЗапросФонды.УстановитьПараметр("ПенсионныйСотрудник2007", 	ПланыВидовРасчета.ВзносыВФонды.Пенсионный20070101);
	ЗапросФонды.УстановитьПараметр("парамФизЛицо", 				масФизЛицо);
	ЗапросФонды.УстановитьПараметр("парамОрганизация", 			Организация);
	
	ТаблицаФондов = ЗапросФонды.Выполнить().Выгрузить();
	ЗапросТекст = "ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизации.ПериодДействия 					КАК ПериодДействия,
	|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо				КАК ФизЛицо,
	|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо.КодПоДРФО 	КАК КодПоДРФО,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо.Пол = &Мужчина
	|			ТОГДА ""Ч""
	|		ИНАЧЕ ""Ж""
	|	КОНЕЦ КАК Пол,
	|	СУММА(ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета 	   = &ВРБольничные1
	|					ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета = &ВРБольничные2
	|					ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета = &ВРБольничные3
	|				ТОГДА ОсновныеНачисленияРаботниковОрганизации.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Больничные,
	|	МИНИМУМ(ОсновныеНачисленияРаботниковОрганизации.ПериодДействияНачало) КАК ДатаПриема,
	|	МАКСИМУМ(ОсновныеНачисленияРаботниковОрганизации.ПериодДействияКонец) КАК ДатаУвольнения,
	|	МИНИМУМ(ВЫБОР 
	|				КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета = &ВРБеременностьИРоды 
	|					ТОГДА ОсновныеНачисленияРаботниковОрганизации.ПериодДействияНачало
	|				ИНАЧЕ
	|					NULL
	|				КОНЕЦ) КАК ДатаНачалаБиР,
	|	МАКСИМУМ(ВЫБОР 
	|				КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета = &ВРБеременностьИРоды 
	|					ТОГДА ОсновныеНачисленияРаботниковОрганизации.ПериодДействияКонец
	|				ИНАЧЕ
	|					NULL
	|				КОНЕЦ) КАК ДатаОкончанияБиР,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо.ДатаРождения КАК ДатаРождения
	|ИЗ
	|	РегистрРасчета.Начисления КАК ОсновныеНачисленияРаботниковОрганизации
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&конПериод) КАК ФИОФизЛицСрезПоследних
	|	ПО ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизации.ПериодДействия МЕЖДУ &начПериод И &конПериод
	|	И ОсновныеНачисленияРаботниковОрганизации.Результат <> 0
	|	И ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо В(&парамФизЛицо)
	|	И ОсновныеНачисленияРаботниковОрганизации.Организация = &парамОрганизация
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо,
	|	ОсновныеНачисленияРаботниковОрганизации.ПериодДействия,
	|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо.КодПоДРФО,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо.ДатаРождения,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо.Пол = &Мужчина
	|			ТОГДА ""Ч""
	|		ИНАЧЕ ""Ж""
	|	КОНЕЦ
	|
	|ИТОГИ
	|	СУММА(Больничные),
	|	МИНИМУМ(ДатаНачалаБиР),
	|	МАКСИМУМ(ДатаОкончанияБиР),
	|	МИНИМУМ(ДатаПриема),
	|	МАКСИМУМ(ДатаУвольнения)
	|ПО
	|	ФизЛицо";
	
	Запрос = Новый Запрос(ЗапросТекст);
	Запрос.УстановитьПараметр("начПериод",НачалоДня(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("конПериод" , КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамФизЛицо", масФизЛицо);
	Запрос.УстановитьПараметр("ВРБольничные1", ПланыВидовРасчета.Начисления.ОплатаПоСреднемуБЛ);
	Запрос.УстановитьПараметр("ВРБольничные2", ПланыВидовРасчета.Начисления.ОплатаПоСреднемуБЛОрганизации);
	Запрос.УстановитьПараметр("ВРБольничные3", ПланыВидовРасчета.Начисления.ОплатаПоСреднемуБЛТравмаНаПроизводстве);
	Запрос.УстановитьПараметр("ВРБеременностьИРоды", ПланыВидовРасчета.Начисления.ОплатаПоСреднемуБЛПоБеременностиИРодам);
	Запрос.УстановитьПараметр("Мужчина", Перечисления.ПолФизическихЛиц.Мужской);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоФизЛицам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоФизЛицам.Следующий() Цикл 
		
		Состояние(ВыборкаПоФизЛицам.Физлицо);
		
		ОбработкаПрерыванияПользователя();
		
		Выборка = ВыборкаПоФизЛицам.Выбрать();
		Выборка.Следующий();
		Первый = Истина;

		НайденнаяСтрока = ТаблицаФондов.НайтиСтроки(Новый Структура("ФизЛицо, ПериодДействия", ВыборкаПоФизЛицам.ФизЛицо.Ссылка, Null));
		
		Если НайденнаяСтрока.Количество() < 1 Тогда
			сообщить(НСтр("ru='Отсутствуют данные по ';uk='Відсутні дані по '") + ВыборкаПоФизЛицам.ФизЛицо);
			Продолжить;
			
		Иначе	
			
			СуммаФОТ 			= НайденнаяСтрока[0].РезультатФОТ;
			СуммаСотрудник 		= НайденнаяСтрока[0].РезультатСотрудник;
			
			ИтогВсего  = НайденнаяСтрока[0].БазаСотрудник;
			ПенсВсего  = НайденнаяСтрока[0].БазаВзносаСотрудник;
			УдержВсего = НайденнаяСтрока[0].РезультатСотрудник;
			БольнВсего = 0;
			
			НайдСтрока = ИнвалидыТабл.НайтиСтроки(Новый Структура("ФизЛицо", ВыборкаПоФизЛицам.ФизЛицо.Ссылка));
			Если НайдСтрока.Количество() < 1 Тогда
				КодКатегории = "1"; 
				НазвКатегории = "Найманий працівник на заг.підставах";
				НайденнаяСтрока = ТаблицаСтавок.Найти (СпрНалоги.ПенсионныйФОТ,"Налог" ); 
				ставкаФОТ = НайденнаяСтрока.Ставка;
			Иначе	
				КодКатегории = "2";
				НазвКатегории = "Працюючий інвалід";
				НайденнаяСтрока = ТаблицаСтавок.Найти (СпрНалоги.ПенсионныйФОТИнв,"Налог" ); 
				ставкаФОТ = НайденнаяСтрока.Ставка;  
			КонецЕсли;
			
		КонецЕсли;
		
		// даты приема/увольнения
		ДатаПриема 	   = мДатаНачалаПериодаОтчета;
		ДатаУвольнения = мДатаКонцаПериодаОтчета;
		ДанныеНаНачало = РаботникиНаНачало.Найти(ВыборкаПоФизЛицам.Физлицо);
		ПриемУвольнениеВПериоде  = РаботникиПриемУвольнение.Найти(ВыборкаПоФизЛицам.Физлицо);
		ДанныеНаКонец  = РаботникиНаКонец.Найти(ВыборкаПоФизЛицам.Физлицо);
		Если    ДанныеНаНачало = Неопределено
			ИЛИ ДанныеНаНачало.Работал = Ложь Тогда
		
			Если НЕ ПриемУвольнениеВПериоде = Неопределено Тогда
				ДатаПриема = ПриемУвольнениеВПериоде.ДатаПриема;	
			КонецЕсли;			
		
		КонецЕсли; 
		Если    ДанныеНаКонец = Неопределено
			ИЛИ ДанныеНаКонец.Работал = Ложь Тогда
		
			Если НЕ ПриемУвольнениеВПериоде = Неопределено Тогда
				ДатаУвольнения = ПриемУвольнениеВПериоде.ДатаУвольнения;	
			КонецЕсли;			
		
		КонецЕсли; 
		ДатПриема 	  = формат(ДатаПриема, 	   "ДФ=yyyyMMdd");
		ДатУвольнения = формат(ДатаУвольнения, "ДФ=yyyyMMdd");         		
		
		ПолныхМесяцев  	= 0; 
		ПолныхДней 		= 0; 
		ВсегоДляСтажа	= 0;
		Для НомМесяца = 1 По 12 Цикл
			
			ТекМесяц = НачалоМесяца(ДобавитьМесяц(мДатаНачалаПериодаОтчета, НомМесяца -1));
			
			Если Первый Тогда
			
				Если ИспользоватьТекущуюСтраницу Тогда
				   ИспользоватьТекущуюСтраницу = Ложь;
				Иначе
					ИзменитьТаблицуПараметровАвтозаполнения(1);
					ВставитьДополнительнуюСтраницу("ИндВедомости");	
				КонецЕсли;
				
				мИндВедомости.Области.ИНН.Значение		= Выборка.КодПоДРФО;
				мИндВедомости.Области.Фамилия.Значение 	= Выборка.Фамилия;
				мИндВедомости.Области.Имя.Значение 		= Выборка.Имя;
				мИндВедомости.Области.Отч.Значение 		= Выборка.Отчество;
				мИндВедомости.Области.РазмерСтавкиНач.Значение 		= ставкаФОТ * 100;
				мИндВедомости.Области.РазмерСтавкиУдерж.Значение 	= ставкаСотр;
				мИндВедомости.Области.КодКатегории.Значение 		= КодКатегории;
				мИндВедомости.Области.НазваниеКатегории.Значение 	= НазвКатегории;
				мИндВедомости.Области.КодОбъекта.Значение 			= "1";
				мИндВедомости.Области.НазваниеОбъектаНачисленияВзносов.Значение = "Оплата праці та лікарняні";
				мИндВедомости.Области.СуммаНач.Значение 	= СуммаФОТ;
				мИндВедомости.Области.СуммаУдерж.Значение 	= СуммаСотрудник;
				мИндВедомости.Области.Организация.Значение 			= Организация.НаименованиеПолное;
				мИндВедомости.Области.П32.Значение 					= ТаблицаСтраницРаздела.Количество();
					
				Первый = Ложь;
				
			КонецЕсли;
			
			НайденнаяСтрока = ТаблицаФондов.НайтиСтроки(Новый Структура("ФизЛицо, ПериодДействия", ВыборкаПоФизЛицам.ФизЛицо.Ссылка, ТекМесяц));
			Префикс = "" + Месяц(ТекМесяц);
			
			КоличествоДней = 0;
			Если НайденнаяСтрока.Количество() > 0 Тогда
				БазаСотрудник 		  = 0;
				БазаВзносаСотрудник   = 0;
				РезультатСотрудник 	  = 0;
				
				Для i=0 По НайденнаяСтрока.Количество()-1 Цикл
					БазаСотрудник 		= БазаСотрудник 		+ НайденнаяСтрока[i].БазаСотрудник;
					БазаВзносаСотрудник = БазаВзносаСотрудник 	+ НайденнаяСтрока[i].БазаВзносаСотрудник;
					РезультатСотрудник 	= РезультатСотрудник 	+ НайденнаяСтрока[i].РезультатСотрудник;
				КонецЦикла;
				
				мИндВедомости.Области["Мес"+Префикс+"Всего"].Значение = формат(БазаСотрудник, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
				мИндВедомости.Области["Мес"+Префикс+"Пенс"].Значение  = формат(БазаВзносаСотрудник, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
				мИндВедомости.Области["Мес"+Префикс+"Удерж"].Значение = формат(РезультатСотрудник, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
				
			КонецЕсли;
			
			// найдем больничные в начислениях И дни работы
			Выборка.Сбросить();
			Если Выборка.НайтиСледующий(ТекМесяц, "ПериодДействия") Тогда
				
				мИндВедомости.Области["Мес"+Префикс+"Больн"].Значение = формат(Выборка.Больничные, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");	
				БольнВсего = БольнВсего + Выборка.Больничные;
				
				ДатаКонца	= НачалоМесяца(ТекМесяц);
				ДатаНачала	= КонецМесяца(ТекМесяц);
				
				Если Выборка.ДатаУвольнения > ДатаКонца Тогда
					ДатаКонца = Выборка.ДатаУвольнения;
				КонецЕсли;
				
				Если Выборка.ДатаПриема < ДатаНачала Тогда
					ДатаНачала = Выборка.ДатаПриема;
				КонецЕсли;
				                         
				КоличествоДней = (НачалоДня(ДатаКонца) - НачалоДня(ДатаНачала))/86400 + 1;
				
				// исключим из стажа время нахождения в отпуске по беременности и родам
				Если  НЕ Выборка.ДатаНачалаБиР = NULL 
					И НЕ Выборка.ДатаОкончанияБиР = NULL Тогда
					
					КоличествоДнейБиР = (НачалоДня(Выборка.ДатаОкончанияБиР) - НачалоДня(Выборка.ДатаНачалаБиР))/86400 + 1;
				    КоличествоДней = Макс(0, КоличествоДней - КоличествоДнейБиР);
					
				ИначеЕсли КонтролироватьСтаж И День(КонецМесяца(ТекМесяц)) = КоличествоДней  Тогда
				    // ДЛЯ ВКЛЮЧЕНИЯ СЛЕДУЮЩЕГО ФУНКЦИОНАЛА НУЖНО СДЕЛАТЬ ВИДИМОЙ ГАЛОЧКУ КонтролироватьСтаж НА ФОРМЕ 
					// Проверим, что сумма отчислений в ПФ больше чем от минимальной ЗП
					// иначе уменьшим стаж.
					
					Если  МинЗП.Найти(ТекМесяц).Размер  > БазаСотрудник Тогда
						// будем считать, что сотруднику незаконо платят меньш минимальной ЗП.
						// уменьшим стаж
						// более тонкие случаи не рассматриваем
						КоличествоДней = КоличествоДней 
										 *(БазаСотрудник * ставкаФОТ) 
	                                     /(МинЗП.Найти(ТекМесяц).Размер * ставкаФОТ);
						Сообщить("" + Выборка.Физлицо + " ("+Формат(ТекМесяц,"ДФ=MM.yyyy")+"): " + НСтр("ru = 'сумма начислений меньше минимальной ЗП! Стаж за месяц был уменьшен! '; uk = 'сума нарахувань за місяц менше ніж з мін. ЗП. Стаж за місяц був зменшений!'"));				
					КонецЕсли;
					
				КонецЕсли;
				
				ВсегоДляСтажа  = ВсегоДляСтажа + КоличествоДней;
				
				мИндВедомости.Области["Мес"+Префикс+"Дней"].Значение  = формат(КоличествоДней, "ЧГ=0; ЧН=; ЧДЦ=0");
				
			КонецЕсли;
				
			Если КоличествоДней > 0 Тогда
			
				Если КоличествоДней = День(КонецМесяца(ТекМесяц)) Тогда
				    ПолныхМесяцев = ПолныхМесяцев + 1;
				Иначе	
					ПолныхДней = ПолныхДней + КоличествоДней;
				КонецЕсли;
			
			КонецЕсли;
				
		КонецЦикла;
		
		Если ПолныхДней > 30 Тогда 
			ПолныхМесяцев = ПолныхМесяцев + Цел(ПолныхДней/30); 
		    ПолныхДней    = ПолныхДней % 30;			 
		КонецЕсли; 
		
		Если НЕ ТаблицаОсновноеМестоРаботы.Найти(ВыборкаПоФизЛицам.Физлицо) = Неопределено Тогда
			мИндВедомости.Области.Пр.Значение	  = "Х";	
		КонецЕсли;
		
		мИндВедомости.Области.Н.Значение = "Х";
		
		мИндВедомости.Области.ИтогВсего.Значение  = формат(ИтогВсего, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
		мИндВедомости.Области.ПенсВсего.Значение  = формат(ПенсВсего, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
		мИндВедомости.Области.БольнВсего.Значение = формат(БольнВсего,  "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
		мИндВедомости.Области.УдержВсего.Значение = формат(УдержВсего, "ЧЦ=10; ЧДЦ=2; ЧГ=0; ЧРД=.; ЧН=");
		мИндВедомости.Области.ДнейВсего.Значение  = ВсегоДляСтажа;
		
		мИндВедомости.Области.Днач.Значение = Сред(ДатПриема, 7,2);
		мИндВедомости.Области.МесНач.Значение = Сред(ДатПриема, 5,2);
		мИндВедомости.Области.ГодНач.Значение = Сред(ДатПриема, 1,4);
		
		мИндВедомости.Области.Дкон.Значение   = Сред(ДатУвольнения, 7,2);
		мИндВедомости.Области.МесКон.Значение = Сред(ДатУвольнения, 5,2);
		мИндВедомости.Области.ГодКон.Значение = Сред(ДатУвольнения, 1,4);
		
		мИндВедомости.Области.Мес.Значение  = формат(ПолныхМесяцев, "ЧГ=0; ЧН=");
		мИндВедомости.Области.Дней.Значение = формат(ПолныхДней, "ЧГ=0; ЧН=");
		
		ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
		
		мИндВедомости.Области.ДД.Значение 	= ЧастиДатыПодписи.День;
		мИндВедомости.Области.ММ.Значение 	= ЧастиДатыПодписи.МесяцЦифрой;
		мИндВедомости.Области.ГГГГ.Значение = ЧастиДатыПодписи.Год;
		
		ОбновитьСтруктуруМногостраничныхРазделов();
		мИндВедомости.Области.ГодОтчета.Значение = Формат(Год(мДатаНачалаПериодаОтчета),"ЧГ=");
		мИндВедомости.Области.ОргДиректор.Значение = ФИОДиректора;
		мИндВедомости.Области.ОргБухгалтер.Значение = ФИОГлавБуха;
		
	КонецЦикла;
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтранице("ИндВедомости", Ложь);
	
КонецПроцедуры	

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
// уникальна для каждого отчета, т.е. нужна редакция
Процедура ЗаполнитьАвто() Экспорт
	//поскольку каждая из персонифицированных форм отчетности представляет собой отдельную единицу
	//алгоритм заполнения активируется в завистмости от текущей активной страницы
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	
	Если ИмяТекущейСтраницыПанели = "ИндВедомости" Тогда
		Предупреждение(НСтр("ru = 'Для заполенения формы ІНДАНІ воспользуйтесь кнопкой меню ""Заполнить"" над таблицей ""Список физ.лиц""!'; uk = 'Для заповнення форми ІНДАНІ скористайтеся кнопк. меню ""Заповнити"" над таблицею ""Список фіз. осіб""!'"));	
		Возврат
	ИначеЕсли ИмяТекущейСтраницыПанели = "СписокЛиц" Тогда
		ТекТабличноеПоле = мСписокЛиц;
		ОчиститьТабличноеПоле(ТекТабличноеПоле);
		ИмяГруппы = мИдГруппы1;
		УдалитьДополнительнуюСтроку(Истина, Ложь, мИдГруппы1);
		Если Вопрос(НСтр("ru = 'Заполнить только вновь принятыми на работу?
                          |			
                          |Да -  в список попадут новые сотрудники (принятые за отчетный период) и сотрудники, у которых изменилось ФИО
                          |
                          |Нет - в список попадут все сотрудники, работавшие в отчетном периоде'; uk = 'Заповнити тільки новими співробітниками?
                          |
                          |Так - до списку потраплять нові співробітники (що були прийняті за звітний період) та співробітники, в яких змінилося ПІБ
                          |
                          |Ні - до списку потраплять всі співробітники, що працювали у звітному періоді'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			СформироватьСписокРаботавших(Ложь);
		Иначе
			СформироватьСписокРаботавших(Истина);
		КонецЕсли;
	ИначеЕсли  ИмяТекущейСтраницыПанели = "СписокЛьготников" Тогда
		ТекТабличноеПоле = мСписокЛьготников;
		ИмяГруппы = мИдГруппы2;
		ОчиститьТабличноеПоле(ТекТабличноеПоле);
		СформироватьСписокЛьготников();
	ИначеЕсли  ИмяТекущейСтраницыПанели = "Работодатель" Тогда
		ТекТабличноеПоле = мРаботодатель;
		ОчиститьТабличноеПоле(ТекТабличноеПоле);
		СформироватьДанныеОРаботодателе();
	ИначеЕсли  ИмяТекущейСтраницыПанели = "Ярлык" Тогда
		Если ЯрлыкиФормироватьАвтоматически Тогда
			Предупреждение(НСтр("ru = 'Ярлыки формируются автоматически! Для заполнения снимите флаг ""Формировать ярлыки автоматически (для всех форм отчетности)"".'; uk = 'Ярлики формуються автоматично! Для заповнення зніміть прапорець ""Формувати ярлики автоматично (для всіх форм звітності)""!'"));
			Возврат;
		КонецЕсли;
		ТекТабличноеПоле = мЯрлык;
		ОчиститьТабличноеПоле(ТекТабличноеПоле);
		СформироватьЯрлык();
	ИначеЕсли  ИмяТекущейСтраницыПанели = "ОписаниеПакета" Тогда
		Если ОписаниеПакетаФормироватьАвтоматически Тогда
			Предупреждение(НСтр("ru = 'Описание пакетов формируется автоматически! Для заполнения снимите флаг ""Формировать описание пакета пачек автоматически (для всех форм отчетности)"".'; uk = 'Опис пакета формується автоматично! Для заповнення зніміть прапорець ""Формувати опис пакета пачок автоматично (для всіх форм звітності)""!'"));
			Возврат;
		КонецЕсли;
		ТекТабличноеПоле = мОписаниеПакета;
		ОчиститьТабличноеПоле(ТекТабличноеПоле);
		СформироватьОписаниеПакета();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьАвто()

Процедура ЗаполнитьАвтоИНДАНИ(ОбъектЗаполнения = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	
	ТекТабличноеПоле = мИндВедомости;
	
	Если ОбъектЗаполнения = Неопределено Тогда
		ОбъектЗаполнения = Организация;
	КонецЕсли;
	
	НужноОчищать = Ложь;
	Если ТипЗнч(ОбъектЗаполнения) = Тип("СправочникСсылка.Организации") Тогда
		НужноОчищать = Истина;		
	ИначеЕсли ТипЗнч(ОбъектЗаполнения) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда	
		Если Вопрос(НСтр("ru = 'Перед заполнением очистить список физ.лиц?'; uk = 'Перед заповненням очистити список фіз. осіб?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			НужноОчищать = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если НужноОчищать Тогда
		
		Если Не мСтруктураМногостраничныхРазделов.Свойство("ИндВедомости", ТаблицаСтраницРаздела) Тогда
			Возврат;
		КонецЕсли;
		
		Если (ТаблицаСтраницРаздела.Количество() > 1) Тогда
			Для Инд = 2 По ТаблицаСтраницРаздела.Количество() Цикл
				УдалитьДополнительнуюСтраницу("ИндВедомости");
			КонецЦикла;
		КонецЕсли;
		
		ОчиститьТабличноеПоле(ТекТабличноеПоле);	
		ОбновитьСтруктуруМногостраничныхРазделов();

	ИначеЕсли ТаблицаСтраниц.Количество() = 1 Тогда
		
		 Если   ПустаяСтрока(ТаблицаСтраниц[0].ИНН)
			  И ПустаяСтрока(ТаблицаСтраниц[0].ФИО) Тогда
			НужноОчищать = Истина; 	
		 КонецЕсли;
		 
	КонецЕсли;
	
	Если    РегламентированнаяОтчетность.ИДКонфигурации() = "УПП" 
		ИЛИ РегламентированнаяОтчетность.ИдКонфигурации() = "ЗУП" Тогда 	
		СформироватьИндивВедомости(ОбъектЗаполнения, НужноОчищать);
	ИначеЕсли РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		СформироватьИндивВедомостиБП(ОбъектЗаполнения, НужноОчищать);
	ИначеЕсли  РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда 
		СформироватьИндивВедомостиУТП(ОбъектЗаполнения, НужноОчищать);
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ОбновитьТаблицуСтраницИндведомости();
	
КонецПроцедуры

//===========================================


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью кнопок "Добавить" и "Удалить" формы.
// 
Процедура ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть = Неопределено)
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	
	Если Не ТекущаяОбласть = Неопределено Тогда
		КнопкаДобавитьУдалить = ЭлементыФормы.Найти("КнопкаУдалитьДопСтроки" + ИмяТекущейСтраницыПанели);
		
		Если КнопкаДобавитьУдалить <> Неопределено Тогда
			Если РазделТекущейОбласти( ИмяТекущейСтраницыПанели ) = Неопределено Тогда
				КнопкаДобавитьУдалить.Доступность = Ложь;
			Иначе
				КнопкаДобавитьУдалить.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДоступностьКнопокДобавитьУдалить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//коррекция кода выполнена, за исключением специфики многтсрочного
//раздела, в комментраиях это указано

// Процедура - обработчик события "ПередОткрытием" формы.
//редакция не требуется,унифицирована для всех отчетов 
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;
	
	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	НСтр("ru='Печатать сразу';uk='Друкувати відразу'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
	
	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	НСтр("ru='Показать бланк';uk='Показати бланк'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СоздатьТаблицуСоСхемамиВыгрузки();
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		КолонкаВР = ТаблицаВРБольничные.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
		ЭлементыФормы.ТаблицаВРБольничных.СоздатьКолонки();
	Иначе	
		ЭлементыФормы.ПанельВРБольничные.Свертка = РежимСверткиЭлементаУправления.Низ;
		ЭлементыФормы.Разделитель2.Верх 		 = ЭлементыФормы.ПолеТабличногоДокументаИндВедомости.Верх + ЭлементыФормы.ПолеТабличногоДокументаИндВедомости.Высота;
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
// редакция требуется, см. далее по комментариям
Процедура ПриОткрытии()
	Перем ИсходноеКоличествоСтрокГруппы;
	
	ЭтаФорма.АвтоЗаголовок = Ложь;
	
	ЭкспортВДБФ = Ложь;
	
	мСтараяВерсияФормы = мВерсияФормы;
	
	мАвтоВыборКодов = Ложь;
	
	мИндВедомости      = ЭлементыФормы.ПолеТабличногоДокументаИндВедомости;
	мСписокЛиц         = ЭлементыФормы.ПолеТабличногоДокументаСписокЛиц;
	мСписокЛьготников  = ЭлементыФормы.ПолеТабличногоДокументаСписокЛьготников;
	мРаботодатель      = ЭлементыФормы.ПолеТабличногоДокументаРаботодатель;
	мЯрлык		       = ЭлементыФормы.ПолеТабличногоДокументаЯрлык;
	мОписаниеПакета	   = ЭлементыФормы.ПолеТабличногоДокументаОписаниеПакета;
	
	Если мСохраненныйДок = Неопределено Тогда
		
		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			
			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
			
			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
			
			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл
				
				СтрокаГруппы = СтруктураГруппы.Добавить();
				
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяКолонки    = Колонка.Имя;
					Если  (ИмяКолонки <> "ДатаРожд") 
						и (ИмяКолонки <> "Пол")
						И (ИмяКолонки <> "ДатаПриема") 
						и (ИмяКолонки <> "ДатаУвольнения")  Тогда
						КодПоказателя = ИмяКолонки + Формат(НСтр,"ЧЦ=4;ЧВН=0;ЧГ=;");
						ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];
						
						Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
							ЗначениеЯчейки = ОбластьЯчейки.Значение;
						Иначе
							ЗначениеЯчейки = ОбластьЯчейки.Текст;
						КонецЕсли;
						
						СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 2;
			//устанавливает форма для ячеек, для которых в макете показателей задан тип формата Е,
			//т.е. денежный с регулируемой размерностью (в зависимости от выбранной единицы измерения)
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			
			УстановитьФорматВывода();
			
		    Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
				// только для бухгалтерии
				мТаблицаВРБольничные = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничные");	
				Если НЕ мТаблицаВРБольничные = Неопределено Тогда
					ТаблицаВРБольничные.Очистить();
					Для каждого ВР Из мТаблицаВРБольничные Цикл
						СтрокаВР = ТаблицаВРБольничные.Добавить();
						СтрокаВР.ВидРасчета = ВР;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			ПервыйНомерПачки = 1;
			ЯрлыкиФормироватьАвтоматически = Истина;
			ОписаниеПакетаФормироватьАвтоматически = Истина;
			
		КонецЕсли;
		
	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
	КонецЕсли;
	
	ЗаполнитьСведенияОбОрганизации();
		
	ПоказатьПериод();
	
	//управляет доступностью кнопок добавать/удалить,которые актуальны для многострочных разделов
	//коррекция актуальна при работе над могострочным приложением к декларации (долгосрочные договора)
	ТекТабличноеПоле = мИндВедомости ;
	ТекущаяОбласть   = ТекТабличноеПоле.ТекущаяОбласть;
	
	// управляем доступностью кнопок "Добавить" и "Удалить"
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);
	
	// управляем показом статика, отображающего номер текущей страницы
	ПоказатьСтатикСтраницРаздела("ИндВедомости");
	
	//далее должны идти наименования ПолейТабличныхДокумента приложений
	//к декларации 
	мСписокЛиц.ТолькоПросмотр        = Истина;
	мСписокЛьготников.ТолькоПросмотр = Истина;
	мИндВедомости.ТолькоПросмотр     = Истина;
	мЯрлык.ТолькоПросмотр     		 = Истина;
	мОписаниеПакета.ТолькоПросмотр   = Истина;
	мРаботодатель.ТолькоПросмотр     = Истина;
	                 
	ОбновитьТаблицуСтраницИндведомости();
	
	УстановитьВидимость();
	
	// раскомментировать, если хотите рассчитывать стаж от ЗП меньшей чем МинЗП
	ЭлементыФормы.КонтролироватьСтаж.Видимость = Ложь;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
// редакция не требуется, процедура унифицирована для всех отчетов
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность = Истина Тогда
		
		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения ?';uk='Дані були змінені. Зберегти зміни ?'"), РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;

		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()


Процедура СохранитьДеревоСтраницОтчета()
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			
			мСохраненныйДок.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".

Процедура КоманднаяПанельФормыОчистить(Кнопка)
	
	Очистить();
	Расчет();
	
КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при нажатии кнопки "Сохранить в формате *.dbf".
Процедура КоманднаяПанельДействийДействиеDBF(Кнопка)
	
	ОбновитьСтруктуруМногостраничныхРазделов();
	ОбновитьСтруктуруМногострочныхРазделов();
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	ПредставлениеАктивнойСтраницы = ТекущаяСтраницаПанели.Заголовок; 
	
	Если  ИмяТекущейСтраницыПанели <> "Работодатель"
		И ИмяТекущейСтраницыПанели <> "Ярлык"
		И ИмяТекущейСтраницыПанели <> "ОписаниеПакета" Тогда
		ФормаВыгрузки = ПолучитьФорму("ФормаВыгрузки");
		ФормаВыгрузки.АктивнаяСтраница = ИмяТекущейСтраницыПанели; 
		ФормаВыгрузки.ПредставлениеАктивнойСтраницы = ТекущаяСтраницаПанели.Заголовок;
		
		ФормаВыгрузки.СтруктураМногостраничныхРазделов = мСтруктураМногостраничныхРазделов;
		
		ФормаВыгрузки.РежимВыбора = Ложь;
		ФормаВыгрузки.КодГода = Формат(Год(мДатаНачалаПериодаОтчета),"ЧЦ=4;ЧГ=0;");
		ФормаВыгрузки.ГодВыплаты = Формат(Год(мДатаНачалаПериодаОтчета),"ЧЦ=4;ЧГ=0;");
		ФормаВыгрузки.КодСтавки = "1";
		ФормаВыгрузки.Открыть();
	Иначе
		Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Для данных текущей активной страницы ""%1""  "
		"не предусмотрена выгрузка данных в файл с расширением *.dbf с целью последующей загрузки в программный комплекс АРМ !';uk='Увага! Для даних поточної активної сторінки ""%1""  "
		"не передбачене вивантаження даних у файл із розширенням *.dbf з метою наступного завантаження в програмний комплекс АРМ !'"), ПредставлениеАктивнойСтраницы));	 
	КонецЕсли
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)
	
	Если Кнопка <> Неопределено Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
	// Управляем видимостью страниц основной панели формы
	ПоказатьСтраницыОтчета();
	
	Модифицированность = Истина;
	
КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
// редакция не требуется,унифицирована для всех отчетов 

Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)
	
	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;
	
	
КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
// редакция не требуется,унифицирована для всех отчетов 

Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)
	
	 Сохранить() ;
	 
КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//

Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	
	ЗаполнитьАвто();
	
КонецПроцедуры // КоманднаяПанельФормыЗаполнить

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА



// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
// редакция не требуется
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Перем ТекущаяОбласть;
	
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИдГруппы <> Неопределено Тогда
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
		ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	КонецЕсли;
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;
	
	// управляем доступностью кнопок "Добавить" и "Удалить"
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);
	
	// управляем показом статика, отображающего номер текущей страницы
	ПоказатьСтатикСтраницРаздела(ИмяТекущейСтраницыПанели);
	
	ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	
КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события "ПриИзменении" поля ввода
// даты представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)
	
	ЗаполнитьДатуВЯчейках();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
// !!!Важно проверить тип реквизитов ЕдиницаИзмерения (должна быть ПеречислениеСсылка.ПорядкиОкругленияОтчетности)
//в остальном редакция не требуется
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)
	
	ПроверитьТочность();
	УстановитьФорматВывода();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//  редакция не требуется
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)
	
	ПроверитьТочность();
	УстановитьФорматВывода();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа формы.
// Определяет текущую область таблмчного документа и вызывает процедуру
// управления доступностью кнопок "Добавить" и "Удалить" формы.
// редакция не требуется

Процедура ПолеТабличногоДокументаПриАктивизацииОбласти(Элемент)
	
	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ДоступностьКнопокДобавитьУдалить(ТекущаяОбласть);
	
КонецПроцедуры // ПолеТабличногоДокументаПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Декларация" основной панели формы.
// Устанавлвает признак модифицированности данных в форме.
//
Процедура ПолеТабличногоДокументаИндВедомостиПриИзменении(Элемент)
	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногостраничныхРазделов();
	
	Расчет();
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел1ПриИзменении()

Процедура ПолеТабличногоДокументаОписаниеПакетаПриИзменении(Элемент)
	
	Расчет();
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел1ПриИзменении()


// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Декларация" основной панели формы.
// Устанавлвает признак модифицированности данных в форме.
//
Процедура ПолеТабличногоДокументаСписокЛицПриИзменении(Элемент)
	
	перем СтруктураГруппы;	
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;
	
	Если Лев(ИмяПоказателя, 3) = "ИНН" Тогда
	
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы);
		
		Запрос = Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК СсылкаФЛ
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.КодПоДРФО = &Парам"; 
		Запрос.УстановитьПараметр("Парам",ТекущаяОбласть.Значение);
		Выборка =  Запрос.Выполнить().Выгрузить();
		Если Выборка.Количество()>0 Тогда
			Результат =  Выборка[0].ССылкаФЛ;
		Иначе
			Сообщить(НСтр("ru='Неправильно введен ИНН сотрудника!!!Такого ИННа нет в списке сотрудников';uk='Не вірно введен ІНН співробітника!!! Такого ІННа немає у списку співробітників'" + ТекущаяОбласть.Значение), СтатусСообщения.Внимание);
		КонецЕсли;
		
		Если НЕ Результат = Неопределено Тогда					
			ФИОСрез = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(,Новый Структура("ФизЛицо",Результат));
			
			ИмяНужнойЯчейкиНовойСтроки = СтруктураГруппы.Колонки[1].Имя + Сред(ИмяПоказателя,СтрДлина(ИмяПоказателя)-3,4) ;
			ОбластьЯчейки = мСписокЛиц.Области[ИмяНужнойЯчейкиНовойСтроки];
			ОбластьЯчейки.Значение = ФИОСрез.Фамилия;
			
			ИмяНужнойЯчейкиНовойСтроки = СтруктураГруппы.Колонки[2].Имя + Сред(ИмяПоказателя,СтрДлина(ИмяПоказателя)-3,4);
			ОбластьЯчейки = мСписокЛиц.Области[ИмяНужнойЯчейкиНовойСтроки];
			ОбластьЯчейки.Значение = ФИОСрез.Имя;
			
			ИмяНужнойЯчейкиНовойСтроки = СтруктураГруппы.Колонки[3].Имя + Сред(ИмяПоказателя,СтрДлина(ИмяПоказателя)-3,4);
			ОбластьЯчейки = мСписокЛиц.Области[ИмяНужнойЯчейкиНовойСтроки];
			ОбластьЯчейки.Значение = ФИОСрез.Отчество;
			
			Модифицированность = Истина;

		Иначе 
			Сообщить("нет данных для данного номера, проверьте правильность заполнения!",);
		КонецЕсли 		
		
	КонецЕсли;
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел1ПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Декларация" основной панели формы.
// Устанавлвает признак модифицированности данных в форме.
//
Процедура ПолеТабличногоДокументаСписокЛьготниковИзменении(Элемент)
	
	перем СтруктураГруппы;	
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;
	
	Если Лев(ИмяПоказателя, 3) = "ИНН" Тогда
	
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2, СтруктураГруппы);
		
		Запрос = Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК СсылкаФЛ
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.КодПоДРФО = &Парам"; 
		Запрос.УстановитьПараметр("Парам",ТекущаяОбласть.Значение);
		Выборка =  Запрос.Выполнить().Выгрузить();
		Если Выборка.Количество()>0 Тогда
			Результат =  Выборка[0].ССылкаФЛ;
		Иначе
			Сообщить(НСтр("ru='Неправильно введен ИНН сотрудника!!!Такого ИННа нет в списке сотрудников';uk='Не вірно введен ІНН співробітника!!! Такого ІННа немає у списку співробітників'" + ТекущаяОбласть.Значение), СтатусСообщения.Внимание);
		КонецЕсли;
		
		Если НЕ Результат = Неопределено Тогда					
			ФИОСрез = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(,Новый Структура("ФизЛицо",Результат));
			
			ИмяНужнойЯчейкиНовойСтроки = СтруктураГруппы.Колонки["Фамилия"].Имя + Сред(ИмяПоказателя,СтрДлина(ИмяПоказателя)-3) ;
			ОбластьЯчейки = мСписокЛьготников.Области[ИмяНужнойЯчейкиНовойСтроки];
			ОбластьЯчейки.Значение = ФИОСрез.Фамилия;
			
			ИмяНужнойЯчейкиНовойСтроки = СтруктураГруппы.Колонки["Имя"].Имя + Сред(ИмяПоказателя,СтрДлина(ИмяПоказателя)-3);
			ОбластьЯчейки = мСписокЛьготников.Области[ИмяНужнойЯчейкиНовойСтроки];
			ОбластьЯчейки.Значение = ФИОСрез.Имя;
			
			ИмяНужнойЯчейкиНовойСтроки = СтруктураГруппы.Колонки["Отчество"].Имя + Сред(ИмяПоказателя,СтрДлина(ИмяПоказателя)-3);
			ОбластьЯчейки = мСписокЛьготников.Области[ИмяНужнойЯчейкиНовойСтроки];
			ОбластьЯчейки.Значение = ФИОСрез.Отчество;
			
			Модифицированность = Истина;

		Иначе 
			Сообщить("нет данных для данного номера, проверьте правильность заполнения!",);
		КонецЕсли 		
		
	КонецЕсли;
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел1ПриИзменении()

Процедура КнопкаДобавитьДопСтрокиСписокЛицНажатие(Элемент)
	Перем СтруктураГруппы1,СтруктураГруппы2;
	ВставитьДополнительнуюСтроку();
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);
	
	КолСтрокСписокЛиц = СтруктураГруппы1.Количество();
	
	мСписокЛиц.Области.КвоЗап.Значение = КолСтрокСписокЛиц;
	мСписокЛиц.Области.НомЛист.Значение = мСписокЛиц.КоличествоСтраниц();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиСписокЛицНажатие(Элемент)
	Перем СтруктураГруппы1,СтруктураГруппы2;
	
	УдалитьДополнительнуюСтроку();
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, СтруктураГруппы1);
	
	КолСтрокСписокЛиц = СтруктураГруппы1.Количество();
	
	мСписокЛиц.Области.КвоЗап.Значение = КолСтрокСписокЛиц;
	мСписокЛиц.Области.НомЛист.Значение = мСписокЛиц.КоличествоСтраниц();
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиСписокЛьготниковНажатие(Элемент)
	Перем СтруктураГруппы1,СтруктураГруппы2;
	ВставитьДополнительнуюСтроку();
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2, СтруктураГруппы2);
	КолСтрокСписокЛьготников = СтруктураГруппы2.Количество();
	мСписокЛьготников.Области.КвоЗап.Значение = КолСтрокСписокЛьготников;
	мСписокЛьготников.Области.НомЛист.Значение =  1;//мСписокЛьготников.КоличествоСтраниц();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиСписокЛьготниковНажатие(Элемент)
	Перем СтруктураГруппы1,СтруктураГруппы2;
	УдалитьДополнительнуюСтроку();
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы2, СтруктураГруппы2);
	КолСтрокСписокЛьготников = СтруктураГруппы2.Количество();
	мСписокЛьготников.Области.КвоЗап.Значение = КолСтрокСписокЛьготников;
	мСписокЛьготников.Области.НомЛист.Значение =  1;//мСписокЛьготников.КоличествоСтраниц();
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуНажатие(Элемент)
	
	// Модифицируем структуру параметров автозаполнения ячеек
	ИзменитьТаблицуПараметровАвтозаполнения(1);
	ВставитьДополнительнуюСтраницу();
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "ИндВедомости", Ложь);

	ОбновитьТаблицуСтраницИндведомости();
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуНажатие(Элемент)
	
	ИзменитьТаблицуПараметровАвтозаполнения(-1); // удалить
	УдалитьДополнительнуюСтраницу();
	
	ОбновитьТаблицуСтраницИндведомости();
	
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуНажатие(Элемент)
	
	ОткрытьФормуСпискаДопСтраниц();
	
	ОбновитьТаблицуСтраницИндведомости();
	
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаНажатие(Элемент)
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(-1, ИмяТекущейСтраницыПанели);
	ОбновитьТаблицуСтраницИндведомости();
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаНажатие(Элемент)
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ПоказатьСтраницуМногостраничногоРаздела(1, ИмяТекущейСтраницыПанели);
	ОбновитьТаблицуСтраницИндведомости();
	
КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	
	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("НеДоступностьВыбораПечати",  ОписаниеТиповЧисло1);
	
	мДеревоСтраницОтчета.Строки.Очистить();
	
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ИндВедомости";
	СтрокаУровня1.Представление            = НСтр("ru='Индив. ведомости о застр. лице';uk='Індив. відомості про застр. особу'");
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаИндВедомости";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "СписокЛиц";
	СтрокаУровня1.Представление            = НСтр("ru='Список работаших лиц';uk='Список працюючих осіб'");
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаСписокЛиц";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "СписокЛьготников";
	СтрокаУровня1.Представление            = НСтр("ru='Список льготников';uk='Список пільговиків'");
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаСписокЛьготников";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Работодатель";
	СтрокаУровня1.Представление            = НСтр("ru='Сведения о работодателе';uk='Відомості про роботодавця'");
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаботодатель";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОписаниеПакета";
	СтрокаУровня1.Представление            = НСтр("ru = 'Описание пакета (бланк)'; uk = 'Опис пакета (бланк)'");
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаОписаниеПакета";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.НеДоступностьВыбораПечати= 1;
	
	мСтруктураАвтоЯрлыков.СтруктураПакета = СтрокаУровня1;
	
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Ярлык";
	СтрокаУровня1.Представление            = НСтр("ru = 'Ярлык пачки (бланк)'; uk = 'Ярлик пачки (бланк)'");
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаЯрлык";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.НеДоступностьВыбораПечати= 1;
	
	мСтруктураАвтоЯрлыков.СтруктураЯрлыка = СтрокаУровня1;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);
	
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);
	
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	
	
	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;
	
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	
	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе
	
	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);
	
	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да
	
	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да
	
	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);
	
	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);
	
	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателеньДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да
	
	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);
	
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);
	
	мСвойстваРазделовДекларации.Строки.Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	// Добавим св-ва Индивидульаных сведений
	СтрокаУровня1.ИмяСтраницы                          = "ИндВедомости";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "ИндВедомости";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателеньДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "СписокЛиц";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателеньДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	// Добавим св-ва Раздела1_2
	СтрокаУровня1.ИмяСтраницы                          = "СписокЛьготников";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателеньДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Работодатель";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателеньДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	
	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Ярлык";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателеньДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	
	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "ОписаниеПакета";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателеньДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	
	
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()


// Обрабатывает полученный из формы ФормаНастройкиСтраниц дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//  унифицирована для всех отчетов
Процедура УстановитьСистемуюОбластьПечатиОтчета()

	Если ТипЗнч(мДеревоСтраницОтчета) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаУровня1 Из мДеревоСтраницОтчета.Строки Цикл
		
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			
			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						
						УстановитьСистемуюОбластьПечатиСтраницыОтчета(СтруктураПараметров);
						
					КонецЦикла;

					Продолжить;

				КонецЕсли;
				
				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				
				УстановитьСистемуюОбластьПечатиСтраницыОтчета(СтруктураПараметров);
				
			КонецЦикла;

			Продолжить;

		КонецЕсли;
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);

		УстановитьСистемуюОбластьПечатиСтраницыОтчета(СтруктураПараметров);
		
	КонецЦикла;

КонецПроцедуры // 

// Процедура управляет системным выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//  процедура унифицирована
Процедура УстановитьСистемуюОбластьПечатиСтраницыОтчета(СтруктураПараметровЛиста)
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
  
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	
	ТабличноеПоле = ЭлементыФормы[ИмяТабличногоПоля];
	
	Если НЕ ТабличноеПоле.Области.Найти("ПредупреждениеОПечати") = Неопределено Тогда
	    ИмяОбластиПечати = "ПредупреждениеОПечати";
	ИначеЕсли ПустаяСтрока(ИмяОбластиТаблПоля) Тогда
		ИмяОбластиПечати = "";
	Иначе
		ИмяОбластиПечати = ИмяОбластиТаблПоля;
	КонецЕсли;
	
	ТабличноеПоле.ОбластьПечати = ТабличноеПоле.Области.Найти(ИмяОбластиПечати);
	
КонецПроцедуры // 


Функция СоздатьОписанияТипов(НазваниеТипа, Длина,Точность="")
	мас = Новый Массив;
	мас.Добавить(Тип(НазваниеТипа));
	Если Точность = "" Тогда
		КвалифСтроки = Новый КвалификаторыСтроки(Длина,ДопустимаяДлина.Переменная); 
	Иначе
		КвалифЧисла = Новый КвалификаторыЧисла(Длина,Точность,ДопустимыйЗнак.Неотрицательный); 
	КонецЕсли;	   
	Возврат Новый ОписаниеТипов(мас,КвалифСтроки,КвалифЧисла);
КонецФункции

//Создает таблицу с схемами выгрузки в Арм
Процедура СоздатьТаблицуСоСхемамиВыгрузки() Экспорт
	//для возможности выгрузки в АРМ ЗС файл
	ТбСхемыАрмЗс = Новый ТаблицаЗначений;
	ТипКолИмяСхемы = СоздатьОписанияТипов("Строка",60);
	ТбСхемыАрмЗс.Колонки.Добавить("ИмяСхемы",ТипКолИмяСхемы,"Имя схемы");
	ТипКолПредставлениеСхемы = СоздатьОписанияТипов("Строка",80);
	ТбСхемыАрмЗс.Колонки.Добавить("ПредставлениеСхемы",ТипКолПредставлениеСхемы,НСтр("ru='Наименование регл.отчета';uk='Найменування регл.звіту'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	ТбСхемыАрмЗс.Колонки.Добавить("НазваниеСтраницыПанели",ТипКолНазваниеСтраницыПанели,НСтр("ru='Наименование страницы панели';uk='Найменування сторінки панелі'"));
	
	ТипКолфВыгрузка = СоздатьОписанияТипов("Число",1,0);
	ТбСхемыАрмЗс.Колонки.Добавить("фВыгрузка",ТипКолфВыгрузка,НСтр("ru='Выгружать?';uk='Вивантажувати?'"));
	
	НовСтрока = ТбСхемыАрмЗс.Добавить();
	НовСтрока.ИмяСхемы = "ПоказателиАРМЗСИндВедомость"; 
	НовСтрока.ПредставлениеСхемы =НСтр("ru='Индивидуальная ведомость';uk='Індвідуальна відомість'");
	НовСтрока.НазваниеСтраницыПанели ="ИндВедомости";
	
	НовСтрока = ТбСхемыАрмЗс.Добавить();
	НовСтрока.ИмяСхемы = "ПоказателиАРМЗССписокЛьготников"; 
	НовСтрока.ПредставлениеСхемы =НСтр("ru='Список льготников';uk='Список льготників'");
	НовСтрока.НазваниеСтраницыПанели ="СписокЛьготников";
	
	НовСтрока = ТбСхемыАрмЗс.Добавить();
	НовСтрока.ИмяСхемы = "ПоказателиАРМЗССписокЛиц"; 
	НовСтрока.ПредставлениеСхемы =НСтр("ru='Список лиц';uk='Список осіб'");
	НовСтрока.НазваниеСтраницыПанели ="СписокЛиц";
	
	НовСтрока = ТбСхемыАрмЗс.Добавить();
	НовСтрока.ИмяСхемы = "ПоказателиАРМЗСРаботодатель"; 
	НовСтрока.ПредставлениеСхемы =НСтр("ru='Работодатель';uk='Роботодавець'");
	НовСтрока.НазваниеСтраницыПанели ="Работодатель"; 
	
КонецПроцедуры

//Выбор схемы выгрузки
Процедура  ОпределитьСписокВыгружаемыхСхем();
	Для Каждого стр Из ТбСхемыАрмЗс Цикл
		//по-умолчанию выгружаем все приложения
		стр.фВыгрузка = 1;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаменитьЗначенияХ(ТаблЗначений)
	Перем Значение;	
	Для стр = 1 По ТаблЗначений.Количество() Цикл
		СтруктураЗначений = ТаблЗначений[стр-1]["Данные"];
		СтруктураЗначений.Свойство("Пр",Значение);
		Если (Значение = "Х") или (Значение = "х" ) или (Значение = "X") или (Значение = "x" ) Тогда
			Значение  = 1 ;
			СтруктураЗначений.Вставить("Пр",Значение);	
		Иначе
			Значение  = 0 ;
			СтруктураЗначений.Вставить("Пр",Значение);	
		КонецЕсли;
		СтруктураЗначений.Свойство("Н",Значение);
		Если (Значение = "Х") или (Значение = "х" ) или (Значение = "X") или (Значение = "x" ) Тогда
			Значение  = 1 ;
			СтруктураЗначений.Вставить("Н",Значение);
		Иначе
			Значение  = 0 ;
			СтруктураЗначений.Вставить("Н",Значение);
		КонецЕсли;
		СтруктураЗначений.Свойство("К",Значение);
		Если (Значение = "Х") или (Значение = "х" ) или (Значение = "X") или (Значение = "x" ) Тогда
			Значение  = 1;
			СтруктураЗначений.Вставить("К",Значение);
		Иначе
			Значение  = 0;
			СтруктураЗначений.Вставить("К",Значение);
		КонецЕсли;
		СтруктураЗначений.Свойство("С",Значение);
		Если (Значение = "Х") или (Значение = "х" ) или (Значение = "X") или (Значение = "x" ) Тогда
			Значение  = 1;
			СтруктураЗначений.Вставить("С",Значение);
		Иначе
			Значение  = 0;
			СтруктураЗначений.Вставить("С",Значение);
		КонецЕсли;
		СтруктураЗначений.Свойство("НП",Значение);
		Если (Значение = "Х") или (Значение = "х" ) или (Значение = "X") или (Значение = "x" ) Тогда
			Значение  = 1;
			СтруктураЗначений.Вставить("НП",Значение);
		Иначе
			Значение  = 0;
			СтруктураЗначений.Вставить("НП",Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


Процедура ВыгрузитьВАРМЗС()
	Перем спДанныеОтчета, спПараметры,ПоказателиОтчета,ПоказателиТекущегоЛиста;
	Перем НужнаяСтруктура,Значение,ДанныеОтчета;
	//Создадим структуру со списком параметров для передачи их в обработку выгрузки
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;

	спПараметры = Новый Структура();
	спПараметры.Вставить("Команда","ЭкспортАРМЗС"); //Операция
	
	ОпределитьСписокВыгружаемыхСхем();
	спПараметры.Вставить("Схемы",ТбСхемыАрмЗс );	//Схемы (правила) выгрузки. Определеяются ГНАУ
	
	// Вставляем данные  ячеек таблицы	
	
	ОбновитьСтруктуруМногострочныхРазделов();
	ОбновитьСтруктуруМногостраничныхРазделов();
	
	//Создаем структуру данных сохранения 
	ДанныеОтчета= Новый Структура;
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ДанныеОтчета.Вставить(ИмяТекТабличногоПоля, );
		
	КонецЦикла;
	
	// Данные для Табличного поля ИндВед
	
	ДанныеТекущегоЛиста = Новый Структура ();
	
	Значение =  "ФПЕН4.ZDI";
	ДанныеТекущегоЛиста.Вставить("ИмяФайла",Значение);
	
	Значение="Y";
	ДанныеТекущегоЛиста.Вставить("PerType",Значение);
	Значение=Формат(ГодЗаполненияОтчета,"ЧЦ=4;ЧГ=0;");
	ДанныеТекущегоЛиста.Вставить("Year",СокрЛп(Формат(Значение)));
	Значение="ANSI";
	ДанныеТекущегоЛиста.Вставить("Encoding",Значение);
	Если мСтруктураМногостраничныхРазделов.Свойство("ИндВедомости",Значение) Тогда
		ЗаменитьЗначенияХ(Значение);
		ДанныеТекущегоЛиста.Вставить("МногостраничнаяЧасть",Значение);
	КонецЕсли;
	ДанныеОтчета.ПолеТабличногоДокументаИндВедомости = ДанныеТекущегоЛиста;
	Если Значение.Количество() = 1 Тогда 
		СтрТабл = Значение[0]["Данные"];
		Если СтрТабл["Инн"]="" Тогда 
			ТбСхемыАрмЗс[0].фВыгрузка = 0;
		КонецЕсли;
	КонецЕсли;	
	
	
	
	
	//Данные для Табличного  поля СписокЛиц  ПолеТаблинчогоДокументаСписокЛиц
	
	ДанныеТекущегоЛиста = Новый Структура();
	Значение = ЭлементыФормы["ПолеТабличногоДокументаСписокЛиц"].Области.КодСтрахователя.Значение;
	Значение = Значение + ЭлементыФормы["ПолеТабличногоДокументаСписокЛиц"].Области.ГГГГ.Значение + "ФПЕН5.ZDI";
	ДанныеТекущегоЛиста.Вставить("ИмяФайла",Значение);
	Значение="Y";
	ДанныеТекущегоЛиста.Вставить("PerType",Значение);
	Значение=Формат(ГодЗаполненияОтчета,"ЧЦ=4;ЧГ=0;");
	ДанныеТекущегоЛиста.Вставить("Year",СокрЛп(Формат(Значение)));
	Значение="ANSI";
	ДанныеТекущегоЛиста.Вставить("Encoding",Значение);
	
	Значение = ЭлементыФормы["ПолеТабличногоДокументаСписокЛиц"].Области.КвоЗап.Значение;
	ДанныеТекущегоЛиста.Вставить("КвоЗап",Значение);
	
	Значение = ЭлементыФормы["ПолеТабличногоДокументаСписокЛиц"].Области.НомЛист.Значение;
	ДанныеТекущегоЛиста.Вставить("НомЛист",Значение);	
	
	мСтруктураМногострочныхРазделов.Свойство("СписокЛиц",Значение);
	ДанныеТекущегоЛиста.Вставить("МногострочнаяЧасть",Значение);
	
	Если Значение.Количество() = 1 Тогда 
		Если Значение[0]["Инн"]="" Тогда 
			ТбСхемыАрмЗс[2].фВыгрузка = 0;
		КонецЕсли;
	КонецЕсли;		
	
	ДанныеОтчета.ПолеТабличногоДокументаСписокЛиц=ДанныеТекущегоЛиста;
	
	//Данные для Табличного  поля СписокЛьготников  ПолеТабличногоДокументаСписокЛьгоников
	ДанныеТекущегоЛиста = Новый Структура();
	Значение = ЭлементыФормы["ПолеТабличногоДокументаСписокЛьготников"].Области.КодСтрахователя.Значение;
	Значение = Значение + ЭлементыФормы["ПолеТабличногоДокументаСписокЛьготников"].Области.ГГГГ.Значение + "ФПЕН6.ZDI";
	ДанныеТекущегоЛиста.Вставить("ИмяФайла",Значение);	
	
	Значение = "Y";
	ДанныеТекущегоЛиста.Вставить("PerType",Значение);
	Значение = Формат(ГодЗаполненияОтчета,"ЧЦ=4;ЧГ=0;");
	ДанныеТекущегоЛиста.Вставить("Year",СокрЛп(Формат(Значение)));
	Значение = "ANSI";
	ДанныеТекущегоЛиста.Вставить("Encoding",Значение);
	
	Значение = ЭлементыФормы["ПолеТабличногоДокументаСписокЛьготников"].Области.Н.Значение;
	Если (Значение = "Х") или (Значение = "х" ) или (Значение = "X") или (Значение = "x" ) Тогда
		Значение  = 1
	Иначе
		Значение  = 0
	КонецЕсли;
	ДанныеТекущегоЛиста.Вставить("Н",Значение);
	
	Значение = ЭлементыФормы["ПолеТабличногоДокументаСписокЛьготников"].Области.К.Значение;
	Если (Значение = "Х") или (Значение = "х" ) или (Значение = "X") или (Значение = "x" ) Тогда
		Значение  = 1
	Иначе
		Значение  = 0
	КонецЕсли;
	ДанныеТекущегоЛиста.Вставить("К",Значение);
	
	Значение = ЭлементыФормы["ПолеТабличногоДокументаСписокЛьготников"].Области.О.Значение;
	Если (Значение = "Х") или (Значение = "х" ) или (Значение = "X") или (Значение = "x" ) Тогда
		Значение  = 1
	Иначе
		Значение  = 0
	КонецЕсли;
	ДанныеТекущегоЛиста.Вставить("О",Значение);
	
	Значение = ЭлементыФормы["ПолеТабличногоДокументаСписокЛьготников"].Области.НП.Значение;
	Если (Значение = "Х") или (Значение = "х" ) или (Значение = "X") или (Значение = "x" ) Тогда
		Значение  = 1
	Иначе
		Значение  = 0
	КонецЕсли;
	ДанныеТекущегоЛиста.Вставить("НП",Значение);
	
	Значение = ЭлементыФормы["ПолеТабличногоДокументаСписокЛьготников"].Области.КвоЗап.Значение;
	ДанныеТекущегоЛиста.Вставить("КвоЗап",Значение);
	
	Значение = ЭлементыФормы["ПолеТабличногоДокументаСписокЛьготников"].Области.НомЛист.Значение;
	ДанныеТекущегоЛиста.Вставить("НомЛист",Значение);	
	
	Значение = ЭлементыФормы["ПолеТабличногоДокументаСписокЛьготников"].Области.НомерПачки.Значение;
	ДанныеТекущегоЛиста.Вставить("НомерПачки",Значение);
	
	мСтруктураМногострочныхРазделов.Свойство("СписокЛьготников",Значение);
	ДанныеТекущегоЛиста.Вставить("МногострочнаяЧасть",Значение);
	
	Если Значение.Количество() = 1 Тогда 
		Если Значение[0]["Инн"]="" Тогда 
			ТбСхемыАрмЗс[1].фВыгрузка = 0;
		КонецЕсли;
	КонецЕсли;		
	
	
	ДанныеОтчета.ПолеТабличногоДокументаСписокЛьготников=ДанныеТекущегоЛиста;
	
	//Данные для Табличного поля Работодатель  ПолеТабличногоДокументаРаботодатель
	ДанныеТекущегоЛиста = Новый Структура();
	
	ТекущееПоле  = ЭлементыФормы["ПолеТабличногоДокументаРаботодатель"];
	ДанныеТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекущееПоле,1);
	Значение = ЭлементыФормы["ПолеТабличногоДокументаРаботодатель"].Области.ОргСокр.Значение;
	Значение = Значение + ЭлементыФормы["ПолеТабличногоДокументаРаботодатель"].Области.ГГГГ.Значение + "В_РОБ.ZDI";
	Значение = СтрЗаменить(Значение," ","");
	ДанныеТекущегоЛиста.Вставить("ИмяФайла",Значение);	  	
	Значение = "Y";
	ДанныеТекущегоЛиста.Вставить("PerType",Значение);
	Значение = Формат(ГодЗаполненияОтчета,"ЧЦ=4;ЧГ=0;");
	ДанныеТекущегоЛиста.Вставить("Year",СокрЛп(Формат(Значение)));
	Значение = "ANSI";
	ДанныеТекущегоЛиста.Вставить("Encoding",Значение);
	Значение = ЭлементыФормы["ПолеТабличногоДокументаРаботодатель"].Области.Пр.Значение;
	Если (Значение = "Х") или (Значение = "х" ) или (Значение = "X") или (Значение = "x" ) Тогда
		Значение  = 1
	Иначе
		Значение  = 0
	КонецЕсли;
	ДанныеТекущегоЛиста.Вставить("Пр",Значение);
	Год      = ЭлементыФормы["ПолеТабличногоДокументаРаботодатель"].Области.ГГГГ1.Значение;
	Месяц    = ЭлементыФормы["ПолеТабличногоДокументаРаботодатель"].Области.ММ1.Значение;
	День     = ЭлементыФормы["ПолеТабличногоДокументаРаботодатель"].Области.ДД1.Значение;
	Если (День <> "") И (Месяц<> "") И (Год <> "") Тогда
		Значение = День + "." + Месяц + "." +  Год ;
	Иначе 
		Значение="";
	КонецЕсли;
	ДанныеТекущегоЛиста.Вставить("ДатаСозданияОрг",Значение);
	
	
	ДанныеОтчета.ПолеТабличногоДокументаРаботодатель = ДанныеТекущегоЛиста;
	Если ДанныеТекущегоЛиста.ЕДРПОУ = ""  и ДанныеТекущегоЛиста.ОргПолное = "" Тогда
		ТбСхемыАрмЗс[3].фВыгрузка = 0;	
	КонецЕсли; 
	
	
	// Вставляем данные отчета
	спПараметры.Вставить("ДанныеОтчета",ДанныеОтчета);
	
	КаталогДанныхФирмы = Организация.НаименованиеПолное;
	спПараметры.Вставить("КаталогДанныхФирмы",КаталогДанныхФирмы); //каталог для сохранения выгрузки
	ОбработкаЭкспортВАРМЗС = РегламентированнаяОтчетность.РеглОтчеты("РегламентированныйОтчетМастерВыгрузкиРегламентированнойОтчетности",Истина);

	ИдФормы = "Форма";   
	
	ФормаОбр = ОбработкаЭкспортВАРМЗС.ПолучитьФорму(ИдФормы);
	ФормаОбр.спПараметры = спПараметры; 
	ФормаОбр.ИмяНужногоОтчета = "РегламентированныйОтчетПерсонифицированныеФормыПФ";
	
	ФормаОбр.тбСхемы = спПараметры.Схемы;
	ФормаОбр.Открыть();

	ФормаОбр.Объект = ЭтотОбъект;
	ФормаОбр.Док    = мСохраненныйДок;
	
	
	
КонецПроцедуры


Процедура КоманднаяПанельДействийВыгрузитьВАРМЗС(Кнопка)
	
	ДополнитьСтруктураМногострочныхРазделов();
	ВыгрузитьВАРМЗС();
	
КонецПроцедуры



Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицыСтраницЗаполнитьПоОрганизации(Кнопка)
	
	ЗаполнитьАвтоИНДАНИ();
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицыСтраницЗаполнитьПоПодразделению(Кнопка)
	
	Подразделение = Справочники.ПодразделенияОрганизаций.ПолучитьФормуВыбора().ОткрытьМодально();
	Если Не Подразделение = Неопределено Тогда
	
		ЗаполнитьАвтоИНДАНИ(Подразделение);	
				
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицыСтраницЗаполнитьПоСотруднику(Кнопка)
	
	ФизЛицо = Справочники.ФизическиеЛица.ПолучитьФормуВыбора().ОткрытьМодально();
	Если Не ФизЛицо = Неопределено Тогда
	
		ЗаполнитьАвтоИНДАНИ(ФизЛицо);	
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаИндВедомостиR10C4ПриИзменении(Элемент)
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "ИндВедомости", Ложь);
	ОбновитьТаблицуСтраницИндведомости();
КонецПроцедуры

Процедура ПолеТабличногоДокументаИндВедомостиR12C4ПриИзменении(Элемент)
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "ИндВедомости", Ложь);
	ОбновитьТаблицуСтраницИндведомости();
КонецПроцедуры

Процедура ПолеТабличногоДокументаИндВедомостиR14C4ПриИзменении(Элемент)
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "ИндВедомости", Ложь);
	ОбновитьТаблицуСтраницИндведомости();
КонецПроцедуры

Процедура ПолеТабличногоДокументаИндВедомостиR8C15ПриИзменении(Элемент)
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "ИндВедомости", Ложь);
	ОбновитьТаблицуСтраницИндведомости();
КонецПроцедуры

Процедура ТаблицаСтраницВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Перем ТаблицаСтраницРаздела;
	
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "ИндВедомости", Истина);
	
	НомерТекущейСтраницы = 0;
	Если мСтруктураМногостраничныхРазделов.Свойство("ИндВедомости", ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		КонецЕсли;
	КонецЕсли;
	
	ВыбраннаяСтраница = ВыбраннаяСтрока.НомерСтраницы - 1;
	
	Если НомерТекущейСтраницы <> ВыбраннаяСтраница Тогда
		РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, ВыбраннаяСтраница, "ИндВедомости", Истина);
		Модифицированность = Истина;
	КонецЕсли;
	
	ОбновитьТаблицуСтраницИндведомости();	
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицыСтраницУдалить(Кнопка)
	
	Перем ТаблицаСтраницРаздела;
	
	ТекущаяСтрока = ЭлементыФормы.ТаблицаСтраниц.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// сделаем страницу текущей, а потом удалим
	НомерТекущейСтраницы = 0;
	Если мСтруктураМногостраничныхРазделов.Свойство("ИндВедомости", ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		КонецЕсли;
	КонецЕсли;
	
	ВыбраннаяСтраница = ТекущаяСтрока.НомерСтраницы - 1;
	
	Если НомерТекущейСтраницы <> ВыбраннаяСтраница Тогда
		РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, ВыбраннаяСтраница, "ИндВедомости", Истина);
		Модифицированность = Истина;
	КонецЕсли;
	
	// теперь удаляем
	ИзменитьТаблицуПараметровАвтозаполнения(-1); // удалить
	УдалитьДополнительнуюСтраницу();
	
	ОбновитьТаблицуСтраницИндведомости();	
	
КонецПроцедуры

Процедура ОбновитьТаблицуСтраницИндведомости()
	
	Перем СтруктураТекущейСтроки, ТаблицаСтраницРаздела;
	
	ТекущаяСтрока = ЭлементыФормы.ТаблицаСтраниц.ТекущиеДанные;
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		СтруктураТекущейСтроки = Новый Структура("НомерСтраницы", ТекущаяСтрока.НомерСтраницы);
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство("ИндВедомости", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраниц.Очистить();
	
	Для каждого Страница Из ТаблицаСтраницРаздела Цикл
		СтрокаТаблицыСтраниц = ТаблицаСтраниц.Добавить();
	    СтрокаТаблицыСтраниц.НомерСтраницы = ТаблицаСтраницРаздела.Индекс(Страница) + 1;
		Если НЕ Страница.Данные = Неопределено Тогда
			СтрокаТаблицыСтраниц.ФИО = Страница.Данные.Фамилия + " " + Страница.Данные.Имя  + " " + Страница.Данные.Отч;
			СтрокаТаблицыСтраниц.ИНН = Страница.Данные.ИНН;
		КонецЕсли;
		СтрокаТаблицыСтраниц.АктивнаяСтраница = Страница.АктивнаяСтраница;
	КонецЦикла;
	
	Если НЕ СтруктураТекущейСтроки = Неопределено Тогда
	
		ТекущаяСтрока = ТаблицаСтраниц.НайтиСтроки(СтруктураТекущейСтроки);
		Если ТекущаяСтрока.Количество() > 0 Тогда
		
			ЭлементыФормы.ТаблицаСтраниц.ТекущаяСтрока = ТекущаяСтрока[0];	
			
		Иначе
			// станем не последнюю строку
			ЭлементыФормы.ТаблицаСтраниц.ТекущаяСтрока = ТаблицаСтраниц[ТаблицаСтраниц.количество()-1];
			
		КонецЕсли;
	
	КонецЕсли;
	
	ЭлементыФормы.ТаблицаСтраниц.ОбновитьСтроки();
	
КонецПроцедуры

Процедура ТаблицаСтраницПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.АктивнаяСтраница Тогда
	
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
	
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЯрлыкиФормироватьАвтоматическиПриИзменении(Элемент)
	УстановитьВидимость();
	
	ОписаниеСтраницы = мДеревоСтраницОтчета.Строки.Найти("Ярлык", "ИмяСтраницы");
	Если НЕ ОписаниеСтраницы = Неопределено Тогда
		ОписаниеСтраницы.ВыводНаПечать 				= ?(ЯрлыкиФормироватьАвтоматически,0,1);
		ОписаниеСтраницы.НеДоступностьВыбораПечати	= ?(ЯрлыкиФормироватьАвтоматически,1,0);
	КонецЕсли;
	
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	
КонецПроцедуры

Процедура ОписаниеПакетаФормироватьАвтоматическиПриИзменении(Элемент)
	УстановитьВидимость();
	
	ОписаниеСтраницы = мДеревоСтраницОтчета.Строки.Найти("ОписаниеПакета", "ИмяСтраницы");
	Если НЕ ОписаниеСтраницы = Неопределено Тогда
		ОписаниеСтраницы.ВыводНаПечать 				= ?(ОписаниеПакетаФормироватьАвтоматически,0,1);
		ОписаниеСтраницы.НеДоступностьВыбораПечати	= ?(ОписаниеПакетаФормироватьАвтоматически,1,0);
	КонецЕсли;
	
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	
КонецПроцедуры

Процедура УстановитьВидимость()

	ЭлементыФормы.ПолеТабличногоДокументаЯрлык.Доступность = НЕ ЯрлыкиФормироватьАвтоматически;
	
	//ЭлементыФормы.ПервыйНомерПачки.Видимость = ЯрлыкиФормироватьАвтоматически;
	//ЭлементыФормы.НадписьПервыйНомерПачки.Видимость = ЯрлыкиФормироватьАвтоматически;
	//
	ЭлементыФормы.ПолеТабличногоДокументаЯрлык.Область().Узор = ?(ЯрлыкиФормироватьАвтоматически, 
																  ТипУзораТабличногоДокумента.Узор3, 
																  Неопределено);
	
	ЭлементыФормы.ПолеТабличногоДокументаОписаниеПакета.Доступность = НЕ ОписаниеПакетаФормироватьАвтоматически;
	ЭлементыФормы.ПолеТабличногоДокументаОписаниеПакета.Область().Узор = ?(ОписаниеПакетаФормироватьАвтоматически, 
																  ТипУзораТабличногоДокумента.Узор3, 
																  Неопределено);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
// формирование человеческого описания для элементов перечисления ПорядкиОкругленияОтчетности
// крайне важна правильная установка типа для этого реквизита формы отчета
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       НСтр("ru='в гривнях';uk='у гривнях'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    НСтр("ru='в тысячах гривень';uk='у тисячах гривень'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, НСтр("ru='в миллионах гривень';uk='у мільйонах гривень'"));

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Число"));
ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15, 2));

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Число"));
ОписаниеТиповЧислоЦел = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(4, 0));

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Число"));
ОписаниеТиповЧислоИНН = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(10, 0));

МассивТипов = Новый Массив; 
МассивТипов.Добавить(Тип("Строка"));
ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(254, ДопустимаяДлина.Переменная));

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(18,2);
ОписаниеТиповЧисло10   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10,0);
ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
ОписаниеТиповСтрока10  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10);
ОписаниеТиповСтрока9   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(9);
ОписаниеТиповСтрока1   = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1);
ОписаниеТиповДата      = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);


// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1 = "СписокЛиц";
// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)

КолИсхСтрокИдГруппы1 = 1;

СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("ИНН",     ОписаниеТиповСтрока10);
СтруктураГруппы1.Колонки.Добавить("Фамилия", ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("Имя",     ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("Отчество",ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("ДатаРожд", ОписаниеТиповДата);
СтруктураГруппы1.Колонки.Добавить("Пол", ОписаниеТиповСтрока10);
СтруктураГруппы1.Колонки.Добавить("ДатаПриема",ОписаниеТиповДата);
СтруктураГруппы1.Колонки.Добавить("ДатаУвольнения",ОписаниеТиповДата);

мИдГруппы2 = "СписокЛьготников";
// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)

КолИсхСтрокИдГруппы2 = 1;

СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("ИНН",     ОписаниеТиповСтрока10);
СтруктураГруппы2.Колонки.Добавить("КодОснования",   ОписаниеТиповСтрока);
СтруктураГруппы2.Колонки.Добавить("Закон",   ОписаниеТиповСтрока);
СтруктураГруппы2.Колонки.Добавить("Статья",   ОписаниеТиповСтрока);
СтруктураГруппы2.Колонки.Добавить("Пункт",   ОписаниеТиповЧисло10);
СтруктураГруппы2.Колонки.Добавить("Часть",   ОписаниеТиповСтрока);
СтруктураГруппы2.Колонки.Добавить("Фамилия", ОписаниеТиповСтрока);
СтруктураГруппы2.Колонки.Добавить("СтажМес",    ОписаниеТиповЧисло10);
СтруктураГруппы2.Колонки.Добавить("СтажДень",    ОписаниеТиповЧисло10);
СтруктураГруппы2.Колонки.Добавить("Имя",     ОписаниеТиповСтрока);
СтруктураГруппы2.Колонки.Добавить("Отчество",ОписаниеТиповСтрока);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);


ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы.
//    - структура, элементы которой содержат данные дополнительных строк страницы, где
//      в качестве ключа используется имя многострочного блока, а в качестве значения-
//      таблица значений показателей многострочного блока.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
СтрПерваяСтраница = ТаблицаСтраницыРаздела.Добавить();
СтрПерваяСтраница.Представление      = НСтр("ru='Новая страница';uk='Нова сторінка'");
СтрПерваяСтраница.АктивнаяСтраница   = Истина;

//ТаблицаСтраницыРаздела.Колонки.Добавить("ДанныеДопСтрок");

ТаблицаДляМногостраничныхДокСодержащихМногострочность            = Новый ТаблицаЗначений;
ТаблицаДляМногостраничныхДокСодержащихМногострочность.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, НСтр("ru='Наименование';uk='Найменування'"));
ТаблицаДляМногостраничныхДокСодержащихМногострочность.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
ТаблицаДляМногостраничныхДокСодержащихМногострочность.Колонки.Добавить("Данные");
ТаблицаДляМногостраничныхДокСодержащихМногострочность.Колонки.Добавить("ДанныеДопСтрок");
СтрПерваяСтраница = ТаблицаДляМногостраничныхДокСодержащихМногострочность.Добавить();
СтрПерваяСтраница.Представление      = НСтр("ru='Новая страница';uk='Нова сторінка'");
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.ДанныеДопСтрок = Неопределено;

// Структура содержит данные дополнительных страниц 
мСтруктураМногостраничныхРазделов = Новый Структура;

// Элемент структуры - данные дополнительных страниц раздела с индсведениями
// о физических лецах
ТаблицаСтраницыФизЛиц = ТаблицаСтраницыРаздела.Скопировать();
мСтруктураМногостраничныхРазделов.Вставить("ИндВедомости", ТаблицаСтраницыФизЛиц);

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
//мВерсияФормы = "03/07/2004";
мВерсияФормы = "01/06/2008";

мСоставПоказателей = "СоставПоказателей";

мПечатныеФормы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;

мСтруктураАвтоЯрлыков = Новый Структура;
мСтруктураАвтоЯрлыков.Вставить("ТекНомерПачки");
мСтруктураАвтоЯрлыков.Вставить("СтруктураЯрлыка");
мСтруктураАвтоЯрлыков.Вставить("СтруктураПакета");