
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
//каждая закладка отчета - это объект ПолеТабличногоДокумента
Перем мОтчетФССУтратаТрудосп;

Перем мСоставПоказателей Экспорт;

// переменный для хранения бухгалтерских итогов
Перем мБухИтоги, мБухИтогиРС;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы;

//вспомогательные переменные
Перем СуммаВыплаты;

Перем СтрокиДекларации;

Перем СчетФСС, СчетФСС378, СчетРасчСчет1, СчетРасчСчет2,СчетРасчСчет3, СчетРасчСчет4, СчетЗП, СчетПрочихНачислений, СчетПФ;

Перем ЭтоЗУП;

Перем МассивСчетов,	МассивСубконто;

Перем тбСхемыXML;

Перем мСтруктураМногострочныхРазделов;

Перем мПечатныеФормы Экспорт;

Перем ЕстьДуплекс;

Перем мМенеджерЗвит1С Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураПоказателейВнутрСвязи = Новый Структура;

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		Если Тип ("РисунокТабличногоДокумента") <> ТипЗнч (ТекущаяОбласть) Тогда
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//Проверяется условие не является ли ТекущаяОбласть многоячеечной областью для вывода 
		//документа на печать. Если является - то следующую проверку выполнять не нужно
		Если (ТекущаяОбласть.Имя = "Область1" ИЛИ ТекущаяОбласть.Имя = "Область2") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;
 		
		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		
		Если  (Лев(ТекущаяОбласть.Имя,2) = "CC") Тогда
			ИмяПоказателя      = Сред(ТекущаяОбласть.Имя,2);
			
			ЗначениеПоказателя = ТекущаяОбласть.Значение;
			СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		КонецЕсли;

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2011Кв1");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2011Кв1");

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(15, ДопустимаяДлина.Переменная));

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			Если    чВариантЗаполнения  <> 0 Тогда

				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку.

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						
						СтрокаЭлементаМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
						Если СтрокаЭлементаМассива = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						ИначеЕсли НЕ СтрокаЭлементаМассива.ВариантЗаполнения = ВариантЗаполнения Тогда
							
							СтрокаЭлементаМассива.ВариантЗаполнения = ВариантЗаполнения;
							ЕстьИзменения = Истина;
							
						КонецЕсли;
					КонецЦикла;

					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,а в текущей
							// версии - отключено. В этом случае удаляем эту ячейку из таблицы пользовательских
							// настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Процедура управляет показом в форме периода построения отчета,
Процедура ПоказатьПериод()

	СтрПериодОтчета = ПредставлениеПериода(НачалоГода(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "Л = uk_UA; ФП = Истина" );

	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
    мОтчетФССУтратаТрудосп.Области.ПериодОтчета.Значение = "за  " +  СтрПериодОтчета;
	
	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	
	мОтчетФССУтратаТрудосп.Области.ДеньДаты.Значение 	= ЧастиДатыПодписи.День;
	мОтчетФССУтратаТрудосп.Области.МесяцДаты.Значение 	= ЧастиДатыПодписи.Месяц;
	Если ЧастиДатыПодписи.Свойство("ДвеПоследниеЦифрыГода") Тогда
		мОтчетФССУтратаТрудосп.Области.ГодДаты.Значение 	= ЧастиДатыПодписи.ДвеПоследниеЦифрыГода;
	Иначе
		мОтчетФССУтратаТрудосп.Области.ГодДаты.Значение 	= Формат(ДатаПодписи, "ДФ=yy");
	Конецесли;
	
КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
// пока не прописаны коды - вернуться
Процедура ЗаполнитьСведенияОбОрганизации()

	

	NSTRAX = Организация.НаименованиеПолное;

	мОтчетФССУтратаТрудосп.Области.NSTRAX.Значение = NSTRAX;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","КодЗКГНГ");
	СписокПоказателей.Добавить("","НомерФССУтратаТрудосп");
	
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей); 
	
	ФИОДиректора = СведенияОбОрганизации.ФИОРук;
	ФИОГлавБуха  = СведенияОбОрганизации.ФИОБух;
	OKPO         = СведенияОбОрганизации.КодПоЕДРПОУ;
	НомерФССУтратаТрудосп = СведенияОбОрганизации.НомерФССУтратаТрудосп;
	
	мОтчетФССУтратаТрудосп.Области.OKPO.Значение = OKPO;
	мОтчетФССУтратаТрудосп.Области.CSTRAX.Значение = НомерФССУтратаТрудосп;
    мОтчетФССУтратаТрудосп.Области.ОргБухгалтер.Значение = СокрЛП(ФИОГлавБуха); 
	мОтчетФССУтратаТрудосп.Области.ОргДиректор.Значение = СокрЛП(ФИОДиректора);
	
	мОтчетФССУтратаТрудосп.Области.Адрес.Значение = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
	мОтчетФССУтратаТрудосп.Области.Телефон.Значение = УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	
	ДопСведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, мДатаНачалапериодаОтчета, "uk");
	мОтчетФССУтратаТрудосп.Области.РС.Значение     = ДопСведенияОбОрганизации.НомерСчета;
	мОтчетФССУтратаТрудосп.Области.Банк.Значение   = ДопСведенияОбОрганизации.Банк;
	мОтчетФССУтратаТрудосп.Области.МФО.Значение    = ДопСведенияОбОрганизации.МФО;

КонецПроцедуры


// Процедуа контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(НСтр("ru='Отчет в ФСС от временной утраты трудоспособности: при выводе сумм в гривнях точность не может превышать 2 знака';uk='Звіт у ФСС від тимчасової втрати працездатності: при виведенні сум у гривнях точність не може перевищувати 2 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	КонецЕсли;

	Сообщить(НСтр("ru='После изменения формата вывода значений, для корректного расчета итогов необходимо перезаполнить отчет!';uk='Після зміни формату виводу значень, для корректного розрахунку підсумків треба перезаполвнити звіт!'"), СтатусСообщения.Внимание);	
	
КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=2; ЧС = 0";

	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "ОтчетФССУтратаТрудосп";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			Попытка
				ИмяПоказателя     = Строка.КодПоказателя;
				ВариантЗаполнения = Строка.ВариантЗаполнения;
				Коммент           = Строка.Комментарий;
				
				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Коммент)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Коммент;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
			Исключение 
				Продолжить;
			КонецПопытки;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()


// Обновляет пользовательские настройки при изменении версии формы.
// унифицирована, однако использование пока ... вопрос
Процедура ОбновитьПользовательскиеНастройки(СписокСохранения)
    Перем ДанныеМногострочныхРазделов;
	Перем ИсходноеКоличествоСтрокГруппы;
	
	Сообщить(НСтр("ru='Измененилась версия формы отчета."
"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
"Виконується відновлення користувальницьких настройок.'"), СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	//ВерсияФормы = СписокСохранения.ВерсияФормы;
	//Если ВерсияФормы = "01/04/2011" Тогда
	//
	//	СписокСохранения.ВерсияФормы = "../../....";
	//  Модифицированность = Истина;
	//КонецЕсли;


	Если Модифицированность ИЛИ ЕстьИзмененияВариантыЗаполнения Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить(НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Оновлення користувальницьких настройок успішно завершене!'"));

	Иначе

		Сообщить(НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі користувальницьких настройок не виявлені!'"));

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетФССУтратаТрудосп";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если (ТипЗнч(ТекущаяЯчейка) <> Тип("РисунокТабличногоДокумента")) И (Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник) Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетФССУтратаТрудосп";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Коммент           = НайденнаяСтрока.Комментарий;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Коммент;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя)

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("ОтчетФССУтратаТрудосп");
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	мОтчетФССУтратаТрудосп.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Тип ("РисунокТабличногоДокумента") = ТипЗнч (ТекущаяОбласть) Тогда
			ТекущаяОбласть.Значение = ""; 
		Иначе	
			
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ТекущаяОбласть.СодержитЗначение Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяОбласть.Очистить();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить()

	// Очищаем содержимое ячеек поля табличного документа
	ТекТабличноеПоле = мОтчетФССУтратаТрудосп;
	ОчиститьТабличноеПоле(ТекТабличноеПоле);

	// Выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	ЗаполнитьСведенияОбОрганизации();
	
	ПоказатьПериод();
	
	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

КонецПроцедуры // Очистить()

Процедура РазбитьПечатнуюФорму(ПечФорма,  ИмяФормы = "")
	
	УчитыватьАвтомасштаб = Истина;

	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	Если ЕстьДуплекс Тогда
		НовТаблДок = Новый ТабличныйДокумент();
	КонецЕсли;
	ПослВерх = 1;
	
	Сч = 0;
	Пока Сч < ПечФорма.ВысотаТаблицы Цикл
		 Сч = Сч + 1;
		 
		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			
			// проверим, не должна ли предпоследняя строка печататься вместе со текущей ("не влезшей") строкой.
			// если так, то "откатимся" вверх
			Пока ПослВерх < Сч-1 И ПечФорма.ПолучитьОбласть(Сч-1, , Сч-1, ).Область().ВместеСоСледующим Цикл
			  Сч = Сч - 1;
			КонецЦикла; 
			
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		Если НЕ ЕстьДуплекс Тогда
			НовТаблДок = Новый ТабличныйДокумент();
		КонецЕсли;
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		Если НЕ ЕстьДуплекс Тогда
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
		КонецЕсли;
	КонецЕсли;
	Если ЕстьДуплекс Тогда
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;

КонецПроцедуры

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати)
    мПечатныеФормы.Очистить();

	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ОбластьПечати = мОтчетФССУтратаТрудосп.ПолучитьОбласть("Шапка");
	ПечатнаяФорма.Вывести(ОбластьПечати);


	ОбластьПечати = мОтчетФССУтратаТрудосп.ПолучитьОбласть("Отчет");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	
	ОбластьПечати = мОтчетФССУтратаТрудосп.ПолучитьОбласть("Подвал");
	ПечатнаяФорма.Вывести(ОбластьПечати);


	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	
	РазбитьПечатнуюФорму(ПечатнаяФорма,  "Звіт в ФСС");
	
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()


// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция  Сохранить()  Экспорт

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;

	
	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.

		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;

		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();

	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;


	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаОтчетФССУтратаТрудосп";
	
	ТекТабличноеПоле        = мОтчетФССУтратаТрудосп;

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	СписокСохранения.Вставить("Авторасчет", Авторасчет);
	
	// Сохраняем выбранные листы для печати в хранилище
	ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
	мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	Модифицированность = Ложь;

	Возврат Истина;
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	// восстанавливаем реквизиты отчета
	Организация              = мСохраненныйДок.Организация;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;
	
	ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки(СписокСохранения);
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Если НЕ СписокСохранения.Свойство("Авторасчет", Авторасчет) Тогда
		Авторасчет = Истина;	
	КонецЕсли;	

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	УстановитьФорматВывода();
	
	АвторасчетПриИзменении(Неопределено);

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()

	Если НЕ Авторасчет = Истина Тогда
		Возврат;
	КонецЕсли;
	
	
	мОтчетФССУтратаТрудосп.Области.S254.Значение = мОтчетФССУтратаТрудосп.Области.S214.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S224.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S234.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S244.Значение;
	
	мОтчетФССУтратаТрудосп.Области.S284.Значение = мОтчетФССУтратаТрудосп.Области.S254.Значение 
												 + мОтчетФССУтратаТрудосп.Области.S264.Значение 
												 + мОтчетФССУтратаТрудосп.Области.S274.Значение;
												 
	мОтчетФССУтратаТрудосп.Области.S256.Значение = мОтчетФССУтратаТрудосп.Области.S216.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S226.Значение
												 + мОтчетФССУтратаТрудосп.Области.S236.Значение;
												 
	мОтчетФССУтратаТрудосп.Области.S257.Значение = мОтчетФССУтратаТрудосп.Области.S217.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S227.Значение
												 + мОтчетФССУтратаТрудосп.Области.S237.Значение;
	
												 
	мОтчетФССУтратаТрудосп.Области.S120.Значение = мОтчетФССУтратаТрудосп.Области.S284.Значение;
												 
	//Всього
	//На початок періоду
	мОтчетФССУтратаТрудосп.Области.S113.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S101.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S102.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S103.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S104.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S105.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S106.Значение)
												   + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S107.Значение)
												   + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S108.Значение)
												   + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S109.Значение)
												   + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S110.Значение)
												   //+ ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S111.Значение)
												   - ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S112.Значение);
	
	мОтчетФССУтратаТрудосп.Области.S121.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S116.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S117.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S118.Значение) 
	                                               //+ ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S119.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S120.Значение); 
														 
	
	мОтчетФССУтратаТрудосп.Области.S114.Значение = Макс(мОтчетФССУтратаТрудосп.Области.S121.Значение - мОтчетФССУтратаТрудосп.Области.S113.Значение,0);
	
	мОтчетФССУтратаТрудосп.Области.S122.Значение = Макс(мОтчетФССУтратаТрудосп.Области.S113.Значение - мОтчетФССУтратаТрудосп.Области.S121.Значение,0);
	
	мОтчетФССУтратаТрудосп.Области.S123.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S124.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S125.Значение) 
												   + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S126.Значение) 
												   + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S127.Значение); 
	
												
КонецПроцедуры // Расчет()

Процедура ВыполнитьИнициализацию()
	 // Инициализация

	СтрокиДекларации = Справочники.СтатьиНалоговыхДеклараций;
	
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") 
	 ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "БП") 
	 ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "УТП")  Тогда
		
		ПС = ПланыСчетов["Хозрасчетный"];
		СчетФСС       = ПС.РасчетыПоСоциальномуСтрахованию;
		СчетФСС378	  = ПС.РасчетыСГосударственнымиЦелевымиФондами;
		СчетРасчСчет1 = ПС.ТекущиеСчетаВНациональнойВалюте;
		СчетРасчСчет2 = ПС.ДругиеСчетаВБанкеВНациональнойВалюте;
		СчетРасчСчет3 = ПС.КассаВНациональнойВалюте;
		СчетРасчСчет4 = ПС.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте;
		СчетЗП        = ПС.РасчетыПоЗаработнойПлате;
		СчетПрочихНачислений = ПС.РасчетыПоДругимВыплатам;
		СчетПФ        = ПС.РасчетыПоПенсионномуОбеспечению;
		
		МассивСчетов = Новый Массив;
		МассивСчетов.Добавить(СчетРасчСчет1);
		МассивСчетов.Добавить(СчетРасчСчет2);
		МассивСчетов.Добавить(СчетРасчСчет3);
		МассивСчетов.Добавить(СчетРасчСчет4);
		
		МассивСубконто = Новый Массив;
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций);
		
	ИначеЕсли  (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП")  Тогда
		
	КонецЕсли	

КонецПроцедуры	

//показатели, расчет которых - это сальдо, то есть остаточные сущности
//для них - расчет итогов - может быть выполнен только отдельно
Процедура РассчитатьСуммыЗадолженностей()
	Если Не ЭтоЗУП Тогда
		
		мБухИтогиОст = Обработки.БухгалтерскиеИтоги.Создать();
		Итоги = "НачальныйОстатокДт,НачальныйОстатокКт,КонечныйОстатокДт,КонечныйОстатокКт";
		мБухИтогиОст.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,,"65,66,378",,,, "Организация", Организация);
		
		//задолженность страховщика на начало года
		УстановитьЗначениеПоказателя("S101",  мБухИтогиОст.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет",СчетФСС) 
											+ мБухИтогиОст.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет",СчетФСС378));
		
		//задолженность фонда на начало года
		УстановитьЗначениеПоказателя("S116",  мБухИтогиОст.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет",СчетФСС) 
											+ мБухИтогиОст.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет",СчетФСС378));
				
	Иначе
		
		//задолженность страховщика на начало года
		ЗапросЗадолжСтрах = Новый Запрос;
		ЗапросЗадолжСтрах.Текст = "
		|ВЫБРАТЬ
		|	СУММА(ВзаимоРасчеты.РезультатОстаток)	КАК Результат
		|
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Остатки(&НачДата, Организация = &Организация И СтатьяНалоговойДекларации В (&МассивСтатей))КАК ВзаимоРасчеты
		|
		|";
		
		ЗапросЗадолжСтрах.УстановитьПараметр("НачДата", НачалоГода(мДатаНачалаПериодаОтчета));
		ЗапросЗадолжСтрах.УстановитьПараметр("Организация",   Организация);
		
		МассивСтатей = Новый Массив;
		МассивСтатей.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Орг29);
		МассивСтатей.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Сотр025);
		МассивСтатей.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Сотр05);
		МассивСтатей.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Сотр1);
		ЗапросЗадолжСтрах.УстановитьПараметр("МассивСтатей",   МассивСтатей);
		
		РезультатЗапроса = ЗапросЗадолжСтрах.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			Если РезультатЗапроса.Результат <> NULL Тогда
				Если РезультатЗапроса.Результат > 0 Тогда
					S101 = РезультатЗапроса.Результат;
					УстановитьЗначениеПоказателя("S101",S101);
				Иначе
					S116 = - РезультатЗапроса.Результат;
					УстановитьЗначениеПоказателя("S116",S116);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура РассчитатьЗачтенныеПеречисленныеИПрочиеСуммы()	
	
	Если Не ЭтоЗУП Тогда
		
		мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
		Итоги = "ОборотКт,ОборотДт,КорОборотДт, КорОборотКт";	
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Период,Счет,Субконто1,Субконто2,КорСчет", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,"Месяц","652,378",МассивСубконто,,, "Организация", Организация);
		
		//доначислено взносов самостоятельно
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ДоначислСамост_Взнос;
		УстановитьЗначениеПоказателя("S103", мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", СчетФСС, НужнаяСтатья)
											+мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", СчетФСС378, НужнаяСтатья));
		
		//доначислено пени самостоятельно
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ДоначислСамост_Пеня;
		УстановитьЗначениеПоказателя("S104", мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", СчетФСС, НужнаяСтатья)
											+мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", СчетФСС378, НужнаяСтатья));
		
		//доначислено взносов по актам
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ДоначислАкт_Взнос;
		УстановитьЗначениеПоказателя("S105", мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", СчетФСС, НужнаяСтатья)
											+мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", СчетФСС378, НужнаяСтатья));
		
		//штраф
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_Штраф;
		УстановитьЗначениеПоказателя("S106", мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", СчетФСС, НужнаяСтатья)
											+мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", СчетФСС378, НужнаяСтатья));
		
		//доначислено взносов по актам
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ДоначислАкт_Пеня;
		УстановитьЗначениеПоказателя("S107", мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", СчетФСС, НужнаяСтатья)
											+мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", СчетФСС378, НужнаяСтатья));
		
		//не принято к зачету
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_НеПринятоКЗачет;
		УстановитьЗначениеПоказателя("S108", мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", СчетФСС, НужнаяСтатья)
											+мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", СчетФСС378, НужнаяСтатья));
		
		//получено от частичной оплаты за путевки
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ОплПутев;
		УстановитьЗначениеПоказателя("S109", мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", СчетФСС, НужнаяСтатья)
											+мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", СчетФСС378, НужнаяСтатья));
	
		//получаем общую сумму перечисленных денег
		Перечислено = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетФСС, СчетРасчСчет1)
					+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетФСС, СчетРасчСчет2) 
					+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетФСС, СчетРасчСчет3)
					+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетФСС, СчетРасчСчет4)
					+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетФСС378, СчетРасчСчет1)
					+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетФСС378, СчетРасчСчет2) 
					+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетФСС378, СчетРасчСчет3)
					+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетФСС378, СчетРасчСчет4);
					
		//получено от фонда на начало квартала
		УстановитьЗначениеПоказателя("S118", Перечислено);
					
		//получаем общую сумму полученных денег					
		ПолученоОтФонда = мБухИтоги.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", СчетФСС, СчетРасчСчет1)
						+ мБухИтоги.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", СчетФСС, СчетРасчСчет2)
						+ мБухИтоги.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", СчетФСС, СчетРасчСчет3)
						+ мБухИтоги.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", СчетФСС378, СчетРасчСчет1)
						+ мБухИтоги.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", СчетФСС378, СчетРасчСчет2)
						+ мБухИтоги.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", СчетФСС378, СчетРасчСчет3);
		
		//получено от фонда на начало квартала
		УстановитьЗначениеПоказателя("S110", ПолученоОтФонда);
		
	Иначе
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("НачалоПериода", мДатаНачалаПериодаОтчета);
		Запрос.УстановитьПараметр("КонецПериода",  мДатаКонцаПериодаОтчета);
		Запрос.УстановитьПараметр("СтатьяДекларации",  СтрокиДекларации.ФССУтратаТрудосп_);
		
		Запрос.Текст = "ВЫБРАТЬ
						|	ВзаиморасчетыПоНачислениямЗаСчетФССОбороты.СуммаРасход КАК ПолученоОтФСС
						|ИЗ
						|	РегистрНакопления.ВзаиморасчетыПоНачислениямЗаСчетФСС.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация И СтатьяРасчетовСФСС.Родитель = &СтатьяДекларации) КАК ВзаиморасчетыПоНачислениямЗаСчетФССОбороты
						|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
		
			УстановитьЗначениеПоказателя("S110", Выборка.ПолученоОтФСС);
		
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура  РассчитатьСуммыРасходовПоСтрахованию()
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ВремНетрудосп;
		S214 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет, ", СчетФСС, НужнаяСтатья,СчетЗП)
			 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет, ", СчетФСС, НужнаяСтатья,СчетПрочихНачислений)
			 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет, ", СчетФСС378, НужнаяСтатья,СчетЗП)
			 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет, ", СчетФСС378, НужнаяСтатья,СчетПрочихНачислений);
		УстановитьЗначениеПоказателя("S214", S214);
		
		// по уходу за больным членом семьи
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ВремНетрудоспУход;
		S224 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет", СчетФСС, НужнаяСтатья,СчетЗП)
			 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет", СчетФСС, НужнаяСтатья,СчетПрочихНачислений)
			 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет, ", СчетФСС378, НужнаяСтатья,СчетЗП)
			 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет, ", СчетФСС378, НужнаяСтатья,СчетПрочихНачислений);
		УстановитьЗначениеПоказателя("S224", S224);
		
		// по беремнности и родам
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_Берем;
		S234 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет", СчетФСС,  НужнаяСтатья,СчетЗП,)
			 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет", СчетФСС, НужнаяСтатья,СчетПрочихНачислений)
			 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет, ", СчетФСС378, НужнаяСтатья,СчетЗП)
			 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет, ", СчетФСС378, НужнаяСтатья,СчетПрочихНачислений);
		УстановитьЗначениеПоказателя("S234", S234);
		
		// на погребение
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_Погребен;
		S244 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет", СчетФСС, НужнаяСтатья,СчетЗП)
			 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет", СчетФСС, НужнаяСтатья,СчетПрочихНачислений)
			 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет, ", СчетФСС378, НужнаяСтатья,СчетЗП)
			 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет, ", СчетФСС378, НужнаяСтатья,СчетПрочихНачислений);
		УстановитьЗначениеПоказателя("S244", S244);
		
		// частичное оздоровление детей
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ФинОздор;
		S264 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1", 		 СчетФСС,	 НужнаяСтатья)
			 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет", СчетФСС, 	 НужнаяСтатья,СчетПрочихНачислений)
			 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1", 		 СчетФСС378, НужнаяСтатья)
			 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет", СчетФСС378, НужнаяСтатья,СчетПрочихНачислений);
		УстановитьЗначениеПоказателя("S264", S264);
		
		// другие затраты
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_Другое;
		S274 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1",		 СчетФСС, 	 НужнаяСтатья)
			 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет", СчетФСС, 	 НужнаяСтатья,СчетПрочихНачислений)
			 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1", 		 СчетФСС378, НужнаяСтатья,СчетЗП)
			 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет", СчетФСС378, НужнаяСтатья,СчетПрочихНачислений);
		УстановитьЗначениеПоказателя("S274", S274);
	Иначе
		
		ЗапросРасходыПоСтрахованию = Новый Запрос;
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("Организация", Организация);
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("Начало", НачалоГода(мДатаНачалаПериодаОтчета));
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("Конец", мДатаКонцаПериодаОтчета);

		Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
			//Здесь нет  учета пособий на погребение
			ЗапросРасходыПоСтрахованию.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОсновнойЗапрос.Результат			КАК Результат,
			|	ОсновнойЗапрос.СтатьяРасчетовСФСС	КАК СтатьяРасчетовСФСС,
			|	ОсновнойЗапрос.КоличествоДней		КАК КоличествоДней
			|ИЗ
			|	(ВЫБРАТЬ
			|		Начисления.Регистратор.ПричинаНетрудоспособности.СтатьяРасчетовСФСС КАК СтатьяРасчетовСФСС,
			|		СУММА(Начисления.Результат) КАК Результат,
			|    	СУММА(ВЫБОР
			|				КОГДА Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам)
			|					ТОГДА Начисления.ОплаченоДнейЧасов
			|				ИНАЧЕ Начисления.НормаДней
			|		КОНЕЦ) КАК КоличествоДней
			|	ИЗ
			|		РегистрРасчета.Начисления КАК Начисления
			|	ГДЕ
			|		Начисления.Регистратор ССЫЛКА Документ.НачислениеПоБольничномуЛисту
			|	   	И Начисления.Организация = &Организация
			|	   	И Начисления.ВидРасчета.НачислениеЗаСчетФСС = ИСТИНА
			|	    И Начисления.ПериодРегистрации МЕЖДУ &Начало И &Конец
			|	    
			|	СГРУППИРОВАТЬ ПО
			|		Начисления.Регистратор.ПричинаНетрудоспособности.СтатьяРасчетовсФСС)КАК ОсновнойЗапрос";
			
		Иначе
			//УПП и ЗУП
			ЗапросРасходыПоСтрахованию.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОсновнойЗапрос.Результат			КАК Результат,
			|	ОсновнойЗапрос.СтатьяРасчетовСФСС	КАК СтатьяРасчетовСФСС,
			|	ОсновнойЗапрос.КоличествоДней		КАК КоличествоДней
			|ИЗ
			|	(ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Погребен) КАК СтатьяРасчетовСФСС,
			|	СУММА(Начисления.Результат) КАК Результат,
			|	СУММА(1) КАК КоличествоДней			
			|	ИЗ
			|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
			|	ГДЕ
			|		Начисления.Регистратор ССЫЛКА Документ.НачислениеЕдиновременныхПособийЗаСчетФСС
			|		И Начисления.Организация = &Организация
			|		И Начисления.ВидРасчета.НачислениеЗаСчетФСС = ИСТИНА
			|		И Начисления.ПериодРегистрации МЕЖДУ &Начало И &Конец
			|		
			|	СГРУППИРОВАТЬ ПО
			|		ЗНАЧЕНИЕ(Справочник.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Погребен)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Начисления.Регистратор.ПричинаНетрудоспособности.СтатьяРасчетовСФСС КАК СтатьяРасчетовСФСС,
			|		СУММА(Начисления.Результат) КАК Результат,
			|    	СУММА(ВЫБОР
			|				КОГДА Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам)
			|					ТОГДА Начисления.ОплаченоДнейЧасов
			|				ИНАЧЕ Начисления.НормаДней
			|		КОНЕЦ) КАК КоличествоДней
			|	ИЗ
			|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
			|	ГДЕ
			|		Начисления.Регистратор ССЫЛКА Документ.НачислениеПоБольничномуЛисту
			|	   	И Начисления.Организация = &Организация
			|	   	И Начисления.ВидРасчета.НачислениеЗаСчетФСС = ИСТИНА
			|	    И Начисления.ПериодРегистрации МЕЖДУ &Начало И &Конец
			|	    
			|	СГРУППИРОВАТЬ ПО
			|		Начисления.Регистратор.ПричинаНетрудоспособности.СтатьяРасчетовсФСС)КАК ОсновнойЗапрос";

		КонецЕсли;
		
		РезультатЗапроса = ЗапросРасходыПоСтрахованию.Выполнить().Выбрать();
		
		//Обнуление
		S213 = 0;
		S214 = 0;
		S223 = 0;
		S224 = 0;
		S233 = 0;
		S234 = 0;
		S243 = 0;
		S244 = 0;
			
		Пока РезультатЗапроса.Следующий() Цикл
			// по временной нетрудоспособности	
			Если(РезультатЗапроса.СтатьяРасчетовСФСС = СтрокиДекларации.ФССУтрТрудосп_ВремНетрудосп) Тогда
				S213 =  РезультатЗапроса.КоличествоДней;
				S214 =  РезультатЗапроса.Результат;
				// по уходу за больным членом семьи	
			ИначеЕсли(РезультатЗапроса.СтатьяРасчетовСФСС = СтрокиДекларации.ФССУтрТрудосп_ВремНетрудоспУход) Тогда
				S223 =  РезультатЗапроса.КоличествоДней;
				S224 =  РезультатЗапроса.Результат;
				// по беремнности и родам	
			ИначеЕсли(РезультатЗапроса.СтатьяРасчетовСФСС = СтрокиДекларации.ФССУтрТрудосп_Берем) Тогда
				S233 =  РезультатЗапроса.КоличествоДней;
				S234 =  РезультатЗапроса.Результат;
				// на погребение	
			ИначеЕсли(РезультатЗапроса.СтатьяРасчетовСФСС = СтрокиДекларации.ФССУтрТрудосп_Погребен) Тогда
				S243 =  РезультатЗапроса.КоличествоДней;
				S244 = РезультатЗапроса.Результат;
			КонецЕсли;
		КонецЦикла;	
		
		УстановитьЗначениеПоказателя("S213", S213);
		УстановитьЗначениеПоказателя("S214", S214);
		УстановитьЗначениеПоказателя("S223", S223);
		УстановитьЗначениеПоказателя("S224", S224);
		УстановитьЗначениеПоказателя("S233", S233);
		УстановитьЗначениеПоказателя("S234", S234);
		УстановитьЗначениеПоказателя("S243", S243);
		УстановитьЗначениеПоказателя("S244", S244);

		//Неавтоматизированные статьи
		Если Не ЭтоЗУП Тогда
			
			Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
				// на погребение
				НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_Погребен;
				S244 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет", СчетФСС, НужнаяСтатья,СчетЗП)
					 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет", СчетФСС, НужнаяСтатья,СчетПрочихНачислений)
					 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет", СчетФСС378, НужнаяСтатья,СчетЗП)
					 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет", СчетФСС378, НужнаяСтатья,СчетПрочихНачислений);
				УстановитьЗначениеПоказателя("S244", S244);
			КонецЕсли;
			
			// частичное оздоровление детей
			НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ФинОздор;
			S264 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1", СчетФСС, НужнаяСтатья)
				 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет", СчетФСС, НужнаяСтатья,СчетПрочихНачислений)
				 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1", СчетФСС378, НужнаяСтатья)
				 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет", СчетФСС378, НужнаяСтатья,СчетПрочихНачислений);
			УстановитьЗначениеПоказателя("S264", S264);
			
			// другие затраты
			НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_Другое;
			S274 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1", СчетФСС, НужнаяСтатья)
				 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет", СчетФСС, НужнаяСтатья,СчетПрочихНачислений)
				 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1", СчетФСС378, НужнаяСтатья)
				 + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1,КорСчет", СчетФСС378, НужнаяСтатья,СчетПрочихНачислений);
			УстановитьЗначениеПоказателя("S274", S274);
		Иначе
			НужныеСтатьи = Новый Массив;
			НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_ФинОздор);
			НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_Другое);
			
			ЗапросРасходыПоСтрахованию = Новый Запрос;
			ЗапросРасходыПоСтрахованию.Текст = "
			|Выбрать
			|	Сумма(Результат)	КАК Результат,
			|   СубконтоДт2         		
			|Из
			|	РегистрРасчета.ОтражениеЗарплатыОрганизацийВРеглУчете
			|
			|Где
			|	ВидРасчета = &ВидРасчета
			|  И
			|   Организация = &Организация
			|  И
			|   ПериодРегистрации МЕЖДУ &Начало и &Конец
			|  И
			|	СчетДТ = &СчетДТ
			|
			|  И СубконтоДт2 В (&МассивСтатей)
			|Сгруппировать по
			|	СубконтоДт2
			|";
			
			
			ЗапросРасходыПоСтрахованию.УстановитьПараметр("Организация", Организация);
			ЗапросРасходыПоСтрахованию.УстановитьПараметр("Начало", НачалоГода(мДатаНачалаПериодаОтчета));
			ЗапросРасходыПоСтрахованию.УстановитьПараметр("Конец", мДатаКонцаПериодаОтчета);
			ЗапросРасходыПоСтрахованию.УстановитьПараметр("СчетДТ", ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
			ЗапросРасходыПоСтрахованию.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ОтражениеЗарплатыОрганизаций.Начисление);
			ЗапросРасходыПоСтрахованию.УстановитьПараметр("МассивСтатей", НужныеСтатьи);
			
			РезультатЗапроса = ЗапросРасходыПоСтрахованию.Выполнить().Выбрать();
			
			//Обнуление
			S264 = 0;
			S274 = 0;
				
			Пока РезультатЗапроса.Следующий() Цикл
				// частичное оздоровление детей	
				Если(РезультатЗапроса.СубконтоДт2 = СтрокиДекларации.ФССУтрТрудосп_ФинОздор) Тогда
					S264 = РезультатЗапроса.Результат;
				// другие затраты	
				ИначеЕсли(РезультатЗапроса.СубконтоДт2 =СтрокиДекларации.ФССУтрТрудосп_Другое) Тогда
					S274 = РезультатЗапроса.Результат;
				КонецЕсли;
			КонецЦикла;	
			
			УстановитьЗначениеПоказателя("S264", S264);
			УстановитьЗначениеПоказателя("S274", S274);

		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто()  Экспорт
	
	Очистить();
	
	ЗаполнитьСведенияОбОрганизации();
	
	ВыполнитьИнициализацию();
	
	РассчитатьСуммыЗадолженностей();
	
	РассчитатьЗачтенныеПеречисленныеИПрочиеСуммы();
	
	//Расчет показателей раздела IV "Витрати за рахунок страхових внесків"
	// по временной нетрудоспособности
    РассчитатьСуммыРасходовПоСтрахованию();
	
    Расчет();
	
	ПроверитьСовпадениеРасшифровокПоказателейРаздела();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьАвто()

Процедура ПроверитьСовпадениеРасшифровокПоказателейРаздела()
	
   Если мМенеджерЗвит1С <> Неопределено И мМенеджерЗвит1С.ФлагОтладкиПакетноеТестирование Тогда	
		// Не отображаем сообщения при пакетном тестировании
   		Возврат;
   КонецЕсли;
	
   Если мОтчетФССУтратаТрудосп.Области.S284.Значение <> 
	   		мОтчетФССУтратаТрудосп.Области.S120.Значение Тогда
   
		Сообщить("Не совпадает значение строки 8 раздела II со значением строки 20 раздела I отчета!");	
   
   КонецЕсли;
	
   Если мОтчетФССУтратаТрудосп.Области.S122.Значение <> 
	   		  мОтчетФССУтратаТрудосп.Области.S123.Значение 
			+ мОтчетФССУтратаТрудосп.Области.S128.Значение Тогда
		Сообщить("В разделе I не совпадает значение строки 22 с суммой строк 23 и 28!");	
   КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетФССУтратаТрудосп";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант = 4 Тогда
		
		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");

	//Если Вариант <> Неопределено Тогда
	ИначеЕсли Вариант <> Неопределено Тогда
	
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вычисляется автоматически';uk='Значення обчислюється автоматично'");
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");
		КонецЕсли;

		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки("СоставПоказателей2011Кв1");

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	Если ЭлементМеню.Кнопки.Количество() = 0 Тогда
		ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
		                            НСтр("ru='Печатать сразу';uk='Друкувати відразу'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

		ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
		                            НСтр("ru='Предварительный просмотр';uk='Попередній перегляд'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
									
		ЭлементМеню.Кнопки.Добавить("Разделитель1", ТипКнопкиКоманднойПанели.Разделитель);

		ЭлементМеню.Кнопки.Добавить("ЕстьДуплекс", ТипКнопкиКоманднойПанели.Действие,
		                            НСтр("ru='Принтер поддерживает автом. дуплекс';uk='Принтер підтримує автом. дуплекс'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
									
		ЭлементМеню.Кнопки.ЕстьДуплекс.Пометка = ЕстьДуплекс;
		
	КонецЕсли;
	
	ЛинияСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЛинияПусто = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);

	мМассивТиповЛиний = Новый Массив();
	мМассивТиповЛиний.Вставить(0, ЛинияПусто);
	мМассивТиповЛиний.Вставить(1, ЛинияСнизу);

	ЭлементыФормы.ПолеТабличногоДокументаОтчетФССУтратаТрудосп.ОбластьПечати = ЭлементыФормы.ПолеТабличногоДокументаОтчетФССУтратаТрудосп.Области.Найти("ПредупреждениеОПечати");
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	Перем ИсходноеКоличествоСтрокГруппы;
	
	ЭтаФорма.АвтоЗаголовок = Ложь;

	мОтчетФССУтратаТрудосп = ЭлементыФормы.ПолеТабличногоДокументаОтчетФССУтратаТрудосп;
	ТекТабличноеПоле = мОтчетФССУтратаТрудосп;
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП" Тогда
		ЭтоЗУП = Истина;
	Иначе
		ЭтоЗУП = Ложь;
	КонецЕсли;	
	
	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			
			ТочностьЕдиницыИзмерения = 2;

			УстановитьФорматВывода();
			
			ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
		КонецЕсли;
		
		ЗаполнитьСведенияОбОрганизации();
		
		Авторасчет = Истина;							

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();
	мОтчетФССУтратаТрудосп.ТолькоПросмотр = Истина;

	УстановитьЦветФонаЯчейки(,,"ОтчетФССУтратаТрудосп");

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность = Истина Тогда

		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения ?';uk='Дані були змінені. Зберегти зміни ?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;

		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;
    СохранитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс", ЕстьДуплекс);

КонецПроцедуры // ПередЗакрытием()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	
	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Если Найти(Кнопка.Имя, "Дуплекс") >0 Тогда
		     ЕстьДуплекс    = НЕ Кнопка.Пометка;
			 Кнопка.Пометка = НЕ Кнопка.Пометка;
		Иначе
			 Печать(Кнопка.Имя);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда 
		Закрыть();
	КонецЕсли;	
	
КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)
	
	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	
	мОтчетФССУтратаТрудосп.Области.ДеньДаты.Значение 	= ЧастиДатыПодписи.День;
	мОтчетФССУтратаТрудосп.Области.МесяцДаты.Значение 	= ЧастиДатыПодписи.Месяц;
	Если ЧастиДатыПодписи.Свойство("ПоследняяЦифраГода") Тогда
		мОтчетФССУтратаТрудосп.Области.ГодДаты.Значение 	= ЧастиДатыПодписи.ПоследняяЦифраГода;
	Иначе
		мОтчетФССУтратаТрудосп.Области.ГодДаты.Значение 	= Прав(Формат(ДатаПодписи, "ДФ=yy"), 1);
	Конецесли;
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаОтчетФССУтратаТрудоспПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаОтчетФССУтратаТрудоспПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа.
//   Устанавливает признак модифицированности данных в форме, вызывает пересчет
// вычисляемых показателей  табличных полей и обновляет структуру данных
// многострочного раздела.
//
Процедура ПолеТабличногоДокументаОтчетФССУтратаТрудоспПриИзменении(Элемент)
	
	НеПустаяПроцедура = Истина;
	
КонецПроцедуры // ПолеТабличногоДокументаФССУтратаТрудоспПриИзменении()

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияОтчетФССУтратаТрудоспПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетФССУтратаТрудосп";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если Лев(ИмяПоказателя,1)= "_" Тогда 
			ТекТабличноеПоле       = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели];
			КодПоказателяБезСкобок = Сред(ИмяПоказателя,2);
			Если (ТекТабличноеПоле.Области[КодПоказателяБезСкобок].Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
				ТекТабличноеПоле.Области[КодПоказателяБезСкобок].Значение = НайденнаяСтрока.ЗначениеАвто;
				Расчет();
			КонецЕсли;
			Дельта = ТекТабличноеПоле.Области[КодПоказателяБезСкобок].Значение - НайденнаяСтрока.ЗначениеАвто;
		Иначе	
			Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
				ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
				Расчет();
			КонецЕсли;
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;
		
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		НайденнаяСтрока.Дельта = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		
		// Очищаем комментарий редактируемой ячейки
		ТекущаяОбласть.Примечание.Текст = "";

	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки.
//
Процедура ПолеВводаЗначениеКорректировкиОтчетФССУтратаТрудоспПриИзменении(Элемент)
	
	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры

  // Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетФССУтратаТрудосп";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;
		Если Лев(ИмяПоказателя,1)= "_" Тогда 
			ТекТабличноеПоле       = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели];
			КодПоказателяБезСкобок = Сред(ИмяПоказателя,2);
			ТекТабличноеПоле.Области[КодПоказателяБезСкобок].Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;
		Иначе
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;
		КонецЕсли;

		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// "Комментарий" по ячейке, для которой установлен алгоритм автозаполнения 
// [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийОтчетФССУтратаТрудоспПриИзменении(Элемент)
	
	Коммент = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Коммент);

КонецПроцедуры

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Коммент)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетФССУтратаТрудосп";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Коммент;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Коммент;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

Процедура ПолеТабличногоДокументаОтчетФССУтратаТрудоспПриИзмененииСодержимогоОбласти(Элемент, Область)
	ОбновитьПараметрыАвтозаполненияЯчейки();
	Расчет();
	ПроверитьСовпадениеРасшифровокПоказателейРаздела();
	Модифицированность = Истина;
КонецПроцедуры

Процедура АвторасчетПриИзменении(Элемент)
	
	// сменим/установим флаг "Защита" для автоматически расчитываемых ячеек
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		
		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(СтраницаПанели.Имя);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Для каждого СтрокаТаблицыВариантовЗаполнения Из ТаблицаВариантыЗаполнения Цикл
			
			Попытка
				                                                          //признак расчитваемых ячеек
				Если СтрокаТаблицыВариантовЗаполнения.ВариантЗаполнения = 4 Тогда
				
					ИмяПоказателя = СтрокаТаблицыВариантовЗаполнения.КодПоказателя;
					
					ТекТабличноеПоле.Области[ИмяПоказателя].Защита = Авторасчет;
				
				КонецЕсли;	
					
			Исключение
			    Сообщить("Не удалось изменить возможность редактирования для показателя с кодом " + ИмяПоказателя);
			КонецПопытки;
		
		КонецЦикла;
		
	КонецЦикла;
	
	Если Авторасчет Тогда
		Расчет();
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьДанныеДляЗвит1С() Экспорт 
	
	мСохраненныйДок   = Неопределено;	
	мСкопированаФорма = Неопределено;
	
	ПередОткрытием(Ложь, Истина);
	ПриОткрытии();
	
	ЗаполнитьАвто();
	
	Если мМенеджерЗвит1С.ФлагОтладки Тогда
		ЭтаФорма.ОткрытьМодально();
	КонецЕсли;
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// расшифровка
	Попытка
		Выполнить("СписокСохранения.Вставить(""РасшифровкаОтчета"", СпП);");
	Исключение КонецПопытки;
	
	// Данные отчета
	ПоказателиОтчета = Новый Структура();
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	КонецЦикла;

	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
// только в гривнях
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       НСтр("ru='в гривнях';uk='у гривнях'"));

// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетФССУтратаТрудосп.СписокВыбора.Добавить(1, НСтр("ru='не заполнять автоматически';uk='не заповнювати автоматично'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетФССУтратаТрудосп.СписокВыбора.Добавить(2, НСтр("ru='заполнять автоматически с корректировкой';uk='заповнювати автоматично з коригуванням'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетФССУтратаТрудосп.СписокВыбора.Добавить(3, НСтр("ru='заполнять автоматически без корректировки';uk='заповнювати автоматично без коригування'"));

ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

мСоставПоказателей = "СоставПоказателей2011Кв1";

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
//мВерсияФормы = "01/04/2011";
мВерсияФормы = "01/10/2011";
мПечатныеФормы = Новый СписокЗначений;
	
ЕстьДуплекс = ВосстановитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс");
Если НЕ ТипЗнч(ЕстьДуплекс) = Тип("Булево") Тогда
	ЕстьДуплекс = Ложь;	
КонецЕсли;