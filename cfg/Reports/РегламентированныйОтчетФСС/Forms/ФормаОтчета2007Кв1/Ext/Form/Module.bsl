
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
//каждая закладка отчета - это объект ПолеТабличногоДокумента
Перем мОтчетФССУтратаТрудосп;

Перем мСлужебныеДанные;


Перем мСоставПоказателей Экспорт;

// переменный для хранения бухгалтерских итогов
Перем мБухИтоги, мБухИтогиРС;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы;

//вспомогательные переменные
Перем СуммаВыплаты;

Перем МассивСтатей,МассивПрефиксов, МассивПоВзносам,МассивПоВзносамПеречислЗачтено,МассивПрефиксовВзн;

Перем СтрокиДекларации;

Перем СчетФСС, СчетРасчСчет1, СчетРасчСчет2,СчетРасчСчет3, СчетРасчСчет4, СчетЗП, СчетПрочихНачислений, СчетПФ;

Перем ЭтоЗУП;

Перем МассивСчетов,	МассивСубконто;

Перем S100, S102;

Перем тбСхемыXML;

Перем мСтруктураМногострочныхРазделов;

Перем мПечатныеФормы Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

Процедура РассчитатьКонтрольнуюСуммуВсехПоказателей(ТабличноеПоле)

	мСлужебныеДанные.Области.LCTRL.Значение = 0;
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		Если Тип ("РисунокТабличногоДокумента") <> ТипЗнч (ТекущаяОбласть) Тогда
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		
		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		Если (Сред(ТекущаяОбласть.Имя,1,2) = "CC") или (Сред(ТекущаяОбласть.Имя,1,1) = "S") Тогда
			мСлужебныеДанные.Области.LCTRL.Значение = мСлужебныеДанные.Области.LCTRL.Значение + ТекущаяОбласть.Значение;		
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // РассчитатьКонтрольнуюСуммуВсехПоказателей()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле,ПризнакВключенияИтоговыхПоказателей)

	СтруктураПоказателейВнутрСвязи = Новый Структура;

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		Если Тип ("РисунокТабличногоДокумента") <> ТипЗнч (ТекущаяОбласть) Тогда
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//Проверяется условие не является ли ТекущаяОбласть многоячеечной областью для вывода 
		//документа на печать. Если является - то следующую проверку выполнять не нужно
		Если (ТекущаяОбласть.Имя = "Область1" ИЛИ ТекущаяОбласть.Имя = "Область2") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита и (ПризнакВключенияИтоговыхПоказателей = 0) Тогда
			Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если (ПризнакВключенияИтоговыхПоказателей = 1) и (Лев(ТекущаяОбласть.Имя,2) = "CC") Тогда
			КолСимволов = СтрДлина(ТекущаяОбласть.Имя) - 1;
			ИмяПоказателя      = Сред(ТекущаяОбласть.Имя,2,КолСимволов);
		Иначе	
			ИмяПоказателя      = ТекущаяОбласть.Имя;
		КонецЕсли;
		
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2007Кв1");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2007Кв1");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий параметры автозаполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки параметров автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии формы для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя, а в текущей - отключено.
							// В этом случае удаляем ячейку из таблицы пользовательских настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Процедура управляет показом в форме периода построения отчета,
Процедура ПоказатьПериод()

	СтрПериодОтчета = ПредставлениеПериода(НачалоГода(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "Л = uk_UA; ФП = Истина" );

// Период в заголовке отчета
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
    мОтчетФССУтратаТрудосп.Области.ПериодОтчета.Значение = "за  " +  СтрПериодОтчета;
	
	Для инд = 0 по 2 Цикл
		МесяцСтр = Формат(ДобавитьМесяц(мдатаНачалаПериодаОтчета,инд), "ДФ = 'ММММ';Л = uk_UA");
		индИм = инд + 1;
		ИмяЯчейки = "Пм" + Строка(индИм);
		мОтчетФССУтратаТрудосп.Области[ИмяЯчейки].Значение = МесяцСтр;
	КонецЦикла;	
	
	
	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	
	мОтчетФССУтратаТрудосп.Области.ДеньДаты.Значение 	= ЧастиДатыПодписи.День;
	мОтчетФССУтратаТрудосп.Области.МесяцДаты.Значение 	= ЧастиДатыПодписи.Месяц;
	мОтчетФССУтратаТрудосп.Области.ГодДаты.Значение 	= ЧастиДатыПодписи.ПоследняяЦифраГода;
	
	мСлужебныеДанные.Области.T1.Значение = Формат(Год(мДатаНачалаПериодаОтчета),"ЧЦ=4;ЧГ=;");
	
	КварталОтчета = Формат(мДатаНачалаПериодаОтчета, "ДФ = к");
	Если КварталОтчета = "1" Тогда
		мСлужебныеДанные.Области.P1.Значение = "X";
		мСлужебныеДанные.Области.P2.Значение = "";
		мСлужебныеДанные.Области.P3.Значение = "";
		мСлужебныеДанные.Области.P4.Значение = "";
	ИначеЕсли КварталОтчета = "2" Тогда
		мСлужебныеДанные.Области.P1.Значение = "";
		мСлужебныеДанные.Области.P2.Значение = "X";
		мСлужебныеДанные.Области.P3.Значение = "";
		мСлужебныеДанные.Области.P4.Значение = "";
	ИначеЕсли КварталОтчета = "3" Тогда
		мСлужебныеДанные.Области.P1.Значение = "";
		мСлужебныеДанные.Области.P2.Значение = "";
		мСлужебныеДанные.Области.P3.Значение = "X";
		мСлужебныеДанные.Области.P4.Значение = "";
	Иначе
		мСлужебныеДанные.Области.P1.Значение = "";
		мСлужебныеДанные.Области.P2.Значение = "";
		мСлужебныеДанные.Области.P3.Значение = "";
		мСлужебныеДанные.Области.P4.Значение = "X";
	КонецЕсли;
	
КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
// пока не прописаны коды - вернуться
Процедура ЗаполнитьСведенияОбОрганизации()
	

	NSTRAX = Организация.НаименованиеПолное;

	мОтчетФССУтратаТрудосп.Области.NSTRAX.Значение = NSTRAX;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","КодЗКГНГ");
	СписокПоказателей.Добавить("","КодКВЕД");
	СписокПоказателей.Добавить("","НомерФССУтратаТрудосп");
	
	
	ФИОДиректора = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФИОРук;
	ФИОГлавБуха = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФИОБух;
	OKPO = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодПоЕДРПОУ;


	НомерФССУтратаТрудосп = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).НомерФССУтратаТрудосп;
	
	мОтчетФССУтратаТрудосп.Области.OKPO.Значение = OKPO;
	
	мОтчетФССУтратаТрудосп.Области.CSTRAX.Значение = НомерФССУтратаТрудосп;

    мОтчетФССУтратаТрудосп.Области.ОргБухгалтер.Значение = ФИОГлавБуха; 
	мОтчетФССУтратаТрудосп.Области.ОргДиректор.Значение = ФИОДиректора;
	
	мОтчетФССУтратаТрудосп.Области.Адрес.Значение = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
	мОтчетФССУтратаТрудосп.Области.Телефон.Значение = УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	
	
	ДопСведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, мДатаНачалапериодаОтчета, "uk");
	мОтчетФССУтратаТрудосп.Области.РС.Значение     = ДопСведенияОбОрганизации.НомерСчета;
	мОтчетФССУтратаТрудосп.Области.Банк.Значение   = ДопСведенияОбОрганизации.Банк;
	мОтчетФССУтратаТрудосп.Области.МФО.Значение    = ДопСведенияОбОрганизации.МФО;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(НСтр("ru='Отчет в ФСС от временной утраты трудоспособности: при выводе сумм в гривнях точность не может превышать 2 знака';uk='Звіт у ФСС від тимчасової втрати працездатності: при виведенні сум у гривнях точність не може перевищувати 2 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	КонецЕсли;

	Сообщить(НСтр("ru='После изменения формата вывода значений, для корректного расчета итогов необходимо перезаполнить отчет!';uk='Після зміни формату виводу значень, для корректного розрахунку підсумків треба перезаполвнити звіт!'"), СтатусСообщения.Внимание);	
	
КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=2; ЧС = 0";

	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "ОтчетФССУтратаТрудосп";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			Попытка
				ИмяПоказателя     = Строка.КодПоказателя;
				ВариантЗаполнения = Строка.ВариантЗаполнения;
				Комментарий       = Строка.Комментарий;
				
				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
			Исключение 
				Продолжить;
			КонецПопытки;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()


// Обновляет пользовательские настройки при изменении версии формы.
// унифицирована, однако использование пока ... вопрос
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить(НСтр("ru='Измененилась версия формы отчета."
"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
"Виконується відновлення користувальницьких настройок.'"), СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	Если ЕстьИзмененияВариантыЗаполнения Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить(НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Оновлення користувальницьких настройок успішно завершене!'"));

	Иначе

		Сообщить(НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі користувальницьких настройок не виявлені!'"));

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()


// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетФССУтратаТрудосп";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если (ТипЗнч(ТекущаяЯчейка) <> Тип("РисунокТабличногоДокумента")) И (Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник) Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетФССУтратаТрудосп";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя)

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("ОтчетФССУтратаТрудосп");
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	мОтчетФССУтратаТрудосп.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()
// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Тип ("РисунокТабличногоДокумента") = ТипЗнч (ТекущаяОбласть) Тогда
			ТекущаяОбласть.Значение = ""; 
		Иначе	
			
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ТекущаяОбласть.СодержитЗначение Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяОбласть.Очистить();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить()

	// Очищаем содержимое ячеек поля табличного документа
	ТекТабличноеПоле = мОтчетФССУтратаТрудосп;
	ОчиститьТабличноеПоле(ТекТабличноеПоле);

	// Выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	ЗаполнитьСведенияОбОрганизации();
	
	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

КонецПроцедуры // Очистить()

Процедура РазбитьПечатнуюФорму(ПечФорма,  ИмяФормы = "")
	
	УчитыватьАвтомасштаб = Истина;

	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	
	Сч = 0;
	Пока Сч < ПечФорма.ВысотаТаблицы Цикл
		 Сч = Сч + 1;
		 
		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			
			// проверим, не должна ли предпоследняя строка печататься вместе со текущей ("не влезшей") строкой.
			// если так, то "откатимся" вверх
			Пока ПослВерх < Сч-1 И ПечФорма.ПолучитьОбласть(Сч-1, , Сч-1, ).Область().ВместеСоСледующим Цикл
			  Сч = Сч - 1;
			КонецЦикла; 
			
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		НовТаблДок = Новый ТабличныйДокумент();
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;

КонецПроцедуры

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати)
    мПечатныеФормы.Очистить();

	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ОбластьПечати = мОтчетФССУтратаТрудосп.ПолучитьОбласть("Шапка");
	ПечатнаяФорма.Вывести(ОбластьПечати);


	ОбластьПечати = мОтчетФССУтратаТрудосп.ПолучитьОбласть("Отчет");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	
	ОбластьПечати = мОтчетФССУтратаТрудосп.ПолучитьОбласть("Подвал");
	ПечатнаяФорма.Вывести(ОбластьПечати);


	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	
	РазбитьПечатнуюФорму(ПечатнаяФорма,  "Звіт в ФСС");
	
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()


// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция  Сохранить()  Экспорт

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;

	
	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.

		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;

		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();

	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаОтчетФССУтратаТрудосп";
	
	ТекТабличноеПоле        = мОтчетФССУтратаТрудосп;

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле,0);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	Модифицированность = Ложь;

	Возврат Истина;
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	// восстанавливаем реквизиты отчета
	Организация              = мСохраненныйДок.Организация;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	
	ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	УстановитьФорматВывода();
	Расчет();

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()
	//ІI. Нарахована сума фактичних витрат на оплату праці найманих працівників та 
	//оподаткованого доходу (прибутку), з якої справляються страхові внески, (за розміром 
	//внесків)
	//За звітний квартал
	
	//0,5%
	мОтчетФССУтратаТрудосп.Области.S5.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S245.Значение) 
	                                           + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S246.Значение) 
	                                           + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S247.Значение);
	
	//0,7%                                      
	мОтчетФССУтратаТрудосп.Области.S6.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S250.Значение) 
	                                             + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S251.Значение) 
	                                             + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S252.Значение);
	
	//3,4%
	мОтчетФССУтратаТрудосп.Области.S95.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S171.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S172.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S173.Значение);
	
	//2,9%
	мОтчетФССУтратаТрудосп.Области.S99.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S161.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S162.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S163.Значение);
	
	//Всього
	мОтчетФССУтратаТрудосп.Области.S8.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S5.Значение) 
	                                           + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S6.Значение) 
	                                           + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S99.Значение)
											   + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S95.Значение);
	
	//Всього з початку року
	
	//0,5%
	мОтчетФССУтратаТрудосп.Области.S244.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S243.Значение) 
	                                             + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S5.Значение);
	
	//0,7%
	мОтчетФССУтратаТрудосп.Области.S249.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S248.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S6.Значение);
	
	//3,4%
	мОтчетФССУтратаТрудосп.Области.S170.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S174.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S95.Значение);
	
	//2,9%
	мОтчетФССУтратаТрудосп.Области.S160.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S164.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S99.Значение);
	
	//Всього
	мОтчетФССУтратаТрудосп.Области.S3.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S7.Значение) 
	                                           + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S8.Значение);
	
	//II. Нарахована сума оплати праці найманих працівників, з якої утримуються страхові 
	//внески, (за розміром внесків)
	//За звітний квартал
	
	//0,25%
	мОтчетФССУтратаТрудосп.Области.S12.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S176.Значение) 
	                                            + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S177.Значение) 
	                                            + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S178.Значение);
	
	//0,5%
	мОтчетФССУтратаТрудосп.Области.S96.Значение  = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S181.Значение) 
	                                             + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S182.Значение) 
	                                             + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S183.Значение);
	
	//1%
	мОтчетФССУтратаТрудосп.Области.S97.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S166.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S167.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S168.Значение);
	
	//Всього з початку року
	//0,25%
	мОтчетФССУтратаТрудосп.Области.S175.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S179.Значение) 
	                                             + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S12.Значение);
	
	//0,5%
	мОтчетФССУтратаТрудосп.Области.S180.Значение  = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S184.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S96.Значение);
	
	//1%
	мОтчетФССУтратаТрудосп.Области.S165.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S169.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S97.Значение);
	
	//Всього
	мОтчетФССУтратаТрудосп.Области.S18.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S13.Значение) 
	                                            + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S14.Значение);
	
	
	//Нараховано страхових внесків з початку року: За звітний період (місяці) 
	//0,5%
	мОтчетФССУтратаТрудосп.Области.S44.Значение = мОтчетФССУтратаТрудосп.Области.S264.Значение 
	                                            + мОтчетФССУтратаТрудосп.Области.S265.Значение 
	                                            + мОтчетФССУтратаТрудосп.Области.S266.Значение;
	
	//0,7%                            
	мОтчетФССУтратаТрудосп.Области.S45.Значение = мОтчетФССУтратаТрудосп.Области.S269.Значение 
	                                            + мОтчетФССУтратаТрудосп.Области.S270.Значение 
	                                            + мОтчетФССУтратаТрудосп.Области.S271.Значение;
	
	//2,9%
	мОтчетФССУтратаТрудосп.Области.S46.Значение = мОтчетФССУтратаТрудосп.Области.S194.Значение 
	                                            + мОтчетФССУтратаТрудосп.Области.S195.Значение 
	                                            + мОтчетФССУтратаТрудосп.Области.S196.Значение;
	
	//3,4%
	мОтчетФССУтратаТрудосп.Области.S230.Значение = мОтчетФССУтратаТрудосп.Области.S227.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S228.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S229.Значение;
	
	//0,25%                           
	мОтчетФССУтратаТрудосп.Области.S53.Значение = мОтчетФССУтратаТрудосп.Области.S204.Значение 
	                                            + мОтчетФССУтратаТрудосп.Области.S205.Значение 
	                                            + мОтчетФССУтратаТрудосп.Области.S206.Значение;
	
	//0,5%                            
	мОтчетФССУтратаТрудосп.Области.S54.Значение = мОтчетФССУтратаТрудосп.Области.S209.Значение 
	                                            + мОтчетФССУтратаТрудосп.Области.S210.Значение 
	                                            + мОтчетФССУтратаТрудосп.Области.S211.Значение;
	
	//1 %                            
	мОтчетФССУтратаТрудосп.Области.S98.Значение = мОтчетФССУтратаТрудосп.Области.S199.Значение 
	                                            + мОтчетФССУтратаТрудосп.Области.S200.Значение 
	                                            + мОтчетФССУтратаТрудосп.Области.S201.Значение;
	
	//Всього з п. р.
	//0,5%
	мОтчетФССУтратаТрудосп.Области.S263.Значение = мОтчетФССУтратаТрудосп.Области.S267.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S44.Значение;
	
	//0,7%                   
	мОтчетФССУтратаТрудосп.Области.S268.Значение = мОтчетФССУтратаТрудосп.Области.S272.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S45.Значение;
	
	//2,9%
	мОтчетФССУтратаТрудосп.Области.S193.Значение = мОтчетФССУтратаТрудосп.Области.S197.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S46.Значение;
	
	//3,4%                   
	мОтчетФССУтратаТрудосп.Области.S226.Значение = мОтчетФССУтратаТрудосп.Области.S231.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S230.Значение;         
	
	//0,25%                           
	мОтчетФССУтратаТрудосп.Области.S203.Значение = мОтчетФССУтратаТрудосп.Области.S207.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S53.Значение;         
	
	//0,5%                            
	мОтчетФССУтратаТрудосп.Области.S208.Значение = мОтчетФССУтратаТрудосп.Области.S213.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S54.Значение;         
	
	//1%                            
	мОтчетФССУтратаТрудосп.Области.S198.Значение = мОтчетФССУтратаТрудосп.Области.S202.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S98.Значение;
	
	//Всього
	//На початок періоду
	мОтчетФССУтратаТрудосп.Области.S7.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S243.Значение) 
	                                             + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S248.Значение) 
	                                             + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S174.Значение) 
	                                             + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S164.Значение);
	
	мОтчетФССУтратаТрудосп.Области.S13.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S179.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S184.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S169.Значение);
												  
	// Для ячеек таблицы IIIA точность всегда должна быть 2 знака после запятой
	мОтчетФССУтратаТрудосп.Области.S47.Значение = мОтчетФССУтратаТрудосп.Области.S267.Значение 
	                                            + мОтчетФССУтратаТрудосп.Области.S272.Значение 
	                                            + мОтчетФССУтратаТрудосп.Области.S197.Значение 
	                                            + мОтчетФССУтратаТрудосп.Области.S231.Значение;
												
	// Для ячеек таблицы IIIA точность всегда должна быть 2 знака после запятой
	мОтчетФССУтратаТрудосп.Области.S55.Значение  = мОтчетФССУтратаТрудосп.Области.S207.Значение 
	                                                        + мОтчетФССУтратаТрудосп.Области.S213.Значение 
	                                                        + мОтчетФССУтратаТрудосп.Области.S202.Значение;
	
	//За звітний квартал
	мОтчетФССУтратаТрудосп.Области.S3.Значение    = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S5.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S6.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S95.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S99.Значение);
	
	мОтчетФССУтратаТрудосп.Области.S14.Значение    = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S12.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S96.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S97.Значение);                                        
															
	// Для ячеек таблицы IIIA точность всегда должна быть 2 знака после запятой
	мОтчетФССУтратаТрудосп.Области.S48.Значение  = мОтчетФССУтратаТрудосп.Области.S44.Значение 
	                                                        + мОтчетФССУтратаТрудосп.Области.S45.Значение 
	                                                        + мОтчетФССУтратаТрудосп.Области.S46.Значение 
	                                                        + мОтчетФССУтратаТрудосп.Области.S230.Значение;
															
	// Для ячеек таблицы IIIA точность всегда должна быть 2 знака после запятой
	мОтчетФССУтратаТрудосп.Области.S56.Значение   = мОтчетФССУтратаТрудосп.Области.S53.Значение 
	                                                        + мОтчетФССУтратаТрудосп.Области.S54.Значение
	                                                        + мОтчетФССУтратаТрудосп.Области.S98.Значение;
	
	//1-й місяць кварталу                     
	
	мОтчетФССУтратаТрудосп.Области.S9.Значение  = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S245.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S250.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S171.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S161.Значение);
	
	мОтчетФССУтратаТрудосп.Области.S15.Значение  = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S176.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S181.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S166.Значение);
															
	// Для ячеек таблицы IIIA точность всегда должна быть 2 знака после запятой
	мОтчетФССУтратаТрудосп.Области.S49.Значение   = 		мОтчетФССУтратаТрудосп.Области.S264.Значение 
	                                                        + мОтчетФССУтратаТрудосп.Области.S269.Значение 
	                                                        + мОтчетФССУтратаТрудосп.Области.S194.Значение 
	                                                        + мОтчетФССУтратаТрудосп.Области.S227.Значение;
															
	// Для ячеек таблицы IIIA точность всегда должна быть 2 знака после запятой
	мОтчетФССУтратаТрудосп.Области.S57.Значение  = мОтчетФССУтратаТрудосп.Области.S204.Значение 
	                                                         + мОтчетФССУтратаТрудосп.Области.S209.Значение
	                                                         + мОтчетФССУтратаТрудосп.Области.S199.Значение;
	
	//2-й місяць кварталу                                 
	мОтчетФССУтратаТрудосп.Области.S10.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S246.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S251.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S172.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S162.Значение);
	
	мОтчетФССУтратаТрудосп.Области.S16.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S177.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S182.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S167.Значение);
															 
	// Для ячеек таблицы IIIA точность всегда должна быть 2 знака после запятой
	мОтчетФССУтратаТрудосп.Области.S50.Значение    = 		мОтчетФССУтратаТрудосп.Области.S265.Значение 
	                                                         + мОтчетФССУтратаТрудосп.Области.S270.Значение 
	                                                         + мОтчетФССУтратаТрудосп.Области.S195.Значение 
	                                                         + мОтчетФССУтратаТрудосп.Области.S228.Значение;
															 
	// Для ячеек таблицы IIIA точность всегда должна быть 2 знака после запятой
	мОтчетФССУтратаТрудосп.Области.S58.Значение  = мОтчетФССУтратаТрудосп.Области.S205.Значение 
	                                                         + мОтчетФССУтратаТрудосп.Области.S210.Значение
	                                                         + мОтчетФССУтратаТрудосп.Области.S200.Значение;
	
	//3-й місяць кварталу                                 
	мОтчетФССУтратаТрудосп.Области.S11.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S247.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S252.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S173.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S163.Значение);
	
	мОтчетФССУтратаТрудосп.Области.S17.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S178.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S183.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S168.Значение);
															 
	// Для ячеек таблицы IIIA точность всегда должна быть 2 знака после запятой
	мОтчетФССУтратаТрудосп.Области.S51.Значение    = 		мОтчетФССУтратаТрудосп.Области.S266.Значение 
	                                                         + мОтчетФССУтратаТрудосп.Области.S271.Значение 
	                                                         + мОтчетФССУтратаТрудосп.Области.S196.Значение 
	                                                         + мОтчетФССУтратаТрудосп.Области.S229.Значение;
															 
	// Для ячеек таблицы IIIA точность всегда должна быть 2 знака после запятой
	мОтчетФССУтратаТрудосп.Области.S59.Значение  = мОтчетФССУтратаТрудосп.Области.S206.Значение 
	                                                         + мОтчетФССУтратаТрудосп.Области.S211.Значение
	                                                         + мОтчетФССУтратаТрудосп.Области.S201.Значение;
	
	//Всього з початку року
	мОтчетФССУтратаТрудосп.Области.S3.Значение    = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S244.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S249.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S170.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S160.Значение);
	
	мОтчетФССУтратаТрудосп.Области.S18.Значение    = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S175.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S180.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.S165.Значение);
															 
	// Для ячеек таблицы IIIA точность всегда должна быть 2 знака после запятой
	мОтчетФССУтратаТрудосп.Области.S52.Значение  = мОтчетФССУтратаТрудосп.Области.S263.Значение 
	                                                         + мОтчетФССУтратаТрудосп.Области.S268.Значение 
	                                                         + мОтчетФССУтратаТрудосп.Области.S193.Значение 
	                                                         + мОтчетФССУтратаТрудосп.Области.S226.Значение;
															 
	// Для ячеек таблицы IIIA точность всегда должна быть 2 знака после запятой
	мОтчетФССУтратаТрудосп.Области.S60.Значение   = мОтчетФССУтратаТрудосп.Области.S203.Значение 
	                                                         + мОтчетФССУтратаТрудосп.Области.S208.Значение
	                                                         + мОтчетФССУтратаТрудосп.Области.S198.Значение;
	
	//Нараховано страхових внесків з початку року: Сума всього
	мОтчетФССУтратаТрудосп.Области.S22.Значение = мОтчетФССУтратаТрудосп.Области.S52.Значение 
	                                               + мОтчетФССУтратаТрудосп.Области.S60.Значение;
	
	//Зараховано затрат по соцстраху з початку року: За звітний період (місяці)
	мОтчетФССУтратаТрудосп.Области.S93.Значение = мОтчетФССУтратаТрудосп.Области.S41.Значение 
	                                               + мОтчетФССУтратаТрудосп.Области.S42.Значение 
	                                               + мОтчетФССУтратаТрудосп.Области.S43.Значение;
	
	//Зараховано затрат по соцстраху з початку року: Сума всього
	мОтчетФССУтратаТрудосп.Области.S34.Значение = мОтчетФССУтратаТрудосп.Области.S214.Значение 
	                                               + мОтчетФССУтратаТрудосп.Области.S41.Значение 
	                                               + мОтчетФССУтратаТрудосп.Области.S42.Значение 
	                                               + мОтчетФССУтратаТрудосп.Области.S43.Значение; 
	
	//Перераховано на поточний рахунок профспілки, Фонду: Сума всього
	мОтчетФССУтратаТрудосп.Области.S35.Значение = мОтчетФССУтратаТрудосп.Области.S215.Значение 
	                                            + мОтчетФССУтратаТрудосп.Области.S140.Значение 
	                                            + мОтчетФССУтратаТрудосп.Области.S141.Значение
												+ мОтчетФССУтратаТрудосп.Области.S142.Значение
												+ мОтчетФССУтратаТрудосп.Области.S94.Значение;
	
	//ВСЬОГО (р.12 - р.15)
	мОтчетФССУтратаТрудосп.Области.S36.Значение = мОтчетФССУтратаТрудосп.Области.S33.Значение 
	                                               + мОтчетФССУтратаТрудосп.Области.S34.Значение 
	                                               + мОтчетФССУтратаТрудосп.Области.S35.Значение;
												   
												   
	мОтчетФССУтратаТрудосп.Области.S30.Значение = мОтчетФССУтратаТрудосп.Области.S100.Значение
												+ мОтчетФССУтратаТрудосп.Области.S102.Значение
												- мОтчетФССУтратаТрудосп.Области.S104.Значение;
												   
	//ВСЬОГО (р.1. - р. 9)
	мОтчетФССУтратаТрудосп.Области.S31.Значение = мОтчетФССУтратаТрудосп.Области.S20.Значение 
	                                               + мОтчетФССУтратаТрудосп.Области.S22.Значение 
	                                               + мОтчетФССУтратаТрудосп.Области.S23.Значение 
												   + мОтчетФССУтратаТрудосп.Области.S285.Значение
	                                               + мОтчетФССУтратаТрудосп.Области.S24.Значение 
	                                               + мОтчетФССУтратаТрудосп.Области.S25.Значение
	                                               + мОтчетФССУтратаТрудосп.Области.S27.Значение 
	                                               + мОтчетФССУтратаТрудосп.Области.S28.Значение 
	                                               + мОтчетФССУтратаТрудосп.Области.S29.Значение 
	                                               + мОтчетФССУтратаТрудосп.Области.S30.Значение 
	                                               - мОтчетФССУтратаТрудосп.Области.S187.Значение;
	
	//Залишок заборгованості за страхувальником на кінець звітного періоду
	мОтчетФССУтратаТрудосп.Области.S37.Значение = Макс(мОтчетФССУтратаТрудосп.Области.S31.Значение 
	                                               - мОтчетФССУтратаТрудосп.Области.S36.Значение,0);
	
	//Залишок заборгованості за профорганізацією на кінець періоду
	мОтчетФССУтратаТрудосп.Области.S32.Значение = Макс(мОтчетФССУтратаТрудосп.Области.S36.Значение 
	                                               - мОтчетФССУтратаТрудосп.Области.S31.Значение,0); 
												   
   // "Отримано від Фонду" за звітний квартал (рр. 3 - 5)
   мОтчетФССУтратаТрудосп.Области.S101.Значение  = мОтчетФССУтратаТрудосп.Области.S102.Значение
                                                  - мОтчетФССУтратаТрудосп.Области.S104.Значение;
	
	
	//IV. Витрати по страхових коштах
	//                     1. ДОПОМОГА
	//ВСЬОГО сума допомоги (р.1 + р.2 + р. З + р. 4 + р. 5 + р. 6)
	//Зараховано витрат за рахунок Фонду
	//Сума	
	мОтчетФССУтратаТрудосп.Области.S72.Значение = мОтчетФССУтратаТрудосп.Области.S61.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S63.Значение 
	                                            + мОтчетФССУтратаТрудосп.Области.S67.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S70.Значение;
	
	мОтчетФССУтратаТрудосп.Области.S92.Значение = мОтчетФССУтратаТрудосп.Области.S62.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S64.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S88.Значение;
	
	//Фактично виплачена допомога поточного року за рахунок Фонду
	мОтчетФССУтратаТрудосп.Области.S279.Значение = мОтчетФССУтратаТрудосп.Области.S273.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S274.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S275.Значение 
	                                             + мОтчетФССУтратаТрудосп.Области.S277.Значение
												 + мОтчетФССУтратаТрудосп.Области.S106.Значение
												 + мОтчетФССУтратаТрудосп.Области.S286.Значение
                                                 + мОтчетФССУтратаТрудосп.Области.S287.Значение;

	
	//                       2. СОЦІАЛЬНІ ПОСЛУГИ
	//Всього(р.8 + р.9 + р.10)
	//Зараховано витрат за рахунок Фонду
	//Сума	
	мОтчетФССУтратаТрудосп.Области.S81.Значение = мОтчетФССУтратаТрудосп.Области.S76.Значение 
	                                              + мОтчетФССУтратаТрудосп.Области.S77.Значение; 
	
	//Разом витрат (р. 7 + р. 10 + р. 11) (****)    
	//Зараховано витрат за рахунок Фонду
	//Сума	
	мОтчетФССУтратаТрудосп.Области.S86.Значение = мОтчетФССУтратаТрудосп.Области.S72.Значение 
	                                              + мОтчетФССУтратаТрудосп.Области.S81.Значение 
	                                              + мОтчетФССУтратаТрудосп.Области.S82.Значение;
												  
	РассчитатьКонтрольнуюСуммуВсехПоказателей(мОтчетФССУтратаТрудосп);											
												
												
КонецПроцедуры // Расчет()

Процедура СоздатьТаблицуСоСхемамиВыгрузки() Экспорт
 	//для возможности выгрузки в XML файл
	тбСхемыXML = Новый ТаблицаЗначений;
	ТипКолИмяСхемы = СоздатьОписанияТипов("Строка",8);
	тбСхемыXML.Колонки.Добавить("ИмяСхемы",ТипКолИмяСхемы,НСтр("ru='Имя файла-схемы';uk=""Ім'я файлу-схеми"""));
	ТипКолПредставлениеСхемы = СоздатьОписанияТипов("Строка",80);
	тбСхемыXML.Колонки.Добавить("ПредставлениеСхемы",ТипКолПредставлениеСхемы,НСтр("ru='Наименование регл.отчета';uk='Найменування регл.звіту'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	тбСхемыXML.Колонки.Добавить("НазваниеСтраницыПанели",ТипКолНазваниеСтраницыПанели,НСтр("ru='Наименование страницы панели';uk='Найменування сторінки панелі'"));

	ТипКолфВыгрузка = СоздатьОписанияТипов("Число",1,0);
	тбСхемыXML.Колонки.Добавить("фВыгрузка",ТипКолфВыгрузка,НСтр("ru='Выгружать?';uk='Вивантажувати?'"));
	
	НовСтрока = тбСхемыXML.Добавить();
	НовСтрока.ИмяСхемы = "JFSS"; 	
	
	НовСтрока.ПредставлениеСхемы =НСтр("ru='Отчет в ФСС на случай временной утраты трудоспособности';uk='Звіт у ФСС на випадок тимчасової втрати працездатності'");
	НовСтрока.НазваниеСтраницыПанели ="ОтчетФССУтратаТрудосп";
КонецПроцедуры	


Процедура ВыполнитьИнициализацию()
	 // Инициализация

	СтрокиДекларации = Справочники.СтатьиНалоговыхДеклараций;

	МассивСтатей = Новый Массив;  

	МассивСтатей.Добавить(СтрокиДекларации.ФССУтрТрудосп_Орг29);
	МассивСтатей.Добавить(СтрокиДекларации.ФССУтрТрудосп_Сотр025);
	МассивСтатей.Добавить(СтрокиДекларации.ФССУтрТрудосп_Сотр05);
	МассивСтатей.Добавить(СтрокиДекларации.ФССУтрТрудосп_Сотр1);
	
	МассивПрефиксов = Новый Массив;  

	МассивПрефиксов.Добавить(161);
	МассивПрефиксов.Добавить(176);
	МассивПрефиксов.Добавить(181);
	МассивПрефиксов.Добавить(166);
	
	//массив для хранения сумм начисленных взносов в разрезе ставок
	//отдельно для каждого месяца отчетного квартала,а также на начало квартала
	МассивПоВзносам  = Новый Массив(4,4);
	
	Для i = 0 по МассивПоВзносам.Количество() - 1 Цикл
		
		Для j = 0 по 3 Цикл	
			МассивПоВзносам[i][j] = 0;
		КонецЦикла;
	КонецЦикла;
	
	//массив для хранения сумм начисленных взносов уже не в разрезе ставок (общей суммой)
	//отдельно для каждого месяца отчетного квартала,а также на начало квартала
	МассивПоВзносамПеречислЗачтено  = Новый Массив(2,4);
	

	Для i = 0 по МассивПоВзносамПеречислЗачтено.Количество() - 1 Цикл
		
		Для j = 0 по 3 Цикл	
			МассивПоВзносамПеречислЗачтено[i][j] = 0;	
		КонецЦикла;
	КонецЦикла;
	
	МассивПрефиксовВзн = Новый Массив;  
	
	МассивПрефиксовВзн.Добавить(194);
	МассивПрефиксовВзн.Добавить(204);
	МассивПрефиксовВзн.Добавить(209);
	МассивПрефиксовВзн.Добавить(199);

	
	S100 = 0;
	S102 = 0;
	
	
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") 
	 ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "БП") 
	 ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "УТП")  Тогда
		
		ПС = ПланыСчетов["Хозрасчетный"];
		СчетФСС       = ПС.РасчетыПоСоциальномуСтрахованию;
		СчетРасчСчет1 = ПС.ТекущиеСчетаВНациональнойВалюте;
		СчетРасчСчет2 = ПС.ДругиеСчетаВБанкеВНациональнойВалюте;
		СчетРасчСчет3 = ПС.КассаВНациональнойВалюте;
		СчетРасчСчет4 = ПС.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте;
		СчетЗП        = ПС.РасчетыПоЗаработнойПлате;
		СчетПрочихНачислений = ПС.РасчетыПоДругимВыплатам;
		СчетПФ        = ПС.РасчетыПоПенсионномуОбеспечению;
		
		МассивСчетов = Новый Массив;
		МассивСчетов.Добавить(СчетРасчСчет1);
		МассивСчетов.Добавить(СчетРасчСчет2);
		МассивСчетов.Добавить(СчетРасчСчет3);
		МассивСчетов.Добавить(СчетРасчСчет4);
		
		МассивСубконто = Новый Массив;
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Налоги);
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций);
		
		
	ИначеЕсли  (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП")  Тогда
			
		мОтчетФССУтратаТрудосп.Области["S215"].Значение = 0;
		мОтчетФССУтратаТрудосп.Области["S140"].Значение = 0;
		мОтчетФССУтратаТрудосп.Области["S141"].Значение = 0;
		мОтчетФССУтратаТрудосп.Области["S142"].Значение = 0;
		
	КонецЕсли	
	
	
КонецПроцедуры	

//показатели, расчет которых - это сальдо, то есть остаточные сущности
//для них - расчет итогов - может быть выполнен только отдельно
Процедура РассчитатьСуммыЗадолженностей()
	Если Не ЭтоЗУП Тогда
		
		мБухИтогиОст = Обработки.БухгалтерскиеИтоги.Создать();
		Итоги = "НачальныйОстатокДт,НачальныйОстатокКт,КонечныйОстатокДт,КонечныйОстатокКт";
		мБухИтогиОст.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,,"65,66",,,, "Организация", Организация);
		
		//задолженность страховщика на начало года
		S20 = мБухИтогиОст.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет",СчетФСС);
		УстановитьЗначениеПоказателя("S20", S20);
		
		//задолженность фонда на начало года
		S33 = мБухИтогиОст.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет",СчетФСС);
		УстановитьЗначениеПоказателя("S33", S33);
 
				
	Иначе
		
		//задолженность страховщика на начало года
		ЗапросЗадолжСтрах = Новый Запрос;
		ЗапросЗадолжСтрах.Текст = "
		|ВЫБРАТЬ
		|	СУММА(ВзаимоРасчеты.РезультатОстаток)	КАК Результат
		|
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Остатки(&НачДата, Организация = &Организация И СтатьяНалоговойДекларации В (&МассивСтатей))КАК ВзаимоРасчеты
		|
		|";
		
		ЗапросЗадолжСтрах.УстановитьПараметр("НачДата", НачалоГода(мДатаНачалаПериодаОтчета));
		ЗапросЗадолжСтрах.УстановитьПараметр("Организация",   Организация);
		
		МассивСтатей = Новый Массив;
		МассивСтатей.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Орг29);	
		ЗапросЗадолжСтрах.УстановитьПараметр("МассивСтатей",   МассивСтатей);
		
		РезультатЗапроса = ЗапросЗадолжСтрах.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			Если РезультатЗапроса.Результат <> NULL Тогда
				Если РезультатЗапроса.Результат > 0 Тогда
					S20 = РезультатЗапроса.Результат;
					УстановитьЗначениеПоказателя("S20",S20);
				Иначе
					S33 = - РезультатЗапроса.Результат;
					УстановитьЗначениеПоказателя("S33",S33);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	ЗапросСуммаЗадолж = Новый Запрос ("
	|ВЫБРАТЬ
	| СУММА (ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток) КАК Результат
	|  ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&НачДата,Организация = &Организация) КАК ВзаиморасчетыСРаботниками
	| ГДЕ
	| ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов <> &ПрошлыйМесяц  
	|");
	
	//задолженность по выплате заработной платы на начало года
	ЗапросСуммаЗадолж.УстановитьПараметр("НачДата", 	НачалоГода(мДатаНачалаПериодаОтчета));
	ЗапросСуммаЗадолж.УстановитьПараметр("ПрошлыйМесяц",ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета),-1));
	ЗапросСуммаЗадолж.УстановитьПараметр("Организация",   Организация);
	РезультатЗапроса = ЗапросСуммаЗадолж.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаРезультатовЗадолжЗПНач = РезультатЗапроса.Выгрузить();
		S185 = ТаблицаРезультатовЗадолжЗПНач[0].Результат;
		УстановитьЗначениеПоказателя("S185", S185);
	КонецЕсли;
	
	//задолженность по выплате заработной платы на конец квартала
	ЗапросСуммаЗадолж.УстановитьПараметр("НачДата", 	мДатаКонцаПериодаОтчета);
	ЗапросСуммаЗадолж.УстановитьПараметр("ПрошлыйМесяц",НачалоМесяца(мДатаКонцаПериодаОтчета));
	ЗапросСуммаЗадолж.УстановитьПараметр("Организация",   Организация);
	РезультатЗапроса = ЗапросСуммаЗадолж.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаРезультатовЗадолжЗПНач = РезультатЗапроса.Выгрузить();
		S186 = ТаблицаРезультатовЗадолжЗПНач[0].Результат;
		УстановитьЗначениеПоказателя("S186", S186);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьЗачтенныеПеречисленныеИПрочиеСуммы()	
	Если Не ЭтоЗУП Тогда
		мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
		Итоги = "ОборотКт,ОборотДт,КорОборотДт, КорОборотКт";	
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Период,Счет,Субконто1,Субконто2,КорСчет", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,"Месяц","652",МассивСубконто,,, "Организация", Организация);
		
		
		//Проверить существование элемента справочника
		Попытка
			//доначислено взносов самостоятельно
			НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ДоначислСамост_Взнос;
			S23 = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто2", СчетФСС, НужнаяСтатья);
			УстановитьЗначениеПоказателя("S23", S23);
			
			//доначислено пени самостоятельно
			НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ДоначислСамост_Пеня;
			S285 = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто2", СчетФСС, НужнаяСтатья);
			УстановитьЗначениеПоказателя("S285", S285);
			
			
			//доначислено взносов по актам
			НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ДоначислАкт_Взнос;
			S24 = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто2", СчетФСС, НужнаяСтатья);
			УстановитьЗначениеПоказателя("S24", S24);
			
			//доначислено взносов по актам
			НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ДоначислАкт_Пеня;
			S25 = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто2", СчетФСС, НужнаяСтатья);
			УстановитьЗначениеПоказателя("S25", S25);
		Исключение
			//доначислено взносов самостоятельно
			НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ДоначислСамост;
			S23 = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто2", СчетФСС, НужнаяСтатья);
			УстановитьЗначениеПоказателя("S23", S23);
			
			//доначислено взносов по актам
			НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ДоначислАкт;
			S24 = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто2", СчетФСС, НужнаяСтатья);
			УстановитьЗначениеПоказателя("S24", S24);
		КонецПопытки;
		
		//получено от частичной оплаты за путевки
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ОплПутев;
		S27 = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто2", СчетФСС, НужнаяСтатья);
		УстановитьЗначениеПоказателя("S27", S27);
		
		//не принято к зачету
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_НеПринятоКЗачет;
		S28 = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто2", СчетФСС, НужнаяСтатья);
		УстановитьЗначениеПоказателя("S28", S28);
		
		//штраф
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_Штраф;
		S29 = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто2", СчетФСС, НужнаяСтатья);
		УстановитьЗначениеПоказателя("S29", S29);
		
		//теперь получаем и накапливаем данные с разбивкой по месяцам
		Для НомМес = 1 по Месяц(мДатаКонцаПериодаОтчета) Цикл
			мес = НачалоМесяца( ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), НомМес-1));
			
			//получаем общую сумму перечисленных взносов
			Перечислено = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет, КорСчет", мес,СчетФСС, СчетРасчСчет1)
					    + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет, КорСчет", мес,СчетФСС, СчетРасчСчет2) 
						+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет, КорСчет", мес,СчетФСС, СчетРасчСчет3)
						+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет, КорСчет", мес,СчетФСС, СчетРасчСчет4);
			
			//дебетовый оборот за месяц в целом			
			ИтогДО = мБухИтоги.ПолучитьИтог("СуммаОборотДт", "Период, Счет", мес, СчетФСС);
			
			Зачтено = ИтогДО - Перечислено; 
			
			Если (НомМес < Месяц(мДатаНачалаПериодаОтчета)) или (Месяц(мДатаНачалаПериодаОтчета) = 1) Тогда
				инд = Цел(НомМес/Месяц(мДатаНачалаПериодаОтчета));
			Иначе 
				инд = НомМес%Месяц(мДатаНачалаПериодаОтчета) + 1;
			КонецЕсли;
			
			ПолученоОтФонда = мБухИтоги.ПолучитьИтог("СуммаКорОборотКт", "Период, Счет, КорСчет", мес, СчетФСС, СчетРасчСчет1)
							+ мБухИтоги.ПолучитьИтог("СуммаКорОборотКт", "Период, Счет, КорСчет", мес, СчетФСС, СчетРасчСчет2);
			Если инд <> 0 Тогда
				//это месяц отчетного квратала
				//накапливаем данные о перечисленных суммах на расчетный счет
				S102 = S102 + ПолученоОтФонда;
				МесяцСтр = Формат(мес, "Л=uk_UA; ДФ=ММММ");
				ИмяЯчейки = "Пм" + инд;
				мОтчетФССУтратаТрудосп.Области[ИмяЯчейки].Значение = МесяцСтр;
			Иначе 
				//накапливаем данные на начало отчетного квартала 
				//перечислено на начало квартала
				S100 = S100 + ПолученоОтФонда;
			КонецЕсли;	
			
			МассивПоВзносамПеречислЗачтено[0][инд] = МассивПоВзносамПеречислЗачтено[0][инд] + Перечислено;			
			МассивПоВзносамПеречислЗачтено[1][инд] = МассивПоВзносамПеречислЗачтено[1][инд] + Зачтено;
			i = 0;
			//собственно расчет сумм взносов
			Для каждого НужнаяСтатья из МассивСтатей Цикл
				НачисленоУдержано = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Период,Счет,Субконто2",мес, СчетФСС, НужнаяСтатья);
				МассивПоВзносам[i][инд] = МассивПоВзносам[i][инд] + НачисленоУдержано;
				i = i + 1;
			КонецЦикла;
		КонецЦикла;
		
		//присвоение рассчитанных значений показателям
		//Нараховано
		Для i = 0 по 3 Цикл
			СтартовыйЧисловойПрефикс = МассивПрефиксовВзн[i];
			Для j = 0 по 3 Цикл	
				
				Если (j = 0) Тогда
					Если i <> 2 Тогда
						Префикс = СтартовыйЧисловойПрефикс + 3;
					Иначе
						Префикс = СтартовыйЧисловойПрефикс + 4;
					КонецЕсли;
				ИначеЕсли (j = 1) Тогда
					Префикс = СтартовыйЧисловойПрефикс;	
				ИначеЕсли (j = 2) Тогда
					Префикс = СтартовыйЧисловойПрефикс + 1;
				ИначеЕсли (j = 3) Тогда
					Префикс = СтартовыйЧисловойПрефикс + 2;	
				КонецЕсли;
				ИмяЯчейки = "S" + Префикс;
				УстановитьЗначениеПоказателя(ИмяЯчейки, МассивПоВзносам[i][j]);
			КонецЦикла;	
		КонецЦикла;	
		
		//зачтено и перечислено
		УстановитьЗначениеПоказателя("S215", МассивПоВзносамПеречислЗачтено[0][0]);
		УстановитьЗначениеПоказателя("S140", МассивПоВзносамПеречислЗачтено[0][1]);
		УстановитьЗначениеПоказателя("S141", МассивПоВзносамПеречислЗачтено[0][2]);
		УстановитьЗначениеПоказателя("S142", МассивПоВзносамПеречислЗачтено[0][3]);
		
		УстановитьЗначениеПоказателя("S214",МассивПоВзносамПеречислЗачтено[1][0]);
		УстановитьЗначениеПоказателя("S41", МассивПоВзносамПеречислЗачтено[1][1]);
		УстановитьЗначениеПоказателя("S42", МассивПоВзносамПеречислЗачтено[1][2]);
		УстановитьЗначениеПоказателя("S43", МассивПоВзносамПеречислЗачтено[1][3]);

		
		//получено от фонда на начало квартала
		УстановитьЗначениеПоказателя("S100", S100);
		
		//получено от фонда за отчетный квартал
		УстановитьЗначениеПоказателя("S102", S102);
		
	Иначе
		//расчет для  показателей разделов III (в части зачтенных затрат)
		
		S214 = 0;
		
		//расчет зачтенных сумм
		ЗапросЗачтено = Новый Запрос;
		ЗапросЗачтено.Текст = "
		|Выбрать
		|	Сумма(Результат) Как Результат,
		|   ПериодРегистрации
		|
		|
		|
		|Из
		|	РегистрРасчета.ОтражениеЗарплатыОрганизацийВРеглУчете
		|
		|Где
		|	ВидРасчета = &ВидРасчета
		|  И
		|   СчетДТ = &Счет652
		|  И
		|   Организация = &Организация
		|  И
		|   ПериодРегистрации МЕЖДУ &ДатаНачала И &ДатаКонца
		|
		|Сгруппировать по
		|	ПериодРегистрации
		|";
		
		ЗапросЗачтено.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ОтражениеЗарплатыОрганизаций.Начисление);
		ЗапросЗачтено.УстановитьПараметр("Счет652", ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
		ЗапросЗачтено.УстановитьПараметр("Организация", Организация);
		ЗапросЗачтено.УстановитьПараметр("ДатаНачала", НачалоГода(мДатаНачалаПериодаОтчета));
		ЗапросЗачтено.УстановитьПараметр("ДатаКонца", мДатаКонцаПериодаОтчета);
		РезультатЗапроса = ЗапросЗачтено.Выполнить().Выбрать();
		Пока РезультатЗапроса.Следующий() Цикл
			Если Месяц(РезультатЗапроса.ПериодРегистрации) < Месяц(мДатаНачалаПериодаОтчета) Тогда
				Если РезультатЗапроса.Результат <> NULL Тогда
					S214 = S214 + РезультатЗапроса.Результат;
				КонецЕсли	
				//первый месяц	
			ИначеЕсли Месяц(РезультатЗапроса.ПериодРегистрации) = Месяц(мДатаНачалаПериодаОтчета) Тогда
				Если РезультатЗапроса.Результат <> NULL Тогда
					S41 	= РезультатЗапроса.Результат;
					УстановитьЗначениеПоказателя("S41", S41);
				КонецЕсли;
				//третий месяц	
			ИначеЕсли Месяц(РезультатЗапроса.ПериодРегистрации) = Месяц(мДатаКонцаПериодаОтчета)	 Тогда
				Если РезультатЗапроса.Результат <> NULL Тогда
					S43 	= РезультатЗапроса.Результат;
					УстановитьЗначениеПоказателя("S43", S43);
				КонецЕсли;
				//второй месяц	
			Иначе	
				Если РезультатЗапроса.Результат <> NULL Тогда
					S42 	= РезультатЗапроса.Результат;
					УстановитьЗначениеПоказателя("S42", S42);
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		УстановитьЗначениеПоказателя("S214", S214);
	КонецЕсли;
КонецПроцедуры


Процедура  РассчитатьСуммыРасходовПоСтрахованию()
	
	Если Не ЭтоЗУП Тогда
		
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ВремНетрудосп;
		S61 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет, ", СчетФСС, НужнаяСтатья,СчетЗП)
		+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет, ", СчетФСС, НужнаяСтатья,СчетПрочихНачислений);
		УстановитьЗначениеПоказателя("S61", S61);
		
		// по уходу за больным членом семьи
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ВремНетрудоспУход;
		S63 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет", СчетФСС, НужнаяСтатья,СчетЗП)
		+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет", СчетФСС, НужнаяСтатья,СчетПрочихНачислений);
		УстановитьЗначениеПоказателя("S63", S63);
		
		// по беремнности и родам
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_Берем;
		S67 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет", СчетФСС,  НужнаяСтатья,СчетЗП,)
		+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет", СчетФСС, НужнаяСтатья,СчетПрочихНачислений);
		УстановитьЗначениеПоказателя("S67", S67);
		
		// на погребение
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_Погребен;
		S70 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет", СчетФСС, НужнаяСтатья,СчетЗП)
		+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет", СчетФСС, НужнаяСтатья,СчетПрочихНачислений);
		УстановитьЗначениеПоказателя("S70", S70);
		
		// частичное финансирование санаториев-профилакториев
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ФинСанат;
		S76 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2", СчетФСС, НужнаяСтатья)
		+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет", СчетФСС, НужнаяСтатья,СчетПрочихНачислений);
		УстановитьЗначениеПоказателя("S76", S76);
		
		// частичное оздоровление детей
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ФинОздор;
		S77 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2", СчетФСС, НужнаяСтатья)
		+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет", СчетФСС, НужнаяСтатья,СчетПрочихНачислений);
		УстановитьЗначениеПоказателя("S77", S77);
		
		// другие затраты
		НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_Другое;
		S82 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2", СчетФСС, НужнаяСтатья)
		+ мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет", СчетФСС, НужнаяСтатья,СчетПрочихНачислений);
		УстановитьЗначениеПоказателя("S82", S82);
		
	Иначе
		//сразу получим показатели за отчетный квартал нарастающим итогом с начала года
		//то есть обороты счета по статьям декларации
		
		НужныеСтатьи = Новый Массив;
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_ДоначислСамост);
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_ДоначислАкт);
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_ОплПутев);
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_НеПринятоКЗачет);
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_Штраф);
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_ВремНетрудосп);
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_ВремНетрудоспУход);
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_Берем);
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_УходРебенок);
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_Рождение);
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_Погребен);
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_ФинСанат);
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_ФинОздор);
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_Другое);
		НужныеСтатьи.Добавить(СтрокиДекларации.ПФ_Декр);
		//16
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_ДоначислАкт_Взнос);
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_ДоначислАкт_Пеня);
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_ДоначислСамост_Взнос);
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_ДоначислСамост_Пеня);
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_Рождение_Единораз);
		НужныеСтатьи.Добавить(СтрокиДекларации.ФССУтрТрудосп_Рождение_Ежемес);
		
		ЗапросРасходыПоСтрахованию = Новый Запрос;
		ЗапросРасходыПоСтрахованию.Текст = "
		|Выбрать
		|	Сумма(Результат)	КАК Результат,
		|   СубконтоДт2         		
		|Из
		|	РегистрРасчета.ОтражениеЗарплатыОрганизацийВРеглУчете
		|
		|Где
		|	ВидРасчета = &ВидРасчета
		|  И
		|   Организация = &Организация
		|  И
		|   ПериодРегистрации МЕЖДУ &Начало и &Конец
		|  И
		|	СчетДТ = &СчетДТ
		|
		|  И СубконтоДт2 В (&МассивСтатей)
		|Сгруппировать по
		|	СубконтоДт2
		|";
		
		
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("Организация", Организация);
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("Начало", НачалоГода(мДатаНачалаПериодаОтчета));
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("Конец", мДатаКонцаПериодаОтчета);
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("СчетДТ", ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ОтражениеЗарплатыОрганизаций.Начисление);
		ЗапросРасходыПоСтрахованию.УстановитьПараметр("МассивСтатей", НужныеСтатьи);
		
		РезультатЗапроса = ЗапросРасходыПоСтрахованию.Выполнить().Выбрать();
		
		//Обнуление
		S61 = 0;
		S63 = 0;
		S67 = 0;
		СуммаВыплаты  = 0;
		S70 = 0;
		S72 = 0;
		S77 = 0;
			
		Пока РезультатЗапроса.Следующий() Цикл
			//Расчет показателей раздела IV "Витрати за рахунок страхових внесків"
			// по временной нетрудоспособности	
			Если(РезультатЗапроса.СубконтоДт2 = СтрокиДекларации.ФССУтрТрудосп_ВремНетрудосп) Тогда
				S61 =  РезультатЗапроса.Результат;
				// по уходу за больным членом семьи	
			ИначеЕсли(РезультатЗапроса.СубконтоДт2 = СтрокиДекларации.ФССУтрТрудосп_ВремНетрудоспУход) Тогда
				S63 =  РезультатЗапроса.Результат;
				// по беремнности и родам	
			ИначеЕсли(РезультатЗапроса.СубконтоДт2 = СтрокиДекларации.ФССУтрТрудосп_Берем) Тогда
				S67 =  РезультатЗапроса.Результат;
				// на погребение	
			ИначеЕсли(РезультатЗапроса.СубконтоДт2 = СтрокиДекларации.ФССУтрТрудосп_Погребен) Тогда
				S70 = РезультатЗапроса.Результат;
				// частичное финансирование санаториев-профилакториев	
			ИначеЕсли(РезультатЗапроса.СубконтоДт2 = СтрокиДекларации.ФССУтрТрудосп_ФинСанат) Тогда
				S76 = РезультатЗапроса.Результат;
				// частичное оздоровление детей	
			ИначеЕсли(РезультатЗапроса.СубконтоДт2 = СтрокиДекларации.ФССУтрТрудосп_ФинОздор) Тогда
				S77 = РезультатЗапроса.Результат;
				// другие затраты	
			ИначеЕсли(РезультатЗапроса.СубконтоДт2 =СтрокиДекларации.ФССУтрТрудосп_Другое) Тогда
				S82 = РезультатЗапроса.Результат;
			КонецЕсли;
		КонецЦикла;	
		
		УстановитьЗначениеПоказателя("S61", S61);
		УстановитьЗначениеПоказателя("S63", S63);
		УстановитьЗначениеПоказателя("S67", S67);
		УстановитьЗначениеПоказателя("S70", S70);
		УстановитьЗначениеПоказателя("S76",S76);
		УстановитьЗначениеПоказателя("S77", S77);
		УстановитьЗначениеПоказателя("S82", S82);
		
	КонецЕсли;
	
КонецПроцедуры	


// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто()  Экспорт

	////////
	// *** Здесь необходимо написать алгоритм заполнения отчета.***
	//
	// Для присвоения показателям отчета вычисленного значения необходимо
	// использовать процедуру
	//
	//     УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя).
	//
	////////
		
	Очистить();
	
	ЗаполнитьСведенияОбОрганизации();
	
	ПоказатьПериод();
	
	ВыполнитьИнициализацию();
	
	//Установим наименование страхового сбора по умолчанию
	мСлужебныеДанные.Области.TNALOG.Значение = 3;
	
   // расчет среднесписочнйо численности в эквиваленте полной занятости
   ТаблЧисленностиЭПЗ = ПроведениеРасчетов.ПолучитьСреднююЧисленность(НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета, "ЭПЗ", "КВАРТАЛ", Организация, ""); 
   S1 = ТаблЧисленностиЭПЗ[0].Средняя;
   УстановитьЗначениеПоказателя("S1", S1);

   ТаблЧисленностиЭПЗЖ = ПроведениеРасчетов.ПолучитьСреднююЧисленность(НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета, "ЭПЗ", "КВАРТАЛ", Организация, "Ж"); 
   S2 = ТаблЧисленностиЭПЗЖ[0].Средняя;
   УстановитьЗначениеПоказателя("S2", S2);
	
    //Расчет показателей раздела II
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|ВзаиморасчетыПоВзносам.ПериодВзаиморасчетов       КАК Месяц,
		|ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации  КАК СтатьяНалоговойДекларации,
		|СУММА(ВзаиморасчетыПоВзносам.БазаВзносаНачальныйОстаток)  КАК БазаОстаток,
		|СУММА(ВзаиморасчетыПоВзносам.БазаВзносаПриход)  КАК БазаОборот
		|";
	
	Если ЭтоЗУП  Тогда
		ТекстЗапроса = ТекстЗапроса + ",
		|СУММА(ВзаиморасчетыПоВзносам.РезультатНачальныйОстаток)  КАК ВзносОстаток,
		|СУММА(ВзаиморасчетыПоВзносам.РезультатПриход)  КАК НачисленоВзноса,
		|СУММА(ВзаиморасчетыПоВзносам.РезультатРасход)	КАК УплаченоПодтверждено
		|";
	КонецЕсли;
	
	ДатаНачалаВЗапрос = НачалоГода(мДатаНачалаПериодаОтчета);
	
	ТекстЗапроса = ТекстЗапроса + "
    	|ИЗ РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.ОстаткиИОбороты(&НачДата,&КонДата) КАК ВзаиморасчетыПоВзносам
		|
		|ГДЕ 
		|	ВзаиморасчетыПоВзносам.Организация = &парамОрганизация
		| И ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации В (&МассивНужныхСтатей)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыПоВзносам.ПериодВзаиморасчетов,
		|	ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации 
		|";

	Запрос = Новый Запрос ();
	Запрос.УстановитьПараметр("НачДата", ДатаНачалаВЗапрос);
	Запрос.УстановитьПараметр("КонДата" ,мДатаКонцаПериодаОтчета);

	Запрос.УстановитьПараметр("МассивНужныхСтатей", МассивСтатей);
	Запрос.УстановитьПараметр("парамОрганизация",  Организация);
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
	
    //ищем структуру по месяцу и статье декларации
	Отбор = Новый Структура;
	i = 0;
	Для мес = Месяц (НачалоГода(мДатаНачалаПериодаОтчета)) по Месяц(мДатаКонцаПериодаОтчета) Цикл
		ТекМесяц = ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета),i);
		Отбор.Вставить("Месяц",ТекМесяц);
	    j = 0;
		Для каждого НужнаяСтатья из МассивСтатей Цикл
			Отбор.Вставить("СтатьяНалоговойДекларации",НужнаяСтатья);
			// результатом поиска всегда будет только одна строка, не массив
			НайденныеСтроки = ТаблицаРезультатов.НайтиСтроки (Отбор);
			
			Если (НайденныеСтроки.Количество() = 1 ) Тогда
				
				ЧисловойПрефиксНач = МассивПрефиксов[j] + 3;
				ИмяЯчейкиНач = "S" + ЧисловойПрефиксНач;
				
				Если j <> 2 Тогда
					ЧисловойПрефиксНачВзн = МассивПрефиксовВзн[j] + 3;
				Иначе	
					ЧисловойПрефиксНачВзн = МассивПрефиксовВзн[j] + 4;
				КонецЕсли;	
				
				ИмяЯчейкиНачВзн = "S" + ЧисловойПрефиксНачВзн;
				
				Если (Месяц(ТекМесяц) < Месяц(мДатаНачалаПериодаОтчета)) Тогда
					
					мОтчетФССУтратаТрудосп.Области[ИмяЯчейкиНач].Значение = мОтчетФССУтратаТрудосп.Области[ИмяЯчейкиНач].Значение 
					+ НайденныеСтроки[0].БазаОборот;
					Если ЭтоЗУП Тогда
						мОтчетФССУтратаТрудосп.Области[ИмяЯчейкиНачВзн].Значение = мОтчетФССУтратаТрудосп.Области[ИмяЯчейкиНачВзн].Значение 
						+ НайденныеСтроки[0].НачисленоВзноса;
									
						//накаплитваем сумму "перечислено на начало квартала"
						мОтчетФССУтратаТрудосп.Области["S275"].Значение = мОтчетФССУтратаТрудосп.Области["S215"].Значение 
						+ НайденныеСтроки[0].УплаченоПодтверждено;
					КонецЕсли;	
					
					
				Иначе
					Если (Месяц(ТекМесяц) = Месяц(мДатаНачалаПериодаОтчета)) Тогда 														  
						ЧисловойПрефикс = МассивПрефиксов[j];
						ЧисловойПрефиксВзн = МассивПрефиксовВзн[j];
						ИмяЯчейкиМесПереч = "S140";
					ИначеЕсли (Месяц(ТекМесяц) = Месяц(мДатаКонцаПериодаОтчета)) Тогда
                        ЧисловойПрефикс = МассивПрефиксов[j] + 2;
						ЧисловойПрефиксВзн = МассивПрефиксовВзн[j] + 2;
						ИмяЯчейкиМесПереч = "S142";
                     Иначе
					    ЧисловойПрефикс = МассивПрефиксов[j] + 1;
						ЧисловойПрефиксВзн = МассивПрефиксовВзн[j] + 1;
						ИмяЯчейкиМесПереч = "S141";
					КонецЕсли;
					ИмяЯчейкиМес = "S" +  ЧисловойПрефикс;			
					мОтчетФССУтратаТрудосп.Области[ИмяЯчейкиМес].Значение = НайденныеСтроки[0].БазаОборот;
					Если ЭтоЗУП Тогда	
						//разбиение как по ставкам, так и по месяцам
						ИмяЯчейкиМесВзн = "S" +  ЧисловойПрефиксВзн;
						мОтчетФССУтратаТрудосп.Области[ИмяЯчейкиМесВзн].Значение = НайденныеСтроки[0].НачисленоВзноса;
						//общая сумма взносов по разным ставкам, разбиение только по месяцам
						мОтчетФССУтратаТрудосп.Области[ИмяЯчейкиМесПереч].Значение = мОтчетФССУтратаТрудосп.Области[ИмяЯчейкиМесПереч].Значение
						+ НайденныеСтроки[0].УплаченоПодтверждено;
					КонецЕсли;	  
				КонецЕсли;
			 КонецЕсли;	
			 j = j + 1;
		КонецЦикла;
	i = i + 1;	
	КонецЦикла;
	
	РассчитатьСуммыЗадолженностей();
	
	РассчитатьЗачтенныеПеречисленныеИПрочиеСуммы();
	
	//Расчет показателей раздела IV "Витрати за рахунок страхових внесків"
	// по временной нетрудоспособности
    РассчитатьСуммыРасходовПоСтрахованию();

    Расчет();
	
	// V. Расшифровка задолженнссти страховщика (III, стр. 17)     
	 
	Если  (мОтчетФССУтратаТрудосп.Области.S37.Значение > 0) Тогда   
	//  Задолженность по страховым взносам, срок уплаты которых не настал	
		мОтчетФССУтратаТрудосп.Области.S126.Значение = мОтчетФССУтратаТрудосп.Области.S196.Значение 
		                                             + мОтчетФССУтратаТрудосп.Области.S266.Значение 
											         + мОтчетФССУтратаТрудосп.Области.S271.Значение 
											         + мОтчетФССУтратаТрудосп.Области.S229.Значение 
											         + мОтчетФССУтратаТрудосп.Области.S206.Значение 
											         + мОтчетФССУтратаТрудосп.Области.S211.Значение 
											         + мОтчетФССУтратаТрудосп.Области.S201.Значение;   
	// Задолженость. связанная с невыплатой з/п
		мОтчетФССУтратаТрудосп.Области.S127.Значение = мОтчетФССУтратаТрудосп.Области.S37.Значение 
		                                             - мОтчетФССУтратаТрудосп.Области.S126.Значение;  
	ИначеЕсли (мОтчетФССУтратаТрудосп.Области.S32.Значение >0) Тогда
		мОтчетФССУтратаТрудосп.Области.S130.Значение = мОтчетФССУтратаТрудосп.Области.S32.Значение;     
	КонецЕсли; 
		
	//Вместе затрат (р. 7 + р. 10 + р. 11) (****)
	//**** равно строке 14 таблиці III.
	мОтчетФССУтратаТрудосп.Области.S86.Значение = мОтчетФССУтратаТрудосп.Области.S34.Значение;
	
	//Задолженность на конец отчетного периода (*****), в т.ч. :
	//***** равнество строке  17 таблиці III.
	мОтчетФССУтратаТрудосп.Области.S37.Значение = мОтчетФССУтратаТрудосп.Области.S126.Значение 
	                                               + мОтчетФССУтратаТрудосп.Области.S127.Значение 
												   + мОтчетФССУтратаТрудосп.Области.S128.Значение 
												   + мОтчетФССУтратаТрудосп.Области.S129.Значение;
	
	Модифицированность = Истина;

КонецПроцедуры // ЗаполнитьАвто()

//===========================================
// устанавливает пометки выгрузки в таблице тбСхемыXML
Процедура  ОпределитьСписокВыгружаемыхСхем();
	Для Каждого стр Из  тбСхемыXML Цикл
		//по-умолчанию выгружаем все приложения
		стр.фВыгрузка = 1;
	КонецЦикла;
КонецПроцедуры

//создает массив описания типов для таблицы значений со схемами XML
Функция СоздатьОписанияТипов(НазваниеТипа, Длина,Точность="")
  мас = Новый Массив;
  мас.Добавить(Тип(НазваниеТипа));
  Если Точность = "" Тогда
	 КвалифСтроки = Новый КвалификаторыСтроки(Длина,ДопустимаяДлина.Переменная); 
  Иначе
	 КвалифЧисла = Новый КвалификаторыЧисла(Длина,Точность,ДопустимыйЗнак.Неотрицательный); 
  КонецЕсли;	   
  Возврат Новый ОписаниеТипов(мас,КвалифСтроки,КвалифЧисла);
КонецФункции	


//процедура подготовки данных для выгрузки в файл формата xml
Процедура ВыгрузитьВXML()
  Перем спДанныеОтчета, спПараметры;
  Перем НужнаяСтруктура;
  
  Если Модифицированность И НЕ Сохранить() Тогда
	  Возврат;
  КонецЕсли; 

  
  Временный_CSTRAX = мОтчетФССУтратаТрудосп.Области.CSTRAX.Значение;
  Попытка
	  
	  мОтчетФССУтратаТрудосп.Области.CSTRAX.Значение = Строка(Формат(Число(мОтчетФССУтратаТрудосп.Области.CSTRAX.Значение), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ="));
  Исключение;
  КонецПопытки;
  
  
  
  
  //Создадим структуру со списком параметров для передачи их в обработку выгрузки
  спПараметры = Новый Структура();
  спПараметры.Вставить("Команда","ЭкспортXML"); //Операция
  
  ОпределитьСписокВыгружаемыхСхем();
  спПараметры.Вставить("Схемы",тбСхемыXML );	//Схемы (правила) выгрузки. Определеяются ГНАУ
  
 
  // формируем данные редактируемых ячеек таблицы
  ДанныеОтчета = Новый Структура();
  
  Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
	  
	  ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
	  ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
	  
	  ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле,1);
	  ДанныеОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	  
  КонецЦикла;
  
  // вставляем данные  ячеек таблицы	
  спПараметры.Вставить("ДанныеОтчета",ДанныеОтчета);
 
  // вставляем данные многострочных разделов
  спПараметры.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);
  КаталогДанныхФирмы = Организация.НаименованиеПолное;
  спПараметры.Вставить("КаталогДанныхФирмы",КаталогДанныхФирмы); //каталог для сохранения выгрузки
  
  ОбработкаЭкспортXML = РегламентированнаяОтчетность.РеглОтчеты("РегламентированныйОтчетМастерВыгрузкиРегламентированнойОтчетности",Истина);
  ИдФормы = "Форма";   
  
  ФормаОбр = ОбработкаЭкспортXML.ПолучитьФорму(ИдФормы);
  ФормаОбр.спПараметры = спПараметры; 
  ФормаОбр.ИмяНужногоОтчета = "РегламентированныйОтчетФСС";
  
  ФормаОбр.тбСхемы = спПараметры.Схемы;
  ФормаОбр.Открыть();
  
	
	ФормаОбр.Объект = ЭтотОбъект;
	ФормаОбр.Док    = мСохраненныйДок;

  мОтчетФССУтратаТрудосп.Области.CSTRAX.Значение = Временный_CSTRAX;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетФССУтратаТрудосп";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вычисляется автоматически';uk='Значення обчислюється автоматично'");
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");
		КонецЕсли;

		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки("СоставПоказателей2007Кв1");

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Печатать сразу';uk='Друкувати відразу'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Показать бланк';uk='Показати бланк'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЛинияСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЛинияПусто = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);

	мМассивТиповЛиний = Новый Массив();
	мМассивТиповЛиний.Вставить(0, ЛинияПусто);
	мМассивТиповЛиний.Вставить(1, ЛинияСнизу);

	ЭлементыФормы.ПолеТабличногоДокументаОтчетФССУтратаТрудосп.ОбластьПечати = ЭлементыФормы.ПолеТабличногоДокументаОтчетФССУтратаТрудосп.Области.Найти("ПредупреждениеОПечати");
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	Перем ИсходноеКоличествоСтрокГруппы;

	ЭтаФорма.АвтоЗаголовок = Ложь;

	мОтчетФССУтратаТрудосп = ЭлементыФормы.ПолеТабличногоДокументаОтчетФССУтратаТрудосп;
	мСлужебныеДанные    = ЭлементыФормы.ПолеТабличногоДокументаСлужебныеДанные;
	ТекТабличноеПоле = мОтчетФССУтратаТрудосп;
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП" Тогда
		ЭтоЗУП = Истина;
	Иначе
		ЭтоЗУП = Ложь;
	КонецЕсли;	
	
	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;

			УстановитьФорматВывода();
			
			ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
		КонецЕсли;
		
		ЗаполнитьСведенияОбОрганизации();

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();
	мОтчетФССУтратаТрудосп.ТолькоПросмотр = Истина;

	УстановитьЦветФонаЯчейки(,,"ОтчетФССУтратаТрудосп");

	СоздатьТаблицуСоСхемамиВыгрузки();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность = Истина Тогда

		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения ?';uk='Дані були змінені. Зберегти зміни ?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;

		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;

			мСохраненныйДок.Записать();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	// Заглушка
	//ЗаполнитьДемо();
	
	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда 
		Закрыть();
	КонецЕсли;	
	
КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА



// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)
	
	
	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	
	мОтчетФССУтратаТрудосп.Области.ДеньДаты.Значение 	= ЧастиДатыПодписи.День;
	мОтчетФССУтратаТрудосп.Области.МесяцДаты.Значение 	= ЧастиДатыПодписи.Месяц;
	мОтчетФССУтратаТрудосп.Области.ГодДаты.Значение 	= ЧастиДатыПодписи.ПоследняяЦифраГода;
	
	//	мОтчетФССУтратаТрудосп.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаОтчетФССУтратаТрудоспПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаОтчетФССУтратаТрудоспПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа.
//   Устанавливает признак модифицированности данных в форме, вызывает пересчет
// вычисляемых показателей  табличных полей и обновляет структуру данных
// многострочного раздела.
//
Процедура ПолеТабличногоДокументаОтчетФССУтратаТрудоспПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	Расчет();
	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаФССУтратаТрудоспПриИзменении()

// Процедура вызывается при нажатии на кнопку "Сохранить в формате XML"
Процедура КоманднаяПанельДействийДействиеXML(Кнопка) Экспорт
	ВыгрузитьВXML();
КонецПроцедуры  //КоманднаяПанельДействийДействиеXML(Кнопка)

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
// только в гривнях
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       НСтр("ru='в гривнях';uk='у гривнях'"));


// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетФССУтратаТрудосп.СписокВыбора.Добавить(1, НСтр("ru='не заполнять автоматически';uk='не заповнювати автоматично'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетФССУтратаТрудосп.СписокВыбора.Добавить(2, НСтр("ru='заполнять автоматически с корректировкой';uk='заповнювати автоматично з коригуванням'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетФССУтратаТрудосп.СписокВыбора.Добавить(3, НСтр("ru='заполнять автоматически без корректировки';uk='заповнювати автоматично без коригування'"));

ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

мСоставПоказателей = "СоставПоказателей2007Кв1";

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
мВерсияФормы = "01/01/2005";

мПечатныеФормы = Новый СписокЗначений;
	
