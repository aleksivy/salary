////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
//каждая закладка отчета - это объект ПолеТабличногоДокумента
Перем мОтчетФССУтратаТрудосп;

Перем мСоставПоказателей Экспорт;

// переменный для хранения бухгалтерских итогов
Перем мБухИтоги, мБухИтогиРС;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы;

//вспомогательные переменные
Перем СуммаВыплаты;

Перем мПечатныеФормы Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураПоказателейВнутрСвязи = Новый Структура;

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		Если Тип ("РисунокТабличногоДокумента") <> ТипЗнч (ТекущаяОбласть) Тогда
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//Проверяется условие не является ли ТекущаяОбласть многоячеечной областью для вывода 
		//документа на печать. Если является - то следующую проверку выполнять не нужно
		Если (ТекущаяОбласть.Имя = "Область1" ИЛИ ТекущаяОбласть.Имя = "Область2") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий параметры автозаполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки параметров автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии формы для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя, а в текущей - отключено.
							// В этом случае удаляем ячейку из таблицы пользовательских настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Процедура управляет показом в форме периода построения отчета,
Процедура ПоказатьПериод()

	СтрПериодОтчета = ПредставлениеПериода(НачалоГода(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "Л = uk_UA; ФП = Истина" );

// Период в заголовке отчета
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
    мОтчетФССУтратаТрудосп.Области.ПериодОтчета.Значение = "за  " +  СтрПериодОтчета;
	
КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
// пока не прописаны коды - вернуться
Процедура ЗаполнитьСведенияОбОрганизации()

	ОргНазв = Организация.Наименование;

	мОтчетФССУтратаТрудосп.Области.ОргНазв.Значение = ОргНазв;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","КодЗКГНГ");
	СписокПоказателей.Добавить("","КодКВЕД");
	СписокПоказателей.Добавить("","НомерФССУтратаТрудосп");
  
	ФИОДиректора = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФИОРук;
	ФИОГлавБуха = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФИОБух;
	КодЕДРПОУ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодПоЕДРПОУ;


//	НомерФССУтратаТрудосп = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).НомерФССУтратаТрудосп;
	
	мОтчетФССУтратаТрудосп.Области.КодЕДРПОУ.Значение = КодЕДРПОУ; 
//	мОтчетФССУтратаТрудосп.Области.НомерРегистрацииУтратаТрудосп.Значение = НомерФССУтратаТрудосп;
  
    мОтчетФССУтратаТрудосп.Области.ОргБухгалтер.Значение = ФИОГлавБуха; 
	мОтчетФССУтратаТрудосп.Области.ОргДиректор.Значение = ФИОДиректора;
	
	мОтчетФССУтратаТрудосп.Области.Адрес.Значение = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
	мОтчетФССУтратаТрудосп.Области.Телефон.Значение = УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	
	ДопСведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, мДатаНачалапериодаОтчета, "uk");
	мОтчетФССУтратаТрудосп.Области.РС.Значение     = ДопСведенияОбОрганизации.НомерСчета;
	мОтчетФССУтратаТрудосп.Области.Банк.Значение   = ДопСведенияОбОрганизации.Банк;
	мОтчетФССУтратаТрудосп.Области.МФО.Значение    = ДопСведенияОбОрганизации.МФО;


КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(НСтр("ru='Отчет в ФСС от временной утраты трудоспособности: при выводе сумм в гривнях точность не может превышать 2 знака';uk='Звіт у ФСС від тимчасової втрати працездатності: при виведенні сум у гривнях точність не може перевищувати 2 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	КонецЕсли;

	Сообщить(НСтр("ru='После изменения формата вывода значений, для корректного расчета итогов необходимо перезаполнить отчет!';uk='Після зміни формату виводу значень, для корректного розрахунку підсумків треба перезаполвнити звіт!'"), СтатусСообщения.Внимание);	
КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";

	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "ОтчетФССУтратаТрудосп";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()


// Обновляет пользовательские настройки при изменении версии формы.
// унифицирована, однако использование пока ... вопрос
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить(НСтр("ru='Измененилась версия формы отчета."
"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
"Виконується відновлення користувальницьких настройок.'"), СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	Если ЕстьИзмененияВариантыЗаполнения Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить(НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Оновлення користувальницьких настройок успішно завершене!'"));

	Иначе

		Сообщить(НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі користувальницьких настройок не виявлені!'"));

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()


// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетФССУтратаТрудосп";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетФССУтратаТрудосп";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя)

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("ОтчетФССУтратаТрудосп");
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	мОтчетФССУтратаТрудосп.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()
// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Тип ("РисунокТабличногоДокумента") = ТипЗнч (ТекущаяОбласть) Тогда
			ТекущаяОбласть.Значение = ""; 
		Иначе	
			
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ТекущаяОбласть.СодержитЗначение Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяОбласть.Очистить();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить()

	// Очищаем содержимое ячеек поля табличного документа
	ТекТабличноеПоле = мОтчетФССУтратаТрудосп;
	ОчиститьТабличноеПоле(ТекТабличноеПоле);

	// Выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

КонецПроцедуры // Очистить()

Процедура РазбитьПечатнуюФорму(ПечФорма)
	
	ИмяФормы = НСтр("ru='Отчет в ФСС';uk='Звіт у ФСС'");
	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = Истина;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	
	Для Сч = 1 По ПечФорма.ВысотаТаблицы Цикл
		
		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		НовТаблДок = Новый ТабличныйДокумент();
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = Истина;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати)
    мПечатныеФормы.Очистить();

	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ОбластьПечати = мОтчетФССУтратаТрудосп.ПолучитьОбласть("Шапка");
	ПечатнаяФорма.Вывести(ОбластьПечати);


	ОбластьПечати = мОтчетФССУтратаТрудосп.ПолучитьОбласть("Отчет");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	
	ОбластьПечати = мОтчетФССУтратаТрудосп.ПолучитьОбласть("Подвал");
	ПечатнаяФорма.Вывести(ОбластьПечати);


	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;

//	Если ВидПечати = "ПоказатьБланк" Тогда
//		ПечатнаяФорма.Показать(СокрП(ЭтаФорма.Заголовок));
//	ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
//		ПечатнаяФорма.Напечатать();
//	КонецЕсли;

	РазбитьПечатнуюФорму(ПечатнаяФорма);
	
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()


// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить()  Экспорт
    Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.

		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;

		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();

	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаОтчетФССУтратаТрудосп";
	
	ТекТабличноеПоле        = мОтчетФССУтратаТрудосп;

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	Модифицированность = Ложь;

	Возврат Истина;
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	// восстанавливаем реквизиты отчета
	Организация              = мСохраненныйДок.Организация;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;

	ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	УстановитьФорматВывода();
	Расчет();

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()
	//ІI. Нарахована сума фактичних витрат на оплату праці найманих працівників та 
	//оподаткованого доходу (прибутку), з якої справляються страхові внески, (за розміром 
	//внесків)
	//За звітний квартал
	
	//0,5%
	мОтчетФССУтратаТрудосп.Области.П05_2Кв.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05_2Мес1.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05_2Мес2.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05_2Мес3.Значение);
	
	//0,7%                                      
	мОтчетФССУтратаТрудосп.Области.П07Кв.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П07Мес1.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П07Мес2.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П07Мес3.Значение);
	
	//3,4%
	мОтчетФССУтратаТрудосп.Области.П34Кв.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П34Мес1.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П34Мес2.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П34Мес3.Значение);
	
	//2,9%
	мОтчетФССУтратаТрудосп.Области.П29Кв.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П29Мес1.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П29Мес2.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П29Мес3.Значение);
	
	//Всього
	мОтчетФССУтратаТрудосп.Области.ПВсегоФондКв.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.ПВсегоФондМес1.Значение) 
	                                                     + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.ПВсегоФондМес2.Значение) 
	                                                     + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.ПВсегоФондМес3.Значение);
	
	//Всього з початку року
	
	//0,5%
	мОтчетФССУтратаТрудосп.Области.П05_2Год.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05_2Нач.Значение) 
	                                                 + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05_2Кв.Значение);
	
	//0,7%
	мОтчетФССУтратаТрудосп.Области.П07Год.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П07Нач.Значение) 
	                                                 + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П07Кв.Значение);
	
	//3,4%
	мОтчетФССУтратаТрудосп.Области.П34Год.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П34Нач.Значение) 
	                                                 + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П34Кв.Значение);
	
	//2,9%
	мОтчетФССУтратаТрудосп.Области.П29Год.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П29нач.Значение) 
	                                                 + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П29Кв.Значение);
	
	//Всього
	мОтчетФССУтратаТрудосп.Области.ПВсегоФондГод.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.ПВсегоФондНач.Значение) 
	                                                      + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.ПВсегоФондКв.Значение);
	
	//II. Нарахована сума оплати праці найманих працівників, з якої утримуються страхові 
	//внески, (за розміром внесків)
	//За звітний квартал
	
	//0,25%
	мОтчетФССУтратаТрудосп.Области.П025Кв.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П025Мес1.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П025Мес2.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П025Мес3.Значение);
	
	//0,5%
	мОтчетФССУтратаТрудосп.Области.П05Кв.Значение  = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05Мес1.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05Мес2.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05Мес3.Значение);
	
	//1%
	мОтчетФССУтратаТрудосп.Области.П1Кв.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П1Мес1.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П1Мес2.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П1Мес3.Значение);
	
	//Всього з початку року
	//0,25%
	мОтчетФССУтратаТрудосп.Области.П025Год.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П025Нач.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П025Кв.Значение);
	
	//0,5%
	мОтчетФССУтратаТрудосп.Области.П05Год.Значение  = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05Нач.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05Кв.Значение);
	
	//1%
	мОтчетФССУтратаТрудосп.Области.П1Год.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П1Нач.Значение) 
	                                                + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П1Кв.Значение);
	
	//Всього
	мОтчетФССУтратаТрудосп.Области.ПВсегоСотрГод.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.ПВсегоСотрНач.Значение) 
	                                                      + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.ПВсегоСотрКв.Значение);
	
	
	//Нараховано страхових внесків з початку року: За звітний період (місяці) 
	//0,5%
	мОтчетФССУтратаТрудосп.Области.П20713.Значение = ОкруглитьЧислоПоФормату (мОтчетФССУтратаТрудосп.Области.П20733.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20743.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20753.Значение);
	
	//0,7%                            
	мОтчетФССУтратаТрудосп.Области.П20813.Значение = ОкруглитьЧислоПоФормату (мОтчетФССУтратаТрудосп.Области.П20833.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20843.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20853.Значение);
	
	//2,9%
	мОтчетФССУтратаТрудосп.Области.П20213.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20233.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20243.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20253.Значение);
	
	//3,4%
	мОтчетФССУтратаТрудосп.Области.П20613.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20633.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20643.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20653.Значение);
	
	//0,25%                           
	мОтчетФССУтратаТрудосп.Области.П20413.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20433.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20443.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20453.Значение);
	
	//0,5%                            
	мОтчетФССУтратаТрудосп.Области.П20513.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20533.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20543.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20553.Значение);
	
	//1 %                            
	мОтчетФССУтратаТрудосп.Области.П20913.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20933.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20943.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20953.Значение);
	
	//Всього з п. р.
	//0,5%
	мОтчетФССУтратаТрудосп.Области.П20763.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20723.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20713.Значение);
	
	//0,7%                   
	мОтчетФССУтратаТрудосп.Области.П20863.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20823.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20813.Значение);
	
	//2,9%
	мОтчетФССУтратаТрудосп.Области.П20263.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20223.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20213.Значение);
	
	//3,4%                   
	мОтчетФССУтратаТрудосп.Области.П20663.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20623.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20613.Значение);         
	
	//0,25%                           
	мОтчетФССУтратаТрудосп.Области.П20463.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20423.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20413.Значение);         
	
	//0,5%                            
	мОтчетФССУтратаТрудосп.Области.П20563.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20523.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20513.Значение);         
	
	//1%                            
	мОтчетФССУтратаТрудосп.Области.П20963.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20923.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20913.Значение);
	
	//Всього
	//На початок періоду
	мОтчетФССУтратаТрудосп.Области.ПВсегоФондНач.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05_2Нач.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П07Нач.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П34Нач.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П29нач.Значение);
	
	мОтчетФССУтратаТрудосп.Области.ПВсегоСотрНач.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П025Нач.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05Нач.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П1Нач.Значение);
	
	мОтчетФССУтратаТрудосп.Области.ПВсегоНачислНач.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20723.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20823.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20223.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20623.Значение);
	
	мОтчетФССУтратаТрудосп.Области.ПВсегоУдержНач.Значение  = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20423.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20523.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20923.Значение);
	
	//За звітний квартал
	мОтчетФССУтратаТрудосп.Области.ПВсегоФондКв.Значение    = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05_2Кв.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П07Кв.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П34Кв.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П29Кв.Значение);
	
	мОтчетФССУтратаТрудосп.Области.ПВсегоСотрКв.Значение    = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П025Кв.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05Кв.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П1Кв.Значение);                                        
	
	мОтчетФССУтратаТрудосп.Области.ПВсегоНачислКв.Значение  = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20713.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20813.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20213.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20613.Значение);
	
	мОтчетФССУтратаТрудосп.Области.ПВсегоУдержКв.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20413.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20513.Значение)
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20913.Значение);
	
	//1-й місяць кварталу                     
	
	мОтчетФССУтратаТрудосп.Области.ПВсегоФондМес1.Значение  = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05_2Мес1.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П07Мес1.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П34Мес1.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П29Мес1.Значение);
	
	мОтчетФССУтратаТрудосп.Области.ПВсегоСотрМес1.Значение  = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П025Мес1.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05Мес1.Значение) 
	                                                        + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П1Мес1.Значение);
	
	мОтчетФССУтратаТрудосп.Области.ПВсегоНачМес1.Значение    = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20733.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20833.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20233.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20633.Значение);
	
	мОтчетФССУтратаТрудосп.Области.ПВсегоУдержМес1.Значение  = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20433.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20533.Значение)
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20933.Значение);
	
	//2-й місяць кварталу                                 
	мОтчетФССУтратаТрудосп.Области.ПВсегоФондМес2.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05_2Мес2.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П07Мес2.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П34Мес2.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П29Мес2.Значение);
	
	мОтчетФССУтратаТрудосп.Области.ПВсегоСотрМес2.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П025Мес2.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05Мес2.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П1Мес2.Значение);
	
	мОтчетФССУтратаТрудосп.Области.ПВсегоНачМес2.Значение    = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20743.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20843.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20243.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20643.Значение);
	
	мОтчетФССУтратаТрудосп.Области.ПВсегоУдержМес2.Значение  = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20443.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20543.Значение)
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20943.Значение);
	
	//3-й місяць кварталу                                 
	мОтчетФССУтратаТрудосп.Области.ПВсегоФондМес3.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05_2Мес3.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П07Мес3.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П34Мес3.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П29Мес3.Значение);
	
	мОтчетФССУтратаТрудосп.Области.ПВсегоСотрМес3.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П025Мес3.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05Мес3.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П1Мес3.Значение);
	
	мОтчетФССУтратаТрудосп.Области.ПВсегоНачМес3.Значение    = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20753.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20853.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20253.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20653.Значение);
	
	мОтчетФССУтратаТрудосп.Области.ПВсегоУдержМес3.Значение  = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20453.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20553.Значение)
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20953.Значение);
	
	//Всього з початку року
	мОтчетФССУтратаТрудосп.Области.ПВсегоФондГод.Значение    = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05_2Год.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П07Год.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П34Год.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П29Год.Значение);
	
	мОтчетФССУтратаТрудосп.Области.ПВсегоСотрГод.Значение    = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П025Год.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П05Год.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П1Год.Значение);
	
	мОтчетФССУтратаТрудосп.Области.ПВсегоНачислГод.Значение  = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20763.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20863.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20263.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20663.Значение);
	
	мОтчетФССУтратаТрудосп.Области.ПВсегоУдержГод.Значение   = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20463.Значение) 
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20563.Значение)
	                                                         + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20963.Значение);
	
	//Нараховано страхових внесків з початку року: Сума всього
	мОтчетФССУтратаТрудосп.Области.П20200.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.ПВсегоНачислГод.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.ПВсегоУдержГод.Значение);
	
	//Зараховано затрат по соцстраху з початку року: За звітний період (місяці)
	мОтчетФССУтратаТрудосп.Области.П21413.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П21433.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П21443.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П21453.Значение);
	
	//Зараховано затрат по соцстраху з початку року: Сума всього
	мОтчетФССУтратаТрудосп.Области.П21400.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П21423.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П21433.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П21443.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П21453.Значение); 
	
	//Перераховано на поточний рахунок профспілки, Фонду: Сума всього
	мОтчетФССУтратаТрудосп.Области.П21500.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П21523.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П21533.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П21543.Значение); 
	
	//ВСЬОГО (р.12 - р.15)
	мОтчетФССУтратаТрудосп.Области.П21600.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П21300.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П21400.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П21500.Значение);
	
	//ВСЬОГО (р.1. - р. 9)
	мОтчетФССУтратаТрудосп.Области.П21100.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20100.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20200.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20300.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20400.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20500.Значение)
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20600.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20700.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20800.Значение) 
	                                               + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П20900.Значение) 
	                                               - ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П21000.Значение);
	
	//Залишок заборгованості за страхувальником на кінець звітного періоду
	мОтчетФССУтратаТрудосп.Области.П21700.Значение = Макс(ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П21100.Значение) 
	                                               - ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П21600.Значение),0);
	
	//Залишок заборгованості за профорганізацією на кінець періоду
	мОтчетФССУтратаТрудосп.Области.П21200.Значение = Макс(ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П21600.Значение) 
	                                               - ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П21100.Значение),0); 
												   
   // "Отримано від Фонду" за звітний квартал (рр. 3 - 5)
   мОтчетФССУтратаТрудосп.Области.П2092.Значение  = мОтчетФССУтратаТрудосп.Области.П2093.Значение
                                                  - мОтчетФССУтратаТрудосп.Области.П2095.Значение;
	
	
	//IV. Витрати по страхових коштах
	//                     1. ДОПОМОГА
	//ВСЬОГО сума допомоги (р.1 + р.2 + р. З + р. 4 + р. 5 + р. 6)
	//Зараховано витрат за рахунок Фонду
	//Сума	
	мОтчетФССУтратаТрудосп.Области.П7_4.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П1_4.Значение) 
	                                             + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П2_4.Значение) 
	                                             + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П3_4.Значение) 
	                                             + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П4_4.Значение) 
	                                             + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П5_4.Значение) 
	                                             + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П6_4.Значение);
	
	мОтчетФССУтратаТрудосп.Области.П7_6.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П1_6.Значение) 
	                                             + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П2_6.Значение) 
	                                             + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П3_6.Значение);
	
	//Фактично виплачена допомога поточного року за рахунок Фонду
	мОтчетФССУтратаТрудосп.Области.П7_7.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П1_7.Значение) 
	                                             + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П2_7.Значение) 
	                                             + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П3_7.Значение) 
	                                             + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П4_7.Значение);
	
	//                       2. СОЦІАЛЬНІ ПОСЛУГИ
	//Всього(р.8 + р.9 + р.10)
	//Зараховано витрат за рахунок Фонду
	//Сума	
	мОтчетФССУтратаТрудосп.Области.П10_4.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П8_4.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П9_4.Значение); 
	
	//Разом витрат (р. 7 + р. 10 + р. 11) (****)    
	//Зараховано витрат за рахунок Фонду
	//Сума	
	мОтчетФССУтратаТрудосп.Области.П12_4.Значение = ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П7_4.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П10_4.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССУтратаТрудосп.Области.П11_4.Значение);
	
КонецПроцедуры // Расчет()


// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто()  Экспорт

	////////
	// *** Здесь необходимо написать алгоритм заполнения отчета.***
	//
	// Для присвоения показателям отчета вычисленного значения необходимо
	// использовать процедуру
	//
	//     УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя).
	//
	////////
// расчет среднесписочнйо численности в эквиваленте полной занятости
   ТаблЧисленностиЭПЗ = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "ЭПЗ", "КВАРТАЛ", Организация, ""); 
   Сотрудников = ТаблЧисленностиЭПЗ[0].Средняя;
   УстановитьЗначениеПоказателя("Сотрудников", Сотрудников);
   

   ТаблЧисленностиЭПЗЖ = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "ЭПЗ", "КВАРТАЛ", Организация, "Ж"); 
   ЖенщинВсего = ТаблЧисленностиЭПЗЖ[0].Средняя;
   УстановитьЗначениеПоказателя("ЖенщинВсего", ЖенщинВсего);
	
// Инициализация

	СтрокиДекларации = Справочники.СтатьиНалоговыхДеклараций;

	МассивСтатей = Новый Массив;  

	МассивСтатей.Добавить(СтрокиДекларации.ФССУтрТрудосп_Орг29);
	МассивСтатей.Добавить(СтрокиДекларации.ФССУтрТрудосп_Сотр025);
	МассивСтатей.Добавить(СтрокиДекларации.ФССУтрТрудосп_Сотр05);
	МассивСтатей.Добавить(СтрокиДекларации.ФССУтрТрудосп_Сотр1);
	
	МассивПрефиксов = Новый Массив;  

	МассивПрефиксов.Добавить("29");
	МассивПрефиксов.Добавить("025");
	МассивПрефиксов.Добавить("05");
	МассивПрефиксов.Добавить("1");
	
	//массив для хранения сумм начисленных взносов в разрезе ставок
	//отдельно для каждого месяца отчетного квартала,а также на начало квартала
	МассивПоВзносам  = Новый Массив(4,4);
	
	Для i = 0 по МассивПоВзносам.Количество() - 1 Цикл
		Для j = 0 по 3 Цикл	
			МассивПоВзносам[i][j] = 0;
		КонецЦикла;
	КонецЦикла;
	
	//массив для хранения сумм начисленных взносов уже не в разрезе ставок (общей суммой)
	//отдельно для каждого месяца отчетного квартала,а также на начало квартала
	МассивПоВзносамПеречислЗачтено  = Новый Массив(2,4);
	
	Для i = 0 по МассивПоВзносамПеречислЗачтено.Количество() - 1 Цикл
		Для j = 0 по 3 Цикл	
			МассивПоВзносамПеречислЗачтено[i][j] = 0;	
		КонецЦикла;
	КонецЦикла;
	
	П2091 = 0;
	П2093 = 0;
	
	ПС = ПланыСчетов["Хозрасчетный"];
	СчетФСС       = ПС.РасчетыПоСоциальномуСтрахованию;
	СчетРасчСчет1 = ПС.ТекущиеСчетаВНациональнойВалюте;
	СчетРасчСчет2 = ПС.ДругиеСчетаВБанкеВНациональнойВалюте;
	СчетЗП        = ПС.РасчетыПоОплатеТруда;
	СчетПФ        = ПС.РасчетыПоПенсионномуОбеспечению;
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(СчетРасчСчет1);
	МассивСчетов.Добавить(СчетРасчСчет2);
	
	МассивСубконто = Новый Массив;
    МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Налоги);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций);

    //Расчет показателей раздела II
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|ВзаиморасчетыПоВзносам.НалоговыйПериод            КАК Месяц,
	|ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации  КАК СтатьяНалоговойДекларации,
	|СУММА(ВзаиморасчетыПоВзносам.БазаВзносаНачальныйОстаток)  КАК БазаОстаток,
	|СУММА(ВзаиморасчетыПоВзносам.БазаВзносаПриход)  КАК БазаОборот
   	|ИЗ РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.ОстаткиИОбороты(&НачДата,&КонДата) КАК ВзаиморасчетыПоВзносам
    |
	|ГДЕ 
	|	ВзаиморасчетыПоВзносам.Организация = &парамОрганизация
	|    И ВЫБОР КОГДА ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации В (&МассивНужныхСтатей)  ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыПоВзносам.НалоговыйПериод,
	|	ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации 
	|";

	Запрос = Новый Запрос ();
	Запрос.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонДата" ,мДатаКонцаПериодаОтчета);

	Запрос.УстановитьПараметр("МассивНужныхСтатей", МассивСтатей);
	Запрос.УстановитьПараметр("парамОрганизация",  Организация);
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
	
    //ищем структуру по месяцу и статье декларации
	Отбор = Новый Структура;
	i = 0;
	Для мес = Месяц (НачалоГода(мДатаНачалаПериодаОтчета)) по Месяц(мДатаКонцаПериодаОтчета) Цикл
		ТекМесяц = ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета),i);
		Отбор.Вставить("Месяц",ТекМесяц);
	    j = 0;
		Для каждого НужнаяСтатья из МассивСтатей Цикл
			Отбор.Вставить("СтатьяНалоговойДекларации",НужнаяСтатья);
			// результатом поиска всегда будет только одна строка, не массив
			НайденныеСтроки = ТаблицаРезультатов.НайтиСтроки (Отбор);
			
			Если (НайденныеСтроки.Количество() = 1 ) Тогда
				ИмяЯчейкиНач = "П" + МассивПрефиксов[j] + "Нач";
				Если (Месяц(ТекМесяц) < Месяц(мДатаНачалаПериодаОтчета)) Тогда
					мОтчетФССУтратаТрудосп.Области[ИмяЯчейкиНач].Значение = мОтчетФССУтратаТрудосп.Области[ИмяЯчейкиНач].Значение 
					+ НайденныеСтроки[0].БазаОстаток;
				Иначе
					Если (Месяц(ТекМесяц) = Месяц(мДатаНачалаПериодаОтчета)) Тогда 														  
						инд = 1;
					ИначеЕсли (Месяц(ТекМесяц) = Месяц(мДатаКонцаПериодаОтчета)) Тогда
						инд = 3;
					Иначе
						инд = 2;
					КонецЕсли;
	            		ИмяЯчейкиМес = "П" +  МассивПрефиксов[j] + "Мес" + Строка(инд);			
						мОтчетФССУтратаТрудосп.Области[ИмяЯчейкиМес].Значение = НайденныеСтроки[0].БазаОборот;
				КонецЕсли;
			 КонецЕсли;	
			 j = j + 1;
		КонецЦикла;
		i = i + 1;
	КонецЦикла;
	
	//показатели, расчет которых - это сальдо, то есть остаточные сущности
	//для них - расчет итогов - может быть выполнен только отдельно
	мБухИтогиОст = Обработки.БухгалтерскиеИтоги.Создать();
	Итоги = "НачальныйОстатокДт,НачальныйОстатокКт,КонечныйОстатокДт,КонечныйОстатокКт";
	мБухИтогиОст.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,,"65,66",,,, "Организация", Организация);
	
	//задолженность страховщика на начало года
	П20100 = мБухИтогиОст.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет",СчетФСС);
    УстановитьЗначениеПоказателя("П20100", П20100);
	
	//задолженность фонда на начало года
	П21300 = мБухИтогиОст.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет",СчетФСС);
    УстановитьЗначениеПоказателя("П21300", П21300);
	
	//задолженность по выплате заработной платы на начало года
    ПЗадолжЗПГод = мБухИтогиОст.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет",СчетЗП); 
	УстановитьЗначениеПоказателя("ПЗадолжЗПГод", ПЗадолжЗПГод);
	
	//задолженность на конец отчетного периода (без учета задолженности за его последний месяц)
	ТекстЗапроса = "
	|ВЫБРАТЬ
	| СУММА (ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток) КАК Результат
	|  ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&КонДата,Организация = &Организация) КАК ВзаиморасчетыСРаботниками
	| ГДЕ
	| ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов <> &КонДата 
	|";
	
	ЗапросСуммаЗадолжКонец = Новый Запрос;
	ЗапросСуммаЗадолжКонец.Текст = ТекстЗапроса;
	ЗапросСуммаЗадолжКонец.УстановитьПараметр("КонДата", НачалоМесяца(мДатаКонцаПериодаОтчета));
	ЗапросСуммаЗадолжКонец.УстановитьПараметр("Организация",   Организация);
	РезультатЗапроса = ЗапросСуммаЗадолжКонец.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаРезультатовЗадолжЗПКон = РезультатЗапроса.Выгрузить();
		ПЗадолжЗПКв = ТаблицаРезультатовЗадолжЗПКон[0].Результат;
		УстановитьЗначениеПоказателя("ПЗадолжЗПКв",ПЗадолжЗПКв);
	КонецЕсли;
	
	//расчет для  показателей разделов III.A, III,IV 
	
	мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
	Итоги = "ОборотКт,ОборотДт,КорОборотДт, КорОборотКт";	
	мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Период,Счет,Субконто1,Субконто2,КорСчет", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,"Месяц","652",МассивСубконто,,, "Организация", Организация);
	
	//сразу получим показатели за отчетный квартал нарастающим итогом с начала года
	//то есть обороты счета по статьям декларации
	
	// расчет показателей Раздела II. Розрахунки по коштах загальнообов'язкового державного соціального страхування"
	
	//доначислено взносов самостоятельно
	НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ДоначислСамост;
	П20300 = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто2", СчетФСС, НужнаяСтатья);
	УстановитьЗначениеПоказателя("П20300", П20300);
	
	//доначислено взносов по актам
	НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ДоначислАкт;
	П20400 = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто2", СчетФСС, НужнаяСтатья);
	УстановитьЗначениеПоказателя("П20400", П20400);
	
	//получено от частичной оплаты за путевки
	НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ОплПутев;
	П20600 = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто2", СчетФСС, НужнаяСтатья);
	УстановитьЗначениеПоказателя("П20600", П20600);
	
	//не принято к зачету
	НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_НеПринятоКЗачет;
	П20700 = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто2", СчетФСС, НужнаяСтатья);
	УстановитьЗначениеПоказателя("П20700", П20700);
	
	//штраф
    НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_Штраф;
	П20800 = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто2", СчетФСС, НужнаяСтатья);
	УстановитьЗначениеПоказателя("П20800", П20800);
	
	//получено от фонда с начала года
	П20900 = мБухИтоги.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", СчетФСС, СчетРасчСчет1)
		   + мБухИтоги.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", СчетФСС, СчетРасчСчет2);
    УстановитьЗначениеПоказателя("П20900", П20900);
	
	//Расчет показателей раздела IV "Витрати за рахунок страхових внесків"
	// по временной нетрудоспособности
	НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ВремНетрудосп;
    П1_4 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет, ", СчетФСС, НужнаяСтатья,СчетЗП,);
	УстановитьЗначениеПоказателя("П1_4", П1_4);
	
	// по уходу за больным членом семьи
	НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ВремНетрудоспУход;
    П2_4 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет", СчетФСС, НужнаяСтатья,СчетЗП);
	УстановитьЗначениеПоказателя("П2_4", П2_4);
	
	// по беремнности и родам
	НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_Берем;
    П3_4 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет", СчетФСС,  НужнаяСтатья,СчетЗП,);
	УстановитьЗначениеПоказателя("П3_4", П3_4);
	
	// по уходу за ребенком
	НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_Берем;
    СуммаВыплаты = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет, ", СчетФСС, НужнаяСтатья,СчетЗП);
	
	НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_Берем;
    П41_4 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет", СчетФСС, НужнаяСтатья,СчетПФ);
 	УстановитьЗначениеПоказателя("П41_4", П41_4);
	П4_4 = СуммаВыплаты + П41_4;
    УстановитьЗначениеПоказателя("П4_4", П4_4);
	
	// при рождении ребенка
	НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_Рождение;
    П5_4 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет", СчетФСС, НужнаяСтатья,СчетЗП);
	УстановитьЗначениеПоказателя("П5_4", П5_4);
	
	// на погребение
	НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_Погребен;
    П6_4 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2,КорСчет", СчетФСС, НужнаяСтатья,СчетЗП);
	УстановитьЗначениеПоказателя("П6_4", П6_4);
	
	// частичное финансирование санаториев-профилакториев
	НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ФинСанат;
    П8_4 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2", СчетФСС, НужнаяСтатья);
	УстановитьЗначениеПоказателя("П8_4", П8_4);
	
	// частичное оздоровление детей
	НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_ФинОздор;
    П9_4 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2", СчетФСС, НужнаяСтатья);
	УстановитьЗначениеПоказателя("П9_4", П9_4);
	
	// другие затраты
	НужнаяСтатья = СтрокиДекларации.ФССУтрТрудосп_Другое;
    П11_4 = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто2", СчетФСС, НужнаяСтатья);
	УстановитьЗначениеПоказателя("П11_4", П11_4);

	//теперь получаем и накапливаем данные с разбивкой по месяцам
	Для НомМес = 1 по Месяц(мДатаКонцаПериодаОтчета) Цикл
		мес = НачалоМесяца( ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), НомМес-1));
		
		//получаем общую сумму перечисленных взносов
		Перечислено = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет, КорСчет", мес,СчетФСС, СчетРасчСчет1)
		            + мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет, КорСчет", мес,СчетФСС, СчетРасчСчет2);
					
		//дебетовый оборот за месяц в целом			
		ИтогДО = мБухИтоги.ПолучитьИтог("СуммаОборотДт", "Период, Счет", мес, СчетФСС);
		Зачтено = ИтогДО - Перечислено; 
		
		Если (НомМес < Месяц(мДатаНачалаПериодаОтчета)) или (Месяц(мДатаНачалаПериодаОтчета) = 1) Тогда
			инд = Цел(НомМес/Месяц(мДатаНачалаПериодаОтчета));
		Иначе 
			инд = НомМес%Месяц(мДатаНачалаПериодаОтчета) + 1;
		КонецЕсли;
		
		ПолученоОтФонда = мБухИтоги.ПолучитьИтог("СуммаКорОборотКт", "Период, Счет, КорСчет", мес, СчетФСС, СчетРасчСчет1)
		                + мБухИтоги.ПолучитьИтог("СуммаКорОборотКт", "Период, Счет, КорСчет",мес, СчетФСС, СчетРасчСчет2);
		Если инд <> 0 Тогда
			//это месяц отчетного квратала
			//накапливаем данные о перечисленных суммах на расчетный счет
			П2093 = П2093 + ПолученоОтФонда;
			МесяцСтр = Формат(мес, "ДФ = 'ММММ';Л = uk_UA");
			ИмяЯчейки = "Пм" + инд;
			мОтчетФССУтратаТрудосп.Области[ИмяЯчейки].Значение = МесяцСтр;
		Иначе 
		 //накапливаем данные на начало отчетного квартала 
		 //перечислено на начало квартала
		 П2091 = П2091 + ПолученоОтФонда;
		КонецЕсли;	
			
		МассивПоВзносамПеречислЗачтено[0][инд] = МассивПоВзносамПеречислЗачтено[0][инд] + Перечислено;			
		МассивПоВзносамПеречислЗачтено[1][инд] = МассивПоВзносамПеречислЗачтено[1][инд] + Зачтено;
		i = 0;
		//собственно расчет сумм взносов
		Для каждого НужнаяСтатья из МассивСтатей Цикл
			НачисленоУдержано = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Период,Счет,Субконто2",мес, СчетФСС, НужнаяСтатья);
			МассивПоВзносам[i][инд] = МассивПоВзносам[i][инд] + НачисленоУдержано;
			i = i + 1;
		КонецЦикла;
	КонецЦикла;
	
	//присвоение рассчитанных значений показателям
	//Нараховано
	П20223 = МассивПоВзносам[0][0];
	УстановитьЗначениеПоказателя("П20223", П20223);
	П20233 = МассивПоВзносам[0][1];   
	УстановитьЗначениеПоказателя("П20233", П20233);
	П20243 = МассивПоВзносам[0][2];   
	УстановитьЗначениеПоказателя("П20243", П20243);
	П20253 = МассивПоВзносам[0][3];   
    УстановитьЗначениеПоказателя("П20253", П20253);
	
	//удержанные суммы по ставке 0,25% 
	П20423 = МассивПоВзносам[1][0];
	УстановитьЗначениеПоказателя("П20423", П20423);
	П20433 = МассивПоВзносам[1][1];   
	УстановитьЗначениеПоказателя("П20433", П20433);
	П20443 = МассивПоВзносам[1][2];    
	УстановитьЗначениеПоказателя("П20443", П20443);
	П20453 = МассивПоВзносам[1][3];   
    УстановитьЗначениеПоказателя("П20453", П20453);
	
	//удержанные суммы по ставке 0,5% 
	П20523 = МассивПоВзносам[2][0];
    УстановитьЗначениеПоказателя("П20523", П20523);
    П20533 = МассивПоВзносам[2][1];    
	УстановитьЗначениеПоказателя("П20533", П20533);
	П20543 = МассивПоВзносам[2][2];    
	УстановитьЗначениеПоказателя("П20543", П20543);
	П20553 = МассивПоВзносам[2][3];  
    УстановитьЗначениеПоказателя("П20553", П20553);
	
	//удержанные суммы по ставке 1%  
	П20923 = МассивПоВзносам[3][0];
    УстановитьЗначениеПоказателя("П20923", П20923);
	П20933 = МассивПоВзносам[3][1];   
	УстановитьЗначениеПоказателя("П20933", П20933);
	П20943 = МассивПоВзносам[3][2];    
	УстановитьЗначениеПоказателя("П20943", П20943);
	П20953 = МассивПоВзносам[3][3];   
    УстановитьЗначениеПоказателя("П20953", П20953);
	
	//зачтено и перечислено
	//зачтено на начало квартала
	П21423 = МассивПоВзносамПеречислЗачтено[1][0];
	УстановитьЗначениеПоказателя("П21423", П21423);
	
	//зачтено за первый месяц
	П21433= МассивПоВзносамПеречислЗачтено[1][1];
	УстановитьЗначениеПоказателя("П21433", П21433);

	//зачтено за второй месяц
	П21443 = МассивПоВзносамПеречислЗачтено[1][2];
	УстановитьЗначениеПоказателя("П21443", П21443);
	
	//зачтено за третий месяц
	П21453 = МассивПоВзносамПеречислЗачтено[1][3];
	УстановитьЗначениеПоказателя("П21453", П21453);
	
	//перечислено на начало квартала
	П21523 = МассивПоВзносамПеречислЗачтено[0][0];
	УстановитьЗначениеПоказателя("П21523", П21523);
	
	//перечислено за первый месяц
	П21533 = МассивПоВзносамПеречислЗачтено[0][1];
	УстановитьЗначениеПоказателя("П21553", П21533);

	//перечислено за второй месяц
	П21543 = МассивПоВзносамПеречислЗачтено[0][2];
	УстановитьЗначениеПоказателя("П21543", П21543);
	
	//перечислено за третий месяц
	П21553 = МассивПоВзносамПеречислЗачтено[0][3];
    УстановитьЗначениеПоказателя("П21553", П21553);

	//получено от фонда на начало квартала
	УстановитьЗначениеПоказателя("П2091", П2091);
	
	//получено от фонда за отчетный квартал
	УстановитьЗначениеПоказателя("П2093", П2093);
 	
    Расчет();
	
	// V. Расшифровка задолженнссти страховщика (III, стр. 17)     
	 
	Если  (мОтчетФССУтратаТрудосп.Области.П21700.Значение > 0) Тогда   
	//  Задолженность по страховым взносам, срок уплаты которых не настал	
		мОтчетФССУтратаТрудосп.Области.ПV_1.Значение = мОтчетФССУтратаТрудосп.Области.П20253.Значение 
		                                             + мОтчетФССУтратаТрудосп.Области.П20753.Значение 
											         + мОтчетФССУтратаТрудосп.Области.П20853.Значение 
											         + мОтчетФССУтратаТрудосп.Области.П20653.Значение 
											         + мОтчетФССУтратаТрудосп.Области.П20453.Значение 
											         + мОтчетФССУтратаТрудосп.Области.П20553.Значение 
											         + мОтчетФССУтратаТрудосп.Области.П20953.Значение;   
	// Задолженость. связанная с невыплатой з/п
		мОтчетФССУтратаТрудосп.Области.ПV_2.Значение = мОтчетФССУтратаТрудосп.Области.П21700.Значение 
		                                             - мОтчетФССУтратаТрудосп.Области.ПV_1.Значение;  
	ИначеЕсли (мОтчетФССУтратаТрудосп.Области.П21200.Значение >0) Тогда
		мОтчетФССУтратаТрудосп.Области.ПVI_1.Значение = мОтчетФССУтратаТрудосп.Области.П21200.Значение;     
	КонецЕсли; 
		
	//Вместе затрат (р. 7 + р. 10 + р. 11) (****)
	//**** равно строке 14 таблиці III.
	мОтчетФССУтратаТрудосп.Области.П12_4.Значение = мОтчетФССУтратаТрудосп.Области.П21400.Значение;
	
	//Задолженность на конец отчетного периода (*****), в т.ч. :
	//***** равнество строке  17 таблиці III.
	мОтчетФССУтратаТрудосп.Области.П21700.Значение = мОтчетФССУтратаТрудосп.Области.ПV_1.Значение 
	                                               + мОтчетФССУтратаТрудосп.Области.ПV_2.Значение 
												   + мОтчетФССУтратаТрудосп.Области.ПV_3.Значение 
												   + мОтчетФССУтратаТрудосп.Области.ПV_4.Значение;
	
	Модифицированность = Истина;

КонецПроцедуры // ЗаполнитьАвто()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетФССУтратаТрудосп";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вычисляется автоматически';uk='Значення обчислюється автоматично'");
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");
		КонецЕсли;

		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Печатать сразу';uk='Друкувати відразу'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Показать бланк';uk='Показати бланк'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЛинияСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЛинияПусто = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);

	мМассивТиповЛиний = Новый Массив();
	мМассивТиповЛиний.Вставить(0, ЛинияПусто);
	мМассивТиповЛиний.Вставить(1, ЛинияСнизу);

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	Перем ИсходноеКоличествоСтрокГруппы;

	ЭтаФорма.АвтоЗаголовок = Ложь;

	мОтчетФССУтратаТрудосп = ЭлементыФормы.ПолеТабличногоДокументаОтчетФССУтратаТрудосп;
	ТекТабличноеПоле = мОтчетФССУтратаТрудосп;
	
	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
			УстановитьФорматВывода();
			ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
			
		 КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();
	мОтчетФССУтратаТрудосп.ТолькоПросмотр = Истина;

	ЗаполнитьСведенияОбОрганизации();

	УстановитьЦветФонаЯчейки(,,"ОтчетФССУтратаТрудосп");

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность = Истина Тогда

		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения ?';uk='Дані були змінені. Зберегти зміни ?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;

			мСохраненныйДок.Записать();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	// Заглушка
	//ЗаполнитьДемо();
	
	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;
	

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

//	мОтчетФССУтратаТрудосп.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаОтчетФССУтратаТрудоспПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаОтчетФССУтратаТрудоспПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа.
//   Устанавливает признак модифицированности данных в форме, вызывает пересчет
// вычисляемых показателей  табличных полей и обновляет структуру данных
// многострочного раздела.
//
Процедура ПолеТабличногоДокументаОтчетФССУтратаТрудоспПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	Расчет();
	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаФССУтратаТрудоспПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
// только в гривнях
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       НСтр("ru='в гривнях';uk='у гривнях'"));


// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетФССУтратаТрудосп.СписокВыбора.Добавить(1, НСтр("ru='не заполнять автоматически';uk='не заповнювати автоматично'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетФССУтратаТрудосп.СписокВыбора.Добавить(2, НСтр("ru='заполнять автоматически с корректировкой';uk='заповнювати автоматично з коригуванням'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетФССУтратаТрудосп.СписокВыбора.Добавить(3, НСтр("ru='заполнять автоматически без корректировки';uk='заповнювати автоматично без коригування'"));

ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

мСоставПоказателей = "СоставПоказателей";

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
мВерсияФормы = "01/01/2005";

мПечатныеФормы = Новый СписокЗначений;
