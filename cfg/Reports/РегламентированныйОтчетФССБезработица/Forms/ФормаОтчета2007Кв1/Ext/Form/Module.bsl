////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
//каждая закладка отчета - это объект ПолеТабличногоДокумента
Перем мОтчетФССБезработица;

Перем мСоставПоказателей Экспорт;

// переменный для хранения бухгалтерских итогов
Перем мБухИтоги, мБухИтогиРС;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы;

//вспомогательные переменные
Перем СуммаВыплаты;

Перем СтрокиДекларации, МассивСтатей, МассивПрефиксов, МассивПоВзносамНачислПеречисл;

Перем СчетФСС,РасчСчет1, РасчСчет2, СчетЗП, СчетПФ, МассивСчетов,МассивСубконто;

Перем мПечатныеФормы Экспорт;

Перем Счет661, СчетФССНесч, СчетРасчСчет1, СчетРасчСчет2;

Перем НужныйВидСбора;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция округляет значение ССЧ согласно новым правилам: Наказ Державного комітету статистики України від 28 вересня 2005 року N 286 
// Параметры:
//  Значение - исходное значение ССЧ
//
// Возвращаемое значение:
//  значение ССЧ, округленное по утвержденному правилу.
//
Функция ОкруглитьССЧ(Значение)
	ССЧ = Значение;
	ССЧ = Строка(ССЧ);
	Позиция = Найти(ССЧ, ",");
	ЦелаяЧасть = Лев(ССЧ, Позиция-1);
	
	Если Позиция = 0 Тогда
		ОкругленноеССЧ = Значение;
	Иначе
		ПоследняяЦифраЦелойЧасти = Сред(ССЧ,Позиция-1, 1);

		Если Число(Сред(ССЧ, Позиция+1, 1)) >= 6 Тогда
			ОкругленноеССЧ = Число(ЦелаяЧасть)+1;
		ИначеЕсли Число(Сред(ССЧ, Позиция+1, 1)) <= 4 Тогда
			ОкругленноеССЧ = Число(ЦелаяЧасть);
		ИначеЕсли Число(Сред(ССЧ, Позиция+1, 1)) = 5 Тогда
			Если   Число(ПоследняяЦифраЦелойЧасти) = 2
			   ИЛИ Число(ПоследняяЦифраЦелойЧасти) = 4
			   ИЛИ Число(ПоследняяЦифраЦелойЧасти) = 6
			   ИЛИ Число(ПоследняяЦифраЦелойЧасти) = 8 Тогда
			   	ОкругленноеССЧ = Число(ЦелаяЧасть)+1;
			Иначе
				ОкругленноеССЧ = Число(ЦелаяЧасть);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОкругленноеССЧ;
КонецФункции


// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураПоказателейВнутрСвязи = Новый Структура;

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		Если Тип ("РисунокТабличногоДокумента") <> ТипЗнч (ТекущаяОбласть) Тогда
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//Проверяется условие не является ли ТекущаяОбласть многоячеечной областью для вывода 
		//документа на печать. Если является - то следующую проверку выполнять не нужно
		Если (ТекущаяОбласть.Имя = "Область1" ИЛИ ТекущаяОбласть.Имя = "Область2") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2007Кв1");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2007Кв1");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий параметры автозаполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки параметров автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии формы для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя, а в текущей - отключено.
							// В этом случае удаляем ячейку из таблицы пользовательских настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Процедура управляет показом в форме периода построения отчета,
Процедура ПоказатьПериод()
	

	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	
	мОтчетФССБезработица.Области.ДеньДаты.Значение 	= ЧастиДатыПодписи.День;
	мОтчетФССБезработица.Области.МесяцДаты.Значение = ЧастиДатыПодписи.Месяц;
	мОтчетФССБезработица.Области.ГодДаты.Значение 	= ЧастиДатыПодписи.ПоследняяЦифраГода;
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоГода(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "Л = uk_UA; ФП = Истина" );
// Период в заголовке отчета
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
    мОтчетФССБезработица.Области.ПериодОтчета.Значение = "за  " +  СтрПериодОтчета;
	
КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
// пока не прописаны коды - вернуться
Процедура ЗаполнитьСведенияОбОрганизации()
    	
	ОргНазв = Организация.НаименованиеПолное;

	мОтчетФССБезработица.Области.ОргНазв.Значение = ОргНазв;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","КодЗКГНГ");
	СписокПоказателей.Добавить("","КодКВЕД");
	СписокПоказателей.Добавить("","НомерФССБезработица");
  
	ФИОДиректора  = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФИОРук;
	ФИОГлавБуха   = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).ФИОБух;
	КодЕДРПОУ     = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодПоЕДРПОУ;
	КодЗКГНГ      = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодЗКГНГ;
	КодКВЕД       = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодКВЕД;

	НомерФССБезработица = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).НомерФССБезработица;
	
	мОтчетФССБезработица.Области.КодЕДРПОУ.Значение = КодЕДРПОУ; 
	мОтчетФССБезработица.Области.КодЗКГНГ.Значение  = КодЗКГНГ; 
	мОтчетФССБезработица.Области.КодКВЕД.Значение   = КодКВЕД; 
	мОтчетФССБезработица.Области.НомерРегистрацииБезработица.Значение = НомерФССБезработица;
  
    мОтчетФССБезработица.Области.ОргБухгалтер.Значение = ФИОГлавБуха; 
	мОтчетФССБезработица.Области.ОргДиректор.Значение = ФИОДиректора;
	
	мОтчетФССБезработица.Области.Адрес.Значение = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
	мОтчетФССБезработица.Области.Телефон.Значение = УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	
	ДопСведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, мДатаНачалапериодаОтчета, "uk");
	мОтчетФССБезработица.Области.РС.Значение     = ДопСведенияОбОрганизации.НомерСчета;
	мОтчетФССБезработица.Области.Банк.Значение   = ДопСведенияОбОрганизации.Банк;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(НСтр("ru='Отчет в ФСС на случай безработицы: при выводе сумм в гривнях точность не может превышать 2 знака';uk='Звіт у ФСС від тимчасової втрати працездатності: при виведенні сум у гривнях точність не може перевищувати 2 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	КонецЕсли;

	Сообщить(НСтр("ru='После изменения формата вывода значений, для корректного расчета итогов необходимо перезаполнить отчет!';uk='Після зміни формату виводу значень, для корректного розрахунку підсумків треба перезаполвнити звіт!'"), СтатусСообщения.Внимание);	
	
КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";

	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "ОтчетФССБезработица";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()


// Обновляет пользовательские настройки при изменении версии формы.
// унифицирована, однако использование пока ... вопрос
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить(НСтр("ru='Измененилась версия формы отчета."
"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
"Виконується відновлення користувальницьких настройок.'"), СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	Если ЕстьИзмененияВариантыЗаполнения Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить(НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Оновлення користувальницьких настройок успішно завершене!'"));

	Иначе

		Сообщить(НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі користувальницьких настройок не виявлені!'"));

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()


// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетФССБезработица";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетФССБезработица";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетФССБезработица";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет();
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		
		// Очищаем комментарий редактируемой ячейки
		ТекущаяОбласть.Примечание.Текст = "";

	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетФССБезработица";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетФССБезработица";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя)

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("ОтчетФССБезработица");
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	мОтчетФССБезработица.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()
// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Тип ("РисунокТабличногоДокумента") = ТипЗнч (ТекущаяОбласть) Тогда
			ТекущаяОбласть.Значение = ""; 
		Иначе	
			
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ТекущаяОбласть.СодержитЗначение Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяОбласть.Очистить();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить()

	// Очищаем содержимое ячеек поля табличного документа
	ТекТабличноеПоле = мОтчетФССБезработица;
	ОчиститьТабличноеПоле(ТекТабличноеПоле);

	// Выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	
	Расчет();

	//заполним сведения об организации 
	
	ЗаполнитьСведенияОбОрганизации();
	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

КонецПроцедуры // Очистить()

Процедура РазбитьПечатнуюФорму(ПечФорма)
	
	ИмяФормы = "ОтчетФССБезработица";
	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = Истина;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	
	Для Сч = 1 По ПечФорма.ВысотаТаблицы Цикл
		
		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		НовТаблДок = Новый ТабличныйДокумент();
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = Истина;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати)
    мПечатныеФормы.Очистить();
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ОбластьПечати = мОтчетФССБезработица.ПолучитьОбласть("Шапка");
	ПечатнаяФорма.Вывести(ОбластьПечати);


	ОбластьПечати = мОтчетФССБезработица.ПолучитьОбласть("Отчет");
	ПечатнаяФорма.Вывести(ОбластьПечати);
	
	ОбластьПечати = мОтчетФССБезработица.ПолучитьОбласть("Подвал");
	ПечатнаяФорма.Вывести(ОбластьПечати);


	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;

//	Если ВидПечати = "ПоказатьБланк" Тогда
//		ПечатнаяФорма.Показать(СокрП(ЭтаФорма.Заголовок));
//	ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
//		ПечатнаяФорма.Напечатать();
//	КонецЕсли;

	РазбитьПечатнуюФорму(ПечатнаяФорма);
	
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()


// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция  Сохранить() Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;

	
	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.

		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;

		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();

	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаОтчетФССБезработица";
	
	ТекТабличноеПоле        = мОтчетФССБезработица;

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	Модифицированность = Ложь;

	Возврат Истина;
	
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	// восстанавливаем реквизиты отчета
	Организация              = мСохраненныйДок.Организация;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;

	ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	УстановитьФорматВывода();
	Расчет();

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()
	//ІI. Нарахована сума фактичних витрат на оплату праці найманих працівників та 
	//оподаткованого доходу (прибутку), з якої справляються страхові внески, (за розміром 
	//внесків)
	//За звітний квартал
	//1. Загальна сума виплат, на які нараховуються страхові внески  (в грн.)
	//І квартал (за місяцями)
	мОтчетФССБезработица.Области.П15_1Кв.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П15_мес1.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П15_мес2.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П15_мес3.Значение);
													
	мОтчетФССБезработица.Области.П05_1Кв.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П05_мес1.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П05_мес2.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П05_мес3.Значение);
													
	//II квартал (за місяцями) 
	
	мОтчетФССБезработица.Области.П15_2Кв.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П15_мес4.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П15_мес5.Значение) 
										          + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П15_мес6.Значение);
													
	мОтчетФССБезработица.Области.П05_2Кв.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П05_мес4.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П05_мес5.Значение) 
										          + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П05_мес6.Значение);

	//III квартал (за місяцями)     
	мОтчетФССБезработица.Области.П15_3Кв.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П15_мес7.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П15_мес8.Значение) 
								                  + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П15_мес9.Значение); 
												  
	мОтчетФССБезработица.Области.П05_3Кв.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П05_мес7.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П05_мес8.Значение) 
								                  + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П05_мес9.Значение); 

	//IV квартал (за місяцями)       
	мОтчетФССБезработица.Области.П15_4Кв.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П15_мес10.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П15_мес11.Значение) 
												  + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П15_мес12.Значение); 
												  
	мОтчетФССБезработица.Области.П05_4Кв.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П05_мес10.Значение) 
	                                              + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П05_мес11.Значение) 
												  + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П05_мес12.Значение); 
												
													
	//Усього з початку року
	мОтчетФССБезработица.Области.П150.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П15_1Кв.Значение) 
                                               + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П15_2Кв.Значение) 
											   + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П15_3Кв.Значение) 
  											   + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П15_4Кв.Значение);
											   
	мОтчетФССБезработица.Области.П05.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П05_1Кв.Значение) 
                                              + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П05_2Кв.Значение) 
											  + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П05_3Кв.Значение) 
  											  + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П05_4Кв.Значение);
											  
	//Нараховано

	мОтчетФССБезработица.Области.Нар15.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.Н1Нар15.Значение) 
	                                            + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.Н2Нар15.Значение)    
	                                            + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.Н3Нар15.Значение); 
	
	мОтчетФССБезработица.Области.ВсегоНар15.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.ПочНар15.Значение) 
	                                                 + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.Нар15.Значение); 
	
	мОтчетФССБезработица.Области.Нар05.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.Н1Нар05.Значение) 
	                                            + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.Н2Нар05.Значение)    
	                                            + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.Н3Нар05.Значение); 
	
	мОтчетФССБезработица.Области.ВсегоНар05.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.ПочНар05.Значение) 
	                                                 + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.Нар05.Значение); 
	
	//Перераховано                                                                                                                        
	
	мОтчетФССБезработица.Области.Пер15.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.Н1Пер15.Значение) 
	                                            + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.Н2Пер15.Значение)    
	                                            + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.Н3Пер15.Значение); 
	
	мОтчетФССБезработица.Области.ВсегоПер15.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.ПочПер15.Значение) 
	                                                 + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.Пер15.Значение); 
	
	
	мОтчетФССБезработица.Области.Пер05.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.Н1Пер05.Значение) 
	                                            + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.Н2Пер05.Значение)    
	                                            + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.Н3Пер05.Значение); 
	
	мОтчетФССБезработица.Области.ВсегоПер05.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.ПочПер05.Значение) 
	                                                 + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.Пер05.Значение); 
													 
	мОтчетФССБезработица.Области.П2.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.ВсегоНар15.Значение) 
                                             + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.ВсегоНар05.Значение);                                                                                                                                  
										  
											  
	//Нараховано за актами за звітний період та пеня, самостійно нарахована платником, усього 
	//(сума рядків 5 - 8)  
	мОтчетФССБезработица.Области.П4.Значение = мОтчетФССБезработица.Области.П5.Значение 
	                                         + мОтчетФССБезработица.Области.П6.Значение 
	                                         + мОтчетФССБезработица.Области.П7.Значение  
											 + мОтчетФССБезработица.Области.П8.Значение;

	//УСЬОГО до сплати (1 + 2 + 3 + 4 - 9 - 10) 
	мОтчетФССБезработица.Области.П11.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П1.Значение)
	                                          + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П2.Значение)
	                                          + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П3.Значение)
	                                          + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П4.Значение)
	                                          - ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П9.Значение)
	                                          - ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П10.Значение);		 		

	мОтчетФССБезработица.Области.П14.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.ВсегоПер15.Значение) 
	                                          + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.ВсегоПер05.Значение);    
											  
	//Перераховано за актами за звітний період та пеня, самостійно нарахована платником, усього 
	//(сума рядків 16 - 18) 
	мОтчетФССБезработица.Области.П15.Значение = мОтчетФССБезработица.Области.П16.Значение 
	                                          + мОтчетФССБезработица.Области.П17.Значение 
	                                          + мОтчетФССБезработица.Области.П18.Значение;

	//УСЬОГО враховано і сплачено (рядки 13 + 14 + 15 - 19)
	мОтчетФССБезработица.Области.П20.Значение = ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П13.Значение)
	                                          + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П14.Значение)
	                                          + ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П15.Значение) 
	                                          - ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П19.Значение);            

	//Залишок заборгованості на кінець звітного періоду за платниками
	мОтчетФССБезработица.Области.П21.Значение = Макс(0,ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П11.Значение) 
	                                          - ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П20.Значение));

	//сума зборів, строк сплати яких не настав
	мОтчетФССБезработица.Области.П25.Значение = мОтчетФССБезработица.Области.П21.Значение; 	
	
	//Залишок заборгованості на кінець звітного періоду за Фондом
	мОтчетФССБезработица.Области.П12.Значение = Макс(0,ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П20.Значение) 
	                                          - ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П11.Значение));

	
	
	П11_I = 	ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П11_мес1.Значение + мОтчетФССБезработица.Области.П11_мес2.Значение + мОтчетФССБезработица.Области.П11_мес3.Значение);
	П11_II =    ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П11_мес4.Значение + мОтчетФССБезработица.Области.П11_мес5.Значение + мОтчетФССБезработица.Области.П11_мес6.Значение);
	П11_III = 	ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П11_мес7.Значение + мОтчетФССБезработица.Области.П11_мес8.Значение + мОтчетФССБезработица.Области.П11_мес9.Значение);
	П11_IV =    ОкруглитьЧислоПоФормату(мОтчетФССБезработица.Области.П11_мес10.Значение + мОтчетФССБезработица.Области.П11_мес11.Значение + мОтчетФССБезработица.Области.П11_мес12.Значение);
	П_11 =      ОкруглитьЧислоПоФормату(П11_I + П11_II + П11_III + П11_IV);
	
	мОтчетФССБезработица.Области.П11_I.Значение = П11_I;
	мОтчетФССБезработица.Области.П11_II.Значение = П11_II;
	мОтчетФССБезработица.Области.П11_III.Значение = П11_III;
	мОтчетФССБезработица.Области.П11_IV.Значение = П11_IV;
	мОтчетФССБезработица.Области.П_11.Значение = П_11;
	
КонецПроцедуры // Расчет()

//процедура записывает наименования месяцев в соответствующие ячекйки
Процедура ПрописатьМесяц(мес,имяЯч1,имяЯч2);
	
	МесяцСтр = Формат(мес, "ДФ = 'ММММ';Л = uk_UA");
	УстановитьЗначениеПоказателя(ИмяЯч1, МесяцСтр);
	ИмяЯч = "" + имяЯч2;
	УстановитьЗначениеПоказателя(ИмяЯч2,МесяцСтр);
	
КонецПроцедуры

//процедура выполняет инициализацию переменных
Процедура ВыполнитьИнициализацию()
	
	СтрокиДекларации = Справочники.СтатьиНалоговыхДеклараций;

	МассивСтатей = Новый Массив;  

	МассивСтатей.Добавить(СтрокиДекларации.ФССБезработ_Орг);
	МассивСтатей.Добавить(СтрокиДекларации.ФССБезработ_Сотр);
	
	МассивПрефиксов = Новый Массив;  

	МассивПрефиксов.Добавить("П15_");
	МассивПрефиксов.Добавить("П05_");
	
	//массив для хранения сумм начисленных взносов уже не в разрезе ставок (общей суммой)
	//отдельно для каждого месяца отчетного квартала,а также на начало квартала
	МассивПоВзносамНачислПеречисл  = Новый Массив(2,4);
	
	Для i = 0 по МассивПоВзносамНачислПеречисл.Количество() - 1 Цикл
		Для j = 0 по 3 Цикл	
			МассивПоВзносамНачислПеречисл[i][j] = 0;	
		КонецЦикла;
	КонецЦикла;
	
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") или (РегламентированнаяОтчетность.ИДКонфигурации() = "БП") Тогда
		ПС = ПланыСчетов["Хозрасчетный"];
		СчетФСС       = ПС.РасчетыПоСтрахованиюНаСлучайБезработицы;
		РасчСчет1     = ПС.ТекущиеСчетаВНациональнойВалюте;
		РасчСчет2     = ПС.ДругиеСчетаВБанкеВНациональнойВалюте;
		СчетЗП        = ПС.РасчетыПоЗаработнойПлате;
		СчетПФ        = ПС.РасчетыПоПенсионномуОбеспечению;
		
		МассивСчетов = Новый Массив;
		МассивСчетов.Добавить(РасчСчет1);
		МассивСчетов.Добавить(РасчСчет2);
		
		МассивСубконто = Новый Массив;
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Налоги);
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций);
	КонецЕсли;
КонецПроцедуры

Процедура  РассчитатьСуммыСтраховыхВзносов()
	ПочНар15 = 0; ПочНар05 = 0;
	ПочПер15 = 0; ПочПер05 = 0;
	
	Если  (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") или (РегламентированнаяОтчетность.ИДКонфигурации() = "БП") Тогда
		мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();
		ИтогиРС = "ОборотДт, ОборотКт,КорОборотДт, КорОборотКт";
		
		МассивСубконто = Новый Массив;
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Налоги);
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций); 
		
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Период,Счет,Субконто1,Субконто2,КорСчет", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,"Месяц", "653",МассивСубконто,МассивСчетов,, "Организация", Организация);
		
			
		Для НомМес = Месяц (НачалоГода(мДатаНачалаПериодаОтчета)) по Месяц(мДатаКонцаПериодаОтчета) Цикл
			мес = НачалоМесяца( ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), НомМес - 1));
			i = 0;
			Для каждого НужнаяСтатья из МассивСтатей Цикл	
				//начислено на начало периода
				Если Месяц(мес) < Месяц(мДатаНачалаПериодаОтчета) Тогда 
					Если (i = 0) Тогда
						ПочНар15 = ПочНар15 + мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Период,Счет,Субконто2",мес, СчетФСС, НужнаяСтатья);
						ПочПер15 = ПочПер15 + мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто2,КорСчет",мес, СчетФСС, НужнаяСтатья,РасчСчет1)
						+ мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто2,КорСчет",мес, СчетФСС, НужнаяСтатья,РасчСчет2);
						
					Иначе					
						ПочПер05 = ПочПер05 + мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто2,КорСчет",мес, СчетФСС,НужнаяСтатья,РасчСчет1)
						+ мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто2,КорСчет",мес, СчетФСС, НужнаяСтатья,РасчСчет2);
						ПочНар05 = ПочНар05 + мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Период,Счет,Субконто2",мес, СчетФСС, НужнаяСтатья);
					КонецЕсли;
					//первый месяц	
				ИначеЕсли Месяц(мес) = Месяц(мДатаНачалаПериодаОтчета) Тогда
					Если (i = 0) Тогда
						Н1Нар15 = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Период,Счет,Субконто2",мес, СчетФСС, НужнаяСтатья);
						Н1Пер15 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто2,КорСчет",мес, СчетФСС, НужнаяСтатья,РасчСчет1)
						+ мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто2,КорСчет",мес, СчетФСС, НужнаяСтатья,РасчСчет2);
					Иначе
						Н1Нар05 = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Период,Счет,Субконто2",мес, СчетФСС, НужнаяСтатья);
						Н1Пер05 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто2,КорСчет",мес, СчетФСС, НужнаяСтатья,РасчСчет1)
						+ мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто2,КорСчет",мес, СчетФСС, НужнаяСтатья,РасчСчет2);
					КонецЕсли;
					
					ПрописатьМесяц(мес,"Пм1","Пмес1");
					
					//третий месяц	
				ИначеЕсли Месяц(мес) = Месяц(мДатаКонцаПериодаОтчета)	 Тогда
					Если (i = 0) Тогда
						Н3Нар15 = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Период,Счет,Субконто2",мес, СчетФСС, НужнаяСтатья);
						Н3Пер15 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто2,КорСчет",мес, СчетФСС, НужнаяСтатья,РасчСчет1)
						+ мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто2,КорСчет",мес, СчетФСС, НужнаяСтатья,РасчСчет2);
					Иначе	
						Н3Нар05 = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Период,Счет,Субконто2",мес, СчетФСС, НужнаяСтатья);
						Н3Пер05 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто2,КорСчет",мес, СчетФСС, НужнаяСтатья,РасчСчет1)
						+ мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто2,КорСчет",мес, СчетФСС, НужнаяСтатья,РасчСчет2);
					КонецЕсли;
					
					ПрописатьМесяц(мес,"Пм3","Пмес3");
					
					//второй месяц	
				Иначе	
					Если (i = 0) Тогда
						Н2Нар15 = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Период,Счет,Субконто2",мес, СчетФСС, НужнаяСтатья);
						Н2Пер15 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто2,КорСчет",мес, СчетФСС, НужнаяСтатья,РасчСчет1)
						+ мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто2,КорСчет",мес, СчетФСС, НужнаяСтатья,РасчСчет2);
					Иначе
						Н2Нар05 = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Период,Счет,Субконто2",мес, СчетФСС, НужнаяСтатья);
						Н2Пер05 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто2,КорСчет",мес, СчетФСС, НужнаяСтатья,РасчСчет1)
						+ мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Период,Счет,Субконто2,КорСчет",мес, СчетФСС, НужнаяСтатья,РасчСчет2);
					КонецЕсли;	
					
					ПрописатьМесяц(мес,"Пм2","Пмес2");
					
				КонецЕсли;	
				i = i + 1;	
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		НужныйВидСбора   = Справочники.Налоги.БезработицаФОТ;
		ЗапросНачислено = Новый Запрос;
		Если НЕ РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда 
			ЗапросНачислено.Текст = "
			|ВЫБРАТЬ
			|	ВзаимоРасчеты.ПериодВзаиморасчетов КАК НалоговыйПериод,
			|	ВзаимоРасчеты.СтатьяНалоговойДекларации,
			|	ВзаимоРасчеты.РезультатПриход КАК Начислено,
			|	ВзаимоРасчеты.РезультатРасход КАК УплаченоПодтверждено
			|	
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Обороты(&Начало, &Конец, КВАРТАЛ, СтатьяНалоговойДекларации В (&МассивСтатей) И Организация = &Организация) КАК ВзаимоРасчеты	
			|";
		Иначе 
			ЗапросНачислено.Текст = "
			|ВЫБРАТЬ
			|	НалоговыйПериод,
			|	СтатьяНалоговойДекларации,
			|	РезультатПриход КАК Начислено,
			|	РезультатРасход КАК УплаченоПодтверждено
			|	
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Обороты(&Начало, &Конец, КВАРТАЛ, СтатьяНалоговойДекларации В (&МассивСтатей) И Организация = &Организация)	
			|";
			
		КонецЕсли; 
		
		ЗапросНачислено.УстановитьПараметр("Начало", НачалоГода(мДатаНачалаПериодаОтчета));
		ЗапросНачислено.УстановитьПараметр("Конец" , мДатаКонцаПериодаОтчета);
		ЗапросНачислено.УстановитьПараметр("МассивСтатей", МассивСтатей);
		ЗапросНачислено.УстановитьПараметр("Организация", Организация);
		
		Результат = ЗапросНачислено.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			//мес = НачалоМесяца( ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), НомМес - 1));
			i = 0;
			//первый месяц	
			Если Месяц(Результат.НалоговыйПериод) = Месяц(мДатаНачалаПериодаОтчета) Тогда
				Если (Результат.СтатьяНалоговойДекларации = МассивСтатей[0]) Тогда
					Н1Нар15 = Результат.Начислено;
					Н1Пер15 = Результат.УплаченоПодтверждено;
				Иначе
					Н1Нар05 = Результат.Начислено;
					Н1Пер05 = Результат.УплаченоПодтверждено;
				КонецЕсли;
				
				ПрописатьМесяц(Результат.НалоговыйПериод,"Пм1","Пмес1");
				
				//третий месяц	
			ИначеЕсли Месяц(Результат.НалоговыйПериод) = Месяц(мДатаКонцаПериодаОтчета)	 Тогда
				Если (Результат.СтатьяНалоговойДекларации = МассивСтатей[0]) Тогда
					Н3Нар15 = Результат.Начислено;
					Н3Пер15 = Результат.УплаченоПодтверждено;
				Иначе	
					Н3Нар05 = Результат.Начислено;
					Н3Пер05 = Результат.УплаченоПодтверждено;
				КонецЕсли;
				
				ПрописатьМесяц(Результат.НалоговыйПериод,"Пм2","Пмес2");
				
				//второй месяц	
			ИначеЕсли Месяц(Результат.НалоговыйПериод) = Месяц(ДобавитьМесяц(мДатаКонцаПериодаОтчета,-1))	 Тогда	
				Если (Результат.СтатьяНалоговойДекларации = МассивСтатей[0]) Тогда
					Н2Нар15 = Результат.Начислено;
					Н2Пер15 = Результат.УплаченоПодтверждено;
				Иначе
					Н2Нар05 = Результат.Начислено;
					Н2Пер05 = Результат.УплаченоПодтверждено;
				КонецЕсли;	
				
				ПрописатьМесяц(Результат.НалоговыйПериод,"Пм3","Пмес3");
				
			ИначеЕсли Месяц(Результат.НалоговыйПериод) < Месяц(мДатаНачалаПериодаОтчета) Тогда	
				
				Если (Результат.СтатьяНалоговойДекларации = МассивСтатей[0]) Тогда
					ПочНар15 = ПочНар15 + Результат.Начислено;
					ПочПер15 = ПочПер15 + Результат.УплаченоПодтверждено;
					
				Иначе					
					ПочПер05 = ПочНар05 + Результат.Начислено;
					ПочНар05 = ПочПер05 + Результат.УплаченоПодтверждено;
				КонецЕсли;
				
			КонецЕсли;	
			i = i + 1;	
			
		КонецЦикла;
	КонецЕсли;

	УстановитьЗначениеПоказателя("ПочНар15", ПочНар15);
	УстановитьЗначениеПоказателя("ПочПер15", ПочПер15);
	
	УстановитьЗначениеПоказателя("ПочНар05", ПочНар05);
	УстановитьЗначениеПоказателя("ПочПер05", ПочПер05);
	
	УстановитьЗначениеПоказателя("Н1Нар15",Н1Нар15);
	УстановитьЗначениеПоказателя("Н1Пер15",Н1Пер15);
	УстановитьЗначениеПоказателя("Н1Нар05",Н1Нар05);
	УстановитьЗначениеПоказателя("Н1Пер05",Н1Пер05);

	УстановитьЗначениеПоказателя("Н2Нар15",Н2Нар15);
	УстановитьЗначениеПоказателя("Н2Пер15",Н2Пер15);
	УстановитьЗначениеПоказателя("Н2Нар05",Н2Нар05);
	УстановитьЗначениеПоказателя("Н2Пер05",Н2Пер05);
	
	УстановитьЗначениеПоказателя("Н3Нар15",Н3Нар15);
	УстановитьЗначениеПоказателя("Н3Пер15",Н3Пер15);
	УстановитьЗначениеПоказателя("Н3Нар05",Н3Нар05);
	УстановитьЗначениеПоказателя("Н3Пер05",Н3Пер05);

	
КонецПроцедуры	

Процедура РассчитатьСуммыПоПрочимВзаиморасчетамСФондом()
	Если  (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") или (РегламентированнаяОтчетность.ИДКонфигурации() = "БП") Тогда
		мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
		Итоги = "НачальныйОстатокДт,НачальныйОстатокКт,КонечныйОстатокДт,КонечныйОстатокКт,ОборотДт, ОборотКт";
		МассивСубконто = Новый Массив;
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Налоги);
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций); 
		
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Период,Счет,Субконто1,Субконто2", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,,"653",МассивСубконто,,, "Организация", Организация);
		
		//теперь обороты только за весь период в целом и, как правило, только по второму субконто
		//доначисленные суммы взносов при принятии отчетности
		НужнаяСтатья = СтрокиДекларации.ФССБезработ_ДоначислСамост;
		ИтогКт = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет,Субконто2",СчетФСС,НужнаяСтатья);
		УстановитьЗначениеПоказателя("П3", ИтогКт);
		
		П16 = 0;
		ИтогДт = мБухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФСС,НужнаяСтатья);
		УстановитьЗначениеПоказателя("П16", ИтогДт);
		
		
		//доначисленные суммы взносов по актам
		НужнаяСтатья = СтрокиДекларации.ФССБезработ_ДоначислАкт;
		ИтогКт = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет,Субконто2",СчетФСС,НужнаяСтатья);
		УстановитьЗначениеПоказателя("П5", ИтогКт);
		
		ИтогДт = мБухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2",СчетФСС,НужнаяСтатья);
		П16 = П16 + ИтогДт;
		
		УстановитьЗначениеПоказателя("П16", ИтогДт);
		
		//пеня
		НужнаяСтатья = СтрокиДекларации.ФССБезработ_Пеня;
		ИтогКт = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет,Субконто2",СчетФСС,НужнаяСтатья);
		УстановитьЗначениеПоказателя("П6", ИтогКт);	
		
		ИтогДт = мБухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2", СчетФСС,НужнаяСтатья);
		УстановитьЗначениеПоказателя("П17", ИтогДт);
		
		//штраф
		НужнаяСтатья = СтрокиДекларации.ФССБезработ_Штраф;
		ИтогКт = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет,Субконто2",СчетФСС,НужнаяСтатья);
		УстановитьЗначениеПоказателя("П7", ИтогКт);	
		
		ИтогДт = мБухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет,Субконто2", СчетФСС,НужнаяСтатья);
		УстановитьЗначениеПоказателя("П18", ИтогДт);
		
	КонецЕсли;	
КонецПроцедуры	

Процедура РассчитатьСуммыЗадолженностей()
	П1 	= 0;
	П13 = 0;
	
	Если  (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") или (РегламентированнаяОтчетность.ИДКонфигурации() = "БП") Тогда
		
		мБухИтогиОст = Обработки.БухгалтерскиеИтоги.Создать();
		Итоги = "НачальныйОстатокДт,НачальныйОстатокКт,КонечныйОстатокДт,КонечныйОстатокКт";
		мБухИтогиОст.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,,"65,66",,,, "Организация", Организация);
		
		//задолженность страховщика на начало года
		П1 = мБухИтогиОст.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет",СчетФСС);
		УстановитьЗначениеПоказателя("П1", П1);
		
		//задолженность фонда на начало года
		П13 = мБухИтогиОст.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет",СчетФСС);
		УстановитьЗначениеПоказателя("П13", П13);
		
		//задолженность по выплате заработной платы на начало года
		//Сума заборгованості з виплати заробітної плати на початок звітного періоду
		ЗапросСуммаЗадолжНачало = Новый Запрос ("
		|ВЫБРАТЬ
		| СУММА (ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток) КАК Результат
		|  ИЗ
		|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&НачДата,Организация = &Организация) КАК ВзаиморасчетыСРаботниками
		| ГДЕ
		| ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов <> &Декабрь  
		|");
		
		ЗапросСуммаЗадолжНачало.УстановитьПараметр("НачДата", НачалоГода(мДатаНачалаПериодаОтчета));
		ЗапросСуммаЗадолжНачало.УстановитьПараметр("Декабрь",ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета),-1));
		ЗапросСуммаЗадолжНачало.УстановитьПараметр("Организация",   Организация);
		РезультатЗапроса = ЗапросСуммаЗадолжНачало.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаРезультатовЗадолжЗПНач = РезультатЗапроса.Выгрузить();
		ПЗадолжЗПГод = ТаблицаРезультатовЗадолжЗПНач[0].Результат;
		УстановитьЗначениеПоказателя("ПЗадолжЗПГод", ПЗадолжЗПГод);
	КонецЕсли;

		
		
		РассчитатьСуммыЗадолженностиПоквартально();
	Иначе
		//запрос к регистру ВзаиморасчетыПоВзносамВФонды
		ЗапросЗадолженностиНаНачалоПериода = Новый Запрос;
		ЗапросЗадолженностиНаНачалоПериода.Текст = "
		|Выбрать
		|	Сумма(ВзаимоРасчеты.РезультатОстаток) КАК ЗадолженностьРезультат
		|
		|Из
		|	РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Остатки(&Период, СтатьяНалоговойДекларации В (&МассивСтатей) И Организация = &Организация) КАК ВзаимоРасчеты	
		|";
		
		ЗапросЗадолженностиНаНачалоПериода.УстановитьПараметр("Период", НачалоГода(мДатаНачалаПериодаОтчета));
		ЗапросЗадолженностиНаНачалоПериода.УстановитьПараметр("МассивСтатей", МассивСтатей);
		ЗапросЗадолженностиНаНачалоПериода.УстановитьПараметр("Организация",  Организация);
		
		Результат = ЗапросЗадолженностиНаНачалоПериода.Выполнить().Выбрать();
		
		П1 	= 0;
		П13 = 0;
		
		Если Результат.Следующий() Тогда
			Если  Результат.ЗадолженностьРезультат <> NULL Тогда
				Если (Результат.ЗадолженностьРезультат > 0) Тогда
					//задолженность страховщика на начало года		
					П1 = Результат.ЗадолженностьРезультат;		
					УстановитьЗначениеПоказателя("П1", П1);
				ИначеЕсли(Результат.ЗадолженностьРезультат < 0) Тогда
					//задолженность фонда на начало года
					П13 =  - Результат.ЗадолженностьРезультат; //мБухИтогиОст.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет",СчетФСС);
					УстановитьЗначениеПоказателя("П13", П13);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		//задолженность по выплате заработной платы на начало года
		ЗапросСуммаЗадолжНачало = Новый Запрос;
		ЗапросСуммаЗадолжНачало.Текст = "
		|ВЫБРАТЬ
		|	СУММА (ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток) КАК Результат
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&НачДата,Организация = &Организация) КАК ВзаиморасчетыСРаботниками 
		|";
		
		ЗапросСуммаЗадолжНачало.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
		ЗапросСуммаЗадолжНачало.УстановитьПараметр("Организация",   Организация);
		РезультатЗапроса = ЗапросСуммаЗадолжНачало.Выполнить().Выбрать();
		
		Пока РезультатЗапроса.Следующий() Цикл
			ПЗадолжЗПГод = РезультатЗапроса.Результат;
		КонецЦикла;
		УстановитьЗначениеПоказателя("ПЗадолжЗПГод", ПЗадолжЗПГод);
		
		РассчитатьСуммыЗадолженностиПоквартально();
	КонецЕсли;
	
	
КонецПроцедуры	


// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто() Экспорт

	////////
	// *** Здесь необходимо написать алгоритм заполнения отчета.***
	//
	// Для присвоения показателям отчета вычисленного значения необходимо
	// использовать процедуру
	//
	//     УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя).
	//
	////////
// Инициализация

    ВыполнитьИнициализацию();

    //Расчет показателей раздела 
	//1.Общая сумма взносов, на которые начисляются страховые взносы
	Если РегламентированнаяОтчетность.ИДКонфигурации() <> "УТП" Тогда   
		ТекстЗапроса = "
		
		|ВЫБРАТЬ  
		|	Основной.Месяц            				КАК Месяц,
		|	Основной.СтатьяНалоговойДекларации  	КАК СтатьяНалоговойДекларации,
		|	СУММА(Основной.БазаВзноса )  			КАК БазаВзноса,
		|	СУММА(ПоИнвалидам) 						КАК ПоИнвалидам
		|ИЗ
		|(
		|	ВЫБРАТЬ
		|		ВзаиморасчетыПоВзносам.ПериодВзаиморасчетов        			КАК Месяц,
		|		ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации  			КАК СтатьяНалоговойДекларации,
		|		СУММА(ВзаиморасчетыПоВзносам.БазаВзноса)  			        КАК БазаВзноса,
		|		ВЫБОР
		|			КОГДА Инвалиды.Инвалидность = Истина Тогда
		|				СУММА(ВзаиморасчетыПоВзносам.БазаВзноса)
		|			КОНЕЦ 													КАК ПоИнвалидам  
		|	ИЗ РегистрНакопления.ВзаиморасчетыПоВзносамВФонды КАК ВзаиморасчетыПоВзносам
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&КонДата) КАК Инвалиды
		|	 ПО Инвалиды.Физлицо = ВзаиморасчетыПоВзносам.Сотрудник.ФизЛицо
		|	 И Инвалиды.Период <= ВзаиморасчетыПоВзносам.ПериодВзаиморасчетов 
		|
		|	ГДЕ 
		|		ВзаиморасчетыПоВзносам.Организация = &парамОрганизация
		|       И ВзаиморасчетыПоВзносам.ВидДвижения = &ВидДвиженияПриход
		|		И ВЫБОР КОГДА ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации В (&МассивНужныхСтатей)  ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ
		|
		|
		|	СГРУППИРОВАТЬ ПО
		|		ВзаиморасчетыПоВзносам.ПериодВзаиморасчетов,
		|		ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации,
		|		Инвалиды.Инвалидность
		|)КАК ОСНОВНОЙ
		|
		|СГРУППИРОВАТЬ ПО
		|	Основной.Месяц,
		|	Основной.СтатьяНалоговойДекларации
		|";
	Иначе 
		ТекстЗапроса = "ВЫБРАТЬ  
		|	Основной.Месяц            				КАК Месяц,
		|	Основной.СтатьяНалоговойДекларации  	КАК СтатьяНалоговойДекларации,
		|	СУММА(Основной.БазаВзноса )  			КАК БазаВзноса,
		|	СУММА(ПоИнвалидам) 						КАК ПоИнвалидам
		|ИЗ
		|(
		|	ВЫБРАТЬ
		|		ВзаиморасчетыПоВзносам.НалоговыйПериод            			КАК Месяц,
		|		ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации  			КАК СтатьяНалоговойДекларации,
		|		СУММА(ВзаиморасчетыПоВзносам.БазаВзноса)  			        КАК БазаВзноса,
		|		ВЫБОР
		|			КОГДА Инвалиды.Инвалидность = Истина Тогда
		|				СУММА(ВзаиморасчетыПоВзносам.БазаВзноса)
		|			КОНЕЦ 													КАК ПоИнвалидам  
		|	ИЗ РегистрНакопления.ВзаиморасчетыПоВзносамВФонды КАК ВзаиморасчетыПоВзносам
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&КонДата) КАК Инвалиды
		|	 ПО Инвалиды.Физлицо = ВзаиморасчетыПоВзносам.ФизЛицо
		|	 И Инвалиды.Период <= ВзаиморасчетыПоВзносам.ПериодДействия 
		|
		|	ГДЕ 
		|		ВзаиморасчетыПоВзносам.Организация = &парамОрганизация
		|       И ВзаиморасчетыПоВзносам.ВидДвижения = &ВидДвиженияПриход
		|		И ВЫБОР КОГДА ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации В (&МассивНужныхСтатей)  ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ
		|
		|
		|	СГРУППИРОВАТЬ ПО
		|		ВзаиморасчетыПоВзносам.НалоговыйПериод,
		|		ВзаиморасчетыПоВзносам.СтатьяНалоговойДекларации,
		|		Инвалиды.Инвалидность
		|)КАК ОСНОВНОЙ
		|
		|СГРУППИРОВАТЬ ПО
		|	Основной.Месяц,
		|	Основной.СтатьяНалоговойДекларации
		|";    
		
	КонецЕсли ;
	Запрос = Новый Запрос ();
	Запрос.УстановитьПараметр("НачДата", НачалоГода(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонДата" ,мДатаКонцаПериодаОтчета);

	Запрос.УстановитьПараметр("МассивНужныхСтатей", МассивСтатей);
	Запрос.УстановитьПараметр("парамОрганизация",  Организация);
    Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
	
    //ищем структуру по месяцу и статье декларации
	Отбор = Новый Структура;
	i = 0;
	Для мес = Месяц (НачалоГода(мДатаНачалаПериодаОтчета)) по Месяц(мДатаКонцаПериодаОтчета) Цикл
		Отбор.Вставить("Месяц",ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета),i));
		j = 0;
		инд = i + 1; 
		Для каждого НужнаяСтатья из МассивСтатей Цикл
			Отбор.Вставить("СтатьяНалоговойДекларации",НужнаяСтатья);
			// результатом поиска всегда будет только одна строка, не массив
			НайденныеСтроки = ТаблицаРезультатов.НайтиСтроки (Отбор);
			Если (НайденныеСтроки.Количество() = 1 ) Тогда
				ИмяЯчейкиМес = МассивПрефиксов[j] + "Мес" + Строка(инд);			
				мОтчетФССБезработица.Области[ИмяЯчейкиМес].Значение = НайденныеСтроки[0].БазаВзноса;
				
				ИмяЯчейкиМес = "П11_" + "Мес" + Строка(инд);
				мОтчетФССБезработица.Области[ИмяЯчейкиМес].Значение = НайденныеСтроки[0].ПоИнвалидам;
			КонецЕсли;
			 j = j + 1;
		КонецЦикла;
		i = i + 1;
	КонецЦикла;
	
	//Расчет сумм страховых взносов
	РассчитатьСуммыСтраховыхВзносов();
	
	//показатели, расчет которых - это сальдо , то есть остаточные сущности
	//для них - расчет итогов - может быть выполнен только отдельно,
	//так как статьи налоговых деклараций - это оборотные сущности
	РассчитатьСуммыПоПрочимВзаиморасчетамСФондом();
	
	
	//показатели, расчет которых - это сальдо, то есть остаточные сущности
	//для них - расчет итогов - может быть выполнен только отдельно
	РассчитатьСуммыЗадолженностей();
	
	//3. Середньооблікова чисельність персоналу в еквіваленті повної зайнятості
	// разом за квартал
	// расчет среднесписочной численности в эквиваленте полной занятости
	Квартал = 1;
	НачДата = НачалоГода(мДатаНачалаПериодаОтчета);
	КонДата = ДобавитьМесяц(КонецМесяца(НачДата),2);
	ЧисленностьЭПЗ = Новый ТаблицаЗначений;
	ЧисленностьЭПЗ.Очистить();
	Пока Истина Цикл
		Если КонДата <= мДатаКонцаПериодаОтчета Тогда 
			ЧисленностьЭПЗ = ПроведениеРасчетов.ПолучитьСреднююЧисленность(НачДата, КонДата, "ССЧ", "КВАРТАЛ", Организация, "Штат");
			ИмяЯчейки = "ПСер"+Строка(Квартал)+"Кв";
			Для каждого стр  Из ЧисленностьЭПЗ Цикл
				//Округляем значение ССЧ по новым правилам округления: Наказ Державного комітету статистики України від 28 вересня 2005 року N 286 
   				стр.Средняя = ОкруглитьССЧ(стр.Средняя);
				УстановитьЗначениеПоказателя(ИмяЯчейки, стр.Средняя);
			КонецЦикла;
			Квартал = Квартал+1;
			НачДата = ДобавитьМесяц(НачДата,3);
			КонДата = ДобавитьМесяц(КонецМесяца(НачДата),2);
		Иначе
			прервать;
		КонецЕсли;
		
	КонецЦикла;
	//ТаблЧисленностиЭПЗ = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "ЭПЗ", "КВАРТАЛСНАЧАЛАГОДА", Организация, ""); 
	//ПрисвоитьЗначенияЯчейкам(ТаблЧисленностиЭПЗ,"ПСер");
	
	Квартал = 1;
	НачДата = НачалоГода(мДатаНачалаПериодаОтчета);
	КонДата = ДобавитьМесяц(КонецМесяца(НачДата),2);
	ЧисленностьЭПЗ.Очистить();
	Пока Истина Цикл
		Если КонДата <= мДатаКонцаПериодаОтчета Тогда
			ЧисленностьЭПЗ = ПроведениеРасчетов.ПолучитьСреднююЧисленность(НачДата, КонДата, "ССЧ", "КВАРТАЛ", Организация, "ПЕНСИОНЕРЫ");		
			ИмяЯчейки = "Пенс"+Строка(Квартал)+"Кв";
			Для каждого стр  Из ЧисленностьЭПЗ Цикл
				//Округляем значение ССЧ по новым правилам округления: Наказ Державного комітету статистики України від 28 вересня 2005 року N 286 
   				стр.Средняя = ОкруглитьССЧ(стр.Средняя);
				УстановитьЗначениеПоказателя(ИмяЯчейки, стр.Средняя);
			КонецЦикла;
			Квартал = Квартал+1;
			НачДата = ДобавитьМесяц(НачДата,3);
			КонДата = ДобавитьМесяц(КонецМесяца(НачДата),2);
		Иначе
			прервать;
		КонецЕсли;
		
	КонецЦикла;
	//ТаблЧисленностиПенс = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета,"ЭПЗ", "КВАРТАЛСНАЧАЛАГОДА", Организация, "Пенсионеры"); 
	//ПрисвоитьЗначенияЯчейкам(ТаблЧисленностиПенс,"Пенс");
	
	Квартал = 1;
	НачДата = НачалоГода(мДатаНачалаПериодаОтчета);
	КонДата = ДобавитьМесяц(КонецМесяца(НачДата),2);
	ЧисленностьЭПЗ.Очистить();
	Пока Истина Цикл
		Если КонДата <= мДатаКонцаПериодаОтчета Тогда
			ЧисленностьЭПЗ = ПроведениеРасчетов.ПолучитьСреднююЧисленность(НачДата, КонДата, "ССЧ", "КВАРТАЛ", Организация, "ИНВ");
			ИмяЯчейки = "Инв"+Строка(Квартал)+"Кв";
			Для каждого стр  Из ЧисленностьЭПЗ Цикл
				//Округляем значение ССЧ по новым правилам округления: Наказ Державного комітету статистики України від 28 вересня 2005 року N 286 
   				стр.Средняя = ОкруглитьССЧ(стр.Средняя);
				УстановитьЗначениеПоказателя(ИмяЯчейки, стр.Средняя);
			КонецЦикла;
			Квартал = Квартал+1;
			НачДата = ДобавитьМесяц(НачДата,3);
			КонДата = ДобавитьМесяц(КонецМесяца(НачДата),2);
		Иначе
			прервать;
		КонецЕсли;
		
	КонецЦикла;
	//ТаблЧисленностиИнв = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "ЭПЗ", "КВАРТАЛСНАЧАЛАГОДА", Организация, "Инв"); 
	//ПрисвоитьЗначенияЯчейкам(ТаблЧисленностиИнв,"Инв");
		
    
	Расчет();

	//показатели, расчет которых - это сальдо, то есть остаточные сущности
	//для них - расчет итогов - может быть выполнен только отдельно
	Модифицированность = Истина;


КонецПроцедуры // ЗаполнитьАвто()

Процедура РассчитатьСуммыЗадолженностиПоквартально()
	
	МассивКварталов = Новый Массив(3,4);
	
	Для i = 0 по 3 Цикл
		МассивКварталов[2][i] = 0;
		МассивКварталов[1][i] = 0;
	КонецЦикла;
	
	Если  (РегламентированнаяОтчетность.ИДКонфигурации() = "БП") или (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") Тогда
		
		ПС = ПланыСчетов["Хозрасчетный"];
		СчетРасчСчет1 = ПС.ТекущиеСчетаВНациональнойВалюте;
		СчетРасчСчет2 = ПС.ДругиеСчетаВБанкеВНациональнойВалюте;
		Счет661 = ПС.РасчетыПоЗаработнойПлате;
		
		//мБухИтогиЗП = Обработки.БухгалтерскиеИтоги.Создать();
		//Итоги = "НачальныйОстатокДт,НачальныйОстатокКт,КонечныйОстатокДт,КонечныйОстатокКт";
		//мБухИтогиЗП.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Период,Счет", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,"Месяц","66",,,, "Организация", Организация);
		//
		//Для НомМес = Месяц (НачалоГода(мДатаНачалаПериодаОтчета)) по Месяц(мДатаКонцаПериодаОтчета) Цикл
		//	мес = НачалоМесяца( ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), НомМес-1));
		//	ЗадолженностьЗП = мБухИтогиЗП.ПолучитьИтог("СуммаКонечныйОстатокКт", "Период,Счет",мес, Счет661);
		//	индекс = Цел((НомМес - 1) / 3);
		//	МассивКварталов[1][индекс] = ЗадолженностьЗП;
		//	
		//КонецЦикла;
		//
		мБухИтогиЗП = Обработки.БухгалтерскиеИтоги.Создать();
		Итоги = "НачальныйОстатокДт,НачальныйОстатокКт,КонечныйОстатокДт,КонечныйОстатокКт,ОборотКт,КорОборотКт";
		мБухИтогиЗП.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Период,Счет,КорСчет", НачалоГода(мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета,"Месяц","66",,"652,656",, "Организация", Организация);
		
	КонецЕсли;
	
		ЗапросЗадолжПоквартально = Новый Запрос;
		ЗапросЗадолжПоквартально.Текст = "
		|Выбрать
		|	СУММА (ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток) 	КАК Результат
		|
		|Из
		|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&НачДата,Организация = &Организация И ПериодВзаиморасчетов <> &НачДата) КАК ВзаиморасчетыСРаботниками
		|
		|";
		
		Для НомМес = Месяц (НачалоГода(мДатаНачалаПериодаОтчета)) по Месяц(мДатаКонцаПериодаОтчета) Цикл
			мес = НачалоМесяца( ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), НомМес-1));
			
			Если(НомМес = 1 ИЛИ НомМес = 2 ИЛИ НомМес = 3) Тогда
				ЗапросЗадолжПоквартально.УстановитьПараметр("НачДата", ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), 3));
			ИначеЕсли(НомМес = 4 ИЛИ НомМес = 5 ИЛИ НомМес = 6)Тогда
				ЗапросЗадолжПоквартально.УстановитьПараметр("НачДата", ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), 6));
			ИначеЕсли(НомМес = 7 ИЛИ НомМес = 8 ИЛИ НомМес = 9)Тогда
				ЗапросЗадолжПоквартально.УстановитьПараметр("НачДата", ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), 9));
			ИначеЕсли(НомМес = 10 ИЛИ НомМес = 11 ИЛИ НомМес = 12)Тогда
				ЗапросЗадолжПоквартально.УстановитьПараметр("НачДата", ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета), 12));
			КонецЕсли;
			
			ЗапросЗадолжПоквартально.УстановитьПараметр("Организация",   Организация);
			РезультатЗапроса = ЗапросЗадолжПоквартально.Выполнить().Выбрать();
			
			Пока РезультатЗапроса.Следующий() Цикл
				Если(НомМес = 1 ИЛИ НомМес = 2 ИЛИ НомМес = 3) Тогда
					МассивКварталов[1][0] = РезультатЗапроса.Результат;
				ИначеЕсли(НомМес = 4 ИЛИ НомМес = 5 ИЛИ НомМес = 6) Тогда
					МассивКварталов[1][1] = РезультатЗапроса.Результат;
				ИначеЕсли(НомМес = 7 ИЛИ НомМес = 8 ИЛИ НомМес = 9) Тогда
					МассивКварталов[1][2] = РезультатЗапроса.Результат;
				ИначеЕсли(НомМес = 10 ИЛИ НомМес = 11 ИЛИ НомМес = 12) Тогда
					МассивКварталов[1][3] = РезультатЗапроса.Результат;
				КонецЕсли;		
			КонецЦикла;
		КонецЦикла;
		
	Для Сч = 0 по 3 Цикл  
		
		ИмяЯчейки = "ПДолг_" + Строка(Сч + 1) + "Кв";
		Если МассивКварталов[1][Сч] <> Неопределено Тогда
			УстановитьЗначениеПоказателя(ИмяЯчейки,МассивКварталов[1][Сч]); 
		КонецЕсли;	
			 
	КонецЦикла; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетФССБезработица";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вычисляется автоматически';uk='Значення обчислюється автоматично'");
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");
		КонецЕсли;

		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки("СоставПоказателей2007Кв1");

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Печатать сразу';uk='Друкувати відразу'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Показать бланк';uk='Показати бланк'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЛинияСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЛинияПусто = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);

	мМассивТиповЛиний = Новый Массив();
	мМассивТиповЛиний.Вставить(0, ЛинияПусто);
	мМассивТиповЛиний.Вставить(1, ЛинияСнизу);

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	Перем ИсходноеКоличествоСтрокГруппы;

	ЭтаФорма.АвтоЗаголовок = Ложь;

	мОтчетФССБезработица = ЭлементыФормы.ПолеТабличногоДокументаОтчетФССБезработица;
	ТекТабличноеПоле = мОтчетФССБезработица;
	
	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;

			УстановитьФорматВывода(); 
			ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();
	мОтчетФССБезработица.ТолькоПросмотр = Истина;

	ЗаполнитьСведенияОбОрганизации();

	УстановитьЦветФонаЯчейки(,,"ОтчетФССБезработица");

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность = Истина Тогда

		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения ?';uk='Дані були змінені. Зберегти зміни ?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;

		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;

			мСохраненныйДок.Записать();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	// Заглушка
	//ЗаполнитьДемо();
	
	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда 
		Закрыть();
	КонецЕсли;	
	

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА


// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	
	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	
	мОтчетФССБезработица.Области.ДеньДаты.Значение 	= ЧастиДатыПодписи.День;
	мОтчетФССБезработица.Области.МесяцДаты.Значение = ЧастиДатыПодписи.Месяц;
	мОтчетФССБезработица.Области.ГодДаты.Значение 	= ЧастиДатыПодписи.ПоследняяЦифраГода;
	
//	мОтчетФССБезработица.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаОтчетФССБезработицаПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаОтчетФССБезработицаПриАктивизацииОбласти()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа.
//   Устанавливает признак модифицированности данных в форме, вызывает пересчет
// вычисляемых показателей  табличных полей и обновляет структуру данных
// многострочного раздела.
//
Процедура ПолеТабличногоДокументаОтчетФССБезработицаПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	Расчет();
	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаФССБезработицаПриИзменении()

Процедура ПолеВыбораВариантЗаполненияОтчетФССБезработицаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки.
//
Процедура ПолеВводаЗначениеКорректировкиОтчетФССБезработицаПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиПриИзменении

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// "Комментарий" по ячейке, для которой установлен алгоритм автозаполнения 
// [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийОтчетФССБезработицаПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийПриИзменении()

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
// только в гривнях
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       НСтр("ru='в гривнях';uk='у гривнях'"));


// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетФССБезработица.СписокВыбора.Добавить(1, НСтр("ru='не заполнять автоматически';uk='не заповнювати автоматично'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетФССБезработица.СписокВыбора.Добавить(2, НСтр("ru='заполнять автоматически с корректировкой';uk='заповнювати автоматично з коригуванням'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетФССБезработица.СписокВыбора.Добавить(3, НСтр("ru='заполнять автоматически без корректировки';uk='заповнювати автоматично без коригування'"));

ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

мСоставПоказателей = "СоставПоказателей2007Кв1";

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
мВерсияФормы = "01/01/2005";

мПечатныеФормы = Новый СписокЗначений;
