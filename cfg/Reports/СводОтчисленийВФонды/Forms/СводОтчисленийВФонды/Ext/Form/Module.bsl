Перем СтатьяНалоговойДекларации;
Перем мМодифицировано;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Управляет пометками кнопок ком. панели
//
// Параметры:
//	Нет.
//
Процедура УправлениеПометкамиКнопокКоманднойПанели()
	
	//Если ПоказыватьЗаголовок Тогда
	//	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = Истина;
	//	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Истина;

	//Иначе
	//	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = Ложь;
	//	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Ложь;

	//КонецЕсли;

	Если ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Отбор.Пометка = Ложь;
		//ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Ложь;
	Иначе
		ЭлементыФормы.ДействияФормы.Кнопки.Отбор.Пометка = Истина;
		//ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры // УправлениеПометкамиКнопокКоманднойПанели()

//Процедура формирует отчет
//
//Параметры:
//	ТабДок, ТабДок2	- Поле табличного документа 
//  Период			- Начальная дата периода
//	Организация		- Значение типа СправочникСсылка.Организации
Процедура СводОтчисленийВФонды(ТабДок,ТабДок2, Период) Экспорт	
	//Заполнение названий статей налоговой декларации
	СтатьяНалоговойДекларации = Новый Массив();
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ПФ_Орг32);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ПФ_Орг4);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ПФ_Орг42);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ПФ_Декр);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ПФ_Сотр15);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Орг29);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Сотр05);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Сотр1);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССНесчСлуч_Орг);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Сотр025);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССБезработ_Орг);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССБезработ_Сотр);
	
	//Список областей макета
	Области = Новый Массив();	
	Области.Добавить("");
	Области.Добавить("");
	Области.Добавить("ПФБаза");
	Области.Добавить("ПФИнвалиды");
	Области.Добавить("ПФЛетчики");
	Области.Добавить("ПФДекрет");
	Области.Добавить("ПФССотр1");
	Области.Добавить("ПФССотр2");
	Области.Добавить("ФСББазаИнвал");
	Области.Добавить("ФСБФОТ");
	Области.Добавить("ФСБССотр");
	Области.Добавить("ФСНетрБаза");
	Области.Добавить("ФСНетрССотр05");
	Области.Добавить("ФСНетрССотр1");
	Области.Добавить("ФСНесчСлФОТ");

	ОтборОрганизации = Новый Структура("Организация",Организация);
	ОтборОрганизации.Организация = Организация;
	
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));

	Макет = ОтчетОбъект.ПолучитьМакет("СводОтчисленийВФонды");
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	Запрос = Новый Запрос;
	
	ОтборОрганизации		= ЭлементыФормы.ФлажокНастройкиОрганизация.Значение;
	ВидСравненияОрганизации	= ЭлементыФормы.ПолеВидаСравненияОрганизация.Значение;
	
	ОтборПодразделения			= ЭлементыФормы.ФлажокНастройкиПодразделение.Значение;
	ВидСравненияПодразделения	= ЭлементыФормы.ПолеВидаСравненияПодразделение.Значение;
	Подразделение				= ЭлементыФормы.ПолеНастройкиПодразделение.Значение;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Если НЕ ЭлементыФормы.ФлажокНастройкиОрганизация.Значение Тогда
		ВидСравненияОрганизацииСтрокой = "=" 
	Иначе
		Если ВидСравненияОрганизации = ВидСравнения.Равно Тогда
			ВидСравненияОрганизацииСтрокой = "=" 
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.НеРавно Тогда
			ВидСравненияОрганизацииСтрокой = "<>"
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.ВСписке Тогда
			ВидСравненияОрганизацииСтрокой = "В"
		Иначе
			ВидСравненияОрганизацииСтрокой = "НЕ В"
		КонецЕсли; 
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", Подразделение);
	Если ВидСравненияПодразделения = ВидСравнения.Равно Тогда
		ВидСравненияПодразделение = "=" 
	ИначеЕсли ВидСравненияПодразделения = ВидСравнения.НеРавно Тогда
		ВидСравненияПодразделение = "<>"
	ИначеЕсли ВидСравненияПодразделения = ВидСравнения.ВСписке Тогда
		ВидСравненияПодразделение = "В"
	ИначеЕсли ВидСравненияПодразделения = ВидСравнения.НеВСписке Тогда
		ВидСравненияПодразделение = "НЕ В"
	ИначеЕсли ВидСравненияПодразделения = ВидСравнения.ВСпискеПоИерархии ИЛИ 
		ВидСравненияПодразделения = ВидСравнения.ВИерархии Тогда
		ВидСравненияПодразделение = "В ИЕРАРХИИ"
	ИначеЕсли ВидСравненияПодразделения = ВидСравнения.НеВСпискеПоИерархии ИЛИ 
		ВидСравненияПодразделения = ВидСравнения.НеВИерархии Тогда
		ВидСравненияПодразделение = "НЕ В ИЕРАРХИИ"
	КонецЕсли; 
	
	РНУсловиеТекст = "";
	Если ОтборОрганизации Тогда
		РНУсловиеТекст = РНУсловиеТекст + " И Взаиморасчеты.Организация " + ВидСравненияОрганизацииСтрокой + " (&Организация)";
	КонецЕсли;
	Если ОтборПодразделения  Тогда
		РНУсловиеТекст = РНУсловиеТекст + " И РаботникиОрганизаций.ПодразделениеОрганизации " + ВидСравненияПодразделение + " (&ПодразделениеОрганизации)";
	КонецЕсли;
	
	Текст_ПодразделениеОрганизации = "
	|				ВЫБРАТЬ  
	|					РаботникиОрганизаций.Организация КАК Организация,
	|					РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|					РаботникиОрганизаций.Сотрудник КАК Сотрудник
	|				ИЗ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаКонца) КАК РаботникиОрганизаций
	|				Где (РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					ИЛИ НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Период, МЕСЯЦ) = &ДатаНачала)
	|				" + ?(ОтборОрганизации, " И	РаботникиОрганизаций.Организация "+ ВидСравненияОрганизацииСтрокой +" (&Организация)","")+"
	|			
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ
    |                    РаботникиОрганизаций.Организация                   	 КАК Организация,
    |                    МАКСИМУМ(РаботникиОрганизаций.ПодразделениеОрганизации)     	КАК ПодразделениеОрганизации,
    |                    РаботникиОрганизаций.Сотрудник                         КАК Сотрудник
    |               ИЗ  Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК РаботникиОрганизаций
    |     
    |               ГДЕ РаботникиОрганизаций.ДатаОкончания >= &ДатаНачала
    |               И РаботникиОрганизаций.ДатаНачала <= &ДатаКонца
	|               И РаботникиОрганизаций.Проведен = Истина
    |				" + ?(ОтборОрганизации, " И	РаботникиОрганизаций.Организация "+ ВидСравненияОрганизацииСтрокой +" (&Организация)","")+"
	|СГРУППИРОВАТЬ ПО РаботникиОрганизаций.Организация,РаботникиОрганизаций.Сотрудник
	|";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ Разрешенные
	|	ПорядокКолонк.НомерКолонки,
	|	ПорядокКолонк.Точность,
	|	ПорядокКолонк.ГруппаНалогов,
	|
	|	Взаиморасчеты.Организация					КАК Организация,
	|	Взаиморасчеты.Сотрудник						КАК Сотрудник,
	|	Взаиморасчеты.Период						КАК Период,
	|	Взаиморасчеты.ПодразделениеОрганизации 		КАК ПодразделениеОрганизации,
	|	Взаиморасчеты.СуммаНачислений,
	|	Взаиморасчеты.Ставка,
	|	Взаиморасчеты.Предел,
	|	Взаиморасчеты.База,
	|	Взаиморасчеты.БазаВзноса,
	|	Взаиморасчеты.Результат,               
	|	Взаиморасчеты.Налог,
	|	Взаиморасчеты.СтатьяНалоговойДекларации,
	|
	//Подписи ответственных
	|	ОтветственныеЛицаДиректор.ФизическоеЛицо.Наименование 	КАК ФИОДиректор,
	|	ОтветственныеЛицаГлБух.ФизическоеЛицо.Наименование 	КАК ФИОГлБух
	|
	|
	|ИЗ (
	|	ВЫБРАТЬ
	|		Взаиморасчеты.Организация  						КАК Организация,
	|		РаботникиОрганизаций.ПодразделениеОрганизации 	КАК ПодразделениеОрганизации,
	|		Взаиморасчеты.Сотрудник 						КАК Сотрудник,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодДействия, МЕСЯЦ)		КАК Период,
	|		&ПустойНалог 			КАК Налог,
	|		0  						КАК СтатьяНалоговойДекларации,
	|		0  						КАК Предел,
	|		0  						КАК Ставка,
	|		СУММА(Взаиморасчеты.Результат)			КАК СуммаНачислений,
	|		0 КАК База,
	|		0 КАК БазаВзноса,
	|		0 КАК Результат               
	|
	|	ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Взаиморасчеты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ( " + Текст_ПодразделениеОрганизации + "	)КАК РаботникиОрганизаций
	|	ПО 	Взаиморасчеты.Сотрудник = РаботникиОрганизаций.Сотрудник
	|	И	Взаиморасчеты.Организация = РаботникиОрганизаций.Организация
	|	
	|	ГДЕ	Взаиморасчеты.ПериодРегистрации = &ДатаНачала 
	|	" + РНУсловиеТекст + "
	|
	|	СГРУППИРОВАТЬ ПО
	|		Взаиморасчеты.Организация,
	|		РаботникиОрганизаций.ПодразделениеОрганизации,
	|		Взаиморасчеты.Сотрудник,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодДействия, МЕСЯЦ)
	|
	|
	|   ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		Взаиморасчеты.Организация  							КАК Организация,
	|		РаботникиОрганизаций.ПодразделениеОрганизации 		КАК ПодразделениеОрганизации,
	|		Взаиморасчеты.Сотрудник 							КАК Сотрудник,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.БазовыйПериодНачало, МЕСЯЦ)	КАК Период,
	|		Взаиморасчеты.Налог 						КАК Налог,
	|		Взаиморасчеты.СтатьяНалоговойДекларации  	КАК СтатьяНалоговойДекларации,
	|		Взаиморасчеты.Предел  						КАК Предел,
	|		Взаиморасчеты.Ставка  						КАК Ставка,
	|		0											КАК СуммаНачислений,
	|		СУММА( Взаиморасчеты.База ) 				КАК База,
	|		СУММА( Взаиморасчеты.БазаВзноса ) 			КАК БазаВзноса,
	|		СУММА( Взаиморасчеты.Результат ) 			КАК Результат               
	|
	|	ИЗ РегистрРасчета.ВзносыВФонды КАК Взаиморасчеты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ( " + Текст_ПодразделениеОрганизации + "	)КАК РаботникиОрганизаций
	|	ПО 	Взаиморасчеты.Сотрудник = РаботникиОрганизаций.Сотрудник
	|	
	|	ГДЕ	Взаиморасчеты.ПериодРегистрации = &ДатаНачала 
	|	" + РНУсловиеТекст + "
	|
	|	СГРУППИРОВАТЬ ПО
	|		Взаиморасчеты.Организация,
	|		РаботникиОрганизаций.ПодразделениеОрганизации,
	|		Взаиморасчеты.Сотрудник,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.БазовыйПериодНачало, МЕСЯЦ),
	|		Взаиморасчеты.Ставка,
	|		Взаиморасчеты.Предел,
	|		Взаиморасчеты.Налог,
	|		Взаиморасчеты.СтатьяНалоговойДекларации
	|
	|   ) КАК Взаиморасчеты
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводОтчисленийВФондыНастройкиОтчета 	КАК ПорядокКолонк
	|	ПО ПорядокКолонк.Налог 		= Взаиморасчеты.Налог
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаКонца) КАК ОтветственныеЛицаДиректор 
	|	ПО ОтветственныеЛицаДиректор.СтруктурнаяЕдиница = Взаиморасчеты.Организация
	|	И ОтветственныеЛицаДиректор.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаКонца) КАК ОтветственныеЛицаГлБух
	|	ПО ОтветственныеЛицаГлБух.СтруктурнаяЕдиница = Взаиморасчеты.Организация
	|	И ОтветственныеЛицаГлБух.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|
	|ГДЕ Взаиморасчеты.Ставка <> 0 ИЛИ Взаиморасчеты.Налог = &ПустойНалог
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерКолонки,
	|	Сотрудник,                                             
	|	Ставка
	|
	|ИТОГИ Сумма(СуммаНачислений), Сумма(База), Сумма(БазаВзноса), Сумма(Результат), Максимум(Точность), МАКСИМУМ(ФИОДиректор), МАКСИМУМ(ФИОГлБух) ПО
	|   ОБЩИЕ,
	|	Организация,
	|	ГруппаНалогов,                                             
	|	СтатьяНалоговойДекларации,                                             
	|	Ставка,                                             
	|   ПодразделениеОрганизации,
	|   Сотрудник,
	|	Период
	|
	|";
	Запрос.УстановитьПараметр("ДатаНачала", Период);
	Запрос.УстановитьПараметр("ДатаКонца", КонецМесяца(Период));
    Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
    Запрос.УстановитьПараметр("ПустойНалог", Справочники.Налоги.ПустаяСсылка());
    Запрос.УстановитьПараметр("ВнутреннийСовместитель", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);

	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	КолОтделов = 0;
	КолСотр = 0;
	
	
	ВыборкаОрганизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
	Пока ВыборкаОрганизация.Следующий() Цикл
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовок.Параметры.Организация = ВыборкаОрганизация.Организация;
		ОбластьЗаголовок.Параметры.Период = ЭлементыФормы.Надпись1.Значение;
		ТабДок.Вывести(ОбластьЗаголовок);
		
		ОбластьШапкаОбщая		= Макет.ПолучитьОбласть("Шапка|Общая");
		ОбластьШапкаКолонка1	= Макет.ПолучитьОбласть("Шапка|Колонка1");
		ОбластьШапкаКолонка2	= Макет.ПолучитьОбласть("Шапка|Колонка2");
		ОбластьШапкаКолонка3	= Макет.ПолучитьОбласть("Шапка|Колонка3");
		ОбластьШапкаРазделитель	= Макет.ПолучитьОбласть("Шапка|Разделитель");
		
		ТабДок.Вывести(ОбластьШапкаОбщая);
		
	ВыборкаГруппаНалогов = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ГруппаНалогов");	
	//ВыборкаГруппаНалогов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ГруппаНалогов");
	КолСтолбцов = ВыборкаГруппаНалогов.Количество();
	Ст = 0;
	Пока ВыборкаГруппаНалогов.Следующий() Цикл
		Ст = Ст + 1;
		Если ВыборкаГруппаНалогов.ГруппаНалогов =NULL Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть =  ОбластьШапкаКолонка1;
		ТекущаяОбласть.Параметры.ИмяНалог = ВыборкаГруппаНалогов.ГруппаНалогов;
		
		ВыборкаСтатьяНалоговойДекларации = ВыборкаГруппаНалогов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтатьяНалоговойДекларации");
		Пока ВыборкаСтатьяНалоговойДекларации.Следующий() Цикл
			ВыборкаСтавка = ВыборкаСтатьяНалоговойДекларации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ставка");
			
			Пока ВыборкаСтавка.Следующий() Цикл
				
				ТекущаяОбласть.Параметры.ИмяСтатьяНалоговойДекларации = "" + ВыборкаСтавка.СтатьяНалоговойДекларации + " (" + Число(ВыборкаСтавка.Ставка)*100+"%)";
				
				Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
				
				Если ЭлементыФормы.ФлажокБаза.Значение Тогда
					ТекущаяОбласть.Параметры.ИмяРезультата = НСтр("ru='База';uk='База'");
					ТабДок.Присоединить(ТекущаяОбласть);
					ТекущаяОбласть = ОбластьШапкаКолонка3;
				КонецЕсли;
				Если ЭлементыФормы.ФлажокБазаВзноса.Значение Тогда
					ТекущаяОбласть.Параметры.ИмяРезультата = НСтр("ru='База с огр.';uk='База з обм.'");
					ТабДок.Присоединить(ТекущаяОбласть);
					ТекущаяОбласть = ОбластьШапкаКолонка3;
				КонецЕсли;
				Если ЭлементыФормы.ФлажокРезультат.Значение Тогда
					ТекущаяОбласть.Параметры.ИмяРезультата = НСтр("ru='Рез.';uk='Рез.'");
					ТабДок.Присоединить(ТекущаяОбласть);
				КонецЕсли;
				ТекущаяОбласть = ОбластьШапкаКолонка2;
				
			КонецЦикла;
			ТекущаяОбласть = ОбластьШапкаКолонка2;
		КонецЦикла;
	КонецЦикла;
	ТабДок.Присоединить(ОбластьШапкаРазделитель);
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	// -------------теперь выводим основную часть
	РазврачиватьУровни = НЕ ЭлементыФормы.ФлажокСвернутьПодразделения.Значение;
	ОбластьРазделитель =  Макет.ПолучитьОбласть("Подразделение|Разделитель");
	ОбластьПодразделениеОбщая	= Макет.ПолучитьОбласть("Подразделение|Общая");
	ОбластьПодразделениеКолонка	= Макет.ПолучитьОбласть("Подразделение|Колонка1");
	
	ОбластьФизЛицоОбщая		= Макет.ПолучитьОбласть("ФизЛицо|Общая");
	ОбластьФизЛицоКолонка	= Макет.ПолучитьОбласть("ФизЛицо|Колонка1");
	
	ОбластьПериодОбщая		= Макет.ПолучитьОбласть("Период|Общая");
	ОбластьПериодКолонка	= Макет.ПолучитьОбласть("Период|Колонка1");
	
	Если ЭлементыФормы.РежимОтображения.Значение = НСтр("ru='Показывать сотрудников и периоды';uk='Показувати співробітників і періоди'") Тогда
		ВыборкаФизЛицо = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сотрудник");
		Пока ВыборкаФизЛицо.Следующий() Цикл    
			ОбластьФизЛицоОбщая.Параметры.ФизЛицо = ВыборкаФизЛицо.Сотрудник;
			ОбластьФизЛицоОбщая.Параметры.СуммаНачислений = Формат(ВыборкаФизЛицо.СуммаНачислений, "ЧЦ=15; ЧДЦ=2");
			ТабДок.Вывести(ОбластьФизЛицоОбщая, 1,, РазврачиватьУровни );
			СводОтчисленийВФонды_ВыводСтроки(ВыборкаФизЛицо, ВыборкаГруппаНалогов, ТабДок, ОбластьФизЛицоКолонка, ОбластьРазделитель);
					
			ВыборкаПериод = ВыборкаФизЛицо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
			Пока ВыборкаПериод.Следующий() Цикл
				ОбластьПериодОбщая.Параметры.Период = Формат(ВыборкаПериод.Период, "Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать)+"; ДЛФ=Д");
				ОбластьПериодОбщая.Параметры.СуммаНачислений = Формат(ВыборкаПериод.СуммаНачислений, "ЧЦ=15; ЧДЦ=2");
				ТабДок.Вывести(ОбластьПериодОбщая, 2);
				СводОтчисленийВФонды_ВыводСтроки(ВыборкаПериод, ВыборкаГруппаНалогов, ТабДок, ОбластьПериодКолонка, ОбластьРазделитель);
			КонецЦикла;
		КонецЦикла;
		
	
	Иначе		
		ВыборкаПодразделениеОрганизации = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ПодразделениеОрганизации");
		Пока ВыборкаПодразделениеОрганизации.Следующий() Цикл
			ОбластьПодразделениеОбщая.Параметры.ПодразделениеОрганизации = ВыборкаПодразделениеОрганизации.ПодразделениеОрганизации;
			ОбластьПодразделениеОбщая.Параметры.СуммаНачислений = Формат(ВыборкаПодразделениеОрганизации.СуммаНачислений, "ЧЦ=15; ЧДЦ=2");
			ТабДок.Вывести(ОбластьПодразделениеОбщая, 0,, РазврачиватьУровни );
			СводОтчисленийВФонды_ВыводСтроки(ВыборкаПодразделениеОрганизации, ВыборкаГруппаНалогов, ТабДок, ОбластьПодразделениеКолонка, ОбластьРазделитель);
			
			Если ЭлементыФормы.РежимОтображения.Значение = НСтр("ru='Показывать только подразделения';uk='Показувати тільки підрозділи'") Тогда
				
				Продолжить;
				
			ИначеЕсли ЭлементыФормы.РежимОтображения.Значение = НСтр("ru='Показывать подразделения и периоды';uk='Показувати підрозділи й періоди'") Тогда
				
				ВыборкаПериод = ВыборкаПодразделениеОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
				Пока ВыборкаПериод.Следующий() Цикл
					ОбластьПериодОбщая.Параметры.Период = Формат(ВыборкаПериод.Период, "Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать)+"; ДЛФ=Д");
					ОбластьПериодОбщая.Параметры.СуммаНачислений = Формат(ВыборкаПериод.СуммаНачислений, "ЧЦ=15; ЧДЦ=2");
					ТабДок.Вывести(ОбластьПериодОбщая, 2,, РазврачиватьУровни );
					СводОтчисленийВФонды_ВыводСтроки(ВыборкаПериод, ВыборкаГруппаНалогов, ТабДок, ОбластьПериодКолонка, ОбластьРазделитель);
				КонецЦикла;
				
			ИначеЕсли ЭлементыФормы.РежимОтображения.Значение = НСтр("ru='Показывать подразделения и сотрудников';uk='Показувати підрозділи й співробітників'") Тогда
				
				ВыборкаФизЛицо = ВыборкаПодразделениеОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сотрудник");
				Пока ВыборкаФизЛицо.Следующий() Цикл    
					ОбластьФизЛицоОбщая.Параметры.ФизЛицо = ВыборкаФизЛицо.Сотрудник;
					ОбластьФизЛицоОбщая.Параметры.СуммаНачислений = Формат(ВыборкаФизЛицо.СуммаНачислений, "ЧЦ=15; ЧДЦ=2");
					ТабДок.Вывести(ОбластьФизЛицоОбщая, 1,, РазврачиватьУровни);
					СводОтчисленийВФонды_ВыводСтроки(ВыборкаФизЛицо, ВыборкаГруппаНалогов, ТабДок, ОбластьФизЛицоКолонка, ОбластьРазделитель);
				КонецЦикла;			
				
			Иначе  // "Показывать подразделения, сотрудников и периоды"
				
				ВыборкаФизЛицо = ВыборкаПодразделениеОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сотрудник");
				Пока ВыборкаФизЛицо.Следующий() Цикл    
					ОбластьФизЛицоОбщая.Параметры.ФизЛицо = ВыборкаФизЛицо.Сотрудник;
					ОбластьФизЛицоОбщая.Параметры.СуммаНачислений = Формат(ВыборкаФизЛицо.СуммаНачислений, "ЧЦ=15; ЧДЦ=2");
					ТабДок.Вывести(ОбластьФизЛицоОбщая, 1,, РазврачиватьУровни );
					СводОтчисленийВФонды_ВыводСтроки(ВыборкаФизЛицо, ВыборкаГруппаНалогов, ТабДок, ОбластьФизЛицоКолонка, ОбластьРазделитель);
					
					ВыборкаПериод = ВыборкаФизЛицо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
					Пока ВыборкаПериод.Следующий() Цикл
						ОбластьПериодОбщая.Параметры.Период = Формат(ВыборкаПериод.Период, "Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать)+"; ДЛФ=Д");
						ОбластьПериодОбщая.Параметры.СуммаНачислений = Формат(ВыборкаПериод.СуммаНачислений, "ЧЦ=15; ЧДЦ=2");
						ТабДок.Вывести(ОбластьПериодОбщая, 2);
						СводОтчисленийВФонды_ВыводСтроки(ВыборкаПериод, ВыборкаГруппаНалогов, ТабДок, ОбластьПериодКолонка, ОбластьРазделитель);
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
 	ТабДок.ЗакончитьАвтогруппировкуСтрок();

	// -------------вывод итогов
	//////ОбластьРазделитель =  Макет.ПолучитьОбласть("Подвал|Разделитель");
	ОбластьПодвалОбщая	= Макет.ПолучитьОбласть("Подвал|Общая");
	ОбластьПодвалКолонка	= Макет.ПолучитьОбласть("Подвал|Колонка1");
	
	ВыборкаОБЩИЕ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
	Пока ВыборкаОБЩИЕ.Следующий() Цикл
		Если ВыборкаОБЩИЕ.Организация = ВыборкаОрганизация.Организация Тогда
			ОбластьПодвалОбщая.Параметры.СуммаНачислений = ВыборкаОБЩИЕ.СуммаНачислений;
			ТабДок.Вывести(ОбластьПодвалОбщая);
			СводОтчисленийВФонды_ВыводСтроки(ВыборкаОБЩИЕ, ВыборкаГруппаНалогов, ТабДок, ОбластьПодвалКолонка, ОбластьРазделитель);
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	// Подписи ответсвенных лиц организаций
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ВыводитьПодписиОтветственныхЛицВОтчетеСводОтчисленийВФонды") Тогда
		ОбластьПодписиОтветственных = Макет.ПолучитьОбласть("ПодписиОтветственных");
		ОбластьПодписиОтветственных.Параметры.Заполнить(ВыборкаОрганизация);
		ТабДок.Вывести(ОбластьПодписиОтветственных);
	КонецЕсли;
	
	
	
КонецЦикла;
	
	
	//Всего начислений из фонда з/п
	Макет = ОтчетОбъект.ПолучитьМакет("СводОтчисленийВФонды2");
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"
	|ВЫБРАТЬ
	|	ВзаиморасчетыПоВзносамВФонды.Налог 						КАК Налог,
	|	ВзаиморасчетыПоВзносамВФонды.Ставка*100 				КАК Ставка,
	|	СУММА(ВзаиморасчетыПоВзносамВФонды.БазаВзноса)			КАК База,
	|	СУММА(ВзаиморасчетыПоВзносамВФонды.Результат) 			КАК Сумма,
	|	ВзаиморасчетыПоВзносамВФонды.Организация				КАК Организация,
	
	//Подписи ответственных
	|	МАКСИМУМ(ОтветственныеЛицаДиректор.ФизическоеЛицо.Наименование) 	КАК ФИОДиректор,
	|	МАКСИМУМ(ОтветственныеЛицаГлБух.ФизическоеЛицо.Наименование) 	КАК ФИОГлБух
	|
	|	ИЗ РегистрРасчета.ВзносыВФонды 		КАК ВзаиморасчетыПоВзносамВФонды
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаКонца)	КАК ОтветственныеЛицаДиректор	
	|	ПО ОтветственныеЛицаДиректор.СтруктурнаяЕдиница = ВзаиморасчетыПоВзносамВФонды.Организация
	|	И ОтветственныеЛицаДиректор.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаКонца) КАК ОтветственныеЛицаГлБух
	|	ПО ОтветственныеЛицаГлБух.СтруктурнаяЕдиница = ВзаиморасчетыПоВзносамВФонды.Организация
	|	И ОтветственныеЛицаГлБух.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|	 
	|ГДЕ	ВзаиморасчетыПоВзносамВФонды.ПериодРегистрации = &ДатаНачала 
	|		И ВзаиморасчетыПоВзносамВФонды.Ставка <> 0
	|	" + ?(ОтборОрганизации, "И  ВзаиморасчетыПоВзносамВФонды.Организация	"+ ВидСравненияОрганизацииСтрокой +" (&Организация) ","")+"
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыПоВзносамВФонды.Организация,
	|	ВзаиморасчетыПоВзносамВФонды.Налог,
	|	ВзаиморасчетыПоВзносамВФонды.Ставка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Налог Возр,
	|	Ставка,
	|	База,
	|	Сумма
	|ИТОГИ Сумма(База), Сумма(Сумма), МАКСИМУМ(ФИОДиректор), МАКСИМУМ(ФИОГлБух) ПО
	|   ОБЩИЕ,
	|	Организация
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаКонца", КонецМесяца(Период));
	Запрос.УстановитьПараметр("ДатаНачала", Период);
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	
	Результат = Запрос.Выполнить();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
		
	ТабДок2.Очистить();
	
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
	
	Пока ВыборкаОрганизация.Следующий() Цикл
		ОбластьЗаголовок.Параметры.Организация = ВыборкаОрганизация.Организация;
		ОбластьЗаголовок.Параметры.Период = ЭлементыФормы.Надпись1.Значение;
		ТабДок2.Вывести(ОбластьЗаголовок);
		ТабДок2.Вывести(ОбластьШапкаТаблицы);
		ТабДок2.НачатьАвтогруппировкуСтрок();
		
		ВыборкаДетали = ВыборкаОрганизация.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			Если ВыборкаДетали.Налог <> Null И ВыборкаДетали.Ставка <> Null Тогда
			    ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
				ОбластьДетальныхЗаписей.Параметры.Ставка = Строка(ВыборкаДетали.Ставка) + "%";
				ТабДок2.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень());
			КонецЕсли;
		КонецЦикла;
			
		// Подписи ответсвенных лиц организаций
		Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ВыводитьПодписиОтветственныхЛицВОтчетеСводОтчисленийВФонды") Тогда
			ОбластьПодписиОтветственных = Макет.ПолучитьОбласть("ПодписиОтветственных");
			ОбластьПодписиОтветственных.Параметры.Заполнить(ВыборкаОрганизация);
			ТабДок2.Вывести(ОбластьПодписиОтветственных);
		КонецЕсли;

	КонецЦикла;
	
	ТабДок2.ЗакончитьАвтогруппировкуСтрок();
	ТабДок2.Вывести(ОбластьПодвалТаблицы);
	ТабДок2.Вывести(ОбластьПодвал);   
		
КонецПроцедуры

Процедура СводОтчисленийВФонды_ВыводСтроки(ТекущаяВыборка, ВыборкаГруппаНалоговШапка, ТабДок, ТекущаяОбласть, ОбластьРазделитель)
	
	ВыборкаГруппаНалоговШапка.Сбросить();
	ВыборкаГруппаНалогов = ТекущаяВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ГруппаНалогов");
	ВыборкаГруппаНалогов.Сбросить();
	Пока ВыборкаГруппаНалоговШапка.Следующий() Цикл
		
		Если ВыборкаГруппаНалоговШапка.ГруппаНалогов = NULL Тогда
			Продолжить;
		КонецЕсли;
		Если ВыборкаГруппаНалогов.НайтиСледующий(ВыборкаГруппаНалоговШапка.ГруппаНалогов) Тогда
			
			ВыборкаСтатьяНалоговойДекларацииШапка = ВыборкаГруппаНалоговШапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтатьяНалоговойДекларации");
			ВыборкаСтатьяНалоговойДекларации = ВыборкаГруппаНалогов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтатьяНалоговойДекларации");
			Пока ВыборкаСтатьяНалоговойДекларацииШапка.Следующий() Цикл
				Если ВыборкаСтатьяНалоговойДекларации.НайтиСледующий(ВыборкаСтатьяНалоговойДекларацииШапка.СтатьяНалоговойДекларации) Тогда
					
					ВыборкаСтавка = ВыборкаСтатьяНалоговойДекларации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ставка");
					ВыборкаСтавкаШапка = ВыборкаСтатьяНалоговойДекларацииШапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ставка");
					
					Пока ВыборкаСтавкаШапка.Следующий() Цикл
						
						Если ВыборкаСтавка.НайтиСледующий(ВыборкаСтавкаШапка.Ставка) Тогда
							Если ЭлементыФормы.ФлажокБаза.Значение Тогда
								ТекущаяОбласть.Параметры.Результат = Формат(ВыборкаСтавка.База, "ЧЦ=15; ЧДЦ=2");
								ТабДок.Присоединить(ТекущаяОбласть);
							КонецЕсли;
							Если ЭлементыФормы.ФлажокБазаВзноса.Значение Тогда
								ТекущаяОбласть.Параметры.Результат = Формат(ВыборкаСтавка.БазаВзноса, "ЧЦ=15; ЧДЦ=2");
								ТабДок.Присоединить(ТекущаяОбласть);
							КонецЕсли;
							Если ЭлементыФормы.ФлажокРезультат.Значение Тогда
								ТекущаяОбласть.Параметры.Результат = Формат(ВыборкаСтавка.Результат, "ЧЦ=15; ЧДЦ="+ВыборкаСтавка.Точность);
								ТабДок.Присоединить(ТекущаяОбласть);
							КонецЕсли;
						Иначе
							Если ЭлементыФормы.ФлажокБаза.Значение Тогда
								ТекущаяОбласть.Параметры.Результат = "";
								ТабДок.Присоединить(ТекущаяОбласть);
							КонецЕсли;
							Если ЭлементыФормы.ФлажокБазаВзноса.Значение Тогда
								ТекущаяОбласть.Параметры.Результат = "";
								ТабДок.Присоединить(ТекущаяОбласть);
							КонецЕсли;
							Если ЭлементыФормы.ФлажокРезультат.Значение Тогда
								ТекущаяОбласть.Параметры.Результат = "";
								ТабДок.Присоединить(ТекущаяОбласть);
							КонецЕсли;
						КонецЕсли;	
						
					КонецЦикла;
					
				Иначе
					
					// пустая статья декларации
					ВыборкаСтавкаШапка = ВыборкаСтатьяНалоговойДекларацииШапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ставка");
					Пока ВыборкаСтавкаШапка.Следующий() Цикл
						Если ЭлементыФормы.ФлажокБаза.Значение Тогда
							ТекущаяОбласть.Параметры.Результат = "";
							ТабДок.Присоединить(ТекущаяОбласть);
						КонецЕсли;
						Если ЭлементыФормы.ФлажокБазаВзноса.Значение Тогда
							ТекущаяОбласть.Параметры.Результат = "";
							ТабДок.Присоединить(ТекущаяОбласть);
						КонецЕсли;
						Если ЭлементыФормы.ФлажокРезультат.Значение Тогда
							ТекущаяОбласть.Параметры.Результат = "";
							ТабДок.Присоединить(ТекущаяОбласть);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			// у сотрудника нету всей группы налогов, может пенсионер или декретчица
			ВыборкаСтатьяНалоговойДекларацииШапка = ВыборкаГруппаНалоговШапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтатьяНалоговойДекларации");
			Пока ВыборкаСтатьяНалоговойДекларацииШапка.Следующий() Цикл
				// пустая статья декларации
				ВыборкаСтавкаШапка = ВыборкаСтатьяНалоговойДекларацииШапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ставка");
				Пока ВыборкаСтавкаШапка.Следующий() Цикл
					Если ЭлементыФормы.ФлажокБаза.Значение Тогда
						ТекущаяОбласть.Параметры.Результат = "";
						ТабДок.Присоединить(ТекущаяОбласть);
					КонецЕсли;
					Если ЭлементыФормы.ФлажокБазаВзноса.Значение Тогда
						ТекущаяОбласть.Параметры.Результат = "";
						ТабДок.Присоединить(ТекущаяОбласть);
					КонецЕсли;
					Если ЭлементыФормы.ФлажокРезультат.Значение Тогда
						ТекущаяОбласть.Параметры.Результат = "";
						ТабДок.Присоединить(ТекущаяОбласть);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		//////ТабДок.Присоединить(ОбластьРазделитель);
	КонецЦикла;
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ НАЖАТИЯ КНОПОК КОМАНДНОЙ ПАНЕЛИ

// Процедура - обработчик нажатия кнопки "Отбор".
Процедура ДействияФормыОтбор(Кнопка)

	Если НЕ ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх;
	Иначе
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Нет;
	КонецЕсли;

	УправлениеПометкамиКнопокКоманднойПанели();
	
КонецПроцедуры

//Процедура - обработчик нажатия кнопки "Сформировать".
//
//Вначале очищает табличные документы,
//Затем, если не выбрана фильтрация по конкретной организации
//вызывает построитель отчета для каждой организации.
//В конце убирает признак необходимости перестройки отчета 
Процедура ДействияФормыСводОтчисленийВФондыСформировать()
	ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;
	ТабДок2 = ЭлементыФормы.ПолеТабличногоДокумента2;
	ТабДок.Очистить();
	ТабДок2.Очистить();
	
	СводОтчисленийВФонды(ТабДок,ТабДок2, Период);
	
	//состояние отчета актуально, "перепостроение" не нужно
	мМодифицировано = Ложь;

КонецПроцедуры

//Процедура сохраняет настройки пользователя о параметрах отображения
//и фильтрации отчета
процедура СохранитьНастройки()
	
	СохранитьЗначение("ФлажокБаза",ЭлементыФормы.ФлажокБаза.Значение);
	СохранитьЗначение("ФлажокБазаВзноса",ЭлементыФормы.ФлажокБазаВзноса.Значение);
	СохранитьЗначение("ФлажокРезультат",ЭлементыФормы.ФлажокРезультат.Значение);
	
	СохранитьЗначение("ФлажокСвернутьПодразделения",ЭлементыФормы.ФлажокСвернутьПодразделения.Значение);
	СохранитьЗначение("РежимОтображения",ЭлементыФормы.РежимОтображения.Значение);
	СохранитьЗначение("ПолеНастройкиПодразделение",ЭлементыФормы.ПолеНастройкиПодразделение.Значение);
	СохранитьЗначение("ПолеНастройкиОрганизация",ЭлементыФормы.ПолеНастройкиОрганизация.Значение);
	СохранитьЗначение("ФлажокНастройкиОрганизация",ЭлементыФормы.ФлажокНастройкиОрганизация.Значение);
	СохранитьЗначение("ФлажокНастройкиПодразделение",ЭлементыФормы.ФлажокНастройкиПодразделение.Значение);

КонецПроцедуры

//Процедура восстанавливает настройки пользователя о параметрах отображения
//и фильтрации отчета
процедура ВосстановитьНастройки()
	
	ЭлементыФормы.ФлажокБаза.Значение 					= ВосстановитьЗначение("ФлажокБаза");
	ЭлементыФормы.ФлажокБазаВзноса.Значение				= ВосстановитьЗначение("ФлажокБазаВзноса");
	ЭлементыФормы.ФлажокРезультат.Значение				= ВосстановитьЗначение("ФлажокРезультат");
	
	ЭлементыФормы.ФлажокСвернутьПодразделения.Значение		= ВосстановитьЗначение("ФлажокСвернутьПодразделения");
	ЭлементыФормы.РежимОтображения.Значение				= ВосстановитьЗначение("РежимОтображения");
	ЭлементыФормы.ПолеНастройкиПодразделение.Значение	= ВосстановитьЗначение("ПолеНастройкиПодразделение");
	ЭлементыФормы.ПолеНастройкиОрганизация.Значение		= ВосстановитьЗначение("ПолеНастройкиОрганизация");
	ЭлементыФормы.ФлажокНастройкиОрганизация.Значение	= ВосстановитьЗначение("ФлажокНастройкиОрганизация");
	ЭлементыФормы.ФлажокНастройкиПодразделение.Значение	= ВосстановитьЗначение("ФлажокНастройкиПодразделение");

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события перед открытием формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Период = НачалоМесяца(ТекущаяДата());
	ЭлементыФормы.ПолеВидаСравненияОрганизация.СписокВыбора = УправлениеОтчетами.ПолучитьСписокВидовСравненияПоТипу(Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ВидСравненияОрганизации     = ВидСравнения.Равно;
	Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации");
	
	ЭлементыФормы.ПолеВидаСравненияПодразделение.СписокВыбора = УправлениеОтчетами.ПолучитьСписокВидовСравненияПоТипу(Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ВидСравненияПодразделения     = ВидСравнения.Равно;
	Подразделение = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.ПодразделенияОрганизаций");
КонецПроцедуры

// Процедура - обработчик события при открытии формы
//
Процедура ПриОткрытии()
	
	ВосстановитьНастройки();
	мМодифицировано = Истина;
	Если (Организация <> Неопределено) И (ТипЗнч(Организация) <> Тип("СписокЗначений")) Тогда
		Если (Организация.Наименование <> "") Тогда
			ЭлементыФормы.ФлажокНастройкиПодразделение.Доступность = Истина;
			ЭлементыФормы.ПолеВидаСравненияПодразделение.Доступность = Истина;
			ЭлементыФормы.ПолеНастройкиПодразделение.Доступность = Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Организация) = Тип("СписокЗначений") Тогда
		Если Организация.Количество()>0 Тогда
			ЭлементыФормы.ФлажокНастройкиПодразделение.Доступность = Истина;
			ЭлементыФормы.ПолеВидаСравненияПодразделение.Доступность = Истина;
			ЭлементыФормы.ПолеНастройкиПодразделение.Доступность = Истина;	
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх;
	Если  ВосстановитьЗначение("ФлажокРезультат") = Неопределено Тогда
		ЭлементыФормы.ФлажокРезультат.Значение = Истина;
		РежимОтображения = НСтр("ru='Показывать подразделения, сотрудников и периоды';uk='Показувати підрозділи, співробітників і періоди'");
	КонецЕсли;	

    Если НЕ ЗначениеЗаполнено(Организация) Тогда
    	ЭлементыФормы.ПолеНастройкиОрганизация.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		ЭлементыФормы.ПолеНастройкиПодразделение.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
		Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события перед закрытием формы
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	НастройкиИзменены = Ложь;
	НастройкиИзменены = ЭлементыФормы.ФлажокБаза.Значение <> ВосстановитьЗначение("ФлажокБаза") ИЛИ НастройкиИзменены;
	НастройкиИзменены = ЭлементыФормы.ФлажокБазаВзноса.Значение	<> ВосстановитьЗначение("ФлажокБазаВзноса") ИЛИ НастройкиИзменены;
	НастройкиИзменены = ЭлементыФормы.ФлажокРезультат.Значение <> ВосстановитьЗначение("ФлажокРезультат") ИЛИ НастройкиИзменены;
	
	НастройкиИзменены = ЭлементыФормы.ФлажокСвернутьПодразделения.Значение <> ВосстановитьЗначение("ФлажокСвернутьПодразделения") ИЛИ НастройкиИзменены;
	НастройкиИзменены = ЭлементыФормы.РежимОтображения.Значение <> ВосстановитьЗначение("РежимОтображения") ИЛИ НастройкиИзменены;
	НастройкиИзменены = ЭлементыФормы.ПолеНастройкиПодразделение.Значение	<> ВосстановитьЗначение("ПолеНастройкиПодразделение") ИЛИ НастройкиИзменены;
	НастройкиИзменены = ЭлементыФормы.ПолеНастройкиОрганизация.Значение <> ВосстановитьЗначение("ПолеНастройкиОрганизация") ИЛИ НастройкиИзменены;
	НастройкиИзменены = ЭлементыФормы.ФлажокНастройкиОрганизация.Значение	<> ВосстановитьЗначение("ФлажокНастройкиОрганизация") ИЛИ НастройкиИзменены;
	НастройкиИзменены = ЭлементыФормы.ФлажокНастройкиПодразделение.Значение <> ВосстановитьЗначение("ФлажокНастройкиПодразделение") ИЛИ НастройкиИзменены;
	
	//Если сохраненные настройки отличаются от текущих спросить у пользователя и в случае согласия сохранить
	Если НастройкиИзменены Тогда
		Если Вопрос(НСтр("ru='Настройки отчета были изменены. Сохранить новые настройки?';uk='Настройки звіту були змінені. Зберегти нові настройки?'"),РежимДиалогаВопрос.ДаНет ,0)=КодВозвратаДиалога.Да Тогда
			СохранитьНастройки();
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

//Процедура обработки нажатия кнопки "+"
//Устанавливает в качестве периода построения отчета следующий период (периодичность-месяц)
Процедура ПлюсПериодНажатие(Элемент)
	Период = КонецМесяца(Период) + 1;
	мМодифицировано = Истина;
КонецПроцедуры

//Процедура обработки нажатия кнопки "-"
//Устанавливает в качестве периода построения отчета предыдущий период (периодичность-месяц)
Процедура МинусПериодНажатие(Элемент)
	Период = НачалоМесяца(Период - 1);
	мМодифицировано = Истина;
КонецПроцедуры

//Процедура обработки изменения фильтрации по организации
//
Процедура ПолеНастройкиОрганизацияПриИзменении(Элемент)
	
	Значение = Элемент.Значение;
	
    Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		ЭлементыФормы.ФлажокНастройкиОрганизация.Значение = (Значение.Количество() <> 0);		
	Иначе
		ЭлементыФормы.ФлажокНастройкиОрганизация.Значение = (ЗначениеЗаполнено(Значение));
	КонецЕсли;
	
	
	Если ЭлементыФормы.ПолеНастройкиОрганизация.ВыделенныйТекст <> "" Тогда
		ЭлементыФормы.ПолеНастройкиПодразделение.Доступность = Истина;
		ЭлементыФормы.ПолеВидаСравненияПодразделение.Доступность = Истина;
		ЭлементыФормы.ФлажокНастройкиПодразделение.Доступность = Истина;
	Иначе
		ЭлементыФормы.ПолеНастройкиПодразделение.Значение = "";
		ЭлементыФормы.ПолеНастройкиПодразделение.Доступность = Ложь;
		ЭлементыФормы.ПолеВидаСравненияПодразделение.Доступность = Ложь;
		ЭлементыФормы.ФлажокНастройкиПодразделение.Значение = Ложь;
		ЭлементыФормы.ФлажокНастройкиПодразделение.Доступность = Ложь;
	КонецЕсли;				

	//"Перестраиваем" отчет
	Если НЕ мМодифицировано Тогда
		ДействияФормыСводОтчисленийВФондыСформировать();
	КонецЕсли;
		
КонецПроцедуры

//Процедура обработки изменения фильтрации по подразделению
//
Процедура ПолеНастройкиПодразделениеПриИзменении(Элемент)
	
	Если ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") Тогда
		
		Если Элемент.Значение.Количество() = 0 Тогда
			ЭлементыФормы.ФлажокНастройкиПодразделение.Значение = Ложь
		Иначе
			ЭлементыФормы.ФлажокНастройкиПодразделение.Значение = Истина
		КонецЕсли; 
		
	Иначе
		
		Если Элемент.Значение.Пустая() Тогда
			ЭлементыФормы.ФлажокНастройкиПодразделение.Значение = Ложь
		Иначе
			ЭлементыФормы.ФлажокНастройкиПодразделение.Значение = Истина
		КонецЕсли; 
		
	КонецЕсли;
	
	//"Перестраиваем" отчет
	Если НЕ мМодифицировано Тогда
		ДействияФормыСводОтчисленийВФондыСформировать();
	КонецЕсли;

	
КонецПроцедуры

//Процедура обработки изменения режима отображения
//
Процедура РежимОтображенияПриИзменении(Элемент)
	//"Перестраиваем" отчет
	Если НЕ мМодифицировано Тогда
		ДействияФормыСводОтчисленийВФондыСформировать();
	КонецЕсли;

КонецПроцедуры

//Процедура обработки изменения режима отображения
//
Процедура ФлажокСвернутьПодразделенияПриИзменении(Элемент)
	//"Перестраиваем" отчет
	Если НЕ мМодифицировано Тогда
		ДействияФормыСводОтчисленийВФондыСформировать();
	КонецЕсли;

КонецПроцедуры

//Процедура изменения состояния флажка "Отображать базу" 
//
Процедура ФлажокБазаПриИзменении(Элемент)
	//"Перестраиваем" отчет
	Если НЕ мМодифицировано Тогда
		ДействияФормыСводОтчисленийВФондыСформировать();
	КонецЕсли;

КонецПроцедуры

//Процедура изменения состояния флажка "Отображать базу с ограничением"
//
Процедура ФлажокБазаСОгрПриИзменении(Элемент)
	//"Перестраиваем" отчет
	Если НЕ мМодифицировано Тогда
		ДействияФормыСводОтчисленийВФондыСформировать();
	КонецЕсли;

КонецПроцедуры

//Процедура изменения состояния флажка "Отображать сумму взноса"
//
Процедура ФлажокСуммаВзносаПриИзменении(Элемент)
	//"Перестраиваем" отчет
	Если НЕ мМодифицировано Тогда
		ДействияФормыСводОтчисленийВФондыСформировать();
	КонецЕсли;

КонецПроцедуры

Процедура ПолеВидаСравненияПодразделениеПриИзменении(Элемент)
		
	Если ТипЗнч(Подразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		ЗаписываемоеЗначение = Подразделение;                                                               
	ИначеЕсли (Подразделение <> Неопределено) Тогда
		Если Подразделение.Количество() = 0 Тогда    
			ЗаписываемоеЗначение = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.ПодразделенияОрганизаций")
		Иначе
			ЗаписываемоеЗначение = Подразделение[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.Значение = ВидСравнения.ВСписке ИЛИ Элемент.Значение = ВидСравнения.НеВСписке Тогда
		
		ЭлементыФормы.ПолеНастройкиПодразделение.ОграничениеТипа	  = Новый ОписаниеТипов("СписокЗначений");
        Подразделение = Новый СписокЗначений;
		Если ЗначениеЗаполнено(ЗаписываемоеЗначение) Тогда
			Подразделение.Добавить(ЗаписываемоеЗначение);
		КонецЕсли;
		
	Иначе              
		
		ЭлементыФормы.ПолеНастройкиПодразделение.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
		Подразделение	 = ЗаписываемоеЗначение;
		
	КонецЕсли; 
	

КонецПроцедуры


Процедура ПолеВидаСравненияОрганизацияПриИзменении(Элемент)
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		ЗаписываемоеЗначение = Организация;                                                               
	ИначеЕсли Организация <> Неопределено Тогда
		Если Организация.Количество() = 0 Тогда    
			ЗаписываемоеЗначение = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
		Иначе
			ЗаписываемоеЗначение = Организация[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.Значение = ВидСравнения.ВСписке ИЛИ Элемент.Значение = ВидСравнения.НеВСписке Тогда
		
		ЭлементыФормы.ПолеНастройкиОрганизация.ОграничениеТипа	  = Новый ОписаниеТипов("СписокЗначений");
        Организация = Новый СписокЗначений;
		Если ЗначениеЗаполнено(ЗаписываемоеЗначение) Тогда
			Организация.Добавить(ЗаписываемоеЗначение);
		КонецЕсли;
		
	Иначе              
		
		ЭлементыФормы.ПолеНастройкиОрганизация.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
		Организация = ЗаписываемоеЗначение;
		
	КонецЕсли; 
	
	//ОбновитьЗаголовокОкна();
КонецПроцедуры

Процедура ФлажокНастройкиОрганизацияПриИзменении(Элемент)
	Значение = Элемент.Значение;
	
	Если ЭлементыФормы.ФлажокНастройкиОрганизация.Значение Тогда
		ЭлементыФормы.ПолеНастройкиПодразделение.Доступность = Истина;
		ЭлементыФормы.ПолеВидаСравненияПодразделение.Доступность = Истина;
		ЭлементыФормы.ФлажокНастройкиПодразделение.Доступность = Истина;
	Иначе
		ЭлементыФормы.ПолеНастройкиПодразделение.Значение = "";
		ЭлементыФормы.ПолеНастройкиПодразделение.Доступность = Ложь;
		ЭлементыФормы.ПолеВидаСравненияПодразделение.Доступность = Ложь;
		ЭлементыФормы.ФлажокНастройкиПодразделение.Значение = Ложь;
		ЭлементыФормы.ФлажокНастройкиПодразделение.Доступность = Ложь;
	КонецЕсли;				

КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////


//Варианты представления отчета
ЭлементыФормы.РежимОтображения.СписокВыбора.Добавить(НСтр("ru='Показывать только подразделения';uk='Показувати тільки підрозділи'"));
ЭлементыФормы.РежимОтображения.СписокВыбора.Добавить(НСтр("ru='Показывать подразделения и сотрудников';uk='Показувати підрозділи й співробітників'"));
ЭлементыФормы.РежимОтображения.СписокВыбора.Добавить(НСтр("ru='Показывать подразделения, сотрудников и периоды';uk='Показувати підрозділи, співробітників і періоди'"));
ЭлементыФормы.РежимОтображения.СписокВыбора.Добавить(НСтр("ru='Показывать подразделения и периоды';uk='Показувати підрозділи й періоди'"));
ЭлементыФормы.РежимОтображения.СписокВыбора.Добавить(НСтр("ru='Показывать сотрудников и периоды';uk='Показувати співробітників і періоди'"));
