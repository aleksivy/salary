////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
//каждая закладка отчета - это объект ПолеТабличногоДокумента
Перем мОтчетОКоличествеРаботников;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;
Перем Пол;

Перем МассивШтатных;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы;
Перем мПечатныеФормы Экспорт;

Перем мСоставПоказателей Экспорт;

Перем ЕстьДуплекс;

 
// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураПоказателейВнутрСвязи = Новый Структура;

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		Если НЕ (ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента")) Тогда
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		//Если ТекущаяОбласть.Защита Тогда
		//	Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателейМес");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий параметры автозаполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки параметров автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии формы для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя, а в текущей - отключено.
							// В этом случае удаляем ячейку из таблицы пользовательских настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Процедура управляет показом в форме периода построения отчета,
Процедура ПоказатьПериод()

	ПериодОтчета = Формат(мДатаКонцаПериодаОтчета, "ДФ = ' гггг';Л = uk_UA") + " р.";
	
	мОтчетОКоличествеРаботников.Области.ПериодОтчета.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг';Л = uk_UA") + " рік";
	
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (на " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг';Л = uk_UA") + " року)";
	
	
	
	
КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
// пока не прописаны коды - вернуться
Процедура ЗаполнитьСведенияОбОрганизации()
    РабДата=ЭлементыФормы.ПолеВводаДатаСдачи.Значение;
	ОргНазв = Организация.НаименованиеПолное;
	мОтчетОКоличествеРаботников.Области.ОргНазв.Значение = ОргНазв;

	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","КодКОАТУУ");
	СписокПоказателей.Добавить("","КодКФВ");
	СписокПоказателей.Добавить("","КодКВЕД");
	СписокПоказателей.Добавить("","Территория");
	СписокПоказателей.Добавить("","ОрганГУ"); 
	СписокПоказателей.Добавить("","КодОПФГ");
      //мДатаКонцаПериодаОтчета
	ФИОДиректора       = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабДата, СписокПоказателей).ФИОРук;
	ФИОГлавБуха        = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабДата, СписокПоказателей).ФИОБух;
	КодЕДРПОУ          = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабДата, СписокПоказателей).КодПоЕДРПОУ;
	КодКОАТУУ          = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабДата, СписокПоказателей).КодКОАТУУ;
	КодКФВ             = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабДата, СписокПоказателей).КодКФВ;
    КодКВЕД            = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабДата, СписокПоказателей).КодКВЕД;
	ОрганГУ            = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабДата, СписокПоказателей).ОрганГУ;
	КодОПФГ     	   = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабДата, СписокПоказателей).КодОПФГ;
	
	 мОтчетОКоличествеРаботников.Области.ОргЮрАдрес.Значение  = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
 	 мОтчетОКоличествеРаботников.Области.ОргАдрес.Значение    = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Фактический");
 
	Для НомЯчейки = 1 По 8 Цикл
			ЭлементыФормы["ПолеТабличногоДокументаОтчетОКоличествеРаботников"].Области["ЕДРПОУ" + НомЯчейки].Значение = Сред(Строка(КодЕДРПОУ), НомЯчейки, 1);
	КонецЦикла;
 	
    УстановитьЗначениеПоказателя ("ОргДиректор", ФИОДиректора);
	
    УстановитьЗначениеПоказателя ("Телефон", УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация));
    УстановитьЗначениеПоказателя ("Факс",    УправлениеКонтактнойИнформацией.ПолучитьФаксИзКонтактнойИнформации(Организация));
    УстановитьЗначениеПоказателя ("ЭлПочта", УправлениеКонтактнойИнформацией.ПолучитьEmailИзКонтактнойИнформации(Организация));
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "ОтчетОКоличествеРаботников";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Коммент           = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Коммент)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Коммент;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетОКоличествеРаботников";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

 // Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";

	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Обновляет пользовательские настройки при изменении версии формы.
// унифицирована, однако использование пока ... вопрос
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Измененилась версия формы отчета.
	         |Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	Если ЕстьИзмененияВариантыЗаполнения Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()


// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяЯчейка) <> Тип("РисунокТабличногоДокумента") Тогда

		Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
			Возврат;
		КонецЕсли;

		Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
			ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
			Возврат;
		КонецЕсли;

		Если ТекущаяЯчейка.Защита Тогда
			ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетОКоличествеРаботников";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Коммент           = НайденнаяСтрока.Комментарий;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Коммент;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетОКоличествеРаботников"; 

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		
		// Очищаем комментарий редактируемой ячейки
		ТекущаяОбласть.Примечание.Текст = "";

	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетОКоличествеРаботников";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;
    КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Коммент)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетОКоличествеРаботников";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Коммент;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Коммент;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя)

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("ОтчетОКоличествеРаботников");
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	мОтчетОКоличествеРаботников.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		Если Тип ("РисунокТабличногоДокумента") <> ТипЗнч (ТекущаяОбласть) Тогда
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ТекущаяОбласть.СодержитЗначение Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяОбласть.Очистить();
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить()

	// Очищаем содержимое ячеек поля табличного документа
	ТекТабличноеПоле = мОтчетОКоличествеРаботников;
	ОчиститьТабличноеПоле(ТекТабличноеПоле);
    // Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;
	ЗаполнитьСведенияОбОрганизации();

КонецПроцедуры // Очистить()

Процедура РазбитьПечатнуюФорму(ПечФорма)
	
	ИмяФормы = "Отчет по количеству работников";
	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = Истина;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	Если ЕстьДуплекс Тогда
		НовТаблДок = Новый ТабличныйДокумент();
	КонецЕсли;
	
	Для Сч = 1 По ПечФорма.ВысотаТаблицы Цикл
		
		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			// проверим, не должна ли предпоследняя строка печататься вместе со текущей ("не влезшей") строкой.
			// если так, то "откатимся" вверх
			Пока ПослВерх < Сч-1 И ПечФорма.ПолучитьОбласть(Сч-1, , Сч-1, ).Область().ВместеСоСледующим Цикл
				Сч = Сч - 1;
			КонецЦикла; 
			
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		Если НЕ ЕстьДуплекс Тогда
			НовТаблДок = Новый ТабличныйДокумент();
		КонецЕсли;
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = Истина;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		Если НЕ ЕстьДуплекс Тогда
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
		КонецЕсли;
	КонецЕсли;
	Если ЕстьДуплекс Тогда
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати)
	мПечатныеФормы.Очистить();

	ПечатнаяФорма = Новый ТабличныйДокумент();
    	
	ОбластьПечати = мОтчетОКоличествеРаботников.ПолучитьОбласть("Шапка");
	ПечатнаяФорма.Вывести(ОбластьПечати);

	ОбластьПечати = мОтчетОКоличествеРаботников.ПолучитьОбласть("Отчет");
	ПечатнаяФорма.Вывести(ОбластьПечати);
	
	ОбластьПечати = мОтчетОКоличествеРаботников.ПолучитьОбласть("Подвал");
	ПечатнаяФорма.Вывести(ОбластьПечати);
	
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();


	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;

	РазбитьПечатнуюФорму(ПечатнаяФорма);
	
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()


// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить() Экспорт
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.

		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;

		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();

	КонецЕсли;
    
	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаОтчетОКоличествеРаботников";
	
	ТекТабличноеПоле        = мОтчетОКоличествеРаботников;

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// Сохраняем выбранные листы для печати в хранилище
	ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
	мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	Модифицированность = Ложь;
	
    Возврат Истина;
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Расшифровка;

	// восстанавливаем реквизиты отчета
	Организация              = мСохраненныйДок.Организация;
	
	ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок= Организация.Наименование;
	
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();


	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
		//	Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			Попытка
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
				Продолжить;
			КонецПопытки;	
		КонецЦикла;
	КонецЦикла;
	
    УстановитьФорматВывода();
	
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()


// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()
	
  //мОтчетОКоличествеРаботников.Области.П13020_1.Значение = мОтчетОКоличествеРаботников.Области.П13030_1.Значение
  //													  + мОтчетОКоличествеРаботников.Области.П13040_1.Значение;
  //  													
  //мОтчетОКоличествеРаботников.Области.П13020_2.Значение = мОтчетОКоличествеРаботников.Области.П13030_2.Значение			
  //													  + мОтчетОКоличествеРаботников.Области.П13040_2.Значение;
  //  													
  //мОтчетОКоличествеРаботников.Области.П13020_3.Значение = мОтчетОКоличествеРаботников.Области.П13030_3.Значение			
  //													  + мОтчетОКоличествеРаботников.Области.П13040_3.Значение;
  //  													
  //мОтчетОКоличествеРаботников.Области.П13020_4.Значение = мОтчетОКоличествеРаботников.Области.П13030_4.Значение			
  //													  + мОтчетОКоличествеРаботников.Области.П13040_4.Значение;
  //  													
  //мОтчетОКоличествеРаботников.Области.П13020_5.Значение = мОтчетОКоличествеРаботников.Области.П13030_5.Значение			
  //													  + мОтчетОКоличествеРаботников.Области.П13040_5.Значение;


  //мОтчетОКоличествеРаботников.Области.П13050_1.Значение = мОтчетОКоличествеРаботников.Области.П13060_1.Значение
  //  													+ мОтчетОКоличествеРаботников.Области.П13070_1.Значение;
  //  													
  //мОтчетОКоличествеРаботников.Области.П13050_2.Значение = мОтчетОКоличествеРаботников.Области.П13060_2.Значение
  //  													+ мОтчетОКоличествеРаботников.Области.П13070_2.Значение;

  //мОтчетОКоличествеРаботников.Области.П13050_3.Значение = мОтчетОКоличествеРаботников.Области.П13060_3.Значение
  //  													+ мОтчетОКоличествеРаботников.Области.П13070_3.Значение;
  //  													
  //мОтчетОКоличествеРаботников.Области.П13050_4.Значение = мОтчетОКоличествеРаботников.Области.П13060_4.Значение
  //  													+ мОтчетОКоличествеРаботников.Области.П13070_4.Значение;
  //  													
  //мОтчетОКоличествеРаботников.Области.П13050_5.Значение = мОтчетОКоличествеРаботников.Области.П13060_5.Значение
  //  													+ мОтчетОКоличествеРаботников.Области.П13070_5.Значение;
  //  													
  //  													
	
   мОтчетОКоличествеРаботников.Области.П13010_1.Значение = мОтчетОКоличествеРаботников.Области.П13020_1.Значение
                                                         + мОтчетОКоличествеРаботников.Области.П13050_1.Значение;
														 
   мОтчетОКоличествеРаботников.Области.П13010_2.Значение = мОтчетОКоличествеРаботников.Области.П13020_2.Значение
                                                         + мОтчетОКоличествеРаботников.Области.П13050_2.Значение;

   мОтчетОКоличествеРаботников.Области.П13010_3.Значение = мОтчетОКоличествеРаботников.Области.П13020_3.Значение
                                                         + мОтчетОКоличествеРаботников.Области.П13050_3.Значение;
														 
   мОтчетОКоличествеРаботников.Области.П13010_4.Значение = мОтчетОКоличествеРаботников.Области.П13020_4.Значение
                                                         + мОтчетОКоличествеРаботников.Области.П13050_4.Значение;
														 
   мОтчетОКоличествеРаботников.Области.П13010_5.Значение = мОтчетОКоличествеРаботников.Области.П13020_5.Значение
                                                         + мОтчетОКоличествеРаботников.Области.П13050_5.Значение;
														 
   мОтчетОКоличествеРаботников.Области.П14010_1.Значение = мОтчетОКоличествеРаботников.Области.П14020_1.Значение														 
		                                                 + мОтчетОКоличествеРаботников.Области.П14030_1.Значение;
														 
														 
   мОтчетОКоличествеРаботников.Области.П14010_2.Значение = мОтчетОКоличествеРаботников.Области.П14020_2.Значение														 
		                                                 + мОтчетОКоличествеРаботников.Области.П14030_2.Значение;
														 
														 
   мОтчетОКоличествеРаботников.Области.П14010_3.Значение = мОтчетОКоличествеРаботников.Области.П14020_3.Значение														 
		                                                 + мОтчетОКоличествеРаботников.Области.П14030_3.Значение;
														 
   мОтчетОКоличествеРаботников.Области.П14010_4.Значение = мОтчетОКоличествеРаботников.Области.П14020_4.Значение														 
		                                                 + мОтчетОКоличествеРаботников.Области.П14030_4.Значение;
													 
   мОтчетОКоличествеРаботников.Области.П14010_5.Значение = мОтчетОКоличествеРаботников.Области.П14020_5.Значение														 
		                                                 + мОтчетОКоличествеРаботников.Области.П14030_5.Значение;
														 
   мОтчетОКоличествеРаботников.Области.П14010_6.Значение = мОтчетОКоличествеРаботников.Области.П14020_6.Значение														 
		                                                 + мОтчетОКоличествеРаботников.Области.П14030_6.Значение;
														 
   мОтчетОКоличествеРаботников.Области.П14010_7.Значение = мОтчетОКоличествеРаботников.Области.П14020_7.Значение								 
		                                                 + мОтчетОКоличествеРаботников.Области.П14030_7.Значение;
														 
КонецПроцедуры                                           

Процедура РассчитатьЧислоЧеловекВОтпусках()
	Если    (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП") 
		ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") 
		ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "УТП") Тогда
	
		Запрос=Новый Запрос;
		ТекстЗапроса ="ВЫБРАТЬ
		|	СостояниеРаботниковОрганизацийСрезПоследних.Сотрудник.Физлицо КАК КолОбщее,
		|	ВЫБОР
		|		КОГДА СостояниеРаботниковОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол = &Пол
		|			ТОГДА ""Женский""
		|	КОНЕЦ КАК ОбщееКолЖен
		|ИЗ
		|	РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних(&НаДату, (Состояние = &НужноеСостояние) И (Организация = &Организация)) КАК СостояниеРаботниковОрганизацийСрезПоследних
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КолОбщее),
		|	КОЛИЧЕСТВО(ОбщееКолЖен)
		|ПО
		|	ОБЩИЕ";
		
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("НаДату",мДатаКонцаПериодаОтчета);
		Запрос.УстановитьПараметр("Пол", Пол);
		Запрос.УстановитьПараметр("ДатаАктуальности_Год",Год(мДатаКонцаПериодаОтчета));
		Запрос.УстановитьПараметр("ДатаАктуальности_Месяц",Месяц(мДатаКонцаПериодаОтчета));
		Запрос.УстановитьПараметр("ДатаАктуальности_День",День(мДатаКонцаПериодаОтчета));
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("НужноеСостояние",Перечисления.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком);
		
		ВыборкаЗапроса = Запрос.Выполнить().Выгрузить();
		
		КолЖенщин = ВыборкаЗапроса.Итог("ОбщееКолЖен");
		КолОбщее  = ВыборкаЗапроса.Итог("КолОбщее");
		
		УстановитьЗначениеПоказателя("П12150_1",КолОбщее);
		УстановитьЗначениеПоказателя("П12150_2",КолЖенщин);
		
	КонецЕсли;
	
КонецПроцедуры	

// Процедура рассчитывает количество инвалидов общее и среди них женщин
Процедура РассчитатьКоличествоИнвалидов()
	Если    (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП") 
		ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") 
		ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "УТП") Тогда
		
		Группа=Перечисления.ГруппыИнвалидности.ТретьяГруппа;
		ЗапросИнв = Новый Запрос;
		ТекстЗапросаИнв ="ВЫБРАТЬ
		|	РаботникиОрганизацийСрезПоследних.Физлицо КАК Физлицо,
		|	ВЫБОР
		|		КОГДА СведенияОбИнвалидностиФизлицСрезПоследних.Инвалидность = ИСТИНА
		|			ТОГДА СведенияОбИнвалидностиФизлицСрезПоследних.Физлицо
		|	КОНЕЦ КАК КолОбщееИнвалидность,
		|	ВЫБОР
		|		КОГДА СведенияОбИнвалидностиФизлицСрезПоследних.Инвалидность = ИСТИНА
		|			ТОГДА ВЫБОР
		|					КОГДА СведенияОбИнвалидностиФизлицСрезПоследних.Физлицо.Пол = &Пол
		|						ТОГДА СведенияОбИнвалидностиФизлицСрезПоследних.Физлицо
		|				КОНЕЦ
		|	КОНЕЦ КАК КолОбщееИнвалидностьЖен,
		|	ВЫБОР
		|		КОГДА СведенияОбИнвалидностиФизлицСрезПоследних.Группа = &Группа
		|			ТОГДА СведенияОбИнвалидностиФизлицСрезПоследних.Физлицо
		|	КОНЕЦ КАК ГруппаОбщ,
		|	ВЫБОР
		|		КОГДА СведенияОбИнвалидностиФизлицСрезПоследних.Группа = &Группа
		|			ТОГДА ВЫБОР
		|					КОГДА СведенияОбИнвалидностиФизлицСрезПоследних.Физлицо.Пол = &Пол
		|						ТОГДА СведенияОбИнвалидностиФизлицСрезПоследних.Физлицо
		|				КОНЕЦ
		|	КОНЕЦ КАК ГруппаЖен
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Физлицо
	    |    ИЗ 
		|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НаДату, (ЗанимаемыхСтавок > 0) И (Организация = &Организация)) КАК РаботникиОрганизацийСрезПоследних) КАК РаботникиОрганизацийСрезПоследних
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&НаДату, ) КАК СведенияОбИнвалидностиФизлицСрезПоследних
		|       	ПО СведенияОбИнвалидностиФизлицСрезПоследних.Физлицо = РаботникиОрганизацийСрезПоследних.ФизЛицо
		|ИТОГИ
		|	КОЛИЧЕСТВО(Физлицо),
		|	КОЛИЧЕСТВО(КолОбщееИнвалидность),
		|	КОЛИЧЕСТВО(КолОбщееИнвалидностьЖен),
		|	КОЛИЧЕСТВО(ГруппаОбщ),
		|	КОЛИЧЕСТВО(ГруппаЖен)
		|ПО
		|	ОБЩИЕ";
		
		ЗапросИнв.УстановитьПараметр("НаДату", мДатаКонцаПериодаОтчета);
		ЗапросИнв.УстановитьПараметр("Пол", Пол);
		ЗапросИнв.УстановитьПараметр("Группа", Группа);
		ЗапросИнв.УстановитьПараметр("Организация",Организация);
		
		ЗапросИнв.Текст = ТекстЗапросаИнв; 
		
		ВыборкаЗапросаИнв=ЗапросИнв.Выполнить().Выгрузить();
		
		КолОбщееИнвалидность=ВыборкаЗапросаИнв.Итог("КолОбщееИнвалидность");
		КолОбщееИнвалидностьЖен=ВыборкаЗапросаИнв.Итог("КолОбщееИнвалидностьЖен");
		ГруппаЖен=ВыборкаЗапросаИнв.Итог("ГруппаЖен");
		ГруппаОбщ=ВыборкаЗапросаИнв.Итог("ГруппаОбщ");
		
		УстановитьЗначениеПоказателя("П12120_1",КолОбщееИнвалидность);
		УстановитьЗначениеПоказателя("П12120_2",КолОбщееИнвалидностьЖен);
		
		УстановитьЗначениеПоказателя("П12130_1",ГруппаОбщ);
		УстановитьЗначениеПоказателя("П12130_1",ГруппаЖен);
		
	КонецЕсли;
	
КонецПроцедуры	
	
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто() Экспорт
	
	Пол = Перечисления.ПолФизическихЛиц.Женский;
	Запрос=Новый Запрос;
		
	ТекстЗапроса ="ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК КолОбщее,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол = &Пол
	|			ТОГДА ""Женский""
	|	КОНЕЦ КАК ОбщееКолЖен,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) = 1
	|					ТОГДА 0
	|				ИНАЧЕ &ДатаАктуальности_Год - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) 
	|			  КОНЕЦ МЕЖДУ 15 И 34
	|			ТОГДА ВЫБОР
	|                     КОГДА МЕСЯЦ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) * 100 + ДЕНЬ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) < &ДатаАктуальности_Месяц * 100 + &ДатаАктуальности_День
	|                       ТОГДА ВЫБОР
	|					          КОГДА РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол = &Пол  
	|							    ТОГДА ""Женский""
	|                              КОНЕЦ
	|				КОНЕЦ
	|	КОНЕЦ КАК КолЖен15_34,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) = 1
	|					ТОГДА 0
	|				ИНАЧЕ &ДатаАктуальности_Год - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения)       
	|			КОНЕЦ МЕЖДУ 15 И 34
	|			ТОГДА ВЫБОР
	|                     КОГДА МЕСЯЦ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) * 100 + ДЕНЬ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) < &ДатаАктуальности_Месяц * 100 + &ДатаАктуальности_День
	|                     Тогда""15_34""
	|                КОНЕЦ
	|	КОНЕЦ КАК Кол15_34,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) = 1
	|					ТОГДА 0
	|				ИНАЧЕ &ДатаАктуальности_Год - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) 
	|			КОНЕЦ МЕЖДУ 15 И 24
	|			ТОГДА ВЫБОР
	|                     КОГДА МЕСЯЦ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) * 100 + ДЕНЬ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) < &ДатаАктуальности_Месяц * 100 + &ДатаАктуальности_День
	|                       ТОГДА ВЫБОР
	|					          КОГДА РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол = &Пол  
	|							    ТОГДА ""Женский""
	|                              КОНЕЦ
	|				КОНЕЦ
	|	КОНЕЦ КАК КолЖен15_24,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) = 1
	|					ТОГДА 0
	|				ИНАЧЕ &ДатаАктуальности_Год - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения)              
	|			КОНЕЦ МЕЖДУ 15 И 24
	|			ТОГДА ВЫБОР
	|                     КОГДА МЕСЯЦ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) * 100 + ДЕНЬ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) < &ДатаАктуальности_Месяц * 100 + &ДатаАктуальности_День
	|                     Тогда""15_24""
	|                КОНЕЦ
	|	КОНЕЦ КАК Кол15_24,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) = 1
	|					ТОГДА 0
	|				ИНАЧЕ &ДатаАктуальности_Год - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) 
	|			КОНЕЦ МЕЖДУ 50 И 54
	| 		ТОГДА ВЫБОР
	|                     КОГДА МЕСЯЦ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) * 100 + ДЕНЬ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) < &ДатаАктуальности_Месяц * 100 + &ДатаАктуальности_День
	|                     Тогда""50_54""
	|                КОНЕЦ
	|	КОНЕЦ КАК Кол50_54,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) = 1
	|					ТОГДА 0
	|				ИНАЧЕ &ДатаАктуальности_Год - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) 
	|			КОНЕЦ МЕЖДУ 50 И 54
	|			ТОГДА ВЫБОР
	|                     КОГДА МЕСЯЦ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) * 100 + ДЕНЬ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) < &ДатаАктуальности_Месяц * 100 + &ДатаАктуальности_День
	|                       ТОГДА ВЫБОР
	|					          КОГДА РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол = &Пол  
	|							    ТОГДА ""Женский""
	|                              КОНЕЦ
	|				КОНЕЦ
	|	КОНЕЦ КАК КолЖен50_54,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) = 1
	|					ТОГДА 0
	|				ИНАЧЕ &ДатаАктуальности_Год - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) 
	|			КОНЕЦ МЕЖДУ 55 И 59
	| 		ТОГДА ВЫБОР
	|           КОГДА МЕСЯЦ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) * 100 + ДЕНЬ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) < &ДатаАктуальности_Месяц * 100 + &ДатаАктуальности_День
	|                Тогда""55_59""
	|                КОНЕЦ
	|	КОНЕЦ КАК Кол55_59,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) = 1
	|					ТОГДА 0
	|				ИНАЧЕ &ДатаАктуальности_Год - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) 
	|			КОНЕЦ МЕЖДУ 55 И 59
	|			ТОГДА ВЫБОР
	|                     КОГДА МЕСЯЦ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) * 100 + ДЕНЬ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения) < &ДатаАктуальности_Месяц * 100 + &ДатаАктуальности_День
	|                       ТОГДА ВЫБОР
	|					          КОГДА РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол = &Пол  
	|							    ТОГДА ""Женский""
	|                              КОНЕЦ
	|				КОНЕЦ
	|	КОНЕЦ КАК КолЖен55_59,
	|	ВЫБОР
	|		КОГДА СведенияОПенсионерахСрезПоследних.Пенсионер = ИСТИНА
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол = &Пол
	|						ТОГДА СведенияОПенсионерахСрезПоследних.ФизЛицо
	|				КОНЕЦ
	|	КОНЕЦ КАК КолЖенПенсионеров,
	|	ВЫБОР
	|		КОГДА СведенияОПенсионерахСрезПоследних.Пенсионер = ИСТИНА
	|			ТОГДА СведенияОПенсионерахСрезПоследних.ФизЛицо
	|	КОНЕЦ КАК КолПенсионеровОбщ
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НаДату, ((Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы) И (Организация = &Организация))) 
	|КАК РаботникиОрганизацийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионерах.СрезПоследних(&НаДату, ) КАК СведенияОПенсионерахСрезПоследних
	|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = СведенияОПенсионерахСрезПоследних.ФизЛицо
	|ГДЕ РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок > 0
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КолОбщее),
	|	КОЛИЧЕСТВО(ОбщееКолЖен),
	|	КОЛИЧЕСТВО(КолЖен15_34),
	|	КОЛИЧЕСТВО(Кол15_34),
	|	КОЛИЧЕСТВО(Кол15_24),
	|	КОЛИЧЕСТВО(КолЖен15_24),
	|	КОЛИЧЕСТВО(Кол50_54),
	|	КОЛИЧЕСТВО(КолЖен50_54),
	|	КОЛИЧЕСТВО(Кол55_59),
	|	КОЛИЧЕСТВО(КолЖен55_59),
	|	КОЛИЧЕСТВО(КолЖенПенсионеров),
	|	КОЛИЧЕСТВО(КолПенсионеровОбщ)
	|ПО
	|	ОБЩИЕ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НаДату",мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Пол", Пол);
	Запрос.УстановитьПараметр("ДатаАктуальности_Год",  Год(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаАктуальности_Месяц",Месяц(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаАктуальности_День", День(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("ОсновноеМестоРаботы",   Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выгрузить();
	
	КолЖенщин = ВыборкаЗапроса.Итог("ОбщееКолЖен");
	КолОбщее  = ВыборкаЗапроса.Итог("КолОбщее");
	
	УстановитьЗначениеПоказателя("П12010_1",КолОбщее);
	УстановитьЗначениеПоказателя("П12010_2",КолЖенщин);
	
	Кол15_34    = ВыборкаЗапроса.Итог("Кол15_34");
	КолЖен15_34 = ВыборкаЗапроса.Итог("КолЖен15_34");
	
	УстановитьЗначениеПоказателя("П12030_1",Кол15_34);
	УстановитьЗначениеПоказателя("П12030_2",КолЖен15_34);
	
	Кол15_24   = ВыборкаЗапроса.Итог("Кол15_24");
	КолЖен15_24= ВыборкаЗапроса.Итог("КолЖен15_24");
	
	УстановитьЗначениеПоказателя("П12040_1",Кол15_24);
	УстановитьЗначениеПоказателя("П12040_2",КолЖен15_24);
	
	Кол50_54    = ВыборкаЗапроса.Итог("Кол50_54");
	КолЖен50_54 = ВыборкаЗапроса.Итог("КолЖен50_54");
	
	УстановитьЗначениеПоказателя("П12050_1",Кол50_54);
	УстановитьЗначениеПоказателя("П12050_2",КолЖен50_54);
	
	Кол55_59    = ВыборкаЗапроса.Итог("Кол55_59");
	КолЖен55_59 = ВыборкаЗапроса.Итог("КолЖен55_59");
	
	УстановитьЗначениеПоказателя("П12060_1",Кол55_59);
	УстановитьЗначениеПоказателя("П12060_2",КолЖен55_59);
	
	КолПенсионеровОбщ = ВыборкаЗапроса.Итог("КолПенсионеровОбщ");
	КолЖенПенсионеров = ВыборкаЗапроса.Итог("КолЖенПенсионеров");
	
	УстановитьЗначениеПоказателя("П12090_1",КолПенсионеровОбщ);
	УстановитьЗначениеПоказателя("П12090_2",КолЖенПенсионеров);
	
	РассчитатьКоличествоИнвалидов();
	
	РассчитатьЧислоЧеловекВОтпусках();
	
	ЗаполнитьСведенияОбОрганизации();
	
	Модифицированность = Истина;

КонецПроцедуры // ЗаполнитьАвто()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетОКоличествеРаботников";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = "Значение вычисляется автоматически";
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = "Значение вводится вручную";
		КонецЕсли;

		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();     

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Предварительный просмотр';uk='Попередній перегляд'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
								
	ЭлементМеню.Кнопки.Добавить("Разделитель1", ТипКнопкиКоманднойПанели.Разделитель);

	ЭлементМеню.Кнопки.Добавить("ЕстьДуплекс", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Принтер поддерживает автом. дуплекс';uk='Принтер підтримує автом. дуплекс'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
								
	ЭлементМеню.Кнопки.ЕстьДуплекс.Пометка = ЕстьДуплекс;

	ЛинияСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЛинияПусто = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);

	мМассивТиповЛиний = Новый Массив();
	мМассивТиповЛиний.Вставить(0, ЛинияПусто);
	мМассивТиповЛиний.Вставить(1, ЛинияСнизу);
	
	ЭлементыФормы.ПолеТабличногоДокументаОтчетОКоличествеРаботников.ОбластьПечати = ЭлементыФормы.ПолеТабличногоДокументаОтчетОКоличествеРаботников.Области.Найти("ПредупреждениеОПечати");

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	Перем ИсходноеКоличествоСтрокГруппы;

	ЭтаФорма.АвтоЗаголовок = Ложь;

	мОтчетОКоличествеРаботников = ЭлементыФормы.ПолеТабличногоДокументаОтчетОКоличествеРаботников;
	ТекТабличноеПоле = мОтчетОКоличествеРаботников;
	
	Если мСохраненныйДок = Неопределено Тогда


		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
 			ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
			УстановитьФорматВывода();
		КонецЕсли;
          		
		ЗаполнитьСведенияОбОрганизации();
       
	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();
	
	мОтчетОКоличествеРаботников.ТолькоПросмотр = Истина;

	УстановитьЦветФонаЯчейки(,,"ОтчетОКоличествеРаботников");

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность = Истина Тогда

		Ответ = Вопрос("Данные были изменены. Сохранить изменения ?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;
    СохранитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс", ЕстьДуплекс);

КонецПроцедуры // ПередЗакрытием()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	// Заглушка
	//ЗаполнитьДемо();
	
	Очистить();
	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Если Найти(Кнопка.Имя, "Дуплекс") >0 Тогда
		     ЕстьДуплекс    = НЕ Кнопка.Пометка;
			 Кнопка.Пометка = НЕ Кнопка.Пометка;
		Иначе
			 Печать(Кнопка.Имя);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		ЭтаФорма.Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА
// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)
	
	//Заполнение реквизитов
	
	
	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	
	//мОтчетОКоличествеРаботников.Области.ДеньДаты.Значение 	= ЧастиДатыПодписи.День;
	//мОтчетОКоличествеРаботников.Области.МесяцДаты.Значение 	= ЧастиДатыПодписи.Месяц;
	//мОтчетОКоличествеРаботников.Области.ГодДаты.Значение 	= ЧастиДатыПодписи.Год;
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа.
//
Процедура ПолеВыбораВариантЗаполненияОтчетОКоличествеРаботниковПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки.
//
Процедура ПолеВводаЗначениеКорректировкиОтчетОКоличествеРаботниковПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиПриИзменении

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// "Комментарий" по ячейке, для которой установлен алгоритм автозаполнения 
// [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийОтчетОКоличествеРаботниковПриИзменении(Элемент)

	Коммент = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Коммент);

КонецПроцедуры // ПолеВводаКомментарийПриИзменении()

Процедура ПолеТабличногоДокументаОтчетОКоличествеРаботниковПриАктивизацииОбласти(Элемент)
	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа.
//   Устанавливает признак модифицированности данных в форме, вызывает пересчет
// вычисляемых показателей  табличных полей и обновляет структуру данных
// многострочного раздела.
//
Процедура ПолеТабличногоДокументаОтчетОКоличествеРаботниковПриИзменении(Элемент)

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	Расчет();
	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаБалансПриИзменении()

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетОКоличествеРаботников.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетОКоличествеРаботников.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетОКоличествеРаботников.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");



ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));


ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       НСтр("ru='в гривнях';uk='у гривнях'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    НСтр("ru='в тысячах гривень';uk='у тисячах гривень'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, НСтр("ru='в миллионах гривень';uk='у мільйонах гривень'"));


// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
мВерсияФормы = "01/01/2009";

мПечатныеФормы = Новый СписокЗначений;

мСоставПоказателей = "СоставПоказателей";

ЕстьДуплекс = ВосстановитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс");
Если НЕ ТипЗнч(ЕстьДуплекс) = Тип("Булево") Тогда
	ЕстьДуплекс = Ложь;	
КонецЕсли;