////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
//каждая закладка отчета - это объект ПолеТабличногоДокумента
Перем мОтчетОРабочемВремени;

Перем ЕДРПОУ, КВЕД, Инд;

// переменный для хранения бухгалтерских итогов
Перем мБухИтоги;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы;

//вспомогательные переменные
Перем ТаблицаРезультатов;

// хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов;
Перем мСтруктураИсхКолвоСтрокРазделов;
Перем спПараметрыСтраницы;

Перем мПечатныеФормы Экспорт;

// Хранит название макета состава показателей
Перем мСоставПоказателей Экспорт;

Перем СпП Экспорт;

Перем ЕстьДуплекс;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураПоказателейВнутрСвязи = Новый Структура;

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		Если Тип ("РисунокТабличногоДокумента") <> ТипЗнч (ТекущаяОбласть) Тогда
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;
       
			//Если (ТекущаяОбласть.Защита) Тогда
			//	Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
			//		Продолжить;
			//	КонецЕсли;
			//КонецЕсли;
        
			ИмяПоказателя      = ТекущаяОбласть.Имя;
			ЗначениеПоказателя = ТекущаяОбласть.Значение;
			СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
        
	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
// редакция не требуется,унифицирована для всех отчетов 
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий параметры автозаполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки параметров автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии формы для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя, а в текущей - отключено.
							// В этом случае удаляем ячейку из таблицы пользовательских настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Процедура управляет показом в форме периода построения отчета,
Процедура ПоказатьПериод()
	СтрПериодОтчета = ПредставлениеПериода(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "Л = uk_UA; ФП = Истина" );
	//мОтчетОРабочемВремени.Области.ДАТАОТЧЕТА.Значение = "за станом на "+Формат(мДатаКонцаПериодаОтчета,"ДЛФ=ДД;Л = uk_UA");
	мОтчетОРабочемВремени.Области.МесяцОтчета.Значение = Нрег(Формат((мДатаКонцаПериодаОтчета),"Дф=ММММ; ДЛФ=ДД;Л = uk_UA"));
	мОтчетОРабочемВремени.Области.ГодОтчета.Значение = Формат(Год (мДатаКонцаПериодаОтчета),"ЧЦ=4;ЧГ=");
	  
	СтрДатыОтчета = Формат(мДатаКонцаПериодаОтчета,"ДФ='дд ММММ гггг';Л = uk_UA");
	мОтчетОРабочемВремени.Области.ДатаРаздел2.Значение = СтрДатыОтчета + "р.";
    // Период в заголовке отчета
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " (за " + СтрПериодОтчета + ")";	
КонецПроцедуры // ПоказатьПериод()	

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
// пока не прописаны коды - вернуться
Процедура ЗаполнитьСведенияОбОрганизации()
	
	Если Год(мДатаНачалаПериодаОтчета) > 2009 Тогда
		Сообщить(НСТР("ru = 'Внимание! Данный отчет отменен с 2010 года'; uk = 'Увага! Цей звіт скасовано з 2010 року.'"), СтатусСообщения.Важное);
	КонецЕсли;
	
	ОргНазв = Организация.НаименованиеПолное;
	мОтчетОРабочемВремени.Области.ОргНазв.Значение = ОргНазв;	
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
		
	ФИОДиректора = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, 			СписокПоказателей).ФИОРук;		
	КодЕДРПОУ    = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, СписокПоказателей).КодПоЕДРПОУ;
	
	мОтчетОРабочемВремени.Области.Адрес.Значение = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
	мОтчетОРабочемВремени.Области.ЮрАдрес.Значение  = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");

	Для НомЯчейки = 1 По 8 Цикл
			ЭлементыФормы["ПолеТабличногоДокументаОтчетОРабочемВремени"].Области["ЕДРПОУ" + НомЯчейки].Значение = Сред(Строка(КодЕДРПОУ), НомЯчейки, 1);
	КонецЦикла;

	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
	
	мОтчетОРабочемВремени.Области.Директор.Значение 	= ФИОДиректора;
	
	мОтчетОРабочемВремени.Области.Телефон.Значение = УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	мОтчетОРабочемВремени.Области.Факс.Значение    = УправлениеКонтактнойИнформацией.ПолучитьФаксИзКонтактнойИнформации(Организация);
	мОтчетОРабочемВремени.Области.ЕлПочта.Значение = УправлениеКонтактнойИнформацией.ПолучитьEmailИзКонтактнойИнформации(Организация);

	//Заполнение поля" "Исполнитель"
	мОтчетОРабочемВремени.Области.ИСПОЛНИТЕЛЬ.Значение    = глЗначениеПеременной("глТекущийПользователь");	
	ДанныеФИО = Новый Структура("ФизЛицо",глЗначениеПеременной("глТекущийПользователь").ФизЛицо);
	ФИОСрез = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(мДатаКонцаПериодаОтчета, ДанныеФИО);
	мОтчетОРабочемВремени.Области.ИСПОЛНИТЕЛЬ.Значение = СокрЛП(ФИОСрез.Фамилия) + " " + Лев(СокрЛ(ФИОСрез.Имя), 1) + "." + Лев(СокрЛ(ФИОСрез.Отчество), 1) + ".";


КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(НСтр("ru='Отчет 3-ПВ: точность не может превышать 3 знака';uk='Звіт 3-ПВ: точність не може перевищувати 3 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	
	КонецЕсли;
	
	Сообщить(НСтр("ru='После изменения формата вывода значений, для корректного расчета итогов необходимо перезаполнить отчет!';uk='Після зміни формату виводу значень, для корректного розрахунку підсумків треба перезаполвнити звіт!'"), СтатусСообщения.Внимание);

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";


	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "ОтчетОРабочемВремени";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Коммент       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Коммент)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Коммент;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()
        
// Обновляет пользовательские настройки при изменении версии формы.
// унифицирована, однако использование пока ... вопрос
Процедура ОбновитьПользовательскиеНастройки(СписокСохранения)
	Перем ПоказателиОтчета;
	
	Сообщить(НСтр("ru='Измененилась версия формы отчета."
"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
"Виконується відновлення користувальницьких настройок.'"), СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	Если ЕстьИзмененияВариантыЗаполнения Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить(НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Оновлення користувальницьких настройок успішно завершене!'"));

	Иначе

		Сообщить(НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі користувальницьких настройок не виявлені!'"));

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()
        
// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;
	
	Если ТипЗНч(ТекущаяЯчейка )= Тип("РисунокТабличногоДокумента") Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;
	

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетОРабочемВремени";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Коммент       = НайденнаяСтрока.Комментарий;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Коммент;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетОРабочемВремени";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		Попытка
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
		Исключение
		КонецПопытки;

		НайденнаяСтрока.Дельта = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		
		// Очищаем комментарий редактируемой ячейки
		ТекущаяОбласть.Примечание.Текст = "";

	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетОРабочемВремени";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Коммент)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "ОтчетОРабочемВремени";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Коммент;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Коммент;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Тип ("РисунокТабличногоДокумента") = ТипЗнч (ТекущаяОбласть) Тогда
			ТекущаяОбласть.Значение = ""; 
		Иначе	
			
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ТекущаяОбласть.СодержитЗначение Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяОбласть.Очистить();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить()

	// Очищаем содержимое ячеек поля табличного документа
	ТекТабличноеПоле = мОтчетОРабочемВремени;
	ОчиститьТабличноеПоле(ТекТабличноеПоле);

	//Очищаем расшифровку
	СпП.Очистить();

		
	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

КонецПроцедуры // Очистить()

Процедура РазбитьПечатнуюФорму(ПечФорма)
	
	ИмяФормы = "ОтчетОРабочемВремени";
	УчитыватьАвтомасштаб = Ложь;

	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
	ПустойТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	Если ЕстьДуплекс Тогда
		НовТаблДок = Новый ТабличныйДокумент();
	КонецЕсли;
	
	Сч = 0;
	Пока Сч < ПечФорма.ВысотаТаблицы Цикл
		 Сч = Сч + 1;
		 
		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			
			// проверим, не должна ли предпоследняя строка печататься вместе со текущей ("не влезшей") строкой.
			// если так, то "откатимся" вверх
			Пока ПослВерх < Сч-1 И ПечФорма.ПолучитьОбласть(Сч-1, , Сч-1, ).Область().ВместеСоСледующим Цикл
			  Сч = Сч - 1;
			КонецЦикла; 
			
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		Если НЕ ЕстьДуплекс Тогда
			НовТаблДок = Новый ТабличныйДокумент();
		КонецЕсли;
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		Если НЕ ЕстьДуплекс Тогда
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
		КонецЕсли;
	КонецЕсли;
	Если ЕстьДуплекс Тогда
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры
        
// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати)
    мПечатныеФормы.Очистить();
	
	//ОбновитьСтруктуруМногострочныхРазделов();
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ОбластьПечати = мОтчетОРабочемВремени.ПолучитьОбласть("ОбластьПечати");
	ПечатнаяФорма.Вывести(ОбластьПечати);
					
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Ложь;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	
	РазбитьПечатнуюФорму(ПечатнаяФорма);
	
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()


// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить() Экспорт
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.

		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;

		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();

	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;

	// обновляем структуру многострочных разделов
	//ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаОтчетОРабочемВремени";
	
	ТекТабличноеПоле        = мОтчетОРабочемВремени;

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
		
	СписокСохранения.Вставить("Расшифровка", СпП);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// Сохраняем выбранные листы для печати в хранилище
	ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
	мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
	
	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	Модифицированность = Ложь;

	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	Возврат Истина;
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
    Перем Расшифровка; 
	// восстанавливаем реквизиты отчета
	Организация              = мСохраненныйДок.Организация;
	
	ЭтаФорма.ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	
	// восстанавливаем сохраненные данные многострочных разделов
	//Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
	//	мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

	//	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
	//		ИмяГруппы       = ЭлементСтруктуры.Ключ;
	//		СтруктураГруппы = ЭлементСтруктуры.Значение;

	//		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
	//	КонецЦикла;
	//КонецЕсли;


	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки(СписокСохранения);
		КонецЕсли;
	КонецЕсли;
	
	//восстанавливаем расшифровку
	СписокСохранения.Свойство("Расшифровка", Расшифровка);
	Если Расшифровка <> Неопределено Тогда
		СпП = Расшифровка;
	КонецЕсли;


	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	УстановитьФорматВывода();
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "РасчетЕдиногоНалога";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Функция возвращает список нужных показателей из сохраненого отчета "ПоТруду"
Функция ПолучитьПоказателиИзТребуемогоОтчета(ДатаОкончанияПериода,ИсточникОтчета, НаименованиеОтчета,СтруктураПоказателей)
	перем ПоказателиОтчета;
	перем ПоказателиДекларации;
	перем ЗначениеПоказателя;
	перем СтруктураПоказателейСтраницы,ЗначениеВСтруктуре;  
	//сначала пытаемся найти сохраненный отчет в информационной базе
	ЗапросСохраненныйОтчет = Новый Запрос ("
	|ВЫБРАТЬ
	| РегламентированныйОтчет.ДанныеОтчета
	|
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|
	|ГДЕ
	|	РегламентированныйОтчет.ПометкаУдаления = &ПометкаУдаления И
	|	РегламентированныйОтчет.Организация = &Организация И
	|	РегламентированныйОтчет.НаименованиеОтчета = &НаименованиеОтчета И
	|	РегламентированныйОтчет.ДатаОкончания = &ДатаОкончания"
	);
	
	ЗапросСохраненныйОтчет.УстановитьПараметр ("ПометкаУдаления",ЛОЖЬ);
	ЗапросСохраненныйОтчет.УстановитьПараметр ("ДатаОкончания",ДатаОкончанияПериода);
	ЗапросСохраненныйОтчет.УстановитьПараметр ("Организация",Организация);
	ЗапросСохраненныйОтчет.УстановитьПараметр ("НаименованиеОтчета",НаименованиеОтчета);
	
	РезультатЗапроса = ЗапросСохраненныйОтчет.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда     		
		ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
		
		Если  ТаблицаРезультатов.Количество() > 1 Тогда
			Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='За %1обнаружено более одного сохраненного отчета%2  Корректное заполнение показателей из него невозможно!';uk='За %1 виявлено більше одного збереженого звіту%2  Коректне заповнення показників з нього неможливо!'"), ПредставлениеПериода( НачалоДня(НачалоКвартала(ДатаОкончанияПериода)), КонецДня(ДатаОкончанияПериода), "Л ="+Локализация.КодЯзыкаИнтерфейса()+ "; ФП = Истина" ), НаименованиеОтчета) ); 
			Возврат(0);
		Иначе	
			ДанныеОтчета = ТаблицаРезультатов[0].ДанныеОтчета.Получить();			
			ДанныеОтчета.Свойство("ПоказателиОтчета",ПоказателиОтчета);							
			
			ИмяСтраницыПанели = "ПолеТабличногоДокументаОтчетПоТрудуМес";
			
			Если ПоказателиОтчета.Свойство(ИмяСтраницыПанели,ПоказателиОтчета) Тогда 
				
				Для каждого ЭлементСтруктуры из СтруктураПоказателей Цикл
					ИмяПоказателя = ЭлементСтруктуры.Ключ;
					ПоказателиОтчета.Свойство(ИмяПоказателя,ЗначениеПоказателя);
					Если Не ЗначениеПоказателя = Неопределено Тогда 
						СтруктураПоказателей.Вставить(ИмяПоказателя,ЗначениеПоказателя);
					Иначе 
						СтруктураПоказателей.Вставить(ИмяПоказателя,0);
					КонецЕсли;
				КонецЦикла;	
			Иначе 
				Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='За %1 не обнаружено ни одного сохраненного отчета %2!"
				" Для корректного заполнения графы ""Отработано, всего"" сформируйте и сохраните отчет %3 за указанный период!';uk='За %1 не виявлено жодного збереженого звіту %2!"
				" Для коректного заповнення графи ""Відпрацьовано, всього"" сформуйте й збережіть звіт %3 за вказаний період!'"), ПредставлениеПериода( НачалоМесяца(ДатаОкончанияПериода), КонецМесяца(ДатаОкончанияПериода), "Л = "+Локализация.КодЯзыкаИнтерфейса()+"; ФП = Истина" ), НСтр("ru='"+НаименованиеОтчета+ "(Месячная форма)';uk='" + НаименованиеОтчета + "(Місячна форма)'" ))); 
				
				Возврат(0);
				
			КонецЕсли; 	
			
		КонецЕсли;	
		Возврат(1);
    Иначе	
		//не обнаружено не одного требуемого сохраненного отчета	
		Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='За %1 не обнаружено ни одного сохраненного отчета %2!"
		" Для корректного заполнения графы ""Отработано, всего"" сформируйте и сохраните отчет %3 за указанный период!';uk='За %1 не виявлено жодного збереженого звіту %2!"
		" Для коректного заповнення графи ""Відпрацьовано, всього"" сформуйте й збережіть звіт %3 за вказаний період!'"), ПредставлениеПериода( НачалоМесяца(ДатаОкончанияПериода), КонецМесяца(ДатаОкончанияПериода), "Л = "+Локализация.КодЯзыкаИнтерфейса()+"; ФП = Истина" ), НаименованиеОтчета, НаименованиеОтчета) ); 
		
		Возврат(0);
	КонецЕсли;
	
КонецФункции

//Расчет по нужной статье налоговой декларации 
Процедура РасчетПоСтатье(СтатьяПоиска,ИмяПоказателя, ИмяПоказателяГрафыКвоЧасов="",ИмяПоказателяГрафыКвоРаботников="")
	спРаботники = Новый Массив();
	ПоказательКвоЧасов = 0;
	ПоказательКвоРаботников = 0;
	НайденныеСтроки = ТаблицаРезультатов.НайтиСтроки(Новый Структура("СтатьяДекларации", СтатьяПоиска));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
			Если ИмяПоказателяГрафыКвоЧасов<>"" Тогда
				ПоказательКвоЧасов = ПоказательКвоЧасов+СтрокаТЗ.КвоЧасов;
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма,ИмяПоказателяГрафыКвоЧасов, ИмяПоказателя+",графа ""людино-години""","+",СтрокаТЗ.Сотрудник.Наименование+"("+Формат(СтрокаТЗ.ПериодРегистрации,"ДФ='ММММ гг""г"".'")+")", СтрокаТЗ.КвоЧасов,, , НачалоГода(мДатаНачалаПериодаОтчета),мДатаКонцаПериодаОтчета  , , , , , , , );
			КонецЕсли;
			Если ИмяПоказателяГрафыКвоРаботников<>"" Тогда
				Если спРаботники.Найти(СтрокаТЗ.Сотрудник)= Неопределено Тогда
					спРаботники.Добавить(СтрокаТЗ.Сотрудник);
					ПоказательКвоРаботников = ПоказательКвоРаботников+1;
					РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма,ИмяПоказателяГрафыКвоРаботников, ИмяПоказателя+",графа ""працівники,осіб""","+",СтрокаТЗ.Сотрудник.Наименование+"("+Формат(СтрокаТЗ.ПериодРегистрации,"ДФ='ММММ гг""г"".'")+")", 1,, , НачалоГода(мДатаНачалаПериодаОтчета),мДатаКонцаПериодаОтчета  , , , , , , , );
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ИмяПоказателяГрафыКвоЧасов<>"" Тогда
		мОтчетОРабочемВремени.Области[ИмяПоказателяГрафыКвоЧасов].Значение = ПоказательКвоЧасов;
	КонецЕсли;
	Если ИмяПоказателяГрафыКвоРаботников<>"" Тогда
		мОтчетОРабочемВремени.Области[ИмяПоказателяГрафыКвоРаботников].Значение = ПоказательКвоРаботников;
	КонецЕсли;
КонецПроцедуры

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто() Экспорт      
	
	СтрокиДекларации = Справочники.СтатьиНалоговыхДеклараций;
	
	СтруктураПоказателейОтчетаПоТруду = Новый Структура();
	СтруктураПоказателейОтчетаПоТруду.Вставить("П1060_2",);

	ОтчетПоТрудуМес = ПолучитьПоказателиИзТребуемогоОтчета(мДатаКонцаПериодаОтчета,"РегламентированныйОтчетПоТруду", НСтр("ru='Отчет по труду';uk='Звіт по праці'"),СтруктураПоказателейОтчетаПоТруду);
		
	мОтчетОРабочемВремени.Области.П3020_1.Значение = СтруктураПоказателейОтчетаПоТруду.П1060_2;
	ТаблСреднеспЧисленности = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета,"ССЧ","КВАРТАЛСНАЧАЛАГОДА",Организация, "");
	мОтчетОРабочемВремени.Области.П3010_2.Значение =  ТаблСреднеспЧисленности[0].Средняя;
	
	//Раздел І
	Запрос = Новый Запрос;
	
	Если    РегламентированнаяОтчетность.ИДКонфигурации()= "УТП"
		ИЛИ РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда 
		ИмяРегистра = "Начисления" 
	Иначе
		ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций"
	КонецЕсли;	
	
		Запрос.Текст = "ВЫБРАТЬ
		|	ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.ВидИспользованияРабочегоВремени КАК СтатьяДекларации,
		|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
		|	ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации КАК ПериодРегистрации,
		|	СУММА(ВЫБОР
	    |				КОГДА ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов = 0
	    |						ТОГДА ОсновныеНачисленияРаботниковОрганизации.НормаЧасов
	    |				ИНАЧЕ ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов
		|				КОНЕЦ)  КАК КвоЧасов
		|ИЗ РегистрРасчета." + ИмяРегистра + " КАК ОсновныеНачисленияРаботниковОрганизации
		|ГДЕ
		|	ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ОсновныеНачисленияРаботниковОрганизации.Организация = &парамОрганизация
		|	И ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ВидЗанятости = &ВидЗанятости
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.ВидИспользованияРабочегоВремени,
		|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник,
		|	ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации";
			   
	Запрос.УстановитьПараметр("НачалоПериода", мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода" ,мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("парамОрганизация",  Организация);
	Запрос.УстановитьПараметр("ВидЗанятости",Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
		
			
		НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_ОтработаноСверхурочно;
		РасчетПоСтатье(НужнаяСтатья,"Показник ""3030 Відпрацьовано надурочно""","П3030_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноЕжегодныеОтпуска;
		РасчетПоСтатье(НужнаяСтатья,"Показник ""3050 Невідпрацьовано, щорічні відпустки (основні та додаткові)""","П3050_1","П3050_2");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноВременнаяНетрудоспособность;
		РасчетПоСтатье(НужнаяСтатья,"Показник ""3060 Невідпрацьовано, тимчасова непрацездатність""","П3060_1","П3060_2");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноУчебныеОтпуска;
		РасчетПоСтатье(НужнаяСтатья,"Показник ""3070 Невідпрацьовано, навчальні відпустки та інші неявки, передбачені законодавством""","П3070_1"); 
		
		НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноВСвязиСРаботойНаДругомПредприятии;
		РасчетПоСтатье(НужнаяСтатья,"Показник ""3080 Неявки у зв'язку з тимчасовим переводом для роботи на іншому підприємстві""","П3080_1","П3080_2"); 
		
		
		НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноНеявкаСРазрешенияАдминистрации;
		РасчетПоСтатье(НужнаяСтатья,"Показник ""3090 Неявки з дозволу адміністрації""","П3090_1"); 
		
		НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноОтпускПоИнициативеАдминистрации;
		РасчетПоСтатье(НужнаяСтатья,"Показник ""3100 Відпустки за ініціативою адміністрації""","П3100_1","П3100_2"); 
		
		НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноНеявкаСвязаннаяСПереводомНаСокращенныйГрафик;
		РасчетПоСтатье(НужнаяСтатья,"Показник ""3120 Неявки у зв'язку з переведенням на скорочений робочий день,тиждень""","П3120_1","П3120_2"); 
		
		НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноПростои;
		РасчетПоСтатье(НужнаяСтатья,"Показник ""3130 Простої ""","П3130_1"); 
		
        НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноМасовыйНеВыход;
		РасчетПоСтатье(НужнаяСтатья,"Показник ""3140 Масові невиходи на роботу (страйки)""","П3140_1","П3140_2"); 
		
        НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноДругиеПричины;
		РасчетПоСтатье(НужнаяСтатья,"Показник ""3150 Інші причини""","П3150_1"); 
		
	КонецЕсли;
	
	Если Не мДатаКонцаПериодаОтчета = КонецГода(мДатаКонцаПериодаОтчета) Тогда 
		ТаблСреднеспЧисленности = ПроведениеРасчетов.ПолучитьСреднююЧисленность(ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12),КонецГода(ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)),"ССЧ","КВАРТАЛСНАЧАЛАГОДА",Организация, "");
		мОтчетОРабочемВремени.Области.П9070.Значение =  ТаблСреднеспЧисленности[0].Средняя;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма,"П9070", "Показник ""Середньооблікова кількість штатних працівників підприємства за січень-грудень попереднього року"", графа ""Усього""","+"," ",ТаблСреднеспЧисленности[0].Средняя,,, НачалоГода(ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)),КонецГода(ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)));
	КонецЕсли;  

	Расчет();
		
	Модифицированность = Истина;

КонецПроцедуры // ЗаполнитьАвто()

Процедура Расчет()
	
	
	мОтчетОРабочемВремени.Области.П3040_1.Значение = мОтчетОРабочемВремени.Области.П3050_1.Значение 
												   + мОтчетОРабочемВремени.Области.П3060_1.Значение
												   + мОтчетОРабочемВремени.Области.П3070_1.Значение
												   + мОтчетОРабочемВремени.Области.П3080_1.Значение
												   + мОтчетОРабочемВремени.Области.П3090_1.Значение
												   + мОтчетОРабочемВремени.Области.П3100_1.Значение
												   + мОтчетОРабочемВремени.Области.П3120_1.Значение
												   + мОтчетОРабочемВремени.Области.П3130_1.Значение
												   + мОтчетОРабочемВремени.Области.П3140_1.Значение
												   + мОтчетОРабочемВремени.Области.П3150_1.Значение;

	
	мОтчетОРабочемВремени.Области.П3010_1.Значение = мОтчетОРабочемВремени.Области.П3020_1.Значение 
												   + мОтчетОРабочемВремени.Области.П3040_1.Значение;
												   
													   												  
    мОтчетОРабочемВремени.Области.П9010.Значение   = ОкруглитьЧислоПоФормату(мОтчетОРабочемВремени.Области.П9020.Значение)
												   + ОкруглитьЧислоПоФормату(мОтчетОРабочемВремени.Области.П9030.Значение)
												   + ОкруглитьЧислоПоФормату(мОтчетОРабочемВремени.Области.П9040.Значение)
												   + ОкруглитьЧислоПоФормату(мОтчетОРабочемВремени.Области.П9050.Значение)
												   + ОкруглитьЧислоПоФормату(мОтчетОРабочемВремени.Области.П9060.Значение);

												   
											   
												   
												   
КонецПроцедуры	

 Процедура ЗаполнитьНачальныеНастройки(СоставПоказателей) Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ЭлементыФормы.ПолеТабличногоДокументаОтчетОРабочемВремени.ОбластьПечати = ЭлементыФормы.ПолеТабличногоДокументаОтчетОРабочемВремени.Области.Найти("ПредупреждениеОПечати");

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "ОтчетОРабочемВремени";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вычисляется автоматически';uk='Значення обчислюється автоматично'");
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");
		КонецЕсли;

		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()
   
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки("СоставПоказателей");

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;
	Если ЭлементМеню.Кнопки.Количество() = 0 Тогда
		ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
		НСтр("ru='Печатать сразу';uk='Друкувати відразу'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
		
		ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            НСтр("ru='Предварительный просмотр';uk='Попередній перегляд'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
								
		ЭлементМеню.Кнопки.Добавить("Разделитель1", ТипКнопкиКоманднойПанели.Разделитель);

		ЭлементМеню.Кнопки.Добавить("ЕстьДуплекс", ТипКнопкиКоманднойПанели.Действие,
		                            НСтр("ru='Принтер поддерживает автом. дуплекс';uk='Принтер підтримує автом. дуплекс'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
									
		ЭлементМеню.Кнопки.ЕстьДуплекс.Пометка = ЕстьДуплекс;
	КонецЕсли;							

	ЛинияСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЛинияПусто = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);

	ЭтаФорма.ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
	
	мМассивТиповЛиний = Новый Массив();
	мМассивТиповЛиний.Вставить(0, ЛинияПусто);
	мМассивТиповЛиний.Вставить(1, ЛинияСнизу);

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	Перем ИсходноеКоличествоСтрокГруппы;
	
	ЭтаФорма.АвтоЗаголовок = истина;

	мОтчетОРабочемВремени = ЭлементыФормы.ПолеТабличногоДокументаОтчетОРабочемВремени;			
	
	ТекТабличноеПоле = мОтчетОРабочемВремени;
	
	Если мСохраненныйДок = Неопределено Тогда
		
		// создаем исходную структуру многострочных разделов
			
		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			
			
			///ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
						
			ТочностьЕдиницыИзмерения = 0;

			УстановитьФорматВывода();
			
			ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок= Организация.Наименование;			
			ЗаполнитьСведенияОбОрганизации();
			 			         					
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;
    
	ПоказатьПериод();
	мОтчетОРабочемВремени.ТолькоПросмотр = Истина;			

	УстановитьЦветФонаЯчейки(,,"ОтчетОРабочемВремени");		

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность = Истина Тогда

		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения ?';uk='Дані були змінені. Зберегти зміни ?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;
	
	СохранитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс", ЕстьДуплекс);

КонецПроцедуры // ПередЗакрытием()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	// Заглушка
	//ЗаполнитьДемо();
	
	Очистить();
	
	ЗаполнитьСведенияОбОрганизации();
	
	// Удаляем добавленные строки многострочных разделов

	
	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();
	
	ЗаполнитьСведенияОбОрганизации();
	
	Расчет();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Если Найти(Кнопка.Имя, "Дуплекс") >0 Тогда
		     ЕстьДуплекс    = НЕ Кнопка.Пометка;
			 Кнопка.Пометка = НЕ Кнопка.Пометка;
		Иначе
			 Печать(Кнопка.Имя);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА
// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
// редакция не требуется
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Перем ТекущаяОбласть;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	// управляем показом статика, отображающего номер текущей страницы
	// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
	ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(ТекущаяОбласть);

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

		
	ЧастиДатыПодписи = РегламентированнаяОтчетность.ПолучитьЧастиДатыДляПодписи(ДатаПодписи,"uk_UA");
			
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаОтчетОРабочемВремениПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаОтчетОРабочемВремениПриАктивизацииОбласти()

Процедура ПолеВыбораВариантЗаполненияОтчетОРабочемВремениПриИзменении(Элемент)
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиОтчетОРабочемВремениПриИзменении(Элемент)
	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;
КонецПроцедуры

Процедура ПолеВводаКомментарийОтчетОРабочемВремениПриИзменении(Элемент)
	Коммент = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Коммент);
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)
	
	ПроверитьТочность();
	
	УстановитьФорматВывода();
	
	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

Процедура ПолеТабличногоДокументаОтчетОКоличествеРаботниковПриИзменении(Элемент)
	
	Расчет();
	
	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасшифровка(Кнопка)
	
	Обраб = Обработки.РасшифровкаРегламентированнойОтчетности.Создать();
	Обраб.Форма = ЭтаФорма;
	Обраб.ИмяЯчейки = ЭлементыФормы.ПолеТабличногоДокументаОтчетОРабочемВремени.ТекущаяОбласть.Имя;
	Обраб.ПолучитьФорму().Показать();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

ОписаниеТиповЧисло2 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(2,0);

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

мСтруктураМногострочныхРазделов = Новый Структура;

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
мВерсияФормы = "01/01/2005";

мПечатныеФормы = Новый СписокЗначений;

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп


// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетОРабочемВремени.СписокВыбора.Добавить(1, НСтр("ru='не заполнять автоматически';uk='не заповнювати автоматично'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетОРабочемВремени.СписокВыбора.Добавить(2, НСтр("ru='заполнять автоматически с корректировкой';uk='заповнювати автоматично з коригуванням'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияОтчетОРабочемВремени.СписокВыбора.Добавить(3, НСтр("ru='заполнять автоматически без корректировки';uk='заповнювати автоматично без коригування'"));

мСоставПоказателей = "СоставПоказателей";


СпП = Новый ТаблицаЗначений;
СпП.Колонки.Добавить("НомСтроки");
СпП.Колонки.Добавить("ИмяЯчейки");
СпП.Колонки.Добавить("ИмяПоказателя");
СпП.Колонки.Добавить("ЗнакОперации");
СпП.Колонки.Добавить("ИмяСлагаемого");
СпП.Колонки.Добавить("Сумма");
СпП.Колонки.Добавить("КодСчета");
СпП.Колонки.Добавить("КодКорСчета");
СпП.Колонки.Добавить("ДатаНачала");
СпП.Колонки.Добавить("ДатаКонца");
СпП.Колонки.Добавить("Сдвиг");
СпП.Колонки.Добавить("Раздел");
СпП.Колонки.Добавить("Страница");
СпП.Колонки.Добавить("МнЧ");
СпП.Колонки.Добавить("СтрокаПП");
СпП.Колонки.Добавить("Субконто1");
СпП.Колонки.Добавить("Субконто2");
СпП.Колонки.Добавить("Субконто3");

ЕстьДуплекс = ВосстановитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс");
Если НЕ ТипЗнч(ЕстьДуплекс) = Тип("Булево") Тогда
	ЕстьДуплекс = Ложь;	
КонецЕсли;
