////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ПоказыватьЗаголовок;
Перем ВысотаЗаголовка;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Устанавливает видимость панели быстрого отбора
//
Процедура УстановитьВидимостьПанелиБыстрогоОтбора()
	
	Если НЕ ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ДействияФормы.Кнопки.Отбор.Пометка = Ложь;
		ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Ложь;
		
	Иначе
		
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ДействияФормы.Кнопки.Отбор.Пометка = Истина;
		ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Истина;
		
	КонецЕсли;

КонецПроцедуры

//  Управляет выводом заголовка
//
// Параметры:
//	Нет.
//
Процедура ВыводЗаголовка()
	
	ЭлементыФормы.ПолеТабличногоДокументаРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	
КонецПроцедуры // ВыводЗаголовка()
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

//  Управляет кнопкой заголовка
//
// Параметры:
//	Нет.
//
Процедура УправлениеКнопкойЗаголовка()
		
	Элементыформы.ДействияФормы.Кнопки.ЗаголовокОтчета.Пометка = ПоказыватьЗаголовок	
		
КонецПроцедуры // ВыводЗаголовка()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	РД = ОбщегоНазначения.ПолучитьРабочуюДату();
	// Установим дату начала отчета
	Если ЗначениеЗаполнено(глЗначениеПеременной("глТекущийПользователь")) Тогда
		
		ЕстьДатаОтчетаПользователя = ЗначениеЗаполнено(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяДатаНачалаОтчетов"));
		
		Если Не ЕстьДатаОтчетаПользователя Тогда
			
			ДатаНач = НачалоМесяца(РД);
			ДатаКон = КонецМесяца(РД);
			
		Иначе
			
			ДатаНач = НачалоМесяца(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяДатаНачалаОтчетов"));
			ДатаКон = КонецМесяца(ДатаНач)
			
		КонецЕсли; 
		
	Иначе
		
		ДатаНач = НачалоМесяца(РД);
		ДатаКон = КонецМесяца(РД);
		
	КонецЕсли;

	НП.УстановитьПериод(ДатаНач, ДатаКон);

	ЭлементыФормы.ПолеНастройкиВидСхемыМотивации.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ВариантыCхемМотивации");
	ЭлементыФормы.ПолеВидаСравненияВидСхемыМотивации.СписокВыбора = УправлениеОтчетами.ПолучитьСписокВидовСравненияПоТипу(Новый ОписаниеТипов("СправочникСсылка.ВариантыCхемМотивации"));
	Если ТипЗнч(ВидСхемыМотивации) <> Тип("СправочникСсылка.ВариантыCхемМотивации") Тогда
		ВидСхемыМотивации = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.ВариантыCхемМотивации");
	КонецЕсли;	
	ВидСравненияВидСхемыМотивации = ВидСравнения.Равно;
	
	ЭлементыФормы.ПолеНастройкиПодразделение.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Подразделения");
	ЭлементыФормы.ПолеВидаСравненияПодразделение.СписокВыбора = УправлениеОтчетами.ПолучитьСписокВидовСравненияПоТипу(Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	Если ТипЗнч(Подразделение) <> Тип("СправочникСсылка.Подразделения") Тогда
		Подразделение = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Подразделения");
	КонецЕсли;	
	ВидСравненияПодразделения = ВидСравнения.Равно;	
	
	ЭлементыФормы.ПолеНастройкиФизЛицо.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	Если ТипЗнч(ЭтотОбъект.ФизЛицо ) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ЭтотОбъект.ФизЛицо = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.ФизическиеЛица");
	КонецЕсли;
	ЭлементыФормы.ПолеВидаСравненияФизЛицо.СписокВыбора = УправлениеОтчетами.ПолучитьСписокВидовСравненияПоТипу(Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ВидСравненияФизЛицо = ВидСравнения.Равно;		

	УстановитьВидимостьПанелиБыстрогоОтбора(); 
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	ВысотаЗаголовка = 4;	
	ПоказыватьЗаголовок = Истина;
	
	УправлениеКнопкойЗаголовка();

КонецПроцедуры //ПриОткрытии

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ

// Процедура - обработчик нажатия кнопки "Сформировать"
//
Процедура ДействияФормыСформировать(Кнопка)
	
	 СформироватьОтчет(ЭлементыФормы.ПолеТабличногоДокументаРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка);	
	 
 КонецПроцедуры // ДействияФормыСформировать

// Процедура - обработчик нажатия кнопки "На принтер"
//
Процедура ДействияФормыНаПринтер(Кнопка)
	
	ЭлементыФормы.ПолеТабличногоДокументаРезультат.Напечатать();

КонецПроцедуры

// Процедура - обработчик нажатия кнопки "ЗаголовокОтчета"
//
Процедура ДействияФормыЗаголовокОтчета(Кнопка)
	
	ПоказыватьЗаголовок = Не ПоказыватьЗаголовок;
	УправлениеКнопкойЗаголовка();
	ВыводЗаголовка();
	
КонецПроцедуры //ДействияФормыЗаголовокОтчета

// Обработчик события элемента КоманднаяПанельФормы.НовыйОтчет.
//
Процедура ДействияФормыНовыйОтчет(Кнопка)
	
	Если Строка(ЭтотОбъект) = "ВнешнийОтчетОбъект." + ЭтотОбъект.Метаданные().Имя Тогда
			
		Предупреждение(НСтр("ru='Данный отчет является внешней обработкой.';uk='Даний звіт є зовнішньою обробкою.'") + Символы.ПС + НСтр("ru='Открытие нового отчета возможно только для объектов конфигурации.';uk=""Відкриття нового звіту можливо тільки для об'єктів конфігурації."""));
		Возврат;
			
	Иначе
			
		НовыйОтчет = Отчеты[ЭтотОбъект.Метаданные().Имя].Создать();
			
	КонецЕсли;
	
	ФормаНовогоОтчета = НовыйОтчет.ПолучитьФорму();
	ФормаНовогоОтчета.Открыть();

КонецПроцедуры // КоманднаяПанельФормыДействиеНовыйОтчет()

// Процедура - обработчик нажатия кнопки "Отбор"
//
Процедура ДействияФормыОтбор(Кнопка)
	
	УстановитьВидимостьПанелиБыстрогоОтбора()
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки выбора даты начала периода
//
Процедура ДатаНачПриИзменении(Элемент)
	
	ДатаНач = НачалоМесяца(ДатаНач);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки выбора даты окончания периода
//
Процедура ДатаКонПриИзменении(Элемент)
	
	ДатаКон = КонецМесяца(ДатаКон);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки настройки периода
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	НП.УстановитьПериод(ДатаНач, КонецМесяца(ДатаКон));
	
	Если НП.Редактировать() Тогда

		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();
		
	КонецЕсли;
	
КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

// Процедура - обработчик изменения данных в поле выбора вида сравнения
//
Процедура ПолеНастройкиФизЛицоПриИзменении(Элемент)
	
	Если ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ЗаписываемоеЗначение = ФизЛицо;                                                               
	Иначе
		Если ФизЛицо.Количество() = 0 Тогда    
			ЗаписываемоеЗначение = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.ФизическиеЛица")
		Иначе
			ЗаписываемоеЗначение = ФизЛицо[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.Значение = ВидСравнения.ВСписке ИЛИ Элемент.Значение = ВидСравнения.НеВСписке Тогда
		
		ЭлементыФормы.ПолеНастройкиФизЛицо.ОграничениеТипа	  = Новый ОписаниеТипов("СписокЗначений");
        ФизЛицо = Новый СписокЗначений;
		Если ЗначениеЗаполнено(ЗаписываемоеЗначение) Тогда
			ФизЛицо.Добавить(ЗаписываемоеЗначение);
		КонецЕсли;
		
	Иначе              
		
		ЭлементыФормы.ПолеНастройкиФизЛицо.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		ФизЛицо	 = ЗаписываемоеЗначение;
		
	КонецЕсли; 
	
	Если ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") Тогда
		ОтборФизЛицо = Элемент.Значение.Количество() > 0
	Иначе
		ОтборФизЛицо = Не Элемент.Значение.Пустая()
	КонецЕсли;
	

КонецПроцедуры

// Процедура - обработчик изменения данных в поле выбора вида сравнения
//
Процедура ПолеВидаСравненияФизЛицоПриИзменении(Элемент)
	
	Если ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ЗаписываемоеЗначение = ФизЛицо;                                                               
	Иначе
		Если ФизЛицо.Количество() = 0 Тогда    
			ЗаписываемоеЗначение = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.ФизическиеЛица")
		Иначе
			ЗаписываемоеЗначение = ФизЛицо[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.Значение = ВидСравнения.ВСписке ИЛИ Элемент.Значение = ВидСравнения.НеВСписке Тогда
		
		ЭлементыФормы.ПолеНастройкиФизЛицо.ОграничениеТипа	  = Новый ОписаниеТипов("СписокЗначений");
        ФизЛицо = Новый СписокЗначений;
		Если ЗначениеЗаполнено(ЗаписываемоеЗначение) Тогда
			ФизЛицо.Добавить(ЗаписываемоеЗначение);
		КонецЕсли;
		
	Иначе              
		
		ЭлементыФормы.ПолеНастройкиФизЛицо.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		ФизЛицо	 = ЗаписываемоеЗначение;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик изменения данных в поле значения отбора
//
Процедура ПолеНастройкиВидСхемыМотивацииПриИзменении(Элемент)
	
	Если ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") Тогда
		ОтборВидСхемыМотивации = Элемент.Значение.Количество() > 0
	Иначе
		ОтборВидСхемыМотивации = Не Элемент.Значение.Пустая()
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик изменения данных в поле значения отбора
//
Процедура ПолеНастройкиПодразделениеПриИзменении(Элемент)
	
	Если ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") Тогда
		ОтборПодразделения = Элемент.Значение.Количество() > 0
	Иначе
		ОтборПодразделения = Не Элемент.Значение.Пустая()
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

