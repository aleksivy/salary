
Перем мПодразделение; // храним значения из предыдущей активной строки
Перем мДолжность;
Перем мДополнительныеСведения;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// управляет доступностью полей доп.сведений
//
// Параметры
//  Доступность - булево
//
Процедура УстановитьДоступностьПолей(Доступность)

	ЭлементыФормы.Описание.Доступность = Доступность;
	ЭлементыФормы.ДолжностнаяИнструкция.Доступность = Доступность;
	ЭлементыФормы.ДолжностныеТребования.Доступность = Доступность;

КонецПроцедуры // УстановитьДоступностьПолей()

// обновляет содержимое группы полей сведений о рабочем месте
//
// Параметры
//  Элемент - табличное поле РабочиеМеста
//
Процедура ОбновитьСведенияОРабМестеВДиалоге(Элемент)

	мПодразделение = Справочники.Подразделения.ПустаяСсылка();
	мДолжность = Справочники.Должности.ПустаяСсылка();
	ЕстьТекущаяСтрока = Элемент.ТекущаяСтрока <> Неопределено;
	Если ЕстьТекущаяСтрока Тогда
		мПодразделение = Элемент.ТекущаяСтрока.Подразделение;
		мДолжность = Элемент.ТекущаяСтрока.Должность;
		мДополнительныеСведения.Подразделение = Элемент.ТекущаяСтрока.Подразделение;
		мДополнительныеСведения.Должность = Элемент.ТекущаяСтрока.Должность;
		мДополнительныеСведения.Прочитать();
		ЭлементыФормы.Описание.Значение = мДополнительныеСведения.Информация;
		ЭлементыФормы.ДолжностнаяИнструкция.Значение = мДополнительныеСведения.ДолжностныеИнструкции;
		ЭлементыФормы.ДолжностныеТребования.Значение = мДополнительныеСведения.Требования;
	Иначе
		ЭлементыФормы.Описание.Значение = "";
		ЭлементыФормы.ДолжностнаяИнструкция.Значение = "";
		ЭлементыФормы.ДолжностныеТребования.Значение = "";
	КонецЕсли;

	// выставим доступность контролов
	УстановитьДоступностьПолей(ЕстьТекущаяСтрока);
	
КонецПроцедуры // ОбновитьСведенияОРабМестеВДиалоге()

// переписывает содержимое группы полей сведений о рабочем месте в менеджер
//
Процедура ОбновитьСведенияОРабМестеВМенеджере()

	Если ЭлементыФормы.РабочиеМеста.ТекущаяСтрока <> Неопределено Тогда
		мДополнительныеСведения.Подразделение = мПодразделение;
		мДополнительныеСведения.Должность = мДолжность;
		мДополнительныеСведения.Информация = ЭлементыФормы.Описание.Значение;
		мДополнительныеСведения.ДолжностныеИнструкции = ЭлементыФормы.ДолжностнаяИнструкция.Значение;
		мДополнительныеСведения.Требования = ЭлементыФормы.ДолжностныеТребования.Значение;
	КонецЕсли;

КонецПроцедуры // ОбновитьСведенияОРабМестеВМенеджере()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("Решение");

	// Установить ограничение - изменять видимоть колонок для таличной части Начисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РабочиеМеста.Колонки, СтруктураКолонок);
	
	мПодразделение = Справочники.Подразделения.ПустаяСсылка();
	мДолжность = Справочники.Должности.ПустаяСсылка();
	мДополнительныеСведения = РегистрыСведений.СведенияОРабочихМестах.СоздатьМенеджерЗаписи();
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьФорму" и ТипЗнч(Источник) = Тип("РегистрСведенийМенеджерЗаписи.СведенияОРабочихМестах") Тогда
		ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;
		Если ИмяОбновляемогоЭлемента = "мДополнительныеСведения" Тогда
			СтрокаПоля = ЭлементыФормы.РабочиеМеста.ТекущаяСтрока;
			Если СтрокаПоля <> Неопределено Тогда
				Если (СтрокаПоля.Подразделение = Источник.Подразделение и СтрокаПоля.Должность = Источник.Должность) или (НЕ ЗначениеЗаполнено(Источник.Подразделение) и НЕ ЗначениеЗаполнено(Источник.Должность)) Тогда
					ОбновитьСведенияОРабМестеВДиалоге(ЭлементыФормы.РабочиеМеста)
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗакрытии()
	Если мДополнительныеСведения.Модифицированность() Тогда
		мДополнительныеСведения.Записать();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыИзменить(Кнопка)
	Если ЭлементыФормы.Подразделения.ТекущиеДанные <> Неопределено Тогда
		НовыйДокумент = Документы.ИзменениеКадровогоПлана.СоздатьДокумент();
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(НовыйДокумент);
		НовыйДокумент.Решение = Перечисления.СостоянияОбъектов.Подготовлен;
		НовыйДокумент.ДатаИзменений = РабочаяДата;
		НоваяСтрока = НовыйДокумент.РабочиеМеста.Добавить();
		НоваяСтрока.Подразделение = ЭлементыФормы.Подразделения.ТекущиеДанные.Ссылка;
		НоваяСтрока.Количество	  =	1;
		НоваяСтрока.Валюта		  = Константы.ВалютаУправленческогоУчета.Получить();
		Если ЭлементыФормы.РабочиеМеста.ТекущиеДанные <> Неопределено Тогда
			НоваяСтрока.Должность =	ЭлементыФормы.РабочиеМеста.ТекущиеДанные.Должность;
			НоваяСтрока.Количество= ЭлементыФормы.РабочиеМеста.ТекущиеДанные.Количество;
			НоваяСтрока.ПлановыеЕжемесячныеЗатраты = ЭлементыФормы.РабочиеМеста.ТекущиеДанные.ПлановыеЕжемесячныеЗатраты;
			НоваяСтрока.Валюта	  = ЭлементыФормы.РабочиеМеста.ТекущиеДанные.Валюта;
		КонецЕсли;
		НовыйДокумент.ПолучитьФорму().Открыть();
	Иначе
		Документы.ИзменениеКадровогоПлана.ПолучитьФормуНовогоДокумента().Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыИстория(Кнопка)
	
	Если ЭлементыФормы.РабочиеМеста.ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ФормаСписка = РегистрыСведений.КадровыйПлан.ПолучитьФорму("ФормаСписка");
	ФормаСписка.РегистрСведенийСписок.Отбор.Подразделение.Значение	   = ЭлементыФормы.РабочиеМеста.ТекущаяСтрока.Подразделение;
	ФормаСписка.РегистрСведенийСписок.Отбор.Подразделение.ВидСравнения  = ВидСравнения.Равно;
	ФормаСписка.РегистрСведенийСписок.Отбор.Подразделение.Использование = Истина;
	ФормаСписка.РегистрСведенийСписок.Отбор.Должность.Значение	   = ЭлементыФормы.РабочиеМеста.ТекущаяСтрока.Должность;
	ФормаСписка.РегистрСведенийСписок.Отбор.Должность.ВидСравнения  = ВидСравнения.Равно;
	ФормаСписка.РегистрСведенийСписок.Отбор.Должность.Использование = Истина;
	ФормаСписка.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ

// Процедура обеспечивает отбор по подразделению в списке 
// рабочих мест 
//
// Параметры:
//  Элемент - элемент формы, который отображает подразделение
//  
Процедура ПодразделенияПриАктивизацииСтроки(Элемент)

	Подразделение = Элемент.ТекущаяСтрока;
	РегистрСведенийСписок.Отбор.Подразделение.Значение		= Подразделение;
	РегистрСведенийСписок.Отбор.Подразделение.Использование = Истина;

	Если Не Подразделение.Пустая() Тогда

        Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Подразделение",Подразделение);
		Запрос.УстановитьПараметр("Период",РабочаяДата);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КадровыйПлан.Должность,
		|	КадровыйПлан.Подразделение,
		|	КадровыйПлан.Период,
		|	КадровыйПлан.Решение
		|ИЗ
		|	РегистрСведений.КадровыйПлан КАК КадровыйПлан
		|
		|ГДЕ
		|	КадровыйПлан.Период <= &Период И
		|	КадровыйПлан.Подразделение = &Подразделение"
		;
		Выборка = Запрос.Выполнить().Выбрать();
					
		Если Выборка.Следующий() Тогда
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Подразделение",Выборка.Подразделение);
			СтруктураОтбора.Вставить("Должность",Выборка.Должность);
			СтруктураОтбора.Вставить("Решение",Выборка.Решение);
			СтруктураОтбора.Вставить("Период",Выборка.Период);
			ЭлементыФормы.РабочиеМеста.ТекущаяСтрока = РегистрыСведений.КадровыйПлан.СоздатьКлючЗаписи(СтруктураОтбора)
		КонецЕсли;

	КонецЕсли;
	
	// выставим доступность контролов
	УстановитьДоступностьПолей(ЭлементыФормы.РабочиеМеста.ТекущаяСтрока <> Неопределено);
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля.
Процедура РабочиеМестаПриАктивизацииСтроки(Элемент)
	Если мДополнительныеСведения.Модифицированность() Тогда
		мДополнительныеСведения.Записать();
	КонецЕсли;
	ОбновитьСведенияОРабМестеВДиалоге(Элемент);
КонецПроцедуры

// Процедура - обработчик события "Выбор" табличного поля.
Процедура РабочиеМестаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ВыбраннаяСтрока.Должность.ПолучитьФорму().Открыть();
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля.
Процедура РабочиеМестаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Решение <> Перечисления.СостоянияОбъектов.Утвержден Тогда
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ТекстВторостепеннойНадписи
	Иначе
		ОформлениеСтроки.ЦветТекста = Новый Цвет()
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ полей дополнительных сведений

Процедура ОписаниеПриИзменении(Элемент)
	ОбновитьСведенияОРабМестеВМенеджере();
КонецПроцедуры

Процедура ДолжностныеТребованияПриИзменении(Элемент)
	ОбновитьСведенияОРабМестеВМенеджере();
КонецПроцедуры

Процедура ДолжностнаяИнструкцияПриИзменении(Элемент)
	ОбновитьСведенияОРабМестеВМенеджере();
КонецПроцедуры

Процедура ДействияФормыСтруктура(Кнопка)
	
	ТабДокумент = Новый ТабличныйДокумент;

	НовыйОтчет = Отчеты.ОрганизационнаяДиаграмма.Создать();
	НовыйОтчет.ДатаАктуальности = РабочаяДата;
	НовыйОтчет.ВидОтчета   = "СтруктураШтатногоРасписания";
	
	НовыйОтчет.СформироватьОтчет(ТабДокумент,Истина);
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, , НСтр("ru='Структура кадрового плана по состоянию на ';uk='Структура кадрового плану станом на '") + Формат(РабочаяДата,"ДЛФ=DD"));

КонецПроцедуры












