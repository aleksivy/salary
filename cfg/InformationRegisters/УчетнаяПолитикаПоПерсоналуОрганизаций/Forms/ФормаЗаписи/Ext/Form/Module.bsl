////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мБылаОрганизация;
Перем мНеобходимоПереключениеВнСовместительства;
Перем мУстановленМонопольныйРежим;
Перем мБылУчетПоМесяцам;

// переменные, обеспечивающие ограничение на список организаций
Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует структуру параметров для ввода головной организации по подстроке
//
// Параметры
//	НЕТ
//
// Возвращаемое значение:
//	Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровТайпинга()

	СтруктураПараметров = Новый Структура("ГоловнаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровТайпинга()()

// проверка необходимости переключания режима вн. совмест.
// возвращает Истина, если переключение необходимо
//
Функция НеобходимоПереключениеВнутреннегоСовместительства()
	
	Если мБылаОрганизация <> Организация И Не мБылаОрганизация.Пустая() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// проверим прежнее значение по выбранной организации
	Отбор = Новый Структура("Организация", Организация);
	ПрежнееЗначение = РегистрыСведений.УчетнаяПолитикаПоПерсоналуОрганизаций.Получить(Отбор).ПоддержкаВнутреннегоСовместительства;
	
	Возврат ПрежнееЗначение <> ПоддержкаВнутреннегоСовместительства и ПрежнееЗначение <> Null;
	
КонецФункции // НеобходимоПереключениеВнутреннегоСовместительства()

// проверка необходимости переключания режима учета в валюте
// возвращает Истина, если переключение необходимо
//
Функция НеобходимоПереключениеУчетаВВалюте()
	
	Если мБылаОрганизация <> Организация И Не мБылаОрганизация.Пустая() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// проверим прежнее значение по выбранной организации
	Отбор = Новый Структура("Организация", Организация);
	ПрежнееЗначение = РегистрыСведений.УчетнаяПолитикаПоПерсоналуОрганизаций.Получить(Отбор).ИспользуютсяНачисленияВВалюте;
	
	Возврат ПрежнееЗначение <> ИспользуютсяНачисленияВВалюте И ПрежнееЗначение <> Null;
	
КонецФункции // НеобходимоПереключениеУчетаВВалюте()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПередОткрытием"
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
		
	мБылаОрганизация = Организация;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если Организация.Пустая() Тогда // проверить объект на то, что он еще не внесен в ИБ
		// Заполнить реквизиты значениями по умолчанию.
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	КонецЕсли;
	
	УстановитьВидимость();
КонецПроцедуры // ПриОткрытии()

// Обработчик события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение(НСтр("ru='Заполните реквизит ""Организация""!';uk='Заповніть реквізит ""Організація""!'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	// проверим на необходимость и возможность отключения учета начислений и удержаний в валюте 
	Если НеобходимоПереключениеУчетаВВалюте() И Не ИспользуютсяНачисленияВВалюте Тогда
		Отказ = Не ПроцедурыУправленияПерсоналом.МожноОтключатьУчетВВалюте(Организация);		
		
		Если Отказ Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Отключить использование начислений и удержаний в валюте невозможно, т.к. есть действующие валютные начисления (удержания)!';uk='Відключити використання нарахувань і утримань у валюті неможливо, т. я. є діючі валютні нарахування (утримання)!'"));
		КонецЕсли;
	КонецЕсли;	
	
	// Установка монопольного режима если придется менять режим внутреннего совместительства
	мНеобходимоПереключениеВнСовместительства = НеобходимоПереключениеВнутреннегоСовместительства();
	Если мНеобходимоПереключениеВнСовместительства Тогда
		Попытка
			мУстановленМонопольныйРежим = Истина;
			УстановитьМонопольныйРежим(Истина);
		Исключение
			мУстановленМонопольныйРежим = Ложь;
			Предупреждение(НСтр("ru='Не удалось установить монопольный режим для изменения учетной политики по персоналу!';uk='Не вдалося встановити монопольний режим для зміни облікової політики по персоналу!'"));
			Отказ = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если мБылаОрганизация <> Организация И Не мБылаОрганизация.Пустая() Тогда
		// если сменили организацию - для прежней организации выключаем поддержку вн. совм.
		Отказ = (глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[мБылаОрганизация].ЕдиныйНумераторКадровыхДокументов И Не ПроцедурыУправленияПерсоналом.НомераКадровыхДокументовУникальны(мБылаОрганизация)) Или Не ПроцедурыУправленияПерсоналом.МожноОтключатьВнутреннееСовместительство(мБылаОрганизация)
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если мНеобходимоПереключениеВнСовместительства Тогда
		
		Отказ = ЕдиныйНумераторКадровыхДокументов И Не ПроцедурыУправленияПерсоналом.НомераКадровыхДокументовУникальны(Организация);
		
		Если Отказ Тогда
			Возврат
		КонецЕсли;
		
		Если Не ПоддержкаВнутреннегоСовместительства Тогда
			Отказ = Не ПроцедурыУправленияПерсоналом.МожноОтключатьВнутреннееСовместительство(Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	мБылаОрганизация = Организация;
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события "ПослеЗаписи"
//
Процедура ПослеЗаписи()
	
	Если мУстановленМонопольныйРежим = Истина Тогда
		УстановитьМонопольныйРежим(Ложь);
		мУстановленМонопольныйРежим = Ложь;
	КонецЕсли;
	
	глЗначениеПеременнойУстановить("глУчетнаяПолитикаПоПерсоналуОрганизации", ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации(), ИСТИНА);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

//
Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора = ПроцедурыУправленияПерсоналом.ПолучитьСписокОрганизаций();
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияНачалоВыбора()

Процедура ОрганизацияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), Тип("СправочникСсылка.Организации"));
	
КонецПроцедуры // ОрганизацияАвтоПодборТекста()

Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), ЭтаФорма, Тип("СправочникСсылка.Организации"), мОбработкаТайпинга, мТекстТайпинга, мПоследнееЗначениеЭлементаТайпинга, Ложь);
	
КонецПроцедуры // ОрганизацияОкончаниеВводаТекста()

Процедура ВестиУчетОстатковОтпусковПриИзменении(Элемент) 
	УстановитьВидимость();	
КонецПроцедуры

Процедура УстановитьВидимость()
	ЭлементыФормы.КоличествоДнейПоложенногоОтпуска.Видимость = ВестиУчетОстатковОтпусков;
	ЭлементыФормы.НадписьКоличествоДнейПоложенногоОтпуска.Видимость = ВестиУчетОстатковОтпусков;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мОбработкаТайпинга					= Ложь;
мТекстТайпинга						= "";
мПоследнееЗначениеЭлементаТайпинга	= Справочники.Организации.ПустаяСсылка();

					  
