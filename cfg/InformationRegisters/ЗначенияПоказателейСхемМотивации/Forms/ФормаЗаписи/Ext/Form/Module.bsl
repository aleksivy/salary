////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мСписокНеДоступныхВозможностейИзменения;
Перем мРежимВводаПоказателей Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Определяет доступность реквизита "Показатель"
//
Процедура ОпределитьДоступностьПоказателей()
	
	ВидПоказателя = Показатель.ВидПоказателя;
	ЭлементыФормы.Подразделение.ТолькоПросмотр				= ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий Или ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Индивидуальный;
	ЭлементыФормы.Сотрудник.ТолькоПросмотр					= ВидПоказателя	= Перечисления.ВидыПоказателейСхемМотивации.Общий Или ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению;
	ЭлементыФормы.Валюта.ТолькоПросмотр 					= Показатель.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.Денежный;
	ЭлементыФормы.Сотрудник.АвтоОтметкаНезаполненного		= Не (ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий Или ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению);
	ЭлементыФормы.Сотрудник.ОтметкаНезаполненного			= Не (ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий Или ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению);	
	ЭлементыФормы.Подразделение.АвтоОтметкаНезаполненного	= Не (ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий Или ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Индивидуальный);
	ЭлементыФормы.Подразделение.ОтметкаНезаполненного		= Не (ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий Или ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Индивидуальный);
	
	
	Если мРежимВводаПоказателей = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
		ЭлементыФормы.ПанельОрганизация.Свертка	= РежимСверткиЭлементаУправления.Нет;
	Иначе
		ЭлементыФормы.ПанельОрганизация.Свертка	= РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;

	
КонецПроцедуры //ОпределитьДоступностьПоказателей

// Определяет тип для реквизитов составного типа
//
Процедура ОпределитьТипыРеквизитов()
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		ОписаниеТипа = Новый ОписаниеТипов(?(ЗначениеЗаполнено(Организация),"СправочникСсылка.ПодразделенияОрганизаций","СправочникСсылка.Подразделения"));
		Подразделение = ОписаниеТипа.ПривестиЗначение(Подразделение);
	КонецЕсли;
	
КонецПроцедуры //ОпределитьТипыРеквизитов

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ПериодДействия) Тогда
		ПериодДействия = НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	Если мРежимВводаПоказателей = Неопределено Тогда
		Если ЗначениеЗаполнено(Организация) Тогда
			мРежимВводаПоказателей = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц;
		Иначе
			мРежимВводаПоказателей = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоЦентрамОтветственности;
		КонецЕсли;
	КонецЕсли;	
	
	ОпределитьДоступностьПоказателей();
	ОпределитьТипыРеквизитов();
	
	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодДействия);	
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ)
	
	ВидПоказателя = Показатель.ВидПоказателя;
	Если ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Индивидуальный И Не ЗначениеЗаполнено(Сотрудник) Тогда
		Предупреждение(НСтр("ru='Индивидуальный показатель указывается только для конкретного работника!';uk='Індивідуальний показник вказується тільки для конкретного працівника!'"));
		Отказ = Истина;
	ИначеЕсли ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению И Не ЗначениеЗаполнено(Подразделение) Тогда
		Предупреждение(НСтр("ru='Для показателя не заполнен реквизит ""Сотрудник"" у индивидуального показателя';uk='Для показника не заповнений реквізит ""Співробітник"" у індивідуального показника'"));
		Отказ = Истина;
	ИначеЕсли мРежимВводаПоказателей = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц И НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение(НСтр("ru='Для показателя не заполнен реквизит ""Организация""!';uk='Для показника не заповнений реквізит ""Організація""!'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры //ПередЗаписью

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ реквизитов формы 

// Процедура - обработчик события "ПериодДействияПриИзменении"
//
Процедура ПериодДействияПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодДействия);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодДействия);
	
КонецПроцедуры

Процедура ПериодДействияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодДействия, ЭтаФорма);
	
КонецПроцедуры

Процедура ПериодДействияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура ПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодДействия = ДобавитьМесяц(ПериодДействия, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодДействия);

КонецПроцедуры

Процедура ПериодДействияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПериодДействияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
		РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "ПоказательПриИзменении"
//
Процедура ПоказательПриИзменении(Элемент)
	
	ОпределитьДоступностьПоказателей();
	
КонецПроцедуры

// Процедура - обработчик события "ПоказательНачалоВыбора"
//
Процедура ПоказательНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ФормаВыбораПоказателя = Справочники.ПоказателиСхемМотивации.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаПриемНаРаботу");
	
	ФормаВыбораПоказателя.НачальноеЗначениеВыбора = Элемент;
	
	ФормаВыбораПоказателя.Отбор.ВозможностьИзменения.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбораПоказателя.Отбор.ВозможностьИзменения.Значение = мСписокНеДоступныхВозможностейИзменения;
	ФормаВыбораПоказателя.Отбор.ВозможностьИзменения.Использование = Истина;

	ФормаВыбораПоказателя.Открыть();

КонецПроцедуры

// Процедура - обработчик события "ОрганизацияПриИзменении"
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОпределитьТипыРеквизитов();

КонецПроцедуры

Процедура СотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Элемент.Значение, Истина, ПериодДействия, Организация, 1, СтандартнаяОбработка, Элемент.Значение);

КонецПроцедуры

Процедура СотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "Сотрудники", Текст, Организация);

КонецПроцедуры

Процедура СотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "Сотрудники", Текст, Элемент.Значение, Организация);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСписокНеДоступныхВозможностейИзменения = Новый СписокЗначений;
мСписокНеДоступныхВозможностейИзменения.Добавить(Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка());
мСписокНеДоступныхВозможностейИзменения.Добавить(Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется);

