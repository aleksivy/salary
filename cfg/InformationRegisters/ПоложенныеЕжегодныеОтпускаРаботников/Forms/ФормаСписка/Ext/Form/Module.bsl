// Переменные механизма встроенной справки
Перем ОтображатьСправкуФормы;

Процедура РегистрСведенийСписокОрганизацияПриИзменении(Элемент)
	КоличествоДнейОтпуска = ПроцедурыУправленияПерсоналом.ПолучитьПоложенноеКоличествоДнейОтпуска(Элемент.Значение);
	ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.Положено = КоличествоДнейОтпуска;
КонецПроцедуры

Процедура ВстроеннаяСправкаonclick(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnClick(Элемент, pEvtObj, ЭтаФорма);
	
КонецПроцедуры

Процедура ВстроеннаяСправкаonmouseout(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnMouseOut(Элемент, pEvtObj);
	
КонецПроцедуры

Процедура ВстроеннаяСправкаonmouseover(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnMouseOver(Элемент, pEvtObj);
	
КонецПроцедуры

Процедура ПереключитьВидимостьСправкиФормы(Кнопка)
	
	ОтображатьСправкуФормы = НЕ ОтображатьСправкуФормы;
	УстановитьВидимостьСправкиФормы();
	
КонецПроцедуры

Процедура УстановитьВидимостьСправкиФормы(ОбновитьСправку = Истина)
	
	РаботаСДиалогами.ИзменитьВидимостьПанелиПоГоризонтали(ЭтаФорма, ОтображатьСправкуФормы, "РегистрСведенийСписок", "СправкиФормы");
	ЭлементыФормы.ДействияФормыСправка.Кнопки.ПереключениеСправкиФормы.Пометка = ОтображатьСправкуФормы;
	
	ОбновитьСправкуФормы()
	
	//Если ОтображатьСправкуФормы Тогда
	//	ПодключитьОбработчикИзмененияДанных("НовыйЭлементЗаписан",	"ОбновитьСправкуФормы");
	//	ПодключитьОбработчикИзмененияДанных("ВыборФизлица",			"ОбновитьСправкуФормы");
	//	ПодключитьОбработчикИзмененияДанных("ВидДоговора",			"ОбновитьСправкуФормы");
	//	ПодключитьОбработчикИзмененияДанных("Организация",			"ОбновитьСправкуФормы");
	//	ПодключитьОбработчикИзмененияДанных("ВидЗанятости",			"ОбновитьСправкуФормы");
	//	ПодключитьОбработчикИзмененияДанных("Актуальность",			"ОбновитьСправкуФормы");
	//	Если ОбновитьСправку Тогда
	//		Если мЭтоНовый Тогда
	//			Если ЭтоНовый() Тогда
	//				ОбновитьСправкуФормы("ОбновитьНовый");
	//			Иначе
	//				ОбновитьСправкуФормы("НовыйЭлементЗаписан");
	//			КонецЕсли;
	//		Иначе
	//			ОбновитьСправкуФормы("ОбновитьСуществующий");
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//Иначе
	//	ОтключитьОбработчикИзмененияДанных("НовыйЭлементЗаписан");
	//	ОтключитьОбработчикИзмененияДанных("ВыборФизлица");
	//	ОтключитьОбработчикИзмененияДанных("ВидДоговора");
	//	ОтключитьОбработчикИзмененияДанных("Организация");
	//	ОтключитьОбработчикИзмененияДанных("ВидЗанятости");
	//	ОтключитьОбработчикИзмененияДанных("Актуальность");
	//	
	//КонецЕсли;
	
КонецПроцедуры


Процедура ПодготовитьСправкуФормы()
	
	ЦветФонаСправки		= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветФона());
	ЦветСсылкиСправки	= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки());
	
		ТекстМакетаВстроеннойСправки =
		"<HTML>
		|	<HEAD>
		|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогами.ВстроеннаяСправка_СтилиДокумента() + "
		|	</HEAD>
		|
		|	<BODY aLink="+ЦветСсылкиСправки+" vLink="+ЦветСсылкиСправки+" link="+ЦветСсылкиСправки+" bgColor="+ЦветФонаСправки+" scroll=auto><FONT face=""MS Sans Serif"" size=1>
		|		<IMG src="+РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы, ЭлементыФормы.ВстроеннаяСправка)+">
		|		<DIV class=""top"" id=ВыборФизлица style=""DISPLAY:"+""">
		|			<DIV>В данном регистре сведений вводится информация о положенных отпусках работников организации.</DIV>
		|			<DIV>Перед вводом информации о ежегодных положенных отпусках следует указать какие <A id=Команда href=""1C:ОткрытьСправочникВидыОтпусков"">виды отпусков</A> используются на предприятии</DIV> 
		|			<DIV>При заполнении информации о ежегодных положенных отпусках есть возможность группового заполнения для <A id=Команда href=""1C:Принятые"">принятых на работу новых сотрудников</A>
		|			либо для <A id=Команда href=""1C:Списком"">уже работающих сотрудников</A>.
		|			<DIV>Если требуется внести изменения для одного сотрудника, то достаточно в данной форме добавить одну строку и указать сотрудника, вид отпуска и требуемый новый размер ежегодного отпуска.</DIV> 
		|			<DIV>При этом удалять записи регистра за прошедшие периоды не следует!</DIV>
		|	</FONT></BODY>
		|</HTML>";
	
	ЭлементыФормы.ВстроеннаяСправка.УстановитьТекст(ТекстМакетаВстроеннойСправки);
	
КонецПроцедуры


Процедура ОбновитьСправкуФормы(ПолеДанных = Неопределено)
	
	ДокHTML = ЭлементыФормы.ВстроеннаяСправка.Документ;
	//
	//Если ПолеДанных = Неопределено ИЛИ ПолеДанных = "ОбновитьНовый" ИЛИ ПолеДанных = "НовыйЭлементЗаписан" ИЛИ ПолеДанных = "ВыборФизлица" Тогда
	//	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ВыборФизлица", мЭтоНовый И НЕ НовыйЭлементЗаписан, "inline");
	//	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ВыборФизлица_Выбирать", мЭтоНовый И НЕ НовыйЭлементЗаписан И ВыборФизлица, "block");
	//	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ВыборФизлица_НеВыбирать", мЭтоНовый И НЕ НовыйЭлементЗаписан И НЕ ВыборФизлица, "block");
	//КонецЕсли;
	
	//Если ПолеДанных = Неопределено ИЛИ ПолеДанных = "ОбновитьСуществующий" ИЛИ ПолеДанных = "НовыйЭлементЗаписан" ИЛИ ПолеДанных = "СправочникОбъект.ВидДоговора" ИЛИ ПолеДанных = "СправочникОбъект.Организация" ИЛИ ПолеДанных = "СправочникОбъект.ВидЗанятости"  ИЛИ ПолеДанных = "СправочникОбъект.Актуальность" Тогда
	//	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникНеПринятВКомпанию", Ложь, "block");
	//	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникРаботаетВКомпании", Ложь, "block");
	//	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникУволенИзКомпании", Ложь, "block");
	//	
	//	Если НовыйЭлементЗаписан И ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
	//		СрезПоРаботнику = РегистрыСведений.Работники.СрезПоследних(РабочаяДата, Новый Структура("Физлицо", Физлицо));
	//		Если СрезПоРаботнику.Количество() > 0 Тогда
	//			Если СрезПоРаботнику[0].ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
	//				Если Актуальность Тогда
	//					РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникУволенИзКомпании", Истина, "block");
	//				КонецЕсли;
	//			Иначе
	//				РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникРаботаетВКомпании", Истина, "block");
	//			КонецЕсли;
	//		Иначе
	//			РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникНеПринятВКомпанию", Истина, "block");
	//		КонецЕсли;
	//	КонецЕсли;
	//
	//	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникНеПринятВОрганизацию", Ложь, "block");
	//	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникРаботаетВОрганизации", Ложь, "block");
	//	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникУволенИзОрганизации", Ложь, "block");
	//	
	//	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "Организация_Показывать", Ложь, "block");
	//	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ВидЗанятости_Показывать", Ложь, "block");
	//	
	//	Если НовыйЭлементЗаписан И ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор И (мДоступнаРольКадровикаРегл ИЛИ мДоступнаРольРасчетчикаРегл) Тогда
	//		Если НЕ (Организация.Пустая() ИЛИ ВидЗанятости.Пустая()) Тогда
	//			СрезПоРаботнику = РегистрыСведений.РаботникиОрганизаций.СрезПоследних(ТекущаяДата(), Новый Структура("Сотрудник, Организация", Ссылка, Организация));
	//			Если СрезПоРаботнику.Количество() > 0 Тогда
	//				Если СрезПоРаботнику[0].ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
	//					Если Актуальность Тогда
	//						РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникУволенИзОрганизации", Истина, "block");
	//					КонецЕсли;
	//				Иначе
	//					РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникРаботаетВОрганизации", Истина, "block");
	//				КонецЕсли;
	//			Иначе
	//				РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникНеПринятВОрганизацию", Истина, "block");
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "Организация_Показывать", Организация.Пустая(), "block");
	//		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ВидЗанятости_Показывать", ВидЗанятости.Пустая(), "block");
	//		
	//	КонецЕсли;
	//	
	//	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СотрудникПоДоговоруГПХ", НовыйЭлементЗаписан И (ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский ИЛИ ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда), "block");
	//КонецЕсли;
	
КонецПроцедуры // ОбновитьСправкуФормы()

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Справка формы
	ОтображатьСправкуФормы = ВосстановитьЗначение("РегистрСведений.ПоложенныеЕжегодныеОтпускаРаботников.ОтображатьСправкуФормы");
	Если ОтображатьСправкуФормы = Неопределено Тогда
		ОтображатьСправкуФормы = Истина;
	КонецЕсли;

	ПодготовитьСправкуФормы();
КонецПроцедуры

//Процедура входит в состав механизма интерактивной справки
Процедура ВыполнитьКомандуФормы(Команда, Значение) Экспорт
	Если Команда = "ОткрытьСправочникВидыОтпусков" Тогда
		Форма = Справочники.ВидыОтпусков.ПолучитьФорму("ФормаСписка");
		Форма.Открыть();
	ИначеЕсли Команда = "Принятые" Тогда
		ДействияФормыПринятыми(ЭлементыФормы.ДействияФормы.Кнопки.Заполнить);
		
	ИначеЕсли Команда = "Списком" Тогда
		ДействияФормыСписком(ЭлементыФормы.ДействияФормы.Кнопки.Заполнить);	
		
	КонецЕсли;
	
	
КонецПроцедуры // ВыполнитьКомандуСправки()

Процедура ПриЗакрытии()
	
	СохранитьЗначение("Справочник.СотрудникиОрганизаций.ОтображатьСправкуФормы", ОтображатьСправкуФормы);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если Отбор.Организация.Значение = Справочники.Организации.ПустаяСсылка() Тогда
        Отбор.Организация.Значение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяОрганизация");
        Отбор.Организация.Использование = Не Отбор.Организация.Значение.Пустая();
    КонецЕсли;
    Заголовок = НСтр("ru='Положенные ежегодные отпуска работников организации ';uk='Належні щорічні відпустки працівників організації '") + Отбор.Организация.Значение;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация".
Процедура ОрганизацияПриИзменении(Элемент)

 	Заголовок = НСтр("ru='Положенные ежегодные отпуска работников организации ';uk='Належні щорічні відпустки працівників організації '") + Элемент.Значение.Наименование;
    Отбор.Организация.Использование = Не Элемент.Значение.Пустая();
	
КонецПроцедуры

Процедура ДействияФормыПринятыми(Кнопка)
	
	ФормаЗаполнения = РегистрыСведений.ПоложенныеЕжегодныеОтпускаРаботников.ПолучитьФорму("ФормаЗаполнения");
	ФормаЗаполнения.Организация = Отбор.Организация.Значение;
	ФормаЗаполнения.ПериодС = НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
	ФормаЗаполнения.ПериодПо = КонецМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
	ФормаЗаполнения.ОткрытьМодально();
	
КонецПроцедуры

Процедура ДействияФормыСписком(Кнопка)
	
	Запрос = Новый Запрос();
		
	Запрос.Текст = "ВЫБРАТЬ
	   |	ВидыОтпусков.Ссылка КАК ВидОтпуска,
	   |	0 КАК Дней
	   |ИЗ
	   |	Справочник.ВидыОтпусков КАК ВидыОтпусков
	   |ГДЕ
	   |	ВидыОтпусков.ВедетсяУчетОстатков
	   |
	   |УПОРЯДОЧИТЬ ПО
	   |	ВидыОтпусков.Код
	   |";
	   
	ТаблицаОтпусков = Запрос.Выполнить().Выгрузить();
	Дней = ПроцедурыУправленияПерсоналом.ПолучитьПоложенноеКоличествоДнейОтпуска(Отбор.Организация.Значение);
	Если Дней = 0 Тогда
		Дней = 24;
	КонецЕсли;
    ТаблицаОтпусков[0].Дней = Дней;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, ОбщегоНазначения.ПолучитьРабочуюДату(), , Отбор.Организация.Значение, , , ,"ПоложенныеОтпуска",Новый Структура("ТаблицаОтпусков",ТаблицаОтпусков));
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Реквизиты = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			ВременнаяТаблица = ЗначениеВыбора.Данные.Выгрузить();
			НаборЗаписей = РегистрыСведений.ПоложенныеЕжегодныеОтпускаРаботников.СоздатьНаборЗаписей();
		    НаборЗаписей.Прочитать();
			Для каждого СтрокаВременнойТаблицы Из ВременнаяТаблица Цикл
				Для Каждого Отпуск из ЗначениеВыбора.Реквизиты.ТаблицаОтпусков Цикл
					
					Если Отпуск.Дней = 0 Тогда
						Продолжить;
					КонецЕсли;	
					Запись = НаборЗаписей.Добавить();
					
					//Свойства
					Запись.Период 						= ОбщегоНазначения.ПолучитьРабочуюДату();
					
					//Измерения
					Запись.Сотрудник					= СтрокаВременнойТаблицы.Сотрудник;
					Запись.Организация					= Отбор.Организация.Значение;
					Запись.ВидОтпуска					= Отпуск.ВидОтпуска;
					
					//Реквизиты
					Запись.Положено						= Отпуск.Дней;		
					
				КонецЦикла;	
				
			КонецЦикла;
        	НаборЗаписей.Записать(Истина);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура РегистрСведенийСписокВидОтпускаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.ВидыОтпусков.ПолучитьФормуВыбора();
	
	ФормаВыбора.Отбор.ВедетсяУчетОстатков.Использование	= Истина;
	ФормаВыбора.Отбор.ВедетсяУчетОстатков.ВидСравнения	= ВидСравнения.Равно;
	ФормаВыбора.Отбор.ВедетсяУчетОстатков.Значение		= Истина;
		
	ВыбранноеЗначение = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Элемент.Значение = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры




