#Если Клиент ИЛИ ВнешнееСоединение Тогда
	
	// Формирует типовой отчет в строку XML, табличный документ или поле табличного документа	
	Функция СформироватьТиповойОтчет(ОтчетОбъект, Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено) Экспорт
		
		//Если Результат = Неопределено Тогда
		//	// Вывод отчета в XML
		//	Если АналитическийОтчет() Тогда
		//		СохранениеНастроек = Новый Структура;
		//	Иначе
		//		СохранениеНастроек.ЗаполнитьНастройкиПриОткрытииОтчета(ОтчетОбъект);
		//	КонецЕсли;
		//	ОтчетОбъект.ДоработатьКомпоновщикПередВыводом();
		//	// Сгенерируем макет компоновки данных при помощи компоновщика макета
		//	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		//	МакетКомпоновки = КомпоновщикМакета.Выполнить(ОтчетОбъект.СхемаКомпоновкиДанных, ОтчетОбъект.КомпоновщикНастроек.Настройки);
		//	// Создадим и инициализируем процессор компоновки
		//	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		//	Если ВнешниеНаборыДанных = Неопределено Тогда
		//		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		//	Иначе
		//		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
		//	КонецЕсли;
		//	ЗаписьXML = Новый ЗаписьXML();
		//	ЗаписьXML.УстановитьСтроку();
		//	ЗаписьXML.ЗаписатьНачалоЭлемента("result");
		//	Пока Истина Цикл
		//		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
		//		Если ЭлементРезультата = Неопределено Тогда
		//			Прервать;
		//		КонецЕсли;
		//		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ЭлементРезультата, "item", "http://v8.1c.ru/8.1/data-composition-system/result");
		//	КонецЦикла;
		//	ЗаписьXML.ЗаписатьКонецЭлемента();
		//	Возврат ЗаписьXML.Закрыть();
		
		
		Если ТипЗнч(Результат) = Тип("Строка") Тогда
			ДанныеРасшифровки = Неопределено;
			// Вывод отчета в XML
			Если АналитическийОтчет() Тогда
				СохранениеНастроек = Новый Структура;
			Иначе
				СохранениеНастроек.ЗаполнитьНастройкиПриОткрытииОтчета(ОтчетОбъект);
			КонецЕсли;
			ОтчетОбъект.ДоработатьКомпоновщикПередВыводом();
			// Сгенерируем макет компоновки данных при помощи компоновщика макета
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(ОтчетОбъект.СхемаКомпоновкиДанных, ОтчетОбъект.КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
			// Создадим и инициализируем процессор компоновки
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			Если ВнешниеНаборыДанных = Неопределено Тогда
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
			Иначе
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
			КонецЕсли;
			ЗаписьXML = Новый ЗаписьXML();
			ЗаписьXML.УстановитьСтроку();
			ЗаписьXML.ЗаписатьНачалоЭлемента("result");
			Пока Истина Цикл
				ЭлементРезультата = ПроцессорКомпоновки.Следующий();
				Если ЭлементРезультата = Неопределено Тогда
					Прервать;
				КонецЕсли;
				СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ЭлементРезультата, "item", "http://v8.1c.ru/8.1/data-composition-system/result");
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
			Результат = ЗаписьXML.Закрыть();
			
			ЗаписьXML = Новый ЗаписьXML();
			ЗаписьXML.УстановитьСтроку();
			ЗаписьXML.ЗаписатьНачалоЭлемента("details");
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ДанныеРасшифровки, "item", "http://v8.1c.ru/8.1/data-composition-system/details");
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ДанныеРасшифровки = ЗаписьXML.Закрыть();		
			
		ИначеЕсли ВыводВФормуОтчета Тогда
			#Если Клиент Тогда
				// Вывод отчета в форму отчета                           
				Результат.Очистить();
				Настройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();
				ВыводЗаголовкаТиповогоОтчета(ОтчетОбъект, Результат, ВыводВФормуОтчета);
				ДоработатьТиповойОтчетПередВыводом(ОтчетОбъект);
				ОтчетОбъект.ДоработатьКомпоновщикПередВыводом();
				ВывестиТиповойОтчет(ОтчетОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
				ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
				УправлениеОтображениемЗаголовкаТиповогоОтчета(ОтчетОбъект, Результат);
			Иначе
				// Вывод отчета в табличный документ
				//Результат.Очистить();
				Настройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();
				ВыводЗаголовкаТиповогоОтчета(ОтчетОбъект, Результат, ВыводВФормуОтчета);
				ДоработатьТиповойОтчетПередВыводом(ОтчетОбъект);
				ОтчетОбъект.ДоработатьКомпоновщикПередВыводом();
				ВывестиТиповойОтчет(ОтчетОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
				ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
			#КонецЕсли
		КонецЕсли;
		
	КонецФункции
	
	Функция АналитическийОтчет() Экспорт
		
		Возврат (Найти(Метаданные.Имя, "Консолидация") > 0);
		
	КонецФункции
	
	// По структуре параметров восстанавливает состояние отчета
	Процедура ПрименитьСтруктуруПараметровОтчета(ОтчетОбъект, СтруктураПараметров) Экспорт
		
		Если СтруктураПараметров = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОтчетОбъект, СтруктураПараметров);
		ОтчетОбъект.ИнициализацияОтчета();
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураПараметров.НастройкиКомпоновщика);
		
	КонецПроцедуры
	
	Процедура ИнициализацияТиповогоОтчета(ОтчетОбъект) Экспорт
		
	КонецПроцедуры

#КонецЕсли

#Если Клиент Тогда
	
	Функция ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь)
		
		Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
				ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ТекущийОтчет);
				Если ДоступноеПоле = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
					Продолжить;
				КонецЕсли;
				МассивПолейРасшифровки.Добавить(Поле);
			КонецЦикла;
		КонецЕсли;
		Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
			ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
		КонецЦикла;
		
	КонецФункции
	
	// Возвращает массив, по которому следует расшифровать отчет
	Функция ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь) Экспорт
		
		МассивПолейРасшифровки = Новый Массив;
		
		Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
		   И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
			Возврат МассивПолейРасшифровки;
		КонецЕсли;
		
		Если ТекущийОтчет = Неопределено Тогда
			ТекущийОтчет = ДанныеРасшифровки;
		КонецЕсли;
		
		// Добавим поля родительских группировок
		ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
		
		Количество = МассивПолейРасшифровки.Количество();
		Для Индекс = 1 По Количество Цикл
			ОбратныйИндекс = Количество - Индекс;
			Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
				Если МассивПолейРасшифровки[ОбратныйИндекс].Поле = МассивПолейРасшифровки[ИндексВнутри].Поле Тогда
					МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Добавим отбор, установленный в отчете
		Для каждого ЭлементОтбора Из ТекущийОтчет.Настройки.Отбор.Элементы Цикл
			Если Не ЭлементОтбора.Использование Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(ЭлементОтбора);
		КонецЦикла;
		
		
		Возврат МассивПолейРасшифровки;
		
	КонецФункции
	
	// Компирует элементы из одной коллекции в другую
	Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина) Экспорт
		
		Если ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
		 ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
		 ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных") Тогда
			СоздаватьПоТипу = Ложь;
		Иначе
			СоздаватьПоТипу = Истина;
		КонецЕсли;
		ПриемникЭлементов = ПриемникЗначения.Элементы;
		ИсточникЭлементов = ИсточникЗначения.Элементы;
		Если ОчищатьПриемник Тогда
			ПриемникЭлементов.Очистить();
		КонецЕсли;
		
		Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
			
			Если СоздаватьПоТипу Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			Иначе
				ЭлементПриемник = ПриемникЭлементов.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
			// В некоторых коллекциях необходимо заполнить другие коллекции
			Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
				СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
				СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
				ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
			ИначеЕсли ТипЗнч(ИсточникЭлементов)	= Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
				СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			КонецЕсли;
			
			// В некоторых элементах коллекции необходимо заполнить другие коллекции
			Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
			ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
			ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
				СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
			ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
				ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
				ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
				ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
				ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	// Заполняет одну коллекцию элементов на основании другой
	Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено) Экспорт
		
		Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
			КоллекцияЗначений = ИсточникЗначения;
		Иначе
			КоллекцияЗначений = ИсточникЗначения.Элементы;
		КонецЕсли;
		
		Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
			Если ПервыйУровень = Неопределено Тогда
				ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
			Иначе
				ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
			КонецЕсли;
			Если ЭлементПриемник = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
			Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
	
	// Копирует настройки компоновки данных из одного компоновщика настроек в другой
	Процедура СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник, НастройкиИсточник) Экспорт
		
		Если НастройкиИсточник = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(НастройкиПриемник) = Тип("НастройкиКомпоновкиДанных") Тогда
			Для каждого Параметр Из НастройкиИсточник.ПараметрыДанных.Элементы Цикл
				ЗначениеПараметра = НастройкиПриемник.ПараметрыДанных.НайтиЗначениеПараметра(Параметр.Параметр);
				Если ЗначениеПараметра <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ЗначениеПараметра, Параметр);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);
			СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник.Настройки, НастройкиИсточник.Настройки);
			Возврат;
		КонецЕсли;
		
		// Копирование настроек
		Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных") Тогда
			
			ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыДанных, НастройкиИсточник.ПараметрыДанных);
			СкопироватьЭлементы(НастройкиПриемник.ПользовательскиеПоля, НастройкиИсточник.ПользовательскиеПоля);
			СкопироватьЭлементы(НастройкиПриемник.Отбор,         НастройкиИсточник.Отбор);
			СкопироватьЭлементы(НастройкиПриемник.Порядок,       НастройкиИсточник.Порядок);
			
		КонецЕсли;
		
		Если ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных")
		 ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		 ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			
			СкопироватьЭлементы(НастройкиПриемник.ПоляГруппировки, НастройкиИсточник.ПоляГруппировки);
			СкопироватьЭлементы(НастройкиПриемник.Отбор,           НастройкиИсточник.Отбор);
			СкопироватьЭлементы(НастройкиПриемник.Порядок,         НастройкиИсточник.Порядок);
			ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);
			
		КонецЕсли;
		
		СкопироватьЭлементы(НастройкиПриемник.Выбор,              НастройкиИсточник.Выбор);
		СкопироватьЭлементы(НастройкиПриемник.УсловноеОформление, НастройкиИсточник.УсловноеОформление);
		ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыВывода,      НастройкиИсточник.ПараметрыВывода);
		
		// Копирование структуры
		Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных")
		 ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			
			Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Структура Цикл
				ЭлементСтруктурыПриемник = НастройкиПриемник.Структура.Добавить(ТипЗнч(ЭлементСтруктурыИсточник));
				СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		 ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			
			Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Структура Цикл
				ЭлементСтруктурыПриемник = НастройкиПриемник.Структура.Добавить();
				СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТипЗнч(НастройкиИсточник) = Тип("ТаблицаКомпоновкиДанных") Тогда
			
			Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Строки Цикл
				ЭлементСтруктурыПриемник = НастройкиПриемник.Строки.Добавить();
				СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
			КонецЦикла;
			
			Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Колонки Цикл
				ЭлементСтруктурыПриемник = НастройкиПриемник.Колонки.Добавить();
				СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТипЗнч(НастройкиИсточник) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			
			Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Серии Цикл
				ЭлементСтруктурыПриемник = НастройкиПриемник.Серии.Добавить();
				СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
			КонецЦикла;
			
			Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Точки Цикл
				ЭлементСтруктурыПриемник = НастройкиПриемник.Точки.Добавить();
				СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Заменяет цвета в диаграмме
	Процедура ЗаменитьЦветаВДиаграмме(Диаграмма, ТаблицаЦветовСерий) Экспорт
		
		Серии = Диаграмма.Серии;
		
		Для каждого Серия Из Серии Цикл
			
			СтруктураПоиска = Новый Структура("Текст", Серия.Текст);
			МассивЦветовСерий = ТаблицаЦветовСерий.НайтиСтроки(СтруктураПоиска);
			
			Если МассивЦветовСерий.Количество() > 0 Тогда
				Серия.Цвет = МассивЦветовСерий[0].Цвет;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	// Возвращает картинку представления элемента отчета
	Функция ПолучитьКартинкуПредставленияЭлементаОтчета(ПредставлениеЭлементаОтчета) Экспорт
		
		Если ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Таблица Тогда
			Возврат  БиблиотекаКартинок.Таблица;
		ИначеЕсли ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица Тогда
			Возврат  БиблиотекаКартинок.КроссТаблица;
		ИначеЕсли ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Диаграмма Тогда
			Возврат БиблиотекаКартинок.Диаграмма;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецФункции
	
	// Удаляет недоступные элементы отбора из компоновщика
	Процедура УдалитьНедоступныеПоляИзОтбора(КомпоновщикНастроек) Экспорт
		
		Количество = КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();
		Для Индекс = 1 По Количество Цикл
			ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы[Количество - Индекс];
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
			Если КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
				КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
		
	// Возвращает компоновщик настроек по схеме компоновки и настройкам компоновщика
	Функция ПолучитьКомопновщикПоСхемеИНастройкам(Схема, Настройки = Неопределено) Экспорт
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		Если Настройки <> Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		КонецЕсли;
		Возврат КомпоновщикНастроек;
		
	КонецФункции
	
	// Добавляет в группировку автовыбранное поле
	Функция ДобавитьАвтоВыбранноеПоле(Структура) Экспорт
		
		ВыбранноеПоле = Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Возврат ВыбранноеПоле;
		
	КонецФункции
	
	// Добавляет в группировку автоэлемент порядка
	Процедура ДобавитьАвтоЭлементПорядка(Строка) Экспорт
		
		ПолеПолеПорядок = Строка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		
	КонецПроцедуры
	
	// Возвращает представление по типу элемента структуры
	Функция ПолучитьПредставлениеПоЭлементуСтруктуры(ЭлементСтруктуры) Экспорт
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			Возврат Перечисления.ПредставленияЭлементовОтчетов.Таблица;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			Возврат Перечисления.ПредставленияЭлементовОтчетов.Диаграмма;
		КонецЕсли;
		
	КонецФункции
	
	// Возвращает тип элемента структуры по представлению
	Функция ПолучитьТипЭлементаПоПредставлению(Представление) Экспорт
		
		Если Представление = Перечисления.ПредставленияЭлементовОтчетов.Таблица Тогда
			Возврат Тип("ГруппировкаКомпоновкиДанных")
		ИначеЕсли Представление = Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица Тогда
			Возврат Тип("ТаблицаКомпоновкиДанных")
		ИначеЕсли Представление = Перечисления.ПредставленияЭлементовОтчетов.Диаграмма Тогда
			Возврат Тип("ДиаграммаКомпоновкиДанных")
		КонецЕсли;
		
	КонецФункции
	
	//Процедура назначает форме уникальный ключ идентификации для возможности открытия нескольких одинаковых форм
	Процедура НазначитьФормеУникальныйКлючИдентификации(Форма) Экспорт
		
		Если Форма.КлючУникальности = Неопределено Тогда
			Форма.КлючУникальности = Новый УникальныйИдентификатор();
		КонецЕсли;
		
	КонецПроцедуры
	
	/////////////////////////////////////////////////////////////////////////////////
	// ОбЩИЕ ПРОЦЕДУРЫ ОТЧЕТОВ
	
	// Открывает форму настройки типового очтета для редактирования
	Функция РедактироватьНастройкиТиповогоОтчета(ОтчетОбъект, ФормаОтчета, ПараметрыФормы = Неопределено) Экспорт
		
		Если ОтчетОбъект.РасширеннаяНастройка Тогда
			
			// Сохраним настройки на случай отмены редактироания настроек
			СохраненныеНастройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();
			
			ФормаНастройки = ПолучитьОбщуюФорму("ФормаНастройкиКомпоновщикаНастроек");
			ФормаНастройки.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
			
			ФормаНастройки.ОсновнаяНастройка = Истина;
			ФормаНастройки.ФормироватьПриОткрытии = Истина;
			
			Если ФормаНастройки.ОткрытьМодально() = Истина Тогда
				Если Не АналитическийОтчет() Тогда 
					Если ОтчетОбъект.СохраненнаяНастройка <> Неопределено 
					   И ОтчетОбъект.СохраненнаяНастройка.СохранятьАвтоматически Тогда
						ФормаОтчета.СохранитьНастройку();
					КонецЕсли;
					ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ОтчетОбъект, ФормаОтчета);
				КонецЕсли;
				Возврат Истина;
			Иначе
				
				// Необходимо отменить редактирование настроек - восстановим ранее сохраненные настойки
				ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(СохраненныеНастройки);
				
			КонецЕсли;
			
		Иначе
			ФормаНастройки = ПолучитьОбщуюФорму("ФормаНастройкиТиповогоОтчета", ФормаОтчета);
			ФормаНастройки.ОтчетОбъект = ОтчетОбъект;
			ФормаНастройки.ОтрицательноеКрасным = ОтчетОбъект.ОтрицательноеКрасным;
			ФормаНастройки.НастройкаПериода = ОтчетОбъект.НастройкаПериода;
			ФормаНастройки.ПараметрыФормы = ПараметрыФормы;
			РезультатОткрытия = ФормаНастройки.ОткрытьМодально();
			Если РезультатОткрытия <> Неопределено Тогда 
				Если Не АналитическийОтчет() Тогда
					Если ОтчетОбъект.СохраненнаяНастройка <> Неопределено
					   И ОтчетОбъект.СохраненнаяНастройка.СохранятьАвтоматически Тогда
						ФормаОтчета.СохранитьНастройку();
					КонецЕсли;
					ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ОтчетОбъект, ФормаОтчета);
					УправлениеОтображениемЗаголовкаТиповогоОтчета(ОтчетОбъект, ФормаОтчета.ЭлементыФормы.Результат);
				КонецЕсли;
				
				Возврат РезультатОткрытия;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	// Скрывает или отображает быстрый отбор на форме
	Процедура УправлениеОтображениемЭлементовФормыТиповогоОтчета(ОтчетОбъект, ФормаОтчета) Экспорт
		
		ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Отбор.Пометка = ОтчетОбъект.ПоказыватьБыстрыйОтбор;
		Если Не АналитическийОтчет() Тогда
			Если ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Заголовок.Пометка Тогда
				Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить;
			Иначе
				Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
			КонецЕсли;
			
			ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput")).Значение = Значение;
		КонецЕсли;
		
		Если ОтчетОбъект.ПоказыватьБыстрыйОтбор Тогда
			// Нужно показывать отбор
			ФормаОтчета.ЭлементыФормы.Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			ФормаОтчета.ЭлементыФормы.ПанельОтбора.Свертка = РежимСверткиЭлементаУправления.Нет;
			ФормаОтчета.ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ФормаОтчета.Панель, ГраницаЭлементаУправления.Верх, ФормаОтчета.Панель, ГраницаЭлементаУправления.Низ);
			ФормаОтчета.ЭлементыФормы.ПанельОтбора.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ФормаОтчета.ЭлементыФормы.Разделитель, ГраницаЭлементаУправления.Верх);
			
		Иначе
			// Не нужно показывать отбор
			ФормаОтчета.ЭлементыФормы.ПанельОтбора.УстановитьПривязку(ГраницаЭлементаУправления.Низ);
			ФормаОтчета.ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ФормаОтчета.ЭлементыФормы.ПанельОтбора, ГраницаЭлементаУправления.Низ);
			ФормаОтчета.ЭлементыФормы.ПанельОтбора.Свертка = РежимСверткиЭлементаУправления.Верх;
			ФормаОтчета.ЭлементыФормы.Разделитель.Свертка = РежимСверткиЭлементаУправления.Верх;
		КонецЕсли;
		
	КонецПроцедуры
	
	// Скрывает и показывает заголовок типового отчета
	Процедура УправлениеОтображениемЗаголовкаТиповогоОтчета(ОтчетОбъект, Результат) Экспорт
		
		Если ОтчетОбъект.РасширеннаяНастройка ИЛИ Результат.ВысотаТаблицы = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ОбластьЗаголовок = Результат.Область("Заголовок");
		
		ПоказыватьЗаголовок = (ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput")).Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить);
		ОбластьЗаголовок.Видимость = ПоказыватьЗаголовок;
		
	КонецПроцедуры
	
	// Открывает копию отчета в новом окне
	Процедура ОткрытьВНовомОкнеТиповойОтчет(ОтчетОбъект, ФормаОтчета) Экспорт
		
		Если Строка(ОтчетОбъект) = "ВнешнийОтчетОбъект." + ОтчетОбъект.Метаданные().Имя Тогда
			Предупреждение(НСтр("ru='Данный отчет является внешним.';uk='Даний звіт є зовнішнім.'", ЛокализацияПовтИсп.ПолучитьЯзыкФормированияПечатныхФормОтчетов()) + Символы.ПС + НСтр("ru='Открытие нового отчета возможно только для объектов конфигурации.';uk=""Відкриття нового звіту можливо тільки для об'єктів конфігурації.""", ЛокализацияПовтИсп.ПолучитьЯзыкФормированияПечатныхФормОтчетов()));
			Возврат;
		Иначе
			НовыйОтчет = Отчеты[ОтчетОбъект.Метаданные().Имя].Создать();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НовыйОтчет, ОтчетОбъект,, "СохраненнаяНастройка");
		НовыйОтчет.КомпоновщикНастроек.ЗагрузитьНастройки(ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки());
		ФормаНовогоОтчета = НовыйОтчет.ПолучитьФорму();
		ФормаНовогоОтчета.ЭтоОтработкаРасшифровки = Истина;
		ФормаНовогоОтчета.Открыть();
		СформироватьТиповойОтчет(НовыйОтчет, ФормаНовогоОтчета.ЭлементыФормы.Результат, ФормаНовогоОтчета.ДанныеРасшифровки);
		
	КонецПроцедуры
	
	// Выводит заголовок типового отчета в табличный документ
	Процедура ВыводЗаголовкаТиповогоОтчета(ОтчетОбъект, Результат, ВыводВФормуОтчета = Истина)
		
		Если ОтчетОбъект.РасширеннаяНастройка Тогда
			Возврат;                                           
		КонецЕсли;
		
		ЗначениеПараметра = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput"));
		ВыводитьЗаголовок = (ЗначениеПараметра.Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить И ЗначениеПараметра.Использование);
		
		Если Не ВыводВФормуОтчета И Не ВыводитьЗаголовок Тогда
			Возврат;
		КонецЕсли;
		МакетЗаголовок = ПолучитьОбщийМакет("ЗаголовокТиповогоОтчета");
		ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
		ЗаголовокОтчета = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title")).Значение;
		ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ЛокализацияПовтИсп.ПолучитьПереводДляОтчетовНаСКД(ЗаголовокОтчета);
		ОбластьЗаголовок.Параметры.ОписаниеНастроекОтчета = ПолучитьОписаниеНастроекОтчета(ОтчетОбъект.КомпоновщикНастроек);
		Результат.Вывести(ОбластьЗаголовок);
		
	КонецПроцедуры
	
	Функция ПолучитьОписаниеНастроекОтчета(КомпоновщикНастроек)
		
		Если КомпоновщикНастроек.Настройки.Структура.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЯзыкФормированияПечатныхФормОтчетов = ЛокализацияПовтИсп.ПолучитьЯзыкФормированияПечатныхФормОтчетов();
		
		// Период
		ЗначениеПараметраПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
		ЗначениеПараметраКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
		
		Если ЗначениеПараметраНачалоПериода <> Неопределено 
		   И ЗначениеПараметраКонецПериода <> Неопределено Тогда
			НачалоПериода = ЗначениеПараметраНачалоПериода.Значение;
			КонецПериода = ЗначениеПараметраКонецПериода.Значение;
			Если НачалоПериода = '00010101' И КонецПериода = '00010101' Тогда
				ОписаниеПериода = НСтр("ru='Период не установлен';uk='Період не встановлений'", ЯзыкФормированияПечатныхФормОтчетов);
			ИначеЕсли НачалоПериода = '00010101' ИЛИ КонецПериода = '00010101' Тогда
				ОписаниеПериода = Формат(НачалоПериода, "ДФ = дд.ММ.гггг; ДП = ...") + " - " + Формат(КонецПериода, "ДФ = дд.ММ.гггг; ДП = ...");
			ИначеЕсли НачалоПериода <= КонецПериода Тогда
				ОписаниеПериода = ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП = Истина" + ЛокализацияПовтИсп.ПолучитьФорматЯзыкаДляПредставленияВСхемахСКД());
			Иначе
				ОписаниеПериода = НСтр("ru='Неправильно задан период!';uk='Неправильно заданий період!'", ЯзыкФормированияПечатныхФормОтчетов);
			КонецЕсли;
		ИначеЕсли ЗначениеПараметраПериод <> Неопределено Тогда
			Период = ЗначениеПараметраПериод.Значение;
			Если Период = '00010101' Тогда
				ОписаниеПериода = НСтр("ru='на ';uk='на '", ЯзыкФормированияПечатныхФормОтчетов) + Формат(ТекущаяДата(), "ДП = ...");
			Иначе
				ОписаниеПериода = ?(Период = КонецДня(Период), НСтр("ru='на конец дня ';uk='на кінець дня '", ЯзыкФормированияПечатныхФормОтчетов), "") + Формат(Период, "ДФ = дд.ММ.гггг; ДП = ...");
			КонецЕсли;
		Иначе
			ОписаниеПериода = "";
		КонецЕсли;
		Если Не ПустаяСтрока(ОПисаниеПериода) Тогда
			ОписаниеПериода = НСтр("ru='Период: ';uk='Період: '", ЯзыкФормированияПечатныхФормОтчетов) + ОписаниеПериода + Символы.ПС;
		КонецЕсли;
		
		ЭлементОтчета = КомпоновщикНастроек.Настройки.Структура[0];
		ПредставлениеЭлементаОтчета = ПолучитьПредставлениеПоЭлементуСтруктуры(ЭлементОтчета);
		Если ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Таблица Тогда
			Строки = ПолучитьМассивГруппировок(ЭлементОтчета, КомпоновщикНастроек);
			ТипСтрок = НСтр("ru='Группировки строк';uk='Групування рядків'", ЯзыкФормированияПечатныхФормОтчетов);
		ИначеЕсли ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица Тогда
			Если ЭлементОтчета.Строки.Количество() > 0 Тогда
				Строки = ПолучитьМассивГруппировок(ЭлементОтчета.Строки[0], КомпоновщикНастроек);
			Иначе
				Строки = Новый Массив;
			КонецЕсли;
			ТипСтрок = НСтр("ru='Группировки строк';uk='Групування рядків'", ЯзыкФормированияПечатныхФормОтчетов);
			Если ЭлементОтчета.Колонки.Количество() > 0 Тогда
				Колонки = ПолучитьМассивГруппировок(ЭлементОтчета.Колонки[0], КомпоновщикНастроек); 
			Иначе
				Колонки = Новый Массив;
			КонецЕсли;
			ТипКолонок = НСтр("ru='Группировки колонок';uk='Групування колонок'", ЯзыкФормированияПечатныхФормОтчетов);
		ИначеЕсли ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Диаграмма Тогда
			Если ЭлементОтчета.Серии.Количество() > 0 Тогда
				Строки = ПолучитьМассивГруппировок(ЭлементОтчета.Серии[0], КомпоновщикНастроек);
			Иначе
				Строки = Новый Массив;
			КонецЕсли;
			ТипСтрок = НСтр("ru='Группировки серий';uk='Групування серій'", ЯзыкФормированияПечатныхФормОтчетов);
			Если ЭлементОтчета.Точки.Количество() > 0 Тогда
				Колонки = ПолучитьМассивГруппировок(ЭлементОтчета.Точки[0], КомпоновщикНастроек); 
			Иначе
				Колонки = Новый Массив;
			КонецЕсли;
			ТипКолонок = НСтр("ru='Группировки точек';uk='Групування точок'", ЯзыкФормированияПечатныхФормОтчетов);
		КонецЕсли;
		
		Показатели = ПолучитьПоказатели(КомпоновщикНастроек);
		ДополнительныеПоля = ПолучитьДополнительныеПоля(КомпоновщикНастроек);
		
		СтрокаОтбор = Локализация.ПеревестиОтборСКД(КомпоновщикНастроек);
		
		ОписаниеНастроекОтчета = 
		ОписаниеПериода +
		СформироватьСтрокуПолей(ТипСтрок, Строки) + 
		СформироватьСтрокуПолей(ТипКолонок, Колонки) + 
		СформироватьСтрокуПолей(НСтр("ru='Дополнительные поля';uk='Додаткові поля'", ЯзыкФормированияПечатныхФормОтчетов), ДополнительныеПоля) +
		СформироватьСтрокуПолей(НСтр("ru='Показатели';uk='Показники'", ЯзыкФормированияПечатныхФормОтчетов), Показатели) +
		?(ПустаяСтрока(СтрокаОтбор) , "", НСтр("ru='Отбор: ';uk='Відбір: '", ЯзыкФормированияПечатныхФормОтчетов) + СтрокаОтбор);
		Возврат ОписаниеНастроекОтчета;		
		
	КонецФункции
	
	Функция СформироватьСтрокуПолей(ТипПолей, МассивПолей)
		
		Если МассивПолей = Неопределено ИЛИ МассивПолей.Количество() = 0 Тогда
			Возврат "";
		КонецЕсли;
		
		СтрокаПолей = ТипПолей + ": ";
		Для каждого Поле Из МассивПолей Цикл
			СтрокаПолей = СтрокаПолей + Поле + "; ";
		КонецЦикла;
		
		СтрокаПолей = СтрокаПолей + Символы.ПС;     	
		
		Возврат СтрокаПолей;
		
	КонецФункции
	
	Функция ПолучитьПоказатели(КомпоновщикНастроек)
		
		Элементы = Новый Массив;
		ВыбранныеПоля = ПолучитьВыбранныеПоля(КомпоновщикНастроек);
		
		Для каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
			ДоступноеПоле = ПолучитьДоступноеПоле(ВыбранноеПоле.Поле, КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора);
			Если ДоступноеПоле <> Неопределено и ДоступноеПоле.Ресурс Тогда
				Элементы.Добавить(ЛокализацияПовтИсп.ПолучитьПереводДляОтчетовНаСКД(ДоступноеПоле.Заголовок));
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Элементы;
		
	КонецФункции
	
	Функция ПолучитьДополнительныеПоля(КомпоновщикНастроек)
		
		Элементы = Новый Массив;
		ВыбранныеПоля = ПолучитьВыбранныеПоля(КомпоновщикНастроек);
		
		Для каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
			ДоступноеПоле = ПолучитьДоступноеПоле(ВыбранноеПоле.Поле, КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора);
			Если ДоступноеПоле <> Неопределено И Не ДоступноеПоле.Ресурс Тогда
				Элементы.Добавить(ЛокализацияПовтИсп.ПолучитьПереводДляОтчетовНаСКД(ДоступноеПоле.Заголовок));
			КонецЕсли;
		КонецЦикла;
		
		Возврат Элементы;
		
	КонецФункции
	
	Функция ПолучитьДоступноеПоле(Знач Поле, ОбластьПоиска) Экспорт
		
		Возврат ОбластьПоиска.НайтиПоле(Поле);
		
	КонецФункции
	
	// Возвращает массив группировок компоновщика настроек
	Функция ПолучитьМассивГруппировок(ЭлементСтруктуры, КомпоновщикНастроек, МассивГруппировок = Неопределено) Экспорт
		
		Если МассивГруппировок = Неопределено Тогда
			МассивГруппировок = Новый Массив;
		КонецЕсли;
		
		Для каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
			Если Не ПолеГруппировки.Использование Тогда
				Продолжить;
			КонецЕсли;
			ДоступноеПоле = ПолучитьДоступноеПоле(ПолеГруппировки.Поле, КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок);
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивГруппировок.Добавить(ЛокализацияПовтИсп.ПолучитьПереводДляОтчетовНаСКД(ДоступноеПоле.Заголовок));
		КонецЦикла;
		
		Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
			Возврат МассивГруппировок;
		Иначе
			Возврат ПолучитьМассивГруппировок(ЭлементСтруктуры.Структура[0], КомпоновщикНастроек, МассивГруппировок);
		КонецЕсли;
		
	КонецФункции
	
	// Выводит типовой отчет в табличный документ
	Процедура ВывестиТиповойОтчет(ОтчетОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено) Экспорт
		
		ОтчетОбъект.КомпоновщикНастроек.Восстановить();
		Схема = ОтчетОбъект.СхемаКомпоновкиДанных;
		
		//Сгенерируем макет компоновки данных при помощи компоновщика макета
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Если ЛокализацияПовтИсп.ТестовыйРежим() Тогда
			Сообщить("Отчет " + Строка(ОтчетОбъект));
		КонецЕсли; 
		
		Локализация.ПроверитьПереводСхемыКомпоновкиДанных(Схема, Строка(ОтчетОбъект));
		
		//В качестве схемы компоновки будет выступать схема самого отчета
		//В качестве настроек отчета - текущие настройки отчета
		//Данные расшифровки будем помещать в ДанныеРасшифровки
		Если ВыводВФормуОтчета Тогда
			МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, ОтчетОбъект.КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
			ДополнитьМакетыМакетаКомпоновкиРасшифровкойРесурсов(МакетКомпоновки, ОтчетОбъект.КомпоновщикНастроек);
			//Создадим и инициализируем процессор компоновки
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			Локализация.ПеревестиМакетКомпоновкиДанных(МакетКомпоновки);
			Если ВнешниеНаборыДанных = Неопределено Тогда
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
			Иначе
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
			КонецЕсли;
		Иначе
			МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, ОтчетОбъект.КомпоновщикНастроек.Настройки);
			//Создадим и инициализируем процессор компоновки
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			Локализация.ПеревестиМакетКомпоновкиДанных(МакетКомпоновки);
  			Если ВнешниеНаборыДанных = Неопределено Тогда
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
			Иначе
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, , Истина);
			КонецЕсли;
		КонецЕсли;
		
		//Создадим и инициализируем процессор вывода результата
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		//Обозначим начало вывода
		ПроцессорВывода.НачатьВывод();
		Состояние(НСТР("ru='Если Вы хотите прервать вывод отчета, нажмите Ctrl+Break';uk='Якщо Ви хочете перервати виведення звіту, натисніть Ctrl+Break'", ЛокализацияПовтИсп.ПолучитьЯзыкФормированияПечатныхФормОтчетов()));
		
		ТаблицаЗафиксирована = Не ВыводВФормуОтчета;
		
		Результат.ФиксацияСверху = 0;
		//Попытка
		//Основной цикл вывода отчета
		Пока Истина Цикл
			
			ОбработкаПрерыванияПользователя();
			//Получим следующий элемент результата компоновки
			ЭлементРезультата = ПроцессорКомпоновки.Следующий();
			
			Если ЭлементРезультата = Неопределено Тогда
				//Следующий элемент не получен - заканчиваем цикл вывода
				Прервать;
				
			Иначе
				
				// Зафиксируем шапку
				Если Не ОтчетОбъект.РасширеннаяНастройка 
				   И Не ТаблицаЗафиксирована 
				      И ЭлементРезультата.ЗначенияПараметров.Количество() > 0 
				      И ТипЗнч(ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура[0]) <> Тип("ДиаграммаКомпоновкиДанных") Тогда
					ТаблицаЗафиксирована = Истина;
					Результат.ФиксацияСверху = Результат.ВысотаТаблицы;
				КонецЕсли;
				
				//Элемент получен - выведем его при помощи процессора вывода
				ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
				
			КонецЕсли;
			
		КонецЦикла;
		//Исключение
		//Сообщить("Ошибка формирования отчета. Проверьте настройки");
		//КонецПопытки;
		
		//Обозначем завершение вывода
		ПроцессорВывода.ЗакончитьВывод();
		
	КонецПроцедуры
	
	// Дорабатывает отчет перед выводом
	Процедура ДоработатьТиповойОтчетПередВыводом(ОтчетОбъект, КомпоновщикНастроек = Неопределено) Экспорт
		
		Если ОтчетОбъект.РасширеннаяНастройка Тогда
			Возврат;
		КонецЕсли;
		Если КомпоновщикНастроек = Неопределено Тогда
			КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
		КонецЕсли;
		
		// Отработка "Отрицательное красным"
		Если ОтчетОбъект.ОтрицательноеКрасным Тогда
			Для каждого Ресурс Из ПолучитьВыбранныеПоля(КомпоновщикНастроек) Цикл
				Если Не КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Ресурс.Поле).Ресурс Тогда
					Продолжить;
				КонецЕсли;
				НовыйЭлемент = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
				// Настройка отбора
				ЭлементОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Ресурс.Поле;
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
				ЭлементОтбора.ПравоеЗначение = 0;
				// Настройка оформления
				ЗначениеПараметра = НовыйЭлемент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("MarkNegatives"));
				ЗначениеПараметра.Использование = Истина;
				ЗначениеПараметра.Значение = Истина;
				// Настройка полей
				Поле = НовыйЭлемент.Поля.Элементы.Добавить();
				Поле.Поле = Ресурс.Поле;
			КонецЦикла;
		КонецЕсли;
		
		Если Не АналитическийОтчет() Тогда
			// Убрать вывод заголовка, т.к. он выводится нестандартно
			УстановитьПараметрВывода(КомпоновщикНастроек, "TitleOutput", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
		КонецЕсли;
		
	КонецПроцедуры
	
	// Возвращает структуру параметров отчета для сохранения
	Функция ПолучитьСтруктуруПараметровТиповогоОтчета(ОтчетОбъект) Экспорт
		
		СтруктураПараметров = Новый Структура;
		Для каждого Реквизит Из ОтчетОбъект.Метаданные().Реквизиты Цикл
			СтруктураПараметров.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя])
		КонецЦикла;
		СтруктураПараметров.Вставить("НастройкиКомпоновщика", ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки());
		Возврат СтруктураПараметров;
		
	КонецФункции
			
	// Обновляет заголовок типового отчета
	Процедура ОбновитьЗаголовокТиповогоОтчета(ОтчетОбъект, ФормаОтчета) Экспорт
		
		Если ЗначениеЗаполнено(ОтчетОбъект.СохраненнаяНастройка) Тогда
			ТекстСохраненнаяНастройка = " (" + ОтчетОбъект.СохраненнаяНастройка + ")";
		Иначе
			ТекстСохраненнаяНастройка = "";
		КонецЕсли;
		
		ЗаголовокОтчета = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title")).Значение;
		ФормаОтчета.Заголовок = ЗаголовокОтчета + ТекстСохраненнаяНастройка;
		
	КонецПроцедуры
	
	// Открывает форму настройки периода
	Функция НастроитьПериод(НастройкаПериода, НачалоПериода, КонецПериода) Экспорт
		
		НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
		НастройкаПериода.УстановитьПериод(НачалоПериода, ?(КонецПериода='0001-01-01', КонецПериода, КонецДня(КонецПериода)));
		НастройкаПериода.РедактироватьКакИнтервал = Истина;
		НастройкаПериода.РедактироватьКакПериод = Истина;
		Если НастройкаПериода.Редактировать() Тогда
			НачалоПериода = НастройкаПериода.ПолучитьДатуНачала();
			КонецПериода = НастройкаПериода.ПолучитьДатуОкончания();
			Возврат НастройкаПериода;
		КонецЕсли;
		
	КонецФункции
	
	// Обновляет параметры периода в компоновщике настроек по данным формы
	Процедура ОбновитьПараметрыПериодаПоФорме(КомпоновщикНастроек, Форма) Экспорт
		
		ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
		ЗначениеПараметраКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
		ЗначениеПараметраПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		
		Если ЗначениеПараметраНачалоПериода <> Неопределено Тогда
			ЗначениеПараметраНачалоПериода.Значение = Форма.НачалоПериода;
			//ЗначениеПараметраНачалоПериода.Использование = (Форма.НачалоПериода <> '0001-01-01');
		КонецЕсли;
		
		Если ЗначениеПараметраКонецПериода <> Неопределено Тогда
			ЗначениеПараметраКонецПериода.Значение = ?(Форма.КонецПериода = '0001-01-01', Форма.КонецПериода, КонецДня(Форма.КонецПериода));
			//ЗначениеПараметраКонецПериода.Использование = (Форма.КонецПериода <> '0001-01-01');
		КонецЕсли;
		
		Если ЗначениеПараметраПериод <> Неопределено Тогда
			ЗначениеПараметраПериод.Значение = ?(Форма.Период = '0001-01-01', Форма.Период, КонецДня(Форма.Период));
			//ЗначениеПараметраПериод.Использование = (Форма.Период <> '0001-01-01');
		КонецЕсли;
		
	КонецПроцедуры
	
	//Обновляет элементы формы типового отчета по компоновщику настроек
	Процедура ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ОтчетОбъект, ФормаОтчета) Экспорт
		
		// Параметры периода
		ЗначениеПараметраНачалоПериода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
		ЗначениеПараметраКонецПериода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
		ЗначениеПараметраПериод = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		
		Если ЗначениеПараметраНачалоПериода <> Неопределено 
		   И ЗначениеПараметраКонецПериода <> Неопределено Тогда
			ФормаОтчета.НачалоПериода = ЗначениеПараметраНачалоПериода.Значение;
			ФормаОтчета.КонецПериода = ЗначениеПараметраКонецПериода.Значение;
			ФормаОтчета.ЭлементыФормы.ПанельПериод.ТекущаяСтраница = ФормаОтчета.ЭлементыФормы.ПанельПериод.Страницы.Интервал;
		ИначеЕсли ЗначениеПараметраПериод <> Неопределено Тогда
			ФормаОтчета.Период = ЗначениеПараметраПериод.Значение;
			ФормаОтчета.ЭлементыФормы.ПанельПериод.ТекущаяСтраница = ФормаОтчета.ЭлементыФормы.ПанельПериод.Страницы.Период;
		Иначе
			ФормаОтчета.ЭлементыФормы.ПанельПериод.ТекущаяСтраница = ФормаОтчета.ЭлементыФормы.ПанельПериод.Страницы.Пустой;
		КонецЕсли;
		
		// Вывод заголовка отменяется
		Значение = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput")).Значение;
		Пометка = (Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить);
		ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Заголовок.Пометка = Пометка;
		
	КонецПроцедуры
	
	Функция ПолучитьМассивСтрокПоСтроке(Знач Строка)
		
		МассивСтрок = Новый Массив;
		Строка = СтрЗаменить(Строка, ",", Символы.ПС);
		Для Индекс = 1 По СтрЧислоВхождений(Строка, Символы.ПС) + 1 Цикл
			МассивСтрок.Добавить(СокрЛП(СтрПолучитьСтроку(Строка, Индекс)));
		КонецЦикла;
		Возврат МассивСтрок;
		
	КонецФункции
	
	// Отрабатывает расшифровки типового отчета
	Процедура ОбработкаРасшифровкиТиповогоОтчета(Расшифровка, СтандартнаяОбработка, ОтчетОбъект, ФормаОтчета) Экспорт
		
		Если ОтчетОбъект.РасширеннаяНастройка Тогда
			Возврат;
		КонецЕсли;
		Если Строка(ОтчетОбъект) = "ВнешнийОтчетОбъект." + ОтчетОбъект.Метаданные().Имя Тогда
			ЭтоВнешнийОтчет = Истина;
		Иначе 
			ЭтоВнешнийОтчет = Ложь;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ЭтоДетальнаяЗапись = Ложь;
		Элемент = ФормаОтчета.ДанныеРасшифровки.Элементы[Расшифровка];
		Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			Элементы = Элемент.ПолучитьРодителей();
			Если Элементы.Количество() > 0 Тогда
				Элемент = Элементы[0];
				Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
					ЭтоДетальнаяЗапись = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		МассивПолейРасшифровки = ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровки);
		МассивПолейРасшифровкиСРесурсами = ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровки, , Истина);
		
		// Получим имена полей расшифровываемой ячейки
		МассивПолей = Новый Массив; 
		Для каждого ПолеРасшифровки Из МассивПолейРасшифровкиСРесурсами Цикл
			Если ТипЗнч(ПолеРасшифровки) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда 
				МассивПолей.Добавить(ПолеРасшифровки.Поле);
			КонецЕсли;
		КонецЦикла;
		
		СписокВыбора = Новый СписокЗначений;
		
		// Добавим в список выбора расшифровки другие отчеты
		Для каждого ОтчетРасшифровка Из ОтчетОбъект.Расшифровки Цикл
			Если ТипЗнч(ОтчетРасшифровка.Значение) = Тип("Строка") Тогда
				СписокВыбора.Добавить(ОтчетРасшифровка.Значение, ОтчетРасшифровка.Представление, , БиблиотекаКартинок.Отчет);
			ИначеЕсли ТипЗнч(ОтчетРасшифровка.Значение) = Тип("Структура") Тогда
				МассивСтрок = ПолучитьМассивСтрокПоСтроке(ОтчетРасшифровка.Значение.Поля);
				Для каждого Поле Из МассивСтрок Цикл
					Если МассивПолей.Найти(Поле) <> Неопределено Тогда
						СписокВыбора.Добавить(ОтчетРасшифровка.Значение.ИмяОтчета, ОтчетРасшифровка.Представление, , БиблиотекаКартинок.Отчет);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// Добавим в список выбора расшифровки Открыть значение
		Индекс = 0;
		Для каждого ПолеРасшифровки Из МассивПолейРасшифровки Цикл
			Если ТипЗнч(ПолеРасшифровки) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных")
		       И ПолеРасшифровки.Значение <> Null Тогда
				СписокВыбора.Добавить("ОткрытьЗначение" + Формат(Индекс, "ЧЦ=2; ЧН=; ЧВН="), "Открыть: " + ПолеРасшифровки.Поле + " = """ +  ПолеРасшифровки.Значение + """",,БиблиотекаКартинок.Лупа);
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		
		Если Не ЭтоДетальнаяЗапись И Не ЭтоВнешнийОтчет Тогда
			СписокВыбора.Добавить("Расшифровать", "Расшифровать...",,);
		КонецЕсли;
		
		//СписокВыбора.Добавить("СтандартнаяРасшифровка", "Стандартная расшифровка...",,);
		
		Если СписокВыбора.Количество() = 0 Тогда
			Возврат;
		ИначеЕсли СписокВыбора.Количество() = 1 Тогда
			ВыбранноеЗначение = СписокВыбора[0];
		Иначе
			ВыбранноеЗначение = ФормаОтчета.ВыбратьИзМеню(СписокВыбора);
		КонецЕсли;
		
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		ИначеЕсли ВыбранноеЗначение.Значение = "СтандартнаяРасшифровка" Тогда
			СтандартнаяОбработка = Истина;
			Возврат;
		ИначеЕсли Лев(ВыбранноеЗначение.Значение, 15) = "ОткрытьЗначение" Тогда
			// Открыть значение
			ОткрытьЗначение(МассивПолейРасшифровки[Число(Прав(ВыбранноеЗначение.Значение,2))].Значение);
		ИначеЕсли ВыбранноеЗначение.Значение = "Расшифровать" Тогда
			// Расшифровать собственным отчетом
			ФормаВыбораПоля = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
			ФормаВыбораПоля.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
			РодителиПоля = Новый Массив;
			ДобавитьРодителей(ФормаОтчета.ДанныеРасшифровки.Элементы[Расшифровка], ФормаОтчета.ДанныеРасшифровки, РодителиПоля);
			ФормаВыбораПоля.РодителиПоля = РодителиПоля;
			Результат = ФормаВыбораПоля.ОткрытьМодально();
			Если Результат = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ФормаОтчета.ДанныеРасшифровки, 
			Новый ИсточникДоступныхНастроекКомпоновкиДанных(ОтчетОбъект.СхемаКомпоновкиДанных));
			
			НастройкиКомпоновки = ОбработкаРасшифровки.Расшифровать(Расшифровка, Результат.Поле);
			
			НовыйОтчет = Отчеты[ОтчетОбъект.Метаданные().Имя].Создать();
			ЗаполнитьЗначенияСвойств(НовыйОтчет, ОтчетОбъект, , "СохраненнаяНастройка");
			НовыйОтчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);
			ФормаНовогоОтчета = НовыйОтчет.ПолучитьФорму();
			ФормаНовогоОтчета.ЭтоОтработкаРасшифровки = Истина;
			ФормаНовогоОтчета.Открыть();
			ФормаНовогоОтчета.ОбновитьОтчет();
			
		Иначе
			// Расшифровать другим отчетом
			НовыйОтчетОбъект = Отчеты[ВыбранноеЗначение.Значение].Создать();
			НовыйОтчетОбъект.ИнициализацияОтчета();
			НовыйОтчетОбъект.Настроить(МассивПолейРасшифровки, ОтчетОбъект.КомпоновщикНастроек);
			ФормаНовогоОтчета = НовыйОтчетОбъект.ПолучитьФорму(,, Новый УникальныйИдентификатор);
			ФормаНовогоОтчета.ЭтоОтработкаРасшифровки = Истина;
			ФормаНовогоОтчета.Открыть();
			ФормаНовогоОтчета.ОбновитьОтчет()
		КонецЕсли;
		
	КонецПроцедуры
	
	// На основании отбора настраивает расшифровываемый отчет
	Процедура НастроитьТиповойОтчет(ОтчетОбъект, Отбор, КомпоновщикОсновногоОтчета = Неопределено) Экспорт
		
		Если ТипЗнч(Отбор) <> Тип("Массив") Тогда
			Возврат;
		КонецЕсли;
		
		// Настройка отбора
		Для каждого ЭлементОтбора Из Отбор Цикл
			
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
			Иначе
				ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
			КонецЕсли;
			
			Если ОтчетОбъект.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйЭлементОтбора = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
			Иначе
				НовыйЭлементОтбора.Использование  = Истина;
				НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
				Если ЭлементОтбора.Иерархия Тогда
					Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
						НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
					Иначе
						НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
					КонецЕсли;
				Иначе
					Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
						НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
					Иначе
						НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					КонецЕсли;
				КонецЕсли;
				
				НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Настройка параметров
		Если КомпоновщикОсновногоОтчета = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Для каждого ПараметрОсновногоОтчета Из КомпоновщикОсновногоОтчета.Настройки.ПараметрыДанных.Элементы Цикл
			ЗначениеПараметра = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрОсновногоОтчета.Параметр);
			Если ЗначениеПараметра <> Неопределено Тогда
				ЗначениеПараметра.Значение = ПараметрОсновногоОтчета.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
	
	// Выводит на печать без предварительного просмотра табличный документ
	Процедура ПечатьТиповогоОтчета(Результат) Экспорт
		
		Результат.Напечатать();
		
	КонецПроцедуры
	
	// Открывает форму редактирования пользовательского поля
	Процедура РедактироватьПользовательскиеПоля(КомпоновщикНастроек) Экспорт
		
		КонструкторПользовательскихПолей = Обработки.КонструкторПользовательскихПолей.Создать();
		Форма = КонструкторПользовательскихПолей.ПолучитьФорму(, );
		Форма.КомпоновщикНастроек = КомпоновщикНастроек;
		Форма.ОткрытьМодально();
		
	КонецПроцедуры
	
	// Возвращает имя формы, с помощью которого следует редактировать пользовательское поле
	Функция ПолучитьИмяФормыРедактированияПользовательскогоПоля(ПользовательскоеПоле) Экспорт
		
		Если ТипЗнч(ПользовательскоеПоле) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ПользовательскоеПоле.Варианты.Элементы.Количество() > 0
		   	И ПолучитьПараметрИзСтроки(ПользовательскоеПоле.Варианты.Элементы[0].Значение) = "ДоработкаТаблицы" Тогда
			ИмяФормы = "Форма" + ПолучитьПараметрИзСтроки(ПользовательскоеПоле.Варианты.Элементы[0].Значение, 2);
		КонецЕсли;
		Если ПользовательскоеПоле.Варианты.Элементы.Количество() > 2
		   И (ПользовательскоеПоле.Варианты.Элементы[0].Значение = "1Тренд"
		 ИЛИ ПользовательскоеПоле.Варианты.Элементы[0].Значение = "1Состояние") Тогда
			ИмяФормы = "ФормаИнтервал";
		ИначеЕсли ПользовательскоеПоле.Варианты.Элементы.Количество() > 1
		        И ПользовательскоеПоле.Варианты.Элементы[0].Значение = "0ИГ" Тогда
			ИмяФормы = "ФормаИнтервалы";
		КонецЕсли;
		Возврат ИмяФормы;
		
	КонецФункции
	
	Функция ПолучитьПараметрИзСтроки(Знач Строка, НомерПараметра = 1) Экспорт
		
		Для Индекс = 1 По НомерПараметра Цикл
			ПоложениеЗапятой = Найти(Строка, ",");
			Если ПоложениеЗапятой = 0 Тогда
				ПодСтрока = Строка;
				Возврат Подстрока;
			Иначе
				ПодСтрока = Лев(Строка, ПоложениеЗапятой - 1);
			КонецЕсли;
			Строка = Сред(Строка, ПоложениеЗапятой + 1);
		КонецЦикла;
		
		Возврат ПодСтрока;
		
	КонецФункции
	
	// Возвращает список доступных для выбора ресурсов
	Функция ПолучитьСписокДоступныхРесурсов(КомпоновщикНастроек, ВключаяПользовательскиеПоляВыражение = Истина, ВключаяПользовательскиеПоляВыбор = Истина) Экспорт
		
		СписокРесурсов = Новый СписокЗначений;
		ДобавитьРесурсы(СписокРесурсов, КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора, КомпоновщикНастроек, ВключаяПользовательскиеПоляВыражение, ВключаяПользовательскиеПоляВыбор);
		Возврат СписокРесурсов;
		
	КонецФункции
	
	Функция ДобавитьРесурсы(СписокРесурсов, КоллекцияПолей, КомпоновщикНастроек, ВключаяПользовательскиеПоляВыражение, ВключаяПользовательскиеПоляВыбор)
		
		Для каждого ДоступноеПоле Из КоллекцияПолей.Элементы Цикл
			Если ДоступноеПоле.Ресурс Тогда
				ПользовательскоеПоле = НайтиПользовательскоеПоле(КомпоновщикНастроек, ДоступноеПоле.Поле);
				Если ПользовательскоеПоле <> Неопределено Тогда
					Если Не (ТипЗнч(ПользовательскоеПоле) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") И ВключаяПользовательскиеПоляВыражение
					    ИЛИ ТипЗнч(ПользовательскоеПоле) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") И ВключаяПользовательскиеПоляВыбор) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				СписокРесурсов.Добавить(ДоступноеПоле.Поле, ДоступноеПоле.Заголовок);
			КонецЕсли;
			Если ДоступноеПоле.Папка Тогда
				ДобавитьРесурсы(СписокРесурсов, ДоступноеПоле, КомпоновщикНастроек, ВключаяПользовательскиеПоляВыражение, ВключаяПользовательскиеПоляВыбор);
			КонецЕсли;
		КонецЦикла;
		
	КонецФункции
	
	// Возвращает доступное поле по полю компоновки
	Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, КомпоновщикНастроек) Экспорт
		
		Возврат КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеКомпоновкиДанных);
		
	КонецФункции
	
	// Заполняет отбор построителя по отбору компоновщика
	Процедура ЗаполнитьОтборПоОтборуКомпоновщика(Отбор, ОтборКомпоновщика) Экспорт
		
		ЗаполнитьЗначенияСвойств(Отбор, ОтборКомпоновщика, "Использование, Представление");
		
		Если ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
			Отбор.ВидСравнения = ВидСравнения.Больше;
		ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
			Отбор.ВидСравнения = ВидСравнения.БольшеИлиРавно;
		ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
			Отбор.ВидСравнения = ВидСравнения.ВИерархии;
		ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			Отбор.ВидСравнения = ВидСравнения.ВСписке;
		ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
			Отбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
		ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
			Отбор.ВидСравнения = ВидСравнения.Меньше;
		ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			Отбор.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
		ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			Отбор.ВидСравнения = ВидСравнения.НеРавно;
		ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			Отбор.ВидСравнения = ВидСравнения.Равно;
		ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
			Отбор.ВидСравнения = ВидСравнения.Содержит;
		КонецЕсли;
		
		Отбор.Значение = ОтборКомпоновщика.ПравоеЗначение;
		
	КонецПроцедуры
	
	// Возвращает список всех группировок компоновщика настроек
	Функция ПолучитьГруппировки(КомпоновщикНастроек) Экспорт
		
		СписокПолей = Новый СписокЗначений;
		
		Структура = КомпоновщикНастроек.Настройки.Структура;
		ДобавитьГруппировки(Структура, СписокПолей);
		Возврат СписокПолей;
		
	КонецФункции
	
	Процедура ДобавитьГруппировки(Структура, СписокПолей)
		
		Для каждого ЭлементСтруктуры Из Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
				ДобавитьГруппировки(ЭлементСтруктуры.Строки, СписокПолей);
				ДобавитьГруппировки(ЭлементСтруктуры.Колонки, СписокПолей);
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				ДобавитьГруппировки(ЭлементСтруктуры.Серии, СписокПолей);
				ДобавитьГруппировки(ЭлементСтруктуры.Точки, СписокПолей);
			Иначе
				СписокПолей.Добавить(ЭлементСтруктуры);
				ДобавитьГруппировки(ЭлементСтруктуры.Структура, СписокПолей);
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
	
	// Возвращает список полей группировок всех группировок компоновщика настроек
	Функция ПолучитьПоляГруппировок(КомпоновщикНастроек) Экспорт
		
		СписокПолей = Новый СписокЗначений;
		
		Структура = КомпоновщикНастроек.Настройки.Структура;
		ДобавитьПоляГруппировки(Структура, СписокПолей);
		Возврат СписокПолей;
		
	КонецФункции
	
	Процедура ДобавитьПоляГруппировки(Структура, СписокПолей)
		
		Для каждого ЭлементСтруктуры Из Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
				ДобавитьПоляГруппировки(ЭлементСтруктуры.Строки, СписокПолей);
				ДобавитьПоляГруппировки(ЭлементСтруктуры.Колонки, СписокПолей);
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				ДобавитьПоляГруппировки(ЭлементСтруктуры.Серии, СписокПолей);
				ДобавитьПоляГруппировки(ЭлементСтруктуры.Точки, СписокПолей);
			Иначе
				Для каждого ТекущееПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
					ДоступноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.НайтиПоле(ТекущееПолеГруппировки.Поле);
					СписокПолей.Добавить(Строка(ДоступноеПоле.Поле), ДоступноеПоле.Заголовок);
				КонецЦикла;
				ДобавитьПоляГруппировки(ЭлементСтруктуры.Структура, СписокПолей);
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
	
	// // Возвращает группировку по полю группировки
	Функция ПолучитьЭлементСтруктурыПоПолюГруппировки(ПолеГруппировки, КомпоновщикНастроек) Экспорт
		
		Структура = КомпоновщикНастроек.Настройки.Структура;
		Возврат НайтиЭлементСтруктурыПоПолюГруппировки(Структура, ПолеГруппировки);
		
	КонецФункции
	
	Функция НайтиЭлементСтруктурыПоПолюГруппировки(Структура, ПолеГруппировки)
		
		Для каждого ЭлементСтруктуры Из Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
				ЭлементСтруктуры = НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Строки, ПолеГруппировки);
				Если ЭлементСтруктуры = Неопределено Тогда
					Возврат НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Колонки, ПолеГруппировки);
				Иначе
					Возврат ЭлементСтруктуры;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				НайденныйЭлементСтруктуры = НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Серии, ПолеГруппировки);
				Если НайденныйЭлементСтруктуры = Неопределено Тогда
					Возврат НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Точки, ПолеГруппировки);
				Иначе
					Возврат ЭлементСтруктуры;
				КонецЕсли;
			Иначе
				Для каждого ТекущееПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
					Если ПолеГруппировки = ТекущееПолеГруппировки.Поле Тогда
						Возврат ЭлементСтруктуры;
					КонецЕсли;
				КонецЦикла;
				Возврат НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Структура, ПолеГруппировки);
			КонецЕсли;
		КонецЦикла;
		
	КонецФункции
	
	// Возвращает пользовательское поле по полю компоновки данных
	Функция НайтиПользовательскоеПоле(КомпоновщикНастроек, ПолеКомпоновкиДанных) Экспорт
		
		Для каждого ПользовательскоеПоле Из КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы Цикл
			Если ПользовательскоеПоле.ПутьКДанным = Строка(ПолеКомпоновкиДанных) Тогда
				Возврат ПользовательскоеПоле;
			КонецЕсли;
		КонецЦикла;
		
	КонецФункции
	
	// Возвращает массив наборов данных - запрос в схеме компоновки данных
	Функция ПолучитьНаборыДанныхЗапрос(СхемаКомпоновкиДанных, НаборыДанных = Неопределено, МассивНаборовДанных = Неопределено) Экспорт
		
		Если МассивНаборовДанных = Неопределено Тогда
			МассивНаборовДанных = Новый Массив;
		КонецЕсли;
		Если НаборыДанных = Неопределено Тогда
			НаборыДанных = СхемаКомпоновкиДанных.НаборыДанных;
		КонецЕсли;
		
		Для каждого НаборДанных Из НаборыДанных Цикл
			Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
				МассивНаборовДанных.Добавить(НаборДанных);
			ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
				ПолучитьНаборыДанныхЗапрос(СхемаКомпоновкиДанных, НаборДанных.Элементы, МассивНаборовДанных)
			КонецЕсли;
		КонецЦикла;
		Возврат МассивНаборовДанных;
		
	КонецФункции
	
	// Возвращает группировку - детальные записи компоновщика настроек
	Функция ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) Экспорт
		
		ПоследнийЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Истина);
		Если ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
		 ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		 ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Если ПоследнийЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() = 0 Тогда
				Возврат ПоследнийЭлементСтруктуры;
			КонецЕсли;
		КонецЕсли;
		
	КонецФункции
	
	// Возвращает последний элемент структуры - группировку
	Функция ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Строки = Истина) Экспорт
		
		Структура = КомпоновщикНастроек.Настройки.Структура;
		Если Структура.Количество() = 0 Тогда
			Возврат КомпоновщикНастроек.Настройки;
		КонецЕсли;
		
		Если Строки Тогда
			ИмяСтруктурыТаблицы = "Строки";
			ИмяСтруктурыДиаграммы = "Серии";
		Иначе
			ИмяСтруктурыТаблицы = "Колонки";
			ИмяСтруктурыДиаграммы = "Точки";
		КонецЕсли;
		
		Пока Истина Цикл
			ЭлементСтруктуры = Структура[0];
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыТаблицы].Количество() > 0 Тогда
				Если ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура.Количество() = 0 Тогда
					Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы];
					Прервать;
				КонецЕсли;
				Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыДиаграммы].Количество() > 0 Тогда
				Если ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура.Количество() = 0 Тогда
					Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
					Прервать;
				КонецЕсли;
				Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			      ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			      ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
				Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
					Прервать;
				КонецЕсли;
				Структура = ЭлементСтруктуры.Структура;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
				Возврат ЭлементСтруктуры[ИмяСтруктурыТаблицы];
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных")	Тогда
				Возврат ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
			Иначе
				Возврат ЭлементСтруктуры;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Структура[0];
		
	КонецФункции
	
	////////////////////////////////////////////////////////////
	// ФУНКЦИИ ДЛЯ ПРОГРАММНОЙ НАСТРОЙКИ КОМПОНОВЩИКА НАСТРОЕК
	
	// Устанавливает параметр данных компоновщика настроек
	Функция УстановитьПараметр(КомпоновщикНастроек, ИмяПараметра, Значение) Экспорт
		
		ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
		Если ЗначениеПараметра = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение = Значение;
			Возврат ЗначениеПараметра;
		КонецЕсли;
		
	КонецФункции
	
	// Устанавливает параметр вывода компоновщика настроек
	Функция УстановитьПараметрВывода(КомпоновщикНастроек, ИмяПараметра, Значение) Экспорт
		
		ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
		Если ЗначениеПараметра = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение = Значение;
			Возврат ЗначениеПараметра;
		КонецЕсли;
		
	КонецФункции
	
	// Добавляет отбор в набор отборов компоновщика или группы отборов
	Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено) Экспорт
		
		Если ТипЗнч(Поле) = Тип("Строка") Тогда
			Поле = Новый ПолеКомпоновкиДанных(Поле);
		КонецЕсли;
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
			Отбор = ЭлементСтруктуры.Настройки.Отбор;
		Иначе
			Отбор = ЭлементСтруктуры;
		КонецЕсли;
		
		Если ВидСравнения = Неопределено Тогда
			ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		
		НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлемент.ЛевоеЗначение = Поле;
		НовыйЭлемент.ПравоеЗначение = Значение;
		НовыйЭлемент.ВидСравнения = ВидСравнения;
		Возврат НовыйЭлемент;
		
	КонецФункции
	
	// Удаляет отбор из компоновщика настроек, если поле не указано, очищает отбор
	Функция УдалитьОтбор(КомпоновщикНастроек, Знач Поле = Неопределено) Экспорт
		
		Если Поле = Неопределено Тогда
			КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
			Возврат Истина;
		КонецЕсли;
		Если ТипЗнч(Поле) = Тип("Строка") Тогда
			Поле = Новый ПолеКомпоновкиДанных(Поле);
		КонецЕсли;
		ПолеУдалено = Ложь;
		Элементы = ПолучитьЭлементыОтбора(КомпоновщикНастроек);
		Для каждого Элемент Из Элементы Цикл
			Если Элемент.Использование И Элемент.ЛевоеЗначение = Поле Тогда
				Элемент.Использование = Ложь;
				ПолеУдалено = Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат ПолеУдалено;
		
	КонецФункции
	
	// Удаляет указанное выбранное поле из компоновщика настроек, если поле не указано - очищает все поля
	Функция УдалитьВыбранноеПоле(ЭлементСтруктуры, Знач Поле = Неопределено) Экспорт
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
			ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
		Иначе
			ВыбранныеПоля = ЭлементСтруктуры;
		КонецЕсли;
		
		Если Поле = Неопределено Тогда
			ВыбранныеПоля.Элементы.Очистить();
			Возврат Истина;
		КонецЕсли;
		Если ТипЗнч(Поле) = Тип("Строка") Тогда
			Поле = Новый ПолеКомпоновкиДанных(Поле);
		КонецЕсли;
		ПолеУдалено = Ложь;
		Элементы = ПолучитьВыбранныеПоля(ВыбранныеПоля);
		Для каждого Элемент Из Элементы Цикл
			Если Элемент.Использование И Элемент.Поле = Поле Тогда
				Элемент.Использование = Ложь;
				ПолеУдалено = Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат ПолеУдалено;
		
	КонецФункции
	
	// Добавляет группировку в компоновщик настроек в самый нижний уровень структуры, если поле не укзано - детальные поля
	Функция ДобавитьГруппировку(КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина) Экспорт
		
		ЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Строки);
		Если ЭлементСтруктуры = Неопределено 
		 ИЛИ ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) <> Неопределено 
		   И Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ТипЗнч(Поле) = Тип("Строка") Тогда
			Поле = Новый ПолеКомпоновкиДанных(Поле);
		КонецЕсли;
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		 ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить();
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
  		      ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
			НоваяГруппировка = ЭлементСтруктуры.Добавить();
		Иначе
			НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		КонецЕсли;
		
		НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		Если Поле <> Неопределено Тогда
			ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Поле = Поле;
		КонецЕсли;
		Возврат НоваяГруппировка;
		
	КонецФункции
	
	// Функция удаляет из компоновщика настроек указанную в параметре группировку, если параметр не указан, удаляет все группировки
	Функция УдалитьГруппировку(КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина) Экспорт
		
		Если КомпоновщикНастроек.Настройки.Структура.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Элемент = КомпоновщикНастроек.Настройки.Структура[0];
		Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Если Строки И Элемент.Строки.Количество() > 0 Тогда
				Элемент = Элемент.Строки[0];
			ИначеЕсли Не Строки И Элемент.Колонки.Количество() > 0 Тогда
				Элемент = Элемент.Колонки[0];
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			Если Строки И Элемент.Серии.Количество() > 0 Тогда
				Элемент = Элемент.Серии[0];
			ИначеЕсли Не Строки И Элемент.Точки.Количество() > 0 Тогда
				Элемент = Элемент.Точки[0];
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если Поле = Неопределено Тогда
			КомпоновщикНастроек.Настройки.Структура.Очистить();
			Возврат Неопределено;
		КонецЕсли;
		Если ТипЗнч(Поле) = Тип("Строка") Тогда
			Поле = Новый ПолеКомпоновкиДанных(Поле);
		КонецЕсли;
		Пока Истина Цикл
			Если Элемент.ПоляГруппировки.Элементы.Количество() > 0 
			   И Элемент.ПоляГруппировки.Элементы[0].Поле = Поле Тогда
				Элемент.Родитель.Структура.Очистить();
				Прервать;
				Возврат Истина;
			ИначеЕсли Элемент.Структура.Количество() > 0 Тогда
				Элемент = Элемент.Структура[0];
			Иначе 
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецФункции
	
	// Возвращает массив элементов отбора или групп элементов отбора
	Функция ПолучитьЭлементыОтбора(КомпоновщикНастроек, ТолькоГруппы = Ложь) Экспорт
		
		МассивПолей = Новый Массив;
		ДобавитьЭлементыОтбораВМассив(КомпоновщикНастроек.Настройки.Отбор.Элементы, МассивПолей, ТолькоГруппы);
		Возврат МассивПолей;
		
	КонецФункции
	
	Процедура ДобавитьЭлементыОтбораВМассив(Элементы, МассивПолей, ТолькоГруппы = Ложь)
		
		Для каждого Элемент Из Элементы Цикл
			Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если ТолькоГруппы Тогда
					МассивПолей.Добавить(Элемент);
				КонецЕсли;
				ДобавитьЭлементыОтбораВМассив(Элемент.Элементы, МассивПолей, ТолькоГруппы);
			Иначе
				Если Не ТолькоГруппы Тогда
					МассивПолей.Добавить(Элемент);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
	
	// Возвращает массив выбранных полей или групп выбранных полей
	Функция ПолучитьВыбранныеПоля(ЭлементСтруктуры, ТолькоГруппы = Ложь) Экспорт
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") 
		 ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных")  Тогда
			ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
		Иначе
			ВыбранныеПоля = ЭлементСтруктуры;
		КонецЕсли;
		
		МассивПолей = Новый Массив;
		ДобавитьВыбранныеПоляВМассив(ВыбранныеПоля.Элементы, МассивПолей, ТолькоГруппы);
		Возврат МассивПолей;
		
	КонецФункции
	
	Процедура ДобавитьВыбранныеПоляВМассив(ЭлементСтруктуры, МассивПолей, ТолькоГруппы = Ложь)
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
			ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
		Иначе
			ВыбранныеПоля = ЭлементСтруктуры;
		КонецЕсли;
		
		Для каждого Элемент Из ЭлементСтруктуры Цикл
			Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
				Продолжить;
			ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				Если ТолькоГруппы Тогда
					МассивПолей.Добавить(Элемент);
				КонецЕсли;
				ДобавитьВыбранныеПоляВМассив(Элемент.Элементы, МассивПолей, ТолькоГруппы);
			Иначе
				Если Не ТолькоГруппы Тогда
					МассивПолей.Добавить(Элемент);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
	
	// Добавляет в набор данных поле набора данных
	Функция ДобавитьПолеНабораДанных(НаборДанных, Поле, Заголовок, ПутьКДанным = Неопределено) Экспорт
		
		Если ПутьКДанным = Неопределено Тогда
			ПутьКДанным = Поле;
		КонецЕсли;
		
		ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = Поле;
		ПолеНабораДанных.Заголовок   = Заголовок;
		ПолеНабораДанных.ПутьКДанным = ПутьКДанным;
		Возврат ПолеНабораДанных;
		
	КонецФункции
	
	// Добавляет в набор данных поля периода Период секунда, минута, час ....
	Функция ДобавитьПоляПериодаВНаборДанных(НаборДанных) Экспорт
		
		СписокПериодов = Новый СписокЗначений;
		СписокПериодов.Добавить("ПериодСекунда",   "Период секунда");
		СписокПериодов.Добавить("ПериодМинута",    "Период минута");
		СписокПериодов.Добавить("ПериодЧас",       "Период час");
		СписокПериодов.Добавить("ПериодДень",      "Период день");
		СписокПериодов.Добавить("ПериодНеделя",    "Период неделя");
		СписокПериодов.Добавить("ПериодДекада",    "Период декада");
		СписокПериодов.Добавить("ПериодМесяц",     "Период месяц");
		СписокПериодов.Добавить("ПериодКвартал",   "Период квартал");
		СписокПериодов.Добавить("ПериодПолугодие", "Период полугодие");
		СписокПериодов.Добавить("ПериодГод",       "Период год");
		
		ИмяПапки = "Периоды";
		СписокПолейНабораДанных = Новый СписокЗначений;
		ПапкаПолейНабораДанных = НаборДанных.Поля.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));
		ПапкаПолейНабораДанных.Заголовок   = ИмяПапки;
		ПапкаПолейНабораДанных.ПутьКДанным = ИмяПапки;
		
		Для каждого Период Из СписокПериодов Цикл
			ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			ПолеНабораДанных.Поле        = Период.Значение;
			ПолеНабораДанных.Заголовок   = Период.Представление;
			ПолеНабораДанных.ПутьКДанным = ИмяПапки + "." + Период.Значение;
			СписокПолейНабораДанных.Добавить(ПолеНабораДанных);
		КонецЦикла;
		
		Возврат СписокПолейНабораДанных;
		
	КонецФункции
	
	// Функция добавляет поле итога в схему компоновки данных. Если параметр Выражение не указан, используется Сумма(ПутьКДанным)
	Функция ДобавитьПолеИтога(СхемаКомпоновкиДанных, ПутьКДанным, Выражение = Неопределено) Экспорт
		
		Если Выражение = Неопределено Тогда
			Выражение = "Сумма(" + ПутьКДанным + ")";
		КонецЕсли;
		
		ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
		ПолеИтога.ПутьКДанным = ПутьКДанным;
		ПолеИтога.Выражение = Выражение;
		Возврат ПолеИтога;
		
	КонецФункции
	
	// Функция добавляет выбранное поле в набор выбранных полей
	Функция ДобавитьВыбранноеПоле(ЭлементСтруктуры, Знач Поле, Заголовок = Неопределено) Экспорт
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
			ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
		Иначе
			ВыбранныеПоля = ЭлементСтруктуры;
		КонецЕсли;
		
		Если ТипЗнч(Поле) = Тип("Строка") Тогда
			Поле = Новый ПолеКомпоновкиДанных(Поле);
		КонецЕсли;
		ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = Поле;
		Если Заголовок <> Неопределено Тогда
			ВыбранноеПоле.Заголовок = Заголовок;
		КонецЕсли;
		Возврат ВыбранноеПоле;
		
	КонецФункции
	
	// Функция добавляет в схему компоновки источник данных с типом "Local"
	Функция ДобавитьЛокальныйИсточникДанных(СхемаКомпоновкиДанных) Экспорт
		
		ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
		ИсточникДанных.Имя = "ИсточникДанных1";
		ИсточникДанных.ТипИсточникаДанных = "Local";
		Возврат ИсточникДанных;
		
	КонецФункции
	
	// Функция добавляет набор данных - запрос в указанную в параметре коллекцию наборов данных
	Функция ДобавитьНаборДанныхЗапрос(НаборыДанных, ИсточникДанных, ИмяНабораДанных = "НаборДанных1") Экспорт
		
		НаборДанных = НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
		НаборДанных.Имя = ИмяНабораДанных;
		НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
		Возврат НаборДанных;
		
	КонецФункции
	
	// Функция добавляет набор данных - объединение в указанную в параметре коллекцию наборов данных
	Функция ДобавитьНаборДанныхОбъединение(НаборыДанных, ИсточникДанных, ИмяНабораДанных = "НаборДанных1") Экспорт
		
		НаборДанных = НаборыДанных.Добавить(Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"));
		НаборДанных.Имя = ИмяНабораДанных;
		Возврат НаборДанных;
		
	КонецФункции
	
	// Процедура по пути к данным поля набора данных заполняет его роль
	Процедура ЗаполнитьПолеНабораДанныхОстаток(ПолеНабораДанных, ГруппаОстатка) Экспорт
		
		ПутьКДанным = ПолеНабораДанных.ПутьКДанным;
		
		Если Найти(ПутьКДанным, "НачальныйОстаток") > 0 ИЛИ Найти(ПутьКДанным, "КонечныйОстаток") > 0 Тогда
			ПолеНабораДанных.Роль.Остаток = Истина;
			ПолеНабораДанных.Роль.ГруппаОстатка = ГруппаОстатка;
			Если ВРег(Прав(ПутьКДанным, 2)) = "ДТ" Тогда
				ПолеНабораДанных.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Дебет
			ИначеЕсли ВРег(Прав(ПутьКДанным, 2)) = "КТ" Тогда
				ПолеНабораДанных.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Кредит
			Иначе
				ПолеНабораДанных.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Нет
			КонецЕсли;
			Если Найти(ПутьКДанным, "НачальныйОстаток") > 0 Тогда
				ПолеНабораДанных.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток;
			ИначеЕсли Найти(ПутьКДанным, "КонечныйОстаток") > 0 Тогда
				ПолеНабораДанных.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток;
			Иначе
				ПолеНабораДанных.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.Нет;
			КонецЕсли;
		КонецЕсли;	
		
	КонецПроцедуры
	
	Функция ПоказатьСхему(СхемаКомпоновкиДанных, КомпоновщикНастроек, Форма) Экспорт
		
		СкопироватьНастройкиКомпоновкиДанных(СхемаКомпоновкиДанных.НастройкиПоУмолчанию, КомпоновщикНастроек.ПолучитьНастройки());
		//СхемаКомпоновкиДанных.НаборыДанных[0].Элементы[0].Запрос = СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных[0].Элементы[0].Запрос, "ВЫБРАТЬ", "ВЫБРАТЬ" + Символы.ПС);
		//Если ВыводитьРазвернутоеСальдо Тогда
		//	СхемаКомпоновкиДанных.НаборыДанных[0].Элементы[1].Запрос = СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных[0].Элементы[1].Запрос, "ВЫБРАТЬ", "ВЫБРАТЬ" + Символы.ПС);
		//КонецЕсли;
		Конструктор = Новый КонструкторСхемыКомпоновкиДанных(СхемаКомпоновкиДанных);
		Конструктор.Редактировать(Форма);
		
		Возврат Истина;
		
	КонецФункции
	
	// Добавляет в макеты макета компоновки расшифровку для ресурсов
	Процедура ДополнитьМакетыМакетаКомпоновкиРасшифровкойРесурсов(МакетКомпоновки, КомпоновщикНастроек) Экспорт
		
		Для каждого Макет Из МакетКомпоновки.Макеты Цикл
			// Получим массив параметров расшифровки
			МассивВыраженийПолей = Новый Массив;
			Для каждого Параметр Из Макет.Параметры Цикл
				Если ТипЗнч(Параметр) <> Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				Для каждого ВыражениеПоля Из Параметр.ВыраженияПолей Цикл
					Если Не ЭтоВыражениеПоляПараметраРасшифровкиРесурс(ВыражениеПоля, КомпоновщикНастроек) Тогда
						МассивВыраженийПолей.Добавить(ВыражениеПоля);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			// Установим параметры расшифровки у ресурсов
			Для каждого Параметр Из Макет.Параметры Цикл
				Если ТипЗнч(Параметр) <> Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				Ресурс = Ложь;
				Для каждого ВыражениеПоля Из Параметр.ВыраженияПолей Цикл
					Если ЭтоВыражениеПоляПараметраРасшифровкиРесурс(ВыражениеПоля, КомпоновщикНастроек) Тогда
						Ресурс = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не Ресурс Тогда
					Продолжить;
				КонецЕсли;
				Для каждого ВыражениеПоля Из МассивВыраженийПолей Цикл
					Если Параметр.ВыраженияПолей.Найти(ВыражениеПоля.Поле) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					НовоеВыражениеПоля = Параметр.ВыраженияПолей.Добавить();
					ЗаполнитьЗначенияСвойств(НовоеВыражениеПоля, ВыражениеПоля);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецПроцедуры
	
	Функция ЭтоВыражениеПоляПараметраРасшифровкиРесурс(ВыражениеПоля, КомпоновщикНастроек)
		
		ДоступныеРесурсы = ПолучитьСписокДоступныхРесурсов(КомпоновщикНастроек);
		ДостуныйРесурс = ДоступныеРесурсы.НайтиПоЗначению(Новый ПолеКомпоновкиДанных(ВыражениеПоля.Поле));
		Возврат ДостуныйРесурс <> Неопределено;
		
	КонецФункции
	
	Процедура ОбработкаИзмененияТиповогоОтчетаНаФормеОтчета(ОтчетОбъект, ФормаОтчета) Экспорт
		
		Если ОтчетОбъект.СохраненнаяНастройка <> Неопределено 
		   И ОтчетОбъект.СохраненнаяНастройка.СохранятьАвтоматически Тогда
			ФормаОтчета.СохранитьНастройку();
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция СериализоватьОбъект(Объект) Экспорт
		
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Объект);//, "item", " {http://v8.1c.ru/8.1/data-composition-system/schema}");
		СтрокаXML = ЗаписьXML.Закрыть();
		Возврат СтрокаXML;
		//ЧтениеXML = Новый ЧтениеXML();
		//ЧтениеXML.УстановитьСтроку(СтрокаXML);
		//
		//Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML, ТипЗнч(Объект));
		
	КонецФункции
	
#КонецЕсли
