

// Функция возвращает номер строки в поле табличного документа
//  для вывода События по его дате (начала или конца)
//
// Параметры
//  Часы - Строка, часы даты
//  Минуты - Строка, минуты даты
//  Дата - Дата, текущее значение даты для определения
//  Начало - Булево, признак начала или окончания периода
//  ДатаСравнения - Дата, дата с которой сравнивается значение исходной даты
//
// Возвращаемое значение:
//   Число - номер строки в поле табличного документа
//
Функция ВозвратитьНомерСтроки(Часы, Минуты, Дата, Начало, ДатаСравнения) Экспорт
	
	Если ПустаяСтрока(Часы) Тогда
		Часы = 0;
	Иначе
		Часы = Число(Часы);
	КонецЕсли; 
	
	Если ПустаяСтрока(Минуты) Тогда
		Минуты = 0;
	Иначе
		Минуты = Число(Минуты);
	КонецЕсли; 
	
	Если Начало Тогда
		Если Дата < НачалоДня(ДатаСравнения) Тогда
			Возврат 1;
		Иначе
			Если Минуты < 30 Тогда
				Если Минуты = 0 Тогда
					Если Часы = 0 Тогда
						Возврат 1;
					Иначе
						Возврат (Часы * 2 + 1);
					КонецЕсли; 
				Иначе
					Возврат (Часы * 2 + 1);
				КонецЕсли; 
			Иначе
				Если Часы = 23 Тогда
					Возврат 48;
				Иначе
					Возврат (Часы * 2 + 2);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
	Иначе
		Если Дата > КонецДня(ДатаСравнения) Тогда
			Возврат 48;
		Иначе
			Если Минуты = 0 Тогда
				Если Часы = 0 Тогда
					Возврат 1;
				Иначе
					Возврат (Часы * 2);
				КонецЕсли; 
			ИначеЕсли Минуты <= 30 Тогда
				Возврат (Часы * 2 + 1);
			Иначе
				Если Часы = 23 Тогда
					Возврат 48;
				Иначе
					Возврат (Часы * 2 + 2);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
КонецФункции

// Процедура выполняется при проведении или отмене проведения документа Событие
//  и переписывает записи регитра сведений СобытияКалендаряПользователя.
Процедура РаспределитьСобытияДня(ДатаРаспределения,Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СобытияКалендаряПользователяОбобщенные.Событие КАК Событие,
	|	СобытияКалендаряПользователяОбобщенные.НомерНачальнойСтроки КАК НомерНачальнойСтроки,
	|	СобытияКалендаряПользователяОбобщенные.НомерКонечнойСтроки КАК НомерКонечнойСтроки
	|ИЗ
	|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователяОбобщенные
	|ГДЕ
	|	СобытияКалендаряПользователяОбобщенные.Дата = &ВыбДата
	|	И
	|	СобытияКалендаряПользователяОбобщенные.Пользователь = &ВыбПользователь
	|";
	
	Запрос.УстановитьПараметр("ВыбДата", ДатаРаспределения);
	Запрос.УстановитьПараметр("ВыбПользователь", Пользователь);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	НомерСтрокиНачало = 0;
	НомерСтрокиКонец  = 0;
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		
		КопияТаблицыЗапроса = ТаблицаЗапроса.Скопировать();
		
		КопияТаблицыЗапроса.Сортировать("НомерНачальнойСтроки ВОЗР");
		НомерСтрокиНачало = КопияТаблицыЗапроса[0].НомерНачальнойСтроки;
		
		КопияТаблицыЗапроса.Сортировать("НомерКонечнойСтроки УБЫВ");
		НомерСтрокиКонец = КопияТаблицыЗапроса[0].НомерКонечнойСтроки;
		
	КонецЕсли; 
	
	СписокЗначенийВремен = Новый СписокЗначений;
	
	Если НомерСтрокиНачало <> 0 И НомерСтрокиКонец <> 0 Тогда
		
		Для а=1 По 48 Цикл
			НовыйСписок = Новый СписокЗначений;
			СписокЗначенийВремен.Добавить(НовыйСписок);
		КонецЦикла;
		
		Для а=НомерСтрокиНачало По НомерСтрокиКонец Цикл
			
			НовыйСписок = СписокЗначенийВремен[а-1].Значение;
			
			ИндексСтрокиТаблицы = 0;
			Пока 1 = 1 Цикл
				
				Если ИндексСтрокиТаблицы > ТаблицаЗапроса.Количество() - 1 Тогда
					Прервать;
				КонецЕсли; 
				
				СтрокаТаблицы = ТаблицаЗапроса[ИндексСтрокиТаблицы];
				
				Если СтрокаТаблицы.НомерНачальнойСтроки <= а И СтрокаТаблицы.НомерКонечнойСтроки >= а Тогда
					
					ЕстьСвободноеМесто = Ложь;
					
					Для каждого ЭлементНовогоСписка Из НовыйСписок Цикл
						
						Если ЭлементНовогоСписка.Значение = Неопределено Тогда
							
							ЭлементНовогоСписка.Значение = СтрокаТаблицы.Событие;
							
							ЕстьСвободноеМесто = Истина;
							ИндексСписка = НовыйСписок.Индекс(ЭлементНовогоСписка);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если НЕ ЕстьСвободноеМесто Тогда
						
						Если НовыйСписок.Количество() >= 18 Тогда
							Прервать;
						КонецЕсли; 
						
						ВновьВведенныйЭлемент = НовыйСписок.Добавить(СтрокаТаблицы.Событие);
						ИндексСписка = НовыйСписок.Индекс(ВновьВведенныйЭлемент);
						
					КонецЕсли;
					
					Если а <= СписокЗначенийВремен.Количество() Тогда
						
						ИндексТекущегоСписка = а - 1 + 1;
						Для б = а По СтрокаТаблицы.НомерКонечнойСтроки - 1 Цикл
							
							ТекущийСписок = СписокЗначенийВремен[б].Значение;
							
							Если ТекущийСписок.Количество() < (ИндексСписка + 1) Тогда
								
								Для с = (ТекущийСписок.Количество() + 1) По (ИндексСписка + 1) Цикл
									
									ТекущийСписок.Добавить(Неопределено);
									
								КонецЦикла;
								
							КонецЕсли;
							
							ТекущийСписок[ИндексСписка].Значение = СтрокаТаблицы.Событие;
							
						КонецЦикла; 
						
					КонецЕсли; 
					
					ТаблицаЗапроса.Удалить(СтрокаТаблицы);
					Продолжить;
					
				КонецЕсли;
				
				ИндексСтрокиТаблицы = ИндексСтрокиТаблицы + 1;
				
			КонецЦикла; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
	// Очистим значения предидущего распределния
	НаборЗаписейРегистра = РегистрыСведений.СобытияКалендаряПользователя.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Пользователь.Значение      = Пользователь;
	НаборЗаписейРегистра.Отбор.Пользователь.Использование = Истина;
	НаборЗаписейРегистра.Отбор.Дата.Значение              = ДатаРаспределения;
	НаборЗаписейРегистра.Отбор.Дата.Использование         = Истина;
	НаборЗаписейРегистра.Очистить();
	
	// Проведем распределение заново
	Для каждого СтрокаВремени Из СписокЗначенийВремен Цикл
		
		СписокТекущегоВремени = СтрокаВремени.Значение;
		
		Если ТипЗнч(СписокТекущегоВремени) = Тип("СписокЗначений") И СписокТекущегоВремени.Количество() > 0 Тогда
			
			Для каждого ЭлементДокумента Из СписокТекущегоВремени Цикл
				
				НоваяЗаписьРегистра = НаборЗаписейРегистра.Добавить();
				НоваяЗаписьРегистра.Событие = ЭлементДокумента.Значение;
				НоваяЗаписьРегистра.НомерСтрокиТаблицы = СписокЗначенийВремен.Индекс(СтрокаВремени) + 1;
				НоваяЗаписьРегистра.Дата = ДатаРаспределения;
				НоваяЗаписьРегистра.Пользователь = Пользователь;
				НоваяЗаписьРегистра.ПорядковыйНомерВДне = СписокТекущегоВремени.Индекс(ЭлементДокумента) + 1;
				
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
	НаборЗаписейРегистра.Записать();
	
	Если ТипЗнч(КопияТаблицыЗапроса) = Тип("ТаблицаЗначений") Тогда
		
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.ЗагрузитьЗначения(КопияТаблицыЗапроса.ВыгрузитьКолонку("Событие"));
		
		Для каждого ДокументСписка Из СписокДокументов Цикл
			
			НаборЗаписейРегистра = РегистрыСведений.СобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
			НаборЗаписейРегистра.Отбор.Пользователь.Значение      = Пользователь;
			НаборЗаписейРегистра.Отбор.Пользователь.Использование = Истина;
			НаборЗаписейРегистра.Отбор.Дата.Значение              = ДатаРаспределения;
			НаборЗаписейРегистра.Отбор.Дата.Использование         = Истина;
			НаборЗаписейРегистра.Отбор.Событие.Значение           = ДокументСписка.Значение;
			НаборЗаписейРегистра.Отбор.Событие.Использование      = Истина;
			НаборЗаписейРегистра.Прочитать();
			
			Для каждого ЗаписьРегистра Из НаборЗаписейРегистра Цикл
				КоличествоДокументов = 0;
				Для б = ЗаписьРегистра.НомерНачальнойСтроки - 1 По ЗаписьРегистра.НомерКонечнойСтроки - 1 Цикл
					ТекСписок = СписокЗначенийВремен[б].Значение;
					Если ТекСписок.Количество() > КоличествоДокументов Тогда
						КоличествоДокументов = ТекСписок.Количество();
					КонецЕсли; 
				КонецЦикла;
				ЗаписьРегистра.КоличествоОдновременныхДокументов = КоличествоДокументов;
				
			КонецЦикла;
			
			НаборЗаписейРегистра.Записать(Истина);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура выполняет запись в регистр сведений
//
Процедура ВвестиЗаписьВРегистр(Дата, НомерНачальнойСтроки, НомерКонечнойСтроки, НаборЗаписейРегистра, Ссылка, ДатаНачала, ДатаОкончания)
	
	НоваяЗапись = НаборЗаписейРегистра.Добавить();
	
	НоваяЗапись.Событие              = Ссылка;
	НоваяЗапись.Дата                 = Дата;
	НоваяЗапись.НомерНачальнойСтроки = НомерНачальнойСтроки;
	НоваяЗапись.НомерКонечнойСтроки  = НомерКонечнойСтроки;
	НоваяЗапись.Пользователь         = Справочники.Пользователи.ПустаяСсылка();
	
	НоваяЗапись.ДатаНачалаСобытия    = ДатаНачала;
	НоваяЗапись.ДатаКонцаСобытия     = ДатаОкончания;
	
КонецПроцедуры

// Процедура отражает занятость помещений в регистрах сведений для календаря пользователя
//
Процедура ОтразитьЗанятостьПомещений(Ссылка,ДатаНачала,ДатаОкончания,мСтараяДатаНачалаСобытия,мСтараяДатаОкончанияСобытия) Экспорт
	
	НаборЗаписей = РегистрыСведений.СобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Событие.Значение = Ссылка;
	НаборЗаписей.Отбор.Событие.Использование = Истина;
	НаборЗаписей.Отбор.Пользователь.Значение = Справочники.Пользователи.ПустаяСсылка();
	НаборЗаписей.Отбор.Пользователь.Использование = Истина;
	НаборЗаписей.Очистить();
	
	НачальнаяСтрока = ВозвратитьНомерСтроки(Формат(ДатаНачала,"ДФ=Ч"), Формат(ДатаНачала,"ДФ=м"), ДатаНачала, Истина, ДатаНачала);
	Если Формат(ДатаНачала,"ДФ=Ч") = Формат(ДатаОкончания,"ДФ=Ч") И Формат(ДатаНачала,"ДФ=м") = Формат(ДатаОкончания,"ДФ=м") Тогда
		КонечнаяСтрока  = НачальнаяСтрока;
	Иначе
		КонечнаяСтрока  = ВозвратитьНомерСтроки(Формат(ДатаОкончания,"ДФ=Ч"), Формат(ДатаОкончания,"ДФ=м"), ДатаОкончания, Ложь, ДатаОкончания);
	КонецЕсли; 
	
	Если НачалоДня(ДатаНачала) <> НачалоДня(ДатаОкончания) Тогда
		
		КоличествоИнтерваловМеждуДнями = Цел((НачалоДня(ДатаОкончания) - КонецДня(ДатаНачала) + 1)/(60*60*24));
		
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			
			ДатаИнтервала = НачалоДня(ДатаНачала) + (60*60*24)*а;
			
			ВвестиЗаписьВРегистр(ДатаИнтервала, 1, 48, НаборЗаписей, Ссылка, ДатаНачала, ДатаОкончания);
			
		КонецЦикла;
		
		ВвестиЗаписьВРегистр(НачалоДня(ДатаНачала), НачальнаяСтрока, 48, НаборЗаписей, Ссылка, ДатаНачала, ДатаОкончания);
		ВвестиЗаписьВРегистр(НачалоДня(ДатаОкончания), 1, КонечнаяСтрока, НаборЗаписей, Ссылка, ДатаНачала, ДатаОкончания);
		
	Иначе
		
		ВвестиЗаписьВРегистр(НачалоДня(ДатаНачала), НачальнаяСтрока, КонечнаяСтрока, НаборЗаписей, Ссылка, ДатаНачала, ДатаОкончания);
		
	КонецЕсли;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
	СписокПерераспределенныхДат = Новый СписокЗначений;
	
	Если НачалоДня(мСтараяДатаНачалаСобытия) <> НачалоДня(ДатаНачала) ИЛИ НачалоДня(мСтараяДатаОкончанияСобытия) <> НачалоДня(ДатаОкончания) Тогда
		КоличествоИнтерваловМеждуДнями = Цел((КонецДня(мСтараяДатаОкончанияСобытия) + 1 - НачалоДня(мСтараяДатаНачалаСобытия))/(60*60*24));
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			
			ДатаИнтервала = НачалоДня(НачалоДня(мСтараяДатаНачалаСобытия) + (60*60*24)*а - 1);
			СписокПерераспределенныхДат.Добавить(ДатаИнтервала);
			
			РаспределитьСобытияДня(ДатаИнтервала);
			
		КонецЦикла; 
	КонецЕсли; 
	
	Если НачалоДня(ДатаНачала) <> НачалоДня(ДатаОкончания) Тогда
		
		КоличествоИнтерваловМеждуДнями = Цел((НачалоДня(ДатаОкончания) - КонецДня(ДатаНачала) + 1)/(60*60*24));
		
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			
			ДатаИнтервала = НачалоДня(ДатаНачала) + (60*60*24)*а;
			Если СписокПерераспределенныхДат.НайтиПоЗначению(ДатаИнтервала) = Неопределено Тогда
				
				РаспределитьСобытияДня(ДатаИнтервала);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(ДатаНачала)) = Неопределено Тогда
			
			РаспределитьСобытияДня(НачалоДня(ДатаНачала));
			
			
		КонецЕсли; 
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(ДатаОкончания)) = Неопределено Тогда
			
			РаспределитьСобытияДня(НачалоДня(ДатаОкончания));
			
			
		КонецЕсли; 
		
	Иначе
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(ДатаНачала)) = Неопределено Тогда
			
			РаспределитьСобытияДня(НачалоДня(ДатаНачала));
			
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

// Функция определяет начало и окончание рабочего дня пользователя, по его графику работы
//
// Параметры
//  Пользователь - СправочникСсылка.Пользователи, пользователь по которому определяются
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ОпределитьНачалоИОкончениеРабочегоДняПользователя(Пользователь, РабочаяДата) Экспорт
	
	ДатаНачала      = '00010101000000';
	ДатаОкончания   = '00010101235959';
	НайденныйГрафик = Неопределено;
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Если НЕ Пользователь.ФизЛицо.Пустая() Тогда
			Запрос = новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ГрафикРаботы КАК Значение, 
			|ГрафикРаботы.ВидГрафика КАК ВидГрафика 
			|ИЗ РегистрСведений.Работники.СрезПоследних(&РабочаяДата, ФизЛицо=&ФизЛицо)";
			Запрос.УстановитьПараметр("РабочаяДата",РабочаяДата); 
			Запрос.УстановитьПараметр("ФизЛицо",Пользователь.ФизЛицо); 
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйГрафик = Выборка;
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если НайденныйГрафик = Неопределено Тогда
			СписокПолей = новый СписокЗначений;
			СписокПолей.Добавить("ВидГрафика");
			НайденныйГрафик = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюСДополнительнымиПолями(Пользователь, "ГрафикРаботы", СписокПолей);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	 
	
	СтруктураВозврата = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания);
	
	Возврат СтруктураВозврата;
	
КонецФункции // ОпределитьНачалоИОкончениеРабочегоДняПользователя()

// Процедура показывает формы Напоминаний.
// 
//  Параметры
//   ТаблицаНапоминаний - ТаблицаЗначений, с Напоминаниями
//
Процедура ОбработкаСпискаНапоминаний(ТаблицаНапоминаний)

	ФормаНапоминания = ПолучитьОбщуюФорму("ФормаНапоминания",,"Уникум");
	ФормаНапоминания.ОбновитьТаблицуНапоминаний(ТаблицаНапоминаний);

	Если ФормаНапоминания.Открыта() Тогда
		ФормаНапоминания.Активизировать();
	Иначе
		ФормаНапоминания.Открыть();
	КонецЕсли;

КонецПроцедуры // ОбработкаСпискаНапоминаний()

// Процедура проверяет Напоминания из регистра.
// 
//  Параметры
//   ТаблицаНапоминаний - ТаблицаЗначений, с Напоминаниями
//
Процедура ПроверитьНапоминанияПользователя(ВыбПользователь, ПроверятьДеньРождения = Ложь) Экспорт
	
 	РезультирующаяТаблица = Новый ТаблицаЗначений;
	РезультирующаяТаблица.Колонки.Добавить("ДокументНапоминания");
	РезультирующаяТаблица.Колонки.Добавить("Пользователь");
	РезультирующаяТаблица.Колонки.Добавить("ДатаНапоминания");
	РезультирующаяТаблица.Колонки.Добавить("Тема");
	РезультирующаяТаблица.Колонки.Добавить("Контрагент");
	РезультирующаяТаблица.Колонки.Добавить("КонтактноеЛицо");
	РезультирующаяТаблица.Колонки.Добавить("ТекстНапоминания");
	РезультирующаяТаблица.Колонки.Добавить("ФлагДеньРождения");
	
	//Если ПроверятьДеньРождения Тогда

	//	//Запрос = Новый Запрос;

	//	//Запрос.Текст = "
	//	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	//|	КонтактныеЛицаКонтрагентов.КонтактноеЛицо              КАК КонтактноеЛицо,
	//	//|	КонтактныеЛицаКонтрагентов.Владелец                    КАК Контрагент,
	//	//|	КонтактныеЛицаКонтрагентов.РольКонтактногоЛица         КАК РольКонтактногоЛица,
	//	//|	КонтактныеЛицаКонтрагентов.Должность                   КАК ДолжностьКонтактногоЛица,
	//	//|	КонтактныеЛицаКонтрагентов.КонтактноеЛицо.ДатаРождения КАК ДатаРождения
	//	//|ИЗ
	//	//|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	//	//|
	//	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//	//|	Справочник.Контрагенты.МенеджерыПокупателя КАК Менеджеры
	//	//|ПО
	//	//|	Менеджеры.Ссылка = КонтактныеЛицаКонтрагентов.Владелец
	//	//|
	//	//|ГДЕ
	//	//|	(КонтактныеЛицаКонтрагентов.Владелец.ОсновнойМенеджерПокупателя = &ТекущийПользователь
	//	//|	ИЛИ Менеджеры.МенеджерПокупателя = &ТекущийПользователь)
	//	//|	И КонтактныеЛицаКонтрагентов.Владелец ССЫЛКА Справочник.Контрагенты
	//	//|	И КонтактныеЛицаКонтрагентов.Владелец <> &ПустойКонтрагент
	//	//|	И КонтактныеЛицаКонтрагентов.КонтактноеЛицо.НапоминатьОДнеРождения = Истина
	//	//|
	//	//|ОБЪЕДИНИТЬ ВСЕ
	//	//|
	//	//|ВЫБРАТЬ 
	//	//|	ЛичныеКонтакты.Ссылка 			КАК КонтактноеЛицо,
	//	//|	NULL 							КАК Контрагент,
	//	//|	NULL 							КАК РольКонтактногоЛица,
	//	//|	NULL        					КАК ДолжностьКонтактногоЛица,
	//	//|	ЛичныеКонтакты.ДатаРождения  	КАК ДатаРождения
	//	//|ИЗ
	//	//|	Справочник.ЛичныеКонтакты КАК ЛичныеКонтакты
	//	//|
	//	//|ГДЕ
	//	//|	ЛичныеКонтакты.ПользовательДляОграниченияПравДоступа = &ТекущийПользователь
	//	//|	И ЛичныеКонтакты.НапоминатьОДнеРождения = Истина
	//	//|
	//	//|ОБЪЕДИНИТЬ ВСЕ
	//	//|
	//	//|ВЫБРАТЬ
	//	//|	КонтактныеЛица.Ссылка                   КАК КонтактноеЛицо,
	//	//|	КонтактныеЛицаКонтрагентов.Владелец     КАК Контрагент,
	//	//|	КонтактныеЛицаКонтрагентов.РольКонтактногоЛица КАК РольКонтактногоЛица,
	//	//|	КонтактныеЛицаКонтрагентов.Должность    КАК ДолжностьКонтактногоЛица,
	//	//|	КонтактныеЛица.ДатаРождения             КАК ДатаРождения
	//	//|ИЗ
	//	//|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	//	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//	//|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	//	//|	ПО 
	//	//|	КонтактныеЛицаКонтрагентов.КонтактноеЛицо = КонтактныеЛица.Ссылка
	//	//|
	//	//|ГДЕ
	//	//|	КонтактныеЛицаКонтрагентов.Владелец = &ТекущийПользователь
	//	//|	И (КонтактныеЛицаКонтрагентов.Владелец ЕСТЬ NULL
	//	//|	ИЛИ КонтактныеЛицаКонтрагентов.Владелец = &ПустойКонтрагент)
	//	//|	И КонтактныеЛица.НапоминатьОДнеРождения = Истина
	//	|";

	//	Запрос.УстановитьПараметр("ТекущийПользователь"      , ВыбПользователь);
	//	Запрос.УстановитьПараметр("ПустойКонтрагент"      	 , Справочники.Контрагенты.ПустаяСсылка());
	//	
	//	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();

	//	ЗапросСобытий = Новый Запрос;

	//	ЗапросСобытий.Текст = "
	//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	Событие.КонтактноеЛицо КАК КонтактноеЛицо
	//	|ИЗ
	//	|	Документ.Событие КАК Событие
	//	|	
	//	|ГДЕ
	//	|	Событие.ОписаниеСобытия ПОДОБНО &СтрокаДеньРождения
	//	|	И Событие.Дата >= &ДатаНачСобытия
	//	|	И Событие.Дата <= &ДатаКонСобытия
	//	|	И Событие.Проведен = ИСТИНА
	//	|	И Событие.СостояниеСобытия = &СостояниеСобытия
	//	|";

	//	ЗапросСобытий.УстановитьПараметр("ДатаНачСобытия"    , НачалоДня(ТекущаяДата() - 30*24*60*60));
	//	ЗапросСобытий.УстановитьПараметр("ДатаКонСобытия"    , КонецДня(ТекущаяДата() + 30*24*60*60));
	//	ЗапросСобытий.УстановитьПараметр("СтрокаДеньРождения", "%День рождения%");
	//	ЗапросСобытий.УстановитьПараметр("СостояниеСобытия"  , Перечисления.СостоянияСобытий.Запланировано);

	//	СобытияДняРождения = ЗапросСобытий.Выполнить().Выгрузить();

	//	Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл

	//		Если СтрокаТаблицы.КонтактноеЛицо.Пустая() Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		ДеньРожденияТекущегоГода  = ДобавитьМесяц((ДобавитьМесяц(НачалоДня(СтрокаТаблицы.КонтактноеЛицо.ДатаРождения), -(Год(СтрокаТаблицы.КонтактноеЛицо.ДатаРождения) - 1) * 12)) , ((Год(ТекущаяДата()) - 1) * 12));
	//		ДеньРожденияБудующегоГода = ДобавитьМесяц((ДобавитьМесяц(НачалоДня(СтрокаТаблицы.КонтактноеЛицо.ДатаРождения), -(Год(СтрокаТаблицы.КонтактноеЛицо.ДатаРождения) - 1) * 12)) , (Год(ТекущаяДата()) * 12));
	//		
	//		Если СтрокаТаблицы.КонтактноеЛицо.КоличествоДнейДоНапоминания = 0 Тогда
	//			Если ДеньРожденияТекущегоГода - НачалоДня(ТекущаяДата()) <> 0 Тогда
	//				Продолжить;
	//			КонецЕсли; 
	//		Иначе
	//			Если НЕ (((ДеньРожденияТекущегоГода - НачалоДня(ТекущаяДата())) <= ((СтрокаТаблицы.КонтактноеЛицо.КоличествоДнейДоНапоминания)*24*60*60) И (ДеньРожденияТекущегоГода - НачалоДня(ТекущаяДата())) > 0)
	//			 ИЛИ ((ДеньРожденияБудующегоГода - НачалоДня(ТекущаяДата())) <= ((СтрокаТаблицы.КонтактноеЛицо.КоличествоДнейДоНапоминания)*24*60*60) И (ДеньРожденияБудующегоГода - НачалоДня(ТекущаяДата()) > 0))) Тогда
	//				Продолжить;
	//			КонецЕсли; 
	//		КонецЕсли; 

	//		Если СобытияДняРождения.Найти(СтрокаТаблицы.КонтактноеЛицо, "КонтактноеЛицо") <> Неопределено Тогда
	//			Продолжить;
	//		КонецЕсли; 

	//		СтрокаРезТаблицы = РезультирующаяТаблица.Добавить();
	//		СтрокаРезТаблицы.ДокументНапоминания = ТекущаяДата();
	//		СтрокаРезТаблицы.Пользователь = ВыбПользователь;
	//		СтрокаРезТаблицы.ДатаНапоминания = СтрокаТаблицы.КонтактноеЛицо.ДатаРождения;
	//		СтрокаРезТаблицы.Тема = "День рождения";
	//		СтрокаРезТаблицы.Контрагент = СтрокаТаблицы.Контрагент;
	//		СтрокаРезТаблицы.КонтактноеЛицо = СтрокаТаблицы.КонтактноеЛицо;
	//		СтрокаРезТаблицы.ТекстНапоминания = "Поздравить с днем рождения" + Символы.ПС;
	//		Если ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
	//			СтрокаРезТаблицы.ТекстНапоминания = СтрокаРезТаблицы.ТекстНапоминания + "Роль: " + СтрокаТаблицы.РольКонтактногоЛица + Символы.ПС
	//			+ "Должность: " + СтрокаТаблицы.ДолжностьКонтактногоЛица + Символы.ПС
	//		КонецЕсли; 
	//		СтрокаРезТаблицы.ТекстНапоминания = СтрокаРезТаблицы.ТекстНапоминания + "Дата рождения: " + Формат(СтрокаТаблицы.ДатаРождения, "ДФ=dd.MM.yyyy") + Символы.ПС
	//																			  + "Исполняется лет: " + СокрЛП(Строка(Число(Формат(ТекущаяДата(),"ДФ=yyyy")) - Число(Формат(СтрокаТаблицы.КонтактноеЛицо.ДатаРождения,"ДФ=yyyy"))));
	//		СтрокаРезТаблицы.ФлагДеньРождения = Истина;
	//		
	//	КонецЦикла;
	//
	//КонецЕсли;
	
	Запрос = Новый Запрос;

	ДатаСреза = ТекущаяДата() + Константы.ИнтервалПроверкиНапоминанийВСекундах.Получить();
	
	Запрос.УстановитьПараметр("ДатаСреза"           , ДатаСреза);
	Запрос.УстановитьПараметр("ВыбПользователь"     , ВыбПользователь);
	Запрос.УстановитьПараметр("СостояниеСобытия"    , Перечисления.СостоянияСобытий.Запланировано);
	Запрос.УстановитьПараметр("ПустойКонтрагент"    , Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеКонтактноеЛицо", Справочники.КонтактныеЛица.ПустаяСсылка());
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Событие.Ссылка           КАК ДокументНапоминания,
	|	Событие.Ответственный    КАК Пользователь,
	|	Событие.Контрагент       КАК Контрагент,
	|	Событие.КонтактноеЛицо   КАК КонтактноеЛицо,
	|	Событие.ВремяНапоминания КАК ДатаНапоминания
	|ИЗ
	|	Документ.Событие КАК Событие
	|	
	|ГДЕ 
	|	Событие.НапомнитьОСобытии = Истина
	|	И Событие.ВремяНапоминания <= &ДатаСреза
	|	И Событие.Ответственный = &ВыбПользователь
	|	И Событие.Проведен
	|	И Событие.СостояниеСобытия = &СостояниеСобытия
	|
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл

			Если Выборка.ДокументНапоминания <> Неопределено И НЕ Выборка.ДокументНапоминания.Пустая() Тогда

				Док = Выборка.ДокументНапоминания;

				СтрокаРезТаблицы = РезультирующаяТаблица.Добавить();
				СтрокаРезТаблицы.ДокументНапоминания = Выборка.ДокументНапоминания;
				СтрокаРезТаблицы.Пользователь        = ВыбПользователь;
				СтрокаРезТаблицы.ДатаНапоминания     = Выборка.ДатаНапоминания;
				СтрокаРезТаблицы.Контрагент          = Выборка.Контрагент;
				СтрокаРезТаблицы.КонтактноеЛицо      = Выборка.КонтактноеЛицо;
				СтрокаРезТаблицы.ДатаНапоминания     = Выборка.ДатаНапоминания;
				
				СтрокаРезТаблицы.ТекстНапоминания = Строка(Док);
				Если ТипЗнч(Док) = Тип("ДокументСсылка.Событие") И СтрЧислоВхождений(Док.ОписаниеСобытия, "День рождения") > 0 Тогда
					СтрокаРезТаблицы.ФлагДеньРождения = Истина;
				Иначе
					СтрокаРезТаблицы.ФлагДеньРождения = Ложь;
				КонецЕсли; 
				
				Если ТипЗнч(Док) = Тип("ДокументСсылка.Событие") Тогда
					СтрокаРезТаблицы.Тема = Строка(Док.ВидСобытия);
					СтрокаРезТаблицы.ТекстНапоминания = Док.ОписаниеСобытия + Символы.ПС + "с " + ?(НЕ ЗначениеЗаполнено(Док.НачалоСобытия), "Не задано",Формат(Док.НачалоСобытия, "ДФ='dd.MM.yyyy (HH:mm)'")) + " по " + ?(НЕ ЗначениеЗаполнено(Док.ОкончаниеСобытия), "Не задано",Формат(Док.ОкончаниеСобытия, "ДФ='dd.MM.yyyy (HH:mm)'")) + Символы.ПС + СтрокаРезТаблицы.ТекстНапоминания;
				КонецЕсли;

			КонецЕсли;
		КонецЦикла; 

	КонецЕсли;

	ОбработкаСпискаНапоминаний(РезультирующаяТаблица);

КонецПроцедуры // ПроверитьНапоминанияПользователя()

// Функция возвращает 20 основных тем событий
//
Функция ПолучитьСписокОсновныхТем() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 20
	|	Событие.ОписаниеСобытия,
	|	КОЛИЧЕСТВО(Событие.Ссылка) КАК Количество
	|ИЗ
	|	Документ.Событие КАК Событие
	|ГДЕ
	|	Событие.ОписаниеСобытия <> &ПустаяСтрока
	|
	|СГРУППИРОВАТЬ ПО
	|	Событие.ОписаниеСобытия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ";
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОписаниеСобытия");
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Массив);
	
	Возврат Список;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура перехватывает событие начала выбора контактного лица контрагента
//
// Параметры
//  Элемент - элемент управления, выбора контактного лица контрагента
//  СтандартнаяОбработка - булево
//  СтандартнаяОбработка - булево
//  Контрагент - СправочникСсылка.Контрагенты, ,контрагент контактного лица
//
Процедура НачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка, Контрагент = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

// Процедура перехватывает событие начала выбора прочего контактного лица
//
// Параметры
//  Элемент - элемент управления, выбора контактного лица контрагента
//  СтандартнаяОбработка - булево
//  СтандартнаяОбработка - булево
//  Контрагент - СправочникСсылка.Контрагенты, ,контрагент контактного лица
//
Процедура НачалоВыбораПрочегоКонтактногоЛица(Элемент, СтандартнаяОбработка, Пользователь = Неопределено) Экспорт

	СтандартнаяОбработка = Истина;
	
КонецПроцедуры

// Процедура перехватывает событие начала выбора прочего контактного лица
//
// Параметры
//  Элемент - элемент управления, выбора контактного лица контрагента
//  СтандартнаяОбработка - булево
//  СтандартнаяОбработка - булево
//  Контрагент - СправочникСсылка.Контрагенты, ,контрагент контактного лица
//
Процедура НачалоВыбораЛичныхКонтактов(Элемент, СтандартнаяОбработка) Экспорт

КонецПроцедуры

// Функция возвращает таблицу значений, заполненную информацией о контрагентах контактного лица
// из регистра сведений "КонтактныеЛицаКонтрагентов"
Функция ВернутьТаблицуКонтрагентовКонтактногоЛица(Ссылка,ТолькоПустые = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ИсторияКонтактныхЛицКонтрагентов.Контрагент КАК Контрагент,
	|	ИсторияКонтактныхЛицКонтрагентов.КонтактноеЛицоКонтрагента.Должность КАК Должность,
	|	ИсторияКонтактныхЛицКонтрагентов.КонтактноеЛицоКонтрагента.РольКонтактногоЛица КАК РольКонтактногоЛица,
	|	ИсторияКонтактныхЛицКонтрагентов.Период КАК Период,
	|   ИсторияКонтактныхЛицКонтрагентов.ДатаУвольнения КАК ДатаУвольнения
	|ИЗ
	|	РегистрСведений.ИсторияКонтактныхЛицКонтрагентов КАК ИсторияКонтактныхЛицКонтрагентов
	|
	|ГДЕ
	|	ИсторияКонтактныхЛицКонтрагентов.КонтактноеЛицо = &КонтактноеЛицо";
	
	Запрос.УстановитьПараметр("КонтактноеЛицо",Ссылка);
	
	Результаты = Запрос.Выполнить().Выгрузить();

	Возврат Результаты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МЕХАНИЗМОМ СОБЫТИЙ И КАЛЕНДАРЕМ ПОЛЬЗОВАТЕЛЯ

// Функция Определяет индекс картинки
//
// Параметры
//  ВидСобытия - ПеречислениеСсылка.ВидыСобытий
//  ТипСобытия - ПеречислениеСсылка.ВходящееИсходящееСобытие
//
// Возвращаемое значение:
//  Индекс - число
//
Функция ОпределитьИндексКартинкиВидаСобытия(Объект,ТипСобытия = Неопределено) Экспорт

	Если ТипЗнч(Объект) = Тип("ДокументСсылка.Событие") Тогда
		ВидСобытия = Объект.ВидСобытия;
		ТипСобытия = Объект.ТипСобытия;
	Иначе
		ВидСобытия = Объект;
	КонецЕсли;
	
	Если ТипЗнч(ВидСобытия) = Тип("ПеречислениеСсылка.ВидыСобытий") Тогда
		
		Если ВидСобытия = Перечисления.ВидыСобытий.ТелефонныйЗвонок Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 14;
			Иначе
				Возврат 9;
			КонецЕсли;
		ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 15;
			Иначе
				Возврат 10;
			КонецЕсли;
		ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 16;
			Иначе
				Возврат 11;
			КонецЕсли;
		ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ПочтовоеПисьмо Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 17;
			Иначе
				Возврат 12;
			КонецЕсли;
		Иначе
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 13;
			Иначе
				Возврат 8;
			КонецЕсли;
		КонецЕсли;
			
	Иначе
		Возврат 21;
	КонецЕсли;

КонецФункции // ОпределитьИндексКартинкиВидаСобытия()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МЕХАНИЗМОМ ОБЪМНО-КАЛЕНДАРНОГО ПЛАНИРОВАНИЯ ЗАКУПОК

// Процедура рекурсивно формирует строки дерева для функции ПолучитьДеревоРаспределенияПотребностей
//
// Параметры
//  СтрокаДереваПрошлогоУровня          - СтрокаДереваЗначений, строки подчиненные которой необходимо формировать
//  ТаблицаСтрокГруппировки             - ТаблицаЗначений, таблица потребностей в номенклатуре
//  ТаблицаЗаказовПоставщикам           - ТаблицаЗначений, заказы поставщикам, которые необходимо распределить по потребностям
//  ИндексГруппировки                   - Число, индекс группировки, строки для которой мы формируем
//  СтруктураЗначенийГруппировок        - Структура, содержащая значения группировок, которыми должн быть ограничен вывод строк,
//                                        точнее это своеобразный отбор по значениям группировок дерева
//  Группировки                         - ТаблицаЗначений, группировки дерева, точнее в каком порядке и какую информацию надо
//                                        отображать в основной колонке дерева
//  ПоказыватьПустыеСтрокиНижнихУровней - Булево, показывать ли в дереве строки, у которых все подчиненные строки содержат пустые значения
//
//
// Возвращаемое значение:
//   НЕТ
//
Процедура СформироватьСтрокиДерева(СтрокаДереваПрошлогоУровня, ТаблицаСтрокГруппировки, ТаблицаЗаказовПоставщикам, ИндексГруппировки, СтруктураЗначенийГруппировок, Группировки, ПоказыватьПустыеСтрокиНижнихУровней, МаксимальноеЗначениеПрогрессора, ТекущееЗначениеПрогрессора)

	Если ИндексГруппировки > Группировки.Количество() - 1 Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТаблицаСтрокГруппировки <> МаксимальноеЗначениеПрогрессора И ИндексГруппировки = 1 Тогда
		ТекущееЗначениеПрогрессора = ТекущееЗначениеПрогрессора + ТаблицаСтрокГруппировки.Количество();
	КонецЕсли; 
	
	ИмяГруппировки = Группировки[ИндексГруппировки].Имя;
	
	Если ИмяГруппировки = "Поставщик" ИЛИ ИмяГруппировки = "ЗаказПоставщику" ИЛИ ИмяГруппировки = "ИДОбъекта" Тогда
		// Поля правой таблицы
		
		ЗначенияГруппировки = Неопределено;
		СтруктураЗначенийГруппировок.Свойство(ИмяГруппировки, ЗначенияГруппировки);
		Если ЗначенияГруппировки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаСтрокДаннойГруппировки = ТаблицаСтрокГруппировки.Скопировать();
		ТекущаяТаблицаЗаказовПоставщикам = ТаблицаЗаказовПоставщикам.Скопировать();
		ИндексСтроки = 0;
		Пока 1 = 1 Цикл
		
			Если ИндексСтроки > ТекущаяТаблицаЗаказовПоставщикам.Количество() - 1 Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаТекущейТаблицыЗаказовПоставщикам = ТекущаяТаблицаЗаказовПоставщикам[ИндексСтроки];
			
			Если ТаблицаСтрокДаннойГруппировки.Найти(СтрокаТекущейТаблицыЗаказовПоставщикам.Индекс, "Индекс") = Неопределено Тогда
				ТекущаяТаблицаЗаказовПоставщикам.Удалить(СтрокаТекущейТаблицыЗаказовПоставщикам);
				Продолжить;
			КонецЕсли; 
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЦикла;
		
		Если ТекущаяТаблицаЗаказовПоставщикам.Количество() = 0 Тогда
			
			СтрокаДереваТекущегоУровня = СтрокаДереваПрошлогоУровня.Строки.Добавить();
			СтрокаДереваТекущегоУровня.ЗначениеГруппировки = "<...>";
			
			СформироватьСтрокиДерева(СтрокаДереваТекущегоУровня, ТаблицаСтрокДаннойГруппировки, ТекущаяТаблицаЗаказовПоставщикам, (ИндексГруппировки + 1), СтруктураЗначенийГруппировок, Группировки, ПоказыватьПустыеСтрокиНижнихУровней, МаксимальноеЗначениеПрогрессора, ТекущееЗначениеПрогрессора);
			
			Если ТипЗнч(СтрокаДереваПрошлогоУровня) = Тип("СтрокаДереваЗначений") Тогда
				СтрокаДереваПрошлогоУровня.КоличествоФакта = СтрокаДереваПрошлогоУровня.КоличествоФакта + СтрокаДереваТекущегоУровня.КоличествоФакта;
			КонецЕсли; 
			
			Если НЕ ПоказыватьПустыеСтрокиНижнихУровней И СтрокаДереваТекущегоУровня.Строки.Количество() = 0 Тогда
				СтрокаДереваПрошлогоУровня.Строки.Удалить(СтрокаДереваТекущегоУровня);
			КонецЕсли; 
			
		Иначе
			
			// Сначала обработаем те строки левой таблицы, которых нет в правой
			
			КопияТаблицаСтрокДаннойГруппировки = ТаблицаСтрокДаннойГруппировки.Скопировать();
			ИндексСтроки = 0;
			Пока 1 = 1 Цикл
			
				Если ИндексСтроки > КопияТаблицаСтрокДаннойГруппировки.Количество() - 1 Тогда
					Прервать;
				КонецЕсли; 
				
				СтрокаКопияТаблицаСтрокДаннойГруппировки = КопияТаблицаСтрокДаннойГруппировки[ИндексСтроки];
			
				Если ТаблицаЗаказовПоставщикам.Найти(СтрокаКопияТаблицаСтрокДаннойГруппировки.Индекс, "Индекс") <> Неопределено Тогда
					КопияТаблицаСтрокДаннойГруппировки.Удалить(СтрокаКопияТаблицаСтрокДаннойГруппировки);
					Продолжить;
				КонецЕсли; 
				
				ИндексСтроки = ИндексСтроки + 1;
			
			КонецЦикла;
			
			Если КопияТаблицаСтрокДаннойГруппировки.Количество() > 0 Тогда
			
				СтрокаДереваТекущегоУровня = СтрокаДереваПрошлогоУровня.Строки.Добавить();
				СтрокаДереваТекущегоУровня.ЗначениеГруппировки = "<...>";
				
				ТекущаяТаблицаЗаказовПоставщикам = ТаблицаЗаказовПоставщикам.Скопировать();
				
				СформироватьСтрокиДерева(СтрокаДереваТекущегоУровня, КопияТаблицаСтрокДаннойГруппировки, ТекущаяТаблицаЗаказовПоставщикам, (ИндексГруппировки + 1), СтруктураЗначенийГруппировок, Группировки, ПоказыватьПустыеСтрокиНижнихУровней, МаксимальноеЗначениеПрогрессора, ТекущееЗначениеПрогрессора);
				
				Если ТипЗнч(СтрокаДереваПрошлогоУровня) = Тип("СтрокаДереваЗначений") Тогда
					СтрокаДереваПрошлогоУровня.КоличествоФакта = СтрокаДереваПрошлогоУровня.КоличествоФакта + СтрокаДереваТекущегоУровня.КоличествоФакта;
				КонецЕсли; 
			
				Если НЕ ПоказыватьПустыеСтрокиНижнихУровней И СтрокаДереваТекущегоУровня.Строки.Количество() = 0 Тогда
					СтрокаДереваПрошлогоУровня.Строки.Удалить(СтрокаДереваТекущегоУровня);
				КонецЕсли; 
			
			КонецЕсли;
			
			Для каждого ЗначениеГруппировки Из ЗначенияГруппировки Цикл
				
				Если ТекущаяТаблицаЗаказовПоставщикам.Найти(ЗначениеГруппировки, ИмяГруппировки) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокиТекущейТаблицыЗаказовПоставщикам = ТекущаяТаблицаЗаказовПоставщикам.НайтиСтроки(Новый Структура(ИмяГруппировки, ЗначениеГруппировки));
				
				КопияТаблицаСтрокДаннойГруппировки = ТаблицаСтрокДаннойГруппировки.Скопировать();
			
				ИндексСтрокиКопии = 0;
				Пока 1 = 1 Цикл
					
					Если ИндексСтрокиКопии > КопияТаблицаСтрокДаннойГруппировки.Количество() - 1 Тогда
						Прервать;
					КонецЕсли; 
					
					СтрокаКопии = КопияТаблицаСтрокДаннойГруппировки[ИндексСтрокиКопии];
					
					НайденаСтрокаПоИндексу = Ложь;
					Для каждого Строка Из СтрокиТекущейТаблицыЗаказовПоставщикам Цикл
						Если Строка.Индекс = СтрокаКопии.Индекс Тогда
							НайденаСтрокаПоИндексу = Истина;
							Прервать;
						КонецЕсли; 
					КонецЦикла;
					
					Если НайденаСтрокаПоИндексу = Ложь Тогда
						КопияТаблицаСтрокДаннойГруппировки.Удалить(СтрокаКопии);
						Продолжить;
					КонецЕсли;
					
					ИндексСтрокиКопии = ИндексСтрокиКопии + 1;
				
				КонецЦикла;
				
				КоличествоФакта = 0;
				КопияТаблицаЗаказовПоставщикам = ТекущаяТаблицаЗаказовПоставщикам.Скопировать();
				ИндексСтроки = 0;
				Пока 1 = 1 Цикл
					
					Если ИндексСтроки > КопияТаблицаЗаказовПоставщикам.Количество() - 1 Тогда
						Прервать;
					КонецЕсли;
					
					СтрокаКопияТаблицаЗаказовПоставщикам = КопияТаблицаЗаказовПоставщикам[ИндексСтроки];
					
					Если СтрокаКопияТаблицаЗаказовПоставщикам[ИмяГруппировки] <> ЗначениеГруппировки Тогда
						КопияТаблицаЗаказовПоставщикам.Удалить(СтрокаКопияТаблицаЗаказовПоставщикам);
						Продолжить;
					КонецЕсли; 
					
					КоличествоФакта = КоличествоФакта + СтрокаКопияТаблицаЗаказовПоставщикам.Количество;
					
					ИндексСтроки = ИндексСтроки + 1;
					
				КонецЦикла; 
				
				Если (ИмяГруппировки = "ЗаказПоставщику" ИЛИ ИмяГруппировки = "ИДОбъекта") И КоличествоФакта <= 0 Тогда
					Продолжить;
				КонецЕсли; 
				СтрокаДереваТекущегоУровня = СтрокаДереваПрошлогоУровня.Строки.Добавить();
				СтрокаДереваТекущегоУровня.ЗначениеГруппировки = ЗначениеГруппировки;
				Если ИмяГруппировки = "ЗаказПоставщику" ИЛИ ИмяГруппировки = "ИДОбъекта" Тогда
					СтрокаДереваТекущегоУровня.КоличествоФакта = КоличествоФакта;
					СтрокаЗаказаПоставщику = ТекущаяТаблицаЗаказовПоставщикам.Найти(ЗначениеГруппировки, ИмяГруппировки);
					Если СтрокаЗаказаПоставщику <> Неопределено И ТекущаяТаблицаЗаказовПоставщикам.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
						СтрокаДереваТекущегоУровня.ИДОбъекта = СтрокаЗаказаПоставщику.ИДОбъекта;
					КонецЕсли; 
				КонецЕсли;
				
				СформироватьСтрокиДерева(СтрокаДереваТекущегоУровня, КопияТаблицаСтрокДаннойГруппировки, КопияТаблицаЗаказовПоставщикам, (ИндексГруппировки + 1), СтруктураЗначенийГруппировок, Группировки, ПоказыватьПустыеСтрокиНижнихУровней, МаксимальноеЗначениеПрогрессора, ТекущееЗначениеПрогрессора);
				
				Если ТипЗнч(СтрокаДереваПрошлогоУровня) = Тип("СтрокаДереваЗначений") Тогда
					СтрокаДереваПрошлогоУровня.КоличествоФакта = СтрокаДереваПрошлогоУровня.КоличествоФакта + СтрокаДереваТекущегоУровня.КоличествоФакта;
				КонецЕсли; 
				
				Если ИмяГруппировки = "Поставщик" И НЕ ПоказыватьПустыеСтрокиНижнихУровней И СтрокаДереваТекущегоУровня.Строки.Количество() = 0 Тогда
					СтрокаДереваПрошлогоУровня.Строки.Удалить(СтрокаДереваТекущегоУровня);
				КонецЕсли; 
			
			КонецЦикла;
			
		КонецЕсли; 
		
	Иначе
		// Поля левой таблицы
		
		ЗначенияГруппировки = Неопределено;
		СтруктураЗначенийГруппировок.Свойство(ИмяГруппировки, ЗначенияГруппировки);
		Если ЗначенияГруппировки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого ЗначениеГруппировки Из ЗначенияГруппировки Цикл
			
			ТекЗначениеГруппировки = ЗначениеГруппировки;
			
			Если ИмяГруппировки = "Номенклатура" Тогда
				Если ТаблицаСтрокГруппировки.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", ТекЗначениеГруппировки.Номенклатура, ТекЗначениеГруппировки.ХарактеристикаНоменклатуры, ТекЗначениеГруппировки.Тара)).Количество() = 0 Тогда
					Продолжить;
				КонецЕсли; 
			Иначе
				Если ТаблицаСтрокГруппировки.Найти(ТекЗначениеГруппировки, ИмяГруппировки) = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли;
			
			СтрокаГруппировки = "";
			Если ИмяГруппировки = "Номенклатура" Тогда
				ТекЗначениеГруппировки = ЗначениеГруппировки.Номенклатура;
				ХарактеристикаНоменклатуры = ЗначениеГруппировки.ХарактеристикаНоменклатуры;
				Тара = ЗначениеГруппировки.Тара;
			Иначе
				СтрокаГруппировки = Строка(ЗначениеГруппировки);
			КонецЕсли;
			
			КоличествоПлана = 0;
			
			ТаблицаСтрокДаннойГруппировки = ТаблицаСтрокГруппировки.Скопировать();
			ИндексСтроки = 0;
			Пока 1 = 1 Цикл
			
				Если ИндексСтроки > ТаблицаСтрокДаннойГруппировки.Количество() - 1 Тогда
					Прервать;
				КонецЕсли;
				
				СтрокаТаблицы = ТаблицаСтрокДаннойГруппировки[ИндексСтроки];
				
				Если ИмяГруппировки = "Номенклатура" Тогда
					Если СтрокаТаблицы.Номенклатура <> ЗначениеГруппировки.Номенклатура ИЛИ СтрокаТаблицы.ХарактеристикаНоменклатуры <> ЗначениеГруппировки.ХарактеристикаНоменклатуры ИЛИ СтрокаТаблицы.Тара <> ЗначениеГруппировки.Тара Тогда
						ТаблицаСтрокДаннойГруппировки.Удалить(СтрокаТаблицы);
						Продолжить;
					КонецЕсли; 
				Иначе
					Если СтрокаТаблицы[ИмяГруппировки] <> ЗначениеГруппировки Тогда
						ТаблицаСтрокДаннойГруппировки.Удалить(СтрокаТаблицы);
						Продолжить;
					КонецЕсли; 
				КонецЕсли;
			
				КоличествоПлана = КоличествоПлана + СтрокаТаблицы.КоличествоПлана;
			
				ИндексСтроки = ИндексСтроки + 1;
				
			КонецЦикла;
			
			СтрокаДереваТекущегоУровня = СтрокаДереваПрошлогоУровня.Строки.Добавить();
			Если ИмяГруппировки = "Номенклатура" Тогда
				СтрокаДереваТекущегоУровня.ЗначениеГруппировки = ЗначениеГруппировки.Номенклатура;
				СтрокаДереваТекущегоУровня.ХарактеристикаНоменклатуры = ЗначениеГруппировки.ХарактеристикаНоменклатуры;
				СтрокаДереваТекущегоУровня.Тара = ЗначениеГруппировки.Тара;
			Иначе
				СтрокаДереваТекущегоУровня.ЗначениеГруппировки = ?(ПустаяСтрока(СтрокаГруппировки), ЗначениеГруппировки, СтрокаГруппировки);
				СтрокаДереваТекущегоУровня.ЗначениеГруппировки = ЗначениеГруппировки;
			КонецЕсли; 
			СтрокаДереваТекущегоУровня.КоличествоПлана = КоличествоПлана;
			
			СформироватьСтрокиДерева(СтрокаДереваТекущегоУровня, ТаблицаСтрокДаннойГруппировки, ТаблицаЗаказовПоставщикам, (ИндексГруппировки + 1), СтруктураЗначенийГруппировок, Группировки, ПоказыватьПустыеСтрокиНижнихУровней, МаксимальноеЗначениеПрогрессора, ТекущееЗначениеПрогрессора);
		
			Если ТипЗнч(СтрокаДереваПрошлогоУровня) = Тип("СтрокаДереваЗначений") Тогда
				СтрокаДереваПрошлогоУровня.КоличествоФакта = СтрокаДереваПрошлогоУровня.КоличествоФакта + СтрокаДереваТекущегоУровня.КоличествоФакта;
			КонецЕсли; 
			
			Если ТипЗнч(СтрокаДереваТекущегоУровня.ЗначениеГруппировки) = Тип("Дата") И СтрокаДереваТекущегоУровня.ЗначениеГруппировки = '00010101' И СтрокаДереваТекущегоУровня.Строки.Количество() = 0 Тогда
				СтрокаДереваПрошлогоУровня.Строки.Удалить(СтрокаДереваТекущегоУровня);
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

