////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ
// Процедура заполняет значение счета затрат в табличной части документа в зависимости от статьи затрат.
//
Процедура ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, ПодразделениеОрганизации, СтатьяЗатрат, ИмяСчетаЗатрат = "СчетЗатрат", ЗаполнятьБУ = Истина) Экспорт

	СчетаУчета = ПолучитьСчетаУчетаСтатьиЗатрат(ПодразделениеОрганизации, СтатьяЗатрат);

	Если ЗаполнятьБУ = Истина Тогда
		СтрокаТабличнойЧасти[ИмяСчетаЗатрат] = СчетаУчета.СчетУчетаБУ;
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		СтрокаТабличнойЧасти[ИмяСчетаЗатрат] = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	

КонецПроцедуры // ЗаполнитьСчетЗатратВСтрокеТабличногоПоля()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПОЛУЧЕНИЯ ЗНАЧЕНИЙ ПЕРЕМЕННЫХ

// Функция возвращает счет учета для указанной статьи затрат
//
// Параметры:
//  Подразделение - Подразделение, для которого определяются счет
//  СтатьяЗатрат  - Счатья затрат, для которой определяются счет
//  КоррСчет      - корреспондирующий счет
//	ВидУчета      - вид учета, счет которого надо получить
//
// Возвращаемое значение:
//  Структура - структура счетов по всем разделам учета, если не задано значение
//		параметра ВидУчета
//  Счет, если задано значение параметра ВидУчета. Счет возвращается
//		в соответствии с запришиваемым видом учета.
//
Функция ПолучитьСчетаУчетаСтатьиЗатрат(Подразделение, СтатьяЗатрат, КоррСчет = "", ВидУчета = Неопределено) Экспорт
	
	ПустоеПодразделение = НЕ ЗначениеЗаполнено(Подразделение);
	ПустаяСтатьяЗатрат  = НЕ ЗначениеЗаполнено(СтатьяЗатрат);
	ПланСчетовБух       = ПланыСчетов.Хозрасчетный;
	Счет                = ПланСчетовБух.ПустаяСсылка();

	Если ПустаяСтатьяЗатрат И Не ПустоеПодразделение Тогда

		Счет = ПланСчетовБух.ОсновноеПроизводство;

	ИначеЕсли Не ПустаяСтатьяЗатрат Тогда

		Если СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
			Счет = ПланСчетовБух.ОбщепроизводственныеРасходы;
		ИначеЕсли СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда
			Счет = ПланСчетовБух.АдминистративныеРасходы;
		ИначеЕсли СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
			Счет = ПланСчетовБух.БракВПроизводстве;
		ИначеЕсли СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт Тогда
			Счет = ПланСчетовБух.РасходыНаСбыт;
		ИначеЕсли СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы Тогда
			Счет = ПланСчетовБух.ДругиеЗатратыОперационнойДеятельности;
		ИначеЕсли СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
			Счет = ПланСчетовБух.ИзготовлениеОсновныхСредств;
		ИначеЕсли СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы Тогда
			Счет = ПланСчетовБух.ТранспортноЗаготовительныеРасходыМатериалы;
		Иначе
			Если СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы И Не ПустоеПодразделение Тогда
				Счет = ПланСчетовБух.ОсновноеПроизводство;
			ИначеЕсли НЕ ЗначениеЗаполнено(СтатьяЗатрат.ХарактерЗатрат) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='В статье затрат ""';uk='У статті витрат ""'")+СтатьяЗатрат+НСтр("ru='"" не указан характер затрат';uk='"" не вказаний характер витрат'"));
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;


	Результат = Новый Структура("СчетУчетаБУ, СчетУчетаМСФО, ПроизводственныеЗатраты");
	
	Если ВидУчета = Неопределено Тогда
		Результат.СчетУчетаБУ   = Счет;
	Иначе
		Если ВидУчета = "СчетУчетаБУ" Тогда
			Результат = Счет;
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Неверное значение параметра 'ВидУчета' ('") + ВидУчета + ")");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПолучитьСчетаУчетаСтатьиЗатрат()

// Функция возвращает значение характера затрат, соответствующего счету затрат.
//
// Параметры
//  СчетЗатрат - ПланСчетовСсылка - счет затрат, по которому определяется характер затрат.
//  СтатьяЗатрат - СправочникСсылка.СтатьиЗатрат - статья затрат для уточнения характера затрат.
//  ИмяПланСчетов - Строка - имя плана счетов, которому принадлежит счет затрат.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ХарактерЗатрат – характер затрат, соответствующий счету затрат.
//
Функция ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, СтатьяЗатрат) Экспорт	
	
	// Проверка счета затрат.
	Если НЕ ЗначениеЗаполнено(СчетЗатрат) Тогда
		ПравильныйСчетЗатрат = Ложь;
		
	ИначеЕсли ТипЗнч(СчетЗатрат) <> Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Счет затрат ';uk='Рахунок витрат '") + СчетЗатрат + НСтр("ru=' не соответствует плану счетов: ""';uk=' не відповідає плану рахунків: ""'") + "Хозрасчетный" + """.
			|Функция <ПолучитьХарактерЗатратПоСчетуЗатрат>");
		ПравильныйСчетЗатрат = Ложь;
		
	// Если все проверки пройдены, значит передан правильный счет затрат.
	Иначе
		ПравильныйСчетЗатрат = Истина;
	КонецЕсли;
	
	Если ПравильныйСчетЗатрат Тогда
		
			  
		Если СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство
			  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства
			  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве
			  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.Производство
			  ИЛИ (СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Производство) 
			  И НЕ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбслуживаниеИРемонт) 
			  И НЕ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства)) Тогда
			  
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
			
			  
		ИначеЕсли СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства
			  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства) Тогда
			  
			Если НЕ ЗначениеЗаполнено(СтатьяЗатрат) Тогда
				ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
			Иначе
				ХарактерЗатрат = СтатьяЗатрат.ХарактерЗатрат;
			КонецЕсли;
			
			  
		ИначеЕсли СчетЗатрат = ПланыСчетов.Хозрасчетный.БракВПроизводстве
			  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.БракВПроизводстве) Тогда
		
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве;
			
			  
		ИначеЕсли СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы
			  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы) Тогда
		
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы;
			
		ИначеЕсли СчетЗатрат = ПланыСчетов.Хозрасчетный.АдминистративныеРасходы
			  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.АдминистративныеРасходы) Тогда
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы;
			
		
		ИначеЕсли СчетЗатрат = ПланыСчетов.Хозрасчетный.ЗатратыОтПервоначальногоПризнанияИИзмененияСтоимостиАктивовПоСправедливойСтоимости
			  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ЗатратыНаИсследованияИРазработки
			  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.СебестоимостьРеализованнойИностраннойВалюты
			  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.СебестоимостьРеализованныхПроизводственныхЗапасов
			  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.СомнительныеИБезнадежныеДолги
			  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ЗатратыОтОперационнойКурсовойРазницы
			  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ЗатратыОтОбесцениванияЗапасов
			  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей
			  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ПризнанныеШтрафыПениНеустойки
			  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельности
			  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельностиГруппа
			  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельностиГруппа) Тогда
		
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы;
			
			  
		ИначеЕсли СчетЗатрат = ПланыСчетов.Хозрасчетный.РасходыНаСбыт
			  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасходыНаСбыт) Тогда
		
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт;
			
			  
		ИначеЕсли СчетЗатрат = ПланыСчетов.Хозрасчетный.КапитальноеСтроительство
			  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ИзготовлениеОсновныхСредств
			  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ИзготовлениеДругихНеоборотныхМатериальныхАктивов
			  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбслуживаниеИРемонт
			  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.КапитальноеСтроительство)
			  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ИзготовлениеОсновныхСредств)
			  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ИзготовлениеДругихНеоборотныхМатериальныхАктивов)
			  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбслуживаниеИРемонт) Тогда
			  
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы;
		ИначеЕсли СчетЗатрат = ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыМатериалы
			  ИЛИ СчетЗатрат = ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыТовары 
			  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыМатериалы)
			  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыТовары) Тогда
			  
			  ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы;
		
		// По счету 8 класса характер затраты по счету определить не можем
		// Поэтому для всех счетов 8-го класса возвращаем характер, указанный в статье затрат
		ИначеЕсли СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ЗатратыПоЭлементам) Тогда
			Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
				ХарактерЗатрат = СтатьяЗатрат.ХарактерЗатрат;
			Иначе
				ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие;
			КонецЕсли;
		
		Иначе
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие;
			
		КонецЕсли;
		
	Иначе
		ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат ХарактерЗатрат;
	
КонецФункции // ПолучитьХарактерЗатратПоСчетуЗатрат()
