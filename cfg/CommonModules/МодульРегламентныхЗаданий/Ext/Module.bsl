
Процедура ВыполнитьОбменДаннымиДляНастройкиОбмена(КодНастройки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = Справочники.НастройкиОбменаДанными.НайтиПоКоду(КодНастройки);
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаОбмена.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	МассивНастроекОбмена = Новый Массив();
	МассивНастроекОбмена.Добавить(НастройкаОбмена);
	
	ПроцедурыОбменаДанными.ПроизвестиСписокОбменовДанными(МассивНастроекОбмена);
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомераДокументаПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	ОбщегоНазначения.ДобавитьПрефиксОрганизации(Источник, Префикс);
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ОбновлениеИндексаПолнотекстовогоПоиска() Экспорт
	
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
		
		Если НЕ ПолнотекстовыйПоиск.ИндексАктуален() Тогда
			Попытка	
				ЗаписьЖурналаРегистрации(НСтр("ru='Полнотекстовое индексирование';uk='Повнотекстове індексування'"), 
				УровеньЖурналаРегистрации.Информация, , ,
				НСтр("ru='Начато регламентное индексирование порции';uk='Почато регламентне індексування порції'"));
				
				ПолнотекстовыйПоиск.ОбновитьИндекс(Ложь, Истина);
				
				ЗаписьЖурналаРегистрации(НСтр("ru='Полнотекстовое индексирование';uk='Повнотекстове індексування'"), 
				УровеньЖурналаРегистрации.Информация, , ,
				НСтр("ru='Закончено регламентное  индексирование порции';uk='Закінчено регламентне  індексування порції'"));
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru='Полнотекстовое индексирование';uk='Повнотекстове індексування'"), 
				УровеньЖурналаРегистрации.Ошибка, , ,
				НСтр("ru='Во время регламентного обновления индекса произошла неизвестная ошибка: ';uk='Під час регламентного оновлення індексу сталася невідома помилка: '") + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура СлияниеИндексаПолнотекстовогоПоиска() Экспорт
	
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
		
		Попытка	
			ЗаписьЖурналаРегистрации(НСтр("ru='Полнотекстовое индексирование';uk='Повнотекстове індексування'"), 
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru='Начато регламентное слияние индексов';uk='Почато регламентне злиття індексів'"));
				
			ПолнотекстовыйПоиск.ОбновитьИндекс(Истина);
				
			ЗаписьЖурналаРегистрации(НСтр("ru='Полнотекстовое индексирование';uk='Повнотекстове індексування'"), 
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru='Закончено регламентное слияние индексов';uk='Закінчено регламентне злиття індексів'"));
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru='Полнотекстовое индексирование';uk='Повнотекстове індексування'"), 
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru='Во время регламентного слияния индекса произошла неизвестная ошибка: ';uk='Під час регламентного злиття індексу сталася невідома помилка: '") + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчетИтоговРегистровНакопленияБухгалтерии() Экспорт
		
	НаДату = НачалоМесяца(ТекущаяДата())-1;	
	ПересчетРегистров(РегистрыНакопления, НаДату, Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки);
	ПересчетРегистров(РегистрыБухгалтерии, НаДату);	

КонецПроцедуры

Процедура ПересчетРегистров(МенеджерРегистров, НаДату, ОграничениеПоВидуРегистра = Неопределено)
	
	Для Каждого МенеджерРегистра ИЗ МенеджерРегистров Цикл
		МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗнч(МенеджерРегистра));
		
		Если ОграничениеПоВидуРегистра <> Неопределено И МетаданныеРегистра.ВидРегистра <> ОграничениеПоВидуРегистра Тогда
			Продолжить;
		КонецЕсли;
		ПересчитатьРегистрПоДате(МенеджерРегистра, НаДату);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьРегистрПоДате(МенеджерРегистра, НаДату)
	
	Если МенеджерРегистра.ПолучитьПериодРассчитанныхИтогов()<НаДату Тогда
		МенеджерРегистра.УстановитьПериодРассчитанныхИтогов(НаДату);
	Иначе
		МенеджерРегистра.ПересчитатьИтоги();
	КонецЕсли;
	
КонецПроцедуры

