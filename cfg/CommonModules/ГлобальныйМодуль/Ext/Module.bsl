///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ 

Функция ОпределитьЭтаИнформационнаяБазаФайловая(СтрокаСоединенияСБД = "") Экспорт
			
	СтрокаСоединенияСБД = ?(ПустаяСтрока(СтрокаСоединенияСБД), СтрокаСоединенияИнформационнойБазы(), СтрокаСоединенияСБД);
	
	// в зависимости от того файловый это вариант БД или нет немного по-разному путь в БД формируется
	ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "FILE=");
	
	Возврат ПозицияПоиска = 1;	
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ОЖИДАНИЯ

#Если Клиент Тогда
// Процедура выполняет отключение пользователей от информационной 
// базы в случае, если был запущен сеанс с параметром "ЗавершитьРаботуПользователей"
//
Процедура КонтрольРежимаЗавершенияРаботыПользователей() Экспорт

	ТекущийРежим = ПолучитьБлокировкуУстановкиСоединений();
	БлокировкаУстановлена = УправлениеСоединениямиИБ.УстановленаБлокировкаСоединений();
	ВремяНачалаБлокировки = ТекущийРежим.Начало;
	ВремяОкончанияБлокировки = ТекущийРежим.Конец;
	
	ИнтервалПредупреждения    = УправлениеСоединениямиИБ.ИнтервалОжиданияЗавершенияРаботыПользователей();
	ИнтервалЗакрытьСЗапросом  = 0;
	ИнтервалЗакрытьБезЗапроса = - УправлениеСоединениямиИБ.ИнтервалОжиданияЗавершенияРаботыПользователей() / 5;
	ИнтервалПрекратить        = - УправлениеСоединениямиИБ.ИнтервалОжиданияЗавершенияРаботыПользователей() / 2.5;
	ТекущийМомент = ТекущаяДата();
	
	Если БлокировкаУстановлена Тогда
		
		Если ВремяОкончанияБлокировки <> '00010101' И ТекущийМомент > ВремяОкончанияБлокировки Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВремяНачалаБлокировки) 
			ИЛИ ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалПрекратить Тогда
			
			ПрекратитьРаботуСистемы(Истина);
			
		ИначеЕсли ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалЗакрытьБезЗапроса Тогда
			Сообщение = УправлениеСоединениямиИБ.ИзвлечьСообщениеБлокировки(ТекущийРежим.Сообщение);
			Предупреждение(НСтр("ru='Работа системы завершается.';uk='Робота системи завершується.'") + ?(ПустаяСтрока(Сообщение), ".", " " + Сообщение), 30);
			
			ЗавершитьРаботуСистемы(Ложь, Истина);
			
		ИначеЕсли ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалЗакрытьСЗапросом Тогда
			
			Сообщение = УправлениеСоединениямиИБ.ИзвлечьСообщениеБлокировки(ТекущийРежим.Сообщение);
			Предупреждение(НСтр("ru='Работа системы завершается.';uk='Робота системи завершується.'") + ?(ПустаяСтрока(Сообщение), ".", " " + Сообщение), 30);
			
			ЗавершитьРаботуСистемы(Истина, Истина);
			
		ИначеЕсли ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалПредупреждения Тогда
			
			Сообщение = УправлениеСоединениямиИБ.ИзвлечьСообщениеБлокировки(ТекущийРежим.Сообщение);
			Предупреждение(НСтр("ru='Работа системы будет завершена в ';uk='Роботу системи буде завершено у '") + ВремяНачалаБлокировки + ?(ПустаяСтрока(Сообщение), ".", " " + Сообщение), 30);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КонтрольРежимаЗавершенияРаботыПользователей

// Завершение работы только при условии удачной установки монопольного режима работы
// Вызывается, только при запуске системы от имени администратора с параметром запуска "ЗавершитьРаботуПользователей"
//
Процедура ЗавершитьРаботуПользователей() Экспорт

	Соединения = ПолучитьСоединенияИнформационнойБазы();
	
	Если Соединения.Количество() = 1 Тогда
		// Отключены все пользователи, кроме текущего сеанса
		// В последнюю очередь завершается сеанс, запущенный с параметром "ЗавершитьРаботуПользователей".
		// Такой порядок отключений необходим для обновления конфигурации с помощью пакетного файла
		
		ЗавершитьРаботуСистемы(Ложь);
		
		Возврат;
	КонецЕсли; 
	
	// Получим текущее значение параметров блокировки
	ТекущийРежим = ПолучитьБлокировкуУстановкиСоединений();
	БлокировкаУстановлена = ТекущийРежим.Установлена;
	ВремяНачалаБлокировки = ТекущийРежим.Начало;
	ИнтервалОтключения    = - УправлениеСоединениямиИБ.ИнтервалОжиданияЗавершенияРаботыПользователей();
	
	ТекущийМомент = ТекущаяДата();
	
	Если БлокировкаУстановлена И
		(НЕ ЗначениеЗаполнено(ВремяНачалаБлокировки) 
			ИЛИ ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалОтключения) Тогда
			
		// после начала блокировки сеансы всех пользователей должны быть отключены	
		// если этого не произошло пробуем принудительно прервать соединения
		ОтключитьОбработчикОжидания("ЗавершитьРаботуПользователей");
		
		// Невозможно принудительно отсоединить подключения в файловом режиме работы
		Если ОпределитьЭтаИнформационнаяБазаФайловая() Тогда
			УправлениеСоединениямиИБ.РазрешитьРаботуПользователей();
			Сообщение = УправлениеСоединениямиИБ.ПолучитьНазванияСоединенийИБ(НСтр("ru='Не удалось завершить работу пользователей:';uk='Не вдалося завершити роботу користувачів:'"));
			ЗаписьЖурналаРегистрации(НСтр("ru='Завершение работы пользователей';uk='Завершення роботи користувачів'",Локализация.КодЯзыкаИнформационнойБазы()), УровеньЖурналаРегистрации.Предупреждение, , , Сообщение);
			ЗавершитьРаботуСистемы(Ложь);
			Возврат;	
		КонецЕсли;	
		
		ПараметрыАдминистрированияИБ = УправлениеСоединениямиИБ.ПолучитьПараметрыАдминистрированияИБ();
		ПараметрыЗапуска = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";");
		Если ПараметрыЗапуска.Количество() > 1 Тогда
			ПараметрыАдминистрированияИБ.ИмяАдминистратораИБ = Врег(ПараметрыЗапуска[1]);
		КонецЕсли;
		Если ПараметрыЗапуска.Количество() > 2 Тогда
			ПараметрыАдминистрированияИБ.ПарольАдминистратораИБ = Врег(ПараметрыЗапуска[2]);
		КонецЕсли;
		
		Результат = УправлениеСоединениямиИБ.ОтключитьСоединенияИБ(ПараметрыАдминистрированияИБ);
		Если Результат Тогда
			Сообщить(НСтр("ru='Завершение работы пользователей выполнено успешно.';uk='Завершення роботи користувачів виконано успішно.'"), СтатусСообщения.Информация);
			ЗавершитьРаботуСистемы(Ложь);
		Иначе
			Сообщение = УправлениеСоединениямиИБ.ПолучитьНазванияСоединенийИБ(НСтр("ru='Не удалось завершить работу пользователей:';uk='Не вдалося завершити роботу користувачів:'"));
			Сообщить(Сообщение, СтатусСообщения.Внимание);
			ЗаписьЖурналаРегистрации(НСтр("ru='Завершение работы пользователей';uk='Завершення роботи користувачів'",Локализация.КодЯзыкаИнформационнойБазы()), УровеньЖурналаРегистрации.Предупреждение, , , Сообщение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗавершитьРаботуПользователей
#КонецЕсли

#Если НЕ Клиент И НЕ ВнешнееСоединение Тогда

Функция глЗначениеПеременной(Имя) Экспорт
	
	Кэш = ПараметрыСеанса.ОбщиеЗначения.Получить();
	КэшИзменен = Ложь;
	ПолученноеЗначение = ОбщегоНазначения.ПолучитьЗначениеПеременной(Имя, Кэш, КэшИзменен);
	
	Если КэшИзменен Тогда
		ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Кэш);
	КонецЕсли;
	
	Возврат ПолученноеЗначение;
	
КонецФункции

// Процедура установки значения экспортных переменных модуля приложения
//
// Параметры
//  Имя - строка, содержит имя переменной целиком
// 	Значение - значение переменной
//
Процедура глЗначениеПеременнойУстановить(Имя, Значение, ОбновлятьВоВсехКэшах = Ложь) Экспорт
	
	Кэш = ПараметрыСеанса.ОбщиеЗначения.Получить();	
	ОбщегоНазначения.УстановитьЗначениеПеременной(Имя, Кэш, Значение);
	ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Кэш);	
	
КонецПроцедуры

#КонецЕсли

#Если Клиент Тогда
// Процедура перезапуска сеанса работы с программой
Процедура ПерезапуститьСеансРаботыСПрограммой() Экспорт
	
	ЗавершитьРаботуСистемы(Истина, Истина);
	
КонецПроцедуры

// процедура служит для поддержки работы регламентных заданий в файловой версии
Процедура ПоддержкаРегламентныхЗаданиеДляФайловойВерсии() Экспорт
	
	ВыполнитьОбработкуЗаданий();
	
КонецПроцедуры


// Проверяет в конфигурации ИБ наличие изменений появившихся после старта сеанса
//
Процедура ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ() Экспорт

	// Если в конфигурации после старта текущего сеанса что-то изменилось
	Если КонфигурацияБазыДанныхИзмененаДинамически() Тогда


		// Завершим проверку обновления
		ЗавершитьПроверкуДинамическогоОбновленияИБ();

		// Спросим пользователя о его желании перезапустить сеанс
		ТекстВопроса = НСтр("ru='В конфигурацию ИБ внесены изменения.';uk='У конфігурацію ІБ внесені зміни.'") + Символы.ПС +
						НСтр("ru='Для работы с ними рекомендуется перезапустить программу.';uk='Для роботи з ними рекомендується запустити знову програму.'") + Символы.ПС +
						НСтр("ru='Перезапустить?';uk='Запустити знову?'");
		РезультатВопроса = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);

		// Если пользователь не хочет перезапускать сеанс
		Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
			// Запустим проверку обновления опять
			НачатьПроверкуДинамическогоОбновленияИБ();
			Возврат;
		КонецЕсли;

	
		// Попробуем перезапустить
		ПерезапуститьСеансРаботыСПрограммой();

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА ДИНАМИЧЕСКОГО ОБНОВЛЕНИЯ
//

// Начинает проверку динамического обновления конфигурации ИБ
//
Процедура НачатьПроверкуДинамическогоОбновленияИБ()Экспорт
	
	// проверка дин. обновления конфигурации каждые 20 мин.
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ", 20 * 60);

КонецПроцедуры

// Завершает проверку динамического обновления конфигурации ИБ
//
Процедура ЗавершитьПроверкуДинамическогоОбновленияИБ()Экспорт

	// Отключим соответствующий обработчик ожидания
	ОтключитьОбработчикОжидания("ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ");

КонецПроцедуры
#КонецЕсли


// Функция инициализирует глобальную переменную глУчетнаяПолитикаПоПерсоналу.
// Переменная содержит структуру.
//
// Параметры:
//  Нет.
//
Функция ЗаполнениеУчетнойПолитикиПоПерсоналу()Экспорт
	
	УчетнаяПолитикаПоПерсоналу = Новый Структура("РасчетЗарплатыПоОтветственным,ПоказыватьТабельныеНомераВДокументах,ПоддерживатьНесколькоСхемМотивации", Ложь, Ложь, Ложь);
	
	Выборка = РегистрыСведений.УчетнаяПолитикаПоПерсоналу.Выбрать();
	Пока Выборка.Следующий() Цикл
		УчетнаяПолитикаПоПерсоналу = Новый Структура("РасчетЗарплатыПоОтветственным,ПоказыватьТабельныеНомераВДокументах,ПоддерживатьНесколькоСхемМотивации", Выборка.РасчетЗарплатыПоОтветственным, Выборка.ПоказыватьТабельныеНомераВДокументах, Выборка.ПоддерживатьНесколькоСхемМотивации);
	КонецЦикла;
    
    Возврат УчетнаяПолитикаПоПерсоналу;	
КонецФункции

// Процедура инициализирует глобальную переменную глУчетнаяПолитикаПоПерсоналуОрганизации.
// Переменная содержит соответствие, где организация является ключом, а поддержка 
// поддержка внутреннего совместительства значением.
//
// Параметры:
//  Нет.
//
Функция ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации() Экспорт
	
	УчетнаяПолитикаПоПерсоналуОрганизации = Новый Соответствие;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПоддержкаВнутреннегоСовместительства, ЛОЖЬ) КАК ПоддержкаВнутреннегоСовместительства,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ЕдиныйНумераторКадровыхДокументов, ЛОЖЬ) КАК ЕдиныйНумераторКадровыхДокументов,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПроверкаШтатногоРасписания, ЛОЖЬ) КАК ПроверкаШтатногоРасписания,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.РасчетЗарплатыОрганизацииПоОтветственным, ЛОЖЬ) КАК РасчетЗарплатыОрганизацииПоОтветственным,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ИспользуютсяНачисленияВВалюте, ЛОЖЬ) КАК ИспользуютсяНачисленияВВалюте,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПоказыватьТабельныеНомераВДокументах, ЛОЖЬ) КАК ПоказыватьТабельныеНомераВДокументах		
		|ИЗ		
		|	Справочник.Организации КАК Организации		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
		|		ПО (Организации.Ссылка = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация)");
		УчетнаяПолитикаПоПерсоналуОрганизации.Вставить(Справочники.Организации.ПустаяСсылка(), 
			Новый Структура(
			"ПоддержкаВнутреннегоСовместительства,
			|ЕдиныйНумераторКадровыхДокументов,
			|ПроверкаШтатногоРасписания,
			|РасчетЗарплатыОрганизацииПоОтветственным,
			|ИспользуютсяНачисленияВВалюте,
			|ПоказыватьТабельныеНомераВДокументах",
			Ложь,
			Ложь,
			Ложь,
			Ложь,
			Ложь,
			Ложь));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			УчетнаяПолитикаПоПерсоналуОрганизации.Вставить(Выборка.Организация, 
				Новый Структура(
				"ПоддержкаВнутреннегоСовместительства,
				|ЕдиныйНумераторКадровыхДокументов,
				|ПроверкаШтатногоРасписания,
				|РасчетЗарплатыОрганизацииПоОтветственным,
				|ИспользуютсяНачисленияВВалюте,				
				|ПоказыватьТабельныеНомераВДокументах",
				Выборка.ПоддержкаВнутреннегоСовместительства,
				Выборка.ЕдиныйНумераторКадровыхДокументов,
				Выборка.ПроверкаШтатногоРасписания,
				Выборка.РасчетЗарплатыОрганизацииПоОтветственным,
				Выборка.ИспользуютсяНачисленияВВалюте,
				Выборка.ПоказыватьТабельныеНомераВДокументах));
		КонецЦикла;
	
	КонецЕсли;
    
	Возврат УчетнаяПолитикаПоПерсоналуОрганизации;
	
КонецФункции // ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации
