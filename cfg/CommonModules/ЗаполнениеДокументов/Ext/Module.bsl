////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ДОКУМЕНТОВ

// Процедура предназначена для заполнения общих реквизитов документов по документу основанию,
//	вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект    - объект редактируемого документа,
//  ДокументОснование - объект документа основания,
//
Процедура ЗаполнитьШапкуДокументаПоОснованию(ДокументОбъект, ДокументОснование) Экспорт

	МетаданныеДокумента          = ДокументОбъект.Метаданные();
	МетаданныеДокументаОснования = ДокументОснование.Метаданные();

	// Организация.
	Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("Организация") <> Неопределено Тогда
		ДокументОбъект.Организация = ДокументОснование.Организация;
	КонецЕсли;

	// Подразделение.
	Если МетаданныеДокумента.Реквизиты.Найти("Подразделение") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("Подразделение") <> Неопределено Тогда
		ДокументОбъект.Подразделение = ДокументОснование.Подразделение;
	КонецЕсли;

	// Контрагент.
	Если МетаданныеДокумента.Реквизиты.Найти("Контрагент") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("Контрагент") <> Неопределено Тогда
		ДокументОбъект.Контрагент = ДокументОснование.Контрагент;
	КонецЕсли;
	
	// ДоговорКонтрагента.
	Если МетаданныеДокумента.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено 
	   И (МетаданныеДокумента.Реквизиты.Найти("Организация") = Неопределено 
	      ИЛИ ДокументОбъект.Организация = ДокументОснование.ДоговорКонтрагента.Организация) Тогда

		ДокументОбъект.ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;

		// КурсВзаиморасчетов.
		Если МетаданныеДокумента.Реквизиты.Найти("КурсВзаиморасчетов") <> Неопределено Тогда
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов, ТекущаяДата());
			ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;

			// КратностьВзаиморасчетов.
			Если МетаданныеДокумента.Реквизиты.Найти("КратностьВзаиморасчетов") <> Неопределено Тогда
				ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Банковский счет 
	Если МетаданныеДокумента.Реквизиты.Найти("БанковскийСчет") <> Неопределено Тогда

		// Если в документе-основании есть структурная единица(или касса), то берем ее оттуда
		Если МетаданныеДокументаОснования.Реквизиты.Найти("СтруктурнаяЕдиница") <> Неопределено Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница) 
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли МетаданныеДокументаОснования.Реквизиты.Найти("БанковскийСчет") <> Неопределено Тогда
			Если ЗначениеЗаполнено(ДокументОснование.БанковскийСчет) Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.БанковскийСчет;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	// Банковский счет организации
	Если МетаданныеДокумента.Реквизиты.Найти("БанковскийСчетОрганизации") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("БанковскийСчет") <> Неопределено Тогда

		Если НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетОрганизации)
		  И ЗначениеЗаполнено(ДокументОснование.БанковскийСчет)Тогда
			ДокументОбъект.БанковскийСчетОрганизации = ДокументОснование.БанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	Если МетаданныеДокумента.Реквизиты.Найти("БанковскийСчетОрганизации") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("СтруктурнаяЕдиница") <> Неопределено Тогда

		Если НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетОрганизации)
		  И ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница)
		  И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			ДокументОбъект.БанковскийСчетОрганизации = ДокументОснование.СтруктурнаяЕдиница;
		КонецЕсли;
	КонецЕсли;

	// Структурная единица
	Если МетаданныеДокумента.Реквизиты.Найти("СтруктурнаяЕдиница") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("СтруктурнаяЕдиница") <> Неопределено Тогда

		Если НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурнаяЕдиница)
		  И ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница)Тогда
			ДокументОбъект.СтруктурнаяЕдиница = ДокументОснование.СтруктурнаяЕдиница;
		КонецЕсли;
	КонецЕсли;
	
	// ВалютаДокумента.
	Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда

		// Если есть касса или банковский счет, то валюта должна браться только оттуда
		Если МетаданныеДокумента.Реквизиты.Найти("Касса") <> Неопределено Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.Касса.ВалютаДенежныхСредств;
			КонецЕсли;
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("БанковскийСчет") <> Неопределено Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет) Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.БанковскийСчет.ВалютаДенежныхСредств;
		    КонецЕсли;
		Иначе
			ДокументОбъект.ВалютаДокумента = ДокументОснование.ВалютаДокумента;
		КонецЕсли;

		// КурсДокумента.
		Если МетаданныеДокумента.Реквизиты.Найти("КурсДокумента") <> Неопределено Тогда
			СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ТекущаяДата());
			ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;

			// КратностьДокумента.
			Если МетаданныеДокумента.Реквизиты.Найти("КратностьДокумента") <> Неопределено Тогда
				ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// ОтражатьВУправленческомУчете.
	// Если есть в основании, копируем из основания, иначе - Истина.
	Если МетаданныеДокумента.Реквизиты.Найти("ОтражатьВУправленческомУчете") <> Неопределено Тогда
		Если МетаданныеДокументаОснования.Реквизиты.Найти("ОтражатьВУправленческомУчете") <> Неопределено Тогда
			ДокументОбъект.ОтражатьВУправленческомУчете = ДокументОснование.ОтражатьВУправленческомУчете;
		Иначе
			ДокументОбъект.ОтражатьВУправленческомУчете = Истина;
		КонецЕсли;
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено Тогда
		Если МетаданныеДокументаОснования.Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено Тогда
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = ДокументОснование.ОтражатьВБухгалтерскомУчете;
		Иначе
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = Истина;
		КонецЕсли;
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("ОтражатьВНалоговомУчете") <> Неопределено Тогда
		Если МетаданныеДокументаОснования.Реквизиты.Найти("ОтражатьВНалоговомУчете") <> Неопределено Тогда
			ДокументОбъект.ОтражатьВНалоговомУчете = ДокументОснование.ОтражатьВНалоговомУчете;
		Иначе
			ДокументОбъект.ОтражатьВНалоговомУчете = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьШапкуДокументаПоОснованию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ДОКУМЕНТОВ

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ПриОткрытии" в модулех форм всех документов.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа,
//  ТекПользователь                - ссылка на справочник, определяет текущего пользователя  
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ТипОперации                    - необязаетельный, строка вида операции ("Покупка" или "Продажа"),
//                                   если не передан, то реквизиты, зависящие от вида операции, не заполняются
//
Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, ТипОперации = "", ПараметрОбъектКопирования = неопределено) Экспорт

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
    ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если МетаданныеДокумента.Реквизиты.Найти("Ответственный") <> Неопределено Тогда
		ДокументОбъект.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОтветственный");
	КонецЕсли;

	// Заполним флаги принадлежности к учету исходя из значений по умолчанию.
	Если МетаданныеДокумента.Реквизиты.Найти("ОтражатьВУправленческомУчете") <> Неопределено Тогда
		Если МетаданныеДокумента.Имя <> "ПриходныйКассовыйОрдер" Тогда
			ДокументОбъект.ОтражатьВУправленческомУчете = Истина
		Иначе
			ДокументОбъект.ОтражатьВУправленческомУчете = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
		Если (НЕ ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда 
			//для нового документа, который вводится "сам по себе"
			// этот код выполняется для того, чтобы учесть ограничения RLS и не доступаться до реквизитов организации "через точку"
		  	СписокПолей = новый СписокЗначений;
			СписокПолей.Добавить("ОсновнойБанковскийСчет");
			СписокПолей.Добавить("ЮрФизЛицо");
			СписокПолей.Добавить("ОсновнойБанковскийСчет.ВалютаДенежныхСредств","ОсновнойБанковскийСчетВалютаДенежныхСредств");

		  	ДанныеОрганизация =  УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюСДополнительнымиПолями(ТекПользователь, "ОсновнаяОрганизация", СписокПолей);
			ДокументОбъект.Организация = ДанныеОрганизация.Значение;
			
		Иначе 
			//для документа, который вводится копированием либо на основании другого
			// этот код выполняется для того, чтобы учесть ограничения RLS и не доступаться до реквизитов организации "через точку"
			СписокПолей = новый СписокЗначений;
			СписокПолей.Добавить("ОсновнойБанковскийСчет");
			СписокПолей.Добавить("ЮрФизЛицо");
			СписокПолей.Добавить("ОсновнойБанковскийСчет.ВалютаДенежныхСредств","ОсновнойБанковскийСчетВалютаДенежныхСредств");

		  	ДанныеОрганизация =  УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюСДополнительнымиПолями(ТекПользователь, "ОсновнаяОрганизация", СписокПолей);
		КонецЕсли;
		
	КонецЕсли;
	
	// Флаги БУ и НУ взаимосвязаны, не возможна ситуация, когда флаг НУ "истина". а флаг БУ "ложь".
	// А также надо проверить признак отражения организации в регл. учете.
	ФлагОтражРеглУчете = Ложь;
	Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
		//если значение настройки заполнено (организация для пользователя определена и доступна), флаг устанавливается по данным организации
		//	если значение настройки не заполнено либо нет доступа к организации, указанной в настройке, флаг сбрасывается
	//	ФлагОтражРеглУчете = ?( НЕ ЗначениеЗаполнено(ДанныеОрганизация.Значение), Ложь, ДанныеОрганизация.ОтражатьВРегламентированномУчете);
	//Иначе
		ФлагОтражРеглУчете = Истина;
	КонецЕсли;
	
	// организация отражается в регламентированном учете
	Если МетаданныеДокумента.Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено  Тогда
		Если ФлагОтражРеглУчете Тогда
			ФлагОтражатьВБухгалтерскомУчете = Истина;
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = ФлагОтражатьВБухгалтерскомУчете;

            Если МетаданныеДокумента.Реквизиты.Найти("ОтражатьВНалоговомУчете") <> Неопределено Тогда
				Если ФлагОтражатьВБухгалтерскомУчете Тогда
					//флаг может устанавливаться только если установлено отражение в БУ
					ДокументОбъект.ОтражатьВНалоговомУчете = Истина;
				Иначе
					ДокументОбъект.ОтражатьВНалоговомУчете = Ложь;
				КонецЕсли;
			КонецЕсли;

		Иначе
			ФлагОтражатьВБухгалтерскомУчете = ложь;
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = ФлагОтражатьВБухгалтерскомУчете;
			Если МетаданныеДокумента.Реквизиты.Найти("ОтражатьВНалоговомУчете") <> Неопределено Тогда
				ДокументОбъект.ОтражатьВНалоговомУчете = ложь;
            КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	//если копируем - возврат из процедуры
	Если ПараметрОбъектКопирования <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("СтруктурнаяЕдиница") <> Неопределено
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурнаяЕдиница) 
	   И МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
		ДокументОбъект.СтруктурнаяЕдиница = ДанныеОрганизация.ОсновнойБанковскийСчет;
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("Подразделение") <> Неопределено
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Подразделение)) Тогда
		ДокументОбъект.Подразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделение");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации)) Тогда
		ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("БанковскийСчет") <> Неопределено
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет)
	   И (ЗначениеЗаполнено(ДанныеОрганизация.ЮрФизЛицо)) Тогда
		ДокументОбъект.БанковскийСчет = ДанныеОрганизация.ОсновнойБанковскийСчет;
		Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
			ДокументОбъект.ВалютаДокумента = ДанныеОрганизация.ОсновнойБанковскийСчетВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("СчетОрганизации") <> Неопределено
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации)
	   И (ЗначениеЗаполнено(ДанныеОрганизация.ЮрФизЛицо)) Тогда
		ДокументОбъект.СчетОрганизации = ДанныеОрганизация.ОсновнойБанковскийСчет;
		Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
			ДокументОбъект.ВалютаДокумента = ДанныеОрганизация.ОсновнойБанковскийСчетВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;

	ДатаДокумента = ?(НЕ ЗначениеЗаполнено(ДокументОбъект.Дата),ОбщегоНазначения.ПолучитьРабочуюДату(),ДокументОбъект.Дата);

	Если МетаданныеДокумента.Реквизиты.Найти("Контрагент") <> Неопределено Тогда
		флВыполнитьЗаполнениеСтруктуры = ложь;

		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			СписокПолей = новый СписокЗначений;
			СписокПолей.Добавить("ОсновнойДоговорКонтрагента");
			СписокПолей.Добавить("ОсновнойБанковскийСчет");
			СписокПолей.Добавить("ОсновнойДоговорКонтрагента.Организация", "ОсновнойДоговорКонтрагентаОрганизация");
			СписокПолей.Добавить("ОсновнойДоговорКонтрагента.ВидДоговора", "ОсновнойДоговорКонтрагентаВидДоговора");
			СписокПолей.Добавить("ОсновноеКонтактноеЛицо");

			Если ТипОперации = "Покупка" Тогда
				ДанныеКонтрагент =  УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюСДополнительнымиПолями(ТекПользователь, "ОсновнойПоставщик", СписокПолей);
				ДокументОбъект.Контрагент = ДанныеКонтрагент.Значение;

			ИначеЕсли ТипОперации = "Продажа" Тогда
				ДанныеКонтрагент =  УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюСДополнительнымиПолями(ТекПользователь, "ОсновнойПокупатель", СписокПолей);
				ДокументОбъект.Контрагент = ДанныеКонтрагент.Значение;

			Иначе
				 флВыполнитьЗаполнениеСтруктуры = истина;
				 текКонтрагент =  Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
		Иначе
			флВыполнитьЗаполнениеСтруктуры = истина;
			текКонтрагент =  ДокументОбъект.Контрагент;
		КонецЕсли;
		Если  флВыполнитьЗаполнениеСтруктуры Тогда
			ДанныеКонтрагент = новый Структура();
			ДанныеКонтрагент.Вставить("Значение",текКонтрагент);
			Если ТипЗнч(текКонтрагент) = Справочники.Контрагенты Тогда
				ДанныеКонтрагент.Вставить("ОсновнойДоговорКонтрагента", текКонтрагент.ОсновнойДоговорКонтрагента);
				ДанныеКонтрагент.Вставить("ОсновнойБанковскийСчет", текКонтрагент.ОсновнойБанковскийСчет);
				ДанныеКонтрагент.Вставить("ОсновнойДоговорКонтрагентаОрганизация", текКонтрагент.ОсновнойДоговорКонтрагента.Организация);
			КонецЕсли;
		КонецЕсли;
		
	
	КонецЕсли;// есть реквизит контрагент

	Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)) Тогда
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("КурсДокумента") <> Неопределено
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.КурсДокумента)) Тогда
	    СтруктураКурсаДокумента      = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДатаДокумента);
		ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;

		Если МетаданныеДокумента.Реквизиты.Найти("КратностьДокумента") <> Неопределено Тогда
			ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("КурсВзаиморасчетов") <> Неопределено
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.КурсВзаиморасчетов)) Тогда
	    СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, ДатаДокумента);
		ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаДокумента.Курс;

		Если МетаданныеДокумента.Реквизиты.Найти("КратностьВзаиморасчетов") <> Неопределено Тогда
			ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("ЗанимаемыхСтавок") <> Неопределено
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ЗанимаемыхСтавок)) Тогда
		ДокументОбъект.ЗанимаемыхСтавок = 1;
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("ПериодРегистрации") <> Неопределено
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ПериодРегистрации)) Тогда
		ДокументОбъект.ПериодРегистрации = НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ПодразделениеОрганизации)) Тогда
		ДокументОбъект.ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделениеОрганизации");;
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("БанковскийСчетОрганизации") <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетОрганизации) Тогда
		ДокументОбъект.БанковскийСчетОрганизации = ДанныеОрганизация.ОсновнойБанковскийСчет;
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("БанковскийСчетКонтрагента") <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.Контрагент)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетКонтрагента) Тогда
		ДокументОбъект.БанковскийСчетКонтрагента = ДанныеКонтрагент.ОсновнойБанковскийСчет;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьШапкуДокумента()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ЗНАЧЕНИЯ РЕКВИЗИТОВ НА ЗАПОЛНЕННОСТЬ ПРИ ПРОВЕДЕНИИ

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  ДокументОбъект             - объект проводимого документа, 
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапкиДокумента(ДокументОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок) Экспорт
	
	//ПроверитьПринадлежностьКВидамУчета();

	МетаданныеРеквизиты = ДокументОбъект.Метаданные().Реквизиты;
	
	Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

		Значение = ДокументОбъект[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда

			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
				ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
				СтрокаСообщения = НСтр("ru='Не заполнено значение реквизита ""';uk='Не заповнене значення реквізиту ""'") + СокрЛП(ПредставлениеРеквизита) + """!";
			Иначе
				СтрокаСообщения = КлючЗначение.Значение;
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеШапкиДокумента()

// Проверяет правильность заполнения строк табличной части документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
//
// Параметры:
//  ДокументОбъект             - объект проводимого документа, 
//  ИмяТабличнойЧасти          - табличная часть документа,
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = Неопределено;
	МетаданныеРеквизиты         = Неопределено;
	ТабличнаяЧасть              = ДокументОбъект[ИмяТабличнойЧасти];

	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл

		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда
				
				Если ПредставлениеТабличнойЧасти = Неопределено Тогда
					ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
				КонецЕсли;
				
				Если МетаданныеРеквизиты = Неопределено Тогда
					МетаданныеРеквизиты = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
				КонецЕсли;
				
				СтрокаНачалаСообщенияОбОшибке = НСтр("ru='В строке номер ""';uk='У рядку номер ""'")+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
											НСтр("ru='"" табличной части ""';uk='"" табличної частини ""'") + ПредставлениеТабличнойЧасти + """: ";
				
				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = НСтр("ru='Не заполнено значение реквизита ""';uk='Не заповнене значення реквізиту ""'") + СокрЛП(ПредставлениеРеквизита) + """!";
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;
				КонецЕсли;
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧасти()

///////////////// ПРИ ИЗМЕНЕНИИ ////////////////////////

#Если Клиент Тогда
// Процедура - обработчик события ПриИзменении поля ввода Организация
//
// Параметры:
//		ДокументОбъект - объект документ в форме которого произошло событие
//
Процедура ПриИзмененииЗначенияОрганизации(ДокументОбъект) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда

		Если МетаданныеДокумента.Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено
		   И ЗначениеЗаполнено(ДокументОбъект.Организация)
		   И ЗначениеЗаполнено(ДокументОбъект.ПодразделениеОрганизации)
		   И Не ДокументОбъект.ПодразделениеОрганизации.Владелец = ДокументОбъект.Организация Тогда

			ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			Предупреждение(НСтр("ru='Выбранное подразделение не соответствует организации!';uk='Обраний підрозділ не відповідає організації!'"));

		КонецЕсли;

		Если МетаданныеДокумента.Реквизиты.Найти("БанковскийСчетОрганизации") <> Неопределено Тогда
			ДокументОбъект.БанковскийСчетОрганизации = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияОрганизации()
 #КонецЕсли

// Функция определяет договор, соответствующий указанным значениям
// организации и контрагента
//
// Параметры
//  Организация - организация, по которой определяется договор
//  Контрагент  - конрагент, по которому определяется договор
//
// Возвращаемое значение:
//  Договор - договор контрагентов
//
Функция ПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, Контрагент, СписокВидовДоговора = неопределено, СтруктураПараметров = Неопределено) Экспорт

	Если НЕ (ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(Организация))  Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВладелецДоговора",  Контрагент);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", Организация);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
	|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ОсновнойДоговорКонтрагента
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+?(СписокВидовДоговора<>неопределено,"
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Для каждого Параметр Из СтруктураПараметров Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			ВидСравненияЗапроса = УправлениеВзаиморасчетами.ПолучитьВидСравненияДляЗапроса(СтруктураОтбора);
			ТекстФильтра = ТекстФильтра + "
			|	И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;

	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойДоговор = Выборка.Приоритет = 1;
		НайденОдинДоговор     = Выборка.Количество() = 1;
		
		Если НайденОсновнойДоговор ИЛИ НайденОдинДоговор Тогда
			Возврат Выборка.Договор;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПолучитьДоговорПоОрганизацииИКонтрагенту()

// Проверяет. можно ли использовать переданный договор в соответствии с переданными параметрами.
//
// Параметры
//  Договор                                 – ссылка на договор, который нужно проверить,
//  Контрагент                              - ссылка на контрагента, которому должен принадлежать договор,
//  Организация                             - ссылка на организацию, от имени которой должен быть выписан договор,
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов.
//
// Возвращаемое значение:
//   Логическое, Истина - можно использовать, ложь - нельзя.
//
Функция МожноИспользоватьДоговорДляДокумента(Договор, Контрагент, Организация, СписокВидовДоговоров, СтруктураДополнительныхПараметров) Экспорт

	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат Ложь; // Если не передали параметры, то считаем, что нельзя использовать.
	КонецЕсли;

	// Организация должна совпадать.
	Если ЗначениеЗаполнено(Организация)
	   И Организация <> Договор.Организация Тогда
		Возврат Ложь;
	КонецЕсли;

	// Контрагент должен совпадать, если в документе невыбран контрагент, то любой договор не подходит.
	Если Контрагент <> Договор.Владелец Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	// Проверка по виду договора.
	Если СписокВидовДоговоров<>неопределено И ТипЗнч(СписокВидовДоговоров)=Тип("Массив") Тогда
		
	   Если СписокВидовДоговоров.Найти(Договор.ВидДоговора) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ТипЗнч(СтруктураДополнительныхПараметров) = Тип("Структура")  Тогда
		Для каждого Параметр из СтруктураДополнительныхПараметров цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
				ВидСравненияОтбора = ВидСравнения.Равно;
			Иначе
            	ВидСравненияОтбора = СтруктураОтбора.ВидСравненияОтбора;
			КонецЕсли;
			
			ЗначениеОтбора = СтруктураОтбора.Значение;
			флСоответствуетОтбору = ложь;
			Если ВидСравненияОтбора = ВидСравнения.Равно Тогда
				флСоответствуетОтбору = Договор[ИмяРеквизита]=ЗначениеОтбора;
			ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
				флСоответствуетОтбору = Договор[ИмяРеквизита]<>ЗначениеОтбора;
			ИначеЕсли ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
				Если ТипЗнч(ЗначениеОтбора)=Тип("СписокЗначений") Тогда
					флСоответствуетОтбору = ЗначениеОтбора.НайтиПоЗначению(Договор[ИмяРеквизита])<>неопределено;
				ИначеЕсли ТипЗнч(ЗначениеОтбора)=Тип("Массив") Тогда
					флСоответствуетОтбору = ЗначениеОтбора.Найти(Договор[ИмяРеквизита])<>неопределено;
				КонецЕсли;
			ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
				Если ТипЗнч(ЗначениеОтбора)=Тип("СписокЗначений") Тогда
					флСоответствуетОтбору = ЗначениеОтбора.НайтиПоЗначению(Договор[ИмяРеквизита])=неопределено;
				ИначеЕсли ТипЗнч(ЗначениеОтбора)=Тип("Массив") Тогда
					флСоответствуетОтбору = ЗначениеОтбора.Найти(Договор[ИмяРеквизита])=неопределено;
				КонецЕсли;
            ИначеЕсли ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
                флСоответствуетОтбору = Договор[ИмяРеквизита].ПринадлежитЭлементу(ЗначениеОтбора);
            ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
                флСоответствуетОтбору = НЕ Договор[ИмяРеквизита].ПринадлежитЭлементу(ЗначениеОтбора);
			КонецЕсли;
			Если не флСоответствуетОтбору Тогда
				Возврат ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // МожноИспользоватьДоговорДляДокумента()

// Определяет курс документа, который равен либо курсу документа (если в документе он существует),
// либо курсу взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект                 - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - курс документа.
//
Функция КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	// Если валюта документа совпадает с валютой регл. учета или не указана, то курс 1.
	Если ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета ИЛИ ДокументОбъект.ВалютаДокумента.Пустая() Тогда
		Возврат 1;
	Иначе
	
		МетаданныеДокумента = ДокументОбъект.Метаданные();

		// Если есть реквизит КурсДокумента - его и вернем
		Если МетаданныеДокумента.Реквизиты.Найти("КурсДокумента") <> Неопределено Тогда
			Возврат ДокументОбъект.КурсДокумента;
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("КурсВзаиморасчетов") <> Неопределено Тогда
			// Если нет КурсДокумента и валюта документа не совпадает с валютой регл. учета, 
			// то такой документ может быть выписан только в валюте взаиморасчетов,
			// если есть реквизит КурсВзаиморасчетов - его и вернем.
			Возврат ДокументОбъект.КурсВзаиморасчетов;
		Иначе
			Возврат 1;
		КонецЕсли;

	КонецЕсли;

КонецФункции // КурсДокумента()

// Определяет кратность документа, которая равен либо кратности документа (если в документе она существует),
// либо кратности взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - кратность валюты в документе.
//
Функция КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	// Если валюта документа совпадает с валютой регл. учета или не указана, то кратность 1.
	Если ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета ИЛИ ДокументОбъект.ВалютаДокумента.Пустая() Тогда
		Возврат 1;
	Иначе
	
		МетаданныеДокумента = ДокументОбъект.Метаданные();

		// Если есть реквизит КратностьДокумента - его и вернем
		Если МетаданныеДокумента.Реквизиты.Найти("КратностьДокумента") <> Неопределено Тогда
			Возврат ДокументОбъект.КратностьДокумента;
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("КратностьВзаиморасчетов") <> Неопределено Тогда
			// Если нет КратностьДокумента и валюта документа не совпадает с валютой регл. учета, 
			// то такой документ может быть выписан только в валюте взаиморасчетов,
			// если есть реквизит КратностьВзаиморасчетов - его и вернем.
			Возврат ДокументОбъект.КратностьВзаиморасчетов;
		Иначе
			Возврат 1;
		КонецЕсли;

	КонецЕсли;

КонецФункции // КратностьДокумента()

