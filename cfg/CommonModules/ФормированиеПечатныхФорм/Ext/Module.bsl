
// Функция собирает паспортные данные физ. лица на указанную дату
//
// Параметры: 
//  ФизЛицо.    - физ. лицо, для которго необходимо получить паспортные данные
//  ДатаПериода - дата получения сведений
//
// Возвращаемое значение:
//  Структура с паспортными данными.
//
Функция ПаспортныеДанные(ФизЛицо, ДатаПериода) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарФизЛицо",     ФизЛицо);
	Запрос.УстановитьПараметр("ПарДатаПериода", ДатаПериода);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументВид        КАК Вид,
	|	ДокументСерия      КАК Серия,
	|	ДокументНомер      КАК Номер,
	|	ДокументДатаВыдачи КАК ДатаВыдачи,
	|	ДокументКемВыдан   КАК Выдан
	|ИЗ
	|	РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&ПарДатаПериода, ФизЛицо = &ПарФизЛицо)
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Результат = Новый Структура("Вид, Серия, Номер, ДатаВыдачи, Выдан");

	Результат.Вид        = Шапка.Вид;
	Результат.Серия      = Шапка.Серия;
	Результат.Номер      = Шапка.Номер;
	Результат.ДатаВыдачи = Шапка.ДатаВыдачи;
	Результат.Выдан      = Шапка.Выдан;

	Возврат Результат;

КонецФункции // ПаспортныеДанные()

// Функция собирает сведения о 
//
// Параметры:
//  Организация - организация, для которой нужно определить руководящих лиц.
//
Функция ОтветственныеЛица(Организация, ДатаСреза) Экспорт

	Результат = Новый Структура("Руководитель, РуководительДолжность, РуководительФИО, РуководительПредставление, 
								|ГлавныйБухгалтер, ГлавныйБухгалтерДолжность, ГлавныйБухгалтерФИО, ГлавныйБухгалтерПредставление, 
								|Кассир, КассирДолжность, КассирФИО, КассирПредставление");

	Если Организация <> Неопределено тогда

		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
		ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
		ЗапросПоЛицам.УстановитьПараметр("ПризнакФизЛица",   Перечисления.ЮрФизЛицо.ФизЛицо);
		
		ЗапросПоЛицам.Текст = "ВЫБРАТЬ
		                      |	ФИОФизЛицСрезПоследних.Фамилия,
		                      |	ФИОФизЛицСрезПоследних.Имя,
		                      |	ФИОФизЛицСрезПоследних.Отчество,
		                      |	ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизическоеЛицо
		                      |ИЗ
		                      |	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
							  |";
		Руководители = ЗапросПоЛицам.Выполнить().Выбрать();
		
		Пока Руководители.Следующий() Цикл
			
			ФИО = Новый Структура("Фамилия, Имя, Отчество, Представление");
			Если НЕ ( НЕ ЗначениеЗаполнено(Руководители.Фамилия) или Руководители.Фамилия = NULL) Тогда
				ФИО.Фамилия = Руководители.Фамилия;
			КонецЕсли;
			Если НЕ ( НЕ ЗначениеЗаполнено(Руководители.Имя) или Руководители.Имя = NULL) Тогда
				ФИО.Имя = Руководители.Имя;
			КонецЕсли;
			Если НЕ ( НЕ ЗначениеЗаполнено(Руководители.Отчество) или Руководители.Отчество = NULL) Тогда
				ФИО.Отчество = Руководители.Отчество;
			КонецЕсли;
			Представление = ПолучитьФамилиюИмяОтчество(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
			
			Результат.Руководитель               = Руководители.ФизическоеЛицо;
			Результат.РуководительДолжность      = "";
			Результат.РуководительФИО            = ФИО;
			Результат.РуководительПредставление  = Представление;
			
		КонецЦикла;
		
		ЗапросПоЛицам.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизЛицСрезПоследних
		|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
		Руководители = ЗапросПоЛицам.Выполнить().Выбрать();

		Пока Руководители.Следующий() Цикл

			ФИО = Новый Структура("Фамилия, Имя, Отчество, Представление");
			Если НЕ ( НЕ ЗначениеЗаполнено(Руководители.Фамилия) или Руководители.Фамилия = NULL) Тогда
				ФИО.Фамилия = Руководители.Фамилия;
			КонецЕсли;
			Если НЕ ( НЕ ЗначениеЗаполнено(Руководители.Имя) или Руководители.Имя = NULL) Тогда
				ФИО.Имя = Руководители.Имя;
			КонецЕсли;
			Если НЕ ( НЕ ЗначениеЗаполнено(Руководители.Отчество) или Руководители.Отчество = NULL) Тогда
				ФИО.Отчество = Руководители.Отчество;
			КонецЕсли;
			Представление = ПолучитьФамилиюИмяОтчество(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
			
			Если Руководители.ОтветственноеЛицо      = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
				Результат.Руководитель               = Руководители.ФизическоеЛицо;
				Результат.РуководительДолжность      = Руководители.Должность;
				Результат.РуководительФИО            = ФИО;
				Результат.РуководительПредставление  = Представление;

			ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер           = Руководители.ФизическоеЛицо;
				Результат.ГлавныйБухгалтерДолжность  = Руководители.Должность;
                Результат.ГлавныйБухгалтерФИО        = ФИО;
				Результат.ГлавныйБухгалтерПредставление  = Представление;
				
			ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
				Результат.Кассир                     = Руководители.ФизическоеЛицо;
				Результат.КассирДолжность      		 = Руководители.Должность;
                Результат.КассирФИО            		 = ФИО;
				Результат.КассирПредставление  = Представление;
				
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция формирует фамилию и инициалы
//
// Параметры
//  Фамилия  - фамилия физ. лица.
//  Имя      - имя физ. лица.
//  Отчество - отчество физ. лица.
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица включает фамилию и инициалы, если Ложь - фамилию и полностью имя и отчество
//
// Возвращаемое значение 
//  Фамилия, имя, отчество одной строкой.
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ", ФИОКратко = Истина) Экспорт
	
	Если ФИОКратко Тогда
		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + 
				?(НЕ ПустаяСтрока(Отчество) , 
				Лев(Отчество,1)+".", ""), ""), "");
	Иначе
		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Имя + 
				?(НЕ ПустаяСтрока(Отчество) , " " + Отчество, ""), ""), "");
	КонецЕсли;

КонецФункции // ПолучитьФамилиюИмяОтчество()


// Функция разбивает строку на символы и помещает их в структуру
//
// Параметры
// 	СтрокаСимволов – Тип: Строка или преобразуемый к ней – Строка, которую нужно разбить
//                 
//  ИмяКлючей      – Тип: Строка – Наименование ключей структуры.
//                                 Например: 
//                                 "ИНН" - функция вернет структуру ИНН1...ИНН<КоличествоСимволов>
//                 
//
// Возвращаемое значение:
//   Тип: Структура – с наименованием ключей <ИмяКлючей> + <НомерСимвола>   
//                    и значениями символов строки
//
Функция РазбитьСтрокуНаСимволы(Знач СтрокаСимволов, ИмяКлючей) Экспорт
	
	СтруктураСимволов = Новый Структура;
	
	Попытка
		СтрокаСимволов = Строка(СтрокаСимволов)
	Исключение
		Возврат СтруктураСимволов
	КонецПопытки;

	Для Н = 1 По СтрДлина(СтрокаСимволов) Цикл
		СтруктураСимволов.Вставить(ИмяКлючей + Н, Сред(СтрокаСимволов, Н, 1));		
	КонецЦикла;
	
	Возврат СтруктураСимволов

КонецФункции // РазбитьСтрокуНаСимволы()

// Возвращает значение истина если за, переданный период заполнен регламетированный производственный календарь
//
// Параметры:
//
//  НачалоПериода - дата начала периода
//  КонецПериода - дата конца периода
//
Функция ЗаполненРегламентированныйПроизводственныйКалендарь(НачалоПериода, КонецПериода) Экспорт
	
	ТЗ = "ВЫБРАТЬ
	     |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	     |ИЗ
	     |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	     |ГДЕ
	     |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоПериода И &КонецПериода";
		 
	Запрос = Новый Запрос(ТЗ);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции  //ЗаполненРегламентированныйПроизводственныйКалендарь()

// Устанавливает отбор при выбор подразддления организации или сотрудника органиазации в отборе СКД
// 
// Параметры:
//  Элемент              - элемент выбора
//  КомпоновщикНастроек  - компоновщик настроек
//  ПоляОрганизаций      - поля СКД, в которых назначается отбор по организации
//  Объект               - отчет
//  СтандартнаяОбработка - признак стандартной обработки
//
Процедура ПодставитьОтборОрганизации(Элемент, КомпоновщикНастроек, ПоляОрганизаций = Неопределено, Объект, СтандартнаяОбработка) Экспорт
	
	СписокПолеОргаинзация = Новый СписокЗначений;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("ПолеКомпоновкиДанных") тогда
		СписокПолеОргаинзация.Добавить(ПоляОрганизаций);
	КонецЕсли;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("СписокЗначений") тогда
		СписокПолеОргаинзация = ПоляОрганизаций;
	КонецЕсли;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("Массив") тогда
		СписокПолеОргаинзация.ЗагрузитьЗначения(ПоляОрганизаций);
	КонецЕсли;
	
	Организация = Неопределено;
	
	Для каждого ЭлементОтбора из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если СписокПолеОргаинзация.НайтиПоЗначению(ЭлементОтбора.ЛевоеЗначение) <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Организации") тогда
			
			Организация = ЭлементОтбора.ПравоеЗначение;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если Организация <> Неопределено тогда
		
		Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") тогда
			
			Элемент.ВыборПоВладельцу = Организация;
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.СотрудникиОрганизаций") тогда
			ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Объект, Истина, ОбщегоНазначения.ПолучитьРабочуюДату(), Организация, 1, СтандартнаяОбработка, Элемент.Значение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ПодставитьОтборОрганизации()

// Копирует упорядочивания из элемента структуры настройки СКД в отчет
//
// Параметры:
//  Настройка - настройки схемы компоновки данных
//
Процедура ПеренестиПорядокВОтчет(Настройки) Экспорт
	
	Если Настройки.Структура.Количество() <> 0 тогда
		
		Если ТипЗнч(Настройки.Структура[0]) = Тип("ТаблицаКомпоновкиДанных") тогда
			
			Если Настройки.Структура[0].Строки.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Строки[0]);
				
			КонецЕсли;
			
			Если Настройки.Структура[0].Колонки.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Колонки[0]);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Настройки.Структура[0]) = Тип("ГруппировкаТаблицыКомпоновкиДанных") тогда
			
			ПеренестиПорядок(Настройки, Настройки.Структура[0].Строки[0]);
			
		ИначеЕсли ТипЗнч(Настройки.Структура[0]) = Тип("ДиаграммаКомпоновкиДанных") тогда
			
			Если Настройки.Структура[0].Серии.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Серии[0]);
				
			КонецЕсли;
			
			Если Настройки.Структура[0].Точки.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Точки[0]);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ПеренестиВсеУпорядочиванияВОтчет()

// Копирует упорядочивания из группировки объекта в отчет
//
// Параметры:
//  Настройка - настройки схемы компоновки данных
//  Структура - структура настройки компоновки данных
//
Процедура ПеренестиПорядок(Настройки, Структура) Экспорт
	
	#Если Клиент Тогда
	ТиповыеОтчеты.СкопироватьЭлементы(Настройки.Порядок, Структура.Порядок);
	#КонецЕсли
	Структура.Порядок.Элементы.Очистить();
	
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	Если Структура.Структура.Количество() <> 0 тогда
		
		ПеренестиПорядок(Настройки, Структура.Структура[0]);
		
	КонецЕсли;
	
КонецПроцедуры //ПеренестиУпорядочивание()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПЕЧАТИ

Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина) Экспорт

	Попытка
 		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
 		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции 

#Если Клиент Тогда
// Получает из текущих настроек пользователя имя кнопки печати,
// которая определяет макет печатной формы по умолчанию.
// Если не найдено, то берется первый макет в структуре макетов печатных форм,
// и сохраняется в настройках пользователя.
//
// Параметры: 
//  ИмяОбъекта          - строка, содержащая имя объекта, для которого ищется макет печатной формы
//  ФормаДиалога        - форма редактируемого объекта,
//  СоответствиеМакетов - соответствие, содержащее названия (ключ) и имена (значение) 
//                        макетов печатных форм документа
//
Процедура СоздатьКнопкиПечати(ДокументОбъект, ФормаДокумента) Экспорт

	Попытка
		СтруктураВнутреннихПечатныхФорм = ДокументОбъект.ПолучитьСтруктуруПечатныхФорм()
	Исключение
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
	КонецПопытки;
	
	ДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(ДокументОбъект.Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаПоУмолчанию = УниверсальныеМеханизмы.ПолучитьСтрокуДереваМакетовПоУмолчанию(ДокументОбъект.Метаданные().Имя, ДеревоМакетов);
	
	Если ДеревоМакетов.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПанельКнопок = ФормаДокумента.ЭлементыФормы.ОсновныеДействияФормы;
	КнопкиСправа = (ПанельКнопок.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право);
	
	Если ПанельКнопок.Кнопки.Найти("Печать") = Неопределено Тогда
		Если КнопкиСправа Тогда
			ПанельКнопок.Кнопки.Вставить(0,, ТипКнопкиКоманднойПанели.Разделитель);
			ПанельКнопок.Кнопки.Вставить(0,"Печать", ТипКнопкиКоманднойПанели.Действие, НСтр("ru='Печать';uk='Друк'"), Новый Действие("ОсновныеДействияФормыПечать"));
		Иначе
			ПанельКнопок.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			ПанельКнопок.Кнопки.Добавить("Печать", ТипКнопкиКоманднойПанели.Действие, НСтр("ru='Печать';uk='Друк'"), Новый Действие("ОсновныеДействияФормыПечать"));
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаПоУмолчанию <> Неопределено Тогда
		Если ПанельКнопок.Кнопки.Найти("ДействиеПечать") = Неопределено Тогда
			Если КнопкиСправа Тогда
				ПанельКнопок.Кнопки.Вставить(0,, ТипКнопкиКоманднойПанели.Разделитель);
				ПанельКнопок.Кнопки.Вставить(0,"ДействиеПечать", ТипКнопкиКоманднойПанели.Действие, СтрокаПоУмолчанию.Текст, Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
			Иначе
				ПанельКнопок.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
				ПанельКнопок.Кнопки.Добавить("ДействиеПечать", ТипКнопкиКоманднойПанели.Действие, СтрокаПоУмолчанию.Текст, Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры // УстановитьКнопкуПечати()
#КонецЕсли

Функция ПолучитьТелефонДляНалоговойНакладной(Телефоны) Экспорт
	
	Результат = СокрЛП(Телефоны);
	// может быть несколько телефонов, через запятую, возьмем до первой запятой
	Поз = Найти(Результат, ",");
	Если Поз > 0 Тогда
		Результат = Лев(Результат, Поз - 1);
	КонецЕсли; 
	
	Поз = Найти(Результат, ";");
	Если Поз > 0 Тогда
		Результат = Лев(Результат, Поз - 1);
	КонецЕсли; 
	
	РезультатТолькоЦифры = "";
	ДлинаСтрокиТелефонов = СтрДлина(Результат);
	
	// удалим все не цифры
	Для НомерСимвола = 1 По ДлинаСтрокиТелефонов Цикл
		ТекСимвол = Сред(Результат, НомерСимвола, 1);
		Если Найти("0123456789", ТекСимвол) = 0 Тогда
			Продолжить;
		Иначе
			РезультатТолькоЦифры = РезультатТолькоЦифры + ТекСимвол;
		КонецЕсли;
	КонецЦикла; 	
	//для выравнивания по правому краю дополним слева пробелами
	РезультатТолькоЦифры = "          " + РезультатТолькоЦифры;

	// возьмем 10 правых 
	РезультатТолькоЦифры = Прав(РезультатТолькоЦифры, 10);
	
	Возврат РезультатТолькоЦифры;

КонецФункции // ПолучитьТелефонДляНалоговойНакладной()

// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значенийми параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организаиии
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина, КодЯзыка = "ru") Экспорт

	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,ЮридическийАдрес,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ";
	КонецЕсли; 
	
	Список = СтрЗаменить(Список, "НомерСчета,Банк,МФО", "ПредставлениеБанковскогоСчета"); 

	Результат = "";

	НоваяСтрока = Ложь;
	
	СоответствиеПараметров = Новый Соответствие();

	СоответствиеПараметров.Вставить("ПолноеНаименование", 	"");
	
	Список = Список + ?(Прав(Список, 1) = ",", "", ",");
	
	СоответствиеПараметров.Вставить("КодПоЕДРПОУ", 				НСтр("ru='код по ЕГРПОУ ';uk='код за ЄДРПОУ '",КодЯзыка));
	СоответствиеПараметров.Вставить("КодПоДРФО", 				НСтр("ru=' код по ГРФЛ ';uk=' код за ДРФО '",КодЯзыка));
	СоответствиеПараметров.Вставить("ИНН",						НСтр("ru='ИНН ';uk='ІПН '",КодЯзыка));
	СоответствиеПараметров.Вставить("НомерСвидетельства", 		НСтр("ru='№ свид. ';uk='№ свід. '",КодЯзыка));
	СоответствиеПараметров.Вставить("ЮридическийАдрес",			НСтр("ru='';				uk=''",КодЯзыка));
	СоответствиеПараметров.Вставить("ФактическийАдрес",			НСтр("ru='';				uk=''",КодЯзыка));
	СоответствиеПараметров.Вставить("Телефоны",					НСтр("ru='тел.: ';uk='тел.: '",КодЯзыка));
	СоответствиеПараметров.Вставить("НомерСчета",				НСтр("ru='т/с ';uk='п/р '",КодЯзыка));
	СоответствиеПараметров.Вставить("Банк",               		НСтр("ru='в банке ';uk='у банку '",КодЯзыка));
	СоответствиеПараметров.Вставить("МФО",                		НСтр("ru='МФО ';uk='МФО '",КодЯзыка));
	СоответствиеПараметров.Вставить("ПредставлениеБанковскогоСчета", "");
	СоответствиеПараметров.Вставить("МФО_Платеж",                НСтр("ru='МФО ';uk='МФО '",КодЯзыка));
	
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			Если ИмяПараметра = "/" Тогда
				НоваяСтрока = Истина;
				Продолжить;
			КонецЕсли; 
			
			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				
				Если ПустаяСтрока(Результат)Тогда 
					// это первый параметр, выведем префикс с большой буквы
					Префикс = ВРег(Лев(Префикс,1)) + Сред(Префикс,2);
				ИначеЕсли НоваяСтрока Тогда
					Результат = Результат + "," +Символы.ПС;
				Иначе
					Результат = Результат + ", " 
				КонецЕсли; 
				НоваяСтрока = Ложь;

				
				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СокрЛП(СтрокаДополнения);
			Исключение

				#Если Клиент Тогда
					Сообщить(НСтр("ru='Не удалось определить значение параметра организации: ';uk='Не вдалося визначити значення параметра організації: '") + ИмяПараметра, СтатусСообщения.Внимание);
 				#КонецЕсли

			КонецПопытки;
			
			
		КонецЕсли; 

	КонецЦикла;

 	Возврат СокрЛП(Результат);

КонецФункции // ОписаниеОрганизации()
