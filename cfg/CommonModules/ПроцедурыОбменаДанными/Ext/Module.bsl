//  ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБМЕНА С ИНФОРМАЦИОННЫМИ БАЗАМИ 


// УНИВЕРСАЛЬНЫЕ ФУНКЦИИ ЧТЕНИЯ ИЗМЕНЕНИЙ И ЗАГРУЗКИ ИЗМЕНЕНИЙ ДЛЯ ОБМЕНА МЕЖДУ ИНФОРМАЦИОННЫМИ БАЗАМИ ОДИНАКОВОЙ СТРУКТУРЫ

// Универсальная Процедура чтения изменений из сообщения обмена
// Применима для случаев когда структура метаданных обменивающихся баз одинакова для всех объектов участвующих в обмене
//
// Обязательное условие: У плана обмена должна существовать функция:
//
//  Функция ПрименитьИзменениеКИнформационнойБазе(Отправитель, Данные) Экспорт
//
// 	Эта функция будет вызываться лишь в том случае, если произошла коллизия изменений. то есть один и тот же объект изменился 
//	в двух узлах информационной базы.
// 
//	Параметры вспомогательной функции:
//
//  	Отправитель - ссылка на план обмена от кого пришло изменение
//      Данные - непосредственно сами данные, которые пришли от узла отправителя
//
//	Возвращаемые параметры вспомогательной функции
//		Результат - булево. Если истина, то изменения будут приняты от узла отправителя и вставлены в информационную базу. В
// 		в противном случае изменения будут отклонены
//
//
//	ПАРАМЕТРЫ ФУНКЦИИ
//		УзелОбмена - узел отправитель, от которого пришли изменения
//		ЧтениеXML - данные изменений
//
//	ВОЗВРАЩАЕМЫЕ ПАРАМЕТРЫ
//
//		РЕЗУЛЬТАТ - булево. признак того, что чтение изменений прошло успешно
//
Функция ЗагрузитьИзмененияДляУзлаИзФайлаОбмена(УзелОбмена, КоличествоЭлементовВТранзакцииНаЗагрузкуДанных = 0, ЧтениеXML) Экспорт
	
	ЭтотУзелОбмена = ПланыОбмена[ПолучитьИмяПланаОбмена(УзелОбмена)].ЭтотУзел();
	// Загрузка из найденного файла
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
	Если ЧтениеСообщения.Отправитель <> УзелОбмена Тогда
		// Сообщение предназначено не для этого узла
		ВызватьИсключение "Неверный узел в файле обмена данными";			
	КонецЕсли;
    
	// Удаляем регистрацию изменений для узла отправителя сообщения
	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	
	// считаем сколько объектов прочитали
	КоличествоПрочитанныхОбъектов = 0;
	КоличествоЗаписанныхОбъектов = 0;
	
	// начинаем транзакцию
	НачатьТранзакцию(); 
	
	ЭтотУзелОбменаОбъект = Неопределено;
	
	Попытка
		
		// Читаем данные из сообщения
		Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
					
			// Читаем очередное значение
			Данные = ПрочитатьXML(ЧтениеXML);
			
			КоличествоПрочитанныхОбъектов = КоличествоПрочитанныхОбъектов + 1;
			
			Если КоличествоПрочитанныхОбъектов % 100 = 0 Тогда
				#Если Клиент Тогда
					Состояние(НСтр("ru='Чтение изменений от узла ""';uk='Читання змін від вузла ""'") + УзелОбмена.Наименование + """. Считано объектов: " + Строка(КоличествоПрочитанныхОбъектов));
				#КонецЕсли
			КонецЕсли;
					
			// по идее какие изменения принимать а какие откатывать должен определять сам план обмена
			Если ПланыОбмена.ИзменениеЗарегистрировано(ЧтениеСообщения.Отправитель, Данные) Тогда
						
				//Возник конфликт
				//И сами данные были изменены и в присланном файле содержится изменение этих данных
				Если ЭтотУзелОбменаОбъект = Неопределено Тогда
					
					ЭтотУзелОбменаОбъект = ЭтотУзелОбмена.ПолучитьОбъект();
					
				КонецЕсли;
				
				ПрименятьИзменения = ЭтотУзелОбменаОбъект.ПрименитьИзменениеКИнформационнойБазе(ЧтениеСообщения.Отправитель, Данные); 
				Если Не ПрименятьИзменения Тогда
					Продолжить;
				КонецЕсли;
						
			КонецЕсли;
					
			// Записываем перенесенные данные
			Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
			Данные.ОбменДанными.Загрузка = Истина;
			Данные.Записать();
			
			КоличествоЗаписанныхОбъектов = КоличествоЗаписанныхОбъектов + 1;
			
			Если (КоличествоЭлементовВТранзакцииНаЗагрузкуДанных > 0)
				И (КоличествоЗаписанныхОбъектов = КоличествоЭлементовВТранзакцииНаЗагрузкуДанных) Тогда
				
				// промежуточную транзакцию закрываем и открываем новую
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
				
				КоличествоЗаписанныхОбъектов = 0;
			КонецЕсли;
									
		КонецЦикла;
		
		// фиксируем все изменения которые были записаны
		ЗафиксироватьТранзакцию();	
					
		ЧтениеСообщения.ЗакончитьЧтение();
		ЧтениеXML.Закрыть();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		#Если Клиент Тогда
			ОбщегоНазначения.СообщитьОбОшибке("" + ОписаниеОшибки());
		#КонецЕсли
		
		ЧтениеXML.Закрыть();
		Возврат Ложь;
		
	КонецПопытки;
		
	Возврат Истина;
		
КонецФункции // ПрочитатьИзмененияДляУзла


// Универсальная Процедура записи изменений для сообщения обмена
// Применима для случаев когда структура метаданных обменивающихся баз одинакова для всех объектов участвующих в обмене
//
//	ПАРАМЕТРЫ ФУНКЦИИ
//		УзелОбмена - узел получатель, для которого формируется пакет изменений
//		ЗаписьXML - объект для записи изменений
//
//	ВОЗВРАЩАЕМЫЕ ПАРАМЕТРЫ
//
//		РЕЗУЛЬТАТ - булево. признак того, что запись изменений прошла успешно
//
Функция ВыгрузитьИзмененияДляУзлаВФайлОбмена(УзелОбмена, КоличествоЭлементовВТранзакцииНаВыгрузкуДанных, ЗаписьXML) Экспорт

	ЗаписьXML.ЗаписатьОбъявлениеXML();
	// Создаем новое сообщение
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
		
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	// считаем количество записанных объектов
	КоличествоЗаписанныхОбъектов = 0;
	КоличествоНайденныхДляЗаписиОбъектов = 0;
	
	// начинаем транзакцию
	НачатьТранзакцию();
	
	Попытка
	
		// Получаем выборку изменённых данных
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(ЗаписьСообщения.Получатель, ЗаписьСообщения.НомерСообщения);
		Пока ВыборкаИзменений.Следующий() Цикл
					
			Данные = ВыборкаИзменений.Получить();
			// Записываем данные в сообщение
			ЗаписатьXML(ЗаписьXML, Данные);
			
			КоличествоНайденныхДляЗаписиОбъектов = КоличествоНайденныхДляЗаписиОбъектов + 1;
			
			Если КоличествоНайденныхДляЗаписиОбъектов % 100 = 0 Тогда
				#Если Клиент Тогда
					Состояние(НСтр("ru='Запись изменений для узла ""';uk='Запис змін для вузла ""'") + УзелОбмена.Наименование + """. Записано объектов: " + Строка(КоличествоНайденныхДляЗаписиОбъектов));
				#КонецЕсли
			КонецЕсли;
			
			КоличествоЗаписанныхОбъектов = КоличествоЗаписанныхОбъектов + 1;
			
			Если (КоличествоЭлементовВТранзакцииНаВыгрузкуДанных > 0)
				И (КоличествоЗаписанныхОбъектов = КоличествоЭлементовВТранзакцииНаВыгрузкуДанных) Тогда
				
				// промежуточную транзакцию закрываем и открываем новую
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
				
				КоличествоЗаписанныхОбъектов = 0;
			КонецЕсли;

		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		// Завершаем запись сообщения
		ЗаписьСообщения.ЗакончитьЗапись();
				
		ЗаписьXML.Закрыть();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		#Если Клиент Тогда
			ОбщегоНазначения.СообщитьОбОшибке("" + ОписаниеОшибки());
		#КонецЕсли
		
		ЗаписьXML.Закрыть();
		Возврат Ложь;
		
	КонецПопытки;
		
	Возврат Истина;
	
КонецФункции // ЗаписатьИзмененияДляУзла


///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

//ФОРМА ХОДА ОБРАБОТКИ

// Процедура показывает новое сообщение в форме хода обработки данных
Процедура ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураОбменаДанными, Знач ТекстСообщения, Знач ПроцентПрибавления = 0)
	
	#Если Клиент Тогда
		
		СтруктураОбменаДанными.ФормаХодаВыполненияОбмена.КомментарийОбработкиДанных = ТекстСообщения;	
		СтруктураОбменаДанными.ФормаХодаВыполненияОбмена.Значение = СтруктураОбменаДанными.ФормаХодаВыполненияОбмена.Значение + ПроцентПрибавления;
		
	#КонецЕсли
	
КонецПроцедуры

// Процедура показывает новое сообщение в форме хода обработки данных
Процедура ИнициализироватьФормуХодаОбработки(СтруктураОбменаДанными, Знач ТекстСообщения = "", Знач ПроцентПрибавления = 0)
	
	#Если Клиент Тогда
		
		ФормаХодаВыполненияОбмена = Неопределено;
		СтруктураОбменаДанными.Свойство("ФормаХодаВыполненияОбмена", ФормаХодаВыполненияОбмена);
		
		Если ФормаХодаВыполненияОбмена = Неопределено Тогда
			
			ФормаХодаВыполненияОбмена = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
			СтруктураОбменаДанными.Вставить("ФормаХодаВыполненияОбмена", ФормаХодаВыполненияОбмена);
			
		Иначе	
			ФормаХодаВыполненияОбмена = СтруктураОбменаДанными.ФормаХодаВыполненияОбмена; 	
		КонецЕсли;
		
		ФормаХодаВыполненияОбмена.НаименованиеОбработкиДанных = "Обмен данными по настройке: " + СтруктураОбменаДанными.ДанныеНастройки.Наименование;
		ФормаХодаВыполненияОбмена.КомментарийОбработкиДанных = ТекстСообщения;	
		ФормаХодаВыполненияОбмена.Значение = ПроцентПрибавления;
		ФормаХодаВыполненияОбмена.МаксимальноеЗначение = 100;
		
		Если Не ФормаХодаВыполненияОбмена.Открыта() Тогда
			ФормаХодаВыполненияОбмена.Открыть();
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

//Процедура закрывает форму хода обработки данных
Процедура ЗакрытьФормуОбработкиДанных(СтруктураОбменаДанными)
	
	#Если Клиент Тогда
		
		ФормаХодаВыполненияОбмена = Неопределено;
		СтруктураОбменаДанными.Свойство("ФормаХодаВыполненияОбмена", ФормаХодаВыполненияОбмена);
		Если ФормаХодаВыполненияОбмена <> Неопределено Тогда
			
			Если ФормаХодаВыполненияОбмена.Открыта() Тогда
				ФормаХодаВыполненияОбмена.Закрыть();
			КонецЕсли;
			
			СтруктураОбменаДанными.ФормаХодаВыполненияОбмена = Неопределено; 	
			
		КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры


// функция возвращает используется ли механизм автоматического обмена данными или нет
Функция ИспользоватьМеханизмАвтоматическогоОбмена() Экспорт
	
	// можно ли константу опросить
	Если НЕ ПравоДоступа("Чтение", Метаданные.Константы.ИспользоватьМеханизмАвтоматическогоОбменаДанными) Тогда
		// нет доступа к константе
		Возврат Ложь;
	КонецЕсли;	
		
	// нужно ли автообмен данными проводить
	ИспользоватьАвтообмен = Константы.ИспользоватьМеханизмАвтоматическогоОбменаДанными.Получить();
	
	Возврат ИспользоватьАвтообмен = Истина;
	
КонецФункции

// функция по текущей дате возвращает имя дня недели
Функция ПолучитьИмяДняНедели(Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		НомерДняДенели = ДеньНедели(ТекущаяДата());
	Иначе
		НомерДняДенели = ДеньНедели(Дата);
    КонецЕсли;
	
	Если НомерДняДенели = 1 Тогда
		Возврат "Понедельник";
	ИначеЕсли НомерДняДенели = 2 Тогда
		Возврат "Вторник";
	ИначеЕсли НомерДняДенели = 3 Тогда
		Возврат "Среда";
	ИначеЕсли НомерДняДенели = 4 Тогда
		Возврат "Четверг";
	ИначеЕсли НомерДняДенели = 5 Тогда
		Возврат "Пятница";
	ИначеЕсли НомерДняДенели = 6 Тогда
		Возврат "Суббота";
	Иначе
		Возврат "Воскресенье";	
	КонецЕсли;
	
КонецФункции

// функция нормализует ftp адрес (отрезает не нужное)
Функция НормализоватьFTPАдрес(Знач FTPАдрес) Экспорт
	
	ИтоговыйАдрес = СокрЛП(FTPАдрес);
	ПозицияFTP = Найти(Врег(ИтоговыйАдрес), "FTP://");
	
	Если ПозицияFTP = 1 Тогда
		
		ИтоговыйАдрес = Сред(ИтоговыйАдрес, 7);	
		
	КонецЕсли;
	
	Возврат ИтоговыйАдрес;
	
КонецФункции

// Процедура выполняет удаление файла
Функция ВыполнитьУдалениеФайла(Знач ИмяФайлаУдаления, СтруктураНастроекОбменаДанными, Знач ВыводитьИнформациюВПротокол = Ложь)
	
	//СтруктураНастроекОбменаДанными.ДанныеПротокола, СтруктураНастроекОбменаДанными.РучнойРежимЗапуска
	
	Если ПустаяСтрока(ИмяФайлаУдаления) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		
		Если ВыводитьИнформациюВПротокол Тогда
			ДобавитьИнформациюВПротокол("Удаление файла: " + ИмяФайлаУдаления, СтруктураНастроекОбменаДанными.ДанныеПротокола);
		КонецЕсли;
	
		УдалитьФайлы(ИмяФайлаУдаления);
		
	Исключение
		
		Если ВыводитьИнформациюВПротокол Тогда
			СообщитьИнформациюОбОшибкеОбмена("Ошибка при попытке удаления файла: " + ИмяФайлаУдаления + " " + ОписаниеОшибки(), 
				СтруктураНастроекОбменаДанными);
		КонецЕсли;
			
		Возврат Ложь;	
		 
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Процедура выполняет копирование файла
Функция ВыполнитьКопированиеФайла(Знач ИмяФайлаИсточника, Знач ИмяФайлаПриемника, Знач ВыводитьИнформациюВПротокол = Ложь, СтруктураНастроекОбменаДанными)
	
	Попытка
		
		Если ВыводитьИнформациюВПротокол Тогда
			ДобавитьИнформациюВПротокол("Копирование файла из  " + ИмяФайлаИсточника + " в " + ИмяФайлаПриемника, СтруктураНастроекОбменаДанными.ДанныеПротокола);
		КонецЕсли;
	
		КопироватьФайл(ИмяФайлаИсточника, ИмяФайлаПриемника);
		
	Исключение
		
		Если ВыводитьИнформациюВПротокол Тогда
			
			СообщитьИнформациюОбОшибкеОбмена("Ошибка при копировании файла из  " + ИмяФайлаИсточника + " в " + ИмяФайлаПриемника + 
				Символы.ПС + ОписаниеОшибки(), СтруктураНастроекОбменаДанными);
				
		КонецЕсли;
			
		Возврат Ложь;	
		 
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Процедура меняет расширение имени файла обмена и выполняет проверку наличия каталога для работы
Процедура ПроверитьДоступностьРаботыСКаталогом(ИмяФайлаЧтенияИзменений, Знач НужноМенятьРасширениеНаZIP = Ложь)
	
	Если НужноМенятьРасширениеНаZIP Тогда
		РаботаСФайлами.УстановитьРасширениеФайла(ИмяФайлаЧтенияИзменений, ".zip");
	КонецЕсли;

	//надо убедиться в том что каталог куда все будем сохранять существует
	СоздатьКаталогПоПолномуПутиКФайлу(ИмяФайлаЧтенияИзменений);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// АВТОМАТИЧЕСКОЕ ОБНОВЛЕНИЕ КОНФИГУРАЦИИ

// функция возвращает настройки для формирования файла обновления конфигурации
Функция ПолучитьНастройкиДляФайлаОбновленияКонфигурации() Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Константы.НастройкаФайлаОбновленияКонфигурации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// получаем сами настройки
	НастройкиДляОбновленияКонфигурации = Константы.НастройкаФайлаОбновленияКонфигурации.Получить();
	
	Если НастройкиДляОбновленияКонфигурации <> Неопределено Тогда
		
		Возврат НастройкиДляОбновленияКонфигурации.Получить();
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Функция устанавливает настройки для файла обновления конфигурации
Функция УстановитьНастройкиДляФайлаОбновленияКонфигурации(СтруктураНастроек) Экспорт
	
	Если НЕ ПравоДоступа("Изменение", Метаданные.Константы.НастройкаФайлаОбновленияКонфигурации) Тогда
		
		СообщитьИнформациюОПростойОшибке("Нет прав на изменение константы ""Настройка файла обновления конфигурации""");
			
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		
		ЗначениеХранилища = Новый ХранилищеЗначения(СтруктураНастроек);
		Константы.НастройкаФайлаОбновленияКонфигурации.Установить(ЗначениеХранилища);
		
	Исключение
		
		СообщитьИнформациюОПростойОшибке("Ошибка при установке константы ""Настройка файла обновления конфигурации"": " + ОписаниеОшибки());
	    Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

// функция создает параметры настроек обновления конфигурации по умолчанию
Функция СоздатьПараметрыНастроекОбновленияКонфигурацииПоУмолчанию() Экспорт
	
	ПараметрыНастроек = Новый Структура();
	
	ПараметрыНастроек.Вставить("ФормироватьФайлОбновленияКонфигурацииАвтоматически", Истина);
	ПараметрыНастроек.Вставить("ИмяАдминистратораИнформационнойБазы", "");
	ПараметрыНастроек.Вставить("ИмяФайлаДляЗаписиОшибок", "");
	
	Возврат ПараметрыНастроек;
	
КонецФункции

// Процедура определяет параметры БАТ файла для обновления конфигурации
Процедура СформироватьПараметрыДляОбновленияКонфигурации(ИмяПользователяБД, ИмяПрограммыЗапуска, ПутьКБД, ФайловаяБД)
	
	// создается BAT файл по установленному макету и запускается
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	
	ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая(СтрокаСоединенияСБД);
			
	Если ЭтоФайловаяИБ Тогда
		ПутьКБД = Сред(СтрокаСоединенияСБД, 6, СтрДлина(СтрокаСоединенияСБД) - 6);
		ФайловаяБД = Истина;
	Иначе
	    // надо к имени сервера прибавить имя пути БД  !!!
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "SRVR=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат;
		КонецЕсли;
		
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		НачальнаяПозицияКопирования = 6 + 1;
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяСервера = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		СтрокаСоединенияСБД = Сред(СтрокаСоединенияСБД, ПозицияТочкиСЗапятой + 1);
		
		// позиция имени сервера
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "REF=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат;
		КонецЕсли;
				
		НачальнаяПозицияКопирования = 6;
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяИБНаСервере = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		ПутьКБД = """" + ИмяСервера + "\" + ИмяИБНаСервере + """";
		ФайловаяБД = Ложь;
		
	КонецЕсли;
	
	ИмяПрограммыЗапуска = РаботаСФайлами.ПолучитьИмяФайла(КаталогПрограммы(), "1cv8.exe");
    	
	ИмяПользователяБД = ИмяПользователя();
	
КонецПроцедуры

// Функция формирует логин пользователя для подключения к ИБ
Функция СформироватьЛогинПодключенияКИБ(Знач ИмяПользователяБД)
	
	Если Не ПустаяСтрока(ИмяПользователяБД) Тогда
		
		ТребуетсяАвторизацияОС = ПолныеПрава.НаличиеУПользователяWindowsАвторизации(ИмяПользователяБД);
		
		КлючАвторизации = ?(ТребуетсяАвторизацияОС, "/WA+", "/WA-"); 
		
		ПользовательБД = "/N""" + ИмяПользователяБД + """ " + КлючАвторизации;
	Иначе
		ПользовательБД = "";
	КонецЕсли;
	
	Возврат ПользовательБД;
	
КонецФункции

// Функция формирует часть бат файла (объявления) для обновления конфигурации
Функция СформироватьЧастьОбъявленийПодключенияТекущегоПользователя()
	
	Перем ИмяПользователяБД, ИмяПрограммыЗапуска, ПутьКБД, ФайловаяБД;
	
	СформироватьПараметрыДляОбновленияКонфигурации(ИмяПользователяБД, ИмяПрограммыЗапуска, ПутьКБД, ФайловаяБД);
	
	ТекстФайлаПоУмолчанию = Символы.ПС;
	
	ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set v8exe=""" + ИмяПрограммыЗапуска + """" + Символы.ПС;
	ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set DataBaseName=" + ПутьКБД + Символы.ПС;
	
	Если ФайловаяБД Тогда	
		ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set DataBase=/F%DataBaseName%" + Символы.ПС;
	Иначе
		ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set DataBase=/S%DataBaseName%" + Символы.ПС;
	КонецЕсли;
	
	ПользовательБД = СформироватьЛогинПодключенияКИБ(ИмяПользователяБД);
	
	ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set User=" + ПользовательБД + Символы.ПС;

	Возврат ТекстФайлаПоУмолчанию;
	
КонецФункции

// функция формирует часть бат файла (вызов обновления конфигурации)
Функция СформироватьЧастьВызоваОбновленияКонфигурации(Знач ИмяАдминистратораИБ = "", Знач ИмяФайлаИнформацииОбОшибках = "", 
	Знач ИспользоватьФайлОбОшибкахСПустымИменем = Ложь)
	
	ИмяЛогинаАдминистратора = ?(ПустаяСтрока(ИмяАдминистратораИБ), "", СформироватьЛогинПодключенияКИБ(ИмяАдминистратораИБ));
	
	СтрокаОбъявленияФайлаСообщенийОбОшибках = "";
	СтрокаДляВыводаДанныхВФайл = "";
		
	Если НЕ ПустаяСтрока(ИмяФайлаИнформацииОбОшибках) ИЛИ ИспользоватьФайлОбОшибкахСПустымИменем Тогда
		
		// надо проверить наличие файла для обмена, есл его нет то создать его
		СтрокаИмениФайлаИнформацииОбОшибках = СокрЛП(ИмяФайлаИнформацииОбОшибках);
							
		СтрокаОбъявленияФайлаСообщенийОбОшибках = "
			|REM Путь к файлу для ошибок и сообщений
			|set FileInformation=""" + СтрокаИмениФайлаИнформацииОбОшибках + """
			|
			|date /t >> %FileInformation%
			|time /t >> %FileInformation%
			|set DataBaseName>>%FileInformation%";
				
		СтрокаДляВыводаДанныхВФайл = "/Out%FileInformation% -NoTruncate";
					
	КонецЕсли;	
	
	 // основной текст
	ТекстФайлаПоУмолчанию = "
		|REM Логин администратора системы
		|set AdminUser=" + ИмяЛогинаАдминистратора + "
        |
		|" + СтрокаОбъявленияФайлаСообщенийОбОшибках + " 
		|
		|rem Завершение работы пользователей
		|start """" /wait %v8exe% ENTERPRISE %DataBase% %AdminUser% /CЗавершитьРаботуПользователей	/UCПакетноеОбновлениеКонфигурацииИБ	" + СтрокаДляВыводаДанныхВФайл + " /DisableStartupMessages
        |
		|start """" /wait %v8exe% CONFIG     %DataBase% %AdminUser% /UpdateDBCfg /UCПакетноеОбновлениеКонфигурацииИБ " + СтрокаДляВыводаДанныхВФайл + "
        |
		|rem Разрешение работы пользователей
		|start """" /wait %v8exe% ENTERPRISE %DataBase% %AdminUser% /CРазрешитьРаботуПользователей	/UCПакетноеОбновлениеКонфигурацииИБ	" + СтрокаДляВыводаДанныхВФайл + " /DisableStartupMessages
        |
		|rem Запуск самой программы
		|start """" %v8exe% ENTERPRISE %DataBase% %User% /DisableStartupMessages";
		
	Возврат ТекстФайлаПоУмолчанию;
	
КонецФункции

// Функция формирует текст файла обновления конфигурации по умолчанию
Функция ПолучитьТекстНастроекФайлаОбновленияКонфигурацииПоУмолчанию() Экспорт
	
	ТекстФайлаПоУмолчанию = СформироватьЧастьОбъявленийПодключенияТекущегоПользователя();
		                       
    // основной текст
	ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + СформироватьЧастьВызоваОбновленияКонфигурации(,,Истина);
		
	Возврат ТекстФайлаПоУмолчанию;
	
КонецФункции

// функция формирует текст бат файла обновления конфигурации по структуре данных
Функция СформироватьТекстБатФайлаПоСтруктуре(СтруктураПараметров) Экспорт
	
	ТекстФайла = "";
	
	// автоматически или нет формируется файл с настройками
	ФормироватьФайлОбновленияКонфигурацииАвтоматически = Истина;
	СтруктураПараметров.Свойство("ФормироватьФайлОбновленияКонфигурацииАвтоматически", ФормироватьФайлОбновленияКонфигурацииАвтоматически);
	
	Если ФормироватьФайлОбновленияКонфигурацииАвтоматически = Истина Тогда
		
		// имя администратора информационной базы
		ИмяАдминистратораИнформационнойБазы = "";
		Если Не СтруктураПараметров.Свойство("ИмяАдминистратораИнформационнойБазы", ИмяАдминистратораИнформационнойБазы) Тогда
			
			ИмяАдминистратораИнформационнойБазы = "";
			
		КонецЕсли;
		
		// файл для фиксирования ошибок
		ИмяФайлаДляЗаписиОшибок = "";
		Если Не СтруктураПараметров.Свойство("ИмяФайлаДляЗаписиОшибок", ИмяФайлаДляЗаписиОшибок) Тогда
			
			ИмяФайлаДляЗаписиОшибок = "";
			
		КонецЕсли;

		ТекстФайла = СформироватьЧастьОбъявленийПодключенияТекущегоПользователя();
		
		ТекстФайла = ТекстФайла + СформироватьЧастьВызоваОбновленияКонфигурации(ИмяАдминистратораИнформационнойБазы, ИмяФайлаДляЗаписиОшибок);
		
	Иначе
		// ручное редактирование
		НаличиеСвойства = СтруктураПараметров.Свойство("ТекстФайлаОбновленияКонфигурации", ТекстФайла);
		
		Если Не НаличиеСвойства Тогда
			ТекстФайла = "";
		КонецЕсли;
								
	КонецЕсли;
	
	Возврат ТекстФайла;
	
КонецФункции

// формирование текста бат файла обновления конфигурации по настройкам
Функция СформироватьТекстБатФайлаПоНастройкам() Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Константы.НастройкаФайлаОбновленияКонфигурации) Тогда
		СообщитьИнформациюОПростойОшибке("Нет прав доступа к константе ""Настройка файла обновления конфигурации""");
		Возврат "";
	КонецЕсли;

	СтруктураНастроек = ПолучитьНастройкиДляФайлаОбновленияКонфигурации();
	Если СтруктураНастроек = Неопределено Тогда
		СтруктураНастроек = СоздатьПараметрыНастроекОбновленияКонфигурацииПоУмолчанию();
	КонецЕсли;
		
	ТекстФайла = СформироватьТекстБатФайлаПоСтруктуре(СтруктураНастроек);
	
	Возврат ТекстФайла;
	
КонецФункции

#Если Клиент Тогда

// Процедура формирование BAT-Файла для автоматической перезагрузки программы
Процедура ПредложитьПерезагрузкуПрограммы(СтруктураПараметров = Неопределено, 
	Знач ЗапускатьФайлОбновленияКонфигурации = Ложь) Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда
		// создается BAT файл по установленному макету и запускается
		ТекстБатФайла = СформироватьТекстБатФайлаПоНастройкам();
	Иначе
		ТекстБатФайла = СформироватьТекстБатФайлаПоСтруктуре(СтруктураПараметров);
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстБатФайла) Тогда
		
		СообщитьИнформациюОПростойОшибке("Нельзя создать пустой файл автоматического обновления конфигурации");
		Возврат;
	КонецЕсли;
	
	ТекстовайДокумент = Новый ТекстовыйДокумент();
	ТекстовайДокумент.УстановитьТекст(ТекстБатФайла);
	
	ИмяБАТФайла = РаботаСФайлами.ПолучитьИмяФайла(КаталогВременныхФайлов(), "Upd1C.bat");

	ТекстовайДокумент.Записать(ИмяБАТФайла, КодировкаТекста.OEM);
		
	Если ЗапускатьФайлОбновленияКонфигурации Тогда
		
		Сообщить(НСтр("ru='Файл для автоматического изменения конфигурации запущен на исполнение: ';uk='Файл для автоматичної зміни конфігурації запущений на виконання: '") + ИмяБАТФайла);
		// запускаем БАТ файл перезагрузки
		ЗапуститьПриложение(ИмяБАТФайла);
		
	Иначе
		
		Сообщить(НСтр("ru='Файл для автоматического изменения конфигурации: ';uk='Файл для автоматичної зміни конфігурації: '") + ИмяБАТФайла);
		// открываем каталог с файлом перезагрузки
		ЗапуститьПриложение(КаталогВременныхФайлов());
		
	КонецЕсли;
	  
КонецПроцедуры

// Процедура показывает форму списка справочника "Настройки обменов" для узла обмена
Процедура ПоказатьНастройкиОбменовДляУзла(УзелОбмена, Владелец = Неопределено) Экспорт
	
	ФормаСписка = Справочники.НастройкиОбменаДанными.ПолучитьФормуСписка(, Владелец);
	
	ФормаСписка.СправочникСписок.Отбор.УзелИнформационнойБазы.Значение = УзелОбмена;
	ФормаСписка.СправочникСписок.Отбор.УзелИнформационнойБазы.ВидСравнения = ВидСравнения.Равно;
	ФормаСписка.СправочникСписок.Отбор.УзелИнформационнойБазы.Использование = Истина;
	
	ФормаСписка.Открыть();
	
КонецПроцедуры

#КонецЕсли


///////////////////////////////////////////////////////////////////////////////
//	ПРОТОКОЛ

// Процедура дописывает информацию в файл лога
Процедура ДобавитьИнформациюВПротокол(Знач ИнформацияДляПользователя, ДанныеПротокола = "", 
			Знач ОтобразитьВОкнеСообщений = Ложь, Знач ЭтоОшибка = Ложь) Экспорт
	
	Если Не ПустаяСтрока(ИнформацияДляПользователя) Тогда
		
		Попытка
			
			Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) Тогда
				ИмяПользователя = "";
			Иначе
				ИмяПользователя = "[" + Строка(ПараметрыСеанса.ТекущийПользователь) + "] "; 	
			КонецЕсли;
			
		Исключение
			
			ИмяПользователя = "[Сервер]";
			
		КонецПопытки;
			
		СтрокаДляЗаписи = "[" + Строка(ТекущаяДата()) + "] " + ИмяПользователя + ИнформацияДляПользователя;
	Иначе
		// записываем строку как есть
		СтрокаДляЗаписи = ИнформацияДляПользователя;
	КонецЕсли;
		
	Если ДанныеПротокола = "" Тогда
		ДанныеПротокола = СтрокаДляЗаписи;
	Иначе
		ДанныеПротокола = ДанныеПротокола + Символы.ПС + СтрокаДляЗаписи;	
	КонецЕсли;	

	// возможно информацию еще надо в окно сообщений пользователю вывести
	#Если Клиент Тогда
		
		Если ОтобразитьВОкнеСообщений Тогда
			
			Если ЭтоОшибка Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ИнформацияДляПользователя);
			Иначе
				
				Если ИнформацияДляПользователя <> Символы.ПС Тогда 
					ИнформацияДляПользователя = ОбщегоНазначения.СформироватьТекстСообщения(ИнформацияДляПользователя);
				КонецЕсли;	
				
				Сообщить(ИнформацияДляПользователя);
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

// Процедура отображает сообщение пользователю и записывает его в лог
Процедура СообщитьПростуюИнформацию(Знач ИнформацияДляПользователя, ДанныеПротокола, Знач ВывестиИнформациюВОкноСообщений = Истина) Экспорт
	
	ДобавитьИнформациюВПротокол(ИнформацияДляПользователя, ДанныеПротокола, ВывестиИнформациюВОкноСообщений, Ложь);
	
КонецПроцедуры

// Процедура отображает сообщение об ошибке пользователю и записывает его в лог
Процедура СообщитьИнформациюОПростойОшибке(Знач ИнформацияДляПользователя, ДанныеПротокола = "", Знач ОтображатьСообщениеОбОшибке = Истина) Экспорт
	
	ДобавитьИнформациюВПротокол(ИнформацияДляПользователя, ДанныеПротокола, ОтображатьСообщениеОбОшибке, Истина);
	
КонецПроцедуры



// функция отражает сообщение об ошибке при обмене данными
Процедура СообщитьИнформациюОбОшибкеОбмена(Знач ИнформацияДляПользователя, СтруктураОбменаДанными) Экспорт
	
	ДобавитьИнформациюВПротокол(ИнформацияДляПользователя, СтруктураОбменаДанными.ДанныеПротокола, СтруктураОбменаДанными.ВывестиИнформациюОбОшибкеВОкноСообщений, Истина);
	
КонецПроцедуры

// Процедура отображает сообщение пользователю и записывает его в лог
Процедура СообщитьИнформациюОбОбмене(Знач ИнформацияДляПользователя, СтруктураОбменаДанными) Экспорт
	
	ДобавитьИнформациюВПротокол(ИнформацияДляПользователя, СтруктураОбменаДанными.ДанныеПротокола, СтруктураОбменаДанными.ВывестиИнформациюВОкноСообщений, Ложь);
	
КонецПроцедуры

// Процедура записывает данные протокола
Процедура ЗаписатьДанныеПротокола(НастройкаОбмена, ДанныеПротокола, ЭтоОшибка = Ложь)
	
	// только пустую строку не записываем, все остальное пишем
	Если ДанныеПротокола = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаОбмена.ВестиЛог Тогда
		
		ТипСообщения = ?(ЭтоОшибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
		
		ЗаписьЖурналаРегистрации("ОбменДанными."+ Строка(НастройкаОбмена.Ссылка), ТипСообщения, , НастройкаОбмена.Ссылка, СокрЛП(ДанныеПротокола));
			
    КонецЕсли;
	
	// очищаем данные протокола обмена
	ДанныеПротокола = "";
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФАЙЛАМИ ОБМЕНА


// функция по двум узлам возвращает имя самого файла обмена информацией, без пути к файлам
Функция СформироватьИмяФайлаОбменаМеждуУзлами(УзелОтправитель, УзелПолучатель, Знач РасширениеФайла = ".xml")
	
	Возврат "Message_" + СокрЛП(УзелОтправитель.Код) + "_" + СокрЛП(УзелПолучатель.Код) + РасширениеФайла;
	
КонецФункции

// Процедура по полному пути к файлу определяет каталог файла и есл каталог отсутвует то создает его
Процедура СоздатьКаталогПоПолномуПутиКФайлу(Знач ПолноеИмяФайла)
	
	ИмяКаталога = "";
	ИмяФайла = "";
	
	РаботаСФайлами.ПолучитьКаталогИИмяФайла(ПолноеИмяФайла, ИмяКаталога, ИмяФайла);
	
	СоздатьКаталогВСлучаеОтсутствия(ИмяКаталога);
	
КонецПроцедуры

// Процедура создает каталог если его нет
Процедура СоздатьКаталогВСлучаеОтсутствия(Знач ИмяКаталога)
	
	// ищем нужный нам каталог, если его нет - то пытаемся создать
	НаличиеКаталогаОбмена = ПроверитьНаличиеКаталога(ИмяКаталога, Истина);
	
	Если НЕ НаличиеКаталогаОбмена Тогда
		// создаем вложенный каталог в темповый
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	
КонецПроцедуры

// функция возвращает каталог для временных файлов при обмене данными
Функция ПолучитьПутьККаталогуВременныхФайловОбмена(Знач НаименованиеНастройкиОбмена, УзелОбмена, Знач ПроверятьНаличиеКаталога = Ложь)
	
	// во временном каталоге катаог с именем узла, а потом с именем настройки обмена...
	
	ИмяПланаОбмена = ПолучитьИмяПланаОбмена(УзелОбмена);
	ИмяПланаОбмена = РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(ИмяПланаОбмена);
	
	ПутьКФайлуОбмена = РаботаСФайлами.ПолучитьИмяФайла(КаталогВременныхФайлов(), ИмяПланаОбмена);
	
	СтрокаКаталогаОбмена = РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(НаименованиеНастройкиОбмена);
	ПутьКФайлуОбмена = РаботаСФайлами.ПолучитьИмяФайла(ПутьКФайлуОбмена, СтрокаКаталогаОбмена);
		
	Если ПроверятьНаличиеКаталога Тогда
		
		// ищем нужный нам каталог, если его нет - то пытаемся создать
		СоздатьКаталогВСлучаеОтсутствия(ПутьКФайлуОбмена);

	КонецЕсли;

	Возврат ПутьКФайлуОбмена;
	
КонецФункции

// функция возвращает имя файла обмена между двумя узлами
Функция ВернутьПолныйПутьКФайлуОбменаМеждуУзлами(Знач ИмяКаталогаОбмена = "", Знач НаименованиеНастройкиОбмена, УзелОтправитель, УзелПолучатель, 
	Знач ПроверятьНаличиеКаталога = Ложь)
	
	// если узел отправитель и получатель совпадают то обмениваться не с кем
	Если УзелОтправитель = УзелПолучатель Тогда
		Возврат "";
	КонецЕсли;
	
	// имя итогового каталога обмена
	Если ПустаяСтрока(ИмяКаталогаОбмена) Тогда
		
		ПутьКФайлуОбмена = ПолучитьПутьККаталогуВременныхФайловОбмена(НаименованиеНастройкиОбмена, УзелОтправитель, ПроверятьНаличиеКаталога);
		
	Иначе
		
		ПутьКФайлуОбмена = ИмяКаталогаОбмена;
		Если ПроверятьНаличиеКаталога Тогда
		
			// ищем нужный нам каталог, если его нет - то пытаемся создать
			СоздатьКаталогВСлучаеОтсутствия(ПутьКФайлуОбмена);

		КонецЕсли;
		
	КонецЕсли;
			
	// Формируем имя временного файла
	ИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(ПутьКФайлуОбмена, СформироватьИмяФайлаОбменаМеждуУзлами(УзелОтправитель, УзелПолучатель, ".xml"));
	
	Возврат ИмяФайла;
	
КонецФункции

// функция возвращает полный путь для создания временного файла обмена данными для записи изменений
Функция ВерутьИмяВременногоФайлаЗаписиДанных(СтруктураНастроекОбменаДанными)
	
	УзелОбмена = СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы;
	
	ИмяФайла = ВернутьПолныйПутьКФайлуОбменаМеждуУзлами(, СтруктураНастроекОбменаДанными.ДанныеНастройки.Наименование,
		ПолучитьТекущийУзелИБ(УзелОбмена), УзелОбмена, Истина);
		
	Возврат ИмяФайла;
	
КонецФункции

// функция возвращает полный путь временного файла для чтения изменений 
Функция ВерутьИмяВременногоФайлаЧтенияДанных(СтруктураНастроекОбменаДанными, Знач ИзменитьРасширениеФайлаНаZip)
	
	УзелОбмена = СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы;
	
	ИмяФайла = ВернутьПолныйПутьКФайлуОбменаМеждуУзлами(, СтруктураНастроекОбменаДанными.ДанныеНастройки.Наименование, УзелОбмена, ПолучитьТекущийУзелИБ(УзелОбмена));
	
	// для файла чтения данных важно что бы существовал каталог, откуда будем читать данные
	
	ПроверитьДоступностьРаботыСКаталогом(ИмяФайла, ИзменитьРасширениеФайлаНаZip);
	
	Возврат ИмяФайла;
	
КонецФункции

// функция проверяет наличие не пустого файла
функция ПроверитьНаличиеФайлаОбмена(Знач ИмяФайлаОбмена)
	
	// проверка наличия файла
	Файл = Новый Файл(ИмяФайлаОбмена);
	Если Не Файл.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если Файл.ЭтоКаталог() ИЛИ Файл.Размер() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// функция проверяет наличие каталога обмена
Функция ПроверитьНаличиеКаталога(Знач ИмяКаталога, Знач ПроверятьЧтоНайденныйФайлЭтоКаталог = Ложь) Экспорт
	
	// ищем нужный нам каталог, если его нет - то пытаемся создать
	Если ПустаяСтрока(ИмяКаталога) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ВыбФайл = Новый Файл(ИмяКаталога);
	Если Не ВыбФайл.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверятьЧтоНайденныйФайлЭтоКаталог Тогда
		// проверка что это точно каталог
		Возврат ВыбФайл.ЭтоКаталог();
	Иначе
		// если без разницы каталог это или нет
		Возврат Истина;
    КонецЕсли;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// ЧТЕНИЕ И ЗАПИСЬ СООБЩЕНИЙ С ИЗМЕНЕНИЯМИ


// функция создает XMLЗапись для обмена данными
Функция СоздатьXMLЗаписьДляОбменаДанными(УзелОбмена, Знач ИмяФайлаОбменаДанными)
	
	Если ПустаяСтрока(ИмяФайлаОбменаДанными) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Создаем объект записи XML
	ЗаписьXML = Новый ЗаписьXML;
	
	Попытка
		ЗаписьXML.ОткрытьФайл(ИмяФайлаОбменаДанными);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ЗаписьXML;
	
КонецФункции

// функция создает XML чтение по узлу обмена
Функция СоздатьXMLЧтениеДляОбменаДанными(УзелОбмена, Знач ИмяФайлаОбменаДанными)
	
	НаличиеФайлаОбмена = ПроверитьНаличиеФайлаОбмена(ИмяФайлаОбменаДанными);
	Если Не НаличиеФайлаОбмена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Производим попытку открытия файла
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайлаОбменаДанными);
		Возврат ЧтениеXML;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Процедура записывает изменения узла информационной база в файл в темповом каталоге
Процедура ЗаписатьСообщенияСИзмененеиямиДляУзла(СтруктураНастроекОбменаДанными, Знач ИмяФайлаОбменаДанными)

	УзелОбмена = СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы;
	
	СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;
 	
	Попытка
				
	    ЭтоРИБ = ОпределитьПоУзлуОбменаЭтоРИБ(УзелОбмена); 
		
		ЗаписьXML = СоздатьXMLЗаписьДляОбменаДанными(УзелОбмена, ИмяФайлаОбменаДанными);
		Если ЗаписьXML = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		#Если Клиент Тогда
			Состояние(НСтр("ru='Запись изменений для узла ""';uk='Запис змін для вузла ""'") + УзелОбмена.Наименование + """ ...");
		#КонецЕсли
	
		ДобавитьИнформациюВПротокол("Начало записи изменений в файл обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
		
		Если ЭтоРИБ Тогда
			
			// Создаем новое сообщение
			ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();

			ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
			
			// для РИБ изменения в информационной базе
			ПланыОбмена.ЗаписатьИзменения(ЗаписьСообщения, СтруктураНастроекОбменаДанными.ДанныеНастройки.КоличествоЭлементовВТранзакцииНаВыгрузкуДанных);
			
			// Завершаем запись сообщения
			ЗаписьСообщения.ЗакончитьЗапись();
				
			ЗаписьXML.Закрыть();
			
			СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Истина;
		Иначе
			
			ЭтотУзелОбмена = ПолучитьТекущийУзелИБ(УзелОбмена).ПолучитьОбъект();
						
			// план обмена самостоятельно читает изменения от узла
			СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = ЭтотУзелОбмена.ВыгрузитьИзмененияДанныхДляУзла(УзелОбмена, 
				СтруктураНастроекОбменаДанными.ДанныеНастройки.КоличествоЭлементовВТранзакцииНаВыгрузкуДанных, ЗаписьXML);
			
		КонецЕсли;
		
		ДобавитьИнформациюВПротокол("Окончание записи изменений в файл обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
				
	Исключение
		
		// в режиме клиента выводим информацию об ошибке
		СообщитьИнформациюОбОшибкеОбмена("Ошибка при записи изменений при обмене: " + ОписаниеОшибки(), СтруктураНастроекОбменаДанными);
		СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура читает файл изменений от узла РИБ
Процедура ЗагрузитьCообщениеСИзменениямиОтРИБУзла(СтруктураНастроекОбменаДанными, ЧтениеXML)
	
	СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Истина;

	// Загрузка из найденного файла
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);

	Попытка
		ПланыОбмена.ПрочитатьИзменения(ЧтениеСообщения, СтруктураНастроекОбменаДанными.ДанныеНастройки.КоличествоЭлементовВТранзакцииНаЗагрузкуДанных);
		
		ЧтениеСообщения.ЗакончитьЧтение();
		ЧтениеXML.Закрыть();
		
	Исключение
		
		СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Ложь;
		СообщитьИнформациюОбОшибкеОбмена("Ошибка при чтении изменений при обмене РИБ: " + ОписаниеОшибки(), СтруктураНастроекОбменаДанными);
		Возврат;
                        
	КонецПопытки;
	
КонецПроцедуры

// Процедура получения сообщения обмена данными
// Получает сообщение с новыми данными для этого узла и загружает данные
//
Процедура ЗагрузитьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбменаДанными, Знач ИмяФайлаОбменаДанными)
			
	СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Ложь;
	
	УзелОбмена = СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы;
		
	ЭтоРИБ = ОпределитьПоУзлуОбменаЭтоРИБ(УзелОбмена);

	Попытка
        					
		ЧтениеXML = СоздатьXMLЧтениеДляОбменаДанными(УзелОбмена, ИмяФайлаОбменаДанными);
		
		Если ЧтениеXML = Неопределено Тогда
			// не удалось создать объект чтения данных - ничего не делаем
			СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Ложь;
			Возврат;
		КонецЕсли;
		
		#Если Клиент Тогда
			Состояние(НСтр("ru='Чтение изменений от узла ""';uk='Читання змін від вузла ""'") + УзелОбмена.Наименование + """ ...");
		#КонецЕсли
	
		ДобавитьИнформациюВПротокол("Начало чтения изменений из файла обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
		Если ЭтоРИБ Тогда
			
			ЗагрузитьCообщениеСИзменениямиОтРИБУзла(СтруктураНастроекОбменаДанными, ЧтениеXML);
			            			
		Иначе
			
			ЭтотУзелОбмена = ПолучитьТекущийУзелИБ(УзелОбмена).ПолучитьОбъект();
			// план обмена самостоятельно читает изменения от узла
			СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = ЭтотУзелОбмена.ЗагрузитьИзмененияДанныхДляУзла(УзелОбмена, 
				СтруктураНастроекОбменаДанными.ДанныеНастройки.КоличествоЭлементовВТранзакцииНаЗагрузкуДанных, ЧтениеXML);
			
		КонецЕсли;
		
		ДобавитьИнформациюВПротокол("Окончание чтения изменений из файла обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
	Исключение
		
		СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Ложь;
		// в режиме клиента выводим информацию об ошибке
		СообщитьИнформациюОбОшибкеОбмена("Ошибка при чтении изменений из файла обмена." + Символы.ПС + ОписаниеОшибки(), 
			СтруктураНастроекОбменаДанными);
				
	КонецПопытки;
	
КонецПроцедуры

// функция возвращает имя плана обмена по узлу обмена
Функция ПолучитьИмяПланаОбмена(УзелОбмена) Экспорт
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат "";
	КонецЕсли;
	
	МетаданныеУзла = УзелОбмена.Метаданные();
	Возврат МетаданныеУзла.Имя;
    	
КонецФункции

// функция возвращает узел текущей ИБ по узлу обмена
Функция ПолучитьТекущийУзелИБ(УзелОбмена) Экспорт
	
	ИмяПланаОбмена = ПолучитьИмяПланаОбмена(УзелОбмена);
	
	Если НЕ ЗначениеЗаполнено(ИмяПланаОбмена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПланыОбмена[ИмяПланаОбмена].ЭтотУзел();
	
КонецФункции

// функция по узлу обмена определяет это база РИБ или нет
Функция ОпределитьПоУзлуОбменаЭтоРИБ(УзелОбмена) Экспорт
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МетаданныеПланаОбмена = УзелОбмена.Метаданные();
	Возврат МетаданныеПланаОбмена.РаспределеннаяИнформационнаяБаза;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// ВЫБОР КАТАЛОГОВ И ФАЙЛОВ ОБМЕНА ДАННЫМИ

#Если Клиент Тогда

// функция возвращает имя выбранного пользователем файла для обмена информацией
Функция ВыбратьФайлДляОбмена(Знач НачальныйКаталог, Знач ИмяФайлаПоУмолчанию = "") Экспорт
	
	ДиалогВыбора = РаботаСФайлами.ПолучитьДиалогВыбораФайлов(Ложь, НачальныйКаталог);
	ДиалогВыбора.Фильтр						= "Файл данных(*.xml)|*.xml|Архив с данными(*.zip)|*.zip|*.*|*.*";
	ДиалогВыбора.Заголовок 					= "Выбор файла обмена информацией";
	ДиалогВыбора.ПредварительныйПросмотр	= Ложь;
	ДиалогВыбора.Расширение             	= "xml";
	ДиалогВыбора.ИндексФильтра          	= 0;
	
	Если Не ПустаяСтрока(ИмяФайлаПоУмолчанию) Тогда
		ДиалогВыбора.ПолноеИмяФайла 		= ИмяФайлаПоУмолчанию;
	КонецЕсли;
	
	РезультатВыбора = ДиалогВыбора.Выбрать();
	
	Если РезультатВыбора Тогда
		Возврат СокрЛП(ДиалогВыбора.ПолноеИмяФайла);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// функция возвращает выбранный пользователем каталог для выгрузки данных
Функция ВернутьВыбранныйПользователемКаталогДляОбмена(КаталогОбмена = "")
	
	// хотят только изменения выгрузить
	РезультатВыбора = РаботаСФайлами.ВыбратьКаталог(КаталогОбмена, "Выбор каталога обмена данными");
	Если Не РезультатВыбора Тогда
		КаталогОбмена = "";
	Иначе
			
		// надо проверить наличие каталога на диске
		НаличиеКаталога = ПроверитьНаличиеКаталога(КаталогОбмена, Истина);
			
		// выбран каталог которого нет на диске
		Если Не НаличиеКаталога Тогда
				
			КаталогОбмена = "";
				
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат КаталогОбмена;
	
КонецФункции

#КонецЕсли

// Функция запрашивает у пользователя ввести имя файла для обмена данными либо имя каталога для выгрузки данных
Функция ОпроситьИмяКаталогаОбменаДанными(Знач ТекстИнформационногоСообщения = "",
	СтруктураНастроекОбменаДанными, КаталогОбмена)
	
	Если Не ПустаяСтрока(ТекстИнформационногоСообщения) Тогда
		
		СообщитьИнформациюОбОбмене(ТекстИнформационногоСообщения, СтруктураНастроекОбменаДанными);
		
	КонецЕсли;
	
	// не задан каталог обмена данными
	Если НЕ СтруктураНастроекОбменаДанными.РучнойРежимЗапуска Тогда
		Возврат Ложь;
	КонецЕсли;
		
	// запуск в интерактивном режиме
	#Если Клиент Тогда	
							
		КаталогОбмена = ВернутьВыбранныйПользователемКаталогДляОбмена(КаталогОбмена);
	
	#Иначе
		Возврат Ложь;
	#КонецЕсли

	Возврат Истина;
	
КонецФункции


// АРХИВАЦИЯ
///////////////////////////////////////////////////////////////////////////////

// функция архивирует файл
Функция ЗаархивироватьФайл(Знач ИмяИсходногоФайла, СтруктураНастроекОбменаДанными)
	
	Попытка
		ДобавитьИнформациюВПротокол("Начало сжатия файла обмена " + СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, СтруктураНастроекОбменаДанными.ДанныеПротокола);
		
		Архиватор = Новый ЗаписьZipФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, СтруктураНастроекОбменаДанными.ДанныеНастройки.ПарольНаОтправку, "Файл обмена данными");
		Архиватор.Добавить(ИмяИсходногоФайла);
		Архиватор.Записать();
		
		ДобавитьИнформациюВПротокол("Окончание сжатия файла обмена данными " + ИмяИсходногоФайла + "." + Символы.ПС +
			"Данные файла обмена помещены в файл " + СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, СтруктураНастроекОбменаДанными.ДанныеПротокола);
	Исключение
		
		СообщитьИнформациюОбОшибкеОбмена("Ошибка при сжатии данных файла обмена: " + ИмяИсходногоФайла + Символы.ПС + ОписаниеОшибки(), 
			СтруктураНастроекОбменаДанными);
		Возврат Ложь;	
		
    КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// функция разархивирует файл
Функция РазархивироватьФайл(СтруктураНастроекОбменаДанными) 
	
	КаталогДляРаспаковки = КаталогВременныхФайлов();
	
	ИмяРазархивированногоФайла = "";
	
	Попытка
		ДобавитьИнформациюВПротокол("Начало распаковки файла обмена данными " + СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений, 
			СтруктураНастроекОбменаДанными.ДанныеПротокола);
		
		Архиватор = Новый ЧтениеZipФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений, СтруктураНастроекОбменаДанными.ДанныеНастройки.ПарольНаПрием);
		
		Если Архиватор.Элементы.Количество() > 0 Тогда
			
			Архиватор.Извлечь(Архиватор.Элементы[0], КаталогДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			ИмяРазархивированногоФайла = РаботаСФайлами.ПолучитьИмяФайла(КаталогДляРаспаковки, Архиватор.Элементы[0].Имя);
			
		Иначе
			
			ИмяРазархивированногоФайла = "";	
			
		КонецЕсли;

		Архиватор.Закрыть();
	
	Исключение
		
		СообщитьИнформациюОбОшибкеОбмена("Ошибка при распаковке данных из архива : " + ОписаниеОшибки(), СтруктураНастроекОбменаДанными);
		Возврат "";
							
	КонецПопытки;
	
	ДобавитьИнформациюВПротокол("Окончание распаковки файла обмена данными " + СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений + ".
		|Распакованные данные помещены в файл " + ИмяРазархивированногоФайла, СтруктураНастроекОбменаДанными.ДанныеПротокола);
	
	Возврат ИмяРазархивированногоФайла;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
//	ОБМЕН ИНФОРМАЦИЕЙ

// Процедура производит чтение данных
Процедура ВыполнитьЗагрузкуДанныхИзФайлаОбмена(СтруктураНастроекОбменаДанными)
	
	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Загрузка данных из файла обмена", 5);
	
	СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Ложь;
	
	// ЧТЕНИЕ
	Если НЕ СтруктураНастроекОбменаДанными.ПроизводитьЧтениеДанных Тогда
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Загрузка данных из файла обмена", 40);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений) Тогда
		
		СообщитьИнформациюОбОбмене("Не найден входящий файл обмена данными.", СтруктураНастроекОбменаДанными);
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Загрузка данных из файла обмена", 40);
		Возврат;
		
	КонецЕсли;
		
	// если расширение файла для чтения ZIP то его нужно сначала разархивировать
	РасширениеФайлаОбмена = РаботаСФайлами.ПолучитьРасширениеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений);
	ЧтениеИзАрхива = Врег(РасширениеФайлаОбмена) = "ZIP";
			
	Если ЧтениеИзАрхива Тогда
		ИмяВременногоФайла = РазархивироватьФайл(СтруктураНастроекОбменаДанными);										
	Иначе
		ИмяВременногоФайла = СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений;				
	КонецЕсли;
			
	// читаем сообщения с изменененями
	Если ИмяВременногоФайла = "" Тогда
		
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Загрузка данных из файла обмена", 40);
		Возврат;
		
	КонецЕсли;
		
	ЗагрузитьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбменаДанными, ИмяВременногоФайла);
					
	// сообщим о результатах чтения данных
	Если СтруктураНастроекОбменаДанными.РезультатЧтенияДанных Тогда
					
		СообщитьИнформациюОбОбмене("Чтение данных из файла обмена успешно завершено.", СтруктураНастроекОбменаДанными);
								
	Иначе
					
		СообщитьИнформациюОбОшибкеОбмена("Чтение данных из файла обмена завершено с ошибками!", СтруктураНастроекОбменаДанными);
					
	КонецЕсли;
			
	// временный файл откуда считывались данные в любом случае не нужен	
	Если ЧтениеИзАрхива Тогда
				
		ВыполнитьУдалениеФайла(ИмяВременногоФайла, СтруктураНастроекОбменаДанными);	
				
	КонецЕсли;
			
	// запоминаем последнюю дату чтения данных
	СтруктураНастроекОбменаДанными.ДатаПоследнейЗагрузки = ТекущаяДата();
	
	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Загрузка данных из файла обмена", 40);
	
КонецПроцедуры

// Процедура производит запись данных
Процедура ВыполнитьВыгрузкуДанныхВФайлОбмена(СтруктураНастроекОбменаДанными)
	
	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Выгрузка данных в файл обмена", 5);
	
	СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;
	
	// ЗАПИСЬ
	Если Не СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных Тогда
		
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Выгрузка данных в файл обмена", 40);
		Возврат;
		
	КонецЕсли;
		
	Если ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений) Тогда
		
		СообщитьИнформациюОбОбмене("Выгрузка изменений из текущей информационной базы НЕ произведена!", СтруктураНастроекОбменаДанными);
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Выгрузка данных в файл обмена", 40);
		Возврат;
		
	КонецЕсли;
			
	// если идет архивирование файла, то надо сначала в темповый файл записать изменения а потом их зархивировать
	Если СтруктураНастроекОбменаДанными.ДанныеНастройки.ВыполнятьАрхивациюФайловОбмена Тогда
		ИмяФайлаДляЗаписиИзменений = ПолучитьИмяВременногоФайла(".xml");				
	Иначе
		ИмяФайлаДляЗаписиИзменений = СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений;				
	КонецЕсли;
	
	// записываем изменения
	ЗаписатьСообщенияСИзмененеиямиДляУзла(СтруктураНастроекОбменаДанными, ИмяФайлаДляЗаписиИзменений);
			
	// если надо то архивируем
	Если СтруктураНастроекОбменаДанными.РезультатЗаписиДанных
		И СтруктураНастроекОбменаДанными.ДанныеНастройки.ВыполнятьАрхивациюФайловОбмена Тогда
				
		СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = ЗаархивироватьФайл(ИмяФайлаДляЗаписиИзменений, СтруктураНастроекОбменаДанными);
		
		Если СтруктураНастроекОбменаДанными.РезультатЗаписиДанных Тогда 
			
			// грохаем временный файл
			ВыполнитьУдалениеФайла(ИмяФайлаДляЗаписиИзменений, СтруктураНастроекОбменаДанными);
			
		КонецЕсли;
								
	КонецЕсли;
			
	// сообщим о результатах чтения данных
	Если СтруктураНастроекОбменаДанными.РезультатЗаписиДанных Тогда
					
		СообщитьИнформациюОбОбмене("Запись изменений текущей информационной базы в файл обмена завершилась успешно.", СтруктураНастроекОбменаДанными);
								
	Иначе
					
		СообщитьИнформациюОбОшибкеОбмена("Запись изменений текущей информационной базы в файл обмена завершилась с ошибками!", СтруктураНастроекОбменаДанными);
					
	КонецЕсли;
					
	СтруктураНастроекОбменаДанными.ДатаПоследнейВыгрузки = ТекущаяДата();
	
	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Выгрузка данных в файл обмена", 40);
	
КонецПроцедуры

// функция возвращает дату файла последнего обмена для настройки обмена
Функция ПолучитьДатуФайлаПоследнейЗагрузкиДанных(СсылкаНастройкиОбмена)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПараметрыОбменаДанными.ДатаПоследнегоФайлаОбмена
				   |ИЗ
	               |	РегистрСведений.ПараметрыОбменаДанными КАК ПараметрыОбменаДанными
				   |	ГДЕ (ПараметрыОбменаДанными.НастройкаОбменаДанными = &Ссылка)";
				   
	Запрос.УстановитьПараметр("Ссылка", СсылкаНастройкиОбмена); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДатаПоследнегоФайлаОбмена;
	Иначе
		Возврат Неопределено;		
	КонецЕсли;
	
КонецФункции

// Процедура по адресу FTP обмена получает имя сервера и имя каталога обмена
Процедура ПолучитьИмяСервераИИмяКаталогаОбмена(Знач ПолныйFTPАдрес, ИмяСервера, ИмяКаталога)
	
	АдресОбмена = НормализоватьFTPАдрес(ПолныйFTPАдрес);
	
	// принцип получения адреса такой, все что до первой черты / или \ - это имя сервера, потом каталог
	АдресОбмена = СтрЗаменить(АдресОбмена, "\", "/");
	
	ПозицияПрямогоСлеша = Найти(АдресОбмена, "/");
	
	Если ПозицияПрямогоСлеша = 0 Тогда
		
		ИмяСервера = АдресОбмена;
		ИмяКаталога = "";
		
		
	Иначе
		
		ИмяСервера = Сред(АдресОбмена, 1, ПозицияПрямогоСлеша - 1);
		ИмяКаталога = Сред(АдресОбмена, ПозицияПрямогоСлеша);
		
		// последний должен быть слеш у имени каталога
		Если Сред(ИмяКаталога, СтрДлина(ИмяКаталога)) <> "/" Тогда
			
			ИмяКаталога = ИмяКаталога + "/";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// функция выполняет FTP подключение к серверу
Функция ВыполнитьFTPПодключениеКСерверу(Знач ИмяFTPСервера, НастройкиОбмена, 
	ДанныеПротокола = "", Знач ВывестиИнформациюВОкноСообщений = Истина)       
	
	#Если Клиент Тогда
		Состояние("Выполняется подключение к FTP: " + ИмяFTPСервера);
	#КонецЕсли
    
	Попытка
		
		// если есть пользователь прокси сервера, то подключаемся чере прокси
		Если Не ПустаяСтрока(НастройкиОбмена.ПользовательПроксиFTP)
			ИЛИ НЕ ПустаяСтрока(НастройкиОбмена.ПротоколПроксиFTP)
			ИЛИ НЕ ПустаяСтрока(НастройкиОбмена.СерверПроксиFTP) Тогда
			
			ИмяПротокола = Врег(СокрЛП(НастройкиОбмена.ПротоколПроксиFTP));
			Если ИмяПротокола <> "" Тогда
				
				Если НЕ (ИмяПротокола = "HTTP" ИЛИ ИмяПротокола = "HTTPS" ИЛИ ИмяПротокола = "FTP") Тогда
					
					СообщитьПростуюИнформацию("Указан не допустимый для использования протокол. 
						|Допустимые для использования протоколы прокси-сервера: http, https и ftp.", 
						ДанныеПротокола, ВывестиИнформациюВОкноСообщений);
					Возврат Неопределено;
						
				КонецЕсли;
				
			КонецЕсли;			
			
			ПроксиСервер = Новый ИнтернетПрокси;
			ПроксиСервер.Пользователь = НастройкиОбмена.ПользовательПроксиFTP;
			ПроксиСервер.Пароль = НастройкиОбмена.ПарольПроксиFTP;
			
			ПроксиСервер.Установить(НастройкиОбмена.ПротоколПроксиFTP, НастройкиОбмена.СерверПроксиFTP, НастройкиОбмена.ПортПроксиFTP); 
			
			Соединение = Новый FTPСоединение(ИмяFTPСервера, НастройкиОбмена.ПортFTPСоединения, 
				НастройкиОбмена.ПользовательFTPСоединения, НастройкиОбмена.ПарольFTPСоединения, ПроксиСервер);
			
		Иначе
			
			Соединение = Новый FTPСоединение(ИмяFTPСервера, НастройкиОбмена.ПортFTPСоединения, 
				НастройкиОбмена.ПользовательFTPСоединения, НастройкиОбмена.ПарольFTPСоединения);
						
		КонецЕсли;			
			
	Исключение
			
		// ошибка при подключении к ftp
		СообщитьПростуюИнформацию("Ошибка при подключении к FTP : " + ИмяFTPСервера + " ! " + ОписаниеОшибки(), 
			ДанныеПротокола, ВывестиИнформациюВОкноСообщений);
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

// функция проверяет наличие катаога на FTP сервере
Функция ПроверитьНаличиеКаталогаНаFTPСервере(Соединение, Знач ИмяКаталогаСервера, 
	ДанныеПротокола = "", Знач ВывестиИнформациюВОкноСообщений = Истина)
	
	Если ПустаяСтрока(ИмяКаталогаСервера) Тогда
		Возврат Истина;
	КонецЕсли;
	
	//надо сначала проверить что сам каталог доступа есть
	МассивНайденныхКаталогов = Соединение.НайтиФайлы(ИмяКаталогаСервера, "");
	Для Каждого НайденныйКаталог Из МассивНайденныхКаталогов Цикл
		
		// если не каталог - то дальше ищем
		Если НЕ НайденныйКаталог.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		// большие и маленькие буквы считаются различными
		Если НайденныйКаталог.ПолноеИмя + "/" <> ИмяКаталогаСервера Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЦикла;
	
	// если не найден каталог для обмена
	СообщитьПростуюИнформацию("Не найден FTP каталог обмена информацией: " + ИмяКаталогаСервера, 
		ДанныеПротокола, ВывестиИнформациюВОкноСообщений);
		
	Возврат Ложь;
	
КонецФункции

// функция проверяет настройки FTP подключения
Функция ПроверитьНастройкиFTPПодключения(ДанныеНастройки, ДанныеПротокола = "", Знач ВывестиИнформациюВОкноСообщений = Истина,
	ИмяКаталогаСервера = "", ИмяFTPСервера = "" , Соединение = Неопределено) Экспорт
	
	// нужно по полному имени получить имя сервера и имя каталога
	ПолучитьИмяСервераИИмяКаталогаОбмена(ДанныеНастройки.FTPАдресОбмена, ИмяFTPСервера, ИмяКаталогаСервера);
	
	// если не задано имя сервера или каталога то невозможно обмениваться данными
	Если ПустаяСтрока(ИмяFTPСервера) Тогда
		
		СообщитьПростуюИнформацию("Не задан сервер обмена информацией через FTP: " + ДанныеНастройки.FTPАдресОбмена, 
			ДанныеПротокола, ВывестиИнформациюВОкноСообщений);

		Возврат Ложь;
		
	КонецЕсли;
	
	// соединение
	Соединение = ВыполнитьFTPПодключениеКСерверу(ИмяFTPСервера, ДанныеНастройки, ДанныеПротокола, ВывестиИнформациюВОкноСообщений);
	Если Соединение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// каталог проверяем
	НаличиеКаталога = ПроверитьНаличиеКаталогаНаFTPСервере(Соединение, ИмяКаталогаСервера, ДанныеПротокола, ВывестиИнформациюВОкноСообщений);
	Если Не НаличиеКаталога Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// функция формирует тело письма обмена между узлами
Функция СформироватьТелоПисьмаОбменаМеждуУзлами(УзелОтправитель, УзелПриемник)
	
	ИмяПланаОбмена = ПолучитьИмяПланаОбмена(УзелОтправитель);
	
	ТелоПисьма = 
		"	Обмен данными по плану обмена: " + ИмяПланаОбмена + "
		|	Узел отправитель: " + СокрЛП(УзелОтправитель.Код) + "
		|	Узел получатель: " + СокрЛП(УзелПриемник.Код);
	
	Возврат ТелоПисьма; 
	
КонецФункции


// СЛУЖЕБНЫЕ ФУНКЦИЯ ВЫПОЛНЯЮЩИЕСЯ ПЕРЕД ОБМЕНОМ
///////////////////////////////////////////////////////////////////////////////

// Процедура подготавливает обмен через файловый ресурс по настройке обмена данными
Процедура ПодготовитьОбменЧерезФайловыйРесурс(СтруктураНастроекОбменаДанными)
	
	//Алгоритм получения файлов обмена:

	//Случай автоматического запуска обмена:
	//•	Проверка доступности указанного в настройках каталога. Если каталог не доступен (не найден), то обмен не начинается
	//•	Проверка наличия файла обмена от узла информационной базы
	//•	После внесений изменений в информационную базу файл обмена удаляется

	//Случай запуска обмена в ручном режиме:
	//•	Проверка доступности указанного в настройках каталога. 
	//o	Если искомый каталог доступен и файл обмена в нем присутствует, то обмен происходит точно так же как и при автоматическом запуске
	//o	Если каталог не доступен или не найден, либо не найден файл обмена данными то пользователю выдается соответствующее сообщение. Предлагается выбрать файл для обмена самостоятельно.
	
	ИтоговоеИмяФайлаОбменаДанными = "";
	СтруктураНастроекОбменаДанными.КаталогПроведенияОбменаДанными = "";
	
	КаталогОбменаДанными = СтруктураНастроекОбменаДанными.ДанныеНастройки.КаталогОбменаИнформацией;
	
	ПроверкаНаличияКаталога = ПроверитьНаличиеКаталога(КаталогОбменаДанными, Истина);
	Если НЕ ПроверкаНаличияКаталога Тогда
		
		// не задан каталог обмена данными
		Если ПустаяСтрока(КаталогОбменаДанными) Тогда
			ТекстСообщенияПользователю = "Не задан каталог обмена информацией";
		Иначе
			ТекстСообщенияПользователю = "Не найден каталог обмена информацией: " + КаталогОбменаДанными;
		КонецЕсли;
			
		РезультатВыбора = ОпроситьИмяКаталогаОбменаДанными(ТекстСообщенияПользователю, СтруктураНастроекОбменаДанными, 
			КаталогОбменаДанными);
			
		Если Не РезультатВыбора Тогда
			Возврат;
		КонецЕсли;
	
	КонецЕсли;	
		
	// каталог есть, поверяем наличие файла обмена, если нужно данные считать
	Если СтруктураНастроекОбменаДанными.ПроизводитьЧтениеДанных Тогда
		
		ИмяФайлаШаблонаОбмена = СформироватьИмяФайлаОбменаМеждуУзлами(СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы, СтруктураНастроекОбменаДанными.ТекущийУзелПланаОбмена, "");
		ИмяФайлаПоУмолчаниюXML = ИмяФайлаШаблонаОбмена + ".xml";
		ИмяФайлаПоУмолчаниюZIP = ИмяФайлаШаблонаОбмена + ".zip";
		
		ИтоговоеИмяФайлаОбменаДаннымиXML = РаботаСФайлами.ПолучитьИмяФайла(КаталогОбменаДанными, ИмяФайлаПоУмолчаниюXML);
		НаличиеФайлаОбменаXML = ПроверитьНаличиеФайлаОбмена(ИтоговоеИмяФайлаОбменаДаннымиXML);
				
		ИтоговоеИмяФайлаОбменаДаннымиZIP = РаботаСФайлами.ПолучитьИмяФайла(КаталогОбменаДанными, ИмяФайлаПоУмолчаниюZIP);
		НаличиеФайлаОбменаZIP = ПроверитьНаличиеФайлаОбмена(ИтоговоеИмяФайлаОбменаДаннымиZIP);
				
		Если НЕ НаличиеФайлаОбменаXML И НЕ НаличиеФайлаОбменаZIP Тогда
				
			// каталог есть, но файлов в нем, удовлетворяющих условиям поиска нет
			// значит просто файл не нашли, вот и все.
								
		ИначеЕсли НаличиеФайлаОбменаXML И НаличиеФайлаОбменаZIP Тогда
			// сразу оба файла...
			// берем последний по времени
			ВремяФайлаXML = РаботаСФайлами.ПолучитьДатуФайла(ИтоговоеИмяФайлаОбменаДаннымиXML);
			ВремяФайлаZIP = РаботаСФайлами.ПолучитьДатуФайла(ИтоговоеИмяФайлаОбменаДаннымиZIP);
					
			Если ВремяФайлаXML >= ВремяФайлаZIP Тогда
				ИтоговоеИмяФайлаОбменаДанными = ИтоговоеИмяФайлаОбменаДаннымиXML;	
			Иначе
				ИтоговоеИмяФайлаОбменаДанными = ИтоговоеИмяФайлаОбменаДаннымиZIP;
			КонецЕсли;
					
			// сообщаем о том с каким файлом ведется обмен		
			СообщитьИнформациюОбОбмене("В каталоге обмена имеются 2 файла обмена информацией: " + ИмяФайлаПоУмолчаниюXML + ", " + ИмяФайлаПоУмолчаниюXML, 
				СтруктураНастроекОбменаДанными);
			// то что выбрали для обмена
			СообщитьИнформациюОбОбмене("Время записи/изменения файла : " + ИтоговоеИмяФайлаОбменаДанными + " больше. Он выбран для обмена данными.", 
				СтруктураНастроекОбменаДанными);
					
		ИначеЕсли НаличиеФайлаОбменаXML Тогда	
			// есть только XML файл
			ИтоговоеИмяФайлаОбменаДанными = ИтоговоеИмяФайлаОбменаДаннымиXML; 
					
		ИначеЕсли НаличиеФайлаОбменаZIP Тогда	
			// есть только ZIP
			ИтоговоеИмяФайлаОбменаДанными = ИтоговоеИмяФайлаОбменаДаннымиZIP;
					
		КонецЕсли; // наличие файлов приема
				
	КонецЕсли;	// производить прием сообщений
	
	// ничего не указано
	Если ПустаяСтрока(ИтоговоеИмяФайлаОбменаДанными) 
		И ПустаяСтрока(КаталогОбменаДанными) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИнициализироватьФормуХодаОбработки(СтруктураНастроекОбменаДанными, "Подготовка перед обменом данными", 5);
	
	// если задана переменная ИтоговоеИмяФайлаОбменаДанными тогда хотим и изменение получить и данные выгрузить
	Если Не ПустаяСтрока(ИтоговоеИмяФайлаОбменаДанными) Тогда
		
		// получаем дату последнего файла обмена
		СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена = РаботаСФайлами.ПолучитьДатуФайла(ИтоговоеИмяФайлаОбменаДанными);
		СтруктураНастроекОбменаДанными.ИмяВходящегоФайлаОбмена = ИтоговоеИмяФайлаОбменаДанными; 
		
		// копируем файл во временный каталог
		СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений = ВерутьИмяВременногоФайлаЧтенияДанных(СтруктураНастроекОбменаДанными, 
			(Врег(РаботаСФайлами.ПолучитьРасширениеФайла(ИтоговоеИмяФайлаОбменаДанными)) = "ZIP"));
				        		
		УдачноеКопирование = ВыполнитьКопированиеФайла(ИтоговоеИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений, Истина, 
			СтруктураНастроекОбменаДанными);
			
		Если Не УдачноеКопирование Тогда
			СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений	= "";			
		КонецЕсли;	
		
		ИмяФайла = "";
		РаботаСФайлами.ПолучитьКаталогИИмяФайла(ИтоговоеИмяФайлаОбменаДанными, КаталогОбменаДанными, ИмяФайла);
		
	КонецЕсли;
	
	СтруктураНастроекОбменаДанными.НеобходимостьЗаписиОтветногоФайлаОбмена = СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных;
	
	// весь обмен производим во временном каталоге
	СтруктураНастроекОбменаДанными.КаталогПроведенияОбменаДанными = КаталогОбменаДанными; 
	
КонецПроцедуры

// Процедура подготавливает обмен через FTP ресурс по настройке обмена данными
Процедура ПодготовитьОбменЧерезFTPРесурс(СтруктураНастроекОбменаДанными)
	
	Перем Соединение, ИмяFTPСервера, ИмяКаталогаСервера;
	
	ПроверитьНастройкиПодключения = ПроверитьНастройкиFTPПодключения(СтруктураНастроекОбменаДанными.ДанныеНастройки, 
		СтруктураНастроекОбменаДанными.ДанныеПротокола,	СтруктураНастроекОбменаДанными.ВывестиИнформациюВОкноСообщений, 
		ИмяКаталогаСервера, ИмяFTPСервера, Соединение);
		
	Если Не ПроверитьНастройкиПодключения Тогда
		Возврат;
	КонецЕсли;
		
	СтруктураНастроекОбменаДанными.НеобходимостьЗаписиОтветногоФайлаОбмена = СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных;
		
	Если СтруктураНастроекОбменаДанными.ПроизводитьЧтениеДанных Тогда
		
		// ищем файлы по маске с расширением Message_A_B .xml или .zip
		ШаблонИмениФайла = СформироватьИмяФайлаОбменаМеждуУзлами(СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы, 
			СтруктураНастроекОбменаДанными.ТекущийУзелПланаОбмена, "") + ".*";
		
		МассивНайденныхФайлов = Соединение.НайтиФайлы(ИмяКаталогаСервера, ШаблонИмениФайла);
		
		СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена = ПолучитьДатуФайлаПоследнейЗагрузкиДанных(СтруктураНастроекОбменаДанными.ДанныеНастройки.Ссылка);
				
		Для Каждого ФайлФТП Из МассивНайденныхФайлов Цикл
			
			ТекущийФайлДляОбмена = ФайлФТП;
			
			// проверяем нужное расширение, то что это фай а не каталог, запоминаем последнюю дату файла
			Если НЕ( (Врег(ТекущийФайлДляОбмена.Расширение) = ".ZIP") ИЛИ (Врег(ТекущийФайлДляОбмена.Расширение) = ".XML") ) Тогда
				Продолжить;
			КонецЕсли;
			
			Если (ТекущийФайлДляОбмена.ЭтоФайл() = Ложь) Тогда
				Продолжить;
			КонецЕсли;
			
			Если (ТекущийФайлДляОбмена.Размер() = 0) Тогда
				Продолжить;
			КонецЕсли;
			
			// с датами определяемся
			ВремяИзмененияТекущегоФайла = ТекущийФайлДляОбмена.ПолучитьВремяИзменения();
			
			//дата последнего файла обмена должна быть меньше текущего файла обмена
			Если (СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена <> Неопределено) 
				И (СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена > ВремяИзмененияТекущегоФайла) Тогда
				
				Продолжить;
				
			КонецЕсли;			
			
			// проверим что бы размер файла не превосходил ограничения по размеру
			Если (СтруктураНастроекОбменаДанными.ДанныеНастройки.МаксимальныйРазмерОтправляемогоПолучаемогоПакетаЧерезFTP > 0) 
				И (ТекущийФайлДляОбмена.Размер() / 1024) > СтруктураНастроекОбменаДанными.ДанныеНастройки.МаксимальныйРазмерОтправляемогоПолучаемогоПакетаЧерезFTP Тогда
				
				// файл не удовлетфоряет ограничениям по размеру для получения через FTP
				Продолжить;	
						
			КонецЕсли;			
			
			ФайлДляОбмена = ТекущийФайлДляОбмена;
			СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена = ВремяИзмененияТекущегоФайла; 
			СтруктураНастроекОбменаДанными.ИмяВходящегоФайлаОбмена = ИмяFTPСервера + ФайлФТП.ПолноеИмя;
			
		КонецЦикла;	
			
		//надо переместить нужный файл в каталог для обмена данными
		Если ФайлДляОбмена <> Неопределено Тогда
			
			СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений = ВерутьИмяВременногоФайлаЧтенияДанных(СтруктураНастроекОбменаДанными, 
				(Врег(ФайлДляОбмена.Расширение) = ".ZIP"));
			
			Попытка
				// генерируем имя файла для чтения изменений и закачиваем этот файл
				Соединение.Получить(ФайлДляОбмена.ПолноеИмя, СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений);	
				
			Исключение
			
				СообщитьИнформациюОбОшибкеОбмена("Ошибка при копировании файла c FTP ресурса: " + ОписаниеОшибки(), СтруктураНастроекОбменаДанными);
				СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений = "";
							
			КонецПопытки;
				
		Иначе
			
			Если (МассивНайденныхФайлов.Количество() > 0)
				И ЗначениеЗаполнено(СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена) Тогда
				
				//файлы то есть но ни один не подходит
				СообщитьИнформациюОбОбмене("Возможно дата файлов обмена не превосходит дату последнего файла обмена данными через FTP: " + Строка(СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена), 
					СтруктураНастроекОбменаДанными);
				
			КонецЕсли;
			
			СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений = "";		
		КонецЕсли;
		
	КонецЕсли; // надо читать данные с FTP	
	
	Если СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных
		ИЛИ Не ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений) Тогда

		ИнициализироватьФормуХодаОбработки(СтруктураНастроекОбменаДанными, "Подготовка перед обменом данными", 5);
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура подготавливает обмен через почтовый ресурс по настройке обмена данными
Процедура ПодготовитьОбменЧерезПочтовыйРесурс(СтруктураНастроекОбменаДанными)
	
	ТекстОшибок = "";
	
	// обмен через почту может быть только в режиме работы клиента
	#Если Клиент Тогда
		
	#Иначе
		СообщитьИнформациюОбОбмене("Работа с почтой может быть произведена только в режиме клиентского подключения!", СтруктураНастроекОбменаДанными);
		Возврат;	
	#КонецЕсли
	
	Если НЕ ЗначениеЗаполнено(СтруктураНастроекОбменаДанными.ДанныеНастройки.УчетнаяЗаписьПриемаОтправкиСообщений) Тогда
		
		СообщитьИнформациюОбОбмене("Не задана учетная запись приема и отправки сообщений!", СтруктураНастроекОбменаДанными);
		Возврат;
	
	КонецЕсли;
	
	// надо проверить есть ли доступные учетные записи для отправки у текущего пользователя
	СписокДоступныхЗаписей = УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписи().Запись;
	Если СписокДоступныхЗаписей.Количество() = 0 Тогда
		
		// отправлять и принимать неоткуда
		СообщитьИнформациюОбОбмене("Нет доступных учетных записей для отправки и приема сообщений!", СтруктураНастроекОбменаДанными);
		Возврат;
		
	КонецЕсли;
	
	Если СтруктураНастроекОбменаДанными.ПроизводитьЧтениеДанных Тогда
		
		// для ручного режима надо почту получить
		Если СтруктураНастроекОбменаДанными.РучнойРежимЗапуска 
			ИЛИ СтруктураНастроекОбменаДанными.ДанныеНастройки.АвтоматическиЗакачиватьПочтуПриОбмене Тогда
			
			#Если Клиент Тогда
				
				СообщитьИнформациюОбОбмене("Получение почтовых сообщений", СтруктураНастроекОбменаДанными);
				
				Попытка
					МассивУчетныхЗаписей = Новый Массив();
					МассивУчетныхЗаписей.Добавить(СтруктураНастроекОбменаДанными.ДанныеНастройки.УчетнаяЗаписьПриемаОтправкиСообщений);
						
					УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(СтруктураНастроекОбменаДанными.СоответствиеТекстовЭлектронныхПисем, МассивУчетныхЗаписей, , Ложь, Истина, Ложь, ТекстОшибок);
					
				Исключение
			    	// проблема при получении писем
					Если ТекстОшибок = "" Тогда
						ТекстОшибок = ОписаниеОшибки();	
					КонецЕсли;
					
				КонецПопытки;
			
				Если НЕ ПустаяСтрока(ТекстОшибок) Тогда
					СообщитьИнформациюОбОбмене("Ошибка при получении почтовых сообщений: " + ТекстОшибок, СтруктураНастроекОбменаДанными);	
				КонецЕсли;
			
			#КонецЕсли
		
		КонецЕсли;

		// ищем файлы по маске с расширением Message_A_B .xml или .zip
		ИмяШаблонаОбмена = СформироватьИмяФайлаОбменаМеждуУзлами(СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы, СтруктураНастроекОбменаДанными.ТекущийУзелПланаОбмена, "");
		
		ШаблонИмениФайлаXML = ИмяШаблонаОбмена + ".xml";
		ШаблонИмениФайлаZIP = ИмяШаблонаОбмена + ".zip";
		
		// проверяем все непрочитанные письма для учетной записи
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ
		   |	ВложенияЭлектронныхПисем.ИмяФайла,
		   |	ВложенияЭлектронныхПисем.Хранилище,
		   |	ЭлектронноеПисьмо.ДатаОтправления,
		   |	ЭлектронноеПисьмо.Ссылка
		   |ИЗ
		   |	Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
		   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		   |		ПО (ЭлектронноеПисьмо.Ссылка = ВложенияЭлектронныхПисем.Объект) 
		   |			И (ЭлектронноеПисьмо.НеРассмотрено = ИСТИНА) 
		   |			И (ЭлектронноеПисьмо.СтатусПисьма = &Входящее)
		   |
		   |	ГДЕ (ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма = """" )
		   |		И (ЭлектронноеПисьмо.Тема = &ИмяШаблонаОбмена)
		   |		И (
		   |			(ВложенияЭлектронныхПисем.ИмяФайла Подобно &ИмяФайлаXML)
		   |			ИЛИ (ВложенияЭлектронныхПисем.ИмяФайла Подобно &ИмяФайлаZIP)
		   |		   )
		   |
		   |	УПОРЯДОЧИТЬ ПО ЭлектронноеПисьмо.ДатаОтправления УБЫВ	
		   |";
		   
		Запрос.УстановитьПараметр("ИмяФайлаXML", "%" + ШаблонИмениФайлаXML + "%");
		Запрос.УстановитьПараметр("ИмяФайлаZIP", "%" + ШаблонИмениФайлаZIP + "%");
		Запрос.УстановитьПараметр("ИмяШаблонаОбмена", ИмяШаблонаОбмена);
		Запрос.УстановитьПараметр("Входящее", Перечисления.СтатусыПисем.Полученное);
		
		ТаблицаФайлов = Запрос.Выполнить().Выгрузить();
		
		// надо по найденным вложениям пробежать и взять первый подходящий файл для выгрузки
        // записываем на диск только файл с наибольшей датой отправления
		
		ФайлЗаписанНаДиск = Ложь;
		Для Каждого ФайлВложения Из ТаблицаФайлов Цикл
			
			// проверяем имя на то что нам нужно
			ИмяФайлаОбмена = СокрЛП(ВРЕГ(ФайлВложения.ИмяФайла));
			
			// это не те файлы что мы ищем
			Если НЕ ((ВРЕГ(ШаблонИмениФайлаXML) = ИмяФайлаОбмена) ИЛИ (ВРЕГ(ШаблонИмениФайлаZIP) = ИмяФайлаОбмена)) Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ФайлЗаписанНаДиск
				И ФайлВложения.Хранилище <> Неопределено Тогда
													
				НайденныйФайл = ФайлВложения.Хранилище;
				СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена = ФайлВложения.ДатаОтправления;
				ПисьмоИВложениеВНего = Строка(ФайлВложения.Ссылка) + "\ " + ИмяФайлаОбмена; 
				ФайлЗаписанНаДиск = Истина;
				
			КонецЕсли;
			
			// запомним письмо которое мы обработали
			СтруктураНастроекОбменаДанными.МассивОбработанныхПисем.Добавить(ФайлВложения.Ссылка);
					
		КонецЦикла;
		
		// не нашли файл
		Если ФайлЗаписанНаДиск Тогда
			
			Попытка
				// надо файл на диск скопировать
				БинарныеДанные = НайденныйФайл.Получить();
				
				СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений = ВерутьИмяВременногоФайлаЧтенияДанных(СтруктураНастроекОбменаДанными,
					(Врег(РаботаСФайлами.ПолучитьРасширениеФайла(ИмяФайлаОбмена)) = "ZIP"));

				БинарныеДанные.Записать(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений);
				
			Исключение
				
				СообщитьИнформациюОбОбмене("Ошибка при сохранении вложения из письма: " + ПисьмоИВложениеВНего + ". " + ОписаниеОшибки(), 
					СтруктураНастроекОбменаДанными);	
				СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений = "";
								
			КонецПопытки
			
		КонецЕсли;
		
	КонецЕсли; // ПроизводитьПриемСообщений	
		
	// если не указан адрес отправки сообщений, то не формируем результирующий файл
	СтруктураНастроекОбменаДанными.НеобходимостьЗаписиОтветногоФайлаОбмена = СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных
		И (ЗначениеЗаполнено(СтруктураНастроекОбменаДанными.ДанныеНастройки.ПочтовыйАдресПолучателя));
		
	// что то надо делать	
	Если СтруктураНастроекОбменаДанными.НеобходимостьЗаписиОтветногоФайлаОбмена
		ИЛИ Не ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений) Тогда

		ИнициализироватьФормуХодаОбработки(СтруктураНастроекОбменаДанными, "Подготовка перед обменом данными", 5);
	
	КонецЕсли;	

КонецПроцедуры


// СЛУЖЕБНЫЕ ФУНКЦИЯ ВЫПОЛНЯЮЩИЕСЯ ПОСЛЕ ОБМЕНА
///////////////////////////////////////////////////////////////////////////////

//Процедура удаляет не нужные файлв после обмена данными
Процедура УдалитьФайлаПослеОбменаДанными(СтруктураНастроекОбменаДанными)
	
	Если ОпределитьБылоУдачноПроизведеноЧтениеДанных(СтруктураНастроекОбменаДанными)
		И (Не СтруктураНастроекОбменаДанными.РучнойРежимЗапуска) Тогда
		
		ВыполнитьУдалениеФайла(СтруктураНастроекОбменаДанными.ИмяВходящегоФайлаОбмена, СтруктураНастроекОбменаДанными, Истина);
		
	КонецЕсли;
	
	// временный файл для чтения данных надо грохнуть вне зависимости от результатов чтения
	ВыполнитьУдалениеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений, СтруктураНастроекОбменаДанными);
	
КонецПроцедуры

//Функция по структуре возвращает была ли произведена запись данных
Функция ОпределитьБылаУдачнноПроизведенаЗаписьДанных(СтруктураНастроекОбменаДанными)
	
	Возврат СтруктураНастроекОбменаДанными.РезультатЗаписиДанных 
		И Не ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений);
	
КонецФункции

//Функция по структуре возвращает было ли произведено чтение данных
Функция ОпределитьБылоУдачноПроизведеноЧтениеДанных(СтруктураНастроекОбменаДанными)
	
	Возврат СтруктураНастроекОбменаДанными.РезультатЧтенияДанных 
		И Не ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений)
	
КонецФункции


// функция определяет нужно опправлять ответный пакет или нет
Функция ОпределитьНужноОптравлятьОтветныйПакет(СтруктураНастроекОбменаДанными, НужноПроверитьЧерезПочту)
	
	МаксимальныйДопустимыйРазмерСообщения = ?(НужноПроверитьЧерезПочту, СтруктураНастроекОбменаДанными.ДанныеНастройки.МаксимальныйРазмерОтправляемогоПакетаЧерезПочту, 
		СтруктураНастроекОбменаДанными.ДанныеНастройки.МаксимальныйРазмерОтправляемогоПолучаемогоПакетаЧерезFTP);
	
	// нужно предварительно проанализировать что бы размер отправляемого письма не превосходил ограничений
	Если МаксимальныйДопустимыйРазмерСообщения = 0 Тогда
		Возврат Истина;
	КонецЕсли;
			
	// ограничение на размер ответного письма есть, нужно сравнить это значение с размером отправляемого файла
	ФайлДляОправки = Новый Файл(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений);
	Если ФайлДляОправки.Существует() Тогда
				
		РазмерОтправляемогоФайла = ФайлДляОправки.Размер();
				
		Если (РазмерОтправляемогоФайла / 1024) > МаксимальныйДопустимыйРазмерСообщения Тогда
					
			// файл превысил допустимый для отправки размер
			СообщитьИнформациюОбОбмене("Ответный пакет не был отправлен. Размер исходящего пакета составил: " + Окр(РазмерОтправляемогоФайла / 1024, 2) + 
				" (КБт) что превышает допустимое ограничение " + МаксимальныйДопустимыйРазмерСообщения + " (КБт)", 
				СтруктураНастроекОбменаДанными);
				
			Возврат Ложь;	
					
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции


// Процедура выполняет действия после обмена через файловый ресурс
Процедура ДействияПослеОбменаЧерезФайловыйРесурс(СтруктураНастроекОбменаДанными)
	
	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Окончание обмена данными", 5);
	
	// надо файл скопировать обратно из временного каталога в основной			
	Если ОпределитьБылаУдачнноПроизведенаЗаписьДанных(СтруктураНастроекОбменаДанными) Тогда
		
		ИмяФайла = РаботаСФайлами.ПолучитьИмяФайлаИзПолногоПути(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений);
						
		ИмяФайлаДляЗаписиВКаталогОбмена = СтруктураНастроекОбменаДанными.КаталогПроведенияОбменаДанными + "\" + ИмяФайла;
		
		// копируем файл
		УдачноеКопирование = ВыполнитьКопированиеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, ИмяФайлаДляЗаписиВКаталогОбмена, Истина, 
			СтруктураНастроекОбменаДанными);
		
		Если Не УдачноеКопирование Тогда
				
			СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;
			
		Иначе
			
			// удаляем не нужный файл обмена
			ВыполнитьУдалениеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, СтруктураНастроекОбменаДанными);
						
		КонецЕсли;
		
	КонецЕсли;
	
	// удаляем файлы обмена
	УдалитьФайлаПослеОбменаДанными(СтруктураНастроекОбменаДанными);
		
КонецПроцедуры			
			
// Процедура выполняет действия после обмена через FTP ресурс
Процедура ДействияПослеОбменаЧерезFTPРесурс(СтруктураНастроекОбменаДанными)
	
	Перем Соединение, ИмяFTPСервера, ИмяКаталогаСервера;

	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Окончание обмена данными", 5);
	
	Если ОпределитьБылаУдачнноПроизведенаЗаписьДанных(СтруктураНастроекОбменаДанными) Тогда
		
		НужноЗаписатьФайлНаFTP = ОпределитьНужноОптравлятьОтветныйПакет(СтруктураНастроекОбменаДанными, Ложь);
		
		Если НужноЗаписатьФайлНаFTP Тогда
		
			ПроверитьНастройкиПодключения = ПроверитьНастройкиFTPПодключения(СтруктураНастроекОбменаДанными.ДанныеНастройки, 
				СтруктураНастроекОбменаДанными.ДанныеПротокола,	СтруктураНастроекОбменаДанными.ВывестиИнформациюВОкноСообщений, 
				ИмяКаталогаСервера, ИмяFTPСервера, Соединение);
				
			Если Не ПроверитьНастройкиПодключения Тогда
				Возврат;
			КонецЕсли;
			
			ИмяФайлаFTPЗаписи = ИмяКаталогаСервера + РаботаСФайлами.ПолучитьИмяФайлаИзПолногоПути(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений);
			
			Попытка
				
				Если ПроверитьНастройкиПодключения Тогда  
					
					ДобавитьИнформациюВПротокол("Копирование файла обмена на FTP ресурс", СтруктураНастроекОбменаДанными.ДанныеПротокола);
	                Соединение.Записать(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, ИмяФайлаFTPЗаписи);
					
				Иначе	
					СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;	
				КонецЕсли;
				
			Исключение
				
				СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;
				СообщитьИнформациюОбОбмене("Ошибка при копировании файла на FTP ресурс: " + ОписаниеОшибки(), СтруктураНастроекОбменаДанными);	
			
			КонецПопытки;
			
		КонецЕсли;	
		
		ВыполнитьУдалениеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, СтруктураНастроекОбменаДанными);
	КонецЕсли;

	// удаляем файлы обмена
	УдалитьФайлаПослеОбменаДанными(СтруктураНастроекОбменаДанными);
				
КонецПроцедуры

// Процедура выполняет действия после обмена через почтовый ресурс
Процедура ДействияПослеОбменаЧерезПочтовыйРесурс(СтруктураНастроекОбменаДанными)
	
	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Окончание обмена данными", 5);
	
	// файл записи изменений надо отправить письмом на нужный адрес
	Если ОпределитьБылаУдачнноПроизведенаЗаписьДанных(СтруктураНастроекОбменаДанными) Тогда
		
		НужноОтправлятьОтветноеПисьмо = ОпределитьНужноОптравлятьОтветныйПакет(СтруктураНастроекОбменаДанными, Истина);
		
		Если НужноОтправлятьОтветноеПисьмо Тогда
				
			ДобавитьИнформациюВПротокол("Создание ответного письма", СтруктураНастроекОбменаДанными.ДанныеПротокола);
			
			ИмяФайла = РаботаСФайлами.ПолучитьИмяФайлаИзПолногоПути(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений);
			
			// расширение грохаем
			ПозицияТочки = Найти(ИмяФайла, ".");
			Если ПозицияТочки > 0 Тогда
				ИмяШаблонаОбмена = Сред(ИмяФайла, 1, ПозицияТочки - 1);
			Иначе
				ИмяШаблонаОбмена = ИмяФайла;
			КонецЕсли;
				
			// формируем и отправляем письмо
			СтруктураНовогоПисьма = Новый Структура();
			
			// вложения
			СписокФайловВложений = Новый СписокЗначений;
			
			ФайлВложения = СписокФайловВложений.Добавить();
			
			СтруктураВложения  = Новый Структура();
			
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений);
			СтруктураВложения.Вставить("Хранилище", ДвоичныеДанныеФайла);
					
			СтруктураВложения.Вставить("ИмяФайла", ИмяФайла);
			
			ФайлВложения.Значение = СтруктураВложения;
			
			// получатель
			СписокПолучателей = Новый СписокЗначений();
			СписокПолучателей.Добавить(СтруктураНастроекОбменаДанными.ДанныеНастройки.ПочтовыйАдресПолучателя, 
				СтруктураНастроекОбменаДанными.ДанныеНастройки.ПочтовыйАдресПолучателя);
			
			СтруктураНовогоПисьма.Вставить("Кому", СписокПолучателей);
			СтруктураНовогоПисьма.Вставить("УчетнаяЗапись", СтруктураНастроекОбменаДанными.ДанныеНастройки.УчетнаяЗаписьПриемаОтправкиСообщений);
			СтруктураНовогоПисьма.Вставить("Тема", ИмяШаблонаОбмена);
			СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
			СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
			СтруктураНовогоПисьма.Вставить("Тело", СформироватьТелоПисьмаОбменаМеждуУзлами(СтруктураНастроекОбменаДанными.ТекущийУзелПланаОбмена, 
				СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы));


			#Если Клиент Тогда
				СтруктураПисем = УправлениеЭлектроннойПочтой.НаписатьПисьмо(глЗначениеПеременной("глТекущийПользователь"),СтруктураНовогоПисьма, Ложь, Ложь,
								   Ложь, Неопределено, Неопределено, Ложь, ЛОЖЬ);

				Если СтруктураПисем <> Неопределено Тогда				   
									   
					СоответствиеПисем = Новый Соответствие();
					
					СсылкаНаПисьмо = Неопределено;
					СтруктураПисем.Свойство("ПисьмоСсылка", СсылкаНаПисьмо);
					
					Если ЗначениеЗаполнено(СсылкаНаПисьмо) Тогда   
						
						СоответствиеПисем.Вставить(СсылкаНаПисьмо); 
						
					КонецЕсли;
					
					СообщитьИнформациюОбОбмене("Отправка исходящего письма", СтруктураНастроекОбменаДанными);
					
					ТекстОшибок = "";
					УправлениеЭлектроннойПочтой.ОтправитьПисьма(СоответствиеПисем, СтруктураНастроекОбменаДанными.СоответствиеТекстовЭлектронныхПисем, Ложь, ТекстОшибок);
					
					Если НЕ ПустаяСтрока(ТекстОшибок) Тогда
						
						СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;
						СообщитьИнформациюОбОбмене("Ошибка при отправке ответного письма: " + ТекстОшибок, СтруктураНастроекОбменаДанными);	
						
					КонецЕсли;
					
				КонецЕсли;
				
			#КонецЕсли
			
		КонецЕсли;	
					   
		ВыполнитьУдалениеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, СтруктураНастроекОбменаДанными);
		
	КонецЕсли;

	
	// удаляем файлы обмена
	Если ОпределитьБылоУдачноПроизведеноЧтениеДанных(СтруктураНастроекОбменаДанными) Тогда
		
		ДобавитьИнформациюВПротокол("Пометка обработанных писем как прочтенные", СтруктураНастроекОбменаДанными.ДанныеПротокола);
		// если все удачно прочитали, то надо письма обмена пометить как прочитанные
		Для Каждого ОбработанноеПисьмо Из СтруктураНастроекОбменаДанными.МассивОбработанныхПисем Цикл
			
			ОбъектПисьмо = ОбработанноеПисьмо.ПолучитьОбъект();
			
			Если ОбъектПисьмо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				
				ОбъектПисьмо.НеРассмотрено = Ложь;
				Попытка
					ОбъектПисьмо.Ответственный = ПараметрыСеанса.ТекущийПользователь; 
				Исключение
				КонецПопытки;
				
				ОбъектПисьмо.Записать();
				
			Исключение
				
				СообщитьИнформациюОбОбмене("Ошибка при попытке пометить письмо: " +
					Строка(ОбъектПисьмо) + " как прочтенное. Текст ошибки: " + ОписаниеОшибки(), СтруктураНастроекОбменаДанными);	
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// файл обмена по-любому надо грохнуть
	ВыполнитьУдалениеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений, СтруктураНастроекОбменаДанными);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////

// Процедура устанавливает необходимость выполнения обмена данными при первом запуске программы
Процедура УстановитьНеобходимостьВыполненияОбменаПриПервомЗапускеПрограммы(НастройкаОбмена, Знач ВыполнятьОбменПриПервомЗапуске) Экспорт
	
	НаборЗаписейПараметров = РегистрыСведений.ПараметрыОбменаДанными.СоздатьНаборЗаписей();
	
	НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.Значение = НастройкаОбмена;	
	НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.Использование = Истина;
	НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.ВидСравнения = ВидСравнения.Равно;
	
	НаборЗаписейПараметров.Прочитать();
	
	Если НаборЗаписейПараметров.Количество() = 0 Тогда
		ЗаписьПараметров = НаборЗаписейПараметров.Добавить();
	Иначе
		ЗаписьПараметров = НаборЗаписейПараметров[0];
	КонецЕсли;
	
	ЗаписьПараметров.НастройкаОбменаДанными = НастройкаОбмена;
	ЗаписьПараметров.ВыполнятьПриПервомВходеВСистему = ВыполнятьОбменПриПервомЗапуске;
		
	Попытка
		НаборЗаписейПараметров.Записать();
	Исключение
		
		СообщитьИнформациюОПростойОшибке("Ошибка при записи изменений в настройку обмена """ + НастройкаОбмена + """ : " + ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура устанавливает необходимость выполнения обмена данными при первом запуске программы
Процедура УстановитьДоступностьКаталогаДляПроверки(НастройкаОбмена, Знач ДоступностьКаталога) Экспорт

	// устанавливаем у регистра параметров обмена новое значение доступностии каталога
	НаборЗаписейПараметров = РегистрыСведений.ПараметрыОбменаДанными.СоздатьНаборЗаписей();
	
	НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.Значение = НастройкаОбмена;	
	НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.Использование = Истина;
	НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.ВидСравнения = ВидСравнения.Равно;
		
	НаборЗаписейПараметров.Прочитать();
		
	Если НаборЗаписейПараметров.Количество() = 0 Тогда
		ЗаписьПараметров = НаборЗаписейПараметров.Добавить();
	Иначе
		ЗаписьПараметров = НаборЗаписейПараметров[0];
	КонецЕсли;
		
	ЗаписьПараметров.НастройкаОбменаДанными = НастройкаОбмена;
	ЗаписьПараметров.ДоступностьКаталогаПроверки = ДоступностьКаталога;
			
	Попытка
		НаборЗаписейПараметров.Записать();
	Исключение
		
		СообщитьИнформациюОПростойОшибке("Ошибка при записи изменений в настройку обмена """ + НастройкаОбмена + """ : " + ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры	


// ФУНКЦИЯ ОБМЕНА ДАННЫМИ ПО НАСТРОЙКЕ

// регистрирует что обмен был произведен и фиксирует информацию в протоколе
Процедура ЗафиксироватьЗавершениеОбмена(СтруктураДанныхНастройкиОбмена, Знач СтрокаСообщенияОбОшибке = "", Знач НеВыводитьИнформациюПользователю = Ложь)
	
	Если Не ПустаяСтрока(СтрокаСообщенияОбОшибке) Тогда
		
		Если НеВыводитьИнформациюПользователю Тогда
			ДобавитьИнформациюВПротокол(СтрокаСообщенияОбОшибке, СтруктураДанныхНастройкиОбмена.ДанныеПротокола, Ложь, Истина);
		Иначе
			СообщитьИнформациюОбОшибкеОбмена(СтрокаСообщенияОбОшибке, СтруктураДанныхНастройкиОбмена);
		КонецЕсли;
		
	КонецЕсли;	
	
	ДатаПоследнегоОбмена = ТекущаяДата();
	// записываем в объект дату последнего обмена
	НаборЗаписейПараметров = РегистрыСведений.ПараметрыОбменаДанными.СоздатьНаборЗаписей();
	
	НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.Значение = СтруктураДанныхНастройкиОбмена.ДанныеНастройки.Ссылка;	
	НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.Использование = Истина;
	НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.ВидСравнения = ВидСравнения.Равно;
	
	НаборЗаписейПараметров.Прочитать();
	
	Если НаборЗаписейПараметров.Количество() = 0 Тогда
		ЗаписьПараметров = НаборЗаписейПараметров.Добавить();
	Иначе
		ЗаписьПараметров = НаборЗаписейПараметров[0];
	КонецЕсли;
	
	ЗаписьПараметров.НастройкаОбменаДанными = СтруктураДанныхНастройкиОбмена.ДанныеНастройки.Ссылка;
	ЗаписьПараметров.ДатаПоследнегоОбмена = ДатаПоследнегоОбмена;
		
	// дата и результат последней выгрузки и загрузки
	Если ЗначениеЗаполнено(СтруктураДанныхНастройкиОбмена.ДатаПоследнейЗагрузки)
		И НЕ ПустаяСтрока(СтруктураДанныхНастройкиОбмена.ИмяФайлаЧтенияИзменений) Тогда
		
		ЗаписьПараметров.ДатаПоследнейЗагрузки = СтруктураДанныхНастройкиОбмена.ДатаПоследнейЗагрузки;	
		ЗаписьПараметров.РезультатПоследнейЗагрузки = СтруктураДанныхНастройкиОбмена.РезультатЧтенияДанных;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанныхНастройкиОбмена.ДатаПоследнейВыгрузки)
		И НЕ ПустаяСтрока(СтруктураДанныхНастройкиОбмена.ИмяФайлаЗаписиИзменений) Тогда
		
		ЗаписьПараметров.ДатаПоследнейВыгрузки = СтруктураДанныхНастройкиОбмена.ДатаПоследнейВыгрузки;	
		ЗаписьПараметров.РезультатПоследнейВыгрузки = СтруктураДанныхНастройкиОбмена.РезультатЗаписиДанных;
		
	КонецЕсли;
	
	// записываем дату последнего файла обмена только в том случае, если обмен произошел успешно
	УдачноеЧтение = ОпределитьБылоУдачноПроизведеноЧтениеДанных(СтруктураДанныхНастройкиОбмена);
	Если УдачноеЧтение Тогда
		ЗаписьПараметров.ДатаПоследнегоФайлаОбмена = СтруктураДанныхНастройкиОбмена.ДатаПоследнегоФайлаОбмена;
	КонецЕсли;
	
	ЗаписьПараметров.ВыполнятьПриПервомВходеВСистему = Ложь;
	ЗаписьПараметров.ДоступностьКаталогаПроверки = СтруктураДанныхНастройкиОбмена.ДоступностьКаталогаПроверки;
		
	Попытка
		НаборЗаписейПараметров.Записать();
	Исключение
		
		Если НеВыводитьИнформациюПользователю Тогда
			ДобавитьИнформациюВПротокол("Ошибка при записи изменений в настройку обмена """ + СтруктураДанныхНастройкиОбмена.ДанныеНастройки.Ссылка + """ : " + ОписаниеОшибки(), 
				СтруктураДанныхНастройкиОбмена.ДанныеПротокола, Ложь, Истина);	
		Иначе	
			СообщитьИнформациюОбОшибкеОбмена("Ошибка при записи изменений в настройку обмена """ + СтруктураДанныхНастройкиОбмена.ДанныеНастройки.Ссылка + """ : " + ОписаниеОшибки(), 
				СтруктураДанныхНастройкиОбмена);
		КонецЕсли;	
		
	КонецПопытки;	
		
	// надо изменения отразить в обработке автоматического поиска
	Если СтруктураДанныхНастройкиОбмена.ОбработкаАвтоОбменДанными <> Неопределено Тогда
		
		СтруктураДанныхНастройкиОбмена.ОбработкаАвтоОбменДанными.ОбновитьИнформациюОНастройкахОбмена(СтруктураДанныхНастройкиОбмена.ДанныеНастройки, 
			ДатаПоследнегоОбмена, СтруктураДанныхНастройкиОбмена.ДоступностьКаталогаПроверки);
			
	КонецЕсли;
	
	ЗаписатьДанныеПротокола(СтруктураДанныхНастройкиОбмена.ДанныеНастройки, СтруктураДанныхНастройкиОбмена.ДанныеПротокола, НЕ ПустаяСтрока(СтрокаСообщенияОбОшибке));
    	
КонецПроцедуры

// Процедура возвращает параметры для обмена
Процедура ПолучитьПараметрыОбменаДанными(СтруктураНастроекОбменаДанными, МетаданныеУзлаОбмена, СтрокаИнформацияОбОбмене)
	
	// получаем узел информационной базы плана обмена
	ИмяПланаОбмена = ПолучитьИмяПланаОбмена(СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы);
	МетаданныеУзлаОбмена = СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы.Метаданные();
	
	СтрокаОписанияЗапуска = ?(СтруктураНастроекОбменаДанными.РучнойРежимЗапуска, "в интерактивном режиме", "в автоматическом режиме");
	СтрокаИнформацияОбОбмене = "обмена данными " + СтрокаОписанияЗапуска + " для плана обмена """ + ИмяПланаОбмена + """ узла """ + СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы.Наименование + """";
	
КонецПроцедуры

//Функция проводит необходимые действия перед началом обмена данными
// возвращает нужно ли производить обмен или нет
Функция ВыполнитьДействияПередНачаломОбменаДанными(СтруктураНастроекОбменаДанными)
	
	СтруктураНастроекОбменаДанными.Вставить("ДанныеПротокола", "");
	
	СтруктураНастроекОбменаДанными.Вставить("ДатаПоследнегоФайлаОбмена", Неопределено);
	
	СтруктураНастроекОбменаДанными.Вставить("ДатаПоследнейЗагрузки", Неопределено);
	СтруктураНастроекОбменаДанными.Вставить("ДатаПоследнейВыгрузки", Неопределено);
		
	СтруктураНастроекОбменаДанными.Вставить("ИмяФайлаЧтенияИзменений", "");
	СтруктураНастроекОбменаДанными.Вставить("ИмяФайлаЗаписиИзменений", "");
	
	СтруктураНастроекОбменаДанными.Вставить("РезультатЧтенияДанных", Ложь);
	СтруктураНастроекОбменаДанными.Вставить("РезультатЗаписиДанных", Ложь);
	
	СтруктураНастроекОбменаДанными.Вставить("НеобходимостьЗаписиОтветногоФайлаОбмена", Ложь);

		
	// если это автообмен надо проверить выполнение доп.условий
	Если НЕ СтруктураНастроекОбменаДанными.РучнойРежимЗапуска Тогда
		
		Если Не ПустаяСтрока(СтруктураНастроекОбменаДанными.ДанныеНастройки.НаличиеКаталогаДляЗапускаАвтообмена) Тогда
			
			// наличие каталога 
			НаличиеКаталога = ПроверитьНаличиеКаталога(СтруктураНастроекОбменаДанными.ДанныеНастройки.НаличиеКаталогаДляЗапускаАвтообмена, Истина);
			
			Если Не НаличиеКаталога Тогда
				
				ДобавитьИнформациюВПротокол(Символы.ПС, СтруктураНастроекОбменаДанными.ДанныеПротокола);
				ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, "Для автообмена не выполнено условие наличия каталога: " + 
					СтруктураНастроекОбменаДанными.ДанныеНастройки.НаличиеКаталогаДляЗапускаАвтообмена, Истина);
				Возврат Ложь;
				
			Иначе
				
				ДобавитьИнформациюВПротокол("Выполнено условие наличия каталога: " + СтруктураНастроекОбменаДанными.ДанныеНастройки.НаличиеКаталогаДляЗапускаАвтообмена,
					СтруктураНастроекОбменаДанными.ДанныеПротокола);	
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(СтруктураНастроекОбменаДанными.ДанныеНастройки.ОтсутствиеКаталогаДляЗапускаАвтообмена) Тогда
			
			// наличие каталога 
			НаличиеКаталога = ПроверитьНаличиеКаталога(СтруктураНастроекОбменаДанными.ДанныеНастройки.ОтсутствиеКаталогаДляЗапускаАвтообмена, Истина);
			
			Если НаличиеКаталога Тогда
				
				ДобавитьИнформациюВПротокол(Символы.ПС, СтруктураНастроекОбменаДанными.ДанныеПротокола);
				ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, "Для автообмена не выполнено условие отсутствия каталога: " + 
					СтруктураНастроекОбменаДанными.ДанныеНастройки.ОтсутствиеКаталогаДляЗапускаАвтообмена, Истина);
				Возврат Ложь;
				
			Иначе	
				
				ДобавитьИнформациюВПротокол("Выполнено условие отсутствия каталога: " + СтруктураНастроекОбменаДанными.ДанныеНастройки.ОтсутствиеКаталогаДляЗапускаАвтообмена,
					СтруктураНастроекОбменаДанными.ДанныеПротокола);
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СообщитьИнформациюОбОбмене(Символы.ПС, СтруктураНастроекОбменаДанными);
			
	// информация об обмене данными
	Если СтруктураНастроекОбменаДанными.РучнойРежимЗапуска Тогда
			
		СтрокаЗаписиВЛогПриНачалеОбмена = "Начат обмен данными";
			
	Иначе
			
		Если НЕ СтруктураНастроекОбменаДанными.ОбменПриВходеВПрограмму Тогда
			СтрокаЗаписиВЛогПриНачалеОбмена = "Начат автоматический обмен данными";
		Иначе
			СтрокаЗаписиВЛогПриНачалеОбмена = "Начат автоматический обмен данными при первом входе в программу";
		КонецЕсли;
			
	КонецЕсли;	
		
	СтрокаЗаписиВЛогПриНачалеОбмена = СтрокаЗаписиВЛогПриНачалеОбмена + " по настройке """ + Строка(СтруктураНастроекОбменаДанными.ДанныеНастройки) + """ (" + Формат(ТекущаяДата(), "ДЛФ=В") + ").";	
		
	СообщитьИнформациюОбОбмене(СтрокаЗаписиВЛогПриНачалеОбмена, СтруктураНастроекОбменаДанными);
			
	#Если Клиент Тогда
			
		Если НЕ СтруктураНастроекОбменаДанными.ОбменПриВходеВПрограмму Тогда
				
			// для автоматического режима запуска обмена спрашиваем хочет ли он произвести этот обмен
			Если Не СтруктураНастроекОбменаДанными.РучнойРежимЗапуска
				И СтруктураНастроекОбменаДанными.ДанныеНастройки.ВопросПриАвтообмене Тогда
					           			
				ОтветПользователя = Вопрос("Вы хотите автоматически произвести обмен данными по настройке """ + Строка(СтруктураНастроекОбменаДанными.ДанныеНастройки.ссылка) + """?",
					РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.ДА, НСтр("ru='Обмен данными';uk='Обмін даними'"));
							
				
				Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда
							
					// пользователь не хочет производить обмен
					ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, "Обмен данными отменен пользователем!");
					Возврат Ложь;
						
				Иначе
					// пользователь согласился выполнять обмен			
					ДобавитьИнформациюВПротокол("Пользователь положительно ответил на вопрос о проведении автоматического обмена", СтруктураНастроекОбменаДанными.ДанныеПротокола);
						
				КонецЕсли;	
						
			КонецЕсли;
				
		КонецЕсли;	
			
	#КонецЕсли	
		
	Если НЕ ЗначениеЗаполнено(СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы) Тогда
			
		// надо зафиксировать что обмен произведен и в следующий раз не предлагать еще раз сделать обмен данными
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, "В настройке обмена не задан узел информационной базы с которым нужно производить обмен информацией! Обмен отменен.");
		Возврат Ложь;
			
	КонецЕсли;
		
	Если НЕ СтруктураНастроекОбменаДанными.ПроизводитьЧтениеДанных 
		И НЕ СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных Тогда
			
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, "В настройке обмена не взведены флаги загрузки и выгрузки данных! Обмен отменен.");
		Возврат Ложь;
			
	КонецЕсли;
	
	МетаданныеУзлаОбмена = Неопределено;
	СтрокаИнформацияОбОбмене = "";
	ПолучитьПараметрыОбменаДанными(СтруктураНастроекОбменаДанными, МетаданныеУзлаОбмена, СтрокаИнформацияОбОбмене);
	
	СтруктураНастроекОбменаДанными.Вставить("ТекущийУзелПланаОбмена", ПланыОбмена[МетаданныеУзлаОбмена.Имя].ЭтотУзел());
		
	// сами с собой не обмениваемся
	Если СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы = СтруктураНастроекОбменаДанными.ТекущийУзелПланаОбмена Тогда
			
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, "Нельзя организовать обмен данными с текущим узлом информационной базы! Обмен отменен.");
		Возврат Ложь;
			
	КонецЕсли;
	
	// у узлов участвующих в обмене должен быть не пустой код
	Если ПустаяСтрока(Строка(СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы.Код)) 
		ИЛИ ПустаяСтрока(Строка(СтруктураНастроекОбменаДанными.ТекущийУзелПланаОбмена.Код)) Тогда
		
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, "Нельзя организовать обмен данными когда один из узлов обмена имеет пустой код! Обмен отменен.");
		Возврат Ложь;
		
	КонецЕсли;
	
	// записываем в журнал данные о начале обмена данными
	ЗаписьЖурналаРегистрации("ИнформационнаяБаза.АвтоматическийОбменДанными", УровеньЖурналаРегистрации.Информация, 
		МетаданныеУзлаОбмена, СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы, НСтр("ru='Начало ';uk='Початок '") + СтрокаИнформацияОбОбмене);
	
	Возврат Истина;
	
КонецФункции

//функция выполняется после завершения обменом данными
Функция ВыполнитьДействияПослеЗавершенияОбменаДанными(СтруктураНастроекОбменаДанными)
	
	МетаданныеУзлаОбмена = Неопределено;
	СтрокаИнформацияОбОбмене = "";
	ПолучитьПараметрыОбменаДанными(СтруктураНастроекОбменаДанными, МетаданныеУзлаОбмена, СтрокаИнформацияОбОбмене);
	
	// отмечаем то что обмен произведен
	
	СообщитьИнформациюОбОбмене("Обмен данными по настройке """ + Строка(СтруктураНастроекОбменаДанными.ДанныеНастройки) + """ завершен (" + Формат(ТекущаяДата(), "ДЛФ=В") + ").", 
		СтруктураНастроекОбменаДанными);
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными);
		
	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Обмен данными завершен", 5);	
		
	// записываем в журнал данные об окончании обмена данными
	ЗаписьЖурналаРегистрации("ИнформационнаяБаза.АвтоматическийОбменДанными", УровеньЖурналаРегистрации.Информация, 
		МетаданныеУзлаОбмена, СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы, НСтр("ru='Окончание ';uk='Закінчення '") + СтрокаИнформацияОбОбмене);	
			
	ЗаписатьДанныеПротокола(СтруктураНастроекОбменаДанными.ДанныеНастройки, СтруктураНастроекОбменаДанными.ДанныеПротокола, Ложь);
		
	ЗакрытьФормуОбработкиДанных(СтруктураНастроекОбменаДанными);
	
	Возврат Истина;
	
КонецФункции

// Процедура поизводит обмен данными по настройке обмена
Процедура ПроизвестиОбменДаннымиПоНастройке(СтруктураНастроекОбменаДанными)
	
	// начальные функции инициализации обмена
	РезультатаНачалаОбмена = ВыполнитьДействияПередНачаломОбменаДанными(СтруктураНастроекОбменаДанными);
	Если Не РезультатаНачалаОбмена Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
					
		// ПОДГОТОВКА ПЕРЕД ОБМЕНОМ
		Если СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс Тогда
			
			СтруктураНастроекОбменаДанными.Вставить("КаталогПроведенияОбменаДанными", "");
			СтруктураНастроекОбменаДанными.Вставить("ИмяВходящегоФайлаОбмена", "");
			ПодготовитьОбменЧерезФайловыйРесурс(СтруктураНастроекОбменаДанными);
			
		ИначеЕсли СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезFTPРесурс Тогда
			
			СтруктураНастроекОбменаДанными.Вставить("ИмяВходящегоФайлаОбмена", "");
			ПодготовитьОбменЧерезFTPРесурс(СтруктураНастроекОбменаДанными);
			
		ИначеЕсли СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезПочту Тогда
			
			СтруктураНастроекОбменаДанными.Вставить("МассивОбработанныхПисем", Новый Массив());
			ПодготовитьОбменЧерезПочтовыйРесурс(СтруктураНастроекОбменаДанными);
			
		КонецЕсли;
		
		// файл для записи изменений
		Если СтруктураНастроекОбменаДанными.НеобходимостьЗаписиОтветногоФайлаОбмена Тогда 
			
			СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений = ВерутьИмяВременногоФайлаЗаписиДанных(СтруктураНастроекОбменаДанными);
			
			Если СтруктураНастроекОбменаДанными.ДанныеНастройки.ВыполнятьАрхивациюФайловОбмена Тогда
				
				РаботаСФайлами.УстановитьРасширениеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, ".zip");
				
			КонецЕсли;
			
		КонецЕсли;
		
		// если ничего делать не надо, то выходим вообще
		Если ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений)
			И ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений) Тогда
			
			СообщитьИнформациюОбОбмене("Ни загрузка ни выгрузка данных не были произведены", СтруктураНастроекОбменаДанными);
			ЗакрытьФормуОбработкиДанных(СтруктураНастроекОбменаДанными);
			ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными);
			Возврат;
			
		КонецЕсли;
					
		// САМ ОБМЕН ДАННЫМИ
		ВыполнитьЗагрузкуДанныхИзФайлаОбмена(СтруктураНастроекОбменаДанными);
		ВыполнитьВыгрузкуДанныхВФайлОбмена(СтруктураНастроекОбменаДанными);
								
		// ДЕЙСТВИЯ ПОСЛЕ ОБМЕНА
		Если СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс Тогда
				
			ДействияПослеОбменаЧерезФайловыйРесурс(СтруктураНастроекОбменаДанными);
					
		ИначеЕсли СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезFTPРесурс Тогда
				
			ДействияПослеОбменаЧерезFTPРесурс(СтруктураНастроекОбменаДанными);
				
		ИначеЕсли СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезПочту Тогда
				
			ДействияПослеОбменаЧерезПочтовыйРесурс(СтруктураНастроекОбменаДанными);
				
		КонецЕсли;
		
		// оставшееся действия после обмена данными выполняем
		ВыполнитьДействияПослеЗавершенияОбменаДанными(СтруктураНастроекОбменаДанными);
				
	Исключение
		
		СтрокаОписанияОшибки = ОписаниеОшибки();
		// отмечаем то что обмен произведен
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, СтрокаОписанияОшибки);
		
		ЗакрытьФормуОбработкиДанных(СтруктураНастроекОбменаДанными);
		// прокидываем ошибку дальше
		ВызватьИсключение СтрокаОписанияОшибки;
		
	КонецПопытки;
		
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли
	
КонецПроцедуры

// Процедура производит обмен по списку настроек для обмена
Процедура ПроизвестиСписокОбменовДанными(МассивНастроекОбмена, Знач РучнойРежимЗапуска = Ложь, ОбработкаАвтоОбменДанными = Неопределено,
			Знач СоответствиеТекстовЭлектронныхПисем = Неопределено, Знач ОбменПриВходеВПрограмму = Ложь) Экспорт
			
	// если нет данных для обмена, то ничего не производим		
	Если МассивНастроекОбмена = Неопределено Тогда
		Возврат;		
	КонецЕсли;
			
	КоличествоПроизведенныхОбменов = 0;
							
	Для Каждого СсылкаОбмена Из МассивНастроекОбмена Цикл
		
		Если НЕ ЗначениеЗаполнено(СсылкаОбмена) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектНастройки = СсылкаОбмена.ПолучитьОбъект();
		
		Если ОбъектНастройки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
				
		// производится непосредственно сам обмен данными
		СтруктураНастроекОбмена = Новый Структура();
		СтруктураНастроекОбмена.Вставить("ДанныеНастройки", ОбъектНастройки);
		СтруктураНастроекОбмена.Вставить("РучнойРежимЗапуска", РучнойРежимЗапуска);
		СтруктураНастроекОбмена.Вставить("ОбработкаАвтоОбменДанными", ОбработкаАвтоОбменДанными);
		СтруктураНастроекОбмена.Вставить("ОбменПриВходеВПрограмму", ОбменПриВходеВПрограмму);
		СтруктураНастроекОбмена.Вставить("СоответствиеТекстовЭлектронныхПисем", СоответствиеТекстовЭлектронныхПисем);
		СтруктураНастроекОбмена.Вставить("ПроизводитьЧтениеДанных", ОбъектНастройки.ПроизводитьПриемСообщений);
		СтруктураНастроекОбмена.Вставить("ПроизводитьЗаписьДанных", ОбъектНастройки.ПроизводитьОтправкуСообщений);
		
		СтруктураНастроекОбмена.Вставить("ВывестиИнформациюОбОшибкеВОкноСообщений", РучнойРежимЗапуска ИЛИ ОбъектНастройки.ВыводитьСообщенияОбОшибкахПриАвтоматическомОбменеДанными);
		СтруктураНастроекОбмена.Вставить("ВывестиИнформациюВОкноСообщений", РучнойРежимЗапуска ИЛИ ОбъектНастройки.ВыводитьИнформационныеСообщенияПриАвтоматическомОбменеДанными);
		
		Если Не ПустаяСтрока(ОбъектНастройки.КаталогПроверкиДоступности) Тогда
			
			ДоступностьКаталога = ПроверитьНаличиеКаталога(ОбъектНастройки.КаталогПроверкиДоступности);
			СтруктураНастроекОбмена.Вставить("ДоступностьКаталогаПроверки", ДоступностьКаталога);
			
		Иначе
			
			СтруктураНастроекОбмена.Вставить("ДоступностьКаталогаПроверки", Неопределено);	
			
		КонецЕсли;
				
		ПроизвестиОбменДаннымиПоНастройке(СтруктураНастроекОбмена);
			
		КоличествоПроизведенныхОбменов = КоличествоПроизведенныхОбменов + 1;	
		
	КонецЦикла;
	
	#Если Клиент Тогда

		// сообщаем что обмен данными завершен
		Если РучнойРежимЗапуска Тогда 		
			
			Если КоличествоПроизведенныхОбменов > 0 Тогда
				Предупреждение(НСтр("ru='Обмен данными завершен.';uk='Обмін даними завершений.'"), 30, НСтр("ru='Обмен данными';uk='Обмін даними'"));
			Иначе
				Предупреждение(НСтр("ru='Обмен данными не был выполнен.';uk='Обмін даними не був виконаний.'"), 30, НСтр("ru='Обмен данными';uk='Обмін даними'"));
			КонецЕсли;
			
		КонецЕсли;
				
	#КонецЕсли
	
КонецПроцедуры


// АВТОМАТИЧЕСКИЙ ОБМЕН ДАННЫМИ
///////////////////////////////////////////////////////////////////////////////

Функция ВыполнитьИнициализациюАвтообменаПриНачалеРаботы() Экспорт
	
	// автообмен данными
	Если ПравоДоступа("Использование", Метаданные.Обработки.АвтоОбменДанными) Тогда
		
		// производим отложенный обмен при первом входе в программу
		ОбработкаАвтоОбменДанными = Обработки.АвтоОбменДанными.Создать(); 
			
		// обмен при первом входе
		ОбработкаАвтоОбменДанными.ПроизвестиОбменПриВходеВыходе(Истина);
			
		// отдельно получаем настройки для которых нужно выполнить обмен при входе в программу
		ОбработкаАвтоОбменДанными.ПроизвестиОбменПриВходеВыходе(, Истина);
			
		// получаем данные периодического обмена данными и с ними работаем
		ОбработкаАвтоОбменДанными.ОбновитьТабличнуюЧастьАвтоматическихОбменов();
		
		Возврат  ОбработкаАвтоОбменДанными
			
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// выполнение обмена данными при завершении работы программы
Процедура ВыполнитьОбменПриЗавершенииРаботыПрограммы(ОбработкаОбмена) Экспорт
	
	Если (ОбработкаОбмена <> Неопределено) Тогда
		
		// отдельно получаем настройки для которых нужно выполнить обмен при выходе из программы
		ОбработкаОбмена.ПроизвестиОбменПриВходеВыходе( ,, Истина);
			
	КонецЕсли;
	
КонецПроцедуры


// Функция возвращает количество секунд для проверки запуска автоматического обмена данными
Функция ПолучитьКоличествоСекундОпросаЗапускаОбменаДанными() Экспорт
	
	Возврат Цел(60 / ВернутьКоэффициентУменьшенияИнтерваловВызоваОбработчиковОбмена());
	
КонецФункции

//Функция возвращает коэффициент ускорения работы обработчиков для демопоказа
Функция ВернутьКоэффициентУменьшенияИнтерваловВызоваОбработчиковОбмена() Экспорт
	
	Возврат 1;
	
КонецФункции
