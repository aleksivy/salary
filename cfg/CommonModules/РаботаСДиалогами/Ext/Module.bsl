// Этот модуль предназачен для реализации алгоритмов работы форм и 
// содержит процедуры и функции работы с формами и элементами форм,
// а также подготовки данных для представления информации в формах.
// Временно присутствует секция поддержки формирования печатных форм.

//////////////// НАЧАЛО ВЫБОРА //////////////////////////

// Процедура вызывается в обработчике события "Начало выбора" в форме документов.
// Выполняет выбор даты курса и устанавливает переданный курс по выбранной дате.
//
// Параметры:
//  Курс   - число, курс валюты, который надо установить;
//  Валюта - ссылка на справочник, определяет валюту чей курс надо выбрать;
//  Дата   - дата, дата курса по умолчанию.
//
Процедура ВыбратьКурсВалюты(Курс, Кратность, Валюта, Дата) Экспорт

	// Если не заполнена валюта, то курс выбрать нельзя.
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Предупреждение(НСтр("ru='Для выбора курса нужно выбрать валюту.';uk='Для вибору курсу потрібно вибрати валюту.'")); 
		Возврат;
	КонецЕсли; 
	
	// Выберем дату курса
	ДатаУстановкиКурса = Дата; 
	Если ВвестиДату(ДатаУстановкиКурса, НСтр("ru='Выберите дату установки курса.';uk='Виберіть дату установки курсу.'"), ЧастиДаты.Дата) Тогда
		
		// Если дата введена, заполним значение курса и кратности
		СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, ДатаУстановкиКурса);
		Курс            = СтруктураВалюты.Курс;
		Кратность       = СтруктураВалюты.Кратность;

	КонецЕсли; 

КонецПроцедуры // ВыбратьКурсВалюты()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ ФОРМЫ

// Активизирует один из реквизитов при открытии документа.
//
// Параметры:
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура АктивизироватьРеквизитВФорме(ДокументОбъект, ФормаДокумента) Экспорт

	Если ФормаДокумента.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	// Структура - порядок актиизации реквизитов.
	// Активизируется первый не заполненный.
	СтруктураРеквизитов = Новый Структура();
	
	СтруктураРеквизитов.Вставить("Дата");
	СтруктураРеквизитов.Вставить("Номер");
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("Касса");
	СтруктураРеквизитов.Вставить("СчетОрганизации");
	СтруктураРеквизитов.Вставить("БанковскийСчет");
	СтруктураРеквизитов.Вставить("Склад");
	СтруктураРеквизитов.Вставить("СкладОрдер");
	СтруктураРеквизитов.Вставить("Контрагент");
	СтруктураРеквизитов.Вставить("Получатель");
	СтруктураРеквизитов.Вставить("Плательщик");
	СтруктураРеквизитов.Вставить("ФизЛицо");
	СтруктураРеквизитов.Вставить("Сотрудник");
	
	ЭлементВыбран = Ложь;

	Для Каждого Элемент Из СтруктураРеквизитов Цикл

		// Определим, есть ли ЭУ с таким именем.
		ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти(Элемент.Ключ);
		Если ЭлементУправления <> Неопределено Тогда // есть такой
			Если НЕ ЗначениеЗаполнено(ЭлементУправления.Значение)
			   И ЭлементУправления.Доступность
			   И ЭлементУправления.Видимость
			   И Не ЭлементУправления.ТолькоПросмотр Тогда 

				// Нашли не заполненный ЭУ. Делаем его текущим и прекращаем цикл.
				ФормаДокумента.ТекущийЭлемент = ЭлементУправления;
				ЭлементВыбран = Истина;
				Прервать;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; 
	
	Если НЕ ЭлементВыбран Тогда
		ТабличныеЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти;
		Если ТабличныеЧасти.Количество() > 0 Тогда
			ИмяТабличнойЧасти = ТабличныеЧасти[0].Имя;
			ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти(ИмяТабличнойЧасти);
			Если ЭлементУправления <> Неопределено Тогда
				ФормаДокумента.ТекущийЭлемент = ЭлементУправления;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // АктивизироватьРеквизитВФорме()

////////////////////////////////////////////////////////////////////////////////
//
// Активизирует один из реквизитов при открытии документа.
//
// Параметры:
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Функция АктивизироватьРеквизитВФормеЗУП(ДокументОбъект, ФормаДокумента, СтруктураРеквизитов = Неопределено) Экспорт

	// Структура - порядок актиизации реквизитов.
	// Активизируется первый не заполненный.
	Если ТипЗнч(СтруктураРеквизитов) <> Тип("Структура") Тогда
		СтруктураРеквизитов = Новый Структура;
		
		СтруктураРеквизитов.Вставить("Дата");
		ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти("Номер");
		Если ЭлементУправления <> Неопределено И Не ЭлементУправления.ТолькоПросмотр Тогда
			СтруктураРеквизитов.Вставить("Номер");
		КонецЕсли;
		СтруктураРеквизитов.Вставить("Организация");
		СтруктураРеквизитов.Вставить("ПериодРегистрации");
		СтруктураРеквизитов.Вставить("Сотрудник");
		СтруктураРеквизитов.Вставить("ФизЛицо");
		СтруктураРеквизитов.Вставить("Исполнитель");
		СтруктураРеквизитов.Вставить("КурсОбучения");
		СтруктураРеквизитов.Вставить("ДатаЗавершенияКурса");
		СтруктураРеквизитов.Вставить("Мероприятие");
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураРеквизитов Цикл
		// Определим, есть ли ЭУ с таким именем.
		ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти(Элемент.Ключ);
		Если ЭлементУправления = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЭлементУправления.Значение) Тогда
			// Нашли не заполненный ЭУ. Делаем его текущим и прекращаем цикл.
			ФормаДокумента.ТекущийЭлемент = ЭлементУправления;
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
	
КонецФункции // АктивизироватьРеквизитВФорме()


// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации = "", ДокументОбъект, ФормаДокумента) Экспорт

	ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	
	Если ПустаяСтрока(СтрокаВидаОперации) Тогда
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": ";
	Иначе
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": " + СтрокаВидаОперации + ". ";
	КонецЕсли;
		
	Если ДокументОбъект.ЭтоНовый() Тогда  
		Заголовок = Заголовок + НСтр("ru='Новый';uk='Новий'");
	Иначе
		Если ДокументОбъект.Проведен Тогда
			Заголовок = Заголовок + НСтр("ru='Проведен';uk='Проведено'");
		ИначеЕсли ДокументОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Заголовок = Заголовок + НСтр("ru='Не проведен';uk='Не проведений'");
		Иначе
			Заголовок = Заголовок + НСтр("ru='Записан';uk='Записаний'");
		КонецЕсли;
	КонецЕсли;
	
	ФормаДокумента.Заголовок = Заголовок;

КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Устанавливает видимость переданных колонок в табличной части документа.
//
// Параметры:
//  КолонкиТабПоля   - коллекция колонок табличного поля,
//  СтруктураКолонок - структура, содержащая имена колонок, видимость которых надор установить,
//  ПризнакВидимости - булево, признак видимости.
//
Процедура УстановитьВидимостьКолонок(КолонкиТабПоля, СтруктураКолонок, ПризнакВидимости) Экспорт

	Если ПризнакВидимости Тогда
		Для Каждого ТекКолонка из СтруктураКолонок Цикл
			ИмяКолонки                                   = ТекКолонка.Ключ;
			КолонкиТабПоля[ИмяКолонки].ИзменятьВидимость = Истина;
		КонецЦикла;
	Иначе
		Для Каждого ТекКолонка из СтруктураКолонок Цикл
			ИмяКолонки                                   = ТекКолонка.Ключ;
			КолонкиТабПоля[ИмяКолонки].ИзменятьВидимость = Ложь;
			КолонкиТабПоля[ИмяКолонки].Видимость         = Ложь;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьКолонок()

// Процедура устанавливает отбор по основной организации в указанно форме
//
Процедура УстановитьОтборПоОрганизации(Форма, УчетПоВсемОрганизациям, ОсновнаяОрганизация, ИмяРеквизитаСписка, СкрыватьКолонку = Истина, ИмяОтбора = "Организация") Экспорт

	// В том случае если учте ведется по одной организации необходимо установить мягкий отбор.
	// т.е. отбор, с возможностью его изменения.

	Если НЕ УчетПоВсемОрганизациям Тогда // Установлен режим учета по одной организации

		Если НЕ (ТипЗнч(Форма[ИмяРеквизитаСписка]) = Тип("ТаблицаЗначений")) Тогда // Элемент - табличное поле

			// Проверим - Если это связанный регитср сведений тогда не нужно устанавливать отбор - 
			// он уже установлен системой автоматически

			Если ИмяРеквизитаСписка = "РегистрСведенийСписок" Тогда

				// Возвможно это переход по кнопке ПЕрейти
				Если ТипЗнч(Форма.ПараметрОтборПоИзмерению) = Тип("Структура") Тогда
					Если ЗначениеЗаполнено(Форма.ПараметрОтборПоИзмерению) Тогда
						Возврат; // Это переход по кнопке Перейти - не нужно устанавливать отбор
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].ВидСравнения  = ВидСравнения.Равно;
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Использование = Истина;
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Значение      = ОсновнаяОрганизация;

			Форма.ЭлементыФормы[ИмяРеквизитаСписка].НастройкаОтбора[ИмяОтбора].Доступность = Ложь;

		КонецЕсли;

		Если СкрыватьКолонку Тогда

			Если НЕ Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки.Найти(ИмяОтбора) = Неопределено Тогда

				Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки[ИмяОтбора].Видимость         = Ложь;
				Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки[ИмяОтбора].ИзменятьВидимость = Ложь;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // УстановитьОтборПоОрганизации()

// Процедура устанавливает видимость переданных страниц формы на основании прав доступа текущего пользователя
// вызывается из обработчика формы ПередОткрытием 
//
// Параметры
//		ОбъектыМетаданных - соответствие, ключ - ЭУ страница формы, значение - объекты метаданных 
//		РеквизитыФормы	  - соответствие, ключ - ЭУ страница формы, значение - реквизиты формы для изменения доступности
//
Процедура СформироватьСтраницыФормы(ОбъектыМетаданных, РеквизитыФормы) Экспорт
	
	// цикл по страницам формы
	Для каждого ЭлементСоответствия Из ОбъектыМетаданных Цикл
		
		// это элемент управления - страницы формы
		СтраницаФормы = ЭлементСоответствия.Ключ; 
		
		// Массив содержащий объекты метаданных, редактируемые на странице формы
		МассивОбъектовМетаданных = ЭлементСоответствия.Значение;
		
		ДоступенПросмотр = МассивОбъектовМетаданных <> Неопределено;
		Если ДоступенПросмотр Тогда
			
			РазрешеноРедактирование = Истина;
			
			// цикл по объектам метаданных на странице
			Для каждого ОбъектМетаданных Из МассивОбъектовМетаданных Цикл
				
				РазрешеноРедактирование = РазрешеноРедактирование и ПравоДоступа("Редактирование", ОбъектМетаданных);
				ДоступенПросмотр 		= ДоступенПросмотр 		  и ПравоДоступа("Просмотр", ОбъектМетаданных);
				
				Если Не РазрешеноРедактирование и Не ДоступенПросмотр Тогда
					//на странице есть объект, по которому у пользователя нет прав
					//не проверяем другие объекты этой страницы
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтраницаФормы.Видимость = ДоступенПросмотр;
		Если ДоступенПросмотр и Не РазрешеноРедактирование Тогда
			// если доступен только просмотр страницы, запретим редактирование реквизитов этой страницы
			МассивЭлементовУправления = РеквизитыФормы.Получить(СтраницаФормы);
			Для каждого Элемент Из МассивЭлементовУправления Цикл
				Если ТипЗнч(Элемент) = Тип("ПолеВвода") или ТипЗнч(Элемент) = Тип("ТабличноеПоле")  или ТипЗнч(Элемент) = Тип("ПолеВыбора") Тогда
					Элемент.ТолькоПросмотр = Истина;
				ИначеЕсли ТипЗнч(Элемент) = Тип("Флажок") или ТипЗнч(Элемент) = Тип("Переключатель")
					или ТипЗнч(Элемент) = Тип("Надпись") Тогда
					Элемент.Доступность = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьСтраницыФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ГПУ ВВОДА ДАННЫХ

Процедура УстановитьСписокПоляВыбора(ПолеВыбора, Список) Экспорт

	ПрошлоеЗначение = ПолеВыбора.Значение;
	ПолеВыбора.СписокВыбора = Список;
	Если ЗначениеЗаполнено(ПрошлоеЗначение) Тогда
		Если  Список.НайтиПоЗначению(ПрошлоеЗначение) <> Неопределено Тогда
			Если НЕ ПолеВыбора.Значение = ПрошлоеЗначение Тогда
				ПолеВыбора.Значение = ПрошлоеЗначение;
			КонецЕсли;
		Иначе
			ПолеВыбора.Значение = Неопределено;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСписокПоляВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИНФОРМАЦИИ В ФОРМЕ

// Процедура определяет ситуацию, когда при изменении своей даты документ 
//  оказывается в другом периоде нумерации документов, и в это м случае
//  присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументОбъект         - контекст документа,из которого вызвана процедура 
//  НачальнаяДатаДокумента - начальная дата документа 
// 
Процедура ПроверитьНомерДокумента(ДокументОбъект, НачальнаяДатаДокумента) Экспорт   // в разработке

	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументОбъект.Метаданные().ПериодичностьНомера;

	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - ДокументОбъект.Дата;

	Иначе
		Возврат;

	КонецЕсли;

	Если РазностьДат <> 0 Тогда
		ДокументОбъект.Номер = "";
	КонецЕсли;

КонецПроцедуры // ПроверитьНомерДокумента()

// Функция спрашивает пользователя записать ли объект, или нет, если он новый
//
// Параметры
//  ФормаОбъекта - Форма объекта, из которой пытаются произвести действия
//
// Возвращаемое значение:
//   Булево - Объект записан или нет
//
Функция ЗаписатьНовыйОбъектВФорме(ФормаОбъекта) Экспорт

	Если ФормаОбъекта.ЭтоНовый() Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ФормаОбъекта.ЭтотОбъект.Ссылка)) Тогда
			ТекстВопроса = НСтр("ru='Для выполнения данной операции необходимо записать документ. Записать?';uk='Для виконання даної операції необхідно записати документ. Записати?'");
		Иначе // Справочник
			ТекстВопроса = НСтр("ru='Для выполнения данной операции необходимо записать элемент. Записать?';uk='Для виконання даної операції необхідно записати елемент. Записати?'");
		КонецЕсли; 
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		Иначе
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				Сообщить(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции // ЗаписатьНовыйОбъектВФорме()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ИНФОРМАЦИИ В ФОРМЕ

// Процедура возвращает паспортные данные физлица в виде строки
//
// Параметры: 
//  Валюта                         - Валюта, курс которой необходимо отобразить
//  Курс                           - курс, которой необходимо отобразить
//  Кратность                      - кратность, которую необходимо отобразить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СформироватьСкобки             - признак необходимости скобок
//
// Возвращаемое значение:
//  Строка с данными о курсе и кратности валюты
//
Функция ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, Курс, Кратность, ВалютаРегламентированногоУчета, СформироватьСкобки = Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Возврат "";

	Иначе
		Возврат ?(СформироватьСкобки, "(", "") + Кратность + " "
		      + СокрЛП(Валюта)
		      + " = "
		      + Курс + " " 
		      + СокрЛП(ВалютаРегламентированногоУчета)
		      + ?(СформироватьСкобки, ")", "");
	КонецЕсли;

КонецФункции // ПолучитьИнформациюКурсаВалютыСтрокой()

// Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции объектов метаданных,
// соответствующей перечислению видов операций для данного документа.
// Всем кнопкам назначается одно переданное действие.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа
//
// Параметры:
//  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить, 
//  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
//
Процедура УстановитьПодменюВыбораВидаОперации(ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации) Экспорт

	Для Каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
		Если Лев(ЭлементЗаполнения.Имя,7) = "Удалить" Тогда
			Продолжить;
		КонецЕсли;
		ПунктМеню = ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Имя, ТипКнопкиКоманднойПанели.Действие, 
		                                        ЭлементЗаполнения.Синоним, ОбъектОбработкиВыбораОперации);
		ПунктМеню.ИзменяетДанные = Истина;
	КонецЦикла;

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()

// Процедура вызывается формирования кнопки "Подбор" для формы видов расчетов Планов Видов Расчетов.
//
// Параметры:
//  СсылкаПВР 	   	   - ссылка на ПВР;
//  ФормаЭлемента 	   - Форма вида расчета.
//  ВедущиеВидыРасчета - булево, Истина - если нужно формировать кнопку в командной
//						 панели ТЧ "ВедущиеВидыРасчета".
//
Процедура СоздатьКнопкуПодбораДляПВР(СсылкаПВР, ФормаЭлемента, ВедущиеВидыРасчета = Ложь, ЯвляетсяБазойДля = Ложь) Экспорт

	МассивДоступныхТипов = Новый Массив;
	
	КоллекцияБазовыхВидовРасчета = Метаданные.ПланыВидовРасчета[СсылкаПВР.Метаданные().Имя].БазовыеВидыРасчета;
	
	Если КоллекцияБазовыхВидовРасчета.Количество() > 1 Тогда
		
		ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
		
		Если ВедущиеВидыРасчета Тогда
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
		КонецЕсли;
		
		Для Каждого СтрокаКолекции Из КоллекцияБазовыхВидовРасчета Цикл
			
			ДействиеПоКнопке = Новый Действие("КоманднаяПанельБазовыеВидыРасчетаПодборПодМеню");
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.Кнопки.Добавить(СтрокаКолекции.Имя, ТипКнопкиКоманднойПанели.Действие, СтрокаКолекции.Синоним, ДействиеПоКнопке);
			
			Если ВедущиеВидыРасчета Тогда
				
				ДействиеПоКнопке = Новый Действие("КоманднаяПанельВедущиеВидыРасчетаПодМеню");
				ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор.Кнопки.Добавить(СтрокаКолекции.Имя, ТипКнопкиКоманднойПанели.Действие, СтрокаКолекции.Синоним, ДействиеПоКнопке);
				
				МассивДоступныхТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + СтрокаКолекции.Имя));
				
			КонецЕсли;
			
		КонецЦикла; 
		
	Иначе
		
		ДействиеПоКнопке = Новый Действие("КоманднаяПанельБазовыеВидыРасчетаПодбор");
		ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
		ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.Действие  = ДействиеПоКнопке;
		
		Если ВедущиеВидыРасчета Тогда
			
			ДействиеПоКнопке = Новый Действие("КоманднаяПанельВедущиеВидыРасчетаПодбор");
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор.Действие = ДействиеПоКнопке;
			
			Для Каждого СтрокаКолекции Из КоллекцияБазовыхВидовРасчета Цикл
				
				МассивДоступныхТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + СтрокаКолекции.Имя));
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если ВедущиеВидыРасчета Тогда
		
		ФормаЭлемента.ЭлементыФормы.ВедущиеВидыРасчета.Колонки.ВидРасчета.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов(МассивДоступныхТипов);
		Если КоллекцияБазовыхВидовРасчета.Количество() = 1 Тогда
			ФормаЭлемента.ЭлементыФормы.ВедущиеВидыРасчета.Колонки.ВидРасчета.ЭлементУправления.ВыбиратьТип = Ложь;
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ЯвляетсяБазойДля Тогда
		
		// получим список ПВР для которых мы базовые
		ЭталонныйПВР = СсылкаПВР.Метаданные().Имя;
		СтруктураДоступныхТипов = Новый Структура;
		Для каждого ТекПВР Из Метаданные.ПланыВидовРасчета Цикл
			Если Найти(ТекПВР.Имя,"Удалить") <> 0 Тогда
				Продолжить;
			КонецЕсли;	
			Для каждого ТекБазовыйПВР Из ТекПВР.БазовыеВидыРасчета Цикл
				Если ТекБазовыйПВР.Имя = ЭталонныйПВР Тогда
					СтруктураДоступныхТипов.Вставить(ТекПВР.Имя, ТекПВР.Синоним);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		//	Если элемент один тогда кнопка сама должна выполнять действие 
		//	если несколько надо выдавать список
		
		Если СтруктураДоступныхТипов.Количество() = 1 Тогда
			
			ДействиеПоКнопке = Новый Действие("КоманднаяПанельЯвляетсяБазойДляПодбор");
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельЯвляетсяБазойДля.Кнопки.Подбор.ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельЯвляетсяБазойДля.Кнопки.Подбор.Действие  = ДействиеПоКнопке;
			
			ФормаЭлемента.ЭлементыФормы.ЯвляетсяБазойДля.Колонки.ВидРасчета.ЭлементУправления.ВыбиратьТип = Ложь;
			ФормаЭлемента.ЭлементыФормы.ЯвляетсяБазойДля.Колонки.ВидРасчета.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов(СтруктураДоступныхТипов);
			
		Иначе	
			
			МассивДоступныхТипов = Новый Массив;
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельЯвляетсяБазойДля.Кнопки.Подбор.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
			
			Для каждого СтрокаКолекции Из СтруктураДоступныхТипов Цикл
				
				ДействиеПоКнопке = Новый Действие("КоманднаяПанельЯвляетсяБазойДляПодМеню");
				ФормаЭлемента.ЭлементыФормы.КоманднаяПанельЯвляетсяБазойДля.Кнопки.Подбор.Кнопки.Добавить(СтрокаКолекции.Ключ, ТипКнопкиКоманднойПанели.Действие, СтрокаКолекции.Значение, ДействиеПоКнопке);
				МассивДоступныхТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + СтрокаКолекции.Ключ));
				
			КонецЦикла;
			
			ФормаЭлемента.ЭлементыФормы.ЯвляетсяБазойДля.Колонки.ВидРасчета.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов(МассивДоступныхТипов);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	
КонецПроцедуры // СоздатьКнопкуПодбораДляПВР()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ и ФУНКЦИИ ИНФОРМИРОВАНИЯ ПОЛЬЗОВАТЕЛЯ

// Проверяет модифицированность документа перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Документ - (ДокументОбъект.*) - проверяемый документ
//
Функция ПроверитьМодифицированность(Документ, ТекстДействия = Неопределено) Экспорт
	
	ТекстДействия = ?(ТекстДействия=Неопределено,НСтр("ru='Для печати';uk='Для друку'"),ТекстДействия);
	
	Результат = Ложь;

	Если Документ.Модифицированность() Тогда

		Проведен    = Метаданные.Документы.Содержит(Документ.Метаданные()) И Документ.Проведен;
		СтрПроведен = ?(Проведен, НСтр("ru=' и провести';uk=' та провести'"),"");

		Ответ = Вопрос(НСтр("ru='Документ изменен. ';uk='Документ змінений. '") + ТекстДействия + НСтр("ru=' его необходимо записать';uk=' його необхідно записати'")+ СтрПроведен +НСтр("ru='."
"Записать';uk='."
"Записати'") + СтрПроведен + "?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               НСтр("ru='Документ изменен';uk='Документ змінений'"));

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			Если Проведен Тогда

				ДатаДока = НачалоДня(Документ.Дата);
				ДатаДня  = НачалоДня(ТекущаяДата());

				Попытка
					
					Если ДатаДока = ДатаДня и Документ.Метаданные().ОперативноеПроведение = Метаданные.СвойстваОбъектов.ОперативноеПроведение.Разрешить Тогда
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
					Иначе
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					КонецЕсли;

				Исключение

					Предупреждение(НСтр("ru='Операция не выполнена!';uk='Операція не виконана!'"));
					Возврат Результат = Истина;

				КонецПопытки;

			Иначе
				Документ.Записать();
			КонецЕсли;

			Результат = Истина;

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированность()

// Проверяет модифицированность документа / справочника перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Объект - (ДокументОбъект.*, СправочникОбъект.*) - проверяемый документ / справочник
//  Форма    - форма проверяемого документа / справочника
//
Функция ПроверитьМодифицированностьВФорме(Объект, Форма) Экспорт

	Результат = Ложь;

	Если Форма.Модифицированность Тогда

		Проведен    = Метаданные.Документы.Содержит(Объект.Метаданные()) И Объект.Проведен;
		СтрПроведен = ?(Проведен, НСтр("ru=' и провести';uk=' та провести'"),"");
		
		Ответ = Вопрос(НСтр("ru='Объект изменен. Для печати его необходимо записать ';uk=""Об'єкт змінений. Для друку його необхідно записати """)+ СтрПроведен +НСтр("ru='."
"Записать';uk='."
"Записати'") + СтрПроведен + "?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               НСтр("ru='Объект изменен';uk=""Об'єкт змінений"""));

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			Попытка
				
				Если Проведен Тогда
	            	Результат  = Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
				Иначе
					Результат = Форма.ЗаписатьВФорме();				
				КонецЕсли;
				
			Исключение
				Результат = Ложь;
			КонецПопытки;	

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированность()

// Процедура вызывается для вывода сообщений пользователю
//
// Параметры:
//  СсылкаСправочника - ссылка на справочник, объект которого проверяется;
//  ИмяРеквизита - строка, имя реквизита, который не заполнен.
//
Процедура СообщитьПользователюНезаполненРеквизит(СсылкаСправочника, ИмяРеквизита) Экспорт

	ТекстСообщения = НСтр("ru='Перед записью в элементе справочника ""';uk='Перед записом елемента довідника ""'") + СсылкаСправочника.Метаданные().Синоним + НСтр("ru='"" необходимо заполнить ""';uk='"" необхідно заповнити ""'") + ИмяРеквизита + """!";

	Сообщить(ТекстСообщения, СтатусСообщения.Важное);

КонецПроцедуры // СообщитьПользователюНезаполненРеквизит()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ ДОКУМЕНТОВ

// Процедура выполняет открытие формы работы со свойствами документа
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  ФормаДокумента - форма редактируемого документа
//
Процедура ОткрытьСвойстваДокумента(ДокументОбъект, ФормаДокумента) Экспорт

	Если ДокументОбъект.ЭтоНовый() Тогда
		Вопрос = НСтр("ru='Перед началом работы со свойствами необходимо записать документ. Записать?';uk='Перед початком роботи із властивостями необхідно записати документ. Записати?'");
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ФормаДокумента.ЗаписатьВФорме();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ФормаДокумента, ДокументОбъект.Ссылка);

	Форма.ОбъектОтбораЗначений   = ДокументОбъект.Ссылка;
	Форма.ОбъектОтбораНазначений = ДокументОбъект.Ссылка;

	Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
	Форма.Открыть();

КонецПроцедуры // ОткрытьСвойстваДокумента()

// Процедура выполняет открытие формы работы с категориями документа
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  ФормаДокумента - форма редактируемого документа
//
Процедура ОткрытьКатегорииДокумента(ДокументОбъект, ФормаДокумента) Экспорт

	Если ДокументОбъект.ЭтоНовый() Тогда
		Вопрос = НСтр("ru='Перед началом работы с категориями необходимо записать документ. Записать?';uk='Перед початком роботи з категоріями необхідно записати документ. Записати?'");
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ФормаДокумента.ЗаписатьВФорме();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Форма = Обработки.КатегорииОбъекта.ПолучитьФорму("КатегорииОбъекта", ФормаДокумента, ДокументОбъект.Ссылка);

	Форма.ОбъектОтбораКатегорий = ФормаДокумента.Ссылка;

	Форма.ПрочитатьЗаполнитьКатегорииОбъекта();
	Форма.Открыть();

КонецПроцедуры // ОткрытьКатегорииДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ИСТОРИЕЙ ВВОДА ЗНАЧЕНИЙ

// Функция по для переданной строке пути возвращает список заполненных значений
//
// Параметры
//  Путь - Строка .с указанием объекта метаданных и поля ввода 
// сокращением
//
// Возвращаемые значения
//  Возвращается список значений с историей ввода в это поле
//
Функция ПолучитьСписокИсторииВвода(Путь) Экспорт

	СтрокаИстории = ВосстановитьЗначение(Путь);

	Если СтрокаИстории = Неопределено Тогда
		Возврат Новый СписокЗначений();
	КонецЕсли;

	СписокИстории = ЗначениеИзСтрокиВнутр(СтрокаИстории);

	Если ТипЗнч(СписокИстории) = Тип("СписокЗначений") Тогда
		Для Каждого ЭлементСписка из СписокИстории Цикл
			Если ТипЗнч(ЭлементСписка.Значение) <> Тип("Строка") Тогда
				СписокИстории.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;

		Для Каждого ЭлементСписка из СписокИстории Цикл
			Если ТипЗнч(ЗначениеИзСтрокиВнутр(ЭлементСписка.Значение)) <> Тип("Строка") Тогда
				ЭлементСписка.Значение = ЗначениеИзСтрокиВнутр(ЭлементСписка.Значение);
				ЭлементСписка.Представление = Строка(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;

		Возврат СписокИстории;

	Иначе
		Возврат Новый СписокЗначений();

	КонецЕсли;

КонецФункции // ПолучитьСписокИсторииВвода()

// Процедура по для переданной строке пути и строковому представлению //
//
// Параметры
//  Название - Строка .для которой определяется необходимость дополнения 
// сокращением
//  Уровень - уровень, для которго необходимо составить список сокращений
//
Процедура ДополнитьСписокИсторииВвода(Путь, Знач Значение) Экспорт

	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;

	СтрокаИстории = ВосстановитьЗначение(Путь);

	Если СтрокаИстории = Неопределено Тогда
		СписокИстории = Новый СписокЗначений();
	Иначе
		СписокИстории = ЗначениеИзСтрокиВнутр(СтрокаИстории);
	КонецЕсли;

	Если ТипЗнч(СписокИстории) <> Тип("СписокЗначений") Тогда
		СписокИстории = Новый СписокЗначений();
	КонецЕсли;

	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Значение = ЗначениеВСтрокуВнутр(Значение);
	КонецЕсли;

	Если СписокИстории.НайтиПоЗначению(Значение) <> Неопределено Тогда
		 СписокИстории.Удалить(СписокИстории.НайтиПоЗначению(Значение));
	КонецЕсли;

	СписокИстории.Вставить(0, Значение, Значение);

	Пока СписокИстории.Количество() > 5 Цикл
		СписокИстории.Удалить(СписокИстории.Получить(СписокИстории.Количество() - 1));
	КонецЦикла;

	СохранитьЗначение(Путь, ЗначениеВСтрокуВнутр(СписокИстории));

КонецПроцедуры // ДополнитьСписокИсторииВвода()

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Печатает движения документа
//
// Параметры:
//  ДокументСсылка - ссылка на документ, движения которого печатаем
//
Процедура НапечататьДвиженияДокумента(ДокументСсылка) Экспорт
	
	Форма = Отчеты.ДвиженияДокумента.ПолучитьФорму(,,Новый УникальныйИдентификатор);
	Форма.Открыть();
	Форма.Документ = ДокументСсылка;
	Форма.СформироватьИВывестиОтчет();

КонецПроцедуры // НапечататьДвиженияДокумента()

// Процедура инициирует диалог выбора времени.
//
// Параметры
//  Форма - Форма, в которой производится выбор
//  ДатаВремен - дата для выбора времени
//  ТекЭлемент - элемент формы
//  ПолныйГод - булево, показывать год 4-мя цифрами или 2-мя
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ВыбратьВремяДня(Форма, ДатаВремен, ТекЭлемент, Пользователь, ПоГрафику = Истина, ПолныйГод = Истина) Экспорт

	ДлинаЧаса = 3600;
	
	Если ПоГрафику Тогда
		СтруктураРабочегоВремени = УправлениеКонтактами.ОпределитьНачалоИОкончениеРабочегоДняПользователя(Пользователь, ДатаВремен);
		
		НачалоРабочегоДняКонстанта    = СтруктураРабочегоВремени.ДатаНачала;
		ОкончаниеРабочегоДняКонстанта = СтруктураРабочегоВремени.ДатаОкончания;
	Иначе
		НачалоРабочегоДняКонстанта      = '00010101000000';
		ОкончаниеРабочегоДняКонстанта   = '00010101235959';
	КонецЕсли;
		
	СписокВремен = Новый СписокЗначений;
	НачалоРабочегоДня = НачалоЧаса(НачалоДня(ДатаВремен) + Час(НачалоРабочегоДняКонстанта) * ДлинаЧаса + Минута(НачалоРабочегоДняКонстанта)*60);
	ОкончаниеРабочегоДня = КонецЧаса(НачалоДня(ДатаВремен) + Час(ОкончаниеРабочегоДняКонстанта) * ДлинаЧаса + Минута(ОкончаниеРабочегоДняКонстанта)*60) - ДлинаЧаса;

	а = 0;
	ВремяСписка = НачалоРабочегоДня; 
	Пока НачалоЧаса(ВремяСписка) <= НачалоЧаса(ОкончаниеРабочегоДня) Цикл
		ВремяСписка = НачалоРабочегоДня + а * ДлинаЧаса / 2; // по полчаса
		СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гг" + ?(ПолныйГод,"гг","") + " ЧЧ:мм'"));
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(ДатаВремен);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = Форма.ВыбратьИзСписка(СписокВремен, ТекЭлемент);
	Иначе
		ВыбранноеВремя = Форма.ВыбратьИзСписка(СписокВремен, ТекЭлемент, НачальноеЗначение);
	КонецЕсли; 

	Если ВыбранноеВремя <> Неопределено Тогда
		ДатаВремен = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры // ВыбратьВремя()

// Процедура выводить форму структуры подчиненности документа
Процедура ПоказатьСтруктуруПодчиненностиДокумента(ДокументСсылка) Экспорт
	
	ФормаСтруктурыПодчиненности = ПолучитьОбщуюФорму("ФормаСтруктурыПодчиненности");
	Если ФормаСтруктурыПодчиненности.Открыта() Тогда
		ФормаСтруктурыПодчиненности.Закрыть();
	КонецЕсли;
	ФормаСтруктурыПодчиненности.ДокументСсылка = ДокументСсылка;
	ФормаСтруктурыПодчиненности.Открыть();
	 
КонецПроцедуры

// Вызывается в обработчике события "Начало выбора" при выборе счета.
// используется для яильтрации по признаку забалансовый
//
Процедура ВыборСчета(Элемент, СтандартнаяОбработка, Флаг) Экспорт

	СтандартнаяОбработка = Ложь;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Флаг", Флаг);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Забалансовый = &Флаг";
	ВыборкаСчетов = Запрос.Выполнить().Выбрать();
	СписокСчетов  = Новый СписокЗначений;
	Пока ВыборкаСчетов.Следующий() Цикл
		СписокСчетов.Добавить(ВыборкаСчетов.Счет);
	КонецЦикла;

	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора("ФормаВыбора", Элемент,);

	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Значение      = СписокСчетов;

	ФормаВыбора.ЭлементыФормы.Список.НастройкаОтбора.Ссылка.Доступность = Ложь;

	ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;

	ФормаВыбора.Открыть();

Конецпроцедуры // ВыборСчета

// Показывает веб-страницы в обработке Обозреватель  
//
// Параметры
//  АдресСтраницы  – Строка – адрес просматриваемой страницы
//  ЗаголовокОкна  – Строка – заголовок окна обработки
//  КлючУникальностиФормы - произвольный, ключ уникальности формы обработки Обозреватель
//
// Если передается пустая строка АдресСтраницы, то в обработке Обозреватель 
// просматривается веб-страница конфигурации
//  
Процедура ПоказатьВебСтраницу(АдресСтраницы = "", ЗаголовокОкна = "", КлючУникальностиФормы = Неопределено) Экспорт 
	
	Форма = Обработки.Обозреватель.ПолучитьФорму("Форма",,КлючУникальностиФормы);
	Если ЗначениеЗаполнено(ЗаголовокОкна) Тогда
		Форма.Заголовок = ЗаголовокОкна;
	КонецЕсли;
	Форма.СтартоваяСтраница = АдресСтраницы;
	Форма.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ В ФОРМЕ

// Процедура предназначена для заполнения реквизитов формы,
// вызывается в обработчиках событий "ПриОткрытии" в модулях форм обработок.
//
// Параметры:
//  ЗаполняемаяФорма  - форма, реквизиты которой следует заполнить,
//  ТекПользователь - ссылка на справочник, определяет текущего пользователя  
//
Процедура ЗаполнитьРеквизитыФормы(ЗаполняемаяФорма, ТекПользователь) Экспорт
	
	Элементы	=	ЗаполняемаяФорма.ЭлементыФормы;
	Для Каждого Элемент из	Элементы	Цикл
		
		Если	Элемент.Имя	=	"Организация"	тогда
			Элемент.Значение	=	УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
		КонецЕсли;
		
	КонецЦикла;
	//Если	Элементы.Найти()	<>	Неопределено
	//КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыФормы()

Процедура УстановитьДоступностьЯчееекПоСчету(Счет, Субконто1, Субконто2, Субконто3) Экспорт
	
	ЭлементыСубконто = Новый Структура("Субконто1,Субконто2,Субконто3", Субконто1, Субконто2, Субконто3);
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		ЭлементыСубконто["Субконто" + Сч].Доступность = (Сч <= ЧислоАктивныхСубконто);
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает видимость приказа в документе
//
Процедура УстановитьВидимостьПриказа(ЗаполняемаяФорма,Организация,УчетнаяПолитикаПоПерсоналуОрганизаций) Экспорт
	
	Элементы	=	ЗаполняемаяФорма.ЭлементыФормы;
	Для Каждого Элемент из	Элементы	Цикл
		Если Строка(ТипЗнч(Элемент)) = "Табличное поле" Тогда
			Колонки	= Элемент.Колонки;
			Для Каждого Колонка Из Колонки Цикл
				Если Колонка.Имя = "Приказ" Тогда
					Колонка.Видимость			= УчетнаяПолитикаПоПерсоналуОрганизаций[Организация].ПоддержкаВнутреннегоСовместительства;
					Колонка.ИзменятьВидимость	= УчетнаяПолитикаПоПерсоналуОрганизаций[Организация].ПоддержкаВнутреннегоСовместительства;		
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если (Элемент.Имя = "Приказ") или (Элемент.Имя = "НадписьПриказОПриеме") Тогда
				Элемент.Видимость			= УчетнаяПолитикаПоПерсоналуОрганизаций[Организация].ПоддержкаВнутреннегоСовместительства;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидимостьТабельногоНомера(ЗаполняемаяФорма,ПоддержкаТабельногоНомера) Экспорт
	
	Элементы	=	ЗаполняемаяФорма.ЭлементыФормы;
	Для Каждого Элемент из	Элементы	Цикл
		Если Строка(ТипЗнч(Элемент)) = "Табличное поле" Тогда
			Колонки	= Элемент.Колонки;
			Для Каждого Колонка Из Колонки Цикл
				Если (Колонка.Имя = "СтарыйТабельныйНомер") Или (Колонка.Имя = "ТабельныйНомер") Тогда
					Колонка.Видимость			= ПоддержкаТабельногоНомера;
					Колонка.ИзменятьВидимость	= ПоддержкаТабельногоНомера;		
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеПоОгранизацииДаннымиПоУмолчанию(ЗаполняемаяФорма, ПараметрОтборПоРегистратору, ИспользоватьГоловнуюОрганизацию = Истина, ТекущийПользователь, ТекстЗаголовка = "") Экспорт
	
	Если ЗначениеЗаполнено(ПараметрОтборПоРегистратору) Тогда
		
		МетаданныеДокумента = ПараметрОтборПоРегистратору.Метаданные();
		
		Если МетаданныеДокумента.Реквизиты.Найти("СторнируемыйДокумент") <> Неопределено Тогда
			
			МетаданныеДокумента 		= ПараметрОтборПоРегистратору.СторнируемыйДокумент.Метаданные();
			ПараметрОтборПоРегистратору = ПараметрОтборПоРегистратору.СторнируемыйДокумент;
			
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
			Организация = ПараметрОтборПоРегистратору.Организация;
			
			ЗаполняемаяФорма.Отбор.Организация.Значение = Организация;
			ЗаполняемаяФорма.Заголовок = ТекстЗаголовка + Организация.Наименование;
			ЗаполняемаяФорма.ЭлементыФормы.Организация.ТолькоПросмотр = Истина
			
		КонецЕсли;
		
		ЗаполняемаяФорма.Отбор.Организация.Использование = Истина;
		
	Иначе
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяОрганизация");
		ЗаполняемаяФорма.Отбор.Организация.Значение = Организация;
		ЗаполняемаяФорма.Заголовок = ТекстЗаголовка + Организация.Наименование;
	    ЗаполняемаяФорма.Отбор.Организация.Использование = Не Организация.Пустая();

	КонецЕсли;
КонецПроцедуры

Процедура ОтобразитьПоляПоказателейСхемМотивации(Форма) Экспорт
	
	СпособРасчета = Форма.СпособРасчета;
	
	СворачиватьПанельФормулы = Не ЗначениеЗаполнено(СпособРасчета);
	Форма.ЭлементыФормы.ПанельПредставлениеФормулы.Свертка = ?(СворачиватьПанельФормулы, РежимСверткиЭлементаУправления.Верх, РежимСверткиЭлементаУправления.Нет);
	
КонецПроцедуры //ЭтаФорма

// Функция определяет начало и окончание рабочего дня пользователя, по его графику работы
//
// Параметры
//  Пользователь - СправочникСсылка.Пользователи, пользователь по которому определяются
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ОпределитьНачалоИОкончаниеРабочегоДняПользователя(Пользователь, РабочаяДата) Экспорт

	ДатаНачала      = '00010101000000';
	ДатаОкончания   = '00010101235959';
	НайденныйГрафик = Неопределено;
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
	
		Если НЕ Пользователь.ФизЛицо.Пустая() Тогда
		
			НайденныйГрафик = РегистрыСведений.Работники.ПолучитьПоследнее(РабочаяДата, Новый Структура("ФизЛицо", Пользователь.ФизЛицо)).ГрафикРаботы;
			
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(НайденныйГрафик) Тогда
		
			НайденныйГрафик = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ГрафикРаботы");
		
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НайденныйГрафик) И ТипЗнч(НайденныйГрафик) = Тип("СправочникСсылка.ГрафикиРаботы") Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ГрафикРаботы", НайденныйГрафик);
		Запрос.УстановитьПараметр("Дата", НачалоДня(РабочаяДата));
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МИНИМУМ(ВремяРаботы.ВремяНачала) КАК ВремяНачала,
			|	МАКСИМУМ(ВремяРаботы.ВремяОкончания) КАК ВремяОкончания
			|ИЗ
			|	(ВЫБРАТЬ
			|		ГрафикиРаботыПериодыСмены.ВремяНачала КАК ВремяНачала,
			|		ГрафикиРаботыПериодыСмены.ВремяОкончания КАК ВремяОкончания
			|	ИЗ
			|		Справочник.ГрафикиРаботы.ПериодыСмены КАК ГрафикиРаботыПериодыСмены
			|	
			|	ГДЕ
			|		ГрафикиРаботыПериодыСмены.Ссылка = &ГрафикРаботы
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		СменыПериодыСмены.ВремяНачала,
			|		СменыПериодыСмены.ВремяОкончания
			|	ИЗ
			|		Справочник.ГрафикиРаботы.Смены КАК ГрафикиРаботыСмены
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Смены.ПериодыСмены КАК СменыПериодыСмены
			|			ПО ГрафикиРаботыСмены.Смена = СменыПериодыСмены.Ссылка
			|	
			|	ГДЕ
			|		ГрафикиРаботыСмены.Ссылка = &ГрафикРаботы) КАК ВремяРаботы
			|";
		
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДатаНачала = Выборка.ВремяНачала;
			Если ЗначениеЗаполнено(Выборка.ВремяОкончания) Тогда
				ДатаОкончания = Выборка.ВремяОкончания;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	СтруктураВозврата = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания);
	
	Возврат СтруктураВозврата;
	
КонецФункции // ОпределитьНачалоИОкончаниеРабочегоДняПользователя()

// Функция Определяет индекс картинки
//
// Параметры
//  ВидСобытия - ПеречислениеСсылка.ВидыСобытий
//
// Возвращаемое значение:
//  Индекс - число
//
Функция ОпределитьИндексКартинкиВидаСобытия(Объект,ТипСобытия = Неопределено) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.Событие") Тогда
		ВидСобытия = Объект.ВидСобытия;
		ТипСобытия = Объект.ТипСобытия;
	Иначе
		ВидСобытия = Объект;
	КонецЕсли;
	
	Если ТипЗнч(ВидСобытия) = Тип("ПеречислениеСсылка.ВидыСобытий") Тогда
		
		Если ВидСобытия = Перечисления.ВидыСобытий.ТелефонныйЗвонок Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 14;
			Иначе
				Возврат 9;
			КонецЕсли;
		ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 15;
			Иначе
				Возврат 10;
			КонецЕсли;
		ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 16;
			Иначе
				Возврат 11;
			КонецЕсли;
		ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ПочтовоеПисьмо Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 17;
			Иначе
				Возврат 12;
			КонецЕсли;
		Иначе
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 13;
			Иначе
				Возврат 8;
			КонецЕсли;
		КонецЕсли;
			
	Иначе
		Возврат 21;
	КонецЕсли;

КонецФункции // ОпределитьИндексКартинкиВидаСобытия()

// Функция Определяет картинку для напоминания
	//
	// Параметры
	//  Напоминание - Произвольный, объект напоминания
	//  ТипСобытия  - тип события, если не указан - определяется по напоминанию
	//
	// Возвращаемое значение:
	//  Картинка - Картинка
	//
Функция ПолучитьКартинкуНапоминания(Напоминание,ТипСобытия = Неопределено) Экспорт
	
	ИндексВозврата = ОпределитьИндексКартинкиВидаСобытия(Напоминание,ТипСобытия);
	
	Если ИндексВозврата = 15 Тогда
		Возврат БиблиотекаКартинок.ЛичнаяВстречаИсходящяя;
		
	ИначеЕсли ИндексВозврата = 10 Тогда
		Возврат БиблиотекаКартинок.ЛичнаяВстречаВходящяя;
		
	ИначеЕсли ИндексВозврата = 17 Тогда
		Возврат БиблиотекаКартинок.ПочтовоеПисьмоИсходящее;
		
	ИначеЕсли ИндексВозврата = 12 Тогда
		Возврат БиблиотекаКартинок.ПочтовоеПисьмоВходящее;
		
	ИначеЕсли ИндексВозврата = 13 Тогда
		Возврат БиблиотекаКартинок.ПрочееСобытиеИсходящее;
		
	ИначеЕсли ИндексВозврата = 8 Тогда
		Возврат БиблиотекаКартинок.ПрочееСобытиеВходящее;
		
	ИначеЕсли ИндексВозврата = 14 Тогда
		Возврат БиблиотекаКартинок.ТелефонныйЗвонокИсходящий;
		
	ИначеЕсли ИндексВозврата = 9 Тогда
		Возврат БиблиотекаКартинок.ТелефонныйЗвонокВходящий;
		
	ИначеЕсли ИндексВозврата = 16 Тогда
		Возврат БиблиотекаКартинок.ЭлектронноеПисьмоИсходящее;
		
	ИначеЕсли ИндексВозврата = 11 Тогда
		Возврат БиблиотекаКартинок.ЭлектронноеПисьмоВходящее;
		
	ИначеЕсли ИндексВозврата = 21 Тогда
		Возврат Новый Картинка;
		
	Иначе
		Возврат БиблиотекаКартинок.Важно;
		
	КонецЕсли; 
	
КонецФункции //ПолучитьКартинкуНапоминания()

// Формирует и устанавливает текст заголовка формы справочника
//
// Параметры:
//  СтрокаВида 		 - строка вида, 
//  СправочникОбъект - объект справочника, 
//  ФормаСправочника - форма справочника.
//
Процедура УстановитьЗаголовокФормыСправочника(СтрокаВида = "", СправочникОбъект, ФормаСправочника) Экспорт

	ФормаСправочника.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	
	Если ПустаяСтрока(СтрокаВида) Тогда
		Заголовок = СправочникОбъект.Метаданные().Синоним + ": ";
	Иначе
		Заголовок = СправочникОбъект.Метаданные().Синоним + ": " + СтрокаВида + ". ";
	КонецЕсли;
		
	Если СправочникОбъект.ЭтоНовый() Тогда  
		Заголовок = Заголовок + "Новый";
	КонецЕсли;
	
	ФормаСправочника.Заголовок = Заголовок;

КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

//Функция возвращает список подразделений организации, соответствующих 
//подразделению и организации в регистре сведений 
//СоответствиеПодразделенийИПодразделенийОрганизаций 
// Параметры:
//  Подразделение - Справочник Подразделения,
//  Организации   - Справочник Организации,
Функция ПолучитьСписокПодразделенийОрганизаций(Подразделение,Организация)Экспорт 
	
	СписокВыбора = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации
	               |ИЗ
	               |	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
	               |
	               |ГДЕ
	               |	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение = &Подразделение И
	               |	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации <> &ПустоеПодразделениеОрганизации И
	               |	СоответствиеПодразделенийИПодразделенийОрганизаций.Организация = &Организация";
				   
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ПустоеПодразделениеОрганизации",Справочники.ПодразделенияОрганизаций.ПустаяСсылка());

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.ПодразделениеОрганизации);
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

// Процедура вызывается из обработчиков событий изменения организации и принадлежности к бухучету
// заполняет подразделение организации если может:))
Процедура ЗаполнениеПодразделенияОрганизацииПоРегистру(ОтражатьВБухгалтерскомУчете,
													   ПодразделениеОрганизации,
													   Подразделение,
													   Организация) Экспорт
													   
	Если Не  ОтражатьВБухгалтерскомУчете Или  НЕ ЗначениеЗаполнено(Подразделение) 
		 Или НЕ ЗначениеЗаполнено(Организация) тогда
		 // тут делать нечего
		Возврат;
	КонецЕсли;
													   
	СписокВыбора = ПолучитьСписокПодразделенийОрганизаций(Подразделение,Организация);
	
	Если СписокВыбора.Количество()=0 тогда
		Возврат;
	КонецЕсли;
	
	// если в списке 1 элемент и подразделение организации заполнено -
	// спросим все - таки пользователя хочет ли он такого заполнения
	// если не заполнено - просто подставляем
	Если СписокВыбора.Количество()=1 тогда
		мПодразделениеОрганизации = СписокВыбора[0].Значение;
		Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) тогда
			ПодразделениеОрганизации = мПодразделениеОрганизации;
		ИначеЕсли ПодразделениеОрганизации <> мПодразделениеОрганизации тогда
			Если Вопрос(НСтр("ru='Заменить значение подразделения организации ""';uk='Замінити значення підрозділу організації ""'")
				+ ПодразделениеОрганизации+ НСтр("ru='"" на ""';uk='"" на ""'")
				+ мПодразделениеОрганизации+ """ ?",
				РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
				ПодразделениеОрганизации = мПодразделениеОрганизации;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет вычисляемую колонку ТЧ документа "ТабельныйНомерСтрока"
//
// Параметры
//  ТЧДокумента  – Табличное поле
//  ОформленияСтрок – Коллекция значений типа ОформлениеСтроки табличного поля ТЧДокумента
//
Процедура УстановитьЗначенияКолонкиТабельныйНомерСтрока(ТЧДокумента, ОформленияСтрок, КодПоНазначению = Ложь) Экспорт
	
	Если ТЧДокумента.Колонки.Найти("ТабельныйНомерСтрока") = Неопределено 
		Или Не ТЧДокумента.Колонки.ТабельныйНомерСтрока.Видимость Тогда
		Возврат;
	КонецЕсли;

	МассивСотрудников = Новый Массив;
	Если КодПоНазначению Тогда
		Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
			МассивСотрудников.Добавить(СтрокаТабличнойЧасти.ДанныеСтроки.Назначение);
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
			МассивСотрудников.Добавить(СтрокаТабличнойЧасти.ДанныеСтроки.Сотрудник);
		КонецЦикла;
	КонецЕсли;

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Код КАК ТабельныйНомер,
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&парамМассивСотрудников)";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("парамМассивСотрудников", МассивСотрудников);
	
	ТабельныеНомера = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТабельныеНомера[Выборка.Сотрудник] = Выборка.ТабельныйНомер;
	КонецЦикла; 
	
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		ТабельныйНомер = ?( КодПоНазначению,
		ТабельныеНомера[СтрокаТабличнойЧасти.Ячейки.Назначение.Значение],
		ТабельныеНомера[СтрокаТабличнойЧасти.Ячейки.Сотрудник.Значение]);
		СтрокаТабличнойЧасти.Ячейки.ТабельныйНомерСтрока.УстановитьТекст(ТабельныйНомер);
	КонецЦикла;

КонецПроцедуры // УстановитьЗначенияКолонкиТабельныйНомерСтрока()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАСТРОЙКИ ПЕРИОДА РЕГИСТРАЦИИ ДОКУМЕНТА
// Функция преобразовывает дату в представление периода
//
// Параметры:
//   ПериодРегистрации - Дата периода
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации) Экспорт

	Возврат Формат(ПериодРегистрации, "ДФ='MMMM yyyy'");

КонецФункции

// Формирует представление переданного способа отражения с "предметной" точки зрения
//
// Параметры
//  СпособОтраженияВУпручете -	СправочникСсылка.СпособыОтраженияЗарплатыВУпрУчете - описываемый
//								способ отражения
//
// Возвращаемое значение:
//   строка - сформированное представление
//
Функция ПолучитьПредставлениеСпособаОтраженияНачисленияВУпрУчете(СпособОтраженияВУпручете) Экспорт
	
	Если СпособОтраженияВУпручете.Пустая() Тогда
		РасшифровкаТекст = НСтр("ru='Способ отражения определяется по данным о работнике и его плановых начислениях';uk='Спосіб відображення визначається за даними про працівника і його плановими нарахуваннями'");
	ИначеЕсли СпособОтраженияВУпручете = Справочники.СпособыОтраженияЗарплатыВУпрУчете.НеОтражатьВУпручете Тогда
		РасшифровкаТекст = НСтр("ru='Начисление не отражается в управленческом учете';uk='Нарахування не відображається в управлінському обліку'");
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",	СпособОтраженияВУпручете);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпособыОтраженияЗарплатыВУпрУчете.СтатьяЗатрат,
		|	СпособыОтраженияЗарплатыВУпрУчете.НоменклатурнаяГруппа,
		|	СпособыОтраженияЗарплатыВУпрУчете.ОбъектСтроительства
		|ИЗ
		|	Справочник.СпособыОтраженияЗарплатыВУпрУчете КАК СпособыОтраженияЗарплатыВУпрУчете
		|ГДЕ
		|	СпособыОтраженияЗарплатыВУпрУчете.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		РасшифровкаТекст = НСтр("ru='Управленческий учет: ';uk='Управлінський облік: '");
		Если Выборка.СтатьяЗатрат.Пустая() Тогда
			РасшифровкаТекст = РасшифровкаТекст + НСтр("ru='статья затрат <не указана>';uk='стаття витрат <не вказана>'");
		Иначе
			РасшифровкаТекст = РасшифровкаТекст + НСтр("ru='статья затрат ';uk='стаття витрат '") + Выборка.СтатьяЗатрат;
		КонецЕсли;
		Если Выборка.НоменклатурнаяГруппа.Пустая() Тогда
			РасшифровкаТекст = РасшифровкаТекст + НСтр("ru='; номенклатурная группа <не указана>';uk='; номенклатурна група <не вказана>'");
		Иначе
			РасшифровкаТекст = РасшифровкаТекст + НСтр("ru='; номенклатурная группа ';uk='; номенклатурна група '") + Выборка.НоменклатурнаяГруппа;
		КонецЕсли;
		Если Выборка.ОбъектСтроительства.Пустая() Тогда
			РасшифровкаТекст = РасшифровкаТекст + НСтр("ru='; объект строительства <не указан>';uk=""; об'єкт будівництва <не вказаний>""");
		Иначе
			РасшифровкаТекст = РасшифровкаТекст + НСтр("ru='; объект строительства ';uk=""; об'єкт будівництва """) + Выборка.ОбъектСтроительства;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РасшифровкаТекст;
	
КонецФункции // ПолучитьПредставлениеСпособаОтраженияНачисленияВУчетах()

// Процедура обрабатывает событие регулирования в поле периода регистрации
//
Процедура РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если Направление = 1 Тогда
		ПериодРегистрации = КонецМесяца(ПериодРегистрации) + 1;
	ИначеЕсли Направление = -1 Тогда
		ПериодРегистрации = НачалоМесяца(ПериодРегистрации - 1);
	КонецЕсли;

	ПредставлениеПериодаРегистрации = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);

КонецПроцедуры

// Процедура обрабатывает событие начала выбора из списка в поле периода регистрации
//
Процедура НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, НачальноеЗначение = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли; 
	
	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоМесяцаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	Для а = 1 По 12 Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ПолучитьПредставлениеПериодаРегистрации(НачалоМесяцаЗаполнения));
		Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли; 
		НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 1);
	КонецЦикла;
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(НачальноеЗначение) Тогда
		НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, ВыбранныйЭлемент.Значение);
		Возврат;
	КонецЕсли;
	
	ПериодРегистрации = ВыбранныйЭлемент.Значение;
	Элемент.Значение  = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОБРАБОТКИ МЕНЮ

// Процедура предназначена для управления видимостью элементов формы,
// вызывается в обработчиках событий "ПриОткрытии" форм, при изменении реквизита Организация
//
// Параметры:
//  ЭлементыФормы  - массив с коллекцией ЭУ формы, видимость которых необходимо определить
//  УчетнаяПолитикаПоПерсоналу - структура, содержит данные учетной политики    
//    предприятия или конкретной организации
//
Процедура УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(ЭлементыФормы,УчетнаяПолитикаПоПерсоналу,Организация = Неопределено) Экспорт
	
	ИспользуютсяНачисленияВВалюте			= Ложь;
	ПоказыватьТабельныеНомераВДокументах	= Ложь;
	ПоддерживатьНесколькоСхемМотивации		= Ложь;
	ПоддержкаВнутреннегоСовместительства	= Ложь;
	
	Если Организация = Неопределено Тогда
		Если УчетнаяПолитикаПоПерсоналу <> Неопределено Тогда
			Если Не УчетнаяПолитикаПоПерсоналу.Свойство("ИспользуютсяНачисленияВВалюте",ИспользуютсяНачисленияВВалюте) Тогда
				ИспользуютсяНачисленияВВалюте = Ложь;
			КонецЕсли;
			Если Не УчетнаяПолитикаПоПерсоналу.Свойство("ПоказыватьТабельныеНомераВДокументах",ПоказыватьТабельныеНомераВДокументах) Тогда
				ПоказыватьТабельныеНомераВДокументах = Ложь;
			КонецЕсли;
			Если Не УчетнаяПолитикаПоПерсоналу.Свойство("ПоддерживатьНесколькоСхемМотивации",ПоддерживатьНесколькоСхемМотивации) Тогда
				ПоддерживатьНесколькоСхемМотивации = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ИспользуютсяНачисленияВВалюте			= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналу, Организация, "ИспользуютсяНачисленияВВалюте");
		ПоказыватьТабельныеНомераВДокументах	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналу, Организация, "ПоказыватьТабельныеНомераВДокументах");
		ПоддержкаВнутреннегоСовместительства	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналу, Организация, "ПоддержкаВнутреннегоСовместительства");
	КонецЕсли;
	
	ТипКолонкаТабличногоПоля = Тип("КолонкаТабличногоПоля");
	ТипПолеВвода = Тип("ПолеВвода");
	ТипНадпись = Тип("Надпись");
	
	Для каждого Элемент из ЭлементыФормы Цикл
		Если ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "ТабельныйНомерСтрока" Тогда
			Элемент.Видимость			= ПоказыватьТабельныеНомераВДокументах;
			Элемент.ИзменятьВидимость	= Ложь;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта1" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта2" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта3" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;	
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта4" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта5" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;	
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Валюта6" Тогда
			Элемент.Видимость			= ИспользуютсяНачисленияВВалюте;
			Элемент.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;	
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "ВидСхемыМотивации" Тогда
			Элемент.Видимость			= Элемент.Видимость И ПоддерживатьНесколькоСхемМотивации;
			Элемент.ИзменятьВидимость	= ПоддерживатьНесколькоСхемМотивации;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "ПоВременнойСхемеМотивации" Тогда
			Элемент.Видимость			= Элемент.Видимость И ПоддерживатьНесколькоСхемМотивации;
			Элемент.ИзменятьВидимость	= ПоддерживатьНесколькоСхемМотивации;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Сотрудник" Тогда
			Элемент.Видимость			= Элемент.Видимость И ПоддержкаВнутреннегоСовместительства;
			Элемент.ИзменятьВидимость	= ПоддержкаВнутреннегоСовместительства;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Подразделение" Тогда
			Элемент.Видимость			= Элемент.Видимость И ПоддержкаВнутреннегоСовместительства;
			Элемент.ИзменятьВидимость	= ПоддержкаВнутреннегоСовместительства;
		ИначеЕсли ТипЗнч(Элемент) = ТипКолонкаТабличногоПоля и Элемент.Имя = "Должность" Тогда
			Элемент.Видимость			= Элемент.Видимость И ПоддержкаВнутреннегоСовместительства;
			Элемент.ИзменятьВидимость	= ПоддержкаВнутреннегоСовместительства;
			
		// в качестве ЭлементыФормы	передана форма
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТабличноеПоле") Тогда
			Колонки	= Элемент.Колонки;
			Для Каждого Колонка Из Колонки Цикл
				Если (Колонка.Имя = "ТабельныйНомерСтрока") Тогда
					Колонка.Видимость			= ПоказыватьТабельныеНомераВДокументах;
					Колонка.ИзменятьВидимость	= ПоказыватьТабельныеНомераВДокументах;
				КонецЕсли;
				Если Колонка.Имя = "Валюта" Тогда
					Колонка.Видимость			= ИспользуютсяНачисленияВВалюте;
					Колонка.ИзменятьВидимость	= ИспользуютсяНачисленияВВалюте;
				КонецЕсли;
				Если Колонка.Имя = "ВидСхемыМотивации" Тогда
					Колонка.Видимость			= Колонка.Видимость И ПоддерживатьНесколькоСхемМотивации;
					Колонка.ИзменятьВидимость	= ПоддерживатьНесколькоСхемМотивации;
				КонецЕсли;
				Если Колонка.Имя = "ПоВременнойСхемеМотивации" Тогда
					Колонка.Видимость			= ПоддерживатьНесколькоСхемМотивации;
					Колонка.ИзменятьВидимость	= ПоддерживатьНесколькоСхемМотивации;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Элемент) = ТипПолеВвода и Элемент.Имя = "ВалютаДокумента" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "НадписьВалютаДокумента" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипПолеВвода и Элемент.Имя = "ВалютаТарифнойСтавки" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "НадписьВалютаТарифнойСтавки" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипПолеВвода и Элемент.Имя = "ВалютаТарифнойСтавки1" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "НадписьВалютаТарифнойСтавки1" Тогда
			Элемент.Видимость = ИспользуютсяНачисленияВВалюте;
		ИначеЕсли ТипЗнч(Элемент) = ТипПолеВвода и Элемент.Имя = "ВидСхемыМотивации" Тогда
			Элемент.Видимость = ПоддерживатьНесколькоСхемМотивации;
		ИначеЕсли ТипЗнч(Элемент) = ТипНадпись и Элемент.Имя = "НадписьВидСхемыМотивации" Тогда
			Элемент.Видимость = ПоддерживатьНесколькоСхемМотивации;
		ИначеЕсли ТипЗнч(Элемент) = Тип("Панель") и Элемент.Имя = "ПанельСхемыМотивации" Тогда
			СверткаПанелиМотивации = ?(ПоддерживатьНесколькоСхемМотивации, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);	
			Элемент.Свертка = СверткаПанелиМотивации;
		ИначеЕсли ТипЗнч(Элемент) = Тип("Переключатель") и Элемент.Имя = "ВнутреннееСовместительство" Тогда
			Элемент.Видимость = ПоддержкаВнутреннегоСовместительства;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ИНФОРМАЦИИ В ФОРМЕ

Процедура ЗаполнениеОтбораПоОрганизацииПоУмолчанию(Форма, ЭлементОтбора, ЭлементФормы, ПараметрОтборПоРегистратору, ИспользоватьГоловнуюОрганизацию = Истина, ТекущийПользователь, ТекстЗаголовка = Неопределено) Экспорт
	
	ЭлементФормы.ТолькоПросмотр = Ложь;
	
	Если ЗначениеЗаполнено(ПараметрОтборПоРегистратору) Тогда
		
		МетаданныеДокумента = ПараметрОтборПоРегистратору.Метаданные();
		
		Если МетаданныеДокумента.Реквизиты.Найти("СторнируемыйДокумент") <> Неопределено Тогда
			
			МетаданныеДокумента 		= ПараметрОтборПоРегистратору.СторнируемыйДокумент.Метаданные();
			ПараметрОтборПоРегистратору = ПараметрОтборПоРегистратору.СторнируемыйДокумент;
			
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
			Организация = ПараметрОтборПоРегистратору.Организация;
			
			ЭлементОтбора.Значение = Организация;
			ЭлементФормы.ТолькоПросмотр = Истина;
			Если ТекстЗаголовка <> Неопределено Тогда
				Форма.Заголовок = ТекстЗаголовка + Организация.Наименование;
			КонецЕсли; 
			
		КонецЕсли;
		
		ЭлементОтбора.Использование = Истина;
		
	Иначе
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяОрганизация");
		
		ЭлементОтбора.Значение = Организация;
		ЭлементОтбора.Использование = Не Организация.Пустая();
		Если ТекстЗаголовка <> Неопределено Тогда
			Если Организация.Пустая() Тогда
				Форма.Заголовок = СтрЗаменить(ТекстЗаголовка,"организации","организаций");
			Иначе 
				Форма.Заголовок = ТекстЗаголовка + Организация.Наименование;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ВВОДА ДАТЫ КАК МЕСЯЦА

// Предназначена для реализации "произвольного" ввода даты-месяца
// подбирает по переданному тексту строку-представление даты или список таких строк
// в переданный параметр ДатаПоТексту возвращает подобранную по тексту дату
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено) ЭКспорт
    СписокВозврата = Новый СписокЗначений;
    ТекущийГод = Год(ТекущаяДата());
    
    Если ПустаяСтрока(Текст) Тогда
        Возврат СписокВозврата;
    КонецЕсли;
    Если Найти(Текст, ".") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ".");
    ИначеЕсли Найти(Текст, ",") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ",");
    ИначеЕсли Найти(Текст, "-") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "-");
    ИначеЕсли Найти(Текст, "/") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "/");
    ИначеЕсли Найти(Текст, "\") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "\");
    Иначе
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, " ");
    КонецЕсли;
    Если Подстроки.Количество() = 1 Тогда
        // единственное слово - пытаемся получить месяц
        Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Текст) Тогда
            МесяцЧислом = Число(Текст);
            Если МесяцЧислом >= 1 и МесяцЧислом <=12 Тогда
                ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
                Если СтрДлина(Текст) = 1 Тогда
                    СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
                Иначе
                    СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
                КонецЕсли;
            Иначе
                Возврат СписокВозврата;
            КонецЕсли;                
        Иначе
            СписокМесяцев = СписокМесяцевПоСтроке(Текст);
            Для Каждого Месяц Из СписокМесяцев Цикл
                ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
                СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гг'"));
            КонецЦикла;
        КонецЕсли;
    ИначеЕсли Подстроки.Количество() = 2 Тогда
        // два слова - первое считаем месяцем, второе - годом
        Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
            Если ПустаяСтрока(Подстроки[1]) Тогда
                ГодЧислом = 0;
                Подстроки[1] = "0";
                ТекстВозврата = Текст + "0";
            Иначе
                ГодЧислом = Число(Подстроки[1]);
                ТекстВозврата = "";
            КонецЕсли;
            Если ГодЧислом > 3000 Тогда
                Возврат СписокВозврата;
            КонецЕсли;
            Если СтрДлина(Подстроки[1]) <= 1 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
                СтрокаФорматированияГода = "г";
            ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
                СтрокаФорматированияГода = "гг";
            ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
                СтрокаФорматированияГода = "гггг";
            КонецЕсли;                    
        Иначе
            // второе слово может быть только годом
            Возврат СписокВозврата;
        КонецЕсли;                
        Если ЗначениеЗаполнено(Подстроки[0]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
            МесяцЧислом = Число(Подстроки[0]);
            Если МесяцЧислом >= 1 и МесяцЧислом <= 12 Тогда
                // если "правильный" месяц и год
                ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
                СписокВозврата.Добавить(ТекстВозврата);
            Иначе
                Возврат СписокВозврата;
            КонецЕсли;                
        Иначе
            СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
            Если СписокМесяцев.Количество() = 1 Тогда
                ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
                СписокВозврата.Добавить("");
            Иначе
                Для Каждого Месяц Из СписокМесяцев Цикл
                    ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
                    СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гг'"));
                КонецЦикла;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    Возврат СписокВозврата;
КонецФункции

// подбирает массив номеров месяцев, соответствующих переданной строке
// например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// используется в ПодобратьДатуПоТексту
Функция СписокМесяцевПоСтроке(Текст)
    СписокМесяцев = Новый СписокЗначений;
    Месяцы = Новый Соответствие;
    МесяцыВозврата = Новый Массив;
    Для Счетчик = 1 По 12 Цикл
        Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
        СписокМесяцев.Добавить(Счетчик, Представление);
        Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
        СписокМесяцев.Добавить(Счетчик, Представление);
    КонецЦикла;
    Для Каждого ЭлементСписка Из СписокМесяцев Цикл
        Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
            Месяцы[ЭлементСписка.Значение] = 0;
        КонецЕсли;
    КонецЦикла;
    Для Каждого Элемент Из Месяцы Цикл
        МесяцыВозврата.Добавить(Элемент.Ключ);
    КонецЦикла;
    Возврат МесяцыВозврата;
КонецФункции

Процедура ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт
    Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
    Если Список.Количество() = 1 Тогда
        ТекстАвтоПодбора = Список[0];
    КонецЕсли;
    СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка) Экспорт
    Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
    Если Список.Количество() = 1 Тогда
        Значение = Текст;
    Иначе
        Значение = Список;
    КонецЕсли;
    СтандартнаяОбработка = Ложь;
КонецПроцедуры

Функция ДатаКакМесяцПредставление(ДатаДата) Экспорт
    Возврат Формат(ДатаДата, "ДФ='ММММ гггг'");
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВСТРОЕННОЙ СПРАВКИ

Функция ПолучитьПутьККартинкеДляHTML(Картинка, ПолеHTMLДокумента) Экспорт
	
	МетаУрл	= ПолеHTMLДокумента.ПолучитьURL(Метаданные);
	МетаУрл	= Лев(МетаУрл,Найти(МетаУрл,"mdobject")-1);
	КартИД	= ЗначениеВСтрокуВнутр(Картинка);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Лев(КартИД,НАйти(КартИД,"}")-1);
	
	Если Лев(КартИД,1) = "-" Тогда
		КартИд	= "n"+КартИД;
	Иначе
		КартИД	= Сред(КартИД,3);
	КонецЕсли;
	
	Возврат МетаУрл+"mdpicture/id" + КартИД;
	
КонецФункции // КартинкаУрл()

Функция ВернутьШестнадцатиричноеПредставлениеЦвета(ВыбранныйЦвет) Экспорт
	
	Если ТипЗнч(ВыбранныйЦвет) <> Тип("Цвет") Тогда
		Возврат "";
	КонецЕсли;
	
	Красный	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Красный);
	Зеленый	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Зеленый);
	Синий	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Синий);
	
	Возврат "#" + Красный + Зеленый + Синий;
	
КонецФункции

Процедура УстановитьВидимостьТекста(Документ, Ид, ВключитьВидимость, Параметр = "inline") Экспорт
	
	// Документ должен быть всегда загружен и в нем должен найтись нужный нам элемент
	// Пользователь может увидеть данные сообщения только в том случае, если при кодировании
	// механизма были допущены ошибки
	
	// Данное сообщение будет выведено, если мы пытаемся обновить справку ПриОткрытии формы
	// Обновлять справку в этом событии не нужно, так как текст справки был изначально
	// сформирован правильно
	Если Документ.readyState <> "complete" Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Справка: справка еще не загружена';uk='Довідка: довідка ще не завантажена'"));
		Возврат;
	КонецЕсли;
	
	// Данное сообщение будет выведено, если мы пытаемся переключить видимость элемента
	// которого нет в справке. Такое может только в случае, если бы допустили ошибку в коде
	Элемент = Документ.getElementById(Ид);
	Если Элемент = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Справка: не найден элемент ';uk='Довідка: не знайдена елемент '") + Ид);
		Возврат;
	КонецЕсли;
	
	Элемент.style.display = ?(ВключитьВидимость, Параметр, "none");
	
КонецПроцедуры

Процедура ПолеHTMLДокументаOnClick(Элемент, pEvtObj, Форма) Экспорт
	
	ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если ЭлементHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементHTML.id = "Команда" Тогда
		Попытка
			Форма.ВыполнитьКомандуФормы(ЭлементHTML.pathname, ЭлементHTML.target);
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		pEvtObj.returnValue = Ложь;
		
	ИначеЕсли ЭлементHTML.id = "ОткрытьСписок" Тогда
		Менеджер = Вычислить(ЭлементHTML.pathname);
		Попытка
			ФормаСписка = Менеджер.ПолучитьФормуСписка();
			ФормаСписка.Открыть();
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		
		pEvtObj.returnValue = Ложь;
		
	ИначеЕсли ЭлементHTML.id = "АктивизироватьЭУ" Тогда
		Форма.ТекущийЭлемент = Вычислить("Форма.ЭлементыФормы." + ЭлементHTML.pathname);
		pEvtObj.returnValue = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЭлемент(ЭлементHTML, НазваниеТега)
	
	ТекущийЭлементHTML = ЭлементHTML;
	Пока Истина Цикл
		Если ТекущийЭлементHTML.tagName = "BODY" Тогда
			Возврат Неопределено;
		ИначеЕсли ТекущийЭлементHTML.tagName = НазваниеТега Тогда
			Возврат ТекущийЭлементHTML;
		Иначе
			ТекущийЭлементHTML = ТекущийЭлементHTML.parentNode;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ПолеHTMLДокументаOnMouseOver(Элемент, pEvtObj, ВыделятьРазделы = Ложь) Экспорт
	
	Если ВыделятьРазделы Тогда
		ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "DIV");
		Если ЭлементHTML <> Неопределено Тогда
			ЭлементHTML.style.paddingtop		= 0;
			ЭлементHTML.style.paddingright		= 3;
			ЭлементHTML.style.paddingbottom		= 2;
			ЭлементHTML.style.paddingleft		= 3;
			ЭлементHTML.style.borderwidth		= 1;
			ЭлементHTML.style.borderstyle		= "solid";
			ЭлементHTML.style.backgroundcolor	= "#FFFBF0";
		КонецЕсли;
	КонецЕсли;
	ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если ЭлементHTML <> Неопределено Тогда
		ЭлементHTML.style.backgroundcolor	= ВернутьШестнадцатиричноеПредставлениеЦвета(ВстроеннаяСправка_ФонВыделеннойСсылки());
		ЭлементHTML.style.color				= ВернутьШестнадцатиричноеПредставлениеЦвета(ВстроеннаяСправка_ЦветВыделеннойСсылки());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеHTMLДокументаOnMouseOut(Элемент, pEvtObj, ВыделятьРазделы = Ложь) Экспорт
	
	Если ВыделятьРазделы Тогда
		ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "DIV");
		Если ЭлементHTML <> Неопределено Тогда
			ЭлементHTML.style.paddingtop		= 1;
			ЭлементHTML.style.paddingright		= 4;
			ЭлементHTML.style.paddingbottom		= 3;
			ЭлементHTML.style.paddingleft		= 4;
			ЭлементHTML.style.borderstyle		= "none";
			ЭлементHTML.style.backgroundcolor	= "";
		КонецЕсли;
	КонецЕсли;
	ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если ЭлементHTML <> Неопределено Тогда
		ЭлементHTML.style.backgroundcolor	= "";
		ЭлементHTML.style.color				= "";
	КонецЕсли;
	
КонецПроцедуры

Функция ВстроеннаяСправка_ЦветФона() Экспорт
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветРамки() Экспорт
	
	Возврат Новый Цвет(137, 132, 119);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветСсылки() Экспорт
	
	Возврат Новый Цвет(0, 0, 0);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветВыделеннойСсылки() Экспорт
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Функция ВстроеннаяСправка_ФонВыделеннойСсылки() Экспорт
	
	Возврат Новый Цвет(64, 94, 172);
	
КонецФункции

// Возвращает описание стилей, используемых при показе встроенной ситуационно-зависимой справки
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   строка
//
Функция ВстроеннаяСправка_СтилиДокумента() Экспорт

	Возврат "
	|		<STYLE type=text/css>
	|			DIV.top {
	|				PADDING: 0;
	|			}
	|			DIV {
	|				PADDING: 3px 0px 3px 3px;
	|				BORDER-TOP-COLOR: #dadac4;
	|				BORDER-RIGHT-COLOR: #dadac4;
	|				BORDER-BOTTOM-COLOR: #dadac4;
	|				BORDER-LEFT-COLOR: #dadac4;
	|			}
	|			A {
	|				PADDING-TOP: 1px;
	|				PADDING-BOTTOM: 1px;
	|			}
	|			BODY {
	|				SCROLLBAR-FACE-COLOR: #fffbf0;
	|				SCROLLBAR-HIGHLIGHT-COLOR: #dadac4;
	|				SCROLLBAR-3DLIGHT-COLOR: #fff; MARGIN: 5px;
	|				SCROLLBAR-ARROW-COLOR: #708090;
	|				SCROLLBAR-TRACK-COLOR: #fffbf0;
	|				SCROLLBAR-DARKSHADOW-COLOR: #fff;
	|				MARGIN: 5px 0px 5px 5px;
	|			}
	|			IMG {
	|				MARGIN-LEFT: 3px;
	|			}
	|		</STYLE>";

КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ИЗМЕНЕНИЯ ВИДИМОСТИ ПАНЕЛЕЙ

Процедура ИзменитьВидимостьПанелиПоГоризонтали(Форма, ОтображатьПанель, ИмяОсновнойПанели, ПостфиксЭлементов) Экспорт
	
	Перем Элемент, Граница, Пусто;
	
	ОсновнаяПанель	= Форма.ЭлементыФормы[ИмяОсновнойПанели];
	Панель			= Форма.ЭлементыФормы["Панель" + ПостфиксЭлементов];
	Разделитель		= Форма.ЭлементыФормы["Разделитель" + ПостфиксЭлементов];
	
	Если ОтображатьПанель Тогда
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Право Тогда
			// установить привязку основной панели к разделителю
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Разделитель, ГраницаЭлементаУправления.Лево);
			// развернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			// развернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Нет;
			РазницаВШирине = Панель.Ширина - Макс(125, Мин(Форма.Ширина - 350, Панель.Ширина));
			// восстановить привязки разделителя
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Форма.Панель, ГраницаЭлементаУправления.Право);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Разделитель, ГраницаЭлементаУправления.Лево);
			// установить привязку панели справки к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Разделитель, ГраницаЭлементаУправления.Право);
			Разделитель.Лево = Разделитель.Лево + РазницаВШирине;
		КонецЕсли;
	Иначе
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			ШиринаОсновнойПанели = ОсновнаяПанель.Ширина + Разделитель.Ширина + Панель.Ширина;
			// сбросить привязку панели к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
			// установить привязку разделителя к панели справки
			Разделитель.УстановитьПривязку(	ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Лево);
			Разделитель.УстановитьПривязку(	ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Лево);
			// свернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Право;
			// свернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Право;
			
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Право);
			
			// установить привязку основной панели к форме
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.Панель, ГраницаЭлементаУправления.Право);
			ОсновнаяПанель.Ширина = ШиринаОсновнойПанели;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьВидимостьПанелиПоВертикали(Форма, ОтображатьПанель, ИмяОсновнойПанели, ПостфиксЭлементов) Экспорт
	
	Перем Элемент, Граница, Пусто;
	
	ОсновнаяПанель	= Форма.ЭлементыФормы[ИмяОсновнойПанели];
	Панель			= Форма.ЭлементыФормы["Панель" + ПостфиксЭлементов];
	Разделитель		= Форма.ЭлементыФормы["Разделитель" + ПостфиксЭлементов];
	
	Если ОтображатьПанель Тогда
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
			// установить привязку основной панели к разделителю
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
			
			// развернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// развернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// восстановить привязки разделителя
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Форма.Панель, ГраницаЭлементаУправления.Верх);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
			
			// установить привязку панели справки к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Верх);
		КонецЕсли;
	Иначе
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			ВысотаОсновнойПанели = ОсновнаяПанель.Высота + (ОсновнаяПанель.Верх - Панель.Верх);
			
			// сбросить привязку панели к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Низ);
			
			// установить привязку разделителя к панели справки
			Разделитель.УстановитьПривязку(	ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Низ);
			Разделитель.УстановитьПривязку(	ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			
			// свернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Верх;
			// свернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Верх;
			
			// установить привязку основной панели к форме
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Форма.Панель, ГраницаЭлементаУправления.Верх);
			ОсновнаяПанель.Верх		= Панель.Верх;
			ОсновнаяПанель.Высота	= ВысотаОсновнойПанели;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ С ДИАЛОГОМ ОТЧЕТА

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ СО СТАТЬЯМИ НАЛОГОВЫХ ДЕКЛАРАЦИЙ

Функция СформироватьСодержимоеДекларации(ВидДекларации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидНалоговойДекларации", ВидДекларации);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатьиНалоговыхДеклараций.Ссылка КАК Статья,
	               |	ПРЕДСТАВЛЕНИЕ(СтатьиНалоговыхДеклараций.Ссылка) КАК СтатьяПредставление
	               |ИЗ
	               |	Справочник.СтатьиНалоговыхДеклараций КАК СтатьиНалоговыхДеклараций
	               |ГДЕ
	               |	СтатьиНалоговыхДеклараций.ВидНалоговойДекларации = &ВидНалоговойДекларации";
	Результат = Запрос.Выполнить().Выбрать();
	
	СписокСтатей = Новый СписокЗначений;
	
	
	Пока Результат.Следующий() Цикл
		СписокСтатей.Добавить(Результат.Статья,Результат.СтатьяПредставление);
	КонецЦикла;

	Возврат СписокСтатей;
	
КонецФункции	

// По переданному списку элементов справочника СтатьиНалоговыхДеклараций формирует новый список, содержащий
// все плюс иерархию элементов - родителей
// Параметры:
//  Список  – список, содержащий элементы справочника СтатьиНалоговыхДеклараций
//
// Возвращаемое значение:
//   СписокЗначений - дополненный иерархией владельцев входящий список
//
Функция ДополнитьСписокРодителями(Список) Экспорт

	 Запрос = Новый Запрос();
	 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	СтатьиНалоговыхДеклараций.Родитель КАК Родитель
	                |ИЗ
	                |	Справочник.СтатьиНалоговыхДеклараций КАК СтатьиНалоговыхДеклараций
	                |ГДЕ
	                |	СтатьиНалоговыхДеклараций.Ссылка В(&Список)
	                |	И НЕ (СтатьиНалоговыхДеклараций.Родитель В(&Список))";
					
	Запрос.УстановитьПараметр("Список", Список);
	
	Родители = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Родитель");
	
	СписокСРодителями = Список.Скопировать();
	
	Если  НЕ Родители.Количество() = 0 
	    И НЕ (Родители.Количество() = 1 
		    И Родители[0] = Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка()) Тогда
			
		// получим родителей для родителей
		СписокРодителей = Новый СписокЗначений;
 		СписокРодителей.ЗагрузитьЗначения(Родители);
		
		СписокРодителейСРодителями = ДополнитьСписокРодителями(СписокРодителей);
		
		Для каждого Родитель Из СписокРодителейСРодителями Цикл
			
			Если ЗначениеЗаполнено(Родитель.Значение) Тогда
			
				СписокСРодителями.Добавить(Родитель.Значение,Родитель.Представление)		
			
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 

	Возврат СписокСРодителями;
	
КонецФункции // ДобавитьРодителей(СписокЗначений)()

// Вызывается в обработчике события "Начало выбора" при выборе статьи налоговой декларации
//
Процедура НачалоВыбораСтатьяНалоговойДекларации(ЭлементФормы, СтандартнаяОбработка, НазваниеНалоговойДекларации, Набор = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	ФормаВыбора = Справочники.СтатьиНалоговыхДеклараций.ПолучитьФормуВыбора(,ЭлементФормы,);
	ФормаВыбора.СправочникСписок.Отбор.ВидНалоговойДекларации.Значение      = НазваниеНалоговойДекларации;
	ФормаВыбора.СправочникСписок.Отбор.ВидНалоговойДекларации.Использование = Истина;
	ФормаВыбора.СправочникСписок.Отбор.ВидНалоговойДекларации.ВидСравнения  = ВидСравнения.Равно;
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидНалоговойДекларации.Доступность = Ложь;

	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ЭлементФормы.Значение;
	ФормаВыбора.Открыть();

КонецПроцедуры






Функция ЗаписатьДокументПередВыполнениемДействия(Объект, ФормаОбъекта, ТекстВопроса) Экспорт

	Если Объект.Модифицированность() Тогда
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				Возврат Ложь;
			КонецПопытки;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 	
	
	Возврат Истина;

КонецФункции // ЗаписатьДокументПередВыполнениемДействия()

// Записывает документ в режиме отмены проведения, спросив об этом у пользователя
// Параметры
//  Объект        - ДокументОбъект
//  ФормаОбъекта  – Тип - Форма
//                 форма документа из которого вызвана функция
//  ТекстДействие  – Тип – Строка
//                 текст вопроса
//
// Возвращаемое значение:
//   Истина   – если не требуется запись документа или запись прошла успешно
//   Ложь     - отказ пользователя от записи или не удачная попытка записи
Функция ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(Объект, ФормаОбъекта, ТекстДействие = НеОпределено, ТекстВопрос1 = НеОпределено, ТекстВопрос2 = НеОпределено) Экспорт

	Если Объект.Проведен Тогда
		
		Если ТекстВопрос1 = Неопределено Тогда
			Если Вопрос(НСтр("ru='Автоматически ';uk='Автоматично '")+ТекстДействие+НСтр("ru=' документ можно только после отмены его проведения. Выполнить отмену проведения документа?';uk=' документ можна тільки після скасування його проведення. Виконати скасування проведення документа?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Если Вопрос(ТекстВопрос1, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли; 
		
		Попытка
			Возврат ФормаОбъекта.ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			Возврат Ложь;
		КонецПопытки;
				
	ИначеЕсли Объект.Модифицированность() Тогда
		
		Если ТекстВопрос2 = Неопределено Тогда
			Если Вопрос(НСтр("ru='Автоматически ';uk='Автоматично '")+ТекстДействие+НСтр("ru=' документ можно только после его записи. Записать?';uk=' документ можна тільки після його запису. Записати?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Если Вопрос(ТекстВопрос2, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Возврат ФормаОбъекта.ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ЗаписатьДокументОтменивПроведение()

// Процедура заполняет вычисляемые колонки формы списка справочника СотрудникиОрганизаций
//
// Параметры
//  ТабличноеПоле   – Табличное поле
//  ОформленияСтрок – Коллекция значений типа ОформлениеСтроки табличного поля ТЧДокумента
//  ДатаСреза	 	- тип дата, дата на которую получаем данные работников организации
//
Процедура ЗаполнитьДанныеПоРаботникамОрганизации(ТабличноеПоле, ОформленияСтрок, ДатаСреза = Неопределено)Экспорт

	КолонкиТабличногоПоля = ТабличноеПоле.Колонки;
	ПоказыватьЗанимаемыхСтавок 			= КолонкиТабличногоПоля.ЗанимаемыхСтавок.Видимость;
	ПоказыватьПодразделениеОрганизации 	= КолонкиТабличногоПоля.ПодразделениеОрганизации.Видимость;
	ПоказыватьДолжность 				= КолонкиТабличногоПоля.Должность.Видимость;
	ПоказыватьГрафикРаботы 				= КолонкиТабличногоПоля.ГрафикРаботы.Видимость;
	ПоказыватьСостояние			 		= КолонкиТабличногоПоля.Состояние.Видимость;
	
	Если Не (ПоказыватьЗанимаемыхСтавок
		или ПоказыватьПодразделениеОрганизации 
		или ПоказыватьДолжность
		или ПоказыватьГрафикРаботы
		или ПоказыватьСостояние) Тогда
		
		Возврат;
	
	КонецЕсли; 
	
	МассивСотрудников = Новый Массив;
	Для Каждого СтрокаТабличногПоля Из ОформленияСтрок Цикл
		ДанныеСтроки = СтрокаТабличногПоля.ДанныеСтроки;
		Если ДанныеСтроки.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		МассивСотрудников.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
	|	ПРЕДСТАВЛЕНИЕ(РаботникиОрганизацийСрезПоследних.Сотрудник.ВидЗанятости) КАК ВидЗанятости,
	|ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Период, ДЕНЬ, -1)
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Период
	|КОНЕЦ КАК Период";
	Если ПоказыватьПодразделениеОрганизации Тогда
	ТекстЗапроса = ТекстЗапроса + ",
	|ПРЕДСТАВЛЕНИЕ(РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации)	КАК Подразделение"; 
	
	КонецЕсли;
	Если ПоказыватьДолжность Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	|ПРЕДСТАВЛЕНИЕ(РаботникиОрганизацийСрезПоследних.Должность) КАК Должность";
	КонецЕсли;
	Если ПоказыватьЗанимаемыхСтавок Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	|РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок";
	КонецЕсли;
	Если ПоказыватьГрафикРаботы Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	|ПРЕДСТАВЛЕНИЕ(РаботникиОрганизацийСрезПоследних.ГрафикРаботы) КАК ГрафикРаботы";
	КонецЕсли;
	Если ПоказыватьСостояние Тогда
	ТекстЗапроса = ТекстЗапроса + ",
	|ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = &Прием
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол = &Женский
	|						ТОГДА ""Принята ""
	|					ИНАЧЕ ""Принят ""
	|				КОНЕЦ
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол = &Женский
	|						ТОГДА ""Уволена ""
	|					ИНАЧЕ ""Уволен ""
	|				КОНЕЦ
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = &Перемещение
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол = &Женский
	|						ТОГДА ""Переведена ""
	|					ИНАЧЕ ""Переведен ""
	|				КОНЕЦ
	|		ИНАЧЕ ""Не указано ""
	|КОНЕЦ КАК Состояние"
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамДатаСреза, Сотрудник В (&парамМассивСотрудников)) КАК РаботникиОрганизацийСрезПоследних";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("парамДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("парамМассивСотрудников", МассивСотрудников);
	Запрос.УстановитьПараметр("Женский", Перечисления.ПолФизическихЛиц.Женский);
	Запрос.УстановитьПараметр("Прием", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("Перемещение", Перечисления.ПричиныИзмененияСостояния.Перемещение);
	Запрос.УстановитьПараметр("парамТрудовойДоговор", Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Для Каждого СтрокаТабличногПоля Из ОформленияСтрок Цикл
		ДанныеСтроки = СтрокаТабличногПоля.ДанныеСтроки;
		Если ДанныеСтроки.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(ДанныеСтроки.Ссылка, "Сотрудник") Тогда
			Если ПоказыватьЗанимаемыхСтавок Тогда
				СтрокаТабличногПоля.Ячейки.ЗанимаемыхСтавок.УстановитьТекст(Выборка.ЗанимаемыхСтавок);
			КонецЕсли;
			Если ПоказыватьПодразделениеОрганизации Тогда
				СтрокаТабличногПоля.Ячейки.ПодразделениеОрганизации.УстановитьТекст(Выборка.Подразделение);
			КонецЕсли;
			Если ПоказыватьДолжность Тогда
				СтрокаТабличногПоля.Ячейки.Должность.УстановитьТекст(Выборка.Должность);
			КонецЕсли;
			Если ПоказыватьГрафикРаботы Тогда
				СтрокаТабличногПоля.Ячейки.ГрафикРаботы.УстановитьТекст(Выборка.ГрафикРаботы);
			КонецЕсли;
			Если ПоказыватьСостояние Тогда
				СтрокаТабличногПоля.Ячейки.Состояние.УстановитьТекст(Выборка.Состояние + Формат(Выборка.Период,"ДФ=dd.MM.yyyy") + ". "+Выборка.ВидЗанятости);
			КонецЕсли;
		ИначеЕсли ПоказыватьСостояние Тогда
			//нет данных в регистре сведений РаботникиОрганизаций
			ВидДоговора = ДанныеСтроки.ВидДоговора;
			Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
				СтрокаСостояние = НСтр("ru='Не принят(а)';uk='Не прийнятий(а)'");	
			Иначе
				СтрокаСостояние = ВидДоговора;
			КонецЕсли;
			СтрокаТабличногПоля.Ячейки.Состояние.УстановитьТекст(СтрокаСостояние);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОткрытьГрафик(Параметры) Экспорт
	
	Если Параметры.Количество() < 2 Тогда
		Для Каждого Элемент Из Параметры Цикл
			Сообщить(Элемент);
		КонецЦикла;

	Иначе
		ГрафикРаботы = Параметры[0];
		Дата = Параметры[1];
		Если ТипЗнч(ГрафикРаботы) = Тип("СправочникСсылка.ГрафикиРаботы") Тогда
			// Открываем справочник ГрафикиРаботы.
			ГрафикРаботы.ПолучитьФорму().Открыть();
		ИначеЕсли ТипЗнч(ГрафикРаботы) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
			// Ищем и открываем документ Табель, если его нет, тогда индивидуальныйГрафик
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("Сотрудник", ГрафикРаботы);
			Запрос.УстановитьПараметр("Дата", НачалоМесяца(Дата));
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ГрафикиРаботы.Документ
			|ПОМЕСТИТЬ ВТПодневныеДокументы
			|ИЗ
			|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
			|ГДЕ
			|	ГрафикиРаботы.ГрафикРаботы = &Сотрудник
			|	И НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ) = &Дата
			|	И ГрафикиРаботы.Месяц = &Дата
			|	И (НЕ ГрафикиРаботы.Документ В (ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.СдельныйНаряд.ПустаяСсылка)))
			|
			|СГРУППИРОВАТЬ ПО
			|	ГрафикиРаботы.Документ,
			|	ГрафикиРаботы.План";
			Запрос.Выполнить();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СводныеТабели.Регистратор, ЕСТЬNULL(ПодневныеТабели.Документ, ЕСТЬNULL(СводныеНаряды.Регистратор, ЕСТЬNULL(ПодневныеНаряды.Документ, ЕСТЬNULL(СводныеГрафики.Регистратор, ПодневныеГрафики.Документ))))) КАК документ
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СводныеТабели.Регистратор КАК Регистратор
			|		ИЗ
			|			РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК СводныеТабели
			|		ГДЕ
			|			НАЧАЛОПЕРИОДА(СводныеТабели.Период, ДЕНЬ) = &Дата
			|			И СводныеТабели.Сотрудник = &Сотрудник
			|			И СводныеТабели.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации
			|		
			|		СГРУППИРОВАТЬ ПО
			|			СводныеТабели.Регистратор) КАК СводныеТабели
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодневныеДокументы КАК ПодневныеТабели
			|		ПО (ПодневныеТабели.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СводныеНаряды.Регистратор КАК Регистратор
			|		ИЗ
			|			РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК СводныеНаряды
			|		ГДЕ
			|			НАЧАЛОПЕРИОДА(СводныеНаряды.Период, ДЕНЬ) = &Дата
			|			И СводныеНаряды.Сотрудник = &Сотрудник
			|			И СводныеНаряды.Регистратор ССЫЛКА Документ.СдельныйНаряд
			|		
			|		СГРУППИРОВАТЬ ПО
			|			СводныеНаряды.Регистратор) КАК СводныеНаряды
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодневныеДокументы КАК ПодневныеНаряды
			|		ПО (ПодневныеНаряды.Документ ССЫЛКА Документ.СдельныйНаряд)
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СводныеГрафики.Регистратор КАК Регистратор
			|		ИЗ
			|			РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеГрафики
			|		ГДЕ
			|			СводныеГрафики.Сотрудник = &Сотрудник
			|			И СводныеГрафики.Месяц = &Дата) КАК СводныеГрафики
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодневныеДокументы КАК ПодневныеГрафики
			|		ПО (ПодневныеГрафики.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации)
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка = &Сотрудник
			|	И ЕСТЬNULL(СводныеТабели.Регистратор, ЕСТЬNULL(ПодневныеТабели.Документ, ЕСТЬNULL(СводныеНаряды.Регистратор, ЕСТЬNULL(ПодневныеНаряды.Документ, ЕСТЬNULL(СводныеГрафики.Регистратор, ПодневныеГрафики.Документ))))) ЕСТЬ НЕ NULL ";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Выборка.Документ.ПолучитьФорму().Открыть();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает список предопределенных показателей схем мотивации 
//
Функция ПолучитьСписокПредопределенныхПоказателей() Экспорт 
	
	СписокПредопределенныхПоказателей = Новый СписокЗначений;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПоказателиСхемМотивации.Ссылка КАК Ссылка,
	|	ПоказателиСхемМотивации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
	|ГДЕ
	|	ПоказателиСхемМотивации.Предопределенный";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокПредопределенныхПоказателей.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокПредопределенныхПоказателей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИСПРАВЛЕНИЕ ДОКУМЕНТОВ

// В документах на одного сотрудника (отпуск, б/л и пр.) в зависимости от состояния 
// 	документа кнопки исправлений либо не показываются вообще, либо показывается одна из них
//
// Параметры
//	ПериодРегистрацииДокумента - дата - определяет месяц начисления документа
//  ДокументИсправлен, ДокументСторнирован - булево, флажки состояния документа
//	Кнопки - коллекция кнопок соответствующей панели документа
//  КнопкаИсправление, КнопкаОтменаИсправление - кнопки-эталоны
//
Процедура УстановитьКнопкиИсправленияДокументаОдногоСотрудника(ПериодРегистрацииДокумента, ДокументИсправлен, ДокументСторнирован, Кнопки, КнопкаИсправление, КнопкаОтменаИсправление) Экспорт

	Если Кнопки.Найти(КнопкаИсправление.Имя) <> Неопределено Или Кнопки.Найти(КнопкаОтменаИсправление.Имя) <> Неопределено Тогда
		СтароеИмя = Кнопки[Кнопки.Количество() - 1].Имя;
		НовоеИмя = "";
		Если Не ДокументСторнирован Тогда // Документ не был отсторнирован
			Если ДокументИсправлен Тогда  // Документ исправлен
				НовоеИмя = КнопкаОтменаИсправление.Имя;
			ИначеЕсли ПериодРегистрацииДокумента < НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
				НовоеИмя = КнопкаИсправление.Имя;
			КонецЕсли;
		КонецЕсли;
		Если НовоеИмя <> СтароеИмя Тогда
			Кнопки.Удалить(Кнопки.Количество() - 1);
			Если НовоеИмя = КнопкаОтменаИсправление.Имя Тогда
				НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаОтменаИсправление.Действие);
				ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаОтменаИсправление);
			ИначеЕсли НовоеИмя = КнопкаИсправление.Имя Тогда
				НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаИсправление.Действие);
				ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаИсправление);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не ДокументСторнирован Тогда // Документ не был отсторнирован
		Если ДокументИсправлен Тогда  // Документ исправлен
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаОтменаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаОтменаИсправление);
		ИначеЕсли ПериодРегистрацииДокумента < НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , КнопкаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаИсправление);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура создает новый документ, заполняет его данными исправляемого документа 
// 	и предъявляет пользователю для дальнейшей работы
//
// Параметры
//	ИсправляемыйДокумент - тип ДокументОбъект.<Имя документа> - документ, для которого вводится исправление
//  ФормаИсправляемогоДокумента - форма этого документа
//  Сотрудники - массив сотрудников, по которым выполняется исправление; необязательный, если не указан - по всем
//
Функция ВвестиДокументИсправление(ИсправляемыйДокумент, ФормаИсправляемогоДокумента = Неопределено, Сотрудники = Неопределено, ПериодРегистрации = Неопределено, ТекПользователь = Неопределено) Экспорт 
	
	Если ТекПользователь = Неопределено Тогда
		ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;	
	
	Если ИсправляемыйДокумент.Проведен Тогда
		
		Если ФормаИсправляемогоДокумента <> Неопределено Тогда
			ТекстВопроса = НСтр("ru='Для исправления необходимо записать документ. Продолжить?';uk='Для виправлення необхідно записати документ. Продовжити?'");
			Если Не ЗаписатьДокументПередВыполнениемДействия(ИсправляемыйДокумент, ФормаИсправляемогоДокумента, ТекстВопроса) Тогда
				Возврат Неопределено
			КонецЕсли;
		КонецЕсли;

		Исправление = Документы[ИсправляемыйДокумент.Метаданные().Имя].СоздатьДокумент();
		Исправление.Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
		Исправление.Организация = ИсправляемыйДокумент.Организация;
		Исправление.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОтветственный");
		Исправление.ПериодРегистрации = Макс(?(ЗначениеЗаполнено(ПериодРегистрации),ПериодРегистрации,НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату())),ДобавитьМесяц(ИсправляемыйДокумент.ПериодРегистрации,1));
		Исправление.ЗаполнитьПоПерерассчитываемомуДокументу(ИсправляемыйДокумент, Сотрудники);
		ФормаДокумента = Исправление.ПолучитьФорму(,,ИсправляемыйДокумент.Ссылка);
		ФормаДокумента.Открыть();
		
		Возврат ФормаДокумента
		
	Иначе
		Предупреждение(НСтр("ru='Исправить можно только проведенный документ!';uk='Виправити можна лише проведений документ!'"));
		Возврат Неопределено
	КонецЕсли;

КонецФункции

// Процедура собирает данные о существующих документах-исправлениях всех уровней,
// 	и формирует текст информирования пользователя, показывает его и запрашивает согласие 
// 	пользователя на удаление исправлений.
// 	Если пользователь согласился, очищает в найденных документах-исправлениях  
// 	поле ПерерассчитываемыйДокумент и помечает документы на удаление.
//
// Параметры
//	ИсправленныйДокумент - тип ДокументСсылка.<Имя документа> - ошибочно исправленный документ
//
Процедура ОтменитьИсправлениеДокумента(ИсправленныйДокумент) Экспорт 
	
	МетаданныеДокумента = ИсправленныйДокумент.Метаданные();
	РежимПоиска = ?(МетаданныеДокумента.Реквизиты.Найти("Сотрудник") = Неопределено, "КритерийОтбора","ТаблицаДокумента");	
	ИмяДокумента = МетаданныеДокумента.Имя;

	ИсправленияКОтмене = Новый Массив;
	Исправление = ПроведениеРасчетов.ПолучитьДокументИсправление(ИсправленныйДокумент, РежимПоиска, ИмяДокумента);
	Пока ЗначениеЗаполнено(Исправление) Цикл
		
		Если РежимПоиска = "КритерийОтбора" Тогда
			ИсправлениеСледующегоУровня = Новый Массив;
			Для каждого Значение Из Исправление Цикл
				ИсправленияКОтмене.Добавить(Значение);
				Для каждого ЗначениеСледующегоУровня Из ПроведениеРасчетов.ПолучитьДокументИсправление(Значение, РежимПоиска, ИмяДокумента) Цикл
					ИсправлениеСледующегоУровня.Добавить(ЗначениеСледующегоУровня);
				КонецЦикла;
			КонецЦикла;
			Исправление = ИсправлениеСледующегоУровня;
		Иначе
			ИсправленияКОтмене.Добавить(Исправление);
			Исправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Исправление, РежимПоиска, ИмяДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	ВсегоИсправлений = ИсправленияКОтмене.Количество();
	Если ВсегоИсправлений <> 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Исправления",ИсправленияКОтмене);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(Документы.ПериодРегистрации) КАК ПериодРегистрацииС,
		|	МАКСИМУМ(Документы.ПериодРегистрации) КАК ПериодРегистрацииПо,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Документы.ПериодРегистрации) КАК ВсегоПериодовРегистрации
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК Документы
		|ГДЕ
		|	Документы.Ссылка В (&Исправления)";
		Запрос.Выполнить();
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Если Выборка.ВсегоПериодовРегистрации = 1 Тогда
			Месяц = Формат(Выборка.ПериодРегистрацииС, "ДФ=MMMM");
			ОписаниеПериода = НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г."
		ИначеЕсли Выборка.ВсегоПериодовРегистрации = 2 Тогда
			Месяц = Формат(Выборка.ПериодРегистрацииС, "ДФ=MMMM");
			ОписаниеПериода = НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г. и "; 
			Месяц = Формат(Выборка.ПериодРегистрацииПо, "ДФ=MMMM");
			ОписаниеПериода = ОписаниеПериода + НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г." 
		Иначе
			Месяц = Формат(Выборка.ПериодРегистрацииС, "ДФ=MMMM");
			ОписаниеПериода = "в период с " + НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г. по "; 
			Месяц = Формат(Выборка.ПериодРегистрацииПо, "ДФ=MMMM");
			ОписаниеПериода = ОписаниеПериода + НРег(Месяц) + " " + Формат(Выборка.ПериодРегистрацииС,"ДФ=гггг") + " г." 
		КонецЕсли;
		
		ТекстВопроса =  ОбщегоНазначения.ФормаМножественногоЧисла(НСтр("ru='Найден ';uk='Знайдений '"),НСтр("ru='Найдено ';uk='Знайдено '"),НСтр("ru='Найдено ';uk='Знайдено '"),ВсегоИсправлений) + ВсегоИсправлений 
					+ ОбщегоНазначения.ФормаМножественногоЧисла(НСтр("ru=' документ-исправление';uk=' документ-виправлення'"),НСтр("ru=' документа-исправления';uk=' документа-виправлення'"),НСтр("ru=' документов-исправлений';uk=' документів-виправлень'"),ВсегоИсправлений) 
					+ ОбщегоНазначения.ФормаМножественногоЧисла(НСтр("ru=', зарегистрированный ';uk=', зареєстрований '"),НСтр("ru=', зарегистрированных ';uk=',, зареєстрованих '"),НСтр("ru=', зарегистрированных ';uk=',, зареєстрованих '"),ВсегоИсправлений) 
					+ ОписаниеПериода + НСтр("ru=' Отменить исправления?';uk=' Скасувати виправлення?'");
		
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, ,КодВозвратаДиалога.ОК);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
			ОбработкаКомментариев.УдалитьСообщения();
			Заголовок = ОбщегоНазначения.КомментарийРасчета(НСтр("ru='Удаление документов-исправлений';uk='Вилучення документів-виправлень'"));
			Если ВсегоИсправлений > 1 Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Для Сч = 1 По ВсегоИсправлений Цикл
				Значение = ИсправленияКОтмене[ВсегоИсправлений - Сч];
				Документ = Значение.ПолучитьОбъект();
				ОбщегоНазначения.КомментарийРасчета(НСтр("ru='Документ №';uk='Документ №'") + Документ.Номер + НСтр("ru=' от ';uk=' від '") + Документ.Дата + НСтр("ru=' обработан успешно. ';uk=' оброблений успішно. '"), Заголовок, "Открыть", Значение);
				Документ.ПерерассчитываемыйДокумент = Неопределено;
				Документ.ПометкаУдаления = Истина;
				Попытка
					Документ.Записать(?(Документ.Проведен, РежимЗаписиДокумента.ОтменаПроведения,РежимЗаписиДокумента.Запись));
				Исключение
					Если ВсегоИсправлений > 1 Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
					ОбщегоНазначения.КомментарийРасчета(НСтр("ru='Документ №';uk='Документ №'") + Документ.Номер + НСтр("ru=' от ';uk=' від '") + Документ.Дата + НСтр("ru=' удалить не удалось! Процедура отмены исправлений отменена. ';uk=' вилучити не вдалося! Процедура скасування виправлень скасована. '"), , "Открыть", Значение,Перечисления.ВидыСообщений.Ошибка);
					ОбработкаКомментариев.ПоказатьСообщения();
					Возврат;
				КонецПопытки;
			КонецЦикла;
			Если ВсегоИсправлений > 1 Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			ОбработкаКомментариев.ПоказатьСообщения();
	
		Иначе
			Возврат 
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

// Устанавливает имя и доступность кнопки ТекущийСотрудник механизма исправлений
//
// Параметры
//	ТипДанных - тип Тип.- определяет тип переданного текущего элемента: Сотрудник или Физлицо
//  ТекущийСотрудник - тип СправочникСсылка.СотрудникиОрганизаций или СправочникСсылка.ФизическиеЛица, текущий сотрудник формы
//  СотрудникиСИсправлениями - тип Соответствие, содержит всех сотрудников, чьи расчеты уже подвергались исправлениям
//  Кнопка - описываемая кнопка командной панели
//  ИмяБезСотрудника - строка, имя кнопки "по умолчанию"
//
Функция ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипДанных, ТекущийСотрудник, СотрудникиСИсправлениями, Кнопка, ИмяБезСотрудника = "Расчеты текущего сотрудника") Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущийСотрудник) Тогда
		Кнопка.Текст = ИмяБезСотрудника;             
		Кнопка.Доступность = Истина;
		Возврат ""
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сотрудник", ТекущийСотрудник);
		Если ТипДанных = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СотрудникиОрганизаций.Наименование,
			|	СотрудникиОрганизаций.Физлицо.Пол КАК Пол
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ФизическиеЛица.Наименование,
			|	ФизическиеЛица.Пол
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	ФизическиеЛица.Ссылка = &Сотрудник";
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Не Выборка.Следующий() Тогда
			Кнопка.Текст = ИмяБезСотрудника;             
			Кнопка.Доступность = Истина;
			Возврат ""
		КонецЕсли;
		
		ФИО = ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.Наименование);
		
		ПозицияПервогоПробела = Найти(ФИО + " "," ");
		Фамилия  = Лев(ФИО,ПозицияПервогоПробела-1);
		Инициалы = Сред(ФИО,ПозицияПервогоПробела+1);
		
		Кнопка.Текст = "Расчеты " + ФИО;
		Кнопка.Доступность = (СотрудникиСИсправлениями[ТекущийСотрудник] = Неопределено);
		
		Возврат ФИО;
		
	КонецЕсли;	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРЕДСТАВЛЕНИЯ ИНФОРМАЦИИ В ФОРМЕ

// По описателям состояния расчетного документа (флажкам) формирует текст инфо-строки и важность сообщения
//
// Параметры
//	НеЗаполнен,ЗаполненСОшибками,Рассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Отсторнирован - булево (все)
//		описывают достижение документом того или иного состояния
//
// Возвращаемое значение:
//	Структура из двух строковых значений - ТекстСообщения и ВажностьСообщения
//
Функция ПолучитьОписаниеРасчетногоДокумента(Заполнен = Ложь, ЗаполненСОшибками = Ложь, Рассчитан = Ложь, Проведен = Ложь, ЭтоИсправление = Ложь, ДокументИсправлен = Ложь, Отсторнирован = Ложь, ТолькоПросмотр = Ложь, ИмеетПродолжение = Ложь, ЯвляетсяПродолжением = Ложь) Экспорт 

	ТекстСообщения = "";
	ВажностьСообщения = "";
	
	Если Не Заполнен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = НСтр("ru='Документ не заполнен';uk='Документ не заповнений'");
	ИначеЕсли ЭтоИсправление Тогда
		ТекстСообщения = НСтр("ru='Документ является исправлением документа прошлого периода; ';uk='Документ є виправленням документа минулого періоду; '");
		Если ДокументИсправлен Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			Если Не Рассчитан Тогда
				ТекстСообщения = ТекстСообщения + НСтр("ru='не был рассчитан, но ';uk='не був розрахований, але '");
			КонецЕсли;
			ТекстСообщения = ТекстСообщения + НСтр("ru='был исправлен; редактирование документа запрещено';uk='був виправлений; редагування документа заборонено'")
		ИначеЕсли ЗаполненСОшибками Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			ТекстСообщения = ТекстСообщения + НСтр("ru='поля документа заполнены не полностью или неверно';uk='поля документа заповнені не повністю або невірно'");
		ИначеЕсли Не Рассчитан Тогда
			ВажностьСообщения = "ВажнаяИнформация";
			ТекстСообщения = ТекстСообщения + НСтр("ru='документ не рассчитан';uk='документ не розрахований'");
		ИначеЕсли Рассчитан И Не Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + НСтр("ru='рассчитан, но не проведен';uk='розрахований, але не проведений'");
		ИначеЕсли Рассчитан И Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + НСтр("ru='рассчитан и проведен';uk='розрахований і проведений'");
		КонецЕсли;
	ИначеЕсли ДокументИсправлен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = НСтр("ru='Документ ';uk='Документ '");
		Если Не Рассчитан Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru='не был рассчитан, но ';uk='не був розрахований, але '");
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + НСтр("ru='был исправлен; редактирование документа запрещено';uk='був виправлений; редагування документа заборонено'")
	ИначеЕсли Отсторнирован Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = НСтр("ru='Документ был отменен полностью (отсторнирован); редактирование документа запрещено';uk='Документ був повністю скасований (відсторнований); редагування документа заборонено'");
	ИначеЕсли ЗаполненСОшибками Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = НСтр("ru='Поля документа заполнены не полностью или неверно';uk='Поля документа заповнені не повністю або невірно'");
	ИначеЕсли Не Рассчитан Тогда
		ВажностьСообщения = "ВажнаяИнформация";
		ТекстСообщения = НСтр("ru='Документ не рассчитан';uk='Документ не розраховано'");
	ИначеЕсли Рассчитан И Не Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = НСтр("ru='Документ рассчитан, но не проведен';uk='Документ розрахований, але не проведений'");
	ИначеЕсли Рассчитан И Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = НСтр("ru='Документ рассчитан и проведен';uk='Документ розрахований і проведений'");
	КонецЕсли;
	
	Если ТолькоПросмотр и НЕ ДокументИсправлен и НЕ Отсторнирован Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru='. Редактирование документа запрещено';uk='. Редагування документа заборонено'");
	КонецЕсли;
	
	ТекстПродолжений = "";
	Если ЯвляетсяПродолжением Тогда
		ТекстПродолжений = НСтр("ru='Этот больничный является б/л-продолжением. ';uk='Цей лікарняний є л/л-продовженням. '");
	КонецЕсли;
	Если ИмеетПродолжение Тогда
		ТекстПродолжений = ТекстПродолжений + НСтр("ru='Этот больничный имеет продолжение. ';uk='Цей лікарняний має продовження. '");
	КонецЕсли;
	
	Возврат Новый Структура("ТекстСообщения,ВажностьСообщения", ТекстПродолжений + ТекстСообщения, ВажностьСообщения)

КонецФункции

// Выводит надпись и соответствующую ей картинку
//
// Параметры
//  ЭУНадпись, ЭУКартинка - элементы управления формы, соответственно надпись и картинка
//  ТекстСообщения - строка - выводимое сообщение
//  ВажностьСообщения - строка - определяет расцветку текста и картинку
//		допустимые значения: "СообщениеОПроблемах", "ВажнаяИнформация" и "Информация"
//
Процедура ПоказатьИнформациюОДокументе(ЭУНадпись = Неопределено, ЭУКартинка = Неопределено, ТекстСообщения = "", ВажностьСообщения = "") Экспорт 

	Если ЭУНадпись = Неопределено Или ЭУКартинка = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ВажностьСообщения = "ВажнаяИнформация" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеВажнаяИнформация;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияВажнойИнформации;
	ИначеЕсли ВажностьСообщения = "СообщениеОПроблемах" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеОПроблемах;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияОПроблемах;
	ИначеЕсли ВажностьСообщения = "Ошибка" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеОшибка;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияОПроблемах;
	Иначе
		ЭУКартинка.Картинка	= БиблиотекаКартинок.СообщениеИнформация;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияИнформации;
	КонецЕсли;
	ЭУНадпись.Заголовок = ТекстСообщения;
	
КонецПроцедуры // ПоказатьИнформациюОДокументе()

Процедура УстановитьДоступностьФормыДляРедактирования(ДокументОбъект, ФормаДокумента) Экспорт
	
	//ФормаДокумента.ТолькоПросмотр = НастройкаПравДоступа.ДокументВЗакрытомПериоде(ДокументОбъект);
	Если НастройкаПравДоступа.ДокументВЗакрытомПериоде(ДокументОбъект) Тогда
		ФормаДокумента.ТолькоПросмотр = Истина;
	КонецЕсли;	
КонецПроцедуры	// УстановитьДоступностьФормыДляРедактирования

Процедура УстановитьОтборыИСверткуПоказателей(ЭлементыФормы, Показатели, ПроизвольнаяФормулаРасчета = Истина) Экспорт
	
	ПоказателиДляОтбора = Новый СписокЗначений;
	Если ПроизвольнаяФормулаРасчета Тогда
		Для Каждого СтрокаПоказатель Из Показатели Цикл
			Показатель = СтрокаПоказатель.Показатель;
			Если Показатель.ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется И Не Показатель.Предопределенный
				И Не (Показатель.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная Или Показатель.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
				И Не (Показатель.ТарифнаяСтавка ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная
				ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная 
				ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)Тогда
				
				ПоказателиДляОтбора.Добавить(Показатель);
			КонецЕсли;
		КонецЦикла;
		ЭлементыФормы.Показатели.ОтборСтрок.Показатель.Использование = Истина;
		ЭлементыФормы.Показатели.ОтборСтрок.Показатель.ВидСравнения = ВидСравнения.ВСписке;
		ЭлементыФормы.Показатели.ОтборСтрок.Показатель.Значение = ПоказателиДляОтбора;
	КонецЕсли;
	
	ИзменитьВидимостьПанелиПоВертикалиНиз(ЭлементыФормы.ПанельПредставлениеФормулы, ПоказателиДляОтбора.Количество() <> 0, ЭлементыФормы.СпособРасчетаПредставление, ЭлементыФормы.ПанельПоказателей, ЭлементыФормы.РазделительПоказателей)
	
КонецПроцедуры

// Процедура управляет отображением панелей формы путем свертки в низ
// Пареметры
//	 Панель - Панель, к низу которой производим привязку панели ВерхняяПанель при свертке панели НижняяПанель
//	 ОтображатьПанель - булево
//	 ВерхняяПанель - панель формы, которая всегда видима
//	 НижняяПанель - панель формы, которую сворачиваем в низ
//	 Разделитель - разделитель верхней и нижней панели
//
Процедура ИзменитьВидимостьПанелиПоВертикалиНиз(Панель, ОтображатьПанель, ВерхняяПанель, НижняяПанель, Разделитель) Экспорт
	
	Если ОтображатьПанель Тогда
		
		Если НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Низ Тогда
			// необходимо развернуть панель
			
			// текущая высота основной панели
			НачальнаяВысотаОсновнойПанели = ВерхняяПанель.Высота;
			
			// на основную панель отдаем половину высоты
			ВерхняяПанель.Высота = Окр(НачальнаяВысотаОсновнойПанели * 0.6 ,0);
			
			// развернем разделитель, устатановим его внизу основной панели, настроим привязки
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			Разделитель.Верх = ВерхняяПанель.Верх + ВерхняяПанель.Высота;
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Низ);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
			
			// развернем нижнюю панель,установим ее к разделителю, настроим привязки
			НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Нет;
			НижняяПанель.Верх = Разделитель.Верх + 6;
            НижняяПанель.Высота = НачальнаяВысотаОсновнойПанели - ВерхняяПанель.Высота - 6;
			НижняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Верх);
			НижняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			
		КонецЕсли;
		
		ВерхняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Верх);
		
	Иначе // надо скрыть нижнюю панель	
		
		Если НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			
			//это та высота основной панели, которую необходимо установить
			ВысотаОсновнойПанели = НижняяПанель.Верх + НижняяПанель.Высота - ВерхняяПанель.Верх;
			
			// свернем элементы
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Низ;
			НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Низ;
			
			//перенесем ЭУ в низ формы и переопределим привязки
			Разделитель.Верх  = ВысотаОсновнойПанели;
			НижняяПанель.Верх = ВысотаОсновнойПанели;
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			НижняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			
			// распахнем и привяжем основную панель
			ВерхняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			ВерхняяПанель.Высота = ВысотаОсновнойПанели;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура открывает редактор формуль расчета из вида расчета
//
// Параметры
//  ФормаПВР  - форма вида расчета из которой вызывается редактор формул расчета
//	Показатели - таблица показателей 
//  Наименование - наименование вида расчета
//  ФормулаРасчета - формула расчета
//
Процедура ОткрытьФормуРедактированияФормулы(ФормаПВР, Показатели, Наименование, ФормулаРасчета, ВидРасчета, ВидПВР = "") Экспорт 
	
	РедакторФормулРасчета = ПолучитьОбщуюФорму("РедакторФормулРасчета", ФормаПВР);
	РедакторФормулРасчета.Заголовок = НСтр("ru='Редактирование формулы расчета: ';uk='Редагування формули розрахунку: '") + Наименование;
	
	ПоказателиДляФормыВвода = Новый СписокЗначений;
	
	ФормулаРасчетаДляФормулы = ФормулаРасчета;
	
	ФормулаРасчетаДляФормулы = СтрЗаменить(ФормулаРасчетаДляФормулы,"ПроведениеРасчетов.", "");

	
	Для Каждого Показатель Из Показатели Цикл
		
		//ПоказательДляФормулы = Строка(Показатель.Показатель.Идентификатор);
		//				
		//ФормулаРасчетаДляФормулы	= СтрЗаменить(ФормулаРасчетаДляФормулы, "ИсходныеДанные.Показатель"+Показатель.НомерСтроки, ПоказательДляФормулы);
		//
		ПоказателиДляФормыВвода.Добавить(Показатель.Показатель);
		
	КонецЦикла;
	
	ФормулаРасчетаДляФормулы = ПроведениеРасчетов.ПолучитьHTLMКодФормулыРасчета(ФормулаРасчетаДляФормулы, Показатели, "Текст", Истина);

	
	РедакторФормулРасчета.ВидРасчета	= ВидРасчета;
	РедакторФормулРасчета.Показатели	= ПоказателиДляФормыВвода;	
	РедакторФормулРасчета.ФормулаРасчета= ФормулаРасчетаДляФормулы;
	РедакторФормулРасчета.ВидПВР		= ВидПВР;
	РедакторФормулРасчета.Открыть();
	

КонецПроцедуры //ОткрытьФормуРедактированияФормулы

// Эта функция возвращает информацию о виде расчета из переданного соответствия
// Если в соответствии не найдена информация о виде расчета - она подготавливается и 
// помещается в соответствие
// Применяется для работы с формами, в которых активно требуется получать 
// информащцию о видах расчета, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОВидахРасчета - соответствие, у котрого в качестве ключа - ПланВидовРасчетаСсылка, а 
//  				  в качестве значения - структура из элементов
//					  РазмерТребуется - булево - если да, то при вводе такого 
//										вида расчета требуется проставлять значение "размер" 
//										(суммы, проценты и проч. показатели, используемые при расчете)
//
//	ВидРасчета - ПланВидовРасчетаСсылка
//
// Возвращаемое значение:
//  Описанная выше структура
//
Функция ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета, Режим = "ПлановыеНачисления") Экспорт
	
	СведенияОВидеРасчета = СведенияОВидахРасчета[ВидРасчета];
	
	Если СведенияОВидеРасчета = Неопределено Тогда
		ТипВидРасчета = ТипЗнч(ВидРасчета);
		ИзменениеПоказателяНеУказано = Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка();
				
		СведенияОВидеРасчета = Новый Структура("КоличествоПоказателей,РазмерТребуется,НеТребуетВалюты,ТребуетВводаТарифногоРазряда,ФактКоличествоПоказателей",1, Ложь, Ложь, Ложь,0);
																					
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Показатели.Показатель,
		|	ВЫБОР
		|		КОГДА  НЕ Показатели.ЗапрашиватьПриКадровыхПеремещениях
		|			ТОГДА ИСТИНА
		|       ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НЕЗапрашиватьПриКадровыхПеремещениях,
		|	ВЫБОР
		|		КОГДА Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ПустаяСсылка) 
		|			ТОГДА ИСТИНА
		|	    ИНАЧЕ Показатели.Показатель.Предопределенный
		|	КОНЕЦ КАК Предопределенный,
		|	ВЫБОР КОГДА Показатели.Показатель.Предопределенный ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоПредопределенный,
		|	Показатели.Показатель.Наименование КАК ПоказательНаименование,
		|	Показатели.Показатель.ТипПоказателя,
		|	ЕСТЬNULL(Показатели.Показатель.ВозможностьИзменения, ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)) КАК ПоказательВозможностьИзменения,
		|	Показатели.НомерСтроки,
		|	Максимум(Показатели.НомерСтроки) КАК КоличествоПоказателей
		|ИЗ ПланВидовРасчета."+ВидРасчета.Метаданные().Имя+".Показатели КАК Показатели
		////Если ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
		////	Запрос.Текст = Запрос.Текст + "
		////	|	ПланВидовРасчета."+ВидРасчета.Метаданные().Имя+".Показатели КАК Показатели";
		////ИначеЕсли ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.Удержания") Тогда
		////	Запрос.Текст = Запрос.Текст + "
		////	|	ПланВидовРасчета.Удержания.Показатели КАК Показатели";
		////КонецЕсли;
		////Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	Показатели.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	Показатели.Показатель,
		|	ВЫБОР
		|		КОГДА  НЕ Показатели.ЗапрашиватьПриКадровыхПеремещениях
		|			ТОГДА ИСТИНА
		|       ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ПустаяСсылка) 
		|			ТОГДА ИСТИНА
		|	    ИНАЧЕ Показатели.Показатель.Предопределенный
		|	КОНЕЦ,
		|	ВЫБОР КОГДА Показатели.Показатель.Предопределенный ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	Показатели.Показатель.Наименование,
		|	Показатели.Показатель.ТипПоказателя,
		|	ЕСТЬNULL(Показатели.Показатель.ВозможностьИзменения, ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)),
		|	Показатели.НомерСтроки";
		
		Запрос.УстановитьПараметр("Ссылка",ВидРасчета);

		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			СтрокаТаблицыСведений = РезультатЗапроса.Выбрать();
			Пока СтрокаТаблицыСведений.Следующий() Цикл
				
				СведенияОВидеРасчета["КоличествоПоказателей"] = Макс(СведенияОВидеРасчета["КоличествоПоказателей"], СтрокаТаблицыСведений["КоличествоПоказателей"]);
				СведенияОВидеРасчета["ФактКоличествоПоказателей"] = Макс(СтрокаТаблицыСведений["КоличествоПоказателей"],СведенияОВидеРасчета["ФактКоличествоПоказателей"]);
				
				СчПоказателей 			= СтрокаТаблицыСведений.НомерСтроки;
				
				ВозможностьИзменения	= СтрокаТаблицыСведений["ПоказательВозможностьИзменения"];
				ТипПоказателя			= СтрокаТаблицыСведений["ПоказательТипПоказателя"];
				
				СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность",3);
				СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "ВозможностьИзменения",СтрокаТаблицыСведений["ПоказательВозможностьИзменения"]);
				СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Наименование",СтрокаТаблицыСведений["ПоказательНаименование"]);
				
				СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей ,СтрокаТаблицыСведений["Показатель"]);
				

				Если СтрокаТаблицыСведений["НЕЗапрашиватьПриКадровыхПеремещениях"] <> Null
					И СтрокаТаблицыСведений["НЕЗапрашиватьПриКадровыхПеремещениях"] 
					И Не СтрокаТаблицыСведений["ЭтоПредопределенный"] Тогда
					Если Режим = "ПлановыеНачисления" Тогда
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
				   Иначе
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" ,Истина);
						Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Числовой Тогда
							
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							
						ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный Тогда

							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность",2);
							
							
						ИначеЕсли (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
							Или (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная) Тогда

							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							
						ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" ,Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Истина);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Истина);						
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);

							
						Иначе
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли СтрокаТаблицыСведений["Предопределенный"] <> Null И СтрокаТаблицыСведений["Предопределенный"] Тогда
					
					Если Режим <> "ПлановыеНачисления" И (СтрокаТаблицыСведений.Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная
						     или СтрокаТаблицыСведений.Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная
							 или СтрокаТаблицыСведений.Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая) Тогда
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);	 
					Иначе
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
					КонецЕсли;	
				ИначеЕсли Режим = "ПлановыеНачисления" 
					и (СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете
					Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.ВиденНоНеРедактируетсяПриРасчете) Тогда
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость" , Ложь);
					СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость" , Ложь);
					СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость" , Ложь);
					СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость" , Ложь);
					
				Иначе
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" ,Истина);
					Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Числовой Тогда

						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
						
					ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный Тогда
						
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность",2);
						
						
					ИначеЕсли (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
						Или (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная) Тогда
						
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
						
					ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" ,Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Истина);						
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
						
					Иначе
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);						
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СведенияОВидеРасчета.Вставить("Показатель1Наименование", "");
			СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель1Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
			СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Ложь);
			СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Ложь);
			СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);


			СведенияОВидеРасчета.Вставить("Показатель2Наименование", "");
			СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель2Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Валюта2Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель2Точность", 2);
			СведенияОВидеРасчета.Вставить("Показатель2ВозможностьИзменения", Ложь);
			
			СведенияОВидеРасчета.Вставить("ПоказательТР2НаименованиеВидимость", Ложь);
			СведенияОВидеРасчета.Вставить("ПоказательТР2Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Ложь);
			
		КонецЕсли;
		
		// заполним для регламентированных способов оплаты труда
		Если ЗначениеЗаполнено(ВидРасчета) И (ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций")
				Или ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций")) Тогда
			СтруктураВидаРасчета = Новый Структура("СпособРасчета,ТребуетВводаТарифногоРазряда");
			ЗаполнитьЗначенияСвойств(СтруктураВидаРасчета,ВидРасчета);
			Если СтруктураВидаРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
				СведенияОВидеРасчета.Вставить("ФактКоличествоПоказателей",0);
				СведенияОВидеРасчета["Показатель1Точность"] = 3;
				Если СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент оплаты");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
				ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке
					Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням
					Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам
					Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке	Тогда
					Если СтруктураВидаРасчета.ТребуетВводаТарифногоРазряда Тогда
						СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("ПоказательТР1Наименование", "Тарифная ставка");
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
					Иначе
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Оклад/Тариф");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
					КонецЕсли;
				ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы
					Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
					СведенияОВидеРасчета["КоличествоПоказателей"] = 2;
					СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 2;
					Если Режим = "ПлановыеНачисления" Тогда
						СведенияОВидеРасчета["Показатель1Наименование"] = "Часовой тариф";
						СведенияОВидеРасчета["Показатель1Видимость"] = Ложь;
						СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Ложь;				
						СведенияОВидеРасчета["Валюта1Видимость"] = Ложь;
						СведенияОВидеРасчета["Показатель2Наименование"] = "Процент доплаты";
						СведенияОВидеРасчета["Показатель2Видимость"] = Истина;
						СведенияОВидеРасчета["Показатель2НаименованиеВидимость"] = Истина;				
						СведенияОВидеРасчета["Валюта2Видимость"] = Ложь;
					Иначе
						СведенияОВидеРасчета["Показатель1Наименование"] = "Часовой тариф";
						СведенияОВидеРасчета["Показатель1Видимость"] = Истина;
						СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;				
						СведенияОВидеРасчета["Валюта1Видимость"] = Истина;
						СведенияОВидеРасчета["Показатель2Наименование"] = "Процент доплаты";
						СведенияОВидеРасчета["Показатель2Видимость"] = Истина;
						СведенияОВидеРасчета["Показатель2НаименованиеВидимость"] = Истина;				
						СведенияОВидеРасчета["Валюта2Видимость"] = Ложь;
					КонецЕсли;
				ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеУмножитьНаПроцент
					Тогда
					СведенияОВидеРасчета["КоличествоПоказателей"] = 2;
					СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 2;
					Если Режим = "ПлановыеНачисления" Тогда
						СведенияОВидеРасчета["Показатель1Наименование"] = "Часовой тариф";
						СведенияОВидеРасчета["Показатель1Видимость"] = Ложь;
						СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Ложь;				
						СведенияОВидеРасчета["Валюта1Видимость"] = Ложь;
						
						СведенияОВидеРасчета["Показатель2Наименование"] = "Процент доплаты";
						СведенияОВидеРасчета["Показатель2Видимость"] = Ложь;
						СведенияОВидеРасчета["Показатель2НаименованиеВидимость"] = Ложь;				
						СведенияОВидеРасчета["Валюта2Видимость"] = Ложь;
					Иначе
						СведенияОВидеРасчета["Показатель1Наименование"] = "Часовой тариф";
						СведенияОВидеРасчета["Показатель1Видимость"] = Истина;
						СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;				
						СведенияОВидеРасчета["Валюта1Видимость"] = Истина;
						
						СведенияОВидеРасчета["Показатель2Наименование"] = "Процент доплаты";
						СведенияОВидеРасчета["Показатель2Видимость"] = Истина;
						СведенияОВидеРасчета["Показатель2НаименованиеВидимость"] = Истина;				
						СведенияОВидеРасчета["Валюта2Видимость"] = Ложь;
					КонецЕсли;	
				ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска
					Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку
					Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Сумма средней");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
				ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуКомпенсацияОтпуска Тогда
					СведенияОВидеРасчета["КоличествоПоказателей"] = 2;
					СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 2;
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Сумма средней");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
					
					СведенияОВидеРасчета.Вставить("Показатель2Наименование", "Время");
					СведенияОВидеРасчета.Вставить("Показатель2Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта2Видимость", Ложь);
				ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Тогда
					СведенияОВидеРасчета["КоличествоПоказателей"] = 2;
					СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 2;
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Сумма средней");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
					
					СведенияОВидеРасчета.Вставить("Показатель2Наименование", "Процент оплаты");
					СведенияОВидеРасчета.Вставить("Показатель2Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта2Видимость", Ложь);	
				ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВыходноеПособие Тогда
					СведенияОВидеРасчета["КоличествоПоказателей"] = 2;
					СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 2;

					СведенияОВидеРасчета["Показатель1Наименование"] = "Сумма средней";
					СведенияОВидеРасчета["Показатель1Видимость"] = Истина;
					СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;			
					СведенияОВидеРасчета["Валюта1Видимость"] = Ложь;
					
					СведенияОВидеРасчета["Показатель2Наименование"] = "Время";
					СведенияОВидеРасчета["Показатель2Видимость"] = Истина;
					СведенияОВидеРасчета["Показатель2НаименованиеВидимость"] = Истина;			
					СведенияОВидеРасчета["Валюта2Видимость"] = Ложь;	
				ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Тогда
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Сумма");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
				ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоначислениеОтОбратного Тогда
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Сумма ""от обратного""");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);	
				ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Сумма по договору");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);	
				ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом 
					Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.АлиментыПроцентом 
					Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела
					Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.АлиментыПроцентомДоПредела Тогда
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент удержаний");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
				ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела
					Или  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.АлиментыФиксСуммойДоПредела Тогда
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Сумма");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
				ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент сбора");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Ложь);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
				ИначеЕсли ПроведениеРасчетов.СпособРасчетаТребуетРазмер(СтруктураВидаРасчета.СпособРасчета) Тогда
					СведенияОВидеРасчета.Вставить(СведенияОВидеРасчета.РазмерТребуется, Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					Если НЕ ПроведениеРасчетов.СпособРасчетаНеТребуетВалюты(СтруктураВидаРасчета.СпособРасчета) И Найти(Строка(СтруктураВидаРасчета.СпособРасчета), "П1") = 0 Тогда
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СведенияОВидахРасчета[ВидРасчета] = СведенияОВидеРасчета;
	КонецЕсли;

	Возврат СведенияОВидеРасчета;
	
КонецФункции  // ПолучитьСведенияОВидеРасчетаСхемыМотивации

// Формирует представление переданного способа отражения с "предметной" точки зрения
//
// Параметры
//  СпособОтраженияВБухучете - СправочникСсылка.СпособыОтраженияЗарплатыВРеглУчете - описываемый 
//                 способ отражения
//  НетБазовыхРасчетов - булево - указывает на наличие/отсутствие у в.р. расчетной базы
//
// Возвращаемое значение:
//   строка - сформированное представление
//
Функция ПолучитьПредставлениеСпособаОтраженияНачисленияВУчетах(СпособОтраженияВБухучете, НетБазовыхРасчетов) Экспорт
	
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",СпособОтраженияВБухучете);
		Запрос.УстановитьПараметр("Подразделения",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СпособыОтраженияЗарплатыВРеглУчете.СчетДт.Код, """") КАК СчетДт,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт1) КАК СубконтоДт1Представление,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт2) КАК СубконтоДт2Представление,
		|	ПРЕДСТАВЛЕНИЕ(СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт3) КАК СубконтоДт3Представление,
		|	ЕСТЬNULL(СпособыОтраженияЗарплатыВРеглУчете.СчетКт.Код, """") КАК СчетКт
		|ИЗ
		|	(ВЫБРАТЬ
		|		СпособыОтраженияЗарплатыВРеглУчете.Ссылка КАК Ссылка,
		|		СпособыОтраженияЗарплатыВРеглУчете.СчетДт КАК СчетДт,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт1 КАК СубконтоДт1,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт2 КАК СубконтоДт2,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт3 КАК СубконтоДт3,
		|		СпособыОтраженияЗарплатыВРеглУчете.СчетКт КАК СчетКт,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоКт1 КАК СубконтоКт1,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоКт2 КАК СубконтоКт2,
		|		СпособыОтраженияЗарплатыВРеглУчете.СубконтоКт3 КАК СубконтоКт3
		|	ИЗ
		|		Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК СпособыОтраженияЗарплатыВРеглУчете
		|	ГДЕ
		|		СпособыОтраженияЗарплатыВРеглУчете.Ссылка = &Ссылка) КАК СпособыОтраженияЗарплатыВРеглУчете";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		РасшифровкаТекст = НСтр("ru='Бухгалтерский учет: ';uk='Бухгалтерський облік: '");
		Если ЗначениеЗаполнено(Выборка.СчетДт) Тогда
			РасшифровкаТекст = РасшифровкаТекст + "Дт " + Выборка.СчетДт;
		ИначеЕсли НетБазовыхРасчетов Тогда
			РасшифровкаТекст = РасшифровкаТекст + НСтр("ru='Дт <не указано>';uk='Дт <не вказано>'");
		Иначе
			РасшифровкаТекст = РасшифровкаТекст + НСтр("ru='счет дебета определяется по расчетной базе';uk='рахунок дебету визначається за розрахунковою базою'");
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.СчетКт) Тогда
			РасшифровкаТекст = РасшифровкаТекст + НСтр("ru=' Кт ';uk=' Кт '") + Выборка.СчетКт;
		ИначеЕсли НетБазовыхРасчетов Тогда
			РасшифровкаТекст = РасшифровкаТекст + НСтр("ru=' Кт <не указано>';uk=' Кт <не вказано>'");
		Иначе
			РасшифровкаТекст = РасшифровкаТекст + НСтр("ru='; счет кредита определяется по расчетной базе';uk='; рахунок кредиту визначається по розрахунковій базі'");
		КонецЕсли;
		
	Возврат РасшифровкаТекст	
	
КонецФункции // ПолучитьПредставлениеСпособаОтраженияНачисленияВУчетах()

// Выводит строки показателей в списке регистра сведений плановых удержаний
//
Процедура ОформитьСтрокиПлановыхУдержаний(Элемент, мСведенияОВидахРасчета, ОформленияСтрок) Экспорт
	
	ДлинаСуток = 86400;

	Для каждого Строка Из ОформленияСтрок Цикл
		
		ДанныеСтроки = Строка.ДанныеСтроки;
		ВидРасчета = ДанныеСтроки.ВидРасчета;
		
		СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
		
		ЕстьПоказатели = Ложь;
		Для СчПоказателей = 1 По 6 Цикл
			
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
				ВидимостьПоказателяИВалюты = Истина;
				Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Истина;
					ЕстьПоказатели = Истина;
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				Иначе
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
				Если ВидимостьПоказателяИВалюты Тогда
					Строка.Ячейки["Показатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];		
					Строка.Ячейки["Валюта" + СчПоказателей].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
				Иначе
					Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;		
					Строка.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
			Иначе
				Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;		
				Строка.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;			
			КонецЕсли;
			
		КонецЦикла;
		
		Если не ЕстьПоказатели Тогда		
			Строка.Ячейки.НаименованиеПоказатель1.Видимость = Истина;
			Строка.Ячейки["Показатель1"].Видимость = Истина;		
			Строка.Ячейки["Валюта1"].Видимость = Истина;		
		КонецЕсли;	
		Строка.Ячейки.Показатели.Видимость = Ложь;
		
		
	КонецЦикла;	
	
КонецПроцедуры

// Выводит строки показателей в списке регистра сведений плановых начислений
//
Процедура ОформитьСтрокиПлановыхНачислений(Элемент, мСведенияОВидахРасчета, ОформленияСтрок) Экспорт

	ДлинаСуток = 86400;
	
	Для каждого Строка Из ОформленияСтрок Цикл
		
		ДанныеСтроки = Строка.ДанныеСтроки;
		ВидРасчета = ДанныеСтроки.ВидРасчета;
		
		Если ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
			
			СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
			
			ЕстьПоказатели = Ложь;
			Для СчПоказателей = 1 По 6 Цикл
				Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
					ВидимостьПоказателяИВалюты = Истина;
					Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Истина;
						ЕстьПоказатели = Истина;
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
						Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Ложь;
					ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
						ВидимостьПоказателяИВалюты = Ложь;
						ЕстьПоказатели = Истина;
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
						Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Истина;	
						Строка.Ячейки["ТарифныйРазряд" + СчПоказателей].Видимость = Истина;
					Иначе
						Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Ложь;
					КонецЕсли;
					Если ВидимостьПоказателяИВалюты Тогда
						Строка.Ячейки["Показатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
						Строка.Ячейки["Валюта" + СчПоказателей].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
						Если Строка.Ячейки["Показатель" + СчПоказателей].Видимость Тогда
							Строка.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
						КонецЕсли;
					Иначе
						Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
						Строка.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;
					КонецЕсли;
				Иначе
					Строка.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
					Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
					Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
					Строка.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Ложь;				
					Строка.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
			КонецЦикла;
			Если не ЕстьПоказатели Тогда
				Строка.Ячейки.НаименованиеПоказатель1.Видимость = Истина;
				Строка.Ячейки["Показатель1"].Видимость = Истина;
				Строка.Ячейки["Валюта1"].Видимость = Истина;
				Строка.Ячейки["НаименованиеПоказательТР1"].Видимость = Ложь;
				Строка.Ячейки["ТарифныйРазряд1"].Видимость = Ложь;
			КонецЕсли;
			Строка.Ячейки.Показатели.Видимость = Ложь;
			
		Иначе
			
			СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ДанныеСтроки.ВидРасчета);
			
			Строка.Ячейки["НаименованиеПоказатель1"].Видимость	= Истина;
			Строка.Ячейки["НаименованиеПоказательТР1"].Видимость	= Ложь;
			Строка.Ячейки["ТарифныйРазряд1"].Видимость			= Ложь;
			Строка.Ячейки["Показатель1"].Видимость				= Истина;
			Строка.Ячейки["Валюта1"].Видимость					= Истина;
			Строка.Ячейки["НаименованиеПоказатель1"].УстановитьТекст(СведенияОВидеРасчета["Показатель1Наименование"]);
			
			Для СчПоказателей = 2 По 6 Цикл
				Строка.Ячейки["НаименованиеПоказатель" + СчПоказателей ].Видимость	= Ложь;
				Строка.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость	= Ложь;
				Строка.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость				= Ложь;
				Строка.Ячейки["Показатель" + СчПоказателей].Видимость					= Ложь;
				Строка.Ячейки["Валюта" + СчПоказателей].Видимость						= Ложь;
			КонецЦикла;
			Строка.Ячейки.Показатели.Видимость = Ложь;
		КонецЕсли;		
	КонецЦикла;

КонецПроцедуры

Функция ПроверитьПВРНаПустыеСтрокиВТЧ(ВидРасчета, ЕстьВытесняющиеВидыРасчета = Ложь) Экспорт
	
	КоничествоСтрок = ВидРасчета.БазовыеВидыРасчета.Количество() - 1;
	НомерСтроки = 0;
	Пока НомерСтроки <= КоничествоСтрок Цикл
		СтрокаБазовыйРасчет = ВидРасчета.БазовыеВидыРасчета[НомерСтроки];
		Если Не ЗначениеЗаполнено(СтрокаБазовыйРасчет.ВидРасчета) Тогда
			ВидРасчета.БазовыеВидыРасчета.Удалить(НомерСтроки );
			КоничествоСтрок = КоничествоСтрок - 1;
		Иначе
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	КоничествоСтрок = ВидРасчета.ВедущиеВидыРасчета.Количество() - 1;
	НомерСтроки = 0;
	Пока НомерСтроки <= КоничествоСтрок Цикл
		СтрокаВедущийРасчет = ВидРасчета.ВедущиеВидыРасчета[НомерСтроки];
		Если Не ЗначениеЗаполнено(СтрокаВедущийРасчет.ВидРасчета) Тогда
			ВидРасчета.ВедущиеВидыРасчета.Удалить(НомерСтроки );
			КоничествоСтрок = КоничествоСтрок - 1;
		Иначе
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВытесняющиеВидыРасчета Тогда
		
		КоничествоСтрок = ВидРасчета.ВытесняющиеВидыРасчета.Количество() - 1;
		НомерСтроки = 0;
		Пока НомерСтроки <= КоничествоСтрок Цикл
			СтрокаВытесняющейРасчет = ВидРасчета.ВытесняющиеВидыРасчета[НомерСтроки];
			Если Не ЗначениеЗаполнено(СтрокаВытесняющейРасчет.ВидРасчета) Тогда
				ВидРасчета.ВытесняющиеВидыРасчета.Удалить(НомерСтроки );
				КоничествоСтрок = КоничествоСтрок - 1;
			Иначе
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецФункции

// управляет валютой в зависимости от способа расчета
//
Процедура ПриИзмененииВидаРасчета(ИмяОбъекта,Значение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета) Экспорт

	СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, Значение);

	Для СчПоказателей = 1 По 6 Цикл		
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда			
			Если НЕ ЗначениеЗаполнено(ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей]) И 
				СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей] = мВалютаУправленческогоУчета;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей] = Справочники.Валюты.ПустаяСсылка();
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Показатель" + СчПоказателей] = 0;
			КонецЕсли;
		Иначе
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Валюта" + СчПоказателей]		= Справочники.Валюты.ПустаяСсылка();
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Показатель" + СчПоказателей]	= 0;						
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ПриИзмененииВидаРасчета

// Записывает документ в режиме отмены проведения, проверяет необходимость очистки табличных частей, спросив об этом у пользователя
// Параметры
//  Объект        - ДокументОбъект
//  ФормаОбъекта  – Тип - Форма
//                 форма документа из которого вызвана функция
//  ТекстВопроса1 и ТекстВопроса2  – Тип – Строка
//                 текст вопроса
//  ЗаписыватьДокумент - параметр определяет, производить запись документа или нет, с параметром Ложь функция
//						 вызывается при заполнении списком, т.е. запись документа необходимо произвести
//						 только если пользователь не откажется от заполнения списком в обработчике ОбработкаВыбора формы
//
// Возвращаемое значение:
//   Истина   – если не требуется запись документа или запись прошла успешно
//   Ложь     - отказ пользователя от записи или не удачная попытка записи
Функция ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(Объект, ФормаОбъекта, ТабличныеЧасти, ТекстВопроса1, ТекстВопроса2, ЗаписыватьДокумент = Истина) Экспорт
	
	Если Объект.Проведен Тогда
		
		//документ проведен, необходимо записать документ отменив проведение и очистить табличные части
		
		Если Вопрос(ТекстВопроса1, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		Если ЗаписыватьДокумент Тогда
			Попытка
				ФормаОбъекта.ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
			Исключение
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		
		// документ не проведен, необходимо записать документ и очистиить табличные части, вопросы
		// пользователю задаем только по поводу очистки табличных частей
		НадоОчищатьТабличныеЧасти = Ложь;
		Если НЕ ТабличныеЧасти = Неопределено Тогда
			//проверим заполнение табличных частей			
			Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
				НадоОчищатьТабличныеЧасти = ТабличнаяЧасть.Количество() > 0;
				Если НадоОчищатьТабличныеЧасти Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НадоОчищатьТабличныеЧасти Тогда
				
				Ответ = Вопрос(ТекстВопроса2, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
				
				Если Ответ <> КодВозвратаДиалога.Да Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗаписыватьДокумент И Объект.Модифицированность() Тогда //запишем документ
			
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
			Исключение
				Возврат Ложь;
			КонецПопытки;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЛАНОВ ВИДОВ РАСЧЕТА

// Предназначена для реализации "произвольного" ввода даты-месяца
// подбирает по переданному тексту строку-представление даты или список таких строк
// в переданный параметр ДатаПоТексту возвращает подобранную по тексту дату
Функция ПериодПодобратьПоТексту(Текст, Периодичность, ДатаПоТексту = Неопределено) Экспорт
	
	СписокВозврата = Новый СписокЗначений;
	
	ТекущаяДата		= ОбщегоНазначения.ПолучитьРабочуюДату();
	ТекущийГод		= Год(ТекущаяДата);
	ТекущийКвартал	= Цел(Месяц(ТекущаяДата) / 4) + 1;
	ТекущийМесяц	= Месяц(ТекущаяДата);
	ТекущаяНеделя	= НеделяГода(ТекущаяДата);
	ТекущийДень		= День(ТекущаяДата);
	
	НачалоГода		= НачалоГода(ТекущаяДата);
	НачалоМесяца	= НачалоМесяца(ТекущаяДата);
	КонецГода		= КонецГода(ТекущаяДата);
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат СписокВозврата;
	КонецЕсли;
	
	Если Найти(Текст, ".") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ".");
		ИспользуемыйРазделитель = ".";
		
	ИначеЕсли Найти(Текст, ",") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ",");
		ИспользуемыйРазделитель = ",";
		
	ИначеЕсли Найти(Текст, "-") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "-");
		ИспользуемыйРазделитель = "-";
		
	ИначеЕсли Найти(Текст, "/") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "/");
		ИспользуемыйРазделитель = "/";
		
	ИначеЕсли Найти(Текст, "\") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "\");
		ИспользуемыйРазделитель = "\";
		
	Иначе
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, " ");
		ИспользуемыйРазделитель = " ";
		
	КонецЕсли;
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		КонецПериода = День(КонецМесяца(ТекущаяДата));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		КонецПериода = НеделяГода(КонецГода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		КонецПериода = 12;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		КонецПериода = 4;
		
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 И Периодичность <> Перечисления.Периодичность.Год Тогда
		// единственное слово - пытаемся получить период
		
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Текст) Тогда
			ПериодЧислом = Число(Текст);
			
			Если ПериодЧислом >= 1 И ПериодЧислом <= КонецПериода Тогда
				Если Периодичность = Перечисления.Периодичность.День Тогда
					ДатаПоТексту = ОбщегоНазначения.ДобавитьИнтервал(НачалоМесяца, Периодичность, ПериодЧислом - 1);
				Иначе
					ДатаПоТексту = ОбщегоНазначения.ДобавитьИнтервал(НачалоГода, Периодичность, ПериодЧислом - 1);
				КонецЕсли;
				
				Если Периодичность = Перечисления.Периодичность.День Тогда
					Если СтрДлина(Текст) = 1 Тогда
						ФорматированнаяДата	= Формат(ДатаПоТексту, "ДФ=d/MM/yyyy");
					Иначе
						ФорматированнаяДата	= Формат(ДатаПоТексту, "ДФ=dd/MM/yyyy");
					КонецЕсли;
					
				ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
					ФорматированнаяДата = Текст + Формат(ДатаПоТексту, "ДФ=/yyyy");
					
				ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
					ФорматированнаяДата = Текст + Формат(ДатаПоТексту, "ДФ=/yyyy");
					
				ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
					Если СтрДлина(Текст) = 1 Тогда
						ФорматированнаяДата	= Формат(ДатаПоТексту, "ДФ=M/yyyy");
					Иначе
						ФорматированнаяДата	= Формат(ДатаПоТексту, "ДФ=MM/yyyy");
					КонецЕсли;
					
				Иначе // Год
					ФорматированнаяДата = Текст;
					
				КонецЕсли;
				
				СписокВозврата.Добавить(ФорматированнаяДата);
			КонецЕсли;
				
		Иначе
			Если Периодичность = Перечисления.Периодичность.Месяц Тогда
				СписокМесяцев = СписокМесяцевПоСтроке(Текст);
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг ""г""'"));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	
	Иначе
		Если Периодичность = Перечисления.Периодичность.День Тогда
			Если Подстроки.Количество() >= 2 И Не ПустаяСтрока(Подстроки[1]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
				Месяц				= Число(Подстроки[1]);
				Если Месяц >= 1 И Месяц <= КонецПериода Тогда
					ФорматДляМесяца	= Прав("MM", СтрДлина(Подстроки[1]));
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
					Месяц				= ТекущийМесяц;
					ФорматДляМесяца		= "MM";
				Иначе
					СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[1]);
					Если СписокМесяцев.Количество() = 1 Тогда
						Месяц				= СписокМесяцев[0];
						ФорматДляМесяца		= "MMMM";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Подстроки.Количество() >= 3 И Не ПустаяСтрока(Подстроки[2]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[2]) Тогда
				Год				= Число(Лев(Формат(ТекущийГод, "ЧГ="), 4-СтрДлина(Подстроки[2])) + Подстроки[2]);
				Если Год >= 1900 И Год < 3000 Тогда
					ФорматДляГода	= Прав("yyyy", СтрДлина(Подстроки[2]));
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Год				= ТекущийГод;
				ФорматДляГода	= "yyyy";
			КонецЕсли;
			
			Если Подстроки.Количество() >= 1 И Не ПустаяСтрока(Подстроки[0]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
				День				= Число(Подстроки[0]);
				Если День >= 1 И Месяц <> Неопределено И День <= День(КонецМесяца(Дата(Год, Месяц, 1))) Тогда
					ФорматДляДня	= Прав("dd", СтрДлина(Подстроки[0]));
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;
			
			ДатаПоТексту = Дата(Год, Месяц, День);
			
			Если Подстроки.Количество() < 3 ИЛИ ПустаяСтрока(Подстроки[2]) Тогда
				ФорматированнаяДата	= Формат(ДатаПоТексту, "ДФ='" + ФорматДляДня + ИспользуемыйРазделитель + ФорматДляМесяца + ИспользуемыйРазделитель + ФорматДляГода + "'");
			Иначе
				ФорматированнаяДата	= "";
			КонецЕсли;
			
		ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
			Если Подстроки.Количество() >= 2 И Не ПустаяСтрока(Подстроки[1]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
				Год				= Число(Лев(Формат(ТекущийГод, "ЧГ="), 4-СтрДлина(Подстроки[1])) + Подстроки[1]);
				Если Год >= 1900 И Год < 3000 Тогда
					ФорматДляГода	= Прав("yyyy", СтрДлина(Подстроки[1]));
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Год				= ТекущийГод;
				ФорматДляГода	= "yyyy";
			КонецЕсли;
			
			Если Подстроки.Количество() >= 1 И Не ПустаяСтрока(Подстроки[0]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
				Неделя	= Число(Подстроки[0]) - 1;
				Если Неделя < 1 ИЛИ Неделя > НеделяГода(Дата(Год, 12, 31)) Тогда
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;
			
			ДатаПоТексту = ОбщегоНазначения.ДобавитьИнтервал(Дата(Год, 1, 1), Периодичность, Неделя);
			
			Если Подстроки.Количество() < 2 ИЛИ ПустаяСтрока(Подстроки[1]) Тогда
				ФорматированнаяДата	= Подстроки[0] + ИспользуемыйРазделитель + Формат(ДатаПоТексту, "ДФ='" + ФорматДляГода + "'");
			Иначе
				ФорматированнаяДата	= "";
			КонецЕсли;
			
		ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
			Если Подстроки.Количество() >= 1 И Не ПустаяСтрока(Подстроки[0]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
				Месяц			= Число(Подстроки[0]);
				Если Месяц >= 1 И Месяц <= КонецПериода Тогда
					ФорматДляМесяца	= Прав("MM", СтрДлина(Подстроки[0]));
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если Подстроки.Количество() >= 2 И Не ПустаяСтрока(Подстроки[1]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
				Год				= Число(Лев(Формат(ТекущийГод, "ЧГ="), 4-СтрДлина(Подстроки[1])) + Подстроки[1]);
				Если Год >= 1900 И Год < 3000 Тогда
					ФорматДляГода	= Прав("yyyy", СтрДлина(Подстроки[1]));
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Год				= ТекущийГод;
				ФорматДляГода	= "yyyy";
			КонецЕсли;
			
			ДатаПоТексту = Дата(Год, Месяц, 1);
			
			Если Подстроки.Количество() < 2 ИЛИ ПустаяСтрока(Подстроки[1]) Тогда
				ФорматированнаяДата	= Формат(ДатаПоТексту, "ДФ='" + ФорматДляМесяца + ИспользуемыйРазделитель + ФорматДляГода + "'");
			Иначе
				ФорматированнаяДата	= "";
			КонецЕсли;
			
		ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
			Если Подстроки.Количество() >= 1 И Не ПустаяСтрока(Подстроки[0]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
				Квартал	= (Число(Подстроки[0]));
				Если Квартал < 1 ИЛИ Квартал > КонецПериода Тогда
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если Подстроки.Количество() >= 2 И Не ПустаяСтрока(Подстроки[1]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
				Год				= Число(Лев(Формат(ТекущийГод, "ЧГ="), 4-СтрДлина(Подстроки[1])) + Подстроки[1]);
				Если Год >= 1900 И Год < 3000 Тогда
					ФорматДляГода	= Прав("yyyy", СтрДлина(Подстроки[1]));
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Год				= ТекущийГод;
				ФорматДляГода	= "yyyy";
			КонецЕсли;
			
			ДатаПоТексту = Дата(Год, (Квартал - 1) * 3 + 1, 1);
			
			Если Подстроки.Количество() < 2 ИЛИ ПустаяСтрока(Подстроки[1]) Тогда
				ФорматированнаяДата	= Подстроки[0] + ИспользуемыйРазделитель + Формат(ДатаПоТексту, "ДФ='" + ФорматДляГода + "'");
			Иначе
				ФорматированнаяДата	= "";
			КонецЕсли;
			
		ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
			Если Подстроки.Количество() >= 1 И Не ПустаяСтрока(Подстроки[0]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
				Год				= Число(Лев(Формат(ТекущийГод, "ЧГ="), 4-СтрДлина(Подстроки[0])) + Подстроки[0]);
				Если Год >= 1900 И Год < 3000 Тогда
					ФорматДляГода	= Прав("yyyy", СтрДлина(Подстроки[0]));
				Иначе
					Возврат СписокВозврата;
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;
			
			ДатаПоТексту = Дата(Год, 1, 1);
			
			Если Подстроки.Количество() < 2 ИЛИ ПустаяСтрока(Подстроки[1]) Тогда
				ФорматированнаяДата = Подстроки[0] + " год";
			Иначе
				ФорматированнаяДата	= "";
			КонецЕсли;
			
		КонецЕсли;
		
		СписокВозврата.Добавить(ФорматированнаяДата);
		
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

Процедура ПериодАвтоПодборТекста(Текст, ТекстАвтоПодбора, Периодичность, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Список = ПериодПодобратьПоТексту(Текст, Периодичность);
	Если Список.Количество() = 1 Тогда
		ТекстАвтоПодбора = Список[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПериодОкончаниеВводаТекста(Текст, Значение, Периодичность, СтандартнаяОбработка, ДатаПоТексту = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Список = ПериодПодобратьПоТексту(Текст, Периодичность, ДатаПоТексту);
	Если Список.Количество() = 1 Тогда
		Значение = Список[0].Значение;
	Иначе
		Значение = Список;
	КонецЕсли;
	
КонецПроцедуры

// Делает страницу панели с переданным именем видимой и текущей, а остальные - невидимыми
//  Параметры:
//	ИмяСтраницы  - страница, которую необходимо сделать текущей
//  Панель - имя панели;
//
Процедура УстановитьТекущуюСтраницу(ИмяСтраницы, Панель) Экспорт
	
	Для Каждого Страница Из Панель.Страницы Цикл
		Если НЕ Страница.Имя=ИмяСтраницы Тогда
			Страница.Видимость=Ложь;
		Иначе
			Страница.Видимость=Истина;
		КонецЕсли;
	КонецЦикла;
	
	Панель.ТекущаяСтраница=Панель.Страницы[ИмяСтраницы];
	
КонецПроцедуры // УстановитьТекущуюСтраницу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СОХРАНЕНИЯ И ВОССТАНОВЛЕНИЯ ВЫПАДАЮЩИХ СПИСКОВ ПОСЛЕДНИХ 10 ЗНАЧЕНИЙ

Процедура ВосстановитьСписокЗначенийУнивер(СписокЗначений, ИмяПараметраДляСохранения = "", СписокЭлементаВизуализации) Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяПараметраДляСохранения) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗначений.Очистить();
	
	ВосстановленноеЗначение = ВосстановитьЗначение(ИмяПараметраДляСохранения);
	Если ТипЗнч(ВосстановленноеЗначение) = Тип("СписокЗначений") Тогда
		СписокЗначений = ВосстановленноеЗначение;
		СписокЭлементаВизуализации = СписокЗначений.Скопировать();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура добавляет в список последних 10-ти значений элементов
// Параметры :
//		СписокСохраняемыхЗначений - список значений куда нужно поместить очередной элемент
//      ИмяПараметраДляСохранения - под каким именем сохранить значение (если пустая - то ничего не сохраняем)
//      ЭлементСписка			  - выбранный элемент списка
Процедура ДобавитьВСписокЗначенийУнивер(СписокСохраняемыхЗначений, ИмяПараметраДляСохранения = "", ЭлементСписка, 
	Знач ЗначениеПоиска = "") Экспорт

	Если ПустаяСтрока(ЗначениеПоиска) Тогда
		ДобавляемоеЗначение = ЭлементСписка.Значение;
	Иначе
		ДобавляемоеЗначение = ЗначениеПоиска;
    КонецЕсли;
	
	НайденныйЭлемент = СписокСохраняемыхЗначений.НайтиПоЗначению(ДобавляемоеЗначение);
	Если НайденныйЭлемент <> Неопределено Тогда
		СписокСохраняемыхЗначений.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	СписокСохраняемыхЗначений.Вставить(0, ДобавляемоеЗначение);
	
	Пока СписокСохраняемыхЗначений.Количество() > 10 Цикл
		СписокСохраняемыхЗначений.Удалить(СписокСохраняемыхЗначений.Количество() - 1);
	КонецЦикла;
	
	Если (ЗначениеЗаполнено(ИмяПараметраДляСохранения)) И ТипЗнч(ИмяПараметраДляСохранения) = Тип("Строка") Тогда
		СохранитьЗначение(ИмяПараметраДляСохранения, СписокСохраняемыхЗначений.Скопировать());
	КонецЕсли;
	
	ЭлементСписка.СписокВыбора = СписокСохраняемыхЗначений.Скопировать();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ТИПОВЫХ ТАБЛИЧНЫХ ЧАСТЕЙ РАСЧЕТНЫХ ДОКУМЕНТОВ
	
// Выводит строки показателей в документах ввода плановых начислений и удержаний
//
Процедура ПриВыводеСтрокиПлановыхНачисленийИУдержаний(Элемент, ОформлениеСтроки, ДанныеСтроки, СведенияОВидахРасчета, ИспользуютсяТарифныеРазряды = Истина) Экспорт
		
	Если Найти(ТипЗнч(ДанныеСтроки),НСтр("ru='Персональные надбавки';uk='Персональні надбавки'")) = 0 Тогда
		СведенияОВидеРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтроки.ВидРасчета);
	Иначе
		СведенияОВидеРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтроки.Надбавка);
	Конецесли;	
	ТолькоПросмотрЯчеек = Ложь;
	
	ЕстьПоказатели = Ложь;
	Для СчПоказателей = 1 По 6 Цикл
		УстановитьТолькоПросмотр = ТолькоПросмотрЯчеек;
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда			
			
			Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"] Тогда
				ЕстьПоказатели = Истина;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Истина;
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
				Если ИспользуютсяТарифныеРазряды Тогда
					ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
					ОформлениеСтроки.Ячейки["ТарифныйРазряд" + СчПоказателей].Видимость = Ложь;
				КонецЕсли;
				
			ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] И ИспользуютсяТарифныеРазряды Тогда
				ЕстьПоказатели = Истина;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Истина;
				ОформлениеСтроки.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Истина;

			Иначе
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				Если ИспользуютсяТарифныеРазряды Тогда
					ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
					ОформлениеСтроки.Ячейки["ТарифныйРазряд" + СчПоказателей].Видимость = Ложь;
				КонецЕсли;

			КонецЕсли;
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
			ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
			ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].ТолькоПросмотр = (НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"]) ИЛИ (УстановитьТолькоПросмотр);
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = УстановитьТолькоПросмотр;
		Иначе
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь;
			Если ИспользуютсяТарифныеРазряды Тогда
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость = Ложь;			
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
	
	Если не ЕстьПоказатели Тогда
		ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.УстановитьТекст(НСтр("ru='<ввод при расчете>';uk='<введення при розрахунку>'"));
		ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.Видимость = Истина;
		ОформлениеСтроки.Ячейки["Показатель1"].ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;
	
КонецПроцедуры //ПриВыводеСтрокиПлановыхНачислений

// Выводит строки показателей в документах ввода плановых начислений и удержаний
//
//	Параметры:
//		ДанныеСтроки - данные строки документа
//		ОформлениеСтроки - оформление строки документа
//		СведенияОВидахРасчета - соответствие содержащие сведения о видах расчетах документа 
//
Процедура ПриВыводеСтрокиНачисленийИУдержаний(ДанныеСтроки, ОформлениеСтроки, СведенияОВидахРасчета, ЭтоНачисление = Истина) Экспорт
	
	ДанныеСтрокиВидРасчета = ДанныеСтроки.ВидРасчета;
	
	СведенияОВидеРасчета = РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ДанныеСтроки.ВидРасчета, "ПриРасчете");					
	
	ЕстьПоказатели = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеСтрокиВидРасчета) Тогда
		
		ЕстьПоказатели = Ложь; 
		СчПоказателей = 0;
		Для СчПоказателей = 1 По 6 Цикл
			
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
				
				ЕстьПоказатели = Истина;
				
				ВидимостьПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
				ВидимостьНаименованияПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"];
				
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = ВидимостьНаименованияПоказателя;
				
				// размеры показателя будут доступны только для видимых и изменяемых показателей
				Если ВидимостьПоказателя Тогда
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется
					Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически
					Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.ВиденНоНеРедактируетсяПриРасчете;
				КонецЕсли;
				
				// если отображается наименование - пропишем текст
				Если ВидимостьНаименованияПоказателя Тогда		
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
					ВидимостьПоказателя = СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"];
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр	= Не ВидимостьПоказателя Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.ВиденНоНеРедактируетсяПриРасчете
					Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически;
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"];			
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);			
				КонецЕсли;
				
				Если ВидимостьПоказателя Тогда
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
				КонецЕсли;
				
			Иначе
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если не ЕстьПоказатели Тогда
			ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.УстановитьТекст(НСтр("ru='<рассчитываются автоматически>';uk='<розраховуються автоматично>'"));
			ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.Видимость			= Истина;
			ОформлениеСтроки.Ячейки["Показатель1"].ТолькоПросмотр				= Истина;
		КонецЕсли;
	Иначе
		
		Для СчПоказателей = 1 По 6 Цикл
			// настроим видимость ячеек
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	// управление видимостью ячеек, которые группируют некоторые элементы шапки
	ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.Период.Видимость = Ложь;
	
	
	Если ЭтоНачисление Тогда
		ОформлениеСтроки.Ячейки.Отработано.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.Норма.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.НормаЗаМесяц.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.БазовыйПериод.Видимость = Ложь;
	КонецЕсли;
	
	// управление картинкой по колонке Автозаполение
	ЯчейкаСКартинкой = ОформлениеСтроки.Ячейки.Картинка;
	ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
	ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);

КонецПроцедуры //ПриВыводеСтрокиНачисленийИУдержаний

Процедура НачалоВыбораЗначенияНалоговоеНазначение(ЭлементФормы, СтандартнаяОбработка, ГруппаНалоговогоНазначения) Экспорт

	СтандартнаяОбработка = Ложь;
	ФормаВыбора          = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПолучитьФормуВыбора(,ЭлементФормы,);

	ФормаВыбора.СправочникСписок.Отбор.ГруппаНалоговогоНазначения.ВидСравнения 	= ВидСравнения.Равно;
	ФормаВыбора.СправочникСписок.Отбор.ГруппаНалоговогоНазначения.Значение 		= ГруппаНалоговогоНазначения;
	ФормаВыбора.СправочникСписок.Отбор.ГруппаНалоговогоНазначения.Использование = Истина;
	
    ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ЭлементФормы.Значение;
	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияНалоговоеНазначение()

Функция НайтиНалоговыеНазначенияПоТексту(Текст, ГруппаНалоговогоНазначения)
	
	СписокНайденных = Новый СписокЗначений;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаНалоговогоНазначения", ГруппаНалоговогоНазначения);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НалоговыеНазначенияАктивовИЗатрат.Ссылка КАК НалоговоеНазначение,
	               |	ПРЕДСТАВЛЕНИЕ(НалоговыеНазначенияАктивовИЗатрат.Ссылка) КАК НалоговоеНазначениеПредставление
	               |ИЗ
	               |	Справочник.НалоговыеНазначенияАктивовИЗатрат КАК НалоговыеНазначенияАктивовИЗатрат
	               |ГДЕ
	               |	НалоговыеНазначенияАктивовИЗатрат.ГруппаНалоговогоНазначения = &ГруппаНалоговогоНазначения";
	Результат = Запрос.Выполнить().Выбрать();
	
	ДлинаТекста = СтрДлина(СокрЛП(Текст));
	
	Пока Результат.Следующий() Цикл
		Если ВРег(Сред(Результат.НалоговоеНазначениеПредставление,1,ДлинаТекста)) = ВРег(СокрЛП(Текст)) Тогда
			СписокНайденных.Добавить(Результат.НалоговоеНазначение,Результат.НалоговоеНазначениеПредставление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокНайденных;
	
КонецФункции

Процедура АвтоПодборТекстаНалоговоеНазначение(Форма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ГруппаНалоговогоНазначения) Экспорт
	
	СтандартнаяОбработка = Ложь;
	СписокНайденных = НайтиНалоговыеНазначенияПоТексту(Текст, ГруппаНалоговогоНазначения);
	Если СписокНайденных.Количество()>0 Тогда
		Результат = Форма.ВыбратьИзСписка(СписокНайденных,Элемент);
		Если НЕ Результат = Неопределено Тогда
			ТекстАвтоПодбора 	= Результат.Представление;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, ГруппаНалоговогоНазначения) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Значение = НайтиНалоговыеНазначенияПоТексту(Текст, ГруппаНалоговогоНазначения);
	
КонецПроцедуры

Функция НайтиСтатьиНалоговойДекларацииПоТексту(Текст, ВидДекларации, НаборСтатей = Неопределено)

	СписокНайденных = Новый СписокЗначений;
		
	Если НаборСтатей = Неопределено Тогда
		//подбирать надо среди всей декларации
		СписокСтатей = СформироватьСодержимоеДекларации(ВидДекларации);
	КонецЕсли;
	ДлинаТекста = СтрДлина(СокрЛП(Текст));
	
	Для каждого ЭлементСписка Из СписокСтатей Цикл
		Если ВРег(Сред(ЭлементСписка.Представление,1,ДлинаТекста)) = ВРег(СокрЛП(Текст)) Тогда
			СписокНайденных.Добавить(ЭлементСписка.Значение,ЭлементСписка.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокНайденных;

КонецФункции

Процедура АвтоПодборТекстаСтатьяНалоговойДекларации(Форма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ВидДекларации, НаборСтатей = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	СписокНайденных = НайтиСтатьиНалоговойДекларацииПоТексту(Текст, ВидДекларации, НаборСтатей);
	Если СписокНайденных.Количество()>0 Тогда
		Результат = Форма.ВыбратьИзСписка(СписокНайденных,Элемент);
		Если НЕ Результат = Неопределено Тогда
			ТекстАвтоПодбора 	= Результат.Представление;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОкончаниеВводаТекстаСтатьяНалоговойДекларации(Элемент, Текст, Значение, СтандартнаяОбработка, ВидДекларации, НаборСтатей = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Значение = НайтиСтатьиНалоговойДекларацииПоТексту(Текст, ВидДекларации, НаборСтатей);
	
КонецПроцедуры
