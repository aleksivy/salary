
// Устанавливает блокировку соединений при пакетном 
// обновлении конфигурации информационной базы
//
Процедура УстановитьБлокировкуСоединенийПриОбновлении() экспорт
	
	Блокировка = Новый БлокировкаУстановкиСоединений;
	
	Блокировка.Установлена = Истина;
	Блокировка.Начало = ТекущаяДата();
	Блокировка.КодРазрешения = "ПакетноеОбновлениеКонфигурацииИБ";
	ТекстСообщения = НСтр("ru='Администратор просит Вас завершить работу системы самостоятельно,';uk='Адміністратор просить Вас завершити роботу системи самостійно,'") + Символы.ПС+
					 НСтр("ru=' в связи с необходимостью обновления конфигурации.';uk="" у зв'язку з необхідністю оновлення конфігурації.""") + Символы.ПС+НСтр("ru='"
"Если через несколько минут работа системы не будет завершена, "
"администратор завершит работу принудительно!';uk='"
"Якщо через кілька хвилин робота системи не буде завершена, "
"адміністратор завершить роботу примусово!'");
					   
	Блокировка.Сообщение = ТекстСообщения;	
		
	УстановитьБлокировкуУстановкиСоединений(Блокировка);
КонецПроцедуры // УстановитьБлокировкуСоединенийПриОбновлении()

// Процедура снимает блокировки информационной базы
// после выполнения обновления
//
Процедура РазрешитьРаботуПользователей() экспорт
	
	ТекущийРежим = ПолучитьБлокировкуУстановкиСоединений();
	БлокировкаУстановлена = ТекущийРежим.Установлена;
	
	Если БлокировкаУстановлена Тогда
		НовыйРежим = Новый БлокировкаУстановкиСоединений;
		НовыйРежим.Установлена = Ложь;
		
		УстановитьБлокировкуУстановкиСоединений(НовыйРежим);
	КонецЕсли;		
КонецПроцедуры	// РазрешитьРаботуПользователей()

// Процедура подключает обработчик ожидания КонтрольРежимаЗавершенияРаботыПользователей
// 
Процедура УстановитьКонтрольРежимаЗавершенияРаботыПользователей()  Экспорт
		
	РежимБлокировки = ПолучитьБлокировкуУстановкиСоединений();
	ТекущееВремя = ТекущаяДата();
	Если РежимБлокировки.Установлена 
		 И (НЕ ЗначениеЗаполнено(РежимБлокировки.Начало) ИЛИ ТекущееВремя >= РежимБлокировки.Начало) 
		 И (НЕ ЗначениеЗаполнено(РежимБлокировки.Конец) ИЛИ ТекущееВремя <= РежимБлокировки.Конец) Тогда
		// Если пользователь зашел в базу, в которой установлена режим блокировки, значит использовался ключ /UC.
		// Завершать работу такого пользователя не следует
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("КонтрольРежимаЗавершенияРаботыПользователей", 60);
	
КонецПроцедуры // УстановитьКонтрольРежимаЗавершенияРаботыПользователей 

// Обработка параметров запуска программы - 
// ЗапретитьРаботуПользователей и РазрешитьРаботуПользователей
//
Функция ОбработатьПараметрЗапуска() Экспорт
	
	// есть ли параметры запуска
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// различия в больших и маленьких буквах в параметрах нет
	ЗначениеПараметраЗапуска = Врег(ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";")[0]);
	
	Если ЗначениеПараметраЗапуска = Врег("РазрешитьРаботуПользователей") Тогда
		Если Не ПравоДоступа("Администрирование", Метаданные) Тогда
			Сообщить(НСтр("ru='Параметр запуска не отработан. Нет прав на администрирование информационной базы.';uk='Параметр запуску не відпрацьований. Немає прав на адміністрування інформаційної бази.'"), СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли; 
		
		ЗаписьЖурналаРегистрации("ОбработкаПараметраЗапуска", УровеньЖурналаРегистрации.Информация, , , ПараметрЗапуска);
	    РазрешитьРаботуПользователей();
		
		ЗавершитьРаботуСистемы(Ложь);
		Возврат Истина;

	ИначеЕсли ЗначениеПараметраЗапуска = Врег("ЗавершитьРаботуПользователей") Тогда
		// если завершение 
		Если Не ПравоДоступа("Администрирование", Метаданные) Тогда
			Сообщить(НСтр("ru='Параметр запуска не отработан. Нет прав на администрирование информационной базы.';uk='Параметр запуску не відпрацьований. Немає прав на адміністрування інформаційної бази.'"), СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли; 
		
		ЗаписьЖурналаРегистрации("ОбработкаПараметраЗапуска", УровеньЖурналаРегистрации.Информация, , , ПараметрЗапуска);
		
		// поскольку блокировка еще не установлена, то при входе в систему
		// для данного пользователя был подключен обработчик ожидания завершения работы.
		// Отключаем его. Так как для этого пользователя подключается специализированный обработчик ожидания
		// "ЗавершитьРаботуПользователей", который ориентирован на то, что данный пользователь
		// должен быть отключен последним.
		ОтключитьОбработчикОжидания("КонтрольРежимаЗавершенияРаботыПользователей");
		
		УстановитьБлокировкуСоединенийПриОбновлении();
		
		ЗавершитьРаботуПользователей();
		ПодключитьОбработчикОжидания("ЗавершитьРаботуПользователей", 180);
		
		Возврат Истина;
	ИначеЕсли ЗначениеПараметраЗапуска = Врег("ВыводитьСлужебнуюИнформацию") 
		ИЛИ ЗначениеПараметраЗапуска = Врег("test") Тогда
		
		глЗначениеПеременнойУстановить("ВыводитьСлужебнуюИнформацию",Истина);
		Возврат Ложь;
	Иначе
		Сообщить(НСтр("ru='Указан неверный параметр запуска: ';uk='вказано невірний параметр запуску: '") + ПараметрЗапуска, СтатусСообщения.Внимание);		
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции // ОбработатьПараметрЗапуска

