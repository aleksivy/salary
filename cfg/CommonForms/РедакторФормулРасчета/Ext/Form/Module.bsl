Перем мРезультатДиалога;
Перем мПеременные;					// Список переменных, в которых храним случайные числа, для выполнения синтаксической проверки
Перем мГенераторСлучайныхЧисел;
Перем мФормулаРасчета;
Перем КоличествоПоказателей;
Перем ОбработкаКомментариев;
Перем мПоказатели;
Перем ОператорыИФункции, ОператорыИФункцииОднойСтрокой;
Перем МассивРазделителей;

Перем мПоказателиВремя;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПолучитьИдентификаторПоказателя()
	
	СтрокаНач=0;
	СтрокаКон=0;
	КолонкаНач=0;
	КолонкаКон=0;
	
	ЭлементыФормы.Формула.ПолучитьГраницыВыделения(СтрокаНач,
	КолонкаНач,
	СтрокаКон,
	КолонкаКон);
	
	ТекстФормулы = ЭлементыФормы.Формула.ПолучитьТекст();
	ДлинаСтроки = СтрДлина(ТекстФормулы);
	Слово = "";
	СловоСобрано = Ложь;
	
	ВыделеноСимволов = КолонкаКон-КолонкаНач;
	
	// Проверим текст слева
	Если ВыделеноСимволов > 0 Тогда
		НомерАнализируемогоСимвола = КолонкаНач-1;
	Иначе
		НомерАнализируемогоСимвола = КолонкаНач;
	КонецЕсли;
	Пока НомерАнализируемогоСимвола > 1 Цикл
		
		Символ = Сред(ТекстФормулы, НомерАнализируемогоСимвола-1, 1);
		
		Если  МассивРазделителей.Найти(Символ) <> Неопределено Или Найти(ОператорыИФункцииОднойСтрокой, Символ) Тогда
			
			Прервать;
			
		Иначе
			
			// символ не разделитель, можно его добавить к слову
			Слово = Символ + Слово;
			
		КонецЕсли;
		НомерАнализируемогоСимвола = НомерАнализируемогоСимвола - 1;
	КонецЦикла;
	
	НачальныйСимвол = КолонкаКон;
	
	Если Найти(ОператорыИФункции, ВРег(Слово)) Тогда
		Слово = ""; // это функция - удалим её
	КонецЕсли;
	
	Если ВыделеноСимволов > 0 Тогда
		Слово = Слово + Сред(ТекстФормулы,КолонкаНач, ВыделеноСимволов);
	КонецЕсли;
	
	// Проверим текст справа
	Если НачальныйСимвол < ДлинаСтроки Тогда
		Для НомерАнализируемогоСимвола = НачальныйСимвол По ДлинаСтроки Цикл
			Символ = Сред(ТекстФормулы, НомерАнализируемогоСимвола, 1);
			
			Если  МассивРазделителей.Найти(Символ) <> Неопределено Или Найти(ОператорыИФункцииОднойСтрокой, Символ) Тогда
				
				Возврат Слово;
				
			Иначе
				
				// символ не разделитель, можно его добавить к слову
				Слово = Слово + Символ;
				Если ДлинаСтроки = НомерАнализируемогоСимвола Тогда
					Возврат Слово;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		Возврат Слово;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции //ПолучитьИдентификаторПоказателя

Функция ЭтоЧисло(Слово)
	
	Цифры = "1234567890";
	
	Для НомСимвола = 1 По СтрДлина(Слово) Цикл
		
		Если Найти(Цифры, Сред(Слово, НомСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина
	
КонецФункции

Процедура ПроверитьИспользовалсяЛиЭтоПВР(Отказ)
	
	Если ВидПВР = "" Или ВидПВР = "ПлановыеДополнительныеНачисленияРаботниковОрганизаций" Тогда
		Возврат
	КонецЕсли;
	
	МассивОшибок = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлановыйРегистр.Регистратор
	|ИЗ
	|	РегистрСведений."+ВидПВР +" КАК ПлановыйРегистр
	|ГДЕ
	|	ПлановыйРегистр.ВидРасчета = &ВидРасчета");
	
	Запрос.УстановитьПараметр("ВидРасчета",ВидРасчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	Если Выборка.Следующий() Тогда	 
		ОбработкаКомментариев.ДобавитьСообщение(НСтр("ru='Показатели формулы расчета нельзя менять, так как по данному виду расчета проведены документы:';uk='Показники формули розрахунку не можна міняти, так як по даному виду розрахунку проведені документи:'"), Перечисления.ВидыСообщений.Раздел);
		
		Расшифровки = Новый Массив;
		Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", Строка(Выборка.Регистратор) + " ", Выборка.Регистратор));	
		ОбработкаКомментариев.ДобавитьСообщение(Строка(Выборка.Регистратор), Перечисления.ВидыСообщений.Ошибка, Расшифровки);
		Отказ = Истина;
		
		Пока Выборка.Следующий() Цикл
			
			Расшифровки = Новый Массив;
			Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", Строка(Выборка.Регистратор) + " ", Выборка.Регистратор));			 
			
			ОбработкаКомментариев.ДобавитьСообщение(Строка(Выборка.Регистратор), Перечисления.ВидыСообщений.Ошибка, Расшифровки);
			                                                                 
		КонецЦикла;	 
	КонецЕсли;
	
КонецПроцедуры //ПроверитьИспользовалсяЛиЭтоПВР

Функция ПроверкаИФормированиеФормулыРасчета(Отказ = Ложь)
	
	// алгоритм работы функции:
	// 	1. Сначала ищем все ";" если находим, то сообщаем, что это ошибка
	//	2. Потом проверяем знаком ли нам такой оператор, переменная или функция по принципу
	//		оставляем все числа
	//		оставляем все разрешенные нами функции процедуры и операторы, а также идентификаторы показателей
	//		подменяем все показатели на значения случайных числе 
	//	3. Обо всем неизвестном сообщаем как об ошибке
	//	4. Проверяем не привышает ли количество показателей 5, и является ли 4ый показатель предопределенным
	//	5. Пробуем выполнить, если не получается, сообщаем описание ошибке
	//	6. Назночаем базовым показателям последнии номера
	
	ТекстФормулы = ЭлементыФормы.Формула.ПолучитьТекст();
	
	// ";" - вводить не разрешаем!
	Если Найти(ТекстФормулы, ";") <> 0 Тогда
		 ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='В формуле не допустимо использование символа "";""';uk='У формулі не допустимо використання символу "";""'"), Отказ);
		 Отказ = Истина;
	КонецЕсли;
	
	Показатели.Очистить();

	// установим начальные значения
	НовыйТекст								= "";
	ДлинаСтроки								= СтрДлина(ТекстФормулы);
	ДляинаСтрокиБезПробелов					= СтрДлина(СокрП(ТекстФормулы));
	Слово									= "";
	СловоСобрано							= Ложь;
	КоличествоПоказателей					= 0;
	КоличествоНеПредопределенныхПоказателей	= 0;
	мФормулаРасчета							= "";
	
	// переменные для проверки правельности ввода показателей
	БылоОценитьПО			= Ложь;
	ОткрытыхСкобок			= 0;
	ЗакрытыхСкобок			= 0;
	КонечествоПарамОценитьПО= 0;
	
	СсылкаПоказатели		= Неопределено;
	
	// разбор слов
	Для НомерАнализируемогоСимвола = 1 По ДлинаСтроки Цикл
		
		Символ = Сред(ТекстФормулы, НомерАнализируемогоСимвола, 1);
		
		Если  МассивРазделителей.Найти(Символ) <> Неопределено Или Найти(ОператорыИФункцииОднойСтрокой, Символ) Тогда
			
			СловоСобрано = Истина;
		Иначе
			
			// символ не разделитель, можно его добавить к слову
			Слово = Слово + Символ;
			Если ДлинаСтроки = НомерАнализируемогоСимвола Тогда 
				СловоСобрано = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СловоСобрано Тогда
			
			НомерПоказателя = 0;
			СловоВРег = ВРег(СокрЛ(Слово));
			Если Найти(ОператорыИФункции, СловоВРег) <> 0 Или ЭтоЧисло(Слово) Тогда
				
				Если СловоВРег = "ОЦЕНИТЬПО" Тогда
					Слово					= "ПроведениеРасчетов.ОценитьПо";
					БылоОценитьПО			= Истина;
				КонецЕсли;
				
				// функции и числа записываем 
				НовыйТекст = НовыйТекст + Слово;
				мФормулаРасчета	= мФормулаРасчета + Слово;
				
			ИначеЕсли мПеременные.Получить(Слово) <> Неопределено Тогда
				
				СсылкаПоказатели = Справочники.ПоказателиСхемМотивации.НайтиПоРеквизиту("Идентификатор",Слово);
				Если СсылкаПоказатели = Справочники.ПоказателиСхемМотивации.ПустаяСсылка() Тогда
					Отказ = Истина;
					ОбработкаКомментариев.ДобавитьСообщение(НСтр("ru='Не найден показатель с идентификатором ""';uk='Не знайдений показник з ідентифікатором ""'") + Слово+ """", Перечисления.ВидыСообщений.Ошибка,);
					Прервать;
				КонецЕсли;
				
				// в идентификаторы показателей подставляем случайные числа, чтобы Выполнить() не упала при делении на нули
				// или при операциях с разными типами данных 				
				НовыйТекст				= НовыйТекст + СтрЗаменить(Строка(мПеременные.Получить(Слово)),",",".");
				
				ПоказательИзСписка = Показатели.НайтиПоЗначению(СсылкаПоказатели);
				Если ПоказательИзСписка = Неопределено Тогда
					КоличествоПоказателей	= КоличествоПоказателей + 1;	
					Показатели.Добавить(СсылкаПоказатели);
					мФормулаРасчета			= мФормулаРасчета + "ИсходныеДанные.Показатель"+КоличествоПоказателей;
					
					Если Не СсылкаПоказатели.Предопределенный
						И (СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная и 
						СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая И СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная) Тогда
						КоличествоНеПредопределенныхПоказателей = КоличествоНеПредопределенныхПоказателей + 1;
					КонецЕсли;
					
				Иначе
					мФормулаРасчета			= мФормулаРасчета + "ИсходныеДанные.Показатель"+Число(Показатели.Индекс(ПоказательИзСписка) + 1);
				КонецЕсли;
				
				НомерПоказателя			= КоличествоПоказателей;
				
				// проверим правильность ввода показателей
				Если КоличествоНеПредопределенныхПоказателей > 6 Тогда
					Отказ = Истина;
					ОбработкаКомментариев.ДобавитьСообщение(НСтр("ru='Количество не предопределенных показателей не может быть больше 6!';uk='Кількість не напередвизначених показників не може бути більше 6!'"), Перечисления.ВидыСообщений.Ошибка,);
					Прервать;
				КонецЕсли;
				
			Иначе
				// а это уже что-то непонятное, такие вещи вводить мы не договаривались ...
				Отказ = Истина;
				ОбработкаКомментариев.ДобавитьСообщение(НСтр("ru='Неопознанный показатель, оператор или функция: ""';uk='Невідомий показник, оператор чи функція: ""'") + Слово+ """", Перечисления.ВидыСообщений.Ошибка,);
				Прервать;					
			КонецЕсли;
			
			Если МассивРазделителей.Найти(Символ) <> Неопределено или  Найти(ОператорыИФункцииОднойСтрокой, Символ) <> 0 Тогда	
							
				Если БылоОценитьПО Тогда
					Если Символ = "(" Тогда
						ОткрытыхСкобок = ОткрытыхСкобок + 1;
					ИначеЕсли Символ = ")" Тогда
						ЗакрытыхСкобок = ЗакрытыхСкобок + 1;
						Если ЗакрытыхСкобок = ОткрытыхСкобок Тогда			// Проверим, является ли показатель шкалой
							Если СсылкаПоказатели <> Неопределено Тогда
								Если СсылкаПоказатели.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная И
									СсылкаПоказатели.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая Тогда									
									Отказ = Истина;
									ОбработкаКомментариев.ДобавитьСообщение(НСтр("ru='Показатель №';uk='Показник №'") + КоличествоПоказателей +НСтр("ru=' должен быть шкалой оценки!';uk=' повинен бути шкалою оцінки!'"), Перечисления.ВидыСообщений.Ошибка,);
									Прервать;
								КонецЕсли;
								Если ДляинаСтрокиБезПробелов <> НомерАнализируемогоСимвола Тогда
									БылоОценитьПО			= Ложь;
								КонецЕсли;
								ОткрытыхСкобок			= 0;
								ЗакрытыхСкобок			= 0;
								КонечествоПарамОценитьПО= 0;									
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли Символ = "," Тогда					
						КонечествоПарамОценитьПО = КонечествоПарамОценитьПО + 1;
						Если КонечествоПарамОценитьПО > 1 Тогда
							Отказ = Истина;
							ОбработкаКомментариев.ДобавитьСообщение(НСтр("ru='Количество параметров в функции ОценитьПо() не должно быть больше двух!';uk='Кількість параметрів в функції ОценитьПо() не повинна бути більше двох!'"), Перечисления.ВидыСообщений.Ошибка,);
							Прервать;						
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли НомерПоказателя > 0 Тогда
					Если СсылкаПоказатели.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная Или
						СсылкаПоказатели.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая Тогда
						Отказ = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			
				НовыйТекст		= НовыйТекст + Символ;
				мФормулаРасчета	= мФормулаРасчета + Символ;
			КонецЕсли;
			
			// сбросим все флаги
			Слово			= "";
			СловоСобрано	= Ложь;
						
		КонецЕсли;
		
	КонецЦикла;
	
	// проверим не является ли последний показатель шкалой оценки 
	Если Не БылоОценитьПО И НовыйТекст <> "" И СсылкаПоказатели <> Неопределено Тогда
		Если СсылкаПоказатели.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная Или
			СсылкаПоказатели.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая Тогда									
			Отказ = Истина;
			ОбработкаКомментариев.ДобавитьСообщение(НСтр("ru='Показатель №';uk='Показник №'") + КоличествоПоказателей +НСтр("ru=' не может быть шкалой оценки!';uk=' не може бути шкалою оцінки!'"), Перечисления.ВидыСообщений.Ошибка,);
		КонецЕсли;
	КонецЕсли;
		
	Если Не Отказ Тогда		

		// проверка формулы на прочие непредвиденные ошибки
		Если ЗначениеЗаполнено(НовыйТекст) Тогда
			Попытка
				Результат = Вычислить(НовыйТекст);
			Исключение
				Отказ = Истина;
				ОбработкаКомментариев.ДобавитьСообщение(НСтр("ru='Ошибка в формуле расчета!';uk='Помилка у формулі розрахунку!'"), Перечисления.ВидыСообщений.Ошибка,);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	// подменим номера базовым показателям
	НомераПредопределенныхПоказателей	= Новый Массив;	
	НомераПоказателей					= Новый Массив;	
	Для Сч = 1 По Показатели.Количество() Цикл	
		Если Показатели[Сч-1].Значение.Предопределенный И (СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая И СсылкаПоказатели <> Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная ) Тогда
			НомераПредопределенныхПоказателей.Добавить(Сч);
		Иначе
			НомераПоказателей.Добавить(Сч);
		КонецЕсли;
	КонецЦикла;
	ЗаменяемНаПоказатель		= Показатели.Количество() + 1;
	НомераПоказателейКоличество	= НомераПоказателей.Количество();
	Для Каждого НомерПредопределенногоПоказателя Из НомераПредопределенныхПоказателей Цикл
		Если НомераПоказателейКоличество > 0 Тогда
			
			НомераПоказателей_Минус1 = НомераПоказателей[НомераПоказателейКоличество-1]-1;
			
			Показатель 														= Показатели[НомераПоказателей_Минус1];
			Показатель_1													= Показатели[НомерПредопределенногоПоказателя-1];
			Показатели.Удалить(НомераПоказателей_Минус1);
			Показатели.Вставить(НомераПоказателей_Минус1, Показатель_1.Значение,Показатель_1.Значение);			
			Показатели.Удалить(НомерПредопределенногоПоказателя-1);						
			Показатели.Вставить(НомерПредопределенногоПоказателя-1, Показатель.Значение, Показатель.Значение);
			
			мФормулаРасчета = СтрЗаменить(мФормулаРасчета, "ИсходныеДанные.Показатель" + НомераПоказателей[НомераПоказателейКоличество-1],"ИсходныеДанные.Показатель" + ЗаменяемНаПоказатель);
			мФормулаРасчета = СтрЗаменить(мФормулаРасчета, "ИсходныеДанные.Показатель" + НомерПредопределенногоПоказателя,"ИсходныеДанные.Показатель" + НомераПоказателей[НомераПоказателейКоличество-1]);
			мФормулаРасчета = СтрЗаменить(мФормулаРасчета, "ИсходныеДанные.Показатель" + ЗаменяемНаПоказатель,"ИсходныеДанные.Показатель" + НомерПредопределенногоПоказателя);
			НомераПоказателейКоличество = НомераПоказателейКоличество - 1;
		КонецЕсли;
	КонецЦикла;	
	
	// проверем, не изменилась ли формула ПВР по которому есть движения в плановых регистрах
	Если Показатели.Количество() < мПоказатели.Количество() Тогда
		ПроверитьИспользовалсяЛиЭтоПВР(Отказ);		
	Иначе
		Для СчПоказателей = 0 По мПоказатели.Количество() - 1 Цикл		
			Если мПоказатели[СчПоказателей] <> Показатели[СчПоказателей].Значение Тогда
				ПроверитьИспользовалсяЛиЭтоПВР(Отказ);
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Отказ; 
	
КонецФункции //Проверка

Процедура ЗаполнитьПоказателиВремя()
	
	мПоказателиВремя.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВДнях);
	мПоказателиВремя.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВЧасах);
	мПоказателиВремя.Добавить(Справочники.ПоказателиСхемМотивации.НормаВремениВДнях);
	мПоказателиВремя.Добавить(Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах);
    мПоказателиВремя.Добавить(Справочники.ПоказателиСхемМотивации.НормаВремениЗаМесяцВДнях);
	мПоказателиВремя.Добавить(Справочники.ПоказателиСхемМотивации.НормаВремениЗаМесяцВЧасах);
	мПоказателиВремя.Добавить(Справочники.ПоказателиСхемМотивации.РасчетнаяБазаВремяВДнях);
	мПоказателиВремя.Добавить(Справочники.ПоказателиСхемМотивации.РасчетнаяБазаВремяВЧасах);
	мПоказателиВремя.Добавить(Справочники.ПоказателиСхемМотивации.РасчетнаяБазаОплаченоДнейЧасов);
	
КонецПроцедуры


// Процедура вставляет текст, передаваемый в качестве параметра в поле табличного документа
// ПолеТабличногоДокументаПроцедура.
Процедура ВставитьТекстВФормулу(ТекстДляВставки, Сдвиг=0, ПозицияКурсора=0)
	
	ЭлементФормула = ЭлементыФормы.Формула;
	ТекущийЭлемент = ЭлементФормула;
	
	СтрокаНач=0;
	СтрокаКон=0;
	КолонкаНач=0;
	КолонкаКон=0;
	
	ЭлементФормула.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
	
	НуженПереносТекстаНаСледующуюСтроку = (КолонкаНач + СтрДлина(ТекстДляВставки)) > ЭлементФормула.Ширина/8;
	
	Если Не ЗначениеЗаполнено(ЭлементФормула.ПолучитьТекст()) Тогда // текста еще нет, запишем идентификатор с первой позиции
		ЭлементФормула.УстановитьГраницыВыделения(1,1,1,1);
		НуженПереносТекстаНаСледующуюСтроку = Ложь;
		НуженПереносТекстаНаСледующуюСтроку = Ложь;
	ИначеЕсли НуженПереносТекстаНаСледующуюСтроку Тогда
		ЭлементФормула.ВыделенныйТекст = Символы.ПС;
	КонецЕсли;
		
	ЭлементФормула.ВыделенныйТекст = ТекстДляВставки;
	
	Если Сдвиг <> 0 Тогда
		
		ЭлементФормула.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
		ЭлементФормула.УстановитьГраницыВыделения(СтрокаНач, КолонкаНач + Сдвиг, СтрокаКон, КолонкаКон + Сдвиг);
		
		ЭлементФормула.ВыделенныйТекст = ТекстДляВставки;

	КонецЕсли;
	
	НижняяСтрокаТекста = СтрокаНач + ?(НуженПереносТекстаНаСледующуюСтроку, 1, 0);
	ПраваяГраницаТекста = ?(НуженПереносТекстаНаСледующуюСтроку, 1, КолонкаНач) + СтрДлина(ТекстДляВставки) - ПозицияКурсора;
	ЭлементФормула.УстановитьГраницыВыделения(НижняяСтрокаТекста, ПраваяГраницаТекста, НижняяСтрокаТекста, ПраваяГраницаТекста);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПоказателейПВР(ВидПВР, Переменные, ГенераторСлучайныхЧисел) Экспорт
	

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоказателиСхемМотивации.Идентификатор КАК Идентификатор
	|ИЗ
	|	Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации");
	Если ВидПВР = "ПлановыеУдержанияРаботниковОрганизаций" Или ВидПВР = "ПлановыеУдержанияРаботников" Или ВидПВР = "ПлановыеДополнительныеНачисленияРаботниковОрганизаций" Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ Не ПоказателиСхемМотивации.Ссылка В (&ПарамПоказатели)";
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВДнях);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВЧасах);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.НормаВремениВДнях);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.СдельнаяВыработка);
		Запрос.УстановитьПараметр("ПарамПоказатели", СписокПоказателей);
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоказателиСхемМотивации.Идентификатор";
	Выборка = Запрос.Выполнить().Выбрать();
	СтрокВКолонке = Цел(Выборка.Количество()/3);
	Если СтрокВКолонке < Выборка.Количество()/3 Тогда
		СтрокВКолонке = СтрокВКолонке + 1;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Идентификатор = Выборка.Идентификатор;
		
		Если ЗначениеЗаполнено(Идентификатор) Тогда
			Переменные.Вставить(Идентификатор,Окр(ГенераторСлучайныхЧисел.СлучайноеЧисло() /5189459139, 10));
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры //ЗаполнитьТаблицуПоказателей

// Заполняет таблицу идентификаторов показателей схем мотивации
//
Процедура ЗаполнитьТаблицуПоказателей(ВидПВР) Экспорт
	
	ПоказателиСхемМотивации = ПоказателиСхемМотивации.СкопироватьКолонки("ТипПоказателя1,Идентификатор1,ТипПоказателя2,Идентификатор2,ТипПоказателя3,Идентификатор3,Показатель1,Показатель2,Показатель3");

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоказателиСхемМотивации.Ссылка КАК Показатель,
	|	ПоказателиСхемМотивации.Идентификатор КАК Идентификатор,
	|	ПоказателиСхемМотивации.ТипПоказателя
	|ИЗ
	|	Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации");
	Если ВидПВР = "ПлановыеУдержанияРаботниковОрганизаций" Или ВидПВР = "ПлановыеУдержанияРаботников" Или ВидПВР = "ПлановыеДополнительныеНачисленияРаботниковОрганизаций" Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ Не ПоказателиСхемМотивации.Ссылка В (&ПарамПоказатели)";
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВДнях);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВЧасах);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.НормаВремениВДнях);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.СдельнаяВыработка);
		
		Запрос.УстановитьПараметр("ПарамПоказатели", СписокПоказателей);
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоказателиСхемМотивации.Идентификатор";
	Выборка = Запрос.Выполнить().Выбрать();
	СтрокВКолонке = Цел(Выборка.Количество()/3);
	Если СтрокВКолонке < Выборка.Количество()/3 Тогда
		СтрокВКолонке = СтрокВКолонке + 1;
	КонецЕсли;
	
	Счетчик = 0;
	ВыведеноСтрокВКолонку = 0;
	ИмяКолоки = "Идентификатор1";	ИмяТипПоказателя= "ТипПоказателя1"; ИмяПоказателя= "Показатель1";
	Пока Выборка.Следующий() Цикл
		Идентификатор = Выборка.Идентификатор;		
		Если ЗначениеЗаполнено(Идентификатор) Тогда
			Если ИмяКолоки = "Идентификатор1" Тогда			
				Строка = ПоказателиСхемМотивации.Добавить();
			КонецЕсли;
			ПоказателиСхемМотивации[ВыведеноСтрокВКолонку][ИмяКолоки] = Идентификатор;
			
			ПоказателиСхемМотивации[ВыведеноСтрокВКолонку][ИмяТипПоказателя] = Выборка.ТипПоказателя;
			
			ПоказателиСхемМотивации[ВыведеноСтрокВКолонку][ИмяПоказателя] = Выборка.Показатель;
			
			Счетчик = Счетчик + 1;
			ВыведеноСтрокВКолонку = ВыведеноСтрокВКолонку + 1;
			Если ВыведеноСтрокВКолонку = СтрокВКолонке Тогда
				НомерКолонки			= Число(Прав(ИмяКолоки,1))+1;
				ИмяКолоки				= "Идентификатор"+ НомерКолонки;
				ИмяТипПоказателя		= "ТипПоказателя"+НомерКолонки;
				ИмяПоказателя			= "Показатель"+НомерКолонки;
				ВыведеноСтрокВКолонку	= 0;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьТаблицуПоказателейПВР(ВидПВР, мПеременные, мГенераторСлучайныхЧисел);

КонецПроцедуры //ЗаполнитьТаблицуПоказателей

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	ВидПВР = СокрЛП(ВидПВР);
	мПоказатели = Показатели.ВыгрузитьЗначения();
	ЗаполнитьТаблицуПоказателей(ВидПВР);
	
	ОператорыИФункции				=  ".,+,-,/,*,ЦЕЛ,INT,ОКР,ROUND,МАКС,MAX,МИН,MIN,?,=,<,>,<=,>=,ОЦЕНИТЬПО,(,),И,ИЛИ,НЕ,OR,AND,NOT";
	ОператорыИФункцииОднойСтрокой	=  ".,+,-,/,*,?,=,<,>,(,)";
	
	ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "ПровередниеРасчета.ОценитьПо", "ОценитьПо");
	ЭлементыФормы.Формула.УстановитьТекст(ФормулаРасчета);
	
	МассивРазделителей = Новый Массив;
	
	МассивРазделителей.Добавить(" ");
	МассивРазделителей.Добавить(Символы.ВК);
	МассивРазделителей.Добавить(Символы.ВТаб);
	МассивРазделителей.Добавить(Символы.НПП);
	МассивРазделителей.Добавить(Символы.ПС);
	МассивРазделителей.Добавить(Символы.ПФ);
	МассивРазделителей.Добавить(Символы.Таб);
	
	ЗаполнитьПоказателиВремя();
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	Если мРезультатДиалога = "ПодтвердитьИзменения" Тогда
		
		Параметры					= Новый Массив;
		ПарамПоказатели				= Новый Массив;
		ФормулаДляПроверки 			= ЭлементыФормы.Формула.ПолучитьТекст();
		Параметры.Добавить(мФормулаРасчета);
		Для Каждого Показатель Из Показатели Цикл
			Значение = Показатель.Значение;			
			Если Найти(ФормулаДляПроверки, Значение.Идентификатор) <> 0 Тогда
				ПарамПоказатели.Добавить(Значение);
			КонецЕсли;
		КонецЦикла;		
		Параметры.Добавить(ПарамПоказатели);

		Оповестить("ВводФормулыРасчета",Параметры, ВладелецФормы);
		
	ИначеЕсли мРезультатДиалога = "ОтменаРедактированияРасчета" Тогда
		
		Оповестить("ОтменаРедактированияРасчета");
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если мРезультатДиалога = "ПодтвердитьИзменения" Тогда
		ПроверкаИФормированиеФормулыРасчета(Отказ);
		// нужно оставить возможность просто закрыть форму без сохранения изменений, даже если формула неправильная
		Если Отказ Тогда
			мРезультатДиалога = "";
			ОбработкаКомментариев.ПоказатьСообщения();
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура ПоказателиСхемМотивацииВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Идентификатор = ЭлементыФормы.ПоказателиСхемМотивации.ТекущиеДанные[ЭлементыФормы.ПоказателиСхемМотивации.ТекущаяКолонка.Имя];
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Показатель = Справочники.ПоказателиСхемМотивации.НайтиПоРеквизиту("Идентификатор",Идентификатор);
		Показатель.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();	
	
	мРезультатДиалога = "ПодтвердитьИзменения";
	Закрыть();

КонецПроцедуры

Процедура ОсновныеДействияФормыДействие(Кнопка)
		
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если Не ПроверкаИФормированиеФормулыРасчета() Тогда
		ОбработкаКомментариев.ДобавитьСообщение(НСтр("ru='Синтаксических ошибок не обнаружено';uk='Синтаксичних помилок не виявлено'"), Перечисления.ВидыСообщений.Раздел);
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
		
КонецПроцедуры // ОсновныеДействияФормыДействие

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ЦелНажатие(Элемент)
	ВставитьТекстВФормулу(" Цел() ",,2)
КонецПроцедуры

Процедура ОкрНажатие(Элемент)
	ВставитьТекстВФормулу(" Окр(,) ",,3)
КонецПроцедуры

Процедура МаксНажатие(Элемент)
	
	ВставитьТекстВФормулу(" Макс(,) ",,3);
	
КонецПроцедуры

Процедура МинНажатие(Элемент)
	ВставитьТекстВФормулу(" Мин(,) ",,3)
КонецПроцедуры

Процедура ОценитьПоНажатие(Элемент)
	ВставитьТекстВФормулу("ОценитьПо(,) ",,3)
КонецПроцедуры

Процедура УсловиеНажатие(Элемент)
	ВставитьТекстВФормулу(" ?(,,) ",,4)
КонецПроцедуры

Процедура ОсновныеДействияФормыПоказатели(Кнопка)
	
	Показатель			= Справочники.ПоказателиСхемМотивации.СоздатьЭлемент();
	ФормаПоказателей	= Показатель.ПолучитьФорму("ФормаЭлемента");
	ФормаПоказателей.ОткрытьМодально();
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанНовыйПоказатель" Тогда
		ЗаполнитьТаблицуПоказателей(ВидПВР);
	КонецЕсли;
	
КонецПроцедуры

Процедура СправкаНажатие(Элемент)
	ОткрытьСправку(Метаданные.ОбщиеФормы.РедакторФормулРасчета);
КонецПроцедуры

Процедура КоманднаяПанельПоказателейДействие(Кнопка)

	Идентификатор = ЭлементыФормы.ПоказателиСхемМотивации.ТекущиеДанные[ЭлементыФормы.ПоказателиСхемМотивации.ТекущаяКолонка.Имя];
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Показатель = Справочники.ПоказателиСхемМотивации.НайтиПоРеквизиту("Идентификатор",Идентификатор);
		Показатель.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельПоказателейДействие1(Кнопка)
		
	Показатель			= Справочники.ПоказателиСхемМотивации.СоздатьЭлемент();
	ФормаПоказателей	= Показатель.ПолучитьФорму("ФормаЭлемента");
	ФормаПоказателей.ОткрытьМодально();	

КонецПроцедуры

Процедура КоманднаяПанельПоказателейДействиеОткрытьСписокПоказателей(Кнопка)
	
	Справочники.ПоказателиСхемМотивации.ПолучитьФормуСписка("ФормаСписка").Открыть();

КонецПроцедуры

Процедура КоманднаяПанельПоказателейВыбрать(Кнопка)
		
	ВставитьТекстВФормулу(ЭлементыФормы.ПоказателиСхемМотивации.ТекущиеДанные[ЭлементыФормы.ПоказателиСхемМотивации.ТекущаяКолонка.Имя]);
	
КонецПроцедуры

Процедура ПоказателиСхемМотивацииНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ПараметрыПеретаскивания.Значение = ПараметрыПеретаскивания.Значение[Элемент.ТекущаяКолонка.Имя];
	
КонецПроцедуры

Процедура КоманднаяПанельКотекстногоМенюФормулыОткрытьПоказатель()
	
	Слово = ПолучитьИдентификаторПоказателя();
	Если Слово <> "" Тогда
		
		Показатель = Справочники.ПоказателиСхемМотивации.НайтиПоРеквизиту("Идентификатор",Слово);
		Если ЗначениеЗаполнено(Показатель) Тогда
			Показатель.ПолучитьФорму().Открыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //КоманднаяПанельКотекстногоМенюФормулыОткрытьПоказатель

Процедура Обработать()
	
	Если ТекущийЭлемент =  ЭлементыФормы.Формула Тогда
		Если ЗначениеЗаполнено(ПоказателиСхемМотивации) Тогда
			Слово = ПолучитьИдентификаторПоказателя();
			Если Не ПустаяСтрока(Слово) Тогда
				Для СчКолонки = 1 По 3 Цикл
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("Идентификатор"+СчКолонки, Слово);
					Строки = ЭлементыФормы.ПоказателиСхемМотивации.Значение.НайтиСтроки(ПараметрыОтбора);
					Если ЗначениеЗаполнено(Строки) Тогда
						ЭлементыФормы.ПоказателиСхемМотивации.ТекущаяКолонка = ЭлементыФормы.ПоказателиСхемМотивации.Колонки["Идентификатор"+СчКолонки];
						ЭлементыФормы.ПоказателиСхемМотивации.ТекущаяСтрока = Строки[0];
						Прервать;
					КонецЕсли;
                КонецЦикла;
                ЭлементыФормы.КоманднаяПанельКотекстногоМенюФормулы.Кнопки.ОткрытьПоказатель.Доступность = Истина;
            Иначе
                ЭлементыФормы.КоманднаяПанельКотекстногоМенюФормулы.Кнопки.ОткрытьПоказатель.Доступность = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Обработать", 0.1, Истина);
	
КонецПроцедуры

Процедура ПоказателиСхемМотивацииПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

Процедура ПоказателиСхемМотивацииПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура ПоказателиСхемМотивацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		Для Сч = 1 По 3 Цикл
			ЯчейкаСКартинкой = Ячейки["Картинка"+Сч];
			ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
			Если ДанныеСтроки["ТипПоказателя"+Сч] = Перечисления.ТипыПоказателейСхемМотивации.Денежный Тогда
				ЯчейкаСКартинкой.Картинка = БиблиотекаКартинок["ТипыПоказателейСхемМотивацииДенежный"];
			ИначеЕсли ДанныеСтроки["ТипПоказателя"+Сч] = Перечисления.ТипыПоказателейСхемМотивации.Процентный Тогда
				ЯчейкаСКартинкой.Картинка = БиблиотекаКартинок["ТипыПоказателейСхемМотивацииПроцентный"];
			ИначеЕсли ДанныеСтроки["ТипПоказателя"+Сч] = Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
				ЯчейкаСКартинкой.Картинка = БиблиотекаКартинок["ТипыПоказателейСхемМотивацииТарифныйРазряд"];
			ИначеЕсли 
				ДанныеСтроки["Показатель"+Сч] = Справочники.ПоказателиСхемМотивации.Стаж Тогда
				ЯчейкаСКартинкой.Картинка = БиблиотекаКартинок["ТипыПоказателейСхемМотивацииСтаж"];
			ИначеЕсли ДанныеСтроки["ТипПоказателя"+Сч] = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная 
				Или ДанныеСтроки["ТипПоказателя"+Сч] = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая Тогда
				ЯчейкаСКартинкой.Картинка = БиблиотекаКартинок["ТипыПоказателейСхемМотивацииОценочнаяШкала"];
			ИначеЕсли мПоказателиВремя.НайтиПоЗначению(ДанныеСтроки["Показатель"+Сч]) <> Неопределено Тогда
				ЯчейкаСКартинкой.Картинка = БиблиотекаКартинок["ТипыПоказателейСхемМотивацииВремя"];
			ИначеЕсли ДанныеСтроки["ТипПоказателя"+Сч] = Перечисления.ТипыПоказателейСхемМотивации.Числовой Тогда
				ЯчейкаСКартинкой.Картинка = БиблиотекаКартинок["ТипыПоказателейСхемМотивацииЧисловой"];
			КонецЕсли;

			
		КонецЦикла;

	КонецЦикла;
КонецПроцедуры


//Инициализация переменных формы
мРезультатДиалога = "";

мГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел(546819);

// Список переменных, в которых храним случайные числа, для выполнения синтаксической проверки
мПеременные = Новый Соответствие;

ПодключитьОбработчикОжидания("Обработать", 0.1, Истина);

мПоказателиВремя = Новый СписокЗначений;

