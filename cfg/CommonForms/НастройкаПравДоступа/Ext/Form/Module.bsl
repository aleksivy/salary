////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// В данном соответствие задаются предопределенные значения прав
// для проивольных областей данных.
// Предназначено для случаев, когда значение права задается конфигурацией,
// и недоступно для изменения пользователем.
// Например, право Чтение для области данных Номенклатура всегда должно быть ИСТИНА
// Инициализация переменной выполняется в ЗаполнитьПредопределенныеПраваПоОбластямДанных(),
// вызываемой из ПередОткрытием()
Перем мПредопределенныеПраваПоОбластямДанных;

Функция ПолучитьСписокОбластейДанных(ТипДанных) Экспорт

	СписокОбластей = Новый СписокЗначений;
	Если ТипДанных = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		СписокОбластей.Добавить(Перечисления.ОбластиДанныхОграниченияПравДоступа.ВнешниеОбработки);	
	ИначеЕсли ТипДанных = Тип("СправочникСсылка.Контрагенты") Тогда
		СписокОбластей.Добавить(Перечисления.ОбластиДанныхОграниченияПравДоступа.КонтрагентыСписок);
		СписокОбластей.Добавить(Перечисления.ОбластиДанныхОграниченияПравДоступа.КонтрагентыДанные);
		СписокОбластей.Добавить(Перечисления.ОбластиДанныхОграниченияПравДоступа.КонтрагентыКонтактнаяИнформация);		
	ИначеЕсли ТипДанных = Тип("СправочникСсылка.Организации") Тогда
		СписокОбластей.Добавить(Перечисления.ОбластиДанныхОграниченияПравДоступа.ОрганизацииСписок);
		СписокОбластей.Добавить(Перечисления.ОбластиДанныхОграниченияПравДоступа.ОрганизацииДанные);
	ИначеЕсли ТипДанных = Тип("СправочникСсылка.ТипыЗаписейЗаметок") Тогда
		СписокОбластей.Добавить(Перечисления.ОбластиДанныхОграниченияПравДоступа.ТипыЗаметок);
	ИначеЕсли ТипДанных = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокОбластей.Добавить(Перечисления.ОбластиДанныхОграниченияПравДоступа.ФизическиеЛица);
	ИначеЕсли ТипДанных = Тип("СправочникСсылка.Номенклатура") Тогда
		СписокОбластей.Добавить(Перечисления.ОбластиДанныхОграниченияПравДоступа.Номенклатура);
	ИначеЕсли ТипДанных = Тип("СправочникСсылка.Пользователи") или ТипДанных = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		Для каждого Перечисление Из Перечисления.ОбластиДанныхОграниченияПравДоступа Цикл
			СписокОбластей.Добавить(Перечисление);
		КонецЦикла; 
	КонецЕсли;
	
	Возврат СписокОбластей;

КонецФункции

Функция ПолучитьТипДляОбластиДанных(ОбластьДанных) Экспорт

	НайденныйТип = Неопределено;
	
	Если ОбластьДанных = Перечисления.ОбластиДанныхОграниченияПравДоступа.ВнешниеОбработки Тогда
		НайденныйТип = Тип("СправочникСсылка.ВнешниеОбработки");	
	ИначеЕсли ОбластьДанных = Перечисления.ОбластиДанныхОграниченияПравДоступа.КонтрагентыСписок Тогда
		НайденныйТип = Тип("СправочникСсылка.Контрагенты");
	ИначеЕсли ОбластьДанных = Перечисления.ОбластиДанныхОграниченияПравДоступа.КонтрагентыДанные Тогда
		НайденныйТип = Тип("СправочникСсылка.Контрагенты");
	ИначеЕсли ОбластьДанных = Перечисления.ОбластиДанныхОграниченияПравДоступа.КонтрагентыКонтактнаяИнформация Тогда
		НайденныйТип = Тип("СправочникСсылка.Контрагенты");
	ИначеЕсли ОбластьДанных = Перечисления.ОбластиДанныхОграниченияПравДоступа.ОрганизацииСписок Тогда
		НайденныйТип = Тип("СправочникСсылка.Организации");
	ИначеЕсли ОбластьДанных = Перечисления.ОбластиДанныхОграниченияПравДоступа.ОрганизацииДанные Тогда
		НайденныйТип = Тип("СправочникСсылка.Организации");	
	ИначеЕсли ОбластьДанных = Перечисления.ОбластиДанныхОграниченияПравДоступа.ТипыЗаметок Тогда
		НайденныйТип = Тип("СправочникСсылка.ТипыЗаписейЗаметок");
	ИначеЕсли ОбластьДанных = Перечисления.ОбластиДанныхОграниченияПравДоступа.ФизическиеЛица Тогда
		НайденныйТип = Тип("СправочникСсылка.ФизическиеЛица");
	ИначеЕсли ОбластьДанных = Перечисления.ОбластиДанныхОграниченияПравДоступа.Номенклатура Тогда
		НайденныйТип = Тип("СправочникСсылка.Номенклатура");
	ИначеЕсли ОбластьДанных = Перечисления.ОбластиДанныхОграниченияПравДоступа.СкладыДанные Тогда
		НайденныйТип = Тип("СправочникСсылка.Склады");
	ИначеЕсли ОбластьДанных = Перечисления.ОбластиДанныхОграниченияПравДоступа.ПодразделенияДанные Тогда
		НайденныйТип = Тип("СправочникСсылка.Подразделения");
	КонецЕсли;
	
	Возврат НайденныйТип;
	
КонецФункции // ПолучитьТипДляОбластиДанных()

Функция НаличиеПраваНаЧтениеСсылки(Ссылка)
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	_Таблица.Ссылка
	|ИЗ
	|	Справочник." + Ссылка.Метаданные().Имя + " КАК _Таблица
	|ГДЕ
	|	_Таблица.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции // () 

Функция Записать()
	
	Отказ = Ложь;
	НастройкаПравДоступа.ЗаписатьПраваДоступаПользователейКОбъекту(ПраваДоступаПользователей, СсылкаОбъекта, Отказ);
	
	Если Не Отказ Тогда
		Оповестить("ЗаписаныПраваДоступаПользователейКОбъекту",,ЭтаФорма);
		Модифицированность = Ложь;
	КонецЕсли; 
	
	Возврат Не Отказ;
	
КонецФункции

Процедура СнятьУстановитьФлажки(СтруктураИменИФлаговПолей)

	Если ЭлементыФормы.ОбластиДанных.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого Строка Из ПраваДоступаПользователей Цикл
		Если Строка.ОбластьДанных = ЭлементыФормы.ОбластиДанных.ТекущаяСтрока и 
			(Строка.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных или Строка.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава) Тогда
			Для каждого ЭлементСтруктуры Из СтруктураИменИФлаговПолей Цикл
				Строка[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

Процедура ЗаполнитьПредопределенныеПраваПоОбластямДанных()
	
	мПредопределенныеПраваПоОбластямДанных = Новый Соответствие;
	
	// Здесь должны быть строки определения предопределенных данных
	
	// Тип переменной: Соответствие
	// Ключ - область данных (значение соотв. перечисления)
	// Значение - Структура, у которой Ключ - ИмяПрава (например, Чтение), Значение - ЗначениеПрава (Истина или Ложь)	
	//мПредопределенныеПраваПоОбластямДанных.Вставить(Перечисления.ОбластиДанныхОграниченияПравДоступа.Номенклатура, Новый Структура("Чтение", Истина));
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обаботчик события "ПередОткрытием" Формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	СсылкаОбъекта = ЭтаФорма.КлючУникальности;
	МетаданныеОбъекта = СсылкаОбъекта.Метаданные();
	
	Если Не НаличиеПраваНаЧтениеСсылки(СсылкаОбъекта) Тогда
		Предупреждение(НСтр("ru='Отсутствует право на чтение объекта!';uk=""Відсутнє право на читання об'єкта!"""));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СписокОбластейДанных      = ПолучитьСписокОбластейДанных(ТипЗнч(СсылкаОбъекта));
	
	НастройкаПользователя = ТипЗнч(СсылкаОбъекта) = Тип("СправочникСсылка.Пользователи")
	 					ИЛИ ТипЗнч(СсылкаОбъекта) = Тип("СправочникСсылка.ГруппыПользователей");
						
	ЗаполнитьПредопределенныеПраваПоОбластямДанных();
						
	НастройкаПравДоступа.ПрочитатьПраваДоступаКОбъекту(ПраваДоступаПользователей, СсылкаОбъекта);
	
	//Установим отбор по виду наследования
	ОтборНаследования = ЭлементыФормы.ПраваДоступаПользователей.ОтборСтрок.ВидНаследованияПравДоступаИерархическихСправочников;
	ОтборНаследования.ВидСравнения = ВидСравнения.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
	СписокЗначений.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
	Если Не НастройкаПользователя Тогда
		СписокЗначений.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя);
	КонецЕсли;
	ОтборНаследования.Значение = СписокЗначений;
	ОтборНаследования.Использование = Истина;
	
	//Установим видимость колонок "Пользователь" и "Объект доступа"
	Если НастройкаПользователя Тогда
		ЭлементыФормы.ПраваДоступаПользователей.Колонки.Пользователь.ИзменятьВидимость = Ложь;
		ЭлементыФормы.ПраваДоступаПользователей.Колонки.Пользователь.Видимость         = Ложь;
	Иначе
		ЭлементыФормы.ПраваДоступаПользователей.Колонки.ОбъектДоступа.ИзменятьВидимость = Ложь;
		ЭлементыФормы.ПраваДоступаПользователей.Колонки.ОбъектДоступа.Видимость         = Ложь;
	КонецЕсли;
	
	// Установим отбор и видимость области данных
	Если Не НастройкаПользователя Тогда
		ОбластиДанных.Отбор.Ссылка.Использование = Истина;
		ОбластиДанных.Отбор.Ссылка.Значение      = СписокОбластейДанных;
		
		Если СписокОбластейДанных.Количество()=1 Тогда
			
			ЭлементыФормы.ОбластиДанных.УстановитьПривязку(ГраницаЭлементаУправления.Право);
			ЭлементыФормы.Разделитель.  УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.ОбластиДанных, ГраницаЭлементаУправления.Право);
			
			ЭлементыФормы.Разделитель.  Свертка = РежимСверткиЭлементаУправления.Лево;
			ЭлементыФормы.ОбластиДанных.Свертка = РежимСверткиЭлементаУправления.Лево;
			
			ПредопределеннныеПрава = мПредопределенныеПраваПоОбластямДанных[СписокОбластейДанных[0].Значение];
			Если ПредопределеннныеПрава <> Неопределено Тогда
				Для Каждого КлючИЗначение ИЗ ПредопределеннныеПрава Цикл
					ЭлементыФормы.ПраваДоступаПользователей.Колонки[КлючИЗначение.Ключ].ТолькоПросмотр = Истина;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыФормы.ОбластиДанных.НастройкаОтбора.Ссылка.Доступность = Ложь;
	ЭлементыФормы.ОбластиДанных.ТекущаяСтрока = СписокОбластейДанных[0].Значение;
	ЭлементыФормы.ПраваДоступаПользователей.НастройкаОтбораСтрок.ОбластьДанных.Доступность = Ложь;
	

	Заголовок = Заголовок + ": " + ?(НЕ ЗначениеЗаполнено(МетаданныеОбъекта.Синоним), МетаданныеОбъекта.Имя, МетаданныеОбъекта.Синоним) + ": " + ?(НЕ ЗначениеЗаполнено(СсылкаОбъекта),"<Весь справочник>", Строка(СсылкаОбъекта));
	
КонецПроцедуры


// Процедура - обаботчик события "ПередЗакрытием" Формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		ОтветНаВопрос = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения?';uk='Дані були змінені. Зберегти зміни?'"), РежимДиалогаВопрос.ДаНетОтмена);;
		Если ОтветНаВопрос = КодВозвратаДиалога.Отмена или ОтветНаВопрос = КодВозвратаДиалога.Да и не Записать() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события "ОбработкаВыбора" Формы
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если НастройкаПользователя и ТипЗНЧ(ЗначениеВыбора) = ПолучитьТипДляОбластиДанных(ЭлементыФормы.ОбластиДанных.ТекущиеДанные) Тогда
		НоваяЗапись = ПраваДоступаПользователей.Добавить();
		НоваяЗапись.ВидНаследованияПравДоступаИерархическихСправочников = НастройкаПравДоступа.ПолучитьСписокВидовНаследованияПравДоступа(ЗначениеВыбора)[0].Значение;
		НоваяЗапись.ОбъектДоступа = ЗначениеВыбора;
		НоваяЗапись.ОбластьДанных = ЭлементыФормы.ОбластиДанных.ТекущиеДанные;
		ЭлементыФормы.ПраваДоступаПользователей.ТекущаяСтрока = НоваяЗапись;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события "ОбработкаОповещения" Формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтаФорма или НастройкаПользователя Тогда
		Возврат;
	КонецЕсли;
	
	ЭталонныйНабор = РегистрыСведений.ПраваДоступаПользователейКОбъектам.СоздатьНаборЗаписей();
	Для каждого Отбор Из ПраваДоступаПользователей.Отбор Цикл
		ЭталонныйНабор.Отбор[Отбор.Имя].Использование = Отбор.Использование;
		ЭталонныйНабор.Отбор[Отбор.Имя].Значение      = Отбор.Значение;
	КонецЦикла;
	
	ЭталонныйНабор.Загрузить(НастройкаПравДоступа.ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(ПраваДоступаПользователей));
	НастройкаПравДоступа.ДополнитьНаборПравДоступаУнаследованнымиЗаписями(ЭталонныйНабор, СсылкаОбъекта, СсылкаОбъекта[НастройкаПравДоступа.ПолучитьИмяРеквизитаРодителяОбъектаДоступа(СсылкаОбъекта)]);
	
	Если Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(ЭталонныйНабор.Выгрузить(), ПраваДоступаПользователей.Выгрузить()) Тогда
		ПраваДоступаПользователей.Загрузить(ЭталонныйНабор.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обаботчик события, при нажатии на кнопку "Записать" Командной панели "ОсновныеДействияФормы"
//
Процедура ОсновныеДействияФормыЗаписать(Кнопка)
	
	Записать();
	
КонецПроцедуры

// Процедура - обаботчик события "ПриАктивизацииСтроки"  табличного поля "ОбластиДанных"
//
Процедура ОбластиДанныхПриАктивизацииСтроки(Элемент)
	
	ЭлементыФормы.ПраваДоступаПользователей.ОтборСтрок.ОбластьДанных.Использование = Истина;
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные) Тогда
		ЭлементыФормы.ПраваДоступаПользователей.ОтборСтрок.ОбластьДанных.Значение = Перечисления.ОбластиДанныхОграниченияПравДоступа.ПустаяСсылка();
	Иначе
		ТекущиеДанныеСсылка = Элемент.ТекущиеДанные;
		ЭлементыФормы.ПраваДоступаПользователей.ОтборСтрок.ОбластьДанных.Значение = ТекущиеДанныеСсылка;
	КонецЕсли; 
	
	ПредопределеннныеПрава = мПредопределенныеПраваПоОбластямДанных[Элемент.ТекущиеДанные];
	Если ПредопределеннныеПрава <> Неопределено Тогда
		Для Каждого КлючИЗначение ИЗ ПредопределеннныеПрава Цикл
			ЭлементыФормы.ПраваДоступаПользователей.Колонки[КлючИЗначение.Ключ].ТолькоПросмотр = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события "ПроверкаПеретаскивания"  табличного поля "ОбластиДанных"
//
Процедура ОбластиДанныхПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ЗначениеВыбора = ПараметрыПеретаскивания.Значение;
	Если НастройкаПользователя и ТипЗНЧ(ЗначениеВыбора) = ПолучитьТипДляОбластиДанных(Строка) Тогда
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Не НастройкаПользователя и (ТипЗНЧ(ЗначениеВыбора) = Тип("СправочникСсылка.Пользователи") или ТипЗНЧ(ЗначениеВыбора) = Тип("СправочникСсылка.ГруппыПользователей")) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события "Перетаскивание"  табличного поля "ОбластиДанных"
//
Процедура ОбластиДанныхПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ЗначениеВыбора = ПараметрыПеретаскивания.Значение;
	Если НастройкаПользователя и ТипЗНЧ(ЗначениеВыбора) = ПолучитьТипДляОбластиДанных(Строка) Тогда
		НоваяЗапись = ПраваДоступаПользователей.Добавить();
		НоваяЗапись.ВидНаследованияПравДоступаИерархическихСправочников = НастройкаПравДоступа.ПолучитьСписокВидовНаследованияПравДоступа(ЗначениеВыбора)[0].Значение;
		НоваяЗапись.ОбъектДоступа = ЗначениеВыбора;
		НоваяЗапись.ОбластьДанных = Строка;
		ЭлементыФормы.ПраваДоступаПользователей.ТекущаяСтрока = НоваяЗапись;
	ИначеЕсли Не НастройкаПользователя и (ТипЗНЧ(ЗначениеВыбора) = Тип("СправочникСсылка.Пользователи") или ТипЗНЧ(ЗначениеВыбора) = Тип("СправочникСсылка.ГруппыПользователей")) Тогда
		НоваяЗапись = ПраваДоступаПользователей.Добавить();
		НоваяЗапись.ВидНаследованияПравДоступаИерархическихСправочников = НастройкаПравДоступа.ПолучитьСписокВидовНаследованияПравДоступа(СсылкаОбъекта)[0].Значение;
		НоваяЗапись.Пользователь = ЗначениеВыбора;
		НоваяЗапись.ОбластьДанных = Строка;
		ЭлементыФормы.ПраваДоступаПользователей.ТекущаяСтрока = НоваяЗапись;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события "ПередУдалением"  табличного поля "ПраваДоступаПользователей"
//
Процедура ПраваДоступаПользователейПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Если Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя Тогда
			Предупреждение(НСтр("ru='Запись удалить невозможно, она наследутся от родителя.';uk='Запис видалити неможливо, він успадкований від батька.'"));
			Отказ = Истина;
		ИначеЕсли Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.УнаследованоОтДочернего Тогда
			Предупреждение(НСтр("ru='Запись удалить невозможно, она унаследована от дочернего элемента.';uk='Запис вилучити неможливо, він успадкований від дочірнього елемента.'"));
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обаботчик события "ПриНачалеРедактирования"  табличного поля "ПраваДоступаПользователей"
//
Процедура ПраваДоступаПользователейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбластьДанных = ЭлементыФормы.ОбластиДанных.ТекущиеДанные;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НастройкаПользователя Тогда
		
		ОбъектДоступа = ТекущиеДанные.ОбъектДоступа;
		
		МассивТипов   = Новый Массив;
		ТипОбъектаДоступа = ПолучитьТипДляОбластиДанных(ОбластьДанных);
		МассивТипов.Добавить(ТипОбъектаДоступа);
		Элемент.Колонки.ОбъектДоступа.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		Элемент.Колонки.ОбъектДоступа.ЭлементУправления.ВыбиратьТип = Ложь;
		
		Если ТипЗнч(ОбъектДоступа) <> ТипОбъектаДоступа Тогда
			ОбъектДоступа = Новый(ТипОбъектаДоступа);
			ТекущиеДанные.ОбъектДоступа = ОбъектДоступа;
		КонецЕсли;
		
	Иначе
		ОбъектДоступа = СсылкаОбъекта;
	КонецЕсли;
	
	СписокВидовНаследованияПравДоступа = НастройкаПравДоступа.ПолучитьСписокВидовНаследованияПравДоступа(ОбъектДоступа);
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.ОбластьДанных = ОбластьДанных;
		ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = СписокВидовНаследованияПравДоступа[0].Значение;
		ТекущиеДанные.Чтение = Истина;
	КонецЕсли; 
	
	РаботаСДиалогами.УстановитьСписокПоляВыбора(Элемент.Колонки.ВидНаследованияПравДоступаИерархическихСправочников.ЭлементУправления, СписокВидовНаследованияПравДоступа);
	
КонецПроцедуры

// Процедура - обаботчик события "ПриВыводеСтроки"  табличного поля "ПраваДоступаПользователей"
//
Процедура ПраваДоступаПользователейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ОформлениеСтроки.Ячейки.ОбъектДоступа.Видимость и НЕ ЗначениеЗаполнено(ДанныеСтроки.ОбъектДоступа) Тогда
		Если ДанныеСтроки.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава Тогда
			ОформлениеСтроки.Ячейки.ОбъектДоступа.Текст = "<Пустое значение>";
		Иначе
			ОформлениеСтроки.Ячейки.ОбъектДоступа.Текст = "<Весь справочник>";
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТолькоПросмотр или ДанныеСтроки.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя или ДанныеСтроки.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.УнаследованоОтДочернего Тогда
		Для каждого Ячейка Из ОформлениеСтроки.Ячейки Цикл
			Если Ячейка.ОтображатьФлажок Тогда
				Ячейка.ТолькоПросмотр = Истина;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события "ПриОкончанииРедактирования"  табличного поля "ПраваДоступаПользователей"
//
Процедура ПраваДоступаПользователейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников) Тогда
		Если НастройкаПользователя Тогда
			Если Элемент.ТекущиеДанные.ОбъектДоступа.ЭтоГруппа Тогда
				Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных;
			Иначе
				Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава;
			КонецЕсли; 
		Иначе
			Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "ОК" Командной панели "ОсновныеДействияФормы"
//
Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Если Записать() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Подбор" Командной панели "КоманднаяПанельФормы"
//
Процедура КоманднаяПанельФормыПодбор(Кнопка)
	
	ОбластьДанных = ЭлементыФормы.ОбластиДанных.ТекущиеДанные;
	Если НастройкаПользователя Тогда
		
		ТипОбластиДанных = ПолучитьТипДляОбластиДанных(ОбластьДанных);
		Если (ЗначениеЗаполнено(ЭлементыФормы.ОбластиДанных.ТекущиеДанные)) И (НастройкаПравДоступа.ЗаполнениеДочернихТолькоГруппами(ЭлементыФормы.ОбластиДанных.ТекущиеДанные)) Тогда
			ФормаПодбора = Справочники[Метаданные.НайтиПоТипу(ТипОбластиДанных).Имя].ПолучитьФормуВыбораГруппы (,ЭтаФорма, ОбластьДанных);
		Иначе	
			ФормаПодбора = Справочники[Метаданные.НайтиПоТипу(ТипОбластиДанных).Имя].ПолучитьФормуВыбора(,ЭтаФорма, ОбластьДанных);
		КонецЕсли;	
		ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
		ФормаПодбора.ОткрытьМодально();
		
	Иначе
		
		ВидНаследованияПравДоступаИерархическихСправочников = НастройкаПравДоступа.ПолучитьСписокВидовНаследованияПравДоступа(СсылкаОбъекта)[0].Значение;
		
		МассивЗначений = ПолучитьОбщуюФорму("ПодборПользователейДляНастройкиПравДоступа").ОткрытьМодально();
		
		Если ТипЗнч(МассивЗначений) = Тип("Массив") Тогда
			Для каждого ЭлементМассива Из МассивЗначений Цикл
				НоваяЗапись = ПраваДоступаПользователей.Добавить();
				НоваяЗапись.ВидНаследованияПравДоступаИерархическихСправочников = ВидНаследованияПравДоступаИерархическихСправочников;
				НоваяЗапись.Пользователь  = ЭлементМассива;
				НоваяЗапись.ОбластьДанных = ОбластьДанных;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события "ПриИзменении"  колонки "ОбъектДоступа" табличного поля "ПраваДоступаПользователей"
//
Процедура ПраваДоступаПользователейОбъектДоступаПриИзменении(Элемент)
	
	СписокВидовНаследованияПравДоступа = НастройкаПравДоступа.ПолучитьСписокВидовНаследованияПравДоступа(Элемент.Значение);
	РаботаСДиалогами.УстановитьСписокПоляВыбора(ЭлементыФормы.ПраваДоступаПользователей.Колонки.ВидНаследованияПравДоступаИерархическихСправочников.ЭлементУправления, СписокВидовНаследованияПравДоступа);
	Если ЭлементыФормы.ПраваДоступаПользователей.Колонки.ВидНаследованияПравДоступаИерархическихСправочников.ЭлементУправления.СписокВыбора.НайтиПоЗначению(ЭлементыФормы.ПраваДоступаПользователей.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников) = Неопределено Тогда
		ЭлементыФормы.ПраваДоступаПользователей.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = СписокВидовНаследованияПравДоступа[0].Значение;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обаботчик события "Выбор"  табличного поля "ПраваДоступаПользователей"
//
Процедура ПраваДоступаПользователейВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И (Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя или Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.УнаследованоОтДочернего) Тогда
		НастройкаПравДоступа.РедактироватьПраваДоступа(Элемент.ТекущиеДанные.ВладелецПравДоступа);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Чтение" Командной панели "КоманднаяПанельФормы"
//
Процедура КоманднаяПанельФормыУстановитьФлажкиЧтение(Кнопка)
	
	СнятьУстановитьФлажки(Новый Структура("Чтение", Истина));
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Изменение" Командной панели "КоманднаяПанельФормы"
//
Процедура КоманднаяПанельФормыУстановитьФлажкиИзменение(Кнопка)
	
	СнятьУстановитьФлажки(Новый Структура("Изменение", Истина));
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Добавление" Командной панели "КоманднаяПанельФормы"
//
Процедура КоманднаяПанельФормыУстановитьФлажкиДобавление(Кнопка)
	
	СнятьУстановитьФлажки(Новый Структура("Добавление", Истина));
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Настройка прав" Командной панели "КоманднаяПанельФормы"
//
Процедура КоманднаяПанельФормыУстановитьФлажкиНастройка(Кнопка)
	
	СнятьУстановитьФлажки(Новый Структура("НастройкаДоступа", Истина));
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Все" Командной панели "КоманднаяПанельФормы"
//
Процедура КоманднаяПанельФормыУстановитьФлажкиВсе(Кнопка)
	
	СнятьУстановитьФлажки(Новый Структура("Чтение, Изменение, Добавление, НастройкаДоступа", Истина, Истина, Истина, Истина));
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Чтение" Командной панели "КоманднаяПанельФормы"
//
Процедура КоманднаяПанельФормыСнятьФлажкиЧтение(Кнопка)
	
	СнятьУстановитьФлажки(Новый Структура("Чтение", Ложь));
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Изменение" Командной панели "КоманднаяПанельФормы"
//
Процедура КоманднаяПанельФормыСнятьФлажкиИзменение(Кнопка)
	
	СнятьУстановитьФлажки(Новый Структура("Изменение", Ложь));
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Добавление" Командной панели "КоманднаяПанельФормы"
//
Процедура КоманднаяПанельФормыСнятьФлажкиДобавление(Кнопка)
	
	СнятьУстановитьФлажки(Новый Структура("Добавление", Ложь));
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Настройка прав" Командной панели "КоманднаяПанельФормы"
//
Процедура КоманднаяПанельФормыСнятьФлажкиНастройка(Кнопка)
	
	СнятьУстановитьФлажки(Новый Структура("НастройкаДоступа", Ложь));
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Все" Командной панели "КоманднаяПанельФормы"
//
Процедура КоманднаяПанельФормыСнятьФлажкиВсе(Кнопка)
	
	СнятьУстановитьФлажки(Новый Структура("Чтение, Изменение, Добавление, НастройкаДоступа", Ложь, Ложь, Ложь, Ложь));
	
КонецПроцедуры

// Процедура - обаботчик события "Очистка"  колонки "ВидНаследованияПравДоступаИерархическихСправочников" табличного поля "ПраваДоступаПользователей"
//
Процедура ПраваДоступаПользователейВидНаследованияПравДоступаИерархическихСправочниковОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обаботчик события "ПроверкаПеретаскивания"  табличного поля "ПраваДоступаПользователей"
//
Процедура ПраваДоступаПользователейПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ЗначениеВыбора = ПараметрыПеретаскивания.Значение;
	Если НастройкаПользователя и ТипЗНЧ(ЗначениеВыбора) = ПолучитьТипДляОбластиДанных(ЭлементыФормы.ОбластиДанных.ТекущиеДанные) Тогда
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Не НастройкаПользователя и (ТипЗНЧ(ЗначениеВыбора) = Тип("СправочникСсылка.Пользователи") или ТипЗНЧ(ЗначениеВыбора) = Тип("СправочникСсылка.ГруппыПользователей")) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события "Перетаскивание"  табличного поля "ПраваДоступаПользователей"
//
Процедура ПраваДоступаПользователейПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ЗначениеВыбора = ПараметрыПеретаскивания.Значение;
	Если НастройкаПользователя и ТипЗНЧ(ЗначениеВыбора) = ПолучитьТипДляОбластиДанных(ЭлементыФормы.ОбластиДанных.ТекущиеДанные) Тогда
		НоваяЗапись = ПраваДоступаПользователей.Добавить();
		НоваяЗапись.ВидНаследованияПравДоступаИерархическихСправочников = НастройкаПравДоступа.ПолучитьСписокВидовНаследованияПравДоступа(ЗначениеВыбора)[0].Значение;
		НоваяЗапись.ОбъектДоступа = ЗначениеВыбора;
		НоваяЗапись.ОбластьДанных = ЭлементыФормы.ОбластиДанных.ТекущиеДанные;
		ЭлементыФормы.ПраваДоступаПользователей.ТекущаяСтрока = НоваяЗапись;
	ИначеЕсли Не НастройкаПользователя и (ТипЗНЧ(ЗначениеВыбора) = Тип("СправочникСсылка.Пользователи") или ТипЗНЧ(ЗначениеВыбора) = Тип("СправочникСсылка.ГруппыПользователей")) Тогда
		НоваяЗапись = ПраваДоступаПользователей.Добавить();
		НоваяЗапись.ВидНаследованияПравДоступаИерархическихСправочников = НастройкаПравДоступа.ПолучитьСписокВидовНаследованияПравДоступа(СсылкаОбъекта)[0].Значение;
		НоваяЗапись.Пользователь = ЗначениеВыбора;
		НоваяЗапись.ОбластьДанных = ЭлементыФормы.ОбластиДанных.ТекущиеДанные;
		ЭлементыФормы.ПраваДоступаПользователей.ТекущаяСтрока = НоваяЗапись;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПраваДоступаПользователейОбъектДоступаНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если (ЗначениеЗаполнено(ЭлементыФормы.ОбластиДанных.ТекущиеДанные)) И (НастройкаПравДоступа.ЗаполнениеДочернихТолькоГруппами(ЭлементыФормы.ОбластиДанных.ТекущиеДанные)) Тогда
		Элемент.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы;
	Иначе	
		Элемент.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
	КонецЕсли;	
КонецПроцедуры


