Перем ДиаграммаДоступна;
Перем НеИспользуемыйЦвет;

//Функция создает по структуре параметров соответсвие
Функция СоздатьПоСтруктуреСоответствие(Знач СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для Каждого Элемент Из СтруктураПараметров Цикл
		
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
		
	КонецЦикла;
	
	Возврат Параметры;
	
КонецФункции

Процедура ИнициализироватьКомпоновщикНастроек()
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ОтчетОбъект.СхемаКомпоновкиДанных));
	
	Если ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Количество() = 0 Тогда
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	КонецЕсли;
	
	// Настройки компоновщика отчета
	ЭлементОтчета = ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура[0];
	ТипЭлементаОтчета = ТипЗнч(ЭлементОтчета);
	ПредставлениеЭлементаОтчета = ТиповыеОтчеты.ПолучитьПредставлениеПоЭлементуСтруктуры(ЭлементОтчета);
	
	Элемент = КомпоновщикНастроек.Настройки.Структура.Добавить(ТипЭлементаОтчета);
	
	ЭлементыФормы.НастройкиСкрытыеЭлемент.ТекущаяСтрока = Элемент;
	
	// Скопируем настройки в компоновщик из компоновщика отчета
	ТиповыеОтчеты.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Выбор,         ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор);
	ТиповыеОтчеты.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор,         ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор);
	ТиповыеОтчеты.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Порядок,       ОтчетОбъект.КомпоновщикНастроек.Настройки.Порядок);
	ТиповыеОтчеты.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.УсловноеОформление, ОтчетОбъект.КомпоновщикНастроек.Настройки.УсловноеОформление, Ложь);
	ТиповыеОтчеты.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.ПользовательскиеПоля, ОтчетОбъект.КомпоновщикНастроек.Настройки.ПользовательскиеПоля);
	ТиповыеОтчеты.ЗаполнитьЭлементы(КомпоновщикНастроек.Настройки.ПараметрыДанных, ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных);
	ТиповыеОтчеты.ЗаполнитьЭлементы(КомпоновщикНастроек.Настройки.ПараметрыВывода, ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода);
	
	Если ТипЭлементаОтчета = Тип("ГруппировкаКомпоновкиДанных") Тогда
		
		ДобавитьПоляГруппировки(ЭлементОтчета, Элемент, "ПоляГруппировки", Истина);
	
	ИначеЕсли ТипЭлементаОтчета = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		ДобавитьПоляГруппировки(ЭлементОтчета, Элемент, "Строки", Истина);
		ДобавитьПоляГруппировки(ЭлементОтчета, Элемент, "Колонки", Ложь);
				
	ИначеЕсли ТипЭлементаОтчета = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		ДобавитьПоляГруппировки(ЭлементОтчета, Элемент, "Серии", Истина);
		ДобавитьПоляГруппировки(ЭлементОтчета, Элемент, "Точки", Ложь);
		
	КонецЕсли;
	
	//ТиповыеОтчеты.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Структура[0].Отбор, ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор);

КонецПроцедуры

Процедура УстановитьПараметрыФормы()
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	СписокОграничений = Новый СписокЗначений;
	Параметры = СоздатьПоСтруктуреСоответствие(ПараметрыФормы);
	Если Параметры["СписокВыбораПредставлениеОтчета"] <> Неопределено Тогда
		СписокОграничений = Параметры["СписокВыбораПредставлениеОтчета"];
	КонецЕсли;
	
	СписокДопустимыхЗначенийПредставления = Новый СписокЗначений;
	Если СписокОграничений.Количество() = 0 
	 ИЛИ СписокОграничений.НайтиПоЗначению(Перечисления.ПредставленияЭлементовОтчетов.Таблица) <> Неопределено Тогда
		СписокДопустимыхЗначенийПредставления.Добавить(Перечисления.ПредставленияЭлементовОтчетов.Таблица, Перечисления.ПредставленияЭлементовОтчетов.Таблица,, БиблиотекаКартинок.Таблица);
	КонецЕсли;
	Если СписокОграничений.Количество() = 0 
	 ИЛИ СписокОграничений.НайтиПоЗначению(Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица) <> Неопределено Тогда
		СписокДопустимыхЗначенийПредставления.Добавить(Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица, Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица,, БиблиотекаКартинок.КроссТаблица);
	КонецЕсли;
	
	СписокРесурсов = ТиповыеОтчеты.ПолучитьСписокДоступныхРесурсов(КомпоновщикНастроек);
	ДиаграммаДоступна = (СписокРесурсов.Количество() > 0);
	Если ДиаграммаДоступна Тогда	
		Если СписокОграничений.Количество() = 0 
	 	 ИЛИ СписокОграничений.НайтиПоЗначению(Перечисления.ПредставленияЭлементовОтчетов.Диаграмма) <> Неопределено Тогда
	     	СписокДопустимыхЗначенийПредставления.Добавить(Перечисления.ПредставленияЭлементовОтчетов.Диаграмма, Перечисления.ПредставленияЭлементовОтчетов.Диаграмма,, БиблиотекаКартинок.Диаграмма);
		КонецЕсли;
	КонецЕсли;
	
	Действие = Новый Действие("ПереключениеПредставления");
	Если СписокДопустимыхЗначенийПредставления.Количество() > 1 Тогда
		Для каждого ЗначениеПредставления Из СписокДопустимыхЗначенийПредставления Цикл
			НоваяКнопка = ЭлементыФормы.ДействияФормы.Кнопки.Представление.Кнопки.Добавить("И" + Перечисления.ПредставленияЭлементовОтчетов.Индекс(ЗначениеПредставления.Значение), ТипКнопкиКоманднойПанели.Действие, ЗначениеПредставления.Представление, Действие);
			НоваяКнопка.Картинка = ЗначениеПредставления.Картинка;
		КонецЦикла;
	Иначе
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.Представление);
	КонецЕсли;
	
	Если Параметры["ВидимостьДетальныеЗаписи"] = Ложь Тогда
		ЭлементыФормы.ФлажокВыводитьДетальныеЗаписиСтраницаТаблица.Видимость = Ложь;
	    ЭлементыФормы.ФлажокВыводитьДетальныеЗаписиСтраницаНеТаблица.Видимость = Ложь;
	КонецЕсли;
	Если Параметры["ВидимостьРасширеннаяНастройка"] = Ложь Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.РасширеннаяНастройка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьКомпоновщикНастроек();
	УстановитьПараметрыФормы();
	ОбновитьЭлементыФормы();
	ОбновитьФормуПоКомпоновщику();
	УстановитьДоступностьОформленияПоказателей();
	ОбновитьКнопкиКонтекстногоМенюПоказатели(ЭлементыФормы.КоманднаяПанельСтраницаТаблицаПоказателиКонтекстноеМеню);
	ОбновитьКнопкиКонтекстногоМенюПоказатели(ЭлементыФормы.КоманднаяПанельСтраницаНеТаблицаПоказателиКонтекстноеМеню);
	ОграниченнаяНастройка = ПараметрыФормы.Свойство("ОграниченнаяНастройка") И ПараметрыФормы["ОграниченнаяНастройка"];
	Если ТиповыеОтчеты.АналитическийОтчет() Тогда
		Расшифровки    = ОтчетОбъект.Расшифровки.Выгрузить();
		ЦветаДиаграммы = ОтчетОбъект.ЦветаДиаграммы.Получить();
		ОформлениеПоказателей = ОтчетОбъект.ОформлениеПоказателей.Получить();
		ЭлементыФормы.КоманднаяПанельДоступныеПоля.Кнопки.ПользовательскиеПоля.Подсказка = НСтр("ru='Настройка пользовательских полей (включая индикаторы состояний и трендов)';uk='Настройка полів користувача (включаючи індикатори станів і трендів)'");
		ЭлементыФормы.КоманднаяПанельДоступныеПоля.Кнопки.ПользовательскиеПоля.Пояснение = ЭлементыФормы.КоманднаяПанельДоступныеПоля.Кнопки.ПользовательскиеПоля.Подсказка;
		ОформлениеПоказателейИнициализация();
		ЭлементыФормы.ОформлениеПоказателей.ТолькоПросмотр = ОграниченнаяНастройка;
		ЭлементыФормы.ЦветаДиаграммы.ТолькоПросмотр = ОграниченнаяНастройка;
		ЭлементыФормы.КоманднаяПанельЦветаСерий.Кнопки.Обновить.Доступность = Не ОграниченнаяНастройка;
		ЭлементыФормы.КоманднаяПанельЦветаСерий.Кнопки.Очистить.Доступность = Не ОграниченнаяНастройка;
		ЦветаДиаграммыИнициализация();
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.РасширеннаяНастройка);
		ЭлементыФормы.ТипДиаграммы.Лево = ЭлементыФормы.ТипДиаграммы.Лево - 124;
		ЭлементыФормы.ТипДиаграммы.Ширина = ЭлементыФормы.ТипДиаграммы.Ширина + 124
	Иначе
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДополнительнаяНастройка);
	КонецЕсли;
	Если ОграниченнаяНастройка Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Сформировать);
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОК.КнопкаПоУмолчанию = Истина;
		ЭлементыФормы.ФлажокОтрицательноеКраснымСтраницаОформлениеПоказателей.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЦветаДиаграммыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Цвет.ЦветФона = ДанныеСтроки.Цвет;
	
КонецПроцедуры

Процедура ОформлениеПоказателейИнициализация()
	
	Если ОформлениеПоказателей.Колонки.Количество() = 0 Тогда
		ОформлениеПоказателей = Новый ТаблицаЗначений;                         
		ОформлениеПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("Строка"), "Показатель");
		ОформлениеПоказателей.Колонки.Добавить("ЦветМеньше", Новый ОписаниеТипов("Цвет"), "Меньше");
		ОформлениеПоказателей.Колонки.Добавить("НижняяГраница", Новый ОписаниеТипов("Число"), "Нижняя граница");	
		ОформлениеПоказателей.Колонки.Добавить("ЦветРавно", Новый ОписаниеТипов("Цвет"), "Между");	
		ОформлениеПоказателей.Колонки.Добавить("ВерхняяГраница", Новый ОписаниеТипов("Число"), "Верхняя граница");	
		ОформлениеПоказателей.Колонки.Добавить("ЦветБольше", Новый ОписаниеТипов("Цвет"), "Больше");	
	КонецЕсли;
	
	ЭлементыФормы.ОформлениеПоказателей.СоздатьКолонки();
	ЭлементыФормы.ОформлениеПоказателей.ВысотаШапки = 2;
	ЭлементыФормы.ОформлениеПоказателей.Колонки.ЦветМеньше.Ширина = 7;
	ЭлементыФормы.ОформлениеПоказателей.Колонки.ЦветМеньше.ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
	ЭлементыФормы.ОформлениеПоказателей.Колонки.ЦветМеньше.ИзменятьНастройку = Ложь;
	ЭлементыФормы.ОформлениеПоказателей.Колонки.ЦветМеньше.ПропускатьПриВводе = Истина;
	ЭлементыФормы.ОформлениеПоказателей.Колонки.ЦветРавно.Ширина = 7;
	ЭлементыФормы.ОформлениеПоказателей.Колонки.ЦветРавно.ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
	ЭлементыФормы.ОформлениеПоказателей.Колонки.ЦветРавно.ИзменятьНастройку = Ложь;
	ЭлементыФормы.ОформлениеПоказателей.Колонки.ЦветРавно.ПропускатьПриВводе = Истина;
	ЭлементыФормы.ОформлениеПоказателей.Колонки.ЦветБольше.Ширина = 7;
	ЭлементыФормы.ОформлениеПоказателей.Колонки.ЦветБольше.ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
	ЭлементыФормы.ОформлениеПоказателей.Колонки.ЦветБольше.ИзменятьНастройку = Ложь;
	ЭлементыФормы.ОформлениеПоказателей.Колонки.ЦветБольше.ПропускатьПриВводе = Истина;
	ЭлементыФормы.ОформлениеПоказателей.Колонки.НижняяГраница.Ширина = 12;
	ЭлементыФормы.ОформлениеПоказателей.Колонки.ВерхняяГраница.Ширина = 12;
	ЭлементыФормы.ОформлениеПоказателей.Колонки.Показатель.Ширина = 16;
	ЭлементыФормы.ОформлениеПоказателей.Колонки.Показатель.ЭлементУправления.СписокВыбора = ТиповыеОтчеты.ПолучитьСписокДоступныхРесурсов(КомпоновщикНастроек, , Ложь);
	ЭлементыФормы.ОформлениеПоказателей.Колонки.Показатель.ЭлементУправления.КнопкаСпискаВыбора = Истина;
	
КонецПроцедуры

Процедура СохранитьИЗакрыть(Формировать = Ложь)
	
	Если ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Диаграмма Тогда
		КоличествоРесурсов = 0;
		Для Каждого Элемент Из ТиповыеОтчеты.ПолучитьВыбранныеПоля(КомпоновщикНастроек) Цикл
			Если Элемент.Использование Тогда
				КоличествоРесурсов = КоличествоРесурсов + 1;
			КонецЕсли;
		КонецЦикла;
		Если КоличествоРесурсов <> 1 Тогда
			Вопрос(НСтр("ru='В диаграмме должен присутствовать показатель и только один';uk='У діаграмі повинен бути присутнім показник і тільки один'"), РежимДиалогаВопрос.ОК);
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	ЗаполнитьКомпоновщикНастроекОтчета();
	ОтчетОбъект.ОтрицательноеКрасным = ОтрицательноеКрасным;
	Если ТиповыеОтчеты.АналитическийОтчет() Тогда
		ОтчетОбъект.Расшифровки.Загрузить(Расшифровки);
		ОтчетОбъект.ЦветаДиаграммы = Новый ХранилищеЗначения(ЦветаДиаграммы);
		ОтчетОбъект.ОформлениеПоказателей = Новый ХранилищеЗначения(ОформлениеПоказателей);
	КонецЕсли;
	
	Закрыть(Формировать);
	
КонецПроцедуры

Процедура ОбновитьЭлементыФормы()

	Заголовок = "Настройки отчета """ + ВладелецФормы.Заголовок + """";
	СписокРесурсов = ТиповыеОтчеты.ПолучитьСписокДоступныхРесурсов(КомпоновщикНастроек);
	ДиаграммаДоступна = (СписокРесурсов.Количество() > 0);
	Если ДиаграммаДоступна Тогда	
		ЭлементыФормы.РамкаГруппыПоказателиСтраницаНеТаблица.Заголовок = НСтр("ru='Показатели и дополнительные поля';uk='Показники й додаткові поля'");
		ЭлементыФормы.РамкаГруппыПоказателиСтраницаТаблица.Заголовок = НСтр("ru='Показатели и дополнительные поля';uk='Показники й додаткові поля'");	
	Иначе
		ЭлементыФормы.РамкаГруппыПоказателиСтраницаНеТаблица.Заголовок = НСтр("ru='Дополнительные поля';uk='Додаткові поля'");
		ЭлементыФормы.РамкаГруппыПоказателиСтраницаТаблица.Заголовок = НСтр("ru='Дополнительные поля';uk='Додаткові поля'");
	КонецЕсли;
	
	Если ЭлементыФормы.ДействияФормы.Кнопки.Найти("Представление") <> Неопределено Тогда
		Для каждого КнопкаПредставления Из ЭлементыФормы.ДействияФормы.Кнопки.Представление.Кнопки Цикл
			КнопкаПредставления.Пометка = Ложь;
			Если КнопкаПредставления.Имя = ("И" + Перечисления.ПредставленияЭлементовОтчетов.Индекс(ПредставлениеЭлементаОтчета)) Тогда
				ТекущаяКнопка = КнопкаПредставления;
			КонецЕсли;
		КонецЦикла;
		Если ТекущаяКнопка <> Неопределено Тогда
			ТекущаяКнопка.Пометка = Истина;
			ЭлементыФормы.ДействияФормы.Кнопки.Представление.Текст = ПредставлениеЭлементаОтчета;
			ЭлементыФормы.ДействияФормы.Кнопки.Представление.Картинка = ТекущаяКнопка.Картинка;
			ЭлементыФормы.ДействияФормы.Кнопки.Представление.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.ФлажокОтрицательноеКрасным.Видимость = ДиаграммаДоступна;
	ЭлементыФормы.ФлажокВыводитьОбщиеИтоги.Видимость   = ДиаграммаДоступна;
		
	ЭлементыФормы.НастройкиСкрытыеГруппировкиСтрок.ПодробнаяНастройка   = Истина;
	ЭлементыФормы.НастройкиСкрытыеГруппировкиКолонок.ПодробнаяНастройка = Истина;
	ЭлементыФормы.НастройкиСкрытыеЭлемент.ПодробнаяНастройка            = Истина;
	
	Для каждого ЭлементФормы Из ЭлементыФормы Цикл
		Если Найти(ЭлементФормы.Имя, "НастройкиПользователя") > 0 Тогда
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Таблица Тогда
		ЭлементыФормы.РамкаГруппыГруппировкиСтрокСтраницаТаблица.Заголовок         = "Строки";
	ИначеЕсли ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица Тогда
		ЭлементыФормы.РамкаГруппыГруппировкиСтрокСтраницаНеТаблица.Заголовок       = "Строки";
		ЭлементыФормы.РамкаГруппыГруппировкиКолонокСтраницаНеТаблица.Заголовок     = "Колонки";
	ИначеЕсли ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Диаграмма Тогда
		ЭлементыФормы.РамкаГруппыГруппировкиСтрокСтраницаНеТаблица.Заголовок       = "Серии";
		ЭлементыФормы.РамкаГруппыГруппировкиКолонокСтраницаНеТаблица.Заголовок     = "Точки";
	КонецЕсли;
	
	Если ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Таблица Тогда
		ЭлементыФормы.ПанельСтруктураОтчета.ТекущаяСтраница = ЭлементыФормы.ПанельСтруктураОтчета.Страницы.СтраницаТаблица;
	Иначе
		ЭлементыФормы.ПанельСтруктураОтчета.ТекущаяСтраница = ЭлементыФормы.ПанельСтруктураОтчета.Страницы.СтраницаНеТаблица;
	КонецЕсли;
	
	ЭлементыФормы.ТипДиаграммы.Видимость = (ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Диаграмма);
	
	ПоказыватьПараметры = ТиповыеОтчеты.АналитическийОтчет();
	Если Не ПоказыватьПараметры ИЛИ ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Количество() = 0 Тогда
		ЭлементыФормы.ПанельОтборПорядок.ТекущаяСтраница = ЭлементыФормы.ПанельОтборПорядок.Страницы.СтраницаБезПараметров;
		ЭлементыФормы.ПанельНастройки.Страницы.ОтборИПорядок.Заголовок = НСтр("ru='Отбор и упорядочивание';uk='Відбір і упорядкування'");
	Иначе
		ЭлементыФормы.ПанельОтборПорядок.ТекущаяСтраница = ЭлементыФормы.ПанельОтборПорядок.Страницы.СтраницаПараметры;
		ЭлементыФормы.ПанельНастройки.Страницы.ОтборИПорядок.Заголовок = НСтр("ru='Отбор, упорядочивание и параметры';uk='Відбір, упорядкування й параметри'");
	КонецЕсли;
	
	Картинка = ТиповыеОтчеты.ПолучитьКартинкуПредставленияЭлементаОтчета(ПредставлениеЭлементаОтчета);
	Если Картинка <> Неопределено Тогда
		КартинкаЗаголовка = Картинка;
	КонецЕсли;
	Если ТиповыеОтчеты.АналитическийОтчет() Тогда
		Если ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Диаграмма Тогда
			ЭлементыФормы.ПанельОформление.ТекущаяСтраница = ЭлементыФормы.ПанельОформление.Страницы.ЦветаДиаграммы;
		Иначе
			ЭлементыФормы.ПанельОформление.ТекущаяСтраница = ЭлементыФормы.ПанельОформление.Страницы.ОформлениеПоказателей;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ПанельОформление.ТекущаяСтраница = ЭлементыФормы.ПанельОформление.Страницы.Оформление;
	КонецЕсли;
	
	УстановитТекущуюСтраницуПанелиПереноса();
	ОбновитьКонтекстноеМенюДоступныхПолей();
	
КонецПроцедуры

Процедура ПереключениеПредставления(Кнопка)
	
	Индекс = Число(Прав(Кнопка.Имя, 1));
	ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов[Индекс];
	ПредставлениеЭлементаОтчетаПриИзменении(ПредставлениеЭлементаОтчета);
	
КонецПроцедуры

Процедура ОбновитьФормуПоКомпоновщику()
	
	ТипДиаграммы = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ChartType")).Значение;
	
	ЗначениеПараметра = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput"));
	Если ЗначениеПараметра.Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить Тогда
		ЭлементыФормы.ФлажокОтображатьЗаголовок.Значение = Истина;
	Иначе
		ЭлементыФормы.ФлажокОтображатьЗаголовок.Значение = Ложь;
	КонецЕсли;
	
	ЗначениеПараметра = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("VerticalOverallPlacement")); //HorizontalOverallPlacement
	Если ЗначениеПараметра.Значение = РасположениеИтоговКомпоновкиДанных.Нет Тогда
		ЭлементыФормы.ФлажокВыводитьОбщиеИтоги.Значение = Ложь;
	Иначе
		ЭлементыФормы.ФлажокВыводитьОбщиеИтоги.Значение = Истина;
	КонецЕсли;
	
	// Параметры периода
	ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ЗначениеПараметраКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	ЗначениеПараметраПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если ЗначениеПараметраНачалоПериода <> Неопределено 
	   И ЗначениеПараметраКонецПериода <> Неопределено Тогда
		НачалоПериода = ЗначениеПараметраНачалоПериода.Значение;
		КонецПериода = ЗначениеПараметраКонецПериода.Значение;
		ЭлементыФормы.ПанельПериод.ТекущаяСтраница = ЭлементыФормы.ПанельПериод.Страницы.Интервал;
	ИначеЕсли ЗначениеПараметраПериод <> Неопределено Тогда
		Период = ЗначениеПараметраПериод.Значение;
		ЭлементыФормы.ПанельПериод.ТекущаяСтраница = ЭлементыФормы.ПанельПериод.Страницы.Период;
	Иначе
		ЭлементыФормы.ПанельПериод.ТекущаяСтраница = ЭлементыФормы.ПанельПериод.Страницы.Пустой;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьПоляГруппировки(Элемент, ЭлементПользователя, ТипСтруктуры = "Строки", ПервоеИзмерение = Истина)
	
	// Добавим строки
	Если ТипСтруктуры = "ПоляГруппировки" Тогда
		СтрокиПользователя = ЭлементПользователя;
	Иначе
		// Добавляем фиктивную группировку без полей группировки
		СтрокиПользователя = ЭлементПользователя[ТипСтруктуры].Добавить();
	КонецЕсли;
	
	Если ПервоеИзмерение Тогда
		ЭлементыФормы.НастройкиСкрытыеГруппировкиСтрок.ТекущаяСтрока = СтрокиПользователя;
	Иначе
		ЭлементыФормы.НастройкиСкрытыеГруппировкиКолонок.ТекущаяСтрока = СтрокиПользователя;
	КонецЕсли;
	
	// Есть хотя бы одна строка группировки с хотя бы одним полем группировки
	Если ТипСтруктуры = "ПоляГруппировки" Тогда
		Группировка = Элемент;
		ГруппировкиЕсть = Истина;
	ИначеЕсли ТипСтруктуры <> "ПоляГруппировки"
		    И Элемент[ТипСтруктуры].Количество() > 0 Тогда
	    // Получим первую группировку
		Группировка = Элемент[ТипСтруктуры][0];
		ГруппировкиЕсть = Истина;
	Иначе
		ГруппировкиЕсть = Ложь;
	КонецЕсли;
	
	Пока ГруппировкиЕсть Цикл
		// Если ни одного поля группировки нет, значит в отчете есть детальные записи
		Если Группировка.ПоляГруппировки.Элементы.Количество() = 0 Тогда
			ВыводитьДетальныеЗаписи = Истина;
			Прервать;
		КонецЕсли;
		// Определяем первое поле в очередной группировке и добавляем в пользовательские поля группировки
		ПолеГруппировки = Группировка.ПоляГруппировки.Элементы[0];
		ПолеГруппировкиПользователя = СтрокиПользователя.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(ПолеГруппировкиПользователя, ПолеГруппировки);
		Если Группировка.Структура.Количество() = 0 Тогда
			Прервать;
		Иначе
			// Переходим на уровень ниже по группировкам
			Группировка = Группировка.Структура[0];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьГруппировки(ЭлементОтчета, Элемент, ТипСтруктуры)
	
	// Добавим в компоновщик настроек строки группировки таблицы
	Если ТипСтруктуры = "ПоляГруппировки" Тогда
		СтрокиЭлемента = Элемент;
		ЭлементОтчета.ПоляГруппировки.Элементы.Очистить();
		ЭлементОтчета.Структура.Очистить();
	Иначе
		СтрокиЭлемента = Элемент[ТипСтруктуры][0];
		ЭлементОтчета[ТипСтруктуры].Очистить();
	КонецЕсли;
	
	Если СтрокиЭлемента.ПоляГруппировки.Элементы.Количество() <> 0 Тогда
		Если ТипСтруктуры = "ПоляГруппировки" Тогда
			НоваяСтрока = ЭлементОтчета;
		Иначе
			НоваяСтрока = ЭлементОтчета[ТипСтруктуры].Добавить();
		КонецЕсли;
	Иначе
		Если ТипСтруктуры = "ПоляГруппировки" Тогда
			НоваяСтрока = ЭлементОтчета;
		Иначе
			НоваяСтрока = ЭлементОтчета[ТипСтруктуры];
		КонецЕсли;
	КонецЕсли;
	
	Если ТипСтруктуры = "ПоляГруппировки" И СтрокиЭлемента.ПоляГруппировки.Элементы.Количество() = 0 Тогда
		НоваяСтрока = ЭлементОтчета.Родитель;
		ЭлементОтчета.Родитель.Структура.Удалить(ЭлементОтчета);
	КонецЕсли;
		
	Для каждого СтрокаГруппировки Из СтрокиЭлемента.ПоляГруппировки.Элементы Цикл
		НовоеПолеГруппировки = НоваяСтрока.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовоеПолеГруппировки, СтрокаГруппировки);
		ТиповыеОтчеты.ДобавитьАвтоВыбранноеПоле(НоваяСтрока);
		ТиповыеОтчеты.ДобавитьАвтоЭлементПорядка(НоваяСтрока);
		Если СтрокиЭлемента.ПоляГруппировки.Элементы.Индекс(СтрокаГруппировки) = СтрокиЭлемента.ПоляГруппировки.Элементы.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;
		Если ТипСтруктуры = "ПоляГруппировки" Тогда
			НоваяСтрока = НоваяСтрока.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Иначе
			НоваяСтрока = НоваяСтрока.Структура.Добавить();
		КонецЕсли;
	КонецЦикла;
	
	// Обработка вывода детальных записей
	Если ВыводитьДетальныеЗаписи И (ТипСтруктуры = "Строки" ИЛИ ТипСтруктуры = "ПоляГруппировки") Тогда
		Если ТипСтруктуры = "ПоляГруппировки" Тогда
			НоваяСтрока = НоваяСтрока.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Иначе
			Если ТипЗнч(НоваяСтрока) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
				НоваяСтрока = НоваяСтрока.Структура.Добавить();
			Иначе
				НоваяСтрока = НоваяСтрока.Добавить();
			КонецЕсли;
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьАвтоВыбранноеПоле(НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ЗаполнитьКомпоновщикНастроекОтчета(СтарыйТипСтрок = Неопределено, СтарыйТипКолонок = Неопределено, НовыйТипЭлемента = Неопределено)
	
	ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	// Настройки компоновщика отчета
	Элемент = КомпоновщикНастроек.Настройки.Структура[0];
	ТипЭлемента = ТипЗнч(Элемент);
	
	ЭлементОтчета = ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Добавить(ТипЭлемента);
	Если ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда
		ТиповыеОтчеты.ДобавитьАвтоВыбранноеПоле(ЭлементОтчета);
	КонецЕсли;
	
	// Скопируем настройки в компоновщик из компоновщика отчета
	ТиповыеОтчеты.СкопироватьЭлементы(ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор, КомпоновщикНастроек.Настройки.Выбор);
	ТиповыеОтчеты.СкопироватьЭлементы(ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор, КомпоновщикНастроек.Настройки.Отбор);
	ТиповыеОтчеты.СкопироватьЭлементы(ОтчетОбъект.КомпоновщикНастроек.Настройки.Порядок, КомпоновщикНастроек.Настройки.Порядок);
	ТиповыеОтчеты.СкопироватьЭлементы(ОтчетОбъект.КомпоновщикНастроек.Настройки.УсловноеОформление, КомпоновщикНастроек.Настройки.УсловноеОформление, Ложь);
	ТиповыеОтчеты.СкопироватьЭлементы(ОтчетОбъект.КомпоновщикНастроек.Настройки.ПользовательскиеПоля, КомпоновщикНастроек.Настройки.ПользовательскиеПоля);
	ТиповыеОтчеты.ЗаполнитьЭлементы(ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных, КомпоновщикНастроек.Настройки.ПараметрыДанных);
	ТиповыеОтчеты.ЗаполнитьЭлементы(ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода, КомпоновщикНастроек.Настройки.ПараметрыВывода);
	
	Если ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") Тогда
		
		ДобавитьГруппировки(ЭлементОтчета, Элемент, "ПоляГруппировки");
		
	ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		ДобавитьГруппировки(ЭлементОтчета, Элемент, "Строки");
		ДобавитьГруппировки(ЭлементОтчета, Элемент, "Колонки");
				
	ИначеЕсли ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		ДобавитьГруппировки(ЭлементОтчета, Элемент, "Серии");
		ДобавитьГруппировки(ЭлементОтчета, Элемент, "Точки");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредставлениеЭлементаОтчетаПриИзменении(НовоеПредставление)
	
	СтароеПредставление = ТиповыеОтчеты.ПолучитьПредставлениеПоЭлементуСтруктуры(КомпоновщикНастроек.Настройки.Структура[0]);
	Если СтароеПредставление = НовоеПредставление Тогда
		Возврат;
	КонецЕсли;
	
	НовыйТипЭлемента = ТиповыеОтчеты.ПолучитьТипЭлементаПоПредставлению(НовоеПредставление);
	НовыйЭлемент = КомпоновщикНастроек.Настройки.Структура.Добавить(НовыйТипЭлемента);
	Если НовоеПредставление = Перечисления.ПредставленияЭлементовОтчетов.Диаграмма Тогда
		ТиповыеОтчеты.ДобавитьАвтоВыбранноеПоле(НовыйЭлемент);
	КонецЕсли;
	
	Если СтароеПредставление = Перечисления.ПредставленияЭлементовОтчетов.Таблица Тогда
		СтруктураСтрок = КомпоновщикНастроек.Настройки.Структура[0];
		СтруктураКолонок = Неопределено;
	ИначеЕсли СтароеПредставление = Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица Тогда
		СтруктураСтрок = КомпоновщикНастроек.Настройки.Структура[0].Строки[0];
		СтруктураКолонок = КомпоновщикНастроек.Настройки.Структура[0].Колонки[0];
	ИначеЕсли СтароеПредставление = Перечисления.ПредставленияЭлементовОтчетов.Диаграмма Тогда
		СтруктураСтрок = КомпоновщикНастроек.Настройки.Структура[0].Серии[0];
		СтруктураКолонок = КомпоновщикНастроек.Настройки.Структура[0].Точки[0];
	КонецЕсли;
	
	Если НовоеПредставление = Перечисления.ПредставленияЭлементовОтчетов.Таблица Тогда
		
		Группировки = НовыйЭлемент;
		ТиповыеОтчеты.СкопироватьНастройкиКомпоновкиДанных(Группировки, СтруктураСтрок);
		ЭлементыФормы.НастройкиСкрытыеГруппировкиСтрок.ТекущаяСтрока = Группировки;
		
	ИначеЕсли НовоеПредставление = Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица Тогда
		
		Группировки = НовыйЭлемент.Строки.Добавить();
		ТиповыеОтчеты.СкопироватьНастройкиКомпоновкиДанных(Группировки, СтруктураСтрок);
		ЭлементыФормы.НастройкиСкрытыеГруппировкиСтрок.ТекущаяСтрока = Группировки;
		
		Группировки = НовыйЭлемент.Колонки.Добавить();
		ТиповыеОтчеты.СкопироватьНастройкиКомпоновкиДанных(Группировки, СтруктураКолонок);
		ЭлементыФормы.НастройкиСкрытыеГруппировкиКолонок.ТекущаяСтрока = Группировки;
		
		Если ВыводитьДетальныеЗаписи тогда
			
			ЕстьДетальныеПоля = ложь;
			
			Для каждого Поле из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
				
				ПоляПроверки = КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.НайтиПоле(Поле.Поле);
				
				Если ПоляПроверки <> Неопределено и НЕ ПоляПроверки.Ресурс тогда
					
					ЕстьДетальныеПоля = истина;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
			ВыводитьДетальныеЗаписи = ЕстьДетальныеПоля И ВыводитьДетальныеЗаписи;
		
		КонецЕсли;
		
	ИначеЕсли НовоеПредставление = Перечисления.ПредставленияЭлементовОтчетов.Диаграмма Тогда
		
		Группировки = НовыйЭлемент.Серии.Добавить();
		ТиповыеОтчеты.СкопироватьНастройкиКомпоновкиДанных(Группировки, СтруктураСтрок);
		ЭлементыФормы.НастройкиСкрытыеГруппировкиСтрок.ТекущаяСтрока = Группировки;
		
		Группировки = НовыйЭлемент.Точки.Добавить();
		ТиповыеОтчеты.СкопироватьНастройкиКомпоновкиДанных(Группировки, СтруктураКолонок);
		ЭлементыФормы.НастройкиСкрытыеГруппировкиКолонок.ТекущаяСтрока = Группировки;
		
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.Структура.Удалить(КомпоновщикНастроек.Настройки.Структура[0]);
	
	ОбновитьЭлементыФормы();
   
КонецПроцедуры

Процедура ТабличноеПолеГруппировкиСтраницаТаблицаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДоступноеПолеКомпоновкиДанных")
		И (ПараметрыПеретаскивания.Значение[0].Ресурс 
		ИЛИ ПараметрыПеретаскивания.Значение[0].Родитель <> Неопределено
		И (ПараметрыПеретаскивания.Значение[0].Родитель.Поле = Новый ПолеКомпоновкиДанных("SystemFields")
		ИЛИ ПараметрыПеретаскивания.Значение[0].Родитель.Поле = Новый ПолеКомпоновкиДанных("DataParameters"))) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
		
КонецПроцедуры

Процедура КоманднаяПанельГруппировкиСтрокСтраницаТаблицаТранспонировать(Кнопка)
	
	// Сохраняем строки
	МассивСтрок = Новый Массив;
	Для каждого Группировка Из ЭлементыФормы.ТабличноеПолеГруппировкиСтрокСтраницаТаблица.Значение.Элементы Цикл
		МассивСтрок.Добавить(Группировка);
	КонецЦикла;
	
	// Очищаем строки
	ЭлементыФормы.ТабличноеПолеГруппировкиСтрокСтраницаТаблица.Значение.Элементы.Очистить();
	
	// Заполняем строки колонками
	Для каждого Группировка Из ЭлементыФормы.ТабличноеПолеГруппировкиКолонокСтраницаНеТаблица.Значение.Элементы Цикл
		НовыйЭлемент = ЭлементыФормы.ТабличноеПолеГруппировкиСтрокСтраницаТаблица.Значение.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Группировка);
	КонецЦикла;
	
	// Очищаем колонки
	ЭлементыФормы.ТабличноеПолеГруппировкиКолонокСтраницаНеТаблица.Значение.Элементы.Очистить();
	
	// Заполняем строки колонками
	Для каждого Группировка Из МассивСтрок Цикл
		НовыйЭлемент = ЭлементыФормы.ТабличноеПолеГруппировкиКолонокСтраницаНеТаблица.Значение.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Группировка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыДополнительнаяНастройка(Кнопка)
	
	ФормаДополнительнойНастройкиОтчета = ПолучитьОбщуюФорму("ФормаДополнительнойНастройкиОтчета", ЭтаФорма);
	ФормаДополнительнойНастройкиОтчета.ОтчетОбъект = ОтчетОбъект;
	ФормаДополнительнойНастройкиОтчета.ФормаОтчета = ВладелецФормы;
	ФормаДополнительнойНастройкиОтчета.ОткрытьМодально();

КонецПроцедуры

Процедура ОсновныеДействияФормыРасширеннаяНастройка(Кнопка)
	
	Ответ = Вопрос(НСтр("ru='После переключения в режим ""Расширенной настройки"" и сохранения настроек отчета переключится обратно';uk='Після перемикання в режим ""Розширеної настройки"" і збереження настройок звіту перемкнеться назад'") + Символы.ПС + НСтр("ru='в режим ""Простой настройки"" будет невозможно. Переключиться?';uk='у режим ""Простої настройки"" буде неможливо. Перемкнутися?'"), РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОтчетОбъект.РасширеннаяНастройка = Истина;
		СохранитьИЗакрыть();
		Если Не ТиповыеОтчеты.РедактироватьНастройкиТиповогоОтчета(ОтчетОбъект, ВладелецФормы) Тогда
			ОтчетОбъект.РасширеннаяНастройка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Если ВыводитьДетальныеЗаписи И НЕ ЕстьДетальныеПоля() тогда
		Предупреждение(НСтр("ru='В списке «Показатели и дополнительные поля» нет дополнительных полей или они не могут быть выведены в качестве дополнительных.';uk='У списку «Показники й додаткові поля» немає додаткових полів або вони не можуть бути виведені в якості додаткових.'"));
		Возврат;
	КонецЕсли;
	
	СохранитьИЗакрыть();
	
КонецПроцедуры

Процедура ТипДиаграммыПриИзменении(Элемент)
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ChartType"));
	ЗначениеПараметра.Значение = ТипДиаграммы;
	ЗначениеПараметра.Использование = Истина;
	
КонецПроцедуры

Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	ТиповыеОтчеты.НастроитьПериод(НастройкаПериода, НачалоПериода, КонецПериода);
	ТиповыеОтчеты.ОбновитьПараметрыПериодаПоФорме(КомпоновщикНастроек, ЭтаФорма);
	
КонецПроцедуры

Процедура ПолеВводаПериодПриИзменении(Элемент)
	
	ТиповыеОтчеты.ОбновитьПараметрыПериодаПоФорме(КомпоновщикНастроек, ЭтаФорма);
	
КонецПроцедуры

Процедура ФлажокОтображатьЗаголовокПриИзменении(Элемент)
	
	Если Элемент.Значение Тогда
		Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить;
	Иначе
		Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput")).Значение = Значение;
	
КонецПроцедуры

Процедура ФлажокВыводитьОбщиеИтогиПриИзменении(Элемент)
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("VerticalOverallPlacement"));
	Если Элемент.Значение Тогда
		ЗначениеПараметра.Значение = РасположениеИтоговКомпоновкиДанных.Конец;
	Иначе
		ЗначениеПараметра.Значение = РасположениеИтоговКомпоновкиДанных.Нет 
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеГруппировкиСтрокСтраницаТаблицаПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущаяКолонка.Имя = "Настройка" Тогда
		Сообщить(НСтр("ru='Настройка детальных полей группировки';uk='Настройка детальних полів групування'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПанельНастройкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитТекущуюСтраницуПанелиПереноса(ЭлементыФормы.ПанельНастройки.Страницы[ТекущаяСтраница]);
	ОбновитьКонтекстноеМенюДоступныхПолей();
	
КонецПроцедуры

Процедура УстановитТекущуюСтраницуПанелиПереноса(ТекущаяСтраница = Неопределено)
	
	Если ТекущаяСтраница = Неопределено Тогда
		ТекущаяСтраница = ЭлементыФормы.ПанельНастройки.ТекущаяСтраница;
	КонецЕсли;
		
	Если ТекущаяСтраница = ЭлементыФормы.ПанельНастройки.Страницы.СтруктураОтчета Тогда
		Если ЭлементыФормы.ПанельСтруктураОтчета.ТекущаяСтраница = ЭлементыФормы.ПанельСтруктураОтчета.Страницы.СтраницаТаблица Тогда
			КоличествоПолей = 2;
		Иначе
			КоличествоПолей = 3;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = ЭлементыФормы.ПанельНастройки.Страницы.ОтборИПорядок Тогда
		Если ЭлементыФормы.ПанельОтборПорядок.ТекущаяСтраница = ЭлементыФормы.ПанельОтборПорядок.Страницы.СтраницаБезПараметров Тогда
			КоличествоПолей = 2;
		Иначе
			КоличествоПолей = 3;
		КонецЕсли;
	Иначе
		КоличествоПолей = 0;
	КонецЕсли;
	
	ЭлементыФормы.ПанельПереноса.ТекущаяСтраница = ЭлементыФормы.ПанельПереноса.Страницы["Страница" + КоличествоПолей];
	
КонецПроцедуры

Процедура ПеренестиНажатие(Элемент)
	
	ПеренестиПоле(Элемент.Имя);
	
КонецПроцедуры

Функция ПолучитьТабличноеПолеПоНомеру(НомерТабличногоПоля)
	
		ТекущаяСтраницаНастройки = ЭлементыФормы.ПанельНастройки.ТекущаяСтраница;
	Если ТекущаяСтраницаНастройки = ЭлементыФормы.ПанельНастройки.Страницы.СтруктураОтчета Тогда
		Если ЭлементыФормы.ПанельСтруктураОтчета.ТекущаяСтраница = ЭлементыФормы.ПанельСтруктураОтчета.Страницы.СтраницаТаблица Тогда
			Если НомерТабличногоПоля = 1 Тогда
				ТабличноеПоле = ЭлементыФормы.ТабличноеПолеГруппировкиСтрокСтраницаТаблица;
			ИначеЕсли НомерТабличногоПоля = 2 Тогда
				ТабличноеПоле = ЭлементыФормы.ВыбранныеПоляСтраницаТаблица;
			КонецЕсли;
		Иначе
			Если НомерТабличногоПоля = 1 Тогда
				ТабличноеПоле = ЭлементыФормы.ТабличноеПолеГруппировкиСтрокСтраницаНеТаблица;
			ИначеЕсли НомерТабличногоПоля = 2 Тогда
				ТабличноеПоле = ЭлементыФормы.ТабличноеПолеГруппировкиКолонокСтраницаНеТаблица;
			ИначеЕсли НомерТабличногоПоля = 3 Тогда
				ТабличноеПоле = ЭлементыФормы.ВыбранныеПоляСтраницаНеТаблица;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраницаНастройки = ЭлементыФормы.ПанельНастройки.Страницы.ОтборИПорядок Тогда
		Если ЭлементыФормы.ПанельОтборПорядок.ТекущаяСтраница = ЭлементыФормы.ПанельОтборПорядок.Страницы.СтраницаБезПараметров Тогда
			Если НомерТабличногоПоля = 1 Тогда
				ТабличноеПоле = ЭлементыФормы.ТабличноеПолеОтборСтраницаБезПараметров;
			ИначеЕсли НомерТабличногоПоля = 2 Тогда
				ТабличноеПоле = ЭлементыФормы.ТабличноеПолеПорядокСтраницаБезПараметров;
			КонецЕсли;
		Иначе
			Если НомерТабличногоПоля = 1 Тогда
				ТабличноеПоле = ЭлементыФормы.ТабличноеПолеОтборСтраницаПараметры;
			ИначеЕсли НомерТабличногоПоля = 2 Тогда
				ТабличноеПоле = ЭлементыФормы.ТабличноеПолеПорядокСтраницаПараметры;
			ИначеЕсли НомерТабличногоПоля = 3 Тогда
				ТабличноеПоле = ЭлементыФормы.ТабличноеПолеПараметрыСтраницаПараметры;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТабличноеПоле;

КонецФункции

Процедура ПеренестиПоле(ИмяКоманды)
	
	Если Лев(ИмяКоманды, 5) = "Влево" Тогда
		Команда = "Удалить";
		НомерТабличногоПоля = Число(Сред(ИмяКоманды, 7,1));
	Иначе
		Команда = "Добавить";
		НомерТабличногоПоля = Число(Сред(ИмяКоманды, 8,1));
	КонецЕсли;
	
	ТабличноеПоле = ПолучитьТабличноеПолеПоНомеру(НомерТабличногоПоля);
	
	Если Команда = "Удалить" Тогда
		ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТабличноеПоле.Значение.Элементы.Удалить(ТекущиеДанные);
		КонецЕсли;
	Иначе
		ТекущиеДанныеДоступныеПоля = ЭлементыФормы.ТабличноеПолеДоступныеПоля.ТекущиеДанные;
		Если ТекущиеДанныеДоступныеПоля = Неопределено 
		 ИЛИ ТекущиеДанныеДоступныеПоля.Папка Тогда
			Возврат;
		КонецЕсли;
		ПолеДобавить = ТекущиеДанныеДоступныеПоля.Поле;
		ТипЭлемента = Неопределено;
		МожноДобавлять = ПолеДоступно(ПолеДобавить, ТабличноеПоле, ТипЭлемента);
		Если МожноДобавлять Тогда
			НовыйЭлемент = ТабличноеПоле.Значение.Элементы.Добавить(ТипЭлемента);
			Если ТипЭлемента = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				НовыйЭлемент.ЛевоеЗначение = ПолеДобавить;
			Иначе
				НовыйЭлемент.Поле = ПолеДобавить;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолеДоступно(Поле, ТабличноеПоле, ТипЭлемента = Неопределено)
	
	Если ТипЗнч(ТабличноеПоле.Значение) = Тип("ПоляГруппировкиКомпоновкиДанных") Тогда
		МожноДобавить = (ТабличноеПоле.Значение.ДоступныеПоляПолейГруппировок.НайтиПоле(Поле) <> Неопределено);
		ТипЭлемента = Тип("ПолеГруппировкиКомпоновкиДанных");
	ИначеЕсли ТипЗнч(ТабличноеПоле.Значение) = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
		МожноДобавить = (ТабличноеПоле.Значение.ДоступныеПоляВыбора.НайтиПоле(Поле) <> Неопределено);
		ТипЭлемента = Тип("ВыбранноеПолеКомпоновкиДанных");
	ИначеЕсли ТипЗнч(ТабличноеПоле.Значение) = Тип("ПорядокКомпоновкиДанных") Тогда
		МожноДобавить = (ТабличноеПоле.Значение.ДоступныеПоляПорядка.НайтиПоле(Поле) <> Неопределено);
		ТипЭлемента = Тип("ЭлементПорядкаКомпоновкиДанных");
	ИначеЕсли ТипЗнч(ТабличноеПоле.Значение) = Тип("ОтборКомпоновкиДанных") Тогда
		МожноДобавить = (ТабличноеПоле.Значение.ДоступныеПоляОтбора.НайтиПоле(Поле) <> Неопределено);
		ТипЭлемента = Тип("ЭлементОтбораКомпоновкиДанных");
	Иначе
		МожноДобавить = Ложь;
	КонецЕсли;
	
	Возврат МожноДобавить;
		
КонецФункции

Функция ЕстьДетальныеПоля()
	
	ЕстьДетальныеПоля = ложь;
	
	// получим список полей группировки
	ПоляГруппировки = ТиповыеОтчеты.ПолучитьПоляГруппировок(КомпоновщикНастроек);
	
	Для каждого Поле из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		
		ПолеПроверки = КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.НайтиПоле(Поле.Поле);
		
		Если ПолеПроверки <> Неопределено и НЕ ПолеПроверки.Ресурс тогда
			
			ЕстьДетальныеПоля = истина;
			
			// проверим присутсвует или детальное поле или его реквизит в группировке
			Для каждого ЗначениеПоля из ПоляГруппировки Цикл
				
				ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ЗначениеПоля.Значение);
				
				Если ПолеПроверки.Поле = ПолеКомпоновкиДанных тогда
					
					ЕстьДетальныеПоля = ложь;
					
				Иначе
					
					РодительПоля = ПолеПроверки.Родитель;
					
					Пока РодительПоля <> Неопределено Цикл
						
						Если РодительПоля.Поле = ПолеКомпоновкиДанных тогда
							
							ЕстьДетальныеПоля = ложь;
							
						КонецЕсли;
						
						РодительПоля = РодительПоля.Родитель;
						
					КонецЦикла
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьДетальныеПоля тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьДетальныеПоля;
	
КонецФункции

Процедура ОсновныеДействияФормыСформировать(Кнопка)
	
	Если ВыводитьДетальныеЗаписи И НЕ ЕстьДетальныеПоля() тогда
		Предупреждение(НСтр("ru='В списке «Показатели и дополнительные поля» нет дополнительных полей или они не могут быть выведены в качестве дополнительных.';uk='У списку «Показники й додаткові поля» немає додаткових полів або вони не можуть бути виведені в якості додаткових.'"));
		Возврат;
	КонецЕсли;
	
	СохранитьИЗакрыть(Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельДоступныеПоляПользовательскиеПоля(Кнопка)
	
	ТиповыеОтчеты.РедактироватьПользовательскиеПоля(КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ДобавитьКнопкуЕслиПолеДоступно(КоличествоТабличныеПолей, НомерТабличногоПоля, ТекстКудаДобавлять, Картинка = Неопределено)
	
	Если Картинка = Неопределено Тогда
		Картинка = БиблиотекаКартинок.ДобавитьЭлементСписка;
	КонецЕсли;
	Кнопки = ЭлементыФормы.КонекстноеМенюДоступныеПоля.Кнопки;
	Действие = Новый Действие("ПеренестиНажатие");
	Если ПолеДоступно(ЭлементыФормы.ТабличноеПолеДоступныеПоля.ТекущиеДанные.Поле, ПолучитьТабличноеПолеПоНомеру(НомерТабличногоПоля)) Тогда
		Кнопка = Кнопки.Добавить("Вправо" + КоличествоТабличныеПолей + НомерТабличногоПоля, ТипКнопкиКоманднойПанели.Действие, "Добавить поле " + ТекстКудаДобавлять, Действие);
		Кнопка.Картинка = Картинка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеДоступныеПоляПриАктивизацииСтроки(Элемент)
	
	ОбновитьКонтекстноеМенюДоступныхПолей();
	
КонецПроцедуры

Процедура ОбновитьКонтекстноеМенюДоступныхПолей()
	
	Кнопки = ЭлементыФормы.КонекстноеМенюДоступныеПоля.Кнопки;
	Кнопки.Очистить();
	
	Если ЭлементыФормы.ТабличноеПолеДоступныеПоля.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЭлементыФормы.ТабличноеПолеДоступныеПоля.ТекущиеДанные.Поле = Новый ПолеКомпоновкиДанных("UserFields") Тогда
		Действие = Новый Действие("КоманднаяПанельДоступныеПоляПользовательскиеПоля");
		Кнопка = Кнопки.Добавить("ПользовательскиеПоля", ТипКнопкиКоманднойПанели.Действие, "Настройка польз. полей", Действие);
		Кнопка.Картинка = БиблиотекаКартинок.ПользовательскиеПоля;
        Кнопка = Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
	КонецЕсли;	
 	Если  ЭлементыФормы.ТабличноеПолеДоступныеПоля.ТекущиеДанные.Папка Тогда 
		Возврат;
	КонецЕсли;
	
	Действие = Новый Действие("ПеренестиНажатие");
	Если ДиаграммаДоступна Тогда
		ТекстВДополнительныеПоля = "в показатели и дополнительные поля";
	Иначе
		ТекстВДополнительныеПоля = "дополнительные поля";
	КонецЕсли;
	
	Если ЭлементыФормы.ПанельНастройки.ТекущаяСтраница = ЭлементыФормы.ПанельНастройки.Страницы.СтруктураОтчета Тогда
		Если ЭлементыФормы.ПанельСтруктураОтчета.ТекущаяСтраница = ЭлементыФормы.ПанельСтруктураОтчета.Страницы.СтраницаТаблица Тогда
			ДобавитьКнопкуЕслиПолеДоступно(2, 1, "в строки", БиблиотекаКартинок.НоваяГруппировкаКомпоновкиДанных);
			ДобавитьКнопкуЕслиПолеДоступно(2, 2, ТекстВДополнительныеПоля, БиблиотекаКартинок.ДобавитьЭлементСписка);
		ИначеЕсли ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица Тогда
			ДобавитьКнопкуЕслиПолеДоступно(3, 1, "в строки", БиблиотекаКартинок.НоваяГруппировкаКомпоновкиДанных);
			ДобавитьКнопкуЕслиПолеДоступно(3, 2, "в колонки", БиблиотекаКартинок.НоваяГруппировкаКомпоновкиДанных);
			ДобавитьКнопкуЕслиПолеДоступно(3, 3, ТекстВДополнительныеПоля, БиблиотекаКартинок.ДобавитьЭлементСписка);
		Иначе
			ДобавитьКнопкуЕслиПолеДоступно(3, 1, "в серии", БиблиотекаКартинок.НоваяГруппировкаКомпоновкиДанных);
			ДобавитьКнопкуЕслиПолеДоступно(3, 2, "в точки", БиблиотекаКартинок.НоваяГруппировкаКомпоновкиДанных);
			ДобавитьКнопкуЕслиПолеДоступно(3, 3, ТекстВДополнительныеПоля, БиблиотекаКартинок.ДобавитьЭлементСписка);
		КонецЕсли;
	ИначеЕсли ЭлементыФормы.ПанельНастройки.ТекущаяСтраница = ЭлементыФормы.ПанельНастройки.Страницы.ОтборИПорядок Тогда
		Если ЭлементыФормы.ПанельОтборПорядок.ТекущаяСтраница = ЭлементыФормы.ПанельОтборПорядок.Страницы.СтраницаБезПараметров Тогда
			ДобавитьКнопкуЕслиПолеДоступно(2, 1, "в отбор", БиблиотекаКартинок.Отбор);
			ДобавитьКнопкуЕслиПолеДоступно(2, 2, "в упорядочивание", БиблиотекаКартинок.ПорядокКомпоновки);
		Иначе
			ДобавитьКнопкуЕслиПолеДоступно(3, 1, "в отбор", БиблиотекаКартинок.Отбор);
			ДобавитьКнопкуЕслиПолеДоступно(3, 2, "в упорядочивание", БиблиотекаКартинок.ПорядокКомпоновки);
		КонецЕсли;
	КонецЕсли;
	Если ЭлементыФормы.ТабличноеПолеДоступныеПоля.ТекущиеДанные.Родитель <> Неопределено 
	   И ЭлементыФормы.ТабличноеПолеДоступныеПоля.ТекущиеДанные.Родитель.Поле = Новый ПолеКомпоновкиДанных("UserFields") Тогда
		Для Каждого ПользовательскоеПоле Из КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы Цикл
			Если ПользовательскоеПоле.ПутьКДанным = Строка(ЭлементыФормы.ТабличноеПолеДоступныеПоля.ТекущиеДанные.Поле) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ТиповыеОтчеты.ПолучитьИмяФормыРедактированияПользовательскогоПоля(ПользовательскоеПоле) <> Неопределено Тогда
			Кнопка = Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			Кнопка = Кнопки.Добавить("ПользовательскоеПоле", ТипКнопкиКоманднойПанели.Действие, "Редактировать пользоват. поле ", Новый Действие("РедактироватьПользовательскоеПоле"));
			Кнопка.Картинка = БиблиотекаКартинок.ИзменитьЭлементСписка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РедактироватьПользовательскоеПоле(Кнопка)

	Для Каждого ПользовательскоеПоле Из КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы Цикл
		Если ПользовательскоеПоле.ПутьКДанным = Строка(ЭлементыФормы.ТабличноеПолеДоступныеПоля.ТекущиеДанные.Поле) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ИмяФормы = ТиповыеОтчеты.ПолучитьИмяФормыРедактированияПользовательскогоПоля(ПользовательскоеПоле);
	
	Конструктор = Обработки.КонструкторПользовательскихПолей.Создать();
	Форма = Конструктор.ПолучитьФорму(ИмяФормы, ЭтаФорма);
	Форма.КомпоновщикНастроек = КомпоновщикНастроек;
	Форма.ПользовательскоеПоле = ПользовательскоеПоле;
	Форма.Открыть();

КонецПроцедуры

Процедура РаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого Оформление Из ОформленияСтрок Цикл
		
		Если Не СтрокаИспользуется(Оформление.ДанныеСтроки) Тогда
			
			Оформление.ЦветТекста = НеИспользуемыйЦвет;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокаИспользуется(Знач Стр)

	Если ТипЗнч(Стр) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") ИЛИ
		ТипЗнч(Стр) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Используется = Истина;
			
	Пока Используется И Стр <> Неопределено Цикл
				
		Попытка 
			
			Используется = Стр.Использование;
					
		Исключение
			
		КонецПопытки;
				
		Попытка 
			
			Стр = Стр.Родитель;
			
		Исключение
			
			Прервать;
			
		КонецПопытки;
				
	КонецЦикла;
	
	Возврат Используется;
			
КонецФункции

Процедура УсловноеОформлениеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Поля.Элементы.Количество() = 0 Тогда
		
		ОформлениеСтроки.Ячейки.ОбластиДляКраткогоОтображенияЭлемента.Текст = НСтр("ru='<Все поля>';uk='<Всі поля>'");
		ОформлениеСтроки.Ячейки.ОбластиДляПодробногоОтображенияЭлемента.Текст = НСтр("ru='<Все поля>';uk='<Всі поля>'");
		
	КонецЕсли;
		
	Если ДанныеСтроки.Отбор.Элементы.Количество() = 0 Тогда
		
		ОформлениеСтроки.Ячейки.ОтборДляКраткогоОтображенияЭлемента.Текст = НСтр("ru='<Без условия>';uk='<Без умови>'");
		ОформлениеСтроки.Ячейки.ОтборДляПодробногоОтображенияЭлемента.Текст = НСтр("ru='<Без условия>';uk='<Без умови>'");
		
	КонецЕсли;
	
	ЦветФона = ДанныеСтроки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветФона"));
	Если ЦветФона.Использование Тогда
		
		ОформлениеСтроки.ЦветФона = ЦветФона.Значение;
		
	КонецЕсли;
	
	ЦветТекста = ДанныеСтроки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"));
	Если ЦветТекста.Использование Тогда
		
		ОформлениеСтроки.ЦветТекста = ЦветТекста.Значение;
		
	КонецЕсли;
	
	Шрифт = ДанныеСтроки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Шрифт"));
	Если Шрифт.Использование Тогда
		
		ОформлениеСтроки.Шрифт = Шрифт.Значение;
		
	КонецЕсли;
	
	Текст = ДанныеСтроки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Текст"));
	Если Текст.Использование Тогда
		
		ОформлениеСтроки.Ячейки.ОформлениеДляКраткогоОтображенияЭлемента.Текст = Текст.Значение;
		ОформлениеСтроки.Ячейки.ОформлениеДляПодробногоОтображенияЭлемента.Текст = Текст.Значение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеОтборПередНачаломИзменения(Элемент, Отказ)
	
	ТекущаяСтрока = ПолучитьТекущуюСтрокуОтбора();
	Если ТипЗнч(ТекущаяСтрока) = Тип("ОтборКомпоновкиДанных") 
	 ИЛИ ТипЗнч(ТекущаяСтрока) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
	 ИЛИ Не ПараметрыФормы.Свойство("ОбщийОтбор") Тогда
		Возврат
	КонецЕсли;
	
	Если ПараметрыФормы["ОбщийОтбор"][ТекущаяСтрока.ЛевоеЗначение] = Истина Тогда
		Вопрос(НСтр("ru='Поле входит в общий отбор!';uk='Поле входить у загальний відбір!'"), РежимДиалогаВопрос.ОК);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекущуюСтрокуОтбора()
	
	Если ЭлементыФормы.ПанельОтборПорядок.ТекущаяСтраница = ЭлементыФормы.ПанельОтборПорядок.Страницы.СтраницаБезПараметров Тогда
		ТекущаяСтрока = ЭлементыФормы.ТабличноеПолеОтборСтраницаБезПараметров.ТекущаяСтрока;
	Иначе
		ТекущаяСтрока = ЭлементыФормы.ТабличноеПолеОтборСтраницаПараметры.ТекущаяСтрока;
	КонецЕсли;
	
	Возврат ТекущаяСтрока;
	
КонецФункции

Процедура ТабличноеПолеОтборЛевоеЗначениеПриИзменении(Элемент)
	
	ТекущаяСтрока = ПолучитьТекущуюСтрокуОтбора();
	Если ТипЗнч(ТекущаяСтрока) = Тип("ОтборКомпоновкиДанных") 
	 ИЛИ ТипЗнч(ТекущаяСтрока) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
	 ИЛИ Не ПараметрыФормы.Свойство("ОбщийОтбор") Тогда
		Возврат
	КонецЕсли;
	
	Если ПараметрыФормы["ОбщийОтбор"][ТекущаяСтрока.ЛевоеЗначение] = Истина Тогда
		Вопрос(НСтр("ru='Поле входит в общий отбор!';uk='Поле входить у загальний відбір!'"), РежимДиалогаВопрос.ОК);
		ТекущаяСтрока.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеОтборПередУдалением(Элемент, Отказ)
	
	ТекущаяСтрока = ПолучитьТекущуюСтрокуОтбора();
	Если ТекущаяСтрока = Неопределено 
	 ИЛИ ТипЗнч(ТекущаяСтрока) = Тип("ОтборКомпоновкиДанных") 
	 ИЛИ ТипЗнч(ТекущаяСтрока) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
	 ИЛИ Не ПараметрыФормы.Свойство("ОбщийОтбор") Тогда
		Возврат
	КонецЕсли;
		
	Если ПараметрыФормы["ОбщийОтбор"][ТекущаяСтрока.ЛевоеЗначение] = Истина Тогда
		Вопрос(НСтр("ru='Поле входит в общий отбор!';uk='Поле входить у загальний відбір!'"), РежимДиалогаВопрос.ОК);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОформлениеПоказателейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ЦветМеньше.ЦветФона = ДанныеСтроки.ЦветМеньше;
	ОформлениеСтроки.Ячейки.ЦветРавно.ЦветФона = ДанныеСтроки.ЦветРавно;
	ОформлениеСтроки.Ячейки.ЦветБольше.ЦветФона = ДанныеСтроки.ЦветБольше;
	
КонецПроцедуры

Процедура ОформлениеПоказателейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока = ЭлементыФормы.ОформлениеПоказателей.ТекущаяСтрока;
	ТекущаяСтрока.ЦветМеньше = WebЦвета.Красный;
	ТекущаяСтрока.ЦветРавно = WebЦвета.Черный;
	ТекущаяСтрока.ЦветБольше = WebЦвета.Синий;
	
КонецПроцедуры

Процедура ФлажокОтрицательноеКраснымСтраницаОформлениеПоказателейПриИзменении(Элемент)
	
	УстановитьДоступностьОформленияПоказателей();
	
КонецПроцедуры

Процедура УстановитьДоступностьОформленияПоказателей()
	
	ЭлементыФормы.ОформлениеПоказателей.Доступность = Не ЭлементыФормы.ФлажокОтрицательноеКраснымСтраницаОформлениеПоказателей.Значение;
	
КонецПроцедуры

Процедура КоманднаяПанельЦветаДиаграммыОчистить(Кнопка)
	
	ЦветаДиаграммы.Очистить();
	
КонецПроцедуры

Процедура КоманднаяПанельЦветаДиаграммыОбновить(Кнопка)
	
	ОбновитьТаблицуЦветовСерий();

КонецПроцедуры

Процедура ОбновитьТаблицуЦветовСерий()
	
	Рисунки = ВладелецФормы.ЭлементыФормы.Результат.Рисунки;
	Для каждого Рисунок Из Рисунки Цикл
		Если ТипЗнч(Рисунок.Объект) <> Тип("Диаграмма") Тогда
			Продолжить;
		КонецЕсли;
		Серии = Рисунок.Объект.Серии;
		Для каждого Серия Из Серии Цикл
			СтруктураПоиска = Новый Структура("Текст", Серия.Текст);
			КоличествоСтрок = ЦветаДиаграммы.НайтиСтроки(СтруктураПоиска).Количество();
			Если КоличествоСтрок = 0 Тогда
				НоваяСтрока = ЦветаДиаграммы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Серия);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЦветаДиаграммыИнициализация()	
	
	Если ЦветаДиаграммы.Колонки.Количество() = 0 Тогда
		ЦветаДиаграммы = Новый ТаблицаЗначений;                         
		ЦветаДиаграммы.Колонки.Добавить("Текст",, "Значение");
		ЦветаДиаграммы.Колонки.Добавить("Цвет", Новый ОписаниеТипов("Цвет"));	
	КонецЕсли;
	
	ЭлементыФормы.ЦветаДиаграммы.СоздатьКолонки();
	ЭлементыФормы.ЦветаДиаграммы.Колонки.Цвет.Ширина = 13;
	ЭлементыФормы.ЦветаДиаграммы.Колонки.Цвет.ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
	ЭлементыФормы.ЦветаДиаграммы.Колонки.Цвет.ИзменятьНастройку = Ложь;
	ЭлементыФормы.ЦветаДиаграммы.Колонки.Текст.ТолькоПросмотр = Ложь;
	ЭлементыФормы.ЦветаДиаграммы.Колонки.Текст.ИзменятьНастройку = Ложь;
	Если ЦветаДиаграммы.Количество() = 0 Тогда
		ОбновитьТаблицуЦветовСерий();
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьКнопкиКонтекстногоМенюПоказатели(КоманднаяПанель)
	
	Действие  = Новый Действие("ДействиеВключитьВыключитьПапку");
	Для каждого ДоступноеПоле Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если ДоступноеПоле.Папка 
		   И ДоступноеПоле.Поле <> Новый ПолеКомпоновкиДанных("SystemFields")
		   И ДоступноеПоле.Поле <> Новый ПолеКомпоновкиДанных("DataParameters")
		   И ДоступноеПоле.Поле <> Новый ПолеКомпоновкиДанных("UserFields")
		   И ДоступноеПоле.Поле <> Новый ПолеКомпоновкиДанных("Периоды") Тогда
			Кнопка = КоманднаяПанель.Кнопки.Добавить("Включить" + ДоступноеПоле.Поле, ТипКнопкиКоманднойПанели.Действие, "Включить """ + ДоступноеПоле.Заголовок + """", Действие);
			Кнопка.Картинка = БиблиотекаКартинок.УстановитьФлажкиПапка;
			Кнопка = КоманднаяПанель.Кнопки.Добавить("Выключить" + ДоступноеПоле.Поле, ТипКнопкиКоманднойПанели.Действие, "Выключить """ + ДоступноеПоле.Заголовок + """", Действие);
			Кнопка.Картинка = БиблиотекаКартинок.СнятьФлажкиПапка;
		КонецЕсли;
	КонецЦикла;
	
	Кнопка = КоманднаяПанель.Кнопки.Добавить("Разделитель10", ТипКнопкиКоманднойПанели.Разделитель);
	Действие  = Новый Действие("ДействиеУстановитьПоУровню");
	Кнопка = КоманднаяПанель.Кнопки.Добавить("УстановитьПоУровнюГоризонтально", ТипКнопкиКоманднойПанели.Действие, "Установить по уровню ""Горизонтально""", Действие);
	Кнопка = КоманднаяПанель.Кнопки.Добавить("УстановитьПоУровнюВертикально", ТипКнопкиКоманднойПанели.Действие, "Установить по уровню ""Вертикально""", Действие);
	
КонецПроцедуры

Процедура ДействиеВключитьВыключитьПапку(Кнопка)
	
	Если Лев(Кнопка.Имя, 8) = "Включить" Тогда
		Использование = Истина;
		ПутьКДаннымПапки = Сред(Кнопка.Имя, 9);
	ИначеЕсли Лев(Кнопка.Имя, 9) = "Выключить" Тогда
		Использование = Ложь;
		ПутьКДаннымПапки = Сред(Кнопка.Имя, 10);
	КонецЕсли;	
	
	ВыбранныеПоля = ТиповыеОтчеты.ПолучитьВыбранныеПоля(КомпоновщикНастроек);
	Для каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
		Если Лев(Строка(ВыбранноеПоле.Поле), СтрДлина(ПутьКДаннымПапки)) = ПутьКДаннымПапки Тогда
			ВыбранноеПоле.Использование = Использование;
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

Процедура ТабличноеПолеДоступныеПоляПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Если ДанныеСтроки.Папка Тогда
			ПапкаСРесурсами = ДанныеСтроки.Элементы.Количество() > 0;
			Для каждого ДоступноеПоле Из ДанныеСтроки.Элементы Цикл
				Если Не ДоступноеПоле.Ресурс Тогда
					ПапкаСРесурсами = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ПапкаСРесурсами  Тогда
				ОформлениеСтроки.Ячейки.Заголовок.Картинка = БиблиотекаКартинок.ПапкаСРесурсами;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыбранныеПоляСтраницаТаблицаПриАктивизацииСтроки(Элемент)
	
	ОбновитьКонтекстноеМенюПоказателиУстановитьРасположение(Элемент);
	
КонецПроцедуры

Процедура ОбновитьКонтекстноеМенюПоказателиУстановитьРасположение(Элемент)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Если ТипЗнч(ТекущаяСтрока) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		Папка = Истина;
	Иначе
		Папка = Ложь;
	КонецЕсли;
	Если ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Таблица Тогда
		КоманднаяПанель = ЭлементыФормы.КоманднаяПанельСтраницаТаблицаПоказателиКонтекстноеМеню;
	Иначе
		КоманднаяПанель = ЭлементыФормы.КоманднаяПанельСтраницаНеТаблицаПоказателиКонтекстноеМеню;
	КонецЕсли;
	
	КоманднаяПанель.Кнопки.УстановитьПоУровнюГоризонтально.Доступность = Папка;
	КоманднаяПанель.Кнопки.УстановитьПоУровнюВертикально.Доступность = Папка;
	
КонецПроцедуры
	
Процедура ДействиеУстановитьПоУровню(Кнопка)
	
	Если Кнопка.Имя = "УстановитьПоУровнюГоризонтально" Тогда
		Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
	Иначе
		Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
	КонецЕсли;
	
	Если ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Таблица Тогда
		Элемент = ЭлементыФормы.ВыбранныеПоляСтраницаТаблица;
	Иначе
		Элемент = ЭлементыФормы.ВыбранныеПоляСтраницаНеТаблица;
	КонецЕсли;
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Уровень = ПолучитьУровеньВыбранногоПоля(ТекущаяСтрока);
	
	Для каждого Группа Из ТиповыеОтчеты.ПолучитьВыбранныеПоля(КомпоновщикНастроек, Истина) Цикл
		Если ПолучитьУровеньВыбранногоПоля(Группа) = Уровень Тогда
			Группа.Расположение = Расположение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьУровеньВыбранногоПоля(Знач ВыбранноеПоле) Экспорт
	
	Родитель = ВыбранноеПоле;
	Уровень = 0;
	Пока Родитель <> Неопределено Цикл
		Родитель = Родитель.Родитель;
		Уровень = Уровень + 1;
	КонецЦикла;
	
	Возврат Уровень;
	
КонецФункции




НеИспользуемыйЦвет = Новый Цвет(153, 153, 153);
