Перем мКоличествоЗагружаемыхОбъектов;
Перем мНомерЗагружаемогоОбъекта;
Перем мФормаПрогрессора;

// храним справочник для обновления
Перем мСправочникДляОбновления;
// храним исходное количество колонок в дереве
Перем мИсходноеКоличествоКолонок;
// переменная храни тип ссылки справочника
Перем мТипСсылкиСправочника;
Перем мТипКодаСправочника;

// имя справочника ИБ с которым идет работа
Перем мИмяСправочникаИБ;
Перем мИмяСправочникаДляПользователя;
Перем мМетаданныеСправочника;

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события формы ПередОткрытием
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ПустойЭлементСправочника = Неопределено Тогда
		Предупреждение(НСтр("ru='Не указано какой справочник загружать!';uk='Не вказано який довідник завантажувати!'"), 10);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	мМетаданныеСправочника = ПустойЭлементСправочника.Метаданные();
	мИмяСправочникаИБ = мМетаданныеСправочника.Имя;
	мИмяСправочникаДляПользователя = мМетаданныеСправочника.Синоним;
	
	// последний загружаемый путь к файлу надо открыть
	Если Не ПустаяСтрока(мИмяСправочникаИБ) Тогда
		ФайлДанных = ВосстановитьЗначение("ОбщаяФорма.ФормаЗагрузкиКлассификатораИзXML." + мИмяСправочникаИБ + ".ИмяФайлаЗагрузки");
	КонецЕсли;
	
	ДеревоГрупп.Колонки.Добавить("Код");
	ДеревоГрупп.Колонки.Добавить("Идентификатор");
	ДеревоГрупп.Колонки.Добавить("Наименование");
	
	ДеревоПолное.Колонки.Добавить("Код");
	ДеревоПолное.Колонки.Добавить("Идентификатор");
	ДеревоПолное.Колонки.Добавить("Наименование");
	
	ДеревоПолное.Колонки.Добавить("Пометка");
	ДеревоПолное.Колонки.Добавить("Представление");
	ДеревоПолное.Колонки.Добавить("ЭтоГруппа");
	
	мИсходноеКоличествоКолонок = ДеревоПолное.Колонки.Количество();
	
	// сначала считываем узел в котором описаны метаданные справочника
	мСправочникДляОбновления = Справочники[мИмяСправочникаИБ];
	мТипСсылкиСправочника = Тип("СправочникСсылка." + мИмяСправочникаИБ);
	мТипКодаСправочника = Тип(Строка(мМетаданныеСправочника.ТипКода));
	
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + "  """ + мИмяСправочникаДляПользователя + """"; 

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик нажатия кнопки УстановитьПометки командной панели формы
//
Процедура КоманднаяПанельУстановитьПометки(Кнопка)
	
	УстановитьПометки(ДеревоГрупп, 1);
	
КонецПроцедуры // КоманднаяПанельУстановитьПометки()

// Процедура - обработчик нажатия кнопки СнятьПометки командной панели формы
//
Процедура КоманднаяПанельСнятьПометки(Кнопка)
	
	УстановитьПометки(ДеревоГрупп, 0);
	
КонецПроцедуры // КоманднаяПанельСнятьПометки()

// Процедура - обработчик нажатия кнопки ЗагрузкаГрупп командной панели формы
//
Процедура ПрочитатьФайлНажатие(Кнопка)
	
	ЗагрузитьГруппы();
	
	Если Не ПустаяСтрока(мИмяСправочникаИБ) Тогда
		СохранитьЗначение("ОбщаяФорма.ФормаЗагрузкиКлассификатораИзXML." + мИмяСправочникаИБ + ".ИмяФайлаЗагрузки", ФайлДанных);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик изменения флажка в ДеревеГрупп
//
Процедура ДеревоГруппПриИзмененииФлажка(Элемент, Колонка)
	
	ТекСтрока = Элемент.ТекущаяСтрока;
	УстановитьПометкиВДереве(ТекСтрока);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки ЗагрузитьОтмеченные
//
Процедура Загрузить(Кнопка)
	
	мКоличествоЗагружаемыхОбъектов = 0;
	
	мФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	мФормаПрогрессора.НаименованиеОбработкиДанных = "Загрузка классификатора " + мИмяСправочникаДляПользователя;
	мФормаПрогрессора.Значение = 0;
	мФормаПрогрессора.КомментарийЗначения = "Построение списка загружаемых объектов ...";
	мФормаПрогрессора.Открыть();

	УстановитьПометкиВПолномДереве(ДеревоГрупп.Строки);
	
	мФормаПрогрессора.МаксимальноеЗначение = Цел(мКоличествоЗагружаемыхОбъектов/100);
	мФормаПрогрессора.КомментарийЗначения  = "Загрузка классификатора " + мИмяСправочникаДляПользователя + " ...";
	
	мНомерЗагружаемогоОбъекта = 0;

	ЗагрузитьСтроки(ДеревоПолное.Строки);
	
	мФормаПрогрессора.Закрыть();
	
КонецПроцедуры

// Процедура - обработчик начала выбора ФайлаДанных
//
Процедура ФайлаДанныхНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                  =	"Файл данных|*.xml";
	ДиалогВыбораФайла.Заголовок               =	НСтр("ru='Выберите файл';uk='Виберіть файл'");
	ДиалогВыбораФайла.ПредварительныйПросмотр =	Ложь;
	ДиалогВыбораФайла.Расширение              =	"xml";
	ДиалогВыбораФайла.ИндексФильтра           =	0;
	Если ПустаяСтрока(Элемент.Значение) Тогда
		ДиалогВыбораФайла.ПолноеИмяФайла = ИмяФайлаПоУмолчанию;
	Иначе	
		ДиалогВыбораФайла.ПолноеИмяФайла = Элемент.Значение;
	КонецЕсли;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	Ложь;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// УНИВЕРСАЛЬНЫЕ ПРОЦЕДУРЫ УСТАНОВКИ ПОМЕТОК ДЕРЕВА ЗНАЧЕНИЙ

// Определяет значение флага по составу пометок коллекции строк.
//
// Параметры:
//  Строки         - коллекция строк дерева значений
//
// Возвращаемое значение:
//  Число, значение флага
// 
Функция ОпределитьЗначениеФлага(Строки)

	НайденыИстина = Ложь;
	НайденыЛожь   = Ложь;

	Для каждого Строка из Строки.Строки Цикл
		Если Строка.Пометка = 2 Тогда
			Возврат 2;
		КонецЕсли;
		
		Если (НЕ НайденыИстина) И (Строка.Пометка) Тогда
			НайденыИстина = Истина;
		КонецЕсли;
		Если (НЕ НайденыЛожь) И (НЕ Строка.Пометка) Тогда
			НайденыЛожь = Истина;
		КонецЕсли;
	КонецЦикла;

	Если      (НайденыИстина) И (НайденыЛожь) Тогда
		Возврат 2;
	ИначеЕсли (НайденыИстина) И (НЕ НайденыЛожь) Тогда
		Возврат 1;
	ИначеЕсли (НЕ НайденыИстина) И (НайденыЛожь) Тогда
		Возврат 0;
	КонецЕсли;

КонецФункции // ОпределитьЗначениеФлага()

// Устанавливает пометку в вышестоящих элементах дерева
//
Процедура ОбходВерхнихУровней(ТекСтрока)

	ТекСтрока.Пометка = ОпределитьЗначениеФлага(ТекСтрока);
	
	Если Не ТекСтрока.Родитель = Неопределено Тогда
		ОбходВерхнихУровней(ТекСтрока.Родитель);
	КонецЕсли;
	
КонецПроцедуры // ОбходВерхнихУровней()

// Устанавливает пометку в подчиненных элементах дерева
//
Процедура ОбходНижнихУровней(ТекСтрока)
	
	Для Каждого Строка Из ТекСтрока.Строки Цикл
		Строка.Пометка = ТекСтрока.Пометка;
		ОбходНижнихУровней(Строка);
	КонецЦикла;
	
КонецПроцедуры // ОбходНижнихУровней()

// Устанавливает пометки в подчиненных строках и устанавливает пометку
// в текущей строке в зависимости от состава пометок в подчиненных строках.
// При значении параметра ИнтерактивнаяУстановкаПометок равным Истина
// возможна установка флага для строки с незаполненным источником.
//
// Параметры:
//  ТекСтрока                     - строка дерева значений
//  ИнтерактивнаяУстановкаПометок - флаг интерактивной установки пометки
// 
Процедура УстановитьПометкиВДереве(ТекСтрока) Экспорт

	ОбходНижнихУровней (ТекСтрока);
	Если Не ТекСтрока.Родитель = Неопределено Тогда
		ОбходВерхнихУровней(ТекСтрока.Родитель);
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкиВДереве()

// Процедура установки пометок в дереве
//
Процедура УстановитьПометки(Дерево, Пометка) Экспорт
	
	Для Каждого Строка Из Дерево.Строки Цикл
		Строка.Пометка = Пометка;
		Если Строка.Строки.Количество() > 0 Тогда
			УстановитьПометки(Строка, Пометка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьПометки()

// Процедура пересчитать значение пометок (установить третье состояние
// при изменении количества показателей)
//
Процедура ПересчетПометок(Дерево) Экспорт
	
	Для Каждого Узел Из Дерево.Строки Цикл
		
		Если Узел.Строки.Количество() = 0 Тогда
			Продолжить; // В оконечных элементах ничего не изменяем
		Иначе
			ПересчетПометок(Узел);
			Узел.Пометка = ОпределитьЗначениеФлага(Узел);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПересчетПометок()

// процедура все конечные строки дерева помечает так же как и их предка
Процедура ПометитьКонечныеСтрокиДерева(УзелДерева)
	
	Для Каждого СтрокаКонечногоДерева Из УзелДерева.Строки Цикл
		
		Если (НЕ СтрокаКонечногоДерева.ЭтоГруппа) И (СтрокаКонечногоДерева.Строки.Количество() = 0) Тогда
			
			СтрокаКонечногоДерева.Пометка = УзелДерева.Пометка;
			Если СтрокаКонечногоДерева.Пометка > 0 Тогда
				мКоличествоЗагружаемыхОбъектов = мКоличествоЗагружаемыхОбъектов + 1;			
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// Процедура помечает загружаемые в справочник объекты классификатора
//
Процедура УстановитьПометкиВПолномДереве(Строки)
	
	Для Каждого ТекСтрока из Строки Цикл
		СтрокаПолногоДерева = ДеревоПолное.Строки.Найти(ТекСтрока.Код,"Код",Истина);
		СтрокаПолногоДерева.Пометка = ТекСтрока.Пометка;
		Если СтрокаПолногоДерева.Пометка > 0 Тогда
			мКоличествоЗагружаемыхОбъектов = мКоличествоЗагружаемыхОбъектов + 1;
		КонецЕсли;
		
		// надо для всех строк полного дерева сдалать такую же отметку как у предка, при условии того , что это конечные строки дерева
		ПометитьКонечныеСтрокиДерева(СтрокаПолногоДерева);
       		
		УстановитьПометкиВПолномДереве(ТекСтрока.Строки);
	КонецЦикла;

КонецПроцедуры
 
// Процедура добавления реквизитов справочника в дерево значений
//
Процедура ДобавитьВДерево(Дерево, СтруктураДанных, ХранитьРеквизиты = Истина);

	Родитель = СтруктураДанных.Родитель;
	
	СтрокаРодителя = Дерево.Строки.Найти(Строка(Родитель.Ссылка.УникальныйИдентификатор()), "Идентификатор", Истина);
	Если СтрокаРодителя = Неопределено Тогда
		ТекСтрока = Дерево.Строки.Добавить();
	Иначе 
		ТекСтрока = СтрокаРодителя.Строки.Добавить();
	КонецЕсли;
	
	Если ХранитьРеквизиты Тогда
		
		Для Каждого СтрокаСтруктуры Из СтруктураДанных.Таблица Цикл
			ТекСтрока[СтрокаСтруктуры.ИмяЭлемента] = СтрокаСтруктуры.Значение;	
		КонецЦикла;
		ТекСтрока.ЭтоГруппа = СтруктураДанных.ЭтоГруппа;
		
	КонецЕсли;
	
	ТекСтрока.Код = СтруктураДанных.Код;
	ТекСтрока.Наименование = СтруктураДанных.Наименование;
	ТекСтрока.Пометка = Ложь;
	ТекСтрока.Представление = Строка(СтруктураДанных.Код) + "  " + СтруктураДанных.Наименование;
	ТекСтрока.Идентификатор = Строка(СтруктураДанных.Ссылка.УникальныйИдентификатор());
	
КонецПроцедуры

// функция создает в дереве нужные колонки и грохает ненужные
Функция СоздатьВДеревеКолонкиКлассификатора(Дерево, МетаданныеСправочника)
	
	КолонкиДерева = Дерево.Колонки;
	
	Для Сч = мИсходноеКоличествоКолонок По КолонкиДерева.Количество() - 1 Цикл
		КолонкиДерева.Удалить(мИсходноеКоличествоКолонок);	
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеСправочника.Реквизиты  Цикл
		Если Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
			КолонкиДерева.Добавить(Реквизит.Имя,,"1");	
		ИначеЕсли Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
			КолонкиДерева.Добавить(Реквизит.Имя,,"2");
		Иначе
			КолонкиДерева.Добавить(Реквизит.Имя,,"0");
		КонецЕсли
	КонецЦикла;
	
КонецФункции

// создаем структуры для работы
Функция СоздатьТаблицуГруппы()
	
	СтруктураДанных = Новый Структура;
		
	СтруктураДанных.Вставить("Ссылка", Неопределено);
	СтруктураДанных.Вставить("ЭтоГруппа", Неопределено);
	СтруктураДанных.Вставить("Родитель", Неопределено);
	СтруктураДанных.Вставить("ПометкаУдаления", Неопределено);
	СтруктураДанных.Вставить("Код", Неопределено);
	СтруктураДанных.Вставить("Наименование", Неопределено);
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("ИмяЭлемента");
	Таблица.Колонки.Добавить("ТипДанных");
	Таблица.Колонки.Добавить("Значение");
	
	СтруктураДанных.Вставить("Таблица", Таблица);
  
	Возврат СтруктураДанных;
	
КонецФункции


// процедура добавляет очередной реквизит в структуру данных
Процедура ДобавитьСтрокуВТаблицуРеквизитов(Таблица, Реквизит)
	
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.ИмяЭлемента =  Реквизит.Имя;
    СтрокаТаблицы.ТипДанных =  Реквизит.Тип.Типы()[0];
	
КонецПроцедуры

// определяем матаданные справочника
Процедура СчитатьМетаданныеСправочника(МетаданныеСправочника, СтруктураГрупп, СтруктураЭлемента)
	
	Для Каждого Реквизит Из МетаданныеСправочника.Реквизиты	Цикл
		
		Если Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Или Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента Тогда
			ДобавитьСтрокуВТаблицуРеквизитов(СтруктураГрупп.Таблица, Реквизит);
		КонецЕсли;
		
		Если Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Или Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента Тогда
			ДобавитьСтрокуВТаблицуРеквизитов(СтруктураЭлемента.Таблица, Реквизит);
	    КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// процедура переносит значения из одной структуры в другую
Процедура СчитатьЗначенияИзXML(Ссылка, ЭтоГруппа, ФайлЧтение, СтруктураПриемник)
	
	СтруктураПриемник.Ссылка = Ссылка;
	СтруктураПриемник.ЭтоГруппа = ЭтоГруппа;
	СтруктураПриемник.ПометкаУдаления = ПрочитатьXML(ФайлЧтение, Тип("Булево"));
	СтруктураПриемник.Родитель = ПрочитатьXML(ФайлЧтение, мТипСсылкиСправочника);
    СтруктураПриемник.Код = ПрочитатьXML(ФайлЧтение, мТипКодаСправочника);
	СтруктураПриемник.Наименование = ПрочитатьXML(ФайлЧтение, Тип("Строка"));

	Для Каждого СтрокаСтруктураПриемник из СтруктураПриемник.Таблица Цикл
		СтрокаСтруктураПриемник.Значение  = ПрочитатьXML(ФайлЧтение, СтрокаСтруктураПриемник.ТипДанных);	
	КонецЦикла;

КонецПроцедуры

// Процедура загрузки данных из XML
//
Процедура ЗагрузитьГруппы()
	
	ФайлЧтение =  Новый ЧтениеXML;
	ФайлЧтение.УстановитьСтроку("UTF-8");
	Если ПустаяСтрока(ФайлДанных) Тогда
		Сообщить(НСтр("ru='Не выбран файл данных справочника ';uk='Не вибраний файл даних довідника '") + мИмяСправочникаДляПользователя);
		Возврат;
	КонецЕсли;
	Попытка 
		ФайлЧтение.ОткрытьФайл(ФайлДанных);
	Исключение
		Сообщить(НСтр("ru='Ошибка при открытиии файла данных справочника ';uk='Помилка при відкритті файлу даних довідника '") + мИмяСправочникаДляПользователя);
		Возврат;
	КонецПопытки;
	
	ДеревоГрупп.Строки.Очистить();
	ДеревоПолное.Строки.Очистить();
	
	Попытка
		ФайлЧтение.Прочитать();
	Исключение
		Сообщить(НСтр("ru='Файла данных справочника ';uk='Файлу даних довідника '") + мИмяСправочникаДляПользователя + НСтр("ru=' поврежден';uk=' пошкоджений'"));
		Возврат;
	КонецПопытки;
	
	КоличествоОбъектовXML = 0;
	Если ФайлЧтение.ПрочитатьАтрибут()	Тогда
		КоличествоОбъектовXML = Число(ФайлЧтение.ПолучитьАтрибут("КоличествоЭлементов"));
	КонецЕсли;
		
	мФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	мФормаПрогрессора.Значение = 0;
	мФормаПрогрессора.МаксимальноеЗначение = Цел(КоличествоОбъектовXML/100);
	мФормаПрогрессора.КомментарийЗначения  = "Чтение файла данных";
	мФормаПрогрессора.НаименованиеОбработкиДанных = "Загрузка классификатора " + мИмяСправочникаДляПользователя;
	мФормаПрогрессора.Открыть();

	ТипаОбъектаXML = "CatalogObject." + мИмяСправочникаИБ;
	
	СтруктураГрупп = СоздатьТаблицуГруппы();
	СтруктураЭлемента = СоздатьТаблицуГруппы();
	СчитатьМетаданныеСправочника(мМетаданныеСправочника, СтруктураГрупп, СтруктураЭлемента);
	СоздатьВДеревеКолонкиКлассификатора(ДеревоПолное, мМетаданныеСправочника);
	
	ФайлЧтение.Прочитать();
	Сч = 0;
	Пока ВозможностьЧтенияXML(ФайлЧтение) Цикл
		
		ОбработкаПрерыванияПользователя();
		ТипXML = ПолучитьXMLТип(ФайлЧтение);
		// тот ли это объект
		Если ТипXML.ИмяТипа <> ТипаОбъектаXML Тогда
			ВызватьИсключение "Ошибка чтения объектов справочника из XML";	
		КонецЕсли;

		Попытка
			ФайлЧтение.Прочитать();
			Ссылка = ПрочитатьXML(ФайлЧтение, мТипСсылкиСправочника);
			ЭтоГруппа = ПрочитатьXML(ФайлЧтение, Тип("Булево"));
			// объект то читать не надо!!! Все руками!!!
			Если ЭтоГруппа Тогда
				СчитатьЗначенияИзXML(Ссылка, ЭтоГруппа, ФайлЧтение, СтруктураГрупп);
			Иначе
				СчитатьЗначенияИзXML(Ссылка, ЭтоГруппа, ФайлЧтение, СтруктураЭлемента);
			КонецЕсли;
			
		Исключение
			Сообщить(НСтр("ru='Файл данных не является справочником ';uk='Файл даних не є довідником '") + мИмяСправочникаДляПользователя);
			мФормаПрогрессора.Закрыть();
			Возврат;
		КонецПопытки;
		
		Если ЭтоГруппа Тогда
			
			ДобавитьВДерево(ДеревоГрупп, СтруктураГрупп, Ложь);
			ДобавитьВДерево(ДеревоПолное, СтруктураГрупп);
			
		Иначе
			ДобавитьВДерево(ДеревоПолное, СтруктураЭлемента);
		КонецЕсли;
		
		// Проверяем, что текущим узлом является КонецЭлемента
		Если ФайлЧтение.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
			ВызватьИсключение "Ошибка чтения XML";
		КонецЕсли;
			
		// Чтение следующего узла для завершение чтения элемента
		ФайлЧтение.Прочитать();
		
		Сч = Сч + 1;
		Если Сч%100 = 0 Тогда
			мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
			мФормаПрогрессора.КомментарийЗначения = "Обрабатывается " + Строка(Сч) + " объект из " + Строка(КоличествоОбъектовXML); 
		КонецЕсли;
			
	КонецЦикла;	
	
	ДеревоГрупп.Строки.Сортировать("Код", Истина);
	мФормаПрогрессора.Закрыть();
	
КонецПроцедуры

// Процедура загрузки данных из дерева в справочник
//
Процедура ЗагрузитьСтроки(Строки)
	
	Родитель = Неопределено;
	// Ищем родителя
	Если Строки.Родитель <> Неопределено Тогда
		Родитель = мСправочникДляОбновления.НайтиПоКоду(Строки.Родитель.Код);
		Если Не Родитель.Пустая() Тогда
			// наш справочник с иерархией групп и элементов
			// подчинение элементу не предусмотрено
			// для общего случая стоит переделать !!!
			Если Не Родитель.ЭтоГруппа Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Для НомСтроки = 0 по Строки.Количество()-1 Цикл
		
		ТекСтрока = Строки.Получить(НомСтроки);
		// а надо ли этот элемент то грузить
		Если ТекСтрока.Пометка =  Неопределено ИЛИ (ТекСтрока.Пометка = Ложь) Тогда
			Продолжить;
		КонецЕсли;
		
		// Сначала поищем по коду
		Ссылка = мСправочникДляОбновления.НайтиПоКоду(ТекСтрока.Код);
		Если Ссылка.Пустая() Тогда 
			// создаем новый объект
			Если ТекСтрока.ЭтоГруппа Тогда
				Объект = мСправочникДляОбновления.СоздатьГруппу();
			Иначе
				Объект = мСправочникДляОбновления.СоздатьЭлемент();
			КонецЕсли;	
			Объект.Код = ТекСтрока.Код;
		ИначеЕсли Ссылка.ЭтоГруппа = ТекСтрока.ЭтоГруппа Тогда
			// обновляем то,что уже хранится
			Если ЭлементыФормы.флПереписыватьОбъекты.Значение Тогда 
				Объект = Ссылка.ПолучитьОбъект();
			КонецЕсли;				
		Иначе
			// хранится элемент а у нас группа
			// ничего не делаем
			Сообщить(НСтр("ru='Элемент с кодом ';uk='Елемент з кодом '") + ТекСтрока.Код + НСтр("ru=' невозможно обновить!!!';uk=' неможливо оновити!!!'"));
			Продолжить;
		КонецЕсли;// Если Ссылка.Пустая() Тогда 
			
		Если мНомерЗагружаемогоОбъекта%100 = 0 Тогда
			мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
			мФормаПрогрессора.КомментарийЗначения = "Обрабатывается " + мНомерЗагружаемогоОбъекта + " объект из " + мКоличествоЗагружаемыхОбъектов;
		КонецЕсли;
		мНомерЗагружаемогоОбъекта = мНомерЗагружаемогоОбъекта + 1;
			
		Если Объект<> Неопределено Тогда
			// обновляем все остальные реквизиты
			Объект.Родитель 			   = Родитель;
			Объект.Наименование 		   = ТекСтрока.Наименование;
			
			// перекачиваем все значения
			Для Сч = мИсходноеКоличествоКолонок По ДеревоПолное.Колонки.Количество() - 1 Цикл
				Колонка = ДеревоПолное.Колонки[Сч]; 
				ИмяКолонки = Колонка.Имя; 
				Если (ТекСтрока.ЭтоГруппа И Колонка.Заголовок = "2") ИЛИ
					(НЕ ТекСтрока.ЭтоГруппа И Колонка.Заголовок = "1") Тогда
					Продолжить;
				КонецЕсли;
				
				Объект[ИмяКолонки] = ТекСтрока[ИмяКолонки];	
			КонецЦикла;
			
			Попытка 
				Объект.Записать();
            Исключение
				Сообщить(НСтр("ru='Ошибка при записи элемента с кодом ';uk='Помилка при запису елемента з кодом '") + ТекСтрока.Код + " !!!");
			КонецПопытки;
				
		КонецЕсли;//Если Объект<> Неопределено Тогда

		ОбработкаПрерыванияПользователя();
		ЗагрузитьСтроки(ТекСтрока.Строки);

	КонецЦикла;	//Для НомСтроки = 0 по Строки.Количество()-1 Цикл

КонецПроцедуры

// Открывает файл данных во внешнем приложении
//
// Параметры:
//  
Процедура ОткрытьВПриложении(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(Элемент.Значение);

КонецПроцедуры
